/*
 * This file was automatically generated by EvoSuite
 * Fri Apr 30 15:16:32 GMT 2021
 */

package org.apache.commons.lang3;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StringWriter;
import java.io.UnsupportedEncodingException;
import java.nio.ByteBuffer;
import java.nio.CharBuffer;
import java.nio.charset.Charset;
import java.nio.charset.IllegalCharsetNameException;
import java.nio.charset.UnsupportedCharsetException;
import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collection;
import java.util.Comparator;
import java.util.EnumSet;
import java.util.HashSet;
import java.util.Iterator;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.ListIterator;
import java.util.Locale;
import java.util.PriorityQueue;
import java.util.ServiceLoader;
import java.util.Set;
import java.util.SortedSet;
import java.util.Stack;
import java.util.TreeSet;
import java.util.Vector;
import java.util.function.Consumer;
import java.util.function.Supplier;
import java.util.regex.PatternSyntaxException;
import java.util.stream.Stream;
import org.apache.commons.lang3.StringUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class StringUtils_ESTest extends StringUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      String string0 = StringUtils.right("FW;]~`2^s_P6:NRY", (-2094));
      assertNotNull(string0);
      assertEquals("", string0);
      
      boolean boolean0 = StringUtils.isAllLowerCase("");
      assertFalse(boolean0);
      
      String string1 = StringUtils.abbreviate("", (-2094), (-3740));
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "";
      charSequenceArray0[2] = (CharSequence) "FW;]~`2^s_P6:NRY";
      charSequenceArray0[3] = (CharSequence) "";
      int int0 = StringUtils.lastIndexOfAny("", charSequenceArray0);
      assertEquals(4, charSequenceArray0.length);
      assertEquals(0, int0);
      
      String string2 = StringUtils.defaultString("");
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertEquals("", string2);
      
      String string3 = StringUtils.repeat("FW;]~`2^s_P6:NRY", 0);
      assertNotNull(string3);
      assertTrue(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string1));
      assertEquals("", string3);
      
      int int1 = StringUtils.countMatches((CharSequence) "", (CharSequence) "");
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      
      String string4 = StringUtils.leftPad((String) null, (-3740), "FW;]~`2^s_P6:NRY");
      assertNull(string4);
      
      int int2 = StringUtils.indexOfDifference(charSequenceArray0);
      assertEquals(4, charSequenceArray0.length);
      assertTrue(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals(0, int2);
      
      String string5 = StringUtils.join((List<?>) null, ';', (-1333), 0);
      assertNull(string5);
      
      boolean boolean1 = StringUtils.isAllLowerCase("");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      int int3 = StringUtils.countMatches((CharSequence) "FW;]~`2^s_P6:NRY", 'P');
      assertFalse(int3 == int0);
      assertFalse(int3 == int1);
      assertFalse(int3 == int2);
      assertEquals(1, int3);
      
      String string6 = StringUtils.join((List<?>) null, (String) null, 0, 0);
      assertNull(string6);
      
      String string7 = StringUtils.removeEnd("FW;]~`2^s_P6:NRY", "org.apache.commons.lang3.ObjectUtils$Null");
      assertNotNull(string7);
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string0));
      assertEquals("FW;]~`2^s_P6:NRY", string7);
      
      int int4 = StringUtils.getLevenshteinDistance(charSequenceArray0[0], (CharSequence) "org.apache.commons.lang3.ObjectUtils$Null", 2);
      assertEquals(4, charSequenceArray0.length);
      assertFalse(int4 == int3);
      assertFalse(int4 == int0);
      assertFalse(int4 == int1);
      assertFalse(int4 == int2);
      assertEquals((-1), int4);
      
      String string8 = StringUtils.unwrap((String) null, "");
      assertNull(string8);
      
      Locale locale0 = Locale.JAPAN;
      assertNotNull(locale0);
      assertEquals("ja_JP", locale0.toString());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("JP", locale0.getCountry());
      
      int int5 = StringUtils.getFuzzyDistance(charSequenceArray0[0], charSequenceArray0[1], locale0);
      assertEquals("ja_JP", locale0.toString());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("JP", locale0.getCountry());
      assertEquals(4, charSequenceArray0.length);
      assertFalse(int5 == int4);
      assertFalse(int5 == int3);
      assertTrue(int5 == int2);
      assertTrue(int5 == int0);
      assertTrue(int5 == int1);
      assertEquals(0, int5);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      String string0 = StringUtils.overlay("", "", (-1201), (-1201));
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.stripStart("", "offset cannot be negative");
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      
      String string2 = StringUtils.substringAfterLast("", (String) null);
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertEquals("", string2);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      String string0 = StringUtils.remove("#r", 'y');
      assertNotNull(string0);
      assertEquals("#r", string0);
      
      String string1 = StringUtils.wrapIfMissing(">H=I", "aZn'@f-+F@GLk?I");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("aZn'@f-+F@GLk?I>H=IaZn'@f-+F@GLk?I", string1);
      
      String string2 = StringUtils.removeEnd(" QC\"cbA(8H_7M<r&z", ">H=I");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals(" QC\"cbA(8H_7M<r&z", string2);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) " QC\"cbA(8H_7M<r&z", (CharSequence) "aZn'@f-+F@GLk?I", 8);
      assertEquals((-1), int0);
      
      String string3 = StringUtils.removeStart("1=%DS(kHwf\"GK", " ");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals("1=%DS(kHwf\"GK", string3);
      
      boolean boolean0 = StringUtils.isAllUpperCase("1=%DS(kHwf\"GK");
      assertFalse(boolean0);
      
      int int1 = StringUtils.lastIndexOfIgnoreCase((CharSequence) " QC\"cbA(8H_7M<r&z", (CharSequence) "1=%DS(kHwf\"GK", 9);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      String string4 = StringUtils.getCommonPrefix((String[]) null);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertEquals("", string4);
      
      String string5 = StringUtils.stripAccents(" ");
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertEquals(" ", string5);
      
      boolean boolean1 = StringUtils.isAlphanumericSpace(" ");
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      String string0 = StringUtils.wrapIfMissing("xxUjava.lang.Object@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.Object@50d3e7ejava.lang.Object@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.Object@50d3e7ejava.lang.Object@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.Object@50d3e7ejava.lang.Object@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.Object@50d3e7e", 'P');
      assertNotNull(string0);
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'P';
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "PxxUjava.lang.Object@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.Object@50d3e7ejava.lang.Object@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.Object@50d3e7ejava.lang.Object@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.Object@50d3e7ejava.lang.Object@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.Object@50d3e7eP", (CharSequence) "xxUjava.lang.Object@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.Object@50d3e7ejava.lang.Object@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.Object@50d3e7ejava.lang.Object@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.Object@50d3e7ejava.lang.Object@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.Object@50d3e7e");
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      String string0 = null;
      // Undeclared exception!
      try { 
        StringUtils.toString((byte[]) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "Exception cloning Cloneable type ";
      stringArray0[1] = "_g,L|tn-Xq";
      stringArray0[2] = "W5A05\"PlU2+DfS:Vb%!,";
      stringArray0[3] = "(7~w&";
      stringArray0[4] = "Exception cloning Cloneable type ";
      String string0 = StringUtils.normalizeSpace("h4nBy2JO+qTbU");
      assertNotNull(string0);
      assertEquals("h4nBy2JO+qTbU", string0);
      
      int int0 = StringUtils.lastIndexOfAny("_g,L|tn-Xq", stringArray0);
      assertEquals(5, stringArray0.length);
      assertEquals(0, int0);
      
      String string1 = StringUtils.joinWith("#^", stringArray0);
      assertNotNull(string1);
      assertEquals(5, stringArray0.length);
      assertFalse(string1.equals((Object)string0));
      assertEquals("Exception cloning Cloneable type #^_g,L|tn-Xq#^W5A05\"PlU2+DfS:Vb%!,#^(7~w&#^Exception cloning Cloneable type ", string1);
      
      int int1 = StringUtils.getLevenshteinDistance((CharSequence) "Exception cloning Cloneable type #^_g,L|tn-Xq#^W5A05\"PlU2+DfS:Vb%!,#^(7~w&#^Exception cloning Cloneable type ", (CharSequence) "h4nBy2JO+qTbU", 0);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      String string2 = StringUtils.deleteWhitespace("Exception cloning Cloneable type #^_g,L|tn-Xq#^W5A05\"PlU2+DfS:Vb%!,#^(7~w&#^Exception cloning Cloneable type ");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("ExceptioncloningCloneabletype#^_g,L|tn-Xq#^W5A05\"PlU2+DfS:Vb%!,#^(7~w&#^ExceptioncloningCloneabletype", string2);
      
      String string3 = StringUtils.leftPad("ExceptioncloningCloneabletype#^_g,L|tn-Xq#^W5A05\"PlU2+DfS:Vb%!,#^(7~w&#^ExceptioncloningCloneabletype", (-1), 'l');
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals("ExceptioncloningCloneabletype#^_g,L|tn-Xq#^W5A05\"PlU2+DfS:Vb%!,#^(7~w&#^ExceptioncloningCloneabletype", string3);
      
      Iterator<Locale.LanguageRange> iterator0 = (Iterator<Locale.LanguageRange>) mock(Iterator.class, new ViolatedAssumptionAnswer());
      int int2 = StringUtils.compare((String) null, "Exception cloning Cloneable type ", false);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(1, int2);
      
      boolean boolean0 = StringUtils.isAllLowerCase("Exception cloning Cloneable type ");
      assertFalse(boolean0);
      
      String string4 = StringUtils.getDigits("Bi");
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertEquals("", string4);
      
      String string5 = StringUtils.leftPad("(7~w&", 32, "ExceptioncloningCloneabletype#^_g,L|tn-Xq#^W5A05\"PlU2+DfS:Vb%!,#^(7~w&#^ExceptioncloningCloneabletype");
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertEquals("ExceptioncloningCloneablety(7~w&", string5);
      
      String string6 = StringUtils.removeStart("Exception cloning Cloneable type ", "', has a length less than 2");
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string1));
      assertEquals("Exception cloning Cloneable type ", string6);
      
      String string7 = StringUtils.difference("h4nBy2JO+qTbU", "Exception cloning Cloneable type ");
      assertNotNull(string7);
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string1));
      assertTrue(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string5));
      assertEquals("Exception cloning Cloneable type ", string7);
      
      LinkedList<CharBuffer> linkedList0 = new LinkedList<CharBuffer>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      String string8 = StringUtils.join((List<?>) linkedList0, "W{gF^x%B YDiq", 1674, 1674);
      assertNotNull(string8);
      assertEquals(0, linkedList0.size());
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string6));
      assertTrue(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string5));
      assertEquals("", string8);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = '[';
      charArray0[0] = '[';
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "", (CharSequence) "\n");
      assertEquals(1, int0);
      
      String string0 = StringUtils.wrap("S_`C", '[');
      assertNotNull(string0);
      assertEquals("[S_`C[", string0);
      
      int int1 = StringUtils.countMatches((CharSequence) "", (CharSequence) "[S_`C[");
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      String string1 = StringUtils.center((String) null, (-501));
      assertNull(string1);
      
      Object[] objectArray0 = new Object[8];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      objectArray0[1] = (Object) '[';
      objectArray0[2] = (Object) "";
      objectArray0[3] = (Object) null;
      objectArray0[4] = (Object) '[';
      objectArray0[5] = (Object) '[';
      objectArray0[6] = (Object) "\n";
      objectArray0[7] = (Object) null;
      String string2 = StringUtils.join(objectArray0, "@p~X\"PE7R)o&VP=y$eG");
      assertNotNull(string2);
      assertEquals(8, objectArray0.length);
      assertFalse(string2.equals((Object)string0));
      
      int int2 = StringUtils.indexOfIgnoreCase((CharSequence) "java.lang.Object@7d05b368@p~X\"PE7R)o&VP=y$eG[@p~X\"PE7R)o&VP=y$eG@p~X\"PE7R)o&VP=y$eG@p~X\"PE7R)o&VP=y$eG[@p~X\"PE7R)o&VP=y$eG[@p~X\"PE7R)o&VP=y$eG\n@p~X\"PE7R)o&VP=y$eG", (CharSequence) null, (-1277));
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals((-1), int2);
      
      boolean boolean0 = StringUtils.isEmpty((CharSequence) null);
      assertTrue(boolean0);
      
      int int3 = StringUtils.ordinalIndexOf("\n", (CharSequence) null, 520);
      assertFalse(int3 == int0);
      assertTrue(int3 == int2);
      assertFalse(int3 == int1);
      assertEquals((-1), int3);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      String string0 = StringUtils.trim("Z>yD=");
      assertNotNull(string0);
      assertEquals("Z>yD=", string0);
      
      String string1 = StringUtils.mid("Z>yD=", 18, 9);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      
      PriorityQueue<Integer> priorityQueue0 = new PriorityQueue<Integer>();
      assertNotNull(priorityQueue0);
      assertEquals(0, priorityQueue0.size());
      assertFalse(priorityQueue0.contains(18));
      
      String string2 = StringUtils.rightPad("", 18, "");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("                  ", string2);
      
      String string3 = StringUtils.chop("                  ");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals("                 ", string3);
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "                  ";
      String string4 = StringUtils.join(objectArray0, 'j');
      assertNotNull(string4);
      assertEquals(1, objectArray0.length);
      assertFalse(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertEquals("                  ", string4);
      
      int int0 = StringUtils.indexOf((CharSequence) "Z>yD=", (CharSequence) "", 18);
      assertEquals(5, int0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlphaSpace(" vs ");
      assertTrue(boolean0);
      
      boolean boolean1 = StringUtils.isEmpty(" vs ");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      char[] charArray0 = new char[7];
      charArray0[0] = '<';
      charArray0[1] = '*';
      charArray0[2] = ']';
      charArray0[3] = '<';
      charArray0[4] = '*';
      charArray0[5] = 'R';
      charArray0[6] = 'v';
      boolean boolean2 = StringUtils.containsOnly((CharSequence) "Lk;2dbd&", charArray0);
      assertEquals(7, charArray0.length);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
      assertArrayEquals(new char[] {'<', '*', ']', '<', '*', 'R', 'v'}, charArray0);
      
      boolean boolean3 = StringUtils.isAllUpperCase(" vs ");
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3);
      
      char[] charArray1 = new char[5];
      assertFalse(charArray1.equals((Object)charArray0));
      
      charArray1[0] = 'R';
      charArray1[1] = ']';
      charArray1[2] = 'R';
      charArray1[3] = '*';
      charArray1[4] = 'v';
      int int0 = StringUtils.indexOfAny((CharSequence) " vs ", charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(5, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertEquals(1, int0);
      assertArrayEquals(new char[] {'R', ']', 'R', '*', 'v'}, charArray1);
      
      String string0 = StringUtils.normalizeSpace((String) null);
      assertNull(string0);
      
      String string1 = StringUtils.stripEnd((String) null, (String) null);
      assertNull(string1);
      
      String string2 = StringUtils.wrapIfMissing("-", 'j');
      assertNotNull(string2);
      assertEquals("j-j", string2);
      
      boolean boolean4 = StringUtils.isWhitespace((CharSequence) null);
      assertTrue(boolean4 == boolean1);
      assertTrue(boolean4 == boolean2);
      assertFalse(boolean4 == boolean0);
      assertTrue(boolean4 == boolean3);
      assertFalse(boolean4);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = '[';
      charArray0[0] = '[';
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "", (CharSequence) "\n");
      assertEquals(1, int0);
      
      boolean boolean0 = StringUtils.isBlank("\n");
      assertTrue(boolean0);
      
      String string0 = StringUtils.left(";8OgI[{{ET>QC<6ml2", 5);
      assertNotNull(string0);
      assertEquals(";8OgI", string0);
      
      int int1 = StringUtils.indexOfDifference((CharSequence) ";8OgI", (CharSequence) ";8OgI[{{ET>QC<6ml2");
      assertFalse(int1 == int0);
      assertEquals(5, int1);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = '[';
      charArray0[2] = '[';
      boolean boolean0 = StringUtils.containsAny((CharSequence) "", charArray0);
      assertEquals(3, charArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new char[] {'[', '\u0000', '['}, charArray0);
      
      String string0 = StringUtils.substringAfter("", "");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.uncapitalize("");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      
      boolean boolean1 = StringUtils.containsOnly((CharSequence) "", charArray0);
      assertEquals(3, charArray0.length);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      assertArrayEquals(new char[] {'[', '\u0000', '['}, charArray0);
      
      String string2 = StringUtils.defaultIfEmpty("", (String) null);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertEquals("", string2);
      
      String string3 = StringUtils.substringAfter("$4'Tcj.*5", "");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals("$4'Tcj.*5", string3);
      
      boolean boolean2 = StringUtils.containsAny((CharSequence) "\n", charArray0);
      assertEquals(3, charArray0.length);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      assertArrayEquals(new char[] {'[', '\u0000', '['}, charArray0);
      
      String string4 = StringUtils.removeStart("', has a length less than 2", "$4'Tcj.*5");
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertEquals("', has a length less than 2", string4);
      
      String[] stringArray0 = StringUtils.substringsBetween("", " vs ", "ch");
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "', has a length less than 2", charArray0);
      assertEquals(3, charArray0.length);
      assertEquals(0, int0);
      assertArrayEquals(new char[] {'[', '\u0000', '['}, charArray0);
      
      boolean boolean3 = StringUtils.containsWhitespace("', has a length less than 2");
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      String string0 = StringUtils.EMPTY;
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.rightPad("", 10, '{');
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("{{{{{{{{{{", string1);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("", '{');
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      
      String string2 = StringUtils.firstNonBlank(stringArray0);
      assertNull(string2);
      assertEquals(0, stringArray0.length);
      
      String string3 = StringUtils.repeat("", "gD", (int) '{');
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("gDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgD", string3);
      
      char[] charArray0 = new char[6];
      charArray0[0] = '{';
      charArray0[1] = ']';
      charArray0[2] = '{';
      charArray0[3] = 'B';
      charArray0[4] = '{';
      charArray0[5] = '{';
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "{{{{{{{{{{", charArray0);
      assertEquals(6, charArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new char[] {'{', ']', '{', 'B', '{', '{'}, charArray0);
      
      boolean boolean1 = StringUtils.isAllUpperCase("gDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgD");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "gDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgD", charArray0);
      assertEquals(6, charArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new char[] {'{', ']', '{', 'B', '{', '{'}, charArray0);
      
      String string4 = StringUtils.join(charArray0, '{');
      assertNotNull(string4);
      assertEquals(6, charArray0.length);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertEquals("{{]{{{B{{{{", string4);
      assertArrayEquals(new char[] {'{', ']', '{', 'B', '{', '{'}, charArray0);
      
      double double0 = StringUtils.getJaroWinklerDistance("{{]{{{B{{{{", "{{]{{{B{{{{");
      assertEquals(1.0, double0, 0.01);
      
      String string5 = StringUtils.substringAfterLast((String) null, (-1185));
      assertNull(string5);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[0] = " vs ";
      String string0 = StringUtils.capitalize(" vs ");
      assertNotNull(string0);
      assertEquals(" vs ", string0);
      
      String string1 = StringUtils.wrap("d7Xxt`", 'U');
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("Ud7Xxt`U", string1);
      
      int int0 = StringUtils.countMatches((CharSequence) "d7Xxt`", (CharSequence) "d7Xxt`");
      assertEquals(1, int0);
      
      String string2 = StringUtils.center(" vs ", 1);
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals(" vs ", string2);
      
      int int1 = StringUtils.indexOfIgnoreCase((CharSequence) "Ud7Xxt`U", (CharSequence) " vs ", 1);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "Exception cloning Cloneable type ";
      stringArray0[1] = "_g,L|tn-Xq";
      String string0 = "W5A05\"PlU2+DfS:Vb%!,";
      stringArray0[2] = "W5A05\"PlU2+DfS:Vb%!,";
      stringArray0[3] = "(7~w&";
      stringArray0[4] = "rF2ZdptD9f";
      String string1 = StringUtils.getCommonPrefix(stringArray0);
      assertNotNull(string1);
      assertEquals(5, stringArray0.length);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      
      String string2 = StringUtils.normalizeSpace("h4nBy2JO+qTbU");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("h4nBy2JO+qTbU", string2);
      
      int int0 = StringUtils.lastIndexOfAny("_g,L|tn-Xq", stringArray0);
      assertEquals(5, stringArray0.length);
      assertEquals(0, int0);
      
      String string3 = "#^";
      String string4 = StringUtils.joinWith("#^", stringArray0);
      assertNotNull(string4);
      assertEquals(5, stringArray0.length);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertEquals("Exception cloning Cloneable type #^_g,L|tn-Xq#^W5A05\"PlU2+DfS:Vb%!,#^(7~w&#^rF2ZdptD9f", string4);
      
      int int1 = StringUtils.getLevenshteinDistance((CharSequence) "Exception cloning Cloneable type #^_g,L|tn-Xq#^W5A05\"PlU2+DfS:Vb%!,#^(7~w&#^rF2ZdptD9f", (CharSequence) "h4nBy2JO+qTbU", 0);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      String string5 = StringUtils.deleteWhitespace("Exception cloning Cloneable type #^_g,L|tn-Xq#^W5A05\"PlU2+DfS:Vb%!,#^(7~w&#^rF2ZdptD9f");
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertEquals("ExceptioncloningCloneabletype#^_g,L|tn-Xq#^W5A05\"PlU2+DfS:Vb%!,#^(7~w&#^rF2ZdptD9f", string5);
      
      String string6 = StringUtils.leftPad("ExceptioncloningCloneabletype#^_g,L|tn-Xq#^W5A05\"PlU2+DfS:Vb%!,#^(7~w&#^rF2ZdptD9f", (-1), 'l');
      assertNotNull(string6);
      assertTrue(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string4));
      assertEquals("ExceptioncloningCloneabletype#^_g,L|tn-Xq#^W5A05\"PlU2+DfS:Vb%!,#^(7~w&#^rF2ZdptD9f", string6);
      
      Iterator<Locale.LanguageRange> iterator0 = (Iterator<Locale.LanguageRange>) mock(Iterator.class, new ViolatedAssumptionAnswer());
      doReturn(true, false).when(iterator0).hasNext();
      doReturn((Object) null).when(iterator0).next();
      String string7 = StringUtils.join(iterator0, 'l');
      assertNotNull(string7);
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string6));
      assertEquals("", string7);
      
      String string8 = null;
      boolean boolean0 = false;
      int int2 = StringUtils.compare(string8, stringArray0[0], boolean0);
      assertEquals(5, stringArray0.length);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(1, int2);
      
      String string9 = "Vi1hRBfn[Q.%<%C)@#";
      String string10 = StringUtils.difference(string0, string9);
      assertNotNull(string10);
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string5));
      assertFalse(string0.equals((Object)string4));
      assertFalse(string0.equals((Object)string9));
      assertFalse(string0.equals((Object)string7));
      assertFalse(string0.equals((Object)string6));
      assertFalse(string9.equals((Object)string0));
      assertFalse(string9.equals((Object)string6));
      assertFalse(string9.equals((Object)string4));
      assertFalse(string9.equals((Object)string3));
      assertFalse(string9.equals((Object)string1));
      assertFalse(string9.equals((Object)string5));
      assertFalse(string9.equals((Object)string7));
      assertFalse(string9.equals((Object)string2));
      assertFalse(string10.equals((Object)string0));
      assertFalse(string10.equals((Object)string6));
      assertFalse(string10.equals((Object)string5));
      assertFalse(string10.equals((Object)string7));
      assertFalse(string10.equals((Object)string2));
      assertFalse(string10.equals((Object)string3));
      assertFalse(string10.equals((Object)string4));
      assertFalse(string10.equals((Object)string1));
      assertEquals("Vi1hRBfn[Q.%<%C)@#", string10);
      
      String string11 = "VT76I%Sr''6AGe(yW\"urf[\\MY-<|Hi\"bA:(";
      int int3 = 1114111;
      // Undeclared exception!
      try { 
        StringUtils.abbreviate(string11, string10, int3, int2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum abbreviation width is 20
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      String[] stringArray0 = StringUtils.split(", Length: 0");
      assertNotNull(stringArray0);
      assertEquals(3, stringArray0.length);
      
      Locale locale0 = Locale.CANADA;
      assertNotNull(locale0);
      assertEquals("en", locale0.getLanguage());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("en_CA", locale0.toString());
      assertEquals("CA", locale0.getCountry());
      
      String[] stringArray1 = Locale.getISOCountries();
      assertNotNull(stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(250, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      String string0 = StringUtils.chomp("VT76I%Sr''6AGe(yW\"u");
      assertNotNull(string0);
      assertEquals("VT76I%Sr''6AGe(yW\"u", string0);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 16;
      doubleArray0[1] = (double) 16;
      doubleArray0[2] = (double) 16;
      doubleArray0[3] = (double) 16;
      doubleArray0[4] = (double) 16;
      doubleArray0[5] = (double) 16;
      doubleArray0[6] = (double) 16;
      doubleArray0[7] = (double) 16;
      String string1 = StringUtils.join(doubleArray0, 'U', 95, 16);
      assertNotNull(string1);
      assertEquals(8, doubleArray0.length);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertArrayEquals(new double[] {16.0, 16.0, 16.0, 16.0, 16.0, 16.0, 16.0, 16.0}, doubleArray0, 0.01);
      
      boolean boolean0 = StringUtils.isNumericSpace("VT76I%Sr''6AGe(yW\"u");
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        StringUtils.replaceEach("U2+DfS:V", stringArray0, stringArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Search and Replace array lengths don't match: 3 vs 250
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      boolean boolean0 = StringUtils.startsWith("US.^e:o_ufGpA", "US.^e:o_ufGpA");
      assertTrue(boolean0);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "\n", (CharSequence) "\n");
      assertEquals(0, int0);
      
      String string0 = StringUtils.removeEnd("e", "s`-mCa0u=]@|On8X7H27[2Or");
      assertNotNull(string0);
      assertEquals("e", string0);
      
      int int1 = StringUtils.getLevenshteinDistance((CharSequence) "\n", (CharSequence) "e", 0);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      String string1 = StringUtils.mid("e", (-1), (-1));
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      
      PriorityQueue<Integer> priorityQueue0 = new PriorityQueue<Integer>();
      assertNotNull(priorityQueue0);
      assertEquals(0, priorityQueue0.size());
      assertFalse(priorityQueue0.contains(int1));
      
      String string2 = StringUtils.rightPad(" 2=mf#ih7)QP<3", (-1), "Kv_jf`");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals(" 2=mf#ih7)QP<3", string2);
      
      String string3 = StringUtils.chop(" ");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals("", string3);
      
      boolean boolean1 = StringUtils.isNumericSpace("s`-mCa0u=]@|On8X7H27[2Or");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[7];
      charSequenceArray0[0] = (CharSequence) "a";
      charSequenceArray0[1] = (CharSequence) "a";
      String string0 = StringUtils.mid("a", 1, 1);
      assertNotNull(string0);
      assertEquals("", string0);
      
      charSequenceArray0[2] = (CharSequence) "";
      charSequenceArray0[3] = (CharSequence) "a";
      charSequenceArray0[4] = (CharSequence) "a";
      charSequenceArray0[5] = (CharSequence) "a";
      charSequenceArray0[6] = (CharSequence) "a";
      boolean boolean0 = StringUtils.endsWithAny("a", charSequenceArray0);
      assertEquals(7, charSequenceArray0.length);
      assertTrue(boolean0);
      
      int int0 = StringUtils.lastIndexOfAny(charSequenceArray0[4], charSequenceArray0);
      assertEquals(7, charSequenceArray0.length);
      assertEquals(1, int0);
      
      boolean boolean1 = StringUtils.isNumeric(charSequenceArray0[1]);
      assertEquals(7, charSequenceArray0.length);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "Exception cloning Cloneable type ";
      stringArray0[1] = "_g,L|tn-Xq";
      stringArray0[2] = "W5A05\"PlU2+DfS:Vb%!,";
      stringArray0[3] = "(7~w&";
      stringArray0[4] = "rF2ZdptD9f";
      String string0 = StringUtils.getCommonPrefix(stringArray0);
      assertNotNull(string0);
      assertEquals(5, stringArray0.length);
      assertEquals("", string0);
      
      String string1 = StringUtils.normalizeSpace("h4nBy2JO+qTbU");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("h4nBy2JO+qTbU", string1);
      
      int int0 = StringUtils.lastIndexOfAny("_g,L|tn-Xq", stringArray0);
      assertEquals(5, stringArray0.length);
      assertEquals(0, int0);
      
      String string2 = StringUtils.joinWith("#^", stringArray0);
      assertNotNull(string2);
      assertEquals(5, stringArray0.length);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("Exception cloning Cloneable type #^_g,L|tn-Xq#^W5A05\"PlU2+DfS:Vb%!,#^(7~w&#^rF2ZdptD9f", string2);
      
      int int1 = StringUtils.getLevenshteinDistance((CharSequence) "Exception cloning Cloneable type #^_g,L|tn-Xq#^W5A05\"PlU2+DfS:Vb%!,#^(7~w&#^rF2ZdptD9f", (CharSequence) "h4nBy2JO+qTbU", 0);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      String string3 = StringUtils.deleteWhitespace("Exception cloning Cloneable type #^_g,L|tn-Xq#^W5A05\"PlU2+DfS:Vb%!,#^(7~w&#^rF2ZdptD9f");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals("ExceptioncloningCloneabletype#^_g,L|tn-Xq#^W5A05\"PlU2+DfS:Vb%!,#^(7~w&#^rF2ZdptD9f", string3);
      
      String string4 = StringUtils.leftPad("ExceptioncloningCloneabletype#^_g,L|tn-Xq#^W5A05\"PlU2+DfS:Vb%!,#^(7~w&#^rF2ZdptD9f", (-1), 'l');
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string3));
      assertEquals("ExceptioncloningCloneabletype#^_g,L|tn-Xq#^W5A05\"PlU2+DfS:Vb%!,#^(7~w&#^rF2ZdptD9f", string4);
      
      Iterator<Locale.LanguageRange> iterator0 = (Iterator<Locale.LanguageRange>) mock(Iterator.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(iterator0).hasNext();
      String string5 = StringUtils.join(iterator0, 'l');
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertEquals("", string5);
      
      int int2 = StringUtils.compare((String) null, "Exception cloning Cloneable type ", false);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(1, int2);
      
      boolean boolean0 = StringUtils.isAllLowerCase("Exception cloning Cloneable type ");
      assertFalse(boolean0);
      
      String string6 = StringUtils.getDigits("Bi");
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string1));
      assertTrue(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string3));
      assertTrue(string6.equals((Object)string5));
      assertEquals("", string6);
      
      String string7 = StringUtils.substring("]l8", 1, 64);
      assertNotNull(string7);
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string1));
      assertEquals("l8", string7);
      
      String string8 = StringUtils.unwrap("W5A05\"PlU2+DfS:Vb%!,", "null/empty items");
      assertNotNull(string8);
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string0));
      assertEquals("W5A05\"PlU2+DfS:Vb%!,", string8);
      
      long[] longArray0 = new long[6];
      longArray0[0] = (long) 1;
      longArray0[1] = (long) 0;
      longArray0[2] = (long) 0;
      longArray0[3] = (long) 1;
      longArray0[4] = (long) 'l';
      longArray0[5] = (long) (-1);
      // Undeclared exception!
      try { 
        StringUtils.join(longArray0, 'l', (-1), 15);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      String string0 = StringUtils.repeat("", 12);
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = "\\.M,KjXgwsMU,";
      String string2 = StringUtils.normalizeSpace(".M,KjXgwsMU,");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals(".M,KjXgwsMU,", string2);
      
      String string3 = null;
      int int0 = StringUtils.compare((String) null, ".M,KjXgwsMU,", false);
      assertEquals(1, int0);
      
      String string4 = "Cannot clone Cloneable type ";
      String string5 = StringUtils.difference("Cannot clone Cloneable type ", "");
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertEquals("", string5);
      
      // Undeclared exception!
      try { 
        StringUtils.abbreviate("", "Cannot clone Cloneable type ", (-1028), 15);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum abbreviation width is 29
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      String string0 = StringUtils.trim("Z>yD=");
      assertNotNull(string0);
      assertEquals("Z>yD=", string0);
      
      String string1 = StringUtils.mid("Z>yD=", 18, 10);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      
      String string2 = StringUtils.rotate("neIWU73Gjc0]2b", (byte)104);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("eIWU73Gjc0]2bn", string2);
      
      String string3 = StringUtils.center("D;:iqzi5]UTi=Eo9kL", 18, "Z>yD=");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("D;:iqzi5]UTi=Eo9kL", string3);
      
      String string4 = StringUtils.capitalize("");
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string1));
      assertEquals("", string4);
      
      boolean boolean0 = StringUtils.isEmpty("neIWU73Gjc0]2b");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isWhitespace("D;:iqzi5]UTi=Eo9kL");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      String string0 = StringUtils.center("xxUjava.lang.Object@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.Object@50d3e7ejava.lang.Object@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.Object@50d3e7ejava.lang.Object@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.Object@50d3e7ejava.lang.Object@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.Object@50d3e7e", 34);
      assertNotNull(string0);
      
      String string1 = StringUtils.wrapIfMissing("xxUjava.lang.Object@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.Object@50d3e7ejava.lang.Object@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.Object@50d3e7ejava.lang.Object@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.Object@50d3e7ejava.lang.Object@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.Object@50d3e7e", 'P');
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[0] = (CharSequence) "xxUjava.lang.Object@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.Object@50d3e7ejava.lang.Object@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.Object@50d3e7ejava.lang.Object@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.Object@50d3e7ejava.lang.Object@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.Object@50d3e7e";
      char[] charArray0 = new char[2];
      charArray0[0] = 'P';
      charArray0[1] = ']';
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "PxxUjava.lang.Object@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.Object@50d3e7ejava.lang.Object@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.Object@50d3e7ejava.lang.Object@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.Object@50d3e7ejava.lang.Object@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.Object@50d3e7eP", charArray0);
      assertEquals(2, charArray0.length);
      assertEquals(1, int0);
      assertArrayEquals(new char[] {'P', ']'}, charArray0);
      
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.toString());
      assertEquals("UTF-8", charset0.name());
      
      // Undeclared exception!
      try { 
        Charset.isSupported("PxxUjava.lang.Object@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.Object@50d3e7ejava.lang.Object@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.Object@50d3e7ejava.lang.Object@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.Object@50d3e7ejava.lang.Object@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.Object@50d3e7eP");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // PxxUjava.lang.Object@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.Object@50d3e7ejava.lang.Object@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.Object@50d3e7ejava.lang.Object@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.Object@50d3e7ejava.lang.Object@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.Object@50d3e7eP
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = " vs ";
      String string0 = StringUtils.removeAll(" vs ", " vs ");
      assertNotNull(string0);
      assertEquals("", string0);
      
      double double0 = StringUtils.getJaroWinklerDistance("", "");
      assertEquals(0.0, double0, 0.01);
      
      boolean boolean0 = StringUtils.equalsAny(" vs ", stringArray0);
      assertEquals(5, stringArray0.length);
      assertTrue(boolean0);
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'p';
      charArray0[1] = '4';
      charArray0[2] = 'p';
      charArray0[3] = '4';
      int int0 = StringUtils.indexOfAnyBut((CharSequence) " vs ", charArray0);
      assertEquals(4, charArray0.length);
      assertEquals(0, int0);
      assertArrayEquals(new char[] {'p', '4', 'p', '4'}, charArray0);
      
      String string1 = StringUtils.join((Object[]) stringArray0, '4');
      assertNotNull(string1);
      assertEquals(5, stringArray0.length);
      assertFalse(string1.equals((Object)string0));
      assertEquals(" vs 4444", string1);
      
      String string2 = StringUtils.stripStart(" vs ", (String) null);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("vs ", string2);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) '4';
      String string3 = StringUtils.join(floatArray0, 'w', 0, (-113));
      assertNotNull(string3);
      assertEquals(1, floatArray0.length);
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals("", string3);
      assertArrayEquals(new float[] {52.0F}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[1] = 52;
      intArray0[2] = (-2935);
      intArray0[2] = (-2935);
      intArray0[4] = 2124;
      intArray0[5] = 987;
      String string0 = StringUtils.join(intArray0, 'S');
      assertNotNull(string0);
      assertEquals(6, intArray0.length);
      assertEquals("0S52S-2935S0S2124S987", string0);
      assertArrayEquals(new int[] {0, 52, (-2935), 0, 2124, 987}, intArray0);
      
      boolean boolean0 = StringUtils.endsWithIgnoreCase("0S52S-2935S0S2124S987", "0S52S-2935S0S2124S987");
      assertTrue(boolean0);
      
      double double0 = StringUtils.getJaroWinklerDistance("0S52S-2935S0S2124S987", "0S52S-2935S0S2124S987");
      assertEquals(1.0, double0, 0.01);
      
      CharSequence[] charSequenceArray0 = new CharSequence[7];
      charSequenceArray0[0] = (CharSequence) "0S52S-2935S0S2124S987";
      charSequenceArray0[1] = (CharSequence) "0S52S-2935S0S2124S987";
      charSequenceArray0[2] = (CharSequence) "0S52S-2935S0S2124S987";
      charSequenceArray0[3] = (CharSequence) "0S52S-2935S0S2124S987";
      charSequenceArray0[4] = (CharSequence) "0S52S-2935S0S2124S987";
      charSequenceArray0[5] = (CharSequence) "0S52S-2935S0S2124S987";
      boolean boolean1 = StringUtils.isAllLowerCase(charSequenceArray0[5]);
      assertEquals(7, charSequenceArray0.length);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      TreeSet<Integer> treeSet0 = new TreeSet<Integer>();
      assertNotNull(treeSet0);
      assertFalse(treeSet0.contains(52));
      
      Integer integer0 = new Integer(52);
      assertNotNull(integer0);
      assertEquals(52, (int)integer0);
      
      boolean boolean2 = StringUtils.isAsciiPrintable("0S52S-2935S0S2124S987");
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2);
      
      int int0 = StringUtils.length(charSequenceArray0[4]);
      assertEquals(7, charSequenceArray0.length);
      assertEquals(21, int0);
      
      double[] doubleArray0 = new double[18];
      doubleArray0[0] = (double) (-2935);
      String string1 = StringUtils.join(doubleArray0, '}', 8, 16);
      assertNotNull(string1);
      assertEquals(18, doubleArray0.length);
      assertFalse(string1.equals((Object)string0));
      assertEquals("0.0}0.0}0.0}0.0}0.0}0.0}0.0}0.0", string1);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[9];
      String string0 = StringUtils.toRootUpperCase("A9Tq`$@;qX+x ");
      assertNotNull(string0);
      assertEquals("A9TQ`$@;QX+X ", string0);
      
      charSequenceArray0[0] = (CharSequence) "A9TQ`$@;QX+X ";
      charSequenceArray0[1] = (CharSequence) "";
      charSequenceArray0[2] = (CharSequence) "";
      charSequenceArray0[3] = (CharSequence) "";
      charSequenceArray0[4] = (CharSequence) "";
      charSequenceArray0[5] = (CharSequence) "";
      charSequenceArray0[6] = (CharSequence) "";
      charSequenceArray0[7] = (CharSequence) "";
      charSequenceArray0[8] = (CharSequence) "";
      int int0 = StringUtils.indexOfAny((CharSequence) "", charSequenceArray0);
      assertEquals(9, charSequenceArray0.length);
      assertEquals(0, int0);
      
      int int1 = StringUtils.compareIgnoreCase("A9Tq`$@;qX+x ", "A9TQ`$@;QX+X ", true);
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      
      String string1 = StringUtils.wrapIfMissing("x2v_bX_J'F)Rfk?", '/');
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("/x2v_bX_J'F)Rfk?/", string1);
      
      boolean boolean0 = StringUtils.equals((CharSequence) null, charSequenceArray0[8]);
      assertEquals(9, charSequenceArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      String string0 = StringUtils.valueOf((char[]) null);
      assertNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[8];
      charSequenceArray0[0] = (CharSequence) null;
      charSequenceArray0[1] = (CharSequence) null;
      charSequenceArray0[2] = (CharSequence) null;
      charSequenceArray0[3] = (CharSequence) null;
      charSequenceArray0[4] = (CharSequence) null;
      charSequenceArray0[5] = (CharSequence) null;
      charSequenceArray0[6] = (CharSequence) null;
      charSequenceArray0[7] = (CharSequence) null;
      boolean boolean0 = StringUtils.endsWithAny((CharSequence) null, charSequenceArray0);
      assertEquals(8, charSequenceArray0.length);
      assertFalse(boolean0);
      
      String string1 = StringUtils.substringBefore("_", 1050);
      assertNotNull(string1);
      assertEquals("_", string1);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) 'o';
      floatArray0[1] = (float) 'o';
      floatArray0[2] = (float) 'o';
      floatArray0[0] = (float) 'o';
      floatArray0[4] = (float) 'o';
      String string0 = StringUtils.join(floatArray0, ' ');
      assertNotNull(string0);
      assertEquals(5, floatArray0.length);
      assertEquals("111.0 111.0 111.0 0.0 111.0", string0);
      assertArrayEquals(new float[] {111.0F, 111.0F, 111.0F, 0.0F, 111.0F}, floatArray0, 0.01F);
      
      String string1 = StringUtils.remove(";i=", 'o');
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals(";i=", string1);
      
      int int0 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      charSequenceArray0[2] = (CharSequence) "@~::fa|V#z;Iug &";
      charSequenceArray0[2] = (CharSequence) ";i=";
      String string2 = StringUtils.substringAfterLast("@~::fa|V#z;Iug &", "5");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("", string2);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)9977;
      String string3 = StringUtils.join(shortArray0, 'e');
      assertNotNull(string3);
      assertEquals(1, shortArray0.length);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals("9977", string3);
      assertArrayEquals(new short[] {(short)9977}, shortArray0);
      
      int int1 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "111.0 111.0 111.0 0.0 111.0", (CharSequence) "111.0 111.0 111.0 0.0 111.0", 76);
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      String string4 = StringUtils.center(";i=", 0, "9977");
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertEquals(";i=", string4);
      
      String string5 = StringUtils.rightPad(";i=", (int) (short)9977, ']');
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("vh[8me9^9q6", 'o');
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      String string6 = StringUtils.firstNonBlank(stringArray0);
      assertNotNull(string6);
      assertEquals(1, stringArray0.length);
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string3));
      assertEquals("vh[8me9^9q6", string6);
      
      String string7 = StringUtils.repeat("org.apache.commons.lang3.ArrayUtils", ";i=", 23);
      assertNotNull(string7);
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string5));
      assertEquals("org.apache.commons.lang3.ArrayUtils;i=org.apache.commons.lang3.ArrayUtils;i=org.apache.commons.lang3.ArrayUtils;i=org.apache.commons.lang3.ArrayUtils;i=org.apache.commons.lang3.ArrayUtils;i=org.apache.commons.lang3.ArrayUtils;i=org.apache.commons.lang3.ArrayUtils;i=org.apache.commons.lang3.ArrayUtils;i=org.apache.commons.lang3.ArrayUtils;i=org.apache.commons.lang3.ArrayUtils;i=org.apache.commons.lang3.ArrayUtils;i=org.apache.commons.lang3.ArrayUtils;i=org.apache.commons.lang3.ArrayUtils;i=org.apache.commons.lang3.ArrayUtils;i=org.apache.commons.lang3.ArrayUtils;i=org.apache.commons.lang3.ArrayUtils;i=org.apache.commons.lang3.ArrayUtils;i=org.apache.commons.lang3.ArrayUtils;i=org.apache.commons.lang3.ArrayUtils;i=org.apache.commons.lang3.ArrayUtils;i=org.apache.commons.lang3.ArrayUtils;i=org.apache.commons.lang3.ArrayUtils;i=org.apache.commons.lang3.ArrayUtils", string7);
      
      String string8 = StringUtils.abbreviate(string5, 0, 76);
      assertNotNull(string8);
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string6));
      assertFalse(string5.equals((Object)string7));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string4));
      assertEquals(";i=]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]...", string8);
      
      String string9 = StringUtils.stripToEmpty("@~::fa|V#z;Iug &");
      assertNotNull(string9);
      assertFalse(string9.equals((Object)string7));
      assertFalse(string9.equals((Object)string8));
      assertFalse(string9.equals((Object)string0));
      assertFalse(string9.equals((Object)string2));
      assertFalse(string9.equals((Object)string4));
      assertFalse(string9.equals((Object)string1));
      assertFalse(string9.equals((Object)string6));
      assertFalse(string9.equals((Object)string3));
      assertFalse(string9.equals((Object)string5));
      assertEquals("@~::fa|V#z;Iug &", string9);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      String string0 = StringUtils.wrap("", "");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String[] stringArray0 = new String[2];
      String string1 = StringUtils.join((Object[]) stringArray0, "");
      assertNotNull(string1);
      assertEquals(2, stringArray0.length);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      
      String string2 = StringUtils.join((float[]) null, ' ');
      assertNull(string2);
      
      String string3 = StringUtils.remove("_", '2');
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("_", string3);
      
      String string4 = StringUtils.substringAfterLast("{+2%zfduf", ";i=");
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertEquals("", string4);
      
      String string5 = StringUtils.center("V{}|i4R##s3d^u", (int) (short)9977, "Supplied value must be a valid byte literal between -32768 and 32767: [");
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      
      String string6 = StringUtils.capitalize("V{}|i4R##s3d^u");
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string0));
      assertEquals("V{}|i4R##s3d^u", string6);
      
      boolean boolean0 = StringUtils.isEmpty("V{}|i4R##s3d^u");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isWhitespace("");
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String string7 = StringUtils.deleteWhitespace("");
      assertNotNull(string7);
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string1));
      assertEquals("", string7);
      
      String string8 = StringUtils.left((String) null, 532);
      assertNull(string8);
      
      boolean boolean2 = StringUtils.isAlpha(string5);
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string7));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string6));
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      
      // Undeclared exception!
      StringUtils.rightPad(">h\"Gi)", (int) (short)9977, ' ');
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      String string0 = StringUtils.center("", 12);
      assertNotNull(string0);
      assertEquals("           ", string0);
      
      String[] stringArray0 = new String[2];
      String string1 = StringUtils.unwrap("java.lang.Object@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.Object@50d3e7ejava.lang.Object@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.Object@50d3e7ejava.lang.Object@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.Object@50d3e7ejava.lang.Object@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.Object@50d3e7e", 'j');
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      int int0 = StringUtils.indexOfAny((CharSequence) "java.lang.Object@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.Object@50d3e7ejava.lang.Object@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.Object@50d3e7ejava.lang.Object@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.Object@50d3e7ejava.lang.Object@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.Object@50d3e7e", (CharSequence[]) stringArray0);
      assertEquals(2, stringArray0.length);
      assertEquals((-1), int0);
      
      String string2 = StringUtils.joinWith("org.apache.commons.lang3.LocaleUtils", stringArray0);
      assertNotNull(string2);
      assertEquals(2, stringArray0.length);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("org.apache.commons.lang3.LocaleUtils", string2);
      
      String[] stringArray1 = StringUtils.split("", (String) null);
      assertNotNull(stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(1, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      boolean boolean0 = StringUtils.isMixedCase((CharSequence) null);
      assertFalse(boolean0);
      
      String string3 = StringUtils.replaceChars("]I*-Y5d!\"aso6XT*`nZ", (String) null, "E");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals("]I*-Y5d!\"aso6XT*`nZ", string3);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      String string4 = StringUtils.join((Object[]) stringArray1, 'K', 102, 6);
      assertNotNull(string4);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(1, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertEquals("", string4);
      
      String string5 = StringUtils.wrapIfMissing((String) null, "           ");
      assertNull(string5);
      
      String string6 = StringUtils.swapCase("Rx-^~ *MdI1V9n~-N98 Okv_bl>l'8Ukf.n|i");
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string4));
      assertEquals("rX-^~ *mDi1v9N~-n98 oKV_BL>L'8uKF.N|I", string6);
      
      int int1 = StringUtils.lastIndexOf((CharSequence) null, (CharSequence) "Rx-^~ *MdI1V9n~-N98 Okv_bl>l'8Ukf.n|i", 160);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      String string7 = StringUtils.toRootLowerCase("Z} ");
      assertNotNull(string7);
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string0));
      assertEquals("z} ", string7);
      
      String string8 = StringUtils.defaultIfBlank(", Length: 0", "E");
      assertNotNull(string8);
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string4));
      assertEquals(", Length: 0", string8);
      
      String string9 = StringUtils.difference("Rx-^~ *MdI1V9n~-N98 Okv_bl>l'8Ukf.n|i", "");
      assertNotNull(string9);
      assertFalse(string9.equals((Object)string2));
      assertFalse(string9.equals((Object)string3));
      assertTrue(string9.equals((Object)string4));
      assertFalse(string9.equals((Object)string7));
      assertFalse(string9.equals((Object)string6));
      assertFalse(string9.equals((Object)string0));
      assertFalse(string9.equals((Object)string1));
      assertFalse(string9.equals((Object)string8));
      assertEquals("", string9);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      String string0 = StringUtils.trimToEmpty(" vs ");
      assertNotNull(string0);
      assertEquals("vs", string0);
      
      boolean boolean0 = StringUtils.startsWithAny(" vs ", (CharSequence[]) null);
      assertFalse(boolean0);
      
      String string1 = StringUtils.wrapIfMissing(" vs ", "Object varargs must not be null");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("Object varargs must not be null vs Object varargs must not be null", string1);
      
      String string2 = StringUtils.leftPad("vs", (-254), 'k');
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertEquals("vs", string2);
      
      String string3 = StringUtils.substring(")f1n 1Dr", (-254), (-254));
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals("", string3);
      
      boolean boolean1 = StringUtils.isBlank("");
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String string4 = StringUtils.appendIfMissing("", "ch", (CharSequence[]) null);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertEquals("ch", string4);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)65;
      byteArray0[1] = (byte) (-40);
      byteArray0[2] = (byte) (-40);
      byteArray0[3] = (byte)16;
      byteArray0[4] = (byte)15;
      String string5 = StringUtils.toString(byteArray0, (String) null);
      assertNotNull(string5);
      assertEquals(5, byteArray0.length);
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertEquals("A\uFFFD\uFFFD\u0010\u000F", string5);
      assertArrayEquals(new byte[] {(byte)65, (byte) (-40), (byte) (-40), (byte)16, (byte)15}, byteArray0);
      
      String string6 = StringUtils.chop("nfN{L[,*b8UWBYIi6_'gu*=");
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string5));
      assertEquals("nfN{L[,*b8UWBYIi6_'gu*", string6);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      String string0 = StringUtils.remove("W~p/]:FDw`qEP(g{Xm", "W~p/]:FDw`qEP(g{Xm");
      assertNotNull(string0);
      assertEquals("", string0);
      
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "");
      assertNotNull(charBuffer0);
      assertEquals(0, charBuffer0.length());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.remaining());
      assertEquals(0, charBuffer0.limit());
      assertFalse(charBuffer0.hasRemaining());
      assertTrue(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.hasArray());
      assertEquals(0, charBuffer0.capacity());
      assertEquals("", charBuffer0.toString());
      
      CharBuffer charBuffer1 = charBuffer0.slice();
      assertNotNull(charBuffer1);
      assertNotSame(charBuffer0, charBuffer1);
      assertNotSame(charBuffer1, charBuffer0);
      assertEquals(0, charBuffer0.length());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.remaining());
      assertEquals(0, charBuffer0.limit());
      assertFalse(charBuffer0.hasRemaining());
      assertTrue(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.hasArray());
      assertEquals(0, charBuffer0.capacity());
      assertEquals("", charBuffer0.toString());
      assertEquals(0, charBuffer1.position());
      assertTrue(charBuffer1.isReadOnly());
      assertFalse(charBuffer1.hasArray());
      assertEquals("", charBuffer1.toString());
      assertFalse(charBuffer1.isDirect());
      assertEquals(0, charBuffer1.capacity());
      assertEquals(0, charBuffer1.length());
      assertEquals(0, charBuffer1.limit());
      assertFalse(charBuffer1.hasRemaining());
      assertEquals(0, charBuffer1.remaining());
      assertTrue(charBuffer1.equals((Object)charBuffer0));
      
      CharSequence[] charSequenceArray0 = new CharSequence[7];
      charSequenceArray0[0] = (CharSequence) charBuffer1;
      String string1 = StringUtils.removeFirst("", "");
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      
      charSequenceArray0[2] = (CharSequence) "";
      charSequenceArray0[5] = (CharSequence) charBuffer1;
      boolean boolean0 = StringUtils.isAllBlank(charSequenceArray0);
      assertEquals(7, charSequenceArray0.length);
      assertTrue(boolean0);
      
      String string2 = StringUtils.replaceOnceIgnoreCase("ouu))09wx;y5{S%wsK", "", ",OgH#.>iD>Z1y");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("ouu))09wx;y5{S%wsK", string2);
      
      String string3 = StringUtils.unwrap("", 'I');
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string0));
      assertEquals("", string3);
      
      boolean boolean1 = StringUtils.startsWith(charBuffer1, "W~p/]:FDw`qEP(g{Xm");
      assertNotSame(charBuffer0, charBuffer1);
      assertNotSame(charBuffer1, charBuffer0);
      assertEquals(0, charBuffer0.length());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.remaining());
      assertEquals(0, charBuffer0.limit());
      assertFalse(charBuffer0.hasRemaining());
      assertTrue(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.hasArray());
      assertEquals(0, charBuffer0.capacity());
      assertEquals("", charBuffer0.toString());
      assertEquals(0, charBuffer1.position());
      assertTrue(charBuffer1.isReadOnly());
      assertFalse(charBuffer1.hasArray());
      assertEquals("", charBuffer1.toString());
      assertFalse(charBuffer1.isDirect());
      assertEquals(0, charBuffer1.capacity());
      assertEquals(0, charBuffer1.length());
      assertEquals(0, charBuffer1.limit());
      assertFalse(charBuffer1.hasRemaining());
      assertEquals(0, charBuffer1.remaining());
      assertTrue(charBuffer0.equals((Object)charBuffer1));
      assertTrue(charBuffer1.equals((Object)charBuffer0));
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      int int0 = StringUtils.indexOfAny((CharSequence) charBuffer1, charSequenceArray0);
      assertNotSame(charBuffer0, charBuffer1);
      assertNotSame(charBuffer1, charBuffer0);
      assertEquals(0, charBuffer0.length());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.remaining());
      assertEquals(0, charBuffer0.limit());
      assertFalse(charBuffer0.hasRemaining());
      assertTrue(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.hasArray());
      assertEquals(0, charBuffer0.capacity());
      assertEquals("", charBuffer0.toString());
      assertEquals(0, charBuffer1.position());
      assertTrue(charBuffer1.isReadOnly());
      assertFalse(charBuffer1.hasArray());
      assertEquals("", charBuffer1.toString());
      assertFalse(charBuffer1.isDirect());
      assertEquals(0, charBuffer1.capacity());
      assertEquals(0, charBuffer1.length());
      assertEquals(0, charBuffer1.limit());
      assertFalse(charBuffer1.hasRemaining());
      assertEquals(0, charBuffer1.remaining());
      assertEquals(7, charSequenceArray0.length);
      assertTrue(charBuffer0.equals((Object)charBuffer1));
      assertTrue(charBuffer1.equals((Object)charBuffer0));
      assertEquals(0, int0);
      
      int int1 = StringUtils.compareIgnoreCase("ouu))09wx;y5{S%wsK", (String) null, false);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      String string4 = StringUtils.wrapIfMissing("", '5');
      assertNotNull(string4);
      assertTrue(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertEquals("", string4);
      
      boolean boolean2 = StringUtils.equals((CharSequence) "", (CharSequence) charBuffer0);
      assertNotSame(charBuffer0, charBuffer1);
      assertEquals(0, charBuffer0.length());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.remaining());
      assertEquals(0, charBuffer0.limit());
      assertFalse(charBuffer0.hasRemaining());
      assertTrue(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.hasArray());
      assertEquals(0, charBuffer0.capacity());
      assertEquals("", charBuffer0.toString());
      assertTrue(charBuffer0.equals((Object)charBuffer1));
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      String string0 = StringUtils.swapCase("/swe]");
      assertNotNull(string0);
      assertEquals("/SWE]", string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      charSequenceArray0[0] = (CharSequence) "/SWE]";
      charSequenceArray0[1] = (CharSequence) "/SWE]";
      charSequenceArray0[2] = (CharSequence) "/swe]";
      charSequenceArray0[3] = (CharSequence) "/SWE]";
      int int0 = StringUtils.indexOfAny((CharSequence) "/SWE]", charSequenceArray0);
      assertEquals(4, charSequenceArray0.length);
      assertEquals(0, int0);
      
      int int1 = StringUtils.compareIgnoreCase("/SWE]", (String) null, true);
      assertFalse(int1 == int0);
      assertEquals(1, int1);
      
      String string1 = StringUtils.wrapIfMissing("/swe]", '/');
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("/swe]/", string1);
      
      boolean boolean0 = StringUtils.equals((CharSequence) "/swe]/", charSequenceArray0[0]);
      assertEquals(4, charSequenceArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("vW]", 'z');
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      StringUtils stringUtils0 = new StringUtils();
      assertNotNull(stringUtils0);
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      
      long[] longArray0 = new long[4];
      longArray0[0] = (long) 'z';
      longArray0[1] = (-571L);
      longArray0[2] = (long) 'z';
      int int0 = StringUtils.indexOfAny((CharSequence) " ", " ");
      assertEquals(0, int0);
      
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "\r", "Threshold must not be negative");
      assertFalse(boolean0);
      
      String string0 = StringUtils.wrapIfMissing("p{InCombiningDiacriticalMarks}+", 'D');
      assertNotNull(string0);
      assertEquals("Dp{InCombiningDiacriticalMarks}+D", string0);
      
      String string1 = StringUtils.unwrap((String) null, "z?2i~ c}<c/`sb");
      assertNull(string1);
      
      boolean boolean1 = StringUtils.startsWith((CharSequence) null, (CharSequence) null);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String string2 = StringUtils.stripStart("vW]", "|w-E3i@A!/J;*;=/.J");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertEquals("vW]", string2);
      
      // Undeclared exception!
      try { 
        StringUtils.abbreviate("<^", "Vi[`=&g[GY9vk2", 10, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum abbreviation width is 15
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      String string0 = StringUtils.stripEnd("/", ")");
      assertNotNull(string0);
      assertEquals("/", string0);
      
      int int0 = StringUtils.lastOrdinalIndexOf("", "/", 4);
      assertEquals((-1), int0);
      
      String string1 = StringUtils.repeat("...", (-326));
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      
      int int1 = StringUtils.indexOfAny((CharSequence) "/", "/");
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      String string2 = ".8i~N@6D<z";
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "", ".8i~N@6D<z");
      assertTrue(boolean0);
      
      char char0 = 'Q';
      String string3 = StringUtils.wrapIfMissing((String) null, 'Q');
      assertNull(string3);
      
      boolean boolean1 = StringUtils.startsWith((CharSequence) null, (CharSequence) null);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String string4 = StringUtils.stripStart((String) null, "xm}TdUxm}TdU");
      assertNull(string4);
      
      // Undeclared exception!
      try { 
        StringUtils.abbreviate("$4'Tcj.*5", "#r", 125, (-326));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum abbreviation width is 3
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      String string0 = StringUtils.strip((String) null);
      assertNull(string0);
      
      boolean boolean0 = StringUtils.isAsciiPrintable((CharSequence) null);
      assertFalse(boolean0);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) null, (CharSequence) "D$8Lf)!VS<5=f6GDM", (-656));
      assertEquals((-1), int0);
      
      char[] charArray0 = new char[10];
      charArray0[0] = 'k';
      charArray0[1] = 'N';
      charArray0[2] = 'N';
      charArray0[3] = 'N';
      charArray0[4] = 'N';
      charArray0[5] = 'N';
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = " vs ";
      String string0 = StringUtils.strip(" vs ");
      assertNotNull(string0);
      assertEquals("vs", string0);
      
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) 97;
      floatArray0[1] = (float) 97;
      floatArray0[2] = (float) 'B';
      floatArray0[3] = 1.0F;
      floatArray0[1] = (float) 97;
      floatArray0[5] = (float) 97;
      floatArray0[6] = (float) 108;
      boolean boolean0 = StringUtils.equalsAnyIgnoreCase(" vs ", stringArray0);
      assertEquals(5, stringArray0.length);
      assertTrue(boolean0);
      
      String string1 = StringUtils.substringAfterLast("vs", "#D");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      
      short[] shortArray0 = new short[0];
      String string2 = StringUtils.join(shortArray0, 'B');
      assertNotNull(string2);
      assertEquals(0, shortArray0.length);
      assertFalse(string2.equals((Object)string0));
      assertEquals("", string2);
      assertArrayEquals(new short[] {}, shortArray0);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) " vs ", (CharSequence) "vs", 114);
      assertEquals(1, int0);
      
      String string3 = StringUtils.center("#D", 142, "\r");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r#D\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r", string3);
      
      String string4 = StringUtils.capitalize("\r");
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertEquals("\r", string4);
      
      boolean boolean1 = StringUtils.isEmpty("\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r#D\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = StringUtils.isWhitespace("\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r#D\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r");
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      String string5 = StringUtils.deleteWhitespace(" u[o[G}N$`c@?2qp");
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertEquals("u[o[G}N$`c@?2qp", string5);
      
      String string6 = StringUtils.left("Locale must not be nullSearch and Replace array lengths don't match: ", 2681);
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string5));
      assertEquals("Locale must not be nullSearch and Replace array lengths don't match: ", string6);
      
      // Undeclared exception!
      try { 
        StringUtils.getLevenshteinDistance((CharSequence) "", (CharSequence) " vs ", (-1328));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Threshold must not be negative
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      String string0 = StringUtils.EMPTY;
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.rightPad("", 10, '{');
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("{{{{{{{{{{", string1);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("", '{');
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      
      String string2 = StringUtils.firstNonBlank(stringArray0);
      assertNull(string2);
      assertEquals(0, stringArray0.length);
      
      String string3 = StringUtils.repeat("", "gD", (int) '{');
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals("gDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgD", string3);
      
      String string4 = StringUtils.abbreviate("BCF$Q0Xl", 28, 28);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertEquals("BCF$Q0Xl", string4);
      
      String string5 = StringUtils.stripToEmpty("BCF$Q0Xl");
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertTrue(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertEquals("BCF$Q0Xl", string5);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[1] = 52;
      intArray0[2] = (-2935);
      intArray0[3] = (-2935);
      intArray0[4] = 2124;
      intArray0[5] = 987;
      String string0 = StringUtils.join(intArray0, 'S');
      assertNotNull(string0);
      assertEquals(6, intArray0.length);
      assertEquals("0S52S-2935S-2935S2124S987", string0);
      assertArrayEquals(new int[] {0, 52, (-2935), (-2935), 2124, 987}, intArray0);
      
      boolean boolean0 = StringUtils.endsWithIgnoreCase("0S52S-2935S-2935S2124S987", "0S52S-2935S-2935S2124S987");
      assertTrue(boolean0);
      
      double double0 = StringUtils.getJaroWinklerDistance("0S52S-2935S-2935S2124S987", "0S52S-2935S-2935S2124S987");
      assertEquals(1.0, double0, 0.01);
      
      CharSequence[] charSequenceArray0 = new CharSequence[7];
      charSequenceArray0[1] = (CharSequence) "0S52S-2935S-2935S2124S987";
      charSequenceArray0[2] = (CharSequence) "0S52S-2935S-2935S2124S987";
      charSequenceArray0[3] = (CharSequence) "0S52S-2935S-2935S2124S987";
      charSequenceArray0[4] = (CharSequence) "0S52S-2935S-2935S2124S987";
      charSequenceArray0[5] = (CharSequence) "0S52S-2935S-2935S2124S987";
      boolean boolean1 = StringUtils.equalsAny("0S52S-2935S-2935S2124S987", charSequenceArray0);
      assertEquals(7, charSequenceArray0.length);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      TreeSet<Integer> treeSet0 = new TreeSet<Integer>();
      assertNotNull(treeSet0);
      assertFalse(treeSet0.contains(2124));
      
      Integer integer0 = new Integer(52);
      assertNotNull(integer0);
      assertEquals(52, (int)integer0);
      
      boolean boolean2 = StringUtils.isAsciiPrintable("0S52S-2935S-2935S2124S987");
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2);
      
      int int0 = StringUtils.length(charSequenceArray0[4]);
      assertEquals(7, charSequenceArray0.length);
      assertEquals(25, int0);
      
      int int1 = StringUtils.length(charSequenceArray0[5]);
      assertEquals(7, charSequenceArray0.length);
      assertTrue(int1 == int0);
      assertEquals(25, int1);
      
      int int2 = StringUtils.compare("0S52S-2935S-2935S2124S987", "Threshold must not be negative", true);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals((-36), int2);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      String string0 = StringUtils.abbreviateMiddle("E2*1.s*OqQHFD&gQd9O", "E2*1.s*OqQHFD&gQd9O", (-526));
      assertNotNull(string0);
      assertEquals("E2*1.s*OqQHFD&gQd9O", string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[0] = (CharSequence) "E2*1.s*OqQHFD&gQd9O";
      charSequenceArray0[1] = (CharSequence) "E2*1.s*OqQHFD&gQd9O";
      String string1 = StringUtils.reverse("E2*1.s*OqQHFD&gQd9O");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("O9dQg&DFHQqO*s.1*2E", string1);
      
      String string2 = StringUtils.trimToNull("null/empty items/swe>H=I(,wP(MST)d)/swe>H=I(,wP(MST)d)>H=I");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("null/empty items/swe>H=I(,wP(MST)d)/swe>H=I(,wP(MST)d)>H=I", string2);
      
      boolean boolean0 = StringUtils.isNumeric("null/empty items/swe>H=I(,wP(MST)d)/swe>H=I(,wP(MST)d)>H=I");
      assertFalse(boolean0);
      
      String string3 = StringUtils.substringBetween("QbMy||4<<", "rP(Y0&}.=|zJ/Ar+");
      assertNull(string3);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "E2*1.s*OqQHFD&gQd9O", (CharSequence) null, 872);
      assertEquals((-1), int0);
      
      int int1 = StringUtils.indexOfAnyBut((CharSequence) "QbMy||4<<", (CharSequence) "E2*1.s*OqQHFD&gQd9O");
      assertFalse(int1 == int0);
      assertEquals(1, int1);
      
      String string4 = StringUtils.stripStart("(dUS.^e:o_ufGpAUS.^e:o_ufGpAUS.^e:o_ufGpAUS.^e:o_u", "");
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertEquals("(dUS.^e:o_ufGpAUS.^e:o_ufGpAUS.^e:o_ufGpAUS.^e:o_u", string4);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      boolean boolean0 = StringUtils.containsOnly((CharSequence) null, "k]uJp{mQ8S!");
      assertFalse(boolean0);
      
      String string0 = StringUtils.center("k]uJp{mQ8S!", 0, 'A');
      assertNotNull(string0);
      assertEquals("k]uJp{mQ8S!", string0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparator("The character ", ".M,KjXgwysMU,", 526);
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      Integer[] integerArray0 = new Integer[13];
      Integer integer0 = new Integer(1385);
      assertNotNull(integer0);
      assertEquals(1385, (int)integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(1385);
      assertNotNull(integer1);
      assertTrue(integer1.equals((Object)integer0));
      assertEquals(1385, (int)integer1);
      
      integerArray0[1] = integer1;
      int int0 = StringUtils.compareIgnoreCase("maxWith cannot be negative", "...", false);
      assertEquals(63, int0);
      
      Locale locale0 = Locale.CANADA;
      assertNotNull(locale0);
      assertEquals("en_CA", locale0.toString());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("CA", locale0.getCountry());
      
      String string1 = locale0.getDisplayCountry();
      assertNotNull(string1);
      assertEquals("en_CA", locale0.toString());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("CA", locale0.getCountry());
      assertFalse(string1.equals((Object)string0));
      assertEquals("Canada", string1);
      
      String[] stringArray1 = Locale.getISOCountries();
      assertNotNull(stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(250, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      String string2 = locale0.getDisplayVariant();
      assertNotNull(string2);
      assertEquals("en_CA", locale0.toString());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("CA", locale0.getCountry());
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("", string2);
      
      Locale locale1 = Locale.GERMANY;
      assertNotNull(locale1);
      assertNotSame(locale1, locale0);
      assertEquals("de_DE", locale1.toString());
      assertEquals("de", locale1.getLanguage());
      assertEquals("deu", locale1.getISO3Language());
      assertEquals("DE", locale1.getCountry());
      assertEquals("DEU", locale1.getISO3Country());
      assertEquals("", locale1.getVariant());
      assertFalse(locale1.equals((Object)locale0));
      
      String string3 = StringUtils.trim("java.lang.Object@52b769b5java.lang.Object@1d3febfajava.lang.Object@4c16c3aejava.lang.Object@4a32f5f1java.lang.Object@23a1c7c3java.lang.Object@52b769b5java.lang.Object@1d3febfajava.lang.Object@4c16c3aejava.lang.Object@4a32f5f1java.lang.Object@23a1c7c3");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      
      String string4 = StringUtils.mid("Aborting to protect against StackOverflowError - output of one loop is the input of another", (int) integerArray0[0], 3093);
      assertNotNull(string4);
      assertEquals(13, integerArray0.length);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertEquals("", string4);
      
      String string5 = StringUtils.unwrap("Aborting to protect against StackOverflowError - output of one loop is the input of another", 'A');
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertEquals("Aborting to protect against StackOverflowError - output of one loop is the input of another", string5);
      
      String string6 = StringUtils.overlay("java.lang.Object@52b769b5java.lang.Object@1d3febfajava.lang.Object@4c16c3aejava.lang.Object@4a32f5f1java.lang.Object@23a1c7c3java.lang.Object@52b769b5java.lang.Object@1d3febfajava.lang.Object@4c16c3aejava.lang.Object@4a32f5f1java.lang.Object@23a1c7c3", "", 1, 2151);
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string3));
      assertEquals("j", string6);
      
      String string7 = StringUtils.substringAfterLast("java.lang.Object@52b769b5java.lang.Object@1d3febfajava.lang.Object@4c16c3aejava.lang.Object@4a32f5f1java.lang.Object@23a1c7c3java.lang.Object@52b769b5java.lang.Object@1d3febfajava.lang.Object@4c16c3aejava.lang.Object@4a32f5f1java.lang.Object@23a1c7c3", "j");
      assertNotNull(string7);
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string3));
      
      String string8 = StringUtils.truncate("k]uJp{mQ8S!", 526);
      assertNotNull(string8);
      assertTrue(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string3));
      assertEquals("k]uJp{mQ8S!", string8);
      
      boolean boolean1 = StringUtils.isAlphanumericSpace("...");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[1] = 52;
      intArray0[2] = (-2935);
      intArray0[3] = (-2935);
      intArray0[4] = 2124;
      intArray0[5] = 987;
      String string0 = StringUtils.join(intArray0, 'S');
      assertNotNull(string0);
      assertEquals(6, intArray0.length);
      assertEquals("0S52S-2935S-2935S2124S987", string0);
      assertArrayEquals(new int[] {0, 52, (-2935), (-2935), 2124, 987}, intArray0);
      
      boolean boolean0 = StringUtils.endsWithIgnoreCase("0S52S-2935S-2935S2124S987", "0S52S-2935S-2935S2124S987");
      assertTrue(boolean0);
      
      double double0 = StringUtils.getJaroWinklerDistance("0S52S-2935S-2935S2124S987", "0S52S-2935S-2935S2124S987");
      assertEquals(1.0, double0, 0.01);
      
      CharSequence[] charSequenceArray0 = new CharSequence[7];
      charSequenceArray0[0] = (CharSequence) "0S52S-2935S-2935S2124S987";
      charSequenceArray0[1] = (CharSequence) "0S52S-2935S-2935S2124S987";
      charSequenceArray0[2] = (CharSequence) "0S52S-2935S-2935S2124S987";
      charSequenceArray0[3] = (CharSequence) "0S52S-2935S-2935S2124S987";
      charSequenceArray0[4] = (CharSequence) "0S52S-2935S-2935S2124S987";
      charSequenceArray0[5] = (CharSequence) "0S52S-2935S-2935S2124S987";
      boolean boolean1 = StringUtils.equalsAny("0S52S-2935S-2935S2124S987", charSequenceArray0);
      assertEquals(7, charSequenceArray0.length);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      TreeSet<Integer> treeSet0 = new TreeSet<Integer>();
      assertNotNull(treeSet0);
      assertFalse(treeSet0.contains(987));
      
      int int0 = StringUtils.compareIgnoreCase("yN]J`7", "yN]J`7", true);
      assertEquals(0, int0);
      
      String string1 = StringUtils.getDigits("'J0IfGd^HTtFh");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("0", string1);
      
      String string2 = StringUtils.chomp((String) null);
      assertNull(string2);
      
      String string3 = StringUtils.chomp("'J0IfGd^HTtFh");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals("'J0IfGd^HTtFh", string3);
      
      String[] stringArray0 = new String[9];
      stringArray0[0] = "0S52S-2935S-2935S2124S987";
      stringArray0[1] = "0";
      stringArray0[2] = "'J0IfGd^HTtFh";
      stringArray0[3] = null;
      stringArray0[4] = "0";
      stringArray0[5] = "Strings must not be null";
      stringArray0[6] = "Asrswe==p5@L+jAsrswe==p5@L+jAsrswe==p5@L+jAsrswe==p5@L+j";
      stringArray0[7] = "The Array must not be null";
      stringArray0[8] = "0S52S-2935S-2935S2124S987";
      // Undeclared exception!
      try { 
        StringUtils.replaceEachRepeatedly("The Array must not be null", stringArray0, stringArray0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Aborting to protect against StackOverflowError - output of one loop is the input of another
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      String[] stringArray0 = StringUtils.split(" vs ", "org.apache.commons.lang3.LocaleUtils", (-494));
      assertNotNull(stringArray0);
      assertEquals(2, stringArray0.length);
      
      String string0 = StringUtils.replaceChars("VT76I%Sr''6AGe(yW\"u", '2', 'k');
      assertNotNull(string0);
      assertEquals("VT76I%Sr''6AGe(yW\"u", string0);
      
      String string1 = StringUtils.chop("org.apache.commons.lang3.LocaleUtils");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("org.apache.commons.lang3.LocaleUtil", string1);
      
      Integer integer0 = new Integer((-494));
      assertNotNull(integer0);
      assertEquals((-494), (int)integer0);
      
      Integer integer1 = new Integer((-1582));
      assertNotNull(integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertEquals((-1582), (int)integer1);
      
      Integer integer2 = new Integer((-5909));
      assertNotNull(integer2);
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      assertEquals((-5909), (int)integer2);
      
      String string2 = StringUtils.right("xY*^g", (-4128));
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("", string2);
      
      String string3 = StringUtils.removeStart((String) null, "/B&-wdPd)C!");
      assertNull(string3);
      
      String string4 = StringUtils.wrapIfMissing("Rr9rz.Ukuw<#xx9GUR", 'P');
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertEquals("PRr9rz.Ukuw<#xx9GURP", string4);
      
      int int0 = StringUtils.indexOfDifference((CharSequence[]) stringArray0);
      assertEquals(2, stringArray0.length);
      assertEquals(1, int0);
      
      boolean boolean0 = StringUtils.isNumericSpace("Rr9rz.Ukuw<#xx9GUR");
      assertFalse(boolean0);
      
      String string5 = StringUtils.substring("", (int) '2');
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertEquals("", string5);
      
      boolean boolean1 = StringUtils.isAllUpperCase(" vs ");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string6 = StringUtils.replace("", ";5", (String) null);
      assertNotNull(string6);
      assertTrue(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string4));
      assertTrue(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string0));
      assertEquals("", string6);
      
      String[] stringArray1 = StringUtils.stripAll(stringArray0, "Strings must not be null");
      assertNotNull(stringArray1);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(2, stringArray0.length);
      assertEquals(2, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) 'o';
      floatArray0[1] = (float) 'q';
      floatArray0[2] = (float) 'o';
      floatArray0[0] = (float) 'q';
      floatArray0[4] = (float) 'o';
      String string0 = StringUtils.join(floatArray0, ' ');
      assertNotNull(string0);
      assertEquals(5, floatArray0.length);
      assertEquals("113.0 113.0 111.0 0.0 111.0", string0);
      assertArrayEquals(new float[] {113.0F, 113.0F, 111.0F, 0.0F, 111.0F}, floatArray0, 0.01F);
      
      String string1 = StringUtils.remove(";i=", 'o');
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals(";i=", string1);
      
      int int0 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      charSequenceArray0[0] = (CharSequence) "@~::fa|V#z;Iug &";
      charSequenceArray0[1] = (CharSequence) "113.0 113.0 111.0 0.0 111.0";
      charSequenceArray0[2] = (CharSequence) ";i=";
      boolean boolean0 = StringUtils.equalsAnyIgnoreCase("@~::fa|V#z;Iug &", charSequenceArray0);
      assertEquals(3, charSequenceArray0.length);
      assertTrue(boolean0);
      
      String string2 = StringUtils.substringAfterLast("#D", "5");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("", string2);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)9977;
      String string3 = StringUtils.join(shortArray0, 'e');
      assertNotNull(string3);
      assertEquals(1, shortArray0.length);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals("9977", string3);
      assertArrayEquals(new short[] {(short)9977}, shortArray0);
      
      int int1 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "113.0 113.0 111.0 0.0 111.0", (CharSequence) "113.0 113.0 111.0 0.0 111.0", 76);
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      String string4 = StringUtils.center(";i=", 0, "9977");
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertEquals(";i=", string4);
      
      String string5 = StringUtils.capitalize("w");
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertEquals("W", string5);
      
      boolean boolean1 = StringUtils.isEmpty(charSequenceArray0[2]);
      assertEquals(3, charSequenceArray0.length);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = StringUtils.isWhitespace("w");
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      int int2 = StringUtils.indexOfDifference(charSequenceArray0);
      assertEquals(3, charSequenceArray0.length);
      assertFalse(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals(0, int2);
      
      String string6 = StringUtils.deleteWhitespace("");
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string1));
      assertEquals("", string6);
      
      String string7 = StringUtils.left("4", 0);
      assertNotNull(string7);
      assertFalse(string7.equals((Object)string5));
      assertTrue(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string0));
      assertEquals("", string7);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      String string0 = StringUtils.stripEnd("Aborting to protect against StackOverflowError - output of one loop is the input of anotherWd|}51/]/&`bsA", "Aborting to protect against StackOverflowError - output of one loop is the input of anotherWd|}51/]/&`bsA");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.repeat("Aborting to protect against StackOverflowError - output of one loop is the input of anotherWd|}51/]/&`bsA", 34);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.stripToNull("nu /xW/W[*");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("nu /xW/W[*", string2);
      
      String string3 = StringUtils.repeat((String) null, "FHy-_u77Nq", 34);
      assertNull(string3);
      
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.name());
      
      char[] charArray0 = new char[8];
      charArray0[0] = 'C';
      charArray0[1] = 'B';
      charArray0[2] = 'T';
      charArray0[3] = 'I';
      charArray0[4] = '6';
      charArray0[5] = '{';
      charArray0[6] = '%';
      charArray0[7] = 'q';
      // Undeclared exception!
      try { 
        CharBuffer.wrap(charArray0, 3723, 34);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      String string0 = StringUtils.replaceOnceIgnoreCase("", "", "");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.toRootLowerCase("");
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      
      String string2 = StringUtils.SPACE;
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals(" ", string2);
      
      String string3 = StringUtils.unwrap(" ", '{');
      assertNotNull(string3);
      assertTrue(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals(" ", string3);
      
      boolean boolean0 = StringUtils.containsOnly((CharSequence) " ", "");
      assertFalse(boolean0);
      
      String string4 = StringUtils.wrapIfMissing("!GYVQpg", '{');
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertEquals("{!GYVQpg{", string4);
      
      boolean boolean1 = StringUtils.startsWith("Locale must not be null", "");
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String string5 = StringUtils.getDigits("Minimum abbreviation width with offset is %d");
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string3));
      assertTrue(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertTrue(string5.equals((Object)string0));
      assertEquals("", string5);
      
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      String string6 = StringUtils.replaceChars("", " ", "offset cannot be negative");
      assertNotNull(string6);
      assertTrue(string6.equals((Object)string0));
      assertTrue(string6.equals((Object)string1));
      assertTrue(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string4));
      assertEquals("", string6);
      
      charSequenceArray0[0] = (CharSequence) "";
      boolean boolean2 = StringUtils.equalsAny("", charSequenceArray0);
      assertEquals(1, charSequenceArray0.length);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      String string0 = StringUtils.substringAfter("FW;]~`2^s_P6:NRY", "=!`6x'&SY&[(");
      assertNotNull(string0);
      assertEquals("", string0);
      
      boolean boolean0 = StringUtils.isAlphanumeric("=!`6x'&SY&[(");
      assertFalse(boolean0);
      
      int[] intArray0 = StringUtils.toCodePoints("=!`6x'&SY&[(");
      assertNotNull(intArray0);
      assertEquals(12, intArray0.length);
      
      boolean boolean1 = StringUtils.isAlphanumeric("");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string1 = "{`Y,+-v%\\u";
      String string2 = StringUtils.substringAfterLast((String) null, string1);
      assertNull(string2);
      assertFalse(string1.equals((Object)string0));
      
      CharSequence[] charSequenceArray0 = new CharSequence[6];
      charSequenceArray0[0] = (CharSequence) string1;
      charSequenceArray0[1] = (CharSequence) "=!`6x'&SY&[(";
      charSequenceArray0[2] = (CharSequence) string1;
      charSequenceArray0[3] = (CharSequence) "";
      charSequenceArray0[4] = (CharSequence) "=!`6x'&SY&[(";
      charSequenceArray0[5] = (CharSequence) null;
      int int0 = StringUtils.indexOfAny((CharSequence) null, charSequenceArray0);
      assertEquals(6, charSequenceArray0.length);
      assertEquals((-1), int0);
      
      int[] intArray1 = StringUtils.toCodePoints("FW;]~`2^s_P6:NRY");
      assertNotNull(intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(16, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      
      boolean boolean2 = StringUtils.isAllEmpty(charSequenceArray0);
      assertEquals(6, charSequenceArray0.length);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      boolean boolean3 = StringUtils.containsAny((CharSequence) null, (CharSequence) "FW;]~`2^s_P6:NRY");
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3);
      
      boolean boolean4 = StringUtils.isAnyEmpty(charSequenceArray0);
      assertEquals(6, charSequenceArray0.length);
      assertFalse(boolean4 == boolean3);
      assertFalse(boolean4 == boolean1);
      assertFalse(boolean4 == boolean0);
      assertFalse(boolean4 == boolean2);
      assertTrue(boolean4);
      
      Stack<Object> stack0 = new Stack<Object>();
      assertNotNull(stack0);
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertFalse(stack0.contains(""));
      
      boolean boolean5 = stack0.add((Object) charSequenceArray0[3]);
      assertFalse(stack0.empty());
      assertEquals(1, stack0.size());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(6, charSequenceArray0.length);
      assertFalse(boolean5 == boolean0);
      assertFalse(boolean5 == boolean1);
      assertTrue(boolean5 == boolean4);
      assertFalse(boolean5 == boolean2);
      assertFalse(boolean5 == boolean3);
      assertTrue(boolean5);
      assertFalse(stack0.contains("FW;]~`2^s_P6:NRY"));
      assertTrue(stack0.contains(""));
      
      ListIterator<Object> listIterator0 = stack0.listIterator(1);
      assertNotNull(listIterator0);
      assertFalse(stack0.empty());
      assertEquals(1, stack0.size());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertTrue(listIterator0.hasPrevious());
      assertFalse(listIterator0.hasNext());
      assertFalse(stack0.contains("FW;]~`2^s_P6:NRY"));
      assertTrue(stack0.contains(""));
      
      String string3 = StringUtils.join((Iterator<?>) listIterator0, 'N');
      assertNotNull(string3);
      assertFalse(stack0.empty());
      assertEquals(1, stack0.size());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertTrue(listIterator0.hasPrevious());
      assertFalse(listIterator0.hasNext());
      assertFalse(string3.equals((Object)string1));
      assertEquals("", string3);
      assertFalse(stack0.contains("=!`6x'&SY&[("));
      assertTrue(stack0.contains(""));
      
      int int1 = StringUtils.lastIndexOfAny((CharSequence) null, charSequenceArray0);
      assertEquals(6, charSequenceArray0.length);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      boolean boolean6 = StringUtils.isAnyEmpty(charSequenceArray0);
      assertEquals(6, charSequenceArray0.length);
      assertTrue(boolean6 == boolean4);
      assertFalse(boolean6 == boolean2);
      assertFalse(boolean6 == boolean1);
      assertFalse(boolean6 == boolean3);
      assertTrue(boolean6 == boolean5);
      assertFalse(boolean6 == boolean0);
      assertTrue(boolean6);
      
      byte[] byteArray0 = new byte[0];
      String string4 = StringUtils.join(byteArray0, 'N');
      assertNotNull(string4);
      assertEquals(0, byteArray0.length);
      assertFalse(string4.equals((Object)string1));
      assertEquals("", string4);
      assertArrayEquals(new byte[] {}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      String string0 = StringUtils.right("FW;]~`2^s_P6:NRY", (-2094));
      assertNotNull(string0);
      assertEquals("", string0);
      
      boolean boolean0 = StringUtils.isAllLowerCase("");
      assertFalse(boolean0);
      
      String string1 = StringUtils.abbreviate("", (-2094), (-3740));
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      
      String string2 = StringUtils.defaultString("");
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertEquals("", string2);
      
      String string3 = StringUtils.leftPad((String) null, (-3740), "FW;]~`2^s_P6:NRY");
      assertNull(string3);
      
      boolean boolean1 = StringUtils.isAllLowerCase("");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      int int0 = StringUtils.countMatches((CharSequence) "FW;]~`2^s_P6:NRY", 'P');
      assertEquals(1, int0);
      
      int int1 = StringUtils.lastIndexOfIgnoreCase((CharSequence) null, (CharSequence) "");
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      booleanArray0[2] = false;
      boolean boolean2 = StringUtils.isNotEmpty("FW;]~`2^s_P6:NRY");
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2);
      
      double double0 = StringUtils.getJaroWinklerDistance("FW;]~`2^s_P6:NRY", "");
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[6];
      String string0 = StringUtils.substringBefore("", "");
      assertNotNull(string0);
      assertEquals("", string0);
      
      charSequenceArray0[0] = (CharSequence) "";
      String string1 = StringUtils.getDigits("");
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      
      charSequenceArray0[1] = (CharSequence) "";
      String string2 = StringUtils.removeStart("", "");
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertEquals("", string2);
      
      charSequenceArray0[2] = (CharSequence) "";
      CharBuffer charBuffer0 = CharBuffer.allocate(2643);
      assertNotNull(charBuffer0);
      assertEquals(2643, charBuffer0.length());
      assertTrue(charBuffer0.hasArray());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.isDirect());
      assertEquals(2643, charBuffer0.remaining());
      assertTrue(charBuffer0.hasRemaining());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(2643, charBuffer0.capacity());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(2643, charBuffer0.limit());
      
      charSequenceArray0[3] = (CharSequence) charBuffer0;
      String string3 = StringUtils.replace("Array and element cannot both be null", " has no clone method", ";se'#0Td+H", 50);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals("Array and element cannot both be null", string3);
      
      charSequenceArray0[4] = (CharSequence) "Array and element cannot both be null";
      String string4 = StringUtils.join((List<?>) null, "", 2643, 2643);
      assertNull(string4);
      
      charSequenceArray0[5] = (CharSequence) null;
      boolean boolean0 = StringUtils.isAllBlank(charSequenceArray0);
      assertEquals(6, charSequenceArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      String string0 = StringUtils.substringAfterLast("", 10);
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.replaceOnce("", "af-_Xu1o~2a", "af-_Xu1o~2a");
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      
      String[] stringArray0 = new String[4];
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      String string2 = StringUtils.leftPad("", 10);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("          ", string2);
      
      boolean boolean0 = StringUtils.isNumericSpace("          ");
      assertTrue(boolean0);
      
      String[] stringArray1 = StringUtils.split("");
      assertNotNull(stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(0, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      boolean boolean1 = StringUtils.equalsAnyIgnoreCase("", stringArray0);
      assertNotSame(stringArray0, stringArray1);
      assertEquals(4, stringArray0.length);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String string3 = StringUtils.join((Object[]) stringArray1, "           ", 196, 111);
      assertNotNull(string3);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(0, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertTrue(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals("", string3);
      
      String string4 = StringUtils.abbreviate("', has a length less than 2", (String) null, (-2163), 102);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertEquals("', has a length less than 2", string4);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      String string0 = StringUtils.replaceChars("VT76I%Sr''6AGe(yW\"u", 'y', '_');
      assertNotNull(string0);
      assertEquals("VT76I%Sr''6AGe(_W\"u", string0);
      
      String string1 = StringUtils.chop("_L;ZXrXtdmPXWM");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("_L;ZXrXtdmPXW", string1);
      
      Integer integer0 = new Integer(16);
      assertNotNull(integer0);
      assertEquals(16, (int)integer0);
      
      Integer integer1 = new Integer(16);
      assertNotNull(integer1);
      assertTrue(integer1.equals((Object)integer0));
      assertEquals(16, (int)integer1);
      
      Integer integer2 = new Integer((-952));
      assertNotNull(integer2);
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertEquals((-952), (int)integer2);
      
      String string2 = StringUtils.right("VT76I%Sr''6AGe(_W\"u", 322);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertEquals("VT76I%Sr''6AGe(_W\"u", string2);
      
      String string3 = StringUtils.removeStart("xY*^g", (String) null);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals("xY*^g", string3);
      
      String string4 = StringUtils.wrapIfMissing("", '2');
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertEquals("", string4);
      
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      charSequenceArray0[0] = (CharSequence) "";
      String string5 = StringUtils.swapCase("Array and element cannot both be null");
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertEquals("aRRAY AND ELEMENT CANNOT BOTH BE NULL", string5);
      
      charSequenceArray0[1] = (CharSequence) "aRRAY AND ELEMENT CANNOT BOTH BE NULL";
      charSequenceArray0[2] = (CharSequence) "xY*^g";
      charSequenceArray0[3] = (CharSequence) "_L;ZXrXtdmPXW";
      int int0 = StringUtils.indexOfDifference(charSequenceArray0);
      assertEquals(4, charSequenceArray0.length);
      assertEquals(0, int0);
      
      boolean boolean0 = StringUtils.isNumericSpace(charSequenceArray0[1]);
      assertEquals(4, charSequenceArray0.length);
      assertFalse(boolean0);
      
      String string6 = StringUtils.substring("VT76I%Sr''6AGe(yW\"u", 0);
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string2));
      assertEquals("VT76I%Sr''6AGe(yW\"u", string6);
      
      boolean boolean1 = StringUtils.isAllUpperCase("");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      String string0 = StringUtils.remove("$4'Tcj.*5", 'o');
      assertNotNull(string0);
      assertEquals("$4'Tcj.*5", string0);
      
      String string1 = "\\u";
      String string2 = StringUtils.replaceOnceIgnoreCase("$4'Tcj.*5", "", string1);
      assertNotNull(string2);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertEquals("$4'Tcj.*5", string2);
      
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      charSequenceArray0[3] = (CharSequence) "";
      charSequenceArray0[4] = (CharSequence) "";
      boolean boolean0 = StringUtils.equalsAnyIgnoreCase("$4'Tcj.*5", charSequenceArray0);
      assertEquals(5, charSequenceArray0.length);
      assertFalse(boolean0);
      
      String string3 = StringUtils.join((Object[]) charSequenceArray0, "", 196, 124);
      assertNotNull(string3);
      assertEquals(5, charSequenceArray0.length);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals("", string3);
      
      long[] longArray0 = new long[5];
      longArray0[0] = (long) (-655);
      longArray0[1] = (long) (-655);
      String string4 = StringUtils.right("Nv#(y_-dxE{KM?K", (-655));
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertEquals("", string4);
      
      String string5 = StringUtils.removeStart(string1, "{`Y,+-v%");
      assertNotNull(string5);
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertEquals("\\u", string5);
      
      String string6 = StringUtils.wrapIfMissing(string5, ' ');
      assertNotNull(string6);
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string3));
      assertEquals(" \\u ", string6);
      
      int int0 = StringUtils.indexOfDifference(charSequenceArray0);
      assertEquals(5, charSequenceArray0.length);
      assertEquals(0, int0);
      
      boolean boolean1 = StringUtils.isNumericSpace("Nv#(y_-dxE{KM?K");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string7 = StringUtils.substring("qY\"@oTgRS$&:P[/", 1066);
      assertNotNull(string7);
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string0));
      assertEquals("", string7);
      
      boolean boolean2 = StringUtils.isAllUpperCase("$4'Tcj.*5");
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      Stack<String> stack0 = new Stack<String>();
      assertNotNull(stack0);
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertFalse(stack0.contains(string5));
      
      boolean boolean3 = stack0.add(string1);
      assertFalse(stack0.isEmpty());
      assertEquals("[\\u]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(1, stack0.size());
      assertFalse(stack0.empty());
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string7));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string4));
      assertFalse(string1.equals((Object)string6));
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3);
      assertTrue(stack0.contains(string5));
      assertFalse(stack0.contains("$4'Tcj.*5"));
      
      String string8 = StringUtils.join((List<?>) stack0, "Rr9!@@1;C05'\"BeSK'k", 196, 0);
      assertNotNull(string8);
      assertFalse(stack0.isEmpty());
      assertEquals("[\\u]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(1, stack0.size());
      assertFalse(stack0.empty());
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string1));
      assertEquals("", string8);
      assertTrue(stack0.contains(string5));
      assertFalse(stack0.contains("$4'Tcj.*5"));
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      String string0 = StringUtils.remove("$4'Tcj.*5", 'o');
      assertNotNull(string0);
      assertEquals("$4'Tcj.*5", string0);
      
      String string1 = "\\u";
      String string2 = StringUtils.replaceOnceIgnoreCase("$4'Tcj.*5", "", string1);
      assertNotNull(string2);
      assertFalse(string1.equals((Object)string0));
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("$4'Tcj.*5", string2);
      
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      charSequenceArray0[3] = (CharSequence) "";
      charSequenceArray0[4] = (CharSequence) "";
      boolean boolean0 = StringUtils.equalsAnyIgnoreCase("$4'Tcj.*5", charSequenceArray0);
      assertEquals(5, charSequenceArray0.length);
      assertFalse(boolean0);
      
      String string3 = StringUtils.join((Object[]) charSequenceArray0, "", 196, 124);
      assertNotNull(string3);
      assertEquals(5, charSequenceArray0.length);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals("", string3);
      
      String string4 = StringUtils.right(string1, (-508));
      assertNotNull(string4);
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertEquals("", string4);
      
      char[] charArray0 = new char[3];
      charArray0[0] = 'o';
      charArray0[1] = 'o';
      charArray0[2] = 'o';
      boolean boolean1 = StringUtils.containsOnly((CharSequence) "", charArray0);
      assertEquals(3, charArray0.length);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      assertArrayEquals(new char[] {'o', 'o', 'o'}, charArray0);
      
      String string5 = StringUtils.defaultIfEmpty(")+><%m", string1);
      assertNotNull(string5);
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string4));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertEquals(")+><%m", string5);
      
      String string6 = StringUtils.chomp(string1);
      assertNotNull(string6);
      assertFalse(string1.equals((Object)string5));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string4));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string5));
      assertEquals("\\u", string6);
      
      String[] stringArray0 = StringUtils.substringsBetween("$4'Tcj.*5", "eL7K_0S,oJ", "");
      assertNull(stringArray0);
      
      String string7 = StringUtils.wrap(string6, ':');
      assertNotNull(string7);
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string1.equals((Object)string5));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string4));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string5));
      assertEquals(":\\u:", string7);
      
      String string8 = StringUtils.wrap("", string6);
      assertNotNull(string8);
      assertFalse(string1.equals((Object)string7));
      assertFalse(string1.equals((Object)string5));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string4));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string6));
      assertTrue(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string2));
      assertTrue(string8.equals((Object)string4));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string7));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string5));
      assertEquals("", string8);
      
      boolean boolean2 = StringUtils.isAlphaSpace(string1);
      assertFalse(string1.equals((Object)string7));
      assertFalse(string1.equals((Object)string5));
      assertFalse(string1.equals((Object)string8));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string4));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string3));
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      
      String string9 = StringUtils.stripEnd("ukYT\"G[ 25-RcxxUjava.lang.Object@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.Object@50d3e7ejava.lang.Object@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.Object@50d3e7ejava.lang.Object@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.Object@50d3e7ejava.lang.Object@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.Object@50d3e7e", string1);
      assertNotNull(string9);
      assertFalse(string1.equals((Object)string7));
      assertFalse(string1.equals((Object)string5));
      assertFalse(string1.equals((Object)string8));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string4));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string9.equals((Object)string3));
      assertFalse(string9.equals((Object)string4));
      assertFalse(string9.equals((Object)string0));
      assertFalse(string9.equals((Object)string8));
      assertFalse(string9.equals((Object)string7));
      assertFalse(string9.equals((Object)string6));
      assertFalse(string9.equals((Object)string1));
      assertFalse(string9.equals((Object)string2));
      assertFalse(string9.equals((Object)string5));
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      int[] intArray0 = new int[14];
      intArray0[0] = (int) '7';
      intArray0[1] = (int) '7';
      intArray0[1] = (int) '7';
      String string0 = StringUtils.join(intArray0, 'n');
      assertNotNull(string0);
      assertEquals(14, intArray0.length);
      assertEquals("55n55n0n0n0n0n0n0n0n0n0n0n0n0", string0);
      
      String string1 = StringUtils.abbreviate("55n55n0n0n0n0n0n0n0n0n0n0n0n0", 55);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("55n55n0n0n0n0n0n0n0n0n0n0n0n0", string1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[7];
      charSequenceArray0[0] = (CharSequence) "55n55n0n0n0n0n0n0n0n0n0n0n0n0";
      charSequenceArray0[1] = (CharSequence) "55n55n0n0n0n0n0n0n0n0n0n0n0n0";
      charSequenceArray0[2] = (CharSequence) "55n55n0n0n0n0n0n0n0n0n0n0n0n0";
      CharSequence charSequence0 = StringUtils.defaultIfEmpty(charSequenceArray0[1], charSequenceArray0[2]);
      assertNotNull(charSequence0);
      assertEquals(7, charSequenceArray0.length);
      assertTrue(charSequence0.equals((Object)string0));
      assertTrue(charSequence0.equals((Object)string1));
      assertEquals("55n55n0n0n0n0n0n0n0n0n0n0n0n0", charSequence0);
      
      charSequenceArray0[3] = (CharSequence) "55n55n0n0n0n0n0n0n0n0n0n0n0n0";
      charSequenceArray0[4] = (CharSequence) "55n55n0n0n0n0n0n0n0n0n0n0n0n0";
      String string2 = StringUtils.removeAll("55n55n0n0n0n0n0n0n0n0n0n0n0n0", "55n55n0n0n0n0n0n0n0n0n0n0n0n0");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)charSequence0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("", string2);
      
      charSequenceArray0[5] = (CharSequence) "";
      charSequenceArray0[6] = (CharSequence) "55n55n0n0n0n0n0n0n0n0n0n0n0n0";
      int int0 = StringUtils.indexOfDifference(charSequenceArray0);
      assertEquals(7, charSequenceArray0.length);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      String string0 = StringUtils.wrap((String) null, 'U');
      assertNull(string0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens((String) null, (String) null, (-2092));
      assertNull(stringArray0);
      
      String string1 = StringUtils.replaceChars("Strings must not be null", ' ', ' ');
      assertNotNull(string1);
      assertEquals("Strings must not be null", string1);
      
      char[] charArray0 = new char[9];
      charArray0[0] = '$';
      charArray0[1] = ' ';
      charArray0[2] = 'U';
      charArray0[3] = 'U';
      charArray0[4] = 'U';
      boolean boolean0 = StringUtils.isWhitespace("Strings must not be null");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isAllEmpty((CharSequence[]) null);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      boolean boolean0 = StringUtils.isEmpty("");
      assertTrue(boolean0);
      
      String[] stringArray0 = StringUtils.stripAll((String[]) null);
      assertNull(stringArray0);
      
      boolean boolean1 = StringUtils.containsAnyIgnoreCase("", (CharSequence[]) null);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string0 = StringUtils.firstNonBlank((String[]) null);
      assertNull(string0);
      
      String string1 = StringUtils.deleteWhitespace("1Gt'");
      assertNotNull(string1);
      assertEquals("1Gt'", string1);
      
      String string2 = "jWU}p|M=YT9jWU}p|M=YT9";
      // Undeclared exception!
      try { 
        StringUtils.abbreviate("jWU}p|M=YT9jWU}p|M=YT9", 28, (-570));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum abbreviation width is 4
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      String string0 = StringUtils.CR;
      assertNotNull(string0);
      assertEquals("\r", string0);
      
      int int0 = StringUtils.ordinalIndexOf("\r", "\r", 1057);
      assertEquals((-1), int0);
      
      String string1 = StringUtils.getDigits(", Length: ");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      
      String string2 = StringUtils.substringBeforeLast("mDZ'd7j", "");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("mDZ'd7j", string2);
      
      String string3 = "\\u";
      String string4 = StringUtils.uncapitalize(string3);
      assertNotNull(string4);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertEquals("\\u", string4);
      
      char[] charArray0 = new char[3];
      charArray0[0] = '{';
      charArray0[1] = '+';
      charArray0[2] = 'N';
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "mDZ'd7j", charArray0);
      assertEquals(3, charArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new char[] {'{', '+', 'N'}, charArray0);
      
      String string5 = StringUtils.leftPad((String) null, (-1206), " %83siGvCI4]3Ip");
      assertNull(string5);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      String string0 = "";
      String string1 = null;
      String string2 = StringUtils.abbreviate("", (String) null, 652, 652);
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string0));
      assertEquals("", string2);
      
      String string3 = StringUtils.defaultString("");
      assertNotNull(string3);
      assertTrue(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string0));
      assertEquals("", string3);
      
      int int0 = StringUtils.countMatches((CharSequence) "", (CharSequence) "");
      assertEquals(0, int0);
      
      String string4 = "\\u";
      try { 
        StringUtils.getBytes("", string4);
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(UnsupportedEncodingException e) {
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      String string0 = StringUtils.removeFirst("o4R+8,w0_XT", "java.lang.Object@162f0309java.lang.Object@ee1d858java.lang.Object@29d768adjava.lang.Object@195c9e91java.lang.Object@7705e1f8java.lang.Object@162f0309java.lang.Object@ee1d858java.lang.Object@29d768adjava.lang.Object@195c9e91java.lang.Object@7705e1f8");
      assertNotNull(string0);
      assertEquals("o4R+8,w0_XT", string0);
      
      boolean boolean0 = StringUtils.contains((CharSequence) "o4R+8,w0_XT", (CharSequence) "java.lang.Object@162f0309java.lang.Object@ee1d858java.lang.Object@29d768adjava.lang.Object@195c9e91java.lang.Object@7705e1f8java.lang.Object@162f0309java.lang.Object@ee1d858java.lang.Object@29d768adjava.lang.Object@195c9e91java.lang.Object@7705e1f8");
      assertFalse(boolean0);
      
      String string1 = StringUtils.uncapitalize("S`-mCa0");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("s`-mCa0", string1);
      
      boolean boolean1 = StringUtils.isWhitespace("s`-mCa0");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("o4R+8,w0_XT", "_");
      assertNotNull(stringArray0);
      assertEquals(2, stringArray0.length);
      
      String string2 = StringUtils.substringBeforeLast("S`-mCa0", "java.lang.Object@162f0309java.lang.Object@ee1d858java.lang.Object@29d768adjava.lang.Object@195c9e91java.lang.Object@7705e1f8java.lang.Object@162f0309java.lang.Object@ee1d858java.lang.Object@29d768adjava.lang.Object@195c9e91java.lang.Object@7705e1f8");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("S`-mCa0", string2);
      
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      String string3 = StringUtils.getIfEmpty(">VD!tB79^>!", supplier0);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals(">VD!tB79^>!", string3);
      
      String string4 = StringUtils.wrap(">VD!tB79^>!", '9');
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertEquals("9>VD!tB79^>!9", string4);
      
      String string5 = StringUtils.removeStart("u=]@|On8X7H27[2Or", "s`-mCa0");
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertEquals("u=]@|On8X7H27[2Or", string5);
      
      String string6 = StringUtils.unwrap("j3b#7N c]@PXw~ap~", '9');
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string1));
      assertEquals("j3b#7N c]@PXw~ap~", string6);
      
      String string7 = StringUtils.repeat('N', (-2209));
      assertNotNull(string7);
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string3));
      assertEquals("", string7);
      
      int int0 = StringUtils.indexOf((CharSequence) "9>VD!tB79^>!9", 64);
      assertEquals((-1), int0);
      
      String string8 = StringUtils.right("Asrswe==p5@L+jAsrswe==p5@L+jAsrswe==p5@L+jAsrswe==p5@L+j", (-2209));
      assertNotNull(string8);
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string5));
      assertEquals("", string8);
      
      String string9 = StringUtils.prependIfMissing("9>VD!tB79^>!9", "9>VD!tB79^>!9", stringArray0);
      assertNotNull(string9);
      assertEquals(2, stringArray0.length);
      assertFalse(string9.equals((Object)string3));
      assertFalse(string9.equals((Object)string0));
      assertTrue(string9.equals((Object)string4));
      assertFalse(string9.equals((Object)string1));
      assertFalse(string9.equals((Object)string5));
      assertFalse(string9.equals((Object)string8));
      assertFalse(string9.equals((Object)string6));
      assertFalse(string9.equals((Object)string2));
      assertFalse(string9.equals((Object)string7));
      assertEquals("9>VD!tB79^>!9", string9);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      String string0 = StringUtils.remove("#", 'y');
      assertNotNull(string0);
      assertEquals("#", string0);
      
      int int0 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      boolean boolean0 = StringUtils.equalsAnyIgnoreCase("#", charSequenceArray0);
      assertEquals(0, charSequenceArray0.length);
      assertFalse(boolean0);
      
      String string1 = StringUtils.stripToNull("#");
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("#", string1);
      
      String string2 = StringUtils.replaceEachRepeatedly("#", (String[]) null, (String[]) null);
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertEquals("#", string2);
      
      String string3 = StringUtils.substring("Object varargs must not be null", 1862);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals("", string3);
      
      String string4 = StringUtils.leftPad("Search and Replace array lengths don't match: ", 1862, "#");
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("#", "#");
      assertNotNull(stringArray0);
      assertEquals(2, stringArray0.length);
      
      String string5 = StringUtils.normalizeSpace(string4);
      assertNotNull(string5);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      
      boolean boolean1 = StringUtils.isNoneBlank(charSequenceArray0);
      assertEquals(0, charSequenceArray0.length);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      int int1 = StringUtils.compareIgnoreCase("", "#", false);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      String string6 = StringUtils.join((long[]) null, 'K', 321, 321);
      assertNull(string6);
      
      char[] charArray0 = new char[9];
      charArray0[0] = 'y';
      charArray0[1] = 'K';
      charArray0[2] = 'K';
      charArray0[3] = 'K';
      charArray0[4] = 'y';
      charArray0[5] = 'y';
      charArray0[6] = '>';
      charArray0[7] = 'y';
      charArray0[8] = 'O';
      // Undeclared exception!
      StringUtils.indexOfAny((CharSequence) string5, charArray0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      String string0 = StringUtils.removeFirst("o4R+8,w0_XT", "java.lang.Object@162f0309java.lang.Object@ee1d858java.lang.Object@29d768adjava.lang.Object@195c9e91java.lang.Object@7705e1f8java.lang.Object@162f0309java.lang.Object@ee1d858java.lang.Object@29d768adjava.lang.Object@195c9e91java.lang.Object@7705e1f8");
      assertNotNull(string0);
      assertEquals("o4R+8,w0_XT", string0);
      
      boolean boolean0 = StringUtils.contains((CharSequence) "o4R+8,w0_XT", (CharSequence) "java.lang.Object@162f0309java.lang.Object@ee1d858java.lang.Object@29d768adjava.lang.Object@195c9e91java.lang.Object@7705e1f8java.lang.Object@162f0309java.lang.Object@ee1d858java.lang.Object@29d768adjava.lang.Object@195c9e91java.lang.Object@7705e1f8");
      assertFalse(boolean0);
      
      String string1 = StringUtils.uncapitalize("S`-mCa0");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("s`-mCa0", string1);
      
      boolean boolean1 = StringUtils.isWhitespace("s`-mCa0");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("o4R+8,w0_XT", "_");
      assertNotNull(stringArray0);
      assertEquals(2, stringArray0.length);
      
      String string2 = StringUtils.substringBeforeLast("S`-mCa0", "java.lang.Object@162f0309java.lang.Object@ee1d858java.lang.Object@29d768adjava.lang.Object@195c9e91java.lang.Object@7705e1f8java.lang.Object@162f0309java.lang.Object@ee1d858java.lang.Object@29d768adjava.lang.Object@195c9e91java.lang.Object@7705e1f8");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("S`-mCa0", string2);
      
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      String string3 = StringUtils.getIfEmpty(">VD!tB79^>!", supplier0);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals(">VD!tB79^>!", string3);
      
      boolean boolean2 = StringUtils.startsWith("java.lang.Object@162f0309java.lang.Object@ee1d858java.lang.Object@29d768adjava.lang.Object@195c9e91java.lang.Object@7705e1f8java.lang.Object@162f0309java.lang.Object@ee1d858java.lang.Object@29d768adjava.lang.Object@195c9e91java.lang.Object@7705e1f8", "java.lang.Object@162f0309java.lang.Object@ee1d858java.lang.Object@29d768adjava.lang.Object@195c9e91java.lang.Object@7705e1f8java.lang.Object@162f0309java.lang.Object@ee1d858java.lang.Object@29d768adjava.lang.Object@195c9e91java.lang.Object@7705e1f8");
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2);
      
      String string4 = StringUtils.getDigits("Rx-^~ *MdI1V9n~-N98");
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertEquals("1998", string4);
      
      String string5 = StringUtils.replaceChars("1998", "S`-mCa0", "!%+@)b3gL");
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string1));
      assertTrue(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertEquals("1998", string5);
      
      String string6 = StringUtils.normalizeSpace("|w;Wop");
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string3));
      assertEquals("|w;Wop", string6);
      
      String string7 = StringUtils.stripEnd("1998", "Rx-^~ *MdI1V9n~-N98");
      assertNotNull(string7);
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string4));
      assertEquals("", string7);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) 'o';
      floatArray0[1] = (float) 'q';
      floatArray0[2] = (float) 'o';
      floatArray0[3] = (float) 'q';
      floatArray0[4] = (float) 'o';
      String string0 = StringUtils.join(floatArray0, ' ');
      assertNotNull(string0);
      assertEquals(5, floatArray0.length);
      assertEquals("111.0 113.0 111.0 113.0 111.0", string0);
      assertArrayEquals(new float[] {111.0F, 113.0F, 111.0F, 113.0F, 111.0F}, floatArray0, 0.01F);
      
      String string1 = StringUtils.strip("YT~G&>t");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("YT~G&>t", string1);
      
      double double0 = StringUtils.getJaroWinklerDistance("@~:fa|V#z;Iug &", "YT~G&>t");
      assertEquals(0.4, double0, 0.01);
      
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      charSequenceArray0[0] = (CharSequence) "KvE~0";
      charSequenceArray0[1] = (CharSequence) "111.0 113.0 111.0 113.0 111.0";
      charSequenceArray0[2] = (CharSequence) "YT~G&>t";
      charSequenceArray0[3] = (CharSequence) "111.0 113.0 111.0 113.0 111.0";
      boolean boolean0 = StringUtils.equalsAny("YT~G&>t", charSequenceArray0);
      assertEquals(4, charSequenceArray0.length);
      assertTrue(boolean0);
      
      boolean boolean1 = StringUtils.isNumeric("@~:fa|V#z;Iug &");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      Integer integer0 = new Integer(53);
      assertNotNull(integer0);
      assertEquals(53, (int)integer0);
      
      int int0 = StringUtils.length("111.0 113.0 111.0 113.0 111.0");
      assertEquals(29, int0);
      
      double[] doubleArray0 = new double[0];
      String string2 = StringUtils.join(doubleArray0, ' ', (-1), (-641));
      assertNotNull(string2);
      assertEquals(0, doubleArray0.length);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("", string2);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      boolean boolean2 = StringUtils.isNumericSpace("111.0 113.0 111.0 113.0 111.0");
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      String string0 = StringUtils.LF;
      assertNotNull(string0);
      assertEquals("\n", string0);
      
      boolean boolean0 = StringUtils.equalsIgnoreCase("\n", "\n");
      assertTrue(boolean0);
      
      String string1 = StringUtils.chop("\n");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      
      Object[] objectArray0 = new Object[0];
      String string2 = StringUtils.join(objectArray0, 'p', 4190, 4190);
      assertNotNull(string2);
      assertEquals(0, objectArray0.length);
      assertFalse(string2.equals((Object)string0));
      assertEquals("", string2);
      
      String string3 = StringUtils.unwrap("55", "\n");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals("55", string3);
      
      int int0 = StringUtils.countMatches((CharSequence) "", (CharSequence) "\n");
      assertEquals(0, int0);
      
      boolean boolean1 = StringUtils.isNumericSpace("55");
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      int int1 = StringUtils.indexOf((CharSequence) "", (CharSequence) "55");
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      String string0 = StringUtils.wrap("W~p/]:FDw`qEP(g{Xm", 'v');
      assertNotNull(string0);
      assertEquals("vW~p/]:FDw`qEP(g{Xmv", string0);
      
      String string1 = StringUtils.removeStart("vW~p/]:FDw`qEP(g{Xmv", "aD");
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("vW~p/]:FDw`qEP(g{Xmv", string1);
      
      String string2 = StringUtils.unwrap("vW~p/]:FDw`qEP(g{Xmv", 'o');
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertEquals("vW~p/]:FDw`qEP(g{Xmv", string2);
      
      int int0 = StringUtils.indexOf((CharSequence) "vW~p/]:FDw`qEP(g{Xmv", (-1179));
      assertEquals((-1), int0);
      
      String string3 = StringUtils.substringAfter("W~p/]:FDw`qEP(g{Xm", (String) null);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals("", string3);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("j", "j", 1067);
      assertNotNull(stringArray0);
      assertEquals(2, stringArray0.length);
      
      String string0 = StringUtils.left("j", 1067);
      assertNotNull(string0);
      assertEquals("j", string0);
      
      String string1 = StringUtils.rightPad("j", 1067);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      boolean[] booleanArray0 = new boolean[0];
      String string2 = StringUtils.join(booleanArray0, 'x', 1067, 1067);
      assertNotNull(string2);
      assertEquals(0, booleanArray0.length);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("", string2);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "", (CharSequence) "");
      assertEquals(0, int0);
      
      char[] charArray0 = new char[7];
      charArray0[0] = 'x';
      charArray0[2] = 'x';
      charArray0[3] = 'x';
      charArray0[4] = 'x';
      charArray0[5] = 'x';
      charArray0[6] = 'x';
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "", charArray0);
      assertEquals(7, charArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new char[] {'x', '\u0000', 'x', 'x', 'x', 'x', 'x'}, charArray0);
      
      String string3 = StringUtils.defaultIfEmpty(")+><%m", "j");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals(")+><%m", string3);
      
      String string4 = StringUtils.chomp(string1);
      assertNotNull(string4);
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      
      String[] stringArray1 = StringUtils.substringsBetween(string4, "j", "j");
      assertNull(stringArray1);
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      
      String string5 = StringUtils.wrap("@Ws23~0i", ':');
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertEquals(":@Ws23~0i:", string5);
      
      String string6 = StringUtils.wrap(":@Ws23~0i:", "/^Dsg*/^Dsg*");
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string4));
      assertEquals("/^Dsg*/^Dsg*:@Ws23~0i:/^Dsg*/^Dsg*", string6);
      
      boolean boolean1 = StringUtils.isAlphaSpace(")+><%m");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string7 = StringUtils.center("", (int) 'x');
      assertNotNull(string7);
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string4));
      assertEquals("                                                                                                                        ", string7);
      
      String string8 = StringUtils.join(booleanArray0, 'N');
      assertNotNull(string8);
      assertEquals(0, booleanArray0.length);
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string3));
      assertEquals("", string8);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      
      String string9 = StringUtils.reverseDelimited(")+><%m", 't');
      assertNotNull(string9);
      assertFalse(string9.equals((Object)string4));
      assertTrue(string9.equals((Object)string3));
      assertFalse(string9.equals((Object)string2));
      assertFalse(string9.equals((Object)string7));
      assertFalse(string9.equals((Object)string5));
      assertFalse(string9.equals((Object)string8));
      assertFalse(string9.equals((Object)string6));
      assertFalse(string9.equals((Object)string1));
      assertFalse(string9.equals((Object)string0));
      assertEquals(")+><%m", string9);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      String string0 = StringUtils.wrap((String) null, 'U');
      assertNull(string0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens((String) null, (String) null, (-2092));
      assertNull(stringArray0);
      
      String string1 = StringUtils.replaceChars("Strings must not be null", ' ', ' ');
      assertNotNull(string1);
      assertEquals("Strings must not be null", string1);
      
      char[] charArray0 = new char[9];
      charArray0[0] = '$';
      charArray0[1] = ' ';
      charArray0[2] = 'U';
      charArray0[3] = 'U';
      charArray0[4] = 'U';
      charArray0[5] = ' ';
      charArray0[6] = ']';
      charArray0[7] = 'U';
      charArray0[8] = 'U';
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "Strings must not be null", charArray0);
      assertEquals(9, charArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new char[] {'$', ' ', 'U', 'U', 'U', ' ', ']', 'U', 'U'}, charArray0);
      
      boolean boolean1 = StringUtils.isAllUpperCase("Strings must not be null");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "Strings must not be null", charArray0);
      assertEquals(9, charArray0.length);
      assertEquals(7, int0);
      assertArrayEquals(new char[] {'$', ' ', 'U', 'U', 'U', ' ', ']', 'U', 'U'}, charArray0);
      
      String string2 = StringUtils.substringAfter((String) null, (-5216));
      assertNull(string2);
      
      ArrayDeque<Locale.LanguageRange> arrayDeque0 = new ArrayDeque<Locale.LanguageRange>();
      assertNotNull(arrayDeque0);
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      
      ArrayDeque<Locale.LanguageRange> arrayDeque1 = arrayDeque0.clone();
      assertNotNull(arrayDeque1);
      assertNotSame(arrayDeque0, arrayDeque1);
      assertNotSame(arrayDeque1, arrayDeque0);
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      assertEquals(0, arrayDeque1.size());
      assertTrue(arrayDeque1.isEmpty());
      assertFalse(arrayDeque1.equals((Object)arrayDeque0));
      
      String string3 = StringUtils.join((Iterable<?>) arrayDeque1, ',');
      assertNotNull(string3);
      assertNotSame(arrayDeque0, arrayDeque1);
      assertNotSame(arrayDeque1, arrayDeque0);
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      assertEquals(0, arrayDeque1.size());
      assertTrue(arrayDeque1.isEmpty());
      assertFalse(arrayDeque0.equals((Object)arrayDeque1));
      assertFalse(arrayDeque1.equals((Object)arrayDeque0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("", string3);
      
      int int1 = StringUtils.indexOfDifference((CharSequence) "", (CharSequence) null);
      assertFalse(int1 == int0);
      assertEquals(0, int1);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      String string0 = StringUtils.removeEndIgnoreCase("", "");
      assertNotNull(string0);
      assertEquals("", string0);
      
      Supplier<CharSequence> supplier0 = (Supplier<CharSequence>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn("").when(supplier0).get();
      CharSequence charSequence0 = StringUtils.getIfBlank((CharSequence) "", supplier0);
      assertNotNull(charSequence0);
      assertTrue(charSequence0.equals((Object)string0));
      assertEquals("", charSequence0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "";
      charSequenceArray0[2] = (CharSequence) "";
      int int0 = StringUtils.indexOfDifference(charSequenceArray0);
      assertEquals(3, charSequenceArray0.length);
      assertEquals((-1), int0);
      
      String string1 = StringUtils.abbreviate((String) null, "", 843, (-1041));
      assertNull(string1);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      String string0 = StringUtils.stripAccents("wDPtb=E*0D +");
      assertNotNull(string0);
      assertEquals("wDPtb=E*0D +", string0);
      
      String string1 = StringUtils.replaceOnceIgnoreCase(";e|PvY[M,WJ=KeK,MR", "/h81Uu", " vs ");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals(";e|PvY[M,WJ=KeK,MR", string1);
      
      String string2 = StringUtils.replaceChars("=9", 'c', 'c');
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("=9", string2);
      
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("wDPtb=E*0D +");
      assertNotNull(stringArray0);
      assertEquals(11, stringArray0.length);
      
      String string3 = StringUtils.difference("", ":* 5~6sqNSEVx.P$[i");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals(":* 5~6sqNSEVx.P$[i", string3);
      
      String string4 = StringUtils.rightPad("&D<(}O8/~lb*:", 2089, 'O');
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      
      String[] stringArray1 = StringUtils.splitPreserveAllTokens("9rz.Ukuw<#xx9GUR", 'y');
      assertNotNull(stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(1, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      String string5 = StringUtils.firstNonBlank(stringArray1);
      assertNotNull(string5);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(1, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertEquals("9rz.Ukuw<#xx9GUR", string5);
      
      String string6 = StringUtils.deleteWhitespace("\r");
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string5));
      assertEquals("", string6);
      
      String string7 = StringUtils.abbreviate("9rz.Ukuw<#xx9GUR", 321, 321);
      assertNotNull(string7);
      assertTrue(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string0));
      assertEquals("9rz.Ukuw<#xx9GUR", string7);
      
      String string8 = StringUtils.stripToEmpty("9rz.Ukuw<#xx9GUR");
      assertNotNull(string8);
      assertFalse(string8.equals((Object)string6));
      assertTrue(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string1));
      assertTrue(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string3));
      assertEquals("9rz.Ukuw<#xx9GUR", string8);
      
      String string9 = StringUtils.left("\r", 321);
      assertNotNull(string9);
      assertFalse(string9.equals((Object)string1));
      assertFalse(string9.equals((Object)string2));
      assertFalse(string9.equals((Object)string3));
      assertFalse(string9.equals((Object)string0));
      assertFalse(string9.equals((Object)string7));
      assertFalse(string9.equals((Object)string8));
      assertFalse(string9.equals((Object)string6));
      assertFalse(string9.equals((Object)string4));
      assertFalse(string9.equals((Object)string5));
      assertEquals("\r", string9);
      
      long[] longArray0 = new long[4];
      longArray0[0] = (long) 'c';
      longArray0[1] = (long) 'c';
      longArray0[2] = (long) 'c';
      longArray0[3] = (long) 321;
      String string10 = StringUtils.join(longArray0, 'o', 321, 49);
      assertNotNull(string10);
      assertEquals(4, longArray0.length);
      assertFalse(string10.equals((Object)string9));
      assertFalse(string10.equals((Object)string3));
      assertFalse(string10.equals((Object)string5));
      assertFalse(string10.equals((Object)string4));
      assertFalse(string10.equals((Object)string1));
      assertFalse(string10.equals((Object)string7));
      assertFalse(string10.equals((Object)string2));
      assertFalse(string10.equals((Object)string8));
      assertFalse(string10.equals((Object)string0));
      assertEquals("", string10);
      assertArrayEquals(new long[] {99L, 99L, 99L, 321L}, longArray0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      String string0 = StringUtils.stripAccents("wDPtb=E*0D +");
      assertNotNull(string0);
      assertEquals("wDPtb=E*0D +", string0);
      
      String string1 = StringUtils.replaceOnceIgnoreCase(";e|PvY[M,WJ=KeK,MR", "/h81Uu", " vs ");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals(";e|PvY[M,WJ=KeK,MR", string1);
      
      String string2 = StringUtils.replaceChars("=9", 'c', 'a');
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("=9", string2);
      
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("wDPtb=E*0D +");
      assertNotNull(stringArray0);
      assertEquals(11, stringArray0.length);
      
      String string3 = StringUtils.difference("", ":* 5~6sqNSEVx.P$[i");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals(":* 5~6sqNSEVx.P$[i", string3);
      
      String string4 = StringUtils.rightPad("&D<(}O8/~lb*:", 2089, 'O');
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      
      String[] stringArray1 = StringUtils.splitPreserveAllTokens("9rz.Ukuw<#xx9GUR", 'y');
      assertNotNull(stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(1, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      String string5 = StringUtils.firstNonBlank(stringArray1);
      assertNotNull(string5);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(1, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertEquals("9rz.Ukuw<#xx9GUR", string5);
      
      String string6 = StringUtils.deleteWhitespace("\r");
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string1));
      assertEquals("", string6);
      
      String string7 = StringUtils.abbreviate("9rz.Ukuw<#xx9GUR", 321, 321);
      assertNotNull(string7);
      assertFalse(string7.equals((Object)string1));
      assertTrue(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string6));
      assertEquals("9rz.Ukuw<#xx9GUR", string7);
      
      String string8 = StringUtils.stripToEmpty("9rz.Ukuw<#xx9GUR");
      assertNotNull(string8);
      assertFalse(string8.equals((Object)string0));
      assertTrue(string8.equals((Object)string7));
      assertTrue(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string2));
      assertEquals("9rz.Ukuw<#xx9GUR", string8);
      
      String string9 = StringUtils.left("\r", 321);
      assertNotNull(string9);
      assertFalse(string9.equals((Object)string0));
      assertFalse(string9.equals((Object)string7));
      assertFalse(string9.equals((Object)string5));
      assertFalse(string9.equals((Object)string8));
      assertFalse(string9.equals((Object)string2));
      assertFalse(string9.equals((Object)string3));
      assertFalse(string9.equals((Object)string4));
      assertFalse(string9.equals((Object)string6));
      assertFalse(string9.equals((Object)string1));
      assertEquals("\r", string9);
      
      long[] longArray0 = new long[4];
      longArray0[0] = (long) 'c';
      longArray0[1] = (long) 'c';
      longArray0[2] = (long) 'c';
      longArray0[3] = (long) 321;
      String string10 = StringUtils.join(longArray0, 'o', 321, 49);
      assertNotNull(string10);
      assertEquals(4, longArray0.length);
      assertFalse(string10.equals((Object)string2));
      assertFalse(string10.equals((Object)string7));
      assertFalse(string10.equals((Object)string5));
      assertFalse(string10.equals((Object)string3));
      assertFalse(string10.equals((Object)string4));
      assertFalse(string10.equals((Object)string9));
      assertFalse(string10.equals((Object)string1));
      assertFalse(string10.equals((Object)string0));
      assertFalse(string10.equals((Object)string8));
      assertEquals("", string10);
      assertArrayEquals(new long[] {99L, 99L, 99L, 321L}, longArray0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[0] = " vs ";
      String string0 = StringUtils.trimToEmpty(" vs ");
      assertNotNull(string0);
      assertEquals("vs", string0);
      
      String string1 = StringUtils.wrap("d7Xxt`", 'U');
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("Ud7Xxt`U", string1);
      
      int int0 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      int int1 = StringUtils.indexOfIgnoreCase((CharSequence) "Ud7Xxt`U", (CharSequence) "vs", (-1));
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      String string0 = StringUtils.replaceChars("...", "D$8Lf)!VS<5=f6GDM", (String) null);
      assertNotNull(string0);
      assertEquals("...", string0);
      
      boolean boolean0 = StringUtils.isAsciiPrintable("...");
      assertTrue(boolean0);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "...", (CharSequence) "D$8Lf)!VS<5=f6GDM", (-656));
      assertEquals((-1), int0);
      
      String string1 = StringUtils.mid(" vs ", (-475), 2551);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals(" vs ", string1);
      
      PriorityQueue<Integer> priorityQueue0 = new PriorityQueue<Integer>();
      assertNotNull(priorityQueue0);
      assertEquals(0, priorityQueue0.size());
      assertFalse(priorityQueue0.contains((-475)));
      
      String string2 = StringUtils.rightPad("Asrswe==p5@L+jAsrswe==p5@L+jAsrswe==p5@L+jAsrswe==p5@L+j", (-37), "");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("Asrswe==p5@L+jAsrswe==p5@L+jAsrswe==p5@L+jAsrswe==p5@L+j", string2);
      
      String string3 = StringUtils.chop(":VN(Ds[HO\":8~");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals(":VN(Ds[HO\":8", string3);
      
      double double0 = StringUtils.getJaroWinklerDistance(":VN(Ds[HO\":8", ":VN(Ds[HO\":8");
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      String string0 = StringUtils.substringBetween("9O~Q[@]~H+_|)M^", "9O~Q[@]~H+_|)M^", (String) null);
      assertNull(string0);
      
      boolean boolean0 = StringUtils.isAllLowerCase((CharSequence) null);
      assertFalse(boolean0);
      
      String string1 = StringUtils.stripStart((String) null, "9O~Q[@]~H+_|)M^");
      assertNull(string1);
      
      String string2 = StringUtils.wrap((String) null, 'M');
      assertNull(string2);
      
      String string3 = StringUtils.join((char[]) null, '(', (-1), (-1));
      assertNull(string3);
      
      boolean boolean1 = StringUtils.isAlpha("9O~Q[@]~H+_|)M^");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string4 = StringUtils.repeat('(', (-1));
      assertNotNull(string4);
      assertEquals("", string4);
      
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      String string5 = StringUtils.remove((String) null, '8');
      assertNull(string5);
      
      charSequenceArray0[0] = (CharSequence) null;
      charSequenceArray0[1] = (CharSequence) null;
      boolean boolean2 = StringUtils.isAnyEmpty(charSequenceArray0);
      assertEquals(2, charSequenceArray0.length);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2);
      
      String string6 = StringUtils.appendIfMissing("Aborting to protect against StackOverflowError - output of one loop is the input of another", (CharSequence) null, charSequenceArray0);
      assertNotNull(string6);
      assertEquals(2, charSequenceArray0.length);
      assertFalse(string6.equals((Object)string4));
      assertEquals("Aborting to protect against StackOverflowError - output of one loop is the input of another", string6);
      
      boolean boolean3 = StringUtils.isNumeric(charSequenceArray0[0]);
      assertEquals(2, charSequenceArray0.length);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3);
      
      boolean boolean4 = StringUtils.isEmpty((CharSequence) null);
      assertFalse(boolean4 == boolean3);
      assertFalse(boolean4 == boolean0);
      assertFalse(boolean4 == boolean1);
      assertTrue(boolean4 == boolean2);
      assertTrue(boolean4);
      
      String string7 = StringUtils.substring((String) null, (-822));
      assertNull(string7);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      String string0 = StringUtils.remove("W~p/]:FDw`qEP(g{Xm", "W~p/]:FDw`qEP(g{Xm");
      assertNotNull(string0);
      assertEquals("", string0);
      
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "");
      assertNotNull(charBuffer0);
      assertEquals(0, charBuffer0.position());
      assertTrue(charBuffer0.isReadOnly());
      assertFalse(charBuffer0.hasArray());
      assertEquals(0, charBuffer0.capacity());
      assertFalse(charBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.limit());
      assertEquals("", charBuffer0.toString());
      assertEquals(0, charBuffer0.length());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.remaining());
      
      String string1 = StringUtils.upperCase("");
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      
      int int0 = StringUtils.indexOf((CharSequence) charBuffer0, (CharSequence) "W~p/]:FDw`qEP(g{Xm", 160);
      assertEquals(0, charBuffer0.position());
      assertTrue(charBuffer0.isReadOnly());
      assertFalse(charBuffer0.hasArray());
      assertEquals(0, charBuffer0.capacity());
      assertFalse(charBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.limit());
      assertEquals("", charBuffer0.toString());
      assertEquals(0, charBuffer0.length());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.remaining());
      assertEquals((-1), int0);
      
      String string2 = StringUtils.removePattern("...", ", '");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("...", string2);
      
      boolean boolean0 = StringUtils.isAlphaSpace("W~p/]:FDw`qEP(g{Xm");
      assertFalse(boolean0);
      
      String string3 = StringUtils.substringBetween("Supplied value must be a valid byte literal between -32768 and 32767: [", (String) null);
      assertNull(string3);
      
      boolean boolean1 = StringUtils.isAlphanumeric(charBuffer0);
      assertEquals(0, charBuffer0.position());
      assertTrue(charBuffer0.isReadOnly());
      assertFalse(charBuffer0.hasArray());
      assertEquals(0, charBuffer0.capacity());
      assertFalse(charBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.limit());
      assertEquals("", charBuffer0.toString());
      assertEquals(0, charBuffer0.length());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.remaining());
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string4 = StringUtils.replace("Object varargs must not be null", "", ", '");
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertEquals("Object varargs must not be null", string4);
      
      boolean boolean2 = StringUtils.isAlphanumericSpace("...");
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      
      Locale locale0 = Locale.UK;
      assertNotNull(locale0);
      assertEquals("GB", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en_GB", locale0.toString());
      assertEquals("GBR", locale0.getISO3Country());
      
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      TreeSet<String> treeSet0 = new TreeSet<String>();
      assertNotNull(treeSet0);
      assertFalse(treeSet0.contains("..."));
      
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) arrayList0, (Collection<String>) treeSet0);
      assertNotNull(list0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertFalse(treeSet0.contains("..."));
      assertFalse(list0.contains("..."));
      
      String string5 = locale0.getDisplayScript();
      assertNotNull(string5);
      assertEquals("GB", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en_GB", locale0.toString());
      assertEquals("GBR", locale0.getISO3Country());
      assertTrue(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertTrue(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertEquals("", string5);
      
      String string6 = locale0.getDisplayVariant();
      assertNotNull(string6);
      assertEquals("GB", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en_GB", locale0.toString());
      assertEquals("GBR", locale0.getISO3Country());
      assertFalse(string6.equals((Object)string2));
      assertTrue(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string4));
      assertTrue(string6.equals((Object)string0));
      assertEquals("", string6);
      
      String string7 = StringUtils.upperCase((String) null, locale0);
      assertNull(string7);
      assertEquals("GB", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en_GB", locale0.toString());
      assertEquals("GBR", locale0.getISO3Country());
      
      int int1 = StringUtils.countMatches((CharSequence) "", (CharSequence) "");
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      boolean boolean3 = StringUtils.equalsIgnoreCase("4] WVA2U%Qi_Hs", "");
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) "";
      objectArray0[2] = (Object) "Object varargs must not be null";
      boolean boolean4 = StringUtils.containsOnly((CharSequence) "...", "");
      assertTrue(boolean4 == boolean2);
      assertTrue(boolean4 == boolean3);
      assertTrue(boolean4 == boolean1);
      assertTrue(boolean4 == boolean0);
      assertFalse(boolean4);
      
      String string8 = StringUtils.capitalize("&xmGb6 c");
      assertNotNull(string8);
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string6));
      assertEquals("&xmGb6 c", string8);
      
      char[] charArray0 = new char[7];
      charArray0[0] = 'p';
      charArray0[1] = '>';
      charArray0[2] = '8';
      charArray0[3] = 'f';
      charArray0[4] = 'n';
      charArray0[5] = '>';
      charArray0[6] = '{';
      boolean boolean5 = StringUtils.containsOnly((CharSequence) null, charArray0);
      assertEquals(7, charArray0.length);
      assertTrue(boolean5 == boolean3);
      assertTrue(boolean5 == boolean4);
      assertTrue(boolean5 == boolean2);
      assertTrue(boolean5 == boolean0);
      assertTrue(boolean5 == boolean1);
      assertFalse(boolean5);
      assertArrayEquals(new char[] {'p', '>', '8', 'f', 'n', '>', '{'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      String string0 = StringUtils.join((Iterator<?>) null, "");
      assertNull(string0);
      
      char[] charArray0 = new char[5];
      charArray0[1] = ']';
      charArray0[1] = 'Q';
      charArray0[2] = ']';
      charArray0[3] = ']';
      charArray0[4] = ']';
      boolean boolean0 = StringUtils.containsOnly((CharSequence) null, charArray0);
      assertEquals(5, charArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new char[] {'\u0000', 'Q', ']', ']', ']'}, charArray0);
      
      boolean boolean1 = StringUtils.isAllUpperCase("");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      int int0 = StringUtils.indexOfAny((CharSequence) null, charArray0);
      assertEquals(5, charArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new char[] {'\u0000', 'Q', ']', ']', ']'}, charArray0);
      
      String string1 = StringUtils.normalizeSpace((String) null);
      assertNull(string1);
      
      String string2 = StringUtils.stripEnd("", "[=d^l4");
      assertNotNull(string2);
      assertEquals("", string2);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      String string0 = StringUtils.remove("$4'Tcj.*5", 'o');
      assertNotNull(string0);
      assertEquals("$4'Tcj.*5", string0);
      
      String string1 = "\\u";
      String string2 = StringUtils.replaceOnceIgnoreCase("$4'Tcj.*5", "", string1);
      assertNotNull(string2);
      assertFalse(string1.equals((Object)string0));
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("$4'Tcj.*5", string2);
      
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      charSequenceArray0[1] = (CharSequence) "";
      charSequenceArray0[3] = (CharSequence) "";
      charSequenceArray0[4] = (CharSequence) "";
      boolean boolean0 = StringUtils.equalsAnyIgnoreCase("$4'Tcj.*5", charSequenceArray0);
      assertEquals(5, charSequenceArray0.length);
      assertFalse(boolean0);
      
      String string3 = StringUtils.join((Object[]) charSequenceArray0, "", 196, 124);
      assertNotNull(string3);
      assertEquals(5, charSequenceArray0.length);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals("", string3);
      
      // Undeclared exception!
      try { 
        StringUtils.abbreviate("uS.^e:o_ufGpAUS.^e:o_ufGpAUS.^e:o_ufGpAUS.^e:o_ufG", "$4'Tcj.*5", 124, 14);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum abbreviation width with offset is 19
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      String string0 = StringUtils.remove("$4'Tcj.*5", 'o');
      assertNotNull(string0);
      assertEquals("$4'Tcj.*5", string0);
      
      String string1 = "\\u";
      String string2 = StringUtils.replaceOnceIgnoreCase("$4'Tcj.*5", "", string1);
      assertNotNull(string2);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertEquals("$4'Tcj.*5", string2);
      
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      charSequenceArray0[1] = (CharSequence) "";
      charSequenceArray0[3] = (CharSequence) "";
      charSequenceArray0[4] = (CharSequence) "";
      boolean boolean0 = StringUtils.equalsAnyIgnoreCase("$4'Tcj.*5", charSequenceArray0);
      assertEquals(5, charSequenceArray0.length);
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        StringUtils.abbreviate("uS.^e:o_ufGpAUS.^e:o_ufGpAUS.^e:o_ufGpAUS.^e:o_ufG", "$4'Tcj.*5", 124, 14);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum abbreviation width with offset is 19
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "US.^e:o_ufGpA";
      String string0 = StringUtils.substringAfterLast("US.^e:o_ufGpA", 101);
      assertNotNull(string0);
      assertEquals(":o_ufGpA", string0);
      
      String string1 = StringUtils.LF;
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("\n", string1);
      
      boolean boolean0 = StringUtils.isAlphanumeric("\n");
      assertFalse(boolean0);
      
      String string2 = StringUtils.defaultString("(d");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("(d", string2);
      
      int int0 = StringUtils.countMatches((CharSequence) "(d", (CharSequence) "(d");
      assertEquals(1, int0);
      
      boolean boolean1 = StringUtils.contains((CharSequence) "US.^e:o_ufGpA", 101);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      int int1 = StringUtils.compare("BdT+IXdq(WJ%", ":o_ufGpA", false);
      assertFalse(int1 == int0);
      assertEquals(8, int1);
      
      String string3 = StringUtils.stripStart("US.^e:o_ufGpA", "org.apache.commons.lang3.Charsets");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("US.^e:o_ufGpA", string3);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      Locale.Category[] locale_CategoryArray0 = new Locale.Category[9];
      locale_CategoryArray0[0] = locale_Category0;
      locale_CategoryArray0[1] = locale_Category0;
      locale_CategoryArray0[2] = locale_Category0;
      locale_CategoryArray0[3] = locale_Category0;
      locale_CategoryArray0[4] = locale_Category0;
      locale_CategoryArray0[5] = locale_Category0;
      locale_CategoryArray0[6] = locale_Category0;
      Locale.Category locale_Category1 = Locale.Category.FORMAT;
      locale_CategoryArray0[7] = locale_Category1;
      locale_CategoryArray0[8] = locale_Category0;
      EnumSet<Locale.Category> enumSet0 = EnumSet.of(locale_Category0, locale_CategoryArray0);
      assertNotNull(enumSet0);
      assertNotSame(locale_Category0, locale_Category1);
      assertEquals(2, enumSet0.size());
      assertEquals(9, locale_CategoryArray0.length);
      assertFalse(locale_Category0.equals((Object)locale_Category1));
      assertTrue(enumSet0.contains(locale_Category1));
      
      Locale.Category locale_Category2 = Locale.Category.FORMAT;
      boolean boolean0 = enumSet0.add(locale_Category2);
      assertNotSame(locale_Category0, locale_Category2);
      assertNotSame(locale_Category0, locale_Category1);
      assertSame(locale_Category2, locale_Category1);
      assertNotSame(locale_Category2, locale_Category0);
      assertEquals(2, enumSet0.size());
      assertEquals(9, locale_CategoryArray0.length);
      assertFalse(locale_Category0.equals((Object)locale_Category2));
      assertFalse(locale_Category0.equals((Object)locale_Category1));
      assertFalse(locale_Category2.equals((Object)locale_Category0));
      assertFalse(boolean0);
      assertTrue(enumSet0.contains(locale_Category1));
      
      Iterator<Locale.Category> iterator0 = enumSet0.iterator();
      assertNotNull(iterator0);
      assertNotSame(locale_Category0, locale_Category2);
      assertNotSame(locale_Category0, locale_Category1);
      assertEquals(2, enumSet0.size());
      assertEquals(9, locale_CategoryArray0.length);
      assertFalse(locale_Category0.equals((Object)locale_Category2));
      assertFalse(locale_Category0.equals((Object)locale_Category1));
      assertTrue(enumSet0.contains(locale_Category1));
      
      String string0 = StringUtils.join(iterator0, "VT76I%Sr''6AGe(yW\"u");
      assertNotNull(string0);
      assertNotSame(locale_Category0, locale_Category2);
      assertNotSame(locale_Category0, locale_Category1);
      assertEquals(2, enumSet0.size());
      assertEquals(9, locale_CategoryArray0.length);
      assertFalse(locale_Category0.equals((Object)locale_Category2));
      assertFalse(locale_Category0.equals((Object)locale_Category1));
      assertEquals("DISPLAYVT76I%Sr''6AGe(yW\"uFORMAT", string0);
      assertTrue(enumSet0.contains(locale_Category1));
      
      boolean boolean1 = StringUtils.contains((CharSequence) "VT76I%Sr''6AGe(yW\"u", 37);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String string1 = StringUtils.rightPad("DISPLAYVT76I%Sr''6AGe(yW\"uFORMAT", 37, '-');
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("DISPLAYVT76I%Sr''6AGe(yW\"uFORMAT-----", string1);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "US.^e:o_ufGpA";
      String[] stringArray1 = StringUtils.stripAll(stringArray0);
      assertNotNull(stringArray1);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(1, stringArray0.length);
      assertEquals(1, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      boolean boolean0 = StringUtils.containsAnyIgnoreCase("(d", stringArray0);
      assertNotSame(stringArray0, stringArray1);
      assertEquals(1, stringArray0.length);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertFalse(boolean0);
      
      String string0 = StringUtils.difference("g+D.&(", "g+D.&(");
      assertNotNull(string0);
      assertEquals("", string0);
      
      char[] charArray0 = new char[0];
      boolean boolean1 = StringUtils.containsOnly((CharSequence) "(d", charArray0);
      assertEquals(0, charArray0.length);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertArrayEquals(new char[] {}, charArray0);
      
      String string1 = StringUtils.defaultIfEmpty("Search and Replace array lengths don't match: ", "C;4W=+tC;4W=+tC;4W=+tC;4W=+tC;4W=+tC;4W=wDPtb=E*0D +uS.^e:o_ufGpAUS.^e:o_ufGpAUS.^e:o_ufGpAUS.^e:o_ufG");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("Search and Replace array lengths don't match: ", string1);
      
      boolean boolean2 = StringUtils.containsNone((CharSequence) "Rj?L(A;", charArray0);
      assertEquals(0, charArray0.length);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2);
      assertArrayEquals(new char[] {}, charArray0);
      
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      assertNotNull(charBuffer0);
      assertEquals(0, charBuffer0.arrayOffset());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals("", charBuffer0.toString());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.capacity());
      assertEquals(0, charBuffer0.length());
      assertEquals(0, charBuffer0.limit());
      assertFalse(charBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.position());
      assertEquals(0, charBuffer0.remaining());
      assertTrue(charBuffer0.hasArray());
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      
      // Undeclared exception!
      try { 
        CharBuffer.wrap(charArray0, 196, (-3459));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      String string0 = StringUtils.replaceOnceIgnoreCase("", "", "");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.rightPad("", 10, '{');
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("{{{{{{{{{{", string1);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("", '{');
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      String string2 = StringUtils.join((Object[]) stringArray0, '{', 213, (-591));
      assertNotNull(string2);
      assertEquals(0, stringArray0.length);
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("", string2);
      
      String string3 = StringUtils.wrapIfMissing("", "");
      assertNotNull(string3);
      assertTrue(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string0));
      assertEquals("", string3);
      
      String string4 = StringUtils.swapCase("");
      assertNotNull(string4);
      assertTrue(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string2));
      assertEquals("", string4);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "`9.{GYn4:qUn3`3", (CharSequence) "", 102);
      assertEquals(15, int0);
      
      String string5 = StringUtils.toRootLowerCase("...");
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertEquals("...", string5);
      
      String string6 = StringUtils.defaultIfBlank((String) null, (String) null);
      assertNull(string6);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "US.^e:o_ufGpA";
      String string0 = StringUtils.stripStart("#,", "US.^e:o_ufGpA");
      assertNotNull(string0);
      assertEquals("#,", string0);
      
      boolean boolean0 = StringUtils.containsIgnoreCase("US.^e:o_ufGpA", "#,");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isAlphaSpace("#,");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string1 = StringUtils.uncapitalize("US.^e:o_ufGpA");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("uS.^e:o_ufGpA", string1);
      
      String string2 = StringUtils.rightPad("uS.^e:o_ufGpA", 50, "US.^e:o_ufGpA");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("uS.^e:o_ufGpAUS.^e:o_ufGpAUS.^e:o_ufGpAUS.^e:o_ufG", string2);
      
      String string3 = StringUtils.center("wDPtb=E*0D +", (-2), '8');
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals("wDPtb=E*0D +", string3);
      
      String string4 = StringUtils.removeEndIgnoreCase("US.^e:o_ufGpA", "US.^e:o_ufGpA");
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertEquals("", string4);
      
      String string5 = StringUtils.removeEnd("#,", "\n");
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string1));
      assertTrue(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertEquals("#,", string5);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "#,", (CharSequence) "uS.^e:o_ufGpAUS.^e:o_ufGpAUS.^e:o_ufGpAUS.^e:o_ufG", 43);
      assertEquals((-1), int0);
      
      String string6 = StringUtils.leftPad("wDPtb=E*0D +", 54, "C;4W=+t");
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string2));
      assertEquals("C;4W=+tC;4W=+tC;4W=+tC;4W=+tC;4W=+tC;4W=+wDPtb=E*0D +", string6);
      
      String string7 = StringUtils.removeStart("uS.^e:o_ufGpAUS.^e:o_ufGpAUS.^e:o_ufGpAUS.^e:o_ufG", "C;4W=+tC;4W=+tC;4W=+tC;4W=+tC;4W=+tC;4W=wDPtb=E*0D +");
      assertNotNull(string7);
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string4));
      assertTrue(string7.equals((Object)string2));
      assertEquals("uS.^e:o_ufGpAUS.^e:o_ufGpAUS.^e:o_ufGpAUS.^e:o_ufG", string7);
      
      String string8 = StringUtils.left("8JzI[BHUYr^y 6c4/&S", (-1));
      assertNotNull(string8);
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string3));
      assertTrue(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string2));
      assertEquals("", string8);
      
      String string9 = StringUtils.replaceChars("", '8', '8');
      assertNotNull(string9);
      assertFalse(string9.equals((Object)string3));
      assertFalse(string9.equals((Object)string5));
      assertFalse(string9.equals((Object)string2));
      assertFalse(string9.equals((Object)string6));
      assertFalse(string9.equals((Object)string7));
      assertFalse(string9.equals((Object)string0));
      assertFalse(string9.equals((Object)string1));
      assertTrue(string9.equals((Object)string4));
      assertTrue(string9.equals((Object)string8));
      assertEquals("", string9);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      String[] stringArray0 = new String[5];
      String string0 = StringUtils.strip(stringArray0[0]);
      assertNull(string0);
      assertEquals(5, stringArray0.length);
      
      String string1 = StringUtils.unwrap("maxWith cannot be negative", " vs  vs ");
      assertNotNull(string1);
      assertEquals("maxWith cannot be negative", string1);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlphanumericSpace((CharSequence) null);
      assertFalse(boolean0);
      
      String string0 = StringUtils.uncapitalize("*QjPpOCvC>Y0BWtp.");
      assertNotNull(string0);
      assertEquals("*QjPpOCvC>Y0BWtp.", string0);
      
      boolean boolean1 = StringUtils.isAlphaSpace("*QjPpOCvC>Y0BWtp.");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = StringUtils.containsOnly((CharSequence) null, (char[]) null);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      
      String string1 = StringUtils.substringAfter("X", "Array and element cannot both be null");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "i{]K!J*83(V?o*G/m", "Wd}]");
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      String string0 = StringUtils.join((char[]) null, 'n');
      assertNull(string0);
      
      String string1 = StringUtils.join((char[]) null, '9');
      assertNull(string1);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      String string0 = StringUtils.stripToNull("XIqGd\"}!4Ple,");
      assertNotNull(string0);
      assertEquals("XIqGd\"}!4Ple,", string0);
      
      charSequenceArray0[0] = (CharSequence) "XIqGd\"}!4Ple,";
      String string1 = StringUtils.join((float[]) null, 't');
      assertNull(string1);
      
      String string2 = StringUtils.center((String) null, 3, ']');
      assertNull(string2);
      
      int int0 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      // Undeclared exception!
      try { 
        StringUtils.getLevenshteinDistance((CharSequence) null, (CharSequence) null, (-505596879));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = " vs ";
      stringArray0[1] = " vs ";
      stringArray0[2] = " vs ";
      String string0 = StringUtils.getCommonPrefix(stringArray0);
      assertNotNull(string0);
      assertEquals(5, stringArray0.length);
      assertEquals("", string0);
      
      char[] charArray0 = new char[6];
      charArray0[4] = 'w';
      String string1 = StringUtils.mid(" vs ", 3799, (-808));
      assertNotNull(string1);
      assertEquals("", string1);
      
      String string2 = StringUtils.unwrap("", '$');
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertEquals("", string2);
      
      String string3 = StringUtils.remove("", " vs ");
      assertNotNull(string3);
      assertTrue(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string2));
      assertEquals("", string3);
      
      String string4 = StringUtils.join((float[]) null, 'v');
      assertNull(string4);
      
      String string5 = StringUtils.chomp("\n-cBy67k9#e'y~~L{X", "-808.0j891.1.M,KjXgwsMU,");
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertEquals("\n-cBy67k9#e'y~~L{X", string5);
      
      boolean boolean0 = StringUtils.isMixedCase("\n-cBy67k9#e'y~~L{X");
      assertTrue(boolean0);
      
      String string6 = StringUtils.removeStart("", "T);7!-Wcp8");
      assertNotNull(string6);
      assertTrue(string6.equals((Object)string0));
      assertTrue(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string5));
      assertTrue(string6.equals((Object)string1));
      assertTrue(string6.equals((Object)string2));
      assertEquals("", string6);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = (int) '7';
      intArray0[1] = (int) '7';
      intArray0[2] = (int) '7';
      intArray0[3] = (int) '7';
      intArray0[4] = (int) '7';
      Stack<String> stack0 = new Stack<String>();
      assertNotNull(stack0);
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) 55;
      floatArray0[1] = (float) '7';
      floatArray0[2] = (float) 55;
      String string0 = StringUtils.join(floatArray0, '7');
      assertNotNull(string0);
      assertEquals(3, floatArray0.length);
      assertEquals("55.0755.0755.0", string0);
      assertArrayEquals(new float[] {55.0F, 55.0F, 55.0F}, floatArray0, 0.01F);
      
      String string1 = StringUtils.stripEnd("55.0755.0755.0", "55.0755.0755.0");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      
      String string2 = StringUtils.center("", 55, "");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("                                                       ", string2);
      
      String string3 = StringUtils.replaceOnceIgnoreCase("55.0755.0755.0", "55.0755.0755.0", "                                                       ");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals("                                                       ", string3);
      
      String string4 = StringUtils.mid("", (-1868), (-1868));
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertEquals("", string4);
      
      String string5 = StringUtils.wrapIfMissing("", 'G');
      assertNotNull(string5);
      assertTrue(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertTrue(string5.equals((Object)string4));
      assertEquals("", string5);
      
      String string6 = StringUtils.replaceOnceIgnoreCase((String) null, ",OgH#.>iD>Z1y", "");
      assertNull(string6);
      
      boolean boolean0 = StringUtils.startsWith("                                                       ", (CharSequence) null);
      assertFalse(boolean0);
      
      String string7 = StringUtils.center("Oxws^dTaWA<%*)", (-919), 'G');
      assertNotNull(string7);
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string4));
      assertEquals("Oxws^dTaWA<%*)", string7);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      String string0 = StringUtils.center("Z^57mE1H61]p", 3, '*');
      assertNotNull(string0);
      assertEquals("Z^57mE1H61]p", string0);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "", (CharSequence) "Z^57mE1H61]p");
      assertEquals(12, int0);
      
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.name());
      
      byte[] byteArray0 = StringUtils.getBytes("", charset0);
      assertNotNull(byteArray0);
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.name());
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "Minimum abbreviation width is %d";
      stringArray0[1] = "";
      String string0 = StringUtils.replaceIgnoreCase("Threshold must not be negative", "Locale must not be null", "", (-3695));
      assertNotNull(string0);
      assertEquals("Threshold must not be negative", string0);
      
      String string1 = StringUtils.center("", (-73));
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      
      String string2 = StringUtils.replaceEachRepeatedly("f0uCY7&r", stringArray0, stringArray0);
      assertNotNull(string2);
      assertEquals(2, stringArray0.length);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("f0uCY7&r", string2);
      
      String string3 = StringUtils.stripEnd("{}", "");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals("{}", string3);
      
      int int0 = StringUtils.compareIgnoreCase("Locale must not be null", ">Pv^JM1h&G+ov) #1l");
      assertEquals(46, int0);
      
      String string4 = StringUtils.defaultIfEmpty("&J?l(S/ktr4V6~TRa%", "");
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertEquals("&J?l(S/ktr4V6~TRa%", string4);
      
      String string5 = StringUtils.substringAfter("Locale must not be null", "Threshold must not be negative");
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertEquals("", string5);
      
      boolean boolean0 = StringUtils.isNotBlank("");
      assertFalse(boolean0);
      
      String string6 = StringUtils.normalizeSpace("f0uCY7&r");
      assertNotNull(string6);
      assertTrue(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string4));
      assertEquals("f0uCY7&r", string6);
      
      String string7 = StringUtils.mid("", 46, 46);
      assertNotNull(string7);
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string6));
      assertEquals("", string7);
      
      String string8 = StringUtils.unwrap("f0uCY7&r", '\"');
      assertNotNull(string8);
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string5));
      assertTrue(string8.equals((Object)string6));
      assertTrue(string8.equals((Object)string2));
      assertEquals("f0uCY7&r", string8);
      
      boolean boolean1 = StringUtils.startsWith("", "f0uCY7&r");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string9 = StringUtils.center((String) null, (-72), '\"');
      assertNull(string9);
      
      String string10 = StringUtils.abbreviate("uS.^e:o_ufGpAUS.^e:o_ufGpAUS.^e:o_ufGpAUS.^e:o_ufG", (-720), 46);
      assertNotNull(string10);
      assertFalse(string10.equals((Object)string1));
      assertFalse(string10.equals((Object)string4));
      assertFalse(string10.equals((Object)string2));
      assertFalse(string10.equals((Object)string3));
      assertFalse(string10.equals((Object)string5));
      assertFalse(string10.equals((Object)string0));
      assertFalse(string10.equals((Object)string6));
      assertFalse(string10.equals((Object)string7));
      assertFalse(string10.equals((Object)string8));
      assertEquals("uS.^e:o_ufGpAUS.^e:o_ufGpAUS.^e:o_ufGpAUS.^...", string10);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      long[] longArray0 = new long[5];
      longArray0[0] = 4L;
      longArray0[3] = (-1L);
      longArray0[2] = (-1282L);
      longArray0[3] = 4L;
      longArray0[4] = 0L;
      String string0 = StringUtils.SPACE;
      assertNotNull(string0);
      assertEquals(" ", string0);
      
      String string1 = StringUtils.rightPad(">H=5GIE", 866, (String) null);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEqualsstring1);
      
      String string2 = null;
      String string3 = StringUtils.difference((String) null, (String) null);
      assertNull(string3);
      
      // Undeclared exception!
      try { 
        StringUtils.getLevenshteinDistance((CharSequence) null, (CharSequence) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      String string0 = StringUtils.remove("#r", 'y');
      assertNotNull(string0);
      assertEquals("#r", string0);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "#r", (CharSequence) "#r", 421);
      assertEquals(0, int0);
      
      String string1 = StringUtils.capitalize("#r");
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("#r", string1);
      
      String string2 = StringUtils.abbreviate("offset cannot be negative", 28, 12);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("... negative", string2);
      
      String string3 = StringUtils.stripToEmpty("Ve9.rVe9.r");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals("Ve9.rVe9.r", string3);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      String string0 = StringUtils.repeat("c^P#chHM", 6);
      assertNotNull(string0);
      assertEquals("c^P#chHMc^P#chHMc^P#chHMc^P#chHMc^P#chHMc^P#chHM", string0);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "c^P#chHMc^P#chHMc^P#chHMc^P#chHMc^P#chHMc^P#chHM", "c^P#chHMc^P#chHMc^P#chHMc^P#chHMc^P#chHMc^P#chHM");
      assertEquals(0, int0);
      
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "w[ S*{(\"xv", "c^P#chHM");
      assertFalse(boolean0);
      
      String string1 = StringUtils.wrapIfMissing(",(y.\"iqjX =rLC", 'S');
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("S,(y.\"iqjX =rLCS", string1);
      
      boolean boolean1 = StringUtils.startsWith("S,(y.\"iqjX =rLCS", "xm}TdUxm}TdU");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string2 = StringUtils.stripStart("c^P#chHMc^P#chHMc^P#chHMc^P#chHMc^P#chHMc^P#chHM", "xm}TdUxm}TdU");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertEquals("c^P#chHMc^P#chHMc^P#chHMc^P#chHMc^P#chHMc^P#chHM", string2);
      
      String string3 = StringUtils.abbreviate("c^P#chHMc^P#chHMc^P#chHMc^P#chHMc^P#chHMc^P#chHM", "#r", 108, 10);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals("#rc^P#chHM", string3);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = (int) '7';
      intArray0[1] = (int) '7';
      intArray0[2] = (int) '7';
      intArray0[3] = (int) '7';
      intArray0[4] = (int) '7';
      Stack<String> stack0 = new Stack<String>();
      assertNotNull(stack0);
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) 55;
      floatArray0[1] = (float) '7';
      floatArray0[2] = (float) 55;
      String string0 = StringUtils.join(floatArray0, '7');
      assertNotNull(string0);
      assertEquals(3, floatArray0.length);
      assertEquals("55.0755.0755.0", string0);
      assertArrayEquals(new float[] {55.0F, 55.0F, 55.0F}, floatArray0, 0.01F);
      
      String string1 = StringUtils.stripEnd("55.0755.0755.0", "55.0755.0755.0");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      
      String string2 = StringUtils.center("", 55, "");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("                                                       ", string2);
      
      String string3 = StringUtils.capitalize("");
      assertNotNull(string3);
      assertTrue(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals("", string3);
      
      boolean boolean0 = StringUtils.isEmpty("");
      assertTrue(boolean0);
      
      boolean boolean1 = StringUtils.isWhitespace("");
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String string4 = StringUtils.defaultIfBlank("", (String) null);
      assertNull(string4);
      
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "";
      charSequenceArray0[2] = (CharSequence) "";
      String string5 = StringUtils.prependIfMissing("", "", charSequenceArray0);
      assertNotNull(string5);
      assertEquals(3, charSequenceArray0.length);
      assertFalse(string5.equals((Object)string0));
      assertTrue(string5.equals((Object)string1));
      assertTrue(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertEquals("", string5);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlpha("ClP>2# gfkKWB@vC");
      assertFalse(boolean0);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "ClP>2# gfkKWB@vC", (CharSequence) "ClP>2# gfkKWB@vC");
      assertEquals(0, int0);
      
      String string0 = StringUtils.leftPad("", (-2866), 'N');
      assertNotNull(string0);
      assertEquals("", string0);
      
      boolean boolean1 = StringUtils.isAlphaSpace("ClP>2# gfkKWB@vC");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "Index: ";
      charSequenceArray0[2] = (CharSequence) "ClP>2# gfkKWB@vC";
      charSequenceArray0[3] = (CharSequence) "Index: ";
      boolean boolean2 = StringUtils.isAllEmpty(charSequenceArray0);
      assertEquals(4, charSequenceArray0.length);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      
      String string1 = StringUtils.prependIfMissingIgnoreCase("offset cannot be negative", "", charSequenceArray0);
      assertNotNull(string1);
      assertEquals(4, charSequenceArray0.length);
      assertFalse(string1.equals((Object)string0));
      assertEquals("offset cannot be negative", string1);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      String string0 = StringUtils.join((byte[]) null, 'X', 16, 1519);
      assertNull(string0);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) null, (CharSequence) null, 480);
      assertEquals((-1), int0);
      
      String[] stringArray0 = new String[6];
      stringArray0[0] = null;
      stringArray0[1] = null;
      stringArray0[2] = null;
      stringArray0[4] = null;
      stringArray0[5] = null;
      String string1 = StringUtils.getCommonPrefix(stringArray0);
      assertNotNull(string1);
      assertEquals(6, stringArray0.length);
      assertEquals("", string1);
      
      boolean boolean0 = StringUtils.equalsAny(string0, stringArray0);
      assertEquals(6, stringArray0.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      String string0 = StringUtils.substringAfter("pV&d&F@?O[k", "pV&d&F@?O[k");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = "org.apache.commons.lang3.StringUtils5|5pGW#urA~r?~3";
      String[] stringArray0 = StringUtils.split("org.apache.commons.lang3.StringUtils5|5pGW#urA~r?~3", "org.apache.commons.lang3.StringUtils5|5pGW#urA~r?~3", (-2363));
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      
      char char0 = '2';
      String string2 = StringUtils.rightPad("", (-1948), "");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertEquals("", string2);
      
      String string3 = StringUtils.chop((String) null);
      assertNull(string3);
      
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains((-2363)));
      
      String string4 = StringUtils.abbreviate("< MVzfrW&", "org.apache.commons.lang3.LocaleUtils", 41);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertEquals("< MVzfrW&", string4);
      
      String string5 = StringUtils.defaultString("< MVzfrW&");
      assertNotNull(string5);
      assertTrue(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertEquals("< MVzfrW&", string5);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "org.apache.commons.lang3.LocaleUtils", (CharSequence) "org.apache.commons.lang3.StringUtils5|5pGW#urA~r?~3");
      assertEquals((-1), int0);
      
      String string6 = StringUtils.substringBeforeLast("", "pV&d&F@?O[k");
      assertNotNull(string6);
      assertTrue(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string4));
      assertTrue(string6.equals((Object)string0));
      assertEquals("", string6);
      
      String string7 = StringUtils.substringAfter((String) null, 95);
      assertNull(string7);
      
      // Undeclared exception!
      try { 
        StringUtils.getLevenshteinDistance((CharSequence) null, (CharSequence) "org.apache.commons.lang3.StringUtils5|5pGW#urA~r?~3", 16);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      String string0 = StringUtils.chop((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlpha("a");
      assertTrue(boolean0);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "a", (CharSequence) "a");
      assertEquals(0, int0);
      
      String string0 = StringUtils.leftPad("=1QdkA|Y", 0, '\\');
      assertNotNull(string0);
      assertEquals("=1QdkA|Y", string0);
      
      boolean boolean1 = StringUtils.isAlphaSpace("=1QdkA|Y");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      // Undeclared exception!
      try { 
        Charset.forName("=1QdkA|Y");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // =1QdkA|Y
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens((String) null, 'u');
      assertNull(stringArray0);
      
      StringUtils stringUtils0 = new StringUtils();
      assertNotNull(stringUtils0);
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      
      String[] stringArray1 = StringUtils.split((String) null, "Mc6a=", (int) 'u');
      assertNull(stringArray1);
      
      String string0 = StringUtils.rightPad(" ", 50, "Z~");
      assertNotNull(string0);
      assertEquals(" Z~Z~Z~Z~Z~Z~Z~Z~Z~Z~Z~Z~Z~Z~Z~Z~Z~Z~Z~Z~Z~Z~Z~Z~Z", string0);
      
      String string1 = StringUtils.chop("Mc6a=");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("Mc6a", string1);
      
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains(50));
      
      String string2 = StringUtils.abbreviate("W1%7G", "", (-494));
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("W1%7G", string2);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "VT76I%Sr''6AGe(yW\"u", (CharSequence) " ");
      assertEquals((-1), int0);
      
      String string3 = StringUtils.substringBeforeLast("&i_[[(MI", "Z~");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals("&i_[[(MI", string3);
      
      String string4 = StringUtils.substringAfter("^k&)jbr:m8RHR27xk", (int) 'u');
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertEquals("", string4);
      
      int int1 = StringUtils.getLevenshteinDistance((CharSequence) "Mc6a", (CharSequence) "W1%7G", 96);
      assertFalse(int1 == int0);
      assertEquals(5, int1);
      
      String string5 = StringUtils.wrap("", "^k&)jbr:m8RHR27xk");
      assertNotNull(string5);
      assertTrue(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertEquals("", string5);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = " vs ";
      String string0 = StringUtils.strip(" vs ");
      assertNotNull(string0);
      assertEquals("vs", string0);
      
      double double0 = StringUtils.getJaroWinklerDistance("vs", "vs");
      assertEquals(1.0, double0, 0.01);
      
      boolean boolean0 = StringUtils.equalsAny(" vs ", stringArray0);
      assertEquals(2, stringArray0.length);
      assertTrue(boolean0);
      
      boolean boolean1 = StringUtils.isNumeric("vs");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      Integer integer0 = new Integer(13);
      assertNotNull(integer0);
      assertEquals(13, (int)integer0);
      
      int int0 = StringUtils.length(" is not in the range '0' - '9'");
      assertEquals(30, int0);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 1.0;
      String string1 = StringUtils.uncapitalize("vs");
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("vs", string1);
      
      String string2 = StringUtils.rightPad("vs", 13, "vs");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("vsvsvsvsvsvsv", string2);
      
      Supplier<CharSequence> supplier0 = (Supplier<CharSequence>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier0).get();
      CharSequence charSequence0 = StringUtils.getIfBlank((CharSequence) null, supplier0);
      assertNull(charSequence0);
      
      String string3 = StringUtils.toRootUpperCase("`dca9iaEN_(5!");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals("`DCA9IAEN_(5!", string3);
      
      boolean boolean2 = StringUtils.containsIgnoreCase(" is not in the range '0' - '9'", "vs");
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      boolean boolean3 = StringUtils.equalsIgnoreCase((CharSequence) null, "vsvsvsvsvsvsv");
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3);
      
      int int1 = StringUtils.lastIndexOf((CharSequence) "vs", 1671);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-25);
      byteArray0[1] = (byte)122;
      byteArray0[2] = (byte) (-110);
      byteArray0[3] = (byte)51;
      byteArray0[4] = (byte) (-20);
      byteArray0[5] = (byte)96;
      byteArray0[6] = (byte)7;
      byteArray0[7] = (byte)48;
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.toString());
      assertEquals("UTF-8", charset0.name());
      
      String string4 = StringUtils.toEncodedString(byteArray0, charset0);
      assertNotNull(string4);
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.toString());
      assertEquals("UTF-8", charset0.name());
      assertEquals(8, byteArray0.length);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertEquals("\uFFFDz\uFFFD3\uFFFD`\u00070", string4);
      assertArrayEquals(new byte[] {(byte) (-25), (byte)122, (byte) (-110), (byte)51, (byte) (-20), (byte)96, (byte)7, (byte)48}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte) (-16);
      byteArray0[3] = (byte) (-16);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-16);
      String string0 = StringUtils.replaceOnceIgnoreCase("Pc%lV?0sR#k&", "2", "2");
      assertNotNull(string0);
      assertEquals("Pc%lV?0sR#k&", string0);
      
      String string1 = StringUtils.rightPad("Pc%lV?0sR#k&", 3, '{');
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("Pc%lV?0sR#k&", string1);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("", '6');
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      
      String string2 = StringUtils.firstNonBlank(stringArray0);
      assertNull(string2);
      assertEquals(0, stringArray0.length);
      
      String string3 = StringUtils.deleteWhitespace("");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals("", string3);
      
      String string4 = StringUtils.abbreviate("gD", (-946), 87);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertEquals("gD", string4);
      
      String string5 = StringUtils.stripToEmpty("gD");
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string1));
      assertTrue(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertEquals("gD", string5);
      
      String string6 = StringUtils.repeat("org.apache.commons.lang3.StringUtils", "Arguments cannot both be null", 57);
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string5));
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      String string0 = StringUtils.unwrap("Wd|}51/]/&`bsA", '[');
      assertNotNull(string0);
      assertEquals("Wd|}51/]/&`bsA", string0);
      
      char[] charArray0 = new char[3];
      charArray0[1] = '[';
      charArray0[2] = '[';
      String string1 = StringUtils.abbreviate("", (-2204), 1003);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      
      String string2 = StringUtils.stripToEmpty("Wd|}51/]/&`bsA");
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("Wd|}51/]/&`bsA", string2);
      
      boolean boolean0 = StringUtils.equals((CharSequence) "", (CharSequence) "Wd|}51/]/&`bsA");
      assertFalse(boolean0);
      
      String string3 = StringUtils.unwrap("|3v\"%K_8b", "Wd|}51/]/&`bsA");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("|3v\"%K_8b", string3);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      String string0 = StringUtils.join((Iterator<?>) null, "");
      assertNull(string0);
      
      String[] stringArray0 = new String[5];
      stringArray0[0] = " ";
      stringArray0[1] = " ";
      stringArray0[2] = "nFU)@y~JLh";
      stringArray0[3] = "nFU)@y~JLh";
      stringArray0[4] = "";
      String string1 = StringUtils.unwrap("", "=a");
      assertNotNull(string1);
      assertEquals("", string1);
      
      String string2 = StringUtils.normalizeSpace(" ");
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string1));
      assertEquals("", string2);
      
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Iterator<Integer> iterator0 = linkedList0.descendingIterator();
      assertNotNull(iterator0);
      assertEquals(0, linkedList0.size());
      
      String string3 = StringUtils.join(iterator0, ',');
      assertNotNull(string3);
      assertEquals(0, linkedList0.size());
      assertTrue(string3.equals((Object)string1));
      assertEquals("", string3);
      
      String string4 = StringUtils.repeat("c0D<V!~", 7);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertEquals("c0D<V!~c0D<V!~c0D<V!~c0D<V!~c0D<V!~c0D<V!~c0D<V!~", string4);
      
      int int0 = StringUtils.indexOfDifference((CharSequence) "", (CharSequence) "c0D<V!~c0D<V!~c0D<V!~c0D<V!~c0D<V!~c0D<V!~c0D<V!~");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      String string0 = StringUtils.rotate("EW\"", 12);
      assertNotNull(string0);
      assertEquals("EW\"", string0);
      
      boolean boolean0 = StringUtils.isWhitespace("EW\"");
      assertFalse(boolean0);
      
      int int0 = StringUtils.countMatches((CharSequence) "EW\"", (CharSequence) "EW\"");
      assertEquals(1, int0);
      
      String string1 = StringUtils.uncapitalize("");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      
      int int1 = StringUtils.indexOfDifference((CharSequence) "EW\"", (CharSequence) "EW\"");
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      int int2 = StringUtils.indexOfDifference((CharSequence) "", (CharSequence) "");
      assertTrue(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals((-1), int2);
      
      int[] intArray0 = new int[5];
      intArray0[0] = 1;
      intArray0[1] = 1;
      intArray0[2] = 1;
      intArray0[3] = (-1);
      intArray0[4] = (-1);
      String string2 = StringUtils.join(intArray0, 'X');
      assertNotNull(string2);
      assertEquals(5, intArray0.length);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("1X1X1X-1X-1", string2);
      assertArrayEquals(new int[] {1, 1, 1, (-1), (-1)}, intArray0);
      
      int int3 = StringUtils.ordinalIndexOf("EW\"", "1X1X1X-1X-1", (-2858));
      assertFalse(int3 == int0);
      assertTrue(int3 == int2);
      assertTrue(int3 == int1);
      assertEquals((-1), int3);
      
      String string3 = StringUtils.substringBetween("|3v\"%K_8b", "1X1X1X-1X-1", "");
      assertNull(string3);
      
      String string4 = StringUtils.substringAfter("", "EW\"");
      assertNotNull(string4);
      assertTrue(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertEquals("", string4);
      
      String string5 = StringUtils.substringBefore("1X1X1X-1X-1", 108);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string1));
      assertTrue(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertEquals("1X1X1X-1X-1", string5);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = " vs ";
      String string0 = StringUtils.strip(" vs ");
      assertNotNull(string0);
      assertEquals("vs", string0);
      
      double double0 = StringUtils.getJaroWinklerDistance("vs", "vs");
      assertEquals(1.0, double0, 0.01);
      
      boolean boolean0 = StringUtils.equalsAny(" vs ", stringArray0);
      assertEquals(2, stringArray0.length);
      assertTrue(boolean0);
      
      boolean boolean1 = StringUtils.isNumeric("vs");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      Integer integer0 = new Integer(13);
      assertNotNull(integer0);
      assertEquals(13, (int)integer0);
      
      int int0 = StringUtils.length(" is not in the range '0' - '9'");
      assertEquals(30, int0);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 1.0;
      String string1 = StringUtils.uncapitalize("vs");
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("vs", string1);
      
      String string2 = StringUtils.rightPad("vs", 50, "vs");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("vsvsvsvsvsvsvsvsvsvsvsvsvsvsvsvsvsvsvsvsvsvsvsvsvs", string2);
      
      String string3 = StringUtils.center((String) null, (-1), 'X');
      assertNull(string3);
      
      String string4 = StringUtils.removeEndIgnoreCase((String) null, "Aborting to protect against StackOverflowError - output of one loop is the input of another");
      assertNull(string4);
      
      String string5 = StringUtils.removeEnd((String) null, "GD$!,S*,sk3.IoLtP'C");
      assertNull(string5);
      
      int int1 = StringUtils.getLevenshteinDistance((CharSequence) "vs", (CharSequence) " vs ", Integer.MAX_VALUE);
      assertFalse(int1 == int0);
      assertEquals(2, int1);
      
      String string6 = StringUtils.leftPad((String) null, 3478, (String) null);
      assertNull(string6);
      
      String string7 = StringUtils.removeStart("KjXgwsMU,", "vs");
      assertNotNull(string7);
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string0));
      assertEquals("KjXgwsMU,", string7);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      long[] longArray0 = new long[5];
      longArray0[0] = 4L;
      longArray0[3] = (-1L);
      longArray0[2] = (-1282L);
      longArray0[3] = 4L;
      char[] charArray0 = new char[4];
      charArray0[0] = '';
      charArray0[1] = 'z';
      charArray0[2] = '9';
      charArray0[3] = '9';
      String string0 = StringUtils.join(charArray0, '');
      assertNotNull(string0);
      assertEquals(4, charArray0.length);
      assertEquals("z99", string0);
      assertArrayEquals(new char[] {'', 'z', '9', '9'}, charArray0);
      
      boolean boolean0 = StringUtils.containsNone((CharSequence) "z99", charArray0);
      assertEquals(4, charArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new char[] {'', 'z', '9', '9'}, charArray0);
      
      String string1 = StringUtils.uncapitalize("G[W2Kb");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("g[W2Kb", string1);
      
      String string2 = StringUtils.removePattern("G[W2Kb", "Strings must not be null");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("G[W2Kb", string2);
      
      boolean boolean1 = StringUtils.containsAny((CharSequence) "G[W2Kb", (CharSequence) "G[W2Kb");
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "g[W2Kb", (CharSequence) "Strings must not be null", Integer.MAX_VALUE);
      assertEquals(22, int0);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      String string0 = StringUtils.remove("i/&{2d=/", 'n');
      assertNotNull(string0);
      assertEquals("i/&{2d=/", string0);
      
      boolean boolean0 = StringUtils.isAllUpperCase("i/&{2d=/");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isAllUpperCase("i/&{2d=/");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      int int0 = StringUtils.countMatches((CharSequence) "i/&{2d=/", 'k');
      assertEquals(0, int0);
      
      boolean boolean2 = StringUtils.isAllUpperCase("i/&{2d=/");
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      String string1 = StringUtils.rotate("Z8n8sy478", 9);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("Z8n8sy478", string1);
      
      int int1 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "Z8n8sy478", (CharSequence) "i/&{2d=/");
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      String[] stringArray0 = StringUtils.split(" vs ", "org.apache.commons.lang3.LocaleUtils", (-494));
      assertNotNull(stringArray0);
      assertEquals(2, stringArray0.length);
      
      String string0 = StringUtils.replaceChars("VT76I%Sr''6AGe(yW\"u", '2', 'k');
      assertNotNull(string0);
      assertEquals("VT76I%Sr''6AGe(yW\"u", string0);
      
      String string1 = StringUtils.chop("org.apache.commons.lang3.LocaleUtils");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("org.apache.commons.lang3.LocaleUtil", string1);
      
      Integer integer0 = new Integer((-494));
      assertNotNull(integer0);
      assertEquals((-494), (int)integer0);
      
      Integer integer1 = new Integer(128);
      assertNotNull(integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertEquals(128, (int)integer1);
      
      Integer integer2 = new Integer((-5909));
      assertNotNull(integer2);
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertEquals((-5909), (int)integer2);
      
      Integer integer3 = new Integer((-5909));
      assertNotNull(integer3);
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer0));
      assertTrue(integer3.equals((Object)integer2));
      assertEquals((-5909), (int)integer3);
      
      String string2 = StringUtils.right("xY*^g", (-4128));
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("", string2);
      
      String string3 = StringUtils.unwrap("Object varargs must not be null", 'n');
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals("Object varargs must not be null", string3);
      
      int int0 = StringUtils.indexOf((CharSequence) "", (-536));
      assertEquals((-1), int0);
      
      int int1 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "Object varargs must not be null", (CharSequence) "VT76I%Sr''6AGe(yW\"u");
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      int int2 = StringUtils.lastIndexOf((CharSequence) "Object varargs must not be null", (CharSequence) "Object varargs must not be null", (-494));
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals((-1), int2);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      int int0 = StringUtils.indexOf((CharSequence) "({yBTE<CM=<>!B&F=r", (-1725), 8192);
      assertEquals((-1), int0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      charSequenceArray0[0] = (CharSequence) "({yBTE<CM=<>!B&F=r";
      charSequenceArray0[1] = (CharSequence) "({yBTE<CM=<>!B&F=r";
      charSequenceArray0[2] = (CharSequence) "({yBTE<CM=<>!B&F=r";
      charSequenceArray0[3] = (CharSequence) "({yBTE<CM=<>!B&F=r";
      boolean boolean0 = StringUtils.isAnyBlank(charSequenceArray0);
      assertEquals(4, charSequenceArray0.length);
      assertFalse(boolean0);
      
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      String string0 = StringUtils.getIfEmpty("({yBTE<CM=<>!B&F=r", supplier0);
      assertNotNull(string0);
      assertEquals("({yBTE<CM=<>!B&F=r", string0);
      
      int int1 = StringUtils.compare("Minimum abbreviation width-is %dMinimum abbreDiation width is %d", (String) null);
      assertFalse(int1 == int0);
      assertEquals(1, int1);
      
      boolean boolean1 = StringUtils.isEmpty("({yBTE<CM=<>!B&F=r");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String[] stringArray0 = StringUtils.stripAll((String[]) null);
      assertNull(stringArray0);
      
      boolean boolean2 = StringUtils.containsAnyIgnoreCase("({yBTE<CM=<>!B&F=r", charSequenceArray0);
      assertEquals(4, charSequenceArray0.length);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2);
      
      boolean boolean3 = StringUtils.isWhitespace("({yBTE<CM=<>!B&F=r");
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3);
      
      int int2 = StringUtils.lastIndexOfAny(charSequenceArray0[1], charSequenceArray0);
      assertEquals(4, charSequenceArray0.length);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(0, int2);
      
      boolean boolean4 = StringUtils.isBlank(charSequenceArray0[1]);
      assertEquals(4, charSequenceArray0.length);
      assertTrue(boolean4 == boolean3);
      assertFalse(boolean4 == boolean2);
      assertTrue(boolean4 == boolean1);
      assertTrue(boolean4 == boolean0);
      assertFalse(boolean4);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      boolean boolean0 = StringUtils.isAnyBlank(charSequenceArray0);
      assertEquals(4, charSequenceArray0.length);
      assertTrue(boolean0);
      
      int int0 = StringUtils.compare("Minimum abbreviation width-is %dMinimum abbreDiation width is %d", (String) null);
      assertEquals(1, int0);
      
      String string0 = StringUtils.abbreviate((String) null, 838, 1089);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      int int0 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      String string0 = StringUtils.stripStart("#", "f9");
      assertNotNull(string0);
      assertEquals("#", string0);
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'y';
      charArray0[1] = 'y';
      String string1 = StringUtils.join(charArray0, '0', (-1), (-1));
      assertNotNull(string1);
      assertEquals(2, charArray0.length);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertArrayEquals(new char[] {'y', 'y'}, charArray0);
      
      String string2 = StringUtils.reverseDelimited("", 'y');
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertEquals("", string2);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      String string0 = StringUtils.center("aD", 1812, "Dn>^Mert#v2}+.");
      assertNotNull(string0);
      
      String string1 = StringUtils.substringBefore("aD", "_k");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("aD", string1);
      
      String string2 = StringUtils.unwrap("aD", "_k");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertEquals("aD", string2);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "aD", (CharSequence) "aD");
      assertEquals(0, int0);
      
      String string3 = StringUtils.repeat((String) null, 1812);
      assertNull(string3);
      
      String[] stringArray0 = StringUtils.split("aD");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      boolean boolean0 = StringUtils.isAlphanumeric((CharSequence) null);
      assertFalse(boolean0);
      
      float[] floatArray0 = new float[0];
      String string4 = StringUtils.join(floatArray0, 'y');
      assertNotNull(string4);
      assertEquals(0, floatArray0.length);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertEquals("", string4);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      
      int int1 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "aD", (CharSequence) "aD", (-2109));
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short)2997;
      shortArray0[1] = (short)1549;
      shortArray0[2] = (short)1190;
      shortArray0[3] = (short)1092;
      String string5 = StringUtils.join((double[]) null, '\"');
      assertNull(string5);
      
      String string6 = StringUtils.substringAfterLast(", '", ", '");
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string2));
      assertEquals("", string6);
      
      String string7 = StringUtils.wrapIfMissing("_k", "|3v\"%K_8b");
      assertNotNull(string7);
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string1));
      assertEquals("|3v\"%K_8b_k|3v\"%K_8b", string7);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      String string0 = StringUtils.substring("", 0, 0);
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.chomp((String) null, "<x/E~)j8c@@IvS]zr,\"");
      assertNull(string1);
      
      boolean boolean0 = StringUtils.isAllEmpty(charSequenceArray0);
      assertEquals(1, charSequenceArray0.length);
      assertTrue(boolean0);
      
      boolean boolean1 = StringUtils.startsWithIgnoreCase((CharSequence) null, (CharSequence) null);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String string2 = StringUtils.removeEndIgnoreCase("Z)-3,$oHFU~<3", (String) null);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertEquals("Z)-3,$oHFU~<3", string2);
      
      String string3 = StringUtils.leftPad("<x/E~)j8c@@IvS]zr,\"", 0, '+');
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals("<x/E~)j8c@@IvS]zr,\"", string3);
      
      boolean boolean2 = StringUtils.equalsAny("<x/E~)j8c@@IvS]zr,\"", charSequenceArray0);
      assertEquals(1, charSequenceArray0.length);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2);
      
      long[] longArray0 = new long[0];
      String string4 = StringUtils.join(longArray0, '+');
      assertNotNull(string4);
      assertEquals(0, longArray0.length);
      assertFalse(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertEquals("", string4);
      assertArrayEquals(new long[] {}, longArray0);
      
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase((String) null);
      assertNull(stringArray0);
      
      String[] stringArray1 = StringUtils.splitPreserveAllTokens("'?@{,:uV+\"(", "{*Z7I:yvw> )QH%O6Bl");
      assertNotNull(stringArray1);
      assertEquals(3, stringArray1.length);
      
      String string5 = StringUtils.normalizeSpace("<x/E~)j8c@@IvS]zr,\"");
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertTrue(string5.equals((Object)string3));
      assertEquals("<x/E~)j8c@@IvS]zr,\"", string5);
      
      CharSequence[] charSequenceArray1 = new CharSequence[4];
      assertFalse(charSequenceArray1.equals((Object)charSequenceArray0));
      
      charSequenceArray1[0] = (CharSequence) "JN-dp";
      charSequenceArray1[1] = (CharSequence) null;
      charSequenceArray1[2] = (CharSequence) "gl:l[t]jzrUx-)_.";
      charSequenceArray1[3] = (CharSequence) "Z)-3,$oHFU~<3";
      boolean boolean3 = StringUtils.isNoneBlank(charSequenceArray1);
      assertNotSame(charSequenceArray1, charSequenceArray0);
      assertEquals(4, charSequenceArray1.length);
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3 == boolean0);
      assertFalse(charSequenceArray1.equals((Object)charSequenceArray0));
      assertFalse(boolean3);
      
      String string6 = StringUtils.capitalize("<x/E~)j8c@@IvS]zr,\"");
      assertNotNull(string6);
      assertTrue(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string4));
      assertTrue(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string0));
      assertEquals("<x/E~)j8c@@IvS]zr,\"", string6);
      
      int int0 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      // Undeclared exception!
      try { 
        StringUtils.getJaroWinklerDistance(" ", (CharSequence) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      String string0 = StringUtils.removeFirst("o4R+8,w0_XT", "java.lang.Object@162f0309java.lang.Object@ee1d858java.lang.Object@29d768adjava.lang.Object@195c9e91java.lang.Object@7705e1f8java.lang.Object@162f0309java.lang.Object@ee1d858java.lang.Object@29d768adjava.lang.Object@195c9e91java.lang.Object@7705e1f8");
      assertNotNull(string0);
      assertEquals("o4R+8,w0_XT", string0);
      
      boolean boolean0 = StringUtils.contains((CharSequence) "o4R+8,w0_XT", (CharSequence) "java.lang.Object@162f0309java.lang.Object@ee1d858java.lang.Object@29d768adjava.lang.Object@195c9e91java.lang.Object@7705e1f8java.lang.Object@162f0309java.lang.Object@ee1d858java.lang.Object@29d768adjava.lang.Object@195c9e91java.lang.Object@7705e1f8");
      assertFalse(boolean0);
      
      String string1 = StringUtils.removeEnd(">H=I", "E");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals(">H=I", string1);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "o4R+8,w0_XT", (CharSequence) "o4R+8,w0_XT", 8);
      assertEquals(0, int0);
      
      String string2 = StringUtils.center("E", 8, 'L');
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("LLLELLLL", string2);
      
      int int1 = StringUtils.indexOfAnyBut((CharSequence) null, (CharSequence) ">H=I");
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      String string3 = StringUtils.remove("qf~9m[6tS8 ofzGk * vs ", 'G');
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals("qf~9m[6tS8 ofzk * vs ", string3);
      
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[0] = (CharSequence) "E";
      String string4 = StringUtils.leftPad("5", (-1), 'L');
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertEquals("5", string4);
      
      charSequenceArray0[1] = (CharSequence) "5";
      String string5 = StringUtils.prependIfMissingIgnoreCase("LLLELLLL", "o4R+8,w0_XT", charSequenceArray0);
      assertNotNull(string5);
      assertEquals(2, charSequenceArray0.length);
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertEquals("o4R+8,w0_XTLLLELLLL", string5);
      
      boolean boolean1 = StringUtils.containsWhitespace("x");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      int int2 = StringUtils.indexOfAnyBut((CharSequence) "o4R+8,w0_XT", (CharSequence) ">H=I");
      assertTrue(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(0, int2);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      String string0 = StringUtils.replaceOnceIgnoreCase("T/RAfSADSsF$}wV#N", "T/RAfSADSsF$}wV#N", "T/RAfSADSsF$}wV#N");
      assertNotNull(string0);
      assertEquals("T/RAfSADSsF$}wV#N", string0);
      
      boolean boolean0 = StringUtils.containsWhitespace("T/RAfSADSsF$}wV#N");
      assertFalse(boolean0);
      
      String string1 = StringUtils.unwrap("s:2k", '\'');
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("s:2k", string1);
      
      boolean boolean1 = StringUtils.startsWith("E=,1}G?in7_TlUU", "s:2k");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string2 = StringUtils.center("Asrswe==p5@L+jAsrswe==p5@L+jAsrswe==p5@L+jAsrswe==p5@L+j", 97, '\'');
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("''''''''''''''''''''Asrswe==p5@L+jAsrswe==p5@L+jAsrswe==p5@L+jAsrswe==p5@L+j'''''''''''''''''''''", string2);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "Asrswe==p5@L+jAsrswe==p5@L+jAsrswe==p5@L+jAsrswe==p5@L+j", (CharSequence) "T/RAfSADSsF$}wV#N");
      assertEquals(52, int0);
      
      String string3 = StringUtils.stripToNull("The Array must not be null......");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("The Array must not be null......", string3);
      
      String string4 = StringUtils.remove("AaP+zb", 'P');
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertEquals("Aa+zb", string4);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = '[';
      charArray0[1] = '[';
      charArray0[2] = '[';
      boolean boolean0 = StringUtils.containsAny((CharSequence) "", charArray0);
      assertEquals(3, charArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new char[] {'[', '[', '['}, charArray0);
      
      String string0 = StringUtils.substringAfter("\n", 102);
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.normalizeSpace("");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      
      String string2 = StringUtils.truncate("-#}l1XG+m5ltCz[<aG", 19, 19);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertEquals("", string2);
      
      String string3 = StringUtils.abbreviate("IM,}IRHOIS", 102, 87);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals("IM,}IRHOIS", string3);
      
      String string4 = StringUtils.swapCase("%OASG?bZ0Eo.k!?8*IRfKOe e~MFd!&{'et");
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertEquals("%oasg?Bz0eO.K!?8*irFkoE E~mfD!&{'ET", string4);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      String string0 = StringUtils.replace("", "US.^e:o_ufGpA", "", 0);
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.replaceIgnoreCase("", "US.^e:o_ufGpA", "The String must not be empty", (-3695));
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      
      String string2 = StringUtils.center("", 1911);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = "US.^e:o_ufGpA";
      stringArray0[1] = "/)q_F[PuSDH6Q*O";
      String string3 = StringUtils.replaceEachRepeatedly((String) null, stringArray0, stringArray0);
      assertNull(string3);
      assertEquals(3, stringArray0.length);
      
      String string4 = StringUtils.stripToNull("");
      assertNull(string4);
      
      int int0 = StringUtils.compareIgnoreCase(string2, "}");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals((-93), int0);
      
      String string5 = StringUtils.chop(string2);
      assertNotNull(string5);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      
      boolean boolean0 = StringUtils.isNotBlank("US.^e:o_ufGpA");
      assertTrue(boolean0);
      
      String string6 = StringUtils.substringBeforeLast("", "US.^e:o_ufGpA");
      assertNotNull(string6);
      assertTrue(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string2));
      assertTrue(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string5));
      assertEquals("", string6);
      
      String string7 = StringUtils.getCommonPrefix(stringArray0);
      assertNotNull(string7);
      assertEquals(3, stringArray0.length);
      assertTrue(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string5));
      assertTrue(string7.equals((Object)string6));
      assertTrue(string7.equals((Object)string0));
      assertEquals("", string7);
      
      String string8 = StringUtils.stripStart((String) null, (String) null);
      assertNull(string8);
      
      String string9 = StringUtils.stripToNull("}");
      assertNotNull(string9);
      assertFalse(string9.equals((Object)string6));
      assertFalse(string9.equals((Object)string0));
      assertFalse(string9.equals((Object)string7));
      assertFalse(string9.equals((Object)string1));
      assertFalse(string9.equals((Object)string2));
      assertFalse(string9.equals((Object)string5));
      assertEquals("}", string9);
      
      int int1 = StringUtils.getLevenshteinDistance((CharSequence) "", (CharSequence) "", 1911);
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      String string10 = StringUtils.overlay((String) null, "The String must not be empty", 1114111, (-588));
      assertNull(string10);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      String string0 = StringUtils.overlay((String) null, (String) null, (-4187), (-876));
      assertNull(string0);
      
      String string1 = StringUtils.left((String) null, (-876));
      assertNull(string1);
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) null;
      String string2 = StringUtils.join(objectArray0, 'x', 97, 97);
      assertNotNull(string2);
      assertEquals(1, objectArray0.length);
      assertEquals("", string2);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      String string0 = StringUtils.trim("Z>yD=");
      assertNotNull(string0);
      assertEquals("Z>yD=", string0);
      
      Integer integer0 = new Integer(428);
      assertNotNull(integer0);
      assertEquals(428, (int)integer0);
      
      String string1 = StringUtils.wrapIfMissing("Z>yD=", (String) null);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("Z>yD=", string1);
      
      double double0 = StringUtils.getJaroWinklerDistance("Z>yD=", "Z>yD=");
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      char char0 = 'o';
      String string0 = StringUtils.remove("$4'Tcj.*5", 'o');
      assertNotNull(string0);
      assertEquals("$4'Tcj.*5", string0);
      
      String string1 = "\\u";
      String string2 = StringUtils.replaceOnceIgnoreCase("$4'Tcj.*5", "", string1);
      assertNotNull(string2);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertEquals("$4'Tcj.*5", string2);
      
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      charSequenceArray0[1] = (CharSequence) "";
      charSequenceArray0[3] = (CharSequence) "";
      charSequenceArray0[4] = (CharSequence) "";
      boolean boolean0 = StringUtils.equalsAnyIgnoreCase("$4'Tcj.*5", charSequenceArray0);
      assertEquals(5, charSequenceArray0.length);
      assertFalse(boolean0);
      
      int int0 = 196;
      String string3 = StringUtils.join((Object[]) charSequenceArray0, "", 196, 124);
      assertNotNull(string3);
      assertEquals(5, charSequenceArray0.length);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals("", string3);
      
      int int1 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "", charSequenceArray0[0], (-655));
      assertEquals(5, charSequenceArray0.length);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      long[] longArray0 = new long[5];
      longArray0[0] = (long) (-655);
      String string4 = StringUtils.stripEnd("', is neither of type Map.Entry nor an Array", "$4'Tcj.*5");
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertEquals("', is neither of type Map.Entry nor an Array", string4);
      
      int int2 = 64;
      int int3 = StringUtils.lastOrdinalIndexOf(charSequenceArray0[3], charSequenceArray0[1], 64);
      assertEquals(5, charSequenceArray0.length);
      assertFalse(int3 == int0);
      assertFalse(int3 == int2);
      assertFalse(int3 == int1);
      assertEquals(0, int3);
      
      // Undeclared exception!
      try { 
        StringUtils.truncate("$4'Tcj.*5", (-1528));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // maxWith cannot be negative
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      String string0 = StringUtils.normalizeSpace("comparator");
      assertNotNull(string0);
      assertEquals("comparator", string0);
      
      boolean boolean0 = StringUtils.contains((CharSequence) "comparator", (CharSequence) "comparator");
      assertTrue(boolean0);
      
      char[] charArray0 = new char[0];
      String string1 = StringUtils.join(charArray0, 'u');
      assertNotNull(string1);
      assertEquals(0, charArray0.length);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertArrayEquals(new char[] {}, charArray0);
      
      boolean boolean1 = StringUtils.containsNone((CharSequence) ">H=I", charArray0);
      assertEquals(0, charArray0.length);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertArrayEquals(new char[] {}, charArray0);
      
      String string2 = StringUtils.uncapitalize("G[W2Kb");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("g[W2Kb", string2);
      
      boolean boolean2 = StringUtils.containsAny((CharSequence) "comparator", (CharSequence) "g[W2Kb");
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "E", (CharSequence) "", 8);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      charSequenceArray0[0] = (CharSequence) "h!{j5f5T8V}7s;";
      charSequenceArray0[1] = (CharSequence) "h!{j5f5T8V}7s;";
      charSequenceArray0[2] = (CharSequence) "h!{j5f5T8V}7s;";
      String string0 = StringUtils.abbreviateMiddle("h!{j5f5T8V}7s;", "java.lang.Object@52b769b5java.lang.Object@1d3febfajava.lang.Object@4c16c3aejava.lang.Object@4a32f5f1java.lang.Object@23a1c7c3java.lang.Object@52b769b5java.lang.Object@1d3febfajava.lang.Object@4c16c3aejava.lang.Object@4a32f5f1java.lang.Object@23a1c7c3", 15);
      assertNotNull(string0);
      assertEquals("h!{j5f5T8V}7s;", string0);
      
      charSequenceArray0[3] = (CharSequence) "h!{j5f5T8V}7s;";
      charSequenceArray0[4] = (CharSequence) "h!{j5f5T8V}7s;";
      String string1 = StringUtils.appendIfMissing("h!{j5f5T8V}7s;", "h!{j5f5T8V}7s;", charSequenceArray0);
      assertNotNull(string1);
      assertEquals(5, charSequenceArray0.length);
      assertTrue(string1.equals((Object)string0));
      assertEquals("h!{j5f5T8V}7s;", string1);
      
      int int0 = StringUtils.indexOfDifference(charSequenceArray0[4], (CharSequence) "h!{j5f5T8V}7s;");
      assertEquals(5, charSequenceArray0.length);
      assertEquals((-1), int0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("", "java.lang.Object@52b769b5java.lang.Object@1d3febfajava.lang.Object@4c16c3aejava.lang.Object@4a32f5f1java.lang.Object@23a1c7c3java.lang.Object@52b769b5java.lang.Object@1d3febfajava.lang.Object@4c16c3aejava.lang.Object@4a32f5f1java.lang.Object@23a1c7c3");
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      
      String string2 = StringUtils.repeat(".'am$2&U)u", (-1));
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("", string2);
      
      String string3 = StringUtils.reverseDelimited(".'am$2&U)u", 'I');
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals(".'am$2&U)u", string3);
      
      boolean boolean0 = StringUtils.isAllEmpty(charSequenceArray0);
      assertEquals(5, charSequenceArray0.length);
      assertFalse(boolean0);
      
      String[] stringArray1 = StringUtils.splitByWholeSeparatorPreserveAllTokens("The type must not be null", "", (-1));
      assertNotNull(stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(6, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      String string4 = StringUtils.abbreviate("", "", (-1));
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string2));
      assertEquals("", string4);
      
      int int1 = StringUtils.getLevenshteinDistance(charSequenceArray0[4], (CharSequence) "", 17);
      assertEquals(5, charSequenceArray0.length);
      assertFalse(int1 == int0);
      assertEquals(14, int1);
      
      int int2 = StringUtils.indexOfDifference(charSequenceArray0[2], (CharSequence) "h!{j5f5T8V}7s;");
      assertEquals(5, charSequenceArray0.length);
      assertTrue(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals((-1), int2);
      
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      String string5 = StringUtils.getIfEmpty("sny_cTpX P}]&W", supplier0);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertEquals("sny_cTpX P}]&W", string5);
      
      int int3 = StringUtils.compare("h!{j5f5T8V}7s;", "sny_cTpX P}]&W");
      assertFalse(int3 == int0);
      assertFalse(int3 == int2);
      assertFalse(int3 == int1);
      assertEquals((-11), int3);
      
      boolean boolean1 = StringUtils.isNotEmpty(charSequenceArray0[0]);
      assertEquals(5, charSequenceArray0.length);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String string6 = StringUtils.trim("h!{j5f5T8V}7s;");
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string4));
      assertTrue(string6.equals((Object)string1));
      assertTrue(string6.equals((Object)string0));
      assertEquals("h!{j5f5T8V}7s;", string6);
      
      String string7 = StringUtils.chop("sny_cTpX P}]&W");
      assertNotNull(string7);
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string0));
      assertEquals("sny_cTpX P}]&", string7);
      
      String string8 = StringUtils.substringAfter("Zu*4-n!o`!mH6S_v", 0);
      assertNotNull(string8);
      assertFalse(string8.equals((Object)string1));
      assertTrue(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string7));
      assertEquals("", string8);
      
      String string9 = StringUtils.defaultIfBlank("sny_cTpX P}]&", "sny_cTpX P}]&W");
      assertNotNull(string9);
      assertFalse(string9.equals((Object)string2));
      assertFalse(string9.equals((Object)string1));
      assertFalse(string9.equals((Object)string3));
      assertFalse(string9.equals((Object)string5));
      assertFalse(string9.equals((Object)string6));
      assertFalse(string9.equals((Object)string0));
      assertTrue(string9.equals((Object)string7));
      assertFalse(string9.equals((Object)string8));
      assertFalse(string9.equals((Object)string4));
      assertEquals("sny_cTpX P}]&", string9);
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)9;
      shortArray0[1] = (short)0;
      shortArray0[2] = (short)1550;
      shortArray0[3] = (short)14;
      String string10 = StringUtils.join(shortArray0, 'x', 1346, 17);
      assertNotNull(string10);
      assertEquals(4, shortArray0.length);
      assertFalse(string10.equals((Object)string5));
      assertFalse(string10.equals((Object)string3));
      assertFalse(string10.equals((Object)string1));
      assertFalse(string10.equals((Object)string7));
      assertFalse(string10.equals((Object)string9));
      assertFalse(string10.equals((Object)string6));
      assertFalse(string10.equals((Object)string0));
      assertTrue(string10.equals((Object)string4));
      assertEquals("", string10);
      assertArrayEquals(new short[] {(short)9, (short)0, (short)1550, (short)14}, shortArray0);
      
      int int4 = StringUtils.INDEX_NOT_FOUND;
      assertFalse(int4 == int3);
      assertFalse(int4 == int1);
      assertTrue(int4 == int2);
      assertTrue(int4 == int0);
      assertEquals((-1), int4);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      String[] stringArray0 = StringUtils.split(" vs ", "org.apache.commons.lang3.LocaleUtils", (-494));
      assertNotNull(stringArray0);
      assertEquals(2, stringArray0.length);
      
      String string0 = StringUtils.replaceChars("VT76I%Sr''6AGe(yW\"u", '2', 'k');
      assertNotNull(string0);
      assertEquals("VT76I%Sr''6AGe(yW\"u", string0);
      
      String string1 = StringUtils.chop("org.apache.commons.lang3.LocaleUtils");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("org.apache.commons.lang3.LocaleUtil", string1);
      
      Integer integer0 = new Integer((-494));
      assertNotNull(integer0);
      assertEquals((-494), (int)integer0);
      
      Integer integer1 = new Integer(128);
      assertNotNull(integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertEquals(128, (int)integer1);
      
      Integer integer2 = new Integer((-5909));
      assertNotNull(integer2);
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      assertEquals((-5909), (int)integer2);
      
      Integer integer3 = new Integer((-5909));
      assertNotNull(integer3);
      assertFalse(integer3.equals((Object)integer1));
      assertTrue(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer0));
      assertEquals((-5909), (int)integer3);
      
      String string2 = StringUtils.right("xY*^g", (-4128));
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("", string2);
      
      String string3 = StringUtils.removeStart((String) null, "/B&-wdPd)C!");
      assertNull(string3);
      
      String string4 = StringUtils.wrapIfMissing("Rr9rz.Ukuw<#xx9GUR", 'P');
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertEquals("PRr9rz.Ukuw<#xx9GURP", string4);
      
      int int0 = StringUtils.indexOfDifference((CharSequence[]) stringArray0);
      assertEquals(2, stringArray0.length);
      assertEquals(1, int0);
      
      boolean boolean0 = StringUtils.isNumericSpace("Rr9rz.Ukuw<#xx9GUR");
      assertFalse(boolean0);
      
      String string5 = StringUtils.substring("", (-494));
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertTrue(string5.equals((Object)string2));
      assertEquals("", string5);
      
      boolean boolean1 = StringUtils.isAllUpperCase(" vs ");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      String string0 = StringUtils.replace("", "US.^e:o_ufGpA", "", 0);
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.replaceIgnoreCase("", "US.^e:o_ufGpA", "The String must not be empty", (-3695));
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      
      String string2 = StringUtils.center("", 1911);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      String string3 = StringUtils.substringAfterLast("US.^e:o_ufGpA", (-3695));
      assertNotNull(string3);
      assertTrue(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string0));
      assertEquals("", string3);
      
      String string4 = StringUtils.unwrap("):vs]5e'u\th", '\'');
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertEquals("):vs]5e'u\th", string4);
      
      boolean boolean0 = StringUtils.startsWith("):vs]5e'u\th", "):vs]5e'u\th");
      assertTrue(boolean0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("US.^e:o_ufGpA", ", Length: 0");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      String string5 = StringUtils.unwrap(" is not in the range '0' - '9' is not in the range '0' - '9'", "C;4W=+tC;4W=+tC;4W=+tC;4W=+tC;4W=+tC;4W=wDPtb=E*0D +uS.^e:o_ufGpAUS.^e:o_ufGpAUS.^e:o_ufGpAUS.^e:o_ufG");
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertEquals(" is not in the range '0' - '9' is not in the range '0' - '9'", string5);
      
      String string6 = StringUtils.unwrap("", 'U');
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string2));
      assertTrue(string6.equals((Object)string3));
      assertTrue(string6.equals((Object)string0));
      assertTrue(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string4));
      assertEquals("", string6);
      
      int int0 = StringUtils.indexOf((CharSequence) "", (-3143));
      assertEquals((-1), int0);
      
      String string7 = StringUtils.repeat(" is not in the range '0' - '9' is not in the range '0' - '9'", ";y}w", (-3574));
      assertNotNull(string7);
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string5));
      assertTrue(string7.equals((Object)string6));
      assertTrue(string7.equals((Object)string0));
      assertTrue(string7.equals((Object)string1));
      assertEquals("", string7);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 'U';
      doubleArray0[1] = (double) 1911;
      String string8 = StringUtils.join(doubleArray0, '&');
      assertNotNull(string8);
      assertEquals(2, doubleArray0.length);
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string0));
      assertEquals("85.0&1911.0", string8);
      assertArrayEquals(new double[] {85.0, 1911.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      String string0 = StringUtils.capitalize("{}");
      assertNotNull(string0);
      assertEquals("{}", string0);
      
      Class<Object> class0 = Object.class;
      ServiceLoader<Object> serviceLoader0 = ServiceLoader.loadInstalled(class0);
      assertNotNull(serviceLoader0);
      assertEquals("java.util.ServiceLoader[java.lang.Object]", serviceLoader0.toString());
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      String string1 = StringUtils.abbreviate("u=]@|On8X7H27[2Or", (String) null, (-1726));
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("u=]@|On8X7H27[2Or", string1);
      
      int int0 = StringUtils.indexOf((CharSequence) null, (-1726), 1);
      assertEquals((-1), int0);
      
      String string2 = StringUtils.substring("Supplied value must be a valid byte literal between -32768 and 32767: [", (-1));
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("[", string2);
      
      String string3 = StringUtils.abbreviate((String) null, "u=]@|On8X7H27[2Or", (-1));
      assertNull(string3);
      
      boolean boolean0 = StringUtils.isAllUpperCase("{}");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("j", "j", 1067);
      assertNotNull(stringArray0);
      assertEquals(2, stringArray0.length);
      
      String string0 = StringUtils.left("j", 1067);
      assertNotNull(string0);
      assertEquals("j", string0);
      
      String string1 = StringUtils.rightPad("j", 1067);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'x';
      charArray0[1] = 'x';
      boolean boolean0 = StringUtils.containsAny((CharSequence) string1, charArray0);
      assertEquals(2, charArray0.length);
      assertFalse(string1.equals((Object)string0));
      assertFalse(boolean0);
      assertArrayEquals(new char[] {'x', 'x'}, charArray0);
      
      int int0 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      String string2 = StringUtils.substringAfter("j", "Lb;LKJvO@]JoV;q@:");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("", string2);
      
      String string3 = StringUtils.substringAfterLast("Object varargs must not be null", " E0*R\b");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals("", string3);
      
      String string4 = StringUtils.mid("~uBVx?Mh+<B", (-437), (-1));
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertEquals("", string4);
      
      boolean boolean1 = StringUtils.isMixedCase(" E0*R\b");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string5 = StringUtils.substringAfter("Object varargs must not be null", (-1));
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertEquals("", string5);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      String string0 = StringUtils.wrap("W-:$-TX6hO ", "goUkB1Y3|O?5@f9l");
      assertNotNull(string0);
      
      String string1 = StringUtils.replaceChars("goUkB1Y3|O?5@f9lW-:$-TX6hO goUkB1Y3|O?5@f9l", '%', '%');
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      
      boolean boolean0 = StringUtils.containsIgnoreCase("goUkB1Y3|O?5@f9lW-:$-TX6hO goUkB1Y3|O?5@f9l", "W-:$-TX6hO ");
      assertTrue(boolean0);
      
      PriorityQueue<Integer> priorityQueue0 = new PriorityQueue<Integer>();
      assertNotNull(priorityQueue0);
      assertEquals(0, priorityQueue0.size());
      
      Integer integer0 = new Integer(7);
      assertNotNull(integer0);
      assertEquals(7, (int)integer0);
      
      boolean boolean1 = priorityQueue0.add(integer0);
      assertEquals(1, priorityQueue0.size());
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertTrue(priorityQueue0.contains(7));
      
      Integer integer1 = new Integer(7);
      assertNotNull(integer1);
      assertTrue(integer1.equals((Object)integer0));
      assertEquals(7, (int)integer1);
      
      boolean boolean2 = priorityQueue0.add(integer1);
      assertEquals(2, priorityQueue0.size());
      assertTrue(integer1.equals((Object)integer0));
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2);
      assertTrue(priorityQueue0.contains(7));
      
      String string2 = StringUtils.join((Iterable<?>) priorityQueue0, '%');
      assertNotNull(string2);
      assertEquals(2, priorityQueue0.size());
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("7%7", string2);
      assertTrue(priorityQueue0.contains(7));
      
      String string3 = StringUtils.defaultString("7%7");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string2));
      assertEquals("7%7", string3);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      String string0 = StringUtils.wrap("W-:$-TX6hO ", "W-:$-TX6hO ");
      assertNotNull(string0);
      assertEquals("W-:$-TX6hO W-:$-TX6hO W-:$-TX6hO ", string0);
      
      String string1 = StringUtils.replaceChars("W-:$-TX6hO W-:$-TX6hO W-:$-TX6hO ", '%', '%');
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("W-:$-TX6hO W-:$-TX6hO W-:$-TX6hO ", string1);
      
      boolean boolean0 = StringUtils.containsIgnoreCase("W-:$-TX6hO W-:$-TX6hO W-:$-TX6hO ", "W-:$-TX6hO ");
      assertTrue(boolean0);
      
      PriorityQueue<Integer> priorityQueue0 = new PriorityQueue<Integer>();
      assertNotNull(priorityQueue0);
      assertEquals(0, priorityQueue0.size());
      
      Integer integer0 = new Integer(7);
      assertNotNull(integer0);
      assertEquals(7, (int)integer0);
      
      boolean boolean1 = priorityQueue0.add(integer0);
      assertEquals(1, priorityQueue0.size());
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertTrue(priorityQueue0.contains(integer0));
      
      Integer integer1 = new Integer(7);
      assertNotNull(integer1);
      assertTrue(integer1.equals((Object)integer0));
      assertEquals(7, (int)integer1);
      
      boolean boolean2 = priorityQueue0.add(integer1);
      assertEquals(2, priorityQueue0.size());
      assertTrue(integer1.equals((Object)integer0));
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2);
      assertTrue(priorityQueue0.contains(integer0));
      
      String string2 = StringUtils.join((Iterable<?>) priorityQueue0, '%');
      assertNotNull(string2);
      assertEquals(2, priorityQueue0.size());
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("7%7", string2);
      assertTrue(priorityQueue0.contains(integer0));
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens((String) null);
      assertNull(stringArray0);
      
      StringUtils stringUtils0 = new StringUtils();
      assertNotNull(stringUtils0);
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      
      String string0 = StringUtils.chomp("Z~", "Mc6a=");
      assertNotNull(string0);
      assertEquals("Z~", string0);
      
      String string1 = StringUtils.difference("c22", "d");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("d", string1);
      
      Vector<Integer> vector0 = new Vector<Integer>();
      assertNotNull(vector0);
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>(vector0);
      assertNotNull(arrayList0);
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      Integer integer0 = new Integer((-1));
      assertNotNull(integer0);
      assertEquals((-1), (int)integer0);
      
      Integer integer1 = new Integer((-494));
      assertNotNull(integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertEquals((-494), (int)integer1);
      
      boolean boolean0 = arrayList0.add(integer1);
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertFalse(integer1.equals((Object)integer0));
      assertTrue(boolean0);
      assertFalse(vector0.contains((-1)));
      assertTrue(arrayList0.contains((-494)));
      assertFalse(arrayList0.contains((-1)));
      
      String string2 = StringUtils.join((Iterable<?>) arrayList0, "0");
      assertNotNull(string2);
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("-494", string2);
      assertFalse(vector0.contains((-1)));
      assertTrue(arrayList0.contains((-494)));
      assertFalse(arrayList0.contains((-1)));
      
      boolean boolean1 = StringUtils.isAsciiPrintable("d");
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      int int0 = StringUtils.length((CharSequence) null);
      assertEquals(0, int0);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) '}';
      doubleArray0[1] = (double) 'u';
      doubleArray0[2] = (double) '}';
      String string3 = StringUtils.join(doubleArray0, 'A', 1394, 1045);
      assertNotNull(string3);
      assertEquals(3, doubleArray0.length);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals("", string3);
      assertArrayEquals(new double[] {125.0, 117.0, 125.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      String string0 = StringUtils.LF;
      assertNotNull(string0);
      assertEquals("\n", string0);
      
      String string1 = StringUtils.stripStart("\n", "\n");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      
      String string2 = StringUtils.CR;
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("\r", string2);
      
      String string3 = StringUtils.removeFirst((String) null, "");
      assertNull(string3);
      
      String string4 = StringUtils.toRootUpperCase("\r");
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string2));
      assertEquals("\r", string4);
      
      String string5 = StringUtils.stripToEmpty((String) null);
      assertNotNull(string5);
      assertTrue(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertEquals("", string5);
      
      String string6 = StringUtils.prependIfMissing("Mc6a=", "", (CharSequence[]) null);
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string4));
      assertEquals("Mc6a=", string6);
      
      boolean boolean0 = StringUtils.isBlank("\r");
      assertTrue(boolean0);
      
      Integer integer0 = new Integer(64);
      assertNotNull(integer0);
      assertEquals(64, (int)integer0);
      
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains(integer0));
      
      Integer integer1 = new Integer(64);
      assertNotNull(integer1);
      assertTrue(integer1.equals((Object)integer0));
      assertEquals(64, (int)integer1);
      
      boolean boolean1 = linkedList0.add(integer1);
      assertEquals(1, linkedList0.size());
      assertTrue(integer1.equals((Object)integer0));
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertTrue(linkedList0.contains(integer0));
      
      Iterator<Integer> iterator0 = linkedList0.descendingIterator();
      assertNotNull(iterator0);
      assertEquals(1, linkedList0.size());
      assertTrue(linkedList0.contains(integer0));
      
      String string7 = StringUtils.join(iterator0, "wb!K");
      assertNotNull(string7);
      assertEquals(1, linkedList0.size());
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string4));
      assertEquals("64", string7);
      assertTrue(linkedList0.contains(integer0));
      
      String string8 = StringUtils.right("z]9S=>kpsZ2mZ<|ql>+", (-1823));
      assertNotNull(string8);
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string6));
      assertTrue(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string0));
      assertEquals("", string8);
      
      String string9 = StringUtils.removeStart("b_}1NfMl", (String) null);
      assertNotNull(string9);
      assertFalse(string9.equals((Object)string7));
      assertFalse(string9.equals((Object)string2));
      assertFalse(string9.equals((Object)string1));
      assertFalse(string9.equals((Object)string4));
      assertFalse(string9.equals((Object)string5));
      assertFalse(string9.equals((Object)string8));
      assertFalse(string9.equals((Object)string6));
      assertFalse(string9.equals((Object)string0));
      assertEquals("b_}1NfMl", string9);
      
      String string10 = StringUtils.wrapIfMissing("fQg`Gw", '<');
      assertNotNull(string10);
      assertFalse(string10.equals((Object)string0));
      assertFalse(string10.equals((Object)string6));
      assertFalse(string10.equals((Object)string8));
      assertFalse(string10.equals((Object)string7));
      assertFalse(string10.equals((Object)string4));
      assertFalse(string10.equals((Object)string9));
      assertFalse(string10.equals((Object)string1));
      assertFalse(string10.equals((Object)string5));
      assertFalse(string10.equals((Object)string2));
      assertEquals("<fQg`Gw<", string10);
      
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[0] = (CharSequence) "xY*^g";
      charSequenceArray0[1] = (CharSequence) "\r";
      int int0 = StringUtils.indexOfDifference(charSequenceArray0);
      assertEquals(2, charSequenceArray0.length);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      String string0 = StringUtils.substring("", 0, 0);
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.chomp((String) null, "<x/E~)j8c@@IvS]zr,\"");
      assertNull(string1);
      
      boolean boolean0 = StringUtils.isAllEmpty(charSequenceArray0);
      assertEquals(1, charSequenceArray0.length);
      assertTrue(boolean0);
      
      boolean boolean1 = StringUtils.startsWithIgnoreCase((CharSequence) null, (CharSequence) null);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      Stack<String> stack0 = new Stack<String>();
      assertNotNull(stack0);
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertFalse(stack0.contains("<x/E~)j8c@@IvS]zr,\""));
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = 0.0F;
      floatArray0[1] = (float) 0;
      floatArray0[2] = (float) 0;
      floatArray0[3] = (float) 0;
      String string2 = StringUtils.join(floatArray0, '*');
      assertNotNull(string2);
      assertEquals(4, floatArray0.length);
      assertFalse(string2.equals((Object)string0));
      assertEquals("0.0*0.0*0.0*0.0", string2);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      
      String string3 = StringUtils.stripEnd("M)40v", (String) null);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals("M)40v", string3);
      
      String string4 = StringUtils.trim(" ");
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string0));
      assertEquals("", string4);
      
      String string5 = StringUtils.mid("Threshold must not be negative", 923, (-808));
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string3));
      assertTrue(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertTrue(string5.equals((Object)string0));
      assertEquals("", string5);
      
      String string6 = StringUtils.unwrap((String) null, '$');
      assertNull(string6);
      
      String string7 = StringUtils.center("", 923, '*');
      assertNotNull(string7);
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string5));
      assertEqualsstring7);
      
      String string8 = StringUtils.removeAll((String) null, "");
      assertNull(string8);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      String string0 = StringUtils.chop("ch");
      assertNotNull(string0);
      assertEquals("c", string0);
      
      String string1 = StringUtils.substringAfter("47#:+oK", (-2919));
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      
      int int0 = StringUtils.compareIgnoreCase("c", "ch", false);
      assertEquals((-1), int0);
      
      String[] stringArray0 = new String[9];
      stringArray0[0] = "c";
      stringArray0[1] = "";
      stringArray0[2] = "ch";
      stringArray0[3] = "ch";
      stringArray0[4] = "ch";
      stringArray0[5] = "c";
      stringArray0[6] = "ch";
      stringArray0[7] = "";
      stringArray0[8] = "c";
      String string2 = StringUtils.firstNonEmpty(stringArray0);
      assertNotNull(string2);
      assertEquals(9, stringArray0.length);
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("c", string2);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      String string0 = StringUtils.center("xxUjava.lang.Object@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.Object@50d3e7ejava.lang.Object@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.Object@50d3e7ejava.lang.Object@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.Object@50d3e7ejava.lang.Object@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.Object@50d3e7e", 16);
      assertNotNull(string0);
      
      String string1 = StringUtils.removeStart("xxUjava.lang.Object@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.Object@50d3e7ejava.lang.Object@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.Object@50d3e7ejava.lang.Object@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.Object@50d3e7ejava.lang.Object@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.Object@50d3e7e", "xxUjava.lang.Object@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.Object@50d3e7ejava.lang.Object@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.Object@50d3e7ejava.lang.Object@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.Object@50d3e7ejava.lang.Object@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.Object@50d3e7e");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      
      boolean boolean0 = StringUtils.isMixedCase("");
      assertFalse(boolean0);
      
      String string2 = StringUtils.stripEnd("U2+DfS:Vb%!,", "");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("U2+DfS:Vb%!,", string2);
      
      int int0 = StringUtils.lastOrdinalIndexOf("U2+DfS:Vb%!,", "", 247);
      assertEquals(12, int0);
      
      String string3 = StringUtils.truncate("xxUjava.lang.Object@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.Object@50d3e7ejava.lang.Object@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.Object@50d3e7ejava.lang.Object@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.Object@50d3e7ejava.lang.Object@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.Object@50d3e7e", 12);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("xxUjava.lang", string3);
      
      String[] stringArray0 = new String[7];
      stringArray0[0] = "";
      stringArray0[1] = "xxUjava.lang";
      stringArray0[2] = "";
      stringArray0[3] = "xxUjava.lang";
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 16;
      doubleArray0[1] = (double) 12;
      doubleArray0[2] = (double) 16;
      doubleArray0[3] = (double) 247;
      doubleArray0[4] = (double) '5';
      doubleArray0[5] = (double) 247;
      doubleArray0[6] = (double) '5';
      String string4 = StringUtils.join(doubleArray0, '5');
      assertNotNull(string4);
      assertEquals(7, doubleArray0.length);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertEquals("16.0512.0516.05247.0553.05247.0553.0", string4);
      assertArrayEquals(new double[] {16.0, 12.0, 16.0, 247.0, 53.0, 247.0, 53.0}, doubleArray0, 0.01);
      
      String string5 = StringUtils.substringAfterLast("xxUjava.lang", "");
      assertNotNull(string5);
      assertTrue(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertEquals("", string5);
      
      String string6 = StringUtils.wrapIfMissing("ebC{^if;(8", "%O");
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string5));
      assertEquals("%OebC{^if;(8%O", string6);
      
      String[] stringArray1 = StringUtils.substringsBetween("%OebC{^if;(8%O", "Minimum abbreviation width is %d", "xxUjava.lang.Object@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.Object@50d3e7ejava.lang.Object@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.Object@50d3e7ejava.lang.Object@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.Object@50d3e7ejava.lang.Object@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.Object@50d3e7e");
      assertNull(stringArray1);
      
      String string7 = StringUtils.center("U2+DfS:Vb%!,", 12, 'Z');
      assertNotNull(string7);
      assertFalse(string7.equals((Object)string4));
      assertTrue(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string1));
      assertEquals("U2+DfS:Vb%!,", string7);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = (int) '7';
      intArray0[1] = (int) '7';
      intArray0[2] = (int) '7';
      intArray0[3] = (int) '7';
      intArray0[4] = (int) '7';
      String string0 = StringUtils.replacePattern("jWU}p|M=YT9", "Cannot store ", "Cannot store ");
      assertNotNull(string0);
      assertEquals("jWU}p|M=YT9", string0);
      
      String[] stringArray0 = new String[8];
      stringArray0[0] = "jWU}p|M=YT9";
      stringArray0[1] = "jWU}p|M=YT9";
      stringArray0[2] = "Cannot store ";
      String string1 = StringUtils.normalizeSpace("xn7DeUyH");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("xn7DeUyH", string1);
      
      boolean boolean0 = StringUtils.isNoneBlank(stringArray0);
      assertEquals(8, stringArray0.length);
      assertFalse(boolean0);
      
      String string2 = StringUtils.capitalize("jWU}p|M=YT9");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("JWU}p|M=YT9", string2);
      
      int int0 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      double double0 = StringUtils.getJaroWinklerDistance("jWU}p|M=YT9", "xn7DeUyH");
      assertEquals(0.41, double0, 0.01);
      
      String string3 = StringUtils.firstNonEmpty(stringArray0);
      assertNotNull(string3);
      assertEquals(8, stringArray0.length);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string0));
      assertEquals("jWU}p|M=YT9", string3);
      
      String string4 = StringUtils.center((String) null, 8);
      assertNull(string4);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      String string0 = StringUtils.center("aD", 1812, "Dn>^Mert#v2}+.");
      assertNotNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      int int0 = StringUtils.lastIndexOfAny(string0, charSequenceArray0);
      assertEquals(0, charSequenceArray0.length);
      assertEquals((-1), int0);
      
      String string1 = StringUtils.substringBefore("aD", "_k");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("aD", string1);
      
      String string2 = StringUtils.unwrap("j`", "_k");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("j`", string2);
      
      int int1 = StringUtils.indexOfIgnoreCase((CharSequence) "aD", (CharSequence) "j`");
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      String string3 = StringUtils.substringAfter("RlV/[zM($!nMGqG4XPS", 2270);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals("", string3);
      
      String string4 = StringUtils.repeat((String) null, 1812);
      assertNull(string4);
      
      String[] stringArray0 = StringUtils.split("aD");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      boolean boolean0 = StringUtils.isAlphanumeric((CharSequence) null);
      assertFalse(boolean0);
      
      float[] floatArray0 = new float[0];
      String string5 = StringUtils.join(floatArray0, 'y');
      assertNotNull(string5);
      assertEquals(0, floatArray0.length);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertEquals("", string5);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      
      String string6 = StringUtils.join((char[]) null, 'P', (-1), 76);
      assertNull(string6);
      
      int int2 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "aD", (CharSequence) "j`", (-2109));
      assertTrue(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals((-1), int2);
      
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short)2997;
      shortArray0[1] = (short)1549;
      shortArray0[2] = (short)1190;
      shortArray0[3] = (short)1092;
      shortArray0[4] = (short)108;
      shortArray0[5] = (short)321;
      shortArray0[6] = (short)657;
      shortArray0[7] = (short)61;
      shortArray0[8] = (short)2671;
      String string7 = StringUtils.join(shortArray0, 'y', 2270, 116);
      assertNotNull(string7);
      assertEquals(9, shortArray0.length);
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string2));
      assertEquals("", string7);
      assertArrayEquals(new short[] {(short)2997, (short)1549, (short)1190, (short)1092, (short)108, (short)321, (short)657, (short)61, (short)2671}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      String string0 = StringUtils.removePattern("%O", "M+");
      assertNotNull(string0);
      assertEquals("%O", string0);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "%O", (CharSequence) "%O", 0);
      assertEquals(0, int0);
      
      int int1 = StringUtils.compare("p{InCombiningDiacriticalMarks}+", "M+", false);
      assertFalse(int1 == int0);
      assertEquals(35, int1);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      String string1 = StringUtils.join(booleanArray0, 'c', 158, 0);
      assertNotNull(string1);
      assertEquals(4, booleanArray0.length);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false}, booleanArray0));
      
      String string2 = StringUtils.abbreviate("e", "(8", 247, 247);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("e", string2);
      
      int int2 = StringUtils.lastOrdinalIndexOf("e", "M+", 247);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals((-1), int2);
      
      int[] intArray0 = StringUtils.toCodePoints("");
      assertNotNull(intArray0);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'c';
      boolean boolean0 = StringUtils.containsAny((CharSequence) "e", charArray0);
      assertEquals(1, charArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new char[] {'c'}, charArray0);
      
      boolean boolean1 = StringUtils.contains((CharSequence) "e", 1974);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string3 = StringUtils.join(charArray0, 'c');
      assertNotNull(string3);
      assertEquals(1, charArray0.length);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals("c", string3);
      assertArrayEquals(new char[] {'c'}, charArray0);
      
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) "%O";
      objectArray0[1] = (Object) 'c';
      objectArray0[2] = (Object) "M+";
      objectArray0[3] = (Object) false;
      objectArray0[4] = (Object) "(8";
      objectArray0[5] = (Object) "p{InCombiningDiacriticalMarks}+";
      objectArray0[6] = (Object) 'c';
      String string4 = StringUtils.joinWith("p{InCombiningDiacriticalMarks}+", objectArray0);
      assertNotNull(string4);
      assertEquals(7, objectArray0.length);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertEquals("%Op{InCombiningDiacriticalMarks}+cp{InCombiningDiacriticalMarks}+M+p{InCombiningDiacriticalMarks}+falsep{InCombiningDiacriticalMarks}+(8p{InCombiningDiacriticalMarks}+p{InCombiningDiacriticalMarks}+p{InCombiningDiacriticalMarks}+c", string4);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      String string0 = StringUtils.stripToEmpty("$4'Tcj.*5");
      assertNotNull(string0);
      assertEquals("$4'Tcj.*5", string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      charSequenceArray0[0] = (CharSequence) "s";
      charSequenceArray0[2] = (CharSequence) "$4'Tcj.*5";
      int int0 = StringUtils.indexOfAny(charSequenceArray0[2], charSequenceArray0);
      assertEquals(3, charSequenceArray0.length);
      assertEquals(0, int0);
      
      // Undeclared exception!
      try { 
        StringUtils.abbreviate("38d)><7[x?Boh", "Y@,97D", 160, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum abbreviation width is 7
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = '[';
      charArray0[1] = '[';
      charArray0[2] = '[';
      boolean boolean0 = StringUtils.containsAny((CharSequence) "", charArray0);
      assertEquals(3, charArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new char[] {'[', '[', '['}, charArray0);
      
      String string0 = StringUtils.substringAfter("\n", 102);
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.normalizeSpace("");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      
      String string2 = StringUtils.truncate(" has no clone method", 19, 19);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("d", string2);
      
      String string3 = StringUtils.abbreviate("IM,}IRHOIS", 102, 125);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals("IM,}IRHOIS", string3);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      String[] stringArray0 = StringUtils.split(" vs ", "", (-494));
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      String string0 = StringUtils.rightPad(" vs ", (-494), "VT76I%S7''6AGe(yD\"u");
      assertNotNull(string0);
      assertEquals(" vs ", string0);
      
      String string1 = StringUtils.chop("");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains((-494)));
      
      String string2 = StringUtils.mid("", (-494), 103);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertEquals("", string2);
      
      String string3 = StringUtils.defaultString("");
      assertNotNull(string3);
      assertTrue(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals("", string3);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) " vs ", (CharSequence) " vs ");
      assertEquals(0, int0);
      
      String string4 = StringUtils.substringBeforeLast("ONU@Sn52(Njua0", "VT76I%S7''6AGe(yD\"u");
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertEquals("ONU@Sn52(Njua0", string4);
      
      String string5 = StringUtils.substringAfter("", 0);
      assertNotNull(string5);
      assertTrue(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertTrue(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertTrue(string5.equals((Object)string1));
      assertEquals("", string5);
      
      int int1 = StringUtils.getLevenshteinDistance((CharSequence) "", (CharSequence) "", 321);
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      
      String string6 = StringUtils.wrap("", "");
      assertNotNull(string6);
      assertTrue(string6.equals((Object)string1));
      assertTrue(string6.equals((Object)string2));
      assertTrue(string6.equals((Object)string5));
      assertTrue(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string4));
      assertEquals("", string6);
      
      String string7 = StringUtils.replaceChars("ONU@Sn52(Njua0", 'k', 'k');
      assertNotNull(string7);
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string5));
      assertTrue(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string1));
      assertEquals("ONU@Sn52(Njua0", string7);
      
      boolean boolean0 = StringUtils.containsIgnoreCase(" vs ", "ONU@Sn52(Njua0");
      assertFalse(boolean0);
      
      String string8 = StringUtils.capitalize((String) null);
      assertNull(string8);
      
      String string9 = StringUtils.wrapIfMissing(" vs ", "qf~9m[6tS8 ofzGk *");
      assertNotNull(string9);
      assertFalse(string9.equals((Object)string4));
      assertFalse(string9.equals((Object)string1));
      assertFalse(string9.equals((Object)string0));
      assertFalse(string9.equals((Object)string6));
      assertFalse(string9.equals((Object)string7));
      assertFalse(string9.equals((Object)string5));
      assertFalse(string9.equals((Object)string3));
      assertFalse(string9.equals((Object)string2));
      assertEquals("qf~9m[6tS8 ofzGk * vs qf~9m[6tS8 ofzGk *", string9);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      String string0 = StringUtils.replaceOnceIgnoreCase("", "", "");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String[] stringArray0 = new String[0];
      String string1 = StringUtils.getCommonPrefix(stringArray0);
      assertNotNull(string1);
      assertEquals(0, stringArray0.length);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "", (CharSequence) "", 99);
      assertEquals(0, int0);
      
      Locale locale0 = Locale.PRC;
      assertNotNull(locale0);
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      
      Locale locale1 = Locale.TRADITIONAL_CHINESE;
      assertNotNull(locale1);
      assertNotSame(locale1, locale0);
      assertEquals("zh", locale1.getLanguage());
      assertEquals("zh_TW", locale1.toString());
      assertEquals("TWN", locale1.getISO3Country());
      assertEquals("", locale1.getVariant());
      assertEquals("TW", locale1.getCountry());
      assertEquals("zho", locale1.getISO3Language());
      assertFalse(locale1.equals((Object)locale0));
      
      String string2 = locale0.getDisplayName(locale1);
      assertNotNull(string2);
      assertNotSame(locale0, locale1);
      assertNotSame(locale1, locale0);
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh", locale1.getLanguage());
      assertEquals("zh_TW", locale1.toString());
      assertEquals("TWN", locale1.getISO3Country());
      assertEquals("", locale1.getVariant());
      assertEquals("TW", locale1.getCountry());
      assertEquals("zho", locale1.getISO3Language());
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(locale1.equals((Object)locale0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("\u4E2D\u6587 (\u4E2D\u570B)", string2);
      
      String string3 = locale0.getDisplayName(locale1);
      assertNotNull(string3);
      assertNotSame(locale0, locale1);
      assertNotSame(locale1, locale0);
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh", locale1.getLanguage());
      assertEquals("zh_TW", locale1.toString());
      assertEquals("TWN", locale1.getISO3Country());
      assertEquals("", locale1.getVariant());
      assertEquals("TW", locale1.getCountry());
      assertEquals("zho", locale1.getISO3Language());
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(locale1.equals((Object)locale0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string2));
      assertEquals("\u4E2D\u6587 (\u4E2D\u570B)", string3);
      
      String string4 = StringUtils.upperCase(" has no clone method", locale1);
      assertNotNull(string4);
      assertNotSame(locale1, locale0);
      assertEquals("zh", locale1.getLanguage());
      assertEquals("zh_TW", locale1.toString());
      assertEquals("TWN", locale1.getISO3Country());
      assertEquals("", locale1.getVariant());
      assertEquals("TW", locale1.getCountry());
      assertEquals("zho", locale1.getISO3Language());
      assertFalse(locale1.equals((Object)locale0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertEquals(" HAS NO CLONE METHOD", string4);
      
      String string5 = StringUtils.toRootUpperCase("");
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string4));
      assertTrue(string5.equals((Object)string0));
      assertTrue(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertEquals("", string5);
      
      String string6 = StringUtils.prependIfMissing("3rL", "\u4E2D\u6587 (\u4E2D\u570B)", (CharSequence[]) null);
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string0));
      assertEquals("\u4E2D\u6587 (\u4E2D\u570B)3rL", string6);
      
      boolean boolean0 = StringUtils.isBlank("\u4E2D\u6587 (\u4E2D\u570B)3rL");
      assertFalse(boolean0);
      
      String string7 = StringUtils.firstNonEmpty(stringArray0);
      assertNull(string7);
      assertEquals(0, stringArray0.length);
      
      String string8 = StringUtils.remove("", "\n");
      assertNotNull(string8);
      assertTrue(string8.equals((Object)string0));
      assertTrue(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string4));
      assertTrue(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string6));
      assertEquals("", string8);
      
      String string9 = StringUtils.replaceChars("F'Cif!H", '<', '<');
      assertNotNull(string9);
      assertFalse(string9.equals((Object)string5));
      assertFalse(string9.equals((Object)string2));
      assertFalse(string9.equals((Object)string4));
      assertFalse(string9.equals((Object)string1));
      assertFalse(string9.equals((Object)string8));
      assertFalse(string9.equals((Object)string0));
      assertFalse(string9.equals((Object)string6));
      assertFalse(string9.equals((Object)string3));
      assertEquals("F'Cif!H", string9);
      
      String string10 = StringUtils.leftPad("%O", 235);
      assertNotNull(string10);
      assertFalse(string10.equals((Object)string9));
      assertFalse(string10.equals((Object)string8));
      assertFalse(string10.equals((Object)string5));
      assertFalse(string10.equals((Object)string3));
      assertFalse(string10.equals((Object)string2));
      assertFalse(string10.equals((Object)string0));
      assertFalse(string10.equals((Object)string6));
      assertFalse(string10.equals((Object)string1));
      assertFalse(string10.equals((Object)string4));
      assertEquals("                                                                                                                                                                                                                                         %O", string10);
      
      boolean boolean1 = StringUtils.isMixedCase("                                                                                                                                                                                                                                         %O");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string11 = StringUtils.trim("");
      assertNotNull(string11);
      assertFalse(string11.equals((Object)string4));
      assertFalse(string11.equals((Object)string2));
      assertTrue(string11.equals((Object)string5));
      assertFalse(string11.equals((Object)string9));
      assertTrue(string11.equals((Object)string0));
      assertTrue(string11.equals((Object)string8));
      assertFalse(string11.equals((Object)string10));
      assertTrue(string11.equals((Object)string1));
      assertFalse(string11.equals((Object)string3));
      assertFalse(string11.equals((Object)string6));
      assertEquals("", string11);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      String string0 = StringUtils.replaceOnceIgnoreCase("", "", "");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.rightPad("", 10, '{');
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("{{{{{{{{{{", string1);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("", '{');
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      
      String string2 = StringUtils.firstNonBlank(stringArray0);
      assertNull(string2);
      assertEquals(0, stringArray0.length);
      
      String string3 = StringUtils.deleteWhitespace("gD");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals("gD", string3);
      
      String string4 = StringUtils.wrapIfMissing("", "MA");
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string0));
      assertEquals("", string4);
      
      double double0 = StringUtils.getJaroWinklerDistance("", "");
      assertEquals(0.0, double0, 0.01);
      
      String string5 = StringUtils.remove("Threshold must not be negative", "Threshold must not be negative");
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string3));
      assertTrue(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertTrue(string5.equals((Object)string0));
      assertEquals("", string5);
      
      boolean boolean0 = StringUtils.isMixedCase("MA");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      String string0 = StringUtils.center("rjt^z&YZ':vy?=ni?n.", 14, "");
      assertNotNull(string0);
      assertEquals("rjt^z&YZ':vy?=ni?n.", string0);
      
      boolean boolean0 = StringUtils.isWhitespace("rjt^z&YZ':vy?=ni?n.");
      assertFalse(boolean0);
      
      String string1 = StringUtils.replaceChars("rjt^z&YZ':vy?=ni?n.", '&', '&');
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("rjt^z&YZ':vy?=ni?n.", string1);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      int int0 = 16;
      String string0 = StringUtils.center("xxUjava.lang.Object@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.Object@50d3e7ejava.lang.Object@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.Object@50d3e7ejava.lang.Object@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.Object@50d3e7ejava.lang.Object@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.Object@50d3e7e", 16);
      assertNotNull(string0);
      
      String string1 = StringUtils.center("xxUjava.lang.Object@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.Object@50d3e7ejava.lang.Object@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.Object@50d3e7ejava.lang.Object@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.Object@50d3e7ejava.lang.Object@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.Object@50d3e7e", 16, "xxUjava.lang.Object@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.Object@50d3e7ejava.lang.Object@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.Object@50d3e7ejava.lang.Object@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.Object@50d3e7ejava.lang.Object@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.Object@50d3e7e");
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      
      boolean boolean0 = StringUtils.isMixedCase("xxUjava.lang.Object@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.Object@50d3e7ejava.lang.Object@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.Object@50d3e7ejava.lang.Object@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.Object@50d3e7ejava.lang.Object@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.Object@50d3e7e");
      assertTrue(boolean0);
      
      String string2 = StringUtils.stripEnd("U2+DfS:Vb%!,", "xxUjava.lang.Object@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.Object@50d3e7ejava.lang.Object@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.Object@50d3e7ejava.lang.Object@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.Object@50d3e7ejava.lang.Object@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.Object@50d3e7e");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("U2+DfS:Vb%!,", string2);
      
      int int1 = 247;
      int int2 = StringUtils.lastOrdinalIndexOf("U2+DfS:Vb%!,", "xxUjava.lang.Object@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.Object@50d3e7ejava.lang.Object@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.Object@50d3e7ejava.lang.Object@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.Object@50d3e7ejava.lang.Object@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.Object@50d3e7e", 247);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals((-1), int2);
      
      // Undeclared exception!
      try { 
        StringUtils.truncate("xxUjava.lang.Object@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.Object@50d3e7ejava.lang.Object@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.Object@50d3e7ejava.lang.Object@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.Object@50d3e7ejava.lang.Object@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.Object@50d3e7e", (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // maxWith cannot be negative
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      String string0 = StringUtils.replacePattern("1Ql@?F;uwENrP`HSq ", (String) null, "=]Un2oPT<");
      assertNotNull(string0);
      assertEquals("1Ql@?F;uwENrP`HSq ", string0);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "1Ql@?F;uwENrP`HSq ";
      stringArray0[1] = "=]Un2oPT<";
      String string1 = StringUtils.getCommonPrefix(stringArray0);
      assertNotNull(string1);
      assertEquals(2, stringArray0.length);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      
      String string2 = StringUtils.stripStart("1Ql@?F;uwENrP`HSq ", "COSk~U");
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("1Ql@?F;uwENrP`HSq ", string2);
      
      String string3 = StringUtils.repeat((String) null, 22);
      assertNull(string3);
      
      String string4 = StringUtils.firstNonEmpty(stringArray0);
      assertNotNull(string4);
      assertEquals(2, stringArray0.length);
      assertFalse(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string0));
      assertEquals("1Ql@?F;uwENrP`HSq ", string4);
      
      String string5 = StringUtils.remove("Cloneable type ", (String) null);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertEquals("Cloneable type ", string5);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) (-494);
      String string6 = StringUtils.join(longArray0, 'Y', 114, (-485));
      assertNotNull(string6);
      assertEquals(2, longArray0.length);
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string2));
      assertEquals("", string6);
      assertArrayEquals(new long[] {(-494L), 0L}, longArray0);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("0", 'u');
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      StringUtils stringUtils0 = new StringUtils();
      assertNotNull(stringUtils0);
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      
      String[] stringArray1 = StringUtils.split(" ", (String) null, (-454));
      assertNotNull(stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(0, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      boolean boolean0 = StringUtils.isNoneEmpty(stringArray0);
      assertNotSame(stringArray0, stringArray1);
      assertEquals(1, stringArray0.length);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertTrue(boolean0);
      
      String string0 = StringUtils.chomp("ASG?bZ0Eo.k!?8*IR", "fKOe e~MFd!&{'et");
      assertNotNull(string0);
      assertEquals("ASG?bZ0Eo.k!?8*IR", string0);
      
      String string1 = StringUtils.difference("d", "d");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      
      String string2 = StringUtils.trimToNull("#r");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("#r", string2);
      
      Object object0 = new Object();
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[8] = "5|5pGW#urA~r?~3";
      stringArray0[1] = "5|5pGW#urA~r?~3";
      stringArray0[2] = "5|5pGW#urA~r?~3";
      stringArray0[3] = "5|5pGW#urA~r?~3";
      stringArray0[4] = "5|5pGW#urA~r?~3";
      stringArray0[5] = "5|5pGW#urA~r?~3";
      stringArray0[6] = "5|5pGW#urA~r?~3";
      stringArray0[7] = "5|5pGW#urA~r?~3";
      stringArray0[8] = "5|5pGW#urA~r?~3";
      String string0 = StringUtils.getCommonPrefix(stringArray0);
      assertNotNull(string0);
      assertEquals(9, stringArray0.length);
      assertEquals("", string0);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "5|5pGW#urA~r?~3", (CharSequence) "", (-494));
      assertEquals((-1), int0);
      
      Locale locale0 = Locale.PRC;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      
      Locale locale1 = Locale.TRADITIONAL_CHINESE;
      assertNotNull(locale1);
      assertNotSame(locale1, locale0);
      assertEquals("TWN", locale1.getISO3Country());
      assertEquals("zh", locale1.getLanguage());
      assertEquals("", locale1.getVariant());
      assertEquals("TW", locale1.getCountry());
      assertEquals("zh_TW", locale1.toString());
      assertEquals("zho", locale1.getISO3Language());
      assertFalse(locale1.equals((Object)locale0));
      
      String string1 = locale1.getDisplayName(locale0);
      assertNotNull(string1);
      assertNotSame(locale0, locale1);
      assertNotSame(locale1, locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("TWN", locale1.getISO3Country());
      assertEquals("zh", locale1.getLanguage());
      assertEquals("", locale1.getVariant());
      assertEquals("TW", locale1.getCountry());
      assertEquals("zh_TW", locale1.toString());
      assertEquals("zho", locale1.getISO3Language());
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(locale1.equals((Object)locale0));
      assertFalse(string1.equals((Object)string0));
      assertEquals("\u4E2D\u6587 (\u53F0\u6E7E\u5730\u533A)", string1);
      
      String string2 = locale0.getDisplayLanguage(locale1);
      assertNotNull(string2);
      assertNotSame(locale0, locale1);
      assertNotSame(locale1, locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("TWN", locale1.getISO3Country());
      assertEquals("zh", locale1.getLanguage());
      assertEquals("", locale1.getVariant());
      assertEquals("TW", locale1.getCountry());
      assertEquals("zh_TW", locale1.toString());
      assertEquals("zho", locale1.getISO3Language());
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(locale1.equals((Object)locale0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("\u4E2D\u6587", string2);
      
      String string3 = locale0.getDisplayName(locale1);
      assertNotNull(string3);
      assertNotSame(locale0, locale1);
      assertNotSame(locale1, locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("TWN", locale1.getISO3Country());
      assertEquals("zh", locale1.getLanguage());
      assertEquals("", locale1.getVariant());
      assertEquals("TW", locale1.getCountry());
      assertEquals("zh_TW", locale1.toString());
      assertEquals("zho", locale1.getISO3Language());
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(locale1.equals((Object)locale0));
      assertEquals("\u4E2D\u6587 (\u4E2D\u570B)", string3);
      
      String string4 = StringUtils.upperCase("Search and Replace array lengths don't match: ", locale1);
      assertNotNull(string4);
      assertNotSame(locale1, locale0);
      assertEquals("TWN", locale1.getISO3Country());
      assertEquals("zh", locale1.getLanguage());
      assertEquals("", locale1.getVariant());
      assertEquals("TW", locale1.getCountry());
      assertEquals("zh_TW", locale1.toString());
      assertEquals("zho", locale1.getISO3Language());
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(locale1.equals((Object)locale0));
      assertEquals("SEARCH AND REPLACE ARRAY LENGTHS DON'T MATCH: ", string4);
      
      String string5 = StringUtils.toRootUpperCase("% !7\"xgvpf]|$;,");
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertEquals("% !7\"XGVPF]|$;,", string5);
      
      String string6 = StringUtils.prependIfMissing("5|5pGW#urA~r?~3", "\u4E2D\u6587 (\u4E2D\u570B)", stringArray0);
      assertNotNull(string6);
      assertEquals(9, stringArray0.length);
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string1));
      assertEquals("5|5pGW#urA~r?~3", string6);
      
      boolean boolean0 = StringUtils.isBlank(stringArray0[0]);
      assertEquals(9, stringArray0.length);
      assertTrue(boolean0);
      
      String string7 = StringUtils.firstNonEmpty(stringArray0);
      assertNotNull(string7);
      assertEquals(9, stringArray0.length);
      assertTrue(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string3));
      assertEquals("5|5pGW#urA~r?~3", string7);
      
      int int1 = new Integer((-1));
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      String string0 = StringUtils.lowerCase("java.lang.Object@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.Object@50d3e7ejava.lang.Object@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.Object@50d3e7e");
      assertNotNull(string0);
      
      String string1 = StringUtils.removeAll("java.lang.object@56b5c730java.lang.object@1de495b1java.lang.object@56b5c730java.lang.object@56b5c730java.lang.object@50d3e7ejava.lang.object@56b5c730java.lang.object@1de495b1java.lang.object@56b5c730java.lang.object@56b5c730java.lang.object@50d3e7e", "java.lang.Object@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.Object@50d3e7ejava.lang.Object@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.Object@50d3e7e");
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      
      boolean boolean0 = StringUtils.containsNone((CharSequence) "java.lang.Object@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.Object@50d3e7ejava.lang.Object@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.Object@50d3e7e", "!>]@{q6R%U^t?h,");
      assertFalse(boolean0);
      
      String string2 = StringUtils.rightPad("|BaGO3.$", 404, "org.apache.commons.lang3.StringUtils5|5pGW#urA~r?~3");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("|BaGO3.$org.apache.commons.lang3.StringUtils5|5pGW#urA~r?~3org.apache.commons.lang3.StringUtils5|5pGW#urA~r?~3org.apache.commons.lang3.StringUtils5|5pGW#urA~r?~3org.apache.commons.lang3.StringUtils5|5pGW#urA~r?~3org.apache.commons.lang3.StringUtils5|5pGW#urA~r?~3org.apache.commons.lang3.StringUtils5|5pGW#urA~r?~3org.apache.commons.lang3.StringUtils5|5pGW#urA~r?~3org.apache.commons.lang3.StringUtils5|5", string2);
      
      String string3 = StringUtils.lowerCase("|BaGO3.$");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals("|bago3.$", string3);
      
      boolean boolean1 = StringUtils.startsWith("org.apache.commons.lang3.StringUtils5|5pGW#urA~r?~3", "java.lang.object@56b5c730java.lang.object@1de495b1java.lang.object@56b5c730java.lang.object@56b5c730java.lang.object@50d3e7ejava.lang.object@56b5c730java.lang.object@1de495b1java.lang.object@56b5c730java.lang.object@56b5c730java.lang.object@50d3e7e");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string4 = StringUtils.center("java.lang.object@56b5c730java.lang.object@1de495b1java.lang.object@56b5c730java.lang.object@56b5c730java.lang.object@50d3e7ejava.lang.object@56b5c730java.lang.object@1de495b1java.lang.object@56b5c730java.lang.object@56b5c730java.lang.object@50d3e7e", (-2444), ',');
      assertNotNull(string4);
      assertTrue(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "|BaGO3.$", (CharSequence) "java.lang.object@56b5c730java.lang.object@1de495b1java.lang.object@56b5c730java.lang.object@56b5c730java.lang.object@50d3e7ejava.lang.object@56b5c730java.lang.object@1de495b1java.lang.object@56b5c730java.lang.object@56b5c730java.lang.object@50d3e7e");
      assertEquals(245, int0);
      
      int int1 = StringUtils.compareIgnoreCase("Array element ", "=gdo", false);
      assertFalse(int1 == int0);
      assertEquals(36, int1);
      
      String[] stringArray0 = StringUtils.substringsBetween("%O", "'\"CJ4r", "QlJ9fx c+");
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte) (-16);
      byteArray0[3] = (byte) (-16);
      byteArray0[4] = (byte)0;
      String string0 = StringUtils.deleteWhitespace("The Arra must no^ be null");
      assertNotNull(string0);
      assertEquals("TheArramustno^benull", string0);
      
      char[] charArray0 = new char[8];
      charArray0[0] = '$';
      charArray0[1] = '$';
      charArray0[2] = '$';
      charArray0[3] = '$';
      charArray0[4] = '$';
      charArray0[5] = '$';
      charArray0[6] = '$';
      charArray0[7] = '$';
      boolean boolean0 = StringUtils.containsNone((CharSequence) "TheArramustno^benull", charArray0);
      assertEquals(8, charArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new char[] {'$', '$', '$', '$', '$', '$', '$', '$'}, charArray0);
      
      String string1 = StringUtils.wrap("af0LmbhI=JLr(8.YJ_]Z(/oOK,3x$ClK", '6');
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("6af0LmbhI=JLr(8.YJ_]Z(/oOK,3x$ClK6", string1);
      
      boolean boolean1 = StringUtils.containsAny((CharSequence) "6af0LmbhI=JLr(8.YJ_]Z(/oOK,3x$ClK6", charArray0);
      assertEquals(8, charArray0.length);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertArrayEquals(new char[] {'$', '$', '$', '$', '$', '$', '$', '$'}, charArray0);
      
      String string2 = StringUtils.substringBetween("Search and Replace array lengths don't match: ", "N$Lg{tP=%A+x", "=S17;3D-pS#:d$jJS");
      assertNull(string2);
      
      int int0 = StringUtils.indexOf((CharSequence) "Search and Replace array lengths don't match: ", (CharSequence) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      charSequenceArray0[2] = (CharSequence) "({yBTE<CM=<>!B&F=r";
      charSequenceArray0[3] = (CharSequence) "({yBTE<CM=<>!B&F=r";
      boolean boolean0 = StringUtils.isAsciiPrintable("({yBTE<CM=<>!B&F=r");
      assertFalse(boolean0);
      
      int int0 = StringUtils.compare("Minimum abbreviation width-is %dMinimum abbreDiation width is %d", (String) null);
      assertEquals(1, int0);
      
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      
      byte[] byteArray0 = StringUtils.getBytes("AhI1+gNUg{", charset0);
      assertNotNull(byteArray0);
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      assertEquals(10, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)65, (byte)104, (byte)73, (byte)49, (byte)43, (byte)103, (byte)78, (byte)85, (byte)103, (byte)123}, byteArray0);
      
      String string0 = StringUtils.difference("ty", "ja*EbH%]{K");
      assertNotNull(string0);
      assertEquals("ja*EbH%]{K", string0);
      
      int int1 = StringUtils.indexOf((CharSequence) "ja*EbH%]{K", (CharSequence) null);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      String string0 = StringUtils.stripToNull((String) null);
      assertNull(string0);
      
      String string1 = StringUtils.join((float[]) null, 'j', 3, (-2456));
      assertNull(string1);
      
      int int0 = StringUtils.indexOfDifference((CharSequence) null, (CharSequence) "h!{j5f5T8V}7s;");
      assertEquals(0, int0);
      
      String string2 = StringUtils.leftPad((String) null, 3, (String) null);
      assertNull(string2);
      
      String string3 = StringUtils.stripEnd((String) null, "wDPtb=E*0D +QyRIy\"@=HJ");
      assertNull(string3);
      
      CharSequence[] charSequenceArray0 = new CharSequence[8];
      charSequenceArray0[0] = (CharSequence) null;
      charSequenceArray0[1] = (CharSequence) null;
      String string4 = StringUtils.center((String) null, 6, (String) null);
      assertNull(string4);
      
      charSequenceArray0[2] = (CharSequence) null;
      charSequenceArray0[3] = (CharSequence) "wDPtb=E*0D +QyRIy\"@=HJ";
      charSequenceArray0[4] = (CharSequence) null;
      charSequenceArray0[5] = (CharSequence) null;
      charSequenceArray0[6] = (CharSequence) null;
      charSequenceArray0[7] = (CharSequence) null;
      String string5 = StringUtils.prependIfMissing((String) null, "wDPtb=E*0D +QyRIy\"@=HJ", charSequenceArray0);
      assertNull(string5);
      assertEquals(8, charSequenceArray0.length);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      String string0 = StringUtils.join((Iterator<?>) null, "");
      assertNull(string0);
      
      String string1 = StringUtils.leftPad((String) null, 2231);
      assertNull(string1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[9];
      charSequenceArray0[0] = (CharSequence) null;
      charSequenceArray0[1] = (CharSequence) null;
      charSequenceArray0[2] = (CharSequence) null;
      charSequenceArray0[3] = (CharSequence) null;
      charSequenceArray0[4] = (CharSequence) null;
      charSequenceArray0[5] = (CharSequence) null;
      String string2 = StringUtils.EMPTY;
      assertNotNull(string2);
      assertEquals("", string2);
      
      charSequenceArray0[6] = (CharSequence) "";
      charSequenceArray0[7] = (CharSequence) null;
      String string3 = StringUtils.truncate("", 2231, 2786);
      assertNotNull(string3);
      assertEquals("", string3);
      
      charSequenceArray0[8] = (CharSequence) "";
      int int0 = StringUtils.indexOfAny((CharSequence) null, charSequenceArray0);
      assertEquals(9, charSequenceArray0.length);
      assertEquals((-1), int0);
      
      int int1 = StringUtils.compareIgnoreCase("wN|wN|", "", false);
      assertFalse(int1 == int0);
      assertEquals(6, int1);
      
      boolean boolean0 = StringUtils.isNumeric(charSequenceArray0[2]);
      assertEquals(9, charSequenceArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      charSequenceArray0[0] = (CharSequence) "h!{j5f5T8V}7s;";
      charSequenceArray0[1] = (CharSequence) "h!{j5f5T8V}7s;";
      charSequenceArray0[2] = (CharSequence) "h!{j5f5T8V}7s;";
      String string0 = StringUtils.abbreviateMiddle("h!{j5f5T8V}7s;", "java.lang.Object@52b769b5java.lang.Object@1d3febfajava.lang.Object@4c16c3aejava.lang.Object@4a32f5f1java.lang.Object@23a1c7c3java.lang.Object@52b769b5java.lang.Object@1d3febfajava.lang.Object@4c16c3aejava.lang.Object@4a32f5f1java.lang.Object@23a1c7c3", 15);
      assertNotNull(string0);
      assertEquals("h!{j5f5T8V}7s;", string0);
      
      charSequenceArray0[3] = (CharSequence) "h!{j5f5T8V}7s;";
      charSequenceArray0[4] = (CharSequence) "h!{j5f5T8V}7s;";
      String string1 = StringUtils.appendIfMissing("h!{j5f5T8V}7s;", "h!{j5f5T8V}7s;", charSequenceArray0);
      assertNotNull(string1);
      assertEquals(5, charSequenceArray0.length);
      assertTrue(string1.equals((Object)string0));
      assertEquals("h!{j5f5T8V}7s;", string1);
      
      int int0 = StringUtils.indexOfDifference(charSequenceArray0[4], (CharSequence) "h!{j5f5T8V}7s;");
      assertEquals(5, charSequenceArray0.length);
      assertEquals((-1), int0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("", "java.lang.Object@52b769b5java.lang.Object@1d3febfajava.lang.Object@4c16c3aejava.lang.Object@4a32f5f1java.lang.Object@23a1c7c3java.lang.Object@52b769b5java.lang.Object@1d3febfajava.lang.Object@4c16c3aejava.lang.Object@4a32f5f1java.lang.Object@23a1c7c3");
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      
      String string2 = StringUtils.repeat(".'am$2&U)u", (-1));
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("", string2);
      
      String string3 = StringUtils.reverseDelimited(".'am$2&U)u", 'N');
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals(".'am$2&U)u", string3);
      
      boolean boolean0 = StringUtils.isAllEmpty(charSequenceArray0);
      assertEquals(5, charSequenceArray0.length);
      assertFalse(boolean0);
      
      String[] stringArray1 = StringUtils.splitByWholeSeparatorPreserveAllTokens("The type must not be null", "", (-1));
      assertNotNull(stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(6, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      String string4 = StringUtils.replaceOnce(".'am$2&U)u", "Cannot store ", "Cannot store ");
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertEquals(".'am$2&U)u", string4);
      
      int int1 = StringUtils.getLevenshteinDistance(charSequenceArray0[4], (CharSequence) ".'am$2&U)u", 17);
      assertEquals(5, charSequenceArray0.length);
      assertFalse(int1 == int0);
      assertEquals(14, int1);
      
      int int2 = StringUtils.indexOfDifference(charSequenceArray0[2], (CharSequence) "h!{j5f5T8V}7s;");
      assertEquals(5, charSequenceArray0.length);
      assertFalse(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals((-1), int2);
      
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      String string5 = StringUtils.getIfEmpty("sny_cTpX P}]&W", supplier0);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertEquals("sny_cTpX P}]&W", string5);
      
      int int3 = StringUtils.compare("h!{j5f5T8V}7s;", "sny_cTpX P}]&W");
      assertFalse(int3 == int0);
      assertFalse(int3 == int2);
      assertFalse(int3 == int1);
      assertEquals((-11), int3);
      
      boolean boolean1 = StringUtils.isEmpty(charSequenceArray0[3]);
      assertEquals(5, charSequenceArray0.length);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string6 = StringUtils.trim("h!{j5f5T8V}7s;");
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string5));
      assertTrue(string6.equals((Object)string1));
      assertTrue(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string3));
      assertEquals("h!{j5f5T8V}7s;", string6);
      
      String string7 = StringUtils.chop("sny_cTpX P}]&W");
      assertNotNull(string7);
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string3));
      assertEquals("sny_cTpX P}]&", string7);
      
      String string8 = StringUtils.substringAfter("Zu*4-n!o`!mH6S_v", 0);
      assertNotNull(string8);
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string3));
      assertEquals("", string8);
      
      String string9 = StringUtils.defaultIfBlank("sny_cTpX P}]&", "sny_cTpX P}]&W");
      assertNotNull(string9);
      assertFalse(string9.equals((Object)string4));
      assertFalse(string9.equals((Object)string8));
      assertFalse(string9.equals((Object)string0));
      assertFalse(string9.equals((Object)string5));
      assertFalse(string9.equals((Object)string2));
      assertFalse(string9.equals((Object)string6));
      assertFalse(string9.equals((Object)string1));
      assertFalse(string9.equals((Object)string3));
      assertTrue(string9.equals((Object)string7));
      assertEquals("sny_cTpX P}]&", string9);
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)9;
      shortArray0[1] = (short)0;
      shortArray0[2] = (short)1550;
      shortArray0[3] = (short)14;
      String string10 = StringUtils.join(shortArray0, 'x', 1346, 17);
      assertNotNull(string10);
      assertEquals(4, shortArray0.length);
      assertFalse(string10.equals((Object)string4));
      assertFalse(string10.equals((Object)string7));
      assertFalse(string10.equals((Object)string5));
      assertFalse(string10.equals((Object)string3));
      assertFalse(string10.equals((Object)string9));
      assertFalse(string10.equals((Object)string1));
      assertFalse(string10.equals((Object)string6));
      assertFalse(string10.equals((Object)string0));
      assertEquals("", string10);
      assertArrayEquals(new short[] {(short)9, (short)0, (short)1550, (short)14}, shortArray0);
      
      int int4 = StringUtils.indexOfDifference(charSequenceArray0[0], (CharSequence) "");
      assertEquals(5, charSequenceArray0.length);
      assertFalse(int4 == int3);
      assertFalse(int4 == int0);
      assertFalse(int4 == int2);
      assertFalse(int4 == int1);
      assertEquals(0, int4);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      assertNotNull(stringWriter0);
      assertEquals("", stringWriter0.toString());
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) (-77);
      int int0 = StringUtils.compareIgnoreCase("ZL<ZDyU_Sr2-ZwGq>x", "ZL<ZDyU_Sr2-ZwGq>x");
      assertEquals(0, int0);
      
      String string0 = StringUtils.defaultIfEmpty("...", "...");
      assertNotNull(string0);
      assertEquals("...", string0);
      
      String string1 = StringUtils.chop("...");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("..", string1);
      
      boolean boolean0 = StringUtils.isNotBlank("Search and Replace array lengths don't match: ");
      assertTrue(boolean0);
      
      String string2 = StringUtils.substringBeforeLast("ZL<ZDyU_Sr2-ZwGq>x", "AWX2Nk");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("ZL<ZDyU_Sr2-ZwGq>x", string2);
      
      String[] stringArray0 = new String[7];
      stringArray0[0] = "ZL<ZDyU_Sr2-ZwGq>x";
      stringArray0[1] = "J_]Z(/oOK,3x$Cl";
      stringArray0[2] = "AWX2Nk";
      stringArray0[3] = "H.2C*/G+Ii`MIW%";
      stringArray0[4] = "J_]Z(/oOK,3x$Cl";
      stringArray0[5] = "...";
      stringArray0[6] = "J_]Z(/oOK,3x$Cl";
      String string3 = StringUtils.getCommonPrefix(stringArray0);
      assertNotNull(string3);
      assertEquals(7, stringArray0.length);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals("", string3);
      
      String string4 = StringUtils.stripStart("J_]Z(/oOK,3x$Cl", "Kr$f5\";vE");
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertEquals("J_]Z(/oOK,3x$Cl", string4);
      
      int int1 = StringUtils.ordinalIndexOf("J_]Z(/oOK,3x$Cl", "J_]Z(/oOK,3x$Cl", 0);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      String string5 = StringUtils.abbreviate("Cannot clone Cloneable type ", (String) null, (-77), 0);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertEquals("Cannot clone Cloneable type ", string5);
      
      String string6 = StringUtils.join((Object[]) stringArray0);
      assertNotNull(string6);
      assertEquals(7, stringArray0.length);
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string5));
      assertEquals("ZL<ZDyU_Sr2-ZwGq>xJ_]Z(/oOK,3x$ClAWX2NkH.2C*/G+Ii`MIW%J_]Z(/oOK,3x$Cl...J_]Z(/oOK,3x$Cl", string6);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[4] = (byte)104;
      byteArray0[1] = (byte)0;
      String string0 = StringUtils.wrap("`7p(", 'N');
      assertNotNull(string0);
      assertEquals("N`7p(N", string0);
      
      char[] charArray0 = new char[23];
      charArray0[0] = 'N';
      charArray0[15] = 'N';
      charArray0[2] = 'N';
      charArray0[3] = '_';
      int int0 = StringUtils.indexOfAny((CharSequence) "N`7p(N", charArray0);
      assertEquals(23, charArray0.length);
      assertEquals(0, int0);
      
      String string1 = StringUtils.substringBeforeLast("N`7p(N", "N`7p(N");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      
      int int1 = StringUtils.indexOfIgnoreCase((CharSequence) "", (CharSequence) "N`7p(N", 48);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      String string0 = StringUtils.mid("", 852, 321);
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.unwrap("Minimum abbreviation width is %d", '+');
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("Minimum abbreviation width is %d", string1);
      
      String string2 = StringUtils.center("Array element ", 321, '+');
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++Array element ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++", string2);
      
      String string3 = StringUtils.removeAll("HISmhl", "");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals("HISmhl", string3);
      
      String[] stringArray0 = StringUtils.stripAll((String[]) null, "+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++Array element ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++");
      assertNull(stringArray0);
      
      TreeSet<Integer> treeSet0 = new TreeSet<Integer>();
      assertNotNull(treeSet0);
      assertFalse(treeSet0.contains(852));
      
      TreeSet<Integer> treeSet1 = new TreeSet<Integer>((SortedSet<Integer>) treeSet0);
      assertNotNull(treeSet1);
      assertTrue(treeSet1.equals((Object)treeSet0));
      assertFalse(treeSet0.contains(852));
      assertFalse(treeSet1.contains(852));
      
      String string4 = StringUtils.join((Iterable<?>) treeSet1, '+');
      assertNotNull(string4);
      assertNotSame(treeSet0, treeSet1);
      assertNotSame(treeSet1, treeSet0);
      assertTrue(treeSet0.equals((Object)treeSet1));
      assertTrue(treeSet1.equals((Object)treeSet0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertEquals("", string4);
      assertFalse(treeSet0.contains(852));
      assertFalse(treeSet1.contains(852));
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      String string0 = StringUtils.removeStart(" is not in the range '0' - '9'", " is not in the range '0' - '9'");
      assertNotNull(string0);
      assertEquals("", string0);
      
      boolean boolean0 = StringUtils.containsWhitespace("");
      assertFalse(boolean0);
      
      long[] longArray0 = new long[8];
      longArray0[0] = 1L;
      longArray0[1] = 193L;
      longArray0[2] = 193L;
      longArray0[3] = (-421L);
      longArray0[4] = 1L;
      longArray0[6] = 2L;
      longArray0[7] = (-4646L);
      String string1 = StringUtils.swapCase("");
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      
      int int0 = StringUtils.indexOfAny((CharSequence) " is not in the range '0' - '9'", (CharSequence[]) null);
      assertEquals((-1), int0);
      
      int int1 = StringUtils.compareIgnoreCase((String) null, "=]Un2oPT<", true);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      int int0 = StringUtils.compare("jZ2Xbq8JxDS]4zy", "jZ2Xbq8JxDS]4zy", true);
      assertEquals(0, int0);
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = "+5^~]eAb";
      stringArray0[1] = "+5^~]eAb";
      stringArray0[2] = "jZ2Xbq8JxDS]4zy";
      stringArray0[3] = "/)q_F[PuSDH6Q*O";
      String string0 = StringUtils.replaceEachRepeatedly(">yF", stringArray0, stringArray0);
      assertNotNull(string0);
      assertEquals(4, stringArray0.length);
      assertEquals(">yF", string0);
      
      String string1 = StringUtils.stripToNull(">yF");
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals(">yF", string1);
      
      int int1 = StringUtils.compareIgnoreCase("+5^~]eAb", "ZL<ZDyU_Sr2-ZwGq>x");
      assertFalse(int1 == int0);
      assertEquals((-79), int1);
      
      String string2 = StringUtils.defaultIfEmpty("=]Un2oPT<", "Search and Replace array lengths don't match: ");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("=]Un2oPT<", string2);
      
      String string3 = StringUtils.chop("}");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals("", string3);
      
      boolean boolean0 = StringUtils.isNotBlank("}");
      assertTrue(boolean0);
      
      String string4 = StringUtils.substringBeforeLast(">yF", "AWX2Nk");
      assertNotNull(string4);
      assertTrue(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertEquals(">yF", string4);
      
      String string5 = StringUtils.getCommonPrefix(stringArray0);
      assertNotNull(string5);
      assertEquals(4, stringArray0.length);
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertEquals("", string5);
      
      String string6 = StringUtils.stripStart((String) null, "++(eqxJ dWu");
      assertNull(string6);
      
      int int2 = StringUtils.ordinalIndexOf("=]Un2oPT<", "/)q_F[PuSDH6Q*O", (-79));
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals((-1), int2);
      
      // Undeclared exception!
      try { 
        StringUtils.abbreviate("o7!]x", ">yF", 1114111, (-1638));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum abbreviation width is 4
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      String string0 = StringUtils.remove("$4'Tcj.*5", 'o');
      assertNotNull(string0);
      assertEquals("$4'Tcj.*5", string0);
      
      String string1 = StringUtils.unwrap("$4'Tcj.*5", 'M');
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("$4'Tcj.*5", string1);
      
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "$4'Tcj.*5", "$4'Tcj.*5");
      assertTrue(boolean0);
      
      String string2 = StringUtils.wrapIfMissing("_[~44nzAA':G0S.EM", '+');
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("+_[~44nzAA':G0S.EM+", string2);
      
      boolean boolean1 = StringUtils.startsWith("_[~44nzAA':G0S.EM", "_[~44nzAA':G0S.EM");
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String string3 = StringUtils.stripStart("\r", "!GYVQpg");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("\r", string3);
      
      String string4 = StringUtils.abbreviate("~ssY,sLx", "~ssY,sLx", 32767, 32767);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertEquals("~ssY,sLx", string4);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      long[] longArray0 = new long[5];
      longArray0[0] = 4L;
      longArray0[1] = (-1L);
      longArray0[2] = (-1282L);
      longArray0[3] = 4L;
      longArray0[4] = 0L;
      String string0 = StringUtils.SPACE;
      assertNotNull(string0);
      assertEquals(" ", string0);
      
      boolean boolean0 = StringUtils.containsOnly((CharSequence) " ", "#(SRT4?3`J sHgBR<");
      assertTrue(boolean0);
      
      String string1 = StringUtils.wrapIfMissing("Locale must not be null", 'S');
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("SLocale must not be nullS", string1);
      
      String string2 = StringUtils.replace("xm}TdUxm}TdU", " ", "xm}TdUxm}TdU", (-5054));
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("xm}TdUxm}TdU", string2);
      
      boolean boolean1 = StringUtils.containsOnly((CharSequence) "xm}TdUxm}TdU", "The Array must not be nullThe Array must not be null");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("Locale must not be null");
      assertNotNull(stringArray0);
      assertEquals(9, stringArray0.length);
      
      int int0 = StringUtils.indexOf((CharSequence) "#(SRT4?3`J sHgBR<", (CharSequence) "#(SRT4?3`J sHgBR<");
      assertEquals(0, int0);
      
      String string3 = StringUtils.remove(" vs ", "SLocale must not be nullS");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals(" vs ", string3);
      
      String string4 = StringUtils.replaceChars("The Array must not be nullThe Array must not be null", 'L', '&');
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertEquals("The Array must not be nullThe Array must not be null", string4);
      
      String string5 = StringUtils.leftPad("Supplied value must be a valid byte literal between -128 and 127: [", 235);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertEquals("                                                                                                                                                                        Supplied value must be a valid byte literal between -128 and 127: [", string5);
      
      boolean boolean2 = StringUtils.isMixedCase("                                                                                                                                                                        Supplied value must be a valid byte literal between -128 and 127: [");
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2);
      
      String string6 = StringUtils.trim("The Array must not be nullThe Array must not be null");
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string5));
      assertTrue(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string0));
      assertEquals("The Array must not be nullThe Array must not be null", string6);
      
      int int1 = StringUtils.indexOf((CharSequence) "SLocale must not be nullS", (CharSequence) " vs ");
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      int int2 = StringUtils.countMatches((CharSequence) "SLocale must not be nullS", (CharSequence) " vs ");
      assertTrue(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(0, int2);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      String string0 = StringUtils.rightPad("...", (-4100), "(");
      assertNotNull(string0);
      assertEquals("...", string0);
      
      boolean boolean0 = StringUtils.isMixedCase("...");
      assertFalse(boolean0);
      
      String string1 = StringUtils.wrapIfMissing("...", "Minimum abbreviation width with offset is %d");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("Minimum abbreviation width with offset is %d...Minimum abbreviation width with offset is %d", string1);
      
      double double0 = StringUtils.getJaroWinklerDistance("...", "Minimum abbreviation width with offset is %d...Minimum abbreviation width with offset is %d");
      assertEquals(0.68, double0, 0.01);
      
      String string2 = StringUtils.join((byte[]) null, '.');
      assertNull(string2);
      
      int int0 = StringUtils.countMatches((CharSequence) "(", (CharSequence) null);
      assertEquals(0, int0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[0] = (CharSequence) "...";
      charSequenceArray0[1] = (CharSequence) "...";
      boolean boolean1 = StringUtils.equalsAny("org.apache.commons.lang3.StringUtils", charSequenceArray0);
      assertEquals(2, charSequenceArray0.length);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string3 = StringUtils.replaceEachRepeatedly("...", (String[]) null, (String[]) null);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string0));
      assertEquals("...", string3);
      
      String string4 = StringUtils.substringBefore("{`Y,+-v%", "l+[/M");
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertEquals("{`Y,+-v%", string4);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      String string0 = " vs ";
      String string1 = "org.apache.commons.lang3.LocaleUtils";
      String[] stringArray0 = StringUtils.split(" vs ", "org.apache.commons.lang3.LocaleUtils", (-494));
      assertNotNull(stringArray0);
      assertEquals(2, stringArray0.length);
      
      String string2 = StringUtils.replaceChars("VT76I%Sr''6AGe(yW\"u", '2', 'k');
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("VT76I%Sr''6AGe(yW\"u", string2);
      
      String string3 = StringUtils.chop("org.apache.commons.lang3.LocaleUtils");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals("org.apache.commons.lang3.LocaleUtil", string3);
      
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains((-494)));
      
      Integer integer0 = new Integer((-494));
      assertNotNull(integer0);
      assertEquals((-494), (int)integer0);
      
      int int0 = 32767;
      // Undeclared exception!
      StringUtils.center("org.apache.commons.lang3.LocaleUtils", 32767, 'k');
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[0] = " vs ";
      String string0 = StringUtils.capitalize(" vs ");
      assertNotNull(string0);
      assertEquals(" vs ", string0);
      
      String string1 = StringUtils.wrap("d7Xxt`", 'U');
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("Ud7Xxt`U", string1);
      
      int int0 = StringUtils.countMatches((CharSequence) "d7Xxt`", (CharSequence) "d7Xxt`");
      assertEquals(1, int0);
      
      String string2 = StringUtils.center(" vs ", 1);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertEquals(" vs ", string2);
      
      String[] stringArray1 = StringUtils.stripAll(stringArray0);
      assertNotNull(stringArray1);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(7, stringArray0.length);
      assertEquals(7, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      boolean boolean0 = StringUtils.containsAnyIgnoreCase("d7Xxt`", stringArray1);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(7, stringArray0.length);
      assertEquals(7, stringArray1.length);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isWhitespace(" vs ");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      int int1 = StringUtils.lastIndexOfAny(" vs ", (CharSequence[]) null);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      String string0 = StringUtils.center("", 12);
      assertNotNull(string0);
      assertEquals("           ", string0);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = ".M,KjXgwsMU,";
      String string1 = StringUtils.replaceChars("Minimum abbreviation width with offset is %d", "]", "]");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("Minimum abbreviation width with offset is %d", string1);
      
      boolean boolean0 = StringUtils.isWhitespace(".M,KjXgwsMU,");
      assertFalse(boolean0);
      
      String string2 = StringUtils.join((boolean[]) null, 'F', 12, (-1536));
      assertNull(string2);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) ".M,KjXgwsMU,", (CharSequence) ".M,KjXgwsMU,");
      assertEquals(0, int0);
      
      String[] stringArray1 = StringUtils.stripAll(stringArray0);
      assertNotNull(stringArray1);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(2, stringArray0.length);
      assertEquals(2, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      boolean boolean1 = StringUtils.containsAnyIgnoreCase("           ", stringArray1);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(2, stringArray0.length);
      assertEquals(2, stringArray1.length);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string3 = StringUtils.replaceIgnoreCase((String) null, "\n", "Minimum abbreviation width with offset is %d", 0);
      assertNull(string3);
      
      boolean boolean2 = StringUtils.isWhitespace((CharSequence) null);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      int int1 = StringUtils.lastIndexOfAny("           ", stringArray1);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(2, stringArray0.length);
      assertEquals(2, stringArray1.length);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      boolean boolean3 = StringUtils.containsIgnoreCase("Minimum abbreviation width with offset is %d", (CharSequence) null);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3);
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) 0;
      floatArray0[1] = (float) (-1536);
      floatArray0[2] = (float) (-1);
      floatArray0[3] = (float) 12;
      floatArray0[4] = (float) (-1);
      floatArray0[5] = (-3180.723F);
      floatArray0[6] = (float) 'F';
      floatArray0[7] = (float) 'F';
      String string4 = StringUtils.join(floatArray0, 'F', 144, 144);
      assertNotNull(string4);
      assertEquals(8, floatArray0.length);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertEquals("", string4);
      assertArrayEquals(new float[] {0.0F, (-1536.0F), (-1.0F), 12.0F, (-1.0F), (-3180.723F), 70.0F, 70.0F}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      String string0 = StringUtils.trim("Z>yD=");
      assertNotNull(string0);
      assertEquals("Z>yD=", string0);
      
      String string1 = StringUtils.abbreviate("Z>yD=", 25);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("Z>yD=", string1);
      
      String string2 = StringUtils.join((byte[]) null, '.');
      assertNull(string2);
      
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      String string3 = StringUtils.join((Iterable<?>) linkedList0, '.');
      assertNotNull(string3);
      assertEquals(0, linkedList0.size());
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals("", string3);
      
      int int0 = StringUtils.countMatches((CharSequence) "", (CharSequence) null);
      assertEquals(0, int0);
      
      String string4 = StringUtils.right((String) null, (byte)93);
      assertNull(string4);
      
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      String string5 = StringUtils.replaceChars("Q<Cikw+WuD/", '.', '.');
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertEquals("Q<Cikw+WuD/", string5);
      
      charSequenceArray0[0] = (CharSequence) "Q<Cikw+WuD/";
      charSequenceArray0[1] = (CharSequence) "Q<Cikw+WuD/";
      charSequenceArray0[2] = (CharSequence) "Z>yD=";
      boolean boolean0 = StringUtils.equalsAny("Z>yD=", charSequenceArray0);
      assertEquals(3, charSequenceArray0.length);
      assertTrue(boolean0);
      
      String string6 = StringUtils.rightPad("", 97, 'T');
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string0));
      assertEquals("TTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTT", string6);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      String string0 = StringUtils.trim("%DhCH;Zr=g8l6-");
      assertNotNull(string0);
      assertEquals("%DhCH;Zr=g8l6-", string0);
      
      String string1 = StringUtils.join((boolean[]) null, '^');
      assertNull(string1);
      
      String string2 = StringUtils.reverseDelimited("J_]Z(/oOK,3x$Cl", 'D');
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertEquals("J_]Z(/oOK,3x$Cl", string2);
      
      String string3 = StringUtils.unwrap("%DhCH;Zr=g8l6-", (String) null);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string0));
      assertEquals("%DhCH;Zr=g8l6-", string3);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      String string0 = StringUtils.remove("#r", 'y');
      assertNotNull(string0);
      assertEquals("#r", string0);
      
      int int0 = StringUtils.indexOf((CharSequence) "#r", (CharSequence) "#r");
      assertEquals(0, int0);
      
      String[] stringArray0 = new String[0];
      String string1 = StringUtils.SPACE;
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals(" ", string1);
      
      int int1 = StringUtils.indexOfAny((CharSequence) " ", (CharSequence[]) stringArray0);
      assertEquals(0, stringArray0.length);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      String string2 = "Y(ro/M1bi-J!i-,d>n+";
      String string3 = StringUtils.leftPad(" ", 2302, "#r");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      
      String string4 = StringUtils.rotate("#r", 0);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertEquals("#r", string4);
      
      boolean boolean0 = StringUtils.isNoneEmpty(stringArray0);
      assertEquals(0, stringArray0.length);
      assertTrue(boolean0);
      
      String string5 = "ZyW,AzDH~";
      String string6 = StringUtils.abbreviate("ZyW,AzDH~", "#r", 2302);
      assertNotNull(string6);
      assertTrue(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string3));
      assertEquals("ZyW,AzDH~", string6);
      
      String string7 = StringUtils.defaultString("aocale must ]ot be null");
      assertNotNull(string7);
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string2));
      assertEquals("aocale must ]ot be null", string7);
      
      int int2 = StringUtils.lastIndexOfIgnoreCase((CharSequence) string3, (CharSequence) " ");
      assertFalse(string3.equals((Object)string4));
      assertFalse(string3.equals((Object)string6));
      assertFalse(string3.equals((Object)string7));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string5));
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(2301, int2);
      
      String string8 = StringUtils.substringBeforeLast("ZyW,AzDH~", "#r");
      assertNotNull(string8);
      assertFalse(string8.equals((Object)string2));
      assertTrue(string8.equals((Object)string6));
      assertTrue(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string1));
      assertEquals("ZyW,AzDH~", string8);
      
      // Undeclared exception!
      try { 
        StringUtils.getLevenshteinDistance((CharSequence) "Y(ro/M1bi-J!i-,d>n+", (CharSequence) string3, (-4474));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Threshold must not be negative
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      String string0 = StringUtils.join((Iterator<?>) null, "");
      assertNull(string0);
      
      String string1 = StringUtils.normalizeSpace("nFU)@y~JLh");
      assertNotNull(string1);
      assertEquals("nFU)@y~JLh", string1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      boolean boolean0 = StringUtils.isNoneBlank(charSequenceArray0);
      assertEquals(0, charSequenceArray0.length);
      assertTrue(boolean0);
      
      String string2 = StringUtils.capitalize("");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertEquals("", string2);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "";
      String string3 = StringUtils.getCommonPrefix(stringArray0);
      assertNotNull(string3);
      assertEquals(1, stringArray0.length);
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string2));
      assertEquals("", string3);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'j';
      String string4 = StringUtils.join(charArray0, 'c', 170, (-4569));
      assertNotNull(string4);
      assertEquals(1, charArray0.length);
      assertTrue(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string2));
      assertEquals("", string4);
      assertArrayEquals(new char[] {'j'}, charArray0);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "", (String) null);
      assertEquals((-1), int0);
      
      String string5 = StringUtils.removeEnd("wDPtb=E*0D +", "QyRIy\"@=HJ");
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertEquals("wDPtb=E*0D +", string5);
      
      String string6 = StringUtils.substringBefore("", 1635);
      assertNotNull(string6);
      assertTrue(string6.equals((Object)string3));
      assertTrue(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string5));
      assertTrue(string6.equals((Object)string2));
      assertEquals("", string6);
      
      String[] stringArray1 = StringUtils.splitPreserveAllTokens("I", " ");
      assertNotNull(stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(1, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      String string7 = StringUtils.replace("", " ", "", 4);
      assertNotNull(string7);
      assertTrue(string7.equals((Object)string2));
      assertTrue(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string1));
      assertTrue(string7.equals((Object)string3));
      assertTrue(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string5));
      assertEquals("", string7);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      String string0 = StringUtils.left("5|5pGW#urA~r?~3", (-494));
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.leftPad("", (-494));
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      
      boolean boolean0 = StringUtils.isMixedCase("5|5pGW#urA~r?~3");
      assertTrue(boolean0);
      
      String string2 = StringUtils.SPACE;
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals(" ", string2);
      
      int int0 = StringUtils.countMatches((CharSequence) "5|5pGW#urA~r?~3", (CharSequence) " ");
      assertEquals(0, int0);
      
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("");
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      
      String string3 = StringUtils.rotate("...", (-494));
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("...", string3);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) 0;
      String string4 = StringUtils.join(floatArray0, 'T');
      assertNotNull(string4);
      assertEquals(1, floatArray0.length);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertEquals("0.0", string4);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      
      String string5 = StringUtils.replaceChars("Locale must not be null", " ", "<Bw}r>y6xwnG!A< C){4iAR1?6R");
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertEquals("Locale<must<not<be<null", string5);
      
      String string6 = "5";
      String string7 = StringUtils.toRootUpperCase("p.wX%.1j-Ww,/<2cb");
      assertNotNull(string7);
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string4));
      assertEquals("P.WX%.1J-WW,/<2CB", string7);
      
      String string8 = StringUtils.abbreviate("1oqg0z\"QIEx}~Gid]Y", 19);
      assertNotNull(string8);
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string7));
      assertEquals("1oqg0z\"QIEx}~Gid]Y", string8);
      
      boolean boolean1 = StringUtils.equals((CharSequence) "Locale must not be null", (CharSequence) ".%,KjXgwysC>,");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      try { 
        StringUtils.getBytes("Locale<must<not<be<null", "5");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(UnsupportedEncodingException e) {
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      String string0 = StringUtils.wrap("W-:$-TX6hO ", "[$z");
      assertNotNull(string0);
      assertEquals("[$zW-:$-TX6hO [$z", string0);
      
      String string1 = StringUtils.remove(">H=Inull/empty items/swe>H=I(,wP(MST)d)/swe>H=I(,wP(MST)d)", '%');
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals(">H=Inull/empty items/swe>H=I(,wP(MST)d)/swe>H=I(,wP(MST)d)", string1);
      
      String string2 = StringUtils.stripToNull(">H=Inull/empty items/swe>H=I(,wP(MST)d)/swe>H=I(,wP(MST)d)");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertEquals(">H=Inull/empty items/swe>H=I(,wP(MST)d)/swe>H=I(,wP(MST)d)", string2);
      
      boolean boolean0 = StringUtils.containsIgnoreCase(">H=Inull/empty items/swe>H=I(,wP(MST)d)/swe>H=I(,wP(MST)d)", "[$zW-:$-TX6hO [$z");
      assertFalse(boolean0);
      
      Locale locale0 = Locale.ROOT;
      assertNotNull(locale0);
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.toString());
      
      Locale locale1 = Locale.JAPAN;
      assertNotNull(locale1);
      assertNotSame(locale1, locale0);
      assertEquals("ja", locale1.getLanguage());
      assertEquals("JP", locale1.getCountry());
      assertEquals("JPN", locale1.getISO3Country());
      assertEquals("", locale1.getVariant());
      assertEquals("jpn", locale1.getISO3Language());
      assertEquals("ja_JP", locale1.toString());
      assertFalse(locale1.equals((Object)locale0));
      
      String string3 = locale1.getDisplayLanguage();
      assertNotNull(string3);
      assertNotSame(locale1, locale0);
      assertEquals("ja", locale1.getLanguage());
      assertEquals("JP", locale1.getCountry());
      assertEquals("JPN", locale1.getISO3Country());
      assertEquals("", locale1.getVariant());
      assertEquals("jpn", locale1.getISO3Language());
      assertEquals("ja_JP", locale1.toString());
      assertFalse(locale1.equals((Object)locale0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals("Japanese", string3);
      
      String string4 = StringUtils.join((Iterator<?>) null, ">H=Inull/empty items/swe>H=I(,wP(MST)d)/swe>H=I(,wP(MST)d)");
      assertNull(string4);
      
      Locale locale2 = Locale.ENGLISH;
      assertNotNull(locale2);
      assertNotSame(locale2, locale0);
      assertNotSame(locale2, locale1);
      assertEquals("en", locale2.getLanguage());
      assertEquals("", locale2.getISO3Country());
      assertEquals("eng", locale2.getISO3Language());
      assertEquals("en", locale2.toString());
      assertEquals("", locale2.getCountry());
      assertEquals("", locale2.getVariant());
      assertFalse(locale2.equals((Object)locale0));
      assertFalse(locale2.equals((Object)locale1));
      
      int int0 = StringUtils.getFuzzyDistance(">H=Inull/empty items/swe>H=I(,wP(MST)d)/swe>H=I(,wP(MST)d)", "[$z", locale2);
      assertNotSame(locale2, locale0);
      assertNotSame(locale2, locale1);
      assertEquals("en", locale2.getLanguage());
      assertEquals("", locale2.getISO3Country());
      assertEquals("eng", locale2.getISO3Language());
      assertEquals("en", locale2.toString());
      assertEquals("", locale2.getCountry());
      assertEquals("", locale2.getVariant());
      assertFalse(locale2.equals((Object)locale0));
      assertFalse(locale2.equals((Object)locale1));
      assertEquals(0, int0);
      
      String string5 = StringUtils.replaceAll(".M,KjXgwsMU,", ">H=Inull/empty items/swe>H=I(,wP(MST)d)/swe>H=I(,wP(MST)d)", ".M,KjXgwsMU,");
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertEquals(".M,KjXgwsMU,", string5);
      
      int int1 = StringUtils.indexOf((CharSequence) "[$zW-:$-TX6hO [$z", (CharSequence) ".M,KjXgwsMU,", 0);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      String string6 = StringUtils.trimToEmpty("z +C2g-C[|HrU((2dk");
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string3));
      assertEquals("z +C2g-C[|HrU((2dk", string6);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) ".M,KjXgwsMU,";
      String string7 = locale1.getDisplayLanguage(locale0);
      assertNotNull(string7);
      assertNotSame(locale0, locale2);
      assertNotSame(locale0, locale1);
      assertNotSame(locale1, locale0);
      assertNotSame(locale1, locale2);
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.toString());
      assertEquals("ja", locale1.getLanguage());
      assertEquals("JP", locale1.getCountry());
      assertEquals("JPN", locale1.getISO3Country());
      assertEquals("", locale1.getVariant());
      assertEquals("jpn", locale1.getISO3Language());
      assertEquals("ja_JP", locale1.toString());
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string1));
      assertFalse(locale0.equals((Object)locale2));
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(locale1.equals((Object)locale0));
      assertFalse(locale1.equals((Object)locale2));
      assertEquals("Japanese", string7);
      
      objectArray0[1] = (Object) ".M,KjXgwsMU,";
      objectArray0[2] = (Object) "Japanese";
      objectArray0[3] = (Object) ">H=Inull/empty items/swe>H=I(,wP(MST)d)/swe>H=I(,wP(MST)d)";
      String string8 = StringUtils.join(objectArray0, "z +C2g-C[|HrU((2dk", 46, 1);
      assertNotNull(string8);
      assertEquals(4, objectArray0.length);
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string1));
      assertEquals("", string8);
      
      String[] stringArray0 = StringUtils.splitByCharacterType("z +C2g-C[|HrU((2dk");
      assertNotNull(stringArray0);
      assertEquals(16, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByCharacterType("vW]");
      assertNotNull(stringArray0);
      assertEquals(3, stringArray0.length);
      
      StringUtils stringUtils0 = new StringUtils();
      assertNotNull(stringUtils0);
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      
      long[] longArray0 = new long[4];
      longArray0[0] = (long) 'z';
      longArray0[1] = (-571L);
      longArray0[2] = (long) 'z';
      int int0 = StringUtils.indexOfAny((CharSequence) " ", " ");
      assertEquals(0, int0);
      
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "\r", "Threshold must not be negative");
      assertFalse(boolean0);
      
      String string0 = StringUtils.wrapIfMissing("p{InCombiningDiacriticalMarks}+", 'D');
      assertNotNull(string0);
      assertEquals("Dp{InCombiningDiacriticalMarks}+D", string0);
      
      String string1 = StringUtils.unwrap((String) null, "z?2i~ c}<c/`sb");
      assertNull(string1);
      
      boolean boolean1 = StringUtils.startsWith((CharSequence) null, (CharSequence) null);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String string2 = StringUtils.stripStart("vW]", "|w-E3i@A!/J;*;=/.J");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertEquals("vW]", string2);
      
      int int1 = 10;
      // Undeclared exception!
      try { 
        StringUtils.abbreviate("A9Tq`$@;qX+x ", (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum abbreviation width is 4
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = (int) '7';
      intArray0[1] = (int) '7';
      String string0 = StringUtils.center("offset cannot be negative", 321, "offset cannot be negative");
      assertNotNull(string0);
      assertEquals("offset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negatioffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negati", string0);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "WMcn?vWT+W", (CharSequence) "offset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negatioffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negati");
      assertEquals(318, int0);
      
      boolean boolean0 = StringUtils.containsNone((CharSequence) "offset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negatioffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negati", (char[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      String string0 = StringUtils.trim("%DhCH;Zr=g8l6-");
      assertNotNull(string0);
      assertEquals("%DhCH;Zr=g8l6-", string0);
      
      String string1 = StringUtils.unwrap("O$Ir>j_JOFP!GA", 'M');
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("O$Ir>j_JOFP!GA", string1);
      
      String string2 = StringUtils.center(" is not in the range '0' - '9'", (-350), '{');
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals(" is not in the range '0' - '9'", string2);
      
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "O$Ir>j_JOFP!GA", (CharSequence) " is not in the range '0' - '9'");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-73);
      byteArray0[1] = (byte)106;
      byteArray0[2] = (byte)17;
      String string0 = StringUtils.wrapIfMissing("Wd|}51/]/&`bsA", '\'');
      assertNotNull(string0);
      assertEquals("'Wd|}51/]/&`bsA'", string0);
      
      String string1 = StringUtils.unwrap("'Wd|}51/]/&`bsA'", 'w');
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("'Wd|}51/]/&`bsA'", string1);
      
      String string2 = StringUtils.center("'Wd|}51/]/&`bsA'", 19, 'w');
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("w'Wd|}51/]/&`bsA'w", string2);
      
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "'Wd|}51/]/&`bsA'", (CharSequence) "pKBZnl");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      String string0 = StringUtils.left("5|5pGW#urA~r?~3", (-494));
      assertNotNull(string0);
      assertEquals("", string0);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) 'u';
      String string1 = StringUtils.join(floatArray0, 'q');
      assertNotNull(string1);
      assertEquals(1, floatArray0.length);
      assertFalse(string1.equals((Object)string0));
      assertEquals("117.0", string1);
      assertArrayEquals(new float[] {117.0F}, floatArray0, 0.01F);
      
      String string2 = StringUtils.stripEnd("", "5|5pGW#urA~r?~3");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertEquals("", string2);
      
      String string3 = StringUtils.trim("117.0");
      assertNotNull(string3);
      assertTrue(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals("117.0", string3);
      
      String string4 = StringUtils.mid("OxAAgc6#y%!", (-2710), 2);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertEquals("Ox", string4);
      
      String string5 = StringUtils.unwrap((String) null, 'q');
      assertNull(string5);
      
      String string6 = StringUtils.center("e<wzLWUhu", (int) 'q', 'u');
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string1));
      assertEquals("uuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuue<wzLWUhuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuu", string6);
      
      String string7 = StringUtils.removeAll("Ul+_|gvI[rk#(.S", "117.0");
      assertNotNull(string7);
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string1));
      assertEquals("Ul+_|gvI[rk#(.S", string7);
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      String string0 = StringUtils.remove("W~p/]:FDw`qEP(g{Xm", "W~p/]:FDw`qEP(g{Xm");
      assertNotNull(string0);
      assertEquals("", string0);
      
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "");
      assertNotNull(charBuffer0);
      assertEquals(0, charBuffer0.length());
      assertFalse(charBuffer0.isDirect());
      assertEquals("", charBuffer0.toString());
      assertEquals(0, charBuffer0.remaining());
      assertEquals(0, charBuffer0.position());
      assertTrue(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.limit());
      assertFalse(charBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.capacity());
      assertFalse(charBuffer0.hasArray());
      
      CharBuffer charBuffer1 = charBuffer0.slice();
      assertNotNull(charBuffer1);
      assertNotSame(charBuffer0, charBuffer1);
      assertNotSame(charBuffer1, charBuffer0);
      assertEquals(0, charBuffer0.length());
      assertFalse(charBuffer0.isDirect());
      assertEquals("", charBuffer0.toString());
      assertEquals(0, charBuffer0.remaining());
      assertEquals(0, charBuffer0.position());
      assertTrue(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.limit());
      assertFalse(charBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.capacity());
      assertFalse(charBuffer0.hasArray());
      assertEquals(0, charBuffer1.length());
      assertFalse(charBuffer1.isDirect());
      assertEquals(0, charBuffer1.remaining());
      assertEquals(0, charBuffer1.limit());
      assertFalse(charBuffer1.hasRemaining());
      assertTrue(charBuffer1.isReadOnly());
      assertEquals(0, charBuffer1.position());
      assertFalse(charBuffer1.hasArray());
      assertEquals(0, charBuffer1.capacity());
      assertEquals("", charBuffer1.toString());
      assertTrue(charBuffer1.equals((Object)charBuffer0));
      
      CharSequence[] charSequenceArray0 = new CharSequence[7];
      charSequenceArray0[0] = (CharSequence) charBuffer1;
      charSequenceArray0[1] = (CharSequence) "";
      String string1 = StringUtils.removeFirst("", "");
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      
      charSequenceArray0[2] = (CharSequence) "";
      charSequenceArray0[5] = (CharSequence) charBuffer1;
      boolean boolean0 = StringUtils.isAllBlank(charSequenceArray0);
      assertEquals(7, charSequenceArray0.length);
      assertTrue(boolean0);
      
      String string2 = StringUtils.replaceOnceIgnoreCase("ouu))09wx;y5{S%wsK", "", ",OgH#.>iD>Z1y");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("ouu))09wx;y5{S%wsK", string2);
      
      String string3 = StringUtils.mid("{_v+&cA<.]R", 2, 122);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals("v+&cA<.]R", string3);
      
      String string4 = StringUtils.unwrap("", 'I');
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string1));
      assertEquals("", string4);
      
      boolean boolean1 = StringUtils.startsWith(charBuffer1, "W~p/]:FDw`qEP(g{Xm");
      assertNotSame(charBuffer0, charBuffer1);
      assertNotSame(charBuffer1, charBuffer0);
      assertEquals(0, charBuffer0.length());
      assertFalse(charBuffer0.isDirect());
      assertEquals("", charBuffer0.toString());
      assertEquals(0, charBuffer0.remaining());
      assertEquals(0, charBuffer0.position());
      assertTrue(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.limit());
      assertFalse(charBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.capacity());
      assertFalse(charBuffer0.hasArray());
      assertEquals(0, charBuffer1.length());
      assertFalse(charBuffer1.isDirect());
      assertEquals(0, charBuffer1.remaining());
      assertEquals(0, charBuffer1.limit());
      assertFalse(charBuffer1.hasRemaining());
      assertTrue(charBuffer1.isReadOnly());
      assertEquals(0, charBuffer1.position());
      assertFalse(charBuffer1.hasArray());
      assertEquals(0, charBuffer1.capacity());
      assertEquals("", charBuffer1.toString());
      assertTrue(charBuffer0.equals((Object)charBuffer1));
      assertTrue(charBuffer1.equals((Object)charBuffer0));
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string5 = StringUtils.center("", 56, '5');
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertEquals("55555555555555555555555555555555555555555555555555555555", string5);
      
      String[] stringArray0 = StringUtils.split((String) null, "Hq$t[KRu<;>6");
      assertNull(stringArray0);
      
      String string6 = StringUtils.replace((String) null, "J<3/F!?pk(", "");
      assertNull(string6);
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      String string0 = StringUtils.rightPad("null/empty items/swe>H=I(,wP(MST)d)/swe>H=I(,wP(MST)d)>H=I", 32, ".M,KjXgwsMU,=]Un2oPT<");
      assertNotNull(string0);
      assertEquals("null/empty items/swe>H=I(,wP(MST)d)/swe>H=I(,wP(MST)d)>H=I", string0);
      
      String string1 = StringUtils.substringBetween("null/empty items/swe>H=I(,wP(MST)d)/swe>H=I(,wP(MST)d)>H=I", "null/empty items/swe>H=I(,wP(MST)d)/swe>H=I(,wP(MST)d)>H=I");
      assertNull(string1);
      
      String string2 = StringUtils.defaultString((String) null);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertEquals("", string2);
      
      String string3 = StringUtils.wrap("", 'D');
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string2));
      assertEquals("", string3);
      
      String string4 = StringUtils.chomp("");
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string3));
      assertEquals("", string4);
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'D';
      charArray0[1] = 'D';
      boolean boolean0 = StringUtils.containsAny((CharSequence) "", charArray0);
      assertEquals(2, charArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new char[] {'D', 'D'}, charArray0);
      
      String[] stringArray0 = StringUtils.split((String) null, "org.apache.commons.lang3.CharUtils", 197);
      assertNull(stringArray0);
      
      try { 
        StringUtils.getBytes("M{5p6,AjdGXr(", "DI,@E8dGR2XFZko$J");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(UnsupportedEncodingException e) {
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      String string0 = StringUtils.join((boolean[]) null, '\"', 42, 13);
      assertNull(string0);
      
      String string1 = StringUtils.defaultString((String) null, (String) null);
      assertNull(string1);
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = (int) '7';
      intArray0[1] = (int) '7';
      intArray0[2] = (int) '7';
      intArray0[3] = (int) '7';
      intArray0[4] = (int) '7';
      String string0 = StringUtils.replacePattern("jWU}p|M=YT9", "Cannot store ", "Cannot store ");
      assertNotNull(string0);
      assertEquals("jWU}p|M=YT9", string0);
      
      String[] stringArray0 = new String[8];
      stringArray0[0] = "jWU}p|M=YT9";
      stringArray0[1] = "jWU}p|M=YT9";
      stringArray0[2] = "Cannot store ";
      stringArray0[3] = " ";
      stringArray0[4] = "Cannot store ";
      stringArray0[5] = " ";
      stringArray0[6] = "/h81Uu";
      stringArray0[7] = "Cannot store ";
      String string1 = StringUtils.getCommonPrefix(stringArray0);
      assertNotNull(string1);
      assertEquals(8, stringArray0.length);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      
      String string2 = StringUtils.stripStart("z", "9i!A5-v ");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("z", string2);
      
      String string3 = StringUtils.repeat(" ", 948);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals("                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    ", string3);
      
      boolean boolean0 = StringUtils.isAllLowerCase("z");
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)3;
      String string4 = StringUtils.join(byteArray0, '7', 55, 55);
      assertNotNull(string4);
      assertEquals(1, byteArray0.length);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertEquals("", string4);
      assertArrayEquals(new byte[] {(byte)3}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "<)v(vKh";
      stringArray0[1] = "";
      String string0 = StringUtils.replaceIgnoreCase("Threshold must not be negative", "Locale must not be null", "", (-3695));
      assertNotNull(string0);
      assertEquals("Threshold must not be negative", string0);
      
      String string1 = StringUtils.center("", (-86));
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      
      String string2 = StringUtils.stripToNull("yQ<hKpPD_>PSCFi#");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("yQ<hKpPD_>PSCFi#", string2);
      
      boolean boolean0 = StringUtils.equalsIgnoreCase("<)v(vKh", "yQ<hKpPD_>PSCFi#");
      assertFalse(boolean0);
      
      String string3 = StringUtils.normalizeSpace(" vs ");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals("vs", string3);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "<)v(vKh", (CharSequence) "vs");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      String string0 = StringUtils.removeFirst("o4R+8,w0_XT", "java.lang.Object@162f0309java.lang.Object@ee1d858java.lang.Object@29d768adjava.lang.Object@195c9e91java.lang.Object@7705e1f8java.lang.Object@162f0309java.lang.Object@ee1d858java.lang.Object@29d768adjava.lang.Object@195c9e91java.lang.Object@7705e1f8");
      assertNotNull(string0);
      assertEquals("o4R+8,w0_XT", string0);
      
      boolean boolean0 = StringUtils.contains((CharSequence) "o4R+8,w0_XT", (CharSequence) "java.lang.Object@162f0309java.lang.Object@ee1d858java.lang.Object@29d768adjava.lang.Object@195c9e91java.lang.Object@7705e1f8java.lang.Object@162f0309java.lang.Object@ee1d858java.lang.Object@29d768adjava.lang.Object@195c9e91java.lang.Object@7705e1f8");
      assertFalse(boolean0);
      
      String string1 = StringUtils.stripEnd(" oGd1^tx%6&[wzIY(", "o4R+8,w0_XT");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals(" oGd1^tx%6&[wzIY(", string1);
      
      int int0 = StringUtils.compareIgnoreCase("t[Vl", " oGd1^tx%6&[wzIY(");
      assertEquals(84, int0);
      
      String string2 = StringUtils.defaultIfEmpty("~w1iL:>`GUh]\"CD", "t[Vl");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("~w1iL:>`GUh]\"CD", string2);
      
      String string3 = StringUtils.substringAfter("Threshold must not be negative", "F`XrhC7G.=;hK\n+$W ");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("", string3);
      
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      String string4 = StringUtils.join(booleanArray0, '0');
      assertNotNull(string4);
      assertEquals(5, booleanArray0.length);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertEquals("false0false0false0false0false", string4);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false}, booleanArray0));
      
      boolean boolean1 = StringUtils.isNotBlank("false0false0false0false0false");
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String string5 = StringUtils.normalizeSpace("F`XrhC7G.=;hK\n+$W ");
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertEquals("F`XrhC7G.=;hK +$W", string5);
      
      String string6 = StringUtils.mid("~w1iL:>`GUh]\"CD", 313, 313);
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string2));
      assertEquals("", string6);
      
      String string7 = StringUtils.unwrap(" oGd1^tx%6&[wzIY(", '4');
      assertNotNull(string7);
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string6));
      assertTrue(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string0));
      assertEquals(" oGd1^tx%6&[wzIY(", string7);
      
      boolean boolean2 = StringUtils.startsWith(" oGd1^tx%6&[wzIY(", "t[Vl");
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      
      String string8 = StringUtils.center("lK]{(J^j32QZ\"[#Sp", (-72), '4');
      assertNotNull(string8);
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string7));
      assertEquals("lK]{(J^j32QZ\"[#Sp", string8);
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      String string0 = StringUtils.left("5|5pGW#urA~r?~3", (-494));
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.leftPad("", (-494));
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      
      boolean boolean0 = StringUtils.isMixedCase("5|5pGW#urA~r?~3");
      assertTrue(boolean0);
      
      String string2 = StringUtils.SPACE;
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals(" ", string2);
      
      int int0 = StringUtils.countMatches((CharSequence) "5|5pGW#urA~r?~3", (CharSequence) " ");
      assertEquals(0, int0);
      
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("");
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      
      String string3 = StringUtils.rotate("...", (-494));
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals("...", string3);
      
      String string4 = StringUtils.center("...", (-2121));
      assertNotNull(string4);
      assertTrue(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertEquals("...", string4);
      
      String string5 = StringUtils.lowerCase("Threshold must not be negative");
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertEquals("threshold must not be negative", string5);
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      charSequenceArray0[0] = (CharSequence) "h!{j5f5T8V}7s;";
      charSequenceArray0[1] = (CharSequence) "h!{j5f5T8V}7s;";
      charSequenceArray0[2] = (CharSequence) "h!{j5f5T8V}7s;";
      String string0 = StringUtils.abbreviateMiddle("h!{j5f5T8V}7s;", "java.lang.Object@52b769b5java.lang.Object@1d3febfajava.lang.Object@4c16c3aejava.lang.Object@4a32f5f1java.lang.Object@23a1c7c3java.lang.Object@52b769b5java.lang.Object@1d3febfajava.lang.Object@4c16c3aejava.lang.Object@4a32f5f1java.lang.Object@23a1c7c3", 15);
      assertNotNull(string0);
      assertEquals("h!{j5f5T8V}7s;", string0);
      
      charSequenceArray0[3] = (CharSequence) "java.lang.Object@52b769b5java.lang.Object@1d3febfajava.lang.Object@4c16c3aejava.lang.Object@4a32f5f1java.lang.Object@23a1c7c3java.lang.Object@52b769b5java.lang.Object@1d3febfajava.lang.Object@4c16c3aejava.lang.Object@4a32f5f1java.lang.Object@23a1c7c3";
      charSequenceArray0[4] = (CharSequence) "h!{j5f5T8V}7s;";
      String string1 = StringUtils.appendIfMissing("h!{j5f5T8V}7s;", "h!{j5f5T8V}7s;", charSequenceArray0);
      assertNotNull(string1);
      assertEquals(5, charSequenceArray0.length);
      assertTrue(string1.equals((Object)string0));
      assertEquals("h!{j5f5T8V}7s;", string1);
      
      int int0 = StringUtils.indexOfDifference(charSequenceArray0[4], (CharSequence) "h!{j5f5T8V}7s;");
      assertEquals(5, charSequenceArray0.length);
      assertEquals((-1), int0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("", "java.lang.Object@52b769b5java.lang.Object@1d3febfajava.lang.Object@4c16c3aejava.lang.Object@4a32f5f1java.lang.Object@23a1c7c3java.lang.Object@52b769b5java.lang.Object@1d3febfajava.lang.Object@4c16c3aejava.lang.Object@4a32f5f1java.lang.Object@23a1c7c3");
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      
      String string2 = StringUtils.repeat(".'am$2&U)u", (-1));
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("", string2);
      
      String string3 = StringUtils.reverseDelimited(".'am$2&U)u", 'N');
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals(".'am$2&U)u", string3);
      
      boolean boolean0 = StringUtils.isAllEmpty(charSequenceArray0);
      assertEquals(5, charSequenceArray0.length);
      assertFalse(boolean0);
      
      String[] stringArray1 = StringUtils.splitByWholeSeparatorPreserveAllTokens("The type must not be null", "", (-1));
      assertNotNull(stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(6, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      String string4 = StringUtils.replaceOnce(".'am$2&U)u", "Cannot store ", "Cannot store ");
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertEquals(".'am$2&U)u", string4);
      
      int int1 = StringUtils.getLevenshteinDistance(charSequenceArray0[4], (CharSequence) ".'am$2&U)u", 17);
      assertEquals(5, charSequenceArray0.length);
      assertFalse(int1 == int0);
      assertEquals(14, int1);
      
      int int2 = StringUtils.length("java.lang.Object@52b769b5java.lang.Object@1d3febfajava.lang.Object@4c16c3aejava.lang.Object@4a32f5f1java.lang.Object@23a1c7c3java.lang.Object@52b769b5java.lang.Object@1d3febfajava.lang.Object@4c16c3aejava.lang.Object@4a32f5f1java.lang.Object@23a1c7c3");
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(250, int2);
      
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      String string5 = StringUtils.getIfEmpty("h!{j5f5T8V}7s;", supplier0);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertTrue(string5.equals((Object)string0));
      assertTrue(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertEquals("h!{j5f5T8V}7s;", string5);
      
      int int3 = StringUtils.compare("h!{j5f5T8V}7s;", "h!{j5f5T8V}7s;");
      assertFalse(int3 == int1);
      assertFalse(int3 == int2);
      assertFalse(int3 == int0);
      assertEquals(0, int3);
      
      boolean boolean1 = StringUtils.isEmpty(charSequenceArray0[3]);
      assertEquals(5, charSequenceArray0.length);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string6 = StringUtils.trim("h!{j5f5T8V}7s;");
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string4));
      assertTrue(string6.equals((Object)string1));
      assertTrue(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string2));
      assertTrue(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string3));
      assertEquals("h!{j5f5T8V}7s;", string6);
      
      String string7 = StringUtils.chop("The type must not be null");
      assertNotNull(string7);
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string3));
      assertEquals("The type must not be nul", string7);
      
      String string8 = StringUtils.substringAfter("Zu*4-n!o`!mH6S_v", 0);
      assertNotNull(string8);
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string1));
      assertEquals("", string8);
      
      boolean boolean2 = StringUtils.containsAny((CharSequence) "", (char[]) null);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlphanumericSpace((CharSequence) null);
      assertFalse(boolean0);
      
      String string0 = StringUtils.uncapitalize("*QjPpOCvC>Y0BWtp.");
      assertNotNull(string0);
      assertEquals("*QjPpOCvC>Y0BWtp.", string0);
      
      boolean boolean1 = StringUtils.isAlphaSpace("*QjPpOCvC>Y0BWtp.");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string1 = StringUtils.overlay("*QjPpOCvC>Y0BWtp.", (String) null, (-1617), 1886);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      
      String string2 = StringUtils.substringAfterLast("KeKeV$", "KeKeV$");
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("", string2);
      
      String string3 = StringUtils.defaultIfBlank("Aborting to protect against StackOverflowError - output of one loop is the input of another", "KeKeV$");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals("Aborting to protect against StackOverflowError - output of one loop is the input of another", string3);
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      String string0 = StringUtils.stripAccents("wDPtb=E*0D +");
      assertNotNull(string0);
      assertEquals("wDPtb=E*0D +", string0);
      
      String string1 = StringUtils.replaceOnceIgnoreCase(";e|PvY[M,WJ=KeK,MR", "/h81Uu", " vs ");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals(";e|PvY[M,WJ=KeK,MR", string1);
      
      String string2 = StringUtils.replaceChars("=9", 'c', 'a');
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("=9", string2);
      
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("wDPtb=E*0D +");
      assertNotNull(stringArray0);
      assertEquals(11, stringArray0.length);
      
      String string3 = StringUtils.join((boolean[]) null, '|');
      assertNull(string3);
      
      String string4 = StringUtils.reverseDelimited("wDPtb=E*0D +", 'l');
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string0));
      assertEquals("wDPtb=E*0D +", string4);
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      String string0 = StringUtils.stripAccents("wDPtb=E*0D +");
      assertNotNull(string0);
      assertEquals("wDPtb=E*0D +", string0);
      
      String string1 = StringUtils.replaceOnceIgnoreCase(";e|PvY[M,WJ=KeK,MR", "/h81Uu", " vs ");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals(";e|PvY[M,WJ=KeK,MR", string1);
      
      String string2 = StringUtils.replaceChars("=9", 'c', 'a');
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("=9", string2);
      
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("wDPtb=E*0D +");
      assertNotNull(stringArray0);
      assertEquals(11, stringArray0.length);
      
      String string3 = StringUtils.difference("", ":* 5~6sqNSEVx.P$[i");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals(":* 5~6sqNSEVx.P$[i", string3);
      
      String string4 = StringUtils.removeAll(":* 5~6sqNSEVx.P$[i", "BB\"Tr<]B");
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string3));
      assertEquals(":* 5~6sqNSEVx.P$[i", string4);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "wDPtb=E*0D +", (CharSequence) null);
      assertEquals((-1), int0);
      
      String string5 = StringUtils.replaceEachRepeatedly("8yTk;", stringArray0, stringArray0);
      assertNotNull(string5);
      assertEquals(11, stringArray0.length);
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertEquals("8yTk;", string5);
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      String string0 = StringUtils.wrap("", "");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String[] stringArray0 = new String[2];
      String string1 = StringUtils.join((Object[]) stringArray0, "");
      assertNotNull(string1);
      assertEquals(2, stringArray0.length);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      
      String string2 = StringUtils.left((String) null, 101);
      assertNull(string2);
      
      int int0 = StringUtils.indexOfDifference((CharSequence) "", (CharSequence) "");
      assertEquals(1, int0);
      
      boolean boolean0 = StringUtils.isBlank((CharSequence) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      String string0 = StringUtils.join((Iterator<?>) null, "");
      assertNull(string0);
      
      String string1 = StringUtils.substringBeforeLast("The Array must not be null", "");
      assertNotNull(string1);
      assertEquals("The Array must not be null", string1);
      
      HashSet<String> hashSet0 = new HashSet<String>();
      assertNotNull(hashSet0);
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertFalse(hashSet0.contains(string1));
      
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>(hashSet0);
      assertNotNull(linkedHashSet0);
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertFalse(hashSet0.contains(string1));
      assertFalse(linkedHashSet0.contains(string1));
      
      String string2 = StringUtils.rotate("", 4167);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertEquals("", string2);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 'w';
      doubleArray0[1] = (double) 'w';
      doubleArray0[2] = (double) 4167;
      doubleArray0[3] = (double) 4167;
      doubleArray0[4] = (double) 'w';
      doubleArray0[5] = (double) 'w';
      doubleArray0[6] = (double) 'w';
      doubleArray0[7] = (double) 'w';
      String string3 = StringUtils.join(doubleArray0, '5');
      assertNotNull(string3);
      assertEquals(8, doubleArray0.length);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals("119.05119.054167.054167.05119.05119.05119.05119.0", string3);
      assertArrayEquals(new double[] {119.0, 119.0, 4167.0, 4167.0, 119.0, 119.0, 119.0, 119.0}, doubleArray0, 0.01);
      
      String string4 = StringUtils.substringAfterLast("j}d/", "");
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string2));
      assertEquals("", string4);
      
      int[] intArray0 = StringUtils.toCodePoints("");
      assertNotNull(intArray0);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      String string0 = StringUtils.wrapIfMissing("Wd|}51/]/&`bsA", '\'');
      assertNotNull(string0);
      assertEquals("'Wd|}51/]/&`bsA'", string0);
      
      int[] intArray0 = new int[4];
      intArray0[0] = 1003;
      String string1 = StringUtils.unwrap("Wd|}51/]/&`bsA", '[');
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("Wd|}51/]/&`bsA", string1);
      
      char[] charArray0 = new char[3];
      charArray0[0] = '[';
      charArray0[1] = '[';
      charArray0[2] = '[';
      String string2 = StringUtils.join(charArray0, 'w');
      assertNotNull(string2);
      assertEquals(3, charArray0.length);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("[w[w[", string2);
      assertArrayEquals(new char[] {'[', '[', '['}, charArray0);
      
      boolean boolean0 = StringUtils.isAlphaSpace("[w[w[");
      assertFalse(boolean0);
      
      String string3 = StringUtils.stripToNull("org.apache.commons.lang3.exception.CloneFailedException");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals("org.apache.commons.lang3.exception.CloneFailedException", string3);
      
      String string4 = StringUtils.join((float[]) null, '[', (-3275), (-2456));
      assertNull(string4);
      
      int int0 = StringUtils.indexOfDifference((CharSequence) "org.apache.commons.lang3.exception.CloneFailedException", (CharSequence) "[w[w[");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      String[] stringArray0 = new String[5];
      String string0 = StringUtils.remove("u4})Jxf4'MBI&/", 'q');
      assertNotNull(string0);
      assertEquals("u4})Jxf4'MBI&/", string0);
      
      String string1 = StringUtils.substringAfterLast("% \"LhhH6:.e0\"", "u4})Jxf4'MBI&/");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      
      boolean boolean0 = StringUtils.isEmpty("");
      assertTrue(boolean0);
      
      String string2 = StringUtils.deleteWhitespace("', has a ");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("',hasa", string2);
      
      String string3 = StringUtils.overlay("", (String) null, 40, (-3523));
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string1));
      assertEquals("", string3);
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[7];
      String string0 = "5eU0YE[R_G,QDC1929.5278794Y3.0Y1455.30855Y-1.0Y641.500164004Y0.4053030303030303Y0.7";
      String string1 = StringUtils.abbreviate("5eU0YE[R_G,QDC1929.5278794Y3.0Y1455.30855Y-1.0Y641.500164004Y0.4053030303030303Y0.7", (String) null, 1964, 1964);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("5eU0YE[R_G,QDC1929.5278794Y3.0Y1455.30855Y-1.0Y641.500164004Y0.4053030303030303Y0.7", string1);
      
      charSequenceArray0[0] = (CharSequence) "5eU0YE[R_G,QDC1929.5278794Y3.0Y1455.30855Y-1.0Y641.500164004Y0.4053030303030303Y0.7";
      String string2 = StringUtils.stripAccents("5eU0YE[R_G,QDC1929.5278794Y3.0Y1455.30855Y-1.0Y641.500164004Y0.4053030303030303Y0.7");
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertEquals("5eU0YE[R_G,QDC1929.5278794Y3.0Y1455.30855Y-1.0Y641.500164004Y0.4053030303030303Y0.7", string2);
      
      charSequenceArray0[1] = (CharSequence) "5eU0YE[R_G,QDC1929.5278794Y3.0Y1455.30855Y-1.0Y641.500164004Y0.4053030303030303Y0.7";
      String string3 = StringUtils.reverse("Array element ");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals(" tnemele yarrA", string3);
      
      charSequenceArray0[2] = (CharSequence) " tnemele yarrA";
      CharSequence charSequence0 = StringUtils.defaultIfBlank((CharSequence) "5eU0YE[R_G,QDC1929.5278794Y3.0Y1455.30855Y-1.0Y641.500164004Y0.4053030303030303Y0.7", (CharSequence) " tnemele yarrA");
      assertNotNull(charSequence0);
      assertTrue(charSequence0.equals((Object)string1));
      assertFalse(charSequence0.equals((Object)string3));
      assertTrue(charSequence0.equals((Object)string2));
      assertTrue(charSequence0.equals((Object)string0));
      assertEquals("5eU0YE[R_G,QDC1929.5278794Y3.0Y1455.30855Y-1.0Y641.500164004Y0.4053030303030303Y0.7", charSequence0);
      
      charSequenceArray0[3] = (CharSequence) "5eU0YE[R_G,QDC1929.5278794Y3.0Y1455.30855Y-1.0Y641.500164004Y0.4053030303030303Y0.7";
      // Undeclared exception!
      try { 
        StringUtils.replaceAll("Array element ", "5eU0YE[R_G,QDC1929.5278794Y3.0Y1455.30855Y-1.0Y641.500164004Y0.4053030303030303Y0.7", "', has a length less than 2");
        fail("Expecting exception: PatternSyntaxException");
      
      } catch(PatternSyntaxException e) {
         //
         // Illegal character range near index 43
         // 5eU0YE[R_G,QDC1929.5278794Y3.0Y1455.30855Y-1.0Y641.500164004Y0.4053030303030303Y0.7
         //                                            ^
         //
         verifyException("java.util.regex.Pattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      String[] stringArray0 = StringUtils.substringsBetween("The type must not be null", "The type must not be null", "The type must not be null");
      assertNull(stringArray0);
      
      boolean boolean0 = StringUtils.equalsAny("The type must not be null", (CharSequence[]) null);
      assertFalse(boolean0);
      
      String[] stringArray1 = StringUtils.split("The type must not be null");
      assertNotNull(stringArray1);
      assertEquals(6, stringArray1.length);
      
      int int0 = 10;
      boolean boolean1 = StringUtils.contains((CharSequence) "The type must not be null", 10);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string0 = "\\u";
      // Undeclared exception!
      try { 
        StringUtils.replaceAll(string0, string0, "aD");
        fail("Expecting exception: PatternSyntaxException");
      
      } catch(PatternSyntaxException e) {
         //
         // Illegal Unicode escape sequence near index 2
         // \\u
         //
         verifyException("java.util.regex.Pattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)13;
      byteArray0[1] = (byte) (-69);
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte)71;
      byteArray0[4] = (byte) (-27);
      byteArray0[5] = (byte) (-100);
      byteArray0[6] = (byte)119;
      byteArray0[7] = (byte)7;
      String string0 = "org.apache.commons.lang3.ArrayUtils";
      // Undeclared exception!
      try { 
        StringUtils.toString(byteArray0, "org.apache.commons.lang3.ArrayUtils");
        fail("Expecting exception: UnsupportedCharsetException");
      
      } catch(UnsupportedCharsetException e) {
         //
         // org.apache.commons.lang3.ArrayUtils
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      String string0 = StringUtils.substringAfterLast("Search and Replace array lengths don't match: ", (-1104));
      assertNotNull(string0);
      assertEquals("", string0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("", (String) null);
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      
      String string1 = StringUtils.unwrap("{}", "");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("{}", string1);
      
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      String string2 = StringUtils.getIfBlank("}mn)GjCTd1O}bu", supplier0);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("}mn)GjCTd1O}bu", string2);
      
      String string3 = StringUtils.remove("Search and Replace array lengths don't match: ", "org.apache.commons.lang3.StringUtils");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals("Search and Replace array lengths don't match: ", string3);
      
      boolean boolean0 = StringUtils.endsWithAny("Search and Replace array lengths don't match: ", stringArray0);
      assertEquals(0, stringArray0.length);
      assertFalse(boolean0);
      
      String string4 = StringUtils.replaceEach("", stringArray0, stringArray0);
      assertNotNull(string4);
      assertEquals(0, stringArray0.length);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string0));
      assertEquals("", string4);
      
      String string5 = StringUtils.abbreviateMiddle("[JEC !E`+9v8&", "[JEC !E`+9v8&", 4);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertEquals("[JEC !E`+9v8&", string5);
      
      String string6 = StringUtils.toRootUpperCase("Search and Replace array lengths don't match: ");
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string3));
      assertEquals("SEARCH AND REPLACE ARRAY LENGTHS DON'T MATCH: ", string6);
      
      String string7 = StringUtils.joinWith("{}", stringArray0);
      assertNotNull(string7);
      assertEquals(0, stringArray0.length);
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string1));
      assertTrue(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string2));
      assertEquals("", string7);
      
      int int0 = StringUtils.compare("org.apache.commons.lang3.exception.CloneFailedException", "[JEC !E`+9v8&");
      assertEquals(20, int0);
      
      String string8 = StringUtils.remove("e%fb$NX:0\"y+prb)9L", 'C');
      assertNotNull(string8);
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string6));
      assertEquals("e%fb$NX:0\"y+prb)9L", string8);
      
      boolean boolean1 = StringUtils.isAllBlank(stringArray0);
      assertEquals(0, stringArray0.length);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String string9 = StringUtils.substringBefore("}mn)GjCTd1O}bu", (-1104));
      assertNotNull(string9);
      assertFalse(string9.equals((Object)string8));
      assertFalse(string9.equals((Object)string0));
      assertFalse(string9.equals((Object)string4));
      assertFalse(string9.equals((Object)string6));
      assertFalse(string9.equals((Object)string3));
      assertFalse(string9.equals((Object)string5));
      assertFalse(string9.equals((Object)string7));
      assertFalse(string9.equals((Object)string1));
      assertTrue(string9.equals((Object)string2));
      assertEquals("}mn)GjCTd1O}bu", string9);
      
      String string10 = StringUtils.replaceEachRepeatedly("yvb|ER'wM)Sdj", stringArray0, stringArray0);
      assertNotNull(string10);
      assertEquals(0, stringArray0.length);
      assertFalse(string10.equals((Object)string6));
      assertFalse(string10.equals((Object)string0));
      assertFalse(string10.equals((Object)string4));
      assertFalse(string10.equals((Object)string2));
      assertFalse(string10.equals((Object)string3));
      assertFalse(string10.equals((Object)string9));
      assertFalse(string10.equals((Object)string8));
      assertFalse(string10.equals((Object)string5));
      assertFalse(string10.equals((Object)string1));
      assertFalse(string10.equals((Object)string7));
      assertEquals("yvb|ER'wM)Sdj", string10);
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      String string0 = StringUtils.join((Iterator<?>) null, "");
      assertNull(string0);
      
      String string1 = StringUtils.substringBeforeLast("The Array must not be null", "");
      assertNotNull(string1);
      assertEquals("The Array must not be null", string1);
      
      HashSet<String> hashSet0 = new HashSet<String>();
      assertNotNull(hashSet0);
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      assertFalse(hashSet0.contains("The Array must not be null"));
      
      boolean boolean0 = hashSet0.add("The Array must not be null");
      assertEquals(1, hashSet0.size());
      assertFalse(hashSet0.isEmpty());
      assertTrue(boolean0);
      assertTrue(hashSet0.contains("The Array must not be null"));
      assertFalse(hashSet0.contains(""));
      
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>(hashSet0);
      assertNotNull(linkedHashSet0);
      assertEquals(1, hashSet0.size());
      assertFalse(hashSet0.isEmpty());
      assertFalse(linkedHashSet0.isEmpty());
      assertEquals(1, linkedHashSet0.size());
      assertTrue(hashSet0.contains("The Array must not be null"));
      assertFalse(hashSet0.contains(""));
      assertTrue(linkedHashSet0.contains("The Array must not be null"));
      assertFalse(linkedHashSet0.contains(""));
      
      String string2 = StringUtils.join((Iterable<?>) linkedHashSet0, 'w');
      assertNotNull(string2);
      assertEquals(1, hashSet0.size());
      assertFalse(hashSet0.isEmpty());
      assertFalse(linkedHashSet0.isEmpty());
      assertEquals(1, linkedHashSet0.size());
      assertTrue(string2.equals((Object)string1));
      assertEquals("The Array must not be null", string2);
      assertTrue(hashSet0.contains("The Array must not be null"));
      assertFalse(hashSet0.contains(""));
      assertTrue(linkedHashSet0.contains("The Array must not be null"));
      assertFalse(linkedHashSet0.contains(""));
      
      String string3 = StringUtils.rotate("", 4167);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals("", string3);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 'w';
      doubleArray0[1] = (double) 'w';
      doubleArray0[2] = (double) 4167;
      doubleArray0[3] = (double) 4167;
      doubleArray0[4] = (double) 'w';
      doubleArray0[5] = (double) 'w';
      doubleArray0[6] = (double) 'w';
      doubleArray0[7] = (double) 'w';
      String string4 = StringUtils.join(doubleArray0, '5');
      assertNotNull(string4);
      assertEquals(8, doubleArray0.length);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertEquals("119.05119.054167.054167.05119.05119.05119.05119.0", string4);
      assertArrayEquals(new double[] {119.0, 119.0, 4167.0, 4167.0, 119.0, 119.0, 119.0, 119.0}, doubleArray0, 0.01);
      
      String string5 = StringUtils.substringAfterLast("j}d/", "");
      assertNotNull(string5);
      assertTrue(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertEquals("", string5);
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = 'R';
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "r2", charArray0);
      assertEquals(1, charArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new char[] {'R'}, charArray0);
      
      String string0 = StringUtils.defaultIfEmpty("r2", "r2");
      assertNotNull(string0);
      assertEquals("r2", string0);
      
      boolean boolean1 = StringUtils.containsNone((CharSequence) "r2", charArray0);
      assertEquals(1, charArray0.length);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      assertArrayEquals(new char[] {'R'}, charArray0);
      
      String string1 = StringUtils.capitalize("rh.491Yp8=");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("Rh.491Yp8=", string1);
      
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "Rh.491Yp8=", (CharSequence) "Rh.491Yp8=");
      assertEquals((-1), int0);
      
      String string2 = null;
      String string3 = StringUtils.substring((String) null, 79);
      assertNull(string3);
      
      String string4 = "}QB+@JjS^A_j% 2W%";
      String string5 = StringUtils.leftPad("r2", 1499, 'R');
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      
      boolean boolean2 = StringUtils.isAlphaSpace("rh.491Yp8=");
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2);
      
      int int1 = 812;
      int[] intArray0 = new int[1];
      intArray0[0] = Integer.MIN_VALUE;
      // Undeclared exception!
      try { 
        StringUtils.join(intArray0, 'R', (-629), 1105);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -629
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      String string0 = StringUtils.remove("W~p/]:FDw`qEP(g{Xm", "W~p/]:FDw`qEP(g{Xm");
      assertNotNull(string0);
      assertEquals("", string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[7];
      charSequenceArray0[1] = (CharSequence) "";
      String string1 = StringUtils.defaultString("", "MhTwQcx/_PKe*xv\"");
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      
      String string2 = StringUtils.chomp(".M,KjXgwsMU,", "=]Un2oPT<");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals(".M,KjXgwsMU,", string2);
      
      String[] stringArray0 = StringUtils.split(".M,KjXgwsMU,");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      String string3 = StringUtils.substringBeforeLast(".M,KjXgwsMU,", "=]Un2oPT<");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string2));
      assertEquals(".M,KjXgwsMU,", string3);
      
      boolean boolean0 = StringUtils.endsWith((CharSequence) null, "=]Un2oPT<");
      assertFalse(boolean0);
      
      long[] longArray0 = new long[0];
      String string4 = StringUtils.join(longArray0, 'Z');
      assertNotNull(string4);
      assertEquals(0, longArray0.length);
      assertTrue(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertEquals("", string4);
      assertArrayEquals(new long[] {}, longArray0);
      
      boolean boolean1 = StringUtils.isAlphaSpace("");
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      int int0 = StringUtils.compareIgnoreCase((String) null, "Minimum abbreviation width with offset is %d", false);
      assertEquals(1, int0);
      
      Locale locale0 = Locale.CANADA;
      assertNotNull(locale0);
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en_CA", locale0.toString());
      assertEquals("CA", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      
      String string5 = locale0.getDisplayCountry();
      assertNotNull(string5);
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en_CA", locale0.toString());
      assertEquals("CA", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertEquals("Canada", string5);
      
      String[] stringArray1 = Locale.getISOCountries();
      assertNotNull(stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(250, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      String string6 = StringUtils.chomp("vW");
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string4));
      assertEquals("vW", string6);
      
      char[] charArray0 = new char[8];
      charArray0[0] = 'Z';
      charArray0[1] = 'Z';
      charArray0[2] = 'N';
      charArray0[3] = 'Z';
      charArray0[4] = 'Z';
      charArray0[5] = 'Z';
      charArray0[6] = 'b';
      charArray0[7] = 'Z';
      int int1 = StringUtils.indexOfAnyBut((CharSequence) "vW", charArray0);
      assertEquals(8, charArray0.length);
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      assertArrayEquals(new char[] {'Z', 'Z', 'N', 'Z', 'Z', 'Z', 'b', 'Z'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      String[] stringArray0 = StringUtils.split(" vs ", "org.apache.commons.lang3.LocaleUtils", (-494));
      assertNotNull(stringArray0);
      assertEquals(2, stringArray0.length);
      
      String string0 = StringUtils.rightPad(" vs ", (-494), "VT76I%Sr''6AGe(yW\"u");
      assertNotNull(string0);
      assertEquals(" vs ", string0);
      
      String string1 = StringUtils.chop("org.apache.commons.lang3.LocaleUtils");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("org.apache.commons.lang3.LocaleUtil", string1);
      
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains((-494)));
      
      String string2 = StringUtils.abbreviate("VT76I%Sr''6AGe(yW\"u", " vs ", 103);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("VT76I%Sr''6AGe(yW\"u", string2);
      
      String string3 = StringUtils.defaultString("VT76I%Sr''6AGe(yW\"u");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals("VT76I%Sr''6AGe(yW\"u", string3);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) " vs ", (CharSequence) " vs ");
      assertEquals(0, int0);
      
      String string4 = StringUtils.substringBeforeLast("ONU@Sn52(Njua0", "VT76I%Sr''6AGe(yW\"u");
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertEquals("ONU@Sn52(Njua0", string4);
      
      String string5 = StringUtils.substringAfter("VT76I%Sr''6AGe(yW\"u", 321);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertEquals("", string5);
      
      int int1 = StringUtils.getLevenshteinDistance((CharSequence) "", (CharSequence) "VT76I%Sr''6AGe(yW\"u", 321);
      assertFalse(int1 == int0);
      assertEquals(19, int1);
      
      String string6 = StringUtils.wrap("org.apache.commons.lang3.LocaleUtil", "org.apache.commons.lang3.LocaleUtil");
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string4));
      assertEquals("org.apache.commons.lang3.LocaleUtilorg.apache.commons.lang3.LocaleUtilorg.apache.commons.lang3.LocaleUtil", string6);
      
      String string7 = StringUtils.replaceChars("ONU@Sn52(Njua0", 'k', 'k');
      assertNotNull(string7);
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string5));
      assertTrue(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string0));
      assertEquals("ONU@Sn52(Njua0", string7);
      
      boolean boolean0 = StringUtils.containsIgnoreCase(" vs ", "ONU@Sn52(Njua0");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      String string0 = StringUtils.replaceChars("}}", '1', '#');
      assertNotNull(string0);
      assertEquals("}}", string0);
      
      boolean boolean0 = StringUtils.containsAny((CharSequence) "}}", (CharSequence) "}}");
      assertTrue(boolean0);
      
      boolean boolean1 = StringUtils.isWhitespace("}}");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens((String) null, "}}");
      assertNull(stringArray0);
      
      String string1 = StringUtils.substringBeforeLast("}}", "/");
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("}}", string1);
      
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      String string2 = StringUtils.getIfEmpty("8f?D", supplier0);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("8f?D", string2);
      
      String string3 = StringUtils.wrap("8f?D", '#');
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals("#8f?D#", string3);
      
      String string4 = "\\u";
      String string5 = StringUtils.removeStart(string4, "Asrswe==p5@L+jAsrswe==p5@L+jAsrswe==p5@L+jAsrswe==p5@L+j");
      assertNotNull(string5);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertEquals("\\u", string5);
      
      String string6 = StringUtils.unwrap("}}", '#');
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string2));
      assertTrue(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string4));
      assertTrue(string6.equals((Object)string0));
      assertEquals("}}", string6);
      
      String string7 = StringUtils.repeat('1', (-953));
      assertNotNull(string7);
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string3));
      assertEquals("", string7);
      
      int int0 = StringUtils.indexOf((CharSequence) "", 64);
      assertEquals((-1), int0);
      
      String string8 = StringUtils.right("VnKC9||:IA1xQ[", (-1));
      assertNotNull(string8);
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string1));
      assertEquals("", string8);
      
      String string9 = StringUtils.prependIfMissing(string5, "/", (CharSequence[]) null);
      assertNotNull(string9);
      assertFalse(string4.equals((Object)string8));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string7));
      assertFalse(string4.equals((Object)string6));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string8));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string6));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string7));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string9.equals((Object)string4));
      assertFalse(string9.equals((Object)string1));
      assertFalse(string9.equals((Object)string5));
      assertFalse(string9.equals((Object)string8));
      assertFalse(string9.equals((Object)string3));
      assertFalse(string9.equals((Object)string0));
      assertFalse(string9.equals((Object)string2));
      assertFalse(string9.equals((Object)string7));
      assertFalse(string9.equals((Object)string6));
      assertEquals("/\\u", string9);
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      String string0 = StringUtils.center("xxUjava.lang.Object@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.Object@50d3e7ejava.lang.Object@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.Object@50d3e7ejava.lang.Object@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.Object@50d3e7ejava.lang.Object@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.Object@50d3e7e", 16);
      assertNotNull(string0);
      
      String string1 = StringUtils.center("xxUjava.lang.Object@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.Object@50d3e7ejava.lang.Object@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.Object@50d3e7ejava.lang.Object@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.Object@50d3e7ejava.lang.Object@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.Object@50d3e7e", 16, "xxUjava.lang.Object@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.Object@50d3e7ejava.lang.Object@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.Object@50d3e7ejava.lang.Object@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.Object@50d3e7ejava.lang.Object@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.Object@50d3e7e");
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      boolean boolean0 = StringUtils.equalsAny("xxUjava.lang.Object@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.Object@50d3e7ejava.lang.Object@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.Object@50d3e7ejava.lang.Object@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.Object@50d3e7ejava.lang.Object@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.Object@50d3e7e", charSequenceArray0);
      assertEquals(0, charSequenceArray0.length);
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isNumeric("xxUjava.lang.Object@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.Object@50d3e7ejava.lang.Object@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.Object@50d3e7ejava.lang.Object@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.Object@50d3e7ejava.lang.Object@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.Object@50d3e7e");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = StringUtils.containsOnly((CharSequence) "xxUjava.lang.Object@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.Object@50d3e7ejava.lang.Object@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.Object@50d3e7ejava.lang.Object@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.Object@50d3e7ejava.lang.Object@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.Object@50d3e7e", (String) null);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      
      String string2 = StringUtils.wrapIfMissing(" vs ", '&');
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("& vs &", string2);
      
      boolean boolean3 = StringUtils.containsOnly((CharSequence) "& vs &", "k72$#Vn");
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3);
      
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("ch");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      String string3 = StringUtils.trim("");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals("", string3);
      
      int int0 = StringUtils.indexOf((CharSequence) "", (CharSequence) "");
      assertEquals(0, int0);
      
      int int1 = StringUtils.getLevenshteinDistance((CharSequence) "xxUjava.lang.Object@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.Object@50d3e7ejava.lang.Object@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.Object@50d3e7ejava.lang.Object@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.Object@50d3e7ejava.lang.Object@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.Object@50d3e7e", (CharSequence) "");
      assertFalse(int1 == int0);
      assertEquals(499, int1);
      
      int int2 = StringUtils.indexOfDifference((CharSequence) "& vs &", (CharSequence) ":r&jz=?3IY*g7Do?");
      assertFalse(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals(0, int2);
      
      boolean boolean4 = StringUtils.contains((CharSequence) "", 499);
      assertTrue(boolean4 == boolean1);
      assertTrue(boolean4 == boolean0);
      assertTrue(boolean4 == boolean3);
      assertTrue(boolean4 == boolean2);
      assertFalse(boolean4);
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      String string0 = StringUtils.remove("#r", 'y');
      assertNotNull(string0);
      assertEquals("#r", string0);
      
      int int0 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      boolean boolean0 = StringUtils.equalsAnyIgnoreCase("#r", charSequenceArray0);
      assertEquals(0, charSequenceArray0.length);
      assertFalse(boolean0);
      
      String string1 = StringUtils.abbreviate("Cannot store ", 28, 12);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("Cannot st...", string1);
      
      String string2 = StringUtils.stripToEmpty("Cannot store ");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("Cannot store", string2);
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      String string0 = StringUtils.substringAfterLast("W~p/]:FDw`qEP(g{Xm", (-1104));
      assertNotNull(string0);
      assertEquals("", string0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("", (String) null);
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      
      String string1 = StringUtils.unwrap("{}", "");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("{}", string1);
      
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      String string2 = StringUtils.getIfBlank("}mn)GjCTd1O}bu", supplier0);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("}mn)GjCTd1O}bu", string2);
      
      String string3 = StringUtils.remove("W~p/]:FDw`qEP(g{Xm", "org.apache.commons.lang3.StringUtils");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals("W~p/]:FDw`qEP(g{Xm", string3);
      
      boolean boolean0 = StringUtils.endsWithAny("W~p/]:FDw`qEP(g{Xm", stringArray0);
      assertEquals(0, stringArray0.length);
      assertFalse(boolean0);
      
      String string4 = StringUtils.replaceEach("", stringArray0, stringArray0);
      assertNotNull(string4);
      assertEquals(0, stringArray0.length);
      assertTrue(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertEquals("", string4);
      
      String string5 = StringUtils.abbreviateMiddle("[JES !E`+9v8&", "[JES !E`+9v8&", 4);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertEquals("[JES !E`+9v8&", string5);
      
      String[] stringArray1 = StringUtils.substringsBetween("UlR=\"s0>.9c_L", "[JES !E`+9v8&", "}mn)GjCTd1O}bu");
      assertNull(stringArray1);
      
      int int0 = StringUtils.indexOf((CharSequence) "{}", (-1104), 4);
      assertEquals((-1), int0);
      
      boolean boolean1 = StringUtils.isAnyBlank((CharSequence[]) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      char[] charArray0 = new char[3];
      charArray0[0] = 'd';
      charArray0[1] = '^';
      charArray0[2] = '^';
      String string6 = StringUtils.join(charArray0, 'F');
      assertNotNull(string6);
      assertEquals(3, charArray0.length);
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string0));
      assertEquals("dF^F^", string6);
      assertArrayEquals(new char[] {'d', '^', '^'}, charArray0);
      
      boolean boolean2 = StringUtils.isAlphaSpace("{}");
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      boolean boolean3 = StringUtils.equalsIgnoreCase("W~p/]:FDw`qEP(g{Xm", "");
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3);
      
      String string7 = StringUtils.substringBetween("Array and element cannot both be null", "");
      assertNotNull(string7);
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string1));
      assertTrue(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string2));
      assertTrue(string7.equals((Object)string4));
      assertEquals("", string7);
      
      boolean boolean4 = StringUtils.containsOnly((CharSequence) "Array and element cannot both be null", charArray0);
      assertEquals(3, charArray0.length);
      assertTrue(boolean4 == boolean3);
      assertTrue(boolean4 == boolean2);
      assertTrue(boolean4 == boolean1);
      assertTrue(boolean4 == boolean0);
      assertFalse(boolean4);
      assertArrayEquals(new char[] {'d', '^', '^'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) 'u';
      String string0 = StringUtils.defaultIfEmpty("`", (String) null);
      assertNotNull(string0);
      assertEquals("`", string0);
      
      String string1 = StringUtils.chomp("Asrswe==p5ZL+jAsrswe==p5@L+jAsrswe==p5@L+jAsrswe==p5@L+j");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("Asrswe==p5ZL+jAsrswe==p5@L+jAsrswe==p5@L+jAsrswe==p5@L+j", string1);
      
      String string2 = StringUtils.left((String) null, (-494));
      assertNull(string2);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("1", 'z');
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      StringUtils stringUtils0 = new StringUtils();
      assertNotNull(stringUtils0);
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      
      long[] longArray0 = new long[2];
      longArray0[0] = 40L;
      longArray0[1] = (long) (-1);
      String string3 = StringUtils.join(longArray0, 'u');
      assertNotNull(string3);
      assertEquals(2, longArray0.length);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("40u-1", string3);
      assertArrayEquals(new long[] {40L, (-1L)}, longArray0);
      
      String[] stringArray1 = StringUtils.splitPreserveAllTokens("5|5pGW#urA~r?~3", "c^P@NHM", 32);
      assertNotNull(stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(1, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      String[] stringArray2 = StringUtils.splitPreserveAllTokens("e0_KF_", "e0_KF_");
      assertNotNull(stringArray2);
      assertNotSame(stringArray2, stringArray0);
      assertNotSame(stringArray2, stringArray1);
      assertEquals(7, stringArray2.length);
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertFalse(stringArray2.equals((Object)stringArray1));
      
      String string4 = StringUtils.normalizeSpace("nFU)@y~JLh");
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertEquals("nFU)@y~JLh", string4);
      
      boolean boolean0 = StringUtils.isNoneBlank(stringArray0);
      assertNotSame(stringArray0, stringArray2);
      assertNotSame(stringArray0, stringArray1);
      assertEquals(1, stringArray0.length);
      assertFalse(stringArray0.equals((Object)stringArray2));
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertTrue(boolean0);
      
      String string5 = StringUtils.capitalize("&}NXXQwbP=%E{rlmZ");
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertEquals("&}NXXQwbP=%E{rlmZ", string5);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "`", (CharSequence) "nFU)@y~JLh");
      assertEquals((-1), int0);
      
      double double0 = StringUtils.getJaroWinklerDistance("\n", "nFU)@y~JLh");
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      String string0 = StringUtils.capitalize("Index: ");
      assertNotNull(string0);
      assertEquals("Index: ", string0);
      
      String string1 = StringUtils.substringBefore("", "");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      
      String string2 = StringUtils.upperCase("");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertEquals("", string2);
      
      int int0 = StringUtils.indexOf((CharSequence) "", (CharSequence) "Index: ", 29);
      assertEquals((-1), int0);
      
      String string3 = StringUtils.removePattern("", "...");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string2));
      assertEquals("", string3);
      
      boolean boolean0 = StringUtils.isAlphaSpace(", '");
      assertFalse(boolean0);
      
      String string4 = StringUtils.substringBetween("Object varargs must not be null", "...");
      assertNull(string4);
      
      char[] charArray0 = new char[0];
      String string5 = StringUtils.join(charArray0, 'F');
      assertNotNull(string5);
      assertEquals(0, charArray0.length);
      assertTrue(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertTrue(string5.equals((Object)string1));
      assertTrue(string5.equals((Object)string2));
      assertEquals("", string5);
      assertArrayEquals(new char[] {}, charArray0);
      
      boolean boolean1 = StringUtils.isAlphaSpace("Index: ");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      String string0 = StringUtils.remove("W~p/]:FDw`qEP(g{Xm", "W~p/]:FDw`qEP(g{Xm");
      assertNotNull(string0);
      assertEquals("", string0);
      
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "");
      assertNotNull(charBuffer0);
      assertTrue(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.limit());
      assertEquals(0, charBuffer0.remaining());
      assertEquals("", charBuffer0.toString());
      assertFalse(charBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.capacity());
      assertEquals(0, charBuffer0.length());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.isDirect());
      assertFalse(charBuffer0.hasArray());
      
      String string1 = StringUtils.upperCase("");
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      
      int int0 = StringUtils.indexOf((CharSequence) charBuffer0, (CharSequence) "W~p/]:FDw`qEP(g{Xm", 160);
      assertTrue(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.limit());
      assertEquals(0, charBuffer0.remaining());
      assertEquals("", charBuffer0.toString());
      assertFalse(charBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.capacity());
      assertEquals(0, charBuffer0.length());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.isDirect());
      assertFalse(charBuffer0.hasArray());
      assertEquals((-1), int0);
      
      String string2 = StringUtils.removePattern("...", ", '");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("...", string2);
      
      boolean boolean0 = StringUtils.isAlphaSpace("W~p/]:FDw`qEP(g{Xm");
      assertFalse(boolean0);
      
      String string3 = StringUtils.substringBetween("Supplied value must be a valid byte literal between -32768 and 32767: [", (String) null);
      assertNull(string3);
      
      boolean boolean1 = StringUtils.isAlphanumeric(charBuffer0);
      assertTrue(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.limit());
      assertEquals(0, charBuffer0.remaining());
      assertEquals("", charBuffer0.toString());
      assertFalse(charBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.capacity());
      assertEquals(0, charBuffer0.length());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.isDirect());
      assertFalse(charBuffer0.hasArray());
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string4 = StringUtils.replace("Object varargs must not be null", "", ", '");
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertEquals("Object varargs must not be null", string4);
      
      boolean boolean2 = StringUtils.isAlphanumericSpace("...");
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      Locale locale0 = Locale.CANADA_FRENCH;
      assertNotNull(locale0);
      assertEquals("fr", locale0.getLanguage());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("fr_CA", locale0.toString());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("CA", locale0.getCountry());
      
      String string5 = locale0.getDisplayScript();
      assertNotNull(string5);
      assertEquals("fr", locale0.getLanguage());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("fr_CA", locale0.toString());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("CA", locale0.getCountry());
      assertTrue(string5.equals((Object)string1));
      assertTrue(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertEquals("", string5);
      
      String string6 = locale0.getDisplayVariant();
      assertNotNull(string6);
      assertEquals("fr", locale0.getLanguage());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("fr_CA", locale0.toString());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("CA", locale0.getCountry());
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string4));
      assertTrue(string6.equals((Object)string0));
      assertTrue(string6.equals((Object)string1));
      assertEquals("", string6);
      
      String string7 = StringUtils.upperCase((String) null, locale0);
      assertNull(string7);
      assertEquals("fr", locale0.getLanguage());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("fr_CA", locale0.toString());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("CA", locale0.getCountry());
      
      int int1 = StringUtils.countMatches((CharSequence) "", (CharSequence) "");
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      boolean boolean3 = StringUtils.equalsIgnoreCase("4] WVA2U%Qi_Hs", "");
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) "";
      objectArray0[2] = (Object) "...";
      String string8 = StringUtils.join(objectArray0, 'O');
      assertNotNull(string8);
      assertEquals(3, objectArray0.length);
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string5));
      assertEquals("OO...", string8);
      
      boolean boolean4 = StringUtils.containsOnly((CharSequence) "...", "");
      assertTrue(boolean4 == boolean3);
      assertTrue(boolean4 == boolean2);
      assertTrue(boolean4 == boolean0);
      assertTrue(boolean4 == boolean1);
      assertFalse(boolean4);
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      String string0 = StringUtils.swapCase("/swe]");
      assertNotNull(string0);
      assertEquals("/SWE]", string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      charSequenceArray0[0] = (CharSequence) "/SWE]";
      charSequenceArray0[1] = (CharSequence) "/SWE]";
      charSequenceArray0[2] = (CharSequence) "/swe]";
      charSequenceArray0[2] = (CharSequence) "/SWE]";
      int int0 = StringUtils.indexOfAny((CharSequence) "/SWE]", charSequenceArray0);
      assertEquals(4, charSequenceArray0.length);
      assertEquals(0, int0);
      
      Locale locale0 = Locale.US;
      assertNotNull(locale0);
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("US", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("en_US", locale0.toString());
      assertEquals("USA", locale0.getISO3Country());
      
      String string1 = StringUtils.upperCase((String) null, locale0);
      assertNull(string1);
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("US", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("en_US", locale0.toString());
      assertEquals("USA", locale0.getISO3Country());
      
      boolean boolean0 = StringUtils.isAsciiPrintable("/swe]");
      assertTrue(boolean0);
      
      String string2 = StringUtils.substringBeforeLast("aDvW~p/]:FDw`qEP(g{Xmv", " vs ASG?bZ0Eo.k!?8*IRfKOe e~MFd!&{'et");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertEquals("aDvW~p/]:FDw`qEP(g{Xmv", string2);
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      String string0 = StringUtils.replaceOnceIgnoreCase("", "", "");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.toRootLowerCase("");
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      
      String string2 = StringUtils.SPACE;
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals(" ", string2);
      
      String string3 = StringUtils.unwrap(" ", '{');
      assertNotNull(string3);
      assertTrue(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals(" ", string3);
      
      boolean boolean0 = StringUtils.containsOnly((CharSequence) " ", "");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isAsciiPrintable(" ");
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String string4 = StringUtils.substringBeforeLast("mbUPwDa!", "RVrCS(Vjp~*f");
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertEquals("mbUPwDa!", string4);
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      long[] longArray0 = new long[5];
      longArray0[0] = 1L;
      String string0 = StringUtils.rightPad("8U4aYSM7sD-", 56, "z+yQE ,(QzYQUG!\"$");
      assertNotNull(string0);
      assertEquals("8U4aYSM7sD-z+yQE ,(QzYQUG!\"$z+yQE ,(QzYQUG!\"$z+yQE ,(QzY", string0);
      
      String string1 = StringUtils.center("null", 3, '8');
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("null", string1);
      
      String string2 = StringUtils.wrapIfMissing("J_]Z(/oOK,3x$ClK", "af0LmbhI=JLr(8.Y");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("af0LmbhI=JLr(8.YJ_]Z(/oOK,3x$ClKaf0LmbhI=JLr(8.Y", string2);
      
      String string3 = StringUtils.removeEnd((String) null, "Minimum abbreviation width with offset is %dVfIxa8gu, n9|Minimum abbreviation width with offset is %dVfIxa8gu, n9|Minimum abbreviation width with offset is %dVfIxa8gu, n9|Minimum abbreviation width with offset is %dVfIxa8gu, n9|Minimum abbreviation width with offset is %dVfIxa8gu, n9|Minimum abbreviation width with offset is %dVfIxa8gu, n9|Minimum abbreviation width with offset is %dVfIxa8gu, n9|Minimum abbreviation width with offset is %dVfIxa8gu, n9|Minimum abbreviation width with offset is %dVfIxa8gu, n9|Minimum abbreviation width with offset is %dVfIxa8gu, n9|Minimum abbreviation width with offset is %dVfIxa8gu, n9|Minimum abbreviation width with offset is %dVfIxa8gu, n9|Minimum abbreviation width with offset is %dVfIxa8gu, n9|Minimum abbreviation width with offset is %dVfIxa8gu, n9|Minimum abbreviation width with offset is %dVfIxa8gu, n9|Minimum abbreviation width with offset is %dVfIxa8gu, n9|VfIxa8gu, n9|");
      assertNull(string3);
      
      // Undeclared exception!
      try { 
        StringUtils.getLevenshteinDistance((CharSequence) "8U4aYSM7sD-z+yQE ,(QzYQUG!\"$z+yQE ,(QzYQUG!\"$z+yQE ,(QzY", (CharSequence) null, 111);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = 'R';
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "r2", charArray0);
      assertEquals(1, charArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new char[] {'R'}, charArray0);
      
      String string0 = StringUtils.defaultIfEmpty("r2", "r2");
      assertNotNull(string0);
      assertEquals("r2", string0);
      
      boolean boolean1 = StringUtils.containsNone((CharSequence) "r2", charArray0);
      assertEquals(1, charArray0.length);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      assertArrayEquals(new char[] {'R'}, charArray0);
      
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "r2");
      assertNotNull(charBuffer0);
      assertTrue(charBuffer0.isReadOnly());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals("r2", charBuffer0.toString());
      assertEquals(2, charBuffer0.length());
      assertFalse(charBuffer0.isDirect());
      assertFalse(charBuffer0.hasArray());
      assertEquals(0, charBuffer0.position());
      assertEquals(2, charBuffer0.remaining());
      assertEquals(2, charBuffer0.capacity());
      assertEquals(2, charBuffer0.limit());
      
      CharBuffer charBuffer1 = CharBuffer.wrap(charArray0);
      assertNotNull(charBuffer1);
      assertEquals(0, charBuffer1.arrayOffset());
      assertFalse(charBuffer1.isDirect());
      assertEquals(1, charBuffer1.remaining());
      assertEquals(1, charBuffer1.capacity());
      assertEquals(1, charBuffer1.length());
      assertTrue(charBuffer1.hasArray());
      assertEquals("R", charBuffer1.toString());
      assertEquals(0, charBuffer1.position());
      assertEquals(1, charBuffer1.limit());
      assertTrue(charBuffer1.hasRemaining());
      assertFalse(charBuffer1.isReadOnly());
      assertEquals(1, charArray0.length);
      assertFalse(charBuffer1.equals((Object)charBuffer0));
      assertArrayEquals(new char[] {'R'}, charArray0);
      
      CharBuffer charBuffer2 = charBuffer1.slice();
      assertNotNull(charBuffer2);
      assertNotSame(charBuffer1, charBuffer2);
      assertNotSame(charBuffer2, charBuffer1);
      assertEquals(0, charBuffer1.arrayOffset());
      assertFalse(charBuffer1.isDirect());
      assertEquals(1, charBuffer1.remaining());
      assertEquals(1, charBuffer1.capacity());
      assertEquals(1, charBuffer1.length());
      assertTrue(charBuffer1.hasArray());
      assertEquals("R", charBuffer1.toString());
      assertEquals(0, charBuffer1.position());
      assertEquals(1, charBuffer1.limit());
      assertTrue(charBuffer1.hasRemaining());
      assertFalse(charBuffer1.isReadOnly());
      assertEquals(1, charBuffer2.limit());
      assertFalse(charBuffer2.isReadOnly());
      assertEquals(1, charBuffer2.capacity());
      assertEquals(0, charBuffer2.position());
      assertFalse(charBuffer2.isDirect());
      assertEquals(1, charBuffer2.length());
      assertEquals(0, charBuffer2.arrayOffset());
      assertTrue(charBuffer2.hasRemaining());
      assertEquals("R", charBuffer2.toString());
      assertEquals(1, charBuffer2.remaining());
      assertTrue(charBuffer2.hasArray());
      assertEquals(1, charArray0.length);
      assertFalse(charBuffer1.equals((Object)charBuffer0));
      assertTrue(charBuffer2.equals((Object)charBuffer1));
      assertFalse(charBuffer2.equals((Object)charBuffer0));
      assertArrayEquals(new char[] {'R'}, charArray0);
      
      String string1 = StringUtils.truncate("r2", 3780, 3780);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      
      String string2 = StringUtils.substringBetween("Minimum abbreviation width is %d", "-2CyKW_V;(o!cSc-T");
      assertNull(string2);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "r2", (CharSequence) "-2CyKW_V;(o!cSc-T");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      String string0 = StringUtils.abbreviate(">9_~)2I:(QS", 12, 12);
      assertNotNull(string0);
      assertEquals(">9_~)2I:(QS", string0);
      
      String string1 = StringUtils.stripToEmpty("G9cL&Vk#]>");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("G9cL&Vk#]>", string1);
      
      String string2 = StringUtils.join((Iterator<?>) null, ">9_~)2I:(QS");
      assertNull(string2);
      
      boolean boolean0 = StringUtils.equalsIgnoreCase((CharSequence) null, ">9_~)2I:(QS");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      String string0 = StringUtils.substringAfterLast("W~p/]:FDw`qEP(g{Xm", (-1104));
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = null;
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("", (String) null);
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      
      String string2 = "";
      String string3 = StringUtils.unwrap("{}", "");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals("{}", string3);
      
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      String string4 = StringUtils.getIfBlank("}mn)GjCTd1O}bu", supplier0);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertEquals("}mn)GjCTd1O}bu", string4);
      
      int[] intArray0 = new int[4];
      intArray0[0] = (-1347);
      intArray0[1] = (-5235);
      intArray0[2] = (-1347);
      intArray0[3] = (-1347);
      char char0 = '|';
      String string5 = StringUtils.join(intArray0, '|', Integer.MAX_VALUE, (-1347));
      assertNotNull(string5);
      assertEquals(4, intArray0.length);
      assertFalse(string5.equals((Object)string3));
      assertTrue(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertTrue(string5.equals((Object)string2));
      assertEquals("", string5);
      assertArrayEquals(new int[] {(-1347), (-5235), (-1347), (-1347)}, intArray0);
      
      Locale locale0 = Locale.ENGLISH;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("en", locale0.toString());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      
      // Undeclared exception!
      try { 
        StringUtils.getFuzzyDistance((CharSequence) null, "}mn)GjCTd1O}bu", locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      String string0 = StringUtils.substringAfterLast("W~p/]:FDw`qEP(g{Xm", (-1104));
      assertNotNull(string0);
      assertEquals("", string0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("", (String) null);
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      
      String string1 = StringUtils.strip("");
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      
      double double0 = StringUtils.getJaroWinklerDistance("", "");
      assertEquals(0.0, double0, 0.01);
      
      boolean boolean0 = StringUtils.equalsAny("{}", stringArray0);
      assertEquals(0, stringArray0.length);
      assertFalse(boolean0);
      
      int int0 = 1719;
      Integer integer0 = new Integer(1719);
      assertNotNull(integer0);
      assertTrue(integer0.equals((Object)int0));
      assertEquals(1719, (int)integer0);
      
      String string2 = "UHpl)";
      String string3 = StringUtils.remove("UHpl)", '0');
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string2));
      assertEquals("UHpl)", string3);
      
      String string4 = StringUtils.stripToNull((String) null);
      assertNull(string4);
      
      boolean boolean1 = StringUtils.containsIgnoreCase("UHpl)", "UHpl)");
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      Locale locale0 = Locale.ROOT;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getLanguage());
      
      String string5 = locale0.getDisplayLanguage();
      assertNotNull(string5);
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getLanguage());
      assertTrue(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertEquals("", string5);
      
      String string6 = StringUtils.join((Iterator<?>) null, (String) null);
      assertNull(string6);
      
      // Undeclared exception!
      try { 
        StringUtils.getFuzzyDistance((CharSequence) null, (CharSequence) null, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      String string0 = StringUtils.wrap("", "");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String[] stringArray0 = new String[2];
      String string1 = StringUtils.join((Object[]) stringArray0, "");
      assertNotNull(string1);
      assertEquals(2, stringArray0.length);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      
      String string2 = StringUtils.join((float[]) null, ' ');
      assertNull(string2);
      
      String string3 = StringUtils.remove("_", '2');
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("_", string3);
      
      String[] stringArray1 = StringUtils.substringsBetween("', has a length less than 2", "{+2%zfduf", ">H=IaZn'@f-+F@GLk?I");
      assertNull(stringArray1);
      
      char[] charArray0 = new char[1];
      charArray0[0] = ' ';
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "", charArray0);
      assertEquals(1, charArray0.length);
      assertEquals(0, int0);
      assertArrayEquals(new char[] {' '}, charArray0);
      
      boolean boolean0 = StringUtils.containsWhitespace(" vs ");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      String string0 = StringUtils.defaultString(" is not in the range '0' - '9'", " is not in the range '0' - '9'");
      assertNotNull(string0);
      assertEquals(" is not in the range '0' - '9'", string0);
      
      boolean boolean0 = StringUtils.containsWhitespace(" is not in the range '0' - '9'");
      assertTrue(boolean0);
      
      long[] longArray0 = new long[8];
      longArray0[0] = 1L;
      longArray0[1] = 193L;
      longArray0[2] = 0L;
      longArray0[3] = (-421L);
      longArray0[4] = 1L;
      longArray0[5] = 0L;
      longArray0[6] = 0L;
      longArray0[7] = (-4646L);
      String string1 = StringUtils.join(longArray0, '<', (-1771), (-1771));
      assertNotNull(string1);
      assertEquals(8, longArray0.length);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertArrayEquals(new long[] {1L, 193L, 0L, (-421L), 1L, 0L, 0L, (-4646L)}, longArray0);
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      String string0 = StringUtils.capitalize("a+f.");
      assertNotNull(string0);
      assertEquals("A+f.", string0);
      
      boolean boolean0 = StringUtils.isAlphanumericSpace("a+f.");
      assertFalse(boolean0);
      
      String string1 = StringUtils.leftPad("...", 62, "...");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("..............................................................", string1);
      
      boolean boolean1 = StringUtils.containsWhitespace("...");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      String string0 = StringUtils.left("5|5pGW#urA~r?~3", (-494));
      assertNotNull(string0);
      assertEquals("", string0);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) 'u';
      String string1 = StringUtils.join(floatArray0, 'q');
      assertNotNull(string1);
      assertEquals(1, floatArray0.length);
      assertFalse(string1.equals((Object)string0));
      assertEquals("117.0", string1);
      assertArrayEquals(new float[] {117.0F}, floatArray0, 0.01F);
      
      String string2 = StringUtils.replaceChars("", "117.0", "");
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("", string2);
      
      String string3 = StringUtils.toRootUpperCase("Minimum abbreviation width is %d");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals("MINIMUM ABBREVIATION WIDTH IS %D", string3);
      
      String string4 = StringUtils.reverse("}\"}|{Lx@=E=_OU9d=");
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertEquals("=d9UO_=E=@xL{|}\"}", string4);
      
      String string5 = StringUtils.abbreviate("org.apache.commons.lang3.StringUtils", 53);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertEquals("org.apache.commons.lang3.StringUtils", string5);
      
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.canEncode());
      
      byte[] byteArray0 = StringUtils.getBytes(">FJ~ZOa1H Q", charset0);
      assertNotNull(byteArray0);
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.canEncode());
      assertEquals(11, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.canEncode());
      
      byte[] byteArray0 = StringUtils.getBytes("Cloneable type ", charset0);
      assertNotNull(byteArray0);
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.canEncode());
      assertEquals(15, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      String string0 = StringUtils.leftPad("r2", (int) '[', '[');
      assertNotNull(string0);
      assertEquals("[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[r2", string0);
      
      boolean boolean0 = StringUtils.containsNone((CharSequence) "r2", " in an array of ");
      assertFalse(boolean0);
      
      String string1 = StringUtils.strip(" in an array of ");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("in an array of", string1);
      
      String[] stringArray0 = new String[7];
      stringArray0[0] = ",/66A7z~@r:n5z ?m";
      stringArray0[2] = " in an array of ";
      stringArray0[3] = "[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[r2";
      stringArray0[4] = "[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[r2";
      stringArray0[5] = "e)iya!";
      stringArray0[6] = "r2";
      String[] stringArray1 = StringUtils.stripAll(stringArray0);
      assertNotNull(stringArray1);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(7, stringArray0.length);
      assertEquals(7, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      String string2 = StringUtils.trim(stringArray0[1]);
      assertNull(string2);
      assertNotSame(stringArray0, stringArray1);
      assertEquals(7, stringArray0.length);
      assertFalse(stringArray0.equals((Object)stringArray1));
      
      boolean boolean1 = StringUtils.endsWithAny(" in an array of ", stringArray1);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(7, stringArray0.length);
      assertEquals(7, stringArray1.length);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string3 = StringUtils.abbreviateMiddle(".\"FnMn\"_8]D:", "ch", 5);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals(".\"ch:", string3);
      
      String string4 = StringUtils.join((double[]) null, '[', 5, (-50));
      assertNull(string4);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      String string5 = StringUtils.join(booleanArray0, '[', 5, (-50));
      assertNotNull(string5);
      assertEquals(1, booleanArray0.length);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertEquals("", string5);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      String string0 = StringUtils.capitalize("Index: ");
      assertNotNull(string0);
      assertEquals("Index: ", string0);
      
      String string1 = StringUtils.substringBefore("", "");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      
      String string2 = StringUtils.upperCase("");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertEquals("", string2);
      
      int int0 = StringUtils.indexOf((CharSequence) "", (CharSequence) "Index: ", 29);
      assertEquals((-1), int0);
      
      String string3 = StringUtils.removePattern("", "...");
      assertNotNull(string3);
      assertTrue(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals("", string3);
      
      boolean boolean0 = StringUtils.isAlphaSpace(", '");
      assertFalse(boolean0);
      
      String string4 = StringUtils.substringBetween("Object varargs must not be null", "...");
      assertNull(string4);
      
      boolean boolean1 = StringUtils.isAlphanumeric("");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string5 = StringUtils.replace("4] WVA2U%Qi_Hs", "", "]+!b+`");
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertEquals("4] WVA2U%Qi_Hs", string5);
      
      boolean boolean2 = StringUtils.isAlphanumericSpace("Object varargs must not be null");
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2);
      
      Locale locale0 = Locale.CANADA_FRENCH;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("CA", locale0.getCountry());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("fr_CA", locale0.toString());
      
      String string6 = locale0.getDisplayScript();
      assertNotNull(string6);
      assertEquals("", locale0.getVariant());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("CA", locale0.getCountry());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("fr_CA", locale0.toString());
      assertTrue(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string0));
      assertTrue(string6.equals((Object)string3));
      assertTrue(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string5));
      assertEquals("", string6);
      
      String string7 = locale0.getDisplayVariant();
      assertNotNull(string7);
      assertEquals("", locale0.getVariant());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("CA", locale0.getCountry());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("fr_CA", locale0.toString());
      assertTrue(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string5));
      assertTrue(string7.equals((Object)string2));
      assertTrue(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string0));
      assertEquals("", string7);
      
      String string8 = StringUtils.upperCase("", locale0);
      assertNotNull(string8);
      assertEquals("", locale0.getVariant());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("CA", locale0.getCountry());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("fr_CA", locale0.toString());
      assertTrue(string8.equals((Object)string7));
      assertTrue(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string0));
      assertTrue(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string5));
      assertTrue(string8.equals((Object)string3));
      assertTrue(string8.equals((Object)string6));
      assertEquals("", string8);
      
      int int1 = StringUtils.countMatches((CharSequence) null, (CharSequence) "Index: ");
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      boolean boolean3 = StringUtils.equalsIgnoreCase("4] WVA2U%Qi_Hs", "");
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object[] objectArray0 = new Object[0];
      String string9 = StringUtils.join(objectArray0, 'O');
      assertNotNull(string9);
      assertEquals(0, objectArray0.length);
      assertTrue(string9.equals((Object)string3));
      assertTrue(string9.equals((Object)string8));
      assertFalse(string9.equals((Object)string0));
      assertFalse(string9.equals((Object)string5));
      assertTrue(string9.equals((Object)string2));
      assertTrue(string9.equals((Object)string1));
      assertEquals("", string9);
      
      boolean boolean4 = StringUtils.containsOnly((CharSequence) "", ", '");
      assertFalse(boolean4 == boolean1);
      assertFalse(boolean4 == boolean0);
      assertFalse(boolean4 == boolean3);
      assertTrue(boolean4 == boolean2);
      assertTrue(boolean4);
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      String string0 = StringUtils.center("", 12);
      assertNotNull(string0);
      assertEquals("           ", string0);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = ".M,KjgwsM,";
      String string1 = StringUtils.join((boolean[]) null, 'l');
      assertNull(string1);
      
      String string2 = StringUtils.replace((String) null, "EEg}]i=#>", (String) null);
      assertNull(string2);
      
      String string3 = StringUtils.replace(".M,KjgwsM,", (String) null, "");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertEquals(".M,KjgwsM,", string3);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) ".M,KjgwsM,", (CharSequence) null);
      assertEquals((-1), int0);
      
      String string4 = StringUtils.getDigits(".M,KjgwsM,");
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertEquals("", string4);
      
      String[] stringArray1 = StringUtils.substringsBetween((String) null, ".M,KjgwsM,", "a%C]]BCE#");
      assertNull(stringArray1);
      
      String string5 = StringUtils.stripToNull("");
      assertNull(string5);
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      String string0 = StringUtils.left("5|5pGW#urA~r?~3", (-494));
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.replaceOnceIgnoreCase("", "5|5pGW#urA~r?~3", "");
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[18];
      String string2 = StringUtils.lowerCase("Threshold must not be negative");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("threshold must not be negative", string2);
      
      charSequenceArray0[0] = (CharSequence) "threshold must not be negative";
      charSequenceArray0[1] = (CharSequence) "";
      charSequenceArray0[2] = (CharSequence) "";
      charSequenceArray0[3] = (CharSequence) "";
      charSequenceArray0[4] = (CharSequence) "5|5pGW#urA~r?~3";
      boolean boolean0 = StringUtils.equalsAnyIgnoreCase("", charSequenceArray0);
      assertEquals(18, charSequenceArray0.length);
      assertTrue(boolean0);
      
      String string3 = StringUtils.join((Object[]) charSequenceArray0, "5|5pGW#urA~r?~3", 108, (-2274));
      assertNotNull(string3);
      assertEquals(18, charSequenceArray0.length);
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string1));
      assertEquals("", string3);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "Threshold must not be negative", (CharSequence) "", 196);
      assertEquals(30, int0);
      
      String string4 = StringUtils.join((long[]) null, '%', (-2640), 196);
      assertNull(string4);
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      int int0 = 34;
      String string0 = StringUtils.wrapIfMissing("xxUjava.lang.Object@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.Object@50d3e7ejava.lang.Object@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.Object@50d3e7ejava.lang.Object@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.Object@50d3e7ejava.lang.Object@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.Object@50d3e7e", 'P');
      assertNotNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      char[] charArray0 = new char[2];
      charArray0[0] = 'P';
      charArray0[1] = ']';
      int int1 = StringUtils.indexOfAnyBut((CharSequence) "PxxUjava.lang.Object@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.Object@50d3e7ejava.lang.Object@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.Object@50d3e7ejava.lang.Object@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.Object@50d3e7ejava.lang.Object@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.Object@50d3e7eP", charArray0);
      assertEquals(2, charArray0.length);
      assertFalse(int1 == int0);
      assertEquals(1, int1);
      assertArrayEquals(new char[] {'P', ']'}, charArray0);
      
      // Undeclared exception!
      try { 
        Charset.isSupported("PxxUjava.lang.Object@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.Object@50d3e7ejava.lang.Object@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.Object@50d3e7ejava.lang.Object@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.Object@50d3e7ejava.lang.Object@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.Object@50d3e7eP");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // PxxUjava.lang.Object@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.Object@50d3e7ejava.lang.Object@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.Object@50d3e7ejava.lang.Object@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.Object@50d3e7ejava.lang.Object@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.Object@50d3e7eP
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("", "", 1067);
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      
      String string0 = StringUtils.left("", 1067);
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.rightPad("", 1067);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.substringAfter((String) null, (-4842));
      assertNull(string2);
      
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      booleanArray0[6] = false;
      String string3 = StringUtils.join(booleanArray0, '@');
      assertNotNull(string3);
      assertEquals(7, booleanArray0.length);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertTrue(Arrays.equals(new boolean[] {true, false, true, true, true, true, false}, booleanArray0));
      
      String[] stringArray1 = StringUtils.stripAll(stringArray0, (String) null);
      assertNotNull(stringArray1);
      assertSame(stringArray0, stringArray1);
      assertSame(stringArray1, stringArray0);
      assertEquals(0, stringArray0.length);
      assertEquals(0, stringArray1.length);
      
      String[] stringArray2 = StringUtils.splitByWholeSeparatorPreserveAllTokens(".M,KjXgwysMU,", "null/empty items=GI$HJ(pX)#", (-4842));
      assertNotNull(stringArray2);
      assertNotSame(stringArray2, stringArray0);
      assertNotSame(stringArray2, stringArray1);
      assertEquals(1, stringArray2.length);
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertFalse(stringArray2.equals((Object)stringArray1));
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      String string0 = StringUtils.replaceOnceIgnoreCase("", "", "");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.rightPad("", 10, '{');
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("{{{{{{{{{{", string1);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("", '{');
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      
      String string2 = StringUtils.firstNonBlank(stringArray0);
      assertNull(string2);
      assertEquals(0, stringArray0.length);
      
      String string3 = StringUtils.deleteWhitespace("gD");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals("gD", string3);
      
      String string4 = StringUtils.abbreviate("BCF$Q0Xl", 28, 28);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertEquals("BCF$Q0Xl", string4);
      
      String string5 = StringUtils.stripToEmpty("BCF$Q0Xl");
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertTrue(string5.equals((Object)string4));
      assertEquals("BCF$Q0Xl", string5);
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      String string0 = StringUtils.center("", 12);
      assertNotNull(string0);
      assertEquals("           ", string0);
      
      String string1 = StringUtils.CR;
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("\r", string1);
      
      String string2 = StringUtils.rightPad("iy.xfw0Ol-e", (-509), "Object varargs must not be null");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("iy.xfw0Ol-e", string2);
      
      String string3 = StringUtils.join((double[]) null, '+', (-509), 12);
      assertNull(string3);
      
      String string4 = StringUtils.removeFirst((String) null, "Object varargs must not be null");
      assertNull(string4);
      
      String[] stringArray0 = StringUtils.stripAll((String[]) null);
      assertNull(stringArray0);
      
      boolean boolean0 = StringUtils.isAlphanumeric("Object varargs must not be null");
      assertFalse(boolean0);
      
      int int0 = StringUtils.compareIgnoreCase((String) null, "&B[.ny3zY`*j6Lhf");
      assertEquals((-1), int0);
      
      String string5 = StringUtils.trimToEmpty("', has a length less than 2");
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertEquals("', has a length less than 2", string5);
      
      String string6 = StringUtils.appendIfMissingIgnoreCase("", (CharSequence) null, (CharSequence[]) null);
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string2));
      assertEquals("", string6);
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      String string0 = "java.lang.Object@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.Object@50d3e7ejava.lang.Object@56b5c7E0java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.Object@50d3e7e";
      String[] stringArray0 = new String[4];
      stringArray0[0] = "java.lang.Object@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.Object@50d3e7ejava.lang.Object@56b5c7E0java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.Object@50d3e7e";
      stringArray0[1] = "java.lang.Object@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.Object@50d3e7ejava.lang.Object@56b5c7E0java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.Object@50d3e7e";
      char[] charArray0 = new char[6];
      charArray0[0] = '%';
      charArray0[1] = 'P';
      // Undeclared exception!
      StringUtils.getJaroWinklerDistance("java.lang.Object@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.Object@50d3e7ejava.lang.Object@56b5c7E0java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.Object@50d3e7e", "java.lang.Object@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.Object@50d3e7ejava.lang.Object@56b5c7E0java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.Object@50d3e7e");
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      String string0 = StringUtils.join(doubleArray0, '\'');
      assertNotNull(string0);
      assertEquals(0, doubleArray0.length);
      assertEquals("", string0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      String string1 = StringUtils.substringBeforeLast("ynS", "-~jVL~U");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("ynS", string1);
      
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      String string2 = StringUtils.getIfEmpty("java.lang.Object@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.Object@50d3e7ejava.lang.Object@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.Object@50d3e7e", supplier0);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      String string0 = StringUtils.abbreviateMiddle("E2*1.s*OqQHFD&gQd9O", "E2*1.s*OqQHFD&gQd9O", (-526));
      assertNotNull(string0);
      assertEquals("E2*1.s*OqQHFD&gQd9O", string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[0] = (CharSequence) "E2*1.s*OqQHFD&gQd9O";
      charSequenceArray0[1] = (CharSequence) "E2*1.s*OqQHFD&gQd9O";
      boolean boolean0 = StringUtils.equalsAnyIgnoreCase("E2*1.s*OqQHFD&gQd9O", charSequenceArray0);
      assertEquals(2, charSequenceArray0.length);
      assertTrue(boolean0);
      
      int int0 = StringUtils.getLevenshteinDistance(charSequenceArray0[1], (CharSequence) "E2*1.s*OqQHFD&gQd9O", 372);
      assertEquals(2, charSequenceArray0.length);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      String string0 = ")";
      String string1 = StringUtils.stripEnd(")", (String) null);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals(")", string1);
      
      int int0 = StringUtils.lastOrdinalIndexOf("", (CharSequence) null, 125);
      assertEquals((-1), int0);
      
      String string2 = "bC.Z KTe0^9r,H`U";
      // Undeclared exception!
      try { 
        StringUtils.truncate("bC.Z KTe0^9r,H`U", (-6));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // maxWith cannot be negative
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      String string0 = StringUtils.normalizeSpace("comparator");
      assertNotNull(string0);
      assertEquals("comparator", string0);
      
      boolean boolean0 = StringUtils.contains((CharSequence) "comparator", (CharSequence) "comparator");
      assertTrue(boolean0);
      
      String string1 = StringUtils.abbreviateMiddle("MA3qm|ZG", "k", 8);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("MA3qm|ZG", string1);
      
      String string2 = StringUtils.join((int[]) null, 'M', (-128), 1535);
      assertNull(string2);
      
      Locale locale0 = Locale.ENGLISH;
      assertNotNull(locale0);
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      
      int int0 = StringUtils.getFuzzyDistance("comparator", "MA3qm|ZG", locale0);
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      assertEquals(2, int0);
      
      int int1 = StringUtils.countMatches((CharSequence) ".M,KjXgwysMU,", 'M');
      assertTrue(int1 == int0);
      assertEquals(2, int1);
      
      String string3 = StringUtils.removeEndIgnoreCase((String) null, "o4R+8,w0_XT");
      assertNull(string3);
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      long[] longArray0 = new long[5];
      longArray0[0] = 1L;
      longArray0[1] = (-1L);
      longArray0[2] = (-1282L);
      longArray0[3] = (-2866L);
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object[] objectArray0 = new Object[14];
      objectArray0[0] = (Object) (-1282L);
      objectArray0[1] = (Object) "<7";
      String string0 = StringUtils.join(objectArray0, "", 674, (-906));
      assertNotNull(string0);
      assertEquals(14, objectArray0.length);
      assertEquals("", string0);
      
      String string1 = StringUtils.center("", 674, (String) null);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEqualsstring1);
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      String string0 = StringUtils.center("Cannot store ", 10, "");
      assertNotNull(string0);
      assertEquals("Cannot store ", string0);
      
      String string1 = StringUtils.capitalize("");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      
      boolean boolean0 = StringUtils.isEmpty("|3v\"%K_8b");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isWhitespace("");
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      String string0 = StringUtils.rightPad("Wd|}51/]/&`bsA", 1003, "Wd|}51/]/&`bsA");
      assertNotNull(string0);
      
      String string1 = StringUtils.wrapIfMissing("Wd|}51/]/&`bsA", '\'');
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("'Wd|}51/]/&`bsA'", string1);
      
      String string2 = StringUtils.replaceOnceIgnoreCase(string0, "'Wd|}51/]/&`bsA'", "LO'e?i<A");
      assertNotNull(string2);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string2.equals((Object)string1));
      
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      charSequenceArray0[0] = (CharSequence) "Wd|}51/]/&`bsA";
      boolean boolean0 = StringUtils.equalsAnyIgnoreCase("LO'e?i<A", charSequenceArray0);
      assertEquals(1, charSequenceArray0.length);
      assertFalse(boolean0);
      
      String string3 = StringUtils.join((Object[]) charSequenceArray0, "The character ", 40, 2);
      assertNotNull(string3);
      assertEquals(1, charSequenceArray0.length);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals("", string3);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) string0, (CharSequence) string2, 196);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string3));
      assertEquals(0, int0);
      
      Locale locale0 = Locale.PRC;
      assertNotNull(locale0);
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("", locale0.getVariant());
      
      String string4 = StringUtils.truncate((String) null, 2, 574);
      assertNull(string4);
      
      String string5 = StringUtils.substringBetween("", "FHSD<!.Q.");
      assertNull(string5);
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      String string0 = StringUtils.replaceIgnoreCase("", "", "");
      assertNotNull(string0);
      assertEquals("", string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[6];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "";
      String string1 = StringUtils.EMPTY;
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      
      charSequenceArray0[2] = (CharSequence) "";
      charSequenceArray0[3] = (CharSequence) "";
      charSequenceArray0[4] = (CharSequence) "";
      charSequenceArray0[5] = (CharSequence) "";
      int int0 = StringUtils.indexOfAny((CharSequence) "", charSequenceArray0);
      assertEquals(6, charSequenceArray0.length);
      assertEquals(0, int0);
      
      String string2 = StringUtils.prependIfMissingIgnoreCase("KP>hc.3(AN~#4A{,qd", charSequenceArray0[4], charSequenceArray0);
      assertNotNull(string2);
      assertEquals(6, charSequenceArray0.length);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("KP>hc.3(AN~#4A{,qd", string2);
      
      String string3 = StringUtils.repeat('$', 0);
      assertNotNull(string3);
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals("", string3);
      
      boolean boolean0 = StringUtils.containsWhitespace("");
      assertFalse(boolean0);
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = "";
      stringArray0[1] = "KP>hc.3(AN~#4A{,qd";
      stringArray0[2] = "";
      stringArray0[3] = "";
      int int1 = StringUtils.indexOfAny(charSequenceArray0[5], charSequenceArray0);
      assertEquals(6, charSequenceArray0.length);
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      
      String string4 = StringUtils.rotate("", 0);
      assertNotNull(string4);
      assertTrue(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string0));
      assertEquals("", string4);
      
      String string5 = StringUtils.removeAll((String) null, (String) null);
      assertNull(string5);
      
      boolean boolean1 = StringUtils.isNoneEmpty(charSequenceArray0);
      assertEquals(6, charSequenceArray0.length);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string6 = StringUtils.abbreviate("", "ZyW,AzDH~", 0);
      assertNotNull(string6);
      assertTrue(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string2));
      assertTrue(string6.equals((Object)string4));
      assertTrue(string6.equals((Object)string1));
      assertTrue(string6.equals((Object)string3));
      assertEquals("", string6);
      
      int int2 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "", (CharSequence) "");
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals(0, int2);
      
      String string7 = StringUtils.substringBefore("ZyW,AzDH~", 0);
      assertNotNull(string7);
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string4));
      assertEquals("ZyW,AzDH~", string7);
      
      int int3 = StringUtils.getLevenshteinDistance(charSequenceArray0[5], (CharSequence) "ZyW,AzDH~", 404);
      assertEquals(6, charSequenceArray0.length);
      assertFalse(int3 == int2);
      assertFalse(int3 == int1);
      assertFalse(int3 == int0);
      assertEquals(9, int3);
      
      String string8 = StringUtils.getDigits("wW{");
      assertNotNull(string8);
      assertTrue(string8.equals((Object)string3));
      assertTrue(string8.equals((Object)string6));
      assertTrue(string8.equals((Object)string4));
      assertTrue(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string7));
      assertTrue(string8.equals((Object)string0));
      assertEquals("", string8);
      
      char[] charArray0 = new char[3];
      charArray0[0] = '$';
      charArray0[1] = '$';
      charArray0[2] = '$';
      int int4 = StringUtils.indexOfAnyBut((CharSequence) "", charArray0);
      assertEquals(3, charArray0.length);
      assertFalse(int4 == int2);
      assertFalse(int4 == int3);
      assertFalse(int4 == int1);
      assertFalse(int4 == int0);
      assertEquals((-1), int4);
      assertArrayEquals(new char[] {'$', '$', '$'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      String string0 = StringUtils.LF;
      assertNotNull(string0);
      assertEquals("\n", string0);
      
      String string1 = StringUtils.chop("\n");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      
      String string2 = StringUtils.CR;
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("\r", string2);
      
      int int0 = StringUtils.compareIgnoreCase("!j=+)NCJAW'`iT4a&", "", false);
      assertEquals(17, int0);
      
      Locale locale0 = Locale.CANADA;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("CA", locale0.getCountry());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      assertEquals("en_CA", locale0.toString());
      
      String string3 = locale0.getDisplayCountry();
      assertNotNull(string3);
      assertEquals("", locale0.getVariant());
      assertEquals("CA", locale0.getCountry());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      assertEquals("en_CA", locale0.toString());
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals("Canada", string3);
      
      String[] stringArray0 = Locale.getISOCountries();
      assertNotNull(stringArray0);
      assertEquals(250, stringArray0.length);
      
      int int1 = StringUtils.indexOfAnyBut((CharSequence) "\r", (char[]) null);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      String string0 = StringUtils.lowerCase("java.lang.Object@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.Object@50d3e7ejava.lang.Object@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.Object@50d3e7e");
      assertNotNull(string0);
      
      String string1 = StringUtils.toRootLowerCase("2#Z@zQH.~Tp&g9nz7/");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("2#z@zqh.~tp&g9nz7/", string1);
      
      String string2 = StringUtils.defaultIfBlank("Minimum abbreviation width with offset is %d", (String) null);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("Minimum abbreviation width with offset is %d", string2);
      
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short) (-1780);
      shortArray0[1] = (short)1110;
      shortArray0[2] = (short)1251;
      shortArray0[3] = (short) (-1);
      shortArray0[4] = (short) (-1351);
      shortArray0[5] = (short) (-108);
      shortArray0[6] = (short)1121;
      String string3 = StringUtils.join(shortArray0, 'u');
      assertNotNull(string3);
      assertEquals(7, shortArray0.length);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals("-1780u1110u1251u-1u-1351u-108u1121", string3);
      assertArrayEquals(new short[] {(short) (-1780), (short)1110, (short)1251, (short) (-1), (short) (-1351), (short) (-108), (short)1121}, shortArray0);
      
      boolean boolean0 = StringUtils.isAllUpperCase("Minimum abbreviation width with offset is %d");
      assertFalse(boolean0);
      
      String string4 = StringUtils.remove((String) null, '/');
      assertNull(string4);
      
      String string5 = StringUtils.substringBeforeLast("&p:1hA&Yd6E;uh", "Minimum abbreviation width is %dMinimum abbreviation width is %d");
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertEquals("&p:1hA&Yd6E;uh", string5);
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      String string0 = StringUtils.lowerCase("java.lang.Object@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.Object@50d3e7ejava.lang.Object@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.Object@50d3e7e");
      assertNotNull(string0);
      
      String string1 = StringUtils.removeAll("java.lang.object@56b5c730java.lang.object@1de495b1java.lang.object@56b5c730java.lang.object@56b5c730java.lang.object@50d3e7ejava.lang.object@56b5c730java.lang.object@1de495b1java.lang.object@56b5c730java.lang.object@56b5c730java.lang.object@50d3e7e", "java.lang.Object@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.Object@50d3e7ejava.lang.Object@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.Object@50d3e7e");
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      
      boolean boolean0 = StringUtils.containsNone((CharSequence) "java.lang.Object@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.Object@50d3e7ejava.lang.Object@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.Object@50d3e7e", "!>]@{q6R%U^t?h,");
      assertFalse(boolean0);
      
      String string2 = StringUtils.replaceChars("java.lang.object@56b5c730java.lang.object@1de495b1java.lang.object@56b5c730java.lang.object@56b5c730java.lang.object@50d3e7ejava.lang.object@56b5c730java.lang.object@1de495b1java.lang.object@56b5c730java.lang.object@56b5c730java.lang.object@50d3e7e", 'B', '\"');
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      
      String string3 = StringUtils.trim("java.lang.object@56b5c730java.lang.object@1de495b1java.lang.object@56b5c730java.lang.object@56b5c730java.lang.object@50d3e7ejava.lang.object@56b5c730java.lang.object@1de495b1java.lang.object@56b5c730java.lang.object@56b5c730java.lang.object@50d3e7e");
      assertNotNull(string3);
      assertTrue(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string2));
      
      ArrayDeque<Integer> arrayDeque0 = new ArrayDeque<Integer>();
      assertNotNull(arrayDeque0);
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      
      Iterator<Integer> iterator0 = arrayDeque0.descendingIterator();
      assertNotNull(iterator0);
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("java.lang.object@56b5c730java.lang.object@1de495b1java.lang.object@56b5c730java.lang.object@56b5c730java.lang.object@50d3e7ejava.lang.object@56b5c730java.lang.object@1de495b1java.lang.object@56b5c730java.lang.object@56b5c730java.lang.object@50d3e7e", 't');
      assertNotNull(stringArray0);
      assertEquals(11, stringArray0.length);
      
      StringUtils stringUtils0 = new StringUtils();
      assertNotNull(stringUtils0);
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      
      long[] longArray0 = new long[5];
      longArray0[0] = (long) '\"';
      longArray0[1] = (long) 't';
      longArray0[2] = (long) 'B';
      longArray0[3] = (long) 't';
      longArray0[4] = (long) '\"';
      String string4 = StringUtils.join(longArray0, 'Y');
      assertNotNull(string4);
      assertEquals(5, longArray0.length);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertEquals("34Y116Y66Y116Y34", string4);
      assertArrayEquals(new long[] {34L, 116L, 66L, 116L, 34L}, longArray0);
      
      String[] stringArray1 = StringUtils.splitPreserveAllTokens("\r", "org.apache.commons.lang3.ObjectUtils$Null", 229);
      assertNotNull(stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(1, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      String[] stringArray2 = StringUtils.splitPreserveAllTokens((String) null, "wDPtb=E*0D +");
      assertNull(stringArray2);
      
      String string5 = StringUtils.normalizeSpace("^");
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertEquals("^", string5);
      
      boolean boolean1 = StringUtils.isNoneBlank(stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(1, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string6 = StringUtils.capitalize(" vs ");
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string4));
      assertEquals(" vs ", string6);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "java.lang.Object@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.Object@50d3e7ejava.lang.Object@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.Object@50d3e7e", (CharSequence) "!>]@{q6R%U^t?h,");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      Stack<Integer> stack0 = new Stack<Integer>();
      assertNotNull(stack0);
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      
      Integer integer0 = new Integer(0);
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      boolean boolean0 = stack0.add(integer0);
      assertFalse(stack0.isEmpty());
      assertEquals("[0]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertEquals(1, stack0.size());
      assertTrue(boolean0);
      assertTrue(stack0.contains(integer0));
      
      ListIterator<Integer> listIterator0 = stack0.listIterator(0);
      assertNotNull(listIterator0);
      assertFalse(stack0.isEmpty());
      assertEquals("[0]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertEquals(1, stack0.size());
      assertTrue(listIterator0.hasNext());
      assertFalse(listIterator0.hasPrevious());
      assertTrue(stack0.contains(integer0));
      
      boolean boolean1 = stack0.add(integer0);
      assertFalse(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertEquals(2, stack0.size());
      assertEquals("[0, 0]", stack0.toString());
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertTrue(stack0.contains(integer0));
      
      boolean boolean2 = stack0.add(integer0);
      assertFalse(stack0.isEmpty());
      assertEquals(3, stack0.size());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertEquals("[0, 0, 0]", stack0.toString());
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2);
      assertTrue(stack0.contains(integer0));
      
      ListIterator<Integer> listIterator1 = stack0.listIterator();
      assertNotNull(listIterator1);
      assertNotSame(listIterator1, listIterator0);
      assertFalse(stack0.isEmpty());
      assertEquals(3, stack0.size());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertEquals("[0, 0, 0]", stack0.toString());
      assertTrue(listIterator1.hasNext());
      assertFalse(listIterator1.hasPrevious());
      assertFalse(listIterator1.equals((Object)listIterator0));
      assertTrue(stack0.contains(integer0));
      
      Iterator<Integer> iterator0 = stack0.iterator();
      assertNotNull(iterator0);
      assertFalse(stack0.isEmpty());
      assertEquals(3, stack0.size());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertEquals("[0, 0, 0]", stack0.toString());
      assertTrue(stack0.contains(integer0));
      
      String[] stringArray0 = new String[0];
      String string0 = StringUtils.getCommonPrefix(stringArray0);
      assertNotNull(string0);
      assertEquals(0, stringArray0.length);
      assertEquals("", string0);
      
      String string1 = StringUtils.stripStart("ja%>8A#>fISN", "");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("ja%>8A#>fISN", string1);
      
      String string2 = StringUtils.repeat("java.lang.Object@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.Object@50d3e7ejava.lang.Object@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.Object@50d3e7ejava.lang.Object@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.Object@50d3e7ejava.lang.Object@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.Object@50d3e7e", 0);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertEquals("", string2);
      
      boolean boolean3 = StringUtils.isAllLowerCase("java.lang.Object@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.Object@50d3e7ejava.lang.Object@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.Object@50d3e7ejava.lang.Object@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.Object@50d3e7ejava.lang.Object@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.Object@50d3e7e");
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3);
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      String string0 = StringUtils.abbreviateMiddle("E2*1.s*OqQHFD&gQd9O", "E2*1.s*OqQHFD&gQd9O", (-526));
      assertNotNull(string0);
      assertEquals("E2*1.s*OqQHFD&gQd9O", string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      char[] charArray0 = new char[9];
      charArray0[0] = '';
      charArray0[1] = 'C';
      charArray0[2] = '\'';
      charArray0[3] = 'b';
      charArray0[4] = ';';
      charArray0[5] = '}';
      charArray0[6] = '&';
      charArray0[7] = 'r';
      charArray0[8] = '5';
      boolean boolean0 = StringUtils.containsNone((CharSequence) "E2*1.s*OqQHFD&gQd9O", charArray0);
      assertEquals(9, charArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new char[] {'', 'C', '\'', 'b', ';', '}', '&', 'r', '5'}, charArray0);
      
      boolean boolean1 = StringUtils.equals((CharSequence) "E2*1.s*OqQHFD&gQd9O", (CharSequence) "E2*1.s*OqQHFD&gQd9O");
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String string1 = StringUtils.overlay("wDPtb=E*0D +", " vs ", (-526), (-526));
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals(" vs wDPtb=E*0D +", string1);
      
      int int0 = StringUtils.lastIndexOfAny(" vs wDPtb=E*0D +", charSequenceArray0);
      assertEquals(2, charSequenceArray0.length);
      assertEquals((-1), int0);
      
      String string2 = StringUtils.substringBefore("k=-&:d!<z8&Gf", "*A5[&h'");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("k=-&:d!<z8&Gf", string2);
      
      String string3 = StringUtils.join((Object[]) charSequenceArray0, "4y", 108, (-526));
      assertNotNull(string3);
      assertEquals(2, charSequenceArray0.length);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("", string3);
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      String string0 = StringUtils.join((Iterator<?>) null, "");
      assertNull(string0);
      
      String string1 = StringUtils.substringBeforeLast((String) null, "");
      assertNull(string1);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)16;
      byteArray0[1] = (byte) (-121);
      byteArray0[2] = (byte)43;
      String string2 = StringUtils.join(byteArray0, 'I');
      assertNotNull(string2);
      assertEquals(3, byteArray0.length);
      assertEquals("16I-121I43", string2);
      assertArrayEquals(new byte[] {(byte)16, (byte) (-121), (byte)43}, byteArray0);
      
      String string3 = StringUtils.swapCase("");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertEquals("", string3);
      
      String string4 = StringUtils.join(byteArray0, 'x', (int) (byte)16, (int) (byte) (-121));
      assertNotNull(string4);
      assertEquals(3, byteArray0.length);
      assertTrue(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertEquals("", string4);
      assertArrayEquals(new byte[] {(byte)16, (byte) (-121), (byte)43}, byteArray0);
      
      Vector<Locale.LanguageRange> vector0 = new Vector<Locale.LanguageRange>(10, 6);
      assertNotNull(vector0);
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      
      Locale.LanguageRange locale_LanguageRange0 = null;
      try {
        locale_LanguageRange0 = new Locale.LanguageRange("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // range=
         //
         verifyException("java.util.Locale$LanguageRange", e);
      }
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      String string0 = StringUtils.chomp((String) null, "#A<nX5gPJ\u0001=z8d=F!^");
      assertNull(string0);
      
      String string1 = StringUtils.trimToNull("Arguments cannot both be null");
      assertNotNull(string1);
      assertEquals("Arguments cannot both be null", string1);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      // Undeclared exception!
      try { 
        StringUtils.joinWith("Array and element cannot both be null", (Object[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object varargs must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      String string0 = StringUtils.substringAfterLast("Minimum abbreviation width with offset is %d", (-21));
      assertNotNull(string0);
      assertEquals("", string0);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "", (CharSequence) "", 2);
      assertEquals(0, int0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[0] = (CharSequence) "~(";
      charSequenceArray0[1] = (CharSequence) "~(";
      String string1 = StringUtils.appendIfMissing("", "", (CharSequence[]) null);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      
      String string2 = StringUtils.joinWith("Minimum abbreviation width with offset is %d", charSequenceArray0);
      assertNotNull(string2);
      assertEquals(2, charSequenceArray0.length);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("~(Minimum abbreviation width with offset is %d~(", string2);
      
      boolean boolean0 = StringUtils.isAlpha("~(Minimum abbreviation width with offset is %d~(");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[8];
      charSequenceArray0[0] = null;
      charSequenceArray0[1] = null;
      charSequenceArray0[2] = null;
      charSequenceArray0[3] = null;
      charSequenceArray0[4] = charSequenceArray0[1];
      charSequenceArray0[5] = null;
      charSequenceArray0[6] = null;
      charSequenceArray0[7] = null;
      boolean boolean0 = StringUtils.containsAny((CharSequence) null, charSequenceArray0);
      assertEquals(8, charSequenceArray0.length);
      assertFalse(boolean0);
      
      String string0 = StringUtils.wrap("~1;h", ']');
      assertNotNull(string0);
      assertEquals("]~1;h]", string0);
      
      String string1 = StringUtils.defaultString("]~1;h]");
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("]~1;h]", string1);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'v';
      String string2 = StringUtils.valueOf(charArray0);
      assertNotNull(string2);
      assertEquals(1, charArray0.length);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("v", string2);
      assertArrayEquals(new char[] {'v'}, charArray0);
      
      int int0 = StringUtils.lastIndexOfAny(charSequenceArray0[5], charSequenceArray0);
      assertEquals(8, charSequenceArray0.length);
      assertEquals((-1), int0);
      
      int int1 = StringUtils.lastOrdinalIndexOf((CharSequence) null, charSequenceArray0[7], (-1));
      assertEquals(8, charSequenceArray0.length);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      boolean boolean1 = StringUtils.isAllLowerCase("~1;h");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      String string0 = StringUtils.remove("$4'Tcj.*5", 'o');
      assertNotNull(string0);
      assertEquals("$4'Tcj.*5", string0);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) 'o';
      floatArray0[1] = (float) 'q';
      floatArray0[2] = (float) 'o';
      floatArray0[3] = (float) 'q';
      floatArray0[4] = (float) 'o';
      String string1 = StringUtils.center(" has no clone method", (-1720));
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals(" has no clone method", string1);
      
      String string2 = StringUtils.lowerCase((String) null);
      assertNull(string2);
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      String string0 = StringUtils.unwrap("Wd|}51/]/&`bsA", '[');
      assertNotNull(string0);
      assertEquals("Wd|}51/]/&`bsA", string0);
      
      char[] charArray0 = new char[3];
      charArray0[1] = '[';
      charArray0[2] = '[';
      String string1 = StringUtils.center(" 2=mf#ih7)QP<3", (-3654), "Bsj=Bsj=");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals(" 2=mf#ih7)QP<3", string1);
      
      boolean boolean0 = StringUtils.containsAny((CharSequence) "Wd|}51/]/&`bsA", (CharSequence) " 2=mf#ih7)QP<3");
      assertFalse(boolean0);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "Wd|}51/]/&`bsA", (CharSequence) " 2=mf#ih7)QP<3", 6);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      String string0 = StringUtils.rightPad("Wd|}51/]/&`bsA", 1003, "Wd|}51/]/&`bsA");
      assertNotNull(string0);
      
      String string1 = StringUtils.wrapIfMissing("Wd|}51/]/&`bsA", '\'');
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("'Wd|}51/]/&`bsA'", string1);
      
      String string2 = "\\u";
      String string3 = StringUtils.replaceOnceIgnoreCase(string0, "'Wd|}51/]/&`bsA'", "LO'e?i<A");
      assertNotNull(string3);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      charSequenceArray0[0] = (CharSequence) string2;
      boolean boolean0 = StringUtils.equalsAnyIgnoreCase("LO'e?i<A", charSequenceArray0);
      assertEquals(1, charSequenceArray0.length);
      assertFalse(boolean0);
      
      String string4 = StringUtils.join((Object[]) charSequenceArray0, "The character ", 40, 2);
      assertNotNull(string4);
      assertEquals(1, charSequenceArray0.length);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertEquals("", string4);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) string0, (CharSequence) string3, 196);
      assertFalse(string0.equals((Object)string4));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string3.equals((Object)string4));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals(0, int0);
      
      Locale locale0 = Locale.PRC;
      assertNotNull(locale0);
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      
      Locale locale1 = Locale.TRADITIONAL_CHINESE;
      assertNotNull(locale1);
      assertNotSame(locale1, locale0);
      assertEquals("TW", locale1.getCountry());
      assertEquals("zho", locale1.getISO3Language());
      assertEquals("zh_TW", locale1.toString());
      assertEquals("TWN", locale1.getISO3Country());
      assertEquals("zh", locale1.getLanguage());
      assertEquals("", locale1.getVariant());
      assertFalse(locale1.equals((Object)locale0));
      
      String string5 = locale0.getDisplayName(locale1);
      assertNotNull(string5);
      assertNotSame(locale0, locale1);
      assertNotSame(locale1, locale0);
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TW", locale1.getCountry());
      assertEquals("zho", locale1.getISO3Language());
      assertEquals("zh_TW", locale1.toString());
      assertEquals("TWN", locale1.getISO3Country());
      assertEquals("zh", locale1.getLanguage());
      assertEquals("", locale1.getVariant());
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(locale1.equals((Object)locale0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertEquals("\u4E2D\u6587 (\u4E2D\u570B)", string5);
      
      Locale locale2 = Locale.CHINESE;
      assertNotNull(locale2);
      assertNotSame(locale2, locale1);
      assertNotSame(locale2, locale0);
      assertEquals("zh", locale2.toString());
      assertEquals("", locale2.getVariant());
      assertEquals("", locale2.getCountry());
      assertEquals("zh", locale2.getLanguage());
      assertEquals("", locale2.getISO3Country());
      assertEquals("zho", locale2.getISO3Language());
      assertFalse(locale2.equals((Object)locale1));
      assertFalse(locale2.equals((Object)locale0));
      
      String string6 = locale2.getDisplayName(locale1);
      assertNotNull(string6);
      assertNotSame(locale1, locale0);
      assertNotSame(locale1, locale2);
      assertNotSame(locale2, locale1);
      assertNotSame(locale2, locale0);
      assertEquals("TW", locale1.getCountry());
      assertEquals("zho", locale1.getISO3Language());
      assertEquals("zh_TW", locale1.toString());
      assertEquals("TWN", locale1.getISO3Country());
      assertEquals("zh", locale1.getLanguage());
      assertEquals("", locale1.getVariant());
      assertEquals("zh", locale2.toString());
      assertEquals("", locale2.getVariant());
      assertEquals("", locale2.getCountry());
      assertEquals("zh", locale2.getLanguage());
      assertEquals("", locale2.getISO3Country());
      assertEquals("zho", locale2.getISO3Language());
      assertFalse(locale1.equals((Object)locale0));
      assertFalse(locale1.equals((Object)locale2));
      assertFalse(locale2.equals((Object)locale1));
      assertFalse(locale2.equals((Object)locale0));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string2));
      assertEquals("\u4E2D\u6587", string6);
      
      String string7 = StringUtils.upperCase("BY({EXF@H)*%", locale1);
      assertNotNull(string7);
      assertNotSame(locale1, locale0);
      assertNotSame(locale1, locale2);
      assertEquals("TW", locale1.getCountry());
      assertEquals("zho", locale1.getISO3Language());
      assertEquals("zh_TW", locale1.toString());
      assertEquals("TWN", locale1.getISO3Country());
      assertEquals("zh", locale1.getLanguage());
      assertEquals("", locale1.getVariant());
      assertFalse(locale1.equals((Object)locale0));
      assertFalse(locale1.equals((Object)locale2));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string0));
      assertEquals("BY({EXF@H)*%", string7);
      
      String string8 = StringUtils.prependIfMissing("/", "'Wd|}51/]/&`bsA'", charSequenceArray0);
      assertNotNull(string8);
      assertEquals(1, charSequenceArray0.length);
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string0));
      assertEquals("'Wd|}51/]/&`bsA'/", string8);
      
      boolean boolean1 = StringUtils.isBlank("BY({EXF@H)*%");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      String string0 = StringUtils.rotate("The Array must not be nullr4", 15);
      assertNotNull(string0);
      assertEquals("t not be nullr4The Array mus", string0);
      
      String string1 = StringUtils.center(" ", 4748, "Search and Replace array lengths don't match: ");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "", "]k <mxJ#z");
      assertTrue(boolean0);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = 1018.9F;
      floatArray0[1] = 0.0F;
      floatArray0[2] = 0.0F;
      String string0 = StringUtils.join(floatArray0, ' ', 2122, 321);
      assertNotNull(string0);
      assertEquals(3, floatArray0.length);
      assertEquals("", string0);
      assertArrayEquals(new float[] {1018.9F, 0.0F, 0.0F}, floatArray0, 0.01F);
      
      String string1 = StringUtils.upperCase("", (Locale) null);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      String string0 = StringUtils.left(".I>38f~OoV", 22);
      assertNotNull(string0);
      assertEquals(".I>38f~OoV", string0);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) 'u';
      floatArray0[1] = (float) 0;
      floatArray0[2] = (float) 'q';
      String string1 = StringUtils.trimToEmpty(".I>38f~OoV");
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals(".I>38f~OoV", string1);
      
      String string2 = StringUtils.replaceChars("", (String) null, "#");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("", string2);
      
      String string3 = StringUtils.toRootUpperCase("#");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals("#", string3);
      
      String string4 = StringUtils.reverse("#");
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertEquals("#", string4);
      
      String string5 = StringUtils.abbreviate((String) null, (-494));
      assertNull(string5);
      
      String string6 = StringUtils.unwrap("org.apache.commons.lang3.StringUtils", '2');
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string3));
      assertEquals("org.apache.commons.lang3.StringUtils", string6);
      
      boolean boolean0 = StringUtils.isMixedCase("#");
      assertFalse(boolean0);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-1450.9);
      doubleArray0[1] = (double) 22;
      doubleArray0[2] = (double) '2';
      doubleArray0[3] = (double) 'q';
      doubleArray0[4] = (double) 113.0F;
      doubleArray0[5] = (double) 0.0F;
      String string7 = StringUtils.join(doubleArray0, 'g', 0, (-747));
      assertNotNull(string7);
      assertEquals(6, doubleArray0.length);
      assertFalse(string7.equals((Object)string3));
      assertTrue(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string4));
      assertEquals("", string7);
      assertArrayEquals(new double[] {(-1450.9), 22.0, 50.0, 113.0, 113.0, 0.0}, doubleArray0, 0.01);
      
      String string8 = StringUtils.repeat(" vs ", ".I>38f~OoV", 53);
      assertNotNull(string8);
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string3));
      assertEquals(" vs .I>38f~OoV vs .I>38f~OoV vs .I>38f~OoV vs .I>38f~OoV vs .I>38f~OoV vs .I>38f~OoV vs .I>38f~OoV vs .I>38f~OoV vs .I>38f~OoV vs .I>38f~OoV vs .I>38f~OoV vs .I>38f~OoV vs .I>38f~OoV vs .I>38f~OoV vs .I>38f~OoV vs .I>38f~OoV vs .I>38f~OoV vs .I>38f~OoV vs .I>38f~OoV vs .I>38f~OoV vs .I>38f~OoV vs .I>38f~OoV vs .I>38f~OoV vs .I>38f~OoV vs .I>38f~OoV vs .I>38f~OoV vs .I>38f~OoV vs .I>38f~OoV vs .I>38f~OoV vs .I>38f~OoV vs .I>38f~OoV vs .I>38f~OoV vs .I>38f~OoV vs .I>38f~OoV vs .I>38f~OoV vs .I>38f~OoV vs .I>38f~OoV vs .I>38f~OoV vs .I>38f~OoV vs .I>38f~OoV vs .I>38f~OoV vs .I>38f~OoV vs .I>38f~OoV vs .I>38f~OoV vs .I>38f~OoV vs .I>38f~OoV vs .I>38f~OoV vs .I>38f~OoV vs .I>38f~OoV vs .I>38f~OoV vs .I>38f~OoV vs .I>38f~OoV vs ", string8);
      
      int int0 = StringUtils.indexOf((CharSequence) null, (CharSequence) " vs ", 2147483645);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = '`';
      charArray0[1] = 'q';
      charArray0[2] = 's';
      charArray0[3] = '_';
      String string0 = StringUtils.valueOf(charArray0);
      assertNotNull(string0);
      assertEquals(4, charArray0.length);
      assertEquals("`qs_", string0);
      assertArrayEquals(new char[] {'`', 'q', 's', '_'}, charArray0);
      
      String string1 = StringUtils.repeat("z=;lke'W.,)B", (String) null, 14);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("z=;lke'W.,)Bz=;lke'W.,)Bz=;lke'W.,)Bz=;lke'W.,)Bz=;lke'W.,)Bz=;lke'W.,)Bz=;lke'W.,)Bz=;lke'W.,)Bz=;lke'W.,)Bz=;lke'W.,)Bz=;lke'W.,)Bz=;lke'W.,)Bz=;lke'W.,)Bz=;lke'W.,)B", string1);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "z=;lke'W.,)Bz=;lke'W.,)Bz=;lke'W.,)Bz=;lke'W.,)Bz=;lke'W.,)Bz=;lke'W.,)Bz=;lke'W.,)Bz=;lke'W.,)Bz=;lke'W.,)Bz=;lke'W.,)Bz=;lke'W.,)Bz=;lke'W.,)Bz=;lke'W.,)Bz=;lke'W.,)B", 2, (-1317));
      assertEquals((-1), int0);
      
      int int1 = StringUtils.compareIgnoreCase("`qs_", "`qs_", true);
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      int int2 = StringUtils.indexOfAnyBut((CharSequence) null, (CharSequence) null);
      assertFalse(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals((-1), int2);
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      String string0 = StringUtils.substring((String) null, 25);
      assertNull(string0);
      
      int int0 = StringUtils.countMatches((CharSequence) null, '<');
      assertEquals(0, int0);
      
      String string1 = StringUtils.leftPad("null/empty items", 0, (String) null);
      assertNotNull(string1);
      assertEquals("null/empty items", string1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[6];
      charSequenceArray0[0] = (CharSequence) null;
      charSequenceArray0[1] = (CharSequence) null;
      charSequenceArray0[2] = (CharSequence) "null/empty items";
      charSequenceArray0[3] = (CharSequence) null;
      charSequenceArray0[4] = (CharSequence) "null/empty items";
      charSequenceArray0[5] = (CharSequence) null;
      boolean boolean0 = StringUtils.isAnyBlank(charSequenceArray0);
      assertEquals(6, charSequenceArray0.length);
      assertTrue(boolean0);
      
      String string2 = StringUtils.substringAfter("!w`47p{]~J:|M=", 3527);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertEquals("", string2);
      
      int int1 = StringUtils.indexOfAny((CharSequence) "null/empty items", charSequenceArray0);
      assertEquals(6, charSequenceArray0.length);
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      
      char[] charArray0 = new char[5];
      charArray0[0] = '<';
      charArray0[1] = '<';
      charArray0[2] = '<';
      charArray0[3] = '<';
      charArray0[4] = '<';
      int int2 = StringUtils.indexOfAnyBut(charSequenceArray0[1], charArray0);
      assertEquals(6, charSequenceArray0.length);
      assertEquals(5, charArray0.length);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals((-1), int2);
      assertArrayEquals(new char[] {'<', '<', '<', '<', '<'}, charArray0);
      
      int int3 = StringUtils.lastIndexOfAny("null/empty items", charSequenceArray0);
      assertEquals(6, charSequenceArray0.length);
      assertTrue(int3 == int1);
      assertTrue(int3 == int0);
      assertFalse(int3 == int2);
      assertEquals(0, int3);
      
      String string3 = StringUtils.join((byte[]) null, '<');
      assertNull(string3);
      
      int int4 = StringUtils.countMatches(charSequenceArray0[5], '<');
      assertEquals(6, charSequenceArray0.length);
      assertTrue(int4 == int1);
      assertTrue(int4 == int3);
      assertTrue(int4 == int0);
      assertFalse(int4 == int2);
      assertEquals(0, int4);
      
      int[] intArray0 = StringUtils.toCodePoints((CharSequence) null);
      assertNull(intArray0);
      
      int int5 = StringUtils.indexOf(charSequenceArray0[5], (CharSequence) null, 61);
      assertEquals(6, charSequenceArray0.length);
      assertFalse(int5 == int1);
      assertFalse(int5 == int3);
      assertFalse(int5 == int0);
      assertFalse(int5 == int4);
      assertTrue(int5 == int2);
      assertEquals((-1), int5);
      
      String string4 = StringUtils.join((Object[]) charSequenceArray0, "null/empty items");
      assertNotNull(string4);
      assertEquals(6, charSequenceArray0.length);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertEquals("null/empty itemsnull/empty itemsnull/empty itemsnull/empty itemsnull/empty itemsnull/empty itemsnull/empty items", string4);
      
      int int6 = StringUtils.lastIndexOfAny(charSequenceArray0[1], charSequenceArray0);
      assertEquals(6, charSequenceArray0.length);
      assertTrue(int6 == int2);
      assertFalse(int6 == int4);
      assertTrue(int6 == int5);
      assertFalse(int6 == int1);
      assertFalse(int6 == int0);
      assertFalse(int6 == int3);
      assertEquals((-1), int6);
      
      String string5 = StringUtils.removePattern("^2Pu?68\"%Canxi$u", (String) null);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertEquals("^2Pu?68\"%Canxi$u", string5);
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "java.lang.Object@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.Object@50d3e7ejava.lang.Object@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.Object@50d3e7e";
      stringArray0[0] = "java.lang.Object@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.Object@50d3e7ejava.lang.Object@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.Object@50d3e7e";
      stringArray0[2] = "java.lang.Object@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.Object@50d3e7ejava.lang.Object@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.Object@50d3e7e";
      stringArray0[3] = "java.lang.Object@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.Object@50d3e7ejava.lang.Object@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.Object@50d3e7e";
      String string0 = StringUtils.replaceEach("java.lang.Object@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.Object@50d3e7ejava.lang.Object@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.Object@50d3e7e", stringArray0, stringArray0);
      assertNotNull(string0);
      assertEquals(4, stringArray0.length);
      
      boolean boolean0 = StringUtils.isNumericSpace("java.lang.Object@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.Object@50d3e7ejava.lang.Object@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.Object@50d3e7e");
      assertFalse(boolean0);
      
      String string1 = StringUtils.defaultString("java.lang.Object@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.Object@50d3e7ejava.lang.Object@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.Object@50d3e7e", "java.lang.Object@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.Object@50d3e7ejava.lang.Object@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.Object@50d3e7e");
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      
      String string2 = StringUtils.wrap("pV&d&F@?O[k", "java.lang.Object@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.Object@50d3e7ejava.lang.Object@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.Object@50d3e7e");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      CharSequence[] charSequenceArray0 = new CharSequence[6];
      charSequenceArray0[0] = (CharSequence) "java.lang.Object@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.Object@50d3e7ejava.lang.Object@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.Object@50d3e7e";
      charSequenceArray0[1] = (CharSequence) "java.lang.Object@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.Object@50d3e7ejava.lang.Object@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.Object@50d3e7e";
      charSequenceArray0[2] = (CharSequence) "java.lang.Object@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.Object@50d3e7ejava.lang.Object@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.Object@50d3e7e";
      charSequenceArray0[3] = (CharSequence) "java.lang.Object@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.Object@50d3e7ejava.lang.Object@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.Object@50d3e7e";
      charSequenceArray0[4] = (CharSequence) "java.lang.Object@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.Object@50d3e7ejava.lang.Object@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.Object@50d3e7epV&d&F@?O[kjava.lang.Object@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.Object@50d3e7ejava.lang.Object@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.Object@50d3e7e";
      charSequenceArray0[5] = (CharSequence) "java.lang.Object@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.Object@50d3e7ejava.lang.Object@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.Object@50d3e7epV&d&F@?O[kjava.lang.Object@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.Object@50d3e7ejava.lang.Object@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.Object@50d3e7e";
      int int0 = StringUtils.indexOfDifference(charSequenceArray0);
      assertEquals(6, charSequenceArray0.length);
      assertEquals(248, int0);
      
      String string3 = StringUtils.chomp("java.lang.Object@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.Object@50d3e7ejava.lang.Object@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.Object@50d3e7e", "java.lang.Object@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.Object@50d3e7ejava.lang.Object@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.Object@50d3e7e");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals("", string3);
      
      boolean boolean1 = StringUtils.isAllEmpty(stringArray0);
      assertEquals(4, stringArray0.length);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = StringUtils.startsWithIgnoreCase((CharSequence) null, charSequenceArray0[5]);
      assertEquals(6, charSequenceArray0.length);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      int int1 = 3576;
      String string4 = StringUtils.center("pV&d&F@?O[k", 3576, 'I');
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      
      String string5 = StringUtils.wrapIfMissing("Aborting to protect against StackOverflowError - output of one loop is the input of another", "Aborting to protect against StackOverflowError - output of one loop is the input of another");
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertEquals("Aborting to protect against StackOverflowError - output of one loop is the input of another", string5);
      
      // Undeclared exception!
      try { 
        StringUtils.getLevenshteinDistance((CharSequence) string4, (CharSequence) null, 248);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      String string0 = StringUtils.join((Iterator<?>) null, "");
      assertNull(string0);
      
      // Undeclared exception!
      try { 
        StringUtils.getLevenshteinDistance((CharSequence) "", (CharSequence) null, 1747);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = " vs ";
      stringArray0[1] = " vs ";
      String string0 = StringUtils.EMPTY;
      assertNotNull(string0);
      assertEquals("", string0);
      
      int[] intArray0 = StringUtils.toCodePoints(" vs ");
      assertNotNull(intArray0);
      assertEquals(4, intArray0.length);
      assertArrayEquals(new int[] {32, 118, 115, 32}, intArray0);
      
      String string1 = StringUtils.prependIfMissingIgnoreCase(" vs ", " vs ", stringArray0);
      assertNotNull(string1);
      assertEquals(5, stringArray0.length);
      assertFalse(string1.equals((Object)string0));
      assertEquals(" vs ", string1);
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      String string0 = StringUtils.replaceChars("{}", '1', '#');
      assertNotNull(string0);
      assertEquals("{}", string0);
      
      boolean boolean0 = StringUtils.containsAny((CharSequence) "{}", (CharSequence) "{}");
      assertTrue(boolean0);
      
      boolean boolean1 = StringUtils.isWhitespace("{}");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens((String) null, "{}");
      assertNull(stringArray0);
      
      String string1 = StringUtils.substringBeforeLast("{}", "/");
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("{}", string1);
      
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      String string2 = StringUtils.getIfEmpty("8f?D", supplier0);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("8f?D", string2);
      
      int[] intArray0 = StringUtils.toCodePoints("{}");
      assertNotNull(intArray0);
      assertEquals(2, intArray0.length);
      assertArrayEquals(new int[] {123, 125}, intArray0);
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      long[] longArray0 = new long[5];
      longArray0[0] = 1L;
      longArray0[1] = (-1L);
      longArray0[2] = (-1282L);
      longArray0[3] = (-2869L);
      longArray0[4] = 0L;
      String string0 = StringUtils.join(longArray0, '&');
      assertNotNull(string0);
      assertEquals(5, longArray0.length);
      assertEquals("1&-1&-1282&-2869&0", string0);
      assertArrayEquals(new long[] {1L, (-1L), (-1282L), (-2869L), 0L}, longArray0);
      
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "1&-1&-1282&-2869&0", "#(SRT4?3`J sHgBR<");
      assertFalse(boolean0);
      
      String string1 = StringUtils.wrapIfMissing("Locale must not be null", 'S');
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("SLocale must not be nullS", string1);
      
      String string2 = StringUtils.replace("xm}TdUxm}TdU", "1&-1&-1282&-2869&0", "xm}TdUxm}TdU", (-5054));
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("xm}TdUxm}TdU", string2);
      
      boolean boolean1 = StringUtils.containsOnly((CharSequence) "xm}TdUxm}TdU", "The Array must not be nullThe Array must not be null");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("Locale must not be null");
      assertNotNull(stringArray0);
      assertEquals(9, stringArray0.length);
      
      int int0 = StringUtils.indexOf((CharSequence) "#(SRT4?3`J sHgBR<", (CharSequence) "#(SRT4?3`J sHgBR<");
      assertEquals(0, int0);
      
      String string3 = StringUtils.remove(" vs ", "SLocale must not be nullS");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals(" vs ", string3);
      
      String string4 = StringUtils.replaceChars("The Array must not be nullThe Array must not be null", 'L', '&');
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertEquals("The Array must not be nullThe Array must not be null", string4);
      
      String string5 = StringUtils.leftPad("Supplied value must be a valid byte literal between -128 and 127: [", 235);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertEquals("                                                                                                                                                                        Supplied value must be a valid byte literal between -128 and 127: [", string5);
      
      boolean boolean2 = StringUtils.isMixedCase("                                                                                                                                                                        Supplied value must be a valid byte literal between -128 and 127: [");
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2);
      
      String string6 = StringUtils.trim("The Array must not be nullThe Array must not be null");
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string3));
      assertTrue(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string0));
      assertEquals("The Array must not be nullThe Array must not be null", string6);
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      String string0 = StringUtils.wrap("W~p/]:FDw`qEP(g{Xm", 'v');
      assertNotNull(string0);
      assertEquals("vW~p/]:FDw`qEP(g{Xmv", string0);
      
      String string1 = StringUtils.removeStart("vW~p/]:FDw`qEP(g{Xmv", "a");
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("vW~p/]:FDw`qEP(g{Xmv", string1);
      
      String string2 = StringUtils.unwrap("vW~p/]:FDw`qEP(g{Xmv", 'v');
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("W~p/]:FDw`qEP(g{Xm", string2);
      
      int int0 = StringUtils.indexOf((CharSequence) "W~p/]:FDw`qEP(g{Xm", (-1179));
      assertEquals((-1), int0);
      
      String string3 = StringUtils.replaceAll("vW~p/]:FDw`qEP(g{Xmv", "The String must not be empty", "rDR]>v:Ef&C");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string0));
      assertEquals("vW~p/]:FDw`qEP(g{Xmv", string3);
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      String string0 = StringUtils.rightPad("pV&d&F@?O[k", 24, "pV&d&F@?O[k");
      assertNotNull(string0);
      assertEquals("pV&d&F@?O[kpV&d&F@?O[kpV", string0);
      
      String string1 = StringUtils.rightPad("pV&d&F@?O[kpV&d&F@?O[kpV", 24, "pV&d&F@?O[k");
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("pV&d&F@?O[kpV&d&F@?O[kpV", string1);
      
      String string2 = StringUtils.reverse((String) null);
      assertNull(string2);
      
      boolean boolean0 = StringUtils.isAlphaSpace("pV&d&F@?O[kpV&d&F@?O[kpV");
      assertFalse(boolean0);
      
      String string3 = StringUtils.uncapitalize("\":&iBe1y");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("\":&iBe1y", string3);
      
      boolean boolean1 = StringUtils.isAllBlank((CharSequence[]) null);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String string4 = StringUtils.replaceOnceIgnoreCase("xj<YHP", "org.kpache.commons.lang3.Str>ngUtils5|5pGW#urA~r?~3", "=n9");
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertEquals("xj<YHP", string4);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "cv ?(mX56URIc7k,", (CharSequence) "=n9", 1003);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      String string0 = StringUtils.replaceOnceIgnoreCase("T/RAfSADSsF$}wV#N", "T/RAfSADSsF$}wV#N", "T/RAfSADSsF$}wV#N");
      assertNotNull(string0);
      assertEquals("T/RAfSADSsF$}wV#N", string0);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "T/RAfSADSsF$}wV#N", (CharSequence) "T/RAfSADSsF$}wV#N");
      assertEquals(0, int0);
      
      String string1 = StringUtils.substringAfter("qh[9gCa+%2E1C^a", "Mx\"Vq");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      
      String string2 = StringUtils.normalizeSpace("A\"Pm1{3'mj");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("A\"Pm1{3'mj", string2);
      
      String string3 = StringUtils.removePattern("T/RAfSADSsF$}wV#N", "");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("T/RAfSADSsF$}wV#N", string3);
      
      boolean boolean0 = StringUtils.equalsIgnoreCase("", "qh[9gCa+%2E1C^a");
      assertFalse(boolean0);
      
      String string4 = StringUtils.valueOf((char[]) null);
      assertNull(string4);
      
      String string5 = StringUtils.stripStart("Mx\"Vq", "T/RAfSADSsF$}wV#N");
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertEquals("Mx\"Vq", string5);
      
      // Undeclared exception!
      try { 
        StringUtils.abbreviate("E2H{&o9$\"f#x2v?!h", 431, (-1580));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum abbreviation width is 4
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      String string0 = StringUtils.defaultString("Comparator should not be null.");
      assertNotNull(string0);
      assertEquals("Comparator should not be null.", string0);
      
      char[] charArray0 = new char[4];
      charArray0[0] = '[';
      charArray0[1] = '-';
      charArray0[2] = 'k';
      charArray0[3] = '-';
      String string1 = StringUtils.valueOf(charArray0);
      assertNotNull(string1);
      assertEquals(4, charArray0.length);
      assertFalse(string1.equals((Object)string0));
      assertEquals("[-k-", string1);
      assertArrayEquals(new char[] {'[', '-', 'k', '-'}, charArray0);
      
      String string2 = StringUtils.getCommonPrefix((String[]) null);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("", string2);
      
      String string3 = StringUtils.stripStart("ch", "ch");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string2));
      assertEquals("", string3);
      
      String string4 = StringUtils.replaceIgnoreCase((String) null, "Comparator should not be null.", "Comparator should not be null.");
      assertNull(string4);
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      String string0 = StringUtils.substringAfterLast("", 13);
      assertNotNull(string0);
      assertEquals("", string0);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "", "");
      assertEquals((-1), int0);
      
      String string1 = StringUtils.replaceOnce("", "af-_Xu1o~2a", "af-_Xu1o~2a");
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      String string2 = StringUtils.replaceEachRepeatedly("", stringArray0, stringArray0);
      assertNotNull(string2);
      assertEquals(4, stringArray0.length);
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertEquals("", string2);
      
      String string3 = StringUtils.stripAccents("j]>CS\u0003>d<3feovrm?_");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals("j]>CS\u0003>d<3feovrm?_", string3);
      
      int int1 = StringUtils.indexOfAny((CharSequence) "", "wj&S");
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      int int2 = StringUtils.lastIndexOf((CharSequence) "", (CharSequence) "");
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(0, int2);
      
      boolean boolean0 = StringUtils.isNotEmpty("");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isAnyEmpty(stringArray0);
      assertEquals(4, stringArray0.length);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String string4 = StringUtils.rotate("", 1813);
      assertNotNull(string4);
      assertTrue(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string2));
      assertEquals("", string4);
      
      String string5 = StringUtils.replaceEachRepeatedly("", stringArray0, stringArray0);
      assertNotNull(string5);
      assertEquals(4, stringArray0.length);
      assertTrue(string5.equals((Object)string2));
      assertTrue(string5.equals((Object)string1));
      assertTrue(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertTrue(string5.equals((Object)string0));
      assertEquals("", string5);
      
      int int3 = StringUtils.indexOfAnyBut((CharSequence) "", (CharSequence) "");
      assertTrue(int3 == int0);
      assertTrue(int3 == int1);
      assertFalse(int3 == int2);
      assertEquals((-1), int3);
      
      String string6 = StringUtils.substring("", 2);
      assertNotNull(string6);
      assertTrue(string6.equals((Object)string5));
      assertTrue(string6.equals((Object)string1));
      assertTrue(string6.equals((Object)string2));
      assertTrue(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string3));
      assertTrue(string6.equals((Object)string0));
      assertEquals("", string6);
      
      String string7 = StringUtils.leftPad("}QB+@JjS^A_j% 2W%", 1105, 'Z');
      assertNotNull(string7);
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string2));
      
      boolean boolean2 = StringUtils.isAlphaSpace("Index: ");
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2);
      
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      String string8 = StringUtils.join(intArray0, 'Z', 812, (-203));
      assertNotNull(string8);
      assertEquals(1, intArray0.length);
      assertFalse(string8.equals((Object)string7));
      assertTrue(string8.equals((Object)string4));
      assertTrue(string8.equals((Object)string1));
      assertTrue(string8.equals((Object)string0));
      assertTrue(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string3));
      assertTrue(string8.equals((Object)string5));
      assertEquals("", string8);
      assertArrayEquals(new int[] {0}, intArray0);
      
      int int4 = StringUtils.lastOrdinalIndexOf("", "Index: ", Integer.MAX_VALUE);
      assertTrue(int4 == int3);
      assertFalse(int4 == int2);
      assertTrue(int4 == int1);
      assertTrue(int4 == int0);
      assertEquals((-1), int4);
      
      String string9 = StringUtils.getCommonPrefix(stringArray0);
      assertNotNull(string9);
      assertEquals(4, stringArray0.length);
      assertTrue(string9.equals((Object)string5));
      assertFalse(string9.equals((Object)string7));
      assertTrue(string9.equals((Object)string1));
      assertTrue(string9.equals((Object)string0));
      assertTrue(string9.equals((Object)string4));
      assertFalse(string9.equals((Object)string3));
      assertTrue(string9.equals((Object)string2));
      assertEquals("", string9);
      
      boolean boolean3 = StringUtils.isAlphanumeric("");
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3);
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      String string0 = "US.^e:o_ufGpA";
      boolean boolean0 = StringUtils.startsWith("US.^e:o_ufGpA", "US.^e:o_ufGpA");
      assertTrue(boolean0);
      
      Locale locale0 = Locale.ROOT;
      assertNotNull(locale0);
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      
      String string1 = locale0.getDisplayLanguage();
      assertNotNull(string1);
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      
      Iterator<String> iterator0 = null;
      String string2 = StringUtils.join((Iterator<?>) null, "Search and Replace array lengths don't match: ");
      assertNull(string2);
      
      String string3 = StringUtils.center("", (-1));
      assertNotNull(string3);
      assertTrue(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals("", string3);
      
      // Undeclared exception!
      try { 
        StringUtils.getFuzzyDistance("", (CharSequence) null, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) "";
      int int0 = 8;
      String string0 = StringUtils.substringAfterLast("", 57);
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = "ClP>2# gfkKWB@vC";
      String string2 = StringUtils.defaultIfBlank((String) null, (String) null);
      assertNull(string2);
      
      String string3 = StringUtils.substring("ClP>2# gfkKWB@vC", 1141, 0);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string0));
      assertEquals("", string3);
      
      boolean boolean0 = StringUtils.isAlphanumericSpace("Threshold must not be negative");
      assertTrue(boolean0);
      
      String string4 = "W,n'M";
      String string5 = StringUtils.remove("pV&d&F@?O[kpV&d&F@?O[kpV", ']');
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertEquals("pV&d&F@?O[kpV&d&F@?O[kpV", string5);
      
      String string6 = StringUtils.stripToNull((String) null);
      assertNull(string6);
      
      boolean boolean1 = StringUtils.containsIgnoreCase((CharSequence) null, (CharSequence) null);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      Locale locale0 = Locale.ROOT;
      assertNotNull(locale0);
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      
      String string7 = locale0.getScript();
      assertNotNull(string7);
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertTrue(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string5));
      assertEquals("", string7);
      
      String string8 = locale0.getDisplayLanguage();
      assertNotNull(string8);
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertFalse(string8.equals((Object)string5));
      assertTrue(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string4));
      assertEquals("", string8);
      
      // Undeclared exception!
      try { 
        StringUtils.getFuzzyDistance("", (CharSequence) null, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "java.lang.Object@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.Object@50d3e7ejava.lang.Object@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.Object@50d3e7e";
      stringArray0[1] = "java.lang.Object@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.Object@50d3e7ejava.lang.Object@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.Object@50d3e7e";
      char[] charArray0 = new char[6];
      charArray0[0] = '%';
      charArray0[1] = 'P';
      charArray0[2] = 'R';
      charArray0[3] = '}';
      charArray0[4] = '{';
      charArray0[5] = '<';
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "java.lang.Object@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.Object@50d3e7ejava.lang.Object@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.Object@50d3e7e", charArray0);
      assertEquals(6, charArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new char[] {'%', 'P', 'R', '}', '{', '<'}, charArray0);
      
      String string0 = StringUtils.defaultIfEmpty("java.lang.Object@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.Object@50d3e7ejava.lang.Object@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.Object@50d3e7e", ")+><%m");
      assertNotNull(string0);
      
      String string1 = StringUtils.chomp(", Length: 0");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals(", Length: 0", string1);
      
      String[] stringArray1 = StringUtils.substringsBetween("{KI/.@B =~>7ccB96Ot", ", Length: 0", "Object varargs must not be null");
      assertNull(stringArray1);
      
      String string2 = StringUtils.wrap("5{Ri%yz{PJ", 'V');
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("V5{Ri%yz{PJV", string2);
      
      String string3 = StringUtils.replaceChars("{KI/.@B =~>7ccB96Ot", "{KI/.@B =~>7ccB96Ot", "j\"W?DWB");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals("j\"W?DWBB", string3);
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      String string0 = StringUtils.abbreviateMiddle("E2*1.s*OqQHFD&gQd9O", "E2*1.s*OqQHFD&gQd9O", (-526));
      assertNotNull(string0);
      assertEquals("E2*1.s*OqQHFD&gQd9O", string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      char[] charArray0 = new char[9];
      charArray0[0] = '';
      charArray0[1] = 'C';
      charArray0[2] = '\'';
      charArray0[3] = 'b';
      charArray0[4] = ';';
      charArray0[5] = '}';
      charArray0[6] = '&';
      charArray0[7] = 'r';
      charArray0[8] = '5';
      boolean boolean0 = StringUtils.containsNone((CharSequence) "E2*1.s*OqQHFD&gQd9O", charArray0);
      assertEquals(9, charArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new char[] {'', 'C', '\'', 'b', ';', '}', '&', 'r', '5'}, charArray0);
      
      boolean boolean1 = StringUtils.isEmpty("E2*1.s*OqQHFD&gQd9O");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string1 = StringUtils.overlay("wDPtb=E*0D +", " vs ", (-526), (-526));
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals(" vs wDPtb=E*0D +", string1);
      
      int int0 = StringUtils.lastIndexOfAny(" vs wDPtb=E*0D +", charSequenceArray0);
      assertEquals(2, charSequenceArray0.length);
      assertEquals((-1), int0);
      
      String string2 = StringUtils.substringBefore("k=-&:d!<z8&Gf", "*A5[&h'");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("k=-&:d!<z8&Gf", string2);
      
      String string3 = StringUtils.join((Object[]) charSequenceArray0, "4y", 108, (-526));
      assertNotNull(string3);
      assertEquals(2, charSequenceArray0.length);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals("", string3);
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      String string0 = StringUtils.chomp((String) null, "");
      assertNull(string0);
      
      String string1 = StringUtils.difference("c22", "");
      assertNotNull(string1);
      assertEquals("", string1);
      
      String string2 = StringUtils.trimToNull("Arguments cannot both be null");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertEquals("Arguments cannot both be null", string2);
      
      String string3 = StringUtils.removeEndIgnoreCase("YqFGu2k", "");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals("YqFGu2k", string3);
      
      String string4 = StringUtils.substringAfterLast("X0;Cb\"-FP", (String) null);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string1));
      assertEquals("", string4);
      
      // Undeclared exception!
      try { 
        StringUtils.abbreviate("java.lang.Object@7ae88c63java.lang.Object@46e4abbejava.lang.Object@7ae88c63java.lang.Object@2b93da5fjava.lang.Object@58b1910ajava.lang.Object@7ae88c63java.lang.Object@46e4abbejava.lang.Object@7ae88c63java.lang.Object@2b93da5fjava.lang.Object@58b1910a", (-2587), (-118));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum abbreviation width is 4
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      String string0 = StringUtils.substringAfterLast("\r", 8);
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.defaultIfBlank("Threshold must not be negative", "ClP>2# gfkKWB@vC");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("Threshold must not be negative", string1);
      
      String string2 = StringUtils.substring("Threshold must not be negative", 8, 1141);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("d must not be negative", string2);
      
      boolean boolean0 = StringUtils.isAlphanumericSpace("\r");
      assertFalse(boolean0);
      
      String string3 = StringUtils.remove("W,n'M", ']');
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals("W,n'M", string3);
      
      String string4 = StringUtils.stripToNull("W,n'M");
      assertNotNull(string4);
      assertTrue(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertEquals("W,n'M", string4);
      
      boolean boolean1 = StringUtils.containsIgnoreCase("W,n'M", "\r");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = StringUtils.isWhitespace("\r");
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("aPN,NaQRsnlj':", (String) null);
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      String string5 = StringUtils.substringBeforeLast("Minimum abbreviation width is %d", "\r");
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertEquals("Minimum abbreviation width is %d", string5);
      
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      String string6 = StringUtils.getIfEmpty("W,n'M", supplier0);
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string0));
      assertTrue(string6.equals((Object)string4));
      assertTrue(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string2));
      assertEquals("W,n'M", string6);
      
      boolean boolean3 = StringUtils.isMixedCase("\r");
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3);
      
      String string7 = StringUtils.repeat("The type must not be null", 32);
      assertNotNull(string7);
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string4));
      assertEquals("The type must not be nullThe type must not be nullThe type must not be nullThe type must not be nullThe type must not be nullThe type must not be nullThe type must not be nullThe type must not be nullThe type must not be nullThe type must not be nullThe type must not be nullThe type must not be nullThe type must not be nullThe type must not be nullThe type must not be nullThe type must not be nullThe type must not be nullThe type must not be nullThe type must not be nullThe type must not be nullThe type must not be nullThe type must not be nullThe type must not be nullThe type must not be nullThe type must not be nullThe type must not be nullThe type must not be nullThe type must not be nullThe type must not be nullThe type must not be nullThe type must not be nullThe type must not be null", string7);
      
      char[] charArray0 = new char[9];
      charArray0[0] = ']';
      charArray0[1] = ']';
      charArray0[2] = ']';
      charArray0[3] = ']';
      charArray0[4] = ']';
      charArray0[5] = ']';
      charArray0[6] = ']';
      charArray0[7] = ']';
      charArray0[8] = ']';
      // Undeclared exception!
      try { 
        CharBuffer.wrap(charArray0, (-731), 32);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      String string0 = StringUtils.replaceChars("{}", '1', '#');
      assertNotNull(string0);
      assertEquals("{}", string0);
      
      String string1 = StringUtils.replaceChars("{}", '1', '#');
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("{}", string1);
      
      boolean boolean0 = StringUtils.containsAny((CharSequence) "{}", (CharSequence) "{}");
      assertTrue(boolean0);
      
      Locale locale0 = Locale.ROOT;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      
      String string2 = locale0.getDisplayLanguage();
      assertNotNull(string2);
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("", string2);
      
      int int0 = StringUtils.getFuzzyDistance("{}", "", locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals(0, int0);
      
      int int1 = StringUtils.indexOf((CharSequence) "", (CharSequence) "", 13);
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      
      String string3 = StringUtils.trimToEmpty("{}");
      assertNotNull(string3);
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string1));
      assertEquals("{}", string3);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Stack<String> stack0 = new Stack<String>();
      assertNotNull(stack0);
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.contains("{}"));
      
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) stack0, locale_FilteringMode0);
      assertNotNull(list0);
      assertEquals(0, linkedList0.size());
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertFalse(stack0.contains("{}"));
      assertFalse(list0.contains("{}"));
      
      List<String> list1 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) list0);
      assertNotNull(list1);
      assertNotSame(list0, list1);
      assertNotSame(list1, list0);
      assertEquals(0, linkedList0.size());
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertTrue(list1.isEmpty());
      assertEquals(0, list1.size());
      assertTrue(list1.equals((Object)list0));
      assertFalse(stack0.contains("{}"));
      assertFalse(list0.contains("{}"));
      assertFalse(list1.contains("{}"));
      
      Object[] objectArray0 = new Object[0];
      String string4 = StringUtils.join(objectArray0, "", 435, 435);
      assertNotNull(string4);
      assertEquals(0, objectArray0.length);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertEquals("", string4);
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      String string0 = StringUtils.abbreviateMiddle("E2*1.s*OqQHFD&gQd9O", "E2*1.s*OqQHFD&gQd9O", (-526));
      assertNotNull(string0);
      assertEquals("E2*1.s*OqQHFD&gQd9O", string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[0] = (CharSequence) "E2*1.s*OqQHFD&gQd9O";
      charSequenceArray0[1] = (CharSequence) "E2*1.s*OqQHFD&gQd9O";
      boolean boolean0 = StringUtils.equalsAnyIgnoreCase("E2*1.s*OqQHFD&gQd9O", charSequenceArray0);
      assertEquals(2, charSequenceArray0.length);
      assertTrue(boolean0);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) (-526);
      longArray0[1] = (long) (-526);
      String string1 = StringUtils.join(longArray0, 'R');
      assertNotNull(string1);
      assertEquals(2, longArray0.length);
      assertFalse(string1.equals((Object)string0));
      assertEquals("-526R-526", string1);
      assertArrayEquals(new long[] {(-526L), (-526L)}, longArray0);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens(".M,KjXgwysMU,", "Supplied value must be a valid byte literal between -128 and 127: [", 3);
      assertNotNull(stringArray0);
      assertEquals(3, stringArray0.length);
      
      String[] stringArray1 = StringUtils.splitPreserveAllTokens("Search and Replace array lengths don't match: ", ".M,KjXgwysMU,");
      assertNotNull(stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(4, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      String string2 = StringUtils.normalizeSpace(".M,KjXgwysMU,");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals(".M,KjXgwysMU,", string2);
      
      boolean boolean1 = StringUtils.isNoneBlank(stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(4, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String string3 = StringUtils.capitalize(".M,KjXgwysMU,");
      assertNotNull(string3);
      assertTrue(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals(".M,KjXgwysMU,", string3);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "Supplied value must be a valid byte literal between -128 and 127: [", (CharSequence) "Strings must not be null");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("", "", 1067);
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      
      String string0 = StringUtils.left("", 1067);
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.chomp("");
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      
      String string2 = StringUtils.substringAfter((String) null, (-4842));
      assertNull(string2);
      
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[2] = true;
      booleanArray0[5] = true;
      booleanArray0[6] = false;
      String string3 = StringUtils.join(booleanArray0, '@');
      assertNotNull(string3);
      assertEquals(7, booleanArray0.length);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertTrue(Arrays.equals(new boolean[] {true, false, true, true, false, true, false}, booleanArray0));
      
      boolean boolean0 = StringUtils.isNumericSpace("");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      String string0 = StringUtils.capitalize("Aborting to protect against StackOverflowError - output of one loop is the input of anotherAborting to protect against StackOverflowError - output of one loop is the input of another");
      assertNotNull(string0);
      assertEquals("Aborting to protect against StackOverflowError - output of one loop is the input of anotherAborting to protect against StackOverflowError - output of one loop is the input of another", string0);
      
      String string1 = StringUtils.substringBetween("', has a length less than 2", "Exception cloning Cloneable type ");
      assertNull(string1);
      
      String[] stringArray0 = StringUtils.splitByCharacterType((String) null);
      assertNull(stringArray0);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = 0.0F;
      floatArray0[1] = 1.0F;
      floatArray0[2] = (-1.0F);
      // Undeclared exception!
      try { 
        StringUtils.join(floatArray0, '?', 16, 2526);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 16
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      String string0 = StringUtils.left("5|5pGW#urA~r?~3", (-494));
      assertNotNull(string0);
      assertEquals("", string0);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) 'u';
      String string1 = StringUtils.join(floatArray0, 'q');
      assertNotNull(string1);
      assertEquals(1, floatArray0.length);
      assertFalse(string1.equals((Object)string0));
      assertEquals("117.0", string1);
      assertArrayEquals(new float[] {117.0F}, floatArray0, 0.01F);
      
      String string2 = StringUtils.replaceChars("", "117.0", "");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertEquals("", string2);
      
      String string3 = StringUtils.trim("117.0");
      assertNotNull(string3);
      assertTrue(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals("117.0", string3);
      
      String string4 = StringUtils.mid("OxAAgc6#y%!", (-2710), 2);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertEquals("Ox", string4);
      
      String string5 = StringUtils.unwrap((String) null, 'q');
      assertNull(string5);
      
      boolean boolean0 = StringUtils.startsWith("Zu*4-n!o`!mH6S_vClP>2# gfkKWB@vC", "Zu*4-n!o`!mH6S_vClP>2# gfkKWB@vC");
      assertTrue(boolean0);
      
      String string6 = StringUtils.center("e<wmLWUhu", 10, 'u');
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string0));
      assertEquals("e<wmLWUhuu", string6);
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      String string0 = StringUtils.wrapIfMissing("Invalid locale format: ", '%');
      assertNotNull(string0);
      assertEquals("%Invalid locale format: %", string0);
      
      String[] stringArray0 = StringUtils.split("Object varargs must not be null", 'd');
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      String string1 = StringUtils.reverseDelimited("8mK|tVT/!k3p#eGfIZ", 'Q');
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("8mK|tVT/!k3p#eGfIZ", string1);
      
      int int0 = StringUtils.countMatches((CharSequence) "8mK|tVT/!k3p#eGfIZ", (CharSequence) "8mK|tVT/!k3p#eGfIZ");
      assertEquals(1, int0);
      
      String string2 = StringUtils.deleteWhitespace("8mK|tVT/!k3p#eGfIZ");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertEquals("8mK|tVT/!k3p#eGfIZ", string2);
      
      long[] longArray0 = new long[8];
      longArray0[0] = (long) 'd';
      longArray0[1] = (long) 1;
      longArray0[2] = (long) 'N';
      longArray0[3] = (long) 'd';
      longArray0[4] = (long) 1;
      longArray0[5] = (long) 'Q';
      longArray0[6] = (long) 1;
      longArray0[7] = (long) 'd';
      String string3 = StringUtils.join(longArray0, '[');
      assertNotNull(string3);
      assertEquals(8, longArray0.length);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals("100[1[78[100[1[81[1[100", string3);
      assertArrayEquals(new long[] {100L, 1L, 78L, 100L, 1L, 81L, 1L, 100L}, longArray0);
      
      String string4 = StringUtils.overlay("'[s/y0],", (String) null, (-1091), 1);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertEquals("[s/y0],", string4);
      
      String string5 = StringUtils.toRootLowerCase("/");
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertEquals("/", string5);
      
      String string6 = StringUtils.defaultIfBlank("The type must not be null", "MBDEMP");
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string4));
      assertEquals("The type must not be null", string6);
      
      boolean boolean0 = StringUtils.isAnyBlank(stringArray0);
      assertEquals(1, stringArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      String string0 = "Minimum abbreviation width is %d";
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      String string1 = StringUtils.getIfEmpty("Minimum abbreviation width is %d", supplier0);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("Minimum abbreviation width is %d", string1);
      
      String string2 = StringUtils.wrapIfMissing("Minimum abbreviation width is %d", "Minimum abbreviation width is %d");
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertEquals("Minimum abbreviation width is %d", string2);
      
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      String string3 = StringUtils.appendIfMissingIgnoreCase((String) null, "Minimum abbreviation width is %d", charSequenceArray0);
      assertNull(string3);
      assertEquals(0, charSequenceArray0.length);
      
      try { 
        StringUtils.getBytes("Minimum abbreviation width is %d", "Minimum abbreviation width is %d");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(UnsupportedEncodingException e) {
      }
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      String string0 = StringUtils.center("Cannot store ", 64, (String) null);
      assertNotNull(string0);
      assertEquals("                         Cannot store                           ", string0);
      
      String string1 = StringUtils.capitalize((String) null);
      assertNull(string1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[9];
      charSequenceArray0[0] = (CharSequence) null;
      charSequenceArray0[1] = (CharSequence) "                         Cannot store                           ";
      charSequenceArray0[2] = (CharSequence) "Cannot store ";
      charSequenceArray0[3] = (CharSequence) "";
      charSequenceArray0[5] = (CharSequence) "";
      charSequenceArray0[6] = (CharSequence) "                         Cannot store                           ";
      charSequenceArray0[7] = (CharSequence) "|3v\"%K_8b";
      charSequenceArray0[8] = (CharSequence) null;
      String string2 = StringUtils.appendIfMissingIgnoreCase((String) null, "                         Cannot store                           ", charSequenceArray0);
      assertNull(string2);
      assertEquals(9, charSequenceArray0.length);
      
      boolean boolean0 = StringUtils.isEmpty((CharSequence) null);
      assertTrue(boolean0);
      
      boolean boolean1 = StringUtils.isWhitespace(charSequenceArray0[8]);
      assertEquals(9, charSequenceArray0.length);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      String string0 = StringUtils.remove("#r", 'y');
      assertNotNull(string0);
      assertEquals("#r", string0);
      
      int int0 = StringUtils.indexOf((CharSequence) "#r", (CharSequence) "#r");
      assertEquals(0, int0);
      
      String[] stringArray0 = new String[0];
      String string1 = StringUtils.SPACE;
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals(" ", string1);
      
      int int1 = StringUtils.indexOfAny((CharSequence) " ", (CharSequence[]) stringArray0);
      assertEquals(0, stringArray0.length);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      String string2 = StringUtils.leftPad(" ", 2302, "#r");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      String string3 = StringUtils.rotate("#r", 0);
      assertNotNull(string3);
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals("#r", string3);
      
      // Undeclared exception!
      try { 
        StringUtils.removeAll("Y(ro/M1bi-J!i-,d>n+", "Y(ro/M1bi-J!i-,d>n+");
        fail("Expecting exception: PatternSyntaxException");
      
      } catch(PatternSyntaxException e) {
         //
         // Unclosed group near index 19
         // Y(ro/M1bi-J!i-,d>n+
         //
         verifyException("java.util.regex.Pattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      String string0 = StringUtils.center("", 12);
      assertNotNull(string0);
      assertEquals("           ", string0);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = ".M,KjXgwsMU,";
      String string1 = StringUtils.join((boolean[]) null, 'l');
      assertNull(string1);
      
      String string2 = StringUtils.reverseDelimited("J_]Z(/oOK,3x$Cl", 'l');
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertEquals("J_]Z(/oOK,3x$C", string2);
      
      int int0 = StringUtils.ordinalIndexOf("           ", "J_]Z(/oOK,3x$Cl", 112);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      String string0 = StringUtils.chomp((String) null, "");
      assertNull(string0);
      
      String string1 = StringUtils.difference("c22", "");
      assertNotNull(string1);
      assertEquals("", string1);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object[] objectArray0 = new Object[0];
      String string2 = StringUtils.join(objectArray0, '\\', 102, 102);
      assertNotNull(string2);
      assertEquals(0, objectArray0.length);
      assertTrue(string2.equals((Object)string1));
      assertEquals("", string2);
      
      String string3 = StringUtils.wrapIfMissing((String) null, "99t\"7g.j");
      assertNull(string3);
      
      String string4 = StringUtils.swapCase("Supplied value must be a valid byte literal between -32768 and 32767: [");
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertEquals("sUPPLIED VALUE MUST BE A VALID BYTE LITERAL BETWEEN -32768 AND 32767: [", string4);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "", (CharSequence) "", 2);
      assertEquals(0, int0);
      
      String string5 = StringUtils.toRootLowerCase((String) null);
      assertNull(string5);
      
      String string6 = StringUtils.defaultIfBlank("Minimum abbreviation width is %d", "");
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string1));
      assertEquals("Minimum abbreviation width is %d", string6);
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      boolean boolean0 = StringUtils.isWhitespace("US.^e:o_ufGpA");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isAllUpperCase("(d");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      String string0 = StringUtils.trim("nF9Myjy>nq");
      assertNotNull(string0);
      assertEquals("nF9Myjy>nq", string0);
      
      String string1 = StringUtils.mid((String) null, 3429, (byte)0);
      assertNull(string1);
      
      String string2 = StringUtils.unwrap((String) null, '[');
      assertNull(string2);
      
      String string3 = StringUtils.rightPad("Comparator should not be null.", (-2), 'I');
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertEquals("Comparator should not be null.", string3);
      
      boolean boolean0 = StringUtils.startsWith("Comparator should not be null.", "Comparator should not be null.");
      assertTrue(boolean0);
      
      String string4 = StringUtils.center("#^7j@azeY8]S", 19, '5');
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      String string0 = StringUtils.swapCase("/swe]");
      assertNotNull(string0);
      assertEquals("/SWE]", string0);
      
      String string1 = StringUtils.unwrap("The Array must not be null", 'R');
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("The Array must not be null", string1);
      
      String string2 = StringUtils.center("/swe]", 19, 'R');
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("RRRRRRR/swe]RRRRRRR", string2);
      
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "The Array must not be null", (CharSequence) "The Array must not be null");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      String string0 = StringUtils.trim("Z>yD=");
      assertNotNull(string0);
      assertEquals("Z>yD=", string0);
      
      String string1 = StringUtils.mid("Z>yD=", 18, 10);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      
      String string2 = StringUtils.unwrap("Z>yD=", 'w');
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertEquals("Z>yD=", string2);
      
      boolean boolean0 = StringUtils.startsWith("", "Z>yD=");
      assertFalse(boolean0);
      
      String string3 = StringUtils.center("Z>yD=", (int) (byte)104, ';');
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals(";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;Z>yD=;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;", string3);
      
      int int0 = StringUtils.indexOfAnyBut((CharSequence) ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;Z>yD=;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;", (CharSequence) ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;Z>yD=;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      String string0 = StringUtils.uncapitalize("\r");
      assertNotNull(string0);
      assertEquals("\r", string0);
      
      boolean boolean0 = StringUtils.containsAny((CharSequence) "\r", (CharSequence) "\r");
      assertTrue(boolean0);
      
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "\r", (CharSequence) "\r");
      assertEquals((-1), int0);
      
      String string1 = StringUtils.difference("\r", "\r");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      ArrayList<Locale.Category> arrayList0 = new ArrayList<Locale.Category>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      String string0 = StringUtils.join((List<?>) arrayList0, '!', 2, 2);
      assertNotNull(string0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertEquals("", string0);
      
      charSequenceArray0[0] = (CharSequence) "";
      String[] stringArray0 = new String[8];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "";
      stringArray0[6] = "";
      stringArray0[7] = "";
      String string1 = StringUtils.replaceEach("", stringArray0, stringArray0);
      assertNotNull(string1);
      assertEquals(8, stringArray0.length);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      
      charSequenceArray0[1] = (CharSequence) "";
      String string2 = StringUtils.replaceEachRepeatedly("", stringArray0, stringArray0);
      assertNotNull(string2);
      assertEquals(8, stringArray0.length);
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertEquals("", string2);
      
      charSequenceArray0[2] = (CharSequence) "";
      short[] shortArray0 = new short[0];
      String string3 = StringUtils.join(shortArray0, '/');
      assertNotNull(string3);
      assertEquals(0, shortArray0.length);
      assertTrue(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string1));
      assertEquals("", string3);
      assertArrayEquals(new short[] {}, shortArray0);
      
      charSequenceArray0[3] = (CharSequence) "";
      boolean boolean0 = StringUtils.isAllEmpty(charSequenceArray0);
      assertEquals(4, charSequenceArray0.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = " vs ";
      stringArray0[1] = "Ua):3]I<ozRQ`OI![";
      String string0 = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      boolean boolean0 = StringUtils.isNumericSpace("");
      assertTrue(boolean0);
      
      String[] stringArray1 = StringUtils.splitByWholeSeparator("", "Qn?tR52");
      assertNotNull(stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(0, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      String string1 = StringUtils.leftPad("w{aj,'_BZV${}~'", 2312, '[');
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.rightPad("", 2312, "Qn?tR52");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 1.0;
      // Undeclared exception!
      try { 
        StringUtils.join(doubleArray0, 'u', (-173), 3);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -173
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      String string0 = StringUtils.LF;
      assertNotNull(string0);
      assertEquals("\n", string0);
      
      boolean boolean0 = StringUtils.isAlphanumeric("\n");
      assertFalse(boolean0);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "\r", (CharSequence) "\r", 2147483226);
      assertEquals(0, int0);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "\r";
      String string1 = StringUtils.rotate("\r", 2147483226);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("\r", string1);
      
      String string2 = StringUtils.substringBetween("\r", "5=U", "I8|%2SSI8|%2SS");
      assertNull(string2);
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      String string0 = StringUtils.LF;
      assertNotNull(string0);
      assertEquals("\n", string0);
      
      boolean boolean0 = StringUtils.equalsIgnoreCase("\n", "\n");
      assertTrue(boolean0);
      
      String string1 = StringUtils.chop("\n");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      
      String string2 = StringUtils.leftPad("r2", (int) '[', '[');
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[r2", string2);
      
      boolean boolean1 = StringUtils.containsNone((CharSequence) "r2", " in an array of ");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string3 = StringUtils.strip(" in an array of ");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals("in an array of", string3);
      
      String string4 = StringUtils.stripToEmpty("Wd|}51/]/&`bsA");
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertEquals("Wd|}51/]/&`bsA", string4);
      
      String[] stringArray0 = new String[7];
      stringArray0[0] = ",/66A7z~@r:n5z ?m";
      stringArray0[1] = "Wd|}51/]/&`bsA";
      stringArray0[2] = " in an array of ";
      stringArray0[3] = "[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[r2";
      stringArray0[4] = "[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[r2";
      stringArray0[5] = "e)iya!";
      stringArray0[6] = "r2";
      String[] stringArray1 = StringUtils.stripAll(stringArray0);
      assertNotNull(stringArray1);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(7, stringArray0.length);
      assertEquals(7, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      int int0 = StringUtils.compareIgnoreCase("*v3+|", "org.apache.commons.lang3.exception.CloneFailedException", true);
      assertEquals((-69), int0);
      
      String string5 = StringUtils.trim("Wd|}51/]/&`bsA");
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertTrue(string5.equals((Object)string4));
      assertEquals("Wd|}51/]/&`bsA", string5);
      
      String string6 = StringUtils.replaceChars("Wd|}51/]/&`bsA", "Wd|}51/]/&`bsA", "org.apache.commons.lang3.ObjectUtils");
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string0));
      assertEquals("org.apacae.comm", string6);
      
      boolean boolean2 = StringUtils.isWhitespace("Wd|}51/]/&`bsA");
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      int int1 = StringUtils.lastIndexOfAny("\n", stringArray1);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(7, stringArray0.length);
      assertEquals(7, stringArray1.length);
      assertFalse(int1 == int0);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals((-1), int1);
      
      String string7 = StringUtils.defaultIfBlank(" ", "Wd|}51/]/&`bsA");
      assertNotNull(string7);
      assertTrue(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string2));
      assertTrue(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string1));
      assertEquals("Wd|}51/]/&`bsA", string7);
  }

  @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      String string0 = StringUtils.repeat((String) null, 2857);
      assertNull(string0);
      
      int int0 = StringUtils.indexOf((CharSequence) null, (CharSequence) null);
      assertEquals((-1), int0);
      
      String string1 = StringUtils.capitalize((String) null);
      assertNull(string1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[7];
      charSequenceArray0[0] = (CharSequence) null;
      charSequenceArray0[1] = (CharSequence) null;
      charSequenceArray0[2] = (CharSequence) null;
      charSequenceArray0[3] = (CharSequence) null;
      charSequenceArray0[4] = (CharSequence) null;
      charSequenceArray0[5] = (CharSequence) null;
      charSequenceArray0[6] = (CharSequence) null;
      int int1 = StringUtils.indexOfAny((CharSequence) null, charSequenceArray0);
      assertEquals(7, charSequenceArray0.length);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      assertNotNull(stringWriter0);
      assertEquals("", stringWriter0.toString());
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) (-77);
      floatArray0[1] = 0.0F;
      floatArray0[2] = 0.0F;
      floatArray0[0] = (float) (-77);
      boolean boolean0 = StringUtils.isAsciiPrintable("neIWU73Gjc0]2b");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      String string0 = StringUtils.upperCase((String) null, (Locale) null);
      assertNull(string0);
      
      boolean boolean0 = StringUtils.isAsciiPrintable((CharSequence) null);
      assertFalse(boolean0);
      
      String string1 = StringUtils.substringBeforeLast("Ve9.r", (String) null);
      assertNotNull(string1);
      assertEquals("Ve9.r", string1);
      
      String string2 = StringUtils.removeStart("Ve9.r", "Ve9.r");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertEquals("", string2);
      
      String string3 = StringUtils.stripToEmpty("");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string2));
      assertEquals("", string3);
      
      ArrayDeque<Integer> arrayDeque0 = new ArrayDeque<Integer>();
      assertNotNull(arrayDeque0);
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      
      Iterator<Integer> iterator0 = arrayDeque0.descendingIterator();
      assertNotNull(iterator0);
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      
      String string4 = StringUtils.join(iterator0, 'P');
      assertNotNull(string4);
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      assertTrue(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertEquals("", string4);
  }

  @Test(timeout = 4000)
  public void test287()  throws Throwable  {
      String string0 = StringUtils.lowerCase("java.lang.Object@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.Object@50d3e7ejava.lang.Object@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.Object@50d3e7e");
      assertNotNull(string0);
      
      String string1 = StringUtils.removeAll("java.lang.object@56b5c730java.lang.object@1de495b1java.lang.object@56b5c730java.lang.object@56b5c730java.lang.object@50d3e7ejava.lang.object@56b5c730java.lang.object@1de495b1java.lang.object@56b5c730java.lang.object@56b5c730java.lang.object@50d3e7e", "java.lang.Object@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.Object@50d3e7ejava.lang.Object@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.Object@50d3e7e");
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      
      boolean boolean0 = StringUtils.containsNone((CharSequence) "java.lang.Object@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.Object@50d3e7ejava.lang.Object@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.Object@50d3e7e", "!>]@{q6R%U^t?h,");
      assertFalse(boolean0);
      
      String string2 = StringUtils.replaceChars("java.lang.object@56b5c730java.lang.object@1de495b1java.lang.object@56b5c730java.lang.object@56b5c730java.lang.object@50d3e7ejava.lang.object@56b5c730java.lang.object@1de495b1java.lang.object@56b5c730java.lang.object@56b5c730java.lang.object@50d3e7e", 'B', '\"');
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      
      String string3 = StringUtils.rightPad("|BaGO3.$", (int) '\"', "org.apache.commons.lang3.StringUtils5|5pGW#urA~r?~3");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals("|BaGO3.$org.apache.commons.lang3.S", string3);
      
      String string4 = StringUtils.center("wN|", 2387, '8');
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      
      // Undeclared exception!
      StringUtils.getLevenshteinDistance((CharSequence) "java.lang.object@56b5c730java.lang.object@1de495b1java.lang.object@56b5c730java.lang.object@56b5c730java.lang.object@50d3e7ejava.lang.object@56b5c730java.lang.object@1de495b1java.lang.object@56b5c730java.lang.object@56b5c730java.lang.object@50d3e7e", (CharSequence) "java.lang.Object@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.Object@50d3e7ejava.lang.Object@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.Object@50d3e7e", (int) '\"');
  }

  @Test(timeout = 4000)
  public void test288()  throws Throwable  {
      String string0 = StringUtils.left(".I>38f~OoV", 22);
      assertNotNull(string0);
      assertEquals(".I>38f~OoV", string0);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) 'u';
      floatArray0[1] = (float) 0;
      floatArray0[2] = (float) 'q';
      String string1 = StringUtils.join(floatArray0, '-');
      assertNotNull(string1);
      assertEquals(3, floatArray0.length);
      assertFalse(string1.equals((Object)string0));
      assertEquals("117.0-0.0-113.0", string1);
      assertArrayEquals(new float[] {117.0F, 0.0F, 113.0F}, floatArray0, 0.01F);
      
      String string2 = StringUtils.replaceChars("", (String) null, "#");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("", string2);
      
      String string3 = StringUtils.toRootUpperCase("#");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("#", string3);
      
      String string4 = StringUtils.reverse("#");
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertEquals("#", string4);
      
      String string5 = StringUtils.abbreviate((String) null, (-494));
      assertNull(string5);
  }

  @Test(timeout = 4000)
  public void test289()  throws Throwable  {
      String string0 = "";
      String string1 = StringUtils.defaultIfEmpty("", "");
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      
      String string2 = "uaa*@Y";
      CharSequence[] charSequenceArray0 = new CharSequence[8];
      charSequenceArray0[0] = (CharSequence) "";
      String string3 = "K:]o@)Y#vu";
      int int0 = (-23);
      // Undeclared exception!
      try { 
        StringUtils.abbreviate("K:]o@)Y#vu", "uaa*@Y", (-23));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum abbreviation width is 7
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test290()  throws Throwable  {
      String string0 = StringUtils.trim("%DhCH;Zr=g8l6-");
      assertNotNull(string0);
      assertEquals("%DhCH;Zr=g8l6-", string0);
      
      String string1 = StringUtils.unwrap("%DhCH;Zr=g8l6-", 'j');
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("%DhCH;Zr=g8l6-", string1);
      
      String[] stringArray0 = StringUtils.split("%DhCH;Zr=g8l6-", "Strings must not be null");
      assertNotNull(stringArray0);
      assertEquals(4, stringArray0.length);
      
      String string2 = StringUtils.leftPad("O|ZE$6%azQb6vY0", 160, (String) null);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("                                                                                                                                                 O|ZE$6%azQb6vY0", string2);
      
      boolean boolean0 = StringUtils.equals((CharSequence) "%DhCH;Zr=g8l6-", (CharSequence) null);
      assertFalse(boolean0);
      
      try { 
        StringUtils.getBytes("xxUjava.lang.Object@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.Object@50d3e7ejava.lang.Object@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.Object@50d3e7ejava.lang.Object@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.Object@50d3e7ejava.lang.Object@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.Object@50d3e7exxUjava.lang.Object@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.Object@50d3e7ejava.lang.Object@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.Object@50d3e7ejava.lang.Object@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.Object@50d3e7ejava.lang.Object@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.Object@50d3e7e", ";dJ_0tFYwnr)oA%h");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(UnsupportedEncodingException e) {
      }
  }

  @Test(timeout = 4000)
  public void test291()  throws Throwable  {
      String string0 = StringUtils.leftPad("aD", 48);
      assertNotNull(string0);
      assertEquals("                                              aD", string0);
      
      boolean boolean0 = StringUtils.isMixedCase("                                              aD");
      assertTrue(boolean0);
      
      String string1 = StringUtils.SPACE;
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals(" ", string1);
      
      int int0 = StringUtils.countMatches((CharSequence) "                                              aD", (CharSequence) " ");
      assertEquals(46, int0);
      
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase(" ");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      String string2 = StringUtils.rotate("                                              aD", 48);
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("                                              aD", string2);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) 48;
      floatArray0[1] = (float) 48;
      floatArray0[2] = (float) 48;
      floatArray0[3] = (float) 46;
      floatArray0[4] = (float) 'T';
      floatArray0[5] = (float) 48;
      String string3 = StringUtils.join(floatArray0, 'T');
      assertNotNull(string3);
      assertEquals(6, floatArray0.length);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("48.0T48.0T48.0T46.0T84.0T48.0", string3);
      assertArrayEquals(new float[] {48.0F, 48.0F, 48.0F, 46.0F, 84.0F, 48.0F}, floatArray0, 0.01F);
      
      String string4 = StringUtils.replaceChars(" ", "et", "                                              aD");
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertEquals(" ", string4);
      
      String string5 = "5";
      String string6 = "D|3emOM&";
      String string7 = StringUtils.toRootUpperCase("D|3emOM&");
      assertNotNull(string7);
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string4));
      assertEquals("D|3EMOM&", string7);
      
      String string8 = StringUtils.abbreviate("=3_FmkXG", 46);
      assertNotNull(string8);
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string7));
      assertEquals("=3_FmkXG", string8);
      
      boolean boolean1 = StringUtils.equals((CharSequence) "et", (CharSequence) "et");
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      try { 
        StringUtils.getBytes("", "                                              aD");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(UnsupportedEncodingException e) {
      }
  }

  @Test(timeout = 4000)
  public void test292()  throws Throwable  {
      String string0 = StringUtils.trim("%DhCH;Zr=g8l6-");
      assertNotNull(string0);
      assertEquals("%DhCH;Zr=g8l6-", string0);
      
      String string1 = StringUtils.unwrap("%DhCH;Zr=g8l6-", 'j');
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("%DhCH;Zr=g8l6-", string1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      int int0 = StringUtils.indexOfAny((CharSequence) "%DhCH;Zr=g8l6-", charSequenceArray0);
      assertEquals(0, charSequenceArray0.length);
      assertEquals((-1), int0);
      
      String string2 = StringUtils.joinWith("%DhCH;Zr=g8l6-", charSequenceArray0);
      assertNotNull(string2);
      assertEquals(0, charSequenceArray0.length);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("", string2);
      
      String string3 = "Strings must not be null";
      String[] stringArray0 = StringUtils.split("%DhCH;Zr=g8l6-", "Strings must not be null");
      assertNotNull(stringArray0);
      assertEquals(4, stringArray0.length);
      
      boolean boolean0 = StringUtils.isMixedCase("%DhCH;Zr=g8l6-");
      assertTrue(boolean0);
      
      String string4 = StringUtils.leftPad("O|ZE$6%azQb6vY0", 160, (String) null);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertEquals("                                                                                                                                                 O|ZE$6%azQb6vY0", string4);
      
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) "Strings must not be null";
      objectArray0[1] = (Object) "%DhCH;Zr=g8l6-";
      objectArray0[2] = (Object) null;
      objectArray0[3] = (Object) "Strings must not be null";
      objectArray0[4] = (Object) null;
      objectArray0[5] = (Object) null;
      objectArray0[6] = (Object) "%DhCH;Zr=g8l6-";
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[7] = object0;
      objectArray0[8] = (Object) "%DhCH;Zr=g8l6-";
      // Undeclared exception!
      try { 
        StringUtils.join(objectArray0, 'j', 102, 160);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 102
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test293()  throws Throwable  {
      String string0 = StringUtils.wrap("", "");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.leftPad("", 12, "");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("nput of another", "");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test294()  throws Throwable  {
      String string0 = StringUtils.replaceOnceIgnoreCase("", "", "");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.left("Threshold must not be negative", (-2608));
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      
      String string2 = StringUtils.leftPad("Threshold must not be negative", 122);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("                                                                                            Threshold must not be negative", string2);
      
      boolean boolean0 = StringUtils.isMixedCase("Threshold must not be negative");
      assertTrue(boolean0);
      
      String string3 = StringUtils.trim("");
      assertNotNull(string3);
      assertTrue(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string0));
      assertEquals("", string3);
  }

  @Test(timeout = 4000)
  public void test295()  throws Throwable  {
      String[] stringArray0 = new String[5];
      int int0 = 6;
      // Undeclared exception!
      try { 
        StringUtils.join((Object[]) stringArray0, 'e', 6, 108);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 6
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test296()  throws Throwable  {
      Object[] objectArray0 = new Object[8];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      Object object1 = new Object();
      assertNotNull(object1);
      assertFalse(object1.equals((Object)object0));
      
      objectArray0[1] = object1;
      Object object2 = new Object();
      assertNotNull(object2);
      assertFalse(object2.equals((Object)object1));
      assertFalse(object2.equals((Object)object0));
      
      objectArray0[2] = object2;
      Object object3 = new Object();
      assertNotNull(object3);
      assertFalse(object3.equals((Object)object1));
      assertFalse(object3.equals((Object)object2));
      assertFalse(object3.equals((Object)object0));
      
      objectArray0[3] = object3;
      Object object4 = new Object();
      assertNotNull(object4);
      assertFalse(object4.equals((Object)object3));
      assertFalse(object4.equals((Object)object1));
      assertFalse(object4.equals((Object)object2));
      assertFalse(object4.equals((Object)object0));
      
      objectArray0[4] = object4;
      Object object5 = new Object();
      assertNotNull(object5);
      assertFalse(object5.equals((Object)object2));
      assertFalse(object5.equals((Object)object4));
      assertFalse(object5.equals((Object)object0));
      assertFalse(object5.equals((Object)object1));
      assertFalse(object5.equals((Object)object3));
      
      objectArray0[5] = object5;
      Object object6 = new Object();
      assertNotNull(object6);
      assertFalse(object6.equals((Object)object4));
      assertFalse(object6.equals((Object)object0));
      assertFalse(object6.equals((Object)object5));
      assertFalse(object6.equals((Object)object1));
      assertFalse(object6.equals((Object)object2));
      assertFalse(object6.equals((Object)object3));
      
      objectArray0[6] = object6;
      Object object7 = new Object();
      assertNotNull(object7);
      assertFalse(object7.equals((Object)object2));
      assertFalse(object7.equals((Object)object1));
      assertFalse(object7.equals((Object)object3));
      assertFalse(object7.equals((Object)object6));
      assertFalse(object7.equals((Object)object5));
      assertFalse(object7.equals((Object)object4));
      assertFalse(object7.equals((Object)object0));
      
      objectArray0[7] = object7;
      // Undeclared exception!
      try { 
        StringUtils.join(objectArray0, '8', (-975), (-842));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -975
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test297()  throws Throwable  {
      String string0 = StringUtils.center("xxUjava.lang.Object@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.Object@50d3e7ejava.lang.Object@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.Object@50d3e7ejava.lang.Object@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.Object@50d3e7ejava.lang.Object@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.Object@50d3e7e", 16);
      assertNotNull(string0);
      
      String string1 = StringUtils.removeStart("xxUjava.lang.Object@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.Object@50d3e7ejava.lang.Object@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.Object@50d3e7ejava.lang.Object@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.Object@50d3e7ejava.lang.Object@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.Object@50d3e7e", "xxUjava.lang.Object@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.Object@50d3e7ejava.lang.Object@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.Object@50d3e7ejava.lang.Object@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.Object@50d3e7ejava.lang.Object@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.Object@50d3e7e");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      
      boolean boolean0 = StringUtils.isMixedCase("");
      assertFalse(boolean0);
      
      String string2 = StringUtils.stripEnd("U2+DfS:Vb%!,", "");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("U2+DfS:Vb%!,", string2);
      
      int int0 = StringUtils.lastOrdinalIndexOf("U2+DfS:Vb%!,", "", 247);
      assertEquals(12, int0);
      
      String string3 = StringUtils.truncate("xxUjava.lang.Object@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.Object@50d3e7ejava.lang.Object@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.Object@50d3e7ejava.lang.Object@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.Object@50d3e7ejava.lang.Object@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.Object@50d3e7e", 12);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals("xxUjava.lang", string3);
      
      String string4 = StringUtils.stripToNull("");
      assertNull(string4);
      
      String[] stringArray0 = new String[7];
      stringArray0[0] = "";
      stringArray0[1] = "xxUjava.lang";
      stringArray0[2] = "";
      stringArray0[3] = "xxUjava.lang";
      stringArray0[4] = "xxUjava.lang";
      stringArray0[5] = "org.apache.commons.lang3.CharSequenceUtils";
      stringArray0[6] = null;
      String string5 = StringUtils.getCommonPrefix(stringArray0);
      assertNotNull(string5);
      assertEquals(7, stringArray0.length);
      assertFalse(string5.equals((Object)string2));
      assertTrue(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertEquals("", string5);
      
      int int1 = StringUtils.indexOfDifference((CharSequence[]) stringArray0);
      assertEquals(7, stringArray0.length);
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      String string6 = null;
      String string7 = StringUtils.abbreviateMiddle("xxUjava.lang", (String) null, 12);
      assertNotNull(string7);
      assertFalse(string7.equals((Object)string1));
      assertTrue(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string5));
      assertEquals("xxUjava.lang", string7);
      
      String string8 = "/swe]";
      Locale locale0 = Locale.forLanguageTag("/swe]");
      assertNotNull(locale0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getLanguage());
      
      List<Locale.LanguageRange> list0 = null;
      PriorityQueue<String> priorityQueue0 = new PriorityQueue<String>();
      assertNotNull(priorityQueue0);
      assertEquals(0, priorityQueue0.size());
      assertFalse(priorityQueue0.contains("U2+DfS:Vb%!,"));
      
      // Undeclared exception!
      try { 
        Locale.filterTags((List<Locale.LanguageRange>) null, (Collection<String>) priorityQueue0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test298()  throws Throwable  {
      long[] longArray0 = new long[5];
      longArray0[0] = 4L;
      longArray0[1] = (-1L);
      longArray0[2] = (-1282L);
      longArray0[3] = 4L;
      longArray0[4] = 0L;
      String string0 = StringUtils.join(longArray0, '&');
      assertNotNull(string0);
      assertEquals(5, longArray0.length);
      assertEquals("4&-1&-1282&4&0", string0);
      assertArrayEquals(new long[] {4L, (-1L), (-1282L), 4L, 0L}, longArray0);
      
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "4&-1&-1282&4&0", "#(SRT4?3`J sHgBR<");
      assertFalse(boolean0);
      
      String string1 = StringUtils.wrapIfMissing("Locale must not be null", 'S');
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("SLocale must not be nullS", string1);
      
      String string2 = StringUtils.replace("xm}TdUxm}TdU", "4&-1&-1282&4&0", "xm}TdUxm}TdU", (-5054));
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("xm}TdUxm}TdU", string2);
      
      boolean boolean1 = StringUtils.containsOnly((CharSequence) "xm}TdUxm}TdU", "The Array must not be nullThe Array must not be null");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("Locale must not be null");
      assertNotNull(stringArray0);
      assertEquals(9, stringArray0.length);
      
      int int0 = StringUtils.indexOf((CharSequence) "#(SRT4?3`J sHgBR<", (CharSequence) "#(SRT4?3`J sHgBR<");
      assertEquals(0, int0);
      
      String string3 = StringUtils.remove(" vs ", "SLocale must not be nullS");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals(" vs ", string3);
      
      String string4 = StringUtils.replaceChars("The Array must not be nullThe Array must not be null", 'L', '&');
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertEquals("The Array must not be nullThe Array must not be null", string4);
      
      String string5 = StringUtils.leftPad("Supplied value must be a valid byte literal between -128 and 127: [", 235);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertEquals("                                                                                                                                                                        Supplied value must be a valid byte literal between -128 and 127: [", string5);
      
      boolean boolean2 = StringUtils.isMixedCase("                                                                                                                                                                        Supplied value must be a valid byte literal between -128 and 127: [");
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2);
      
      String string6 = StringUtils.trim("The Array must not be nullThe Array must not be null");
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string1));
      assertTrue(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string3));
      assertEquals("The Array must not be nullThe Array must not be null", string6);
  }

  @Test(timeout = 4000)
  public void test299()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      String string0 = StringUtils.trim("Z>yD=");
      assertNotNull(string0);
      assertEquals("Z>yD=", string0);
      
      // Undeclared exception!
      try { 
        StringUtils.removePattern("QZ]a<:O-w&V}JdiO)", "QZ]a<:O-w&V}JdiO)");
        fail("Expecting exception: PatternSyntaxException");
      
      } catch(PatternSyntaxException e) {
         //
         // Unmatched closing ')' near index 16
         // QZ]a<:O-w&V}JdiO)
         //                 ^
         //
         verifyException("java.util.regex.Pattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test300()  throws Throwable  {
      String string0 = StringUtils.stripAccents("wDPtb=E*0D +");
      assertNotNull(string0);
      assertEquals("wDPtb=E*0D +", string0);
      
      String string1 = StringUtils.defaultString("wDPtb=E*0D +");
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("wDPtb=E*0D +", string1);
      
      String string2 = StringUtils.capitalize("/h81Uu");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("/h81Uu", string2);
      
      String string3 = StringUtils.replace(" in an array of ", "wDPtb=E*0D +", "wDPtb=E*0D +");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals(" in an array of ", string3);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) " in an array of ", (CharSequence) "/h81Uu");
      assertEquals((-1), int0);
      
      String string4 = StringUtils.getDigits(" in an array of ");
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertEquals("", string4);
  }

  @Test(timeout = 4000)
  public void test301()  throws Throwable  {
      String string0 = StringUtils.replace("", "US.^e:o_ufGpA", "", 0);
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.replaceIgnoreCase("", "US.^e:o_ufGpA", "The String must not be empty", (-3695));
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      
      Locale locale0 = Locale.KOREA;
      assertNotNull(locale0);
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("KR", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      
      String string2 = StringUtils.removeStartIgnoreCase("", (String) null);
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertEquals("", string2);
      
      Locale locale1 = Locale.GERMANY;
      assertNotNull(locale1);
      assertNotSame(locale1, locale0);
      assertEquals("de_DE", locale1.toString());
      assertEquals("DE", locale1.getCountry());
      assertEquals("de", locale1.getLanguage());
      assertEquals("deu", locale1.getISO3Language());
      assertEquals("DEU", locale1.getISO3Country());
      assertEquals("", locale1.getVariant());
      assertFalse(locale1.equals((Object)locale0));
      
      String string3 = StringUtils.trim("m<n%N`{WO<0>o\"?lx3");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals("m<n%N`{WO<0>o\"?lx3", string3);
      
      String string4 = StringUtils.left((String) null, (-3695));
      assertNull(string4);
      
      String string5 = StringUtils.unwrap("", ':');
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string3));
      assertTrue(string5.equals((Object)string2));
      assertTrue(string5.equals((Object)string0));
      assertTrue(string5.equals((Object)string1));
      assertEquals("", string5);
      
      boolean boolean0 = StringUtils.startsWith("", "m<n%N`{WO<0>o\"?lx3");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.contains((CharSequence) "US.^e:o_ufGpA", (CharSequence) "US.^e:o_ufGpA");
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      int int0 = StringUtils.compareIgnoreCase("...", "", true);
      assertEquals(3, int0);
      
      int[] intArray0 = new int[6];
      intArray0[0] = (-3695);
      intArray0[1] = (int) ':';
      intArray0[2] = (-3695);
      intArray0[3] = (int) ':';
      intArray0[4] = (int) ':';
      intArray0[5] = (int) ':';
      // Undeclared exception!
      try { 
        StringUtils.join(intArray0, 'i', 58, 2551);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 58
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test302()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("j", "j", 1051);
      assertNotNull(stringArray0);
      assertEquals(2, stringArray0.length);
      
      String string0 = StringUtils.left((String) null, 1051);
      assertNull(string0);
      
      int int0 = StringUtils.compare("wk#[y!i", " ", true);
      assertEquals(87, int0);
  }

  @Test(timeout = 4000)
  public void test303()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "<)v(vKh";
      stringArray0[1] = "";
      String string0 = StringUtils.LF;
      assertNotNull(string0);
      assertEquals("\n", string0);
      
      String string1 = StringUtils.replaceIgnoreCase("Threshold must not be negative", "Locale must not be null", "", (-3695));
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("Threshold must not be negative", string1);
      
      int[] intArray0 = new int[8];
      intArray0[0] = 80;
      intArray0[1] = (-3695);
      intArray0[2] = (-3695);
      intArray0[3] = 80;
      intArray0[4] = (-2663);
      intArray0[5] = (-3695);
      intArray0[6] = 6;
      intArray0[7] = 80;
      String string2 = StringUtils.join(intArray0, 'K');
      assertNotNull(string2);
      assertEquals(8, intArray0.length);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("80K-3695K-3695K80K-2663K-3695K6K80", string2);
      assertArrayEquals(new int[] {80, (-3695), (-3695), 80, (-2663), (-3695), 6, 80}, intArray0);
      
      String string3 = StringUtils.swapCase((String) null);
      assertNull(string3);
      
      String string4 = StringUtils.leftPad("'", (-2556), 'U');
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertEquals("'", string4);
      
      String string5 = StringUtils.repeat('s', 80);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertEquals("ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss", string5);
      
      String string6 = StringUtils.firstNonEmpty(stringArray0);
      assertNotNull(string6);
      assertEquals(2, stringArray0.length);
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string5));
      assertEquals("<)v(vKh", string6);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 6;
      String string7 = StringUtils.join(doubleArray0, 'K');
      assertNotNull(string7);
      assertEquals(1, doubleArray0.length);
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string4));
      assertEquals("6.0", string7);
      assertArrayEquals(new double[] {6.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test304()  throws Throwable  {
      String string0 = StringUtils.wrap((String) null, 'U');
      assertNull(string0);
      
      String string1 = StringUtils.wrap((String) null, 'U');
      assertNull(string1);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens((String) null, (String) null, (-2078));
      assertNull(stringArray0);
      
      String string2 = StringUtils.substring(">VD!tB79^>!", (-494));
      assertNotNull(string2);
      assertEquals(">VD!tB79^>!", string2);
      
      boolean boolean0 = StringUtils.equalsAny(">VD!tB79^>!", (CharSequence[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test305()  throws Throwable  {
      String string0 = "\\u";
      String[] stringArray0 = StringUtils.substringsBetween(string0, " is not in the range '0' - '9'", " is not in the range '0' - '9'");
      assertNull(stringArray0);
      
      Locale locale0 = Locale.FRANCE;
      assertNotNull(locale0);
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("fr_FR", locale0.toString());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("FR", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      
      String string1 = StringUtils.upperCase(" is not in the range '0' - '9'", locale0);
      assertNotNull(string1);
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("fr_FR", locale0.toString());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("FR", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertFalse(string1.equals((Object)string0));
      assertEquals(" IS NOT IN THE RANGE '0' - '9'", string1);
      
      boolean boolean0 = StringUtils.isAsciiPrintable(string0);
      assertFalse(string0.equals((Object)string1));
      assertTrue(boolean0);
      
      String string2 = StringUtils.substringBeforeLast(" is not in the range '0' - '9'", " is not in the range '0' - '9'");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("", string2);
  }

  @Test(timeout = 4000)
  public void test306()  throws Throwable  {
      String string0 = StringUtils.left("5|5pGW#urA~r?~3", (-494));
      assertNotNull(string0);
      assertEquals("", string0);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) 'u';
      String string1 = StringUtils.removeFirst("", "5|5pGW#urA~r?~3");
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      
      String string2 = StringUtils.replaceChars("", "", "");
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertEquals("", string2);
      
      String string3 = StringUtils.toRootUpperCase("Minimum abbreviation width is %d");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("MINIMUM ABBREVIATION WIDTH IS %D", string3);
      
      String string4 = StringUtils.reverse("}\"}|{Lx@=E=_OU9d=");
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertEquals("=d9UO_=E=@xL{|}\"}", string4);
      
      Locale locale0 = Locale.GERMANY;
      assertNotNull(locale0);
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("de", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("DE", locale0.getCountry());
      assertEquals("de_DE", locale0.toString());
      
      String string5 = StringUtils.trim("b0&n");
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertEquals("b0&n", string5);
      
      String string6 = StringUtils.mid(" is not in the range '0' - '9'", (-494), 16);
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string5));
      assertEquals(" is not in the r", string6);
      
      String string7 = StringUtils.unwrap("Vi7*@#&Uq_gjPf", 'q');
      assertNotNull(string7);
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string1));
      assertEquals("Vi7*@#&Uq_gjPf", string7);
      
      boolean boolean0 = StringUtils.startsWith("}\"}|{Lx@=E=_OU9d=", "Aborting to protect against StackOverflowError - output of one loop is the input of another");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test307()  throws Throwable  {
      boolean boolean0 = StringUtils.containsOnly((CharSequence) null, "k]uJp{mQ8S!");
      assertFalse(boolean0);
      
      String string0 = StringUtils.center("k]uJp{mQ8S!", 0, 'A');
      assertNotNull(string0);
      assertEquals("k]uJp{mQ8S!", string0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparator("The character ", ".M,KjXgwysMU,", 508);
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      Integer[] integerArray0 = new Integer[13];
      Integer integer0 = new Integer(1385);
      assertNotNull(integer0);
      assertEquals(1385, (int)integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(0);
      assertNotNull(integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertEquals(0, (int)integer1);
      
      integerArray0[1] = integer1;
      int int0 = StringUtils.compareIgnoreCase("maxWith cannot be negative", "...", false);
      assertEquals(63, int0);
      
      Locale locale0 = Locale.CANADA;
      assertNotNull(locale0);
      assertEquals("en", locale0.getLanguage());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("en_CA", locale0.toString());
      assertEquals("CA", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      
      String string1 = locale0.getDisplayCountry();
      assertNotNull(string1);
      assertEquals("en", locale0.getLanguage());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("en_CA", locale0.toString());
      assertEquals("CA", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      assertFalse(string1.equals((Object)string0));
      assertEquals("Canada", string1);
      
      String[] stringArray1 = Locale.getISOCountries();
      assertNotNull(stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(250, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      String string2 = locale0.getDisplayVariant();
      assertNotNull(string2);
      assertEquals("en", locale0.getLanguage());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("en_CA", locale0.toString());
      assertEquals("CA", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("", string2);
      
      String string3 = StringUtils.removeEnd("]fg/_gd -&(f'", "The character ");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals("]fg/_gd -&(f'", string3);
      
      String string4 = StringUtils.substringBefore("z>Kc9aID5Xb3x$Z", (int) integerArray0[0]);
      assertNotNull(string4);
      assertEquals(13, integerArray0.length);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertEquals("z>Kc9aID5Xb3x$Z", string4);
      
      String[] stringArray2 = StringUtils.splitPreserveAllTokens("v>*ts8_w5", ".M,KjXgwysMU,");
      assertNotNull(stringArray2);
      assertNotSame(stringArray2, stringArray1);
      assertNotSame(stringArray2, stringArray0);
      assertEquals(3, stringArray2.length);
      assertFalse(stringArray2.equals((Object)stringArray1));
      assertFalse(stringArray2.equals((Object)stringArray0));
      
      String string5 = StringUtils.replace((String) null, (String) null, "Canada", 1839);
      assertNull(string5);
  }

  @Test(timeout = 4000)
  public void test308()  throws Throwable  {
      String string0 = StringUtils.rightPad("r4", 23, "The Array must not be null");
      assertNotNull(string0);
      assertEquals("r4The Array must not be", string0);
      
      String[] stringArray0 = new String[7];
      stringArray0[1] = "The Array must not be null";
      stringArray0[2] = "The String must not be empty";
      stringArray0[3] = "The Array must not be null";
      stringArray0[4] = "r4The Array must not be";
      stringArray0[5] = "r4The Array must not be";
      String[] stringArray1 = new String[6];
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      stringArray1[0] = "The String must not be empty";
      stringArray1[1] = "The Array must not be null";
      String string1 = StringUtils.reverse("java.lang.Object@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.Object@50d3e7ejava.lang.Object@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.Object@50d3e7ejava.lang.Object@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.Object@50d3e7ejava.lang.Object@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.Object@50d3e7e");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("e7e3d05@tcejbO.gnal.avaj037c5b65@tcejbO.gnal.avaj037c5b65@tcejbO.gnal.avaj1b594ed1@tcejbO.gnal.avaj037c5b65@tcejbO.gnal.avaje7e3d05@tcejbO.gnal.avaj037c5b65@tcejbO.gnal.avaj037c5b65@tcejbO.gnal.avaj1b594ed1@tcejbO.gnal.avaj037c5b65@tcejbO.gnal.avaje7e3d05@tcejbO.gnal.avaj037c5b65@tcejbO.gnal.avaj037c5b65@tcejbO.gnal.avaj1b594ed1@tcejbO.gnal.avaj037c5b65@tcejbO.gnal.avaje7e3d05@tcejbO.gnal.avaj037c5b65@tcejbO.gnal.avaj037c5b65@tcejbO.gnal.avaj1b594ed1@tcejbO.gnal.avaj037c5b65@tcejbO.gnal.avaj", string1);
      
      boolean boolean0 = StringUtils.containsIgnoreCase("r4", "The String must not be empty");
      assertFalse(boolean0);
      
      String string2 = StringUtils.removeStart("r4", "The Array must not be null");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("r4", string2);
      
      boolean boolean1 = StringUtils.isAlphaSpace("r4");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string3 = StringUtils.uncapitalize("r4");
      assertNotNull(string3);
      assertTrue(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("r4", string3);
      
      String string4 = StringUtils.strip("java.lang.Object@59de2e44java.lang.Object@174a3341java.lang.Object@59de2e44java.lang.Object@34dae399java.lang.Object@6a4de2b5java.lang.Object@59de2e44java.lang.Object@174a3341java.lang.Object@59de2e44java.lang.Object@34dae399java.lang.Object@6a4de2b5", "r4");
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      
      String string5 = StringUtils.removeIgnoreCase("p{InCombiningDiacriticalMarks}+", "p{InCombiningDiacriticalMarks}+");
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertEquals("", string5);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "r4The Array must not be", (CharSequence) "");
      assertEquals(23, int0);
      
      boolean boolean2 = StringUtils.isAllBlank(stringArray0);
      assertNotSame(stringArray0, stringArray1);
      assertEquals(7, stringArray0.length);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      
      String string6 = StringUtils.replaceOnceIgnoreCase("8'~ ~t0j8Tm[lX`7", "The Array must not be null", "r4");
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string1));
      assertEquals("8'~ ~t0j8Tm[lX`7", string6);
      
      int int1 = StringUtils.lastIndexOf((CharSequence) "r4", (CharSequence) "The Array must not be null", (-3196));
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test309()  throws Throwable  {
      String string0 = StringUtils.center("", 12);
      assertNotNull(string0);
      assertEquals("           ", string0);
      
      String[] stringArray0 = new String[19];
      stringArray0[0] = ".M,KjXgwsMU,";
      stringArray0[1] = "";
      // Undeclared exception!
      try { 
        StringUtils.replaceEachRepeatedly(".M,KjXgwsMU,", stringArray0, stringArray0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Aborting to protect against StackOverflowError - output of one loop is the input of another
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test310()  throws Throwable  {
      String string0 = StringUtils.mid((String) null, 245, 6);
      assertNull(string0);
      
      PriorityQueue<Integer> priorityQueue0 = new PriorityQueue<Integer>();
      assertNotNull(priorityQueue0);
      assertEquals(0, priorityQueue0.size());
      assertFalse(priorityQueue0.contains(245));
      
      String string1 = StringUtils.rightPad("object", 788, (String) null);
      assertNotNull(string1);
      assertEquals("objectstring1);
      
      String string2 = StringUtils.chop("xoRQJAo_");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertEquals("xoRQJAo", string2);
      
      String string3 = StringUtils.normalizeSpace("");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals("", string3);
      
      String string4 = StringUtils.stripEnd("xoRQJAo_", (String) null);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertEquals("xoRQJAo_", string4);
  }

  @Test(timeout = 4000)
  public void test311()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = " vs ";
      String string0 = StringUtils.strip(" vs ");
      assertNotNull(string0);
      assertEquals("vs", string0);
      
      double double0 = StringUtils.getJaroWinklerDistance("vs", "vs");
      assertEquals(1.0, double0, 0.01);
      
      boolean boolean0 = StringUtils.equalsAny(" vs ", stringArray0);
      assertEquals(5, stringArray0.length);
      assertTrue(boolean0);
      
      boolean boolean1 = StringUtils.isNumeric("vs");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      Integer integer0 = new Integer(13);
      assertNotNull(integer0);
      assertEquals(13, (int)integer0);
      
      int int0 = new Integer(13);
      assertEquals(13, int0);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = (double) '}';
      int int1 = StringUtils.compareIgnoreCase(" vs ", "", true);
      assertFalse(int1 == int0);
      assertEquals(4, int1);
      
      Locale locale0 = Locale.CANADA;
      assertNotNull(locale0);
      assertEquals("en", locale0.getLanguage());
      assertEquals("en_CA", locale0.toString());
      assertEquals("CA", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      
      String string1 = locale0.getDisplayCountry();
      assertNotNull(string1);
      assertEquals("en", locale0.getLanguage());
      assertEquals("en_CA", locale0.toString());
      assertEquals("CA", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertFalse(string1.equals((Object)string0));
      assertEquals("Canada", string1);
      
      String[] stringArray1 = Locale.getISOLanguages();
      assertNotNull(stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(188, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      String string2 = locale0.getDisplayVariant();
      assertNotNull(string2);
      assertEquals("en", locale0.getLanguage());
      assertEquals("en_CA", locale0.toString());
      assertEquals("CA", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("", string2);
      
      Locale locale1 = Locale.GERMANY;
      assertNotNull(locale1);
      assertNotSame(locale1, locale0);
      assertEquals("DEU", locale1.getISO3Country());
      assertEquals("deu", locale1.getISO3Language());
      assertEquals("de_DE", locale1.toString());
      assertEquals("", locale1.getVariant());
      assertEquals("DE", locale1.getCountry());
      assertEquals("de", locale1.getLanguage());
      assertFalse(locale1.equals((Object)locale0));
      
      String string3 = StringUtils.trim("aLkiK\"4$nesi");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("aLkiK\"4$nesi", string3);
      
      String string4 = StringUtils.mid((String) null, 13, 3364);
      assertNull(string4);
      
      String string5 = StringUtils.unwrap("', has a length less than 2", '}');
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertEquals("', has a length less than 2", string5);
      
      boolean boolean2 = StringUtils.startsWith("Aborting to protect against StackOverflowError - output of one loop is the input of another", "', has a length less than 2");
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test312()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)108;
      byteArray0[1] = (byte) (-43);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-105);
      byteArray0[5] = (byte) (-118);
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)54;
      String string0 = StringUtils.join(byteArray0, '#', (int) (byte)108, (int) (byte)0);
      assertNotNull(string0);
      assertEquals(8, byteArray0.length);
      assertEquals("", string0);
      assertArrayEquals(new byte[] {(byte)108, (byte) (-43), (byte)0, (byte)0, (byte) (-105), (byte) (-118), (byte)0, (byte)54}, byteArray0);
      
      double[] doubleArray0 = new double[15];
      doubleArray0[0] = (double) (byte)0;
      doubleArray0[1] = 0.1;
      String string1 = StringUtils.substringBeforeLast("", "");
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn("").when(supplier0).get();
      String string2 = StringUtils.getIfEmpty("", supplier0);
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertEquals("", string2);
  }

  @Test(timeout = 4000)
  public void test313()  throws Throwable  {
      String string0 = StringUtils.abbreviateMiddle("E2*1.s*OqQHFD&gQd9O", "E2*1.s*OqQHFD&gQd9O", (-526));
      assertNotNull(string0);
      assertEquals("E2*1.s*OqQHFD&gQd9O", string0);
      
      int[] intArray0 = new int[9];
      intArray0[0] = (-5235);
      intArray0[1] = (-1347);
      intArray0[2] = (int) 'h';
      intArray0[3] = (-5235);
      intArray0[4] = (-526);
      intArray0[5] = (-5235);
      intArray0[6] = (-526);
      intArray0[7] = (int) 'h';
      intArray0[8] = (int) ':';
      String string1 = StringUtils.join(intArray0, 'h', 104, (-2105));
      assertNotNull(string1);
      assertEquals(9, intArray0.length);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertArrayEquals(new int[] {(-5235), (-1347), 104, (-5235), (-526), (-5235), (-526), 104, 58}, intArray0);
      
      Locale locale0 = Locale.ENGLISH;
      assertNotNull(locale0);
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      
      int int0 = StringUtils.getFuzzyDistance("E2*1.s*OqQHFD&gQd9O", "E2*1.s*OqQHFD&gQd9O", locale0);
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals(55, int0);
      
      int int1 = StringUtils.countMatches((CharSequence) "", 'N');
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      String string2 = StringUtils.removeEndIgnoreCase("E2*1.s*OqQHFD&gQd9O", "X\"B7:~7Q^}6J");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertEquals("E2*1.s*OqQHFD&gQd9O", string2);
  }

  @Test(timeout = 4000)
  public void test314()  throws Throwable  {
      String string0 = StringUtils.join((Iterator<?>) null, "");
      assertNull(string0);
      
      boolean boolean0 = StringUtils.isAllUpperCase((CharSequence) null);
      assertFalse(boolean0);
      
      String string1 = StringUtils.join((char[]) null, 'e', (-1427), (-1427));
      assertNull(string1);
      
      boolean boolean1 = StringUtils.isWhitespace((CharSequence) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test315()  throws Throwable  {
      String string0 = StringUtils.strip(".M,KjXgwysMU,", "6QLsLp_");
      assertNotNull(string0);
      assertEquals(".M,KjXgwysMU,", string0);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) ".M,KjXgwysMU,", (CharSequence) "6QLsLp_");
      assertEquals(12, int0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[6];
      charSequenceArray0[0] = (CharSequence) ".M,KjXgwysMU,";
      charSequenceArray0[1] = (CharSequence) "6QLsLp_";
      charSequenceArray0[2] = (CharSequence) "6QLsLp_";
      charSequenceArray0[3] = (CharSequence) "";
      charSequenceArray0[4] = (CharSequence) "";
      charSequenceArray0[5] = (CharSequence) "6QLsLp_";
      boolean boolean0 = StringUtils.isAllBlank(charSequenceArray0);
      assertEquals(6, charSequenceArray0.length);
      assertFalse(boolean0);
      
      String string1 = StringUtils.replaceOnceIgnoreCase(";mZ%*3@Cj N2", "y3#izYdkj&tpxQU3.n2", ".M,KjXgwysMU,");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals(";mZ%*3@Cj N2", string1);
      
      int int1 = StringUtils.lastIndexOf((CharSequence) ";mZ%*3@Cj N2", (CharSequence) ";mZ%*3@Cj N2", (-1839));
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      boolean boolean1 = StringUtils.isAllUpperCase(charSequenceArray0[3]);
      assertEquals(6, charSequenceArray0.length);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      char[] charArray0 = new char[4];
      charArray0[0] = '&';
      charArray0[1] = '/';
      charArray0[2] = 'B';
      charArray0[3] = 'A';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      assertNotNull(charBuffer0);
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(4, charBuffer0.remaining());
      assertEquals(4, charBuffer0.capacity());
      assertEquals(4, charBuffer0.length());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.isDirect());
      assertEquals(4, charBuffer0.limit());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals("&/BA", charBuffer0.toString());
      assertEquals(0, charBuffer0.arrayOffset());
      assertTrue(charBuffer0.hasArray());
      assertEquals(4, charArray0.length);
      assertArrayEquals(new char[] {'&', '/', 'B', 'A'}, charArray0);
      
      CharBuffer charBuffer1 = StringUtils.defaultIfEmpty(charBuffer0, charBuffer0);
      assertNotNull(charBuffer1);
      assertSame(charBuffer0, charBuffer1);
      assertSame(charBuffer1, charBuffer0);
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(4, charBuffer0.remaining());
      assertEquals(4, charBuffer0.capacity());
      assertEquals(4, charBuffer0.length());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.isDirect());
      assertEquals(4, charBuffer0.limit());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals("&/BA", charBuffer0.toString());
      assertEquals(0, charBuffer0.arrayOffset());
      assertTrue(charBuffer0.hasArray());
      assertEquals(4, charBuffer1.capacity());
      assertEquals(0, charBuffer1.arrayOffset());
      assertEquals(4, charBuffer1.limit());
      assertFalse(charBuffer1.isReadOnly());
      assertEquals(4, charBuffer1.remaining());
      assertTrue(charBuffer1.hasRemaining());
      assertTrue(charBuffer1.hasArray());
      assertEquals(4, charBuffer1.length());
      assertEquals(0, charBuffer1.position());
      assertEquals("&/BA", charBuffer1.toString());
      assertFalse(charBuffer1.isDirect());
      assertEquals(4, charArray0.length);
      assertArrayEquals(new char[] {'&', '/', 'B', 'A'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test316()  throws Throwable  {
      String string0 = StringUtils.remove("W~p/]:FDw`qEP(g{Xm", "W~p/]:FDw`qEP(g{Xm");
      assertNotNull(string0);
      assertEquals("", string0);
      
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "");
      assertNotNull(charBuffer0);
      assertTrue(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.limit());
      assertFalse(charBuffer0.hasRemaining());
      assertEquals("", charBuffer0.toString());
      assertFalse(charBuffer0.isDirect());
      assertFalse(charBuffer0.hasArray());
      assertEquals(0, charBuffer0.length());
      assertEquals(0, charBuffer0.position());
      assertEquals(0, charBuffer0.remaining());
      assertEquals(0, charBuffer0.capacity());
      
      CharBuffer charBuffer1 = charBuffer0.slice();
      assertNotNull(charBuffer1);
      assertNotSame(charBuffer0, charBuffer1);
      assertNotSame(charBuffer1, charBuffer0);
      assertTrue(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.limit());
      assertFalse(charBuffer0.hasRemaining());
      assertEquals("", charBuffer0.toString());
      assertFalse(charBuffer0.isDirect());
      assertFalse(charBuffer0.hasArray());
      assertEquals(0, charBuffer0.length());
      assertEquals(0, charBuffer0.position());
      assertEquals(0, charBuffer0.remaining());
      assertEquals(0, charBuffer0.capacity());
      assertEquals("", charBuffer1.toString());
      assertTrue(charBuffer1.isReadOnly());
      assertEquals(0, charBuffer1.remaining());
      assertEquals(0, charBuffer1.capacity());
      assertEquals(0, charBuffer1.position());
      assertEquals(0, charBuffer1.limit());
      assertFalse(charBuffer1.hasRemaining());
      assertFalse(charBuffer1.isDirect());
      assertFalse(charBuffer1.hasArray());
      assertEquals(0, charBuffer1.length());
      assertTrue(charBuffer1.equals((Object)charBuffer0));
      
      CharSequence[] charSequenceArray0 = new CharSequence[7];
      charSequenceArray0[0] = (CharSequence) charBuffer1;
      charSequenceArray0[1] = (CharSequence) "";
      String string1 = StringUtils.removeFirst("", "");
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      
      String[] stringArray0 = new String[10];
      stringArray0[0] = "W~p/]:FDw`qEP(g{Xm";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "";
      String[] stringArray1 = StringUtils.stripAll(stringArray0, "ClP>2# gfkKWB@vC");
      assertNotNull(stringArray1);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(10, stringArray0.length);
      assertEquals(10, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      String string2 = StringUtils.replaceChars("uHG[I-#c;3[ 'r", '?', '?');
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("uHG[I-#c;3[ 'r", string2);
      
      String string3 = StringUtils.rightPad((String) null, 404, "");
      assertNull(string3);
      
      String string4 = StringUtils.center("", 2387, '.');
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      
      String string5 = StringUtils.wrapIfMissing(" is not in the range '0' - '9'", string4);
      assertNotNull(string5);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      
      // Undeclared exception!
      try { 
        StringUtils.getLevenshteinDistance((CharSequence) "uHG[I-#c;3[ 'r", (CharSequence) "|BaGO3.$", (-4132));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Threshold must not be negative
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test317()  throws Throwable  {
      String string0 = "comparator";
      String string1 = StringUtils.normalizeSpace("comparator");
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("comparator", string1);
      
      boolean boolean0 = StringUtils.contains((CharSequence) "comparator", (CharSequence) "comparator");
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        StringUtils.getLevenshteinDistance((CharSequence) "o4R+8,w0_XT", (CharSequence) "comparator", (-2119));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Threshold must not be negative
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test318()  throws Throwable  {
      long[] longArray0 = new long[5];
      longArray0[1] = 0L;
      longArray0[3] = 4L;
      longArray0[4] = 0L;
      String string0 = StringUtils.wrapIfMissing("Locale must not be null", 'S');
      assertNotNull(string0);
      assertEquals("SLocale must not be nullS", string0);
      
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("Locale must not be null");
      assertNotNull(stringArray0);
      assertEquals(9, stringArray0.length);
      
      int int0 = StringUtils.indexOf((CharSequence) "#(SRT4?3`Jp sHgBR<", (CharSequence) "#(SRT4?3`Jp sHgBR<");
      assertEquals(0, int0);
      
      String string1 = StringUtils.trimToNull("xm}TdUxm}TdU");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("xm}TdUxm}TdU", string1);
  }

  @Test(timeout = 4000)
  public void test319()  throws Throwable  {
      String string0 = StringUtils.substringAfterLast("\r", 8);
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.defaultIfBlank("Threshold must not be negative", "ClP>2# gfkKWB@vC");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("Threshold must not be negative", string1);
      
      String string2 = StringUtils.substring("Threshold must not be negative", 8, 1141);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("d must not be negative", string2);
      
      boolean boolean0 = StringUtils.isAlphanumericSpace("\r");
      assertFalse(boolean0);
      
      String string3 = StringUtils.remove("W,n'M", ']');
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals("W,n'M", string3);
      
      String string4 = StringUtils.stripToNull("W,n'M");
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string3));
      assertEquals("W,n'M", string4);
      
      boolean boolean1 = StringUtils.containsIgnoreCase("W,n'M", "\r");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      Locale locale0 = Locale.ROOT;
      assertNotNull(locale0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Language());
      
      String string5 = locale0.getDisplayLanguage();
      assertNotNull(string5);
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Language());
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertEquals("", string5);
      
      int int0 = StringUtils.getFuzzyDistance("\r", "W,n'M", locale0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Language());
      assertEquals(0, int0);
      
      int int1 = StringUtils.indexOf((CharSequence) "W,n'M", (CharSequence) "ClP>2# gfkKWB@vC", 9);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      String string6 = StringUtils.trimToEmpty("Threshold must not be negative");
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string0));
      assertTrue(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string2));
      assertEquals("Threshold must not be negative", string6);
      
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) "Threshold must not be negative";
      objectArray0[1] = (Object) "W,n'M";
      objectArray0[2] = (Object) "Threshold must not be negative";
      objectArray0[3] = (Object) "Threshold must not be negative";
      objectArray0[4] = (Object) "ClP>2# gfkKWB@vC";
      objectArray0[5] = (Object) "W,n'M";
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[6] = object0;
      objectArray0[7] = (Object) "";
      String string7 = StringUtils.join(objectArray0, "<7", 634, (-181));
      assertNotNull(string7);
      assertEquals(8, objectArray0.length);
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string4));
      assertEquals("", string7);
  }

  @Test(timeout = 4000)
  public void test320()  throws Throwable  {
      String string0 = StringUtils.replaceOnceIgnoreCase("", "", "");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.rightPad("", 38, '\u0080');
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("\u0080\u0080\u0080\u0080\u0080\u0080\u0080\u0080\u0080\u0080\u0080\u0080\u0080\u0080\u0080\u0080\u0080\u0080\u0080\u0080\u0080\u0080\u0080\u0080\u0080\u0080\u0080\u0080\u0080\u0080\u0080\u0080\u0080\u0080\u0080\u0080\u0080\u0080", string1);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("", '\u0080');
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      
      String string2 = StringUtils.firstNonBlank(stringArray0);
      assertNull(string2);
      assertEquals(0, stringArray0.length);
      
      String string3 = StringUtils.deleteWhitespace("gD");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("gD", string3);
      
      String string4 = StringUtils.abbreviate("BCF$Q0Xl", 28, 28);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertEquals("BCF$Q0Xl", string4);
      
      String string5 = StringUtils.stripToEmpty("BCF$Q0Xl");
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertTrue(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertEquals("BCF$Q0Xl", string5);
      
      int int0 = StringUtils.indexOf((CharSequence) "\u0080\u0080\u0080\u0080\u0080\u0080\u0080\u0080\u0080\u0080\u0080\u0080\u0080\u0080\u0080\u0080\u0080\u0080\u0080\u0080\u0080\u0080\u0080\u0080\u0080\u0080\u0080\u0080\u0080\u0080\u0080\u0080\u0080\u0080\u0080\u0080\u0080\u0080", (CharSequence) null, 41);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test321()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = (-1);
      intArray0[1] = (-205);
      intArray0[2] = 5;
      intArray0[3] = 1114;
      intArray0[4] = 224;
      intArray0[5] = 13;
      intArray0[6] = (-1428);
      String string0 = StringUtils.join(intArray0, 'V');
      assertNotNull(string0);
      assertEquals(7, intArray0.length);
      assertEquals("-1V-205V5V1114V224V13V-1428", string0);
      assertArrayEquals(new int[] {(-1), (-205), 5, 1114, 224, 13, (-1428)}, intArray0);
      
      boolean boolean0 = StringUtils.startsWithAny("d/\"Z7FPYtK-O", (CharSequence[]) null);
      assertFalse(boolean0);
      
      short[] shortArray0 = new short[0];
      String string1 = StringUtils.join(shortArray0, 'r');
      assertNotNull(string1);
      assertEquals(0, shortArray0.length);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertArrayEquals(new short[] {}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test322()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)104;
      String string0 = StringUtils.wrap("`7p(", 'E');
      assertNotNull(string0);
      assertEquals("E`7p(E", string0);
      
      char[] charArray0 = new char[23];
      charArray0[0] = 'E';
      charArray0[15] = 'E';
      charArray0[2] = 'E';
      int int0 = StringUtils.indexOfAny((CharSequence) "E`7p(E", charArray0);
      assertEquals(23, charArray0.length);
      assertEquals(0, int0);
      
      boolean boolean0 = StringUtils.startsWithIgnoreCase("E`7p(E", "E`7p(E");
      assertTrue(boolean0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[6];
      charSequenceArray0[0] = (CharSequence) "E`7p(E";
      charSequenceArray0[1] = (CharSequence) "E`7p(E";
      charSequenceArray0[2] = (CharSequence) "`7p(";
      charSequenceArray0[3] = (CharSequence) "`7p(";
      String string1 = StringUtils.strip("`7p(", "E`7p(E");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      
      charSequenceArray0[4] = (CharSequence) "";
      String string2 = StringUtils.rightPad("", 5, "");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("     ", string2);
      
      // Undeclared exception!
      try { 
        StringUtils.abbreviate("`7p(", "org.apache.commons.lang3.StringUtils", 1300, 5);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum abbreviation width is 37
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test323()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      String string0 = StringUtils.trim("Z>yD=");
      assertNotNull(string0);
      assertEquals("Z>yD=", string0);
      
      String string1 = StringUtils.mid("Z>yD=", 18, 9);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      
      PriorityQueue<Integer> priorityQueue0 = new PriorityQueue<Integer>();
      assertNotNull(priorityQueue0);
      assertEquals(0, priorityQueue0.size());
      assertFalse(priorityQueue0.contains(18));
      
      String string2 = StringUtils.rightPad("", 18, "");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("                  ", string2);
      
      String string3 = StringUtils.difference(" vs ", "Z>yD=");
      assertNotNull(string3);
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals("Z>yD=", string3);
  }

  @Test(timeout = 4000)
  public void test324()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = new Object();
      assertNotNull(object1);
      assertFalse(object1.equals((Object)object0));
      
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) "";
      objectArray0[1] = (Object) "";
      objectArray0[2] = (Object) "";
      objectArray0[3] = object1;
      objectArray0[4] = (Object) "";
      objectArray0[5] = object1;
      String string0 = StringUtils.join(objectArray0, "");
      assertNotNull(string0);
      assertEquals(6, objectArray0.length);
      
      String string1 = StringUtils.wrapIfMissing("", "]");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      
      String string2 = StringUtils.replacePattern("", "", "");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertEquals("", string2);
      
      String[] stringArray0 = new String[6];
      stringArray0[0] = "RjWU}p|M=YT9";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "java.lang.Object@42434111java.lang.Object@42434111";
      stringArray0[4] = "RjWU}p|M=YT9";
      stringArray0[5] = "W1PeqR@";
      String string3 = StringUtils.getCommonPrefix(stringArray0);
      assertNotNull(string3);
      assertEquals(6, stringArray0.length);
      assertFalse(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string2));
      assertEquals("", string3);
      
      String string4 = StringUtils.stripStart("|\"(!#C~28Ul}t", (String) null);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertEquals("|\"(!#C~28Ul}t", string4);
      
      String string5 = StringUtils.repeat("ju@aT/", 10);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
  }

  @Test(timeout = 4000)
  public void test325()  throws Throwable  {
      String string0 = StringUtils.remove("#r", 'y');
      assertNotNull(string0);
      assertEquals("#r", string0);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "#r", (CharSequence) "#r", 421);
      assertEquals(0, int0);
      
      String string1 = StringUtils.capitalize("#r");
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("#r", string1);
      
      String string2 = StringUtils.LF;
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("\n", string2);
      
      boolean boolean0 = StringUtils.isAlphanumeric("x");
      assertTrue(boolean0);
      
      String string3 = StringUtils.defaultString("$4'Tcj.*5', has a length less than 2");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals("$4'Tcj.*5', has a length less than 2", string3);
      
      int int1 = StringUtils.countMatches((CharSequence) "\n", (CharSequence) "$4'Tcj.*5', has a length less than 2");
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      
      boolean boolean1 = StringUtils.contains((CharSequence) "#r", 1777);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test326()  throws Throwable  {
      String string0 = StringUtils.LF;
      assertNotNull(string0);
      assertEquals("\n", string0);
      
      String string1 = StringUtils.chop("\n");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      
      String string2 = StringUtils.leftPad("r2", (int) '[', '[');
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[r2", string2);
      
      String string3 = StringUtils.rightPad("Wd|}51/]/&`bsA", 1003, "Wd|}51/]/&`bsA");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      
      String string4 = StringUtils.join((double[]) null, '+', (int) '[', (int) '[');
      assertNull(string4);
      
      String string5 = StringUtils.removeFirst((String) null, "");
      assertNull(string5);
      
      String[] stringArray0 = new String[7];
      stringArray0[0] = null;
      stringArray0[1] = "\n";
      stringArray0[2] = "r2";
      stringArray0[3] = "Wd|}51/]/&`bsA";
      stringArray0[4] = null;
      stringArray0[5] = "r2";
      stringArray0[6] = string3;
      String[] stringArray1 = StringUtils.stripAll(stringArray0);
      assertNotNull(stringArray1);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(7, stringArray0.length);
      assertEquals(7, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      boolean boolean0 = StringUtils.isAlphanumeric("r2");
      assertTrue(boolean0);
      
      int int0 = StringUtils.compareIgnoreCase("", string4);
      assertEquals(1, int0);
      
      String string6 = StringUtils.trimToEmpty("', has a length less than 2");
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string0));
      assertEquals("', has a length less than 2", string6);
      
      String string7 = StringUtils.appendIfMissingIgnoreCase("The character ", "The character ", stringArray0);
      assertNotNull(string7);
      assertNotSame(stringArray0, stringArray1);
      assertEquals(7, stringArray0.length);
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string6));
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertEquals("The character ", string7);
  }

  @Test(timeout = 4000)
  public void test327()  throws Throwable  {
      String[] stringArray0 = new String[5];
      String string0 = StringUtils.uncapitalize("U2+DfS:Vb%!,");
      assertNotNull(string0);
      assertEquals("u2+DfS:Vb%!,", string0);
      
      int int0 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test328()  throws Throwable  {
      String string0 = StringUtils.join((Iterator<?>) null, "");
      assertNull(string0);
      
      String string1 = StringUtils.rotate("", 4167);
      assertNotNull(string1);
      assertEquals("", string1);
      
      String string2 = StringUtils.reverseDelimited("", '^');
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string1));
      assertEquals("", string2);
      
      boolean boolean0 = StringUtils.isNumericSpace("");
      assertTrue(boolean0);
      
      String string3 = StringUtils.substring("offset cannot be negative", (-157));
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals("offset cannot be negative", string3);
      
      boolean boolean1 = StringUtils.isAllUpperCase("");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test329()  throws Throwable  {
      String string0 = "\\u";
      String string1 = StringUtils.trim(string0);
      assertNotNull(string1);
      assertEquals("\\u", string1);
      
      ArrayDeque<Integer> arrayDeque0 = new ArrayDeque<Integer>();
      assertNotNull(arrayDeque0);
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      
      Integer integer0 = new Integer((-1406));
      assertNotNull(integer0);
      assertEquals((-1406), (int)integer0);
      
      boolean boolean0 = arrayDeque0.add(integer0);
      assertEquals(1, arrayDeque0.size());
      assertFalse(arrayDeque0.isEmpty());
      assertTrue(boolean0);
      assertTrue(arrayDeque0.contains((-1406)));
      
      Iterator<Integer> iterator0 = arrayDeque0.descendingIterator();
      assertNotNull(iterator0);
      assertEquals(1, arrayDeque0.size());
      assertFalse(arrayDeque0.isEmpty());
      assertTrue(arrayDeque0.contains((-1406)));
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("x7P*-", 't');
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      boolean boolean1 = StringUtils.isAlphanumericSpace(string0);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string2 = StringUtils.difference("c;%7|lx", "jav");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("jav", string2);
      
      String string3 = StringUtils.trimToNull("j:z@au[ec7<");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      
      String string4 = StringUtils.wrap("_WV!!g:DPjBXR", '[');
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertEquals("[_WV!!g:DPjBXR[", string4);
      
      char[] charArray0 = new char[9];
      charArray0[0] = '[';
      charArray0[1] = '[';
      charArray0[2] = 't';
      charArray0[3] = 't';
      charArray0[4] = '[';
      charArray0[5] = '[';
      charArray0[6] = 't';
      charArray0[7] = 't';
      charArray0[8] = 't';
      int int0 = StringUtils.indexOfAny((CharSequence) "x7P*-", charArray0);
      assertEquals(9, charArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new char[] {'[', '[', 't', 't', '[', '[', 't', 't', 't'}, charArray0);
      
      String string5 = StringUtils.stripToNull((String) null);
      assertNull(string5);
  }

  @Test(timeout = 4000)
  public void test330()  throws Throwable  {
      String[] stringArray0 = new String[5];
      String string0 = StringUtils.repeat("jpy],O8mr0%rYHphM", (-1128));
      assertNotNull(string0);
      assertEquals("", string0);
      
      String[] stringArray1 = StringUtils.split("");
      assertNotNull(stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(0, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      boolean boolean0 = StringUtils.isAlphanumeric("jpy],O8mr0%rYHphM");
      assertFalse(boolean0);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "jpy],O8mr0%rYHphM", (CharSequence) "", 1435);
      assertEquals(17, int0);
      
      String string1 = StringUtils.getCommonPrefix(stringArray0);
      assertNotNull(string1);
      assertNotSame(stringArray0, stringArray1);
      assertEquals(5, stringArray0.length);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertEquals("", string1);
  }

  @Test(timeout = 4000)
  public void test331()  throws Throwable  {
      String string0 = StringUtils.rotate((String) null, 8);
      assertNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[0] = (CharSequence) "Cannot clone Cloneable type ";
      charSequenceArray0[1] = (CharSequence) "K";
      int int0 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      boolean boolean0 = StringUtils.isNumericSpace((CharSequence) null);
      assertFalse(boolean0);
      
      String string1 = StringUtils.substring((String) null, 5);
      assertNull(string1);
      
      String string2 = StringUtils.join((String[]) null);
      assertNull(string2);
      
      boolean boolean1 = StringUtils.isAllUpperCase((CharSequence) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test332()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlphanumericSpace((CharSequence) null);
      assertFalse(boolean0);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("JN-dp", "'");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      String string0 = StringUtils.normalizeSpace("8N>^");
      assertNotNull(string0);
      assertEquals("8N>^", string0);
      
      boolean boolean1 = StringUtils.isNoneBlank((CharSequence[]) null);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      int int0 = StringUtils.compareIgnoreCase("", "0VbpAn", true);
      assertEquals((-6), int0);
  }

  @Test(timeout = 4000)
  public void test333()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = 'R';
      String string0 = StringUtils.trimToNull("...");
      assertNotNull(string0);
      assertEquals("...", string0);
      
      String string1 = StringUtils.join((Object[]) null, 'W', (-861), 50);
      assertNull(string1);
      
      boolean boolean0 = StringUtils.equalsIgnoreCase((CharSequence) null, "...");
      assertFalse(boolean0);
      
      String string2 = StringUtils.trimToNull((String) null);
      assertNull(string2);
  }

  @Test(timeout = 4000)
  public void test334()  throws Throwable  {
      long[] longArray0 = new long[0];
      String string0 = StringUtils.join(longArray0, 'u', 226, (-755));
      assertNotNull(string0);
      assertEquals(0, longArray0.length);
      assertEquals("", string0);
      assertArrayEquals(new long[] {}, longArray0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[8];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "";
      charSequenceArray0[2] = (CharSequence) "";
      float[] floatArray0 = new float[0];
      String string1 = StringUtils.join(floatArray0, 'u', (-595), (-755));
      assertNotNull(string1);
      assertEquals(0, floatArray0.length);
      assertEquals("", string1);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      
      charSequenceArray0[3] = (CharSequence) "";
      charSequenceArray0[4] = (CharSequence) "";
      charSequenceArray0[5] = (CharSequence) "";
      charSequenceArray0[6] = (CharSequence) "";
      charSequenceArray0[7] = (CharSequence) "";
      boolean boolean0 = StringUtils.isAllEmpty(charSequenceArray0);
      assertEquals(8, charSequenceArray0.length);
      assertTrue(boolean0);
      
      String string2 = StringUtils.left("", 226);
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertEquals("", string2);
  }

  @Test(timeout = 4000)
  public void test335()  throws Throwable  {
      String string0 = StringUtils.remove("$4'Tcj.*5", 'o');
      assertNotNull(string0);
      assertEquals("$4'Tcj.*5", string0);
      
      String string1 = "\\u";
      String string2 = StringUtils.replaceOnceIgnoreCase("$4'Tcj.*5", "", string1);
      assertNotNull(string2);
      assertFalse(string1.equals((Object)string0));
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("$4'Tcj.*5", string2);
      
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "";
      charSequenceArray0[3] = (CharSequence) "";
      charSequenceArray0[4] = (CharSequence) "";
      boolean boolean0 = StringUtils.equalsAnyIgnoreCase("$4'Tcj.*5", charSequenceArray0);
      assertEquals(5, charSequenceArray0.length);
      assertFalse(boolean0);
      
      String string3 = StringUtils.join((Object[]) charSequenceArray0, "", 196, 124);
      assertNotNull(string3);
      assertEquals(5, charSequenceArray0.length);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals("", string3);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "", charSequenceArray0[0], (-655));
      assertEquals(5, charSequenceArray0.length);
      assertEquals((-1), int0);
      
      long[] longArray0 = new long[5];
      longArray0[0] = (long) (-655);
      longArray0[1] = (long) (-655);
      Locale locale0 = Locale.PRC;
      assertNotNull(locale0);
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      
      Locale locale1 = Locale.TRADITIONAL_CHINESE;
      assertNotNull(locale1);
      assertNotSame(locale1, locale0);
      assertEquals("TW", locale1.getCountry());
      assertEquals("zh_TW", locale1.toString());
      assertEquals("zho", locale1.getISO3Language());
      assertEquals("", locale1.getVariant());
      assertEquals("TWN", locale1.getISO3Country());
      assertEquals("zh", locale1.getLanguage());
      assertFalse(locale1.equals((Object)locale0));
      
      String string4 = locale1.getDisplayName(locale0);
      assertNotNull(string4);
      assertNotSame(locale0, locale1);
      assertNotSame(locale1, locale0);
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("TW", locale1.getCountry());
      assertEquals("zh_TW", locale1.toString());
      assertEquals("zho", locale1.getISO3Language());
      assertEquals("", locale1.getVariant());
      assertEquals("TWN", locale1.getISO3Country());
      assertEquals("zh", locale1.getLanguage());
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(locale1.equals((Object)locale0));
      assertEquals("\u4E2D\u6587 (\u53F0\u6E7E\u5730\u533A)", string4);
      
      String string5 = locale0.getDisplayName(locale1);
      assertNotNull(string5);
      assertNotSame(locale0, locale1);
      assertNotSame(locale1, locale0);
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("TW", locale1.getCountry());
      assertEquals("zh_TW", locale1.toString());
      assertEquals("zho", locale1.getISO3Language());
      assertEquals("", locale1.getVariant());
      assertEquals("TWN", locale1.getISO3Country());
      assertEquals("zh", locale1.getLanguage());
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(locale1.equals((Object)locale0));
      assertEquals("\u4E2D\u6587 (\u4E2D\u570B)", string5);
      
      String string6 = StringUtils.upperCase(string1, locale1);
      assertNotNull(string6);
      assertNotSame(locale1, locale0);
      assertEquals("TW", locale1.getCountry());
      assertEquals("zh_TW", locale1.toString());
      assertEquals("zho", locale1.getISO3Language());
      assertEquals("", locale1.getVariant());
      assertEquals("TWN", locale1.getISO3Country());
      assertEquals("zh", locale1.getLanguage());
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string5));
      assertFalse(string1.equals((Object)string4));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string2));
      assertFalse(locale1.equals((Object)locale0));
      assertEquals("\\U", string6);
      
      String string7 = StringUtils.prependIfMissing("\u4E2D\u6587 (\u4E2D\u570B)", "$4'Tcj.*5", charSequenceArray0);
      assertNotNull(string7);
      assertEquals(5, charSequenceArray0.length);
      assertTrue(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string3));
      assertEquals("\u4E2D\u6587 (\u4E2D\u570B)", string7);
      
      boolean boolean1 = StringUtils.isBlank("\u4E2D\u6587 (\u4E2D\u570B)");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      float[] floatArray0 = new float[0];
      String string8 = StringUtils.join(floatArray0, 'o');
      assertNotNull(string8);
      assertEquals(0, floatArray0.length);
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string1));
      assertEquals("", string8);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test336()  throws Throwable  {
      String string0 = "";
      String string1 = StringUtils.replaceOnceIgnoreCase("", "", "");
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      
      String string2 = StringUtils.rightPad("", 10, '{');
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("{{{{{{{{{{", string2);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("", '{');
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      
      String string3 = StringUtils.firstNonBlank(stringArray0);
      assertNull(string3);
      assertEquals(0, stringArray0.length);
      
      String string4 = StringUtils.deleteWhitespace("gD");
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertEquals("gD", string4);
      
      String string5 = StringUtils.toRootUpperCase("gD");
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertEquals("GD", string5);
      
      String string6 = StringUtils.prependIfMissing((String) null, "gD", (CharSequence[]) null);
      assertNull(string6);
      
      boolean boolean0 = StringUtils.isBlank("GD");
      assertFalse(boolean0);
      
      String string7 = StringUtils.firstNonEmpty(stringArray0);
      assertNull(string7);
      assertEquals(0, stringArray0.length);
      
      // Undeclared exception!
      try { 
        StringUtils.getLevenshteinDistance((CharSequence) null, (CharSequence) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test337()  throws Throwable  {
      String string0 = StringUtils.abbreviateMiddle("E2*1.s*OqQHFD&gQd9O", "E2*1.s*OqQHFD&gQd9O", (-526));
      assertNotNull(string0);
      assertEquals("E2*1.s*OqQHFD&gQd9O", string0);
      
      boolean boolean0 = StringUtils.equalsAnyIgnoreCase("E2*1.s*OqQHFD&gQd9O", (CharSequence[]) null);
      assertFalse(boolean0);
      
      String string1 = StringUtils.join((Object[]) null, (String) null, 55, 55);
      assertNull(string1);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "E2*1.s*OqQHFD&gQd9O", (CharSequence) "E2*1.s*OqQHFD&gQd9O", 1048);
      assertEquals(0, int0);
      
      Locale locale0 = Locale.PRC;
      assertNotNull(locale0);
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("", locale0.getVariant());
      
      Locale locale1 = Locale.TRADITIONAL_CHINESE;
      assertNotNull(locale1);
      assertNotSame(locale1, locale0);
      assertEquals("", locale1.getVariant());
      assertEquals("TW", locale1.getCountry());
      assertEquals("zh", locale1.getLanguage());
      assertEquals("TWN", locale1.getISO3Country());
      assertEquals("zh_TW", locale1.toString());
      assertEquals("zho", locale1.getISO3Language());
      assertFalse(locale1.equals((Object)locale0));
      
      String string2 = locale0.getDisplayName(locale1);
      assertNotNull(string2);
      assertNotSame(locale0, locale1);
      assertNotSame(locale1, locale0);
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale1.getVariant());
      assertEquals("TW", locale1.getCountry());
      assertEquals("zh", locale1.getLanguage());
      assertEquals("TWN", locale1.getISO3Country());
      assertEquals("zh_TW", locale1.toString());
      assertEquals("zho", locale1.getISO3Language());
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(locale1.equals((Object)locale0));
      assertFalse(string2.equals((Object)string0));
      assertEquals("\u4E2D\u6587 (\u4E2D\u570B)", string2);
      
      Locale locale2 = Locale.KOREAN;
      assertNotNull(locale2);
      assertNotSame(locale2, locale1);
      assertNotSame(locale2, locale0);
      assertEquals("kor", locale2.getISO3Language());
      assertEquals("ko", locale2.toString());
      assertEquals("ko", locale2.getLanguage());
      assertEquals("", locale2.getCountry());
      assertEquals("", locale2.getISO3Country());
      assertEquals("", locale2.getVariant());
      assertFalse(locale2.equals((Object)locale1));
      assertFalse(locale2.equals((Object)locale0));
      
      String string3 = locale2.getDisplayName(locale1);
      assertNotNull(string3);
      assertNotSame(locale1, locale0);
      assertNotSame(locale1, locale2);
      assertNotSame(locale2, locale1);
      assertNotSame(locale2, locale0);
      assertEquals("", locale1.getVariant());
      assertEquals("TW", locale1.getCountry());
      assertEquals("zh", locale1.getLanguage());
      assertEquals("TWN", locale1.getISO3Country());
      assertEquals("zh_TW", locale1.toString());
      assertEquals("zho", locale1.getISO3Language());
      assertEquals("kor", locale2.getISO3Language());
      assertEquals("ko", locale2.toString());
      assertEquals("ko", locale2.getLanguage());
      assertEquals("", locale2.getCountry());
      assertEquals("", locale2.getISO3Country());
      assertEquals("", locale2.getVariant());
      assertFalse(locale1.equals((Object)locale0));
      assertFalse(locale1.equals((Object)locale2));
      assertFalse(locale2.equals((Object)locale1));
      assertFalse(locale2.equals((Object)locale0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals("\u97D3\u6587", string3);
      
      String string4 = StringUtils.upperCase("BPNQ]cx-*Voa", locale0);
      assertNotNull(string4);
      assertNotSame(locale0, locale1);
      assertNotSame(locale0, locale2);
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(locale0.equals((Object)locale2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertEquals("BPNQ]CX-*VOA", string4);
      
      String string5 = StringUtils.prependIfMissing((String) null, "\u4E2D\u6587 (\u4E2D\u570B)", (CharSequence[]) null);
      assertNull(string5);
      
      boolean boolean1 = StringUtils.isBlank("BPNQ]CX-*VOA");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test338()  throws Throwable  {
      String string0 = "pV&d&F@?O[k";
      String string1 = StringUtils.rightPad("pV&d&F@?O[k", 38, "pV&d&F@?O[k");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("pV&d&F@?O[kpV&d&F@?O[kpV&d&F@?O[kpV&d&", string1);
      
      String string2 = "org.kpache.commons.lang3.Str>ngUtils5|5pGW#urA~r?~3";
      // Undeclared exception!
      try { 
        StringUtils.abbreviate("org.kpache.commons.lang3.Str>ngUtils5|5pGW#urA~r?~3", "pV&d&F@?O[kpV&d&F@?O[kpV&d&F@?O[kpV&d&", 38, 38);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum abbreviation width is 39
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test339()  throws Throwable  {
      String string0 = StringUtils.replaceOnce("", " is not in the range '0' - '9'", " is not in the range '0' - '9'");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String[] stringArray0 = new String[4];
      stringArray0[1] = "";
      String[] stringArray1 = StringUtils.splitByWholeSeparator(" is not in the range '0' - '9'", "");
      assertNotNull(stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(8, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      String string1 = StringUtils.leftPad("", 2312, '[');
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.remove("8kUfL|2og", '[');
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("8kUfL|2og", string2);
      
      String string3 = StringUtils.substringBetween((String) null, stringArray0[0], "p{InCombiningDiacriticalMarks}+");
      assertNull(string3);
      assertNotSame(stringArray0, stringArray1);
      assertEquals(4, stringArray0.length);
      assertFalse(stringArray0.equals((Object)stringArray1));
      
      boolean boolean0 = StringUtils.containsNone((CharSequence) ";6FZP2*", "org.apache.commons.lang3.CharSequenceUtils");
      assertTrue(boolean0);
      
      String string4 = StringUtils.truncate((String) null, 10);
      assertNull(string4);
      
      ArrayList<CharBuffer> arrayList0 = new ArrayList<CharBuffer>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      Stream<CharBuffer> stream0 = arrayList0.stream();
      assertNotNull(stream0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      // Undeclared exception!
      try { 
        StringUtils.join((List<?>) arrayList0, 'u', 5, 10);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // toIndex = 10
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test340()  throws Throwable  {
      String string0 = StringUtils.normalizeSpace("");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.stripEnd("", "Ed5I9yS\"-sCxd(1?");
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      
      String string2 = StringUtils.truncate((String) null, 1079, 1079);
      assertNull(string2);
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains("Ed5I9yS\"-sCxd(1?"));
      
      String string3 = StringUtils.join((List<?>) linkedList0, 'x', 1745, 1745);
      assertNotNull(string3);
      assertEquals(0, linkedList0.size());
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals("", string3);
      assertFalse(linkedList0.contains("Ed5I9yS\"-sCxd(1?"));
      
      String string4 = StringUtils.substringBefore("", "");
      assertNotNull(string4);
      assertTrue(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertEquals("", string4);
  }

  @Test(timeout = 4000)
  public void test341()  throws Throwable  {
      String string0 = StringUtils.toRootUpperCase("ML)-AF");
      assertNotNull(string0);
      assertEquals("ML)-AF", string0);
      
      String string1 = StringUtils.prependIfMissing("Mc6a=", "ML)-AF", (CharSequence[]) null);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("ML)-AFMc6a=", string1);
      
      boolean boolean0 = StringUtils.isBlank((CharSequence) null);
      assertTrue(boolean0);
      
      String[] stringArray0 = new String[0];
      String string2 = StringUtils.firstNonEmpty(stringArray0);
      assertNull(string2);
      assertEquals(0, stringArray0.length);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "ML)-AF", (CharSequence) "Mc6a=");
      assertEquals(5, int0);
      
      int int1 = StringUtils.getLevenshteinDistance((CharSequence) "", (CharSequence) "");
      assertFalse(int1 == int0);
      assertEquals(0, int1);
  }

  @Test(timeout = 4000)
  public void test342()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      charSequenceArray0[2] = (CharSequence) "({yBTE<CM=<>!B&F=r";
      boolean boolean0 = StringUtils.isNotEmpty(charSequenceArray0[2]);
      assertEquals(4, charSequenceArray0.length);
      assertTrue(boolean0);
      
      String string0 = "\\u";
      String string1 = StringUtils.replaceChars("({yBTE<CM=<>!B&F=r", "({yBTE<CM=<>!B&F=r", string0);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("\\u", string1);
      
      String string2 = StringUtils.substringBetween("ty", "({yBTE<CM=<>!B&F=r", "pTGh,8vl;b1/");
      assertNull(string2);
  }

  @Test(timeout = 4000)
  public void test343()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = 'd';
      charArray0[2] = 'd';
      boolean boolean0 = StringUtils.containsAny((CharSequence) "", charArray0);
      assertEquals(3, charArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new char[] {'d', '\u0000', 'd'}, charArray0);
      
      String string0 = "\n";
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "", (CharSequence) "\n");
      assertEquals(1, int0);
      
      String string1 = StringUtils.substringAfter("", "");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      
      String string2 = StringUtils.right("", 1);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertEquals("", string2);
      
      boolean boolean1 = StringUtils.isMixedCase("\n");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string3 = StringUtils.stripEnd("", "");
      assertNotNull(string3);
      assertTrue(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string2));
      assertEquals("", string3);
      
      int int1 = StringUtils.lastOrdinalIndexOf("\n", "", 1);
      assertTrue(int1 == int0);
      assertEquals(1, int1);
      
      String string4 = StringUtils.abbreviate("X&yh\"vqkh", "", 96);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertEquals("X&yh\"vqkh", string4);
      
      int int2 = StringUtils.indexOf((CharSequence) "X&yh\"vqkh", (CharSequence) "");
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(0, int2);
      
      boolean[] booleanArray0 = new boolean[0];
      // Undeclared exception!
      try { 
        StringUtils.join(booleanArray0, 'd', 0, 838);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test344()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      String string0 = StringUtils.join(booleanArray0, '=');
      assertNotNull(string0);
      assertEquals(2, booleanArray0.length);
      assertEquals("false=true", string0);
      assertTrue(Arrays.equals(new boolean[] {false, true}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test345()  throws Throwable  {
      String string0 = "5|5pGW#urA~r?~3";
      String string1 = StringUtils.left("5|5pGW#urA~r?~3", (-494));
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens((String) null, 'u');
      assertNull(stringArray0);
      
      StringUtils stringUtils0 = new StringUtils();
      assertNotNull(stringUtils0);
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      
      long[] longArray0 = new long[6];
      longArray0[0] = (long) (-494);
      longArray0[1] = (long) (-1);
      boolean boolean0 = StringUtils.containsAnyIgnoreCase("\r", (CharSequence[]) null);
      assertFalse(boolean0);
      
      String string2 = StringUtils.replaceChars("5|5pGW#urA~r?~3", "\r", "org.apache.commons.lang3.LocaleUtils");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertEquals("5|5pGW#urA~r?~3", string2);
      
      boolean boolean1 = StringUtils.isWhitespace("5|5pGW#urA~r?~3");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      // Undeclared exception!
      try { 
        StringUtils.join(booleanArray0, 'u', (-494), 39);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -494
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test346()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-123);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)105;
      byteArray0[3] = (byte)97;
      byteArray0[4] = (byte)3;
      byteArray0[5] = (byte)18;
      byteArray0[6] = (byte)114;
      byteArray0[7] = (byte)24;
      byteArray0[8] = (byte)108;
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.name());
      
      String string0 = StringUtils.toEncodedString(byteArray0, charset0);
      assertNotNull(string0);
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.name());
      assertEquals(9, byteArray0.length);
      assertEquals("\uFFFD\u0000ia\u0003\u0012r\u0018l", string0);
      assertArrayEquals(new byte[] {(byte) (-123), (byte)0, (byte)105, (byte)97, (byte)3, (byte)18, (byte)114, (byte)24, (byte)108}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test347()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-16);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-96);
      byteArray0[3] = (byte) (-66);
      byteArray0[4] = (byte) (-58);
      byteArray0[5] = (byte)30;
      byteArray0[6] = (byte)3;
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.isRegistered());
      
      String string0 = StringUtils.toEncodedString(byteArray0, charset0);
      assertNotNull(string0);
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertEquals(7, byteArray0.length);
      assertEquals("\uFFFD\u0000\uFFFD\uFFFD\uFFFD\u001E\u0003", string0);
      assertArrayEquals(new byte[] {(byte) (-16), (byte)0, (byte) (-96), (byte) (-66), (byte) (-58), (byte)30, (byte)3}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test348()  throws Throwable  {
      String string0 = StringUtils.left("5|5pGW#urA~r?~3", (-494));
      assertNotNull(string0);
      assertEquals("", string0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte) (-67);
      byteArray0[2] = (byte)80;
      byteArray0[3] = (byte) (-96);
      String string1 = StringUtils.replaceChars((String) null, "", "5|5pGW#urA~r?~3");
      assertNull(string1);
      
      int int0 = StringUtils.indexOf((CharSequence) null, (CharSequence) null);
      assertEquals((-1), int0);
      
      String string2 = StringUtils.wrap((String) null, '^');
      assertNull(string2);
      
      String string3 = StringUtils.leftPad((String) null, (int) (byte)80, (String) null);
      assertNull(string3);
  }

  @Test(timeout = 4000)
  public void test349()  throws Throwable  {
      String string0 = StringUtils.remove("#r", 'y');
      assertNotNull(string0);
      assertEquals("#r", string0);
      
      int int0 = StringUtils.indexOf((CharSequence) "#r", (CharSequence) "#r");
      assertEquals(0, int0);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'y';
      boolean boolean0 = StringUtils.containsNone((CharSequence) null, charArray0);
      assertEquals(1, charArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new char[] {'y'}, charArray0);
      
      boolean boolean1 = StringUtils.isWhitespace("#r");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      String string1 = StringUtils.overlay("#r", "wDPtb=E*0D +", (-1432), (-2935));
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("wDPtb=E*0D +#r", string1);
      
      charSequenceArray0[0] = (CharSequence) "wDPtb=E*0D +#r";
      charSequenceArray0[1] = (CharSequence) "#r";
      charSequenceArray0[2] = (CharSequence) "#r";
      charSequenceArray0[3] = (CharSequence) "#r";
      charSequenceArray0[4] = (CharSequence) "#r";
      int int1 = StringUtils.lastIndexOfAny("#r", charSequenceArray0);
      assertEquals(5, charSequenceArray0.length);
      assertTrue(int1 == int0);
      assertEquals(0, int1);
  }

  @Test(timeout = 4000)
  public void test350()  throws Throwable  {
      String string0 = StringUtils.removeFirst("o4R+8,w0_XT", "java.lang.Object@162f0309java.lang.Object@ee1d858java.lang.Object@29d768adjava.lang.Object@195c9e91java.lang.Object@7705e1f8java.lang.Object@162f0309java.lang.Object@ee1d858java.lang.Object@29d768adjava.lang.Object@195c9e91java.lang.Object@7705e1f8");
      assertNotNull(string0);
      assertEquals("o4R+8,w0_XT", string0);
      
      boolean boolean0 = StringUtils.contains((CharSequence) "o4R+8,w0_XT", (CharSequence) "java.lang.Object@162f0309java.lang.Object@ee1d858java.lang.Object@29d768adjava.lang.Object@195c9e91java.lang.Object@7705e1f8java.lang.Object@162f0309java.lang.Object@ee1d858java.lang.Object@29d768adjava.lang.Object@195c9e91java.lang.Object@7705e1f8");
      assertFalse(boolean0);
      
      String string1 = StringUtils.abbreviateMiddle("Supplied value must be a valid byte literal between -128 and 127: [Supplied value must be a valid byte literal between -128 and 127: [", "E", 8);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("SuppE: [", string1);
      
      String string2 = StringUtils.stripEnd("java.lang.Object@1f0878e3java.lang.Object@389e681djava.lang.Object@415420b2java.lang.Object@11868464java.lang.Object@4d9539d7java.lang.Object@1f0878e3java.lang.Object@389e681djava.lang.Object@415420b2java.lang.Object@11868464java.lang.Object@4d9539d7", "SuppE: [");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      String string3 = StringUtils.trimToNull("java.lang.Object@1f0878e3java.lang.Object@389e681djava.lang.Object@415420b2java.lang.Object@11868464java.lang.Object@4d9539d7java.lang.Object@1f0878e3java.lang.Object@389e681djava.lang.Object@415420b2java.lang.Object@11868464java.lang.Object@4d9539d7");
      assertNotNull(string3);
      assertTrue(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      
      String string4 = StringUtils.right("o4R+8,w0_XT", 8);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertEquals("+8,w0_XT", string4);
      
      int int0 = StringUtils.length("E");
      assertEquals(1, int0);
      
      // Undeclared exception!
      try { 
        StringUtils.joinWith("java.lang.Object@1f0878e3java.lang.Object@389e681djava.lang.Object@415420b2java.lang.Object@11868464java.lang.Object@4d9539d7java.lang.Object@1f0878e3java.lang.Object@389e681djava.lang.Object@415420b2java.lang.Object@11868464java.lang.Object@4d9539d7", (Object[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object varargs must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test351()  throws Throwable  {
      String string0 = StringUtils.removeFirst("o4R+8,w0_XT", "java.lang.Object@162f0309java.lang.Object@ee1d858java.lang.Object@29d768adjava.lang.Object@195c9e91java.lang.Object@7705e1f8java.lang.Object@162f0309java.lang.Object@ee1d858java.lang.Object@29d768adjava.lang.Object@195c9e91java.lang.Object@7705e1f8");
      assertNotNull(string0);
      assertEquals("o4R+8,w0_XT", string0);
      
      boolean boolean0 = StringUtils.contains((CharSequence) "o4R+8,w0_XT", (CharSequence) "java.lang.Object@162f0309java.lang.Object@ee1d858java.lang.Object@29d768adjava.lang.Object@195c9e91java.lang.Object@7705e1f8java.lang.Object@162f0309java.lang.Object@ee1d858java.lang.Object@29d768adjava.lang.Object@195c9e91java.lang.Object@7705e1f8");
      assertFalse(boolean0);
      
      String string1 = StringUtils.abbreviateMiddle("Supplied value must be a valid byte literal between -128 and 127: [Supplied value must be a valid byte literal between -128 and 127: [", "E", 8);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("SuppE: [", string1);
      
      String string2 = StringUtils.stripEnd("java.lang.Object@1f0878e3java.lang.Object@389e681djava.lang.Object@415420b2java.lang.Object@11868464java.lang.Object@4d9539d7java.lang.Object@1f0878e3java.lang.Object@389e681djava.lang.Object@415420b2java.lang.Object@11868464java.lang.Object@4d9539d7", "SuppE: [");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      String string3 = StringUtils.trimToNull("java.lang.Object@1f0878e3java.lang.Object@389e681djava.lang.Object@415420b2java.lang.Object@11868464java.lang.Object@4d9539d7java.lang.Object@1f0878e3java.lang.Object@389e681djava.lang.Object@415420b2java.lang.Object@11868464java.lang.Object@4d9539d7");
      assertNotNull(string3);
      assertTrue(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      
      String string4 = StringUtils.right("o4R+8,w0_XT", 8);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertEquals("+8,w0_XT", string4);
      
      int int0 = StringUtils.length("E");
      assertEquals(1, int0);
      
      char[] charArray0 = new char[0];
      boolean boolean1 = StringUtils.containsAny((CharSequence) "java.lang.Object@1f0878e3java.lang.Object@389e681djava.lang.Object@415420b2java.lang.Object@11868464java.lang.Object@4d9539d7java.lang.Object@1f0878e3java.lang.Object@389e681djava.lang.Object@415420b2java.lang.Object@11868464java.lang.Object@4d9539d7", charArray0);
      assertEquals(0, charArray0.length);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertArrayEquals(new char[] {}, charArray0);
      
      String string5 = StringUtils.substringAfter("Threshold must not be negative", 1);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertEquals("", string5);
      
      String string6 = StringUtils.normalizeSpace("java.lang.Object@1f0878e3java.lang.Object@389e681djava.lang.Object@415420b2java.lang.Object@11868464java.lang.Object@4d9539d7java.lang.Object@1f0878e3java.lang.Object@389e681djava.lang.Object@415420b2java.lang.Object@11868464java.lang.Object@4d9539d7");
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string4));
      assertTrue(string6.equals((Object)string2));
      assertTrue(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string1));
      
      String string7 = StringUtils.abbreviateMiddle(":%)", "java.lang.Object@1f0878e3java.lang.Object@389e681djava.lang.Object@415420b2java.lang.Object@11868464java.lang.Object@4d9539d7java.lang.Object@1f0878e3java.lang.Object@389e681djava.lang.Object@415420b2java.lang.Object@11868464java.lang.Object@4d9539d7", 1926);
      assertNotNull(string7);
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string6));
      assertEquals(":%)", string7);
      
      String string8 = StringUtils.stripAccents(" is not in the range '0' - '9'");
      assertNotNull(string8);
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string3));
      assertEquals(" is not in the range '0' - '9'", string8);
      
      int int1 = StringUtils.indexOf((CharSequence) " is not in the range '0' - '9'", 8, 5);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      LinkedList<Locale.Category> linkedList0 = new LinkedList<Locale.Category>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Iterator<Locale.Category> iterator0 = linkedList0.descendingIterator();
      assertNotNull(iterator0);
      assertEquals(0, linkedList0.size());
      
      String string9 = StringUtils.join(iterator0, ".M,KjXgwysMU,");
      assertNotNull(string9);
      assertEquals(0, linkedList0.size());
      assertFalse(string9.equals((Object)string8));
      assertFalse(string9.equals((Object)string3));
      assertFalse(string9.equals((Object)string1));
      assertFalse(string9.equals((Object)string4));
      assertFalse(string9.equals((Object)string2));
      assertFalse(string9.equals((Object)string6));
      assertFalse(string9.equals((Object)string0));
      assertFalse(string9.equals((Object)string7));
      assertEquals("", string9);
      
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) "java.lang.Object@1f0878e3java.lang.Object@389e681djava.lang.Object@415420b2java.lang.Object@11868464java.lang.Object@4d9539d7java.lang.Object@1f0878e3java.lang.Object@389e681djava.lang.Object@415420b2java.lang.Object@11868464java.lang.Object@4d9539d7";
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[1] = object0;
      objectArray0[2] = (Object) "java.lang.Object@1f0878e3java.lang.Object@389e681djava.lang.Object@415420b2java.lang.Object@11868464java.lang.Object@4d9539d7java.lang.Object@1f0878e3java.lang.Object@389e681djava.lang.Object@415420b2java.lang.Object@11868464java.lang.Object@4d9539d7";
      objectArray0[3] = (Object) iterator0;
      String string10 = StringUtils.join(objectArray0, "wN|wN|");
      assertNotNull(string10);
      assertEquals(4, objectArray0.length);
      assertFalse(string10.equals((Object)string7));
      assertFalse(string10.equals((Object)string1));
      assertFalse(string10.equals((Object)string9));
      assertFalse(string10.equals((Object)string2));
      assertFalse(string10.equals((Object)string6));
      assertFalse(string10.equals((Object)string3));
      assertFalse(string10.equals((Object)string4));
      assertFalse(string10.equals((Object)string5));
      assertFalse(string10.equals((Object)string8));
      assertFalse(string10.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test352()  throws Throwable  {
      int int0 = StringUtils.compare("?2-`ac/23^,5", "java.lang.Object@52ae11ejava.lang.Object@5c492841java.lang.Object@52ae11ejava.lang.Object@74aa7e04java.lang.Object@3d5c1179java.lang.Object@52ae11ejava.lang.Object@5c492841java.lang.Object@52ae11ejava.lang.Object@74aa7e04java.lang.Object@3d5c1179");
      assertEquals((-43), int0);
      
      int int1 = StringUtils.indexOf((CharSequence) "?2-`ac/23^,5", (-43), (-43));
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      String[] stringArray0 = StringUtils.split("?2-`ac/23^,5", "Arguments cannot both be null", 13);
      assertNotNull(stringArray0);
      assertEquals(2, stringArray0.length);
      
      String string0 = StringUtils.joinWith("Mv", stringArray0);
      assertNotNull(string0);
      assertEquals(2, stringArray0.length);
      assertEquals("?2-`Mv/23^,5", string0);
      
      String string1 = StringUtils.substringAfterLast("-aGAz", (-1));
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      
      // Undeclared exception!
      try { 
        StringUtils.truncate("java.lang.Object@52ae11ejava.lang.Object@5c492841java.lang.Object@52ae11ejava.lang.Object@74aa7e04java.lang.Object@3d5c1179java.lang.Object@52ae11ejava.lang.Object@5c492841java.lang.Object@52ae11ejava.lang.Object@74aa7e04java.lang.Object@3d5c1179", 0, (-1284));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // maxWith cannot be negative
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test353()  throws Throwable  {
      String string0 = StringUtils.leftPad("r2", (int) '[', '[');
      assertNotNull(string0);
      assertEquals("[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[r2", string0);
      
      String string1 = StringUtils.rightPad("Wd|}51/]/&`bsA", 1003, "Wd|}51/]/&`bsA");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.join((double[]) null, '+', (int) '[', (int) '[');
      assertNull(string2);
      
      String string3 = StringUtils.reverse((String) null);
      assertNull(string3);
      
      boolean boolean0 = StringUtils.isAlphaSpace((CharSequence) null);
      assertFalse(boolean0);
      
      String string4 = StringUtils.uncapitalize((String) null);
      assertNull(string4);
      
      boolean boolean1 = StringUtils.isAllBlank((CharSequence[]) null);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String string5 = StringUtils.replaceOnceIgnoreCase("WU_{VF~cpiiu'4'9v", "XGc>hmQxNY8V]C", "cv ?(mX56URIc7k,");
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertEquals("WU_{VF~cpiiu'4'9v", string5);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "r2", (CharSequence) "Wd|}51/]/&`bsA", 91);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test354()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      charSequenceArray0[0] = (CharSequence) "h!{j5f5T8V}7s;";
      charSequenceArray0[1] = (CharSequence) "h!{j5f5T8V}7s;";
      charSequenceArray0[2] = (CharSequence) "h!{j5f5T8V}7s;";
      String string0 = StringUtils.abbreviateMiddle("h!{j5f5T8V}7s;", "java.lang.Object@52b769b5java.lang.Object@1d3febfajava.lang.Object@4c16c3aejava.lang.Object@4a32f5f1java.lang.Object@23a1c7c3java.lang.Object@52b769b5java.lang.Object@1d3febfajava.lang.Object@4c16c3aejava.lang.Object@4a32f5f1java.lang.Object@23a1c7c3", 15);
      assertNotNull(string0);
      assertEquals("h!{j5f5T8V}7s;", string0);
      
      charSequenceArray0[3] = (CharSequence) "h!{j5f5T8V}7s;";
      charSequenceArray0[4] = (CharSequence) "h!{j5f5T8V}7s;";
      String string1 = StringUtils.appendIfMissing("h!{j5f5T8V}7s;", "h!{j5f5T8V}7s;", charSequenceArray0);
      assertNotNull(string1);
      assertEquals(5, charSequenceArray0.length);
      assertTrue(string1.equals((Object)string0));
      assertEquals("h!{j5f5T8V}7s;", string1);
      
      int int0 = StringUtils.length("java.lang.Object@52b769b5java.lang.Object@1d3febfajava.lang.Object@4c16c3aejava.lang.Object@4a32f5f1java.lang.Object@23a1c7c3java.lang.Object@52b769b5java.lang.Object@1d3febfajava.lang.Object@4c16c3aejava.lang.Object@4a32f5f1java.lang.Object@23a1c7c3");
      assertEquals(250, int0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("", "java.lang.Object@52b769b5java.lang.Object@1d3febfajava.lang.Object@4c16c3aejava.lang.Object@4a32f5f1java.lang.Object@23a1c7c3java.lang.Object@52b769b5java.lang.Object@1d3febfajava.lang.Object@4c16c3aejava.lang.Object@4a32f5f1java.lang.Object@23a1c7c3");
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      
      String string2 = StringUtils.repeat(".'am$2&U)u", 250);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      String string3 = StringUtils.reverseDelimited(".'am$2&U)u", 'N');
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals(".'am$2&U)u", string3);
      
      boolean boolean0 = StringUtils.isAllEmpty(charSequenceArray0);
      assertEquals(5, charSequenceArray0.length);
      assertFalse(boolean0);
      
      String[] stringArray1 = StringUtils.splitByWholeSeparatorPreserveAllTokens("The type must not be null", "", 250);
      assertNotNull(stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(6, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      String string4 = StringUtils.replaceOnce(".'am$2&U)u", "Cannot store ", "Cannot store ");
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string3));
      assertEquals(".'am$2&U)u", string4);
      
      int int1 = StringUtils.getLevenshteinDistance(charSequenceArray0[4], (CharSequence) ".'am$2&U)u", 17);
      assertEquals(5, charSequenceArray0.length);
      assertFalse(int1 == int0);
      assertEquals(14, int1);
      
      int int2 = StringUtils.length("java.lang.Object@52b769b5java.lang.Object@1d3febfajava.lang.Object@4c16c3aejava.lang.Object@4a32f5f1java.lang.Object@23a1c7c3java.lang.Object@52b769b5java.lang.Object@1d3febfajava.lang.Object@4c16c3aejava.lang.Object@4a32f5f1java.lang.Object@23a1c7c3");
      assertTrue(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(250, int2);
      
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      String string5 = StringUtils.getIfEmpty("sny_cTpX P}]&}", supplier0);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertEquals("sny_cTpX P}]&}", string5);
      
      int int3 = StringUtils.compare("h!{j5f5T8V}7s;", "sny_cTpX P}]&}");
      assertFalse(int3 == int0);
      assertFalse(int3 == int2);
      assertFalse(int3 == int1);
      assertEquals((-11), int3);
      
      boolean boolean1 = StringUtils.isEmpty(charSequenceArray0[3]);
      assertEquals(5, charSequenceArray0.length);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string6 = StringUtils.trim("h!{j5f5T8V}7s;");
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string2));
      assertTrue(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string3));
      assertTrue(string6.equals((Object)string1));
      assertEquals("h!{j5f5T8V}7s;", string6);
      
      String string7 = StringUtils.chop("sny_cTpX P}]&}");
      assertNotNull(string7);
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string2));
      assertEquals("sny_cTpX P}]&", string7);
      
      String string8 = StringUtils.substringAfter("Zu*4-n!o`!mH6S_v", 0);
      assertNotNull(string8);
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string6));
      assertEquals("", string8);
      
      String string9 = StringUtils.appendIfMissing("", string2, stringArray0);
      assertNotNull(string9);
      assertNotSame(stringArray0, stringArray1);
      assertEquals(0, stringArray0.length);
      assertTrue(string9.equals((Object)string2));
      assertFalse(string9.equals((Object)string0));
      assertFalse(string9.equals((Object)string6));
      assertFalse(string9.equals((Object)string5));
      assertFalse(string9.equals((Object)string7));
      assertFalse(string9.equals((Object)string3));
      assertFalse(string9.equals((Object)string1));
      assertFalse(string9.equals((Object)string8));
      assertFalse(string9.equals((Object)string4));
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertFalse(string2.equals((Object)string6));
      assertFalse(string2.equals((Object)string5));
      assertFalse(string2.equals((Object)string7));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string4));
      assertFalse(string2.equals((Object)string8));
      assertFalse(string2.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test355()  throws Throwable  {
      String string0 = StringUtils.rotate((String) null, 15);
      assertNull(string0);
      
      String string1 = StringUtils.center("K", 5, "Cannot clone Cloneable type ");
      assertNotNull(string1);
      assertEquals("CaKCa", string1);
  }

  @Test(timeout = 4000)
  public void test356()  throws Throwable  {
      String string0 = StringUtils.center((String) null, 8192, 'w');
      assertNull(string0);
      
      char[] charArray0 = new char[9];
      charArray0[0] = '}';
      charArray0[1] = 'w';
      charArray0[2] = 'w';
      charArray0[3] = 'w';
      charArray0[4] = 'w';
      charArray0[5] = 'w';
      charArray0[6] = 'w';
      int int0 = StringUtils.indexOfAny((CharSequence) null, "java.lang.Object@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.Object@50d3e7ejava.lang.Object@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.Object@50d3e7e");
      assertEquals((-1), int0);
      
      int int1 = StringUtils.lastIndexOf((CharSequence) "java.lang.Object@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.Object@50d3e7ejava.lang.Object@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.Object@50d3e7e", (CharSequence) null);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      boolean boolean0 = StringUtils.isNotEmpty("8gqE<92_3@");
      assertTrue(boolean0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      boolean boolean1 = StringUtils.isAnyEmpty(charSequenceArray0);
      assertEquals(0, charSequenceArray0.length);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string1 = StringUtils.rotate((String) null, (-1));
      assertNull(string1);
      
      int int2 = StringUtils.indexOfAnyBut((CharSequence) null, (CharSequence) null);
      assertTrue(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals((-1), int2);
      
      String string2 = StringUtils.abbreviate((String) null, (-1), (-1));
      assertNull(string2);
      
      String string3 = StringUtils.removeStart("xm}TdU", "xm}TdU");
      assertNotNull(string3);
      assertEquals("", string3);
      
      boolean boolean2 = StringUtils.isAnyEmpty(charSequenceArray0);
      assertEquals(0, charSequenceArray0.length);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
      
      int int3 = StringUtils.indexOfAny((CharSequence) "", charArray0);
      assertEquals(9, charArray0.length);
      assertTrue(int3 == int2);
      assertTrue(int3 == int1);
      assertTrue(int3 == int0);
      assertEquals((-1), int3);
      assertArrayEquals(new char[] {'}', 'w', 'w', 'w', 'w', 'w', 'w', '\u0000', '\u0000'}, charArray0);
      
      String string4 = StringUtils.trimToNull("xm}TdU");
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string3));
      assertEquals("xm}TdU", string4);
      
      String string5 = StringUtils.wrapIfMissing((String) null, ')');
      assertNull(string5);
      
      String string6 = StringUtils.lowerCase("java.lang.Object@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.Object@50d3e7ejava.lang.Object@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.Object@50d3e7e");
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string4));
  }

  @Test(timeout = 4000)
  public void test357()  throws Throwable  {
      String string0 = "";
      String string1 = StringUtils.repeat("", 12);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      
      String string2 = StringUtils.normalizeSpace(".M,KjXgwsMU,");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals(".M,KjXgwsMU,", string2);
      
      char[] charArray0 = new char[5];
      // Undeclared exception!
      try { 
        StringUtils.join(charArray0, 'L', 27, 32);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 27
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test358()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = " vs ";
      stringArray0[1] = "Ua):3]I<ozRQ`OI![";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "";
      String string0 = StringUtils.getCommonPrefix(stringArray0);
      assertNotNull(string0);
      assertEquals(5, stringArray0.length);
      assertEquals("", string0);
      
      char[] charArray0 = new char[6];
      charArray0[0] = '\"';
      charArray0[1] = '\"';
      charArray0[2] = '\"';
      charArray0[3] = '\"';
      charArray0[4] = 'w';
      charArray0[5] = '\"';
      // Undeclared exception!
      try { 
        StringUtils.join(charArray0, '\"', (-4569), 170);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -4569
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test359()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)108;
      byteArray0[1] = (byte) (-43);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-105);
      byteArray0[5] = (byte) (-118);
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)54;
      String string0 = StringUtils.join(byteArray0, '#', (int) (byte)108, 16);
      assertNotNull(string0);
      assertEquals(8, byteArray0.length);
      assertEquals("", string0);
      assertArrayEquals(new byte[] {(byte)108, (byte) (-43), (byte)0, (byte)0, (byte) (-105), (byte) (-118), (byte)0, (byte)54}, byteArray0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      boolean boolean0 = StringUtils.equalsAnyIgnoreCase("", charSequenceArray0);
      assertEquals(0, charSequenceArray0.length);
      assertFalse(boolean0);
      
      String string1 = StringUtils.join((Object[]) charSequenceArray0, "", 111, 52);
      assertNotNull(string1);
      assertEquals(0, charSequenceArray0.length);
      assertEquals("", string1);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "", (CharSequence) "", (int) (byte)108);
      assertEquals(0, int0);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) (byte) (-105);
      longArray0[1] = (long) (byte)108;
      String string2 = StringUtils.join(longArray0, 'H', (int) (byte)108, 108);
      assertNotNull(string2);
      assertEquals(2, longArray0.length);
      assertEquals("", string2);
      assertArrayEquals(new long[] {(-105L), 108L}, longArray0);
  }

  @Test(timeout = 4000)
  public void test360()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)108;
      byteArray0[1] = (byte) (-43);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-105);
      byteArray0[6] = (byte) (-43);
      int int0 = StringUtils.compareIgnoreCase("u=]@|On8X7H27[2Or", "u=]@|On8X7H27[2Or");
      assertEquals(0, int0);
      
      String string0 = StringUtils.trimToEmpty("");
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test361()  throws Throwable  {
      String string0 = StringUtils.replaceOnceIgnoreCase("", "", "");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.rightPad("", 10, '{');
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("{{{{{{{{{{", string1);
      
      Vector<CharBuffer> vector0 = new Vector<CharBuffer>();
      assertNotNull(vector0);
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.isEmpty());
      
      boolean boolean0 = StringUtils.isAlphanumericSpace("{{{{{{{{{{");
      assertFalse(boolean0);
      
      String string2 = StringUtils.uncapitalize("");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertEquals("", string2);
      
      boolean boolean1 = StringUtils.isAlphaSpace("");
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      boolean boolean2 = StringUtils.containsOnly((CharSequence) "{{{{{{{{{{", (char[]) null);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      
      String string3 = StringUtils.defaultIfEmpty("i{]K!J*83(V?o*G/m", "Array and element cannot both be null");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals("i{]K!J*83(V?o*G/m", string3);
      
      String string4 = StringUtils.substringAfter("i{]K!J*83(V?o*G/m", "aC^b>WkGcJf?c");
      assertNotNull(string4);
      assertTrue(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertEquals("", string4);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "Array and element cannot both be null", "");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test362()  throws Throwable  {
      String string0 = StringUtils.center("xxUjava.lang.Object@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.Object@50d3e7ejava.lang.Object@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.Object@50d3e7ejava.lang.Object@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.Object@50d3e7ejava.lang.Object@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.Object@50d3e7e", 16);
      assertNotNull(string0);
      
      String string1 = StringUtils.removeStart("xxUjava.lang.Object@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.Object@50d3e7ejava.lang.Object@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.Object@50d3e7ejava.lang.Object@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.Object@50d3e7ejava.lang.Object@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.Object@50d3e7e", "xxUjava.lang.Object@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.Object@50d3e7ejava.lang.Object@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.Object@50d3e7ejava.lang.Object@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.Object@50d3e7ejava.lang.Object@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.Object@50d3e7e");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      
      boolean boolean0 = StringUtils.isMixedCase("");
      assertFalse(boolean0);
      
      String string2 = StringUtils.stripEnd("U2+DfS:Vb%!,", "");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("U2+DfS:Vb%!,", string2);
      
      int int0 = StringUtils.lastOrdinalIndexOf("U2+DfS:Vb%!,", "", 247);
      assertEquals(12, int0);
      
      String string3 = StringUtils.truncate("xxUjava.lang.Object@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.Object@50d3e7ejava.lang.Object@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.Object@50d3e7ejava.lang.Object@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.Object@50d3e7ejava.lang.Object@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.Object@50d3e7e", 12);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals("xxUjava.lang", string3);
      
      String[] stringArray0 = new String[7];
      stringArray0[3] = "xxUjava.lang";
      stringArray0[2] = "";
      String string4 = StringUtils.uncapitalize("U2+DfS:Vb%!,");
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertEquals("u2+DfS:Vb%!,", string4);
      
      int int1 = StringUtils.indexOf((CharSequence) "", (CharSequence) "U2+DfS:Vb%!,");
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test363()  throws Throwable  {
      String string0 = StringUtils.substringAfterLast("", 10);
      assertNotNull(string0);
      assertEquals("", string0);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "", "");
      assertEquals((-1), int0);
      
      String string1 = StringUtils.replaceOnce("", "af-_Xu1o~2a", "af-_Xu1o~2a");
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      String string2 = StringUtils.replaceEachRepeatedly("", stringArray0, stringArray0);
      assertNotNull(string2);
      assertEquals(4, stringArray0.length);
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertEquals("", string2);
      
      boolean boolean0 = StringUtils.isNumericSpace("");
      assertTrue(boolean0);
      
      String[] stringArray1 = StringUtils.splitByWholeSeparator("af-_Xu1o~2a", "");
      assertNotNull(stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(1, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      String string3 = StringUtils.leftPad("", 2312, '[');
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      
      String string4 = StringUtils.remove("8kUfL|2og", '[');
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertEquals("8kUfL|2og", string4);
      
      String string5 = StringUtils.substringBetween((String) null, "", "p{InCombiningDiacriticalMarks}+");
      assertNull(string5);
      
      String string6 = StringUtils.overlay("p{InCombiningDiacriticalMarks}+", "k", (-1), 1887);
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string0));
      assertEquals("k", string6);
      
      String string7 = StringUtils.substringAfterLast("", ";7`H5");
      assertNotNull(string7);
      assertFalse(string7.equals((Object)string6));
      assertTrue(string7.equals((Object)string0));
      assertTrue(string7.equals((Object)string1));
      assertTrue(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string4));
      assertEquals("", string7);
      
      String string8 = StringUtils.truncate(" Dk 1Lm<OymGi", 10);
      assertNotNull(string8);
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string6));
      assertEquals(" Dk 1Lm<O", string8);
      
      boolean boolean1 = StringUtils.isAlphanumericSpace("");
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      int int1 = (-1132);
      // Undeclared exception!
      try { 
        StringUtils.join((Object[]) stringArray0, "", (-1132), 10);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1132
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test364()  throws Throwable  {
      short[] shortArray0 = new short[2];
      shortArray0[1] = (short) (-374);
      String string0 = StringUtils.join(shortArray0, 'r');
      assertNotNull(string0);
      assertEquals(2, shortArray0.length);
      assertEquals("0r-374", string0);
      assertArrayEquals(new short[] {(short)0, (short) (-374)}, shortArray0);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "0r-374", (CharSequence) "0r-374", (int) (short)0);
      assertEquals(0, int0);
      
      String string1 = StringUtils.substringBetween("0r-374", "-\rrCKm7FB.,{o|e", "eW(t/eu=");
      assertNull(string1);
      
      String string2 = StringUtils.trim("<&c");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertEquals("<&c", string2);
      
      String[] stringArray0 = StringUtils.stripAll((String[]) null);
      assertNull(stringArray0);
      
      boolean boolean0 = StringUtils.containsAnyIgnoreCase("<&c", (CharSequence[]) null);
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isWhitespace("@uU/N%ngLD");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      int int1 = new Integer('r');
      assertFalse(int1 == int0);
      assertEquals(114, int1);
  }

  @Test(timeout = 4000)
  public void test365()  throws Throwable  {
      String string0 = StringUtils.chomp((String) null, "");
      assertNull(string0);
      
      String string1 = StringUtils.replacePattern("[3yrCmjrl/", "Arguments cannot both be null", (String) null);
      assertNotNull(string1);
      assertEquals("[3yrCmjrl/", string1);
      
      String string2 = StringUtils.getDigits("Arguments cannot both be null");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertEquals("", string2);
      
      Stack<String> stack0 = new Stack<String>();
      assertNotNull(stack0);
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertFalse(stack0.contains(string2));
      
      String string3 = StringUtils.replacePattern("[$C", "RW+y(v,SOo]", (String) null);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals("[$C", string3);
      
      String[] stringArray0 = new String[8];
      stringArray0[0] = "[$C";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "[3yrCmjrl/";
      stringArray0[4] = null;
      stringArray0[5] = "[3yrCmjrl/";
      stringArray0[6] = "";
      stringArray0[7] = "[3yrCmjrl/";
      String string4 = StringUtils.getCommonPrefix(stringArray0);
      assertNotNull(string4);
      assertEquals(8, stringArray0.length);
      assertFalse(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertEquals("", string4);
      
      String string5 = StringUtils.stripStart("CVX BP7k+)t%V", "The character ");
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertEquals("CVX BP7k+)t%V", string5);
      
      String string6 = StringUtils.repeat("#", 948);
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string3));
      assertEqualsstring6);
      
      boolean boolean0 = StringUtils.isAllLowerCase((CharSequence) null);
      assertFalse(boolean0);
      
      String string7 = StringUtils.removeIgnoreCase("", "");
      assertNotNull(string7);
      assertFalse(string7.equals((Object)string5));
      assertTrue(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string1));
      assertTrue(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string6));
      assertEquals("", string7);
  }

  @Test(timeout = 4000)
  public void test366()  throws Throwable  {
      char char0 = '7';
      int[] intArray0 = new int[6];
      intArray0[0] = (int) '7';
      intArray0[1] = (int) '7';
      intArray0[2] = (int) '7';
      intArray0[3] = (int) '7';
      intArray0[4] = (int) '7';
      Stack<String> stack0 = new Stack<String>();
      assertNotNull(stack0);
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      
      stack0.removeAllElements();
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      
      stack0.addElement("bYvP-^z{8vGf");
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertEquals(1, stack0.size());
      assertEquals("[bYvP-^z{8vGf]", stack0.toString());
      assertFalse(stack0.isEmpty());
      assertTrue(stack0.contains("bYvP-^z{8vGf"));
      
      ListIterator<String> listIterator0 = stack0.listIterator();
      assertNotNull(listIterator0);
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertEquals(1, stack0.size());
      assertEquals("[bYvP-^z{8vGf]", stack0.toString());
      assertFalse(stack0.isEmpty());
      assertFalse(listIterator0.hasPrevious());
      assertTrue(listIterator0.hasNext());
      assertTrue(stack0.contains("bYvP-^z{8vGf"));
      
      String string0 = StringUtils.difference("bYvP-^z{8vGf", "bYvP-^z{8vGf");
      assertNotNull(string0);
      assertEquals("", string0);
      
      byte byte0 = (byte)16;
      // Undeclared exception!
      try { 
        Charset.forName("ng3.StringUtils");
        fail("Expecting exception: UnsupportedCharsetException");
      
      } catch(UnsupportedCharsetException e) {
         //
         // ng3.StringUtils
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test367()  throws Throwable  {
      String string0 = StringUtils.rightPad("pV&d&F@?O[k", 22, "pV&d&F@?O[k");
      assertNotNull(string0);
      assertEquals("pV&d&F@?O[kpV&d&F@?O[k", string0);
      
      String string1 = StringUtils.abbreviate("org.apache.commons.lang3.StringUtils5|5pGW#urA~r?~3", "pV&d&F@?O[kpV&d&F@?O[k", 22, 126);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("org.apache.commons.lang3.StringUtils5|5pGW#urA~r?~3", string1);
  }

  @Test(timeout = 4000)
  public void test368()  throws Throwable  {
      String string0 = StringUtils.leftPad("java.lang.Object@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.Object@50d3e7ejava.lang.Object@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.Object@50d3e7e", 21, 't');
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.containsNone((CharSequence) "java.lang.Object@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.Object@50d3e7ejava.lang.Object@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.Object@50d3e7e", "...");
      assertFalse(boolean0);
      
      String string1 = StringUtils.strip(" in an array of ");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("in an array of", string1);
      
      String string2 = StringUtils.trim("java.lang.Object@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.Object@50d3e7ejava.lang.Object@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.Object@50d3e7e");
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      String string3 = StringUtils.abbreviateMiddle(".\"FnMn\"_8]D:", "...", 5);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals("....:", string3);
  }

  @Test(timeout = 4000)
  public void test369()  throws Throwable  {
      String string0 = StringUtils.LF;
      assertNotNull(string0);
      assertEquals("\n", string0);
      
      boolean boolean0 = StringUtils.equalsIgnoreCase("\n", "\n");
      assertTrue(boolean0);
      
      String string1 = StringUtils.chop("\n");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      
      String string2 = StringUtils.leftPad("r2", (int) '[', '[');
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[r2", string2);
      
      boolean boolean1 = StringUtils.containsNone((CharSequence) "r2", " in an array of ");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string3 = StringUtils.strip(" in an array of ");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals("in an array of", string3);
      
      String string4 = StringUtils.stripToEmpty("Wd|}51/]/&`bsA");
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertEquals("Wd|}51/]/&`bsA", string4);
      
      String[] stringArray0 = new String[7];
      stringArray0[0] = ",/66A7z~@r:n5z ?m";
      stringArray0[1] = "Wd|}51/]/&`bsA";
      stringArray0[2] = " in an array of ";
      stringArray0[3] = "[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[r2";
      stringArray0[4] = "[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[r2";
      stringArray0[5] = "e)iya!";
      stringArray0[6] = "r2";
      String[] stringArray1 = StringUtils.stripAll(stringArray0);
      assertNotNull(stringArray1);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(7, stringArray0.length);
      assertEquals(7, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      int int0 = StringUtils.compareIgnoreCase("*v3+|", "org.apache.commons.lang3.exception.CloneFailedException", true);
      assertEquals((-69), int0);
      
      String string5 = StringUtils.trim("Wd|}51/]/&`bsA");
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string1));
      assertTrue(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertEquals("Wd|}51/]/&`bsA", string5);
      
      boolean boolean2 = StringUtils.endsWithAny(" in an array of ", stringArray1);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(7, stringArray0.length);
      assertEquals(7, stringArray1.length);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertFalse(boolean2);
      
      String string6 = StringUtils.abbreviateMiddle(".\"FnMn\"_8]D:", "ch", 5);
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string5));
      assertEquals(".\"ch:", string6);
      
      int int1 = StringUtils.indexOfAny((CharSequence) ",/66A7z~@r:n5z ?m", "\n");
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test370()  throws Throwable  {
      String string0 = "W~p/]:FDw`qEP(g{Xm";
      char char0 = 'v';
      String string1 = StringUtils.wrap("W~p/]:FDw`qEP(g{Xm", 'v');
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("vW~p/]:FDw`qEP(g{Xmv", string1);
      
      String string2 = "aD";
      String string3 = "";
      String string4 = StringUtils.remove("vW~p/]:FDw`qEP(g{Xmv", "");
      assertNotNull(string4);
      assertTrue(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertEquals("vW~p/]:FDw`qEP(g{Xmv", string4);
      
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "vW~p/]:FDw`qEP(g{Xmv");
      assertNotNull(charBuffer0);
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(20, charBuffer0.length());
      assertFalse(charBuffer0.isDirect());
      assertTrue(charBuffer0.isReadOnly());
      assertEquals(20, charBuffer0.remaining());
      assertFalse(charBuffer0.hasArray());
      assertEquals(20, charBuffer0.limit());
      assertEquals(0, charBuffer0.position());
      assertEquals(20, charBuffer0.capacity());
      assertEquals("vW~p/]:FDw`qEP(g{Xmv", charBuffer0.toString());
      
      CharBuffer charBuffer1 = charBuffer0.slice();
      assertNotNull(charBuffer1);
      assertNotSame(charBuffer0, charBuffer1);
      assertNotSame(charBuffer1, charBuffer0);
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(20, charBuffer0.length());
      assertFalse(charBuffer0.isDirect());
      assertTrue(charBuffer0.isReadOnly());
      assertEquals(20, charBuffer0.remaining());
      assertFalse(charBuffer0.hasArray());
      assertEquals(20, charBuffer0.limit());
      assertEquals(0, charBuffer0.position());
      assertEquals(20, charBuffer0.capacity());
      assertEquals("vW~p/]:FDw`qEP(g{Xmv", charBuffer0.toString());
      assertFalse(charBuffer1.isDirect());
      assertEquals(20, charBuffer1.remaining());
      assertEquals(20, charBuffer1.capacity());
      assertTrue(charBuffer1.hasRemaining());
      assertTrue(charBuffer1.isReadOnly());
      assertEquals("vW~p/]:FDw`qEP(g{Xmv", charBuffer1.toString());
      assertEquals(0, charBuffer1.position());
      assertFalse(charBuffer1.hasArray());
      assertEquals(20, charBuffer1.limit());
      assertEquals(20, charBuffer1.length());
      assertTrue(charBuffer1.equals((Object)charBuffer0));
      
      int int0 = 122;
      // Undeclared exception!
      try { 
        StringUtils.removeFirst("vW~p/]:FDw`qEP(g{Xmv", "W~p/]:FDw`qEP(g{Xm");
        fail("Expecting exception: PatternSyntaxException");
      
      } catch(PatternSyntaxException e) {
         //
         // Illegal repetition near index 14
         // W~p/]:FDw`qEP(g{Xm
         //               ^
         //
         verifyException("java.util.regex.Pattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test371()  throws Throwable  {
      String string0 = StringUtils.remove("W~p/]:FDw`qEP(g{Xm", "W~p/]:FDw`qEP(g{Xm");
      assertNotNull(string0);
      assertEquals("", string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[7];
      charSequenceArray0[1] = (CharSequence) "";
      String string1 = StringUtils.defaultString("", "MhTwQcx/_PKe*xv\"");
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      
      String string2 = StringUtils.chomp(".M,KjXgwsMU,", "=]Un2oPT<");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals(".M,KjXgwsMU,", string2);
      
      String[] stringArray0 = StringUtils.split(".M,KjXgwsMU,");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      String string3 = StringUtils.substringBeforeLast(".M,KjXgwsMU,", "=]Un2oPT<");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string2));
      assertEquals(".M,KjXgwsMU,", string3);
      
      boolean boolean0 = StringUtils.endsWith((CharSequence) null, "=]Un2oPT<");
      assertFalse(boolean0);
      
      long[] longArray0 = new long[0];
      int int0 = StringUtils.compareIgnoreCase((String) null, "Minimum abbreviation width with offset is %d", false);
      assertEquals(1, int0);
      
      Locale locale0 = Locale.CANADA;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("CA", locale0.getCountry());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en_CA", locale0.toString());
      assertEquals("en", locale0.getLanguage());
      
      String string4 = locale0.getDisplayCountry();
      assertNotNull(string4);
      assertEquals("", locale0.getVariant());
      assertEquals("CA", locale0.getCountry());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en_CA", locale0.toString());
      assertEquals("en", locale0.getLanguage());
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertEquals("Canada", string4);
      
      String[] stringArray1 = Locale.getISOCountries();
      assertNotNull(stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(250, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.toString());
      assertEquals("UTF-8", charset0.name());
      
      String string5 = "Asrswe==p5@L+jAsrswe==p5@L+jAsrswe==p5@L+jAsrswe==p5@L+j\\uMinimum abbreviation width with offset is %dAsrswe==p5@L+jAsrswe==p5@L+jAsrswe==p5@L+jAsrswe==p5@L+j\\uMinimum abbreviation width with offset is %d";
      byte[] byteArray0 = StringUtils.getBytes(string5, charset0);
      assertNotNull(byteArray0);
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.toString());
      assertEquals("UTF-8", charset0.name());
      assertEquals(204, byteArray0.length);
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test372()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[0] = " vs ";
      String string0 = StringUtils.strip(" vs ");
      assertNotNull(string0);
      assertEquals("vs", string0);
      
      double double0 = StringUtils.getJaroWinklerDistance("vs", "vs");
      assertEquals(1.0, double0, 0.01);
      
      boolean boolean0 = StringUtils.equalsAny(" vs ", stringArray0);
      assertEquals(7, stringArray0.length);
      assertTrue(boolean0);
      
      boolean boolean1 = StringUtils.isNumeric("vs");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      int int0 = StringUtils.length(" is not in the range '0' - '9'");
      assertEquals(30, int0);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = (double) '}';
      String string1 = StringUtils.join(doubleArray0, '}', 16, 16);
      assertNotNull(string1);
      assertEquals(3, doubleArray0.length);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertArrayEquals(new double[] {1.0, 125.0, 0.0}, doubleArray0, 0.01);
      
      boolean boolean2 = StringUtils.isNumericSpace(" vs ");
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      int int1 = StringUtils.length(" vs ");
      assertFalse(int1 == int0);
      assertEquals(4, int1);
  }

  @Test(timeout = 4000)
  public void test373()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[1] = 52;
      intArray0[2] = (-2935);
      intArray0[3] = (-2935);
      intArray0[4] = 2124;
      intArray0[5] = 987;
      String string0 = StringUtils.join(intArray0, 'S');
      assertNotNull(string0);
      assertEquals(6, intArray0.length);
      assertEquals("0S52S-2935S-2935S2124S987", string0);
      assertArrayEquals(new int[] {0, 52, (-2935), (-2935), 2124, 987}, intArray0);
      
      boolean boolean0 = StringUtils.endsWithIgnoreCase("0S52S-2935S-2935S2124S987", "0S52S-2935S-2935S2124S987");
      assertTrue(boolean0);
      
      String[] stringArray0 = Locale.getISOCountries();
      assertNotNull(stringArray0);
      assertEquals(250, stringArray0.length);
      
      Locale locale0 = Locale.KOREAN;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ko", locale0.toString());
      
      Locale locale1 = locale0.stripExtensions();
      assertNotNull(locale1);
      assertSame(locale0, locale1);
      assertSame(locale1, locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ko", locale0.toString());
      assertEquals("ko", locale1.toString());
      assertEquals("kor", locale1.getISO3Language());
      assertEquals("", locale1.getVariant());
      assertEquals("", locale1.getISO3Country());
      assertEquals("ko", locale1.getLanguage());
      assertEquals("", locale1.getCountry());
      
      Locale locale2 = Locale.JAPAN;
      assertNotNull(locale2);
      assertNotSame(locale2, locale0);
      assertNotSame(locale2, locale1);
      assertEquals("", locale2.getVariant());
      assertEquals("ja", locale2.getLanguage());
      assertEquals("jpn", locale2.getISO3Language());
      assertEquals("JP", locale2.getCountry());
      assertEquals("ja_JP", locale2.toString());
      assertEquals("JPN", locale2.getISO3Country());
      assertFalse(locale2.equals((Object)locale0));
      assertFalse(locale2.equals((Object)locale1));
      
      String string1 = locale2.getDisplayVariant();
      assertNotNull(string1);
      assertNotSame(locale2, locale0);
      assertNotSame(locale2, locale1);
      assertEquals("", locale2.getVariant());
      assertEquals("ja", locale2.getLanguage());
      assertEquals("jpn", locale2.getISO3Language());
      assertEquals("JP", locale2.getCountry());
      assertEquals("ja_JP", locale2.toString());
      assertEquals("JPN", locale2.getISO3Country());
      assertFalse(locale2.equals((Object)locale0));
      assertFalse(locale2.equals((Object)locale1));
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      
      String string2 = locale2.getDisplayScript();
      assertNotNull(string2);
      assertNotSame(locale2, locale0);
      assertNotSame(locale2, locale1);
      assertEquals("", locale2.getVariant());
      assertEquals("ja", locale2.getLanguage());
      assertEquals("jpn", locale2.getISO3Language());
      assertEquals("JP", locale2.getCountry());
      assertEquals("ja_JP", locale2.toString());
      assertEquals("JPN", locale2.getISO3Country());
      assertFalse(locale2.equals((Object)locale0));
      assertFalse(locale2.equals((Object)locale1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("", string2);
      
      Locale locale3 = Locale.GERMANY;
      assertNotNull(locale3);
      assertNotSame(locale3, locale0);
      assertNotSame(locale3, locale2);
      assertNotSame(locale3, locale1);
      assertEquals("deu", locale3.getISO3Language());
      assertEquals("DE", locale3.getCountry());
      assertEquals("DEU", locale3.getISO3Country());
      assertEquals("de", locale3.getLanguage());
      assertEquals("de_DE", locale3.toString());
      assertEquals("", locale3.getVariant());
      assertFalse(locale3.equals((Object)locale0));
      assertFalse(locale3.equals((Object)locale2));
      assertFalse(locale3.equals((Object)locale1));
      
      String string3 = StringUtils.trim("");
      assertNotNull(string3);
      assertTrue(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string1));
      assertEquals("", string3);
      
      String string4 = StringUtils.mid("0S52S-2935S-2935S2124S987", 1228, 3);
      assertNotNull(string4);
      assertTrue(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertEquals("", string4);
      
      String string5 = StringUtils.join((float[]) null, 'u', (-1038), 52);
      assertNull(string5);
      
      boolean boolean1 = StringUtils.startsWith((CharSequence) null, (CharSequence) null);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String string6 = StringUtils.center((String) null, 1483, ')');
      assertNull(string6);
      
      String string7 = StringUtils.substringAfterLast((String) null, (-1038));
      assertNull(string7);
      
      String string8 = StringUtils.center((String) null, 1756, (String) null);
      assertNull(string8);
  }

  @Test(timeout = 4000)
  public void test374()  throws Throwable  {
      String string0 = StringUtils.rotate("Q*FlkDF=r\"b=6._", 10);
      assertNotNull(string0);
      assertEquals("DF=r\"b=6._Q*Flk", string0);
      
      String string1 = StringUtils.defaultString("Q*FlkDF=r\"b=6._");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("Q*FlkDF=r\"b=6._", string1);
      
      String string2 = StringUtils.rightPad((String) null, 10);
      assertNull(string2);
  }

  @Test(timeout = 4000)
  public void test375()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "US.^e:o_ufGpA";
      String[] stringArray1 = StringUtils.stripAll(stringArray0);
      assertNotNull(stringArray1);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(1, stringArray0.length);
      assertEquals(1, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      boolean boolean0 = StringUtils.isAlphanumeric("(d");
      assertFalse(boolean0);
      
      int int0 = StringUtils.compareIgnoreCase("org.apache.commons.lang3.StringUtils5|5pGW#urA~r?~3", "u=]@|On8X7H27[2Or");
      assertEquals((-6), int0);
      
      String string0 = StringUtils.trimToEmpty("");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.substring("(d", (-2208), (-233));
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      
      String string2 = StringUtils.substringAfter("", (-6));
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertEquals("", string2);
  }

  @Test(timeout = 4000)
  public void test376()  throws Throwable  {
      String string0 = StringUtils.right("FW;]~`2^s_P6:NRY", (-2094));
      assertNotNull(string0);
      assertEquals("", string0);
      
      boolean boolean0 = StringUtils.isAllLowerCase("");
      assertFalse(boolean0);
      
      int int0 = StringUtils.length("FW;]~`2^s_P6:NRY");
      assertEquals(16, int0);
  }

  @Test(timeout = 4000)
  public void test377()  throws Throwable  {
      String string0 = StringUtils.rightPad("r4", 23, "The Array must not be null");
      assertNotNull(string0);
      assertEquals("r4The Array must not be", string0);
      
      String[] stringArray0 = new String[7];
      stringArray0[1] = "The Array must not be null";
      stringArray0[2] = "The String must not be empty";
      stringArray0[3] = "The Array must not be null";
      stringArray0[4] = "r4The Array must not be";
      stringArray0[5] = "r4The Array must not be";
      String[] stringArray1 = new String[6];
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      stringArray1[0] = "The String must not be empty";
      stringArray1[1] = "The Array must not be null";
      stringArray1[2] = "The Array must not be null";
      stringArray1[4] = "The String must not be empty";
      stringArray1[5] = "r4";
      // Undeclared exception!
      try { 
        StringUtils.replaceEachRepeatedly("The String must not be empty", stringArray0, stringArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Search and Replace array lengths don't match: 7 vs 6
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test378()  throws Throwable  {
      String string0 = StringUtils.rightPad("r4", 23, "The Array must not be null");
      assertNotNull(string0);
      assertEquals("r4The Array must not be", string0);
      
      String[] stringArray0 = new String[7];
      stringArray0[0] = "r4";
      stringArray0[1] = "The Array must not be null";
      stringArray0[2] = "The String must not be empty";
      stringArray0[3] = "The Array must not be null";
      stringArray0[4] = "r4The Array must not be";
      stringArray0[5] = "r4The Array must not be";
      stringArray0[6] = "The String must not be empty";
      String[] stringArray1 = new String[6];
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      stringArray1[0] = "The String must not be empty";
      stringArray1[1] = "The Array must not be null";
      stringArray1[2] = "The Array must not be null";
      stringArray1[3] = "The String must not be empty";
      stringArray1[4] = "The String must not be empty";
      stringArray1[5] = "r4";
      // Undeclared exception!
      try { 
        StringUtils.replaceEachRepeatedly("The String must not be empty", stringArray0, stringArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Search and Replace array lengths don't match: 7 vs 6
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test379()  throws Throwable  {
      String string0 = StringUtils.substringBetween("ClP>2# gfkKWB@vC", "O*}V{J=HV)l)@p<MK@2", "pV&d&F@?O[k");
      assertNull(string0);
      
      String string1 = StringUtils.removeIgnoreCase("pV&d&F@?O[k", (String) null);
      assertNotNull(string1);
      assertEquals("pV&d&F@?O[k", string1);
      
      String string2 = StringUtils.unwrap("O*}V{J=HV)l)@p<MK@2", (String) null);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "O*}V{J=HV)l)@p<MK@2", (CharSequence) "O*}V{J=HV)l)@p<MK@2", 664);
      assertEquals(0, int0);
      
      String string3 = StringUtils.abbreviate("ClP>2# gfkKWB@vC", (String) null, 664, 664);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals("ClP>2# gfkKWB@vC", string3);
      
      char[] charArray0 = new char[4];
      charArray0[0] = '3';
      charArray0[1] = 'O';
      charArray0[2] = '?';
      charArray0[3] = '5';
      String string4 = StringUtils.join(charArray0, '3');
      assertNotNull(string4);
      assertEquals(4, charArray0.length);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertEquals("33O3?35", string4);
      assertArrayEquals(new char[] {'3', 'O', '?', '5'}, charArray0);
      
      boolean boolean0 = StringUtils.isAlphaSpace((CharSequence) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test380()  throws Throwable  {
      String string0 = "";
      String string1 = StringUtils.remove("W~p/]:FDw`qEP(g{Xm", "W~p/]:FDw`qEP(g{Xm");
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "");
      assertNotNull(charBuffer0);
      assertEquals(0, charBuffer0.remaining());
      assertEquals(0, charBuffer0.capacity());
      assertFalse(charBuffer0.isDirect());
      assertFalse(charBuffer0.hasArray());
      assertEquals(0, charBuffer0.length());
      assertEquals(0, charBuffer0.position());
      assertTrue(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.limit());
      assertFalse(charBuffer0.hasRemaining());
      assertEquals("", charBuffer0.toString());
      
      CharBuffer charBuffer1 = charBuffer0.slice();
      assertNotNull(charBuffer1);
      assertNotSame(charBuffer0, charBuffer1);
      assertNotSame(charBuffer1, charBuffer0);
      assertEquals(0, charBuffer0.remaining());
      assertEquals(0, charBuffer0.capacity());
      assertFalse(charBuffer0.isDirect());
      assertFalse(charBuffer0.hasArray());
      assertEquals(0, charBuffer0.length());
      assertEquals(0, charBuffer0.position());
      assertTrue(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.limit());
      assertFalse(charBuffer0.hasRemaining());
      assertEquals("", charBuffer0.toString());
      assertEquals(0, charBuffer1.limit());
      assertEquals(0, charBuffer1.position());
      assertTrue(charBuffer1.isReadOnly());
      assertFalse(charBuffer1.hasRemaining());
      assertEquals(0, charBuffer1.capacity());
      assertFalse(charBuffer1.hasArray());
      assertEquals(0, charBuffer1.length());
      assertFalse(charBuffer1.isDirect());
      assertEquals("", charBuffer1.toString());
      assertEquals(0, charBuffer1.remaining());
      assertTrue(charBuffer1.equals((Object)charBuffer0));
      
      // Undeclared exception!
      try { 
        StringUtils.truncate("W~p/]:FDw`qEP(g{Xm", (-3377));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // maxWith cannot be negative
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test381()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      assertNotNull(stringWriter0);
      assertEquals("", stringWriter0.toString());
      
      float[] floatArray0 = new float[7];
      String string0 = "Threshold must not be negative";
      String string1 = StringUtils.substringAfterLast("!*=fq(yv=lxy", "Threshold must not be negative");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      
      // Undeclared exception!
      try { 
        StringUtils.truncate("hBwW", (-77));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // maxWith cannot be negative
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test382()  throws Throwable  {
      Locale locale0 = Locale.KOREAN;
      assertNotNull(locale0);
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("ko", locale0.toString());
      
      Locale locale1 = locale0.stripExtensions();
      assertNotNull(locale1);
      assertSame(locale0, locale1);
      assertSame(locale1, locale0);
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("ko", locale0.toString());
      assertEquals("ko", locale1.toString());
      assertEquals("", locale1.getISO3Country());
      assertEquals("", locale1.getCountry());
      assertEquals("ko", locale1.getLanguage());
      assertEquals("", locale1.getVariant());
      assertEquals("kor", locale1.getISO3Language());
      
      String string0 = locale0.getDisplayVariant();
      assertNotNull(string0);
      assertSame(locale0, locale1);
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("ko", locale0.toString());
      assertEquals("", string0);
      
      Locale locale2 = locale0.stripExtensions();
      assertNotNull(locale2);
      assertSame(locale0, locale1);
      assertSame(locale0, locale2);
      assertSame(locale2, locale0);
      assertSame(locale2, locale1);
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("ko", locale0.toString());
      assertEquals("ko", locale2.toString());
      assertEquals("kor", locale2.getISO3Language());
      assertEquals("", locale2.getCountry());
      assertEquals("ko", locale2.getLanguage());
      assertEquals("", locale2.getVariant());
      assertEquals("", locale2.getISO3Country());
      
      Locale locale3 = Locale.GERMANY;
      assertNotNull(locale3);
      assertNotSame(locale3, locale1);
      assertNotSame(locale3, locale2);
      assertNotSame(locale3, locale0);
      assertEquals("", locale3.getVariant());
      assertEquals("DEU", locale3.getISO3Country());
      assertEquals("de", locale3.getLanguage());
      assertEquals("de_DE", locale3.toString());
      assertEquals("deu", locale3.getISO3Language());
      assertEquals("DE", locale3.getCountry());
      assertFalse(locale3.equals((Object)locale1));
      assertFalse(locale3.equals((Object)locale2));
      assertFalse(locale3.equals((Object)locale0));
      
      String string1 = StringUtils.trim("");
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      
      String string2 = StringUtils.mid("", 3093, 3093);
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string1));
      assertEquals("", string2);
      
      String string3 = StringUtils.unwrap("_%-JIuC^~&qm2PH>8%", 'c');
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals("_%-JIuC^~&qm2PH>8%", string3);
      
      String string4 = StringUtils.uncapitalize(", Length: ");
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertEquals(", Length: ", string4);
      
      boolean boolean0 = StringUtils.startsWith("_%-JIuC^~&qm2PH>8%", ", Length: ");
      assertFalse(boolean0);
      
      String string5 = StringUtils.center("}npB7<sjo>s^<Gu", 3093, 't');
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      
      String string6 = StringUtils.abbreviateMiddle(string5, ", Length: ", 3093);
      assertNotNull(string6);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test383()  throws Throwable  {
      int[] intArray0 = new int[14];
      intArray0[0] = (int) '7';
      intArray0[1] = (int) '7';
      intArray0[1] = (int) '7';
      String string0 = StringUtils.join(intArray0, 'n');
      assertNotNull(string0);
      assertEquals(14, intArray0.length);
      assertEquals("55n55n0n0n0n0n0n0n0n0n0n0n0n0", string0);
      
      String[] stringArray0 = Locale.getISOCountries();
      assertNotNull(stringArray0);
      assertEquals(250, stringArray0.length);
      
      Locale locale0 = Locale.KOREAN;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ko", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("ko", locale0.getLanguage());
      
      Locale locale1 = locale0.stripExtensions();
      assertNotNull(locale1);
      assertSame(locale0, locale1);
      assertSame(locale1, locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ko", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("ko", locale1.getLanguage());
      assertEquals("ko", locale1.toString());
      assertEquals("", locale1.getVariant());
      assertEquals("kor", locale1.getISO3Language());
      assertEquals("", locale1.getISO3Country());
      assertEquals("", locale1.getCountry());
      
      String string1 = locale1.getDisplayVariant();
      assertNotNull(string1);
      assertSame(locale0, locale1);
      assertSame(locale1, locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ko", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("ko", locale1.getLanguage());
      assertEquals("ko", locale1.toString());
      assertEquals("", locale1.getVariant());
      assertEquals("kor", locale1.getISO3Language());
      assertEquals("", locale1.getISO3Country());
      assertEquals("", locale1.getCountry());
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      
      Locale locale2 = Locale.GERMANY;
      assertNotNull(locale2);
      assertNotSame(locale2, locale0);
      assertNotSame(locale2, locale1);
      assertEquals("de_DE", locale2.toString());
      assertEquals("", locale2.getVariant());
      assertEquals("DE", locale2.getCountry());
      assertEquals("de", locale2.getLanguage());
      assertEquals("deu", locale2.getISO3Language());
      assertEquals("DEU", locale2.getISO3Country());
      assertFalse(locale2.equals((Object)locale0));
      assertFalse(locale2.equals((Object)locale1));
      
      String string2 = StringUtils.trim("");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertEquals("", string2);
      
      String string3 = StringUtils.mid("Aborting to protect against StackOverflowError - output of one loop is the input of another", 10, 10);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals("o protect ", string3);
      
      String string4 = StringUtils.unwrap("{}", '7');
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertEquals("{}", string4);
      
      boolean boolean0 = StringUtils.startsWith("", "o protect ");
      assertFalse(boolean0);
      
      String string5 = StringUtils.center("{}", 3093, 'n');
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
  }

  @Test(timeout = 4000)
  public void test384()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = '[';
      charArray0[1] = '[';
      charArray0[2] = '[';
      boolean boolean0 = StringUtils.containsAny((CharSequence) "", charArray0);
      assertEquals(3, charArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new char[] {'[', '[', '['}, charArray0);
      
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "", charArray0);
      assertEquals(3, charArray0.length);
      assertEquals(0, int0);
      assertArrayEquals(new char[] {'[', '[', '['}, charArray0);
      
      String string0 = StringUtils.mid("", 0, 0);
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test385()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = " vs ";
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      Locale.Category[] locale_CategoryArray0 = new Locale.Category[2];
      locale_CategoryArray0[0] = locale_Category0;
      locale_CategoryArray0[1] = locale_Category0;
      EnumSet<Locale.Category> enumSet0 = EnumSet.of(locale_Category0, locale_CategoryArray0);
      assertNotNull(enumSet0);
      assertEquals(1, enumSet0.size());
      assertEquals(2, locale_CategoryArray0.length);
      assertTrue(enumSet0.contains(locale_Category0));
      
      boolean boolean0 = enumSet0.add(locale_Category0);
      assertEquals(1, enumSet0.size());
      assertEquals(2, locale_CategoryArray0.length);
      assertFalse(boolean0);
      assertTrue(enumSet0.contains(locale_Category0));
      
      EnumSet<Locale.Category> enumSet1 = EnumSet.of(locale_Category0, locale_CategoryArray0);
      assertNotNull(enumSet1);
      assertNotSame(enumSet1, enumSet0);
      assertEquals(1, enumSet1.size());
      assertEquals(2, locale_CategoryArray0.length);
      assertTrue(enumSet1.equals((Object)enumSet0));
      assertTrue(enumSet1.contains(locale_Category0));
      
      Iterator<Locale.Category> iterator0 = enumSet1.iterator();
      assertNotNull(iterator0);
      assertNotSame(enumSet1, enumSet0);
      assertEquals(1, enumSet1.size());
      assertEquals(2, locale_CategoryArray0.length);
      assertTrue(enumSet1.equals((Object)enumSet0));
      assertTrue(enumSet1.contains(locale_Category0));
      
      String string0 = StringUtils.join(iterator0, "Ua):3]I<ozRQ`OI![");
      assertNotNull(string0);
      assertNotSame(enumSet1, enumSet0);
      assertEquals(1, enumSet1.size());
      assertEquals(2, locale_CategoryArray0.length);
      assertTrue(enumSet1.equals((Object)enumSet0));
      assertEquals("FORMAT", string0);
      assertTrue(enumSet1.contains(locale_Category0));
      
      boolean boolean1 = StringUtils.contains((CharSequence) " vs ", (-1372));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test386()  throws Throwable  {
      String string0 = StringUtils.substringAfterLast("W~p/]:FDw`qEP(g{Xm", (-1104));
      assertNotNull(string0);
      assertEquals("", string0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens((String) null, (String) null);
      assertNull(stringArray0);
      
      String string1 = StringUtils.unwrap("', has a length less than 2", "");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("', has a length less than 2", string1);
      
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      String string2 = StringUtils.getIfBlank("}mn)GjCTd1O}bu", supplier0);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("}mn)GjCTd1O}bu", string2);
      
      String string3 = StringUtils.remove("W~p/]:FDw`qEP(g{Xm", "org.apache.commons.lang3.StringUtils");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals("W~p/]:FDw`qEP(g{Xm", string3);
      
      boolean boolean0 = StringUtils.endsWithAny("W~p/]:FDw`qEP(g{Xm", (CharSequence[]) null);
      assertFalse(boolean0);
      
      String string4 = StringUtils.wrap("', has a length less than 2", '_');
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertEquals("_', has a length less than 2_", string4);
      
      char[] charArray0 = new char[3];
      charArray0[0] = '_';
      charArray0[1] = 'E';
      charArray0[2] = '_';
      int int0 = StringUtils.indexOfAny((CharSequence) "}mn)GjCTd1O}bu", charArray0);
      assertEquals(3, charArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new char[] {'_', 'E', '_'}, charArray0);
      
      boolean boolean1 = StringUtils.startsWithIgnoreCase("`7p(", "`7p(");
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String string5 = StringUtils.strip("', has a length less than 2", ";H(&-1,,A hWM^8iXIW");
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertTrue(string5.equals((Object)string1));
      assertEquals("', has a length less than 2", string5);
      
      boolean boolean2 = StringUtils.isAnyEmpty((CharSequence[]) null);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test387()  throws Throwable  {
      String string0 = StringUtils.abbreviateMiddle("E2*1.s*OqQHFD&gQd9O", "E2*1.s*OqQHFD&gQd9O", (-526));
      assertNotNull(string0);
      assertEquals("E2*1.s*OqQHFD&gQd9O", string0);
      
      Locale locale0 = Locale.ENGLISH;
      assertNotNull(locale0);
      assertEquals("", locale0.getCountry());
      assertEquals("en", locale0.toString());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      
      int int0 = new Integer((-5235));
      assertEquals((-5235), int0);
      
      int int1 = StringUtils.countMatches((CharSequence) "E2*1.s*OqQHFD&gQd9O", ':');
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      String string1 = StringUtils.removeEndIgnoreCase(".M,KjXgwysMU,", (String) null);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals(".M,KjXgwysMU,", string1);
  }

  @Test(timeout = 4000)
  public void test388()  throws Throwable  {
      String string0 = StringUtils.upperCase("", (Locale) null);
      assertNotNull(string0);
      assertEquals("", string0);
      
      boolean boolean0 = StringUtils.isNotEmpty("");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isAsciiPrintable("");
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String string1 = StringUtils.upperCase("", (Locale) null);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      
      String string2 = StringUtils.replacePattern("", "", "");
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertEquals("", string2);
      
      String string3 = StringUtils.getDigits("cQ`d[aTsoh.9h");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals("9", string3);
      
      Stack<String> stack0 = new Stack<String>();
      assertNotNull(stack0);
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertFalse(stack0.contains(string3));
      
      stack0.removeAllElements();
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertFalse(stack0.contains(string3));
      
      stack0.addElement("");
      assertFalse(stack0.empty());
      assertEquals(1, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertFalse(stack0.isEmpty());
      assertTrue(stack0.contains(""));
      assertFalse(stack0.contains(string3));
      
      ListIterator<String> listIterator0 = stack0.listIterator();
      assertNotNull(listIterator0);
      assertFalse(stack0.empty());
      assertEquals(1, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertFalse(stack0.isEmpty());
      assertTrue(listIterator0.hasNext());
      assertFalse(listIterator0.hasPrevious());
      assertTrue(stack0.contains(""));
      assertFalse(stack0.contains(string3));
      
      String string4 = StringUtils.join((Iterator<?>) listIterator0, 'D');
      assertNotNull(string4);
      assertFalse(stack0.empty());
      assertEquals(1, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertFalse(stack0.isEmpty());
      assertFalse(listIterator0.hasNext());
      assertTrue(listIterator0.hasPrevious());
      assertTrue(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string1));
      assertEquals("", string4);
      assertTrue(stack0.contains(string2));
      assertFalse(stack0.contains(string3));
      
      byte byte0 = (byte)16;
      // Undeclared exception!
      try { 
        Charset.forName("Threshold must not be negative");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // Threshold must not be negative
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test389()  throws Throwable  {
      String string0 = StringUtils.wrap("sw)du#q_^#@;oii", '@');
      assertNotNull(string0);
      assertEquals("@sw)du#q_^#@;oii@", string0);
      
      String string1 = StringUtils.wrap(">H=5GIEj&B/`mYz:WoXN8Bye", "@sw)du#q_^#@;oii@");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("@sw)du#q_^#@;oii@>H=5GIEj&B/`mYz:WoXN8Bye@sw)du#q_^#@;oii@", string1);
      
      boolean boolean0 = StringUtils.isAlphaSpace(">H=5GIEj&B/`mYz:WoXN8Bye");
      assertFalse(boolean0);
      
      String string2 = StringUtils.stripEnd("CZfk", "@sw)du#q_^#@;oii@>H=5GIEj&B/`mYz:WoXN8Bye@sw)du#q_^#@;oii@");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("CZfk", string2);
  }

  @Test(timeout = 4000)
  public void test390()  throws Throwable  {
      String string0 = StringUtils.capitalize("Index: ");
      assertNotNull(string0);
      assertEquals("Index: ", string0);
      
      String string1 = StringUtils.substringBefore("", "");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      
      String string2 = StringUtils.upperCase("");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertEquals("", string2);
      
      int int0 = StringUtils.indexOf((CharSequence) "", (CharSequence) "Index: ", 29);
      assertEquals((-1), int0);
      
      double double0 = StringUtils.getJaroWinklerDistance("", "Index: ");
      assertEquals(0.0, double0, 0.01);
      
      String string3 = StringUtils.replaceChars("", "", "");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string2));
      assertEquals("", string3);
      
      int int1 = StringUtils.lastIndexOf((CharSequence) "", (CharSequence) "", (-1));
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      String string4 = StringUtils.stripEnd("[jMY~8", "Index: ");
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertEquals("[jMY~8", string4);
      
      int int2 = StringUtils.countMatches((CharSequence) "", (CharSequence) "Index: ");
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(0, int2);
      
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("[jMY~8");
      assertNotNull(stringArray0);
      assertEquals(5, stringArray0.length);
      
      String string5 = StringUtils.rotate("Index: ", (-1));
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertEquals("ndex: I", string5);
      
      String string6 = StringUtils.center("Locale must not be null", (-1367));
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string1));
      assertEquals("Locale must not be null", string6);
      
      String string7 = StringUtils.lowerCase("9m;} Eu{J n~Ei");
      assertNotNull(string7);
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string6));
      assertEquals("9m;} eu{j n~ei", string7);
  }

  @Test(timeout = 4000)
  public void test391()  throws Throwable  {
      String string0 = StringUtils.remove("$4'Tcj.*5", 'o');
      assertNotNull(string0);
      assertEquals("$4'Tcj.*5", string0);
      
      String string1 = StringUtils.SPACE;
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals(" ", string1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) " ";
      charSequenceArray0[2] = (CharSequence) "$4'Tcj.*5";
      charSequenceArray0[3] = (CharSequence) "";
      charSequenceArray0[4] = (CharSequence) "";
      boolean boolean0 = StringUtils.isAlphanumericSpace("$4'Tcj.*5");
      assertFalse(boolean0);
      
      String string2 = StringUtils.difference("5HNV", "ko ?8?sYQU");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("ko ?8?sYQU", string2);
      
      String string3 = StringUtils.trimToNull("");
      assertNull(string3);
      
      String string4 = StringUtils.wrap("ng3.StringUtils", '[');
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertEquals("[ng3.StringUtils[", string4);
      
      char[] charArray0 = new char[0];
      int int0 = StringUtils.indexOfAny(charSequenceArray0[2], charArray0);
      assertEquals(5, charSequenceArray0.length);
      assertEquals(0, charArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new char[] {}, charArray0);
      
      String string5 = StringUtils.join((Object[]) charSequenceArray0, "z-1");
      assertNotNull(string5);
      assertEquals(5, charSequenceArray0.length);
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertEquals("z-1 z-1$4'Tcj.*5z-1z-1", string5);
      
      int int1 = StringUtils.lastIndexOfAny("z-1 z-1$4'Tcj.*5z-1z-1", charSequenceArray0);
      assertEquals(5, charSequenceArray0.length);
      assertFalse(int1 == int0);
      assertEquals(22, int1);
  }

  @Test(timeout = 4000)
  public void test392()  throws Throwable  {
      String string0 = StringUtils.leftPad("({yBTE<CM=<>!B&F=r", (-1725), 'H');
      assertNotNull(string0);
      assertEquals("({yBTE<CM=<>!B&F=r", string0);
      
      String string1 = StringUtils.abbreviateMiddle("u=]@|On8X7H27[2Or", "{}", (-1725));
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("u=]@|On8X7H27[2Or", string1);
      
      Class<Object> class0 = Object.class;
      ServiceLoader<Object> serviceLoader0 = ServiceLoader.loadInstalled(class0);
      assertNotNull(serviceLoader0);
      assertEquals("java.util.ServiceLoader[java.lang.Object]", serviceLoader0.toString());
      
      Class<CharBuffer> class1 = CharBuffer.class;
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ClassLoader classLoader1 = classLoader0.getParent();
      assertNotNull(classLoader1);
      assertFalse(classLoader1.equals((Object)classLoader0));
      
      ServiceLoader<CharBuffer> serviceLoader1 = ServiceLoader.load(class1, classLoader0);
      assertNotNull(serviceLoader1);
      assertEquals("java.util.ServiceLoader[java.nio.CharBuffer]", serviceLoader1.toString());
      assertFalse(classLoader0.equals((Object)classLoader1));
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "({yBTE<CM=<>!B&F=r";
      String string2 = StringUtils.joinWith("({yBTE<CM=<>!B&F=r", objectArray0);
      assertNotNull(string2);
      assertEquals(1, objectArray0.length);
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertEquals("({yBTE<CM=<>!B&F=r", string2);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparator(".M,KjXgwysMU,", "u=]@|On8X7H27[2Or", 440);
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      Locale locale0 = new Locale("({yBTE<CM=<>!B&F=r", "({yBTE<CM=<>!B&F=r", "({yBTE<CM=<>!B&F=r");
      assertNotNull(locale0);
      assertEquals("({ybte<cm=<>!b&f=r_({YBTE<CM=<>!B&F=R_({yBTE<CM=<>!B&F=r", locale0.toString());
      assertEquals("({YBTE<CM=<>!B&F=R", locale0.getCountry());
      assertEquals("({ybte<cm=<>!b&f=r", locale0.getLanguage());
      assertEquals("({yBTE<CM=<>!B&F=r", locale0.getVariant());
      
      String string3 = locale0.getDisplayName(locale0);
      assertNotNull(string3);
      assertEquals("({ybte<cm=<>!b&f=r_({YBTE<CM=<>!B&F=R_({yBTE<CM=<>!B&F=r", locale0.toString());
      assertEquals("({YBTE<CM=<>!B&F=R", locale0.getCountry());
      assertEquals("({ybte<cm=<>!b&f=r", locale0.getLanguage());
      assertEquals("({yBTE<CM=<>!B&F=r", locale0.getVariant());
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals("({ybte<cm=<>!b&f=r (({YBTE<CM=<>!B&F=R,({yBTE<CM=<>!B&F=r)", string3);
      
      int[] intArray0 = new int[17];
      intArray0[0] = (int) 'Y';
      intArray0[1] = (-131);
      String string4 = StringUtils.join(intArray0, 'H');
      assertNotNull(string4);
      assertEquals(17, intArray0.length);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertEquals("89H-131H0H0H0H0H0H0H0H0H0H0H0H0H0H0H0", string4);
      
      boolean boolean0 = StringUtils.startsWithAny("({yBTE<CM=<>!B&F=r", stringArray0);
      assertEquals(1, stringArray0.length);
      assertFalse(boolean0);
      
      String string5 = StringUtils.removeEndIgnoreCase("}Tf", ".M,KjXgwysMU,");
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertEquals("}Tf", string5);
      
      short[] shortArray0 = new short[0];
      String string6 = StringUtils.join(shortArray0, 'b');
      assertNotNull(string6);
      assertEquals(0, shortArray0.length);
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string1));
      assertEquals("", string6);
      assertArrayEquals(new short[] {}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test393()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      String string0 = StringUtils.stripToNull("XIqGd\"}!4Ple,");
      assertNotNull(string0);
      assertEquals("XIqGd\"}!4Ple,", string0);
      
      charSequenceArray0[0] = (CharSequence) "XIqGd\"}!4Ple,";
      String string1 = StringUtils.join((float[]) null, 'z');
      assertNull(string1);
      
      String string2 = StringUtils.remove("@~::fa|V#z;Iug &", '$');
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertEquals("@~::fa|V#z;Iug &", string2);
      
      int int0 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      boolean boolean0 = StringUtils.equalsAnyIgnoreCase(";i=", charSequenceArray0);
      assertEquals(3, charSequenceArray0.length);
      assertFalse(boolean0);
      
      String string3 = StringUtils.substringAfterLast("", "");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals("", string3);
      
      int[] intArray0 = StringUtils.toCodePoints("");
      assertNotNull(intArray0);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      
      String string4 = StringUtils.defaultString("5");
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertEquals("5", string4);
      
      boolean boolean1 = StringUtils.startsWithAny("@~::fa|V#z;Iug &", charSequenceArray0);
      assertEquals(3, charSequenceArray0.length);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test394()  throws Throwable  {
      String string0 = StringUtils.chomp("java.lang.Object@52b769b5java.lang.Object@1d3febfajava.lang.Object@4c16c3aejava.lang.Object@4a32f5f1java.lang.Object@23a1c7c3java.lang.Object@52b769b5java.lang.Object@1d3febfajava.lang.Object@4c16c3aejava.lang.Object@4a32f5f1java.lang.Object@23a1c7c3");
      assertNotNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[7];
      String string1 = StringUtils.unwrap("/s", "java.lang.Object@52b769b5java.lang.Object@1d3febfajava.lang.Object@4c16c3aejava.lang.Object@4a32f5f1java.lang.Object@23a1c7c3java.lang.Object@52b769b5java.lang.Object@1d3febfajava.lang.Object@4c16c3aejava.lang.Object@4a32f5f1java.lang.Object@23a1c7c3");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("/s", string1);
      
      charSequenceArray0[0] = (CharSequence) "/s";
      charSequenceArray0[1] = (CharSequence) "java.lang.Object@52b769b5java.lang.Object@1d3febfajava.lang.Object@4c16c3aejava.lang.Object@4a32f5f1java.lang.Object@23a1c7c3java.lang.Object@52b769b5java.lang.Object@1d3febfajava.lang.Object@4c16c3aejava.lang.Object@4a32f5f1java.lang.Object@23a1c7c3";
      charSequenceArray0[2] = (CharSequence) "java.lang.Object@52b769b5java.lang.Object@1d3febfajava.lang.Object@4c16c3aejava.lang.Object@4a32f5f1java.lang.Object@23a1c7c3java.lang.Object@52b769b5java.lang.Object@1d3febfajava.lang.Object@4c16c3aejava.lang.Object@4a32f5f1java.lang.Object@23a1c7c3";
      charSequenceArray0[3] = (CharSequence) "java.lang.Object@52b769b5java.lang.Object@1d3febfajava.lang.Object@4c16c3aejava.lang.Object@4a32f5f1java.lang.Object@23a1c7c3java.lang.Object@52b769b5java.lang.Object@1d3febfajava.lang.Object@4c16c3aejava.lang.Object@4a32f5f1java.lang.Object@23a1c7c3";
      charSequenceArray0[4] = (CharSequence) "java.lang.Object@52b769b5java.lang.Object@1d3febfajava.lang.Object@4c16c3aejava.lang.Object@4a32f5f1java.lang.Object@23a1c7c3java.lang.Object@52b769b5java.lang.Object@1d3febfajava.lang.Object@4c16c3aejava.lang.Object@4a32f5f1java.lang.Object@23a1c7c3";
      charSequenceArray0[5] = (CharSequence) "java.lang.Object@52b769b5java.lang.Object@1d3febfajava.lang.Object@4c16c3aejava.lang.Object@4a32f5f1java.lang.Object@23a1c7c3java.lang.Object@52b769b5java.lang.Object@1d3febfajava.lang.Object@4c16c3aejava.lang.Object@4a32f5f1java.lang.Object@23a1c7c3";
      charSequenceArray0[6] = (CharSequence) "java.lang.Object@52b769b5java.lang.Object@1d3febfajava.lang.Object@4c16c3aejava.lang.Object@4a32f5f1java.lang.Object@23a1c7c3java.lang.Object@52b769b5java.lang.Object@1d3febfajava.lang.Object@4c16c3aejava.lang.Object@4a32f5f1java.lang.Object@23a1c7c3";
      boolean boolean0 = StringUtils.startsWithAny("java.lang.Object@52b769b5java.lang.Object@1d3febfajava.lang.Object@4c16c3aejava.lang.Object@4a32f5f1java.lang.Object@23a1c7c3java.lang.Object@52b769b5java.lang.Object@1d3febfajava.lang.Object@4c16c3aejava.lang.Object@4a32f5f1java.lang.Object@23a1c7c3", charSequenceArray0);
      assertEquals(7, charSequenceArray0.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test395()  throws Throwable  {
      String string0 = StringUtils.substringAfterLast("W~p/]:FDw`qEP(g{Xm", 8);
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.unwrap("E=,1}G?in7_TlUU", 'v');
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("E=,1}G?in7_TlUU", string1);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "/L", (CharSequence) "");
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test396()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "java.lang.Object@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.Object@50d3e7ejava.lang.Object@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.Object@50d3e7e";
      stringArray0[1] = "java.lang.Object@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.Object@50d3e7ejava.lang.Object@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.Object@50d3e7e";
      stringArray0[2] = "java.lang.Object@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.Object@50d3e7ejava.lang.Object@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.Object@50d3e7e";
      stringArray0[3] = "java.lang.Object@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.Object@50d3e7ejava.lang.Object@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.Object@50d3e7e";
      String string0 = StringUtils.replaceEach("java.lang.Object@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.Object@50d3e7ejava.lang.Object@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.Object@50d3e7e", stringArray0, stringArray0);
      assertNotNull(string0);
      assertEquals(4, stringArray0.length);
      
      boolean boolean0 = StringUtils.isNumericSpace("java.lang.Object@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.Object@50d3e7ejava.lang.Object@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.Object@50d3e7e");
      assertFalse(boolean0);
      
      String string1 = StringUtils.removeEndIgnoreCase("java.lang.Object@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.Object@50d3e7ejava.lang.Object@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.Object@50d3e7e", "java.lang.Object@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.Object@50d3e7ejava.lang.Object@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.Object@50d3e7e");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      
      String string2 = StringUtils.wrap("pV&d&F@?O[k", "java.lang.Object@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.Object@50d3e7ejava.lang.Object@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.Object@50d3e7e");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      CharSequence[] charSequenceArray0 = new CharSequence[6];
      charSequenceArray0[0] = (CharSequence) "java.lang.Object@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.Object@50d3e7ejava.lang.Object@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.Object@50d3e7e";
      String string3 = StringUtils.stripToEmpty("JWoFHpGYV4");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals("JWoFHpGYV4", string3);
      
      String[] stringArray1 = StringUtils.stripAll(stringArray0);
      assertNotNull(stringArray1);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(4, stringArray0.length);
      assertEquals(4, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      int int0 = StringUtils.compareIgnoreCase("Zu*4-n!o`!mH6S_v", "java.lang.Object@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.Object@50d3e7ejava.lang.Object@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.Object@50d3e7e", true);
      assertEquals(16, int0);
      
      String string4 = StringUtils.trim("pV&d&F@?O[k");
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertEquals("pV&d&F@?O[k", string4);
      
      boolean boolean1 = StringUtils.endsWithAny(charSequenceArray0[0], stringArray1);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(4, stringArray0.length);
      assertEquals(6, charSequenceArray0.length);
      assertEquals(4, stringArray1.length);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String string5 = StringUtils.abbreviateMiddle("", "", 6);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string2));
      assertTrue(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertEquals("", string5);
      
      int int1 = StringUtils.indexOfAny((CharSequence) ",/66A7z~@r:n5z ?m", ",/66A7z~@r:n5z ?m");
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      String[] stringArray2 = StringUtils.splitPreserveAllTokens("");
      assertNotNull(stringArray2);
      assertNotSame(stringArray2, stringArray1);
      assertNotSame(stringArray2, stringArray0);
      assertEquals(0, stringArray2.length);
      assertFalse(stringArray2.equals((Object)stringArray1));
      assertFalse(stringArray2.equals((Object)stringArray0));
  }

  @Test(timeout = 4000)
  public void test397()  throws Throwable  {
      int int0 = (-1948);
      // Undeclared exception!
      try { 
        StringUtils.abbreviate("pV&d&F@?O[k", (-1948));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum abbreviation width is 4
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test398()  throws Throwable  {
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "iAmV", (CharSequence) "iAmV");
      assertEquals(0, int0);
      
      boolean boolean0 = StringUtils.isAsciiPrintable("iAmV");
      assertTrue(boolean0);
      
      String string0 = StringUtils.substringBetween("bLzViW%", (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test399()  throws Throwable  {
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) 'u';
      String string0 = StringUtils.wrap("5|5pGW#urA~r?~3", 'u');
      assertNotNull(string0);
      assertEquals("u5|5pGW#urA~r?~3u", string0);
      
      String string1 = StringUtils.toRootUpperCase("Minimum abbreviation width is %d");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("MINIMUM ABBREVIATION WIDTH IS %D", string1);
      
      String string2 = StringUtils.substringBetween("Minimum abbreviation width is %d", "}\"}|{Lx@=E=_OU9d=");
      assertNull(string2);
      
      String string3 = StringUtils.LF;
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals("\n", string3);
  }

  @Test(timeout = 4000)
  public void test400()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)108;
      byteArray0[1] = (byte) (-43);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-105);
      byteArray0[5] = (byte) (-118);
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)54;
      String string0 = StringUtils.join(byteArray0, '#', (int) (byte)108, (int) (byte)0);
      assertNotNull(string0);
      assertEquals(8, byteArray0.length);
      assertEquals("", string0);
      assertArrayEquals(new byte[] {(byte)108, (byte) (-43), (byte)0, (byte)0, (byte) (-105), (byte) (-118), (byte)0, (byte)54}, byteArray0);
      
      double[] doubleArray0 = new double[15];
      doubleArray0[0] = (double) (byte)0;
      doubleArray0[1] = 0.1;
      String string1 = StringUtils.substringBeforeLast("", "");
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier0).get();
      String string2 = StringUtils.getIfEmpty("", supplier0);
      assertNull(string2);
  }

  @Test(timeout = 4000)
  public void test401()  throws Throwable  {
      String string0 = StringUtils.substringAfterLast("W~p/]:FDw`qEP(g{Xm", (-1127));
      assertNotNull(string0);
      assertEquals("", string0);
      
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn("").when(supplier0).get();
      String string1 = StringUtils.getIfEmpty("", supplier0);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      String string2 = StringUtils.substringBefore("W~p/]:FDw`qEP(g{Xm", (-1127));
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("W~p/]:FDw`qEP(g{Xm", string2);
      
      charSequenceArray0[0] = (CharSequence) "W~p/]:FDw`qEP(g{Xm";
      Locale locale0 = Locale.FRANCE;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr_FR", locale0.toString());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("FR", locale0.getCountry());
      assertEquals("fr", locale0.getLanguage());
      
      String string3 = StringUtils.upperCase("W~p/]:FDw`qEP(g{Xm", locale0);
      assertNotNull(string3);
      assertEquals("", locale0.getVariant());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr_FR", locale0.toString());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("FR", locale0.getCountry());
      assertEquals("fr", locale0.getLanguage());
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals("W~P/]:FDW`QEP(G{XM", string3);
  }

  @Test(timeout = 4000)
  public void test402()  throws Throwable  {
      char[] charArray0 = new char[16];
      boolean boolean0 = StringUtils.containsAny((CharSequence) "", charArray0);
      assertEquals(16, charArray0.length);
      assertFalse(boolean0);
      
      String string0 = StringUtils.substringAfter("", "");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.normalizeSpace("\n");
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      
      String string2 = StringUtils.removePattern("", "Z~");
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertEquals("", string2);
      
      boolean boolean1 = StringUtils.equalsIgnoreCase("", "");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test403()  throws Throwable  {
      String string0 = "\\u";
      String string1 = StringUtils.trim(string0);
      assertNotNull(string1);
      assertEquals("\\u", string1);
      
      ArrayDeque<Integer> arrayDeque0 = new ArrayDeque<Integer>();
      assertNotNull(arrayDeque0);
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      
      Iterator<Integer> iterator0 = arrayDeque0.descendingIterator();
      assertNotNull(iterator0);
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("x7P*-", 't');
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      StringUtils stringUtils0 = new StringUtils();
      assertNotNull(stringUtils0);
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) 't';
      longArray0[1] = (-757L);
      String string2 = StringUtils.join(longArray0, '6');
      assertNotNull(string2);
      assertEquals(2, longArray0.length);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("1166-757", string2);
      assertArrayEquals(new long[] {116L, (-757L)}, longArray0);
      
      String[] stringArray1 = StringUtils.splitPreserveAllTokens("\n", "wDPtb=E*0D +", 229);
      assertNotNull(stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(1, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      String[] stringArray2 = StringUtils.splitPreserveAllTokens("Fq~GyYi]NdYLZ", "Minimum abbreviation width with offset is %d");
      assertNotNull(stringArray2);
      assertNotSame(stringArray2, stringArray1);
      assertNotSame(stringArray2, stringArray0);
      assertEquals(3, stringArray2.length);
      assertFalse(stringArray2.equals((Object)stringArray1));
      assertFalse(stringArray2.equals((Object)stringArray0));
      
      String string3 = StringUtils.normalizeSpace(" ");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals("", string3);
      
      boolean boolean0 = StringUtils.isNoneBlank(stringArray2);
      assertNotSame(stringArray2, stringArray1);
      assertNotSame(stringArray2, stringArray0);
      assertEquals(3, stringArray2.length);
      assertFalse(stringArray2.equals((Object)stringArray1));
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertTrue(boolean0);
      
      String string4 = StringUtils.capitalize("x7P*-");
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertEquals("X7P*-", string4);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "\n", (CharSequence) " ");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test404()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      String string0 = StringUtils.trim("Z>yD=");
      assertNotNull(string0);
      assertEquals("Z>yD=", string0);
      
      String string1 = StringUtils.substringAfterLast("Z>yD=", "Z>yD=");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      
      String string2 = StringUtils.center("I8|%2SS", 117, 'X');
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXI8|%2SSXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", string2);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "I8|%2SS", (CharSequence) "Z>yD=");
      assertEquals(7, int0);
      
      Locale locale0 = Locale.CHINESE;
      assertNotNull(locale0);
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("zh", locale0.toString());
      
      int int1 = StringUtils.getFuzzyDistance("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXI8|%2SSXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXI8|%2SSXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", locale0);
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("zh", locale0.toString());
      assertFalse(int1 == int0);
      assertEquals(349, int1);
  }

  @Test(timeout = 4000)
  public void test405()  throws Throwable  {
      String string0 = StringUtils.LF;
      assertNotNull(string0);
      assertEquals("\n", string0);
      
      boolean boolean0 = StringUtils.equalsIgnoreCase("\n", "\n");
      assertTrue(boolean0);
      
      String string1 = StringUtils.chop("\n");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      
      String string2 = StringUtils.leftPad("r2", (int) '[', '[');
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[r2", string2);
      
      String string3 = "Wd|}51/]/&`bsA";
      String string4 = StringUtils.rightPad("Wd|}51/]/&`bsA", 1003, "Wd|}51/]/&`bsA");
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      
      String string5 = StringUtils.join((double[]) null, '+', (int) '[', (int) '[');
      assertNull(string5);
      
      String string6 = StringUtils.removeFirst((String) null, "");
      assertNull(string6);
      
      String string7 = StringUtils.reverse((String) null);
      assertNull(string7);
      
      boolean boolean1 = StringUtils.containsIgnoreCase("", "[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[r2");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = StringUtils.isAlphaSpace((CharSequence) null);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      String string8 = StringUtils.uncapitalize((String) null);
      assertNull(string8);
      
      String string9 = StringUtils.strip("wDPtb=E*0D +", "");
      assertNotNull(string9);
      assertFalse(string9.equals((Object)string2));
      assertFalse(string9.equals((Object)string0));
      assertFalse(string9.equals((Object)string4));
      assertFalse(string9.equals((Object)string1));
      assertFalse(string9.equals((Object)string3));
      assertEquals("wDPtb=E*0D +", string9);
      
      // Undeclared exception!
      try { 
        StringUtils.getLevenshteinDistance((CharSequence) "wDPtb=E*0D +", (CharSequence) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test406()  throws Throwable  {
      String string0 = StringUtils.SPACE;
      assertNotNull(string0);
      assertEquals(" ", string0);
      
      String string1 = StringUtils.rightPad("Wd|}51/]/&`bsA", 1003, "Wd|}51/]/&`bsA");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.join((double[]) null, '+', (int) '[', (int) '[');
      assertNull(string2);
      
      String string3 = StringUtils.reverse((String) null);
      assertNull(string3);
      
      boolean boolean0 = StringUtils.isAlphaSpace((CharSequence) null);
      assertFalse(boolean0);
      
      String string4 = StringUtils.uncapitalize((String) null);
      assertNull(string4);
      
      boolean boolean1 = StringUtils.isAllBlank((CharSequence[]) null);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String string5 = StringUtils.replaceOnceIgnoreCase("WU_{VF~cpiiu'4'9v", "XGc>hmQxNY8V]C", "cv ?(mX56URIc7k,");
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertEquals("WU_{VF~cpiiu'4'9v", string5);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "r2", (CharSequence) "Wd|}51/]/&`bsA", 91);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test407()  throws Throwable  {
      String string0 = StringUtils.abbreviateMiddle("h!{j5f5T8V}7s;", "java.lang.Object@52b769b5java.lang.Object@1d3febfajava.lang.Object@4c16c3aejava.lang.Object@4a32f5f1java.lang.Object@23a1c7c3java.lang.Object@52b769b5java.lang.Object@1d3febfajava.lang.Object@4c16c3aejava.lang.Object@4a32f5f1java.lang.Object@23a1c7c3", 15);
      assertNotNull(string0);
      assertEquals("h!{j5f5T8V}7s;", string0);
      
      int int0 = StringUtils.indexOfDifference((CharSequence) "h!{j5f5T8V}7s;", (CharSequence) "h!{j5f5T8V}7s;");
      assertEquals((-1), int0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("", "java.lang.Object@52b769b5java.lang.Object@1d3febfajava.lang.Object@4c16c3aejava.lang.Object@4a32f5f1java.lang.Object@23a1c7c3java.lang.Object@52b769b5java.lang.Object@1d3febfajava.lang.Object@4c16c3aejava.lang.Object@4a32f5f1java.lang.Object@23a1c7c3");
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      
      String string1 = StringUtils.repeat(".'am$2&U)u", (-1));
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      
      String string2 = StringUtils.reverseDelimited(".'am$2&U)u", 'N');
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals(".'am$2&U)u", string2);
      
      String[] stringArray1 = StringUtils.splitByWholeSeparatorPreserveAllTokens("The type must not be null", "", (-1));
      assertNotNull(stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(6, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      char[] charArray0 = new char[6];
      charArray0[0] = ',';
      charArray0[1] = ',';
      charArray0[2] = ',';
      charArray0[3] = 'N';
      charArray0[4] = ',';
      charArray0[5] = ',';
      int int1 = StringUtils.indexOfAny((CharSequence) "h!{j5f5T8V}7s;", charArray0);
      assertEquals(6, charArray0.length);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      assertArrayEquals(new char[] {',', ',', ',', 'N', ',', ','}, charArray0);
  }

  @Test(timeout = 4000)
  public void test408()  throws Throwable  {
      Object[] objectArray0 = new Object[5];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      Object object1 = new Object();
      assertNotNull(object1);
      assertFalse(object1.equals((Object)object0));
      
      objectArray0[1] = object1;
      objectArray0[2] = object0;
      Object object2 = new Object();
      assertNotNull(object2);
      assertFalse(object2.equals((Object)object0));
      assertFalse(object2.equals((Object)object1));
      
      objectArray0[3] = object2;
      Object object3 = new Object();
      assertNotNull(object3);
      assertFalse(object3.equals((Object)object0));
      assertFalse(object3.equals((Object)object2));
      assertFalse(object3.equals((Object)object1));
      
      objectArray0[4] = object3;
      String string0 = StringUtils.join(objectArray0, "");
      assertNotNull(string0);
      assertEquals(5, objectArray0.length);
      
      String string1 = StringUtils.wrapIfMissing("java.lang.Object@77aa5eb3java.lang.Object@433dff44java.lang.Object@77aa5eb3java.lang.Object@174025f4java.lang.Object@7b186a48", "java.lang.Object@77aa5eb3java.lang.Object@433dff44java.lang.Object@77aa5eb3java.lang.Object@174025f4java.lang.Object@7b186a48");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("wDPtb=E*0D +", "{}");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      String[] stringArray1 = StringUtils.splitByCharacterTypeCamelCase("");
      assertNotNull(stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(0, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      Vector<Locale.LanguageRange> vector0 = new Vector<Locale.LanguageRange>();
      assertNotNull(vector0);
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      
      HashSet<Locale> hashSet0 = new HashSet<Locale>();
      assertNotNull(hashSet0);
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      
      boolean boolean0 = StringUtils.containsNone((CharSequence) "java.lang.Object@77aa5eb3java.lang.Object@433dff44java.lang.Object@77aa5eb3java.lang.Object@174025f4java.lang.Object@7b186a48", "java.lang.Object@77aa5eb3java.lang.Object@433dff44java.lang.Object@77aa5eb3java.lang.Object@174025f4java.lang.Object@7b186a48");
      assertFalse(boolean0);
      
      String string2 = StringUtils.strip("");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("", string2);
      
      ArrayList<CharBuffer> arrayList0 = new ArrayList<CharBuffer>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      Stream<CharBuffer> stream0 = arrayList0.stream();
      assertNotNull(stream0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      String string3 = StringUtils.join((List<?>) vector0, '=', 5, (-2193));
      assertNotNull(string3);
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string2));
      assertEquals("", string3);
  }

  @Test(timeout = 4000)
  public void test409()  throws Throwable  {
      String string0 = StringUtils.left(".I>38f~OoV", 22);
      assertNotNull(string0);
      assertEquals(".I>38f~OoV", string0);
      
      float[] floatArray0 = new float[3];
      floatArray0[1] = (float) 0;
      Stack<Object> stack0 = new Stack<Object>();
      assertNotNull(stack0);
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.empty());
      assertFalse(stack0.contains(22));
      
      String string1 = StringUtils.join((List<?>) stack0, 'u', 0, 0);
      assertNotNull(string1);
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.empty());
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertFalse(stack0.contains(22));
  }

  @Test(timeout = 4000)
  public void test410()  throws Throwable  {
      String string0 = StringUtils.substringAfterLast("", 10);
      assertNotNull(string0);
      assertEquals("", string0);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "", "");
      assertEquals((-1), int0);
      
      String string1 = StringUtils.replaceOnce("", "af-_Xu1o~2a", "af-_Xu1o~2a");
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      String string2 = StringUtils.replaceEachRepeatedly("", stringArray0, stringArray0);
      assertNotNull(string2);
      assertEquals(4, stringArray0.length);
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertEquals("", string2);
      
      boolean boolean0 = StringUtils.isNumericSpace("");
      assertTrue(boolean0);
      
      String[] stringArray1 = StringUtils.splitByWholeSeparator("af-_Xu1o~2a", "");
      assertNotNull(stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(1, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      String string3 = StringUtils.leftPad("", 2312, '[');
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      
      String string4 = StringUtils.remove("8kUfL|2og", '[');
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertEquals("8kUfL|2og", string4);
      
      String string5 = StringUtils.replaceFirst("", "", "");
      assertNotNull(string5);
      assertTrue(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertTrue(string5.equals((Object)string0));
      assertTrue(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertEquals("", string5);
      
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      Locale locale0 = Locale.lookup(arrayList0, (Collection<Locale>) null);
      assertNull(locale0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      // Undeclared exception!
      try { 
        StringUtils.getFuzzyDistance((CharSequence) null, "", (Locale) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test411()  throws Throwable  {
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "{}", (char[]) null);
      assertFalse(boolean0);
      
      String string0 = StringUtils.defaultIfEmpty("x2?x|[Cx[:^C6", "{}");
      assertNotNull(string0);
      assertEquals("x2?x|[Cx[:^C6", string0);
      
      String string1 = StringUtils.substringAfter(";H.r/XU9", "X");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("U9", string1);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "x2?x|[Cx[:^C6", "X");
      assertEquals((-1), int0);
      
      String string2 = StringUtils.rightPad("m*|)M&l8wWL$c", (-1), '');
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("m*|)M&l8wWL$c", string2);
      
      String string3 = StringUtils.replaceIgnoreCase("Minimum abbreviation width is %d", "Minimum abbreviation width is %d", "X");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals("X", string3);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)54;
      byteArray0[1] = (byte)91;
      byteArray0[2] = (byte)38;
      byteArray0[3] = (byte)108;
      byteArray0[4] = (byte) (-1);
      byteArray0[5] = (byte) (-78);
      byteArray0[6] = (byte) (-1);
      byteArray0[7] = (byte)99;
      // Undeclared exception!
      try { 
        StringUtils.toString(byteArray0, " hci{U/h f)3");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         //  hci{U/h f)3
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test412()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)100;
      byteArray0[1] = (byte)16;
      String string0 = "";
      // Undeclared exception!
      try { 
        StringUtils.toString(byteArray0, "");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // 
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test413()  throws Throwable  {
      String string0 = StringUtils.rightPad("f>-l|^^'S`C", (-161), "V");
      assertNotNull(string0);
      assertEquals("f>-l|^^'S`C", string0);
      
      String string1 = StringUtils.replaceIgnoreCase("V", "V", "Search and Replace array lengths don't match: ", Integer.MAX_VALUE);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("Search and Replace array lengths don't match: ", string1);
      
      String string2 = StringUtils.stripAccents("$3]");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("$3]", string2);
      
      String string3 = StringUtils.replaceOnceIgnoreCase(";e|PvY[M,WJ=KeK,MR", "Index: ", "$3]");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals(";e|PvY[M,WJ=KeK,MR", string3);
      
      String string4 = StringUtils.overlay("s|[vM[", "org.apache.commons.lang3.RegExUtils", 0, 0);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertEquals("org.apache.commons.lang3.RegExUtilss|[vM[", string4);
      
      String string5 = StringUtils.CR;
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertEquals("\r", string5);
      
      String string6 = StringUtils.defaultIfBlank("V", "org.apache.commons.lang3.RegExUtils");
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string1));
      assertEquals("V", string6);
      
      String string7 = StringUtils.removeAll(" ", "wDPtb=E*0D +");
      assertNotNull(string7);
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string2));
      assertEquals(" ", string7);
  }

  @Test(timeout = 4000)
  public void test414()  throws Throwable  {
      String string0 = StringUtils.stripAccents("wDPtb=E*0D +");
      assertNotNull(string0);
      assertEquals("wDPtb=E*0D +", string0);
      
      String string1 = StringUtils.overlay("Aborting to protect against StackOverflowError - output of one loop is the input of another", "wDPtb=E*0D +", 1886, 0);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("wDPtb=E*0D +", string1);
      
      String string2 = StringUtils.substringAfterLast("java.lang.Object@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.Object@50d3e7ejava.lang.Object@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.Object@50d3e7e", "Index: ");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("", string2);
      
      String string3 = StringUtils.defaultIfBlank("", "");
      assertNotNull(string3);
      assertTrue(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("", string3);
      
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      String string4 = StringUtils.substring("wDPtb=E*0D +", 1886);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertEquals("", string4);
      
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "Aborting to protect against StackOverflowError - output of one loop is the input of another";
      charSequenceArray0[2] = (CharSequence) "Index: ";
      charSequenceArray0[3] = (CharSequence) "wDPtb=E*0D +";
      boolean boolean0 = StringUtils.equalsAnyIgnoreCase("/h81Uu", charSequenceArray0);
      assertEquals(4, charSequenceArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test415()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "";
      String string0 = StringUtils.substringBeforeLast(".M,KjXgwsMU", "");
      assertNotNull(string0);
      assertEquals(".M,KjXgwsMU", string0);
      
      String string1 = StringUtils.rightPad(".M,KjXgwsMU", 256);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals(".M,KjXgwsMU                                                                                                                                                                                                                                                     ", string1);
      
      String string2 = StringUtils.prependIfMissing("", ".M,KjXgwsMU                                                                                                                                                                                                                                                    ", stringArray0);
      assertNotNull(string2);
      assertEquals(2, stringArray0.length);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("", string2);
      
      int int0 = StringUtils.indexOfDifference((CharSequence[]) stringArray0);
      assertEquals(2, stringArray0.length);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test416()  throws Throwable  {
      String string0 = StringUtils.rightPad("f>-l|^^'S`C", (-161), "V");
      assertNotNull(string0);
      assertEquals("f>-l|^^'S`C", string0);
      
      String string1 = StringUtils.replaceIgnoreCase("V", "V", "Search and Replace array lengths don't match: ", Integer.MAX_VALUE);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("Search and Replace array lengths don't match: ", string1);
      
      String string2 = StringUtils.stripAccents("$3]");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("$3]", string2);
      
      String string3 = StringUtils.replaceOnceIgnoreCase(";e|PvY[M,WJ=KeK,MR", "I,#ex", "$3]");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals(";e|PvY[M,WJ=KeK,MR", string3);
      
      String string4 = StringUtils.overlay("s|[vM[", "org.apache.commons.lang3.RegExUtils", 0, 0);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertEquals("org.apache.commons.lang3.RegExUtilss|[vM[", string4);
      
      String string5 = StringUtils.substringAfterLast("", "U-0I_sa9{4d&NF");
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertEquals("", string5);
      
      String string6 = StringUtils.defaultIfBlank("V", "org.apache.commons.lang3.RegExUtils");
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string2));
      assertEquals("V", string6);
      
      boolean boolean0 = StringUtils.isAlphanumeric("U-0I_sa9{4d&NF");
      assertFalse(boolean0);
      
      char[] charArray0 = new char[7];
      charArray0[0] = 'u';
      charArray0[1] = 'B';
      charArray0[2] = 'z';
      charArray0[3] = '?';
      charArray0[4] = 'C';
      charArray0[5] = 'X';
      charArray0[6] = '4';
      String string7 = StringUtils.join(charArray0, 'C', (-161), (-1858));
      assertNotNull(string7);
      assertEquals(7, charArray0.length);
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string0));
      assertTrue(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string1));
      assertEquals("", string7);
      assertArrayEquals(new char[] {'u', 'B', 'z', '?', 'C', 'X', '4'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test417()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      String string0 = StringUtils.trim("Z>yD=");
      assertNotNull(string0);
      assertEquals("Z>yD=", string0);
      
      String string1 = StringUtils.mid("Z>yD=", 18, 9);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      
      PriorityQueue<Integer> priorityQueue0 = new PriorityQueue<Integer>();
      assertNotNull(priorityQueue0);
      assertEquals(0, priorityQueue0.size());
      assertFalse(priorityQueue0.contains(18));
      
      String string2 = StringUtils.rightPad("", 18, "");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("                  ", string2);
      
      String string3 = StringUtils.chop("                  ");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals("                 ", string3);
      
      String string4 = StringUtils.join((short[]) null, '|');
      assertNull(string4);
      
      String string5 = StringUtils.rightPad("", 18, '|');
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertEquals("||||||||||||||||||", string5);
      
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      charSequenceArray0[0] = (CharSequence) "                 ";
      charSequenceArray0[1] = (CharSequence) "";
      charSequenceArray0[2] = (CharSequence) "||||||||||||||||||";
      charSequenceArray0[3] = (CharSequence) null;
      String string6 = StringUtils.appendIfMissing(")3]Le", ")3]Le", charSequenceArray0);
      assertNotNull(string6);
      assertEquals(4, charSequenceArray0.length);
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string2));
      assertEquals(")3]Le", string6);
  }

  @Test(timeout = 4000)
  public void test418()  throws Throwable  {
      String string0 = StringUtils.reverse((String) null);
      assertNull(string0);
      
      boolean boolean0 = StringUtils.containsIgnoreCase((CharSequence) null, (CharSequence) null);
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        CharBuffer.allocate((short) (-374));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test419()  throws Throwable  {
      short[] shortArray0 = new short[2];
      shortArray0[1] = (short) (-374);
      String string0 = StringUtils.join(shortArray0, 'r');
      assertNotNull(string0);
      assertEquals(2, shortArray0.length);
      assertEquals("0r-374", string0);
      assertArrayEquals(new short[] {(short)0, (short) (-374)}, shortArray0);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "0r-374", (CharSequence) "0r-374", (int) (short)0);
      assertEquals(0, int0);
      
      String string1 = StringUtils.center("maxWith cannot be negative0.0z0.0z122.0z0.0", 0, "maxWith cannot be negative0.0z0.0z122.0z0.0");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("maxWith cannot be negative0.0z0.0z122.0z0.0", string1);
      
      String string2 = StringUtils.capitalize("0r-374");
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("0r-374", string2);
      
      boolean boolean0 = StringUtils.isEmpty("0r-374");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isWhitespace("0r-374");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test420()  throws Throwable  {
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)3973;
      shortArray0[1] = (short) (-374);
      String string0 = StringUtils.join(shortArray0, 'r');
      assertNotNull(string0);
      assertEquals(2, shortArray0.length);
      assertEquals("3973r-374", string0);
      assertArrayEquals(new short[] {(short)3973, (short) (-374)}, shortArray0);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "3973r-374", (CharSequence) "3973r-374", (int) (short)3973);
      assertEquals(0, int0);
      
      String string1 = "-\\rrCKm7FB.,{o|e";
      String string2 = StringUtils.substringBetween("3973r-374", "-\rrCKm7FB.,{o|e", "eJ(t/muQ");
      assertNull(string2);
      
      String string3 = StringUtils.reverse("-\rrCKm7FB.,{o|e");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals("e|o{,.BF7mKCr\r-", string3);
      
      boolean boolean0 = StringUtils.containsIgnoreCase((CharSequence) null, "eJ(t/muQ");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isAlphaSpace("3973r-374");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string4 = StringUtils.uncapitalize("e|o{,.BF7mKCrr-");
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertEquals("e|o{,.BF7mKCrr-", string4);
      
      // Undeclared exception!
      try { 
        StringUtils.getLevenshteinDistance((CharSequence) "e|o{,.BF7mKCrr-", (CharSequence) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test421()  throws Throwable  {
      String string0 = StringUtils.stripToEmpty("vs");
      assertNotNull(string0);
      assertEquals("vs", string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      String string1 = StringUtils.reverse((String) null);
      assertNull(string1);
      
      charSequenceArray0[0] = (CharSequence) null;
      boolean boolean0 = StringUtils.equalsAnyIgnoreCase("vs", charSequenceArray0);
      assertEquals(1, charSequenceArray0.length);
      assertFalse(boolean0);
      
      String string2 = StringUtils.substringAfterLast("org.apache.commons.lang3.ObjectUtils", (String) null);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertEquals("", string2);
      
      int[] intArray0 = StringUtils.toCodePoints("vs");
      assertNotNull(intArray0);
      assertEquals(2, intArray0.length);
      assertArrayEquals(new int[] {118, 115}, intArray0);
  }

  @Test(timeout = 4000)
  public void test422()  throws Throwable  {
      String string0 = StringUtils.lowerCase("java.lang.Object@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.Object@50d3e7ejava.lang.Object@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.Object@50d3e7e");
      assertNotNull(string0);
      
      String string1 = StringUtils.removeAll("java.lang.object@56b5c730java.lang.object@1de495b1java.lang.object@56b5c730java.lang.object@56b5c730java.lang.object@50d3e7ejava.lang.object@56b5c730java.lang.object@1de495b1java.lang.object@56b5c730java.lang.object@56b5c730java.lang.object@50d3e7e", "java.lang.Object@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.Object@50d3e7ejava.lang.Object@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.Object@50d3e7e");
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      
      boolean boolean0 = StringUtils.containsNone((CharSequence) "java.lang.Object@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.Object@50d3e7ejava.lang.Object@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.Object@50d3e7e", "!>]@{q6R%U^t?h,");
      assertFalse(boolean0);
      
      String string2 = StringUtils.replaceChars("java.lang.object@56b5c730java.lang.object@1de495b1java.lang.object@56b5c730java.lang.object@56b5c730java.lang.object@50d3e7ejava.lang.object@56b5c730java.lang.object@1de495b1java.lang.object@56b5c730java.lang.object@56b5c730java.lang.object@50d3e7e", 'B', '\"');
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      
      String string3 = StringUtils.rightPad("|BaGO3.$", 404, "org.apache.commons.lang3.StringUtils5|5pGW#urA~r?~3");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("|BaGO3.$org.apache.commons.lang3.StringUtils5|5pGW#urA~r?~3org.apache.commons.lang3.StringUtils5|5pGW#urA~r?~3org.apache.commons.lang3.StringUtils5|5pGW#urA~r?~3org.apache.commons.lang3.StringUtils5|5pGW#urA~r?~3org.apache.commons.lang3.StringUtils5|5pGW#urA~r?~3org.apache.commons.lang3.StringUtils5|5pGW#urA~r?~3org.apache.commons.lang3.StringUtils5|5pGW#urA~r?~3org.apache.commons.lang3.StringUtils5|5", string3);
      
      String string4 = StringUtils.removeEndIgnoreCase("!>]@{q6R%U^t?h,", "java.lang.object@56b5c730java.lang.object@1de495b1java.lang.object@56b5c730java.lang.object@56b5c730java.lang.object@50d3e7ejava.lang.object@56b5c730java.lang.object@1de495b1java.lang.object@56b5c730java.lang.object@56b5c730java.lang.object@50d3e7e");
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertEquals("!>]@{q6R%U^t?h,", string4);
      
      String string5 = StringUtils.wrapIfMissing("wN|", "wN|");
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertEquals("wN|", string5);
      
      // Undeclared exception!
      StringUtils.getLevenshteinDistance((CharSequence) "java.lang.object@56b5c730java.lang.object@1de495b1java.lang.object@56b5c730java.lang.object@56b5c730java.lang.object@50d3e7ejava.lang.object@56b5c730java.lang.object@1de495b1java.lang.object@56b5c730java.lang.object@56b5c730java.lang.object@50d3e7e", (CharSequence) "java.lang.Object@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.Object@50d3e7ejava.lang.Object@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.Object@50d3e7e", (int) '\"');
  }

  @Test(timeout = 4000)
  public void test423()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = (int) '7';
      intArray0[1] = (int) '7';
      intArray0[2] = (int) '7';
      intArray0[3] = (int) '7';
      intArray0[4] = (int) '7';
      String string0 = StringUtils.replacePattern("jWU}p|M=YT9", "Cannot store ", "Cannot store ");
      assertNotNull(string0);
      assertEquals("jWU}p|M=YT9", string0);
      
      String[] stringArray0 = new String[8];
      stringArray0[0] = "jWU}p|M=YT9";
      stringArray0[1] = "jWU}p|M=YT9";
      stringArray0[2] = "Cannot store ";
      stringArray0[3] = " ";
      stringArray0[4] = "Cannot store ";
      stringArray0[5] = " ";
      stringArray0[6] = "/h81Uu";
      stringArray0[7] = "Cannot store ";
      String string1 = StringUtils.getCommonPrefix(stringArray0);
      assertNotNull(string1);
      assertEquals(8, stringArray0.length);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      
      String string2 = StringUtils.stripStart("\n", "9i!A5-v ");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("\n", string2);
      
      String string3 = StringUtils.repeat(" ", 948);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEqualsstring3);
      
      boolean boolean0 = StringUtils.isAllLowerCase("\n");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test424()  throws Throwable  {
      String string0 = StringUtils.remove("#r", 'y');
      assertNotNull(string0);
      assertEquals("#r", string0);
      
      int int0 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      boolean boolean0 = StringUtils.equalsAnyIgnoreCase("#r", charSequenceArray0);
      assertEquals(0, charSequenceArray0.length);
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isAlphanumericSpace("#r");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string1 = StringUtils.join((Object[]) charSequenceArray0, 'u');
      assertNotNull(string1);
      assertEquals(0, charSequenceArray0.length);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
  }

  @Test(timeout = 4000)
  public void test425()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[0] = " vs ";
      String string0 = StringUtils.capitalize(" vs ");
      assertNotNull(string0);
      assertEquals(" vs ", string0);
      
      boolean boolean0 = StringUtils.equals((CharSequence) "U2+DfS:Vb%!,", (CharSequence) " vs ");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test426()  throws Throwable  {
      String[] stringArray0 = new String[5];
      String string0 = StringUtils.abbreviate(" vs ", 321);
      assertNotNull(string0);
      assertEquals(" vs ", string0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)55;
      byteArray0[1] = (byte)93;
      String string1 = StringUtils.join(byteArray0, '.');
      assertNotNull(string1);
      assertEquals(2, byteArray0.length);
      assertFalse(string1.equals((Object)string0));
      assertEquals("55.93", string1);
      assertArrayEquals(new byte[] {(byte)55, (byte)93}, byteArray0);
      
      int int0 = StringUtils.countMatches((CharSequence) " vs ", (CharSequence) "55.93");
      assertEquals(0, int0);
      
      boolean boolean0 = StringUtils.equalsAny(" vs ", stringArray0);
      assertEquals(5, stringArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test427()  throws Throwable  {
      String string0 = StringUtils.center("xxUjava.lang.Object@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.Object@50d3e7ejava.lang.Object@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.Object@50d3e7ejava.lang.Object@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.Object@50d3e7ejava.lang.Object@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.Object@50d3e7e", 16);
      assertNotNull(string0);
      
      String string1 = StringUtils.wrapIfMissing("xxUjava.lang.Object@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.Object@50d3e7ejava.lang.Object@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.Object@50d3e7ejava.lang.Object@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.Object@50d3e7ejava.lang.Object@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.Object@50d3e7e", 'P');
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[0] = (CharSequence) "xxUjava.lang.Object@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.Object@50d3e7ejava.lang.Object@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.Object@50d3e7ejava.lang.Object@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.Object@50d3e7ejava.lang.Object@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.Object@50d3e7e";
      charSequenceArray0[1] = (CharSequence) "xxUjava.lang.Object@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.Object@50d3e7ejava.lang.Object@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.Object@50d3e7ejava.lang.Object@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.Object@50d3e7ejava.lang.Object@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.Object@50d3e7e";
      int int0 = StringUtils.indexOfDifference(charSequenceArray0);
      assertEquals(2, charSequenceArray0.length);
      assertEquals((-1), int0);
      
      boolean boolean0 = StringUtils.isNumericSpace("PxxUjava.lang.Object@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.Object@50d3e7ejava.lang.Object@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.Object@50d3e7ejava.lang.Object@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.Object@50d3e7ejava.lang.Object@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.Object@50d3e7eP");
      assertFalse(boolean0);
      
      String string2 = StringUtils.substring("Rr9rz.Ukuw<#xx9GUR", 135);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("", string2);
      
      boolean boolean1 = StringUtils.isAllUpperCase("Rr9rz.Ukuw<#xx9GUR");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test428()  throws Throwable  {
      String string0 = StringUtils.wrap("W-:$-TX6hO ", "W-:$-TX6hO ");
      assertNotNull(string0);
      assertEquals("W-:$-TX6hO W-:$-TX6hO W-:$-TX6hO ", string0);
      
      String string1 = StringUtils.replaceChars("W-:$-TX6hO W-:$-TX6hO W-:$-TX6hO ", '%', '%');
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("W-:$-TX6hO W-:$-TX6hO W-:$-TX6hO ", string1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[0] = (CharSequence) "W-:$-TX6hO W-:$-TX6hO W-:$-TX6hO ";
      Locale locale0 = Locale.FRENCH;
      assertNotNull(locale0);
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("fr", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("fr", locale0.getLanguage());
      
      String string2 = StringUtils.lowerCase("', is neither of type Map.Entry nor an Array", locale0);
      assertNotNull(string2);
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("fr", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("fr", locale0.getLanguage());
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("', is neither of type map.entry nor an array", string2);
      
      charSequenceArray0[1] = (CharSequence) "', is neither of type map.entry nor an array";
      int int0 = StringUtils.indexOfDifference(charSequenceArray0);
      assertEquals(2, charSequenceArray0.length);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test429()  throws Throwable  {
      String string0 = StringUtils.replace("", "US.^e:o_ufGpA", "", 0);
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.replaceIgnoreCase("", "US.^e:o_ufGpA", "The String must not be empty", (-3695));
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      
      String string2 = StringUtils.center("", 1911);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = "US.^e:o_ufGpA";
      stringArray0[1] = "/)q_F[PuSDH6Q*O";
      stringArray0[2] = null;
      String string3 = StringUtils.replaceEachRepeatedly((String) null, stringArray0, stringArray0);
      assertNull(string3);
      assertEquals(3, stringArray0.length);
      
      String string4 = StringUtils.stripToNull("");
      assertNull(string4);
      
      int int0 = StringUtils.compareIgnoreCase(string2, "}");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals((-93), int0);
      
      String string5 = StringUtils.defaultIfEmpty(string2, (String) null);
      assertNotNull(string5);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      
      String string6 = StringUtils.chop(string2);
      assertNotNull(string6);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string0));
      
      boolean boolean0 = StringUtils.isNotBlank("US.^e:o_ufGpA");
      assertTrue(boolean0);
      
      String string7 = StringUtils.substringBeforeLast("", "US.^e:o_ufGpA");
      assertNotNull(string7);
      assertTrue(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string6));
      assertTrue(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string5));
      assertEquals("", string7);
      
      String[] stringArray1 = StringUtils.splitPreserveAllTokens(string6, 'W');
      assertNotNull(stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(1, stringArray1.length);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string6));
      assertFalse(string2.equals((Object)string7));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string7));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string0));
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      String string8 = StringUtils.rightPad("', has a length less than 2", (-162), (String) null);
      assertNotNull(string8);
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string5));
      assertEquals("', has a length less than 2", string8);
      
      String string9 = StringUtils.firstNonBlank(stringArray1);
      assertNull(string9);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(1, stringArray1.length);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string8));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string6));
      assertFalse(string2.equals((Object)string7));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string8));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string7));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string0));
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      boolean boolean1 = StringUtils.contains((CharSequence) string6, 1911);
      assertFalse(boolean1 == boolean0);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string8));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string6));
      assertFalse(string2.equals((Object)string7));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string8));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string7));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string0));
      assertFalse(boolean1);
      
      String string10 = StringUtils.appendIfMissingIgnoreCase(string6, string5, stringArray1);
      assertNotNull(string10);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(1, stringArray1.length);
      assertFalse(string10.equals((Object)string0));
      assertFalse(string10.equals((Object)string1));
      assertFalse(string10.equals((Object)string2));
      assertFalse(string10.equals((Object)string8));
      assertFalse(string10.equals((Object)string7));
      assertFalse(string10.equals((Object)string5));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string8));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string6));
      assertFalse(string2.equals((Object)string7));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string7));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string8));
      assertFalse(string5.equals((Object)string6));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string8));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string7));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string0));
      assertFalse(stringArray1.equals((Object)stringArray0));
  }

  @Test(timeout = 4000)
  public void test430()  throws Throwable  {
      String string0 = StringUtils.overlay("_", "_", (-1201), (-1201));
      assertNotNull(string0);
      assertEquals("__", string0);
      
      boolean boolean0 = StringUtils.isEmpty("__");
      assertFalse(boolean0);
      
      String string1 = StringUtils.chop("b[1Go");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("b[1Go", string1);
      
      String string2 = StringUtils.trimToEmpty("b[1Go");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("b[1Go", string2);
      
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[1] = (CharSequence) "Rr9rz.Ukuw<#xx9G";
      String string3 = StringUtils.appendIfMissingIgnoreCase("Rr9rz.Ukuw<#xx9G", "b[1Go", charSequenceArray0);
      assertNotNull(string3);
      assertEquals(2, charSequenceArray0.length);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals("Rr9rz.Ukuw<#xx9G", string3);
  }

  @Test(timeout = 4000)
  public void test431()  throws Throwable  {
      String string0 = StringUtils.substringAfterLast("W~p/]:FDw`qEP(g{Xm", (-1104));
      assertNotNull(string0);
      assertEquals("", string0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("", (String) null);
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      
      String string1 = StringUtils.unwrap("{}", "");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("{}", string1);
      
      String string2 = StringUtils.unwrap("", 'U');
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("", string2);
      
      int int0 = StringUtils.indexOf((CharSequence) "", 360);
      assertEquals((-1), int0);
      
      String string3 = StringUtils.repeat("MF )~|OlQ,B>,JzYt%2", "", 928);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test432()  throws Throwable  {
      String string0 = StringUtils.swapCase("");
      assertNotNull(string0);
      assertEquals("", string0);
      
      boolean boolean0 = StringUtils.isNotEmpty("");
      assertFalse(boolean0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      charSequenceArray0[0] = (CharSequence) "";
      String string1 = StringUtils.wrapIfMissing("", 'f');
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      
      int[] intArray0 = new int[9];
      intArray0[0] = Integer.MAX_VALUE;
      intArray0[1] = (int) 'N';
      intArray0[2] = (int) 'N';
      intArray0[3] = 2553;
      intArray0[4] = (int) 'f';
      intArray0[5] = (int) 'N';
      intArray0[6] = (int) 'f';
      intArray0[7] = (int) 'N';
      intArray0[8] = (int) 'N';
      String string2 = StringUtils.join(intArray0, 'N');
      assertNotNull(string2);
      assertEquals(9, intArray0.length);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("2147483647N78N78N2553N102N78N102N78N78", string2);
      assertArrayEquals(new int[] {Integer.MAX_VALUE, 78, 78, 2553, 102, 78, 102, 78, 78}, intArray0);
      
      int int0 = StringUtils.indexOf((CharSequence) "", 102);
      assertEquals((-1), int0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)24;
      byteArray0[1] = (byte) (-83);
      byteArray0[2] = (byte)1;
      String string3 = StringUtils.join(byteArray0, 'N');
      assertNotNull(string3);
      assertEquals(3, byteArray0.length);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("24N-83N1", string3);
      assertArrayEquals(new byte[] {(byte)24, (byte) (-83), (byte)1}, byteArray0);
      
      String string4 = StringUtils.remove("iXI3;&-G-M6'D-bRTN", "iXI3;&-G-M6'D-bRTN");
      assertNotNull(string4);
      assertTrue(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string1));
      assertEquals("", string4);
  }

  @Test(timeout = 4000)
  public void test433()  throws Throwable  {
      ArrayDeque<Integer> arrayDeque0 = new ArrayDeque<Integer>();
      assertNotNull(arrayDeque0);
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      
      Stream<Integer> stream0 = arrayDeque0.parallelStream();
      assertNotNull(stream0);
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      
      Iterator<Integer> iterator0 = arrayDeque0.descendingIterator();
      assertNotNull(iterator0);
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      
      String string0 = StringUtils.join(iterator0, " vs ");
      assertNotNull(string0);
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      assertEquals("", string0);
      
      String string1 = StringUtils.substringAfter(" vs ", ":XdK%=xck:.|K@C");
      assertNotNull(string1);
      assertEquals("", string1);
      
      Locale locale0 = Locale.KOREA;
      assertNotNull(locale0);
      assertEquals("ko", locale0.getLanguage());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("KR", locale0.getCountry());
      assertEquals("kor", locale0.getISO3Language());
      
      String string2 = StringUtils.removeStartIgnoreCase("", "");
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertEquals("", string2);
      
      Locale locale1 = Locale.GERMANY;
      assertNotNull(locale1);
      assertNotSame(locale1, locale0);
      assertEquals("DEU", locale1.getISO3Country());
      assertEquals("deu", locale1.getISO3Language());
      assertEquals("de_DE", locale1.toString());
      assertEquals("", locale1.getVariant());
      assertEquals("DE", locale1.getCountry());
      assertEquals("de", locale1.getLanguage());
      assertFalse(locale1.equals((Object)locale0));
      
      String string3 = StringUtils.trim(":XdK%=xck:.|K@C");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals(":XdK%=xck:.|K@C", string3);
      
      String string4 = StringUtils.mid("", 'E', 'E');
      assertNotNull(string4);
      assertTrue(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertEquals("", string4);
      
      boolean boolean0 = StringUtils.startsWith("javalang.Object@52b769b5java.lang.Object@1d3febfajava.lang.Objet@4c16c3aejava.lang.Object@4a32f5f1java.lang.Object@23a1c7c3java.lang.Object@52b769b5java.lang.Object@1d3febfajava.lang.Object@4c16c3aejava.lang.Object@432f5f1java.lang.Object@23a1c7c3", "");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test434()  throws Throwable  {
      String string0 = StringUtils.remove("$4'Tcj.*5", 'o');
      assertNotNull(string0);
      assertEquals("$4'Tcj.*5", string0);
      
      String string1 = StringUtils.SPACE;
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals(" ", string1);
      
      String string2 = StringUtils.replaceIgnoreCase((String) null, "$4'Tcj.*5", "$4'Tcj.*5", 282);
      assertNull(string2);
      
      boolean boolean0 = StringUtils.contains((CharSequence) "$4'Tcj.*5", (CharSequence) " ");
      assertFalse(boolean0);
      
      String string3 = StringUtils.repeat('b', 13);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("bbbbbbbbbbbbb", string3);
      
      String string4 = "\\u";
      String string5 = StringUtils.stripAccents(string4);
      assertNotNull(string5);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertTrue(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertEquals("\\u", string5);
      
      String string6 = StringUtils.unwrap(string4, 'U');
      assertNotNull(string6);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string5));
      assertFalse(string4.equals((Object)string1));
      assertTrue(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string1));
      assertEquals("\\u", string6);
      
      int int0 = StringUtils.indexOf((CharSequence) "$4'Tcj.*5", (-953));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test435()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      String string0 = StringUtils.appendIfMissing("/h81Uu", "/h81Uu", charSequenceArray0);
      assertNotNull(string0);
      assertEquals(2, charSequenceArray0.length);
      assertEquals("/h81Uu", string0);
      
      charSequenceArray0[0] = (CharSequence) "/h81Uu";
      charSequenceArray0[1] = (CharSequence) "/h81Uu";
      boolean boolean0 = StringUtils.equalsAnyIgnoreCase("/h81Uu", charSequenceArray0);
      assertEquals(2, charSequenceArray0.length);
      assertTrue(boolean0);
      
      String string1 = StringUtils.substringAfterLast("/h81Uu", "/h81Uu");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      
      String string2 = StringUtils.defaultString("/h81Uu");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertEquals("/h81Uu", string2);
      
      String string3 = StringUtils.repeat("/h81Uu", "Ve9.rVe9.r", 49);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals("/h81UuVe9.rVe9.r/h81UuVe9.rVe9.r/h81UuVe9.rVe9.r/h81UuVe9.rVe9.r/h81UuVe9.rVe9.r/h81UuVe9.rVe9.r/h81UuVe9.rVe9.r/h81UuVe9.rVe9.r/h81UuVe9.rVe9.r/h81UuVe9.rVe9.r/h81UuVe9.rVe9.r/h81UuVe9.rVe9.r/h81UuVe9.rVe9.r/h81UuVe9.rVe9.r/h81UuVe9.rVe9.r/h81UuVe9.rVe9.r/h81UuVe9.rVe9.r/h81UuVe9.rVe9.r/h81UuVe9.rVe9.r/h81UuVe9.rVe9.r/h81UuVe9.rVe9.r/h81UuVe9.rVe9.r/h81UuVe9.rVe9.r/h81UuVe9.rVe9.r/h81UuVe9.rVe9.r/h81UuVe9.rVe9.r/h81UuVe9.rVe9.r/h81UuVe9.rVe9.r/h81UuVe9.rVe9.r/h81UuVe9.rVe9.r/h81UuVe9.rVe9.r/h81UuVe9.rVe9.r/h81UuVe9.rVe9.r/h81UuVe9.rVe9.r/h81UuVe9.rVe9.r/h81UuVe9.rVe9.r/h81UuVe9.rVe9.r/h81UuVe9.rVe9.r/h81UuVe9.rVe9.r/h81UuVe9.rVe9.r/h81UuVe9.rVe9.r/h81UuVe9.rVe9.r/h81UuVe9.rVe9.r/h81UuVe9.rVe9.r/h81UuVe9.rVe9.r/h81UuVe9.rVe9.r/h81UuVe9.rVe9.r/h81UuVe9.rVe9.r/h81Uu", string3);
      
      boolean boolean1 = StringUtils.startsWithAny("/h81UuVe9.rVe9.r/h81UuVe9.rVe9.r/h81UuVe9.rVe9.r/h81UuVe9.rVe9.r/h81UuVe9.rVe9.r/h81UuVe9.rVe9.r/h81UuVe9.rVe9.r/h81UuVe9.rVe9.r/h81UuVe9.rVe9.r/h81UuVe9.rVe9.r/h81UuVe9.rVe9.r/h81UuVe9.rVe9.r/h81UuVe9.rVe9.r/h81UuVe9.rVe9.r/h81UuVe9.rVe9.r/h81UuVe9.rVe9.r/h81UuVe9.rVe9.r/h81UuVe9.rVe9.r/h81UuVe9.rVe9.r/h81UuVe9.rVe9.r/h81UuVe9.rVe9.r/h81UuVe9.rVe9.r/h81UuVe9.rVe9.r/h81UuVe9.rVe9.r/h81UuVe9.rVe9.r/h81UuVe9.rVe9.r/h81UuVe9.rVe9.r/h81UuVe9.rVe9.r/h81UuVe9.rVe9.r/h81UuVe9.rVe9.r/h81UuVe9.rVe9.r/h81UuVe9.rVe9.r/h81UuVe9.rVe9.r/h81UuVe9.rVe9.r/h81UuVe9.rVe9.r/h81UuVe9.rVe9.r/h81UuVe9.rVe9.r/h81UuVe9.rVe9.r/h81UuVe9.rVe9.r/h81UuVe9.rVe9.r/h81UuVe9.rVe9.r/h81UuVe9.rVe9.r/h81UuVe9.rVe9.r/h81UuVe9.rVe9.r/h81UuVe9.rVe9.r/h81UuVe9.rVe9.r/h81UuVe9.rVe9.r/h81UuVe9.rVe9.r/h81Uu", charSequenceArray0);
      assertEquals(2, charSequenceArray0.length);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test436()  throws Throwable  {
      String string0 = StringUtils.trim("Z>yD");
      assertNotNull(string0);
      assertEquals("Z>yD", string0);
      
      String string1 = StringUtils.difference("Z>yD", "");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
  }

  @Test(timeout = 4000)
  public void test437()  throws Throwable  {
      String string0 = StringUtils.remove("$4'Tcj.*5", 'o');
      assertNotNull(string0);
      assertEquals("$4'Tcj.*5", string0);
      
      String string1 = "\\u";
      String string2 = StringUtils.replaceOnceIgnoreCase("$4'Tcj.*5", "", string1);
      assertNotNull(string2);
      assertFalse(string1.equals((Object)string0));
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("$4'Tcj.*5", string2);
      
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "";
      charSequenceArray0[2] = (CharSequence) "$4'Tcj.*5";
      charSequenceArray0[3] = (CharSequence) "";
      charSequenceArray0[4] = (CharSequence) "";
      boolean boolean0 = StringUtils.equalsAnyIgnoreCase("$4'Tcj.*5", charSequenceArray0);
      assertEquals(5, charSequenceArray0.length);
      assertTrue(boolean0);
      
      String string3 = StringUtils.join((Object[]) charSequenceArray0, "", 196, 124);
      assertNotNull(string3);
      assertEquals(5, charSequenceArray0.length);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals("", string3);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "", charSequenceArray0[0], (-655));
      assertEquals(5, charSequenceArray0.length);
      assertEquals((-1), int0);
      
      long[] longArray0 = new long[5];
      longArray0[0] = (long) (-655);
      longArray0[1] = (long) (-655);
      longArray0[2] = (long) 196;
      longArray0[3] = (long) 'o';
      longArray0[4] = (long) 196;
      // Undeclared exception!
      try { 
        StringUtils.join(longArray0, 'N', (-128), 196);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -128
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test438()  throws Throwable  {
      String string0 = StringUtils.remove("$4'Tcj.*5", 'o');
      assertNotNull(string0);
      assertEquals("$4'Tcj.*5", string0);
      
      String string1 = StringUtils.rightPad("Bsj=", 2494, '{');
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens(".'a", 'j');
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      String string2 = StringUtils.firstNonBlank(stringArray0);
      assertNotNull(string2);
      assertEquals(1, stringArray0.length);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals(".'a", string2);
      
      String string3 = StringUtils.repeat("", "Bsj=", 1);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals("", string3);
      
      String string4 = StringUtils.abbreviate("wZSKdd2,J_p62!_h8RO", 2494, 2494);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertEquals("wZSKdd2,J_p62!_h8RO", string4);
      
      String string5 = StringUtils.SPACE;
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertEquals(" ", string5);
  }

  @Test(timeout = 4000)
  public void test439()  throws Throwable  {
      String string0 = StringUtils.repeat(" s ", 1435);
      assertNotNull(string0);
      
      String[] stringArray0 = StringUtils.split(" s ");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      boolean boolean0 = StringUtils.isAlphanumeric(" s ");
      assertFalse(boolean0);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) " s ", (CharSequence) string0, 10);
      assertEquals((-1), int0);
      
      String string1 = StringUtils.getCommonPrefix(stringArray0);
      assertNotNull(string1);
      assertEquals(1, stringArray0.length);
      assertFalse(string1.equals((Object)string0));
      assertEquals("s", string1);
      
      String[] stringArray1 = StringUtils.stripAll(stringArray0, string0);
      assertNotNull(stringArray1);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(1, stringArray0.length);
      assertEquals(1, stringArray1.length);
      assertFalse(string0.equals((Object)string1));
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      boolean boolean1 = StringUtils.endsWithAny("s", stringArray0);
      assertNotSame(stringArray0, stringArray1);
      assertEquals(1, stringArray0.length);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test440()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = new Object();
      assertNotNull(object1);
      assertFalse(object1.equals((Object)object0));
      
      String string0 = StringUtils.repeat("", 948);
      assertNotNull(string0);
      assertEquals("", string0);
      
      boolean boolean0 = StringUtils.isAllLowerCase("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test441()  throws Throwable  {
      String string0 = StringUtils.trim("");
      assertNotNull(string0);
      assertEquals("", string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "";
      charSequenceArray0[2] = (CharSequence) "";
      charSequenceArray0[3] = (CharSequence) "";
      int int0 = StringUtils.indexOfAny((CharSequence) "", charSequenceArray0);
      assertEquals(4, charSequenceArray0.length);
      assertEquals(0, int0);
      
      String string1 = StringUtils.capitalize("jwP![wS(wMVhw");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("JwP![wS(wMVhw", string1);
      
      int int1 = StringUtils.INDEX_NOT_FOUND;
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      // Undeclared exception!
      try { 
        StringUtils.getJaroWinklerDistance((CharSequence) null, charSequenceArray0[3]);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test442()  throws Throwable  {
      String string0 = StringUtils.rightPad("...", (-4100), "(");
      assertNotNull(string0);
      assertEquals("...", string0);
      
      boolean boolean0 = StringUtils.isMixedCase("...");
      assertFalse(boolean0);
      
      String string1 = StringUtils.abbreviate(" vs qf~9m[6tS8 ofzGk *TheArramustno^benull", 8192, 8192);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals(" vs qf~9m[6tS8 ofzGk *TheArramustno^benull", string1);
      
      String string2 = StringUtils.stripToEmpty(" vs qf~9m[6tS8 ofzGk *TheArramustno^benull");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("vs qf~9m[6tS8 ofzGk *TheArramustno^benull", string2);
  }

  @Test(timeout = 4000)
  public void test443()  throws Throwable  {
      String[] stringArray0 = new String[5];
      String string0 = StringUtils.strip(stringArray0[0]);
      assertNull(string0);
      assertEquals(5, stringArray0.length);
      
      String string1 = StringUtils.removeEndIgnoreCase(" vs  vs ", " vs  vs ");
      assertNotNull(string1);
      assertEquals("", string1);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) " vs ", (CharSequence) " vs ");
      assertEquals(0, int0);
      
      String[] stringArray1 = StringUtils.splitByWholeSeparatorPreserveAllTokens(" vs ", " ");
      assertNotNull(stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(3, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      Integer integer0 = new Integer(156);
      assertNotNull(integer0);
      assertFalse(integer0.equals((Object)int0));
      assertEquals(156, (int)integer0);
      
      // Undeclared exception!
      try { 
        StringUtils.getJaroWinklerDistance("", (CharSequence) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test444()  throws Throwable  {
      boolean boolean0 = StringUtils.containsOnly((CharSequence) null, "k]uJp{mQ8S!");
      assertFalse(boolean0);
      
      String string0 = StringUtils.center("k]uJp{mQ8S!", (-7), 'A');
      assertNotNull(string0);
      assertEquals("k]uJp{mQ8S!", string0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparator("The character ", ".M,KjXgwysMU,", 508);
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      Integer[] integerArray0 = new Integer[2];
      Integer integer0 = new Integer(1385);
      assertNotNull(integer0);
      assertEquals(1385, (int)integer0);
      
      integerArray0[0] = integer0;
      String string1 = StringUtils.rightPad((String) null, (-162), "Cannot store ");
      assertNull(string1);
      
      String string2 = StringUtils.firstNonBlank(stringArray0);
      assertNotNull(string2);
      assertEquals(1, stringArray0.length);
      assertFalse(string2.equals((Object)string0));
      assertEquals("The character ", string2);
      
      boolean boolean1 = StringUtils.isMixedCase((CharSequence) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      // Undeclared exception!
      try { 
        StringUtils.getJaroWinklerDistance((CharSequence) null, "The character ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test445()  throws Throwable  {
      String string0 = StringUtils.replace("", "US.^e:o_ufGpA", "", 0);
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.replaceIgnoreCase("", "US.^e:o_ufGpA", "", (-3695));
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      
      String string2 = StringUtils.center("", 1911);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = "US.^e:o_ufGpA";
      stringArray0[1] = "/)q_F[PuSDH6Q*O";
      stringArray0[2] = null;
      String string3 = StringUtils.replaceEachRepeatedly((String) null, stringArray0, stringArray0);
      assertNull(string3);
      assertEquals(3, stringArray0.length);
      
      String string4 = StringUtils.stripToNull("");
      assertNull(string4);
      
      int int0 = StringUtils.compareIgnoreCase(string2, "}");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals((-93), int0);
      
      String string5 = StringUtils.defaultIfEmpty(string2, (String) null);
      assertNotNull(string5);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      
      String string6 = StringUtils.chop(string2);
      assertNotNull(string6);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string0));
      
      boolean boolean0 = StringUtils.isNotBlank("US.^e:o_ufGpA");
      assertTrue(boolean0);
      
      String string7 = StringUtils.substringBeforeLast("", "US.^e:o_ufGpA");
      assertNotNull(string7);
      assertFalse(string7.equals((Object)string6));
      assertTrue(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string5));
      assertTrue(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string2));
      assertEquals("", string7);
      
      String[] stringArray1 = StringUtils.splitPreserveAllTokens(string6, 'W');
      assertNotNull(stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(1, stringArray1.length);
      assertFalse(string2.equals((Object)string7));
      assertFalse(string2.equals((Object)string6));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string7));
      assertFalse(string6.equals((Object)string0));
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      String string8 = StringUtils.rightPad("', has a length less than 2", (-162), (String) null);
      assertNotNull(string8);
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string5));
      assertEquals("', has a length less than 2", string8);
      
      String string9 = StringUtils.firstNonBlank(stringArray1);
      assertNull(string9);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(1, stringArray1.length);
      assertFalse(string2.equals((Object)string7));
      assertFalse(string2.equals((Object)string8));
      assertFalse(string2.equals((Object)string6));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string8));
      assertFalse(string6.equals((Object)string7));
      assertFalse(string6.equals((Object)string0));
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      boolean boolean1 = StringUtils.isMixedCase("', has a length less than 2");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      // Undeclared exception!
      try { 
        StringUtils.getJaroWinklerDistance("", (CharSequence) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test446()  throws Throwable  {
      String string0 = StringUtils.repeat("CfL0^+LYj*8]rB%", 1435);
      assertNotNull(string0);
      
      String[] stringArray0 = StringUtils.split("CfL0^+LYj*8]rB%");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      boolean boolean0 = StringUtils.isAlphanumeric("CfL0^+LYj*8]rB%");
      assertFalse(boolean0);
      
      int int0 = StringUtils.countMatches((CharSequence) string0, (CharSequence) "CfL0^+LYj*8]rB%");
      assertEquals(1435, int0);
      
      boolean boolean1 = StringUtils.contains((CharSequence) "CfL0^+LYj*8]rB%", 2646);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test447()  throws Throwable  {
      ArrayDeque<Integer> arrayDeque0 = new ArrayDeque<Integer>();
      assertNotNull(arrayDeque0);
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      
      Stream<Integer> stream0 = arrayDeque0.parallelStream();
      assertNotNull(stream0);
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      
      int int0 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      boolean boolean0 = StringUtils.equalsAnyIgnoreCase(" vs ", charSequenceArray0);
      assertEquals(0, charSequenceArray0.length);
      assertFalse(boolean0);
      
      String string0 = StringUtils.stripToNull(" vs ");
      assertNotNull(string0);
      assertEquals("vs", string0);
      
      String string1 = StringUtils.join((float[]) null, '\"', 2802, 1257);
      assertNull(string1);
      
      int int1 = StringUtils.indexOfDifference((CharSequence) " vs ", (CharSequence) null);
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      String string2 = StringUtils.remove("vs", "Cannot store ");
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string0));
      assertEquals("vs", string2);
  }

  @Test(timeout = 4000)
  public void test448()  throws Throwable  {
      Object[] objectArray0 = new Object[5];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      Object object1 = new Object();
      assertNotNull(object1);
      assertFalse(object1.equals((Object)object0));
      
      objectArray0[1] = object1;
      Object object2 = new Object();
      assertNotNull(object2);
      assertFalse(object2.equals((Object)object1));
      assertFalse(object2.equals((Object)object0));
      
      objectArray0[2] = object2;
      Object object3 = new Object();
      assertNotNull(object3);
      assertFalse(object3.equals((Object)object1));
      assertFalse(object3.equals((Object)object0));
      assertFalse(object3.equals((Object)object2));
      
      objectArray0[3] = object3;
      Object object4 = new Object();
      assertNotNull(object4);
      assertFalse(object4.equals((Object)object2));
      assertFalse(object4.equals((Object)object3));
      assertFalse(object4.equals((Object)object0));
      assertFalse(object4.equals((Object)object1));
      
      objectArray0[4] = object4;
      String string0 = StringUtils.join(objectArray0, "");
      assertNotNull(string0);
      assertEquals(5, objectArray0.length);
      
      String string1 = StringUtils.wrapIfMissing("java.lang.Object@1148cf2cjava.lang.Object@2e45213fjava.lang.Object@7c07f9bfjava.lang.Object@248de301java.lang.Object@736b7913", "java.lang.Object@1148cf2cjava.lang.Object@2e45213fjava.lang.Object@7c07f9bfjava.lang.Object@248de301java.lang.Object@736b7913");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.replacePattern("RjWU}p|M=YT9", "java.lang.Object@1148cf2cjava.lang.Object@2e45213fjava.lang.Object@7c07f9bfjava.lang.Object@248de301java.lang.Object@736b7913", "java.lang.Object@1148cf2cjava.lang.Object@2e45213fjava.lang.Object@7c07f9bfjava.lang.Object@248de301java.lang.Object@736b7913");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("RjWU}p|M=YT9", string2);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "RjWU}p|M=YT9";
      String string3 = StringUtils.getCommonPrefix(stringArray0);
      assertNotNull(string3);
      assertEquals(1, stringArray0.length);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string2));
      assertEquals("RjWU}p|M=YT9", string3);
      
      String string4 = StringUtils.stripStart("RjWU}p|M=YT9", "Minimum abbreviation width is %d");
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertEquals("RjWU}p|M=YT9", string4);
      
      String string5 = StringUtils.repeat("", 22);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertEquals("", string5);
  }

  @Test(timeout = 4000)
  public void test449()  throws Throwable  {
      String string0 = StringUtils.LF;
      assertNotNull(string0);
      assertEquals("\n", string0);
      
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.toString());
      
      String string1 = StringUtils.rightPad("i<eI+uboaj{4fZ<j", 484);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("i<eI+uboaj{4fZ<j                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    ", string1);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "i<eI+uboaj{4fZ<j", (CharSequence) "\n", 484);
      assertEquals(16, int0);
      
      int int1 = StringUtils.INDEX_NOT_FOUND;
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      String string2 = StringUtils.substringBefore("Cloneable type ", 16);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("Cloneable type ", string2);
  }

  @Test(timeout = 4000)
  public void test450()  throws Throwable  {
      String string0 = StringUtils.difference(" QsI", " QsI");
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test451()  throws Throwable  {
      String string0 = StringUtils.repeat("", 12);
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.trimToNull((String) null);
      assertNull(string1);
      
      String[] stringArray0 = StringUtils.substringsBetween("", "", (String) null);
      assertNull(stringArray0);
      
      String string2 = StringUtils.substringBetween((String) null, (String) null);
      assertNull(string2);
      
      String string3 = StringUtils.substringAfter("/n0 24<H", 12);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertEquals("", string3);
  }

  @Test(timeout = 4000)
  public void test452()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      charSequenceArray0[0] = (CharSequence) "h!{j5f5T8V}7s;";
      charSequenceArray0[1] = (CharSequence) "h!{j5f5T8V}7s;";
      charSequenceArray0[2] = (CharSequence) "h!{j5f5T8V}7s;";
      String string0 = StringUtils.abbreviateMiddle("h!{j5f5T8V}7s;", "java.lang.Object@52b769b5java.lang.Object@1d3febfajava.lang.Object@4c16c3aejava.lang.Object@4a32f5f1java.lang.Object@23a1c7c3java.lang.Object@52b769b5java.lang.Object@1d3febfajava.lang.Object@4c16c3aejava.lang.Object@4a32f5f1java.lang.Object@23a1c7c3", 15);
      assertNotNull(string0);
      assertEquals("h!{j5f5T8V}7s;", string0);
      
      charSequenceArray0[3] = (CharSequence) "h!{j5f5T8V}7s;";
      charSequenceArray0[4] = (CharSequence) "h!{j5f5T8V}7s;";
      String string1 = StringUtils.appendIfMissing("h!{j5f5T8V}7s;", "h!{j5f5T8V}7s;", charSequenceArray0);
      assertNotNull(string1);
      assertEquals(5, charSequenceArray0.length);
      assertTrue(string1.equals((Object)string0));
      assertEquals("h!{j5f5T8V}7s;", string1);
      
      int int0 = StringUtils.indexOfDifference(charSequenceArray0[4], (CharSequence) "h!{j5f5T8V}7s;");
      assertEquals(5, charSequenceArray0.length);
      assertEquals((-1), int0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("", "java.lang.Object@52b769b5java.lang.Object@1d3febfajava.lang.Object@4c16c3aejava.lang.Object@4a32f5f1java.lang.Object@23a1c7c3java.lang.Object@52b769b5java.lang.Object@1d3febfajava.lang.Object@4c16c3aejava.lang.Object@4a32f5f1java.lang.Object@23a1c7c3");
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      
      String string2 = StringUtils.repeat(".'am$2&U)u", (-1));
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("", string2);
      
      String string3 = StringUtils.reverseDelimited(".'am$2&U)u", 'N');
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals(".'am$2&U)u", string3);
      
      boolean boolean0 = StringUtils.isAllEmpty(charSequenceArray0);
      assertEquals(5, charSequenceArray0.length);
      assertFalse(boolean0);
      
      String[] stringArray1 = StringUtils.splitByWholeSeparatorPreserveAllTokens("The type must not be null", "", (-1));
      assertNotNull(stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(6, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      String string4 = StringUtils.replaceOnce(".'am$2&U)u", "Cannot store ", "Cannot store ");
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertEquals(".'am$2&U)u", string4);
      
      int int1 = StringUtils.getLevenshteinDistance(charSequenceArray0[4], (CharSequence) ".'am$2&U)u", 17);
      assertEquals(5, charSequenceArray0.length);
      assertFalse(int1 == int0);
      assertEquals(14, int1);
      
      int int2 = StringUtils.length("java.lang.Object@52b769b5java.lang.Object@1d3febfajava.lang.Object@4c16c3aejava.lang.Object@4a32f5f1java.lang.Object@23a1c7c3java.lang.Object@52b769b5java.lang.Object@1d3febfajava.lang.Object@4c16c3aejava.lang.Object@4a32f5f1java.lang.Object@23a1c7c3");
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(250, int2);
      
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      String string5 = StringUtils.getIfEmpty("sny_cTpX P}]&W", supplier0);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertEquals("sny_cTpX P}]&W", string5);
      
      int int3 = StringUtils.compare("h!{j5f5T8V}7s;", "sny_cTpX P}]&W");
      assertFalse(int3 == int1);
      assertFalse(int3 == int0);
      assertFalse(int3 == int2);
      assertEquals((-11), int3);
      
      boolean boolean1 = StringUtils.isEmpty(charSequenceArray0[3]);
      assertEquals(5, charSequenceArray0.length);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string6 = StringUtils.trim("h!{j5f5T8V}7s;");
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string3));
      assertTrue(string6.equals((Object)string0));
      assertTrue(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string2));
      assertEquals("h!{j5f5T8V}7s;", string6);
      
      String string7 = StringUtils.chop("sny_cTpX P}]&W");
      assertNotNull(string7);
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string3));
      assertEquals("sny_cTpX P}]&", string7);
      
      String string8 = StringUtils.substringAfter("Zu*4-n!o`!mH6S_v", 0);
      assertNotNull(string8);
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string1));
      assertEquals("", string8);
  }

  @Test(timeout = 4000)
  public void test453()  throws Throwable  {
      String string0 = StringUtils.replaceOnceIgnoreCase(",OgH#.>iD>Z1y", ",OgH#.>iD>Z1y", (String) null);
      assertNotNull(string0);
      assertEquals(",OgH#.>iD>Z1y", string0);
      
      String string1 = StringUtils.mid("%`7+_^", (-79), 101);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("%`7+_^", string1);
      
      String string2 = StringUtils.unwrap(",OgH#.>iD>Z1y", 'O');
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals(",OgH#.>iD>Z1y", string2);
      
      boolean boolean0 = StringUtils.startsWith(",OgH#.>iD>Z1y", ",OgH#.>iD>Z1y");
      assertTrue(boolean0);
      
      String string3 = StringUtils.center((String) null, 2, 'O');
      assertNull(string3);
  }

  @Test(timeout = 4000)
  public void test454()  throws Throwable  {
      int int0 = StringUtils.indexOfDifference((CharSequence[]) null);
      assertEquals((-1), int0);
      
      String string0 = StringUtils.removeEnd("(\"xv", (String) null);
      assertNotNull(string0);
      assertEquals("(\"xv", string0);
      
      StringUtils.repeat('0', 934);
  }

  @Test(timeout = 4000)
  public void test455()  throws Throwable  {
      String string0 = StringUtils.abbreviate("=]Un2oPT<", "m%", 127, 527);
      assertNotNull(string0);
      assertEquals("=]Un2oPT<", string0);
      
      String string1 = StringUtils.rightPad("w%eM*f:LU1XYs<Qn", 7, 'L');
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("w%eM*f:LU1XYs<Qn", string1);
      
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.name());
      assertTrue(charset0.canEncode());
      
      byte[] byteArray0 = StringUtils.getBytes("=]Un2oPT<", charset0);
      assertNotNull(byteArray0);
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.name());
      assertTrue(charset0.canEncode());
      assertEquals(9, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)61, (byte)93, (byte)85, (byte)110, (byte)50, (byte)111, (byte)80, (byte)84, (byte)60}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test456()  throws Throwable  {
      String string0 = StringUtils.replace("", "US.^e:o_ufGpA", "", 1664);
      assertNotNull(string0);
      assertEquals("", string0);
      
      boolean boolean0 = StringUtils.isAnyBlank((CharSequence[]) null);
      assertFalse(boolean0);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) 1664;
      floatArray0[1] = (float) 1664;
      floatArray0[2] = (float) 1664;
      floatArray0[3] = 2915.091F;
      boolean boolean1 = StringUtils.containsOnly((CharSequence) "US.^e:o_ufGpA", (char[]) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string1 = StringUtils.defaultIfEmpty("", "x2?x|[Cx[:^C6");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("x2?x|[Cx[:^C6", string1);
      
      String string2 = StringUtils.substringAfter(";H.r/XU9", "X");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("U9", string2);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "U9", "11RC.[0%F2DhHK`&YV");
      assertEquals((-1), int0);
      
      String string3 = StringUtils.rightPad("m*|)M&l8wWL$c", (-1), '');
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals("m*|)M&l8wWL$c", string3);
      
      String string4 = StringUtils.replaceIgnoreCase("X", "Minimum abbreviation width is %d", "Index: ");
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertEquals("X", string4);
  }

  @Test(timeout = 4000)
  public void test457()  throws Throwable  {
      String string0 = StringUtils.swapCase("");
      assertNotNull(string0);
      assertEquals("", string0);
      
      boolean boolean0 = StringUtils.isNotEmpty("");
      assertFalse(boolean0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "";
      charSequenceArray0[2] = (CharSequence) "";
      charSequenceArray0[3] = (CharSequence) "";
      charSequenceArray0[4] = (CharSequence) "";
      boolean boolean1 = StringUtils.containsAny((CharSequence) "", charSequenceArray0);
      assertEquals(5, charSequenceArray0.length);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string1 = StringUtils.wrap("", 'Q');
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      
      String string2 = StringUtils.center("", (-7), "");
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertEquals("", string2);
      
      String string3 = StringUtils.replacePattern("", "", "");
      assertNotNull(string3);
      assertTrue(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string1));
      assertEquals("", string3);
      
      String string4 = StringUtils.leftPad("", 440, 'Q');
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertEquals("QQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQ", string4);
      
      boolean boolean2 = StringUtils.containsAny(charSequenceArray0[2], charSequenceArray0);
      assertEquals(5, charSequenceArray0.length);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      boolean boolean3 = StringUtils.isAlphaSpace("");
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3);
      
      int int0 = StringUtils.compareIgnoreCase("", "U~+$Q2+r", false);
      assertEquals((-8), int0);
      
      Locale locale0 = Locale.CANADA;
      assertNotNull(locale0);
      assertEquals("en", locale0.getLanguage());
      assertEquals("en_CA", locale0.toString());
      assertEquals("CA", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("CAN", locale0.getISO3Country());
      
      String string5 = locale0.getDisplayCountry();
      assertNotNull(string5);
      assertEquals("en", locale0.getLanguage());
      assertEquals("en_CA", locale0.toString());
      assertEquals("CA", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("CAN", locale0.getISO3Country());
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertEquals("Canada", string5);
      
      String[] stringArray0 = Locale.getISOCountries();
      assertNotNull(stringArray0);
      assertEquals(250, stringArray0.length);
      
      String string6 = locale0.getDisplayVariant();
      assertNotNull(string6);
      assertEquals("en", locale0.getLanguage());
      assertEquals("en_CA", locale0.toString());
      assertEquals("CA", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("CAN", locale0.getISO3Country());
      assertFalse(string6.equals((Object)string4));
      assertTrue(string6.equals((Object)string1));
      assertTrue(string6.equals((Object)string2));
      assertTrue(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string5));
      assertTrue(string6.equals((Object)string3));
      assertEquals("", string6);
      
      Locale locale1 = locale0.stripExtensions();
      assertNotNull(locale1);
      assertSame(locale0, locale1);
      assertSame(locale1, locale0);
      assertEquals("en", locale0.getLanguage());
      assertEquals("en_CA", locale0.toString());
      assertEquals("CA", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("CA", locale1.getCountry());
      assertEquals("", locale1.getVariant());
      assertEquals("CAN", locale1.getISO3Country());
      assertEquals("eng", locale1.getISO3Language());
      assertEquals("en", locale1.getLanguage());
      assertEquals("en_CA", locale1.toString());
      
      String string7 = StringUtils.lowerCase("", locale1);
      assertNotNull(string7);
      assertSame(locale0, locale1);
      assertSame(locale1, locale0);
      assertEquals("en", locale0.getLanguage());
      assertEquals("en_CA", locale0.toString());
      assertEquals("CA", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("CA", locale1.getCountry());
      assertEquals("", locale1.getVariant());
      assertEquals("CAN", locale1.getISO3Country());
      assertEquals("eng", locale1.getISO3Language());
      assertEquals("en", locale1.getLanguage());
      assertEquals("en_CA", locale1.toString());
      assertFalse(string7.equals((Object)string4));
      assertTrue(string7.equals((Object)string0));
      assertTrue(string7.equals((Object)string1));
      assertTrue(string7.equals((Object)string6));
      assertTrue(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string5));
      assertTrue(string7.equals((Object)string2));
      assertEquals("", string7);
      
      String string8 = StringUtils.mid("OVgOKO8*))Q", 2378, (-7));
      assertNotNull(string8);
      assertFalse(string8.equals((Object)string4));
      assertTrue(string8.equals((Object)string2));
      assertTrue(string8.equals((Object)string7));
      assertTrue(string8.equals((Object)string1));
      assertTrue(string8.equals((Object)string3));
      assertTrue(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string5));
      assertEquals("", string8);
      
      boolean boolean4 = StringUtils.startsWith("Canada", "U~+$Q2+r");
      assertFalse(boolean4 == boolean3);
      assertTrue(boolean4 == boolean2);
      assertTrue(boolean4 == boolean1);
      assertTrue(boolean4 == boolean0);
      assertFalse(boolean4);
  }

  @Test(timeout = 4000)
  public void test458()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      assertNotNull(stringWriter0);
      assertEquals("", stringWriter0.toString());
      
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      assertNotNull(stringBuffer0);
      assertEquals("", stringWriter0.toString());
      assertEquals("", stringBuffer0.toString());
      assertEquals(0, stringBuffer0.length());
      
      int int0 = StringUtils.lastIndexOf((CharSequence) stringBuffer0, Integer.MAX_VALUE);
      assertEquals("", stringWriter0.toString());
      assertEquals("", stringBuffer0.toString());
      assertEquals(0, stringBuffer0.length());
      assertEquals((-1), int0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[6];
      String string0 = StringUtils.abbreviateMiddle("}Tf", "Minimum abbreviation width is %dMinimum abbreviation width is %d", 8192);
      assertNotNull(string0);
      assertEquals("}Tf", string0);
      
      Class<Object> class0 = Object.class;
      ServiceLoader<Object> serviceLoader0 = ServiceLoader.loadInstalled(class0);
      assertNotNull(serviceLoader0);
      assertEquals("java.util.ServiceLoader[java.lang.Object]", serviceLoader0.toString());
      
      String string1 = StringUtils.joinWith("}Tf", charSequenceArray0);
      assertNotNull(string1);
      assertEquals(6, charSequenceArray0.length);
      assertFalse(string1.equals((Object)string0));
      assertEquals("}Tf}Tf}Tf}Tf}Tf", string1);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparator("org.apache.commons.lang3.LocaleUtils", "}Tf", 160);
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      Locale locale0 = Locale.ITALIAN;
      assertNotNull(locale0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("it", locale0.getLanguage());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("it", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      
      Locale locale1 = Locale.CHINA;
      assertNotNull(locale1);
      assertNotSame(locale1, locale0);
      assertEquals("zh_CN", locale1.toString());
      assertEquals("zho", locale1.getISO3Language());
      assertEquals("CHN", locale1.getISO3Country());
      assertEquals("zh", locale1.getLanguage());
      assertEquals("", locale1.getVariant());
      assertEquals("CN", locale1.getCountry());
      assertFalse(locale1.equals((Object)locale0));
      
      Locale locale2 = Locale.FRANCE;
      assertNotNull(locale2);
      assertNotSame(locale2, locale1);
      assertNotSame(locale2, locale0);
      assertEquals("fr", locale2.getLanguage());
      assertEquals("", locale2.getVariant());
      assertEquals("fra", locale2.getISO3Language());
      assertEquals("fr_FR", locale2.toString());
      assertEquals("FR", locale2.getCountry());
      assertEquals("FRA", locale2.getISO3Country());
      assertFalse(locale2.equals((Object)locale1));
      assertFalse(locale2.equals((Object)locale0));
      
      String string2 = locale1.getDisplayName(locale2);
      assertNotNull(string2);
      assertNotSame(locale1, locale2);
      assertNotSame(locale1, locale0);
      assertNotSame(locale2, locale1);
      assertNotSame(locale2, locale0);
      assertEquals("zh_CN", locale1.toString());
      assertEquals("zho", locale1.getISO3Language());
      assertEquals("CHN", locale1.getISO3Country());
      assertEquals("zh", locale1.getLanguage());
      assertEquals("", locale1.getVariant());
      assertEquals("CN", locale1.getCountry());
      assertEquals("fr", locale2.getLanguage());
      assertEquals("", locale2.getVariant());
      assertEquals("fra", locale2.getISO3Language());
      assertEquals("fr_FR", locale2.toString());
      assertEquals("FR", locale2.getCountry());
      assertEquals("FRA", locale2.getISO3Country());
      assertFalse(locale1.equals((Object)locale2));
      assertFalse(locale1.equals((Object)locale0));
      assertFalse(locale2.equals((Object)locale1));
      assertFalse(locale2.equals((Object)locale0));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("chinois (Chine)", string2);
      
      String string3 = StringUtils.join((int[]) null, 'S');
      assertNull(string3);
  }

  @Test(timeout = 4000)
  public void test459()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      assertNotNull(stringWriter0);
      assertEquals("", stringWriter0.toString());
      
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      assertNotNull(stringBuffer0);
      assertEquals("", stringWriter0.toString());
      assertEquals("", stringBuffer0.toString());
      assertEquals(0, stringBuffer0.length());
      
      stringWriter0.write(32767);
      assertEquals("\u7FFF", stringWriter0.toString());
      
      int int0 = Integer.MAX_VALUE;
      int int1 = StringUtils.lastIndexOf((CharSequence) stringBuffer0, Integer.MAX_VALUE);
      assertEquals("\u7FFF", stringWriter0.toString());
      assertEquals(1, stringBuffer0.length());
      assertEquals("\u7FFF", stringBuffer0.toString());
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      String string0 = StringUtils.trimToEmpty("Object varargs must not be null");
      assertNotNull(string0);
      assertEquals("Object varargs must not be null", string0);
      
      Stack<String> stack0 = new Stack<String>();
      assertNotNull(stack0);
      assertEquals(0, stack0.size());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.contains(string0));
      
      ListIterator<String> listIterator0 = stack0.listIterator();
      assertNotNull(listIterator0);
      assertEquals(0, stack0.size());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertFalse(listIterator0.hasPrevious());
      assertFalse(listIterator0.hasNext());
      assertFalse(stack0.contains(string0));
      
      String string1 = StringUtils.join((Iterator<?>) listIterator0, 'D');
      assertNotNull(string1);
      assertEquals(0, stack0.size());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertFalse(listIterator0.hasPrevious());
      assertFalse(listIterator0.hasNext());
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertFalse(stack0.contains("Object varargs must not be null"));
      
      byte byte0 = (byte)16;
      // Undeclared exception!
      try { 
        Charset.forName("Aborting to protect against StackOverflowError - output of one loop is the input of another");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // Aborting to protect against StackOverflowError - output of one loop is the input of another
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test460()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      String string0 = StringUtils.join(doubleArray0, '6');
      assertNotNull(string0);
      assertEquals(4, doubleArray0.length);
      assertEquals("0.060.060.060.0", string0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      String string1 = StringUtils.rotate("0.060.060.060.0", 3921);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals(".060.00.060.060", string1);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) ".060.00.060.060", 3921);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test461()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)16;
      byteArray0[1] = (byte) (-116);
      byteArray0[2] = (byte)43;
      String string0 = StringUtils.join(byteArray0, 'I');
      assertNotNull(string0);
      assertEquals(3, byteArray0.length);
      assertEquals("16I-116I43", string0);
      assertArrayEquals(new byte[] {(byte)16, (byte) (-116), (byte)43}, byteArray0);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 'u';
      doubleArray0[1] = (double) (-173);
      doubleArray0[2] = (double) (-173);
      doubleArray0[3] = 1.0;
      String string1 = StringUtils.join(doubleArray0, 'I', (int) (byte)16, (int) (byte) (-116));
      assertNotNull(string1);
      assertEquals(4, doubleArray0.length);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertArrayEquals(new double[] {117.0, (-173.0), (-173.0), 1.0}, doubleArray0, 0.01);
      
      String string2 = StringUtils.removeFirst(" ", "<\"");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals(" ", string2);
      
      String string3 = StringUtils.trim("p~j");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals("p~j", string3);
      
      ArrayDeque<Integer> arrayDeque0 = new ArrayDeque<Integer>();
      assertNotNull(arrayDeque0);
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      assertFalse(arrayDeque0.contains((-173)));
      
      Iterator<Integer> iterator0 = arrayDeque0.descendingIterator();
      assertNotNull(iterator0);
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      assertFalse(arrayDeque0.contains((-173)));
      
      String string4 = StringUtils.substringAfter("1wM5$FMJ)xb).C< &y", "j1Wag.vrj)kD?<nh1");
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertEquals("", string4);
      
      String string5 = StringUtils.replacePattern((String) null, "#", " ");
      assertNull(string5);
  }

  @Test(timeout = 4000)
  public void test462()  throws Throwable  {
      String string0 = StringUtils.rightPad("f>-l|^^'S`C", (-161), "V");
      assertNotNull(string0);
      assertEquals("f>-l|^^'S`C", string0);
      
      boolean boolean0 = StringUtils.isAlphanumericSpace("f>-l|^^'S`C");
      assertFalse(boolean0);
      
      String string1 = StringUtils.difference("HPwh/TaPTm^", "ko ?8?sYQU");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("ko ?8?sYQU", string1);
      
      String string2 = StringUtils.trimToNull("");
      assertNull(string2);
      
      String string3 = StringUtils.wrap("Array and element cannot both be null", '[');
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals("[Array and element cannot both be null[", string3);
      
      char[] charArray0 = new char[6];
      charArray0[0] = '[';
      charArray0[1] = '[';
      charArray0[2] = '[';
      charArray0[3] = '[';
      charArray0[4] = '[';
      charArray0[5] = '[';
      int int0 = StringUtils.indexOfAny((CharSequence) "[Array and element cannot both be null[", charArray0);
      assertEquals(6, charArray0.length);
      assertEquals(0, int0);
      assertArrayEquals(new char[] {'[', '[', '[', '[', '[', '['}, charArray0);
  }

  @Test(timeout = 4000)
  public void test463()  throws Throwable  {
      int int0 = StringUtils.indexOfAny((CharSequence) "Cannot store ", (char[]) null);
      assertEquals((-1), int0);
      
      String string0 = StringUtils.substringBetween("m GHeduligT<", "m GHeduligT<", "V>e?o!6uKx7U8%&S]i");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test464()  throws Throwable  {
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      String string0 = StringUtils.getIfEmpty("Minimum abbreviation width is %d", supplier0);
      assertNotNull(string0);
      assertEquals("Minimum abbreviation width is %d", string0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparator("Minimum abbreviation width is %d", "Minimum abbreviation width is %d", 508);
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      Integer integer0 = new Integer(508);
      assertNotNull(integer0);
      assertEquals(508, (int)integer0);
      
      int int0 = StringUtils.compareIgnoreCase("...", "...", false);
      assertEquals(0, int0);
      
      Locale locale0 = Locale.CANADA;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("en_CA", locale0.toString());
      assertEquals("en", locale0.getLanguage());
      assertEquals("CA", locale0.getCountry());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("CAN", locale0.getISO3Country());
      
      String string1 = locale0.getDisplayCountry();
      assertNotNull(string1);
      assertEquals("", locale0.getVariant());
      assertEquals("en_CA", locale0.toString());
      assertEquals("en", locale0.getLanguage());
      assertEquals("CA", locale0.getCountry());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("CAN", locale0.getISO3Country());
      assertFalse(string1.equals((Object)string0));
      assertEquals("Canada", string1);
      
      String[] stringArray1 = Locale.getISOCountries();
      assertNotNull(stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(250, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      String string2 = locale0.getDisplayVariant();
      assertNotNull(string2);
      assertEquals("", locale0.getVariant());
      assertEquals("en_CA", locale0.toString());
      assertEquals("en", locale0.getLanguage());
      assertEquals("CA", locale0.getCountry());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("CAN", locale0.getISO3Country());
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("", string2);
      
      Locale locale1 = Locale.GERMANY;
      assertNotNull(locale1);
      assertNotSame(locale1, locale0);
      assertEquals("DE", locale1.getCountry());
      assertEquals("de_DE", locale1.toString());
      assertEquals("DEU", locale1.getISO3Country());
      assertEquals("de", locale1.getLanguage());
      assertEquals("deu", locale1.getISO3Language());
      assertEquals("", locale1.getVariant());
      assertFalse(locale1.equals((Object)locale0));
      
      String string3 = StringUtils.trim("hVcHpx_?^YhtvWD!Xr");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("hVcHpx_?^YhtvWD!Xr", string3);
      
      boolean boolean0 = StringUtils.startsWith("hVcHpx_?^YhtvWD!Xr", "Aborting to protect against StackOverflowError - output of one loop is the input of another");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test465()  throws Throwable  {
      String string0 = StringUtils.center("aD", 1812, "Dn>^Mert#v2}+.");
      assertNotNull(string0);
      
      String string1 = StringUtils.substringBefore("aD", "Qxy?OiF;tPas");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("aD", string1);
      
      String string2 = StringUtils.unwrap("aD", "Qxy?OiF;tPas");
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("aD", string2);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "aD", (CharSequence) "aD");
      assertEquals(0, int0);
      
      String string3 = StringUtils.repeat((String) null, 1812);
      assertNull(string3);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparator("aD", "aD");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      boolean boolean0 = StringUtils.isAlphanumeric((CharSequence) null);
      assertFalse(boolean0);
      
      int int1 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "aD", (CharSequence) "aD", (-2109));
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short)2997;
      String string4 = StringUtils.getCommonPrefix(stringArray0);
      assertNotNull(string4);
      assertEquals(1, stringArray0.length);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertEquals("", string4);
      
      boolean boolean1 = StringUtils.isAlphanumeric("");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test466()  throws Throwable  {
      String string0 = "\\u";
      String string1 = StringUtils.trim(string0);
      assertNotNull(string1);
      assertEquals("\\u", string1);
      
      ArrayDeque<Integer> arrayDeque0 = new ArrayDeque<Integer>();
      assertNotNull(arrayDeque0);
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      
      Iterator<Integer> iterator0 = arrayDeque0.descendingIterator();
      assertNotNull(iterator0);
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      
      float[] floatArray0 = new float[6];
      floatArray0[1] = (-672.57324F);
      floatArray0[2] = 820.7103F;
      floatArray0[3] = (-672.57324F);
      floatArray0[4] = (float) 'E';
      floatArray0[5] = (-672.57324F);
      String string2 = StringUtils.join(floatArray0, 'k');
      assertNotNull(string2);
      assertEquals(6, floatArray0.length);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("0.0k-672.57324k820.7103k-672.57324k69.0k-672.57324", string2);
      assertArrayEquals(new float[] {0.0F, (-672.57324F), 820.7103F, (-672.57324F), 69.0F, (-672.57324F)}, floatArray0, 0.01F);
      
      String string3 = StringUtils.replaceChars("=.dg1Z1035!b_", "j}&~\"Em\"+oiMNou-X", string1);
      assertNotNull(string3);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals("=.dg1Z1035!b_", string3);
      
      String string4 = StringUtils.toRootUpperCase((String) null);
      assertNull(string4);
      
      String string5 = StringUtils.reverse("pV&d&F@?O[k");
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertEquals("k[O?@F&d&Vp", string5);
      
      String string6 = StringUtils.abbreviate("u0", 4076);
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string0));
      assertEquals("u0", string6);
  }

  @Test(timeout = 4000)
  public void test467()  throws Throwable  {
      String string0 = StringUtils.replace("", "US.^e:o_ufGpA", "", 1664);
      assertNotNull(string0);
      assertEquals("", string0);
      
      boolean boolean0 = StringUtils.isAnyBlank((CharSequence[]) null);
      assertFalse(boolean0);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) 1664;
      floatArray0[1] = (float) 1664;
      floatArray0[2] = (float) 1664;
      long[] longArray0 = new long[6];
      longArray0[0] = 3867L;
      longArray0[1] = (long) 1664;
      longArray0[2] = 0L;
      longArray0[3] = (long) 1664;
      longArray0[4] = 0L;
      longArray0[5] = 3867L;
      String string1 = StringUtils.join(longArray0, 'l');
      assertNotNull(string1);
      assertEquals(6, longArray0.length);
      assertFalse(string1.equals((Object)string0));
      assertEquals("3867l1664l0l1664l0l3867", string1);
      assertArrayEquals(new long[] {3867L, 1664L, 0L, 1664L, 0L, 3867L}, longArray0);
      
      String string2 = StringUtils.toRootUpperCase("Threshold must not be negative");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("THRESHOLD MUST NOT BE NEGATIVE", string2);
      
      String string3 = StringUtils.substring("3867l1664l0l1664l0l3867", (int) 'l', (int) 'l');
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string0));
      assertEquals("", string3);
  }

  @Test(timeout = 4000)
  public void test468()  throws Throwable  {
      String string0 = StringUtils.substringAfterLast("", "', has a length less than 2");
      assertNotNull(string0);
      assertEquals("", string0);
      
      int[] intArray0 = StringUtils.toCodePoints("");
      assertNotNull(intArray0);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      
      String string1 = StringUtils.substring("", 2860, 2860);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      
      String string2 = StringUtils.substring("", 2860, 2860);
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string0));
      assertEquals("", string2);
  }

  @Test(timeout = 4000)
  public void test469()  throws Throwable  {
      String string0 = StringUtils.substringAfter("pV&d&F@?O[k", "pV&d&F@?O[k");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.abbreviate("org.apache.commons.lang3.StringUtils5|5pGW#urA~r?~3", "", (-1948), 126);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("org.apache.commons.lang3.StringUtils5|5pGW#urA~r?~3", string1);
  }

  @Test(timeout = 4000)
  public void test470()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "<)v(vKh";
      stringArray0[1] = "";
      String string0 = StringUtils.LF;
      assertNotNull(string0);
      assertEquals("\n", string0);
      
      String string1 = StringUtils.replaceIgnoreCase("Threshold must not be negative", "Locale must not be null", "", (-3695));
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("Threshold must not be negative", string1);
      
      String string2 = StringUtils.center("", (-73));
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("", string2);
      
      String string3 = StringUtils.replaceEachRepeatedly("f0uCY7&r", stringArray0, stringArray0);
      assertNotNull(string3);
      assertEquals(2, stringArray0.length);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("f0uCY7&r", string3);
      
      String string4 = StringUtils.stripEnd("{}", "");
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertEquals("{}", string4);
      
      int int0 = StringUtils.compareIgnoreCase("Locale must not be null", "org.apache.commons.lang3.StringUtils");
      assertEquals((-3), int0);
      
      String string5 = StringUtils.defaultIfEmpty("/)q_F[PuSDH6Q*O", "");
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertEquals("/)q_F[PuSDH6Q*O", string5);
      
      String string6 = StringUtils.substringAfter("Locale must not be null", "Threshold must not be negative");
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string0));
      assertEquals("", string6);
      
      boolean boolean0 = StringUtils.isNotBlank("");
      assertFalse(boolean0);
      
      String string7 = StringUtils.getCommonPrefix(stringArray0);
      assertNotNull(string7);
      assertEquals(2, stringArray0.length);
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string4));
      assertEquals("", string7);
      
      String string8 = StringUtils.stripStart("/)q_F[PuSDH6Q*O", "clone");
      assertNotNull(string8);
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string6));
      assertTrue(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string2));
      assertEquals("/)q_F[PuSDH6Q*O", string8);
      
      long[] longArray0 = new long[6];
      longArray0[0] = (long) (-73);
      longArray0[1] = (long) (-3695);
      longArray0[2] = (long) (-3);
      longArray0[3] = (long) (-3);
      longArray0[4] = (long) (-3695);
      longArray0[5] = (long) (-3695);
      String string9 = StringUtils.join(longArray0, 'f', 2791, (-73));
      assertNotNull(string9);
      assertEquals(6, longArray0.length);
      assertFalse(string9.equals((Object)string5));
      assertFalse(string9.equals((Object)string2));
      assertFalse(string9.equals((Object)string0));
      assertFalse(string9.equals((Object)string8));
      assertFalse(string9.equals((Object)string3));
      assertFalse(string9.equals((Object)string1));
      assertFalse(string9.equals((Object)string4));
      assertEquals("", string9);
      assertArrayEquals(new long[] {(-73L), (-3695L), (-3L), (-3L), (-3695L), (-3695L)}, longArray0);
  }

  @Test(timeout = 4000)
  public void test471()  throws Throwable  {
      boolean boolean0 = StringUtils.containsOnly((CharSequence) null, "k]uJp{mQ8S!");
      assertFalse(boolean0);
      
      String string0 = StringUtils.strip((String) null, (String) null);
      assertNull(string0);
      
      int[] intArray0 = StringUtils.toCodePoints((CharSequence) null);
      assertNull(intArray0);
      
      String string1 = StringUtils.strip("Ie#7e6{6Ac[:Nyh'L", (String) null);
      assertNotNull(string1);
      assertEquals("Ie#7e6{6Ac[:Nyh'L", string1);
  }

  @Test(timeout = 4000)
  public void test472()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-73);
      byteArray0[1] = (byte)106;
      byteArray0[2] = (byte)17;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)5;
      String string0 = StringUtils.join(byteArray0, '2');
      assertNotNull(string0);
      assertEquals(5, byteArray0.length);
      assertEquals("-7321062172025", string0);
      assertArrayEquals(new byte[] {(byte) (-73), (byte)106, (byte)17, (byte)0, (byte)5}, byteArray0);
      
      String[] stringArray0 = StringUtils.split("-7321062172025");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      String string1 = StringUtils.uncapitalize("-7321062172025");
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("-7321062172025", string1);
      
      boolean boolean0 = StringUtils.endsWith("-7321062172025", "-7321062172025");
      assertTrue(boolean0);
      
      String string2 = StringUtils.replaceIgnoreCase("-7321062172025", "-7321062172025", "-7321062172025");
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertEquals("-7321062172025", string2);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) (byte)17;
      floatArray0[1] = (float) (byte)0;
      String string3 = StringUtils.join(floatArray0, 'n');
      assertNotNull(string3);
      assertEquals(2, floatArray0.length);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals("17.0n0.0", string3);
      assertArrayEquals(new float[] {17.0F, 0.0F}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test473()  throws Throwable  {
      String string0 = StringUtils.substringAfterLast("", 10);
      assertNotNull(string0);
      assertEquals("", string0);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "", "");
      assertEquals((-1), int0);
      
      String string1 = StringUtils.replaceOnce("", "af-_Xu1o~2a", "af-_Xu1o~2a");
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      String string2 = StringUtils.replaceEachRepeatedly("", stringArray0, stringArray0);
      assertNotNull(string2);
      assertEquals(4, stringArray0.length);
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertEquals("", string2);
      
      boolean boolean0 = StringUtils.isNumericSpace("");
      assertTrue(boolean0);
      
      String[] stringArray1 = StringUtils.splitByWholeSeparator("af-_Xu1o~2a", "");
      assertNotNull(stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(1, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      String string3 = StringUtils.leftPad("", 2312, '[');
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      
      String string4 = StringUtils.remove("8kUfL|2og", '[');
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertEquals("8kUfL|2og", string4);
      
      String string5 = StringUtils.substringBetween((String) null, "", "p{InCombiningDiacriticalMarks}+");
      assertNull(string5);
      
      boolean boolean1 = StringUtils.containsNone((CharSequence) ";6FZP2*", "org.apache.commons.lang3.CharSequenceUtils");
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String string6 = StringUtils.strip("l");
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string2));
      assertEquals("l", string6);
      
      ArrayList<CharBuffer> arrayList0 = new ArrayList<CharBuffer>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      Stream<CharBuffer> stream0 = arrayList0.stream();
      assertNotNull(stream0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      // Undeclared exception!
      try { 
        StringUtils.join((List<?>) arrayList0, 'u', 5, 10);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // toIndex = 10
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test474()  throws Throwable  {
      ArrayList<CharBuffer> arrayList0 = new ArrayList<CharBuffer>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      Stream<CharBuffer> stream0 = arrayList0.stream();
      assertNotNull(stream0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      // Undeclared exception!
      try { 
        StringUtils.join((List<?>) arrayList0, 'C', 4, 484);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // toIndex = 484
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test475()  throws Throwable  {
      String string0 = StringUtils.LF;
      assertNotNull(string0);
      assertEquals("\n", string0);
      
      String string1 = "qR{kCV^";
      // Undeclared exception!
      try { 
        StringUtils.replacePattern("qR{kCV^", "qR{kCV^", "qR{kCV^");
        fail("Expecting exception: PatternSyntaxException");
      
      } catch(PatternSyntaxException e) {
         //
         // Illegal repetition near index 1
         // qR{kCV^
         //  ^
         //
         verifyException("java.util.regex.Pattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test476()  throws Throwable  {
      String string0 = StringUtils.swapCase("/swe]");
      assertNotNull(string0);
      assertEquals("/SWE]", string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      charSequenceArray0[0] = (CharSequence) "/SWE]";
      charSequenceArray0[1] = (CharSequence) "/SWE]";
      charSequenceArray0[2] = (CharSequence) "/swe]";
      charSequenceArray0[3] = (CharSequence) "/SWE]";
      int int0 = StringUtils.indexOfAny((CharSequence) "/SWE]", charSequenceArray0);
      assertEquals(4, charSequenceArray0.length);
      assertEquals(0, int0);
      
      int int1 = StringUtils.compareIgnoreCase("/SWE]", (String) null, true);
      assertFalse(int1 == int0);
      assertEquals(1, int1);
      
      String string1 = StringUtils.upperCase((String) null);
      assertNull(string1);
      
      boolean boolean0 = StringUtils.equals((CharSequence) null, charSequenceArray0[0]);
      assertEquals(4, charSequenceArray0.length);
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        StringUtils.getLevenshteinDistance(charSequenceArray0[1], (CharSequence) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test477()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)104;
      byteArray0[1] = (byte)0;
      String string0 = StringUtils.wrap("`7p(", 'E');
      assertNotNull(string0);
      assertEquals("E`7p(E", string0);
      
      char[] charArray0 = new char[23];
      charArray0[0] = 'E';
      charArray0[15] = 'E';
      charArray0[2] = 'E';
      int int0 = StringUtils.indexOfAny((CharSequence) "E`7p(E", charArray0);
      assertEquals(23, charArray0.length);
      assertEquals(0, int0);
      
      boolean boolean0 = StringUtils.startsWithIgnoreCase("E`7p(E", "E`7p(E");
      assertTrue(boolean0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[6];
      charSequenceArray0[0] = (CharSequence) "E`7p(E";
      charSequenceArray0[1] = (CharSequence) "E`7p(E";
      charSequenceArray0[2] = (CharSequence) "`7p(";
      charSequenceArray0[3] = (CharSequence) "`7p(";
      String string1 = StringUtils.strip("`7p(", "E`7p(E");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      
      charSequenceArray0[4] = (CharSequence) "";
      charSequenceArray0[5] = (CharSequence) "`7p(";
      boolean boolean1 = StringUtils.isAnyEmpty(charSequenceArray0);
      assertEquals(6, charSequenceArray0.length);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test478()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = " vs ";
      char[] charArray0 = new char[9];
      charArray0[0] = 'l';
      charArray0[1] = 'l';
      charArray0[2] = 'O';
      charArray0[3] = '8';
      charArray0[4] = '<';
      charArray0[5] = 'Z';
      charArray0[6] = '=';
      charArray0[7] = 'i';
      charArray0[8] = 'G';
      int int0 = StringUtils.indexOfAny((CharSequence) "Ua):3]I<ozRQ`OI![", charArray0);
      assertEquals(9, charArray0.length);
      assertEquals(7, int0);
      assertArrayEquals(new char[] {'l', 'l', 'O', '8', '<', 'Z', '=', 'i', 'G'}, charArray0);
      
      String string0 = StringUtils.trim("...");
      assertNotNull(string0);
      assertEquals("...", string0);
      
      String[] stringArray1 = StringUtils.split(", Length: ", "java.lang.Object@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.Object@50d3e7ejava.lang.Object@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.Object@50d3e7e");
      assertNotNull(stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(2, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
  }

  @Test(timeout = 4000)
  public void test479()  throws Throwable  {
      String string0 = StringUtils.LF;
      assertNotNull(string0);
      assertEquals("\n", string0);
      
      boolean boolean0 = StringUtils.isAlphanumeric("\n");
      assertFalse(boolean0);
      
      int int0 = StringUtils.countMatches((CharSequence) "\r", (CharSequence) "\r");
      assertEquals(1, int0);
      
      boolean boolean1 = StringUtils.contains((CharSequence) "\r", 1777);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test480()  throws Throwable  {
      String string0 = StringUtils.wrapIfMissing("/h81Uu", '7');
      assertNotNull(string0);
      assertEquals("7/h81Uu7", string0);
      
      int[] intArray0 = new int[6];
      intArray0[0] = (int) '7';
      intArray0[1] = (int) '7';
      intArray0[2] = (int) '7';
      intArray0[3] = (int) '7';
      intArray0[4] = (int) '7';
      intArray0[5] = (int) '7';
      String string1 = StringUtils.wrapIfMissing("java.lang.Object@52b769b5java.lang.Object@1d3febfajava.lang.Object@4c16c3aejava.lang.Object@4a32f5f1java.lang.Object@23a1c7c3java.lang.Object@52b769b5java.lang.Object@1d3febfajava.lang.Object@4c16c3aejava.lang.Object@4a32f5f1java.lang.Object@23a1c7c3", 'c');
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.join(intArray0, 'N');
      assertNotNull(string2);
      assertEquals(6, intArray0.length);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("55N55N55N55N55N55", string2);
      assertArrayEquals(new int[] {55, 55, 55, 55, 55, 55}, intArray0);
      
      int int0 = StringUtils.indexOf((CharSequence) "7/h81Uu\u0007", 55);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test481()  throws Throwable  {
      String string0 = StringUtils.abbreviateMiddle("E2*1.s*OqQHFD&gQd9O", "E2*1.s*OqQHFD&gQd9O", (-526));
      assertNotNull(string0);
      assertEquals("E2*1.s*OqQHFD&gQd9O", string0);
      
      String[] stringArray0 = StringUtils.split("E2*1.s*OqQHFD&gQd9O", 'x');
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      String string1 = StringUtils.reverseDelimited("The type must not be null", '$');
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("The type must not be null", string1);
      
      int int0 = StringUtils.countMatches((CharSequence) "The type must not be null", (CharSequence) "E2*1.s*OqQHFD&gQd9O");
      assertEquals(0, int0);
      
      String string2 = StringUtils.deleteWhitespace("MBDEMP");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("MBDEMP", string2);
      
      long[] longArray0 = new long[3];
      longArray0[0] = (long) '$';
      longArray0[1] = (long) (-526);
      longArray0[2] = (long) 0;
      String string3 = StringUtils.join(longArray0, '$');
      assertNotNull(string3);
      assertEquals(3, longArray0.length);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals("36$-526$0", string3);
      assertArrayEquals(new long[] {36L, (-526L), 0L}, longArray0);
      
      int[] intArray0 = new int[4];
      intArray0[0] = (int) '$';
      intArray0[1] = (int) 'x';
      intArray0[2] = (int) 'x';
      int int1 = StringUtils.getLevenshteinDistance((CharSequence) "36$-526$0", (CharSequence) "MBDEMP");
      assertFalse(int1 == int0);
      assertEquals(9, int1);
      
      String string4 = StringUtils.replacePattern("Zu*4-n!o`!mH6S_vClP>2# gfkKWB@vC", "Z", "ckC3OcvjSGU;!U");
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertEquals("ckC3OcvjSGU;!Uu*4-n!o`!mH6S_vClP>2# gfkKWB@vC", string4);
      
      String[] stringArray1 = StringUtils.splitPreserveAllTokens("java.lang.Object@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.Object@50d3e7ejava.lang.Object@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.Object@50d3e7e", '$');
      assertNotNull(stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(1, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      String[] stringArray2 = new String[2];
      assertFalse(stringArray2.equals((Object)stringArray1));
      assertFalse(stringArray2.equals((Object)stringArray0));
      
      stringArray2[0] = "Zu*4-n!o`!mH6S_vClP>2# gfkKWB@vC";
      stringArray2[1] = " ";
      String string5 = StringUtils.firstNonBlank(stringArray2);
      assertNotNull(string5);
      assertNotSame(stringArray2, stringArray1);
      assertNotSame(stringArray2, stringArray0);
      assertEquals(2, stringArray2.length);
      assertFalse(stringArray2.equals((Object)stringArray1));
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertEquals("Zu*4-n!o`!mH6S_vClP>2# gfkKWB@vC", string5);
      
      int int2 = StringUtils.compare("{}", "{}");
      assertTrue(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(0, int2);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) 36;
      floatArray0[1] = (float) 0;
      floatArray0[2] = (float) 0;
      floatArray0[3] = (float) 120;
      floatArray0[4] = (float) 36;
      String string6 = StringUtils.join(floatArray0, 'x', 99, 5);
      assertNotNull(string6);
      assertEquals(5, floatArray0.length);
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string1));
      assertEquals("", string6);
      assertArrayEquals(new float[] {36.0F, 0.0F, 0.0F, 120.0F, 36.0F}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test482()  throws Throwable  {
      String string0 = StringUtils.upperCase("", (Locale) null);
      assertNotNull(string0);
      assertEquals("", string0);
      
      boolean boolean0 = StringUtils.isNotEmpty("");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isAsciiPrintable("");
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String string1 = StringUtils.upperCase("", (Locale) null);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) null;
      objectArray0[2] = (Object) "";
      objectArray0[3] = (Object) "";
      objectArray0[4] = (Object) "";
      objectArray0[5] = (Object) "";
      String string2 = StringUtils.difference("ko ?8?sYQU", "");
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertEquals("", string2);
      
      String string3 = StringUtils.trimToNull("5HNV");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals("5HNV", string3);
      
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[0] = (CharSequence) "ko ?8?sYQU";
      boolean boolean2 = StringUtils.isAlpha("5HNV");
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "5HNV", (CharSequence) "");
      assertEquals(5, int0);
      
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short)1154;
      shortArray0[1] = (short)18;
      shortArray0[2] = (short)60;
      shortArray0[3] = (short)60;
      shortArray0[4] = (short) (-924);
      // Undeclared exception!
      try { 
        StringUtils.join(shortArray0, 'j', 49, (int) (short)53);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 49
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test483()  throws Throwable  {
      String string0 = StringUtils.repeat("c^P#cHM", 6);
      assertNotNull(string0);
      assertEquals("c^P#cHMc^P#cHMc^P#cHMc^P#cHMc^P#cHMc^P#cHM", string0);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "c^P#cHMc^P#cHMc^P#cHMc^P#cHMc^P#cHMc^P#cHM", "c^P#cHMc^P#cHMc^P#cHMc^P#cHMc^P#cHMc^P#cHM");
      assertEquals(0, int0);
      
      String string1 = StringUtils.rightPad("c^P#cHM", 0, "w[ S*{(\"xv");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("c^P#cHM", string1);
      
      char char0 = ':';
      int[] intArray0 = new int[1];
      intArray0[0] = (int) ':';
      String string2 = StringUtils.join(intArray0, ':', 6, (-737));
      assertNotNull(string2);
      assertEquals(1, intArray0.length);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("", string2);
      assertArrayEquals(new int[] {58}, intArray0);
      
      Locale locale0 = Locale.ENGLISH;
      assertNotNull(locale0);
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.toString());
      
      Locale.setDefault(locale0);
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.toString());
      
      String string3 = StringUtils.abbreviateMiddle((String) null, "Ca2x.KsG4/j", 4);
      assertNull(string3);
      
      // Undeclared exception!
      try { 
        StringUtils.getFuzzyDistance((CharSequence) null, "Ca2x.KsG4/j", locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test484()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = 'F';
      charArray0[1] = 'k';
      String string0 = StringUtils.join(charArray0, 'k');
      assertNotNull(string0);
      assertEquals(2, charArray0.length);
      assertEquals("Fkk", string0);
      assertArrayEquals(new char[] {'F', 'k'}, charArray0);
      
      String string1 = "EQ?VcT6:)}N";
      String string2 = StringUtils.substringAfterLast("EQ?VcT6:)}N", "Fkk");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("", string2);
      
      CharSequence[] charSequenceArray0 = new CharSequence[9];
      charSequenceArray0[0] = (CharSequence) "EQ?VcT6:)}N";
      charSequenceArray0[1] = (CharSequence) "EQ?VcT6:)}N";
      int int0 = (-2965);
      // Undeclared exception!
      try { 
        StringUtils.truncate("EQ?VcT6:)}N", (-2965), 104);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // offset cannot be negative
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test485()  throws Throwable  {
      String string0 = StringUtils.remove("W~p/]:FDw`qEP(g{Xm", "W~p/]:FDw`qEP(g{Xm");
      assertNotNull(string0);
      assertEquals("", string0);
      
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "");
      assertNotNull(charBuffer0);
      assertEquals(0, charBuffer0.position());
      assertTrue(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.remaining());
      assertFalse(charBuffer0.hasArray());
      assertEquals("", charBuffer0.toString());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.limit());
      assertEquals(0, charBuffer0.capacity());
      assertEquals(0, charBuffer0.length());
      assertFalse(charBuffer0.hasRemaining());
      
      CharBuffer charBuffer1 = charBuffer0.slice();
      assertNotNull(charBuffer1);
      assertNotSame(charBuffer0, charBuffer1);
      assertNotSame(charBuffer1, charBuffer0);
      assertEquals(0, charBuffer0.position());
      assertTrue(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.remaining());
      assertFalse(charBuffer0.hasArray());
      assertEquals("", charBuffer0.toString());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.limit());
      assertEquals(0, charBuffer0.capacity());
      assertEquals(0, charBuffer0.length());
      assertFalse(charBuffer0.hasRemaining());
      assertEquals(0, charBuffer1.position());
      assertTrue(charBuffer1.isReadOnly());
      assertFalse(charBuffer1.hasRemaining());
      assertEquals(0, charBuffer1.limit());
      assertEquals(0, charBuffer1.capacity());
      assertFalse(charBuffer1.isDirect());
      assertFalse(charBuffer1.hasArray());
      assertEquals(0, charBuffer1.length());
      assertEquals("", charBuffer1.toString());
      assertEquals(0, charBuffer1.remaining());
      assertTrue(charBuffer1.equals((Object)charBuffer0));
      
      CharSequence[] charSequenceArray0 = new CharSequence[7];
      charSequenceArray0[0] = (CharSequence) charBuffer1;
      String string1 = StringUtils.truncate("W~p/]:FDw`qEP(g{Xm", 115, 115);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      
      String string2 = StringUtils.substringBetween("", "Minimum abbreviation width is %d");
      assertNull(string2);
  }

  @Test(timeout = 4000)
  public void test486()  throws Throwable  {
      String string0 = StringUtils.chomp((String) null, "");
      assertNull(string0);
      
      String string1 = StringUtils.difference("c22", "");
      assertNotNull(string1);
      assertEquals("", string1);
      
      String string2 = StringUtils.trimToNull("Arguments cannot both be null");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertEquals("Arguments cannot both be null", string2);
      
      String string3 = StringUtils.removeEndIgnoreCase("YqFGu2k", "");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals("YqFGu2k", string3);
      
      int int0 = (-2587);
      // Undeclared exception!
      try { 
        StringUtils.truncate("C6]]^uSe;", (-2587), 256);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // offset cannot be negative
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test487()  throws Throwable  {
      String string0 = StringUtils.substringBetween("O*}V{J=HV)l)@p<MK@2", "java.lang.Object@52b769b5java.lang.Object@1d3febfajava.lang.Object@4c16c3aejava.lang.Object@4a32f5f1java.lang.Object@23a1c7c3java.lang.Object@52b769b5java.lang.Object@1d3febfajava.lang.Object@4c16c3aejava.lang.Object@4a32f5f1java.lang.Object@23a1c7c3", ",fw28M;Y22_,+l~*");
      assertNull(string0);
      
      String string1 = StringUtils.removeIgnoreCase("19[hc&/", "ClP>2# gfkKWB@vC");
      assertNotNull(string1);
      assertEquals("19[hc&/", string1);
      
      String string2 = StringUtils.unwrap("u=]@|On8X7H27[2Or", "wDPtb=E*0D +");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertEquals("u=]@|On8X7H27[2Or", string2);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "19[hc&/", (CharSequence) "pV&d&F@?O[k", 89);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test488()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      char char0 = 'X';
      // Undeclared exception!
      try { 
        StringUtils.join(byteArray0, 'X', (-474), 4075);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -474
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test489()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byte byte0 = (byte)104;
      byteArray0[0] = (byte)104;
      byteArray0[1] = (byte)0;
      byte byte1 = (byte)0;
      byteArray0[2] = (byte)0;
      byte byte2 = (byte) (-106);
      byteArray0[3] = (byte) (-106);
      byteArray0[4] = (byte)1;
      byte byte3 = (byte) (-43);
      byteArray0[5] = (byte) (-43);
      byteArray0[6] = (byte)0;
      byte byte4 = (byte)54;
      byteArray0[7] = (byte)54;
      char char0 = '#';
      // Undeclared exception!
      try { 
        StringUtils.join(byteArray0, '#', (int) (byte) (-106), (int) (byte)0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -106
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test490()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-73);
      byteArray0[1] = (byte)106;
      byteArray0[2] = (byte)17;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)5;
      String string0 = StringUtils.join(byteArray0, '2');
      assertNotNull(string0);
      assertEquals(5, byteArray0.length);
      assertEquals("-7321062172025", string0);
      assertArrayEquals(new byte[] {(byte) (-73), (byte)106, (byte)17, (byte)0, (byte)5}, byteArray0);
      
      String[] stringArray0 = StringUtils.split("-7321062172025");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      String string1 = StringUtils.uncapitalize("-7321062172025");
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("-7321062172025", string1);
      
      boolean boolean0 = StringUtils.endsWith("-7321062172025", "-7321062172025");
      assertTrue(boolean0);
      
      boolean boolean1 = StringUtils.equalsIgnoreCase("-7321062172025", "-7321062172025");
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test491()  throws Throwable  {
      String string0 = StringUtils.remove("$4'Tcj.*5", 'o');
      assertNotNull(string0);
      assertEquals("$4'Tcj.*5", string0);
      
      String string1 = StringUtils.removeFirst("$4'Tcj.*5", "$4'Tcj.*5");
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("$4'Tcj.*5", string1);
      
      String string2 = StringUtils.trim("$4'Tcj.*5");
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertEquals("$4'Tcj.*5", string2);
      
      ArrayDeque<Integer> arrayDeque0 = new ArrayDeque<Integer>();
      assertNotNull(arrayDeque0);
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      
      Iterator<Integer> iterator0 = arrayDeque0.descendingIterator();
      assertNotNull(iterator0);
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      
      String string3 = StringUtils.join(iterator0, "_'");
      assertNotNull(string3);
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("", string3);
      
      String string4 = StringUtils.substringAfter("$4'Tcj.*5", "$4'Tcj.*5");
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string3));
      assertEquals("", string4);
      
      Integer integer0 = new Integer(24);
      assertNotNull(integer0);
      assertEquals(24, (int)integer0);
      
      boolean boolean0 = arrayDeque0.add(integer0);
      assertEquals(1, arrayDeque0.size());
      assertFalse(arrayDeque0.isEmpty());
      assertTrue(boolean0);
      assertTrue(arrayDeque0.contains(24));
      
      String string5 = StringUtils.join(iterator0, '0');
      assertNotNull(string5);
      assertEquals(1, arrayDeque0.size());
      assertFalse(arrayDeque0.isEmpty());
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertTrue(string5.equals((Object)string4));
      assertEquals("", string5);
      assertTrue(arrayDeque0.contains(24));
  }

  @Test(timeout = 4000)
  public void test492()  throws Throwable  {
      String string0 = StringUtils.repeat(" s ", 2306);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isAllLowerCase(" s ");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test493()  throws Throwable  {
      String string0 = StringUtils.replacePattern("Invalid locale format: ", " ", "RjWU}p|M=YT9");
      assertNotNull(string0);
      assertEquals("InvalidRjWU}p|M=YT9localeRjWU}p|M=YT9format:RjWU}p|M=YT9", string0);
      
      String[] stringArray0 = new String[0];
      String string1 = StringUtils.getCommonPrefix(stringArray0);
      assertNotNull(string1);
      assertEquals(0, stringArray0.length);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      
      String string2 = StringUtils.stripStart("\n", "z jRn3");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("\n", string2);
      
      String string3 = StringUtils.repeat("org.apache.commons.lang3.ObjectUtils$Null", 22);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals("org.apache.commons.lang3.ObjectUtils$Nullorg.apache.commons.lang3.ObjectUtils$Nullorg.apache.commons.lang3.ObjectUtils$Nullorg.apache.commons.lang3.ObjectUtils$Nullorg.apache.commons.lang3.ObjectUtils$Nullorg.apache.commons.lang3.ObjectUtils$Nullorg.apache.commons.lang3.ObjectUtils$Nullorg.apache.commons.lang3.ObjectUtils$Nullorg.apache.commons.lang3.ObjectUtils$Nullorg.apache.commons.lang3.ObjectUtils$Nullorg.apache.commons.lang3.ObjectUtils$Nullorg.apache.commons.lang3.ObjectUtils$Nullorg.apache.commons.lang3.ObjectUtils$Nullorg.apache.commons.lang3.ObjectUtils$Nullorg.apache.commons.lang3.ObjectUtils$Nullorg.apache.commons.lang3.ObjectUtils$Nullorg.apache.commons.lang3.ObjectUtils$Nullorg.apache.commons.lang3.ObjectUtils$Nullorg.apache.commons.lang3.ObjectUtils$Nullorg.apache.commons.lang3.ObjectUtils$Nullorg.apache.commons.lang3.ObjectUtils$Nullorg.apache.commons.lang3.ObjectUtils$Null", string3);
      
      boolean boolean0 = StringUtils.isAllLowerCase("\n");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test494()  throws Throwable  {
      String string0 = StringUtils.abbreviateMiddle("E2*1.s*OqQHFD&gQd9O", "E2*1.s*OqQHFD&gQd9O", (-526));
      assertNotNull(string0);
      assertEquals("E2*1.s*OqQHFD&gQd9O", string0);
      
      String string1 = StringUtils.normalizeSpace("");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      
      String string2 = StringUtils.difference("(VgStX;j-/L&", "");
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("", string2);
  }

  @Test(timeout = 4000)
  public void test495()  throws Throwable  {
      String string0 = StringUtils.replaceOnceIgnoreCase("", "", "");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.rightPad("", 10, '{');
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("{{{{{{{{{{", string1);
      
      boolean boolean0 = StringUtils.containsAnyIgnoreCase("{{{{{{{{{{", (CharSequence[]) null);
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isWhitespace("");
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String string2 = StringUtils.trimToNull("{{{{{{{{{{");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertEquals("{{{{{{{{{{", string2);
      
      int int0 = StringUtils.lastIndexOfAny("{{{{{{{{{{", (CharSequence[]) null);
      assertEquals((-1), int0);
      
      String string3 = StringUtils.join((short[]) null, '2', (-1), (-1));
      assertNull(string3);
      
      String string4 = StringUtils.unwrap((String) null, "");
      assertNull(string4);
  }

  @Test(timeout = 4000)
  public void test496()  throws Throwable  {
      String string0 = StringUtils.wrap("W~p/]:FDw`qEP(g{Xm", 'v');
      assertNotNull(string0);
      assertEquals("vW~p/]:FDw`qEP(g{Xmv", string0);
      
      String string1 = StringUtils.removeStart("vW~p/]:FDw`qEP(g{Xmv", "aD");
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("vW~p/]:FDw`qEP(g{Xmv", string1);
      
      String string2 = StringUtils.unwrap("vW~p/]:FDw`qEP(g{Xmv", 'v');
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("W~p/]:FDw`qEP(g{Xm", string2);
      
      int int0 = StringUtils.indexOf((CharSequence) "W~p/]:FDw`qEP(g{Xm", (-1179));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test497()  throws Throwable  {
      boolean boolean0 = StringUtils.containsOnly((CharSequence) null, "k]uJp{mQ8S!");
      assertFalse(boolean0);
      
      String string0 = StringUtils.center("k]uJp{mQ8S!", 0, 'A');
      assertNotNull(string0);
      assertEquals("k]uJp{mQ8S!", string0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparator("The character ", ".M,KjXgwysMU,", 508);
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      Integer[] integerArray0 = new Integer[2];
      Integer integer0 = new Integer(1385);
      assertNotNull(integer0);
      assertEquals(1385, (int)integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(0);
      assertNotNull(integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertEquals(0, (int)integer1);
      
      integerArray0[1] = integer1;
      int int0 = StringUtils.compareIgnoreCase("maxWith cannot be negative", "...", false);
      assertEquals(63, int0);
      
      Locale locale0 = Locale.CANADA;
      assertNotNull(locale0);
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      assertEquals("CA", locale0.getCountry());
      assertEquals("en_CA", locale0.toString());
      
      String string1 = locale0.getDisplayCountry();
      assertNotNull(string1);
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      assertEquals("CA", locale0.getCountry());
      assertEquals("en_CA", locale0.toString());
      assertFalse(string1.equals((Object)string0));
      assertEquals("Canada", string1);
      
      String[] stringArray1 = Locale.getISOCountries();
      assertNotNull(stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(250, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      String string2 = locale0.getDisplayVariant();
      assertNotNull(string2);
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      assertEquals("CA", locale0.getCountry());
      assertEquals("en_CA", locale0.toString());
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("", string2);
      
      Locale locale1 = Locale.GERMANY;
      assertNotNull(locale1);
      assertNotSame(locale1, locale0);
      assertEquals("", locale1.getVariant());
      assertEquals("de", locale1.getLanguage());
      assertEquals("deu", locale1.getISO3Language());
      assertEquals("de_DE", locale1.toString());
      assertEquals("DEU", locale1.getISO3Country());
      assertEquals("DE", locale1.getCountry());
      assertFalse(locale1.equals((Object)locale0));
      
      String string3 = StringUtils.trim("java.lang.Object@52b769b5java.lang.Object@1d3febfajava.lang.Object@4c16c3aejava.lang.Object@4a32f5f1java.lang.Object@23a1c7c3java.lang.Object@52b769b5java.lang.Object@1d3febfajava.lang.Object@4c16c3aejava.lang.Object@4a32f5f1java.lang.Object@23a1c7c3");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      
      String string4 = StringUtils.mid("Aborting to protect against StackOverflowError - output of one loop is the input of another", (int) integerArray0[0], 3093);
      assertNotNull(string4);
      assertEquals(2, integerArray0.length);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertEquals("", string4);
      
      String string5 = StringUtils.unwrap("Aborting to protect against StackOverflowError - output of one loop is the input of another", 'A');
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertEquals("Aborting to protect against StackOverflowError - output of one loop is the input of another", string5);
      
      boolean boolean1 = StringUtils.startsWith("k]uJp{mQ8S!", "Aborting to protect against StackOverflowError - output of one loop is the input of another");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test498()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[1] = "";
      String[] stringArray1 = StringUtils.stripAll(stringArray0);
      assertNotNull(stringArray1);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(2, stringArray0.length);
      assertEquals(2, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      boolean boolean0 = StringUtils.isAlphanumeric(stringArray0[0]);
      assertNotSame(stringArray0, stringArray1);
      assertEquals(2, stringArray0.length);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertFalse(boolean0);
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'W';
      charArray0[1] = '%';
      charArray0[2] = 'G';
      float[] floatArray0 = new float[7];
      floatArray0[0] = 0.0F;
      floatArray0[1] = 0.0F;
      floatArray0[2] = (float) 97;
      floatArray0[4] = 0.0F;
      floatArray0[5] = (float) '%';
      floatArray0[6] = 0.0F;
      String string0 = StringUtils.join(floatArray0, '|', 10, (-77));
      assertNotNull(string0);
      assertEquals(7, floatArray0.length);
      assertEquals("", string0);
      assertArrayEquals(new float[] {0.0F, 0.0F, 97.0F, 0.0F, 0.0F, 37.0F, 0.0F}, floatArray0, 0.01F);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "", (CharSequence) "");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test499()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = false;
      String string0 = StringUtils.difference("t", "t");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.LF;
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("\n", string1);
      
      boolean boolean0 = StringUtils.isAlphanumeric("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test500()  throws Throwable  {
      boolean boolean0 = StringUtils.isEmpty("");
      assertTrue(boolean0);
      
      String string0 = StringUtils.join((List<?>) null, 's', (-2706), (-2706));
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test501()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      assertNotNull(stringWriter0);
      assertEquals("", stringWriter0.toString());
      
      int int0 = StringUtils.compareIgnoreCase((String) null, (String) null);
      assertEquals(0, int0);
      
      String string0 = StringUtils.trimToEmpty("m{+0AUl/\"FKSCEP(U)");
      assertNotNull(string0);
      assertEquals("m{+0AUl/\"FKSCEP(U)", string0);
      
      boolean boolean0 = StringUtils.contains((CharSequence) null, (-541));
      assertFalse(boolean0);
      
      String[] stringArray0 = new String[9];
      stringArray0[0] = "m{+0AUl/\"FKSCEP(U)";
      stringArray0[1] = "m{+0AUl/\"FKSCEP(U)";
      stringArray0[2] = null;
      stringArray0[3] = "ng3.StringUtils";
      stringArray0[4] = "m{+0AUl/\"FKSCEP(U)";
      stringArray0[5] = "5|5pGW#urA~r?~3";
      stringArray0[6] = "m{+0AUl/\"FKSCEP(U)";
      stringArray0[7] = null;
      stringArray0[8] = "m{+0AUl/\"FKSCEP(U)";
      String string1 = StringUtils.replaceEachRepeatedly((String) null, stringArray0, stringArray0);
      assertNull(string1);
      assertEquals(9, stringArray0.length);
      
      String string2 = StringUtils.join((List<?>) null, '>', 5, 41);
      assertNull(string2);
  }

  @Test(timeout = 4000)
  public void test502()  throws Throwable  {
      String string0 = StringUtils.trim("%DhCH;Zr=g8l6-");
      assertNotNull(string0);
      assertEquals("%DhCH;Zr=g8l6-", string0);
      
      String string1 = StringUtils.unwrap("%DhCH;Zr=g8l6-", 'j');
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("%DhCH;Zr=g8l6-", string1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      int int0 = StringUtils.indexOfAny((CharSequence) "%DhCH;Zr=g8l6-", charSequenceArray0);
      assertEquals(0, charSequenceArray0.length);
      assertEquals((-1), int0);
      
      String string2 = StringUtils.joinWith("%DhCH;Zr=g8l6-", charSequenceArray0);
      assertNotNull(string2);
      assertEquals(0, charSequenceArray0.length);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("", string2);
      
      String[] stringArray0 = StringUtils.split("%DhCH;Zr=g8l6-", "Strings must not be null");
      assertNotNull(stringArray0);
      assertEquals(4, stringArray0.length);
      
      boolean boolean0 = StringUtils.isMixedCase("%DhCH;Zr=g8l6-");
      assertTrue(boolean0);
      
      String string3 = StringUtils.leftPad("O|ZE$6%azQb6vY0", 160, (String) null);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals("                                                                                                                                                 O|ZE$6%azQb6vY0", string3);
      
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) "Strings must not be null";
      objectArray0[1] = (Object) "%DhCH;Zr=g8l6-";
      objectArray0[2] = (Object) null;
      objectArray0[3] = (Object) "Strings must not be null";
      objectArray0[4] = (Object) null;
      objectArray0[5] = (Object) null;
      String string4 = StringUtils.wrap((String) null, "anLE]3d\"P.0D*}fY");
      assertNull(string4);
      
      String string5 = StringUtils.center(" in an array of ", 12);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertEquals(" in an array of ", string5);
      
      boolean boolean1 = StringUtils.isAlphaSpace(" in an array of ");
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String string6 = StringUtils.stripEnd("Strings must not be null", "Strings must not be null");
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string0));
      assertTrue(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string5));
      assertEquals("", string6);
  }

  @Test(timeout = 4000)
  public void test503()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "<)v(vKh";
      stringArray0[1] = "";
      String string0 = StringUtils.LF;
      assertNotNull(string0);
      assertEquals("\n", string0);
      
      String string1 = StringUtils.replaceIgnoreCase("Threshold must not be negative", "Locale must not be null", "", (-3695));
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("Threshold must not be negative", string1);
      
      String string2 = StringUtils.center("", (-73));
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("", string2);
      
      String string3 = StringUtils.replaceEachRepeatedly("f0uCY7&r", stringArray0, stringArray0);
      assertNotNull(string3);
      assertEquals(2, stringArray0.length);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals("f0uCY7&r", string3);
      
      String string4 = StringUtils.stripEnd("{}", "");
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertEquals("{}", string4);
      
      int int0 = StringUtils.compareIgnoreCase("Locale must not be null", "org.apache.commons.lang3.StringUtils");
      assertEquals((-3), int0);
      
      String string5 = StringUtils.defaultIfEmpty("/)q_F[PuSDH6Q*O", "");
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertEquals("/)q_F[PuSDH6Q*O", string5);
      
      String string6 = StringUtils.substringAfter("Locale must not be null", "Threshold must not be negative");
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string0));
      assertEquals("", string6);
      
      boolean boolean0 = StringUtils.isNotBlank("");
      assertFalse(boolean0);
      
      String string7 = StringUtils.substringBeforeLast("{}", "/)q_F[PuSDH6Q*O");
      assertNotNull(string7);
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string3));
      assertTrue(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string0));
      assertEquals("{}", string7);
      
      String string8 = StringUtils.getCommonPrefix(stringArray0);
      assertNotNull(string8);
      assertEquals(2, stringArray0.length);
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string4));
      assertEquals("", string8);
      
      String string9 = StringUtils.stripStart("/)q_F[PuSDH6Q*O", "clone");
      assertNotNull(string9);
      assertFalse(string9.equals((Object)string7));
      assertFalse(string9.equals((Object)string8));
      assertFalse(string9.equals((Object)string2));
      assertFalse(string9.equals((Object)string6));
      assertTrue(string9.equals((Object)string5));
      assertFalse(string9.equals((Object)string0));
      assertFalse(string9.equals((Object)string3));
      assertFalse(string9.equals((Object)string1));
      assertFalse(string9.equals((Object)string4));
      assertEquals("/)q_F[PuSDH6Q*O", string9);
  }

  @Test(timeout = 4000)
  public void test504()  throws Throwable  {
      String string0 = StringUtils.reverse("");
      assertNotNull(string0);
      assertEquals("", string0);
      
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short)2254;
      shortArray0[1] = (short)16;
      shortArray0[2] = (short)2254;
      String string1 = StringUtils.join(shortArray0, 'h', (int) (short)16, (-882));
      assertNotNull(string1);
      assertEquals(3, shortArray0.length);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertArrayEquals(new short[] {(short)2254, (short)16, (short)2254}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test505()  throws Throwable  {
      String string0 = StringUtils.center("", 12);
      assertNotNull(string0);
      assertEquals("           ", string0);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = ".M,KjXgwsMU,";
      String string1 = StringUtils.normalizeSpace((String) null);
      assertNull(string1);
      
      boolean boolean0 = StringUtils.isNoneBlank(stringArray0);
      assertEquals(2, stringArray0.length);
      assertFalse(boolean0);
      
      String string2 = StringUtils.capitalize(".M,KjXgwsMU,");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertEquals(".M,KjXgwsMU,", string2);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) ".M,KjXgwsMU,", (CharSequence) "           ");
      assertEquals((-1), int0);
      
      double double0 = StringUtils.getJaroWinklerDistance("           ", ".M,KjXgwsMU,");
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test506()  throws Throwable  {
      String string0 = StringUtils.leftPad("({yBTE<CM=<>!B&F=r", (-1725), 'H');
      assertNotNull(string0);
      assertEquals("({yBTE<CM=<>!B&F=r", string0);
      
      String string1 = StringUtils.abbreviateMiddle("u=]@|On8X7H27[2Or", "{}", (-1725));
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("u=]@|On8X7H27[2Or", string1);
      
      Class<Object> class0 = Object.class;
      ServiceLoader<Object> serviceLoader0 = ServiceLoader.loadInstalled(class0);
      assertNotNull(serviceLoader0);
      assertEquals("java.util.ServiceLoader[java.lang.Object]", serviceLoader0.toString());
      
      Class<CharBuffer> class1 = CharBuffer.class;
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ServiceLoader<CharBuffer> serviceLoader1 = ServiceLoader.load(class1, classLoader0);
      assertNotNull(serviceLoader1);
      assertEquals("java.util.ServiceLoader[java.nio.CharBuffer]", serviceLoader1.toString());
      
      String string2 = StringUtils.join((Iterable<?>) serviceLoader1, 'H');
      assertNotNull(string2);
      assertEquals("java.util.ServiceLoader[java.nio.CharBuffer]", serviceLoader1.toString());
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("", string2);
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "({yBTE<CM=<>!B&F=r";
      String string3 = StringUtils.joinWith("({yBTE<CM=<>!B&F=r", objectArray0);
      assertNotNull(string3);
      assertEquals(1, objectArray0.length);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string0));
      assertEquals("({yBTE<CM=<>!B&F=r", string3);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparator(".M,KjXgwysMU,", "u=]@|On8X7H27[2Or", 440);
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      Locale locale0 = Locale.ITALIAN;
      assertNotNull(locale0);
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("it", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      
      String string4 = locale0.getDisplayName(locale0);
      assertNotNull(string4);
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("it", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertEquals("italiano", string4);
      
      int[] intArray0 = new int[2];
      intArray0[0] = (int) 'Y';
      intArray0[1] = (-131);
      String string5 = StringUtils.join(intArray0, 'H');
      assertNotNull(string5);
      assertEquals(2, intArray0.length);
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertEquals("89H-131", string5);
      assertArrayEquals(new int[] {89, (-131)}, intArray0);
      
      boolean boolean0 = StringUtils.isAlpha(".M,KjXgwysMU,");
      assertFalse(boolean0);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "u=]@|On8X7H27[2Or", (CharSequence) "u=]@|On8X7H27[2Or");
      assertEquals(0, int0);
      
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short)16;
      shortArray0[1] = (short)18;
      shortArray0[2] = (short)1154;
      shortArray0[3] = (short)3182;
      shortArray0[4] = (short)53;
      shortArray0[5] = (short)3;
      shortArray0[6] = (short) (-924);
      shortArray0[7] = (short)60;
      String string6 = StringUtils.join(shortArray0, 'H', 127, (int) (short) (-924));
      assertNotNull(string6);
      assertEquals(8, shortArray0.length);
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string0));
      assertEquals("", string6);
      assertArrayEquals(new short[] {(short)16, (short)18, (short)1154, (short)3182, (short)53, (short)3, (short) (-924), (short)60}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test507()  throws Throwable  {
      String string0 = StringUtils.normalizeSpace("");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.removePattern("xY*^g", "");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("xY*^g", string1);
      
      boolean boolean0 = StringUtils.equalsIgnoreCase("Z~", "Z~");
      assertTrue(boolean0);
      
      boolean boolean1 = StringUtils.isAlpha("xY*^g");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test508()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[0] = " vs ";
      String string0 = StringUtils.replaceOnce(" vs ", " vs ", " vs ");
      assertNotNull(string0);
      assertEquals(" vs ", string0);
      
      String string1 = StringUtils.stripEnd("U2+DfS:Vb%!,", "U2+DfS:Vb%!,");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      
      int int0 = StringUtils.lastOrdinalIndexOf("", "U2+DfS:Vb%!,", 247);
      assertEquals((-1), int0);
      
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertFalse(arrayList0.contains(" vs "));
      
      String string2 = StringUtils.join((List<?>) arrayList0, " vs ", 8187, (-187));
      assertNotNull(string2);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertEquals("", string2);
      assertFalse(arrayList0.contains(" vs "));
  }

  @Test(timeout = 4000)
  public void test509()  throws Throwable  {
      String string0 = StringUtils.abbreviate(" vs ", 321);
      assertNotNull(string0);
      assertEquals(" vs ", string0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)55;
      int int0 = StringUtils.lastOrdinalIndexOf(" vs ", " vs ", (-1923));
      assertEquals((-1), int0);
      
      String string1 = StringUtils.truncate(" vs ", (int) (byte)55);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals(" vs ", string1);
      
      String string2 = StringUtils.uncapitalize(" vs ");
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertEquals(" vs ", string2);
      
      int int1 = StringUtils.indexOf((CharSequence) " vs ", (CharSequence) " vs ");
      assertFalse(int1 == int0);
      assertEquals(0, int1);
  }

  @Test(timeout = 4000)
  public void test510()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      Object object1 = new Object();
      assertNotNull(object1);
      assertFalse(object1.equals((Object)object0));
      
      objectArray0[1] = object1;
      String string0 = StringUtils.substringBefore("java.lang.Object@7ae88c63java.lang.Object@46e4abbejava.lang.Object@7ae88c63java.lang.Object@2b93da5fjava.lang.Object@58b1910ajava.lang.Object@7ae88c63java.lang.Object@46e4abbejava.lang.Object@7ae88c63java.lang.Object@2b93da5fjava.lang.Object@58b1910a", "*)Z[KAH?a");
      assertNotNull(string0);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "java.lang.Object@7ae88c63java.lang.Object@46e4abbejava.lang.Object@7ae88c63java.lang.Object@2b93da5fjava.lang.Object@58b1910ajava.lang.Object@7ae88c63java.lang.Object@46e4abbejava.lang.Object@7ae88c63java.lang.Object@2b93da5fjava.lang.Object@58b1910a", (CharSequence) "java.lang.Object@7ae88c63java.lang.Object@46e4abbejava.lang.Object@7ae88c63java.lang.Object@2b93da5fjava.lang.Object@58b1910ajava.lang.Object@7ae88c63java.lang.Object@46e4abbejava.lang.Object@7ae88c63java.lang.Object@2b93da5fjava.lang.Object@58b1910a", 630);
      assertEquals(0, int0);
      
      int int1 = StringUtils.ordinalIndexOf("java.lang.Object@7ae88c63java.lang.Object@46e4abbejava.lang.Object@7ae88c63java.lang.Object@2b93da5fjava.lang.Object@58b1910ajava.lang.Object@7ae88c63java.lang.Object@46e4abbejava.lang.Object@7ae88c63java.lang.Object@2b93da5fjava.lang.Object@58b1910a", "*)Z[KAH?a", 281);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      String[] stringArray0 = StringUtils.split("*)Z[KAH?a", "java.lang.Object@7ae88c63java.lang.Object@46e4abbejava.lang.Object@7ae88c63java.lang.Object@2b93da5fjava.lang.Object@58b1910ajava.lang.Object@7ae88c63java.lang.Object@46e4abbejava.lang.Object@7ae88c63java.lang.Object@2b93da5fjava.lang.Object@58b1910a");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test511()  throws Throwable  {
      int int0 = StringUtils.ordinalIndexOf((CharSequence) null, (CharSequence) null, (-1920));
      assertEquals((-1), int0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      charSequenceArray0[0] = null;
      String string0 = StringUtils.reverse("org.apache.commons.lang3.StringUtils");
      assertNotNull(string0);
      assertEquals("slitUgnirtS.3gnal.snommoc.ehcapa.gro", string0);
      
      charSequenceArray0[1] = (CharSequence) "slitUgnirtS.3gnal.snommoc.ehcapa.gro";
      charSequenceArray0[2] = null;
      charSequenceArray0[3] = null;
      charSequenceArray0[4] = null;
      boolean boolean0 = StringUtils.isAllEmpty(charSequenceArray0);
      assertEquals(5, charSequenceArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test512()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "US.^e:o_ufGpA";
      ArrayDeque<Integer> arrayDeque0 = new ArrayDeque<Integer>();
      assertNotNull(arrayDeque0);
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      
      String string0 = StringUtils.replaceOnceIgnoreCase("ng3.StringUtils", "US.^e:o_ufGpA", "e7e");
      assertNotNull(string0);
      assertEquals("ng3.StringUtils", string0);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "ng3.StringUtils", (CharSequence) "e7e", 27);
      assertEquals((-1), int0);
      
      String string1 = StringUtils.join((long[]) null, '0');
      assertNull(string1);
      
      int int1 = StringUtils.indexOf((CharSequence) "(d", 32767, 27);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test513()  throws Throwable  {
      String string0 = StringUtils.LF;
      assertNotNull(string0);
      assertEquals("\n", string0);
      
      boolean boolean0 = StringUtils.equalsIgnoreCase("\n", "\n");
      assertTrue(boolean0);
      
      String string1 = StringUtils.chop("\n");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      
      String string2 = StringUtils.leftPad("r2", (int) '[', '[');
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[r2", string2);
      
      String string3 = StringUtils.rightPad("Wd|}51/]/&`bsA", 1003, "Wd|}51/]/&`bsA");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      
      String string4 = StringUtils.join((double[]) null, '+', (int) '[', (int) '[');
      assertNull(string4);
      
      String string5 = StringUtils.removeFirst((String) null, "");
      assertNull(string5);
      
      String string6 = StringUtils.trim("@uU/N%ngLD");
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string3));
      assertEquals("@uU/N%ngLD", string6);
      
      ArrayDeque<Integer> arrayDeque0 = new ArrayDeque<Integer>();
      assertNotNull(arrayDeque0);
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      assertFalse(arrayDeque0.contains(1003));
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "\n", (CharSequence) "Wd|}51/]/&`bsA", (-721));
      assertEquals((-1), int0);
      
      String string7 = StringUtils.join((long[]) null, '[');
      assertNull(string7);
      
      String string8 = StringUtils.repeat('e', 1);
      assertNotNull(string8);
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string2));
      assertEquals("e", string8);
      
      String string9 = StringUtils.upperCase((String) null);
      assertNull(string9);
      
      String string10 = StringUtils.repeat('[', 58);
      assertNotNull(string10);
      assertFalse(string10.equals((Object)string6));
      assertFalse(string10.equals((Object)string0));
      assertFalse(string10.equals((Object)string3));
      assertFalse(string10.equals((Object)string2));
      assertFalse(string10.equals((Object)string1));
      assertFalse(string10.equals((Object)string8));
      assertEquals("[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[", string10);
  }

  @Test(timeout = 4000)
  public void test514()  throws Throwable  {
      String string0 = StringUtils.left("5|5pGW#urA~r?~3", (-494));
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.leftPad("", 4690);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      boolean boolean0 = StringUtils.isMixedCase("5|5pGW#urA~r?~3");
      assertTrue(boolean0);
      
      String string2 = StringUtils.trim("5|5pGW#urA~r?~3");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("5|5pGW#urA~r?~3", string2);
  }

  @Test(timeout = 4000)
  public void test515()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertNotNull(stringUtils0);
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
  }

  @Test(timeout = 4000)
  public void test516()  throws Throwable  {
      Object[] objectArray0 = new Object[5];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      Object object1 = new Object();
      assertNotNull(object1);
      assertFalse(object1.equals((Object)object0));
      
      objectArray0[1] = object1;
      objectArray0[2] = object0;
      Object object2 = new Object();
      assertNotNull(object2);
      assertFalse(object2.equals((Object)object0));
      assertFalse(object2.equals((Object)object1));
      
      objectArray0[3] = object0;
      Object object3 = new Object();
      assertNotNull(object3);
      assertFalse(object3.equals((Object)object1));
      assertFalse(object3.equals((Object)object2));
      assertFalse(object3.equals((Object)object0));
      
      objectArray0[4] = object3;
      String string0 = StringUtils.join(objectArray0, "");
      assertNotNull(string0);
      assertEquals(5, objectArray0.length);
      
      String string1 = StringUtils.wrapIfMissing("java.lang.Object@27219f1djava.lang.Object@26bf71b1java.lang.Object@27219f1djava.lang.Object@27219f1djava.lang.Object@34ce35a3", "java.lang.Object@27219f1djava.lang.Object@26bf71b1java.lang.Object@27219f1djava.lang.Object@27219f1djava.lang.Object@34ce35a3");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("java.lang.Object@27219f1djava.lang.Object@26bf71b1java.lang.Object@27219f1djava.lang.Object@27219f1djava.lang.Object@34ce35a3");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      String[] stringArray1 = StringUtils.splitByCharacterTypeCamelCase("");
      assertNotNull(stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(0, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      Vector<Locale.LanguageRange> vector0 = new Vector<Locale.LanguageRange>();
      assertNotNull(vector0);
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      
      HashSet<Locale> hashSet0 = new HashSet<Locale>();
      assertNotNull(hashSet0);
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      
      Locale locale0 = Locale.lookup(vector0, hashSet0);
      assertNull(locale0);
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      
      // Undeclared exception!
      try { 
        StringUtils.getFuzzyDistance("java.lang.Object@27219f1djava.lang.Object@26bf71b1java.lang.Object@27219f1djava.lang.Object@27219f1djava.lang.Object@34ce35a3", "java.lang.Object@27219f1djava.lang.Object@26bf71b1java.lang.Object@27219f1djava.lang.Object@27219f1djava.lang.Object@34ce35a3", (Locale) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Locale must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test517()  throws Throwable  {
      String string0 = StringUtils.swapCase("");
      assertNotNull(string0);
      assertEquals("", string0);
      
      boolean boolean0 = StringUtils.isNotEmpty("");
      assertFalse(boolean0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "";
      charSequenceArray0[2] = (CharSequence) "";
      charSequenceArray0[3] = (CharSequence) "";
      charSequenceArray0[4] = (CharSequence) "";
      boolean boolean1 = StringUtils.containsAny((CharSequence) "", charSequenceArray0);
      assertEquals(5, charSequenceArray0.length);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string1 = StringUtils.wrap("", 'Q');
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      
      String string2 = StringUtils.center("", 0, "");
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertEquals("", string2);
      
      String string3 = StringUtils.replacePattern("", "", "");
      assertNotNull(string3);
      assertTrue(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string2));
      assertEquals("", string3);
      
      String string4 = StringUtils.leftPad("", 440, 'Q');
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertEquals("QQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQ", string4);
      
      String string5 = StringUtils.abbreviateMiddle("", "kCb", 8192);
      assertNotNull(string5);
      assertTrue(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertTrue(string5.equals((Object)string0));
      assertTrue(string5.equals((Object)string2));
      assertTrue(string5.equals((Object)string1));
      assertEquals("", string5);
      
      Class<Object> class0 = Object.class;
      ServiceLoader<Object> serviceLoader0 = ServiceLoader.loadInstalled(class0);
      assertNotNull(serviceLoader0);
      assertEquals("java.util.ServiceLoader[java.lang.Object]", serviceLoader0.toString());
      
      Class<CharBuffer> class1 = CharBuffer.class;
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ServiceLoader<CharBuffer> serviceLoader1 = ServiceLoader.load(class1, classLoader0);
      assertNotNull(serviceLoader1);
      assertEquals("java.util.ServiceLoader[java.nio.CharBuffer]", serviceLoader1.toString());
      
      String string6 = StringUtils.join((Iterable<?>) serviceLoader0, 'Q');
      assertNotNull(string6);
      assertEquals("java.util.ServiceLoader[java.lang.Object]", serviceLoader0.toString());
      assertTrue(string6.equals((Object)string2));
      assertTrue(string6.equals((Object)string5));
      assertTrue(string6.equals((Object)string1));
      assertTrue(string6.equals((Object)string0));
      assertTrue(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string4));
      assertEquals("", string6);
      
      String string7 = StringUtils.joinWith("", charSequenceArray0);
      assertNotNull(string7);
      assertEquals(5, charSequenceArray0.length);
      assertTrue(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string4));
      assertTrue(string7.equals((Object)string3));
      assertTrue(string7.equals((Object)string2));
      assertTrue(string7.equals((Object)string0));
      assertTrue(string7.equals((Object)string6));
      assertTrue(string7.equals((Object)string5));
      assertEquals("", string7);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparator("", "", (-502));
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      
      Locale locale0 = Locale.ITALIAN;
      assertNotNull(locale0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("it", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.getLanguage());
      
      Locale locale1 = Locale.CHINA;
      assertNotNull(locale1);
      assertNotSame(locale1, locale0);
      assertEquals("zh_CN", locale1.toString());
      assertEquals("CHN", locale1.getISO3Country());
      assertEquals("", locale1.getVariant());
      assertEquals("zh", locale1.getLanguage());
      assertEquals("CN", locale1.getCountry());
      assertEquals("zho", locale1.getISO3Language());
      assertFalse(locale1.equals((Object)locale0));
      
      String string8 = locale0.getDisplayName(locale1);
      assertNotNull(string8);
      assertNotSame(locale0, locale1);
      assertNotSame(locale1, locale0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("it", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.getLanguage());
      assertEquals("zh_CN", locale1.toString());
      assertEquals("CHN", locale1.getISO3Country());
      assertEquals("", locale1.getVariant());
      assertEquals("zh", locale1.getLanguage());
      assertEquals("CN", locale1.getCountry());
      assertEquals("zho", locale1.getISO3Language());
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(locale1.equals((Object)locale0));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string1));
      assertEquals("\u610F\u5927\u5229\u6587", string8);
      
      int[] intArray0 = new int[0];
      String string9 = StringUtils.join(intArray0, 'Y');
      assertNotNull(string9);
      assertEquals(0, intArray0.length);
      assertTrue(string9.equals((Object)string1));
      assertFalse(string9.equals((Object)string8));
      assertFalse(string9.equals((Object)string4));
      assertTrue(string9.equals((Object)string5));
      assertTrue(string9.equals((Object)string2));
      assertTrue(string9.equals((Object)string0));
      assertTrue(string9.equals((Object)string3));
      assertTrue(string9.equals((Object)string7));
      assertEquals("", string9);
      assertArrayEquals(new int[] {}, intArray0);
      
      boolean boolean2 = StringUtils.isAlpha("");
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "", (CharSequence) "");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test518()  throws Throwable  {
      String string0 = StringUtils.chomp("Array element ");
      assertNotNull(string0);
      assertEquals("Array element ", string0);
  }

  @Test(timeout = 4000)
  public void test519()  throws Throwable  {
      String[] stringArray0 = StringUtils.split(" vs ", "org.apache.commons.lang3.LocaleUtils", (-494));
      assertNotNull(stringArray0);
      assertEquals(2, stringArray0.length);
      
      int int0 = StringUtils.compareIgnoreCase("org.apache.commons.lang3.LocaleUtils", "Z~Mc6a=", true);
      assertEquals((-11), int0);
      
      String string0 = StringUtils.getDigits("Z~Mc6a=");
      assertNotNull(string0);
      assertEquals("6", string0);
      
      String string1 = StringUtils.chomp("6");
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("6", string1);
  }

  @Test(timeout = 4000)
  public void test520()  throws Throwable  {
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      String string0 = StringUtils.getIfEmpty("Minimum abbreviation width is %d", supplier0);
      assertNotNull(string0);
      assertEquals("Minimum abbreviation width is %d", string0);
      
      String string1 = StringUtils.wrapIfMissing((String) null, "Minimum abbreviation width is %d");
      assertNull(string1);
      
      int[] intArray0 = new int[5];
      intArray0[0] = 0;
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      int int0 = StringUtils.lastIndexOfAny("Minimum abbreviation width is %d", charSequenceArray0);
      assertEquals(0, charSequenceArray0.length);
      assertEquals((-1), int0);
      
      String string2 = StringUtils.chomp("Array element ");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertEquals("Array element ", string2);
  }

  @Test(timeout = 4000)
  public void test521()  throws Throwable  {
      String string0 = StringUtils.swapCase("");
      assertNotNull(string0);
      assertEquals("", string0);
      
      boolean boolean0 = StringUtils.isNotEmpty("");
      assertFalse(boolean0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "";
      charSequenceArray0[2] = (CharSequence) "";
      charSequenceArray0[3] = (CharSequence) "";
      charSequenceArray0[4] = (CharSequence) "";
      boolean boolean1 = StringUtils.containsAny((CharSequence) "", charSequenceArray0);
      assertEquals(5, charSequenceArray0.length);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string1 = StringUtils.wrap("", 'Q');
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      
      String string2 = StringUtils.center("", 0, "");
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertEquals("", string2);
      
      String string3 = StringUtils.replacePattern("", "", "");
      assertNotNull(string3);
      assertTrue(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string2));
      assertEquals("", string3);
      
      String string4 = StringUtils.leftPad("", 440, 'Q');
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertEquals("QQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQ", string4);
      
      String string5 = StringUtils.abbreviateMiddle("", "kCb", 8192);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string4));
      assertTrue(string5.equals((Object)string3));
      assertTrue(string5.equals((Object)string2));
      assertTrue(string5.equals((Object)string0));
      assertTrue(string5.equals((Object)string1));
      assertEquals("", string5);
      
      Class<Object> class0 = Object.class;
      ServiceLoader<Object> serviceLoader0 = ServiceLoader.loadInstalled(class0);
      assertNotNull(serviceLoader0);
      assertEquals("java.util.ServiceLoader[java.lang.Object]", serviceLoader0.toString());
      
      Class<CharBuffer> class1 = CharBuffer.class;
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ServiceLoader<CharBuffer> serviceLoader1 = ServiceLoader.load(class1, classLoader0);
      assertNotNull(serviceLoader1);
      assertEquals("java.util.ServiceLoader[java.nio.CharBuffer]", serviceLoader1.toString());
      
      String string6 = StringUtils.join((Iterable<?>) serviceLoader0, 'Q');
      assertNotNull(string6);
      assertEquals("java.util.ServiceLoader[java.lang.Object]", serviceLoader0.toString());
      assertTrue(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string4));
      assertTrue(string6.equals((Object)string2));
      assertTrue(string6.equals((Object)string0));
      assertTrue(string6.equals((Object)string3));
      assertTrue(string6.equals((Object)string1));
      assertEquals("", string6);
      
      String string7 = StringUtils.joinWith("", charSequenceArray0);
      assertNotNull(string7);
      assertEquals(5, charSequenceArray0.length);
      assertTrue(string7.equals((Object)string3));
      assertTrue(string7.equals((Object)string0));
      assertTrue(string7.equals((Object)string6));
      assertTrue(string7.equals((Object)string1));
      assertTrue(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string4));
      assertTrue(string7.equals((Object)string2));
      assertEquals("", string7);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparator("", "", (-502));
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      
      Locale locale0 = Locale.ITALIAN;
      assertNotNull(locale0);
      assertEquals("", locale0.getCountry());
      assertEquals("it", locale0.toString());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("it", locale0.getLanguage());
      
      Locale locale1 = Locale.CHINA;
      assertNotNull(locale1);
      assertNotSame(locale1, locale0);
      assertEquals("zh", locale1.getLanguage());
      assertEquals("CN", locale1.getCountry());
      assertEquals("zh_CN", locale1.toString());
      assertEquals("zho", locale1.getISO3Language());
      assertEquals("", locale1.getVariant());
      assertEquals("CHN", locale1.getISO3Country());
      assertFalse(locale1.equals((Object)locale0));
      
      String string8 = locale0.getDisplayName(locale1);
      assertNotNull(string8);
      assertNotSame(locale0, locale1);
      assertNotSame(locale1, locale0);
      assertEquals("", locale0.getCountry());
      assertEquals("it", locale0.toString());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("it", locale0.getLanguage());
      assertEquals("zh", locale1.getLanguage());
      assertEquals("CN", locale1.getCountry());
      assertEquals("zh_CN", locale1.toString());
      assertEquals("zho", locale1.getISO3Language());
      assertEquals("", locale1.getVariant());
      assertEquals("CHN", locale1.getISO3Country());
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(locale1.equals((Object)locale0));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string3));
      assertEquals("\u610F\u5927\u5229\u6587", string8);
      
      String string9 = StringUtils.upperCase("krhVMwV=U+^4>", locale0);
      assertNotNull(string9);
      assertNotSame(locale0, locale1);
      assertEquals("", locale0.getCountry());
      assertEquals("it", locale0.toString());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("it", locale0.getLanguage());
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(string9.equals((Object)string1));
      assertFalse(string9.equals((Object)string8));
      assertFalse(string9.equals((Object)string5));
      assertFalse(string9.equals((Object)string4));
      assertFalse(string9.equals((Object)string3));
      assertFalse(string9.equals((Object)string0));
      assertFalse(string9.equals((Object)string6));
      assertFalse(string9.equals((Object)string2));
      assertFalse(string9.equals((Object)string7));
      assertEquals("KRHVMWV=U+^4>", string9);
      
      boolean boolean2 = StringUtils.isBlank("");
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2);
  }

  @Test(timeout = 4000)
  public void test522()  throws Throwable  {
      String string0 = StringUtils.replace("", "US.^e:o_ufGpA", "", 0);
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.replaceIgnoreCase("", "US.^e:o_ufGpA", "The String must not be empty", (-3695));
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      
      String string2 = StringUtils.center("", 1911);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      boolean boolean0 = StringUtils.contains((CharSequence) "US.^e:o_ufGpA", (CharSequence) "");
      assertTrue(boolean0);
      
      String string3 = StringUtils.repeat('k', 1911);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      
      String string4 = StringUtils.stripAccents("");
      assertNotNull(string4);
      assertTrue(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertEquals("", string4);
      
      String string5 = StringUtils.replaceOnceIgnoreCase("\"E9AGbc!o", "c-(jMZ>[ol)#O8C|", string3);
      assertNotNull(string5);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertEquals("\"E9AGbc!o", string5);
      
      String string6 = StringUtils.overlay("*LO:-O$>#+9O\"", "", 0, (-963));
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string3));
      assertEquals("*LO:-O$>#+9O\"", string6);
      
      String string7 = StringUtils.abbreviate("", (-3695));
      assertNotNull(string7);
      assertFalse(string7.equals((Object)string6));
      assertTrue(string7.equals((Object)string1));
      assertTrue(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string5));
      assertTrue(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string3));
      assertEquals("", string7);
      
      String string8 = StringUtils.substringAfterLast((String) null, "");
      assertNull(string8);
  }

  @Test(timeout = 4000)
  public void test523()  throws Throwable  {
      String string0 = StringUtils.stripAccents("wDPtb=E*0D +");
      assertNotNull(string0);
      assertEquals("wDPtb=E*0D +", string0);
      
      String string1 = StringUtils.replaceOnceIgnoreCase(";e|PvY[M,WJ=KeK,MR", "/h81Uu", " vs ");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals(";e|PvY[M,WJ=KeK,MR", string1);
      
      String string2 = StringUtils.overlay("Aborting to protect against StackOverflowError - output of one loop is the input of another", "wDPtb=E*0D +", 1886, 0);
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("wDPtb=E*0D +", string2);
      
      String string3 = StringUtils.substringAfterLast("java.lang.Object@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.Object@50d3e7ejava.lang.Object@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.Object@50d3e7e", "Index: ");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals("", string3);
      
      String string4 = StringUtils.defaultIfBlank("", "");
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertEquals("", string4);
  }

  @Test(timeout = 4000)
  public void test524()  throws Throwable  {
      String string0 = StringUtils.substringAfterLast("", 10);
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.substringAfterLast("", "");
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      
      String string2 = StringUtils.defaultIfBlank("5|5pGW#urA~r?~3", "5|5pGW#urA~r?~3");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("5|5pGW#urA~r?~3", string2);
  }

  @Test(timeout = 4000)
  public void test525()  throws Throwable  {
      boolean boolean0 = StringUtils.isEmpty("");
      assertTrue(boolean0);
      
      String[] stringArray0 = StringUtils.stripAll((String[]) null);
      assertNull(stringArray0);
      
      boolean boolean1 = StringUtils.containsAnyIgnoreCase("", (CharSequence[]) null);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string0 = StringUtils.chop("$e'Wz#<'UP]a:_");
      assertNotNull(string0);
      assertEquals("$e'Wz#<'UP]a:", string0);
      
      boolean boolean2 = StringUtils.isWhitespace("$e'Wz#<'UP]a:");
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      boolean boolean3 = StringUtils.isNumeric("$e'Wz#<'UP]a:");
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3);
      
      Integer integer0 = new Integer(103);
      assertNotNull(integer0);
      assertEquals(103, (int)integer0);
      
      int int0 = StringUtils.length("");
      assertEquals(0, int0);
      
      String string1 = StringUtils.join((double[]) null, 'a', 0, 103);
      assertNull(string1);
      
      boolean boolean4 = StringUtils.isNumericSpace((CharSequence) null);
      assertFalse(boolean4 == boolean0);
      assertTrue(boolean4 == boolean2);
      assertTrue(boolean4 == boolean1);
      assertTrue(boolean4 == boolean3);
      assertFalse(boolean4);
  }

  @Test(timeout = 4000)
  public void test526()  throws Throwable  {
      String string0 = StringUtils.center("Arguments cannot both be null", 110, "Arguments cannot both be null");
      assertNotNull(string0);
      assertEquals("Arguments cannot both be nullArguments cArguments cannot both be nullArguments cannot both be nullArguments ca", string0);
  }

  @Test(timeout = 4000)
  public void test527()  throws Throwable  {
      String string0 = StringUtils.stripToEmpty((String) null);
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test528()  throws Throwable  {
      String string0 = StringUtils.abbreviateMiddle("u=]@|On8X7H27[2Or", "{}", (-1725));
      assertNotNull(string0);
      assertEquals("u=]@|On8X7H27[2Or", string0);
      
      Class<Object> class0 = Object.class;
      ServiceLoader<Object> serviceLoader0 = ServiceLoader.loadInstalled(class0);
      assertNotNull(serviceLoader0);
      assertEquals("java.util.ServiceLoader[java.lang.Object]", serviceLoader0.toString());
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      String string1 = StringUtils.abbreviate("u=]@|On8X7H27[2Or", (String) null, (-1725));
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("u=]@|On8X7H27[2Or", string1);
      
      int int0 = StringUtils.indexOf((CharSequence) null, (-1725), 1);
      assertEquals((-1), int0);
      
      String string2 = StringUtils.substring("Supplied value must be a valid byte literal between -32768 and 32767: [", (-1));
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("[", string2);
  }

  @Test(timeout = 4000)
  public void test529()  throws Throwable  {
      String string0 = StringUtils.stripStart("Aborting to protect against StackOverflowError - output of one loop is the input of another", "w-)+8oGqf|r!U{");
      assertNotNull(string0);
      assertEquals("Aborting to protect against StackOverflowError - output of one loop is the input of another", string0);
      
      String string1 = StringUtils.abbreviate("EIA<uMB~$'8[]r=", " 2=mf#ih7)QP<3", 2096, 321);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("EIA<uMB~$'8[]r=", string1);
      
      int int0 = StringUtils.indexOfAny((CharSequence) " 2=mf#ih7)QP<3", (char[]) null);
      assertEquals((-1), int0);
      
      String[] stringArray0 = StringUtils.substringsBetween("cq", (String) null, " 2=mf#ih7)QP<3");
      assertNull(stringArray0);
      
      boolean boolean0 = StringUtils.equalsAnyIgnoreCase("Aborting to protect against StackOverflowError - output of one loop is the input of another", (CharSequence[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test530()  throws Throwable  {
      String string0 = StringUtils.substringAfterLast("W~p/]:FDw`qEP(g{Xm", (-1104));
      assertNotNull(string0);
      assertEquals("", string0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens((String) null, (String) null);
      assertNull(stringArray0);
      
      String string1 = StringUtils.unwrap("', has a length less than 2", "");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("', has a length less than 2", string1);
      
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      String string2 = StringUtils.getIfBlank("}mn)GjCTd1O}bu", supplier0);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("}mn)GjCTd1O}bu", string2);
      
      String string3 = StringUtils.remove("W~p/]:FDw`qEP(g{Xm", "org.apache.commons.lang3.StringUtils");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals("W~p/]:FDw`qEP(g{Xm", string3);
      
      boolean boolean0 = StringUtils.endsWithAny("W~p/]:FDw`qEP(g{Xm", (CharSequence[]) null);
      assertFalse(boolean0);
      
      String string4 = StringUtils.replaceEach((String) null, (String[]) null, (String[]) null);
      assertNull(string4);
      
      String string5 = StringUtils.abbreviateMiddle("[JES !E`+9v8&", "[JES !E`+9v8&", 4);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertEquals("[JES !E`+9v8&", string5);
      
      int[] intArray0 = new int[8];
      intArray0[0] = (-1104);
      intArray0[1] = 4;
      intArray0[2] = 111;
      intArray0[3] = (-461);
      intArray0[4] = (-1104);
      intArray0[5] = 0;
      intArray0[6] = 4;
      intArray0[7] = (-1104);
      String string6 = StringUtils.join(intArray0, 'C');
      assertNotNull(string6);
      assertEquals(8, intArray0.length);
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string3));
      assertEquals("-1104C4C111C-461C-1104C0C4C-1104", string6);
      assertArrayEquals(new int[] {(-1104), 4, 111, (-461), (-1104), 0, 4, (-1104)}, intArray0);
      
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      String string7 = StringUtils.join((List<?>) linkedList0, "3@I Oi'LmNcr'B;%N<", 111, 108);
      assertNotNull(string7);
      assertEquals(0, linkedList0.size());
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string6));
      assertEquals("", string7);
  }

  @Test(timeout = 4000)
  public void test531()  throws Throwable  {
      String string0 = StringUtils.abbreviateMiddle("E2*1.s*OqQHFD&gQd9O", "E2*1.s*OqQHFD&gQd9O", (-526));
      assertNotNull(string0);
      assertEquals("E2*1.s*OqQHFD&gQd9O", string0);
      
      String[] stringArray0 = StringUtils.split("E2*1.s*OqQHFD&gQd9O", 'x');
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      String string1 = StringUtils.reverseDelimited("The type must not be null", '$');
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("The type must not be null", string1);
      
      int int0 = StringUtils.countMatches((CharSequence) "The type must not be null", (CharSequence) "E2*1.s*OqQHFD&gQd9O");
      assertEquals(0, int0);
      
      String string2 = StringUtils.deleteWhitespace("MBDEMP");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("MBDEMP", string2);
      
      long[] longArray0 = new long[3];
      longArray0[0] = (long) '$';
      longArray0[1] = (long) (-526);
      longArray0[2] = (long) 0;
      String string3 = StringUtils.join(longArray0, '$');
      assertNotNull(string3);
      assertEquals(3, longArray0.length);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals("36$-526$0", string3);
      assertArrayEquals(new long[] {36L, (-526L), 0L}, longArray0);
      
      int[] intArray0 = new int[4];
      intArray0[0] = (int) '$';
      intArray0[1] = (int) 'x';
      String string4 = StringUtils.remove("", 'l');
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertEquals("", string4);
      
      String string5 = StringUtils.replaceOnceIgnoreCase("a#R.=nX;ON|X^", "ng3.StringUtils", "ng3.StringUtils");
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertEquals("a#R.=nX;ON|X^", string5);
      
      String string6 = StringUtils.center("MBDEMP", (-2026), '$');
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string0));
      assertTrue(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string1));
      assertEquals("MBDEMP", string6);
      
      String string7 = StringUtils.stripStart("", "MBDEMP");
      assertNotNull(string7);
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string3));
      assertTrue(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string1));
      assertEquals("", string7);
      
      String string8 = StringUtils.join(longArray0, 'x');
      assertNotNull(string8);
      assertEquals(3, longArray0.length);
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string6));
      assertEquals("36x-526x0", string8);
      assertArrayEquals(new long[] {36L, (-526L), 0L}, longArray0);
  }

  @Test(timeout = 4000)
  public void test532()  throws Throwable  {
      String string0 = StringUtils.removeStart("pV&d&F@?O[k", "pV&d&F@?O[k");
      assertNotNull(string0);
      assertEquals("", string0);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "org.apache.commons.lang3.StringUtils5|5pGW#urA~r?~3", (CharSequence) "org.apache.commons.lang3.StringUtils5|5pGW#urA~r?~3", (-1948));
      assertEquals((-1), int0);
      
      String string1 = StringUtils.join((long[]) null, 'N', 101, (-128));
      assertNull(string1);
  }

  @Test(timeout = 4000)
  public void test533()  throws Throwable  {
      String string0 = StringUtils.abbreviateMiddle("E2*1.s*OqQHFD&gQd9O", "E2*1.s*OqQHFD&gQd9O", (-526));
      assertNotNull(string0);
      assertEquals("E2*1.s*OqQHFD&gQd9O", string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[0] = (CharSequence) "E2*1.s*OqQHFD&gQd9O";
      charSequenceArray0[1] = (CharSequence) "E2*1.s*OqQHFD&gQd9O";
      boolean boolean0 = StringUtils.equalsAnyIgnoreCase("E2*1.s*OqQHFD&gQd9O", charSequenceArray0);
      assertEquals(2, charSequenceArray0.length);
      assertTrue(boolean0);
      
      String string1 = StringUtils.difference(".M,KjXgwysMU,", "`.ci");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("`.ci", string1);
      
      String string2 = StringUtils.trimToNull("5HNV");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("5HNV", string2);
      
      short[] shortArray0 = new short[0];
      String string3 = StringUtils.join(shortArray0, 'V', 1893, 160);
      assertNotNull(string3);
      assertEquals(0, shortArray0.length);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals("", string3);
      assertArrayEquals(new short[] {}, shortArray0);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) ".M,KjXgwysMU,", charSequenceArray0[1]);
      assertEquals(2, charSequenceArray0.length);
      assertEquals((-1), int0);
      
      boolean boolean1 = StringUtils.isAsciiPrintable("5HNV");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test534()  throws Throwable  {
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      Locale.Category locale_Category1 = Locale.Category.DISPLAY;
      Locale.Category locale_Category2 = Locale.Category.FORMAT;
      Locale.Category locale_Category3 = Locale.Category.DISPLAY;
      EnumSet<Locale.Category> enumSet0 = EnumSet.of(locale_Category0, locale_Category0, locale_Category1, locale_Category2, locale_Category3);
      assertNotNull(enumSet0);
      assertNotSame(locale_Category0, locale_Category1);
      assertNotSame(locale_Category0, locale_Category3);
      assertSame(locale_Category0, locale_Category2);
      assertNotSame(locale_Category1, locale_Category0);
      assertSame(locale_Category1, locale_Category3);
      assertNotSame(locale_Category1, locale_Category2);
      assertSame(locale_Category2, locale_Category0);
      assertNotSame(locale_Category2, locale_Category1);
      assertNotSame(locale_Category2, locale_Category3);
      assertNotSame(locale_Category3, locale_Category2);
      assertNotSame(locale_Category3, locale_Category0);
      assertSame(locale_Category3, locale_Category1);
      assertEquals(2, enumSet0.size());
      assertFalse(locale_Category0.equals((Object)locale_Category1));
      assertFalse(locale_Category0.equals((Object)locale_Category3));
      assertFalse(locale_Category1.equals((Object)locale_Category0));
      assertFalse(locale_Category1.equals((Object)locale_Category2));
      assertFalse(locale_Category2.equals((Object)locale_Category1));
      assertFalse(locale_Category2.equals((Object)locale_Category3));
      assertFalse(locale_Category3.equals((Object)locale_Category2));
      assertFalse(locale_Category3.equals((Object)locale_Category0));
      assertTrue(enumSet0.contains(locale_Category3));
      
      Locale.Category locale_Category4 = Locale.Category.FORMAT;
      boolean boolean0 = enumSet0.add(locale_Category4);
      assertNotSame(locale_Category0, locale_Category1);
      assertNotSame(locale_Category0, locale_Category3);
      assertSame(locale_Category0, locale_Category2);
      assertSame(locale_Category0, locale_Category4);
      assertNotSame(locale_Category1, locale_Category0);
      assertSame(locale_Category1, locale_Category3);
      assertNotSame(locale_Category1, locale_Category4);
      assertNotSame(locale_Category1, locale_Category2);
      assertSame(locale_Category2, locale_Category0);
      assertNotSame(locale_Category2, locale_Category1);
      assertSame(locale_Category2, locale_Category4);
      assertNotSame(locale_Category2, locale_Category3);
      assertNotSame(locale_Category3, locale_Category4);
      assertNotSame(locale_Category3, locale_Category2);
      assertNotSame(locale_Category3, locale_Category0);
      assertSame(locale_Category3, locale_Category1);
      assertNotSame(locale_Category4, locale_Category1);
      assertSame(locale_Category4, locale_Category0);
      assertSame(locale_Category4, locale_Category2);
      assertNotSame(locale_Category4, locale_Category3);
      assertEquals(2, enumSet0.size());
      assertFalse(locale_Category0.equals((Object)locale_Category1));
      assertFalse(locale_Category0.equals((Object)locale_Category3));
      assertFalse(locale_Category1.equals((Object)locale_Category0));
      assertFalse(locale_Category1.equals((Object)locale_Category4));
      assertFalse(locale_Category1.equals((Object)locale_Category2));
      assertFalse(locale_Category2.equals((Object)locale_Category1));
      assertFalse(locale_Category2.equals((Object)locale_Category3));
      assertFalse(locale_Category3.equals((Object)locale_Category4));
      assertFalse(locale_Category3.equals((Object)locale_Category2));
      assertFalse(locale_Category3.equals((Object)locale_Category0));
      assertFalse(locale_Category4.equals((Object)locale_Category1));
      assertFalse(locale_Category4.equals((Object)locale_Category3));
      assertFalse(boolean0);
      assertTrue(enumSet0.contains(locale_Category3));
      
      Iterator<Locale.Category> iterator0 = enumSet0.iterator();
      assertNotNull(iterator0);
      assertNotSame(locale_Category0, locale_Category1);
      assertNotSame(locale_Category0, locale_Category3);
      assertSame(locale_Category0, locale_Category2);
      assertSame(locale_Category0, locale_Category4);
      assertNotSame(locale_Category1, locale_Category0);
      assertSame(locale_Category1, locale_Category3);
      assertNotSame(locale_Category1, locale_Category4);
      assertNotSame(locale_Category1, locale_Category2);
      assertSame(locale_Category2, locale_Category0);
      assertNotSame(locale_Category2, locale_Category1);
      assertSame(locale_Category2, locale_Category4);
      assertNotSame(locale_Category2, locale_Category3);
      assertNotSame(locale_Category3, locale_Category4);
      assertNotSame(locale_Category3, locale_Category2);
      assertNotSame(locale_Category3, locale_Category0);
      assertSame(locale_Category3, locale_Category1);
      assertEquals(2, enumSet0.size());
      assertFalse(locale_Category0.equals((Object)locale_Category1));
      assertFalse(locale_Category0.equals((Object)locale_Category3));
      assertFalse(locale_Category1.equals((Object)locale_Category0));
      assertFalse(locale_Category1.equals((Object)locale_Category4));
      assertFalse(locale_Category1.equals((Object)locale_Category2));
      assertFalse(locale_Category2.equals((Object)locale_Category1));
      assertFalse(locale_Category2.equals((Object)locale_Category3));
      assertFalse(locale_Category3.equals((Object)locale_Category4));
      assertFalse(locale_Category3.equals((Object)locale_Category2));
      assertFalse(locale_Category3.equals((Object)locale_Category0));
      assertTrue(enumSet0.contains(locale_Category3));
      
      String string0 = StringUtils.join(iterator0, ";.");
      assertNotNull(string0);
      assertNotSame(locale_Category0, locale_Category1);
      assertNotSame(locale_Category0, locale_Category3);
      assertSame(locale_Category0, locale_Category2);
      assertSame(locale_Category0, locale_Category4);
      assertNotSame(locale_Category1, locale_Category0);
      assertSame(locale_Category1, locale_Category3);
      assertNotSame(locale_Category1, locale_Category4);
      assertNotSame(locale_Category1, locale_Category2);
      assertSame(locale_Category2, locale_Category0);
      assertNotSame(locale_Category2, locale_Category1);
      assertSame(locale_Category2, locale_Category4);
      assertNotSame(locale_Category2, locale_Category3);
      assertNotSame(locale_Category3, locale_Category4);
      assertNotSame(locale_Category3, locale_Category2);
      assertNotSame(locale_Category3, locale_Category0);
      assertSame(locale_Category3, locale_Category1);
      assertEquals(2, enumSet0.size());
      assertFalse(locale_Category0.equals((Object)locale_Category1));
      assertFalse(locale_Category0.equals((Object)locale_Category3));
      assertFalse(locale_Category1.equals((Object)locale_Category0));
      assertFalse(locale_Category1.equals((Object)locale_Category4));
      assertFalse(locale_Category1.equals((Object)locale_Category2));
      assertFalse(locale_Category2.equals((Object)locale_Category1));
      assertFalse(locale_Category2.equals((Object)locale_Category3));
      assertFalse(locale_Category3.equals((Object)locale_Category4));
      assertFalse(locale_Category3.equals((Object)locale_Category2));
      assertFalse(locale_Category3.equals((Object)locale_Category0));
      assertEquals("DISPLAY;.FORMAT", string0);
      assertTrue(enumSet0.contains(locale_Category3));
  }

  @Test(timeout = 4000)
  public void test535()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[1] = 52;
      intArray0[2] = (-2935);
      intArray0[3] = (-2935);
      intArray0[4] = 2124;
      intArray0[5] = 987;
      String string0 = StringUtils.join(intArray0, 'S');
      assertNotNull(string0);
      assertEquals(6, intArray0.length);
      assertEquals("0S52S-2935S-2935S2124S987", string0);
      assertArrayEquals(new int[] {0, 52, (-2935), (-2935), 2124, 987}, intArray0);
      
      boolean boolean0 = StringUtils.endsWithIgnoreCase("0S52S-2935S-2935S2124S987", "0S52S-2935S-2935S2124S987");
      assertTrue(boolean0);
      
      double double0 = StringUtils.getJaroWinklerDistance("0S52S-2935S-2935S2124S987", "0S52S-2935S-2935S2124S987");
      assertEquals(1.0, double0, 0.01);
      
      CharSequence[] charSequenceArray0 = new CharSequence[7];
      charSequenceArray0[0] = (CharSequence) "0S52S-2935S-2935S2124S987";
      charSequenceArray0[1] = (CharSequence) "0S52S-2935S-2935S2124S987";
      charSequenceArray0[2] = (CharSequence) "0S52S-2935S-2935S2124S987";
      charSequenceArray0[3] = (CharSequence) "0S52S-2935S-2935S2124S987";
      charSequenceArray0[4] = (CharSequence) "0S52S-2935S-2935S2124S987";
      charSequenceArray0[5] = (CharSequence) "0S52S-2935S-2935S2124S987";
      charSequenceArray0[6] = (CharSequence) "0S52S-2935S-2935S2124S987";
      boolean boolean1 = StringUtils.equalsAny("0S52S-2935S-2935S2124S987", charSequenceArray0);
      assertEquals(7, charSequenceArray0.length);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      boolean boolean2 = StringUtils.isNumeric(charSequenceArray0[4]);
      assertEquals(7, charSequenceArray0.length);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
      
      TreeSet<Integer> treeSet0 = new TreeSet<Integer>();
      assertNotNull(treeSet0);
      assertFalse(treeSet0.contains(2124));
      
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>(treeSet0);
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertFalse(treeSet0.contains(2124));
      assertFalse(arrayList0.contains(2124));
      
      Integer integer0 = new Integer(52);
      assertNotNull(integer0);
      assertEquals(52, (int)integer0);
      
      boolean boolean3 = arrayList0.add(integer0);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3);
      assertFalse(treeSet0.contains(52));
      assertFalse(arrayList0.contains(987));
      assertTrue(arrayList0.contains(52));
      
      String string1 = StringUtils.join((Iterable<?>) arrayList0, "Od");
      assertNotNull(string1);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertFalse(string1.equals((Object)string0));
      assertEquals("52", string1);
      assertFalse(treeSet0.contains(52));
      assertFalse(arrayList0.contains(987));
      assertTrue(arrayList0.contains(52));
      
      boolean boolean4 = StringUtils.isAsciiPrintable("0S52S-2935S-2935S2124S987");
      assertTrue(boolean4 == boolean0);
      assertTrue(boolean4 == boolean1);
      assertFalse(boolean4 == boolean2);
      assertTrue(boolean4 == boolean3);
      assertTrue(boolean4);
      
      int int0 = StringUtils.length(charSequenceArray0[4]);
      assertEquals(7, charSequenceArray0.length);
      assertEquals(25, int0);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (-2935);
      // Undeclared exception!
      try { 
        StringUtils.join(doubleArray0, '}', 8, 16);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 8
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test536()  throws Throwable  {
      char[] charArray0 = new char[4];
      String string0 = StringUtils.left("", 50);
      assertNotNull(string0);
      assertEquals("", string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      String string1 = StringUtils.uncapitalize("");
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[3] = (CharSequence) "";
      charSequenceArray0[2] = (CharSequence) "";
      charSequenceArray0[3] = (CharSequence) "";
      charSequenceArray0[4] = (CharSequence) "The Array must not be null";
      boolean boolean0 = StringUtils.endsWithAny(">H=I", charSequenceArray0);
      assertEquals(5, charSequenceArray0.length);
      assertFalse(boolean0);
      
      int int0 = StringUtils.lastIndexOfAny(charSequenceArray0[2], charSequenceArray0);
      assertEquals(5, charSequenceArray0.length);
      assertEquals(0, int0);
      
      boolean boolean1 = StringUtils.isNumeric(charSequenceArray0[2]);
      assertEquals(5, charSequenceArray0.length);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test537()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      charSequenceArray0[0] = (CharSequence) "h!{j5f5T8V}7s;";
      charSequenceArray0[1] = (CharSequence) "h!{j5f5T8V}7s;";
      charSequenceArray0[2] = (CharSequence) "h!{j5f5T8V}7s;";
      String string0 = StringUtils.abbreviateMiddle("h!{j5f5T8V}7s;", "java.lang.Object@52b769b5java.lang.Object@1d3febfajava.lang.Object@4c16c3aejava.lang.Object@4a32f5f1java.lang.Object@23a1c7c3java.lang.Object@52b769b5java.lang.Object@1d3febfajava.lang.Object@4c16c3aejava.lang.Object@4a32f5f1java.lang.Object@23a1c7c3", 15);
      assertNotNull(string0);
      assertEquals("h!{j5f5T8V}7s;", string0);
      
      String string1 = StringUtils.strip("h!{j5f5T8V}7s;", "h!{j5f5T8V}7s;");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      
      String string2 = StringUtils.replaceAll("java.lang.Object@52b769b5java.lang.Object@1d3febfajava.lang.Object@4c16c3aejava.lang.Object@4a32f5f1java.lang.Object@23a1c7c3java.lang.Object@52b769b5java.lang.Object@1d3febfajava.lang.Object@4c16c3aejava.lang.Object@4a32f5f1java.lang.Object@23a1c7c3", "", "");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("", "java.lang.Object@52b769b5java.lang.Object@1d3febfajava.lang.Object@4c16c3aejava.lang.Object@4a32f5f1java.lang.Object@23a1c7c3java.lang.Object@52b769b5java.lang.Object@1d3febfajava.lang.Object@4c16c3aejava.lang.Object@4a32f5f1java.lang.Object@23a1c7c3");
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test538()  throws Throwable  {
      String string0 = StringUtils.replace("", "US.^e:o_ufGpA", "", 0);
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.replaceIgnoreCase("", "US.^e:o_ufGpA", "The String must not be empty", (-3695));
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      
      String string2 = StringUtils.center("", 1911);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = "US.^e:o_ufGpA";
      stringArray0[1] = "/)q_F[PuSDH6Q*O";
      stringArray0[2] = null;
      String string3 = StringUtils.replaceEachRepeatedly((String) null, stringArray0, stringArray0);
      assertNull(string3);
      assertEquals(3, stringArray0.length);
      
      String string4 = StringUtils.stripToNull("");
      assertNull(string4);
      
      int int0 = StringUtils.compareIgnoreCase(string2, "}");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals((-93), int0);
      
      String string5 = StringUtils.defaultIfEmpty(string2, (String) null);
      assertNotNull(string5);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      
      String string6 = StringUtils.chop(string2);
      assertNotNull(string6);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string5));
      
      boolean boolean0 = StringUtils.isNotBlank("US.^e:o_ufGpA");
      assertTrue(boolean0);
      
      String string7 = StringUtils.substringBeforeLast("", "US.^e:o_ufGpA");
      assertNotNull(string7);
      assertFalse(string7.equals((Object)string5));
      assertTrue(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string2));
      assertTrue(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string6));
      assertEquals("", string7);
      
      String[] stringArray1 = StringUtils.split("", 'W');
      assertNotNull(stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(0, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      String string8 = StringUtils.rightPad("', has a length less than 2", (-162), (String) null);
      assertNotNull(string8);
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string7));
      assertEquals("', has a length less than 2", string8);
      
      String string9 = StringUtils.firstNonBlank(stringArray1);
      assertNull(string9);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(0, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      int int1 = StringUtils.indexOfAny((CharSequence) "US.^e:o_ufGpA", (CharSequence[]) stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(0, stringArray1.length);
      assertFalse(int1 == int0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals((-1), int1);
      
      String string10 = StringUtils.reverseDelimited(string5, 'W');
      assertNotNull(string10);
      assertTrue(string10.equals((Object)string2));
      assertFalse(string10.equals((Object)string6));
      assertFalse(string10.equals((Object)string8));
      assertFalse(string10.equals((Object)string1));
      assertFalse(string10.equals((Object)string7));
      assertFalse(string10.equals((Object)string0));
      assertTrue(string10.equals((Object)string5));
      assertFalse(string2.equals((Object)string7));
      assertFalse(string2.equals((Object)string8));
      assertFalse(string2.equals((Object)string6));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string6));
      assertFalse(string5.equals((Object)string8));
      assertFalse(string5.equals((Object)string7));
      
      String string11 = StringUtils.replaceChars("\n", (String) null, "z<");
      assertNotNull(string11);
      assertFalse(string11.equals((Object)string10));
      assertFalse(string11.equals((Object)string1));
      assertFalse(string11.equals((Object)string2));
      assertFalse(string11.equals((Object)string5));
      assertFalse(string11.equals((Object)string8));
      assertFalse(string11.equals((Object)string7));
      assertFalse(string11.equals((Object)string6));
      assertFalse(string11.equals((Object)string0));
      assertEquals("\n", string11);
  }

  @Test(timeout = 4000)
  public void test539()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      assertNotNull(stringWriter0);
      assertEquals("", stringWriter0.toString());
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) (-77);
      floatArray0[1] = 0.0F;
      floatArray0[2] = 0.0F;
      floatArray0[0] = (float) (-77);
      floatArray0[4] = (float) 'U';
      floatArray0[5] = (float) 'U';
      floatArray0[6] = (float) 'U';
      String string0 = StringUtils.abbreviate("Minimum abbreviation width is %d", "<Bw}r>y6xwnG!", 2380);
      assertNotNull(string0);
      assertEquals("Minimum abbreviation width is %d", string0);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "Minimum abbreviation width is %d", (CharSequence[]) null);
      assertEquals((-1), int0);
      
      int int1 = StringUtils.compareIgnoreCase("/gY+", (String) null, true);
      assertFalse(int1 == int0);
      assertEquals(1, int1);
      
      boolean boolean0 = StringUtils.isBlank((CharSequence) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test540()  throws Throwable  {
      String string0 = StringUtils.remove("$4'Tcj.*5", 'o');
      assertNotNull(string0);
      assertEquals("$4'Tcj.*5", string0);
      
      String string1 = "\\u";
      String string2 = StringUtils.replaceOnceIgnoreCase("$4'Tcj.*5", "", string1);
      assertNotNull(string2);
      assertFalse(string1.equals((Object)string0));
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("$4'Tcj.*5", string2);
      
      String string3 = StringUtils.center("$4'Tcj.*5", 76, 'o');
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals("ooooooooooooooooooooooooooooooooo$4'Tcj.*5oooooooooooooooooooooooooooooooooo", string3);
      
      String string4 = StringUtils.stripStart("aJ@h.p DVRCaQQST-sB", "");
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertEquals("aJ@h.p DVRCaQQST-sB", string4);
      
      long[] longArray0 = new long[5];
      longArray0[0] = (long) 'o';
      longArray0[1] = (-1192L);
      longArray0[2] = (long) 'o';
      longArray0[3] = (long) 'o';
      longArray0[4] = (long) 'o';
      String string5 = StringUtils.join(longArray0, 'm');
      assertNotNull(string5);
      assertEquals(5, longArray0.length);
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertEquals("111m-1192m111m111m111", string5);
      assertArrayEquals(new long[] {111L, (-1192L), 111L, 111L, 111L}, longArray0);
      
      boolean boolean0 = StringUtils.endsWith("$4'Tcj.*5", "aJ@h.p DVRCaQQST-sB");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test541()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "US.^e:o_ufGpA";
      Object object0 = new Object();
      assertNotNull(object0);
      
      String string0 = StringUtils.trim("oi0T@{");
      assertNotNull(string0);
      assertEquals("oi0T@{", string0);
      
      String string1 = StringUtils.mid(".M,KjXgwsMU,", (-1281), 3093);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals(".M,KjXgwsMU,", string1);
      
      String string2 = StringUtils.unwrap("Cl+B#j", 'I');
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("Cl+B#j", string2);
      
      boolean boolean0 = StringUtils.startsWith("oi0T@{", "Cl+B#j");
      assertFalse(boolean0);
      
      String string3 = StringUtils.center("\n", (-3908), '[');
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals("\n", string3);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "oi0T@{", (-1281), (-3908));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test542()  throws Throwable  {
      String string0 = StringUtils.mid("mDZ'd7j", 108, 108);
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.rotate("neIWU73Gjc0]2b", 18);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("]2bneIWU73Gjc0", string1);
  }

  @Test(timeout = 4000)
  public void test543()  throws Throwable  {
      String string0 = StringUtils.substring("W~p/]:FDw`qEP(g{Xm", 8);
      assertNotNull(string0);
      assertEquals("w`qEP(g{Xm", string0);
      
      boolean boolean0 = StringUtils.startsWith("w`qEP(g{Xm", "W~p/]:FDw`qEP(g{Xm");
      assertFalse(boolean0);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "/L", (CharSequence) "w`qEP(g{Xm");
      assertEquals(10, int0);
  }

  @Test(timeout = 4000)
  public void test544()  throws Throwable  {
      String string0 = StringUtils.remove("#r", 'y');
      assertNotNull(string0);
      assertEquals("#r", string0);
      
      int int0 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      String string1 = StringUtils.chop("AS");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("A", string1);
      
      boolean boolean0 = StringUtils.isMixedCase("A");
      assertFalse(boolean0);
      
      String string2 = StringUtils.mid("A", (-1), (-1));
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("", string2);
  }

  @Test(timeout = 4000)
  public void test545()  throws Throwable  {
      String string0 = StringUtils.wrapIfMissing("pV&d&F@?O[k", "pV&d&F@?O[k");
      assertNotNull(string0);
      assertEquals("pV&d&F@?O[k", string0);
      
      String string1 = StringUtils.chomp("C\"sB0NGGK5WB)yc`r", "&i_[[(MI");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("C\"sB0NGGK5WB)yc`r", string1);
      
      String string2 = StringUtils.difference("~H", "");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("", string2);
      
      String string3 = StringUtils.trimToNull("ukYT\"G[ 25-Rc");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals("ukYT\"G[ 25-Rc", string3);
      
      int int0 = StringUtils.countMatches((CharSequence) "ukYT\"G[ 25-Rc", 'v');
      assertEquals(0, int0);
      
      boolean boolean0 = StringUtils.contains((CharSequence) "ukYT\"G[ 25-Rc", (CharSequence) "ukYT\"G[ 25-Rc");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test546()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlphaSpace(" vs ");
      assertTrue(boolean0);
      
      String string0 = StringUtils.stripEnd("Lk;2dbd&", "Array and element cannot both be null");
      assertNotNull(string0);
      assertEquals("Lk;2dbd&", string0);
      
      boolean boolean1 = StringUtils.isNumericSpace("Lk;2dbd&");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test547()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "US.^e:o_ufGpA";
      String string0 = StringUtils.reverse("(d");
      assertNotNull(string0);
      assertEquals("d(", string0);
      
      boolean boolean0 = StringUtils.containsIgnoreCase("US.^e:o_ufGpA", "d(");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isAlphaSpace("d(");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string1 = StringUtils.uncapitalize("US.^e:o_ufGpA");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("uS.^e:o_ufGpA", string1);
      
      String string2 = StringUtils.strip("The character ", "uS.^e:o_ufGpA");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("The character ", string2);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "wDPtb=E*0D +", (CharSequence) "uS.^e:o_ufGpA");
      assertEquals(13, int0);
      
      boolean boolean2 = StringUtils.isAllBlank(stringArray0);
      assertEquals(1, stringArray0.length);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      String string3 = StringUtils.replaceOnceIgnoreCase("US.^e:o_ufGpA", "]b}Ng'ddNMNW@}", (String) null);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals("US.^e:o_ufGpA", string3);
      
      int int1 = StringUtils.lastIndexOf((CharSequence) null, (CharSequence) "The character ", 14);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test548()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = 'R';
      String string0 = StringUtils.defaultString("clone");
      assertNotNull(string0);
      assertEquals("clone", string0);
      
      boolean boolean0 = StringUtils.containsIgnoreCase("r2", "r2");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test549()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      int int0 = StringUtils.lastIndexOfAny(charSequenceArray0[1], charSequenceArray0);
      assertEquals(4, charSequenceArray0.length);
      assertEquals((-1), int0);
      
      String string0 = StringUtils.deleteWhitespace((String) null);
      assertNull(string0);
      
      String string1 = StringUtils.leftPad((String) null, (-1), 'm');
      assertNull(string1);
  }

  @Test(timeout = 4000)
  public void test550()  throws Throwable  {
      String string0 = StringUtils.LF;
      assertNotNull(string0);
      assertEquals("\n", string0);
      
      String string1 = StringUtils.CR;
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("\r", string1);
      
      boolean boolean0 = StringUtils.isEmpty("Cannot store ");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isWhitespace("\n");
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test551()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[0] = (CharSequence) "/swe]";
      charSequenceArray0[1] = (CharSequence) "/swe]";
      boolean boolean0 = StringUtils.containsAnyIgnoreCase("/swe]", charSequenceArray0);
      assertEquals(2, charSequenceArray0.length);
      assertTrue(boolean0);
      
      String string0 = StringUtils.capitalize("maxWith cannot be negative");
      assertNotNull(string0);
      assertEquals("MaxWith cannot be negative", string0);
      
      boolean boolean1 = StringUtils.isWhitespace("MaxWith cannot be negative");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      int int0 = StringUtils.lastIndexOfAny("maxWith cannot be negative", charSequenceArray0);
      assertEquals(2, charSequenceArray0.length);
      assertEquals((-1), int0);
      
      boolean boolean2 = StringUtils.isBlank(charSequenceArray0[0]);
      assertEquals(2, charSequenceArray0.length);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test552()  throws Throwable  {
      boolean boolean0 = StringUtils.containsAny((CharSequence) "a+f.", (char[]) null);
      assertFalse(boolean0);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) " in an array of ", (CharSequence) "\n");
      assertEquals(16, int0);
      
      String string0 = StringUtils.substringAfter("\n", "R.D_(mLE");
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test553()  throws Throwable  {
      String string0 = StringUtils.substringBefore((String) null, 15);
      assertNull(string0);
      
      String string1 = StringUtils.substringBefore((String) null, 12);
      assertNull(string1);
  }

  @Test(timeout = 4000)
  public void test554()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlphanumericSpace((CharSequence) null);
      assertFalse(boolean0);
      
      String string0 = StringUtils.uncapitalize("*QjPpOCvC>Y0BWtp.");
      assertNotNull(string0);
      assertEquals("*QjPpOCvC>Y0BWtp.", string0);
      
      boolean boolean1 = StringUtils.isAlphaSpace("*QjPpOCvC>Y0BWtp.");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string1 = StringUtils.replaceChars("*QjPpOCvC>Y0BWtp.", 'O', 'O');
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("*QjPpOCvC>Y0BWtp.", string1);
      
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("7-");
      assertNotNull(stringArray0);
      assertEquals(2, stringArray0.length);
      
      String string2 = StringUtils.difference("The Array must not be null", ";3!");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals(";3!", string2);
      
      String string3 = StringUtils.removeAll((String) null, "7-");
      assertNull(string3);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) null, (CharSequence) null);
      assertEquals((-1), int0);
      
      String string4 = StringUtils.unwrap((String) null, " vs ");
      assertNull(string4);
  }

  @Test(timeout = 4000)
  public void test555()  throws Throwable  {
      String string0 = StringUtils.remove("#r", 'y');
      assertNotNull(string0);
      assertEquals("#r", string0);
      
      int int0 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      boolean boolean0 = StringUtils.equalsAnyIgnoreCase("#r", charSequenceArray0);
      assertEquals(0, charSequenceArray0.length);
      assertFalse(boolean0);
      
      String string1 = StringUtils.substringAfterLast("comparator", "#r");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      
      int[] intArray0 = StringUtils.toCodePoints("comparator");
      assertNotNull(intArray0);
      assertEquals(10, intArray0.length);
      assertArrayEquals(new int[] {99, 111, 109, 112, 97, 114, 97, 116, 111, 114}, intArray0);
  }

  @Test(timeout = 4000)
  public void test556()  throws Throwable  {
      String string0 = StringUtils.swapCase("");
      assertNotNull(string0);
      assertEquals("", string0);
      
      boolean boolean0 = StringUtils.isNotEmpty("");
      assertFalse(boolean0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "";
      charSequenceArray0[2] = (CharSequence) "";
      charSequenceArray0[3] = (CharSequence) "";
      charSequenceArray0[4] = (CharSequence) "";
      boolean boolean1 = StringUtils.containsAny((CharSequence) "", charSequenceArray0);
      assertEquals(5, charSequenceArray0.length);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string1 = StringUtils.wrap("", ']');
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      
      String string2 = StringUtils.overlay("{}", ";e%ivq|`C", 16, 16);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("{};e%ivq|`C", string2);
      
      String string3 = StringUtils.substringAfterLast("{};e%ivq|`C", "U-0I_sa9{4d&NF");
      assertNotNull(string3);
      assertTrue(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string0));
      assertEquals("", string3);
      
      String string4 = StringUtils.truncate("", 16);
      assertNotNull(string4);
      assertTrue(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string1));
      assertEquals("", string4);
      
      boolean boolean2 = StringUtils.isAlphanumericSpace("");
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2);
  }

  @Test(timeout = 4000)
  public void test557()  throws Throwable  {
      String string0 = StringUtils.right("FW;]~`2^s_P6:NRY", (-2094));
      assertNotNull(string0);
      assertEquals("", string0);
      
      boolean boolean0 = StringUtils.isAllLowerCase("");
      assertFalse(boolean0);
      
      String string1 = StringUtils.abbreviate("", (-2094), (-3740));
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      charSequenceArray0[0] = (CharSequence) "";
      String string2 = "\\u";
      String string3 = StringUtils.unwrap("", string2);
      assertNotNull(string3);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertTrue(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string0));
      assertEquals("", string3);
  }

  @Test(timeout = 4000)
  public void test558()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)104;
      String string0 = StringUtils.substringBetween("pV&d&F@?O[k", (String) null, ".M,KjXgwysMU,");
      assertNull(string0);
      
      String string1 = StringUtils.removeIgnoreCase((String) null, " ");
      assertNull(string1);
      
      String string2 = StringUtils.unwrap((String) null, "Strings must not be null");
      assertNull(string2);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) (byte)104;
      floatArray0[1] = (float) 664;
      String string3 = StringUtils.join(floatArray0, 'f', 1902, 664);
      assertNotNull(string3);
      assertEquals(2, floatArray0.length);
      assertEquals("", string3);
      assertArrayEquals(new float[] {104.0F, 664.0F}, floatArray0, 0.01F);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "", (CharSequence) null, 1902);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test559()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "US.^e:o_ufGpA";
      String[] stringArray1 = StringUtils.stripAll(stringArray0);
      assertNotNull(stringArray1);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(1, stringArray0.length);
      assertEquals(1, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      boolean boolean0 = StringUtils.isAlphanumeric("(d");
      assertFalse(boolean0);
      
      int int0 = StringUtils.compareIgnoreCase("org.apache.commons.lang3.StringUtils5|5pGW#urA~r?~3", "u=]@|On8X7H27[2Or");
      assertEquals((-6), int0);
      
      String string0 = StringUtils.trimToEmpty("");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.appendIfMissingIgnoreCase(", Length: 0", "org.apache.commons.lang3.StringUtils5|5pGW#urA~r?~3", stringArray0);
      assertNotNull(string1);
      assertNotSame(stringArray0, stringArray1);
      assertEquals(1, stringArray0.length);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertFalse(string1.equals((Object)string0));
      assertEquals(", Length: 0org.apache.commons.lang3.StringUtils5|5pGW#urA~r?~3", string1);
  }

  @Test(timeout = 4000)
  public void test560()  throws Throwable  {
      String string0 = StringUtils.wrap("W~p/]:FDw`qEP(g{Xm", 'v');
      assertNotNull(string0);
      assertEquals("vW~p/]:FDw`qEP(g{Xmv", string0);
      
      String string1 = StringUtils.substringAfter("%OASG?bZ0Eo.k!?8*IRfKOe e~MFd!&{'et", (String) null);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      
      String string2 = StringUtils.appendIfMissing("X", "Array and element cannot both be null", (CharSequence[]) null);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("XArray and element cannot both be null", string2);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "XArray and element cannot both be null", "Wd}]");
      assertEquals(9, int0);
  }

  @Test(timeout = 4000)
  public void test561()  throws Throwable  {
      Object[] objectArray0 = new Object[4];
      objectArray0[1] = (Object) "\n-cBy67k9#e'y~~L{X-808.0j891.1.M,KjXgwsMU,";
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      charSequenceArray0[0] = (CharSequence) "\n-cBy67k9#e'y~~L{X-808.0j891.1.M,KjXgwsMU,";
      String string0 = StringUtils.appendIfMissingIgnoreCase("]", "\n-cBy67k9#e'y~~L{X-808.0j891.1.M,KjXgwsMU,", charSequenceArray0);
      assertNotNull(string0);
      assertEquals(1, charSequenceArray0.length);
      assertEquals("]\n-cBy67k9#e'y~~L{X-808.0j891.1.M,KjXgwsMU,", string0);
  }

  @Test(timeout = 4000)
  public void test562()  throws Throwable  {
      String string0 = StringUtils.replace("", "US.^e:o_ufGpA", "", 1664);
      assertNotNull(string0);
      assertEquals("", string0);
      
      boolean boolean0 = StringUtils.isAnyBlank((CharSequence[]) null);
      assertFalse(boolean0);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) 1664;
      floatArray0[1] = (float) 1664;
      floatArray0[2] = (float) 1664;
      floatArray0[3] = 2915.091F;
      boolean boolean1 = StringUtils.containsOnly((CharSequence) "US.^e:o_ufGpA", (char[]) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string1 = StringUtils.defaultIfEmpty("", "x2?x|[Cx[:^C6");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("x2?x|[Cx[:^C6", string1);
      
      int int0 = StringUtils.indexOf((CharSequence) "", 1664, 895);
      assertEquals((-1), int0);
      
      String string2 = StringUtils.substring("ZQWp/8G", (-1));
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("G", string2);
  }

  @Test(timeout = 4000)
  public void test563()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("vW]", 'z');
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      StringUtils stringUtils0 = new StringUtils();
      assertNotNull(stringUtils0);
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      
      int[] intArray0 = StringUtils.toCodePoints("");
      assertNotNull(intArray0);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "vW]", (char[]) null);
      assertFalse(boolean0);
      
      String string0 = StringUtils.remove("vW]", '9');
      assertNotNull(string0);
      assertEquals("vW]", string0);
  }

  @Test(timeout = 4000)
  public void test564()  throws Throwable  {
      String string0 = StringUtils.repeat(" sf", 1435);
      assertNotNull(string0);
      
      int int0 = StringUtils.length(string0);
      assertEquals(4305, int0);
  }

  @Test(timeout = 4000)
  public void test565()  throws Throwable  {
      String string0 = StringUtils.stripStart("US.^e:o_ufGpAP]zWB',Q", "*>n74sW \"");
      assertNotNull(string0);
      assertEquals("US.^e:o_ufGpAP]zWB',Q", string0);
      
      String string1 = StringUtils.repeat("jpy],O8mr0%rYHphM", 942);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test566()  throws Throwable  {
      String string0 = StringUtils.getCommonPrefix((String[]) null);
      assertNotNull(string0);
      assertEquals("", string0);
      
      boolean boolean0 = StringUtils.isAllLowerCase(" ");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test567()  throws Throwable  {
      String string0 = StringUtils.EMPTY;
      assertNotNull(string0);
      assertEquals("", string0);
      
      boolean boolean0 = StringUtils.equalsIgnoreCase("", "");
      assertTrue(boolean0);
      
      String string1 = StringUtils.chop("");
      assertNotNull(string1);
      assertEquals("", string1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      charSequenceArray0[0] = (CharSequence) "";
      String string2 = StringUtils.truncate("", 8192);
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertEquals("", string2);
      
      charSequenceArray0[1] = (CharSequence) "";
      charSequenceArray0[2] = (CharSequence) "";
      String string3 = StringUtils.stripToEmpty("");
      assertNotNull(string3);
      assertTrue(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string1));
      assertEquals("", string3);
      
      charSequenceArray0[3] = (CharSequence) "";
      charSequenceArray0[4] = (CharSequence) "";
      int int0 = StringUtils.lastIndexOfAny("", charSequenceArray0);
      assertEquals(5, charSequenceArray0.length);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test568()  throws Throwable  {
      String string0 = StringUtils.center("xxUjava.lang.Object@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.Object@50d3e7ejava.lang.Object@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.Object@50d3e7ejava.lang.Object@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.Object@50d3e7ejava.lang.Object@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.Object@50d3e7e", 16);
      assertNotNull(string0);
      
      String string1 = StringUtils.removeStart("xxUjava.lang.Object@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.Object@50d3e7ejava.lang.Object@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.Object@50d3e7ejava.lang.Object@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.Object@50d3e7ejava.lang.Object@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.Object@50d3e7e", "xxUjava.lang.Object@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.Object@50d3e7ejava.lang.Object@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.Object@50d3e7ejava.lang.Object@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.Object@50d3e7ejava.lang.Object@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.Object@50d3e7e");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      
      boolean boolean0 = StringUtils.isMixedCase("");
      assertFalse(boolean0);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "xxUjava.lang.Object@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.Object@50d3e7ejava.lang.Object@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.Object@50d3e7ejava.lang.Object@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.Object@50d3e7ejava.lang.Object@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.Object@50d3e7e", (CharSequence) "U2+DfS:Vb%!,", 16);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test569()  throws Throwable  {
      String string0 = StringUtils.abbreviateMiddle("E2*1.s*OqQHFD&gQd9O", "E2*1.s*OqQHFD&gQd9O", (-526));
      assertNotNull(string0);
      assertEquals("E2*1.s*OqQHFD&gQd9O", string0);
      
      String[] stringArray0 = StringUtils.split("E2*1.s*OqQHFD&gQd9O", 'x');
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      String string1 = StringUtils.reverseDelimited("The type must not be null", '$');
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("The type must not be null", string1);
      
      int int0 = StringUtils.countMatches((CharSequence) "The type must not be null", (CharSequence) "E2*1.s*OqQHFD&gQd9O");
      assertEquals(0, int0);
      
      String string2 = StringUtils.deleteWhitespace("MBDEMP");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("MBDEMP", string2);
      
      long[] longArray0 = new long[3];
      longArray0[0] = (long) '$';
      longArray0[1] = (long) (-526);
      longArray0[2] = (long) 0;
      String string3 = StringUtils.join(longArray0, '$');
      assertNotNull(string3);
      assertEquals(3, longArray0.length);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals("36$-526$0", string3);
      assertArrayEquals(new long[] {36L, (-526L), 0L}, longArray0);
      
      int[] intArray0 = new int[4];
      intArray0[0] = (int) '$';
      intArray0[1] = (int) 'x';
      intArray0[2] = (int) 'x';
      intArray0[3] = (-395);
      String string4 = StringUtils.join(intArray0, ':', 36, (-395));
      assertNotNull(string4);
      assertEquals(4, intArray0.length);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertEquals("", string4);
      assertArrayEquals(new int[] {36, 120, 120, (-395)}, intArray0);
      
      Locale locale0 = Locale.ENGLISH;
      assertNotNull(locale0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      
      int int1 = StringUtils.getFuzzyDistance("", "The type must not be null", locale0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      
      long[] longArray1 = new long[9];
      assertFalse(longArray1.equals((Object)longArray0));
      
      longArray1[0] = (long) 120;
      longArray1[1] = (long) 'x';
      longArray1[2] = (long) (-526);
      longArray1[3] = (long) 'x';
      longArray1[4] = (long) (-395);
      longArray1[5] = 791L;
      longArray1[6] = 3794L;
      longArray1[7] = (long) 120;
      longArray1[8] = (long) 'x';
      // Undeclared exception!
      try { 
        StringUtils.join(longArray1, 'B', (-526), 5);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -526
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test570()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = 4;
      intArray0[1] = (-395);
      intArray0[2] = (-395);
      intArray0[3] = (-395);
      intArray0[4] = (-395);
      intArray0[5] = (int) 'o';
      String string0 = StringUtils.join(intArray0, '5', 108, 5);
      assertNotNull(string0);
      assertEquals(6, intArray0.length);
      assertEquals("", string0);
      assertArrayEquals(new int[] {4, (-395), (-395), (-395), (-395), 111}, intArray0);
      
      Locale locale0 = Locale.ENGLISH;
      assertNotNull(locale0);
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      Locale.setDefault(locale_Category0, locale0);
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      
      int int0 = StringUtils.getFuzzyDistance("", "", locale0);
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals(0, int0);
      
      String string1 = StringUtils.join((long[]) null, 'C', (-395), (-395));
      assertNull(string1);
      
      String string2 = StringUtils.strip("");
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string0));
      assertEquals("", string2);
  }

  @Test(timeout = 4000)
  public void test571()  throws Throwable  {
      String string0 = null;
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) 115;
      floatArray0[1] = (float) 'y';
      floatArray0[2] = (float) 115;
      floatArray0[3] = (float) 'y';
      floatArray0[4] = (float) 115;
      // Undeclared exception!
      try { 
        StringUtils.join(floatArray0, 'y', 115, 164);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 115
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test572()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      assertNotNull(stringWriter0);
      assertEquals("", stringWriter0.toString());
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) (-77);
      floatArray0[1] = 0.0F;
      floatArray0[2] = 0.0F;
      floatArray0[0] = (float) (-77);
      floatArray0[4] = (float) 'U';
      floatArray0[5] = (float) 'U';
      floatArray0[6] = (float) 'U';
      // Undeclared exception!
      try { 
        StringUtils.join(floatArray0, 'B', 97, 108);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 97
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test573()  throws Throwable  {
      String string0 = StringUtils.swapCase("/swe]");
      assertNotNull(string0);
      assertEquals("/SWE]", string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      charSequenceArray0[0] = (CharSequence) "/SWE]";
      charSequenceArray0[1] = (CharSequence) "/SWE]";
      charSequenceArray0[2] = (CharSequence) "/swe]";
      charSequenceArray0[3] = (CharSequence) "/SWE]";
      String string1 = StringUtils.rotate("/swe]", 55);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("/swe]", string1);
      
      String string2 = StringUtils.difference("}=;*O4%H_TD$/*mBnnm", "}%Q`EfW:|y~b0Lb~Fj");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("%Q`EfW:|y~b0Lb~Fj", string2);
      
      String string3 = StringUtils.trimToNull("&i_[[(MI");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals("&i_[[(MI", string3);
      
      String string4 = StringUtils.substringBeforeLast("Arguments cannot both be null", "org.apache.commons.lang3.exception.CloneFailedException");
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertEquals("Arguments cannot both be null", string4);
      
      String string5 = StringUtils.substringBefore("Locale must not be null", "', has a length less than 2");
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertEquals("Locale must not be null", string5);
  }

  @Test(timeout = 4000)
  public void test574()  throws Throwable  {
      String string0 = StringUtils.center("xxUjava.lang.Object@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.Object@50d3e7ejava.lang.Object@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.Object@50d3e7ejava.lang.Object@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@I6b5c730java.lang.Object@50d3e7ejava.lang.Object@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.Object@50d3e7e", 34);
      assertNotNull(string0);
      
      String string1 = StringUtils.substringAfter("Rr9rz.Ukuw<#xx9GUR", "xxUjava.lang.Object@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.Object@50d3e7ejava.lang.Object@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.Object@50d3e7ejava.lang.Object@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@I6b5c730java.lang.Object@50d3e7ejava.lang.Object@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.Object@50d3e7e");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      
      String string2 = StringUtils.normalizeSpace("xxUjava.lang.Object@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.Object@50d3e7ejava.lang.Object@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.Object@50d3e7ejava.lang.Object@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@I6b5c730java.lang.Object@50d3e7ejava.lang.Object@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.Object@50d3e7e");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      
      String string3 = StringUtils.removePattern("", "Rr9rz.Ukuw<#xx9GUR");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals("", string3);
      
      boolean boolean0 = StringUtils.equalsIgnoreCase("xxUjava.lang.Object@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.Object@50d3e7ejava.lang.Object@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.Object@50d3e7ejava.lang.Object@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@I6b5c730java.lang.Object@50d3e7ejava.lang.Object@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.Object@50d3e7e", "Rr9rz.Ukuw<#xx9GUR");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test575()  throws Throwable  {
      String string0 = StringUtils.wrap("W~p/]:FDw`qEP(g{Xm", 'v');
      assertNotNull(string0);
      assertEquals("vW~p/]:FDw`qEP(g{Xmv", string0);
      
      int int0 = StringUtils.indexOf((CharSequence) "W~p/]:FDw`qEP(g{Xm", (CharSequence) "vW~p/]:FDw`qEP(g{Xmv");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test576()  throws Throwable  {
      String string0 = StringUtils.substring("The type must not be null", 686);
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test577()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "<)v(vKh";
      stringArray0[1] = "";
      String string0 = StringUtils.LF;
      assertNotNull(string0);
      assertEquals("\n", string0);
      
      String string1 = StringUtils.replaceIgnoreCase("Threshold must not be negative", "Locale must not be null", "", (-3695));
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("Threshold must not be negative", string1);
      
      String string2 = StringUtils.center("", (-73));
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("", string2);
      
      String string3 = StringUtils.replaceEachRepeatedly("f0uCY7&r", stringArray0, stringArray0);
      assertNotNull(string3);
      assertEquals(2, stringArray0.length);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals("f0uCY7&r", string3);
      
      String string4 = StringUtils.stripEnd("{}", "");
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertEquals("{}", string4);
      
      int int0 = StringUtils.compareIgnoreCase("Locale must not be null", "org.apache.commons.lang3.StringUtils");
      assertEquals((-3), int0);
      
      String string5 = StringUtils.defaultIfEmpty("&J?l(S/ktr4V6~TRa%", "");
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertEquals("&J?l(S/ktr4V6~TRa%", string5);
      
      String string6 = StringUtils.substringAfter("Locale must not be null", "Threshold must not be negative");
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string1));
      assertEquals("", string6);
      
      boolean boolean0 = StringUtils.isNotBlank("");
      assertFalse(boolean0);
      
      String string7 = StringUtils.normalizeSpace("f0uCY7&r");
      assertNotNull(string7);
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string2));
      assertTrue(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string5));
      assertEquals("f0uCY7&r", string7);
      
      String string8 = StringUtils.substring("Locale must not be null", (-73));
      assertNotNull(string8);
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string7));
      assertEquals("Locale must not be null", string8);
      
      String string9 = StringUtils.stripStart("&J?l(S/ktr4V6~TRa%", "clone");
      assertNotNull(string9);
      assertFalse(string9.equals((Object)string3));
      assertFalse(string9.equals((Object)string4));
      assertFalse(string9.equals((Object)string8));
      assertFalse(string9.equals((Object)string0));
      assertFalse(string9.equals((Object)string1));
      assertFalse(string9.equals((Object)string6));
      assertFalse(string9.equals((Object)string7));
      assertFalse(string9.equals((Object)string2));
      assertTrue(string9.equals((Object)string5));
      assertEquals("&J?l(S/ktr4V6~TRa%", string9);
  }

  @Test(timeout = 4000)
  public void test578()  throws Throwable  {
      String string0 = StringUtils.leftPad("NAx$6,s:,XDp-'", (-1765));
      assertNotNull(string0);
      assertEquals("NAx$6,s:,XDp-'", string0);
      
      int int0 = StringUtils.indexOfDifference((CharSequence) "NAx$6,s:,XDp-'", (CharSequence) "NAx$6,s:,XDp-'");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test579()  throws Throwable  {
      String string0 = StringUtils.wrap("org.apache.commons.lang3.exception.CloneFailedException", "xxUjava.lang.Object@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.Object@50d3e7ejava.lang.Object@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.Object@50d3e7ejava.lang.Object@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.Object@50d3e7ejava.lang.Object@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.Object@50d3e7exxUjava.lang.Object@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.Object@50d3e7ejava.lang.Object@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.Object@50d3e7ejava.lang.Object@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.Object@50d3e7ejava.lang.Object@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.Object@50d3e7e");
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isAlphaSpace("org.apache.commons.lang3.exception.CloneFailedException");
      assertFalse(boolean0);
      
      String string1 = StringUtils.stripEnd("''qr&\"}!.kb5\"D'", "''qr&\"}!.kb5\"D'");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
  }

  @Test(timeout = 4000)
  public void test580()  throws Throwable  {
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "T/RAf ADSsF$}wV#N", (CharSequence) "T/RAf ADSsF$}wV#N");
      assertEquals(0, int0);
      
      Locale locale0 = Locale.CHINESE;
      assertNotNull(locale0);
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
  }

  @Test(timeout = 4000)
  public void test581()  throws Throwable  {
      String string0 = StringUtils.center("p- = is not in the range '0' - '9'", 1051, 'p');
      assertNotNull(string0);
      
      // Undeclared exception!
      StringUtils.getLevenshteinDistance((CharSequence) string0, (CharSequence) string0);
  }

  @Test(timeout = 4000)
  public void test582()  throws Throwable  {
      String string0 = StringUtils.replaceChars("{}", '1', '#');
      assertNotNull(string0);
      assertEquals("{}", string0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("pV&d&F@?O[k", "pV&d&F@?O[k");
      assertNotNull(stringArray0);
      assertEquals(2, stringArray0.length);
      
      boolean boolean0 = StringUtils.containsAny((CharSequence) "pV&d&F@?O[k", (CharSequence) "pV&d&F@?O[k");
      assertTrue(boolean0);
      
      boolean boolean1 = StringUtils.isWhitespace("pV&d&F@?O[k");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String[] stringArray1 = StringUtils.splitPreserveAllTokens((String) null, "{}");
      assertNull(stringArray1);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)9;
      byteArray0[1] = (byte)21;
      byteArray0[2] = (byte) (-128);
      byteArray0[3] = (byte) (-74);
      byteArray0[4] = (byte)56;
      String string1 = StringUtils.wrapIfMissing("/gUP", '[');
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("[/gUP[", string1);
      
      int[] intArray0 = new int[4];
      intArray0[0] = (int) (byte)56;
      intArray0[1] = (int) (byte) (-74);
      intArray0[2] = (int) (byte)9;
      intArray0[3] = (int) '[';
      String string2 = StringUtils.join(intArray0, 'f');
      assertNotNull(string2);
      assertEquals(4, intArray0.length);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("56f-74f9f91", string2);
      assertArrayEquals(new int[] {56, (-74), 9, 91}, intArray0);
      
      boolean boolean2 = StringUtils.isAlpha((CharSequence) null);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "[/gUP[", (CharSequence) "[/gUP[");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test583()  throws Throwable  {
      String string0 = StringUtils.replaceOnceIgnoreCase("", "", "");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.replaceChars("", "", "CWHQPs.gCgP");
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      
      double double0 = StringUtils.getJaroWinklerDistance("", "");
      assertEquals(0.0, double0, 0.01);
      
      String string2 = StringUtils.difference("", "");
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertEquals("", string2);
  }

  @Test(timeout = 4000)
  public void test584()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[0] = "r2";
      stringArray0[1] = "r2";
      stringArray0[2] = "r2";
      stringArray0[3] = "r2";
      stringArray0[0] = "r2";
      String string0 = StringUtils.wrap("9|I;", '[');
      assertNotNull(string0);
      assertEquals("[9|I;[", string0);
      
      String string1 = StringUtils.removeStart("j&B/`mYz:WoXN8Bye", ">H=5GIE");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("j&B/`mYz:WoXN8Bye", string1);
      
      String string2 = StringUtils.unwrap((String) null, 'o');
      assertNull(string2);
      
      int int0 = StringUtils.indexOf((CharSequence) null, 8);
      assertEquals((-1), int0);
      
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      assertNotNull(locale0);
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TW", locale0.getCountry());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("", locale0.getVariant());
      
      // Undeclared exception!
      try { 
        StringUtils.getFuzzyDistance((CharSequence) null, (CharSequence) null, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test585()  throws Throwable  {
      String string0 = StringUtils.join((float[]) null, 'y', 115, 50);
      assertNull(string0);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) null, (CharSequence) null);
      assertEquals((-1), int0);
      
      boolean boolean0 = StringUtils.isAllBlank((CharSequence[]) null);
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        StringUtils.joinWith("vW", (Object[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object varargs must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test586()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "<)v(vKh";
      stringArray0[1] = "";
      String[] stringArray1 = StringUtils.stripAll(stringArray0);
      assertNotNull(stringArray1);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(2, stringArray0.length);
      assertEquals(2, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      boolean boolean0 = StringUtils.isAlphanumeric("<)v(vKh");
      assertFalse(boolean0);
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'W';
      charArray0[1] = '%';
      charArray0[2] = 'G';
      charArray0[3] = '>';
      String string0 = StringUtils.join(charArray0, 'W');
      assertNotNull(string0);
      assertEquals(4, charArray0.length);
      assertEquals("WW%WGW>", string0);
      assertArrayEquals(new char[] {'W', '%', 'G', '>'}, charArray0);
      
      String string1 = StringUtils.toRootLowerCase("<)v(vKh");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("<)v(vkh", string1);
      
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short)64;
      shortArray0[1] = (short)0;
      String string2 = StringUtils.join((float[]) null, ']', 1124, 104);
      assertNull(string2);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "<)v(vKh", (CharSequence) "<)v(vkh");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test587()  throws Throwable  {
      String string0 = StringUtils.substringBetween(" vs ", "Q", " vs ");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test588()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = 16;
      intArray0[1] = 52;
      intArray0[2] = (-2935);
      String string0 = StringUtils.substringBetween(" ", "...", ".M,KjXgwysMU,");
      assertNull(string0);
      
      boolean boolean0 = StringUtils.containsNone((CharSequence) "Aborting to protect against StackOverflowError - output of one loop is the input of another", "LLR!");
      assertTrue(boolean0);
      
      String string1 = StringUtils.strip("maxWith cannot be negative");
      assertNotNull(string1);
      assertEquals("maxWith cannot be negative", string1);
      
      String string2 = StringUtils.stripToEmpty("maxWith cannot be negative");
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string1));
      assertEquals("maxWith cannot be negative", string2);
      
      String[] stringArray0 = new String[6];
      stringArray0[0] = ".M,KjXgwysMU,";
      stringArray0[1] = " ";
      stringArray0[2] = ".M,KjXgwysMU,";
      stringArray0[3] = ".M,KjXgwysMU,";
      stringArray0[4] = ".M,KjXgwysMU,";
      stringArray0[5] = "maxWith cannot be negative";
      int int0 = StringUtils.compareIgnoreCase("} %CTuhQGqz$z|o1D", ";6FZP2*", true);
      assertEquals(66, int0);
      
      String string3 = StringUtils.trim("org.apache.commons.lang3.StringUtils");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals("org.apache.commons.lang3.StringUtils", string3);
  }

  @Test(timeout = 4000)
  public void test589()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = " vs ";
      String string0 = StringUtils.strip(" vs ");
      assertNotNull(string0);
      assertEquals("vs", string0);
      
      double double0 = StringUtils.getJaroWinklerDistance("vs", "vs");
      assertEquals(1.0, double0, 0.01);
      
      boolean boolean0 = StringUtils.equalsAny(" vs ", stringArray0);
      assertEquals(5, stringArray0.length);
      assertTrue(boolean0);
      
      boolean boolean1 = StringUtils.isNumeric("vs");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      Integer integer0 = new Integer(13);
      assertNotNull(integer0);
      assertEquals(13, (int)integer0);
      
      String string1 = StringUtils.trim(" vs ");
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("vs", string1);
      
      String string2 = StringUtils.firstNonEmpty(stringArray0);
      assertNotNull(string2);
      assertEquals(5, stringArray0.length);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals(" vs ", string2);
      
      String string3 = StringUtils.lowerCase((String) null);
      assertNull(string3);
      
      String string4 = StringUtils.swapCase(" is not in the range '0' - '9'");
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertEquals(" IS NOT IN THE RANGE '0' - '9'", string4);
      
      boolean boolean2 = StringUtils.isNumericSpace("w)(v.7==O@,T");
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
      
      String string5 = StringUtils.removeEnd("null/empty items", "=GI$HJ(pX)#");
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertEquals("null/empty items", string5);
  }

  @Test(timeout = 4000)
  public void test590()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[1] = 1844;
      String string0 = StringUtils.join(intArray0, 'c');
      assertNotNull(string0);
      assertEquals(2, intArray0.length);
      assertEquals("0c1844", string0);
      assertArrayEquals(new int[] {0, 1844}, intArray0);
      
      String string1 = StringUtils.swapCase("0c1844");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("0C1844", string1);
      
      String string2 = StringUtils.leftPad("0C1844", (-2556), '+');
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("0C1844", string2);
      
      String string3 = StringUtils.repeat('c', (int) '+');
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals("ccccccccccccccccccccccccccccccccccccccccccc", string3);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "0C1844";
      String string4 = StringUtils.firstNonEmpty(stringArray0);
      assertNotNull(string4);
      assertEquals(1, stringArray0.length);
      assertTrue(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertEquals("0C1844", string4);
  }

  @Test(timeout = 4000)
  public void test591()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      CharSequence charSequence0 = StringUtils.firstNonEmpty(charSequenceArray0);
      assertNull(charSequence0);
      assertEquals(1, charSequenceArray0.length);
      
      charSequenceArray0[0] = null;
      boolean boolean0 = StringUtils.isAnyEmpty(charSequenceArray0);
      assertEquals(1, charSequenceArray0.length);
      assertTrue(boolean0);
      
      String string0 = StringUtils.replaceChars("~^{O", "~^{O", "cTnUXms.lpYUm");
      assertNotNull(string0);
      assertEquals("cTnU", string0);
      
      String string1 = StringUtils.substringBetween("37", "wV:!&PW@uYj) ee\"k", "DH':nC]e%p");
      assertNull(string1);
  }

  @Test(timeout = 4000)
  public void test592()  throws Throwable  {
      String string0 = StringUtils.left("5|5pGW#urA~r?~3", (-494));
      assertNotNull(string0);
      assertEquals("", string0);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens((String) null, 'u');
      assertNull(stringArray0);
      
      StringUtils stringUtils0 = new StringUtils();
      assertNotNull(stringUtils0);
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      
      long[] longArray0 = new long[6];
      longArray0[0] = (long) (-494);
      longArray0[1] = (long) (-1);
      String string1 = StringUtils.getCommonPrefix((String[]) null);
      assertNotNull(string1);
      assertEquals("", string1);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "", (CharSequence) "\n", 99);
      assertEquals((-1), int0);
      
      Locale locale0 = Locale.PRC;
      assertNotNull(locale0);
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      
      Locale locale1 = Locale.TRADITIONAL_CHINESE;
      assertNotNull(locale1);
      assertNotSame(locale1, locale0);
      assertEquals("zho", locale1.getISO3Language());
      assertEquals("TWN", locale1.getISO3Country());
      assertEquals("zh_TW", locale1.toString());
      assertEquals("TW", locale1.getCountry());
      assertEquals("zh", locale1.getLanguage());
      assertEquals("", locale1.getVariant());
      assertFalse(locale1.equals((Object)locale0));
      
      String string2 = locale0.getDisplayName(locale1);
      assertNotNull(string2);
      assertNotSame(locale0, locale1);
      assertNotSame(locale1, locale0);
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale1.getISO3Language());
      assertEquals("TWN", locale1.getISO3Country());
      assertEquals("zh_TW", locale1.toString());
      assertEquals("TW", locale1.getCountry());
      assertEquals("zh", locale1.getLanguage());
      assertEquals("", locale1.getVariant());
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(locale1.equals((Object)locale0));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("\u4E2D\u6587 (\u4E2D\u570B)", string2);
      
      String string3 = locale0.getDisplayName(locale1);
      assertNotNull(string3);
      assertNotSame(locale0, locale1);
      assertNotSame(locale1, locale0);
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale1.getISO3Language());
      assertEquals("TWN", locale1.getISO3Country());
      assertEquals("zh_TW", locale1.toString());
      assertEquals("TW", locale1.getCountry());
      assertEquals("zh", locale1.getLanguage());
      assertEquals("", locale1.getVariant());
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(locale1.equals((Object)locale0));
      assertTrue(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals("\u4E2D\u6587 (\u4E2D\u570B)", string3);
      
      String string4 = StringUtils.upperCase(" ", locale0);
      assertNotNull(string4);
      assertNotSame(locale0, locale1);
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertEquals(" ", string4);
      
      String string5 = StringUtils.toRootUpperCase("bgb#8Jz/>dH2t1y");
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertEquals("BGB#8JZ/>DH2T1Y", string5);
      
      String string6 = StringUtils.prependIfMissing("?`f1l.@>AZQ7g2vSRM", "BGB#8JZ/>DH2T1Y", (CharSequence[]) null);
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string1));
      assertEquals("BGB#8JZ/>DH2T1Y?`f1l.@>AZQ7g2vSRM", string6);
      
      boolean boolean0 = StringUtils.isBlank(" ");
      assertTrue(boolean0);
      
      String string7 = StringUtils.firstNonEmpty((String[]) null);
      assertNull(string7);
      
      // Undeclared exception!
      try { 
        StringUtils.getLevenshteinDistance((CharSequence) null, (CharSequence) "5|5pGW#urA~r?~3");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test593()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("oQG?.2$Vo0", '/');
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      String string0 = StringUtils.firstNonBlank(stringArray0);
      assertNotNull(string0);
      assertEquals(1, stringArray0.length);
      assertEquals("oQG?.2$Vo0", string0);
      
      String string1 = StringUtils.deleteWhitespace("P=w6M[2+D;zto[Sp8$R");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("P=w6M[2+D;zto[Sp8$R", string1);
      
      String string2 = StringUtils.firstNonEmpty(stringArray0);
      assertNotNull(string2);
      assertEquals(1, stringArray0.length);
      assertFalse(string2.equals((Object)string1));
      assertEquals("oQG?.2$Vo0", string2);
      
      String string3 = StringUtils.swapCase("&\"60FFr");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("&\"60ffR", string3);
      
      boolean boolean0 = StringUtils.isNumericSpace("P=w6M[2+D;zto[Sp8$R");
      assertFalse(boolean0);
      
      String string4 = StringUtils.lowerCase("&\"60ffR");
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertEquals("&\"60ffr", string4);
  }

  @Test(timeout = 4000)
  public void test594()  throws Throwable  {
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) "";
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[1] = object0;
      objectArray0[2] = (Object) "";
      objectArray0[3] = (Object) "";
      objectArray0[4] = (Object) "";
      String string0 = StringUtils.joinWith("", objectArray0);
      assertNotNull(string0);
      assertEquals(5, objectArray0.length);
      
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      charSequenceArray0[0] = (CharSequence) "java.lang.Object@586c749a";
      boolean boolean0 = StringUtils.equalsAnyIgnoreCase("java.lang.Object@586c749a", charSequenceArray0);
      assertEquals(1, charSequenceArray0.length);
      assertTrue(boolean0);
      
      String string1 = StringUtils.replaceOnce((String) null, (String) null, (String) null);
      assertNull(string1);
      
      String string2 = StringUtils.right("", 16);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertEquals("", string2);
      
      String string3 = StringUtils.difference("java.lang.Object@586c749a", (String) null);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      
      byte[] byteArray0 = StringUtils.getBytes((String) null, (String) null);
      assertNotNull(byteArray0);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      String string4 = StringUtils.leftPad((String) null, (-1472), '*');
      assertNull(string4);
      
      String string5 = StringUtils.remove("", "");
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertTrue(string5.equals((Object)string2));
      assertEquals("", string5);
      
      int int0 = StringUtils.countMatches((CharSequence) "", (CharSequence) "java.lang.Object@586c749a");
      assertEquals(0, int0);
      
      String string6 = StringUtils.remove("", '*');
      assertNotNull(string6);
      assertTrue(string6.equals((Object)string2));
      assertTrue(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string3));
      assertEquals("", string6);
      
      String string7 = StringUtils.substringBetween("", "Aborting to protect against StackOverflowError - output of one loop is the input of another", (String) null);
      assertNull(string7);
      
      boolean boolean1 = StringUtils.containsNone((CharSequence) null, ";6FZP2*");
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String string8 = StringUtils.strip("java.lang.Object@586c749a");
      assertNotNull(string8);
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string5));
      assertTrue(string8.equals((Object)string3));
      
      String string9 = StringUtils.stripToEmpty("");
      assertNotNull(string9);
      assertTrue(string9.equals((Object)string6));
      assertFalse(string9.equals((Object)string3));
      assertTrue(string9.equals((Object)string2));
      assertFalse(string9.equals((Object)string8));
      assertTrue(string9.equals((Object)string5));
      assertFalse(string9.equals((Object)string0));
      assertEquals("", string9);
      
      String[] stringArray0 = new String[0];
      String[] stringArray1 = StringUtils.stripAll(stringArray0);
      assertNotNull(stringArray1);
      assertSame(stringArray0, stringArray1);
      assertSame(stringArray1, stringArray0);
      assertEquals(0, stringArray0.length);
      assertEquals(0, stringArray1.length);
      
      int int1 = StringUtils.compareIgnoreCase("", "", true);
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      
      String string10 = StringUtils.trim("N%R3!y(qGjIp2");
      assertNotNull(string10);
      assertFalse(string10.equals((Object)string0));
      assertFalse(string10.equals((Object)string3));
      assertFalse(string10.equals((Object)string2));
      assertFalse(string10.equals((Object)string5));
      assertFalse(string10.equals((Object)string9));
      assertFalse(string10.equals((Object)string6));
      assertFalse(string10.equals((Object)string8));
      assertEquals("N%R3!y(qGjIp2", string10);
      
      String string11 = StringUtils.firstNonEmpty(stringArray0);
      assertNull(string11);
      assertSame(stringArray0, stringArray1);
      assertEquals(0, stringArray0.length);
      
      String string12 = StringUtils.lowerCase("5|5pGW#urA~r?~3");
      assertNotNull(string12);
      assertFalse(string12.equals((Object)string5));
      assertFalse(string12.equals((Object)string9));
      assertFalse(string12.equals((Object)string2));
      assertFalse(string12.equals((Object)string6));
      assertFalse(string12.equals((Object)string10));
      assertFalse(string12.equals((Object)string8));
      assertFalse(string12.equals((Object)string3));
      assertFalse(string12.equals((Object)string0));
      assertEquals("5|5pgw#ura~r?~3", string12);
  }

  @Test(timeout = 4000)
  public void test595()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlphanumericSpace((CharSequence) null);
      assertFalse(boolean0);
      
      String string0 = StringUtils.uncapitalize("*QjPpOCvC>Y0BWtp.");
      assertNotNull(string0);
      assertEquals("*QjPpOCvC>Y0BWtp.", string0);
      
      boolean boolean1 = StringUtils.isAlphaSpace("*QjPpOCvC>Y0BWtp.");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = StringUtils.containsOnly((CharSequence) null, (char[]) null);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      String string1 = StringUtils.defaultIfEmpty("i{]K!J*83(V?o*G/m", "*QjPpOCvC>Y0BWtp.");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("i{]K!J*83(V?o*G/m", string1);
      
      String string2 = StringUtils.substringAfter("X", "Array and element cannot both be null");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("", string2);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "i{]K!J*83(V?o*G/m", "Wd}]");
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test596()  throws Throwable  {
      String string0 = StringUtils.substringAfterLast("", 10);
      assertNotNull(string0);
      assertEquals("", string0);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "", "");
      assertEquals((-1), int0);
      
      String string1 = StringUtils.replaceOnce("", "af-_Xu1o~2a", "af-_Xu1o~2a");
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      String string2 = StringUtils.replaceEachRepeatedly("", stringArray0, stringArray0);
      assertNotNull(string2);
      assertEquals(4, stringArray0.length);
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertEquals("", string2);
      
      boolean boolean0 = StringUtils.isNumericSpace("");
      assertTrue(boolean0);
      
      String[] stringArray1 = StringUtils.splitByWholeSeparator("af-_Xu1o~2a", "");
      assertNotNull(stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(1, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      String string3 = StringUtils.leftPad("", 2312, '[');
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      
      String string4 = StringUtils.remove("8kUfL|2og", '[');
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertEquals("8kUfL|2og", string4);
      
      String string5 = StringUtils.substringBetween((String) null, "", "p{InCombiningDiacriticalMarks}+");
      assertNull(string5);
      
      boolean boolean1 = StringUtils.containsNone((CharSequence) ";6FZP2*", "org.apache.commons.lang3.CharSequenceUtils");
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String string6 = StringUtils.strip("l");
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string0));
      assertEquals("l", string6);
      
      String string7 = StringUtils.stripToEmpty(",/66A7z~@r:n5z ?m");
      assertNotNull(string7);
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string3));
      assertEquals(",/66A7z~@r:n5z ?m", string7);
      
      String[] stringArray2 = StringUtils.stripAll(stringArray0);
      assertNotNull(stringArray2);
      assertNotSame(stringArray2, stringArray0);
      assertNotSame(stringArray2, stringArray1);
      assertNotSame(stringArray0, stringArray2);
      assertNotSame(stringArray0, stringArray1);
      assertEquals(4, stringArray2.length);
      assertEquals(4, stringArray0.length);
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertFalse(stringArray2.equals((Object)stringArray1));
      assertFalse(stringArray0.equals((Object)stringArray1));
      
      int int1 = StringUtils.compareIgnoreCase("Aborting to protect against StackOverflowError - output of one loop is the input of another", "", true);
      assertFalse(int1 == int0);
      assertEquals(91, int1);
      
      String string8 = StringUtils.trim("");
      assertNotNull(string8);
      assertTrue(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string7));
      assertTrue(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string4));
      assertTrue(string8.equals((Object)string1));
      assertEquals("", string8);
      
      boolean boolean2 = StringUtils.endsWithAny("af-_Xu1o~2a", stringArray1);
      assertNotSame(stringArray1, stringArray2);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(1, stringArray1.length);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(stringArray1.equals((Object)stringArray2));
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertTrue(boolean2);
      
      String string9 = StringUtils.abbreviateMiddle("p{InCombiningDiacriticalMarks}+", "", 15);
      assertNotNull(string9);
      assertFalse(string9.equals((Object)string7));
      assertFalse(string9.equals((Object)string3));
      assertFalse(string9.equals((Object)string8));
      assertFalse(string9.equals((Object)string4));
      assertFalse(string9.equals((Object)string2));
      assertFalse(string9.equals((Object)string6));
      assertFalse(string9.equals((Object)string1));
      assertFalse(string9.equals((Object)string0));
      assertEquals("p{InCombiningDiacriticalMarks}+", string9);
      
      int int2 = StringUtils.indexOfAny((CharSequence) "p{InCombiningDiacriticalMarks}+", "mK=ikRI;B");
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(2, int2);
  }

  @Test(timeout = 4000)
  public void test597()  throws Throwable  {
      String string0 = StringUtils.substringAfterLast("W~p/]:FDw`qEP(g{Xm", (-1104));
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.center((String) null, 32767, '.');
      assertNull(string1);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "", (CharSequence) "W~p/]:FDw`qEP(g{Xm");
      assertEquals(18, int0);
  }

  @Test(timeout = 4000)
  public void test598()  throws Throwable  {
      String string0 = StringUtils.uncapitalize((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test599()  throws Throwable  {
      String[] stringArray0 = StringUtils.split(" vs ", "org.apache.commons.lang3.LocaleUtils", (-494));
      assertNotNull(stringArray0);
      assertEquals(2, stringArray0.length);
      
      String string0 = StringUtils.chop("org.apache.commons.lang3.LocaleUtils");
      assertNotNull(string0);
      assertEquals("org.apache.commons.lang3.LocaleUtil", string0);
      
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains("org.apache.commons.lang3.LocaleUtils"));
      
      ListIterator<String> listIterator0 = linkedList0.listIterator();
      assertNotNull(listIterator0);
      assertEquals(0, linkedList0.size());
      assertFalse(listIterator0.hasPrevious());
      assertFalse(listIterator0.hasNext());
      assertFalse(linkedList0.contains("org.apache.commons.lang3.LocaleUtils"));
      
      String string1 = StringUtils.join((Iterator<?>) listIterator0, "org.apache.commons.lang3.LocaleUtils");
      assertNotNull(string1);
      assertEquals(0, linkedList0.size());
      assertFalse(listIterator0.hasPrevious());
      assertFalse(listIterator0.hasNext());
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertFalse(linkedList0.contains("org.apache.commons.lang3.LocaleUtils"));
      
      boolean boolean0 = StringUtils.isMixedCase("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test600()  throws Throwable  {
      String string0 = StringUtils.unwrap("PN}", "PN}");
      assertNotNull(string0);
      assertEquals("PN}", string0);
      
      String string1 = StringUtils.removeStart("PN}", "");
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("PN}", string1);
      
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0).when(comparator0).compare(any() , any());
      TreeSet<Object> treeSet0 = new TreeSet<Object>(comparator0);
      assertNotNull(treeSet0);
      assertFalse(treeSet0.contains("PN}"));
      
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "PN}");
      assertNotNull(charBuffer0);
      assertTrue(charBuffer0.hasRemaining());
      assertFalse(charBuffer0.isDirect());
      assertEquals(3, charBuffer0.length());
      assertTrue(charBuffer0.isReadOnly());
      assertEquals(3, charBuffer0.remaining());
      assertEquals("PN}", charBuffer0.toString());
      assertFalse(charBuffer0.hasArray());
      assertEquals(3, charBuffer0.limit());
      assertEquals(3, charBuffer0.capacity());
      assertEquals(0, charBuffer0.position());
      
      boolean boolean0 = treeSet0.add(charBuffer0);
      assertTrue(charBuffer0.hasRemaining());
      assertFalse(charBuffer0.isDirect());
      assertEquals(3, charBuffer0.length());
      assertTrue(charBuffer0.isReadOnly());
      assertEquals(3, charBuffer0.remaining());
      assertEquals("PN}", charBuffer0.toString());
      assertFalse(charBuffer0.hasArray());
      assertEquals(3, charBuffer0.limit());
      assertEquals(3, charBuffer0.capacity());
      assertEquals(0, charBuffer0.position());
      assertTrue(boolean0);
      assertTrue(treeSet0.contains("PN}"));
      
      Integer integer0 = new Integer(512);
      assertNotNull(integer0);
      assertEquals(512, (int)integer0);
      
      Object object0 = treeSet0.lower(integer0);
      assertNull(object0);
      assertTrue(treeSet0.contains(512));
      
      Object object1 = new Object();
      assertNotNull(object1);
      
      boolean boolean1 = treeSet0.add(integer0);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertTrue(treeSet0.contains(512));
      
      Iterator<Object> iterator0 = treeSet0.descendingIterator();
      assertNotNull(iterator0);
      assertTrue(treeSet0.contains(512));
      
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      Locale locale0 = Locale.JAPANESE;
      assertNotNull(locale0);
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ja", locale0.toString());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      assertNotNull(set0);
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ja", locale0.toString());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertFalse(set0.contains("PN}"));
      
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) arrayList0, (Collection<String>) set0);
      assertNotNull(list0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ja", locale0.toString());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertFalse(set0.contains("PN}"));
      assertFalse(list0.contains("PN}"));
      
      ArrayDeque<String> arrayDeque0 = new ArrayDeque<String>(list0);
      assertNotNull(arrayDeque0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ja", locale0.toString());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      assertFalse(set0.contains("PN}"));
      assertFalse(list0.contains("PN}"));
      assertFalse(arrayDeque0.contains("PN}"));
      
      String string2 = StringUtils.join((Iterable<?>) arrayDeque0, "PN}");
      assertNotNull(string2);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ja", locale0.toString());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("", string2);
      assertFalse(set0.contains(string2));
      assertFalse(list0.contains(string2));
      assertFalse(arrayDeque0.contains(string2));
      
      boolean boolean2 = StringUtils.isAsciiPrintable("");
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2);
      
      String string3 = StringUtils.center((String) null, 1376, ';');
      assertNull(string3);
      
      int int0 = StringUtils.length((CharSequence) null);
      assertEquals(0, int0);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 2652.1011926;
      doubleArray0[1] = (double) (-685);
      doubleArray0[2] = (double) ';';
      doubleArray0[3] = (double) ';';
      doubleArray0[4] = (double) 1376;
      doubleArray0[5] = (double) '3';
      String string4 = StringUtils.join(doubleArray0, '3', 14, (-685));
      assertNotNull(string4);
      assertEquals(6, doubleArray0.length);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertEquals("", string4);
      assertArrayEquals(new double[] {2652.1011926, (-685.0), 59.0, 59.0, 1376.0, 51.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test601()  throws Throwable  {
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      EnumSet<Locale.Category> enumSet0 = EnumSet.of(locale_Category0);
      assertNotNull(enumSet0);
      assertEquals(1, enumSet0.size());
      assertTrue(enumSet0.contains(locale_Category0));
      
      Vector<Locale.Category> vector0 = new Vector<Locale.Category>(enumSet0);
      assertNotNull(vector0);
      assertEquals(1, enumSet0.size());
      assertEquals(1, vector0.size());
      assertEquals(1, vector0.capacity());
      assertEquals("[FORMAT]", vector0.toString());
      assertFalse(vector0.isEmpty());
      assertTrue(enumSet0.contains(locale_Category0));
      assertTrue(vector0.contains(locale_Category0));
      
      LinkedList<Locale.Category> linkedList0 = new LinkedList<Locale.Category>(vector0);
      assertNotNull(linkedList0);
      assertEquals(1, enumSet0.size());
      assertEquals(1, vector0.size());
      assertEquals(1, vector0.capacity());
      assertEquals("[FORMAT]", vector0.toString());
      assertFalse(vector0.isEmpty());
      assertEquals(1, linkedList0.size());
      assertTrue(enumSet0.contains(locale_Category0));
      assertTrue(vector0.contains(locale_Category0));
      assertTrue(linkedList0.contains(locale_Category0));
      
      Locale.Category locale_Category1 = Locale.Category.FORMAT;
      boolean boolean0 = vector0.add(locale_Category1);
      assertSame(locale_Category0, locale_Category1);
      assertSame(locale_Category1, locale_Category0);
      assertEquals(1, enumSet0.size());
      assertEquals("[FORMAT, FORMAT]", vector0.toString());
      assertEquals(2, vector0.capacity());
      assertEquals(2, vector0.size());
      assertFalse(vector0.isEmpty());
      assertTrue(boolean0);
      assertTrue(enumSet0.contains(locale_Category1));
      assertTrue(vector0.contains(locale_Category1));
      
      enumSet0.clear();
      assertSame(locale_Category0, locale_Category1);
      assertEquals(0, enumSet0.size());
      assertFalse(enumSet0.contains(locale_Category1));
      
      Locale.Category locale_Category2 = Locale.Category.DISPLAY;
      boolean boolean1 = enumSet0.add(locale_Category2);
      assertSame(locale_Category0, locale_Category1);
      assertNotSame(locale_Category0, locale_Category2);
      assertNotSame(locale_Category2, locale_Category1);
      assertNotSame(locale_Category2, locale_Category0);
      assertEquals(1, enumSet0.size());
      assertFalse(locale_Category0.equals((Object)locale_Category2));
      assertFalse(locale_Category2.equals((Object)locale_Category1));
      assertFalse(locale_Category2.equals((Object)locale_Category0));
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertTrue(enumSet0.contains(locale_Category2));
      assertFalse(enumSet0.contains(locale_Category0));
      
      String string0 = StringUtils.join((Iterable<?>) linkedList0, "Minimum abbreviation width with offset is %dVfIxa8gu, n9|Minimum abbreviation width with offset is %dVfIxa8gu, n9|Minimum abbreviation width with offset is %dVfIxa8gu, n9|Minimum abbreviation width with offset is %dVfIxa8gu, n9|Minimum abbreviation width with offset is %dVfIxa8gu, n9|Minimum abbreviation width with offset is %dVfIxa8gu, n9|Minimum abbreviation width with offset is %dVfIxa8gu, n9|Minimum abbreviation width with offset is %dVfIxa8gu, n9|Minimum abbreviation width with offset is %dVfIxa8gu, n9|Minimum abbreviation width with offset is %dVfIxa8gu, n9|Minimum abbreviation width with offset is %dVfIxa8gu, n9|Minimum abbreviation width with offset is %dVfIxa8gu, n9|Minimum abbreviation width with offset is %dVfIxa8gu, n9|Minimum abbreviation width with offset is %dVfIxa8gu, n9|Minimum abbreviation width with offset is %dVfIxa8gu, n9|Minimum abbreviation width with offset is %dVfIxa8gu, n9|VfIxa8gu, n9|");
      assertNotNull(string0);
      assertSame(locale_Category0, locale_Category1);
      assertNotSame(locale_Category0, locale_Category2);
      assertEquals(1, enumSet0.size());
      assertEquals("[FORMAT, FORMAT]", vector0.toString());
      assertEquals(2, vector0.capacity());
      assertEquals(2, vector0.size());
      assertFalse(vector0.isEmpty());
      assertEquals(1, linkedList0.size());
      assertFalse(locale_Category0.equals((Object)locale_Category2));
      assertEquals("FORMAT", string0);
      assertTrue(enumSet0.contains(locale_Category2));
      assertFalse(enumSet0.contains(locale_Category0));
      assertTrue(vector0.contains(locale_Category0));
      assertFalse(vector0.contains(locale_Category2));
      assertFalse(linkedList0.contains(locale_Category2));
      assertTrue(linkedList0.contains(locale_Category0));
      
      boolean boolean2 = StringUtils.containsNone((CharSequence) "FORMAT", "FORMAT");
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
      
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      charSequenceArray0[0] = (CharSequence) "FORMAT";
      String string1 = StringUtils.prependIfMissingIgnoreCase("FORMAT", "FORMAT", charSequenceArray0);
      assertNotNull(string1);
      assertEquals(1, charSequenceArray0.length);
      assertTrue(string1.equals((Object)string0));
      assertEquals("FORMAT", string1);
      
      String string2 = StringUtils.wrap("/Xed", '.');
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("./Xed.", string2);
      
      CharSequence[] charSequenceArray1 = new CharSequence[0];
      assertFalse(charSequenceArray1.equals((Object)charSequenceArray0));
      
      String string3 = StringUtils.prependIfMissing("maxWith cannot be negative", charSequenceArray0[0], charSequenceArray1);
      assertNotNull(string3);
      assertNotSame(charSequenceArray0, charSequenceArray1);
      assertNotSame(charSequenceArray1, charSequenceArray0);
      assertEquals(1, charSequenceArray0.length);
      assertEquals(0, charSequenceArray1.length);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(charSequenceArray0.equals((Object)charSequenceArray1));
      assertFalse(charSequenceArray1.equals((Object)charSequenceArray0));
      assertEquals("FORMATmaxWith cannot be negative", string3);
  }

  @Test(timeout = 4000)
  public void test602()  throws Throwable  {
      String string0 = StringUtils.substringAfterLast("", 10);
      assertNotNull(string0);
      assertEquals("", string0);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "", "");
      assertEquals((-1), int0);
      
      String string1 = StringUtils.replaceOnce("", "af-_Xu1o~2a", "af-_Xu1o~2a");
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      String string2 = StringUtils.replaceEachRepeatedly("", stringArray0, stringArray0);
      assertNotNull(string2);
      assertEquals(4, stringArray0.length);
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertEquals("", string2);
      
      boolean boolean0 = StringUtils.isNumericSpace("");
      assertTrue(boolean0);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)16;
      shortArray0[1] = (short)16;
      String string3 = StringUtils.join(shortArray0, 's', 0, 0);
      assertNotNull(string3);
      assertEquals(2, shortArray0.length);
      assertTrue(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string2));
      assertEquals("", string3);
      assertArrayEquals(new short[] {(short)16, (short)16}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test603()  throws Throwable  {
      String string0 = StringUtils.reverse("Minimum abbreviation width with offset is %d");
      assertNotNull(string0);
      assertEquals("d% si tesffo htiw htdiw noitaiverbba muminiM", string0);
      
      short[] shortArray0 = new short[2];
      shortArray0[1] = (short)16;
      String string1 = StringUtils.join(shortArray0, 'h', (int) 'h', 8);
      assertNotNull(string1);
      assertEquals(2, shortArray0.length);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertArrayEquals(new short[] {(short)0, (short)16}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test604()  throws Throwable  {
      String string0 = StringUtils.removeEndIgnoreCase("", "");
      assertNotNull(string0);
      assertEquals("", string0);
      
      Supplier<CharSequence> supplier0 = (Supplier<CharSequence>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn("").when(supplier0).get();
      CharSequence charSequence0 = StringUtils.getIfBlank((CharSequence) "", supplier0);
      assertNotNull(charSequence0);
      assertTrue(charSequence0.equals((Object)string0));
      assertEquals("", charSequence0);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "", (CharSequence) "");
      assertEquals(0, int0);
      
      String string1 = StringUtils.toRootUpperCase("");
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertTrue(string1.equals((Object)charSequence0));
      assertEquals("", string1);
      
      Object[] objectArray0 = new Object[0];
      String string2 = StringUtils.joinWith("Strings must not be null", objectArray0);
      assertNotNull(string2);
      assertEquals(0, objectArray0.length);
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)charSequence0));
      assertEquals("", string2);
      
      String string3 = "\\u";
      int int1 = StringUtils.compare("", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)charSequence0));
      assertFalse(int1 == int0);
      assertEquals((-2), int1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[8];
      charSequenceArray0[0] = (CharSequence) "Strings must not be null";
      charSequenceArray0[1] = (CharSequence) "";
      charSequenceArray0[2] = (CharSequence) "";
      charSequenceArray0[3] = (CharSequence) "";
      charSequenceArray0[4] = (CharSequence) "";
      charSequenceArray0[5] = (CharSequence) "Strings must not be null";
      String string4 = StringUtils.remove("", 'C');
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)charSequence0));
      assertTrue(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string0));
      assertEquals("", string4);
      
      charSequenceArray0[6] = (CharSequence) "";
      charSequenceArray0[7] = (CharSequence) "Strings must not be null";
      boolean boolean0 = StringUtils.isAllBlank(charSequenceArray0);
      assertEquals(8, charSequenceArray0.length);
      assertFalse(boolean0);
      
      String string5 = StringUtils.substringBefore(", Length: 0", (-2105));
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)charSequence0));
      assertEquals(", Length: 0", string5);
  }

  @Test(timeout = 4000)
  public void test605()  throws Throwable  {
      String string0 = StringUtils.capitalize("a+f.");
      assertNotNull(string0);
      assertEquals("A+f.", string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[9];
      charSequenceArray0[0] = (CharSequence) "A+f.";
      charSequenceArray0[1] = (CharSequence) "a+f.";
      charSequenceArray0[2] = (CharSequence) "Rx-^~ *MdI1V9n~-N98";
      charSequenceArray0[3] = (CharSequence) "Rx-^~ *MdI1V9n~-N98";
      charSequenceArray0[4] = (CharSequence) "Rx-^~ *MdI1V9n~-N98";
      CharSequence charSequence0 = StringUtils.firstNonBlank(charSequenceArray0);
      assertNotNull(charSequence0);
      assertEquals(9, charSequenceArray0.length);
      assertTrue(charSequence0.equals((Object)string0));
      assertEquals("A+f.", charSequence0);
      
      charSequenceArray0[5] = (CharSequence) "A+f.";
      charSequenceArray0[6] = (CharSequence) "a+f.";
      boolean boolean0 = StringUtils.endsWithAny("Rx-^~ *MdI1V9n~-N98", charSequenceArray0);
      assertEquals(9, charSequenceArray0.length);
      assertTrue(boolean0);
      
      String string1 = StringUtils.trimToEmpty("A+f.");
      assertNotNull(string1);
      assertTrue(string1.equals((Object)charSequence0));
      assertTrue(string1.equals((Object)string0));
      assertEquals("A+f.", string1);
      
      int int0 = StringUtils.lastIndexOfAny(charSequenceArray0[2], charSequenceArray0);
      assertEquals(9, charSequenceArray0.length);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test606()  throws Throwable  {
      String string0 = StringUtils.trimToEmpty(" vs ");
      assertNotNull(string0);
      assertEquals("vs", string0);
      
      boolean boolean0 = StringUtils.isAlphanumericSpace("vs");
      assertTrue(boolean0);
      
      boolean boolean1 = StringUtils.isAllLowerCase("vs");
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String string1 = StringUtils.removeEnd("WbL0.%fDsD[", ":0_Pi0l}1HCr&&HEy");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("WbL0.%fDsD[", string1);
  }

  @Test(timeout = 4000)
  public void test607()  throws Throwable  {
      String string0 = StringUtils.removeEndIgnoreCase("", "");
      assertNotNull(string0);
      assertEquals("", string0);
      
      Supplier<CharSequence> supplier0 = (Supplier<CharSequence>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn("").when(supplier0).get();
      CharSequence charSequence0 = StringUtils.getIfBlank((CharSequence) "", supplier0);
      assertNotNull(charSequence0);
      assertTrue(charSequence0.equals((Object)string0));
      assertEquals("", charSequence0);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "", (CharSequence) "");
      assertEquals(0, int0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("", "");
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      
      Integer integer0 = new Integer(0);
      assertNotNull(integer0);
      assertTrue(integer0.equals((Object)int0));
      assertEquals(0, (int)integer0);
      
      boolean boolean0 = StringUtils.isMixedCase("");
      assertFalse(boolean0);
      
      String string1 = StringUtils.wrapIfMissing("jFyV", "");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)charSequence0));
      assertEquals("jFyV", string1);
      
      double double0 = StringUtils.getJaroWinklerDistance("", "jFyV");
      assertEquals(0.0, double0, 0.01);
      
      String string2 = StringUtils.remove("vS*S", "vS*S");
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)charSequence0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("", string2);
  }

  @Test(timeout = 4000)
  public void test608()  throws Throwable  {
      String string0 = StringUtils.wrap((String) null, 'U');
      assertNull(string0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens((String) null, (String) null, (-2092));
      assertNull(stringArray0);
      
      String string1 = StringUtils.getIfEmpty((String) null, (Supplier<String>) null);
      assertNull(string1);
      
      String string2 = StringUtils.substringBefore((String) null, (-2092));
      assertNull(string2);
      
      Locale locale0 = Locale.FRANCE;
      assertNotNull(locale0);
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr_FR", locale0.toString());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("FR", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("fr", locale0.getLanguage());
      
      String string3 = StringUtils.upperCase("ch", locale0);
      assertNotNull(string3);
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr_FR", locale0.toString());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("FR", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("CH", string3);
  }

  @Test(timeout = 4000)
  public void test609()  throws Throwable  {
      String string0 = StringUtils.wrapIfMissing((String) null, (String) null);
      assertNull(string0);
      
      String string1 = StringUtils.removeEnd((String) null, (String) null);
      assertNull(string1);
      
      String string2 = StringUtils.chomp((String) null, "yVF$%|}");
      assertNull(string2);
      
      // Undeclared exception!
      try { 
        StringUtils.getLevenshteinDistance((CharSequence) null, (CharSequence) null, 76);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test610()  throws Throwable  {
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      String string0 = StringUtils.getIfEmpty("Minimum abbreviation width is %d", supplier0);
      assertNotNull(string0);
      assertEquals("Minimum abbreviation width is %d", string0);
      
      String string1 = StringUtils.wrapIfMissing((String) null, "Minimum abbreviation width is %d");
      assertNull(string1);
      
      int[] intArray0 = new int[5];
      intArray0[0] = 0;
      intArray0[1] = 260;
      intArray0[2] = 0;
      intArray0[3] = (-794);
      intArray0[4] = 1652;
      // Undeclared exception!
      try { 
        StringUtils.join(intArray0, '(', 0, 50);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test611()  throws Throwable  {
      String string0 = StringUtils.abbreviateMiddle("E2*1.s*OqQHFD&gQd9O", "E2*1.s*OqQHFD&gQd9O", (-526));
      assertNotNull(string0);
      assertEquals("E2*1.s*OqQHFD&gQd9O", string0);
      
      int[] intArray0 = new int[1];
      intArray0[0] = (-395);
      String string1 = "\\u";
      String string2 = StringUtils.replaceOnceIgnoreCase("org.apache.commons.lang3.CharSequenceUtils", string1, "");
      assertNotNull(string2);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("org.apache.commons.lang3.CharSequenceUtils", string2);
      
      double[] doubleArray0 = new double[0];
      String string3 = StringUtils.substringBeforeLast(".M,KjXgwysMU,", "...");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals(".M,KjXgwysMU,", string3);
      
      String string4 = StringUtils.getIfEmpty("...", (Supplier<String>) null);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertEquals("...", string4);
  }

  @Test(timeout = 4000)
  public void test612()  throws Throwable  {
      String string0 = "jZ2Xbq8JxDS]4zy";
      int int0 = StringUtils.compare("jZ2Xbq8JxDS]4zy", "jZ2Xbq8JxDS]4zy", true);
      assertEquals(0, int0);
      
      String string1 = "+5^~]eAb";
      String string2 = StringUtils.substringAfterLast("+5^~]eAb", (-1433));
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("", string2);
      
      CharSequence[] charSequenceArray0 = new CharSequence[8];
      charSequenceArray0[0] = (CharSequence) "+5^~]eAb";
      charSequenceArray0[1] = (CharSequence) "+5^~]eAb";
      charSequenceArray0[2] = (CharSequence) "jZ2Xbq8JxDS]4zy";
      String string3 = StringUtils.remove("+5^~]eAb", "");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals("+5^~]eAb", string3);
      
      charSequenceArray0[3] = (CharSequence) "+5^~]eAb";
      charSequenceArray0[4] = (CharSequence) "+5^~]eAb";
      int int1 = (-349);
      Vector<CharBuffer> vector0 = null;
      try {
        vector0 = new Vector<CharBuffer>((-349));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal Capacity: -349
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test613()  throws Throwable  {
      String[] stringArray0 = new String[7];
      int int0 = StringUtils.lastIndexOfAny(stringArray0[0], stringArray0);
      assertEquals(7, stringArray0.length);
      assertEquals((-1), int0);
      
      int int1 = StringUtils.compare("gth less than 2", "gth less than 2", true);
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      String[] stringArray1 = StringUtils.stripAll(stringArray0, "gth less than 2");
      assertNotNull(stringArray1);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(7, stringArray0.length);
      assertEquals(7, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      String string0 = StringUtils.rightPad("pV&d&F@?O[kpV&d&F@?O[k", 0, "pV&d&F@?O[kpV&d&F@?O[k");
      assertNotNull(string0);
      assertEquals("pV&d&F@?O[kpV&d&F@?O[k", string0);
  }

  @Test(timeout = 4000)
  public void test614()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      int int0 = StringUtils.indexOfDifference(charSequenceArray0);
      assertEquals(0, charSequenceArray0.length);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test615()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      String string0 = StringUtils.substring("", 0, 0);
      assertNotNull(string0);
      assertEquals("", string0);
      
      charSequenceArray0[0] = (CharSequence) "";
      int int0 = StringUtils.indexOfDifference(charSequenceArray0);
      assertEquals(1, charSequenceArray0.length);
      assertEquals((-1), int0);
      
      int int1 = StringUtils.compareIgnoreCase("[loWDhia-u", "");
      assertFalse(int1 == int0);
      assertEquals(10, int1);
  }

  @Test(timeout = 4000)
  public void test616()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      charSequenceArray0[0] = (CharSequence) "org.apache.c";
      charSequenceArray0[1] = (CharSequence) "org.apache.c";
      int int0 = StringUtils.lastIndexOfAny(charSequenceArray0[1], charSequenceArray0);
      assertEquals(4, charSequenceArray0.length);
      assertEquals(0, int0);
      
      boolean boolean0 = StringUtils.isWhitespace("org.apache.c");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test617()  throws Throwable  {
      String[] stringArray0 = Locale.getISOLanguages();
      assertNotNull(stringArray0);
      assertEquals(188, stringArray0.length);
      
      int int0 = StringUtils.lastIndexOfAny("d/\"Z7FPYtK-O", stringArray0);
      assertEquals(188, stringArray0.length);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test618()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      String string0 = StringUtils.trim("Z>yD=");
      assertNotNull(string0);
      assertEquals("Z>yD=", string0);
      
      String string1 = StringUtils.mid("Z>yD=", 18, 9);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      
      PriorityQueue<Integer> priorityQueue0 = new PriorityQueue<Integer>();
      assertNotNull(priorityQueue0);
      assertEquals(0, priorityQueue0.size());
      assertFalse(priorityQueue0.contains(18));
      
      String string2 = StringUtils.chop("");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertEquals("", string2);
  }

  @Test(timeout = 4000)
  public void test619()  throws Throwable  {
      String string0 = StringUtils.truncate("r2", 8184);
      assertNotNull(string0);
      assertEquals("r2", string0);
      
      String string1 = StringUtils.stripToEmpty("ac]lh;4");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("ac]lh;4", string1);
      
      String string2 = StringUtils.normalizeSpace("ac]lh;4");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertEquals("ac]lh;4", string2);
      
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      boolean boolean0 = StringUtils.isNoneBlank(charSequenceArray0);
      assertEquals(0, charSequenceArray0.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test620()  throws Throwable  {
      String string0 = StringUtils.truncate("r2", 12, 12);
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.stripToEmpty("...");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("...", string1);
      
      String string2 = StringUtils.substringAfterLast("r2", (-1232));
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertEquals("", string2);
  }

  @Test(timeout = 4000)
  public void test621()  throws Throwable  {
      String string0 = StringUtils.capitalize("{}");
      assertNotNull(string0);
      assertEquals("{}", string0);
      
      String string1 = StringUtils.getDigits("{}");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
  }

  @Test(timeout = 4000)
  public void test622()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      Object object1 = new Object();
      assertNotNull(object1);
      assertFalse(object1.equals((Object)object0));
      
      objectArray0[1] = object1;
      String string0 = StringUtils.join(objectArray0, "6lU2V", (-1451), (-1451));
      assertNotNull(string0);
      assertEquals(2, objectArray0.length);
      assertEquals("", string0);
      
      String string1 = StringUtils.capitalize("Vbm");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("Vbm", string1);
      
      String string2 = StringUtils.chop("org.apache.commons.lang3.ArrayUtils");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("org.apache.commons.lang3.ArrayUtil", string2);
      
      String string3 = StringUtils.defaultString("Vbm");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string1));
      assertEquals("Vbm", string3);
  }

  @Test(timeout = 4000)
  public void test623()  throws Throwable  {
      String string0 = StringUtils.swapCase("/swe]");
      assertNotNull(string0);
      assertEquals("/SWE]", string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      charSequenceArray0[0] = (CharSequence) "/SWE]";
      charSequenceArray0[1] = (CharSequence) "/SWE]";
      charSequenceArray0[2] = (CharSequence) "/swe]";
      charSequenceArray0[3] = (CharSequence) "/SWE]";
      String string1 = StringUtils.center("TeM", (-1172), "R%gkN2X");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("TeM", string1);
      
      String string2 = StringUtils.capitalize((String) null);
      assertNull(string2);
      
      String string3 = StringUtils.center((String) null, 3036, "|3v\"%K_8b");
      assertNull(string3);
      
      boolean boolean0 = StringUtils.isEmpty((CharSequence) null);
      assertTrue(boolean0);
      
      boolean boolean1 = StringUtils.isWhitespace(charSequenceArray0[0]);
      assertEquals(4, charSequenceArray0.length);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test624()  throws Throwable  {
      String string0 = StringUtils.center("xxUjava.lang.Object@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.Object@50d3e7ejava.lang.Object@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.Object@50d3e7ejava.lang.Object@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.Object@50d3e7ejava.lang.Object@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.Object@50d3e7e", 34);
      assertNotNull(string0);
      
      String string1 = StringUtils.wrapIfMissing("xxUjava.lang.Object@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.Object@50d3e7ejava.lang.Object@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.Object@50d3e7ejava.lang.Object@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.Object@50d3e7ejava.lang.Object@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.Object@50d3e7e", 'P');
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.difference("Rr9rz.Ukuw<#xx9GUR", "PxxUjava.lang.Object@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.Object@50d3e7ejava.lang.Object@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.Object@50d3e7ejava.lang.Object@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.Object@50d3e7ejava.lang.Object@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.Object@50d3e7eP");
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test625()  throws Throwable  {
      Stack<Integer> stack0 = new Stack<Integer>();
      assertNotNull(stack0);
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      
      Integer integer0 = new Integer(0);
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      boolean boolean0 = stack0.add(integer0);
      assertFalse(stack0.isEmpty());
      assertEquals("[0]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(1, stack0.size());
      assertFalse(stack0.empty());
      assertTrue(boolean0);
      assertTrue(stack0.contains(0));
      
      ListIterator<Integer> listIterator0 = stack0.listIterator(0);
      assertNotNull(listIterator0);
      assertFalse(stack0.isEmpty());
      assertEquals("[0]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(1, stack0.size());
      assertFalse(stack0.empty());
      assertFalse(listIterator0.hasPrevious());
      assertTrue(listIterator0.hasNext());
      assertTrue(stack0.contains(0));
      
      boolean boolean1 = stack0.add(integer0);
      assertFalse(stack0.isEmpty());
      assertEquals("[0, 0]", stack0.toString());
      assertEquals(2, stack0.size());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertTrue(stack0.contains(0));
      
      boolean boolean2 = stack0.add(integer0);
      assertEquals("[0, 0, 0]", stack0.toString());
      assertFalse(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertEquals(3, stack0.size());
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2);
      assertTrue(stack0.contains(0));
      
      ListIterator<Integer> listIterator1 = stack0.listIterator();
      assertNotNull(listIterator1);
      assertNotSame(listIterator1, listIterator0);
      assertEquals("[0, 0, 0]", stack0.toString());
      assertFalse(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertEquals(3, stack0.size());
      assertTrue(listIterator1.hasNext());
      assertFalse(listIterator1.hasPrevious());
      assertFalse(listIterator1.equals((Object)listIterator0));
      assertTrue(stack0.contains(0));
      
      Iterator<Integer> iterator0 = stack0.iterator();
      assertNotNull(iterator0);
      assertEquals("[0, 0, 0]", stack0.toString());
      assertFalse(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertEquals(3, stack0.size());
      assertTrue(stack0.contains(0));
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "", (CharSequence) "");
      assertEquals(0, int0);
      
      String string0 = StringUtils.replacePattern("", "ng3.StringUtils", (String) null);
      assertNotNull(string0);
      assertEquals("", string0);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("oQG?.2$Vo0", '/');
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      String string1 = StringUtils.firstNonBlank(stringArray0);
      assertNotNull(string1);
      assertEquals(1, stringArray0.length);
      assertFalse(string1.equals((Object)string0));
      assertEquals("oQG?.2$Vo0", string1);
      
      String string2 = StringUtils.deleteWhitespace((String) null);
      assertNull(string2);
      
      String string3 = StringUtils.abbreviate("", 1076, 0);
      assertNotNull(string3);
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("", string3);
  }

  @Test(timeout = 4000)
  public void test626()  throws Throwable  {
      Object[] objectArray0 = new Object[5];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      Object object1 = new Object();
      assertNotNull(object1);
      assertFalse(object1.equals((Object)object0));
      
      objectArray0[1] = object1;
      objectArray0[2] = object0;
      Object object2 = new Object();
      assertNotNull(object2);
      assertFalse(object2.equals((Object)object1));
      assertFalse(object2.equals((Object)object0));
      
      objectArray0[3] = object2;
      Object object3 = new Object();
      assertNotNull(object3);
      assertFalse(object3.equals((Object)object0));
      assertFalse(object3.equals((Object)object2));
      assertFalse(object3.equals((Object)object1));
      
      objectArray0[4] = object3;
      String string0 = StringUtils.join(objectArray0, "");
      assertNotNull(string0);
      assertEquals(5, objectArray0.length);
      
      String string1 = StringUtils.wrapIfMissing("java.lang.Object@52b2be8djava.lang.Object@15bce547java.lang.Object@52b2be8djava.lang.Object@1ec0c60ejava.lang.Object@1b31a023", "java.lang.Object@52b2be8djava.lang.Object@15bce547java.lang.Object@52b2be8djava.lang.Object@1ec0c60ejava.lang.Object@1b31a023");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("wDPtb=E*0D +", "{}");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      String[] stringArray1 = StringUtils.splitByCharacterTypeCamelCase("");
      assertNotNull(stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(0, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      Vector<Locale.LanguageRange> vector0 = new Vector<Locale.LanguageRange>();
      assertNotNull(vector0);
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      
      HashSet<Locale> hashSet0 = new HashSet<Locale>();
      assertNotNull(hashSet0);
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      
      Locale locale0 = Locale.lookup(vector0, hashSet0);
      assertNull(locale0);
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      
      // Undeclared exception!
      try { 
        StringUtils.getFuzzyDistance("java.lang.Object@52b2be8djava.lang.Object@15bce547java.lang.Object@52b2be8djava.lang.Object@1ec0c60ejava.lang.Object@1b31a023", "java.lang.Object@52b2be8djava.lang.Object@15bce547java.lang.Object@52b2be8djava.lang.Object@1ec0c60ejava.lang.Object@1b31a023", (Locale) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Locale must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test627()  throws Throwable  {
      String string0 = StringUtils.join((Iterator<?>) null, "");
      assertNull(string0);
      
      String string1 = StringUtils.substringBeforeLast("The Array must not be null", "");
      assertNotNull(string1);
      assertEquals("The Array must not be null", string1);
      
      String string2 = StringUtils.abbreviate((String) null, 125, 4);
      assertNull(string2);
      
      String string3 = StringUtils.reverseDelimited((String) null, 'k');
      assertNull(string3);
  }

  @Test(timeout = 4000)
  public void test628()  throws Throwable  {
      String string0 = StringUtils.abbreviateMiddle("E2*1.s*OqQHFD&gQd9O", "E2*1.s*OqQHFD&gQd9O", (-526));
      assertNotNull(string0);
      assertEquals("E2*1.s*OqQHFD&gQd9O", string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[0] = (CharSequence) "E2*1.s*OqQHFD&gQd9O";
      charSequenceArray0[1] = (CharSequence) "E2*1.s*OqQHFD&gQd9O";
      boolean boolean0 = StringUtils.equalsAnyIgnoreCase("E2*1.s*OqQHFD&gQd9O", charSequenceArray0);
      assertEquals(2, charSequenceArray0.length);
      assertTrue(boolean0);
      
      int[] intArray0 = new int[1];
      intArray0[0] = (-395);
      String string1 = StringUtils.join(intArray0, 'h', (-1347), (-5235));
      assertNotNull(string1);
      assertEquals(1, intArray0.length);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertArrayEquals(new int[] {(-395)}, intArray0);
      
      Locale locale0 = Locale.ENGLISH;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getCountry());
      
      int int0 = StringUtils.getFuzzyDistance(charSequenceArray0[0], ".M,KjXgwysMU,", locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals(2, charSequenceArray0.length);
      assertEquals(1, int0);
      
      int int1 = StringUtils.countMatches((CharSequence) "E2*1.s*OqQHFD&gQd9O", ':');
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      String string2 = StringUtils.removeEndIgnoreCase("4", (String) null);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("4", string2);
  }

  @Test(timeout = 4000)
  public void test629()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("oQG?.2$Vo0", '/');
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      String string0 = StringUtils.firstNonBlank(stringArray0);
      assertNotNull(string0);
      assertEquals(1, stringArray0.length);
      assertEquals("oQG?.2$Vo0", string0);
      
      String string1 = StringUtils.deleteWhitespace("P=w6M[2+D;zto[Sp8$R");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("P=w6M[2+D;zto[Sp8$R", string1);
      
      // Undeclared exception!
      try { 
        StringUtils.abbreviate("5$X<8_Te'Bqq5", 122, (-134));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum abbreviation width is 4
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test630()  throws Throwable  {
      Locale locale0 = Locale.CHINESE;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("zh", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      
      String string0 = StringUtils.center("|&,@*]7mUY=^V1x{r", 232);
      assertNotNull(string0);
      assertEquals("                                                                                                           |&,@*]7mUY=^V1x{r                                                                                                            ", string0);
      
      int int0 = StringUtils.getFuzzyDistance("                                                                                                           |&,@*]7mUY=^V1x{r                                                                                                            ", "|&,@*]7mUY=^V1x{r", locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("zh", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals(49, int0);
  }

  @Test(timeout = 4000)
  public void test631()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = " vs ";
      String string0 = StringUtils.join((Object[]) stringArray0, ')');
      assertNotNull(string0);
      assertEquals(5, stringArray0.length);
      assertEquals(" vs ))))", string0);
  }

  @Test(timeout = 4000)
  public void test632()  throws Throwable  {
      String string0 = StringUtils.stripAccents("wDPtb=E*0D +");
      assertNotNull(string0);
      assertEquals("wDPtb=E*0D +", string0);
      
      String string1 = StringUtils.defaultString("wDPtb=E*0D +");
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("wDPtb=E*0D +", string1);
      
      String string2 = StringUtils.capitalize("/h81Uu");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("/h81Uu", string2);
      
      String string3 = StringUtils.reverseDelimited("wDPtb=E*0D +", 'W');
      assertNotNull(string3);
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string1));
      assertEquals("wDPtb=E*0D +", string3);
  }

  @Test(timeout = 4000)
  public void test633()  throws Throwable  {
      String string0 = StringUtils.unwrap("java.lang.Object@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.Object@50d3e7ejava.lang.Object@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.Object@50d3e7e", "java.lang.Object@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.Object@50d3e7ejava.lang.Object@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.Object@50d3e7e");
      assertNotNull(string0);
      
      int int0 = StringUtils.countMatches((CharSequence) "java.lang.Object@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.Object@50d3e7ejava.lang.Object@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.Object@50d3e7e", (CharSequence) "java.lang.Object@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.Object@50d3e7ejava.lang.Object@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.Object@50d3e7e");
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test634()  throws Throwable  {
      String string0 = StringUtils.getCommonPrefix((String[]) null);
      assertNotNull(string0);
      assertEquals("", string0);
      
      boolean boolean0 = StringUtils.isAllLowerCase("");
      assertFalse(boolean0);
      
      String string1 = StringUtils.truncate("", 943, 790);
      assertNotNull(string1);
      assertEquals("", string1);
      
      // Undeclared exception!
      try { 
        StringUtils.removeAll("", "No4d{d@Z;EIq");
        fail("Expecting exception: PatternSyntaxException");
      
      } catch(PatternSyntaxException e) {
         //
         // Illegal repetition near index 3
         // No4d{d@Z;EIq
         //    ^
         //
         verifyException("java.util.regex.Pattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test635()  throws Throwable  {
      String string0 = StringUtils.replaceOnceIgnoreCase("\r", "\r", "\r");
      assertNotNull(string0);
      assertEquals("\r", string0);
      
      int int0 = StringUtils.compare("B<EiC_N<EQN3s*", "", true);
      assertEquals(15, int0);
      
      int int1 = StringUtils.lastIndexOf((CharSequence) "", 15);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      String string1 = StringUtils.getDigits("Minimum abbreviation width with offset is %dYsuCkHbX");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
  }

  @Test(timeout = 4000)
  public void test636()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      assertNotNull(stringWriter0);
      assertEquals("", stringWriter0.toString());
      
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      assertNotNull(stringBuffer0);
      assertEquals("", stringWriter0.toString());
      assertEquals(0, stringBuffer0.length());
      assertEquals("", stringBuffer0.toString());
      
      int int0 = StringUtils.lastIndexOf((CharSequence) stringBuffer0, Integer.MAX_VALUE);
      assertEquals("", stringWriter0.toString());
      assertEquals(0, stringBuffer0.length());
      assertEquals("", stringBuffer0.toString());
      assertEquals((-1), int0);
      
      String string0 = "Object varargs must not be null";
      // Undeclared exception!
      try { 
        StringUtils.removeAll("Object varargs must not be null", " [");
        fail("Expecting exception: PatternSyntaxException");
      
      } catch(PatternSyntaxException e) {
         //
         // Unclosed character class near index 1
         //  [
         //  ^
         //
         verifyException("java.util.regex.Pattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test637()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("", "d/\"Z7FPYtK-O", 0);
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      
      String string0 = StringUtils.wrap("", "java.lang.Object@52b769b5java.lang.Object@1d3febfajava.lang.Object@4c16c3aejava.lang.Object@4a32f5f1java.lang.Object@23a1c7c3java.lang.Object@52b769b5java.lang.Object@1d3febfajava.lang.Object@4c16c3aejava.lang.Object@4a32f5f1java.lang.Object@23a1c7c3");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.rightPad("", (-1750), "b/k?ASVW4");
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      
      boolean boolean0 = StringUtils.startsWith("", "d/\"Z7FPYtK-O");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test638()  throws Throwable  {
      String string0 = StringUtils.right("FW;]~`2^s_P6:NRY", (-2094));
      assertNotNull(string0);
      assertEquals("", string0);
      
      boolean boolean0 = StringUtils.isAllLowerCase("");
      assertFalse(boolean0);
      
      String string1 = StringUtils.abbreviate("", 43, (-3740));
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "";
      charSequenceArray0[2] = (CharSequence) "FW;]~`2^s_P6:NRY";
      charSequenceArray0[3] = (CharSequence) "";
      int int0 = StringUtils.lastIndexOfAny("", charSequenceArray0);
      assertEquals(4, charSequenceArray0.length);
      assertEquals(0, int0);
      
      String string2 = StringUtils.defaultString("Rj8j[*");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("Rj8j[*", string2);
      
      String string3 = StringUtils.repeat("FW;]~`2^s_P6:NRY", 0);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string1));
      assertEquals("", string3);
      
      int int1 = StringUtils.countMatches((CharSequence) "Rj8j[*", (CharSequence) "");
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      
      String string4 = StringUtils.leftPad((String) null, (-3740), "FW;]~`2^s_P6:NRY");
      assertNull(string4);
      
      int int2 = StringUtils.indexOfDifference(charSequenceArray0);
      assertEquals(4, charSequenceArray0.length);
      assertTrue(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals(0, int2);
      
      String string5 = StringUtils.join((List<?>) null, ';', (-1333), 0);
      assertNull(string5);
      
      boolean boolean1 = StringUtils.isAllLowerCase("Rj8j[*");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      int int3 = StringUtils.countMatches((CharSequence) "FW;]~`2^s_P6:NRY", 'P');
      assertFalse(int3 == int2);
      assertFalse(int3 == int0);
      assertFalse(int3 == int1);
      assertEquals(1, int3);
      
      String string6 = StringUtils.join((List<?>) null, (String) null, 0, 0);
      assertNull(string6);
      
      int int4 = StringUtils.lastIndexOfIgnoreCase((CharSequence) null, (CharSequence) "Rj8j[*");
      assertFalse(int4 == int2);
      assertFalse(int4 == int1);
      assertFalse(int4 == int3);
      assertFalse(int4 == int0);
      assertEquals((-1), int4);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      // Undeclared exception!
      try { 
        StringUtils.join(booleanArray0, ';', 0, 11);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test639()  throws Throwable  {
      String string0 = StringUtils.replaceOnceIgnoreCase("", "", "");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.rightPad("", 10, '{');
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("{{{{{{{{{{", string1);
      
      Vector<CharBuffer> vector0 = new Vector<CharBuffer>();
      assertNotNull(vector0);
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      
      // Undeclared exception!
      try { 
        StringUtils.join((List<?>) vector0, "", 5, 13);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // toIndex = 13
         //
         verifyException("java.util.SubList", e);
      }
  }

  @Test(timeout = 4000)
  public void test640()  throws Throwable  {
      ArrayList<Locale.Category> arrayList0 = new ArrayList<Locale.Category>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      String string0 = StringUtils.join((List<?>) arrayList0, "US.My:o_ufGp", 4, 4);
      assertNotNull(string0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test641()  throws Throwable  {
      Stack<Integer> stack0 = new Stack<Integer>();
      assertNotNull(stack0);
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      
      String string0 = "";
      Integer integer0 = new Integer(0);
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      ListIterator<Integer> listIterator0 = stack0.listIterator(0);
      assertNotNull(listIterator0);
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertFalse(listIterator0.hasPrevious());
      assertFalse(listIterator0.hasNext());
      assertFalse(stack0.contains(0));
      
      boolean boolean0 = stack0.add(integer0);
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertEquals("[0]", stack0.toString());
      assertFalse(stack0.isEmpty());
      assertEquals(1, stack0.size());
      assertTrue(boolean0);
      assertTrue(stack0.contains(0));
      
      boolean boolean1 = stack0.add(integer0);
      assertEquals("[0, 0]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertEquals(2, stack0.size());
      assertFalse(stack0.isEmpty());
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertTrue(stack0.contains(0));
      
      ListIterator<Integer> listIterator1 = stack0.listIterator();
      assertNotNull(listIterator1);
      assertNotSame(listIterator1, listIterator0);
      assertEquals("[0, 0]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertEquals(2, stack0.size());
      assertFalse(stack0.isEmpty());
      assertFalse(listIterator1.hasPrevious());
      assertTrue(listIterator1.hasNext());
      assertFalse(listIterator1.equals((Object)listIterator0));
      assertTrue(stack0.contains(0));
      
      Iterator<Integer> iterator0 = stack0.iterator();
      assertNotNull(iterator0);
      assertEquals("[0, 0]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertEquals(2, stack0.size());
      assertFalse(stack0.isEmpty());
      assertTrue(stack0.contains(0));
      
      // Undeclared exception!
      try { 
        StringUtils.join((List<?>) stack0, "", (-1226), (-140));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // fromIndex = -1226
         //
         verifyException("java.util.SubList", e);
      }
  }

  @Test(timeout = 4000)
  public void test642()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      String string0 = StringUtils.substring("", 0, 0);
      assertNotNull(string0);
      assertEquals("", string0);
      
      charSequenceArray0[0] = (CharSequence) "";
      int int0 = StringUtils.compareIgnoreCase("[loWDhia-u", "");
      assertEquals(10, int0);
  }

  @Test(timeout = 4000)
  public void test643()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = '[';
      charArray0[0] = '[';
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "", (CharSequence) "\n");
      assertEquals(1, int0);
      
      boolean boolean0 = StringUtils.isBlank("\n");
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        StringUtils.abbreviate("\n", " ", (-556), 1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum abbreviation width is 2
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test644()  throws Throwable  {
      String string0 = StringUtils.replaceOnceIgnoreCase("", "", "");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.rightPad("", 10, '{');
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("{{{{{{{{{{", string1);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("", '{');
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      
      String string2 = StringUtils.firstNonBlank(stringArray0);
      assertNull(string2);
      assertEquals(0, stringArray0.length);
      
      String string3 = StringUtils.chomp("");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string0));
      assertEquals("", string3);
      
      char[] charArray0 = new char[0];
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "gD", charArray0);
      assertEquals(0, charArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new char[] {}, charArray0);
  }

  @Test(timeout = 4000)
  public void test645()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = " vs ";
      String string0 = StringUtils.strip(" vs ");
      assertNotNull(string0);
      assertEquals("vs", string0);
      
      String string1 = StringUtils.substringAfter("Zu*4-n!o`!mH6S_v", 0);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      
      String string2 = StringUtils.defaultIfBlank(" vs ", "");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals(" vs ", string2);
      
      Locale locale0 = Locale.CANADA;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("CA", locale0.getCountry());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("en_CA", locale0.toString());
      assertEquals("en", locale0.getLanguage());
      
      String string3 = StringUtils.substringBefore(" vs ", "Zu*4-n!o`!mH6S_v");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string2));
      assertEquals(" vs ", string3);
  }

  @Test(timeout = 4000)
  public void test646()  throws Throwable  {
      String string0 = StringUtils.right(" is not in the range '0' - '9' is not in the range '0' - '9'", (-1540));
      assertNotNull(string0);
      assertEquals("", string0);
      
      Locale locale0 = Locale.FRANCE;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr_FR", locale0.toString());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("FR", locale0.getCountry());
      
      String string1 = StringUtils.upperCase(" is not in the range '0' - '9' is not in the range '0' - '9'", locale0);
      assertNotNull(string1);
      assertEquals("", locale0.getVariant());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr_FR", locale0.toString());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("FR", locale0.getCountry());
      assertFalse(string1.equals((Object)string0));
      assertEquals(" IS NOT IN THE RANGE '0' - '9' IS NOT IN THE RANGE '0' - '9'", string1);
      
      boolean boolean0 = StringUtils.isAsciiPrintable("");
      assertTrue(boolean0);
      
      String string2 = StringUtils.substringBeforeLast("", "fJVe;mma35");
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("", string2);
  }

  @Test(timeout = 4000)
  public void test647()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("L9%H4T;", 'z');
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test648()  throws Throwable  {
      String string0 = StringUtils.replaceOnceIgnoreCase("", "", "");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.mid("", 104, 69);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      
      PriorityQueue<Integer> priorityQueue0 = new PriorityQueue<Integer>();
      assertNotNull(priorityQueue0);
      assertEquals(0, priorityQueue0.size());
      assertFalse(priorityQueue0.contains(69));
      
      String string2 = StringUtils.rightPad("", (-1093), "");
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertEquals("", string2);
      
      String string3 = StringUtils.chop("");
      assertNotNull(string3);
      assertTrue(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string2));
      assertEquals("", string3);
  }

  @Test(timeout = 4000)
  public void test649()  throws Throwable  {
      int int0 = StringUtils.length("java.lang.Object@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.Object@50d3e7ejava.lang.Object@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.Object@50d3e7e");
      assertEquals(248, int0);
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'R';
      charArray0[1] = 'G';
      charArray0[2] = 'w';
      charArray0[3] = '[';
      boolean boolean0 = StringUtils.containsAny((CharSequence) "java.lang.Object@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.Object@50d3e7ejava.lang.Object@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.Object@50d3e7e", charArray0);
      assertEquals(4, charArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new char[] {'R', 'G', 'w', '['}, charArray0);
      
      String string0 = StringUtils.substringAfter("\n", 248);
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.normalizeSpace("");
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      
      String string2 = StringUtils.truncate("java.lang.Object@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.Object@50d3e7ejava.lang.Object@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.Object@50d3e7e", 964, 969);
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string1));
      assertEquals("", string2);
      
      String string3 = StringUtils.abbreviate("\n", 814, 4043);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals("\n", string3);
  }

  @Test(timeout = 4000)
  public void test650()  throws Throwable  {
      String string0 = StringUtils.substringAfterLast("", 2690);
      assertNotNull(string0);
      assertEquals("", string0);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "", "");
      assertEquals((-1), int0);
      
      String string1 = StringUtils.replaceOnce("", "af-_Xu1o~2a", "af-_Xu1o~2a");
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Vector<Locale.LanguageRange> vector0 = new Vector<Locale.LanguageRange>(linkedList0);
      assertNotNull(vector0);
      assertEquals(0, linkedList0.size());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals(0, vector0.capacity());
      
      PriorityQueue<String> priorityQueue0 = new PriorityQueue<String>();
      assertNotNull(priorityQueue0);
      assertEquals(0, priorityQueue0.size());
      assertFalse(priorityQueue0.contains(""));
      
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) vector0, (Collection<String>) priorityQueue0);
      assertNotNull(list0);
      assertEquals(0, linkedList0.size());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals(0, vector0.capacity());
      assertEquals(0, priorityQueue0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertFalse(priorityQueue0.contains(""));
      assertFalse(list0.contains(""));
      
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>(priorityQueue0);
      assertNotNull(linkedHashSet0);
      assertEquals(0, priorityQueue0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertFalse(priorityQueue0.contains(""));
      assertFalse(linkedHashSet0.contains(""));
      
      String string2 = StringUtils.join((Iterable<?>) vector0, ')');
      assertNotNull(string2);
      assertEquals(0, linkedList0.size());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals(0, vector0.capacity());
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertEquals("", string2);
      
      boolean boolean0 = StringUtils.isWhitespace("");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test651()  throws Throwable  {
      String string0 = StringUtils.remove("$4'Tcj.*5", 'o');
      assertNotNull(string0);
      assertEquals("$4'Tcj.*5", string0);
      
      String string1 = "\\u";
      String string2 = StringUtils.replaceOnceIgnoreCase("$4'Tcj.*5", "", string1);
      assertNotNull(string2);
      assertFalse(string1.equals((Object)string0));
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("$4'Tcj.*5", string2);
      
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[0] = (CharSequence) "$4'Tcj.*5";
      String string3 = StringUtils.replaceChars((String) null, 's', 's');
      assertNull(string3);
      
      charSequenceArray0[1] = (CharSequence) null;
      boolean boolean0 = StringUtils.isAllBlank(charSequenceArray0);
      assertEquals(2, charSequenceArray0.length);
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.equalsIgnoreCase(string1, (CharSequence) null);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string4 = StringUtils.abbreviate((String) null, "$4'Tcj.*5", (-1687), (-3228));
      assertNull(string4);
  }

  @Test(timeout = 4000)
  public void test652()  throws Throwable  {
      boolean boolean0 = StringUtils.isEmpty("TheArramustno^benull");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isWhitespace("TheArramustno^benull");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test653()  throws Throwable  {
      boolean boolean0 = StringUtils.startsWith("US.^e:o_ufGpA", "US.^e:o_ufGpA");
      assertTrue(boolean0);
      
      boolean boolean1 = StringUtils.containsAny((CharSequence) "US.^e:o_ufGpA", (char[]) null);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string0 = StringUtils.replaceChars("US.^e:o_ufGpA", '[', '[');
      assertNotNull(string0);
      assertEquals("US.^e:o_ufGpA", string0);
      
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "US.^e:o_ufGpA", (char[]) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test654()  throws Throwable  {
      String string0 = StringUtils.replaceChars("{}", '1', '#');
      assertNotNull(string0);
      assertEquals("{}", string0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("pV&d&F@?O[k", "pV&d&F@?O[k");
      assertNotNull(stringArray0);
      assertEquals(2, stringArray0.length);
      
      boolean boolean0 = StringUtils.containsAny((CharSequence) "pV&d&F@?O[k", (CharSequence) "pV&d&F@?O[k");
      assertTrue(boolean0);
      
      boolean boolean1 = StringUtils.isWhitespace("pV&d&F@?O[k");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String[] stringArray1 = StringUtils.splitPreserveAllTokens((String) null, "{}");
      assertNull(stringArray1);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)9;
      byteArray0[1] = (byte)21;
      byteArray0[2] = (byte) (-128);
      byteArray0[3] = (byte) (-74);
      byteArray0[4] = (byte)56;
      byteArray0[5] = (byte)5;
      byteArray0[6] = (byte)41;
      // Undeclared exception!
      try { 
        Charset.forName("Threshold must not be negative");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // Threshold must not be negative
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test655()  throws Throwable  {
      String string0 = StringUtils.reverse("Minimum abbreviation width with offset is %d");
      assertNotNull(string0);
      assertEquals("d% si tesffo htiw htdiw noitaiverbba muminiM", string0);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)2254;
      shortArray0[1] = (short)16;
      // Undeclared exception!
      try { 
        StringUtils.join(shortArray0, 'h', 0, 8);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test656()  throws Throwable  {
      String string0 = StringUtils.substringAfter((String) null, "wDPtb=E*0D +");
      assertNull(string0);
      
      String[] stringArray0 = StringUtils.split((String) null, '%');
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test657()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      assertNotNull(stringWriter0);
      assertEquals("", stringWriter0.toString());
      
      String string0 = StringUtils.substringAfter("eF2@8.JL?t]*", "eF2@8.JL?t]*");
      assertNotNull(string0);
      assertEquals("", string0);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "eF2@8.JL?t]*", "es`-mCa0u=]@|On8X7H27[2Or");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test658()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("", "", 1067);
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      
      String string0 = StringUtils.left("", 1067);
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.rightPad("", 1067);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      boolean[] booleanArray0 = new boolean[0];
      String string2 = StringUtils.join(booleanArray0, 'x', 1067, 1067);
      assertNotNull(string2);
      assertEquals(0, booleanArray0.length);
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertEquals("", string2);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "", (CharSequence) "");
      assertEquals(0, int0);
      
      boolean boolean0 = StringUtils.isNoneEmpty(stringArray0);
      assertEquals(0, stringArray0.length);
      assertTrue(boolean0);
      
      String string3 = StringUtils.replaceChars("", "=.dg1Z1035!b_", "");
      assertNotNull(string3);
      assertTrue(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string0));
      assertEquals("", string3);
      
      String string4 = StringUtils.toRootUpperCase("pV&d&F@?O[k");
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertEquals("PV&D&F@?O[K", string4);
  }

  @Test(timeout = 4000)
  public void test659()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = '[';
      charArray0[1] = '[';
      charArray0[2] = '[';
      boolean boolean0 = StringUtils.containsAny((CharSequence) "", charArray0);
      assertEquals(3, charArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new char[] {'[', '[', '['}, charArray0);
      
      long[] longArray0 = new long[0];
      // Undeclared exception!
      try { 
        StringUtils.join(longArray0, '[', (-655), (-128));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -655
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test660()  throws Throwable  {
      long[] longArray0 = new long[5];
      longArray0[1] = 0L;
      longArray0[2] = 0L;
      longArray0[3] = 4L;
      longArray0[4] = 0L;
      String string0 = StringUtils.join(longArray0, '&');
      assertNotNull(string0);
      assertEquals(5, longArray0.length);
      assertEquals("0&0&0&4&0", string0);
      assertArrayEquals(new long[] {0L, 0L, 0L, 4L, 0L}, longArray0);
      
      try { 
        StringUtils.getBytes("ASG?bZ0Eo.k!?8*IRfKOe e~MFd!&{'et", "Supplied value must be a valid byte literal between -32768 and 32767: [");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(UnsupportedEncodingException e) {
      }
  }

  @Test(timeout = 4000)
  public void test661()  throws Throwable  {
      String string0 = StringUtils.left("", 128);
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.substringBefore("{}", "]");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("{}", string1);
      
      long[] longArray0 = new long[0];
      String string2 = StringUtils.join(longArray0, 'N', 128, (-2181));
      assertNotNull(string2);
      assertEquals(0, longArray0.length);
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("", string2);
      assertArrayEquals(new long[] {}, longArray0);
  }

  @Test(timeout = 4000)
  public void test662()  throws Throwable  {
      String string0 = StringUtils.remove("#r", 'o');
      assertNotNull(string0);
      assertEquals("#r", string0);
      
      int int0 = StringUtils.indexOf((CharSequence) "#r", (CharSequence) "#r");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test663()  throws Throwable  {
      String string0 = "...";
      String string1 = "D$8Lf)!VS<5=f6GDM";
      String string2 = StringUtils.replaceChars("...", "D$8Lf)!VS<5=f6GDM", (String) null);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertEquals("...", string2);
      
      boolean boolean0 = StringUtils.containsNone((CharSequence) "...", (char[]) null);
      assertTrue(boolean0);
      
      boolean boolean1 = StringUtils.isAsciiPrintable("...");
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "...", (CharSequence) "D$8Lf)!VS<5=f6GDM", (-656));
      assertEquals((-1), int0);
      
      int int1 = StringUtils.indexOfDifference((CharSequence) "...", (CharSequence) "...");
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      String string3 = StringUtils.join((Iterable<?>) null, "D$8Lf)!VS<5=f6GDM");
      assertNull(string3);
      
      String string4 = StringUtils.chop("...");
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertEquals("..", string4);
      
      String string5 = StringUtils.unwrap("=]Un2oPT<", 'U');
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertEquals("=]Un2oPT<", string5);
      
      String string6 = StringUtils.join((Iterable<?>) null, (String) null);
      assertNull(string6);
      
      int int2 = StringUtils.indexOf((CharSequence) null, (-1), (-1));
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals((-1), int2);
      
      String[] stringArray0 = StringUtils.split("=]Un2oPT<");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      String string7 = StringUtils.LF;
      assertNotNull(string7);
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string2));
      assertEquals("\n", string7);
      
      // Undeclared exception!
      try { 
        StringUtils.getJaroWinklerDistance((CharSequence) null, "\n");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test664()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "(d";
      String[] stringArray1 = StringUtils.stripAll(stringArray0);
      assertNotNull(stringArray1);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(1, stringArray0.length);
      assertEquals(1, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      String string0 = StringUtils.strip("(d", "(d");
      assertNotNull(string0);
      assertEquals("", string0);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "(d", (CharSequence[]) stringArray1);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(1, stringArray0.length);
      assertEquals(1, stringArray1.length);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(0, int0);
      
      String string1 = StringUtils.substringBefore("", "");
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
  }

  @Test(timeout = 4000)
  public void test665()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte)0;
      String string0 = "[?JES !E`+9v8&";
      Object object0 = new Object();
      assertNotNull(object0);
      
      String string1 = StringUtils.substringBefore("[?JES !E`+9v8&", "[?JES !E`+9v8&");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      
      // Undeclared exception!
      try { 
        StringUtils.toString(byteArray0, "9jRx#^A!.|");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // 9jRx#^A!.|
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test666()  throws Throwable  {
      String string0 = StringUtils.removePattern("vxq+%x|A^THY#m]", "vxq+%x|A^THY#m]");
      assertNotNull(string0);
      assertEquals("vxq+%x|A^THY#m]", string0);
      
      String string1 = StringUtils.upperCase("vxq+%x|A^THY#m]");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("VXQ+%X|A^THY#M]", string1);
      
      String string2 = StringUtils.trimToEmpty("vxq+%x|A^THY#m]");
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("vxq+%x|A^THY#m]", string2);
      
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Locale.LanguageRange locale_LanguageRange0 = null;
      try {
        locale_LanguageRange0 = new Locale.LanguageRange("VXQ+%X|A^THY#M]", (-87.0));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // weight=-87.0
         //
         verifyException("java.util.Locale$LanguageRange", e);
      }
  }

  @Test(timeout = 4000)
  public void test667()  throws Throwable  {
      String string0 = StringUtils.substringBefore("", "");
      assertNotNull(string0);
      assertEquals("", string0);
      
      Locale locale0 = new Locale("ch", "Vu5UJgigAZaf");
      assertNotNull(locale0);
      assertEquals("ch_VU5UJGIGAZAF", locale0.toString());
      assertEquals("ch", locale0.getLanguage());
      assertEquals("VU5UJGIGAZAF", locale0.getCountry());
      assertEquals("cha", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      
      Locale locale1 = Locale.JAPANESE;
      assertNotNull(locale1);
      assertNotSame(locale1, locale0);
      assertEquals("ja", locale1.getLanguage());
      assertEquals("", locale1.getVariant());
      assertEquals("", locale1.getISO3Country());
      assertEquals("ja", locale1.toString());
      assertEquals("", locale1.getCountry());
      assertEquals("jpn", locale1.getISO3Language());
      assertFalse(locale1.equals((Object)locale0));
      
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      PriorityQueue<String> priorityQueue0 = new PriorityQueue<String>();
      assertNotNull(priorityQueue0);
      assertEquals(0, priorityQueue0.size());
      assertFalse(priorityQueue0.contains("Vu5UJgigAZaf"));
      
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) priorityQueue0);
      assertNotNull(list0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, priorityQueue0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertFalse(priorityQueue0.contains("Vu5UJgigAZaf"));
      assertFalse(list0.contains("Vu5UJgigAZaf"));
      
      String string1 = locale1.getDisplayLanguage(locale0);
      assertNotNull(string1);
      assertNotSame(locale0, locale1);
      assertNotSame(locale1, locale0);
      assertEquals("ch_VU5UJGIGAZAF", locale0.toString());
      assertEquals("ch", locale0.getLanguage());
      assertEquals("VU5UJGIGAZAF", locale0.getCountry());
      assertEquals("cha", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale1.getLanguage());
      assertEquals("", locale1.getVariant());
      assertEquals("", locale1.getISO3Country());
      assertEquals("ja", locale1.toString());
      assertEquals("", locale1.getCountry());
      assertEquals("jpn", locale1.getISO3Language());
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(locale1.equals((Object)locale0));
      assertFalse(string1.equals((Object)string0));
      assertEquals("Japanese", string1);
      
      priorityQueue0.forEach(consumer0);
      assertEquals(0, priorityQueue0.size());
      assertFalse(priorityQueue0.contains("Vu5UJgigAZaf"));
      
      boolean boolean0 = priorityQueue0.add("");
      assertEquals(1, priorityQueue0.size());
      assertTrue(boolean0);
      assertFalse(priorityQueue0.contains("ch"));
      assertTrue(priorityQueue0.contains(""));
      
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      Locale.setDefault(locale1);
      assertNotSame(locale1, locale0);
      assertEquals("ja", locale1.getLanguage());
      assertEquals("", locale1.getVariant());
      assertEquals("", locale1.getISO3Country());
      assertEquals("ja", locale1.toString());
      assertEquals("", locale1.getCountry());
      assertEquals("jpn", locale1.getISO3Language());
      assertFalse(locale1.equals((Object)locale0));
      
      List<String> list1 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) priorityQueue0, locale_FilteringMode0);
      assertNotNull(list1);
      assertNotSame(list1, list0);
      assertEquals(0, linkedList0.size());
      assertEquals(1, priorityQueue0.size());
      assertEquals(0, list1.size());
      assertTrue(list1.isEmpty());
      assertTrue(list1.equals((Object)list0));
      assertFalse(priorityQueue0.contains("ch"));
      assertTrue(priorityQueue0.contains(""));
      assertFalse(list1.contains(""));
      
      String string2 = locale0.getDisplayVariant(locale1);
      assertNotNull(string2);
      assertNotSame(locale0, locale1);
      assertNotSame(locale1, locale0);
      assertEquals("ch_VU5UJGIGAZAF", locale0.toString());
      assertEquals("ch", locale0.getLanguage());
      assertEquals("VU5UJGIGAZAF", locale0.getCountry());
      assertEquals("cha", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale1.getLanguage());
      assertEquals("", locale1.getVariant());
      assertEquals("", locale1.getISO3Country());
      assertEquals("ja", locale1.toString());
      assertEquals("", locale1.getCountry());
      assertEquals("jpn", locale1.getISO3Language());
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(locale1.equals((Object)locale0));
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertEquals("", string2);
      
      String string3 = StringUtils.upperCase("Vu5UJgigAZaf", locale0);
      assertNotNull(string3);
      assertNotSame(locale0, locale1);
      assertEquals("ch_VU5UJGIGAZAF", locale0.toString());
      assertEquals("ch", locale0.getLanguage());
      assertEquals("VU5UJGIGAZAF", locale0.getCountry());
      assertEquals("cha", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals("VU5UJGIGAZAF", string3);
      
      String string4 = StringUtils.replaceOnceIgnoreCase("/3~ oldGC}", "Comparator should not be null.", "!Eq^W?d$5(u_'$[Hb");
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertEquals("/3~ oldGC}", string4);
      
      String string5 = StringUtils.upperCase("ch");
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertEquals("CH", string5);
      
      String string6 = StringUtils.substringBeforeLast("|ECt>V&EJSYvXW/A`rH", "NP_qZH");
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string1));
      assertEquals("|ECt>V&EJSYvXW/A`rH", string6);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-2352.14754335339);
      doubleArray0[1] = (-3388.15952153409);
      String string7 = StringUtils.join(doubleArray0, ',', 12, 0);
      assertNotNull(string7);
      assertEquals(2, doubleArray0.length);
      assertTrue(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string3));
      assertEquals("", string7);
      assertArrayEquals(new double[] {(-2352.14754335339), (-3388.15952153409)}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test668()  throws Throwable  {
      String string0 = "";
      String string1 = StringUtils.uncapitalize("rvECjJ:_cy7vA64");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("rvECjJ:_cy7vA64", string1);
      
      // Undeclared exception!
      try { 
        StringUtils.abbreviate("rvECjJ:_cy7vA64", (-2144091096), (-2242));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum abbreviation width is 4
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test669()  throws Throwable  {
      String string0 = StringUtils.replace("", "US.^e:o_ufGpA", "", 0);
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.replaceIgnoreCase("", "US.^e:o_ufGpA", "The String must not be empty", (-3695));
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      
      String string2 = StringUtils.center("", 1911);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = "US.^e:o_ufGpA";
      stringArray0[1] = "/)q_F[PuSDH6Q*O";
      stringArray0[2] = null;
      String string3 = StringUtils.replaceEachRepeatedly((String) null, stringArray0, stringArray0);
      assertNull(string3);
      assertEquals(3, stringArray0.length);
      
      String string4 = StringUtils.stripToNull("");
      assertNull(string4);
      
      int int0 = StringUtils.compareIgnoreCase(string2, "}");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals((-93), int0);
      
      String string5 = StringUtils.defaultIfEmpty(string2, (String) null);
      assertNotNull(string5);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      
      String string6 = StringUtils.chop(string2);
      assertNotNull(string6);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string2));
      
      boolean boolean0 = StringUtils.isNotBlank("US.^e:o_ufGpA");
      assertTrue(boolean0);
      
      String string7 = StringUtils.substringBeforeLast("", "US.^e:o_ufGpA");
      assertNotNull(string7);
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string2));
      assertTrue(string7.equals((Object)string1));
      assertTrue(string7.equals((Object)string0));
      assertEquals("", string7);
      
      String string8 = StringUtils.getCommonPrefix(stringArray0);
      assertNotNull(string8);
      assertEquals(3, stringArray0.length);
      assertFalse(string8.equals((Object)string5));
      assertTrue(string8.equals((Object)string0));
      assertTrue(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string6));
      assertTrue(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string2));
      assertEquals("", string8);
      
      String string9 = StringUtils.stripStart(string5, string5);
      assertNotNull(string9);
      assertFalse(string2.equals((Object)string8));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string6));
      assertFalse(string2.equals((Object)string7));
      assertFalse(string5.equals((Object)string6));
      assertFalse(string5.equals((Object)string8));
      assertFalse(string5.equals((Object)string7));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string9.equals((Object)string6));
      assertTrue(string9.equals((Object)string7));
      assertTrue(string9.equals((Object)string1));
      assertTrue(string9.equals((Object)string8));
      assertTrue(string9.equals((Object)string0));
      assertFalse(string9.equals((Object)string5));
      assertFalse(string9.equals((Object)string2));
      assertEquals("", string9);
  }

  @Test(timeout = 4000)
  public void test670()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      String string0 = StringUtils.join(booleanArray0, '|', 80, 80);
      assertNotNull(string0);
      assertEquals(1, booleanArray0.length);
      assertEquals("", string0);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "", (CharSequence) "");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test671()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "<)v(vKh";
      String string0 = StringUtils.substringBetween("<)v(vKh", "<)v(vKh", "<)v(vKh");
      assertNull(string0);
      
      String string1 = StringUtils.getCommonPrefix(stringArray0);
      assertNotNull(string1);
      assertEquals(2, stringArray0.length);
      assertEquals("", string1);
      
      int int0 = StringUtils.indexOfDifference((CharSequence) "", (CharSequence) null);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test672()  throws Throwable  {
      String string0 = StringUtils.abbreviate("CjA/E5Y(XmT6b_f@cC", 3, 509);
      assertNotNull(string0);
      
      String string1 = StringUtils.stripToEmpty("The type must not be null");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("The type must not be null", string1);
  }

  @Test(timeout = 4000)
  public void test673()  throws Throwable  {
      String string0 = StringUtils.removeEnd("Wd|}51/]/&`bsA", "Wd|}51/]/&`bsA");
      assertNotNull(string0);
      assertEquals("", string0);
      
      int[] intArray0 = new int[4];
      intArray0[0] = 1003;
      String string1 = StringUtils.unwrap("Wd|}51/]/&`bsA", '[');
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("Wd|}51/]/&`bsA", string1);
      
      String string2 = StringUtils.center("pKBZnl", 1003, 'w');
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "Wd|}51/]/&`bsA", (CharSequence) "");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test674()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = " vs ";
      stringArray0[1] = "Ua):3]I<ozRQ`OI![";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "";
      String string0 = StringUtils.getCommonPrefix(stringArray0);
      assertNotNull(string0);
      assertEquals(5, stringArray0.length);
      assertEquals("", string0);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "", "8gqE<92_3@");
      assertEquals((-1), int0);
      
      int int1 = StringUtils.lastIndexOf((CharSequence) "", (CharSequence) "");
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      boolean boolean0 = StringUtils.isNotEmpty("Ua):3]I<ozRQ`OI![");
      assertTrue(boolean0);
      
      boolean boolean1 = StringUtils.isAnyEmpty(stringArray0);
      assertEquals(5, stringArray0.length);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String string1 = StringUtils.rotate("", 0);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      
      int int2 = StringUtils.indexOfAnyBut((CharSequence) "", (CharSequence) "Ua):3]I<ozRQ`OI![");
      assertTrue(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals((-1), int2);
      
      // Undeclared exception!
      try { 
        StringUtils.abbreviate("offset cannot be negative", 97, 3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum abbreviation width is 4
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test675()  throws Throwable  {
      char char0 = '7';
      int[] intArray0 = new int[14];
      intArray0[0] = (int) '7';
      intArray0[1] = (int) '7';
      intArray0[1] = (int) '7';
      char char1 = 'n';
      String string0 = StringUtils.join(intArray0, 'n');
      assertNotNull(string0);
      assertEquals(14, intArray0.length);
      assertEquals("55n55n0n0n0n0n0n0n0n0n0n0n0n0", string0);
      
      String string1 = StringUtils.stripAccents("55n55n0n0n0n0n0n0n0n0n0n0n0n0");
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("55n55n0n0n0n0n0n0n0n0n0n0n0n0", string1);
      
      String string2 = StringUtils.removeStartIgnoreCase((String) null, "zWfCf}{>");
      assertNull(string2);
      
      String string3 = "\n";
      String string4 = StringUtils.replaceChars("\n", "\n", ":,[qc3P/nDJ6");
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertEquals(":", string4);
      
      String string5 = StringUtils.toRootUpperCase("D\"2\"R5n");
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertEquals("D\"2\"R5N", string5);
      
      LinkedHashSet<String> linkedHashSet0 = null;
      try {
        linkedHashSet0 = new LinkedHashSet<String>((Collection<? extends String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.LinkedHashSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test676()  throws Throwable  {
      String string0 = StringUtils.removeFirst("N3K;g!@,TR0S2o==)", (String) null);
      assertNotNull(string0);
      assertEquals("N3K;g!@,TR0S2o==)", string0);
      
      String string1 = "\\u";
      String string2 = StringUtils.trim(string1);
      assertNotNull(string2);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string0));
      assertEquals("\\u", string2);
      
      ArrayDeque<Integer> arrayDeque0 = new ArrayDeque<Integer>();
      assertNotNull(arrayDeque0);
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      
      Iterator<Integer> iterator0 = arrayDeque0.descendingIterator();
      assertNotNull(iterator0);
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      
      String string3 = StringUtils.join(iterator0, " vs ");
      assertNotNull(string3);
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals("", string3);
      
      String string4 = StringUtils.substringAfter(" vs ", ":XdK%=xck:.|K@C");
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertEquals("", string4);
      
      CharSequence[] charSequenceArray0 = new CharSequence[9];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) string2;
      charSequenceArray0[2] = (CharSequence) "N3K;g!@,TR0S2o==)";
      charSequenceArray0[3] = (CharSequence) "N3K;g!@,TR0S2o==)";
      charSequenceArray0[4] = (CharSequence) "N3K;g!@,TR0S2o==)";
      charSequenceArray0[5] = (CharSequence) null;
      charSequenceArray0[6] = (CharSequence) null;
      charSequenceArray0[7] = (CharSequence) null;
      charSequenceArray0[8] = (CharSequence) null;
      boolean boolean0 = StringUtils.containsAnyIgnoreCase(string2, charSequenceArray0);
      assertEquals(9, charSequenceArray0.length);
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string4));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string4));
      assertTrue(boolean0);
      
      boolean boolean1 = StringUtils.isWhitespace(" vs ");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      int int0 = StringUtils.lastIndexOfAny(charSequenceArray0[6], charSequenceArray0);
      assertEquals(9, charSequenceArray0.length);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test677()  throws Throwable  {
      ArrayDeque<Integer> arrayDeque0 = new ArrayDeque<Integer>();
      assertNotNull(arrayDeque0);
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      
      Iterator<Integer> iterator0 = arrayDeque0.descendingIterator();
      assertNotNull(iterator0);
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      
      String string0 = StringUtils.join(iterator0, " vs ");
      assertNotNull(string0);
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      assertEquals("", string0);
      
      String string1 = StringUtils.substringAfter(" vs ", ":XdK%=xck:.|K@C");
      assertNotNull(string1);
      assertEquals("", string1);
      
      float[] floatArray0 = new float[6];
      floatArray0[1] = (-672.57324F);
      floatArray0[2] = 820.7103F;
      floatArray0[3] = (-672.57324F);
      Locale locale0 = Locale.KOREA;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("KR", locale0.getCountry());
      
      String string2 = StringUtils.removeStartIgnoreCase("", "");
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertEquals("", string2);
      
      Locale locale1 = Locale.GERMANY;
      assertNotNull(locale1);
      assertNotSame(locale1, locale0);
      assertEquals("", locale1.getVariant());
      assertEquals("DE", locale1.getCountry());
      assertEquals("de", locale1.getLanguage());
      assertEquals("DEU", locale1.getISO3Country());
      assertEquals("de_DE", locale1.toString());
      assertEquals("deu", locale1.getISO3Language());
      assertFalse(locale1.equals((Object)locale0));
      
      String string3 = StringUtils.trim(":XdK%=xck:.|K@C");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals(":XdK%=xck:.|K@C", string3);
      
      String string4 = StringUtils.mid("G*l@%.l<]m=l~ZZ[!a", 3093, 3093);
      assertNotNull(string4);
      assertTrue(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertEquals("", string4);
      
      String string5 = StringUtils.unwrap("", 'E');
      assertNotNull(string5);
      assertTrue(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertTrue(string5.equals((Object)string1));
      assertTrue(string5.equals((Object)string4));
      assertTrue(string5.equals((Object)string0));
      assertEquals("", string5);
      
      boolean boolean0 = StringUtils.startsWith("javalang.Object@52b769b5java.lang.Object@1d3febfajava.lang.Objet@4c16c3aejava.lang.Object@4a32f5f1java.lang.Object@23a1c7c3java.lang.Object@52b769b5java.lang.Object@1d3febfajava.lang.Object@4c16c3aejava.lang.Object@432f5f1java.lang.Object@23a1c7c3", "");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test678()  throws Throwable  {
      String string0 = StringUtils.trimToNull("7W-rn");
      assertNotNull(string0);
      assertEquals("7W-rn", string0);
      
      boolean boolean0 = StringUtils.isAlphanumeric("7W-rn");
      assertFalse(boolean0);
      
      String string1 = StringUtils.removePattern("/4Z5X[f", "7W-rn");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("/4Z5X[f", string1);
      
      String string2 = StringUtils.substringAfter("/4Z5X[f", "7W-rn");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("", string2);
      
      String string3 = StringUtils.trimToNull("/4Z5X[f");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string1));
      assertEquals("/4Z5X[f", string3);
      
      boolean boolean1 = StringUtils.containsNone((CharSequence) null, "_EW*0E_[f5");
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String[] stringArray0 = StringUtils.split("/4Z5X[f", "_EW*0E_[f5", (-3259));
      assertNotNull(stringArray0);
      assertEquals(2, stringArray0.length);
      
      String[] stringArray1 = StringUtils.substringsBetween("KjXgwsMU,", "/4Z5X[f", "Cloneable type ");
      assertNull(stringArray1);
      
      boolean boolean2 = StringUtils.containsOnly((CharSequence) "_EW*0E_[f5", (String) null);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2);
      
      char[] charArray0 = new char[7];
      charArray0[0] = '&';
      charArray0[1] = 'W';
      charArray0[2] = '0';
      charArray0[3] = 'u';
      charArray0[4] = ';';
      charArray0[5] = '>';
      charArray0[6] = '\"';
      boolean boolean3 = StringUtils.containsOnly((CharSequence) "/4Z5X[f", charArray0);
      assertEquals(7, charArray0.length);
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3);
      assertArrayEquals(new char[] {'&', 'W', '0', 'u', ';', '>', '\"'}, charArray0);
      
      ArrayDeque<Integer> arrayDeque0 = new ArrayDeque<Integer>();
      assertNotNull(arrayDeque0);
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      assertFalse(arrayDeque0.contains((-3259)));
      
      Iterator<Integer> iterator0 = arrayDeque0.descendingIterator();
      assertNotNull(iterator0);
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      assertFalse(arrayDeque0.contains((-3259)));
      
      String string4 = StringUtils.join(iterator0, " ");
      assertNotNull(string4);
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertEquals("", string4);
      assertFalse(arrayDeque0.contains((-3259)));
  }

  @Test(timeout = 4000)
  public void test679()  throws Throwable  {
      String string0 = StringUtils.chomp((String) null, "");
      assertNull(string0);
      
      String string1 = StringUtils.replacePattern("[3yrCmjrl/", "Arguments cannot both be null", (String) null);
      assertNotNull(string1);
      assertEquals("[3yrCmjrl/", string1);
      
      String string2 = StringUtils.getDigits((String) null);
      assertNull(string2);
      
      Stack<String> stack0 = new Stack<String>();
      assertNotNull(stack0);
      assertTrue(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertFalse(stack0.contains("Arguments cannot both be null"));
      
      stack0.removeAllElements();
      assertTrue(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertFalse(stack0.contains("Arguments cannot both be null"));
      
      stack0.addElement("t@L@\"");
      assertFalse(stack0.isEmpty());
      assertEquals("[t@L@\"]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertEquals(1, stack0.size());
      assertTrue(stack0.contains("t@L@\""));
      assertFalse(stack0.contains("Arguments cannot both be null"));
      
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      charSequenceArray0[0] = (CharSequence) "[3yrCmjrl/";
      charSequenceArray0[1] = (CharSequence) "[3yrCmjrl/";
      charSequenceArray0[2] = (CharSequence) null;
      charSequenceArray0[3] = (CharSequence) null;
      String string3 = StringUtils.uncapitalize("\n");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertEquals("\n", string3);
      
      charSequenceArray0[4] = (CharSequence) "\n";
      boolean boolean0 = StringUtils.containsAny((CharSequence) "Arguments cannot both be null", charSequenceArray0);
      assertEquals(5, charSequenceArray0.length);
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isAlphaSpace("\n");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      int int0 = StringUtils.compareIgnoreCase("Arguments cannot both be null", " ", true);
      assertEquals(65, int0);
      
      Locale locale0 = Locale.CANADA;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("CA", locale0.getCountry());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      assertEquals("en_CA", locale0.toString());
      
      String string4 = locale0.getDisplayCountry();
      assertNotNull(string4);
      assertEquals("", locale0.getVariant());
      assertEquals("CA", locale0.getCountry());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      assertEquals("en_CA", locale0.toString());
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertEquals("Canada", string4);
      
      String[] stringArray0 = Locale.getISOCountries();
      assertNotNull(stringArray0);
      assertEquals(250, stringArray0.length);
      
      String string5 = locale0.getDisplayVariant();
      assertNotNull(string5);
      assertEquals("", locale0.getVariant());
      assertEquals("CA", locale0.getCountry());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      assertEquals("en_CA", locale0.toString());
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertEquals("", string5);
      
      Locale locale1 = locale0.stripExtensions();
      assertNotNull(locale1);
      assertSame(locale0, locale1);
      assertSame(locale1, locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("CA", locale0.getCountry());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      assertEquals("en_CA", locale0.toString());
      assertEquals("", locale1.getVariant());
      assertEquals("CA", locale1.getCountry());
      assertEquals("en_CA", locale1.toString());
      assertEquals("CAN", locale1.getISO3Country());
      assertEquals("eng", locale1.getISO3Language());
      assertEquals("en", locale1.getLanguage());
      
      String string6 = StringUtils.lowerCase("u=]@|On8X7H27[2Or", locale1);
      assertNotNull(string6);
      assertSame(locale0, locale1);
      assertSame(locale1, locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("CA", locale0.getCountry());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      assertEquals("en_CA", locale0.toString());
      assertEquals("", locale1.getVariant());
      assertEquals("CA", locale1.getCountry());
      assertEquals("en_CA", locale1.toString());
      assertEquals("CAN", locale1.getISO3Country());
      assertEquals("eng", locale1.getISO3Language());
      assertEquals("en", locale1.getLanguage());
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string1));
      assertEquals("u=]@|on8x7h27[2or", string6);
      
      String string7 = StringUtils.mid("-EJ$f!T", 65, (-2521));
      assertNotNull(string7);
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string4));
      assertEquals("", string7);
      
      boolean boolean2 = StringUtils.startsWith(" ", (CharSequence) null);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test680()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      String string0 = StringUtils.stripToNull("XIqGd\"}!4Ple,");
      assertNotNull(string0);
      assertEquals("XIqGd\"}!4Ple,", string0);
      
      charSequenceArray0[0] = (CharSequence) "XIqGd\"}!4Ple,";
      String string1 = StringUtils.substringBeforeLast("CjA/E5Y(XmT6b_f@cCFW;]~`2^s_P6:NRY", ".M,KjXgwsMU");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      charSequenceArray0[1] = (CharSequence) "CjA/E5Y(XmT6b_f@cCFW;]~`2^s_P6:NRY";
      String string2 = StringUtils.prependIfMissing(".M,KjXgwsMU", "XIqGd\"}!4Ple,", charSequenceArray0);
      assertNotNull(string2);
      assertEquals(3, charSequenceArray0.length);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("XIqGd\"}!4Ple,.M,KjXgwsMU", string2);
      
      charSequenceArray0[2] = (CharSequence) "XIqGd\"}!4Ple,.M,KjXgwsMU";
      int int0 = StringUtils.indexOfDifference(charSequenceArray0);
      assertEquals(3, charSequenceArray0.length);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test681()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      assertNotNull(stringWriter0);
      assertEquals("", stringWriter0.toString());
      
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      assertNotNull(stringBuffer0);
      assertEquals("", stringWriter0.toString());
      assertEquals(0, stringBuffer0.length());
      assertEquals("", stringBuffer0.toString());
      
      int int0 = StringUtils.lastIndexOf((CharSequence) stringBuffer0, Integer.MAX_VALUE);
      assertEquals("", stringWriter0.toString());
      assertEquals(0, stringBuffer0.length());
      assertEquals("", stringBuffer0.toString());
      assertEquals((-1), int0);
      
      String string0 = StringUtils.trimToEmpty("Object varargs must not be null");
      assertNotNull(string0);
      assertEquals("Object varargs must not be null", string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[6];
      charSequenceArray0[0] = (CharSequence) "Object varargs must not be null";
      boolean boolean0 = StringUtils.containsAny((CharSequence) "Object varargs must not be null", charSequenceArray0);
      assertEquals(6, charSequenceArray0.length);
      assertTrue(boolean0);
      
      boolean boolean1 = StringUtils.isAlphaSpace("Object varargs must not be null");
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      int int1 = StringUtils.compareIgnoreCase("Object varargs must not be null", "NZMFb!Lkuv2d", true);
      assertFalse(int1 == int0);
      assertEquals(1, int1);
      
      Locale locale0 = Locale.CANADA;
      assertNotNull(locale0);
      assertEquals("CA", locale0.getCountry());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      assertEquals("en_CA", locale0.toString());
      
      String string1 = locale0.getDisplayCountry();
      assertNotNull(string1);
      assertEquals("CA", locale0.getCountry());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      assertEquals("en_CA", locale0.toString());
      assertFalse(string1.equals((Object)string0));
      assertEquals("Canada", string1);
      
      String[] stringArray0 = Locale.getISOCountries();
      assertNotNull(stringArray0);
      assertEquals(250, stringArray0.length);
      
      String string2 = locale0.getDisplayVariant();
      assertNotNull(string2);
      assertEquals("CA", locale0.getCountry());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      assertEquals("en_CA", locale0.toString());
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("", string2);
      
      Locale locale1 = locale0.stripExtensions();
      assertNotNull(locale1);
      assertSame(locale0, locale1);
      assertSame(locale1, locale0);
      assertEquals("CA", locale0.getCountry());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      assertEquals("en_CA", locale0.toString());
      assertEquals("CA", locale1.getCountry());
      assertEquals("eng", locale1.getISO3Language());
      assertEquals("", locale1.getVariant());
      assertEquals("CAN", locale1.getISO3Country());
      assertEquals("en", locale1.getLanguage());
      assertEquals("en_CA", locale1.toString());
      
      String string3 = StringUtils.lowerCase("Object varargs must not be null", locale0);
      assertNotNull(string3);
      assertSame(locale0, locale1);
      assertEquals("CA", locale0.getCountry());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      assertEquals("en_CA", locale0.toString());
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals("object varargs must not be null", string3);
      
      String string4 = StringUtils.mid("Canada", Integer.MAX_VALUE, 1);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertEquals("", string4);
      
      boolean boolean2 = StringUtils.startsWith("", "Object varargs must not be null");
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test682()  throws Throwable  {
      String string0 = " vs ";
      String string1 = StringUtils.repeat(" vs ", 8192);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      // Undeclared exception!
      StringUtils.split(string1);
  }

  @Test(timeout = 4000)
  public void test683()  throws Throwable  {
      long[] longArray0 = new long[5];
      longArray0[1] = 0L;
      int int0 = StringUtils.compareIgnoreCase((String) null, "n~bh", true);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test684()  throws Throwable  {
      String string0 = StringUtils.join((double[]) null, '-');
      assertNull(string0);
      
      String string1 = StringUtils.stripAccents("#r");
      assertNotNull(string1);
      assertEquals("#r", string1);
      
      String string2 = StringUtils.removeStartIgnoreCase("#r", "_k");
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string1));
      assertEquals("#r", string2);
      
      String string3 = StringUtils.replaceChars("XQFC,L\"e", " in an array of  in an array of ", "#r");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals("XQFC,L\"e", string3);
      
      String string4 = StringUtils.toRootUpperCase("#r");
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertEquals("#R", string4);
      
      LinkedHashSet<String> linkedHashSet0 = null;
      try {
        linkedHashSet0 = new LinkedHashSet<String>((Collection<? extends String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.LinkedHashSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test685()  throws Throwable  {
      int int0 = StringUtils.compareIgnoreCase("o@u^n$tE,pV!GcT<\"", "<,", true);
      assertEquals(51, int0);
      
      String string0 = StringUtils.getDigits("uY51n^A>AmGH8[J~a");
      assertNotNull(string0);
      assertEquals("518", string0);
      
      String string1 = StringUtils.chomp("o@u^n$tE,pV!GcT<\"");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("o@u^n$tE,pV!GcT<\"", string1);
  }

  @Test(timeout = 4000)
  public void test686()  throws Throwable  {
      boolean boolean0 = StringUtils.startsWith("US.^e:o_ufGpA", "US.^e:o_ufGpA");
      assertTrue(boolean0);
      
      String string0 = StringUtils.center("e", (-1), 'q');
      assertNotNull(string0);
      assertEquals("e", string0);
      
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "e", (CharSequence) "e");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test687()  throws Throwable  {
      String[] stringArray0 = new String[18];
      stringArray0[0] = "US.^e:o_ufGpA";
      String string0 = StringUtils.replacePattern("=]Un2oPT<", "US.^e:o_ufGpA", "1Ql@?F;uwENrP`HSq ");
      assertNotNull(string0);
      assertEquals("=]Un2oPT<", string0);
      
      String string1 = StringUtils.getCommonPrefix(stringArray0);
      assertNotNull(string1);
      assertEquals(18, stringArray0.length);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      
      String string2 = StringUtils.stripStart("Q{-HC", "US.^e:o_ufGpA");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("Q{-HC", string2);
      
      String string3 = StringUtils.repeat(" in an array of ", 22);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals(" in an array of  in an array of  in an array of  in an array of  in an array of  in an array of  in an array of  in an array of  in an array of  in an array of  in an array of  in an array of  in an array of  in an array of  in an array of  in an array of  in an array of  in an array of  in an array of  in an array of  in an array of  in an array of ", string3);
      
      String string4 = StringUtils.firstNonEmpty(stringArray0);
      assertNotNull(string4);
      assertEquals(18, stringArray0.length);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertEquals("US.^e:o_ufGpA", string4);
      
      String string5 = StringUtils.remove("8\"2", "");
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertEquals("8\"2", string5);
      
      long[] longArray0 = new long[0];
      String string6 = StringUtils.join(longArray0, 'a', 1184, (-485));
      assertNotNull(string6);
      assertEquals(0, longArray0.length);
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string5));
      assertEquals("", string6);
      assertArrayEquals(new long[] {}, longArray0);
  }

  @Test(timeout = 4000)
  public void test688()  throws Throwable  {
      boolean boolean0 = StringUtils.startsWith("US.^e:o_ufGpA", "US.^e:o_ufGpA");
      assertTrue(boolean0);
      
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.canEncode());
      
      byte[] byteArray0 = StringUtils.getBytes("US.^e:o_ufGpA", charset0);
      assertNotNull(byteArray0);
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.canEncode());
      assertEquals(13, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test689()  throws Throwable  {
      String string0 = StringUtils.wrap("/^Dsg*/^Dsg*", "/^Dsg*/^Dsg*");
      assertNotNull(string0);
      assertEquals("/^Dsg*/^Dsg*/^Dsg*/^Dsg*/^Dsg*/^Dsg*", string0);
      
      boolean boolean0 = StringUtils.isAlphaSpace("/^Dsg*/^Dsg*/^Dsg*/^Dsg*/^Dsg*/^Dsg*");
      assertFalse(boolean0);
      
      String string1 = StringUtils.stripEnd("C;4W=+tC;4W=+tC;4W=+tC;4W=+tC;4W=+tC;4W=wDPtb=E*0D +", "C;4W=+tC;4W=+tC;4W=+tC;4W=+tC;4W=+tC;4W=wDPtb=E*0D +");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
  }

  @Test(timeout = 4000)
  public void test690()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "US.^e:o_ufGpA";
      String[] stringArray1 = StringUtils.stripAll(stringArray0);
      assertNotNull(stringArray1);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(1, stringArray0.length);
      assertEquals(1, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      boolean boolean0 = StringUtils.containsAnyIgnoreCase("(d", stringArray0);
      assertNotSame(stringArray0, stringArray1);
      assertEquals(1, stringArray0.length);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isWhitespace("US.^e:o_ufGpA");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      int int0 = StringUtils.lastIndexOfAny("US.^e:o_ufGpA", stringArray1);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(1, stringArray0.length);
      assertEquals(1, stringArray1.length);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test691()  throws Throwable  {
      String string0 = StringUtils.defaultString("ty");
      assertNotNull(string0);
      assertEquals("ty", string0);
  }

  @Test(timeout = 4000)
  public void test692()  throws Throwable  {
      String string0 = StringUtils.remove("W~p/]:FDw`qEP(g{Xm", "W~p/]:FDw`qEP(g{Xm");
      assertNotNull(string0);
      assertEquals("", string0);
      
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "");
      assertNotNull(charBuffer0);
      assertEquals(0, charBuffer0.remaining());
      assertEquals(0, charBuffer0.capacity());
      assertTrue(charBuffer0.isReadOnly());
      assertEquals("", charBuffer0.toString());
      assertEquals(0, charBuffer0.limit());
      assertFalse(charBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.length());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.isDirect());
      assertFalse(charBuffer0.hasArray());
      
      CharBuffer charBuffer1 = charBuffer0.slice();
      assertNotNull(charBuffer1);
      assertNotSame(charBuffer0, charBuffer1);
      assertNotSame(charBuffer1, charBuffer0);
      assertEquals(0, charBuffer0.remaining());
      assertEquals(0, charBuffer0.capacity());
      assertTrue(charBuffer0.isReadOnly());
      assertEquals("", charBuffer0.toString());
      assertEquals(0, charBuffer0.limit());
      assertFalse(charBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.length());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.isDirect());
      assertFalse(charBuffer0.hasArray());
      assertEquals(0, charBuffer1.limit());
      assertFalse(charBuffer1.hasRemaining());
      assertEquals(0, charBuffer1.remaining());
      assertTrue(charBuffer1.isReadOnly());
      assertFalse(charBuffer1.isDirect());
      assertEquals(0, charBuffer1.length());
      assertEquals("", charBuffer1.toString());
      assertEquals(0, charBuffer1.capacity());
      assertEquals(0, charBuffer1.position());
      assertFalse(charBuffer1.hasArray());
      assertTrue(charBuffer1.equals((Object)charBuffer0));
      
      CharSequence[] charSequenceArray0 = new CharSequence[7];
      charSequenceArray0[0] = (CharSequence) charBuffer1;
      charSequenceArray0[1] = (CharSequence) "";
      String string1 = StringUtils.defaultString("", "MhTwQcx/_PKe*xv\"");
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      
      String string2 = StringUtils.chomp(".M,KjXgwsMU,", "=]Un2oPT<");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals(".M,KjXgwsMU,", string2);
      
      String[] stringArray0 = StringUtils.split("lf(y<Ml$R3Or[ZQ;");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      String string3 = StringUtils.substringBeforeLast(".M,KjXgwsMU,", "=]Un2oPT<");
      assertNotNull(string3);
      assertTrue(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals(".M,KjXgwsMU,", string3);
      
      boolean boolean0 = StringUtils.containsAny((CharSequence) ".M,KjXgwsMU,", charSequenceArray0);
      assertEquals(7, charSequenceArray0.length);
      assertTrue(boolean0);
      
      long[] longArray0 = new long[0];
      String string4 = StringUtils.join(longArray0, 'Z');
      assertNotNull(string4);
      assertEquals(0, longArray0.length);
      assertFalse(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertEquals("", string4);
      assertArrayEquals(new long[] {}, longArray0);
      
      boolean boolean1 = StringUtils.isAlphaSpace("");
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      int int0 = StringUtils.compareIgnoreCase((String) null, "Minimum abbreviation width with offset is %d", false);
      assertEquals(1, int0);
      
      Locale locale0 = Locale.CANADA;
      assertNotNull(locale0);
      assertEquals("en", locale0.getLanguage());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("CA", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("en_CA", locale0.toString());
      
      String string5 = locale0.getDisplayCountry();
      assertNotNull(string5);
      assertEquals("en", locale0.getLanguage());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("CA", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("en_CA", locale0.toString());
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertEquals("Canada", string5);
      
      String[] stringArray1 = Locale.getISOCountries();
      assertNotNull(stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(250, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      String string6 = StringUtils.lowerCase("", locale0);
      assertNotNull(string6);
      assertEquals("en", locale0.getLanguage());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("CA", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("en_CA", locale0.toString());
      assertTrue(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string5));
      assertTrue(string6.equals((Object)string0));
      assertTrue(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string2));
      assertEquals("", string6);
      
      boolean boolean2 = StringUtils.startsWith((CharSequence) null, "");
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test693()  throws Throwable  {
      boolean boolean0 = StringUtils.endsWithAny((CharSequence) null, (CharSequence[]) null);
      assertFalse(boolean0);
      
      String string0 = StringUtils.removePattern(", '", "r4");
      assertNotNull(string0);
      assertEquals(", '", string0);
      
      boolean boolean1 = StringUtils.isAlphaSpace(", '");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string1 = StringUtils.substringBetween(", '", ", '");
      assertNull(string1);
      
      boolean boolean2 = StringUtils.isAlphanumeric(", '");
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      String string2 = StringUtils.replace("]+!b+`", (String) null, "\r");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertEquals("]+!b+`", string2);
      
      boolean boolean3 = StringUtils.isAlphanumericSpace("]+!b+`");
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3);
      
      Locale locale0 = Locale.CANADA_FRENCH;
      assertNotNull(locale0);
      assertEquals("fr_CA", locale0.toString());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("CA", locale0.getCountry());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      
      String string3 = locale0.getDisplayScript();
      assertNotNull(string3);
      assertEquals("fr_CA", locale0.toString());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("CA", locale0.getCountry());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals("", string3);
      
      String string4 = locale0.getDisplayVariant();
      assertNotNull(string4);
      assertEquals("fr_CA", locale0.toString());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("CA", locale0.getCountry());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertEquals("", string4);
      
      String string5 = StringUtils.upperCase("org.apache.commons.lang3.StringUtils", locale0);
      assertNotNull(string5);
      assertEquals("fr_CA", locale0.toString());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("CA", locale0.getCountry());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertEquals("ORG.APACHE.COMMONS.LANG3.STRINGUTILS", string5);
      
      int int0 = StringUtils.countMatches((CharSequence) null, (CharSequence) ", '");
      assertEquals(0, int0);
      
      boolean boolean4 = StringUtils.equalsIgnoreCase("]+!b+`", "org.apache.commons.lang3.StringUtils");
      assertTrue(boolean4 == boolean2);
      assertTrue(boolean4 == boolean3);
      assertTrue(boolean4 == boolean0);
      assertTrue(boolean4 == boolean1);
      assertFalse(boolean4);
      
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) ", '";
      objectArray0[1] = (Object) null;
      objectArray0[2] = (Object) ", '";
      objectArray0[3] = (Object) null;
      objectArray0[4] = (Object) "ORG.APACHE.COMMONS.LANG3.STRINGUTILS";
      objectArray0[5] = (Object) null;
      objectArray0[6] = (Object) locale0;
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[7] = object0;
      objectArray0[8] = (Object) locale0;
      String string6 = StringUtils.join(objectArray0, '[');
      assertNotNull(string6);
      assertEquals(9, objectArray0.length);
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string4));
      
      boolean boolean5 = StringUtils.containsOnly((CharSequence) ", '[[, '[[ORG.APACHE.COMMONS.LANG3.STRINGUTILS[[fr_CA[java.lang.Object@59202e96[fr_CA", "]k <mxJ#z");
      assertTrue(boolean5 == boolean0);
      assertTrue(boolean5 == boolean1);
      assertTrue(boolean5 == boolean3);
      assertTrue(boolean5 == boolean2);
      assertTrue(boolean5 == boolean4);
      assertFalse(boolean5);
  }

  @Test(timeout = 4000)
  public void test694()  throws Throwable  {
      String string0 = StringUtils.replaceChars("{}", '1', '#');
      assertNotNull(string0);
      assertEquals("{}", string0);
      
      boolean boolean0 = StringUtils.containsAny((CharSequence) "{}", (CharSequence) "{}");
      assertTrue(boolean0);
      
      boolean boolean1 = StringUtils.isWhitespace("{}");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens((String) null, "{}");
      assertNull(stringArray0);
      
      String string1 = StringUtils.substringBeforeLast("{}", (String) null);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("{}", string1);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      String string2 = StringUtils.join((Object[]) null, '#', 92, 92);
      assertNull(string2);
      
      String string3 = StringUtils.wrapIfMissing((String) null, "{}");
      assertNull(string3);
      
      String string4 = StringUtils.swapCase("{}");
      assertNotNull(string4);
      assertTrue(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string0));
      assertEquals("{}", string4);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "`9.{GYn4:qUn3`3", (CharSequence) "8f?D", 114);
      assertEquals((-1), int0);
      
      String string5 = StringUtils.toRootLowerCase((String) null);
      assertNull(string5);
      
      String string6 = StringUtils.defaultIfBlank("{}", "5Y[ykb}HL=H-'=9]2");
      assertNotNull(string6);
      assertTrue(string6.equals((Object)string1));
      assertTrue(string6.equals((Object)string4));
      assertTrue(string6.equals((Object)string0));
      assertEquals("{}", string6);
  }

  @Test(timeout = 4000)
  public void test695()  throws Throwable  {
      String string0 = StringUtils.removeFirst("o4R+8,w0_XT", "java.lang.Object@162f0309java.lang.Object@ee1d858java.lang.Object@29d768adjava.lang.Object@195c9e91java.lang.Object@7705e1f8java.lang.Object@162f0309java.lang.Object@ee1d858java.lang.Object@29d768adjava.lang.Object@195c9e91java.lang.Object@7705e1f8");
      assertNotNull(string0);
      assertEquals("o4R+8,w0_XT", string0);
      
      boolean boolean0 = StringUtils.contains((CharSequence) "o4R+8,w0_XT", (CharSequence) "java.lang.Object@162f0309java.lang.Object@ee1d858java.lang.Object@29d768adjava.lang.Object@195c9e91java.lang.Object@7705e1f8java.lang.Object@162f0309java.lang.Object@ee1d858java.lang.Object@29d768adjava.lang.Object@195c9e91java.lang.Object@7705e1f8");
      assertFalse(boolean0);
      
      String string1 = StringUtils.uncapitalize("S`-mCa0");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("s`-mCa0", string1);
      
      String string2 = StringUtils.uncapitalize((String) null);
      assertNull(string2);
      
      boolean boolean1 = StringUtils.containsAny((CharSequence) null, (CharSequence) "java.lang.Object@162f0309java.lang.Object@ee1d858java.lang.Object@29d768adjava.lang.Object@195c9e91java.lang.Object@7705e1f8java.lang.Object@162f0309java.lang.Object@ee1d858java.lang.Object@29d768adjava.lang.Object@195c9e91java.lang.Object@7705e1f8");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      // Undeclared exception!
      try { 
        StringUtils.getLevenshteinDistance((CharSequence) "s`-mCa0", (CharSequence) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test696()  throws Throwable  {
      String string0 = StringUtils.removeStart("y", (String) null);
      assertNotNull(string0);
      assertEquals("y", string0);
      
      String string1 = StringUtils.unwrap("W~p/,:FDw`qEP(g{Xm", 'o');
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("W~p/,:FDw`qEP(g{Xm", string1);
      
      int int0 = StringUtils.indexOf((CharSequence) "y", (-1179));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test697()  throws Throwable  {
      String string0 = StringUtils.wrapIfMissing("ASG?bZ0Eo.k!?8*IRfKOe e~MFd!&{'et", "%O");
      assertNotNull(string0);
      assertEquals("%OASG?bZ0Eo.k!?8*IRfKOe e~MFd!&{'et%O", string0);
      
      String string1 = StringUtils.substringBetween(" vs ", "~M&b88j}# 1MMaM");
      assertNull(string1);
      
      String string2 = StringUtils.left("ne,GKm-&Alf", 1);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertEquals("n", string2);
  }

  @Test(timeout = 4000)
  public void test698()  throws Throwable  {
      String string0 = StringUtils.left("5|5pGW#urA~r?~3", (-494));
      assertNotNull(string0);
      assertEquals("", string0);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens((String) null, 'u');
      assertNull(stringArray0);
      
      StringUtils stringUtils0 = new StringUtils();
      assertNotNull(stringUtils0);
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      
      long[] longArray0 = new long[6];
      longArray0[0] = (long) (-494);
      longArray0[1] = (long) (-1);
      longArray0[2] = (long) 'u';
      longArray0[3] = (long) 'u';
      longArray0[4] = (long) 'u';
      longArray0[5] = (long) (-494);
      String string1 = StringUtils.join(longArray0, 'u');
      assertNotNull(string1);
      assertEquals(6, longArray0.length);
      assertFalse(string1.equals((Object)string0));
      assertEquals("-494u-1u117u117u117u-494", string1);
      assertArrayEquals(new long[] {(-494L), (-1L), 117L, 117L, 117L, (-494L)}, longArray0);
      
      String string2 = StringUtils.toRootUpperCase("IxI");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("IXI", string2);
  }

  @Test(timeout = 4000)
  public void test699()  throws Throwable  {
      String string0 = StringUtils.left("", 3773);
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test700()  throws Throwable  {
      int int0 = 1664;
      String string0 = StringUtils.replace("", "US.^e:o_ufGpA", "", 1664);
      assertNotNull(string0);
      assertEquals("", string0);
      
      boolean boolean0 = StringUtils.isAnyBlank((CharSequence[]) null);
      assertFalse(boolean0);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) 1664;
      floatArray0[1] = (float) 1664;
      floatArray0[2] = (float) 1664;
      floatArray0[3] = 2915.091F;
      boolean boolean1 = StringUtils.containsOnly((CharSequence) "US.^e:o_ufGpA", (char[]) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string1 = "x2?x|[Cx[:^C6";
      String string2 = StringUtils.defaultIfEmpty("", "x2?x|[Cx[:^C6");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertEquals("x2?x|[Cx[:^C6", string2);
      
      String string3 = StringUtils.appendIfMissingIgnoreCase("US.^e:o_ufGpA", ")+><%m", (CharSequence[]) null);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals("US.^e:o_ufGpA)+><%m", string3);
      
      try { 
        StringUtils.getBytes(")+><%m", ")+><%m");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(UnsupportedEncodingException e) {
      }
  }

  @Test(timeout = 4000)
  public void test701()  throws Throwable  {
      String string0 = StringUtils.defaultIfEmpty("Aborting to protect against StackOverflowError - output of one loop is the input of another", "i{]K!J*83(V?o*G/m");
      assertNotNull(string0);
      assertEquals("Aborting to protect against StackOverflowError - output of one loop is the input of another", string0);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "Aborting to protect against StackOverflowError - output of one loop is the input of another", "\r");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test702()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      String string0 = StringUtils.join(booleanArray0, '=');
      assertNotNull(string0);
      assertEquals(0, booleanArray0.length);
      assertEquals("", string0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      
      String string1 = StringUtils.substringAfterLast("", "Strings must not be null");
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      
      String string2 = StringUtils.stripToNull("");
      assertNull(string2);
  }

  @Test(timeout = 4000)
  public void test703()  throws Throwable  {
      String string0 = StringUtils.repeat("c^P#chHM", 6);
      assertNotNull(string0);
      assertEquals("c^P#chHMc^P#chHMc^P#chHMc^P#chHMc^P#chHMc^P#chHM", string0);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "c^P#chHMc^P#chHMc^P#chHMc^P#chHMc^P#chHMc^P#chHM", "c^P#chHMc^P#chHMc^P#chHMc^P#chHMc^P#chHMc^P#chHM");
      assertEquals(0, int0);
      
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "w[ S*{(\"xv", "c^P#chHM");
      assertFalse(boolean0);
      
      int int1 = StringUtils.indexOf((CharSequence) "c^P#chHMc^P#chHMc^P#chHMc^P#chHMc^P#chHMc^P#chHM", (CharSequence) "c^P#chHM");
      assertTrue(int1 == int0);
      assertEquals(0, int1);
  }

  @Test(timeout = 4000)
  public void test704()  throws Throwable  {
      String string0 = StringUtils.abbreviateMiddle("E2*1.s*OqQHFD&gQd9O", "E2*1.s*OqQHFD&gQd9O", (-526));
      assertNotNull(string0);
      assertEquals("E2*1.s*OqQHFD&gQd9O", string0);
      
      String string1 = StringUtils.normalizeSpace("");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      
      String string2 = StringUtils.stripEnd("(VgStX;j-/L&", (String) null);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("(VgStX;j-/L&", string2);
      
      String string3 = StringUtils.mid("", 6, 6);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals("", string3);
      
      try { 
        StringUtils.getBytes("Supplied value must be a valid byte literal between -32768 and 32767: [", "");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(UnsupportedEncodingException e) {
      }
  }

  @Test(timeout = 4000)
  public void test705()  throws Throwable  {
      String string0 = StringUtils.trimToEmpty("");
      assertNotNull(string0);
      assertEquals("", string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      String string1 = StringUtils.appendIfMissingIgnoreCase("6H|>pYM4qw`l|t", "", charSequenceArray0);
      assertNotNull(string1);
      assertEquals(0, charSequenceArray0.length);
      assertFalse(string1.equals((Object)string0));
      assertEquals("6H|>pYM4qw`l|t", string1);
      
      int int0 = StringUtils.indexOfDifference(charSequenceArray0);
      assertEquals(0, charSequenceArray0.length);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test706()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparator((String) null, (String) null);
      assertNull(stringArray0);
      
      String string0 = StringUtils.center((String) null, 2406, "");
      assertNull(string0);
      
      TreeSet<Integer> treeSet0 = new TreeSet<Integer>((Comparator<? super Integer>) null);
      assertNotNull(treeSet0);
      assertFalse(treeSet0.contains(2406));
      
      LinkedList<CharBuffer> linkedList0 = new LinkedList<CharBuffer>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      boolean boolean0 = treeSet0.removeAll(linkedList0);
      assertEquals(0, linkedList0.size());
      assertFalse(boolean0);
      assertFalse(treeSet0.contains(2406));
      
      Integer integer0 = new Integer((-2101));
      assertNotNull(integer0);
      assertEquals((-2101), (int)integer0);
      
      SortedSet<Integer> sortedSet0 = treeSet0.tailSet(integer0);
      assertNotNull(sortedSet0);
      assertTrue(sortedSet0.isEmpty());
      assertEquals(0, sortedSet0.size());
      assertFalse(treeSet0.contains((-2101)));
      assertFalse(sortedSet0.contains((-2101)));
      
      Stream<Integer> stream0 = treeSet0.parallelStream();
      assertNotNull(stream0);
      assertFalse(treeSet0.contains((-2101)));
      
      Integer integer1 = new Integer(2406);
      assertNotNull(integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertEquals(2406, (int)integer1);
      
      boolean boolean1 = treeSet0.add(integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      assertFalse(treeSet0.contains((-2101)));
      assertTrue(treeSet0.contains(integer1));
      
      // Undeclared exception!
      try { 
        Locale.Category.valueOf((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Name is null
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test707()  throws Throwable  {
      String string0 = StringUtils.abbreviateMiddle("E2*1.s*OqQHFD&gQd9O", "E2*1.s*OqQHFD&gQd9O", (-526));
      assertNotNull(string0);
      assertEquals("E2*1.s*OqQHFD&gQd9O", string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[0] = (CharSequence) "E2*1.s*OqQHFD&gQd9O";
      charSequenceArray0[1] = (CharSequence) "E2*1.s*OqQHFD&gQd9O";
      String string1 = StringUtils.rotate("E2*1.s*OqQHFD&gQd9O", 3);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("d9OE2*1.s*OqQHFD&gQ", string1);
      
      String string2 = StringUtils.center("d9OE2*1.s*OqQHFD&gQ", (-497), "null/empty items/swe>H=I(,wP(MST)d)/swe>H=I(,wP(MST)d)>H=I");
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("d9OE2*1.s*OqQHFD&gQ", string2);
  }

  @Test(timeout = 4000)
  public void test708()  throws Throwable  {
      String string0 = StringUtils.left("5|5pGW#urA~r?~3", (-494));
      assertNotNull(string0);
      assertEquals("", string0);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens((String) null, 'u');
      assertNull(stringArray0);
      
      StringUtils stringUtils0 = new StringUtils();
      assertNotNull(stringUtils0);
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      
      long[] longArray0 = new long[6];
      longArray0[0] = (long) (-494);
      longArray0[1] = (long) (-1);
      boolean boolean0 = StringUtils.containsAnyIgnoreCase("\r", (CharSequence[]) null);
      assertFalse(boolean0);
      
      String string1 = StringUtils.replaceChars("5|5pGW#urA~r?~3", "\r", "org.apache.commons.lang3.LocaleUtils");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("5|5pGW#urA~r?~3", string1);
      
      boolean boolean1 = StringUtils.isWhitespace("5|5pGW#urA~r?~3");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      int int0 = StringUtils.lastIndexOfAny("5|5pGW#urA~r?~3", (CharSequence[]) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test709()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)104;
      byteArray0[1] = (byte)0;
      String string0 = StringUtils.wrap("`7p(", 'N');
      assertNotNull(string0);
      assertEquals("N`7p(N", string0);
      
      char[] charArray0 = new char[23];
      charArray0[0] = 'N';
      charArray0[15] = 'N';
      charArray0[2] = 'N';
      charArray0[3] = '_';
      int int0 = StringUtils.indexOfAny((CharSequence) "N`7p(N", charArray0);
      assertEquals(23, charArray0.length);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test710()  throws Throwable  {
      String string0 = StringUtils.swapCase("");
      assertNotNull(string0);
      assertEquals("", string0);
      
      boolean boolean0 = StringUtils.isNotEmpty("");
      assertFalse(boolean0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      charSequenceArray0[1] = (CharSequence) "";
      charSequenceArray0[2] = (CharSequence) "";
      charSequenceArray0[3] = (CharSequence) "";
      charSequenceArray0[4] = (CharSequence) "";
      boolean boolean1 = StringUtils.containsAny((CharSequence) "", charSequenceArray0);
      assertEquals(5, charSequenceArray0.length);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      int int0 = StringUtils.indexOfDifference(charSequenceArray0);
      assertEquals(5, charSequenceArray0.length);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test711()  throws Throwable  {
      String string0 = StringUtils.swapCase("");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.stripEnd("Z7Ldu!I~f,c^y.E2-{", "");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("Z7Ldu!I~f,c^y.E2-{", string1);
      
      String string2 = StringUtils.capitalize("\n");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("\n", string2);
      
      boolean boolean0 = StringUtils.isEmpty("rjt^z&YZ':vy?=ni?n.");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isWhitespace("Z7Ldu!I~f,c^y.E2-{");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test712()  throws Throwable  {
      String string0 = StringUtils.replaceOnceIgnoreCase("", "", "");
      assertNotNull(string0);
      assertEquals("", string0);
      
      boolean boolean0 = StringUtils.containsAnyIgnoreCase("", (CharSequence[]) null);
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isWhitespace("");
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String string1 = StringUtils.trimToNull("");
      assertNull(string1);
      
      int int0 = StringUtils.lastIndexOfAny((CharSequence) null, (CharSequence[]) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test713()  throws Throwable  {
      String string0 = StringUtils.removeEndIgnoreCase("", "");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("", "");
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      
      String string1 = StringUtils.substringAfterLast("", "");
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "", (CharSequence) "");
      assertEquals(0, int0);
      
      Locale locale0 = Locale.CHINESE;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("zh", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      
      int int1 = StringUtils.getFuzzyDistance("", "", locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("zh", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertTrue(int1 == int0);
      assertEquals(0, int1);
  }

  @Test(timeout = 4000)
  public void test714()  throws Throwable  {
      String[] stringArray0 = new String[4];
      boolean boolean0 = StringUtils.isNumericSpace(stringArray0[3]);
      assertEquals(4, stringArray0.length);
      assertFalse(boolean0);
      
      String string0 = StringUtils.removeEndIgnoreCase(stringArray0[0], stringArray0[0]);
      assertNull(string0);
      assertEquals(4, stringArray0.length);
      
      String string1 = StringUtils.wrap("pV&d&F@?O[k", string0);
      assertNotNull(string1);
      assertEquals(4, stringArray0.length);
      assertEquals("pV&d&F@?O[k", string1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[6];
      charSequenceArray0[0] = (CharSequence) string0;
      charSequenceArray0[1] = (CharSequence) string0;
      charSequenceArray0[2] = (CharSequence) string0;
      charSequenceArray0[3] = (CharSequence) string0;
      charSequenceArray0[4] = (CharSequence) "pV&d&F@?O[k";
      charSequenceArray0[5] = (CharSequence) "pV&d&F@?O[k";
      int int0 = StringUtils.indexOfDifference(charSequenceArray0);
      assertEquals(6, charSequenceArray0.length);
      assertEquals(0, int0);
      
      int int1 = StringUtils.indexOfDifference((CharSequence[]) stringArray0);
      assertEquals(4, stringArray0.length);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      int int2 = StringUtils.compareIgnoreCase("]&3i}`", "t");
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals((-23), int2);
      
      boolean boolean1 = StringUtils.equalsIgnoreCase(charSequenceArray0[1], charSequenceArray0[0]);
      assertEquals(6, charSequenceArray0.length);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String string2 = StringUtils.join(stringArray0);
      assertNotNull(string2);
      assertEquals(4, stringArray0.length);
      assertFalse(string2.equals((Object)string1));
      assertEquals("", string2);
      
      String string3 = StringUtils.trimToEmpty("\n");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string2));
      assertEquals("", string3);
  }

  @Test(timeout = 4000)
  public void test715()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("vW]", 'z');
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      StringUtils stringUtils0 = new StringUtils();
      assertNotNull(stringUtils0);
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      
      long[] longArray0 = new long[4];
      longArray0[0] = (long) 'z';
      String string0 = StringUtils.uncapitalize("\n");
      assertNotNull(string0);
      assertEquals("\n", string0);
      
      boolean boolean0 = StringUtils.containsAny((CharSequence) "", (CharSequence) " ");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test716()  throws Throwable  {
      String string0 = StringUtils.wrap("", "");
      assertNotNull(string0);
      assertEquals("", string0);
      
      boolean boolean0 = StringUtils.containsAny((CharSequence) "", (CharSequence) "");
      assertFalse(boolean0);
      
      int[] intArray0 = new int[8];
      intArray0[0] = 8;
      intArray0[1] = (-3364);
      intArray0[2] = 212;
      intArray0[3] = (-2623);
      intArray0[4] = 0;
      intArray0[5] = 0;
      intArray0[6] = 52;
      intArray0[7] = 0;
      // Undeclared exception!
      try { 
        StringUtils.join(intArray0, '<', (-427), 13);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -427
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test717()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "java.lang.Object@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.Object@50d3e7ejava.lang.Object@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.Object@50d3e7e";
      stringArray0[1] = "java.lang.Object@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.Object@50d3e7ejava.lang.Object@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.Object@50d3e7e";
      String string0 = StringUtils.trimToEmpty("java.lang.Object@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.Object@50d3e7ejava.lang.Object@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.Object@50d3e7e");
      assertNotNull(string0);
      
      String string1 = "The character ";
      Vector<CharBuffer> vector0 = new Vector<CharBuffer>();
      assertNotNull(vector0);
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      
      int int0 = (-4728);
      // Undeclared exception!
      try { 
        StringUtils.join((Object[]) stringArray0, "java.lang.Object@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.Object@50d3e7ejava.lang.Object@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.Object@50d3e7e", (-4728), 2144);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -4728
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test718()  throws Throwable  {
      String string0 = StringUtils.chomp((String) null, "");
      assertNull(string0);
      
      String string1 = StringUtils.join((Object[]) null, "ze4VBWr", Integer.MIN_VALUE, 1245);
      assertNull(string1);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) null, (CharSequence) "", 10);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test719()  throws Throwable  {
      Locale locale0 = Locale.FRANCE;
      assertNotNull(locale0);
      assertEquals("fr_FR", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("FR", locale0.getCountry());
      
      Locale locale1 = Locale.KOREAN;
      assertNotNull(locale1);
      assertNotSame(locale1, locale0);
      assertEquals("", locale1.getCountry());
      assertEquals("kor", locale1.getISO3Language());
      assertEquals("ko", locale1.toString());
      assertEquals("ko", locale1.getLanguage());
      assertEquals("", locale1.getVariant());
      assertEquals("", locale1.getISO3Country());
      assertFalse(locale1.equals((Object)locale0));
      
      String string0 = locale0.getDisplayCountry(locale1);
      assertNotNull(string0);
      assertNotSame(locale0, locale1);
      assertNotSame(locale1, locale0);
      assertEquals("fr_FR", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("FR", locale0.getCountry());
      assertEquals("", locale1.getCountry());
      assertEquals("kor", locale1.getISO3Language());
      assertEquals("ko", locale1.toString());
      assertEquals("ko", locale1.getLanguage());
      assertEquals("", locale1.getVariant());
      assertEquals("", locale1.getISO3Country());
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(locale1.equals((Object)locale0));
      assertEquals("\uD504\uB791\uC2A4", string0);
      
      String string1 = StringUtils.upperCase("org.apache.commons.lang3.LocaleUtils", locale0);
      assertNotNull(string1);
      assertNotSame(locale0, locale1);
      assertEquals("fr_FR", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("FR", locale0.getCountry());
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(string1.equals((Object)string0));
      assertEquals("ORG.APACHE.COMMONS.LANG3.LOCALEUTILS", string1);
      
      String string2 = StringUtils.unwrap("\uD504\uB791\uC2A4", ",irN?)&-uC;+>");
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("\uD504\uB791\uC2A4", string2);
  }

  @Test(timeout = 4000)
  public void test720()  throws Throwable  {
      String string0 = "\\u";
      Locale locale0 = Locale.FRANCE;
      assertNotNull(locale0);
      assertEquals("fr", locale0.getLanguage());
      assertEquals("fr_FR", locale0.toString());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("FR", locale0.getCountry());
      
      boolean boolean0 = StringUtils.isAsciiPrintable(string0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test721()  throws Throwable  {
      String string0 = StringUtils.upperCase("", (Locale) null);
      assertNotNull(string0);
      assertEquals("", string0);
      
      boolean boolean0 = StringUtils.isNotEmpty("");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isAsciiPrintable("");
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String string1 = StringUtils.upperCase("", (Locale) null);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) null;
      objectArray0[2] = (Object) "";
      objectArray0[3] = (Object) "";
      objectArray0[4] = (Object) "";
      objectArray0[5] = (Object) "";
      int int0 = 196;
      // Undeclared exception!
      try { 
        StringUtils.join(objectArray0, "", (-1953), 196);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1953
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test722()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)104;
      byteArray0[1] = (byte)0;
      String string0 = StringUtils.abbreviateMiddle("nF9Myjy>nq", "[JES !E`+9v8&", 2);
      assertNotNull(string0);
      assertEquals("nF9Myjy>nq", string0);
      
      String[] stringArray0 = StringUtils.substringsBetween("nF9Myjy>nq", "XxUolDP~nu&RG6~ dQ", " is not in the range '0' - '9'");
      assertNull(stringArray0);
      
      int int0 = StringUtils.indexOf((CharSequence) "UlR=\"s0>.9c_L", 6, 531);
      assertEquals((-1), int0);
      
      boolean boolean0 = StringUtils.isAnyBlank((CharSequence[]) null);
      assertFalse(boolean0);
      
      String string1 = StringUtils.stripStart("45na?", "nF9Myjy>nq");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("45na?", string1);
      
      String string2 = StringUtils.center(":0xG8jYirkL", (int) (byte)0, 'n');
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals(":0xG8jYirkL", string2);
      
      String string3 = StringUtils.trim("nF9Myjy>nq");
      assertNotNull(string3);
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals("nF9Myjy>nq", string3);
      
      boolean boolean1 = StringUtils.isAlphaSpace((CharSequence) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test723()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("j", "j", 1067);
      assertNotNull(stringArray0);
      assertEquals(2, stringArray0.length);
      
      String string0 = StringUtils.left("j", 1067);
      assertNotNull(string0);
      assertEquals("j", string0);
      
      String string1 = StringUtils.rightPad("j", 1067);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      boolean[] booleanArray0 = new boolean[0];
      String string2 = StringUtils.join(booleanArray0, 'x', 1067, 1067);
      assertNotNull(string2);
      assertEquals(0, booleanArray0.length);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("", string2);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "", (CharSequence) "");
      assertEquals(0, int0);
      
      char[] charArray0 = new char[7];
      charArray0[0] = 'x';
      charArray0[2] = 'x';
      charArray0[3] = 'x';
      charArray0[4] = 'x';
      charArray0[5] = 'x';
      charArray0[6] = 'x';
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "", charArray0);
      assertEquals(7, charArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new char[] {'x', '\u0000', 'x', 'x', 'x', 'x', 'x'}, charArray0);
      
      String string3 = StringUtils.defaultIfEmpty(")+><%m", "j");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals(")+><%m", string3);
      
      String string4 = StringUtils.chomp(string1);
      assertNotNull(string4);
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      
      String[] stringArray1 = StringUtils.substringsBetween(string4, "j", "Object varargs must not be null");
      assertNull(stringArray1);
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      
      String string5 = StringUtils.wrap("@Ws23~0i", ':');
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertEquals(":@Ws23~0i:", string5);
  }

  @Test(timeout = 4000)
  public void test724()  throws Throwable  {
      String[] stringArray0 = StringUtils.substringsBetween("5|5pGW#urA~r?~3", ">s*n", ">s*n");
      assertNull(stringArray0);
      
      String string0 = StringUtils.wrap(">s*n", ')');
      assertNotNull(string0);
      assertEquals(")>s*n)", string0);
      
      String string1 = StringUtils.replaceChars((String) null, "Index: ", "Search and Replace array lengths don't match: ");
      assertNull(string1);
      
      int int0 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test725()  throws Throwable  {
      String string0 = StringUtils.normalizeSpace("&i_[[(MI/n0 24<H?,?e_h");
      assertNotNull(string0);
      assertEquals("&i_[[(MI/n0 24<H?,?e_h", string0);
      
      String string1 = StringUtils.replace("=mBH_.c;NI3b", "l7#YO", "&i_[[(MI/n0 24<H?,?e_h");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("=mBH_.c;NI3b", string1);
      
      String string2 = StringUtils.abbreviate("offset cannot be negative", 90, 100);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("offset cannot be negative", string2);
      
      String string3 = StringUtils.trimToNull("&i_[[(MI/n0 24<H?,?e_h");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string0));
      assertEquals("&i_[[(MI/n0 24<H?,?e_h", string3);
      
      boolean boolean0 = StringUtils.endsWithAny("&i_[[(MI/n0 24<H?,?e_h", (CharSequence[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test726()  throws Throwable  {
      String[] stringArray0 = StringUtils.substringsBetween("aD", "aD", "aD");
      assertNull(stringArray0);
      
      String string0 = StringUtils.wrap("aD", 'q');
      assertNotNull(string0);
      assertEquals("qaDq", string0);
      
      String string1 = StringUtils.chop("qaDq");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("qaD", string1);
  }

  @Test(timeout = 4000)
  public void test727()  throws Throwable  {
      CharSequence charSequence0 = StringUtils.getIfBlank((CharSequence) " vs ", (Supplier<CharSequence>) null);
      assertNotNull(charSequence0);
      assertEquals(" vs ", charSequence0);
      
      String string0 = StringUtils.toRootUpperCase("$};'lPitG;hwAH");
      assertNotNull(string0);
      assertFalse(string0.equals((Object)charSequence0));
      assertEquals("$};'LPITG;HWAH", string0);
      
      boolean boolean0 = StringUtils.containsIgnoreCase(" vs ", " vs ");
      assertTrue(boolean0);
      
      String string1 = StringUtils.repeat('_', 1355);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)charSequence0));
      assertFalse(string1.equals((Object)string0));
      
      Stack<Locale.LanguageRange> stack0 = new Stack<Locale.LanguageRange>();
      assertNotNull(stack0);
      assertTrue(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      
      String string2 = StringUtils.join((List<?>) stack0, "$};'LPITG;HWAH", 1355, 1355);
      assertNotNull(string2);
      assertTrue(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertFalse(string2.equals((Object)charSequence0));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("", string2);
      
      CharSequence[] charSequenceArray0 = new CharSequence[7];
      charSequenceArray0[0] = (CharSequence) "$};'lPitG;hwAH";
      String string3 = StringUtils.defaultString(" vs ", "");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)charSequence0));
      assertFalse(string3.equals((Object)string1));
      assertEquals(" vs ", string3);
      
      charSequenceArray0[1] = (CharSequence) " vs ";
      charSequenceArray0[2] = (CharSequence) string1;
      charSequenceArray0[3] = (CharSequence) string1;
      charSequenceArray0[4] = (CharSequence) string1;
      String string4 = StringUtils.replaceFirst("", (String) null, "G");
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)charSequence0));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string2));
      assertEquals("", string4);
      
      charSequenceArray0[5] = (CharSequence) "";
      charSequenceArray0[6] = (CharSequence) "$};'lPitG;hwAH";
      boolean boolean1 = StringUtils.equalsAny(" vs ", charSequenceArray0);
      assertEquals(7, charSequenceArray0.length);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test728()  throws Throwable  {
      String string0 = StringUtils.LF;
      assertNotNull(string0);
      assertEquals("\n", string0);
      
      String string1 = StringUtils.stripStart("\n", "\n");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      
      String string2 = StringUtils.CR;
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("\r", string2);
      
      String string3 = StringUtils.toRootUpperCase("\r");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string2));
      assertEquals("\r", string3);
      
      String string4 = StringUtils.stripStart("icFB@9y", "");
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      
      String string5 = StringUtils.abbreviate("'J0IfGd^HTtFh", "'J0IfGd^HTtFh", 108, 14);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertEquals("'J0IfGd^HTtFh", string5);
  }

  @Test(timeout = 4000)
  public void test729()  throws Throwable  {
      String string0 = StringUtils.join((Iterator<?>) null, "");
      assertNull(string0);
      
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) "";
      objectArray0[1] = (Object) null;
      objectArray0[2] = (Object) null;
      String string1 = StringUtils.join(objectArray0, (String) null);
      assertNotNull(string1);
      assertEquals(3, objectArray0.length);
      assertEquals("", string1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      charSequenceArray0[0] = (CharSequence) null;
      boolean boolean0 = StringUtils.endsWithAny((CharSequence) null, charSequenceArray0);
      assertEquals(1, charSequenceArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test730()  throws Throwable  {
      String string0 = StringUtils.swapCase("/swe]");
      assertNotNull(string0);
      assertEquals("/SWE]", string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      charSequenceArray0[0] = (CharSequence) "/SWE]";
      int int0 = StringUtils.indexOf((CharSequence) "/swe]", (-1179), (-1179));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test731()  throws Throwable  {
      boolean boolean0 = StringUtils.containsOnly((CharSequence) null, "k]uJp{mQ8S!");
      assertFalse(boolean0);
      
      String string0 = StringUtils.center("k]uJp{mQ8S!", 0, 'A');
      assertNotNull(string0);
      assertEquals("k]uJp{mQ8S!", string0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparator("The character ", ".M,KjXgwysMU,", 508);
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      Integer[] integerArray0 = new Integer[2];
      Integer integer0 = new Integer(1385);
      assertNotNull(integer0);
      assertEquals(1385, (int)integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(0);
      assertNotNull(integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertEquals(0, (int)integer1);
      
      integerArray0[1] = integer1;
      String string1 = StringUtils.join(integerArray0);
      assertNotNull(string1);
      assertEquals(2, integerArray0.length);
      assertFalse(string1.equals((Object)string0));
      assertEquals("13850", string1);
      
      String string2 = StringUtils.removeStartIgnoreCase("org.apache.commons.lang3.StringUtils", ".M,KjXgwysMU,");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("org.apache.commons.lang3.StringUtils", string2);
      
      String string3 = StringUtils.removeFirst(".M,KjXgwysMU,", "13850");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals(".M,KjXgwysMU,", string3);
      
      String string4 = StringUtils.defaultString("k]uJp{mQ8S!", "{AXZ<\"bIJ{r8");
      assertNotNull(string4);
      assertTrue(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertEquals("k]uJp{mQ8S!", string4);
      
      String string5 = StringUtils.chomp("org.apache.commons.lang3.StringUtils", "5|5pGW#urA~r?~3");
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertTrue(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertEquals("org.apache.commons.lang3.StringUtils", string5);
      
      String[] stringArray1 = StringUtils.split((String) null);
      assertNull(stringArray1);
      
      String string6 = StringUtils.remove("M<R3~4EOGgh67o", "");
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string1));
      assertEquals("M<R3~4EOGgh67o", string6);
      
      boolean boolean1 = StringUtils.containsAny((CharSequence) "M<R3~4EOGgh67o", (CharSequence[]) stringArray0);
      assertEquals(1, stringArray0.length);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = StringUtils.isAlphaSpace(".M,KjXgwysMU,");
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      int int0 = StringUtils.compareIgnoreCase("M<R3~4EOGgh67o", "k]uJp{mQ8S!", false);
      assertEquals(2, int0);
      
      Locale locale0 = Locale.CANADA;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("CA", locale0.getCountry());
      assertEquals("en_CA", locale0.toString());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale0.getISO3Language());
      
      String string7 = locale0.getDisplayCountry();
      assertNotNull(string7);
      assertEquals("", locale0.getVariant());
      assertEquals("CA", locale0.getCountry());
      assertEquals("en_CA", locale0.toString());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale0.getISO3Language());
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string5));
      assertEquals("Canada", string7);
      
      String[] stringArray2 = Locale.getISOCountries();
      assertNotNull(stringArray2);
      assertNotSame(stringArray2, stringArray0);
      assertEquals(250, stringArray2.length);
      assertFalse(stringArray2.equals((Object)stringArray0));
      
      String string8 = StringUtils.lowerCase((String) null, locale0);
      assertNull(string8);
      assertEquals("", locale0.getVariant());
      assertEquals("CA", locale0.getCountry());
      assertEquals("en_CA", locale0.toString());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale0.getISO3Language());
      
      boolean boolean3 = StringUtils.startsWith((CharSequence) null, "5|5pGW#urA~r?~3");
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3);
  }

  @Test(timeout = 4000)
  public void test732()  throws Throwable  {
      int int0 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      String string0 = StringUtils.substringAfterLast("jZ2Xbq8JxDS]4zy", (-1414));
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.trimToEmpty("jZ2Xbq8JxDS]4zy");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("jZ2Xbq8JxDS]4zy", string1);
  }

  @Test(timeout = 4000)
  public void test733()  throws Throwable  {
      String string0 = StringUtils.unwrap("The Array must not be null", ".M,KjXgwysMU,");
      assertNotNull(string0);
      assertEquals("The Array must not be null", string0);
  }

  @Test(timeout = 4000)
  public void test734()  throws Throwable  {
      boolean boolean0 = StringUtils.isAnyBlank((CharSequence[]) null);
      assertFalse(boolean0);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) 1659;
      boolean boolean1 = StringUtils.isAnyEmpty((CharSequence[]) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test735()  throws Throwable  {
      String string0 = StringUtils.abbreviateMiddle("E2*1.s*OqQHFD&gQd9O", "E2*1.s*OqQHFD&gQd9O", (-526));
      assertNotNull(string0);
      assertEquals("E2*1.s*OqQHFD&gQd9O", string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[0] = (CharSequence) "E2*1.s*OqQHFD&gQd9O";
      int int0 = StringUtils.lastIndexOf((CharSequence) "E2*1.s*OqQHFD&gQd9O", charSequenceArray0[0]);
      assertEquals(2, charSequenceArray0.length);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test736()  throws Throwable  {
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) 'u';
      char[] charArray0 = new char[0];
      String string0 = StringUtils.defaultIfEmpty("`", (String) null);
      assertNotNull(string0);
      assertEquals("`", string0);
      
      String string1 = StringUtils.chomp("Asrswe==p5ZL+jAsrswe==p5@L+jAsrswe==p5@L+jAsrswe==p5@L+j");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("Asrswe==p5ZL+jAsrswe==p5@L+jAsrswe==p5@L+jAsrswe==p5@L+j", string1);
      
      String[] stringArray0 = StringUtils.substringsBetween((String) null, "Object varargs must not be null", ">s*C");
      assertNull(stringArray0);
      
      String string2 = StringUtils.wrap("Asrswe==p5ZL+jAsrswe==p5@L+jAsrswe==p5@L+jAsrswe==p5@L+j", ')');
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals(")Asrswe==p5ZL+jAsrswe==p5@L+jAsrswe==p5@L+jAsrswe==p5@L+j)", string2);
      
      String string3 = StringUtils.replaceChars("o[-vbADB{;/Lp<l", "Search and Replace array lengths don't match: ", "~");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals("[-vbADB{;/L<", string3);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "~", (-910), (-910));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test737()  throws Throwable  {
      boolean boolean0 = StringUtils.isNoneEmpty((CharSequence[]) null);
      assertTrue(boolean0);
      
      String string0 = StringUtils.substringAfter("org.apache.commons.lang3.ArrayUtils", "");
      assertNotNull(string0);
      assertEquals("org.apache.commons.lang3.ArrayUtils", string0);
      
      String string1 = StringUtils.removeEnd("", "xA1V(8l[DB");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      
      int[] intArray0 = new int[9];
      intArray0[0] = 0;
      intArray0[1] = (-557);
      intArray0[2] = (-1);
      intArray0[3] = 14;
      intArray0[5] = 32;
      String[] stringArray0 = StringUtils.substringsBetween("org.apache.commons.lang3.ArrayUtils", "", "");
      assertNull(stringArray0);
      
      int int0 = StringUtils.indexOf((CharSequence) "", 32, 72);
      assertEquals((-1), int0);
      
      boolean boolean1 = StringUtils.isAnyBlank((CharSequence[]) null);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string2 = StringUtils.stripStart("org.apache.commons.lang3.ArrayUtils", "");
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("org.apache.commons.lang3.ArrayUtils", string2);
      
      String string3 = StringUtils.center("", (-557), 'v');
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string1));
      assertEquals("", string3);
      
      String string4 = StringUtils.swapCase("T4re(*1$i|eTM_fl_");
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertEquals("t4RE(*1$I|Etm_FL_", string4);
  }

  @Test(timeout = 4000)
  public void test738()  throws Throwable  {
      String string0 = StringUtils.wrap((String) null, 'U');
      assertNull(string0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens((String) null, (String) null, (-2092));
      assertNull(stringArray0);
      
      boolean boolean0 = StringUtils.startsWith((CharSequence) null, (CharSequence) null);
      assertTrue(boolean0);
      
      String string1 = StringUtils.center("/L", (-2092), 'U');
      assertNotNull(string1);
      assertEquals("/L", string1);
      
      String string2 = StringUtils.join((Object[]) null);
      assertNull(string2);
      
      // Undeclared exception!
      try { 
        StringUtils.getLevenshteinDistance((CharSequence) null, (CharSequence) "/L");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test739()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      assertNotNull(stringWriter0);
      assertEquals("", stringWriter0.toString());
      
      String string0 = StringUtils.stripStart("_8qa&p5SKnE+", "_8qa&p5SKnE+");
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test740()  throws Throwable  {
      String string0 = StringUtils.substringAfterLast("W~p/]:FDw`qEP(g{Xm", (-1104));
      assertNotNull(string0);
      assertEquals("", string0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens((String) null, (String) null);
      assertNull(stringArray0);
      
      String string1 = StringUtils.unwrap("', has a length less than 2", "");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("', has a length less than 2", string1);
      
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      String string2 = StringUtils.getIfBlank("}mn)GjCTd1O}bu", supplier0);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("}mn)GjCTd1O}bu", string2);
      
      String string3 = StringUtils.remove("W~p/]:FDw`qEP(g{Xm", "org.apache.commons.lang3.StringUtils");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("W~p/]:FDw`qEP(g{Xm", string3);
      
      boolean boolean0 = StringUtils.endsWithAny("W~p/]:FDw`qEP(g{Xm", (CharSequence[]) null);
      assertFalse(boolean0);
      
      String string4 = StringUtils.replaceEach((String) null, (String[]) null, (String[]) null);
      assertNull(string4);
      
      String string5 = StringUtils.abbreviateMiddle("[JES !E`+9v8&", "[JES !E`+9v8&", 4);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertEquals("[JES !E`+9v8&", string5);
      
      String[] stringArray1 = StringUtils.substringsBetween("UlR=\"s0>.9c_L", "[JES !E`+9v8&", ":0xG8jYirkL");
      assertNull(stringArray1);
      
      int int0 = StringUtils.indexOf((CharSequence) "', has a length less than 2", (-1104), 531);
      assertEquals((-1), int0);
      
      boolean boolean1 = StringUtils.isAnyBlank((CharSequence[]) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string6 = StringUtils.stripStart("Urxt~.f^0A|R$|j", "");
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string0));
      assertEquals("Urxt~.f^0A|R$|j", string6);
      
      String string7 = StringUtils.center("}mn)GjCTd1O}bu", 4, 'v');
      assertNotNull(string7);
      assertTrue(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string3));
      assertEquals("}mn)GjCTd1O}bu", string7);
  }

  @Test(timeout = 4000)
  public void test741()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      assertNotNull(stringWriter0);
      assertEquals("", stringWriter0.toString());
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) (-77);
      String string0 = StringUtils.swapCase("_]Z(/oOK,3x$ClK");
      assertNotNull(string0);
      assertEquals("_]z(/Ook,3X$cLk", string0);
      
      boolean boolean0 = StringUtils.isAllLowerCase("_]z(/Ook,3X$cLk");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test742()  throws Throwable  {
      String string0 = StringUtils.replace("", "US.^e:o_ufGpA", "", 0);
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.replaceIgnoreCase("", "US.^e:o_ufGpA", "The String must not be empty", (-3695));
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      
      String string2 = StringUtils.center("", 1911);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = "US.^e:o_ufGpA";
      stringArray0[1] = "/)q_F[PuSDH6Q*O";
      stringArray0[2] = null;
      String[] stringArray1 = new String[1];
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      stringArray1[0] = string2;
      String string3 = StringUtils.replaceEachRepeatedly("f-(lKiCGI ^q%", stringArray1, stringArray1);
      assertNotNull(string3);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(1, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals("f-(lKiCGI ^q%", string3);
      
      String string4 = StringUtils.join((byte[]) null, 'k');
      assertNull(string4);
      
      boolean boolean0 = StringUtils.isAlphanumericSpace((CharSequence) null);
      assertFalse(boolean0);
      
      String[] stringArray2 = new String[2];
      assertFalse(stringArray2.equals((Object)stringArray1));
      assertFalse(stringArray2.equals((Object)stringArray0));
      
      stringArray2[0] = null;
      stringArray2[1] = null;
      String string5 = StringUtils.getCommonPrefix(stringArray2);
      assertNotNull(string5);
      assertNotSame(stringArray2, stringArray1);
      assertNotSame(stringArray2, stringArray0);
      assertEquals(2, stringArray2.length);
      assertFalse(stringArray2.equals((Object)stringArray1));
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertTrue(string5.equals((Object)string0));
      assertTrue(string5.equals((Object)string1));
      assertEquals("", string5);
  }

  @Test(timeout = 4000)
  public void test743()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      assertNotNull(stringWriter0);
      assertEquals("", stringWriter0.toString());
      
      int int0 = StringUtils.compareIgnoreCase((String) null, (String) null);
      assertEquals(0, int0);
      
      String string0 = StringUtils.trimToEmpty("m{+0AUl/\"FKSCEP(U)");
      assertNotNull(string0);
      assertEquals("m{+0AUl/\"FKSCEP(U)", string0);
      
      boolean boolean0 = StringUtils.contains((CharSequence) null, (-541));
      assertFalse(boolean0);
      
      String[] stringArray0 = new String[9];
      stringArray0[0] = "m{+0AUl/\"FKSCEP(U)";
      stringArray0[1] = "m{+0AUl/\"FKSCEP(U)";
      stringArray0[2] = null;
      stringArray0[3] = "ng3.StringUtils";
      stringArray0[4] = "m{+0AUl/\"FKSCEP(U)";
      stringArray0[5] = "5|5pGW#urA~r?~3";
      stringArray0[6] = "m{+0AUl/\"FKSCEP(U)";
      stringArray0[7] = null;
      stringArray0[8] = "m{+0AUl/\"FKSCEP(U)";
      String string1 = StringUtils.replaceEachRepeatedly((String) null, stringArray0, stringArray0);
      assertNull(string1);
      assertEquals(9, stringArray0.length);
      
      String string2 = StringUtils.stripToEmpty("ng3.StringUtils");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertEquals("ng3.StringUtils", string2);
      
      String[] stringArray1 = StringUtils.stripAll(stringArray0);
      assertNotNull(stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertNotSame(stringArray0, stringArray1);
      assertEquals(9, stringArray1.length);
      assertEquals(9, stringArray0.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      int int1 = StringUtils.compareIgnoreCase("Strings must not be null", "m{+0AUl/\"FKSCEP(U)", false);
      assertFalse(int1 == int0);
      assertEquals(6, int1);
      
      String string3 = StringUtils.trim("jU3");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals("jU3", string3);
      
      boolean boolean1 = StringUtils.endsWithAny("jU3", stringArray0);
      assertNotSame(stringArray0, stringArray1);
      assertEquals(9, stringArray0.length);
      assertTrue(boolean1 == boolean0);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertFalse(boolean1);
      
      String string4 = StringUtils.abbreviateMiddle("]", "}|<s=_Tum[XO|L", 15);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertEquals("]", string4);
      
      int int2 = StringUtils.indexOfAny((CharSequence) "m{+0AUl/\"FKSCEP(U)", "ng3.StringUtils");
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(5, int2);
      
      String string5 = StringUtils.normalizeSpace("Strings must not be null");
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertEquals("Strings must not be null", string5);
  }

  @Test(timeout = 4000)
  public void test744()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = (int) '7';
      intArray0[1] = (int) '7';
      String string0 = StringUtils.substringBetween("y", "y");
      assertNull(string0);
      
      boolean boolean0 = StringUtils.isNotBlank((CharSequence) null);
      assertFalse(boolean0);
      
      String string1 = StringUtils.substringBeforeLast("Aborting to protect against StackOverflowError - output of one loop is the input of another", "Aborting to protect against StackOverflowError - output of one loop is the input of another");
      assertNotNull(string1);
      assertEquals("", string1);
      
      String[] stringArray0 = new String[8];
      stringArray0[0] = "Aborting to protect against StackOverflowError - output of one loop is the input of another";
      stringArray0[2] = null;
      stringArray0[3] = "";
      stringArray0[4] = "Aborting to protect against StackOverflowError - output of one loop is the input of another";
      stringArray0[5] = null;
      stringArray0[6] = "Aborting to protect against StackOverflowError - output of one loop is the input of another";
      stringArray0[7] = null;
      String string2 = StringUtils.stripStart((String) null, "$!E .6R4###h%l,");
      assertNull(string2);
  }

  @Test(timeout = 4000)
  public void test745()  throws Throwable  {
      String string0 = StringUtils.join((Iterator<?>) null, "");
      assertNull(string0);
      
      String string1 = StringUtils.substringBeforeLast("The Array must not be null", "");
      assertNotNull(string1);
      assertEquals("The Array must not be null", string1);
      
      HashSet<String> hashSet0 = new HashSet<String>();
      assertNotNull(hashSet0);
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      assertFalse(hashSet0.contains(string1));
      
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>(hashSet0);
      assertNotNull(linkedHashSet0);
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertFalse(hashSet0.contains(string1));
      assertFalse(linkedHashSet0.contains(string1));
      
      String string2 = StringUtils.join((Iterable<?>) linkedHashSet0, 'w');
      assertNotNull(string2);
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertFalse(string2.equals((Object)string1));
      assertEquals("", string2);
      assertFalse(hashSet0.contains(string1));
      assertFalse(linkedHashSet0.contains(string1));
  }

  @Test(timeout = 4000)
  public void test746()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "java.lang.Object@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.Object@50d3e7ejava.lang.Object@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.Object@50d3e7e";
      stringArray0[1] = "java.lang.Object@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.Object@50d3e7ejava.lang.Object@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.Object@50d3e7e";
      String string0 = StringUtils.trimToEmpty("java.lang.Object@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.Object@50d3e7ejava.lang.Object@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.Object@50d3e7e");
      assertNotNull(string0);
      
      String string1 = StringUtils.appendIfMissingIgnoreCase("org.apache.commons.lang3.CharUtils", "The character ", stringArray0);
      assertNotNull(string1);
      assertEquals(4, stringArray0.length);
      assertFalse(string1.equals((Object)string0));
      assertEquals("org.apache.commons.lang3.CharUtilsThe character ", string1);
  }

  @Test(timeout = 4000)
  public void test747()  throws Throwable  {
      String string0 = StringUtils.join((Iterator<?>) null, "");
      assertNull(string0);
      
      String string1 = StringUtils.removePattern("", "");
      assertNotNull(string1);
      assertEquals("", string1);
  }

  @Test(timeout = 4000)
  public void test748()  throws Throwable  {
      String string0 = StringUtils.swapCase("/swe]");
      assertNotNull(string0);
      assertEquals("/SWE]", string0);
      
      String string1 = StringUtils.uncapitalize("/SWE]");
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("/SWE]", string1);
      
      String string2 = StringUtils.chomp("/swe]");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("/swe]", string2);
      
      int int0 = StringUtils.indexOf((CharSequence) "/SWE]", (CharSequence) "/SWE]");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test749()  throws Throwable  {
      String string0 = StringUtils.remove("W~p/]:FDw`qEP(g{Xm", "W~p/]:FDw`qEP(g{Xm");
      assertNotNull(string0);
      assertEquals("", string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[7];
      charSequenceArray0[1] = (CharSequence) "";
      String string1 = StringUtils.defaultString("", "MhTwQcx/_PKe*xv\"");
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      
      String string2 = StringUtils.chomp(".M,KjXgwsMU,", "=]Un2oPT<");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals(".M,KjXgwsMU,", string2);
      
      String[] stringArray0 = StringUtils.split(".M,KjXgwsMU,");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      String string3 = StringUtils.substringBeforeLast(".M,KjXgwsMU,", "=]Un2oPT<");
      assertNotNull(string3);
      assertTrue(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals(".M,KjXgwsMU,", string3);
      
      boolean boolean0 = StringUtils.endsWith((CharSequence) null, "=]Un2oPT<");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isAsciiPrintable(".M,KjXgwsMU,");
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String string4 = StringUtils.substringBeforeLast(".M,KjXgwsMU,", "=]Un2oPT<");
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertEquals(".M,KjXgwsMU,", string4);
  }

  @Test(timeout = 4000)
  public void test750()  throws Throwable  {
      String string0 = "";
      String string1 = StringUtils.join((Iterator<?>) null, "");
      assertNull(string1);
      
      String string2 = StringUtils.substringBeforeLast("The Array must not be null", "");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertEquals("The Array must not be null", string2);
      
      byte[] byteArray0 = new byte[3];
      byte byte0 = (byte)16;
      byteArray0[0] = (byte)16;
      byte byte1 = (byte) (-116);
      byteArray0[1] = (byte) (-116);
      byteArray0[2] = (byte)43;
      String string3 = StringUtils.join(byteArray0, 'I');
      assertNotNull(string3);
      assertEquals(3, byteArray0.length);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals("16I-116I43", string3);
      assertArrayEquals(new byte[] {(byte)16, (byte) (-116), (byte)43}, byteArray0);
      
      boolean boolean0 = StringUtils.endsWithIgnoreCase((CharSequence) null, "16I-116I43");
      assertFalse(boolean0);
      
      String string4 = StringUtils.swapCase("The Array must not be null");
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertEquals("tHE aRRAY MUST NOT BE NULL", string4);
      
      char char0 = 'x';
      String string5 = StringUtils.join(byteArray0, 'x', (int) (byte)16, (int) (byte) (-116));
      assertNotNull(string5);
      assertEquals(3, byteArray0.length);
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertEquals("", string5);
      assertArrayEquals(new byte[] {(byte)16, (byte) (-116), (byte)43}, byteArray0);
      
      TreeSet<Object> treeSet0 = new TreeSet<Object>((Comparator<? super Object>) null);
      assertNotNull(treeSet0);
      assertFalse(treeSet0.contains("16I-116I43"));
      
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "The Array must not be null");
      assertNotNull(charBuffer0);
      assertEquals(26, charBuffer0.limit());
      assertFalse(charBuffer0.isDirect());
      assertEquals(26, charBuffer0.remaining());
      assertEquals("The Array must not be null", charBuffer0.toString());
      assertEquals(26, charBuffer0.length());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.hasArray());
      assertTrue(charBuffer0.isReadOnly());
      assertEquals(26, charBuffer0.capacity());
      assertTrue(charBuffer0.hasRemaining());
      
      boolean boolean1 = treeSet0.add(charBuffer0);
      assertEquals(26, charBuffer0.limit());
      assertFalse(charBuffer0.isDirect());
      assertEquals(26, charBuffer0.remaining());
      assertEquals("The Array must not be null", charBuffer0.toString());
      assertEquals(26, charBuffer0.length());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.hasArray());
      assertTrue(charBuffer0.isReadOnly());
      assertEquals(26, charBuffer0.capacity());
      assertTrue(charBuffer0.hasRemaining());
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      // Undeclared exception!
      try { 
        treeSet0.lower("5FbWs?U");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test751()  throws Throwable  {
      String string0 = StringUtils.uncapitalize("S`!-mCa0");
      assertNotNull(string0);
      assertEquals("s`!-mCa0", string0);
      
      boolean boolean0 = StringUtils.isWhitespace("s`!-mCa0");
      assertFalse(boolean0);
      
      String string1 = StringUtils.substringBeforeLast("S`!-mCa0", "java.lang.Object@162f0309java.lang.Object@ee1d858java.lang.Object@29d768adjava.lang.Object@195c9e91java.lang.Object@7705e1f8java.lang.Object@162f0309java.lang.Object@ee1d858java.lang.Object@29d768adjava.lang.Object@195c9e91java.lang.Object@7705e1f8");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("S`!-mCa0", string1);
      
      boolean boolean1 = StringUtils.isAllLowerCase("S`!-mCa0");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test752()  throws Throwable  {
      String string0 = StringUtils.join((Iterator<?>) null, "");
      assertNull(string0);
      
      String[] stringArray0 = new String[5];
      stringArray0[0] = " ";
      stringArray0[1] = " ";
      stringArray0[2] = "nFU)@y~JLh";
      stringArray0[3] = "nFU)@y~JLh";
      stringArray0[4] = "";
      // Undeclared exception!
      try { 
        StringUtils.replaceEachRepeatedly(" ", stringArray0, stringArray0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Aborting to protect against StackOverflowError - output of one loop is the input of another
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test753()  throws Throwable  {
      String string0 = StringUtils.center("", 12);
      assertNotNull(string0);
      assertEquals("           ", string0);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = ".M,KjXgwsMU,";
      stringArray0[1] = "";
      // Undeclared exception!
      try { 
        StringUtils.replaceEachRepeatedly(".M,KjXgwsMU,", stringArray0, stringArray0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Aborting to protect against StackOverflowError - output of one loop is the input of another
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test754()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "java.lang.Object@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.Object@50d3e7ejava.lang.Object@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.Object@50d3e7e";
      stringArray0[2] = "java.lang.Object@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.Object@50d3e7ejava.lang.Object@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.Object@50d3e7e";
      stringArray0[3] = "java.lang.Object@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.Object@50d3e7ejava.lang.Object@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.Object@50d3e7e";
      String string0 = StringUtils.replaceEach("java.lang.Object@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.Object@50d3e7ejava.lang.Object@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.Object@50d3e7e", stringArray0, stringArray0);
      assertNotNull(string0);
      assertEquals(4, stringArray0.length);
      
      boolean boolean0 = StringUtils.isNumericSpace("java.lang.Object@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.Object@50d3e7ejava.lang.Object@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.Object@50d3e7e");
      assertFalse(boolean0);
      
      String string1 = StringUtils.stripAccents("java.lang.Object@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.Object@50d3e7ejava.lang.Object@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.Object@50d3e7e");
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      
      String string2 = StringUtils.replaceOnceIgnoreCase("java.lang.Object@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.Object@50d3e7ejava.lang.Object@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.Object@50d3e7ejava.lang.Object@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.Object@50d3e7ejava.lang.Object@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.Object@50d3e7e", "", "java.lang.Object@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.Object@50d3e7ejava.lang.Object@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.Object@50d3e7e");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      String string3 = StringUtils.overlay("java.lang.Object@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.Object@50d3e7ejava.lang.Object@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.Object@50d3e7e", "K_|d4?rO3lp`,uBW;", (-342), (-342));
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      
      String string4 = StringUtils.substringAfterLast("java.lang.Object@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.Object@50d3e7ejava.lang.Object@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.Object@50d3e7ejava.lang.Object@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.Object@50d3e7ejava.lang.Object@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.Object@50d3e7e", "java.lang.Object@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.Object@50d3e7ejava.lang.Object@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.Object@50d3e7e");
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertEquals("", string4);
      
      String string5 = StringUtils.defaultIfBlank("", "$3]");
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertEquals("$3]", string5);
      
      boolean boolean1 = StringUtils.isAnyEmpty(stringArray0);
      assertEquals(4, stringArray0.length);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      boolean boolean2 = StringUtils.contains((CharSequence) "java.lang.Object@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.Object@50d3e7ejava.lang.Object@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.Object@50d3e7e", (CharSequence) "java.lang.Object@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.Object@50d3e7ejava.lang.Object@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.Object@50d3e7e");
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2);
  }

  @Test(timeout = 4000)
  public void test755()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "";
      stringArray0[1] = "";
      // Undeclared exception!
      try { 
        StringUtils.replaceEachRepeatedly("", stringArray0, stringArray0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Aborting to protect against StackOverflowError - output of one loop is the input of another
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test756()  throws Throwable  {
      String string0 = StringUtils.unwrap("PN}", "PN}");
      assertNotNull(string0);
      assertEquals("PN}", string0);
      
      String string1 = StringUtils.removeStart("PN}", "");
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("PN}", string1);
      
      Vector<Locale.LanguageRange> vector0 = new Vector<Locale.LanguageRange>(1376, 512);
      assertNotNull(vector0);
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertEquals(1376, vector0.capacity());
      assertTrue(vector0.isEmpty());
      
      Locale.LanguageRange locale_LanguageRange0 = null;
      try {
        locale_LanguageRange0 = new Locale.LanguageRange("[w!Dyh-QUlS\"BgE{JC");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // range=[w!dyh-quls\"bge{jc
         //
         verifyException("java.util.Locale$LanguageRange", e);
      }
  }

  @Test(timeout = 4000)
  public void test757()  throws Throwable  {
      String string0 = StringUtils.upperCase("", (Locale) null);
      assertNotNull(string0);
      assertEquals("", string0);
      
      boolean boolean0 = StringUtils.isNotEmpty("");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isAsciiPrintable("");
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String string1 = StringUtils.upperCase("", (Locale) null);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) null;
      objectArray0[2] = (Object) "";
      objectArray0[3] = (Object) "";
      objectArray0[4] = (Object) "";
      objectArray0[5] = (Object) "";
      String string2 = StringUtils.difference("ko ?8?sYQU", "");
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertEquals("", string2);
      
      String string3 = StringUtils.trimToNull("5HNV");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals("5HNV", string3);
      
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[0] = (CharSequence) "ko ?8?sYQU";
      charSequenceArray0[1] = (CharSequence) "ko ?8?sYQU";
      boolean boolean2 = StringUtils.startsWithAny("ko ?8?sYQU", charSequenceArray0);
      assertEquals(2, charSequenceArray0.length);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2);
      
      String string4 = StringUtils.removeEndIgnoreCase("", "Z%+NJ");
      assertNotNull(string4);
      assertTrue(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string1));
      assertEquals("", string4);
  }

  @Test(timeout = 4000)
  public void test758()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-41);
      String string0 = StringUtils.join(byteArray0, 'u', (-494), (-595425980));
      assertNotNull(string0);
      assertEquals(1, byteArray0.length);
      assertEquals("", string0);
      assertArrayEquals(new byte[] {(byte) (-41)}, byteArray0);
      
      String string1 = StringUtils.stripAccents("p{InCombiningDiacriticalMarks}+");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("p{InCombiningDiacriticalMarks}+", string1);
      
      String string2 = StringUtils.removeStartIgnoreCase("org.apache.commons.lang3.exception.CloneFailedException", "The type must not be null");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("org.apache.commons.lang3.exception.CloneFailedException", string2);
      
      String string3 = StringUtils.toRootUpperCase(".M,KjXgwsMU,=]Un2oPT<");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals(".M,KJXGWSMU,=]UN2OPT<", string3);
      
      Vector<String> vector0 = new Vector<String>();
      assertNotNull(vector0);
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertFalse(vector0.contains(".M,KjXgwsMU,=]Un2oPT<"));
      
      vector0.removeAllElements();
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertFalse(vector0.contains(".M,KjXgwsMU,=]Un2oPT<"));
      
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>(vector0);
      assertNotNull(linkedHashSet0);
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertFalse(vector0.contains(".M,KjXgwsMU,=]Un2oPT<"));
      assertFalse(linkedHashSet0.contains(".M,KjXgwsMU,=]Un2oPT<"));
      
      String string4 = StringUtils.join((Iterable<?>) null, ',');
      assertNull(string4);
      
      String string5 = StringUtils.unwrap("org.apache.commons.lang3.exception.CloneFailedException", ".M,KJXGWSMU,=]UN2OPT<");
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertTrue(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertEquals("org.apache.commons.lang3.exception.CloneFailedException", string5);
  }

  @Test(timeout = 4000)
  public void test759()  throws Throwable  {
      String string0 = StringUtils.center("", 12);
      assertNotNull(string0);
      assertEquals("           ", string0);
      
      String string1 = "\\.M,KjXgwsMU,";
      String[] stringArray0 = new String[2];
      stringArray0[0] = ".M,KjXgwsMU,";
      stringArray0[1] = "";
      // Undeclared exception!
      try { 
        StringUtils.replaceEachRepeatedly(".M,KjXgwsMU,", stringArray0, stringArray0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Aborting to protect against StackOverflowError - output of one loop is the input of another
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test760()  throws Throwable  {
      String string0 = StringUtils.remove("$4'Tcj.*5", 'o');
      assertNotNull(string0);
      assertEquals("$4'Tcj.*5", string0);
      
      String string1 = StringUtils.removeFirst("$4'Tcj.*5", "$4'Tcj.*5");
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("$4'Tcj.*5", string1);
      
      String string2 = StringUtils.trim("$4'Tcj.*5");
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertEquals("$4'Tcj.*5", string2);
      
      ArrayDeque<Integer> arrayDeque0 = new ArrayDeque<Integer>();
      assertNotNull(arrayDeque0);
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      
      Iterator<Integer> iterator0 = arrayDeque0.descendingIterator();
      assertNotNull(iterator0);
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      
      String string3 = StringUtils.join(iterator0, "#");
      assertNotNull(string3);
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals("", string3);
      
      String string4 = StringUtils.reverse("$4'Tcj.*5");
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertEquals("5*.jcT'4$", string4);
      
      Integer integer0 = new Integer(24);
      assertNotNull(integer0);
      assertEquals(24, (int)integer0);
      
      boolean boolean0 = arrayDeque0.add(integer0);
      assertEquals(1, arrayDeque0.size());
      assertFalse(arrayDeque0.isEmpty());
      assertTrue(boolean0);
      assertTrue(arrayDeque0.contains(24));
      
      String string5 = StringUtils.join(iterator0, '0');
      assertNotNull(string5);
      assertEquals(1, arrayDeque0.size());
      assertFalse(arrayDeque0.isEmpty());
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertEquals("", string5);
      assertTrue(arrayDeque0.contains(24));
      
      int int0 = StringUtils.countMatches((CharSequence) "$4'Tcj.*5", 'T');
      assertEquals(1, int0);
      
      boolean boolean1 = StringUtils.containsAny((CharSequence) "$4'Tcj.*5", (char[]) null);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test761()  throws Throwable  {
      String[] stringArray0 = new String[4];
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      assertNotNull(locale0);
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TW", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TWN", locale0.getISO3Country());
      
      String string0 = locale0.getDisplayVariant();
      assertNotNull(string0);
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TW", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("", string0);
      
      Locale locale1 = Locale.GERMAN;
      assertNotNull(locale1);
      assertNotSame(locale1, locale0);
      assertEquals("de", locale1.toString());
      assertEquals("de", locale1.getLanguage());
      assertEquals("deu", locale1.getISO3Language());
      assertEquals("", locale1.getCountry());
      assertEquals("", locale1.getVariant());
      assertEquals("", locale1.getISO3Country());
      assertFalse(locale1.equals((Object)locale0));
      
      String string1 = locale0.getDisplayName(locale1);
      assertNotNull(string1);
      assertNotSame(locale0, locale1);
      assertNotSame(locale1, locale0);
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TW", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("de", locale1.toString());
      assertEquals("de", locale1.getLanguage());
      assertEquals("deu", locale1.getISO3Language());
      assertEquals("", locale1.getCountry());
      assertEquals("", locale1.getVariant());
      assertEquals("", locale1.getISO3Country());
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(locale1.equals((Object)locale0));
      assertFalse(string1.equals((Object)string0));
      assertEquals("Chinesisch (Taiwan)", string1);
      
      Locale locale2 = Locale.CHINESE;
      assertNotNull(locale2);
      assertNotSame(locale2, locale0);
      assertNotSame(locale2, locale1);
      assertEquals("zho", locale2.getISO3Language());
      assertEquals("", locale2.getCountry());
      assertEquals("zh", locale2.toString());
      assertEquals("", locale2.getISO3Country());
      assertEquals("zh", locale2.getLanguage());
      assertEquals("", locale2.getVariant());
      assertFalse(locale2.equals((Object)locale0));
      assertFalse(locale2.equals((Object)locale1));
      
      String string2 = StringUtils.removeStart("", "java.lang.Object@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.Object@50d3e7ejava.lang.Object@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.Object@50d3e7e");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertEquals("", string2);
      
      String string3 = StringUtils.upperCase("dPh#yD6ap(4~mv=o", locale1);
      assertNotNull(string3);
      assertNotSame(locale1, locale0);
      assertNotSame(locale1, locale2);
      assertEquals("de", locale1.toString());
      assertEquals("de", locale1.getLanguage());
      assertEquals("deu", locale1.getISO3Language());
      assertEquals("", locale1.getCountry());
      assertEquals("", locale1.getVariant());
      assertEquals("", locale1.getISO3Country());
      assertFalse(locale1.equals((Object)locale0));
      assertFalse(locale1.equals((Object)locale2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals("DPH#YD6AP(4~MV=O", string3);
      
      String string4 = StringUtils.prependIfMissing("Chinesisch (Taiwan)", "dPh#yD6ap(4~mv=o", stringArray0);
      assertNotNull(string4);
      assertEquals(4, stringArray0.length);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertEquals("dPh#yD6ap(4~mv=oChinesisch (Taiwan)", string4);
      
      boolean boolean0 = StringUtils.isBlank("java.lang.Object@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.Object@50d3e7ejava.lang.Object@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.Object@50d3e7e");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test762()  throws Throwable  {
      String string0 = StringUtils.normalizeSpace("66ZO]\"|@,");
      assertNotNull(string0);
      assertEquals("66ZO]\"|@,", string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      charSequenceArray0[0] = (CharSequence) "";
      String[] stringArray0 = new String[0];
      String string1 = StringUtils.replaceEach(" oGd1^tx%6&[wzIY(", stringArray0, stringArray0);
      assertNotNull(string1);
      assertEquals(0, stringArray0.length);
      assertFalse(string1.equals((Object)string0));
      assertEquals(" oGd1^tx%6&[wzIY(", string1);
      
      charSequenceArray0[1] = (CharSequence) " oGd1^tx%6&[wzIY(";
      charSequenceArray0[2] = (CharSequence) "";
      boolean boolean0 = StringUtils.isNoneBlank(charSequenceArray0);
      assertEquals(3, charSequenceArray0.length);
      assertFalse(boolean0);
      
      String string2 = StringUtils.capitalize("Z,UnQ&");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("Z,UnQ&", string2);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "66ZO]\"|@,", (CharSequence) "66ZO]\"|@,");
      assertEquals(0, int0);
      
      double double0 = StringUtils.getJaroWinklerDistance("66ZO]\"|@,", " oGd1^tx%6&[wzIY(");
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test763()  throws Throwable  {
      String string0 = StringUtils.leftPad((String) null, 280, 'q');
      assertNull(string0);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) null, (CharSequence) null);
      assertEquals((-1), int0);
      
      char[] charArray0 = new char[3];
      charArray0[0] = 'q';
      charArray0[1] = 'q';
      charArray0[2] = 'q';
      int int1 = StringUtils.indexOfAny((CharSequence) null, charArray0);
      assertEquals(3, charArray0.length);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      assertArrayEquals(new char[] {'q', 'q', 'q'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test764()  throws Throwable  {
      int[] intArray0 = new int[14];
      intArray0[0] = (int) '7';
      intArray0[1] = (int) '7';
      intArray0[1] = (int) '7';
      String string0 = StringUtils.join(intArray0, 'n');
      assertNotNull(string0);
      assertEquals(14, intArray0.length);
      assertEquals("55n55n0n0n0n0n0n0n0n0n0n0n0n0", string0);
      
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      Locale.Category[] locale_CategoryArray0 = new Locale.Category[3];
      locale_CategoryArray0[0] = locale_Category0;
      locale_CategoryArray0[1] = locale_Category0;
      locale_CategoryArray0[2] = locale_Category0;
      EnumSet<Locale.Category> enumSet0 = EnumSet.of(locale_Category0, locale_CategoryArray0);
      assertNotNull(enumSet0);
      assertEquals(1, enumSet0.size());
      assertEquals(3, locale_CategoryArray0.length);
      assertTrue(enumSet0.contains(locale_Category0));
      
      Locale.Category locale_Category1 = Locale.Category.DISPLAY;
      boolean boolean0 = enumSet0.add(locale_Category1);
      assertNotSame(locale_Category0, locale_Category1);
      assertNotSame(locale_Category1, locale_Category0);
      assertEquals(2, enumSet0.size());
      assertEquals(3, locale_CategoryArray0.length);
      assertFalse(locale_Category0.equals((Object)locale_Category1));
      assertFalse(locale_Category1.equals((Object)locale_Category0));
      assertTrue(boolean0);
      assertTrue(enumSet0.contains(locale_Category0));
      
      Iterator<Locale.Category> iterator0 = enumSet0.iterator();
      assertNotNull(iterator0);
      assertNotSame(locale_Category0, locale_Category1);
      assertEquals(2, enumSet0.size());
      assertEquals(3, locale_CategoryArray0.length);
      assertFalse(locale_Category0.equals((Object)locale_Category1));
      assertTrue(enumSet0.contains(locale_Category0));
      
      String string1 = StringUtils.join(iterator0, "Locale must not be null");
      assertNotNull(string1);
      assertNotSame(locale_Category0, locale_Category1);
      assertEquals(2, enumSet0.size());
      assertEquals(3, locale_CategoryArray0.length);
      assertFalse(locale_Category0.equals((Object)locale_Category1));
      assertFalse(string1.equals((Object)string0));
      assertEquals("DISPLAYLocale must not be nullFORMAT", string1);
      assertTrue(enumSet0.contains(locale_Category0));
      
      boolean boolean1 = StringUtils.contains((CharSequence) "DISPLAYLocale must not be nullFORMAT", 55);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test765()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      String string0 = StringUtils.removeEndIgnoreCase("The String must not be empty", "The String must not be empty");
      assertNotNull(string0);
      assertEquals("", string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[8];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "The String must not be empty";
      charSequenceArray0[2] = (CharSequence) "The String must not be empty";
      charSequenceArray0[3] = (CharSequence) "";
      charSequenceArray0[4] = (CharSequence) "";
      charSequenceArray0[5] = (CharSequence) "";
      charSequenceArray0[6] = (CharSequence) "";
      charSequenceArray0[7] = (CharSequence) "";
      boolean boolean0 = StringUtils.equalsAnyIgnoreCase("", charSequenceArray0);
      assertEquals(8, charSequenceArray0.length);
      assertTrue(boolean0);
      
      String string1 = StringUtils.substringAfterLast("The String must not be empty", ", '");
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      
      int[] intArray0 = StringUtils.toCodePoints(charSequenceArray0[1]);
      assertNotNull(intArray0);
      assertEquals(8, charSequenceArray0.length);
      assertEquals(28, intArray0.length);
      
      String string2 = StringUtils.defaultString("");
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertEquals("", string2);
      
      boolean boolean1 = StringUtils.startsWithAny(charSequenceArray0[3], charSequenceArray0);
      assertEquals(8, charSequenceArray0.length);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test766()  throws Throwable  {
      String string0 = StringUtils.abbreviateMiddle("E2*1.s*OqQHFD&gQd9O", "E2*1.s*OqQHFD&gQd9O", (-526));
      assertNotNull(string0);
      assertEquals("E2*1.s*OqQHFD&gQd9O", string0);
      
      String[] stringArray0 = StringUtils.split("E2*1.s*OqQHFD&gQd9O", 'x');
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      String string1 = StringUtils.reverseDelimited("The type must not be null", '$');
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("The type must not be null", string1);
      
      int int0 = new Integer((-526));
      assertEquals((-526), int0);
      
      String string2 = StringUtils.deleteWhitespace("MBDEMP");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("MBDEMP", string2);
      
      long[] longArray0 = new long[3];
      longArray0[0] = (long) '$';
      longArray0[1] = (long) (-526);
      longArray0[2] = (long) (-526);
      String string3 = StringUtils.join(longArray0, '$');
      assertNotNull(string3);
      assertEquals(3, longArray0.length);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals("36$-526$-526", string3);
      assertArrayEquals(new long[] {36L, (-526L), (-526L)}, longArray0);
      
      int[] intArray0 = new int[4];
      intArray0[0] = (int) '$';
      intArray0[1] = (int) 'x';
      intArray0[2] = (int) 'x';
      intArray0[3] = (-395);
      String string4 = StringUtils.join(intArray0, ':', 36, (-395));
      assertNotNull(string4);
      assertEquals(4, intArray0.length);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertEquals("", string4);
      assertArrayEquals(new int[] {36, 120, 120, (-395)}, intArray0);
      
      Locale locale0 = Locale.ENGLISH;
      assertNotNull(locale0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getCountry());
      
      int int1 = StringUtils.getFuzzyDistance("", "The type must not be null", locale0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      int int2 = StringUtils.countMatches((CharSequence) "MBDEMP", 'x');
      assertFalse(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals(0, int2);
      
      String string5 = StringUtils.removeEndIgnoreCase((String) null, "The type must not be null");
      assertNull(string5);
  }

  @Test(timeout = 4000)
  public void test767()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("w[ S*{(\"xv", "");
      assertNotNull(stringArray0);
      assertEquals(2, stringArray0.length);
      
      String[] stringArray1 = StringUtils.splitByCharacterTypeCamelCase("");
      assertNotNull(stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(0, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) (-173);
      doubleArray0[1] = (double) 'u';
      doubleArray0[2] = (double) (-173);
      doubleArray0[3] = (double) (-173);
      doubleArray0[4] = (double) (-173);
      doubleArray0[5] = (double) (-173);
      doubleArray0[6] = (double) (-173);
      doubleArray0[7] = (double) 'u';
      String string0 = StringUtils.join(doubleArray0, 'u', 37, (-2988));
      assertNotNull(string0);
      assertEquals(8, doubleArray0.length);
      assertEquals("", string0);
      assertArrayEquals(new double[] {(-173.0), 117.0, (-173.0), (-173.0), (-173.0), (-173.0), (-173.0), 117.0}, doubleArray0, 0.01);
      
      String string1 = StringUtils.removeFirst("c^P@NHM", "");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("c^P@NHM", string1);
      
      String string2 = StringUtils.getDigits("c^P@NHM");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertEquals("", string2);
      
      ArrayDeque<Integer> arrayDeque0 = new ArrayDeque<Integer>();
      assertNotNull(arrayDeque0);
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      assertFalse(arrayDeque0.contains((-173)));
      
      Iterator<Integer> iterator0 = arrayDeque0.descendingIterator();
      assertNotNull(iterator0);
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      assertFalse(arrayDeque0.contains((-173)));
      
      ArrayDeque<Integer> arrayDeque1 = arrayDeque0.clone();
      assertNotNull(arrayDeque1);
      assertNotSame(arrayDeque1, arrayDeque0);
      assertNotSame(arrayDeque0, arrayDeque1);
      assertEquals(0, arrayDeque1.size());
      assertTrue(arrayDeque1.isEmpty());
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      assertFalse(arrayDeque1.equals((Object)arrayDeque0));
      assertFalse(arrayDeque1.contains((-173)));
      assertFalse(arrayDeque0.contains((-173)));
      
      String string3 = StringUtils.join(iterator0, "");
      assertNotNull(string3);
      assertNotSame(arrayDeque0, arrayDeque1);
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      assertTrue(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(arrayDeque0.equals((Object)arrayDeque1));
      assertEquals("", string3);
      assertFalse(arrayDeque0.contains((-173)));
      
      String string4 = StringUtils.substringAfter("", "xxU");
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string2));
      assertEquals("", string4);
      
      String string5 = StringUtils.SPACE;
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertEquals(" ", string5);
      
      boolean boolean0 = StringUtils.startsWithAny(" ", stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(0, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test768()  throws Throwable  {
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      Locale.Category[] locale_CategoryArray0 = new Locale.Category[9];
      locale_CategoryArray0[0] = locale_Category0;
      Locale.Category locale_Category1 = Locale.Category.DISPLAY;
      locale_CategoryArray0[1] = locale_Category1;
      locale_CategoryArray0[2] = locale_Category0;
      locale_CategoryArray0[3] = locale_Category0;
      locale_CategoryArray0[4] = locale_Category0;
      locale_CategoryArray0[5] = locale_Category0;
      locale_CategoryArray0[6] = locale_Category0;
      locale_CategoryArray0[7] = locale_Category0;
      locale_CategoryArray0[8] = locale_Category0;
      EnumSet<Locale.Category> enumSet0 = EnumSet.of(locale_Category0, locale_CategoryArray0);
      assertNotNull(enumSet0);
      assertNotSame(locale_Category0, locale_Category1);
      assertEquals(2, enumSet0.size());
      assertEquals(9, locale_CategoryArray0.length);
      assertFalse(locale_Category0.equals((Object)locale_Category1));
      assertTrue(enumSet0.contains(locale_Category0));
      
      Locale.Category locale_Category2 = Locale.Category.FORMAT;
      boolean boolean0 = enumSet0.add(locale_Category2);
      assertSame(locale_Category0, locale_Category2);
      assertNotSame(locale_Category0, locale_Category1);
      assertSame(locale_Category2, locale_Category0);
      assertNotSame(locale_Category2, locale_Category1);
      assertEquals(2, enumSet0.size());
      assertEquals(9, locale_CategoryArray0.length);
      assertFalse(locale_Category0.equals((Object)locale_Category1));
      assertFalse(locale_Category2.equals((Object)locale_Category1));
      assertFalse(boolean0);
      assertTrue(enumSet0.contains(locale_Category2));
      
      Iterator<Locale.Category> iterator0 = enumSet0.iterator();
      assertNotNull(iterator0);
      assertSame(locale_Category0, locale_Category2);
      assertNotSame(locale_Category0, locale_Category1);
      assertEquals(2, enumSet0.size());
      assertEquals(9, locale_CategoryArray0.length);
      assertFalse(locale_Category0.equals((Object)locale_Category1));
      assertTrue(enumSet0.contains(locale_Category2));
      
      String string0 = StringUtils.join(iterator0, (String) null);
      assertNotNull(string0);
      assertSame(locale_Category0, locale_Category2);
      assertNotSame(locale_Category0, locale_Category1);
      assertEquals(2, enumSet0.size());
      assertEquals(9, locale_CategoryArray0.length);
      assertFalse(locale_Category0.equals((Object)locale_Category1));
      assertEquals("DISPLAYFORMAT", string0);
      assertTrue(enumSet0.contains(locale_Category2));
      
      boolean boolean1 = StringUtils.contains((CharSequence) null, 1);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test769()  throws Throwable  {
      String string0 = StringUtils.toRootLowerCase("");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.removeStart("", "");
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      
      int int0 = StringUtils.countMatches((CharSequence) "", 'h');
      assertEquals(0, int0);
      
      boolean boolean0 = StringUtils.contains((CharSequence) "", 0);
      assertFalse(boolean0);
      
      String[] stringArray0 = new String[9];
      stringArray0[0] = "org.apache.commons.lang3.StringUtils";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "2(G{JT[:z5FC";
      stringArray0[5] = "";
      stringArray0[6] = "";
      stringArray0[7] = "org.apache.commons.lang3.StringUtils";
      stringArray0[8] = "";
      String string2 = StringUtils.replaceEach("org.apache.commons.lang3.StringUtils", stringArray0, stringArray0);
      assertNotNull(string2);
      assertEquals(9, stringArray0.length);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("org.apache.commons.lang3.StringUtils", string2);
      
      boolean boolean1 = StringUtils.startsWithAny("", stringArray0);
      assertEquals(9, stringArray0.length);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string3 = StringUtils.substringBetween((String) null, "", "");
      assertNull(string3);
      
      int int1 = StringUtils.indexOfAny((CharSequence) null, (char[]) null);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      ArrayDeque<String> arrayDeque0 = new ArrayDeque<String>();
      assertNotNull(arrayDeque0);
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      assertFalse(arrayDeque0.contains(""));
      
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) arrayDeque0);
      assertNotNull(list0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertFalse(arrayDeque0.contains(""));
      assertFalse(list0.contains(""));
      
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>(list0);
      assertNotNull(linkedHashSet0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertFalse(arrayDeque0.contains(""));
      assertFalse(list0.contains(""));
      assertFalse(linkedHashSet0.contains(""));
      
      String string4 = StringUtils.join((Iterable<?>) linkedHashSet0, 'w');
      assertNotNull(string4);
      assertEquals(0, linkedList0.size());
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertTrue(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertEquals("", string4);
      assertFalse(arrayDeque0.contains(""));
      assertFalse(list0.contains(""));
      assertFalse(linkedHashSet0.contains(""));
  }

  @Test(timeout = 4000)
  public void test770()  throws Throwable  {
      String string0 = StringUtils.replaceOnceIgnoreCase("", "", "");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.toRootLowerCase("");
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      
      boolean boolean0 = StringUtils.isAllUpperCase("");
      assertFalse(boolean0);
      
      String string2 = StringUtils.join((boolean[]) null, '}', 322, 322);
      assertNull(string2);
      
      int int0 = StringUtils.countMatches((CharSequence) "", 'W');
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test771()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringUtils.replaceFirst("{}", "{}", "");
        fail("Expecting exception: PatternSyntaxException");
      
      } catch(PatternSyntaxException e) {
         //
         // Illegal repetition
         // {}
         //
         verifyException("java.util.regex.Pattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test772()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("vW]", 'z');
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      StringUtils stringUtils0 = new StringUtils();
      assertNotNull(stringUtils0);
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      
      long[] longArray0 = new long[4];
      longArray0[0] = (long) 'z';
      longArray0[1] = (-571L);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 'z';
      // Undeclared exception!
      try { 
        StringUtils.join(doubleArray0, '}', (-1), 8);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test773()  throws Throwable  {
      String string0 = StringUtils.center("", 12);
      assertNotNull(string0);
      assertEquals("           ", string0);
      
      String[] stringArray0 = new String[2];
      String[] stringArray1 = new String[0];
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      String string1 = StringUtils.replaceEachRepeatedly("PJXxx>+0&+,w}a'Nyb", stringArray0, stringArray1);
      assertNotNull(string1);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(2, stringArray0.length);
      assertEquals(0, stringArray1.length);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertFalse(string1.equals((Object)string0));
      assertEquals("PJXxx>+0&+,w}a'Nyb", string1);
  }

  @Test(timeout = 4000)
  public void test774()  throws Throwable  {
      String string0 = StringUtils.left("5|5pGW#urA~r?~3", (-494));
      assertNotNull(string0);
      assertEquals("", string0);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens((String) null, 'u');
      assertNull(stringArray0);
      
      StringUtils stringUtils0 = new StringUtils();
      assertNotNull(stringUtils0);
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      
      long[] longArray0 = new long[6];
      longArray0[0] = (long) (-494);
      longArray0[1] = (long) (-1);
      boolean boolean0 = StringUtils.containsAnyIgnoreCase("\r", (CharSequence[]) null);
      assertFalse(boolean0);
      
      String string1 = StringUtils.replaceEachRepeatedly((String) null, (String[]) null, (String[]) null);
      assertNull(string1);
  }

  @Test(timeout = 4000)
  public void test775()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      String string0 = StringUtils.join((List<?>) linkedList0, "Cannot clone Cloneable type ", 5, (-624));
      assertNotNull(string0);
      assertEquals(0, linkedList0.size());
      assertEquals("", string0);
      assertFalse(linkedList0.contains((-624)));
      
      boolean boolean0 = StringUtils.isNumericSpace("");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test776()  throws Throwable  {
      String string0 = StringUtils.swapCase("");
      assertNotNull(string0);
      assertEquals("", string0);
      
      boolean boolean0 = StringUtils.isNotEmpty("");
      assertFalse(boolean0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "";
      charSequenceArray0[2] = (CharSequence) "";
      charSequenceArray0[3] = (CharSequence) "";
      charSequenceArray0[4] = (CharSequence) "";
      boolean boolean1 = StringUtils.containsAny((CharSequence) "", charSequenceArray0);
      assertEquals(5, charSequenceArray0.length);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string1 = StringUtils.wrap("", ']');
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      
      boolean boolean2 = StringUtils.containsNone(charSequenceArray0[3], "2opNjh|?)O-/W4");
      assertEquals(5, charSequenceArray0.length);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2);
      
      String string2 = StringUtils.strip("");
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertEquals("", string2);
      
      String string3 = StringUtils.stripToEmpty("', is neither of type Map.Entry nor an Array");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals("', is neither of type Map.Entry nor an Array", string3);
      
      String[] stringArray0 = StringUtils.stripAll((String[]) null);
      assertNull(stringArray0);
      
      int int0 = StringUtils.compareIgnoreCase("", "Minimum abbreviation width is %dMinimum abbreviation width is %d", true);
      assertEquals((-64), int0);
      
      String string4 = StringUtils.trim("");
      assertNotNull(string4);
      assertTrue(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertEquals("", string4);
      
      boolean boolean3 = StringUtils.endsWithAny(charSequenceArray0[3], (CharSequence[]) null);
      assertEquals(5, charSequenceArray0.length);
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3);
      
      String string5 = StringUtils.abbreviateMiddle("`<7{E@7z<-'W0Voo+)L", "Dd", 1978);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      
      int int1 = StringUtils.indexOfAny((CharSequence) "`<7{E@7z<-'W0Voo+)L", (String) null);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test777()  throws Throwable  {
      String string0 = StringUtils.removeEndIgnoreCase("", "");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("', has a length less than 2", "");
      assertNotNull(stringArray0);
      assertEquals(7, stringArray0.length);
      
      Integer integer0 = new Integer(101);
      assertNotNull(integer0);
      assertEquals(101, (int)integer0);
      
      String string1 = StringUtils.wrapIfMissing("jFyV", "JmLZ-\"NG=tt|$MD");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("JmLZ-\"NG=tt|$MDjFyVJmLZ-\"NG=tt|$MD", string1);
      
      double double0 = StringUtils.getJaroWinklerDistance("JmLZ-\"NG=tt|$MDjFyVJmLZ-\"NG=tt|$MD", "JmLZ-\"NG=tt|$MD");
      assertEquals(0.9, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test778()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "US.^e:o_ufGpA";
      String string0 = StringUtils.substringAfterLast("US.^e:o_ufGpA", 101);
      assertNotNull(string0);
      assertEquals(":o_ufGpA", string0);
      
      String string1 = StringUtils.unwrap(":o_ufGpA", '\'');
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals(":o_ufGpA", string1);
      
      boolean boolean0 = StringUtils.startsWith("US.^e:o_ufGpA", "(d");
      assertFalse(boolean0);
      
      String string2 = StringUtils.center(":o_ufGpA", 13, '\'');
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("'':o_ufGpA'''", string2);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "US.^e:o_ufGpA", (CharSequence) "(d");
      assertEquals(13, int0);
      
      String string3 = StringUtils.abbreviate("~^Y&$c", (-47), 1552);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals("~^Y&$c", string3);
      
      String string4 = StringUtils.substringAfterLast("/NR&Oru)G", 645);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertEquals("", string4);
  }

  @Test(timeout = 4000)
  public void test779()  throws Throwable  {
      String string0 = StringUtils.substringAfterLast("", 22);
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test780()  throws Throwable  {
      String string0 = StringUtils.abbreviateMiddle("u=]@|On8X7H27[2Or", "{}", (-1725));
      assertNotNull(string0);
      assertEquals("u=]@|On8X7H27[2Or", string0);
      
      Class<Object> class0 = Object.class;
      ServiceLoader<Object> serviceLoader0 = ServiceLoader.loadInstalled(class0);
      assertNotNull(serviceLoader0);
      assertEquals("java.util.ServiceLoader[java.lang.Object]", serviceLoader0.toString());
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      String string1 = StringUtils.abbreviate("u=]@|On8X7H27[2Or", (String) null, (-1725));
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("u=]@|On8X7H27[2Or", string1);
      
      String string2 = StringUtils.substringAfter("u=]@|On8X7H27[2Or", "u=]@|On8X7H27[2Or");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("", string2);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "", "{}");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test781()  throws Throwable  {
      String string0 = StringUtils.substringAfterLast("", 10);
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.replaceOnce("", "af-_Xu1o~2a", "af-_Xu1o~2a");
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      
      String[] stringArray0 = new String[4];
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      String string2 = StringUtils.replaceEachRepeatedly("", stringArray0, stringArray0);
      assertNotNull(string2);
      assertEquals(4, stringArray0.length);
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertEquals("", string2);
      
      boolean boolean0 = StringUtils.isNumericSpace("");
      assertTrue(boolean0);
      
      String[] stringArray1 = StringUtils.splitByWholeSeparator("af-_Xu1o~2a", "");
      assertNotNull(stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(1, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      boolean boolean1 = StringUtils.isAllBlank(stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(1, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test782()  throws Throwable  {
      String string0 = StringUtils.center("", 12);
      assertNotNull(string0);
      assertEquals("           ", string0);
      
      boolean boolean0 = StringUtils.isWhitespace("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test783()  throws Throwable  {
      String string0 = StringUtils.substringAfterLast("W~p/]:FDw`qEP(g{Xm", 8);
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.stripEnd("E=,1}G?in7_TlUU", "E=,1}G?in7_TlUU");
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      
      boolean boolean0 = StringUtils.isNumericSpace("E=,1}G?in7_TlUU");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test784()  throws Throwable  {
      String string0 = StringUtils.join((Iterator<?>) null, "");
      assertNull(string0);
      
      String string1 = StringUtils.normalizeSpace("nFU)@y~JLh");
      assertNotNull(string1);
      assertEquals("nFU)@y~JLh", string1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      boolean boolean0 = StringUtils.isNoneBlank(charSequenceArray0);
      assertEquals(0, charSequenceArray0.length);
      assertTrue(boolean0);
      
      String string2 = StringUtils.capitalize("");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertEquals("", string2);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "", (CharSequence) null);
      assertEquals((-1), int0);
      
      double double0 = StringUtils.getJaroWinklerDistance("nFU)@y~JLh", "");
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test785()  throws Throwable  {
      String string0 = "Asrswe==p5@L+jAsrswe==p5@L+jAsrswe==p5@L+jAsrswe==p5@L+j\\uMinimum abbreviation width with offset is %d";
      String string1 = StringUtils.rightPad(string0, (-1725), "eb");
      assertNotNull(string1);
      assertEquals("Asrswe==p5@L+jAsrswe==p5@L+jAsrswe==p5@L+jAsrswe==p5@L+j\\uMinimum abbreviation width with offset is %d", string1);
      
      boolean boolean0 = StringUtils.isMixedCase(string1);
      assertTrue(boolean0);
      
      String string2 = StringUtils.wrapIfMissing(string0, string0);
      assertNotNull(string2);
      assertEquals("Asrswe==p5@L+jAsrswe==p5@L+jAsrswe==p5@L+jAsrswe==p5@L+j\\uMinimum abbreviation width with offset is %d", string2);
      
      double double0 = StringUtils.getJaroWinklerDistance("Minimum abbreviation width with offset is %d", string0);
      assertEquals(0.42, double0, 0.01);
      
      String string3 = StringUtils.remove("q(|/=4*=g", "eb");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals("q(|/=4*=g", string3);
  }

  @Test(timeout = 4000)
  public void test786()  throws Throwable  {
      int[] intArray0 = new int[17];
      intArray0[0] = 16;
      intArray0[1] = 52;
      intArray0[2] = (-2935);
      intArray0[3] = (-2935);
      intArray0[4] = 2124;
      intArray0[5] = 987;
      String string0 = StringUtils.join(intArray0, 'S');
      assertNotNull(string0);
      assertEquals(17, intArray0.length);
      assertEquals("16S52S-2935S-2935S2124S987S0S0S0S0S0S0S0S0S0S0S0", string0);
      
      boolean boolean0 = StringUtils.endsWithIgnoreCase("16S52S-2935S-2935S2124S987S0S0S0S0S0S0S0S0S0S0S0", "16S52S-2935S-2935S2124S987S0S0S0S0S0S0S0S0S0S0S0");
      assertTrue(boolean0);
      
      double double0 = StringUtils.getJaroWinklerDistance("16S52S-2935S-2935S2124S987S0S0S0S0S0S0S0S0S0S0S0", "16S52S-2935S-2935S2124S987S0S0S0S0S0S0S0S0S0S0S0");
      assertEquals(1.0, double0, 0.01);
      
      CharSequence[] charSequenceArray0 = new CharSequence[7];
      charSequenceArray0[0] = (CharSequence) "16S52S-2935S-2935S2124S987S0S0S0S0S0S0S0S0S0S0S0";
      charSequenceArray0[1] = (CharSequence) "16S52S-2935S-2935S2124S987S0S0S0S0S0S0S0S0S0S0S0";
      charSequenceArray0[2] = (CharSequence) "16S52S-2935S-2935S2124S987S0S0S0S0S0S0S0S0S0S0S0";
      charSequenceArray0[3] = (CharSequence) "16S52S-2935S-2935S2124S987S0S0S0S0S0S0S0S0S0S0S0";
      String string1 = StringUtils.capitalize("ClP>2# gfkKWB@vC");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("ClP>2# gfkKWB@vC", string1);
      
      boolean boolean1 = StringUtils.isNumeric("16S52S-2935S-2935S2124S987S0S0S0S0S0S0S0S0S0S0S0");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test787()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      String string0 = StringUtils.substring("", 0, 0);
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.chomp((String) null, "<x/E~)j8c@@IvS]zr,\"");
      assertNull(string1);
      
      boolean boolean0 = StringUtils.isAllEmpty(charSequenceArray0);
      assertEquals(1, charSequenceArray0.length);
      assertTrue(boolean0);
      
      boolean boolean1 = StringUtils.startsWithIgnoreCase((CharSequence) null, (CharSequence) null);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String string2 = StringUtils.removeEndIgnoreCase("Z)-3,$oHFU~<3", (String) null);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertEquals("Z)-3,$oHFU~<3", string2);
      
      String string3 = StringUtils.leftPad("<x/E~)j8c@@IvS]zr,\"", 0, '+');
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals("<x/E~)j8c@@IvS]zr,\"", string3);
      
      boolean boolean2 = StringUtils.equalsAny("<x/E~)j8c@@IvS]zr,\"", charSequenceArray0);
      assertEquals(1, charSequenceArray0.length);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparator((String) null, " ", 0);
      assertNull(stringArray0);
      
      String string4 = StringUtils.join((Object[]) null, " ", 8, 0);
      assertNull(string4);
      
      String string5 = StringUtils.join((Object[]) null, "Z)-3,$oHFU~<3", (-141), (-4055));
      assertNull(string5);
      
      String string6 = StringUtils.join((Object[]) null, '+', 30, (-141));
      assertNull(string6);
      
      String[] stringArray1 = StringUtils.splitPreserveAllTokens("}$`O2B g!@Z(R^", "z");
      assertNotNull(stringArray1);
      assertEquals(1, stringArray1.length);
  }

  @Test(timeout = 4000)
  public void test788()  throws Throwable  {
      String string0 = StringUtils.replace("", "US.^e:o_ufGpA", "", 1664);
      assertNotNull(string0);
      assertEquals("", string0);
      
      boolean boolean0 = StringUtils.isAnyBlank((CharSequence[]) null);
      assertFalse(boolean0);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) 1664;
      floatArray0[1] = (float) 1664;
      floatArray0[2] = (float) 1664;
      floatArray0[3] = 2915.091F;
      floatArray0[4] = (-672.57324F);
      String string1 = StringUtils.join(floatArray0, 'E');
      assertNotNull(string1);
      assertEquals(5, floatArray0.length);
      assertFalse(string1.equals((Object)string0));
      assertEquals("1664.0E1664.0E1664.0E2915.091E-672.57324", string1);
      assertArrayEquals(new float[] {1664.0F, 1664.0F, 1664.0F, 2915.091F, (-672.57324F)}, floatArray0, 0.01F);
      
      boolean boolean1 = StringUtils.isNoneEmpty((CharSequence[]) null);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String string2 = StringUtils.replaceChars("", "=.dg1Z1035!b_", "");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertEquals("", string2);
      
      String string3 = StringUtils.toRootUpperCase("A\"W^ORK2mdpQ4ZLl_");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("A\"W^ORK2MDPQ4ZLL_", string3);
  }

  @Test(timeout = 4000)
  public void test789()  throws Throwable  {
      String string0 = StringUtils.unwrap("E=,1}G?in7_TlUU", '\'');
      assertNotNull(string0);
      assertEquals("E=,1}G?in7_TlUU", string0);
      
      String string1 = StringUtils.replaceChars("E=,1}G?in7_TlUU", "E=,1}G?in7_TlUU", "Asrswe==p5@L+jAsrswe==p5@L+jAsrswe==p5@L+jAsrswe==p5@L+j");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("Asrswe==p5@L+jj", string1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      charSequenceArray0[0] = (CharSequence) "Asrswe==p5@L+jj";
      boolean boolean0 = StringUtils.isBlank("E=,1}G?in7_TlUU");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test790()  throws Throwable  {
      String string0 = StringUtils.rightPad("...", (-4100), "(");
      assertNotNull(string0);
      assertEquals("...", string0);
      
      boolean boolean0 = StringUtils.isMixedCase("...");
      assertFalse(boolean0);
      
      String string1 = StringUtils.wrapIfMissing("...", "Minimum abbreviation width with offset is %d");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("Minimum abbreviation width with offset is %d...Minimum abbreviation width with offset is %d", string1);
      
      double double0 = StringUtils.getJaroWinklerDistance("...", "Minimum abbreviation width with offset is %d...Minimum abbreviation width with offset is %d");
      assertEquals(0.68, double0, 0.01);
      
      String string2 = StringUtils.remove("...", "\r");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertEquals("...", string2);
  }

  @Test(timeout = 4000)
  public void test791()  throws Throwable  {
      boolean boolean0 = StringUtils.isNumeric("pV&d&F@?O[,");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test792()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      assertNotNull(stringWriter0);
      assertEquals("", stringWriter0.toString());
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) (-77);
      floatArray0[1] = 0.0F;
      floatArray0[2] = 0.0F;
      floatArray0[0] = (float) (-77);
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertFalse(arrayList0.contains(0.0F));
      
      String string0 = StringUtils.join((List<?>) arrayList0, 'Q', 32, (-77));
      assertNotNull(string0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertEquals("", string0);
      assertFalse(arrayList0.contains((-77)));
      
      double double0 = StringUtils.getJaroWinklerDistance("", "");
      assertEquals(0.0, double0, 0.01);
      
      boolean boolean0 = StringUtils.equalsAny("", (CharSequence[]) null);
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isNumeric("");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      Integer integer0 = new Integer(32);
      assertNotNull(integer0);
      assertEquals(32, (int)integer0);
      
      int int0 = StringUtils.length(" is not in the range '0' - '9'");
      assertEquals(30, int0);
      
      double[] doubleArray0 = new double[0];
      String string1 = StringUtils.join(doubleArray0, '}', 13, (-77));
      assertNotNull(string1);
      assertEquals(0, doubleArray0.length);
      assertEquals("", string1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      boolean boolean2 = StringUtils.isNumericSpace("");
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2);
  }

  @Test(timeout = 4000)
  public void test793()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[0] = " vs ";
      String string0 = StringUtils.strip(" vs ");
      assertNotNull(string0);
      assertEquals("vs", string0);
      
      double double0 = StringUtils.getJaroWinklerDistance("vs", "vs");
      assertEquals(1.0, double0, 0.01);
      
      boolean boolean0 = StringUtils.equalsAny(" vs ", stringArray0);
      assertEquals(7, stringArray0.length);
      assertTrue(boolean0);
      
      boolean boolean1 = StringUtils.isNumeric("vs");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      int int0 = StringUtils.indexOfDifference((CharSequence[]) stringArray0);
      assertEquals(7, stringArray0.length);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test794()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = " vs ";
      int int0 = StringUtils.lastIndexOf((CharSequence) " vs ", (CharSequence) " vs ");
      assertEquals(0, int0);
      
      CharSequence charSequence0 = StringUtils.firstNonEmpty((CharSequence[]) stringArray0);
      assertNotNull(charSequence0);
      assertEquals(5, stringArray0.length);
      assertEquals(" vs ", charSequence0);
      
      double double0 = StringUtils.getJaroWinklerDistance(" vs ", " vs ");
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test795()  throws Throwable  {
      boolean boolean0 = StringUtils.isNumeric("pV&d&F@?O[k");
      assertFalse(boolean0);
      
      String string0 = StringUtils.replaceChars("pV&d&F@?O[k", "", "pV&d&F@?O[k");
      assertNotNull(string0);
      assertEquals("pV&d&F@?O[k", string0);
      
      String string1 = StringUtils.appendIfMissingIgnoreCase("pV&d&F@?O[k", "pV&d&F@?O[k", (CharSequence[]) null);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("pV&d&F@?O[k", string1);
  }

  @Test(timeout = 4000)
  public void test796()  throws Throwable  {
      String string0 = StringUtils.stripToEmpty("o");
      assertNotNull(string0);
      assertEquals("o", string0);
      
      boolean boolean0 = StringUtils.equals((CharSequence) "o", (CharSequence) "o");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test797()  throws Throwable  {
      String string0 = StringUtils.remove("$4'Tcj.*5", 'o');
      assertNotNull(string0);
      assertEquals("$4'Tcj.*5", string0);
      
      String string1 = "\\u";
      String string2 = StringUtils.replaceOnceIgnoreCase("$4'Tcj.*5", "", string1);
      assertNotNull(string2);
      assertFalse(string1.equals((Object)string0));
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("$4'Tcj.*5", string2);
      
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "";
      charSequenceArray0[3] = (CharSequence) "";
      charSequenceArray0[4] = (CharSequence) "";
      boolean boolean0 = StringUtils.equalsAnyIgnoreCase("$4'Tcj.*5", charSequenceArray0);
      assertEquals(5, charSequenceArray0.length);
      assertFalse(boolean0);
      
      String string3 = StringUtils.join((Object[]) charSequenceArray0, "", 196, 124);
      assertNotNull(string3);
      assertEquals(5, charSequenceArray0.length);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals("", string3);
      
      boolean boolean1 = StringUtils.containsAnyIgnoreCase("", charSequenceArray0);
      assertEquals(5, charSequenceArray0.length);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string4 = StringUtils.replaceChars("A@8?<nti&XG#", "Minimum abbreviation width with offset is %d", "$4'Tcj.*5");
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      
      boolean boolean2 = StringUtils.isWhitespace(charSequenceArray0[1]);
      assertEquals(5, charSequenceArray0.length);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2);
      
      int int0 = StringUtils.lastIndexOfAny("A@8?<nti&XG#", charSequenceArray0);
      assertEquals(5, charSequenceArray0.length);
      assertEquals(12, int0);
      
      String string5 = StringUtils.defaultIfBlank("$4'Tcj.*5", ", '");
      assertNotNull(string5);
      assertTrue(string5.equals((Object)string0));
      assertTrue(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertEquals("$4'Tcj.*5", string5);
  }

  @Test(timeout = 4000)
  public void test798()  throws Throwable  {
      String string0 = StringUtils.leftPad("r2", (int) '[', '[');
      assertNotNull(string0);
      assertEquals("[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[r2", string0);
      
      int int0 = StringUtils.countMatches((CharSequence) "r2", '[');
      assertEquals(0, int0);
      
      String string1 = StringUtils.removeEndIgnoreCase("r2", "r2");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
  }

  @Test(timeout = 4000)
  public void test799()  throws Throwable  {
      String string0 = StringUtils.unwrap("Strings must not be null", 'e');
      assertNotNull(string0);
      assertEquals("Strings must not be null", string0);
      
      int int0 = StringUtils.indexOf((CharSequence) "Strings must not be null", 13);
      assertEquals((-1), int0);
      
      boolean boolean0 = StringUtils.startsWithIgnoreCase("Strings must not be null", "Strings must not be null");
      assertTrue(boolean0);
      
      String string1 = StringUtils.replacePattern("Strings must not be null", "Strings must not be null", (String) null);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test800()  throws Throwable  {
      String string0 = StringUtils.replaceChars("pV&d&F@?O[k", "_", "pV&d&F@?O[k");
      assertNotNull(string0);
      assertEquals("pV&d&F@?O[k", string0);
      
      String string1 = StringUtils.trim((String) null);
      assertNull(string1);
      
      String string2 = StringUtils.mid("OxAAgc6#y%!", (-64), 90);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertEquals("OxAAgc6#y%!", string2);
      
      String string3 = StringUtils.unwrap("_", 'y');
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals("_", string3);
      
      String string4 = StringUtils.center("pV&d&F@?O[k", 90, 'y');
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertEquals("yyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyypV&d&F@?O[kyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyy", string4);
  }

  @Test(timeout = 4000)
  public void test801()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      assertNotNull(stringWriter0);
      assertEquals("", stringWriter0.toString());
      
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      assertNotNull(stringBuffer0);
      assertEquals("", stringWriter0.toString());
      assertEquals(0, stringBuffer0.length());
      assertEquals("", stringBuffer0.toString());
      
      int int0 = StringUtils.lastIndexOf((CharSequence) stringBuffer0, Integer.MAX_VALUE);
      assertEquals("", stringWriter0.toString());
      assertEquals(0, stringBuffer0.length());
      assertEquals("", stringBuffer0.toString());
      assertEquals((-1), int0);
      
      String string0 = StringUtils.trimToEmpty("Object varargs must not be null");
      assertNotNull(string0);
      assertEquals("Object varargs must not be null", string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[6];
      charSequenceArray0[0] = (CharSequence) "Object varargs must not be null";
      charSequenceArray0[1] = (CharSequence) stringBuffer0;
      charSequenceArray0[2] = (CharSequence) "Object varargs must not be null";
      charSequenceArray0[3] = (CharSequence) "Object varargs must not be null";
      charSequenceArray0[4] = (CharSequence) stringBuffer0;
      charSequenceArray0[5] = (CharSequence) stringBuffer0;
      int int1 = StringUtils.indexOfAny((CharSequence) "Object varargs must not be null", charSequenceArray0);
      assertEquals(6, charSequenceArray0.length);
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      CharSequence[] charSequenceArray1 = new CharSequence[4];
      assertFalse(charSequenceArray1.equals((Object)charSequenceArray0));
      
      String string1 = StringUtils.left("$C*neV8^Wd6@+LR", 1097);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("$C*neV8^Wd6@+LR", string1);
      
      charSequenceArray1[0] = (CharSequence) "$C*neV8^Wd6@+LR";
      String string2 = StringUtils.join((Object[]) charSequenceArray1, (String) null);
      assertNotNull(string2);
      assertNotSame(charSequenceArray1, charSequenceArray0);
      assertEquals(4, charSequenceArray1.length);
      assertFalse(charSequenceArray1.equals((Object)charSequenceArray0));
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertEquals("$C*neV8^Wd6@+LR", string2);
      
      charSequenceArray1[1] = (CharSequence) "$C*neV8^Wd6@+LR";
      charSequenceArray1[2] = (CharSequence) stringBuffer0;
      charSequenceArray1[3] = (CharSequence) "Object varargs must not be null";
      boolean boolean0 = StringUtils.endsWithAny("Object varargs must not be null", charSequenceArray1);
      assertNotSame(charSequenceArray1, charSequenceArray0);
      assertEquals(4, charSequenceArray1.length);
      assertFalse(charSequenceArray1.equals((Object)charSequenceArray0));
      assertTrue(boolean0);
      
      char[] charArray0 = new char[1];
      charArray0[0] = '\'';
      boolean boolean1 = StringUtils.containsNone((CharSequence) "$C*neV8^Wd6@+LR", charArray0);
      assertEquals(1, charArray0.length);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertArrayEquals(new char[] {'\''}, charArray0);
  }

  @Test(timeout = 4000)
  public void test802()  throws Throwable  {
      String string0 = StringUtils.replaceChars("~^{O", "~^{O", "cTnUXms.lpYUm");
      assertNotNull(string0);
      assertEquals("cTnU", string0);
      
      String string1 = StringUtils.stripEnd("cTnU", "37");
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("cTnU", string1);
      
      int int0 = StringUtils.lastOrdinalIndexOf("cTnU", "wV:!&PW@uYj) ee\"k", 247);
      assertEquals((-1), int0);
      
      String string2 = StringUtils.uncapitalize("wV:!&PW@uYj) ee\"k");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("wV:!&PW@uYj) ee\"k", string2);
      
      int int1 = StringUtils.indexOf((CharSequence) null, (CharSequence) null);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      int int2 = StringUtils.lastIndexOf((CharSequence) null, 50, (-388));
      assertTrue(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals((-1), int2);
  }

  @Test(timeout = 4000)
  public void test803()  throws Throwable  {
      String string0 = StringUtils.unwrap("j", "j");
      assertNotNull(string0);
      assertEquals("j", string0);
      
      int int0 = StringUtils.countMatches((CharSequence) "j", (CharSequence) "j");
      assertEquals(1, int0);
      
      String string1 = StringUtils.substringAfterLast("E", 1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      
      String string2 = StringUtils.remove("j", 'E');
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertEquals("j", string2);
      
      int[] intArray0 = new int[1];
      intArray0[0] = (int) 'E';
      String string3 = StringUtils.join(intArray0, 'D', 863, 69);
      assertNotNull(string3);
      assertEquals(1, intArray0.length);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals("", string3);
      assertArrayEquals(new int[] {69}, intArray0);
  }

  @Test(timeout = 4000)
  public void test804()  throws Throwable  {
      String string0 = StringUtils.unwrap((String) null, '(');
      assertNull(string0);
      
      boolean boolean0 = StringUtils.startsWith((CharSequence) null, (CharSequence) null);
      assertTrue(boolean0);
      
      String string1 = StringUtils.center((String) null, (-72), ' ');
      assertNull(string1);
  }

  @Test(timeout = 4000)
  public void test805()  throws Throwable  {
      String string0 = StringUtils.repeat("c^P#chHM", 6);
      assertNotNull(string0);
      assertEquals("c^P#chHMc^P#chHMc^P#chHMc^P#chHMc^P#chHMc^P#chHM", string0);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "c^P#chHMc^P#chHMc^P#chHMc^P#chHMc^P#chHMc^P#chHM", "c^P#chHMc^P#chHMc^P#chHMc^P#chHMc^P#chHMc^P#chHM");
      assertEquals(0, int0);
      
      String string1 = StringUtils.rightPad("c^P#chHM", 0, "w[ S*{(\"xv");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("c^P#chHM", string1);
      
      int int1 = StringUtils.getLevenshteinDistance((CharSequence) "c^P#chHM", (CharSequence) "c^P#chHM");
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      
      char[] charArray0 = new char[1];
      charArray0[0] = '$';
      boolean boolean0 = StringUtils.containsNone((CharSequence) "c^P#chHM", charArray0);
      assertEquals(1, charArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new char[] {'$'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test806()  throws Throwable  {
      String string0 = StringUtils.center((String) null, 8192, 'w');
      assertNull(string0);
      
      char[] charArray0 = new char[9];
      charArray0[0] = '}';
      charArray0[1] = 'w';
      charArray0[2] = 'w';
      charArray0[3] = 'w';
      charArray0[4] = 'w';
      charArray0[5] = 'w';
      charArray0[6] = 'w';
      charArray0[7] = 'w';
      charArray0[8] = 'w';
      String string1 = StringUtils.join(charArray0, '\"', (-2450), (-2450));
      assertNotNull(string1);
      assertEquals(9, charArray0.length);
      assertEquals("", string1);
      assertArrayEquals(new char[] {'}', 'w', 'w', 'w', 'w', 'w', 'w', 'w', 'w'}, charArray0);
      
      int int0 = StringUtils.indexOfAny((CharSequence) null, "wDPtb=E*0D +");
      assertEquals((-1), int0);
      
      String string2 = StringUtils.removeEnd("f:_@/K]", (String) null);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertEquals("f:_@/K]", string2);
      
      String string3 = StringUtils.substringBefore("wDPtb=E*0D +", (-1));
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals("wDPtb=E*0D +", string3);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("f:_@/K]", "c,+hS");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      String string4 = StringUtils.replace("f:_@/K]", "C;z,_", (String) null, (-1422));
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string2));
      assertEquals("f:_@/K]", string4);
  }

  @Test(timeout = 4000)
  public void test807()  throws Throwable  {
      String string0 = StringUtils.wrapIfMissing("/h81Uu", '7');
      assertNotNull(string0);
      assertEquals("7/h81Uu7", string0);
      
      int[] intArray0 = new int[6];
      intArray0[0] = (int) '7';
      intArray0[1] = (int) '7';
      intArray0[2] = (int) '7';
      intArray0[3] = (int) '7';
      intArray0[4] = (int) '7';
      intArray0[5] = (int) '7';
      String string1 = StringUtils.join(intArray0, 'c');
      assertNotNull(string1);
      assertEquals(6, intArray0.length);
      assertFalse(string1.equals((Object)string0));
      assertEquals("55c55c55c55c55c55", string1);
      assertArrayEquals(new int[] {55, 55, 55, 55, 55, 55}, intArray0);
  }

  @Test(timeout = 4000)
  public void test808()  throws Throwable  {
      String string0 = StringUtils.replaceOnceIgnoreCase("", "", "");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.removeEnd("The type must not be null", "The type must not be null");
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "", (CharSequence) "The type must not be null", 43);
      assertEquals(25, int0);
      
      String string2 = StringUtils.unwrap("%-n6K?`=%wq^>z42mOF", "");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("%-n6K?`=%wq^>z42mOF", string2);
  }

  @Test(timeout = 4000)
  public void test809()  throws Throwable  {
      String[] stringArray0 = StringUtils.split(" vs ", "org.apache.commons.lang3.LocaleUtils", (-494));
      assertNotNull(stringArray0);
      assertEquals(2, stringArray0.length);
      
      String string0 = StringUtils.swapCase(" vs ");
      assertNotNull(string0);
      assertEquals(" VS ", string0);
      
      int int0 = StringUtils.indexOfAny((CharSequence) " VS ", (CharSequence[]) stringArray0);
      assertEquals(2, stringArray0.length);
      assertEquals(0, int0);
      
      int int1 = StringUtils.compareIgnoreCase((String) null, "org.apache.commons.lang3.LocaleUtils", true);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test810()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("j", "j", 1051);
      assertNotNull(stringArray0);
      assertEquals(2, stringArray0.length);
      
      String string0 = StringUtils.left("j", 1051);
      assertNotNull(string0);
      assertEquals("j", string0);
      
      String string1 = StringUtils.firstNonBlank(stringArray0);
      assertNull(string1);
      assertEquals(2, stringArray0.length);
      
      String string2 = StringUtils.repeat((String) null, " ", 23);
      assertNull(string2);
      
      String string3 = StringUtils.abbreviate("j", 2672, 86);
      assertNotNull(string3);
      assertTrue(string3.equals((Object)string0));
      assertEquals("j", string3);
      
      String string4 = StringUtils.stripToEmpty((String) null);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertEquals("", string4);
  }

  @Test(timeout = 4000)
  public void test811()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[6];
      charSequenceArray0[0] = (CharSequence) "pE;zQ~%jUvhA}a[31";
      charSequenceArray0[1] = (CharSequence) "pE;zQ~%jUvhA}a[31";
      charSequenceArray0[2] = (CharSequence) "pE;zQ~%jUvhA}a[31";
      charSequenceArray0[3] = (CharSequence) "pE;zQ~%jUvhA}a[31";
      charSequenceArray0[4] = (CharSequence) "pE;zQ~%jUvhA}a[31";
      charSequenceArray0[5] = (CharSequence) "pE;zQ~%jUvhA}a[31";
      String string0 = StringUtils.prependIfMissingIgnoreCase("pE;zQ~%jUvhA}a[31", "pE;zQ~%jUvhA}a[31", charSequenceArray0);
      assertNotNull(string0);
      assertEquals(6, charSequenceArray0.length);
      assertEquals("pE;zQ~%jUvhA}a[31", string0);
  }

  @Test(timeout = 4000)
  public void test812()  throws Throwable  {
      String string0 = StringUtils.stripEnd("vxq+%x|A!THY]", "vxq+%x|A!THY]");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.center("vxq+%x|A!THY]", 14, "rjt^z&YZ':vy?=ni?n.");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("vxq+%x|A!THY]r", string1);
      
      String string2 = StringUtils.capitalize("|3v\"%K_8b");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("|3v\"%K_8b", string2);
      
      boolean boolean0 = StringUtils.isEmpty("");
      assertTrue(boolean0);
      
      boolean boolean1 = StringUtils.isWhitespace("");
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test813()  throws Throwable  {
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "", (CharSequence) "", (-680));
      assertEquals((-1), int0);
      
      String string0 = StringUtils.getCommonPrefix((String[]) null);
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test814()  throws Throwable  {
      String string0 = StringUtils.rightPad("Wd|}51/]/&`bsA", 1003, "Wd|}51/]/&`bsA");
      assertNotNull(string0);
      
      String string1 = StringUtils.wrapIfMissing("Wd|}51/]/&`bsA", '\'');
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("'Wd|}51/]/&`bsA'", string1);
      
      int[] intArray0 = new int[4];
      intArray0[0] = 1003;
      intArray0[1] = 4748;
      intArray0[3] = (int) 'N';
      String string2 = StringUtils.rotate("Wd|}51/]/&`bsA", 15);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("Wd|}51/]/&`bsA", string2);
      
      String string3 = StringUtils.center("Wd|}51/]/&`bsA", 4748, "v^QQ");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test815()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "US.^e:o_ufGpA";
      String[] stringArray1 = StringUtils.stripAll(stringArray0);
      assertNotNull(stringArray1);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(1, stringArray0.length);
      assertEquals(1, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      boolean boolean0 = StringUtils.containsAnyIgnoreCase("(d", stringArray0);
      assertNotSame(stringArray0, stringArray1);
      assertEquals(1, stringArray0.length);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertFalse(boolean0);
      
      String string0 = StringUtils.capitalize("US.^e:o_ufGpA");
      assertNotNull(string0);
      assertEquals("US.^e:o_ufGpA", string0);
      
      String string1 = StringUtils.stripEnd("US.^e:o_ufGpA", "US.^e:o_ufGpA");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      
      int int0 = StringUtils.lastOrdinalIndexOf("", "US.^e:o_ufGpA", 247);
      assertEquals((-1), int0);
      
      String string2 = StringUtils.truncate("US.^e:o_ufGpA", 497);
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("US.^e:o_ufGpA", string2);
      
      String string3 = StringUtils.uncapitalize("Rx-^~ *MdI1V9n~-N98");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals("rx-^~ *MdI1V9n~-N98", string3);
      
      int int1 = StringUtils.indexOf((CharSequence) "", (CharSequence) "");
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      String string4 = StringUtils.rotate("Rx-^~ *MdI1V9n~-N98", 0);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertEquals("Rx-^~ *MdI1V9n~-N98", string4);
  }

  @Test(timeout = 4000)
  public void test816()  throws Throwable  {
      boolean boolean0 = StringUtils.isNoneEmpty((CharSequence[]) null);
      assertTrue(boolean0);
      
      String string0 = StringUtils.substringAfter("org.apache.commons.lang3.ArrayUtils", "");
      assertNotNull(string0);
      assertEquals("org.apache.commons.lang3.ArrayUtils", string0);
      
      String string1 = StringUtils.removeEnd("", "xA1V(8l[DB");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      
      int[] intArray0 = new int[9];
      intArray0[0] = 0;
      intArray0[1] = (-557);
      intArray0[2] = (-1);
      intArray0[3] = 14;
      intArray0[4] = 0;
      intArray0[5] = 32;
      intArray0[6] = 0;
      intArray0[7] = 0;
      intArray0[8] = 101;
      String string2 = StringUtils.join(intArray0, 'C');
      assertNotNull(string2);
      assertEquals(9, intArray0.length);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("0C-557C-1C14C0C32C0C0C101", string2);
      assertArrayEquals(new int[] {0, (-557), (-1), 14, 0, 32, 0, 0, 101}, intArray0);
  }

  @Test(timeout = 4000)
  public void test817()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      int int0 = StringUtils.indexOfAny((CharSequence) "W~p/]:FDw`qEP(g{Xm", charSequenceArray0);
      assertEquals(0, charSequenceArray0.length);
      assertEquals((-1), int0);
      
      int int1 = StringUtils.compareIgnoreCase((String) null, (String) null, true);
      assertFalse(int1 == int0);
      assertEquals(0, int1);
  }

  @Test(timeout = 4000)
  public void test818()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      boolean boolean0 = StringUtils.isAllEmpty(charSequenceArray0);
      assertEquals(0, charSequenceArray0.length);
      assertTrue(boolean0);
      
      String string0 = StringUtils.firstNonBlank((String[]) null);
      assertNull(string0);
      
      // Undeclared exception!
      try { 
        StringUtils.getLevenshteinDistance((CharSequence) null, (CharSequence) null, 64);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test819()  throws Throwable  {
      String string0 = StringUtils.leftPad("Aborting to protect against StackOverflowError - output of one loop is the input of anotherWd|}51/]/&`bsA", 4317, "P@qt[B:f+fI8Fh]*");
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOfDifference((CharSequence[]) null);
      assertEquals((-1), int0);
      
      String string1 = StringUtils.join((List<?>) null, 'f', (-1), (-1333));
      assertNull(string1);
      
      boolean boolean0 = StringUtils.isAllLowerCase("Aborting to protect against StackOverflowError - output of one loop is the input of anotherWd|}51/]/&`bsA");
      assertFalse(boolean0);
      
      int int1 = StringUtils.countMatches((CharSequence) string0, 'T');
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      String string2 = StringUtils.join((List<?>) null, "#r", 813, 6);
      assertNull(string2);
      
      int int2 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "P@qt[B:f+fI8Fh]*", (CharSequence) null);
      assertTrue(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals((-1), int2);
      
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = true;
      booleanArray0[5] = false;
      booleanArray0[6] = false;
      booleanArray0[7] = false;
      String string3 = StringUtils.join(booleanArray0, 'D', 321, 15);
      assertNotNull(string3);
      assertEquals(8, booleanArray0.length);
      assertFalse(string3.equals((Object)string0));
      assertEquals("", string3);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, true, false, false, false}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test820()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "<)v(vKh";
      stringArray0[1] = "";
      String string0 = StringUtils.replaceIgnoreCase("Threshold must not be negative", "Locale must not be null", "", (-3695));
      assertNotNull(string0);
      assertEquals("Threshold must not be negative", string0);
      
      String string1 = StringUtils.center("", (-73));
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      
      String string2 = StringUtils.replaceEachRepeatedly("f0uCY7&r", stringArray0, stringArray0);
      assertNotNull(string2);
      assertEquals(2, stringArray0.length);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("f0uCY7&r", string2);
      
      String string3 = StringUtils.stripEnd("{}", "");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals("{}", string3);
      
      int int0 = new Integer((-3695));
      assertEquals((-3695), int0);
      
      String string4 = StringUtils.defaultIfEmpty("&J?l(S/ktr4V6~TRa%", "<)v(vKh");
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertEquals("&J?l(S/ktr4V6~TRa%", string4);
      
      String string5 = StringUtils.substringAfter("Locale must not be null", "Threshold must not be negative");
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertEquals("", string5);
      
      boolean boolean0 = StringUtils.isNotBlank("");
      assertFalse(boolean0);
      
      String string6 = StringUtils.normalizeSpace("f0uCY7&r");
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string1));
      assertTrue(string6.equals((Object)string2));
      assertEquals("f0uCY7&r", string6);
      
      String string7 = StringUtils.mid("", (-3695), (-3695));
      assertNotNull(string7);
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string6));
      assertEquals("", string7);
      
      String string8 = StringUtils.unwrap("f0uCY7&r", '\"');
      assertNotNull(string8);
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string1));
      assertTrue(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string0));
      assertTrue(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string3));
      assertEquals("f0uCY7&r", string8);
      
      boolean boolean1 = StringUtils.startsWith("", "f0uCY7&r");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string9 = StringUtils.center((String) null, (-72), '\"');
      assertNull(string9);
      
      String string10 = StringUtils.abbreviate("0.0z0.0z122.0z0.0maxWith cannot be negative", "", (-73), (-1173));
      assertNotNull(string10);
      assertFalse(string10.equals((Object)string0));
      assertFalse(string10.equals((Object)string1));
      assertFalse(string10.equals((Object)string5));
      assertFalse(string10.equals((Object)string7));
      assertFalse(string10.equals((Object)string4));
      assertFalse(string10.equals((Object)string3));
      assertFalse(string10.equals((Object)string8));
      assertFalse(string10.equals((Object)string6));
      assertFalse(string10.equals((Object)string2));
      assertEquals("0.0z0.0z122.0z0.0maxWith cannot be negative", string10);
  }

  @Test(timeout = 4000)
  public void test821()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      String string0 = StringUtils.unwrap("Comparator should not be null.", "Comparator should not be null.");
      assertNotNull(string0);
      assertEquals("Comparator should not be null.", string0);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "Comparator should not be null.", (CharSequence) "Comparator should not be null.", 103);
      assertEquals(0, int0);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("Comparator should not be null.", "Comparator should not be null.");
      assertNotNull(stringArray0);
      assertEquals(31, stringArray0.length);
      
      String string1 = StringUtils.leftPad((String) null, 76, "r<;0*~QM'>");
      assertNull(string1);
  }

  @Test(timeout = 4000)
  public void test822()  throws Throwable  {
      String string0 = StringUtils.rightPad("null/empty items", 56, "/swe>H=I(,wP(MST)d)");
      assertNotNull(string0);
      assertEquals("null/empty items/swe>H=I(,wP(MST)d)/swe>H=I(,wP(MST)d)", string0);
      
      String string1 = StringUtils.center("/swe>H=I(,wP(MST)d)", 2387, '8');
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.wrapIfMissing("null/empty items/swe>H=I(,wP(MST)d)/swe>H=I(,wP(MST)d)", ">H=I");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals(">H=Inull/empty items/swe>H=I(,wP(MST)d)/swe>H=I(,wP(MST)d)>H=I", string2);
      
      String string3 = StringUtils.removeEnd(">H=I", "/swe>H=I(,wP(MST)d)");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals(">H=I", string3);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "org.apache.commons.lang3.StringUtils5|5pGW#urA~r?~3", (CharSequence) ">H=I", 16);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test823()  throws Throwable  {
      String string0 = StringUtils.SPACE;
      assertNotNull(string0);
      assertEquals(" ", string0);
      
      String string1 = StringUtils.rotate("...", (-494));
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("...", string1);
  }

  @Test(timeout = 4000)
  public void test824()  throws Throwable  {
      String string0 = StringUtils.LF;
      assertNotNull(string0);
      assertEquals("\n", string0);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "\n", (CharSequence[]) null);
      assertEquals((-1), int0);
      
      int int1 = StringUtils.compareIgnoreCase("Aborting to protect against StackOverflowError - output of one loop is the input of another", "Aborting to protect against StackOverflowError - output of one loop is the input of another", true);
      assertFalse(int1 == int0);
      assertEquals(0, int1);
  }

  @Test(timeout = 4000)
  public void test825()  throws Throwable  {
      boolean boolean0 = StringUtils.isWhitespace("US.^e:o_ufGpA");
      assertFalse(boolean0);
      
      String string0 = StringUtils.unwrap("US.^e:o_ufGpA", 'w');
      assertNotNull(string0);
      assertEquals("US.^e:o_ufGpA", string0);
      
      String string1 = StringUtils.center("US.^e:o_ufGpA", 19, 'w');
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("wwwUS.^e:o_ufGpAwww", string1);
      
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "US.^e:o_ufGpA", (CharSequence) "wwwUS.^e:o_ufGpAwww");
      assertEquals((-1), int0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[0] = (CharSequence) "(d";
      String string2 = StringUtils.remove("x", 'G');
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("x", string2);
      
      charSequenceArray0[1] = (CharSequence) "x";
      String string3 = StringUtils.prependIfMissingIgnoreCase("vW", "(d", charSequenceArray0);
      assertNotNull(string3);
      assertEquals(2, charSequenceArray0.length);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals("(dvW", string3);
      
      boolean boolean1 = StringUtils.containsWhitespace("US.^e:o_ufGpA");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      int int1 = StringUtils.indexOfAnyBut(charSequenceArray0[1], (CharSequence) "vW");
      assertEquals(2, charSequenceArray0.length);
      assertFalse(int1 == int0);
      assertEquals(0, int1);
  }

  @Test(timeout = 4000)
  public void test826()  throws Throwable  {
      String string0 = StringUtils.center("", 12);
      assertNotNull(string0);
      assertEquals("           ", string0);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "";
      stringArray0[1] = "";
      String string1 = StringUtils.join((Object[]) stringArray0, '4');
      assertNotNull(string1);
      assertEquals(2, stringArray0.length);
      assertFalse(string1.equals((Object)string0));
      assertEquals("4", string1);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "", (CharSequence) "");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test827()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      String string0 = StringUtils.stripToNull((String) null);
      assertNull(string0);
      
      charSequenceArray0[0] = (CharSequence) null;
      boolean boolean0 = StringUtils.isWhitespace(charSequenceArray0[0]);
      assertEquals(3, charSequenceArray0.length);
      assertFalse(boolean0);
      
      String string1 = StringUtils.prependIfMissingIgnoreCase("8", (CharSequence) null, charSequenceArray0);
      assertNotNull(string1);
      assertEquals(3, charSequenceArray0.length);
      assertEquals("8", string1);
  }

  @Test(timeout = 4000)
  public void test828()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = " vs ";
      stringArray0[1] = "Ua):3]I<ozRQ`OI![";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "Ua):3]I<ozRQ`OI![";
      String string0 = StringUtils.stripAccents("");
      assertNotNull(string0);
      assertEquals("", string0);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "", "8gqE<92_3@");
      assertEquals((-1), int0);
      
      int int1 = StringUtils.lastIndexOf((CharSequence) "", (CharSequence) "");
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      boolean boolean0 = StringUtils.isNotEmpty("Ua):3]I<ozRQ`OI![");
      assertTrue(boolean0);
      
      boolean boolean1 = StringUtils.isAnyEmpty(stringArray0);
      assertEquals(5, stringArray0.length);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String string1 = StringUtils.rotate("", (-1));
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      
      int int2 = StringUtils.indexOfAnyBut((CharSequence) "", (CharSequence) "Ua):3]I<ozRQ`OI![");
      assertFalse(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals((-1), int2);
      
      String string2 = StringUtils.substring("", 97);
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertEquals("", string2);
      
      String string3 = StringUtils.leftPad("Index: ", (-2654), 'N');
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals("Index: ", string3);
      
      boolean boolean2 = StringUtils.isAlphaSpace("Index: ");
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test829()  throws Throwable  {
      String string0 = StringUtils.center("*1%A", 29, "org.apache.commons.lang3.ObjectUtils$Null");
      assertNotNull(string0);
      assertEquals("org.apache.c*1%Aorg.apache.co", string0);
  }

  @Test(timeout = 4000)
  public void test830()  throws Throwable  {
      String string0 = StringUtils.substringAfterLast("", (-21));
      assertNotNull(string0);
      assertEquals("", string0);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "", (CharSequence) "", 2);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test831()  throws Throwable  {
      boolean boolean0 = StringUtils.containsAny((CharSequence) null, (CharSequence) null);
      assertFalse(boolean0);
      
      String string0 = StringUtils.removeAll((String) null, "'gH\"sO>+raOc1Xo");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test832()  throws Throwable  {
      String string0 = StringUtils.deleteWhitespace((String) null);
      assertNull(string0);
      
      boolean boolean0 = StringUtils.containsWhitespace((CharSequence) null);
      assertFalse(boolean0);
      
      String string1 = StringUtils.left(" is not in the range '0' - '9'", 97);
      assertNotNull(string1);
      assertEquals(" is not in the range '0' - '9'", string1);
  }

  @Test(timeout = 4000)
  public void test833()  throws Throwable  {
      String string0 = StringUtils.center("Z^57mE1H61]p", 3, '*');
      assertNotNull(string0);
      assertEquals("Z^57mE1H61]p", string0);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "", (CharSequence) "Z^57mE1H61]p");
      assertEquals(12, int0);
      
      int int1 = StringUtils.getLevenshteinDistance((CharSequence) "Z^57mE1H61]p", (CharSequence) "Z^57mE1H61]p", 13);
      assertFalse(int1 == int0);
      assertEquals(0, int1);
  }

  @Test(timeout = 4000)
  public void test834()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      assertNotNull(stringWriter0);
      assertEquals("", stringWriter0.toString());
      
      int int0 = StringUtils.compareIgnoreCase((String) null, (String) null);
      assertEquals(0, int0);
      
      String string0 = StringUtils.trimToEmpty("m{+0AUl/\"FKSCEP(U)");
      assertNotNull(string0);
      assertEquals("m{+0AUl/\"FKSCEP(U)", string0);
      
      String string1 = StringUtils.leftPad("dD>_7^>HjhHk{", 2031);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      int int1 = StringUtils.lastIndexOfIgnoreCase((CharSequence) string1, (CharSequence) string1);
      assertFalse(string1.equals((Object)string0));
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      
      String string2 = StringUtils.substringBefore((String) null, 23);
      assertNull(string2);
      
      int int2 = StringUtils.getLevenshteinDistance((CharSequence) "dD>_7^>HjhHk{", (CharSequence) "m{+0AUl/\"FKSCEP(U)", 404);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(18, int2);
      
      String string3 = StringUtils.stripToNull("c^3<xM7s=49");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("c^3<xM7s=49", string3);
  }

  @Test(timeout = 4000)
  public void test835()  throws Throwable  {
      String string0 = StringUtils.replaceIgnoreCase("", "", "");
      assertNotNull(string0);
      assertEquals("", string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[6];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "";
      String string1 = StringUtils.EMPTY;
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      
      charSequenceArray0[2] = (CharSequence) "";
      charSequenceArray0[3] = (CharSequence) "";
      charSequenceArray0[4] = (CharSequence) "";
      charSequenceArray0[5] = (CharSequence) "";
      int int0 = StringUtils.indexOfAny((CharSequence) "", charSequenceArray0);
      assertEquals(6, charSequenceArray0.length);
      assertEquals(0, int0);
      
      String string2 = StringUtils.prependIfMissingIgnoreCase("KP>hc.3(AN~#4A{,qd", charSequenceArray0[4], charSequenceArray0);
      assertNotNull(string2);
      assertEquals(6, charSequenceArray0.length);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("KP>hc.3(AN~#4A{,qd", string2);
      
      String string3 = StringUtils.repeat('$', 0);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string0));
      assertEquals("", string3);
      
      boolean boolean0 = StringUtils.containsWhitespace("");
      assertFalse(boolean0);
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = "";
      stringArray0[1] = "KP>hc.3(AN~#4A{,qd";
      stringArray0[2] = "";
      stringArray0[3] = "";
      String string4 = StringUtils.firstNonBlank(stringArray0);
      assertNotNull(string4);
      assertEquals(4, stringArray0.length);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string2));
      assertEquals("KP>hc.3(AN~#4A{,qd", string4);
      
      int int1 = StringUtils.indexOfAny(charSequenceArray0[5], charSequenceArray0);
      assertEquals(6, charSequenceArray0.length);
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      
      String string5 = StringUtils.leftPad("Y(ro/M1bi-J!i-,d>n+", 0, "KP>hc.3(AN~#4A{,qd");
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertEquals("Y(ro/M1bi-J!i-,d>n+", string5);
      
      String string6 = StringUtils.rotate("", 0);
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string4));
      assertTrue(string6.equals((Object)string0));
      assertTrue(string6.equals((Object)string1));
      assertTrue(string6.equals((Object)string3));
      assertEquals("", string6);
      
      String string7 = StringUtils.removeAll((String) null, (String) null);
      assertNull(string7);
      
      boolean boolean1 = StringUtils.isNoneEmpty(charSequenceArray0);
      assertEquals(6, charSequenceArray0.length);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string8 = StringUtils.abbreviate("", "ZyW,AzDH~", 0);
      assertNotNull(string8);
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string4));
      assertTrue(string8.equals((Object)string6));
      assertTrue(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string5));
      assertTrue(string8.equals((Object)string0));
      assertTrue(string8.equals((Object)string3));
      assertEquals("", string8);
      
      int int2 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "", (CharSequence) "");
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals(0, int2);
      
      String string9 = StringUtils.substringBefore("ZyW,AzDH~", 0);
      assertNotNull(string9);
      assertFalse(string9.equals((Object)string2));
      assertFalse(string9.equals((Object)string4));
      assertFalse(string9.equals((Object)string8));
      assertFalse(string9.equals((Object)string0));
      assertFalse(string9.equals((Object)string6));
      assertFalse(string9.equals((Object)string3));
      assertFalse(string9.equals((Object)string5));
      assertFalse(string9.equals((Object)string1));
      assertEquals("ZyW,AzDH~", string9);
      
      int int3 = StringUtils.getLevenshteinDistance(charSequenceArray0[5], (CharSequence) "ZyW,AzDH~", 404);
      assertEquals(6, charSequenceArray0.length);
      assertFalse(int3 == int1);
      assertFalse(int3 == int0);
      assertFalse(int3 == int2);
      assertEquals(9, int3);
  }

  @Test(timeout = 4000)
  public void test836()  throws Throwable  {
      String string0 = StringUtils.replaceIgnoreCase("", "", "");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.EMPTY;
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "", (CharSequence) "", 484);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test837()  throws Throwable  {
      String string0 = StringUtils.replaceOnceIgnoreCase("T/RAfSADSsF$}wV#N", "T/RAfSADSsF$}wV#N", "T/RAfSADSsF$}wV#N");
      assertNotNull(string0);
      assertEquals("T/RAfSADSsF$}wV#N", string0);
      
      boolean boolean0 = StringUtils.containsWhitespace("T/RAfSADSsF$}wV#N");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.containsAny((CharSequence) "T/RAfSADSsF$}wV#N", (CharSequence) "T/RAfSADSsF$}wV#N");
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String string1 = StringUtils.abbreviate("\n-cBy67k9#e'y~~L{X-808.0j891.1.M,KjXgwsMU,", 84, 84);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("\n-cBy67k9#e'y~~L{X-808.0j891.1.M,KjXgwsMU,", string1);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "\n-cBy67k9#e'y~~L{X-808.0j891.1.M,KjXgwsMU,", (CharSequence) "T/RAfSADSsF$}wV#N");
      assertEquals((-1), int0);
      
      String string2 = StringUtils.join((char[]) null, 'n');
      assertNull(string2);
      
      String string3 = StringUtils.join((char[]) null, '9');
      assertNull(string3);
      
      boolean boolean2 = StringUtils.containsNone((CharSequence) "T/RAfSADSsF$}wV#N", (char[]) null);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2);
      
      String string4 = StringUtils.uncapitalize("G[W2Kb");
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertEquals("g[W2Kb", string4);
      
      boolean boolean3 = StringUtils.containsAny((CharSequence) "\n-cBy67k9#e'y~~L{X-808.0j891.1.M,KjXgwsMU,", (CharSequence) "\n-cBy67k9#e'y~~L{X-808.0j891.1.M,KjXgwsMU,");
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3);
      
      // Undeclared exception!
      try { 
        StringUtils.getLevenshteinDistance((CharSequence) "T/RAfSADSsF$}wV#N", (CharSequence) "T/RAfSADSsF$}wV#N", (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Threshold must not be negative
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test838()  throws Throwable  {
      Object[] objectArray0 = new Object[4];
      objectArray0[1] = (Object) "\n-cBy67k9#e'y~~L{X-808.0j891.1.M,KjXgwsMU,";
      Object object0 = new Object();
      assertNotNull(object0);
      
      char[] charArray0 = new char[1];
      String string0 = StringUtils.join(charArray0, ')');
      assertNotNull(string0);
      assertEquals(1, charArray0.length);
      assertEquals("\u0000", string0);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      
      boolean boolean0 = StringUtils.isAllLowerCase("\n-cBy67k9#e'y~~L{X-808.0j891.1.M,KjXgwsMU,");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test839()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("c^P@NHM", "c^P@NHM");
      assertNotNull(stringArray0);
      assertEquals(2, stringArray0.length);
      
      String string0 = StringUtils.lowerCase((String) null, (Locale) null);
      assertNull(string0);
      
      boolean boolean0 = StringUtils.isAnyBlank(stringArray0);
      assertEquals(2, stringArray0.length);
      assertTrue(boolean0);
      
      String string1 = StringUtils.replaceIgnoreCase("", "HT(0", "c^P@NHM");
      assertNotNull(string1);
      assertEquals("", string1);
      
      char[] charArray0 = new char[7];
      charArray0[0] = 'm';
      charArray0[1] = 'm';
      charArray0[2] = 'm';
      charArray0[3] = 'm';
      charArray0[4] = 'm';
      String string2 = StringUtils.toRootLowerCase((String) null);
      assertNull(string2);
      
      String string3 = StringUtils.defaultIfBlank("", "T$!");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertEquals("T$!", string3);
  }

  @Test(timeout = 4000)
  public void test840()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      char[] charArray0 = new char[0];
      String string0 = StringUtils.join(charArray0, 'n');
      assertNotNull(string0);
      assertEquals(0, charArray0.length);
      assertEquals("", string0);
      assertArrayEquals(new char[] {}, charArray0);
      
      boolean boolean0 = StringUtils.isAllLowerCase("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test841()  throws Throwable  {
      String string0 = StringUtils.toRootLowerCase(" vks ");
      assertNotNull(string0);
      assertEquals(" vks ", string0);
      
      String string1 = StringUtils.removeStart(" vks ", " vks ");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      
      boolean boolean0 = StringUtils.isAllLowerCase(" vks ");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test842()  throws Throwable  {
      String string0 = StringUtils.rightPad("f>-l|^^'S`C", (-161), "V");
      assertNotNull(string0);
      assertEquals("f>-l|^^'S`C", string0);
      
      String string1 = StringUtils.replaceIgnoreCase("V", "V", "Search and Replace array lengths don't match: ", Integer.MAX_VALUE);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("Search and Replace array lengths don't match: ", string1);
      
      String string2 = StringUtils.stripAccents("$3]");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("$3]", string2);
      
      String string3 = StringUtils.replaceOnceIgnoreCase(";e|PvY[M,WJ=KeK,MR", "Index: ", "$3]");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals(";e|PvY[M,WJ=KeK,MR", string3);
      
      String string4 = StringUtils.overlay("s|[vM[", "org.apache.commons.lang3.RegExUtils", 0, 0);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertEquals("org.apache.commons.lang3.RegExUtilss|[vM[", string4);
      
      String string5 = StringUtils.substringAfterLast("", "U-0I_sa9{4d&NF");
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertEquals("", string5);
      
      String string6 = StringUtils.defaultIfBlank("V", "org.apache.commons.lang3.RegExUtils");
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string2));
      assertEquals("V", string6);
      
      boolean boolean0 = StringUtils.isAlphanumeric("U-0I_sa9{4d&NF");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test843()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "<)B(vKh";
      stringArray0[1] = "";
      String[] stringArray1 = StringUtils.stripAll(stringArray0);
      assertNotNull(stringArray1);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(2, stringArray0.length);
      assertEquals(2, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      boolean boolean0 = StringUtils.isAlphanumeric("<)B(vKh");
      assertFalse(boolean0);
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'W';
      charArray0[1] = '%';
      charArray0[2] = 'G';
      charArray0[3] = '>';
      String string0 = StringUtils.join(charArray0, 'W');
      assertNotNull(string0);
      assertEquals(4, charArray0.length);
      assertEquals("WW%WGW>", string0);
      assertArrayEquals(new char[] {'W', '%', 'G', '>'}, charArray0);
      
      String string1 = StringUtils.toRootLowerCase("<)B(vKh");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("<)b(vkh", string1);
      
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short)64;
      shortArray0[1] = (short)0;
      shortArray0[2] = (short)160;
      shortArray0[3] = (short)16;
      shortArray0[4] = (short)124;
      shortArray0[5] = (short)609;
      // Undeclared exception!
      try { 
        StringUtils.join(shortArray0, 'W', (int) (short)16, (int) (short)64);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 16
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test844()  throws Throwable  {
      String string0 = StringUtils.repeat("c^P#cHM", 6);
      assertNotNull(string0);
      assertEquals("c^P#cHMc^P#cHMc^P#cHMc^P#cHMc^P#cHMc^P#cHM", string0);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "c^P#cHMc^P#cHMc^P#cHMc^P#cHMc^P#cHMc^P#cHM", "c^P#cHMc^P#cHMc^P#cHMc^P#cHMc^P#cHMc^P#cHM");
      assertEquals(0, int0);
      
      String string1 = StringUtils.rightPad("c^P#cHM", 0, "w[ S*{(\"xv");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("c^P#cHM", string1);
      
      int int1 = StringUtils.getLevenshteinDistance((CharSequence) "c^P#cHM", (CharSequence) "c^P#cHM");
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      
      String string2 = StringUtils.replacePattern("Invalid locale format: ", " ", "RjWU}p|M=YT9");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("InvalidRjWU}p|M=YT9localeRjWU}p|M=YT9format:RjWU}p|M=YT9", string2);
      
      String[] stringArray0 = new String[0];
      String string3 = StringUtils.getCommonPrefix(stringArray0);
      assertNotNull(string3);
      assertEquals(0, stringArray0.length);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("", string3);
      
      String string4 = StringUtils.stripStart("\n", "z jRn3");
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertEquals("\n", string4);
  }

  @Test(timeout = 4000)
  public void test845()  throws Throwable  {
      String string0 = StringUtils.LF;
      assertNotNull(string0);
      assertEquals("\n", string0);
      
      boolean boolean0 = StringUtils.equalsIgnoreCase("\n", "\n");
      assertTrue(boolean0);
      
      String string1 = StringUtils.chop("\n");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      charSequenceArray0[0] = (CharSequence) "\n";
      String string2 = StringUtils.truncate("r2", 8192);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("r2", string2);
      
      charSequenceArray0[1] = (CharSequence) "r2";
      charSequenceArray0[2] = (CharSequence) "";
      String string3 = StringUtils.stripToEmpty("\n");
      assertNotNull(string3);
      assertTrue(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals("", string3);
      
      charSequenceArray0[3] = (CharSequence) "";
      charSequenceArray0[4] = (CharSequence) "\n";
      int int0 = StringUtils.lastIndexOfAny("", charSequenceArray0);
      assertEquals(5, charSequenceArray0.length);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test846()  throws Throwable  {
      String string0 = StringUtils.remove("W~p/]:FDw`qEP(g{Xm", "W~p/]:FDw`qEP(g{Xm");
      assertNotNull(string0);
      assertEquals("", string0);
      
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "");
      assertNotNull(charBuffer0);
      assertFalse(charBuffer0.hasArray());
      assertEquals(0, charBuffer0.limit());
      assertFalse(charBuffer0.hasRemaining());
      assertTrue(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.remaining());
      assertFalse(charBuffer0.isDirect());
      assertEquals("", charBuffer0.toString());
      assertEquals(0, charBuffer0.position());
      assertEquals(0, charBuffer0.capacity());
      assertEquals(0, charBuffer0.length());
      
      CharBuffer charBuffer1 = charBuffer0.slice();
      assertNotNull(charBuffer1);
      assertNotSame(charBuffer0, charBuffer1);
      assertNotSame(charBuffer1, charBuffer0);
      assertFalse(charBuffer0.hasArray());
      assertEquals(0, charBuffer0.limit());
      assertFalse(charBuffer0.hasRemaining());
      assertTrue(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.remaining());
      assertFalse(charBuffer0.isDirect());
      assertEquals("", charBuffer0.toString());
      assertEquals(0, charBuffer0.position());
      assertEquals(0, charBuffer0.capacity());
      assertEquals(0, charBuffer0.length());
      assertEquals(0, charBuffer1.remaining());
      assertEquals(0, charBuffer1.capacity());
      assertTrue(charBuffer1.isReadOnly());
      assertEquals("", charBuffer1.toString());
      assertEquals(0, charBuffer1.limit());
      assertEquals(0, charBuffer1.length());
      assertFalse(charBuffer1.hasRemaining());
      assertEquals(0, charBuffer1.position());
      assertFalse(charBuffer1.isDirect());
      assertFalse(charBuffer1.hasArray());
      assertTrue(charBuffer1.equals((Object)charBuffer0));
      
      CharSequence[] charSequenceArray0 = new CharSequence[7];
      charSequenceArray0[0] = (CharSequence) charBuffer1;
      charSequenceArray0[1] = (CharSequence) "";
      String string1 = StringUtils.removeFirst("", "");
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      
      String[] stringArray0 = new String[10];
      stringArray0[0] = "W~p/]:FDw`qEP(g{Xm";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "";
      String[] stringArray1 = StringUtils.stripAll(stringArray0, "ClP>2# gfkKWB@vC");
      assertNotNull(stringArray1);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(10, stringArray0.length);
      assertEquals(10, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)20;
      byteArray0[1] = (byte)20;
      byteArray0[2] = (byte)20;
      byteArray0[3] = (byte)20;
      byteArray0[4] = (byte)20;
      byteArray0[5] = (byte)20;
      String string2 = StringUtils.join(byteArray0, 'a', 197, (-4132));
      assertNotNull(string2);
      assertEquals(6, byteArray0.length);
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertEquals("", string2);
      assertArrayEquals(new byte[] {(byte)20, (byte)20, (byte)20, (byte)20, (byte)20, (byte)20}, byteArray0);
      
      String string3 = StringUtils.strip("J1h}`N'=AMYL2R");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("J1h}`N'=AMYL2R", string3);
      
      int int0 = StringUtils.length("J1h}`N'=AMYL2R");
      assertEquals(15, int0);
  }

  @Test(timeout = 4000)
  public void test847()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = " vs ";
      String string0 = StringUtils.strip(" vs ");
      assertNotNull(string0);
      assertEquals("vs", string0);
      
      double double0 = StringUtils.getJaroWinklerDistance("vs", "vs");
      assertEquals(1.0, double0, 0.01);
      
      boolean boolean0 = StringUtils.equalsAny(" vs ", stringArray0);
      assertEquals(5, stringArray0.length);
      assertTrue(boolean0);
      
      boolean boolean1 = StringUtils.isNumeric("vs");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      Integer integer0 = new Integer(13);
      assertNotNull(integer0);
      assertEquals(13, (int)integer0);
      
      int int0 = StringUtils.length(" is not in the range '0' - '9'");
      assertEquals(30, int0);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = (double) '}';
      String string1 = StringUtils.join(doubleArray0, '}', 16, (-641));
      assertNotNull(string1);
      assertEquals(3, doubleArray0.length);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertArrayEquals(new double[] {1.0, 125.0, 0.0}, doubleArray0, 0.01);
      
      boolean boolean2 = StringUtils.isNumericSpace(" vs ");
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test848()  throws Throwable  {
      String string0 = StringUtils.wrapIfMissing((String) null, 'l');
      assertNull(string0);
      
      String string1 = StringUtils.right((String) null, 160);
      assertNull(string1);
  }

  @Test(timeout = 4000)
  public void test849()  throws Throwable  {
      String string0 = StringUtils.remove("W~p/]:FDw`qEP(g{Xm", "W~p/]:FDw`qEP(g{Xm");
      assertNotNull(string0);
      assertEquals("", string0);
      
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "");
      assertNotNull(charBuffer0);
      assertEquals(0, charBuffer0.position());
      assertEquals(0, charBuffer0.limit());
      assertTrue(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.remaining());
      assertEquals("", charBuffer0.toString());
      assertFalse(charBuffer0.isDirect());
      assertFalse(charBuffer0.hasArray());
      assertFalse(charBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.capacity());
      assertEquals(0, charBuffer0.length());
      
      CharBuffer charBuffer1 = charBuffer0.slice();
      assertNotNull(charBuffer1);
      assertNotSame(charBuffer0, charBuffer1);
      assertNotSame(charBuffer1, charBuffer0);
      assertEquals(0, charBuffer0.position());
      assertEquals(0, charBuffer0.limit());
      assertTrue(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.remaining());
      assertEquals("", charBuffer0.toString());
      assertFalse(charBuffer0.isDirect());
      assertFalse(charBuffer0.hasArray());
      assertFalse(charBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.capacity());
      assertEquals(0, charBuffer0.length());
      assertEquals(0, charBuffer1.remaining());
      assertEquals(0, charBuffer1.capacity());
      assertFalse(charBuffer1.hasArray());
      assertTrue(charBuffer1.isReadOnly());
      assertEquals(0, charBuffer1.position());
      assertFalse(charBuffer1.isDirect());
      assertEquals(0, charBuffer1.limit());
      assertFalse(charBuffer1.hasRemaining());
      assertEquals(0, charBuffer1.length());
      assertEquals("", charBuffer1.toString());
      assertTrue(charBuffer1.equals((Object)charBuffer0));
      
      CharSequence[] charSequenceArray0 = new CharSequence[7];
      charSequenceArray0[0] = (CharSequence) charBuffer1;
      charSequenceArray0[1] = (CharSequence) "";
      String string1 = StringUtils.removeFirst("", "");
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      
      charSequenceArray0[2] = (CharSequence) "";
      charSequenceArray0[5] = (CharSequence) charBuffer1;
      boolean boolean0 = StringUtils.isAllBlank(charSequenceArray0);
      assertEquals(7, charSequenceArray0.length);
      assertTrue(boolean0);
      
      String string2 = StringUtils.replaceOnceIgnoreCase("ouu))09wx;y5{S%wsK", "", ",OgH#.>iD>Z1y");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("ouu))09wx;y5{S%wsK", string2);
      
      String string3 = StringUtils.mid("{_v+&cA<.]R", 2, 122);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals("v+&cA<.]R", string3);
      
      String string4 = StringUtils.unwrap("", 'I');
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string0));
      assertEquals("", string4);
      
      boolean boolean1 = StringUtils.startsWith(charBuffer1, "W~p/]:FDw`qEP(g{Xm");
      assertNotSame(charBuffer0, charBuffer1);
      assertNotSame(charBuffer1, charBuffer0);
      assertEquals(0, charBuffer0.position());
      assertEquals(0, charBuffer0.limit());
      assertTrue(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.remaining());
      assertEquals("", charBuffer0.toString());
      assertFalse(charBuffer0.isDirect());
      assertFalse(charBuffer0.hasArray());
      assertFalse(charBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.capacity());
      assertEquals(0, charBuffer0.length());
      assertEquals(0, charBuffer1.remaining());
      assertEquals(0, charBuffer1.capacity());
      assertFalse(charBuffer1.hasArray());
      assertTrue(charBuffer1.isReadOnly());
      assertEquals(0, charBuffer1.position());
      assertFalse(charBuffer1.isDirect());
      assertEquals(0, charBuffer1.limit());
      assertFalse(charBuffer1.hasRemaining());
      assertEquals(0, charBuffer1.length());
      assertEquals("", charBuffer1.toString());
      assertTrue(charBuffer0.equals((Object)charBuffer1));
      assertTrue(charBuffer1.equals((Object)charBuffer0));
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      int int0 = StringUtils.indexOfAny((CharSequence) charBuffer1, charSequenceArray0);
      assertNotSame(charBuffer0, charBuffer1);
      assertNotSame(charBuffer1, charBuffer0);
      assertEquals(0, charBuffer0.position());
      assertEquals(0, charBuffer0.limit());
      assertTrue(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.remaining());
      assertEquals("", charBuffer0.toString());
      assertFalse(charBuffer0.isDirect());
      assertFalse(charBuffer0.hasArray());
      assertFalse(charBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.capacity());
      assertEquals(0, charBuffer0.length());
      assertEquals(0, charBuffer1.remaining());
      assertEquals(0, charBuffer1.capacity());
      assertFalse(charBuffer1.hasArray());
      assertTrue(charBuffer1.isReadOnly());
      assertEquals(0, charBuffer1.position());
      assertFalse(charBuffer1.isDirect());
      assertEquals(0, charBuffer1.limit());
      assertFalse(charBuffer1.hasRemaining());
      assertEquals(0, charBuffer1.length());
      assertEquals("", charBuffer1.toString());
      assertEquals(7, charSequenceArray0.length);
      assertTrue(charBuffer0.equals((Object)charBuffer1));
      assertTrue(charBuffer1.equals((Object)charBuffer0));
      assertEquals(0, int0);
      
      int int1 = StringUtils.compareIgnoreCase("ouu))09wx;y5{S%wsK", (String) null, false);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      String string5 = StringUtils.wrapIfMissing("L5:2gc.)mgo:eKq+DV", '5');
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertEquals("5L5:2gc.)mgo:eKq+DV5", string5);
      
      boolean boolean2 = StringUtils.equals((CharSequence) "", (CharSequence) charBuffer0);
      assertNotSame(charBuffer0, charBuffer1);
      assertEquals(0, charBuffer0.position());
      assertEquals(0, charBuffer0.limit());
      assertTrue(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.remaining());
      assertEquals("", charBuffer0.toString());
      assertFalse(charBuffer0.isDirect());
      assertFalse(charBuffer0.hasArray());
      assertFalse(charBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.capacity());
      assertEquals(0, charBuffer0.length());
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertTrue(charBuffer0.equals((Object)charBuffer1));
      assertTrue(boolean2);
  }

  @Test(timeout = 4000)
  public void test850()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)17;
      String string0 = StringUtils.difference("QsI", (String) null);
      assertNotNull(string0);
      assertEquals("QsI", string0);
  }

  @Test(timeout = 4000)
  public void test851()  throws Throwable  {
      int int0 = 13;
      String string0 = StringUtils.substringAfter("", 13);
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.normalizeSpace(".&_41/mj|y5cD|N|");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals(".&_41/mj|y5cD|N|", string1);
      
      String string2 = StringUtils.truncate("", 964, 35);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertEquals("", string2);
      
      boolean boolean0 = StringUtils.containsNone((CharSequence) ".&_41/mj|y5cD|N|", (char[]) null);
      assertTrue(boolean0);
      
      boolean boolean1 = StringUtils.isEmpty(".&_41/mj|y5cD|N|");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string3 = " vs ";
      String string4 = "<cu1PA|FtsW\"|";
      String string5 = StringUtils.overlay("AXH.8Q", "<cu1PA|FtsW\"|", 964, 964);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertEquals("AXH.8Q<cu1PA|FtsW\"|", string5);
      
      CharSequence[] charSequenceArray0 = new CharSequence[10];
      // Undeclared exception!
      try { 
        CharBuffer.wrap((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test852()  throws Throwable  {
      String string0 = StringUtils.remove("$4'Tcj.*5", 'o');
      assertNotNull(string0);
      assertEquals("$4'Tcj.*5", string0);
      
      String string1 = "\\u";
      String string2 = StringUtils.replaceOnceIgnoreCase("$4'Tcj.*5", "", string1);
      assertNotNull(string2);
      assertFalse(string1.equals((Object)string0));
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("$4'Tcj.*5", string2);
      
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "";
      charSequenceArray0[3] = (CharSequence) "";
      charSequenceArray0[4] = (CharSequence) "";
      boolean boolean0 = StringUtils.equalsAnyIgnoreCase("$4'Tcj.*5", charSequenceArray0);
      assertEquals(5, charSequenceArray0.length);
      assertFalse(boolean0);
      
      String string3 = StringUtils.join((Object[]) charSequenceArray0, "", 196, 124);
      assertNotNull(string3);
      assertEquals(5, charSequenceArray0.length);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("", string3);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "", charSequenceArray0[0], (-655));
      assertEquals(5, charSequenceArray0.length);
      assertEquals((-1), int0);
      
      long[] longArray0 = new long[5];
      longArray0[0] = (long) (-655);
      longArray0[1] = (long) (-655);
      longArray0[2] = (long) 196;
      longArray0[3] = (long) 'o';
      longArray0[4] = (long) 196;
      // Undeclared exception!
      try { 
        StringUtils.join(longArray0, 'N', (-128), 196);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -128
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test853()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = " vs ";
      stringArray0[1] = "Ua):3]I<ozRQ`OI![";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "";
      String string0 = StringUtils.stripAccents("");
      assertNotNull(string0);
      assertEquals("", string0);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "", "8gqE<92_3@");
      assertEquals((-1), int0);
      
      int int1 = StringUtils.lastIndexOf((CharSequence) "", (CharSequence) "");
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      boolean boolean0 = StringUtils.isNotEmpty("Ua):3]I<ozRQ`OI![");
      assertTrue(boolean0);
      
      boolean boolean1 = StringUtils.isAnyEmpty(stringArray0);
      assertEquals(5, stringArray0.length);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String string1 = StringUtils.rotate("", 0);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      
      int int2 = StringUtils.indexOfAnyBut((CharSequence) "", (CharSequence) "Ua):3]I<ozRQ`OI![");
      assertTrue(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals((-1), int2);
      
      String string2 = StringUtils.substring("", 97);
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertEquals("", string2);
      
      String string3 = StringUtils.leftPad("Index: ", (-2654), 'N');
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals("Index: ", string3);
      
      boolean boolean2 = StringUtils.isAlphaSpace("Index: ");
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test854()  throws Throwable  {
      Object[] objectArray0 = new Object[3];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      Object object1 = new Object();
      assertNotNull(object1);
      assertFalse(object1.equals((Object)object0));
      
      objectArray0[1] = object1;
      String string0 = StringUtils.substringBefore("java.lang.Object@7ae88c63java.lang.Object@46e4abbejava.lang.Object@7ae88c63java.lang.Object@2b93da5fjava.lang.Object@58b1910ajava.lang.Object@7ae88c63java.lang.Object@46e4abbejava.lang.Object@7ae88c63java.lang.Object@2b93da5fjava.lang.Object@58b1910a", "*)Z[KAH?a");
      assertNotNull(string0);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "java.lang.Object@7ae88c63java.lang.Object@46e4abbejava.lang.Object@7ae88c63java.lang.Object@2b93da5fjava.lang.Object@58b1910ajava.lang.Object@7ae88c63java.lang.Object@46e4abbejava.lang.Object@7ae88c63java.lang.Object@2b93da5fjava.lang.Object@58b1910a", (CharSequence) "java.lang.Object@7ae88c63java.lang.Object@46e4abbejava.lang.Object@7ae88c63java.lang.Object@2b93da5fjava.lang.Object@58b1910ajava.lang.Object@7ae88c63java.lang.Object@46e4abbejava.lang.Object@7ae88c63java.lang.Object@2b93da5fjava.lang.Object@58b1910a", 630);
      assertEquals(0, int0);
      
      int int1 = StringUtils.ordinalIndexOf("java.lang.Object@7ae88c63java.lang.Object@46e4abbejava.lang.Object@7ae88c63java.lang.Object@2b93da5fjava.lang.Object@58b1910ajava.lang.Object@7ae88c63java.lang.Object@46e4abbejava.lang.Object@7ae88c63java.lang.Object@2b93da5fjava.lang.Object@58b1910a", "*)Z[KAH?a", 281);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("java.lang.Object@7ae88c63java.lang.Object@46e4abbejava.lang.Object@7ae88c63java.lang.Object@2b93da5fjava.lang.Object@58b1910ajava.lang.Object@7ae88c63java.lang.Object@46e4abbejava.lang.Object@7ae88c63java.lang.Object@2b93da5fjava.lang.Object@58b1910a", "D*", 108);
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      // Undeclared exception!
      StringUtils.leftPad("D*", 32767, '@');
  }

  @Test(timeout = 4000)
  public void test855()  throws Throwable  {
      String string0 = "";
      int int0 = 1067;
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("", "", 1067);
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      
      String string1 = StringUtils.left("", 1067);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      
      String string2 = StringUtils.rightPad("", 1067);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      boolean[] booleanArray0 = new boolean[0];
      String string3 = StringUtils.join(booleanArray0, 'x', 1067, 1067);
      assertNotNull(string3);
      assertEquals(0, booleanArray0.length);
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string1));
      assertEquals("", string3);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      
      int int1 = StringUtils.lastIndexOf((CharSequence) "", (CharSequence) "");
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      char[] charArray0 = new char[7];
      charArray0[0] = 'x';
      charArray0[1] = 'x';
      charArray0[2] = 'x';
      charArray0[3] = 'x';
      charArray0[4] = 'x';
      charArray0[5] = 'x';
      charArray0[6] = 'x';
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "", charArray0);
      assertEquals(7, charArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new char[] {'x', 'x', 'x', 'x', 'x', 'x', 'x'}, charArray0);
      
      String string4 = ")+><%m";
      String string5 = StringUtils.defaultIfEmpty(")+><%m", "");
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertTrue(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertEquals(")+><%m", string5);
      
      String string6 = "uaa*@Y";
      String string7 = StringUtils.appendIfMissingIgnoreCase("uaa*@Y", "", stringArray0);
      assertNotNull(string7);
      assertEquals(0, stringArray0.length);
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string2));
      assertTrue(string7.equals((Object)string6));
      assertEquals("uaa*@Y", string7);
      
      try { 
        StringUtils.getBytes(string2, "");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(UnsupportedEncodingException e) {
      }
  }

  @Test(timeout = 4000)
  public void test856()  throws Throwable  {
      String string0 = StringUtils.wrap("", "");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String[] stringArray0 = new String[2];
      String string1 = StringUtils.leftPad("", 12, "");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      
      String string2 = StringUtils.join((Object[]) stringArray0, "");
      assertNotNull(string2);
      assertEquals(2, stringArray0.length);
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("", string2);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) 12;
      String string3 = StringUtils.join(longArray0, 'H', 3, 3);
      assertNotNull(string3);
      assertEquals(1, longArray0.length);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals("", string3);
      assertArrayEquals(new long[] {12L}, longArray0);
      
      String string4 = StringUtils.removePattern("", "");
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string3));
      assertEquals("", string4);
      
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) 12L;
      objectArray0[1] = (Object) "";
      objectArray0[2] = (Object) "";
      objectArray0[3] = (Object) "";
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[4] = object0;
      objectArray0[5] = (Object) "";
      objectArray0[6] = (Object) "";
      objectArray0[7] = (Object) "";
      Object object1 = new Object();
      assertNotNull(object1);
      assertFalse(object1.equals((Object)object0));
      
      objectArray0[8] = object1;
      String string5 = StringUtils.joinWith("", objectArray0);
      assertNotNull(string5);
      assertEquals(9, objectArray0.length);
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      
      String string6 = StringUtils.wrapIfMissing("Index: ", '_');
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string5));
      assertEquals("_Index: _", string6);
      
      boolean boolean0 = StringUtils.containsNone((CharSequence) "", (String) null);
      assertTrue(boolean0);
      
      boolean boolean1 = StringUtils.equalsAnyIgnoreCase("", stringArray0);
      assertEquals(2, stringArray0.length);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test857()  throws Throwable  {
      String string0 = StringUtils.center("", 12);
      assertNotNull(string0);
      assertEquals("           ", string0);
      
      boolean boolean0 = StringUtils.isAlphanumericSpace("           ");
      assertFalse(boolean0);
      
      String string1 = StringUtils.right("           ", 12);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("           ", string1);
  }

  @Test(timeout = 4000)
  public void test858()  throws Throwable  {
      int int0 = StringUtils.compareIgnoreCase("t]<V|w", "t]<V|w", true);
      assertEquals(0, int0);
      
      String string0 = StringUtils.getDigits("t]<V|w");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.chomp("C\"sB0NGGK5WB)yc`r&i_[[(MI");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("C\"sB0NGGK5WB)yc`r&i_[[(MI", string1);
  }

  @Test(timeout = 4000)
  public void test859()  throws Throwable  {
      String string0 = StringUtils.left("5|5pGW#urA~r?~3", (-494));
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.abbreviate("", (-494));
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      
      boolean boolean0 = StringUtils.isMixedCase("5|5pGW#urA~r?~3");
      assertTrue(boolean0);
      
      String string2 = StringUtils.SPACE;
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals(" ", string2);
      
      int int0 = StringUtils.countMatches((CharSequence) "5|5pGW#urA~r?~3", (CharSequence) " ");
      assertEquals(0, int0);
      
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("");
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      
      String string3 = StringUtils.stripEnd("", "");
      assertNotNull(string3);
      assertTrue(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals("", string3);
      
      int int1 = StringUtils.countMatches((CharSequence) " ", (CharSequence) "");
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      
      String[] stringArray1 = StringUtils.splitByCharacterTypeCamelCase("");
      assertNotNull(stringArray1);
      assertSame(stringArray1, stringArray0);
      assertEquals(0, stringArray1.length);
      
      String string4 = StringUtils.rotate("?!hYEscxuF|", (-725));
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertEquals("|?!hYEscxuF", string4);
      
      String string5 = StringUtils.center("Locale must not be null", (-1367));
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertEquals("Locale must not be null", string5);
      
      String string6 = StringUtils.lowerCase("");
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string4));
      assertTrue(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string2));
      assertTrue(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string5));
      assertTrue(string6.equals((Object)string1));
      assertEquals("", string6);
      
      String string7 = StringUtils.abbreviate("?!hYEscxuF|", "Locale must not be null", (-4554), 481);
      assertNotNull(string7);
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string3));
      assertEquals("?!hYEscxuF|", string7);
      
      Stack<String> stack0 = new Stack<String>();
      assertNotNull(stack0);
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      assertFalse(stack0.contains(string2));
      
      String string8 = StringUtils.join((List<?>) stack0, '.', 6, 0);
      assertNotNull(string8);
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      assertFalse(string8.equals((Object)string2));
      assertTrue(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string4));
      assertTrue(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string5));
      assertTrue(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string7));
      assertEquals("", string8);
      assertFalse(stack0.contains(string2));
  }

  @Test(timeout = 4000)
  public void test860()  throws Throwable  {
      String string0 = StringUtils.stripToEmpty("G9cL&Vk#]>");
      assertNotNull(string0);
      assertEquals("G9cL&Vk#]>", string0);
  }

  @Test(timeout = 4000)
  public void test861()  throws Throwable  {
      String string0 = StringUtils.difference("ko ?8?sYQU", "iqK");
      assertNotNull(string0);
      assertEquals("iqK", string0);
  }

  @Test(timeout = 4000)
  public void test862()  throws Throwable  {
      String string0 = StringUtils.strip(" s ");
      assertNotNull(string0);
      assertEquals("s", string0);
      
      String string1 = StringUtils.trimToEmpty("Comparator should not be null.");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("Comparator should not be null.", string1);
  }

  @Test(timeout = 4000)
  public void test863()  throws Throwable  {
      String string0 = StringUtils.remove("$4'Tcj.*5", 'o');
      assertNotNull(string0);
      assertEquals("$4'Tcj.*5", string0);
      
      String string1 = "\\u";
      String string2 = StringUtils.replaceOnceIgnoreCase("$4'Tcj.*5", "", string1);
      assertNotNull(string2);
      assertFalse(string1.equals((Object)string0));
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("$4'Tcj.*5", string2);
      
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "$4'Tcj.*5";
      charSequenceArray0[2] = (CharSequence) "$4'Tcj.*5";
      charSequenceArray0[3] = (CharSequence) "";
      charSequenceArray0[4] = (CharSequence) "";
      boolean boolean0 = StringUtils.equalsAnyIgnoreCase("$4'Tcj.*5", charSequenceArray0);
      assertEquals(5, charSequenceArray0.length);
      assertTrue(boolean0);
      
      String string3 = StringUtils.difference("5HNV", "ko ?8?sYQU");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals("ko ?8?sYQU", string3);
      
      String string4 = StringUtils.trimToNull("");
      assertNull(string4);
      
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short) (-2292);
      shortArray0[1] = (short) (-712);
      shortArray0[2] = (short) (-198);
      // Undeclared exception!
      try { 
        StringUtils.join(shortArray0, 'o', (-1470), (-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1470
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test864()  throws Throwable  {
      String string0 = StringUtils.substringAfterLast("", 10);
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.replaceOnce("", "af-_Xu1o~2a", "af-_Xu1o~2a");
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      
      String[] stringArray0 = new String[4];
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      String string2 = StringUtils.replaceEachRepeatedly("", stringArray0, stringArray0);
      assertNotNull(string2);
      assertEquals(4, stringArray0.length);
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertEquals("", string2);
      
      boolean boolean0 = StringUtils.isNumericSpace("");
      assertTrue(boolean0);
      
      String[] stringArray1 = StringUtils.splitByWholeSeparator("af-_Xu1o~2a", "");
      assertNotNull(stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(1, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      String string3 = StringUtils.truncate("qJ{7@Rk,KF", 54);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("qJ{7@Rk,KF", string3);
      
      String string4 = StringUtils.stripToEmpty(stringArray0[0]);
      assertNotNull(string4);
      assertNotSame(stringArray0, stringArray1);
      assertEquals(4, stringArray0.length);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertTrue(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string2));
      assertEquals("", string4);
      
      int int0 = StringUtils.lastIndexOfAny("", stringArray0);
      assertNotSame(stringArray0, stringArray1);
      assertEquals(4, stringArray0.length);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertEquals(0, int0);
      
      String string5 = StringUtils.substringBeforeLast("", "");
      assertNotNull(string5);
      assertTrue(string5.equals((Object)string1));
      assertTrue(string5.equals((Object)string4));
      assertTrue(string5.equals((Object)string2));
      assertTrue(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertEquals("", string5);
      
      int int1 = StringUtils.compareIgnoreCase("", "`NW", true);
      assertFalse(int1 == int0);
      assertEquals((-3), int1);
      
      String[] stringArray2 = StringUtils.splitPreserveAllTokens("af-_Xu1o~2a", "", 54);
      assertNotNull(stringArray2);
      assertNotSame(stringArray2, stringArray0);
      assertNotSame(stringArray2, stringArray1);
      assertEquals(1, stringArray2.length);
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertFalse(stringArray2.equals((Object)stringArray1));
  }

  @Test(timeout = 4000)
  public void test865()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[0] = " vs ";
      String string0 = StringUtils.capitalize(" vs ");
      assertNotNull(string0);
      assertEquals(" vs ", string0);
      
      String string1 = StringUtils.substringBetween(" vs ", " vs ", (String) null);
      assertNull(string1);
  }

  @Test(timeout = 4000)
  public void test866()  throws Throwable  {
      String string0 = StringUtils.leftPad("j", 632, '4');
      assertNotNull(string0);
      assertEqualsj", string0);
      
      boolean boolean0 = StringUtils.containsNone((CharSequence) "j", "j");
      assertFalse(boolean0);
      
      String string1 = StringUtils.strip(" ");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      
      String string2 = StringUtils.trim("...");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("...", string2);
      
      String string3 = StringUtils.LF;
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals("\n", string3);
  }

  @Test(timeout = 4000)
  public void test867()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlphanumericSpace((CharSequence) null);
      assertFalse(boolean0);
      
      String string0 = StringUtils.uncapitalize("*QjPpOCvC>Y0BWtp.");
      assertNotNull(string0);
      assertEquals("*QjPpOCvC>Y0BWtp.", string0);
      
      boolean boolean1 = StringUtils.isAllUpperCase("*QjPpOCvC>Y0BWtp.");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = StringUtils.containsNone((CharSequence) null, (char[]) null);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2);
      
      String string1 = StringUtils.defaultIfEmpty("i{]K!J*83(V?o*G/m", "*QjPpOCvC>Y0BWtp.");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("i{]K!J*83(V?o*G/m", string1);
      
      String string2 = StringUtils.substringAfter("X", "Array and element cannot both be null");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("", string2);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "i{]K!J*83(V?o*G/m", "Wd}]");
      assertEquals(2, int0);
      
      int int1 = StringUtils.indexOfAnyBut((CharSequence) "", (CharSequence) "*QjPpOCvC>Y0BWtp.");
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      boolean boolean3 = StringUtils.isAllLowerCase((CharSequence) null);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3);
  }

  @Test(timeout = 4000)
  public void test868()  throws Throwable  {
      String string0 = StringUtils.remove("#", 'y');
      assertNotNull(string0);
      assertEquals("#", string0);
      
      int int0 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      boolean boolean0 = StringUtils.equalsAnyIgnoreCase("#", charSequenceArray0);
      assertEquals(0, charSequenceArray0.length);
      assertFalse(boolean0);
      
      String string1 = StringUtils.stripToNull("#");
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("#", string1);
      
      String string2 = StringUtils.join((float[]) null, 'y', 48, 2802);
      assertNull(string2);
      
      int int1 = StringUtils.indexOfDifference((CharSequence) "#", (CharSequence) "#");
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      String string3 = StringUtils.remove((String) null, "#");
      assertNull(string3);
  }

  @Test(timeout = 4000)
  public void test869()  throws Throwable  {
      String[] stringArray0 = StringUtils.split(" vs ", "org.apache.commons.lang3.LocaleUtils", (-494));
      assertNotNull(stringArray0);
      assertEquals(2, stringArray0.length);
      
      String string0 = StringUtils.replaceChars("VT76I%Sr''6AGe(yW\"u", '2', 'k');
      assertNotNull(string0);
      assertEquals("VT76I%Sr''6AGe(yW\"u", string0);
      
      String string1 = StringUtils.chop("org.apache.commons.lang3.LocaleUtils");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("org.apache.commons.lang3.LocaleUtil", string1);
      
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains((-494)));
      
      Integer integer0 = new Integer((-494));
      assertNotNull(integer0);
      assertEquals((-494), (int)integer0);
      
      boolean boolean0 = linkedList0.add(integer0);
      assertEquals(1, linkedList0.size());
      assertTrue(boolean0);
      assertTrue(linkedList0.contains(integer0));
      
      Integer integer1 = new Integer(128);
      assertNotNull(integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertEquals(128, (int)integer1);
      
      linkedList0.addLast(integer1);
      assertEquals(2, linkedList0.size());
      assertFalse(integer1.equals((Object)integer0));
      assertTrue(linkedList0.contains(integer0));
      
      Integer integer2 = new Integer((-5909));
      assertNotNull(integer2);
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      assertEquals((-5909), (int)integer2);
      
      linkedList0.addLast(integer2);
      assertEquals(3, linkedList0.size());
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      assertTrue(linkedList0.contains(integer0));
      
      Integer integer3 = linkedList0.pollLast();
      assertNotNull(integer3);
      assertEquals(2, linkedList0.size());
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer1));
      assertEquals((-5909), (int)integer3);
      assertFalse(linkedList0.contains((-5909)));
      assertTrue(linkedList0.contains(integer0));
      
      boolean boolean1 = linkedList0.add(integer0);
      assertEquals(3, linkedList0.size());
      assertFalse(integer0.equals((Object)integer1));
      assertFalse(integer0.equals((Object)integer3));
      assertFalse(integer0.equals((Object)integer2));
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertFalse(linkedList0.contains((-5909)));
      assertTrue(linkedList0.contains(integer0));
      
      Integer integer4 = new Integer((-5909));
      assertNotNull(integer4);
      assertFalse(integer4.equals((Object)integer1));
      assertTrue(integer4.equals((Object)integer3));
      assertTrue(integer4.equals((Object)integer2));
      assertFalse(integer4.equals((Object)integer0));
      assertEquals((-5909), (int)integer4);
      
      boolean boolean2 = linkedList0.add(integer4);
      assertEquals(4, linkedList0.size());
      assertFalse(integer4.equals((Object)integer1));
      assertTrue(integer4.equals((Object)integer3));
      assertTrue(integer4.equals((Object)integer2));
      assertFalse(integer4.equals((Object)integer0));
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2);
      assertTrue(linkedList0.contains(integer0));
      
      Iterator<Integer> iterator0 = linkedList0.descendingIterator();
      assertNotNull(iterator0);
      assertEquals(4, linkedList0.size());
      assertTrue(linkedList0.contains(integer0));
      
      String string2 = StringUtils.join(iterator0, "VT76I%Sr''6AGe(yW\"u");
      assertNotNull(string2);
      assertEquals(4, linkedList0.size());
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("-5909VT76I%Sr''6AGe(yW\"u-494VT76I%Sr''6AGe(yW\"u128VT76I%Sr''6AGe(yW\"u-494", string2);
      assertTrue(linkedList0.contains(integer0));
      
      String string3 = StringUtils.right("xY*^g", (-4128));
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals("", string3);
      
      String string4 = StringUtils.removeStart((String) null, "/B&-wdPd)C!");
      assertNull(string4);
      
      String string5 = StringUtils.wrapIfMissing("Rr9rz.Ukuw<#xx9GUR", 'P');
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertEquals("PRr9rz.Ukuw<#xx9GURP", string5);
      
      int int0 = StringUtils.indexOfDifference((CharSequence[]) stringArray0);
      assertEquals(2, stringArray0.length);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test870()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "US.^e:o_ufGpA";
      String[] stringArray1 = StringUtils.stripAll(stringArray0);
      assertNotNull(stringArray1);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(1, stringArray0.length);
      assertEquals(1, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      boolean boolean0 = StringUtils.isWhitespace("US.^e:o_ufGpA");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.equals((CharSequence) "US.^e:o_ufGpA", (CharSequence) "US.^e:o_ufGpA");
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test871()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[10];
      charSequenceArray0[5] = (CharSequence) "E2*1.s*OqQHFD&gQd9O";
      boolean boolean0 = StringUtils.equalsAnyIgnoreCase("E2*1.s*OqQHFD&gQd9O", charSequenceArray0);
      assertEquals(10, charSequenceArray0.length);
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        StringUtils.getLevenshteinDistance(charSequenceArray0[1], (CharSequence) "E2*1.s*OqQHFD&gQd9O", 372);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test872()  throws Throwable  {
      String string0 = StringUtils.stripToNull(" vs ");
      assertNotNull(string0);
      assertEquals("vs", string0);
      
      boolean boolean0 = StringUtils.isAlphanumericSpace("vs");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test873()  throws Throwable  {
      String string0 = StringUtils.wrapIfMissing("/h81Uu", '7');
      assertNotNull(string0);
      assertEquals("7/h81Uu7", string0);
      
      String string1 = StringUtils.abbreviateMiddle("null/empty items", (String) null, 18);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("null/empty items", string1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      charSequenceArray0[0] = (CharSequence) null;
      boolean boolean0 = StringUtils.equalsAnyIgnoreCase("7/h81Uu\u0007", charSequenceArray0);
      assertEquals(1, charSequenceArray0.length);
      assertFalse(boolean0);
      
      String string2 = StringUtils.difference((String) null, "`.ci");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("`.ci", string2);
      
      String string3 = StringUtils.trimToNull("java.lang.Object@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.Object@50d3e7ejava.lang.Object@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.Object@50d3e7e");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short)2743;
      shortArray0[2] = (short) (-7);
      shortArray0[3] = (short)19;
      String string4 = StringUtils.join(shortArray0, 'n', (int) (short)19, 13);
      assertNotNull(string4);
      assertEquals(4, shortArray0.length);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertEquals("", string4);
      assertArrayEquals(new short[] {(short)0, (short)2743, (short) (-7), (short)19}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test874()  throws Throwable  {
      String string0 = StringUtils.wrap("7SsFtq6y,>o", 'u');
      assertNotNull(string0);
      assertEquals("u7SsFtq6y,>ou", string0);
      
      int int0 = StringUtils.countMatches((CharSequence) "", (CharSequence) "u7SsFtq6y,>ou");
      assertEquals(0, int0);
      
      String string1 = StringUtils.center("7SsFtq6y,>o", 0);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("7SsFtq6y,>o", string1);
      
      int int1 = StringUtils.indexOfIgnoreCase((CharSequence) "u7SsFtq6y,>ou", (CharSequence) "", 32);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test875()  throws Throwable  {
      String string0 = StringUtils.trimToNull("{}");
      assertNotNull(string0);
      assertEquals("{}", string0);
  }

  @Test(timeout = 4000)
  public void test876()  throws Throwable  {
      String string0 = StringUtils.substringBetween("ClP>2# gfkKWB@vC", "ClP>2# gfkKWB@vC", "O*}V{J=HV)l)@p<MK@2");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test877()  throws Throwable  {
      boolean boolean0 = StringUtils.isEmpty("");
      assertTrue(boolean0);
      
      String[] stringArray0 = StringUtils.stripAll((String[]) null);
      assertNull(stringArray0);
      
      boolean boolean1 = StringUtils.containsAnyIgnoreCase("", (CharSequence[]) null);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string0 = StringUtils.chop("$e'Wz#<'UP]a:_");
      assertNotNull(string0);
      assertEquals("$e'Wz#<'UP]a:", string0);
      
      boolean boolean2 = StringUtils.isWhitespace("$e'Wz#<'UP]a:");
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
      
      int int0 = StringUtils.lastIndexOfAny("", (CharSequence[]) null);
      assertEquals((-1), int0);
      
      boolean boolean3 = StringUtils.isBlank("$e'Wz#<'UP]a:");
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3);
  }

  @Test(timeout = 4000)
  public void test878()  throws Throwable  {
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) "";
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[1] = object0;
      objectArray0[2] = (Object) "";
      objectArray0[3] = (Object) "";
      String string0 = StringUtils.replaceOnce((String) null, (String) null, (String) null);
      assertNull(string0);
      
      String string1 = StringUtils.right("", 16);
      assertNotNull(string1);
      assertEquals("", string1);
      
      byte[] byteArray0 = StringUtils.getBytes((String) null, (String) null);
      assertNotNull(byteArray0);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      String string2 = StringUtils.leftPad((String) null, (-1472), '*');
      assertNull(string2);
      
      String string3 = StringUtils.remove("", "");
      assertNotNull(string3);
      assertTrue(string3.equals((Object)string1));
      assertEquals("", string3);
      
      String string4 = StringUtils.remove("", '*');
      assertNotNull(string4);
      assertTrue(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string3));
      assertEquals("", string4);
      
      String string5 = StringUtils.difference("Asrswe==p5@L+jAsrswe==p5@L+jAsrswe==p5@L+jAsrswe==p5@L+j", "[lAeI");
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertEquals("[lAeI", string5);
      
      String string6 = StringUtils.removeAll((String) null, "[lAeI");
      assertNull(string6);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "", (CharSequence) "");
      assertEquals(0, int0);
      
      String string7 = StringUtils.unwrap("", "z(5bTWz`G");
      assertNotNull(string7);
      assertTrue(string7.equals((Object)string1));
      assertTrue(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string5));
      assertTrue(string7.equals((Object)string3));
      assertEquals("", string7);
  }

  @Test(timeout = 4000)
  public void test879()  throws Throwable  {
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) "";
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[1] = object0;
      objectArray0[2] = (Object) "";
      objectArray0[3] = (Object) "";
      objectArray0[4] = (Object) "";
      String string0 = StringUtils.joinWith("", objectArray0);
      assertNotNull(string0);
      assertEquals(5, objectArray0.length);
      
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      charSequenceArray0[0] = (CharSequence) "java.lang.Object@24216afb";
      boolean boolean0 = StringUtils.equalsAnyIgnoreCase("java.lang.Object@24216afb", charSequenceArray0);
      assertEquals(1, charSequenceArray0.length);
      assertTrue(boolean0);
      
      String string1 = StringUtils.replaceOnce((String) null, (String) null, (String) null);
      assertNull(string1);
      
      String string2 = StringUtils.right("", 16);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertEquals("", string2);
      
      String string3 = StringUtils.difference("java.lang.Object@24216afb", (String) null);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      
      byte[] byteArray0 = StringUtils.getBytes((String) null, (String) null);
      assertNotNull(byteArray0);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      String string4 = StringUtils.leftPad((String) null, (-1472), '*');
      assertNull(string4);
      
      String string5 = StringUtils.remove("", "");
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string0));
      assertTrue(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertEquals("", string5);
      
      int int0 = StringUtils.countMatches((CharSequence) "", (CharSequence) "java.lang.Object@24216afb");
      assertEquals(0, int0);
      
      String string6 = StringUtils.remove("", '*');
      assertNotNull(string6);
      assertTrue(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string0));
      assertTrue(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string3));
      assertEquals("", string6);
      
      String string7 = StringUtils.substringBetween("", "Aborting to protect against StackOverflowError - output of one loop is the input of another", (String) null);
      assertNull(string7);
      
      boolean boolean1 = StringUtils.containsNone((CharSequence) null, ";6FZP2*");
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String string8 = StringUtils.strip("java.lang.Object@24216afb");
      assertNotNull(string8);
      assertFalse(string8.equals((Object)string6));
      assertTrue(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string5));
      
      String string9 = StringUtils.stripToEmpty("");
      assertNotNull(string9);
      assertTrue(string9.equals((Object)string2));
      assertTrue(string9.equals((Object)string5));
      assertFalse(string9.equals((Object)string3));
      assertFalse(string9.equals((Object)string0));
      assertTrue(string9.equals((Object)string6));
      assertFalse(string9.equals((Object)string8));
      assertEquals("", string9);
      
      String[] stringArray0 = new String[0];
      String[] stringArray1 = StringUtils.stripAll(stringArray0);
      assertNotNull(stringArray1);
      assertSame(stringArray0, stringArray1);
      assertSame(stringArray1, stringArray0);
      assertEquals(0, stringArray0.length);
      assertEquals(0, stringArray1.length);
      
      int int1 = StringUtils.compareIgnoreCase("", "", true);
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      
      String string10 = StringUtils.trim("N%R3!y(qGjIp2");
      assertNotNull(string10);
      assertFalse(string10.equals((Object)string2));
      assertFalse(string10.equals((Object)string0));
      assertFalse(string10.equals((Object)string8));
      assertFalse(string10.equals((Object)string6));
      assertFalse(string10.equals((Object)string9));
      assertFalse(string10.equals((Object)string3));
      assertFalse(string10.equals((Object)string5));
      assertEquals("N%R3!y(qGjIp2", string10);
  }

  @Test(timeout = 4000)
  public void test880()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) '}';
      String string0 = StringUtils.join(doubleArray0, '}', 16, (-494));
      assertNotNull(string0);
      assertEquals(1, doubleArray0.length);
      assertEquals("", string0);
      assertArrayEquals(new double[] {125.0}, doubleArray0, 0.01);
      
      boolean boolean0 = StringUtils.isNumericSpace("");
      assertTrue(boolean0);
      
      int int0 = StringUtils.length("");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test881()  throws Throwable  {
      String string0 = StringUtils.abbreviateMiddle(" s ", (String) null, 1555);
      assertNotNull(string0);
      assertEquals(" s ", string0);
      
      String string1 = StringUtils.normalizeSpace("p{InCombiningDiacriticalMarks}+");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("p{InCombiningDiacriticalMarks}+", string1);
      
      String string2 = "gDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgD";
      String string3 = StringUtils.stripEnd("gDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgD", " s ");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals("gDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgDgD", string3);
      
      String string4 = StringUtils.mid("jST,=", 1555, 1555);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertEquals("", string4);
      
      try { 
        StringUtils.getBytes(" in an array of ", " s ");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(UnsupportedEncodingException e) {
      }
  }

  @Test(timeout = 4000)
  public void test882()  throws Throwable  {
      String string0 = StringUtils.LF;
      assertNotNull(string0);
      assertEquals("\n", string0);
      
      boolean boolean0 = StringUtils.equalsIgnoreCase("\n", "\n");
      assertTrue(boolean0);
      
      String string1 = StringUtils.chop("\n");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      
      String string2 = StringUtils.leftPad("r2", (int) '[', '[');
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[r2", string2);
      
      String string3 = StringUtils.rightPad("Wd|}51/]/&`bsA", 1003, "Wd|}51/]/&`bsA");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      
      String string4 = StringUtils.join((double[]) null, '+', (int) '[', (int) '[');
      assertNull(string4);
      
      String string5 = StringUtils.removeFirst((String) null, "");
      assertNull(string5);
      
      String string6 = StringUtils.trim("@uU/N%ngLD");
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string1));
      assertEquals("@uU/N%ngLD", string6);
      
      ArrayDeque<Integer> arrayDeque0 = new ArrayDeque<Integer>();
      assertNotNull(arrayDeque0);
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      assertFalse(arrayDeque0.contains(1003));
      
      ArrayDeque<Integer> arrayDeque1 = new ArrayDeque<Integer>();
      assertNotNull(arrayDeque1);
      assertTrue(arrayDeque1.isEmpty());
      assertEquals(0, arrayDeque1.size());
      assertFalse(arrayDeque1.equals((Object)arrayDeque0));
      assertFalse(arrayDeque1.contains(1003));
      
      Iterator<Integer> iterator0 = arrayDeque1.descendingIterator();
      assertNotNull(iterator0);
      assertNotSame(arrayDeque1, arrayDeque0);
      assertTrue(arrayDeque1.isEmpty());
      assertEquals(0, arrayDeque1.size());
      assertFalse(arrayDeque1.equals((Object)arrayDeque0));
      assertFalse(arrayDeque1.contains(1003));
      
      String string7 = StringUtils.join(iterator0, "\n");
      assertNotNull(string7);
      assertNotSame(arrayDeque1, arrayDeque0);
      assertTrue(arrayDeque1.isEmpty());
      assertEquals(0, arrayDeque1.size());
      assertFalse(arrayDeque1.equals((Object)arrayDeque0));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string3));
      assertEquals("", string7);
      assertFalse(arrayDeque1.contains(1003));
      
      String string8 = StringUtils.substringAfter("urk%oxHWA%0", ">L");
      assertNotNull(string8);
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string3));
      assertEquals("", string8);
  }

  @Test(timeout = 4000)
  public void test883()  throws Throwable  {
      int[] intArray0 = new int[0];
      String string0 = StringUtils.join(intArray0, '}');
      assertNotNull(string0);
      assertEquals(0, intArray0.length);
      assertEquals("", string0);
      assertArrayEquals(new int[] {}, intArray0);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "", (-2179), 1565);
      assertEquals((-1), int0);
      
      String string1 = StringUtils.unwrap("", '}');
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      
      boolean boolean0 = StringUtils.containsNone((CharSequence) "", "");
      assertTrue(boolean0);
      
      String string2 = StringUtils.substringAfter("", 97);
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertEquals("", string2);
      
      String string3 = StringUtils.removeEnd("", "");
      assertNotNull(string3);
      assertTrue(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string0));
      assertEquals("", string3);
      
      boolean boolean1 = StringUtils.containsWhitespace("");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      // Undeclared exception!
      try { 
        StringUtils.join(intArray0, 'S', (-1), 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test884()  throws Throwable  {
      String string0 = StringUtils.remove("Bcu;RN#b]p!p", 'L');
      assertNotNull(string0);
      assertEquals("Bcu;RN#b]p!p", string0);
      
      String string1 = StringUtils.substringBetween("O*}V{J=HV)l)@p<MK@2", "ClP>2# gfkKWB@vC", (String) null);
      assertNull(string1);
      
      boolean boolean0 = StringUtils.containsNone((CharSequence) "org.apache.commons.lang3.CharSequenceUtils", "Aborting to protect against StackOverflowError - output of one loop is the input of another");
      assertFalse(boolean0);
      
      String string2 = StringUtils.strip((String) null);
      assertNull(string2);
      
      String string3 = StringUtils.stripToEmpty("Strings must not be null");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertEquals("Strings must not be null", string3);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "Strings must not be null";
      String[] stringArray1 = StringUtils.split("Strings must not be null", (String) null);
      assertNotNull(stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(5, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      int int0 = StringUtils.compareIgnoreCase("l", "Bcu;RN#b]p!p", false);
      assertEquals(10, int0);
      
      String string4 = StringUtils.trim("org.apache.commons.lang3.CharSequenceUtils");
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertEquals("org.apache.commons.lang3.CharSequenceUtils", string4);
      
      boolean boolean1 = StringUtils.endsWithAny("ClP>2# gfkKWB@vC", stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(5, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string5 = StringUtils.abbreviateMiddle("dydX?z+t\">?3", "Bcu;RN#b]p!p", 1908);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertEquals("dydX?z+t\">?3", string5);
      
      int int1 = StringUtils.indexOfAny((CharSequence) "l", "P.s-M4>Vv<~gG y");
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test885()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = 16;
      intArray0[1] = 52;
      intArray0[2] = (-2935);
      intArray0[3] = (-2935);
      intArray0[4] = 2124;
      intArray0[5] = 987;
      String string0 = StringUtils.join(intArray0, 'S');
      assertNotNull(string0);
      assertEquals(6, intArray0.length);
      assertEquals("16S52S-2935S-2935S2124S987", string0);
      assertArrayEquals(new int[] {16, 52, (-2935), (-2935), 2124, 987}, intArray0);
      
      boolean boolean0 = StringUtils.endsWithIgnoreCase("16S52S-2935S-2935S2124S987", "16S52S-2935S-2935S2124S987");
      assertTrue(boolean0);
      
      double double0 = StringUtils.getJaroWinklerDistance("16S52S-2935S-2935S2124S987", "16S52S-2935S-2935S2124S987");
      assertEquals(1.0, double0, 0.01);
      
      CharSequence[] charSequenceArray0 = new CharSequence[7];
      charSequenceArray0[0] = (CharSequence) "16S52S-2935S-2935S2124S987";
      charSequenceArray0[1] = (CharSequence) "16S52S-2935S-2935S2124S987";
      charSequenceArray0[2] = (CharSequence) "16S52S-2935S-2935S2124S987";
      charSequenceArray0[3] = (CharSequence) "16S52S-2935S-2935S2124S987";
      charSequenceArray0[4] = (CharSequence) "16S52S-2935S-2935S2124S987";
      charSequenceArray0[5] = (CharSequence) "16S52S-2935S-2935S2124S987";
      charSequenceArray0[6] = (CharSequence) "16S52S-2935S-2935S2124S987";
      boolean boolean1 = StringUtils.equalsAny("16S52S-2935S-2935S2124S987", charSequenceArray0);
      assertEquals(7, charSequenceArray0.length);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      boolean boolean2 = StringUtils.isNumeric(charSequenceArray0[4]);
      assertEquals(7, charSequenceArray0.length);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
      
      String string1 = StringUtils.replaceChars("Od", "AFzX^[qo^$`=<Sy6gh", "AFzX^[qo^$`=<Sy6gh");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("Od", string1);
  }

  @Test(timeout = 4000)
  public void test886()  throws Throwable  {
      String string0 = StringUtils.left("5|5pGW#urA~r?~3", (-494));
      assertNotNull(string0);
      assertEquals("", string0);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens((String) null, 'u');
      assertNull(stringArray0);
      
      StringUtils stringUtils0 = new StringUtils();
      assertNotNull(stringUtils0);
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      
      long[] longArray0 = new long[6];
      longArray0[0] = (long) (-494);
      longArray0[1] = (long) (-1);
      longArray0[2] = (long) 'u';
      longArray0[3] = (long) 'u';
      longArray0[4] = (long) 'u';
      longArray0[5] = (long) (-494);
      String string1 = StringUtils.join(longArray0, 'u');
      assertNotNull(string1);
      assertEquals(6, longArray0.length);
      assertFalse(string1.equals((Object)string0));
      assertEquals("-494u-1u117u117u117u-494", string1);
      assertArrayEquals(new long[] {(-494L), (-1L), 117L, 117L, 117L, (-494L)}, longArray0);
      
      String[] stringArray1 = StringUtils.splitPreserveAllTokens(" ", (String) null, (-494));
      assertNotNull(stringArray1);
      assertEquals(2, stringArray1.length);
      
      String[] stringArray2 = StringUtils.splitPreserveAllTokens("5|5pGW#urA~r?~3", "Strings must not be null");
      assertNotNull(stringArray2);
      assertNotSame(stringArray2, stringArray1);
      assertEquals(4, stringArray2.length);
      assertFalse(stringArray2.equals((Object)stringArray1));
      
      String string2 = StringUtils.normalizeSpace((String) null);
      assertNull(string2);
      
      boolean boolean0 = StringUtils.isNoneBlank((CharSequence[]) null);
      assertTrue(boolean0);
      
      String string3 = StringUtils.capitalize(" ");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals(" ", string3);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "Strings must not be null", (CharSequence) "");
      assertEquals(24, int0);
  }

  @Test(timeout = 4000)
  public void test887()  throws Throwable  {
      String string0 = StringUtils.substringAfterLast("", 10);
      assertNotNull(string0);
      assertEquals("", string0);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "", "");
      assertEquals((-1), int0);
      
      String string1 = StringUtils.replaceOnce("", "af-_Xu1o~2a", "af-_Xu1o~2a");
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      String string2 = StringUtils.replaceEachRepeatedly("", stringArray0, stringArray0);
      assertNotNull(string2);
      assertEquals(4, stringArray0.length);
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertEquals("", string2);
      
      boolean boolean0 = StringUtils.isNumericSpace("");
      assertTrue(boolean0);
      
      String[] stringArray1 = StringUtils.splitByWholeSeparator("af-_Xu1o~2a", "");
      assertNotNull(stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(1, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      String string3 = "";
      String string4 = StringUtils.leftPad("", 2312, '[');
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      
      String string5 = StringUtils.rightPad("", (-1), string4);
      assertNotNull(string5);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertTrue(string5.equals((Object)string2));
      assertTrue(string5.equals((Object)string0));
      assertTrue(string5.equals((Object)string1));
      assertTrue(string5.equals((Object)string3));
      assertEquals("", string5);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = (double) (-1);
      // Undeclared exception!
      try { 
        StringUtils.join(doubleArray0, 'u', (-173), 10);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -173
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test888()  throws Throwable  {
      String string0 = StringUtils.remove("#r", 'y');
      assertNotNull(string0);
      assertEquals("#r", string0);
      
      int int0 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'y';
      boolean boolean0 = StringUtils.containsNone((CharSequence) null, charArray0);
      assertEquals(1, charArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new char[] {'y'}, charArray0);
      
      boolean boolean1 = StringUtils.isEmpty("#r");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string1 = StringUtils.leftPad("#r", 1105, 'Z');
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      boolean boolean2 = StringUtils.isAlphaSpace("wDPtb=E*0D +");
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
      
      String string2 = StringUtils.join((int[]) null, '0', 322, 74);
      assertNull(string2);
      
      int int1 = StringUtils.lastOrdinalIndexOf("wDPtb=E*0D +", (CharSequence) null, (-203));
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "wDPtb=E*0D +";
      String string3 = StringUtils.getCommonPrefix(stringArray0);
      assertNotNull(string3);
      assertEquals(1, stringArray0.length);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("wDPtb=E*0D +", string3);
      
      boolean boolean3 = StringUtils.isAlphanumeric("#r");
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3);
  }

  @Test(timeout = 4000)
  public void test889()  throws Throwable  {
      String string0 = StringUtils.difference("ko ?8?sYQU", "Cloneable type ");
      assertNotNull(string0);
      assertEquals("Cloneable type ", string0);
      
      String string1 = StringUtils.trimToNull("vW");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("vW", string1);
      
      boolean boolean0 = StringUtils.isAlpha("vW");
      assertTrue(boolean0);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "Cloneable type ", (CharSequence) "Cloneable type ");
      assertEquals(0, int0);
      
      String string2 = StringUtils.leftPad("vW", (int) (byte)17, 'A');
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("AAAAAAAAAAAAAAAvW", string2);
      
      boolean boolean1 = StringUtils.isAlphaSpace("Cloneable type ");
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[9];
      charSequenceArray0[0] = (CharSequence) "Cloneable type ";
      charSequenceArray0[1] = (CharSequence) "AAAAAAAAAAAAAAAvW";
      charSequenceArray0[2] = (CharSequence) "ko ?8?sYQU";
      charSequenceArray0[3] = (CharSequence) "Cloneable type ";
      charSequenceArray0[4] = (CharSequence) "vW";
      charSequenceArray0[5] = (CharSequence) "Cloneable type ";
      charSequenceArray0[6] = (CharSequence) "vW";
      charSequenceArray0[7] = (CharSequence) "vW";
      charSequenceArray0[8] = (CharSequence) "Cloneable type ";
      boolean boolean2 = StringUtils.isAllEmpty(charSequenceArray0);
      assertEquals(9, charSequenceArray0.length);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
      
      String string3 = StringUtils.prependIfMissingIgnoreCase("Index: ", "Cloneable type ", charSequenceArray0);
      assertNotNull(string3);
      assertEquals(9, charSequenceArray0.length);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals("Cloneable type Index: ", string3);
      
      String string4 = StringUtils.remove("ko ?8?sYQU", 'x');
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertEquals("ko ?8?sYQU", string4);
  }

  @Test(timeout = 4000)
  public void test890()  throws Throwable  {
      String string0 = StringUtils.defaultString("Rx-^~ *MdI1V9n~-N98");
      assertNotNull(string0);
      assertEquals("Rx-^~ *MdI1V9n~-N98", string0);
      
      char[] charArray0 = new char[2];
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("Rx-^~ *MdI1V9n~-N98");
      assertNotNull(stringArray0);
      assertEquals(2, stringArray0.length);
      
      charArray0[0] = '-';
      charArray0[1] = '-';
      String string1 = StringUtils.valueOf(charArray0);
      assertNotNull(string1);
      assertEquals(2, charArray0.length);
      assertFalse(string1.equals((Object)string0));
      assertEquals("--", string1);
      assertArrayEquals(new char[] {'-', '-'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test891()  throws Throwable  {
      String string0 = null;
      String[] stringArray0 = StringUtils.splitByWholeSeparator("<KLi~K@u]SG", (String) null, 0);
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      boolean boolean0 = StringUtils.isAlpha((CharSequence) null);
      assertFalse(boolean0);
      
      String string1 = StringUtils.substringAfter((String) null, 0);
      assertNull(string1);
      
      int[] intArray0 = new int[6];
      intArray0[0] = 0;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[5] = 0;
      int int0 = 100;
      // Undeclared exception!
      try { 
        StringUtils.join(intArray0, 'C', 0, 100);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 6
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test892()  throws Throwable  {
      String string0 = StringUtils.strip("2+tg");
      assertNotNull(string0);
      assertEquals("2+tg", string0);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "2+tg", 0, 0);
      assertEquals((-1), int0);
      
      int[] intArray0 = new int[1];
      intArray0[0] = (-1);
      // Undeclared exception!
      try { 
        StringUtils.join(intArray0, ']', 1502, 1698);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1502
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test893()  throws Throwable  {
      String string0 = StringUtils.normalizeSpace("nFU)@y~JLh");
      assertNotNull(string0);
      assertEquals("nFU)@y~JLh", string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      boolean boolean0 = StringUtils.isNoneBlank(charSequenceArray0);
      assertEquals(0, charSequenceArray0.length);
      assertTrue(boolean0);
      
      String string1 = StringUtils.capitalize("");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      
      double double0 = StringUtils.getJaroWinklerDistance("nFU)@y~JLh", "");
      assertEquals(0.0, double0, 0.01);
      
      boolean boolean1 = StringUtils.isAlpha("");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test894()  throws Throwable  {
      String string0 = StringUtils.abbreviateMiddle("u=]@|On8X7H27[2Or", "{}", (-1725));
      assertNotNull(string0);
      assertEquals("u=]@|On8X7H27[2Or", string0);
      
      Class<Object> class0 = Object.class;
      ServiceLoader<Object> serviceLoader0 = ServiceLoader.loadInstalled(class0);
      assertNotNull(serviceLoader0);
      assertEquals("java.util.ServiceLoader[java.lang.Object]", serviceLoader0.toString());
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ClassLoader classLoader1 = classLoader0.getParent();
      assertNotNull(classLoader1);
      assertFalse(classLoader1.equals((Object)classLoader0));
      
      String[] stringArray0 = StringUtils.splitByWholeSeparator(".M,KjXgwysMU,", "u=]@|On8X7H27[2Or", 440);
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      // Undeclared exception!
      try { 
        StringUtils.abbreviate(".M,KjXgwysMU,", 3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum abbreviation width is 4
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test895()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      assertNotNull(stringWriter0);
      assertEquals("", stringWriter0.toString());
      
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      assertNotNull(stringBuffer0);
      assertEquals("", stringWriter0.toString());
      assertEquals(0, stringBuffer0.length());
      assertEquals("", stringBuffer0.toString());
      
      int int0 = StringUtils.lastIndexOf((CharSequence) stringBuffer0, Integer.MAX_VALUE);
      assertEquals("", stringWriter0.toString());
      assertEquals(0, stringBuffer0.length());
      assertEquals("", stringBuffer0.toString());
      assertEquals((-1), int0);
      
      String string0 = StringUtils.trimToEmpty("Object varargs must Yot be null");
      assertNotNull(string0);
      assertEquals("Object varargs must Yot be null", string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[6];
      String string1 = StringUtils.abbreviateMiddle("}Tf", "Minimum abbreviation width is %dMinimum abbreviation width is %d", 8192);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("}Tf", string1);
      
      Class<Object> class0 = Object.class;
      ServiceLoader<Object> serviceLoader0 = ServiceLoader.loadInstalled(class0);
      assertNotNull(serviceLoader0);
      assertEquals("java.util.ServiceLoader[java.lang.Object]", serviceLoader0.toString());
      
      Class<CharBuffer> class1 = CharBuffer.class;
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ClassLoader classLoader1 = classLoader0.getParent();
      assertNotNull(classLoader1);
      assertFalse(classLoader1.equals((Object)classLoader0));
      
      ServiceLoader<CharBuffer> serviceLoader1 = ServiceLoader.load(class1, classLoader1);
      assertNotNull(serviceLoader1);
      assertEquals("java.util.ServiceLoader[java.nio.CharBuffer]", serviceLoader1.toString());
      assertFalse(classLoader0.equals((Object)classLoader1));
      assertFalse(classLoader1.equals((Object)classLoader0));
      
      String string2 = StringUtils.join((Iterable<?>) serviceLoader1, 'A');
      assertNotNull(string2);
      assertEquals("java.util.ServiceLoader[java.nio.CharBuffer]", serviceLoader1.toString());
      assertFalse(classLoader0.equals((Object)classLoader1));
      assertFalse(classLoader1.equals((Object)classLoader0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("", string2);
      
      String string3 = StringUtils.joinWith("}Tf", charSequenceArray0);
      assertNotNull(string3);
      assertEquals(6, charSequenceArray0.length);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("}Tf}Tf}Tf}Tf}Tf", string3);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparator("org.apache.commons.lang3.LocaleUtils", "}Tf", 160);
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      Locale locale0 = Locale.ITALIAN;
      assertNotNull(locale0);
      assertEquals("", locale0.getCountry());
      assertEquals("it", locale0.toString());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      
      Locale locale1 = Locale.CHINA;
      assertNotNull(locale1);
      assertNotSame(locale1, locale0);
      assertEquals("CHN", locale1.getISO3Country());
      assertEquals("zho", locale1.getISO3Language());
      assertEquals("zh_CN", locale1.toString());
      assertEquals("zh", locale1.getLanguage());
      assertEquals("CN", locale1.getCountry());
      assertEquals("", locale1.getVariant());
      assertFalse(locale1.equals((Object)locale0));
      
      Locale locale2 = Locale.FRANCE;
      assertNotNull(locale2);
      assertNotSame(locale2, locale1);
      assertNotSame(locale2, locale0);
      assertEquals("FRA", locale2.getISO3Country());
      assertEquals("fr_FR", locale2.toString());
      assertEquals("fra", locale2.getISO3Language());
      assertEquals("FR", locale2.getCountry());
      assertEquals("fr", locale2.getLanguage());
      assertEquals("", locale2.getVariant());
      assertFalse(locale2.equals((Object)locale1));
      assertFalse(locale2.equals((Object)locale0));
      
      String string4 = locale1.getDisplayName(locale2);
      assertNotNull(string4);
      assertNotSame(locale1, locale0);
      assertNotSame(locale1, locale2);
      assertNotSame(locale2, locale1);
      assertNotSame(locale2, locale0);
      assertEquals("CHN", locale1.getISO3Country());
      assertEquals("zho", locale1.getISO3Language());
      assertEquals("zh_CN", locale1.toString());
      assertEquals("zh", locale1.getLanguage());
      assertEquals("CN", locale1.getCountry());
      assertEquals("", locale1.getVariant());
      assertEquals("FRA", locale2.getISO3Country());
      assertEquals("fr_FR", locale2.toString());
      assertEquals("fra", locale2.getISO3Language());
      assertEquals("FR", locale2.getCountry());
      assertEquals("fr", locale2.getLanguage());
      assertEquals("", locale2.getVariant());
      assertFalse(locale1.equals((Object)locale0));
      assertFalse(locale1.equals((Object)locale2));
      assertFalse(locale2.equals((Object)locale1));
      assertFalse(locale2.equals((Object)locale0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertEquals("chinois (Chine)", string4);
      
      String string5 = StringUtils.join((int[]) null, 'S');
      assertNull(string5);
      
      boolean boolean0 = StringUtils.isAlpha("Object varargs must Yot be null");
      assertFalse(boolean0);
      
      int int1 = StringUtils.getLevenshteinDistance((CharSequence) "", (CharSequence) "Object varargs must Yot be null");
      assertFalse(int1 == int0);
      assertEquals(31, int1);
  }

  @Test(timeout = 4000)
  public void test896()  throws Throwable  {
      String string0 = StringUtils.substringAfter("", 13);
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.normalizeSpace(".&_41/mj|y5cD|N|");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals(".&_41/mj|y5cD|N|", string1);
      
      String string2 = StringUtils.truncate("", 964, 35);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertEquals("", string2);
      
      // Undeclared exception!
      try { 
        StringUtils.abbreviate("I*r8s^')4Q!", (-2587), (-1538));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum abbreviation width is 4
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test897()  throws Throwable  {
      String string0 = null;
      String[] stringArray0 = StringUtils.splitByWholeSeparator("<KLi~K@u]SG", (String) null, 0);
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      boolean boolean0 = StringUtils.isAlpha((CharSequence) null);
      assertFalse(boolean0);
      
      String string1 = StringUtils.substringAfter((String) null, 0);
      assertNull(string1);
      
      int[] intArray0 = new int[6];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 0;
      intArray0[5] = 0;
      char char0 = 'C';
      // Undeclared exception!
      try { 
        StringUtils.join(intArray0, 'C', 0, 100);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 6
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test898()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("java.lang.Object@52b769b5java.lang.Object@1d3febfajava.lang.Object@4c16c3aejava.lang.Object@4a32f5f1java.lang.Object@23a1c7c3java.lang.Object@52b769b5java.lang.Object@1d3febfajava.lang.Object@4c16c3aejava.lang.Object@4a32f5f1java.lang.Object@23a1c7c3", "Bp3L%,{BOlI\"_", 357);
      assertNotNull(stringArray0);
      assertEquals(31, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test899()  throws Throwable  {
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "", "]k <mxJ#z");
      assertTrue(boolean0);
      
      float[] floatArray0 = new float[3];
      floatArray0[1] = 0.0F;
      floatArray0[2] = 0.0F;
      String string0 = StringUtils.join(floatArray0, ' ', 2122, 321);
      assertNotNull(string0);
      assertEquals(3, floatArray0.length);
      assertEquals("", string0);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test900()  throws Throwable  {
      String[] stringArray0 = StringUtils.split("_$iQ%8]eU}[aS_J", "_$iQ%8]eU}[aS_J");
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      
      String string0 = StringUtils.left("_$iQ%8]eU}[aS_J", 1067);
      assertNotNull(string0);
      assertEquals("_$iQ%8]eU}[aS_J", string0);
      
      String string1 = StringUtils.rightPad("_$iQ%8]eU}[aS_J", 1067);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      int int0 = StringUtils.lastIndexOfAny("_$iQ%8]eU}[aS_J", stringArray0);
      assertEquals(0, stringArray0.length);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test901()  throws Throwable  {
      String string0 = StringUtils.replaceOnceIgnoreCase("", "", "");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.removeAll("1929.5278794Y3", (String) null);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("1929.5278794Y3", string1);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "1929.5278794Y3", (CharSequence) "");
      assertEquals(0, int0);
      
      String[] stringArray0 = new String[0];
      String string2 = StringUtils.replaceEachRepeatedly("UxIv(.*+Rm_H7i^", stringArray0, stringArray0);
      assertNotNull(string2);
      assertEquals(0, stringArray0.length);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("UxIv(.*+Rm_H7i^", string2);
      
      boolean boolean0 = StringUtils.equalsAny("1929.5278794Y3", stringArray0);
      assertEquals(0, stringArray0.length);
      assertFalse(boolean0);
      
      String string3 = StringUtils.uncapitalize("UxIv(.*+Rm_H7i^");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals("uxIv(.*+Rm_H7i^", string3);
  }

  @Test(timeout = 4000)
  public void test902()  throws Throwable  {
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) 'o';
      floatArray0[1] = (float) 'q';
      floatArray0[2] = (float) 'o';
      floatArray0[3] = (float) 'q';
      floatArray0[4] = (float) 'o';
      String string0 = StringUtils.join(floatArray0, ' ');
      assertNotNull(string0);
      assertEquals(5, floatArray0.length);
      assertEquals("111.0 113.0 111.0 113.0 111.0", string0);
      assertArrayEquals(new float[] {111.0F, 113.0F, 111.0F, 113.0F, 111.0F}, floatArray0, 0.01F);
      
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "111.0 113.0 111.0 113.0 111.0", (CharSequence) "111.0 113.0 111.0 113.0 111.0");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test903()  throws Throwable  {
      String[] stringArray0 = StringUtils.split("7", "l{~_");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = (-1708.443F);
      floatArray0[1] = 1.0F;
      floatArray0[2] = 1.0F;
      floatArray0[3] = 0.0F;
      floatArray0[4] = 0.0F;
      String string0 = StringUtils.join(floatArray0, 'U', (-77), (-77));
      assertNotNull(string0);
      assertEquals(5, floatArray0.length);
      assertEquals("", string0);
      assertArrayEquals(new float[] {(-1708.443F), 1.0F, 1.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "7", (CharSequence) "");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test904()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens(" vq qf~9m[6tS8 ofzGk *TheArramustno^benull", "pV&d&F@?O[kpV&d&F@?O[k");
      assertNotNull(stringArray0);
      assertEquals(3, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test905()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      String string0 = StringUtils.replace("ch", "Q:3d>", "ch", 1105);
      assertNotNull(string0);
      assertEquals("ch", string0);
      
      charSequenceArray0[0] = (CharSequence) "ch";
      CharSequence charSequence0 = StringUtils.defaultIfEmpty((CharSequence) "ch", (CharSequence) "ch");
      assertNotNull(charSequence0);
      assertTrue(charSequence0.equals((Object)string0));
      assertEquals("ch", charSequence0);
      
      charSequenceArray0[1] = (CharSequence) "ch";
      boolean boolean0 = StringUtils.isAllBlank(charSequenceArray0);
      assertEquals(2, charSequenceArray0.length);
      assertFalse(boolean0);
      
      String string1 = StringUtils.defaultIfBlank("z3>UZQa2", "Index: ");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)charSequence0));
      assertFalse(string1.equals((Object)string0));
      assertEquals("z3>UZQa2", string1);
  }

  @Test(timeout = 4000)
  public void test906()  throws Throwable  {
      String string0 = StringUtils.removeEndIgnoreCase("", "");
      assertNotNull(string0);
      assertEquals("", string0);
      
      Supplier<CharSequence> supplier0 = (Supplier<CharSequence>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn("").when(supplier0).get();
      CharSequence charSequence0 = StringUtils.getIfBlank((CharSequence) "", supplier0);
      assertNotNull(charSequence0);
      assertTrue(charSequence0.equals((Object)string0));
      assertEquals("", charSequence0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "";
      charSequenceArray0[2] = (CharSequence) "";
      int int0 = StringUtils.indexOfDifference(charSequenceArray0);
      assertEquals(3, charSequenceArray0.length);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test907()  throws Throwable  {
      String string0 = StringUtils.stripAccents("wDPtb=E*0D +");
      assertNotNull(string0);
      assertEquals("wDPtb=E*0D +", string0);
      
      String string1 = StringUtils.replaceOnceIgnoreCase(";e|PvY[M,WJ=KeK,MR", "/h81Uu", " vs ");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals(";e|PvY[M,WJ=KeK,MR", string1);
      
      String string2 = StringUtils.replaceChars("=9", 'c', 'a');
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("=9", string2);
      
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("wDPtb=E*0D +");
      assertNotNull(stringArray0);
      assertEquals(11, stringArray0.length);
      
      String string3 = StringUtils.difference("", ":* 5~6sqNSEVx.P$[i");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals(":* 5~6sqNSEVx.P$[i", string3);
      
      String string4 = StringUtils.removeAll(":* 5~6sqNSEVx.P$[i", "BB\"Tr<]B");
      assertNotNull(string4);
      assertTrue(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertEquals(":* 5~6sqNSEVx.P$[i", string4);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "wDPtb=E*0D +", (CharSequence) null);
      assertEquals((-1), int0);
      
      String string5 = StringUtils.unwrap("The Array must not be null", "wDPtb=E*0D +");
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertEquals("The Array must not be null", string5);
      
      String string6 = StringUtils.normalizeSpace("Minimum abbreviation width with offset is %d");
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string2));
      assertEquals("Minimum abbreviation width with offset is %d", string6);
      
      int int1 = StringUtils.indexOfDifference((CharSequence) ";e|PvY[M,WJ=KeK,MR", (CharSequence) "The Array must not be null");
      assertFalse(int1 == int0);
      assertEquals(0, int1);
  }

  @Test(timeout = 4000)
  public void test908()  throws Throwable  {
      String string0 = StringUtils.chomp((String) null, "");
      assertNull(string0);
      
      String string1 = StringUtils.difference("c22", "");
      assertNotNull(string1);
      assertEquals("", string1);
      
      String string2 = StringUtils.trimToNull("Arguments cannot both be null");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertEquals("Arguments cannot both be null", string2);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      // Undeclared exception!
      try { 
        StringUtils.joinWith("Array and element cannot both be null", (Object[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object varargs must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test909()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      String string0 = StringUtils.substring("", 0, 0);
      assertNotNull(string0);
      assertEquals("", string0);
      
      charSequenceArray0[0] = (CharSequence) "";
      int int0 = StringUtils.indexOfDifference(charSequenceArray0);
      assertEquals(1, charSequenceArray0.length);
      assertEquals((-1), int0);
      
      char[] charArray0 = new char[3];
      charArray0[0] = '_';
      charArray0[1] = '?';
      charArray0[2] = '4';
      String string1 = StringUtils.join(charArray0, 'y');
      assertNotNull(string1);
      assertEquals(3, charArray0.length);
      assertFalse(string1.equals((Object)string0));
      assertEquals("_y?y4", string1);
      assertArrayEquals(new char[] {'_', '?', '4'}, charArray0);
      
      String string2 = StringUtils.toRootLowerCase("java.lang.Object@52b769b5java.lang.Object@1d3febfajava.lang.Object@4c16c3aejava.lang.Object@4a32f5f1java.lang.Object@23a1c7c3java.lang.Object@52b769b5java.lang.Object@1d3febfajava.lang.Object@4c16c3aejava.lang.Object@4a32f5f1java.lang.Object@23a1c7c3");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      String string3 = StringUtils.join((float[]) null, '?', 1568, (int) '4');
      assertNull(string3);
      
      int int1 = StringUtils.indexOfIgnoreCase(charSequenceArray0[0], (CharSequence) "");
      assertEquals(1, charSequenceArray0.length);
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      String string4 = StringUtils.substringBefore((String) null, (-1));
      assertNull(string4);
      
      String string5 = StringUtils.joinWith(" vs ", charSequenceArray0);
      assertNotNull(string5);
      assertEquals(1, charSequenceArray0.length);
      assertFalse(string5.equals((Object)string1));
      assertTrue(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertEquals("", string5);
  }

  @Test(timeout = 4000)
  public void test910()  throws Throwable  {
      String string0 = StringUtils.chomp((String) null, "");
      assertNull(string0);
      
      String string1 = StringUtils.difference("c22", "");
      assertNotNull(string1);
      assertEquals("", string1);
      
      String string2 = StringUtils.trimToNull("Arguments cannot both be null");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertEquals("Arguments cannot both be null", string2);
      
      CharSequence[] charSequenceArray0 = new CharSequence[7];
      charSequenceArray0[0] = (CharSequence) null;
      charSequenceArray0[1] = (CharSequence) "";
      charSequenceArray0[2] = (CharSequence) null;
      charSequenceArray0[3] = (CharSequence) "5HNV";
      charSequenceArray0[4] = (CharSequence) null;
      charSequenceArray0[5] = (CharSequence) "c22";
      charSequenceArray0[6] = (CharSequence) "c22";
      boolean boolean0 = StringUtils.startsWithAny("Arguments cannot both be null", charSequenceArray0);
      assertEquals(7, charSequenceArray0.length);
      assertTrue(boolean0);
      
      String string3 = StringUtils.removeEndIgnoreCase("YqFGu2k", "");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals("YqFGu2k", string3);
  }

  @Test(timeout = 4000)
  public void test911()  throws Throwable  {
      String string0 = StringUtils.remove("W~p/]:FDw`qEP(g{Xm", "W~p/]:FDw`qEP(g{Xm");
      assertNotNull(string0);
      assertEquals("", string0);
      
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "");
      assertNotNull(charBuffer0);
      assertFalse(charBuffer0.hasArray());
      assertEquals("", charBuffer0.toString());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.capacity());
      assertEquals(0, charBuffer0.length());
      assertEquals(0, charBuffer0.limit());
      assertFalse(charBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.position());
      assertTrue(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.remaining());
      
      CharBuffer charBuffer1 = charBuffer0.slice();
      assertNotNull(charBuffer1);
      assertNotSame(charBuffer0, charBuffer1);
      assertNotSame(charBuffer1, charBuffer0);
      assertFalse(charBuffer0.hasArray());
      assertEquals("", charBuffer0.toString());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.capacity());
      assertEquals(0, charBuffer0.length());
      assertEquals(0, charBuffer0.limit());
      assertFalse(charBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.position());
      assertTrue(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.remaining());
      assertEquals(0, charBuffer1.remaining());
      assertEquals(0, charBuffer1.capacity());
      assertEquals(0, charBuffer1.length());
      assertFalse(charBuffer1.isDirect());
      assertTrue(charBuffer1.isReadOnly());
      assertEquals(0, charBuffer1.position());
      assertFalse(charBuffer1.hasArray());
      assertEquals("", charBuffer1.toString());
      assertFalse(charBuffer1.hasRemaining());
      assertEquals(0, charBuffer1.limit());
      assertTrue(charBuffer1.equals((Object)charBuffer0));
      
      CharSequence[] charSequenceArray0 = new CharSequence[7];
      charSequenceArray0[0] = (CharSequence) charBuffer1;
      charSequenceArray0[1] = (CharSequence) "";
      String string1 = StringUtils.removeFirst("", "");
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      
      charSequenceArray0[2] = (CharSequence) "";
      charSequenceArray0[5] = (CharSequence) charBuffer1;
      boolean boolean0 = StringUtils.isAllBlank(charSequenceArray0);
      assertEquals(7, charSequenceArray0.length);
      assertTrue(boolean0);
      
      String string2 = StringUtils.replaceOnceIgnoreCase("ouu))09wx;y5{S%wsK", "", ",OgH#.>iD>Z1y");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("ouu))09wx;y5{S%wsK", string2);
      
      int int0 = StringUtils.lastIndexOf(charSequenceArray0[1], (CharSequence) "", 1784);
      assertEquals(7, charSequenceArray0.length);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test912()  throws Throwable  {
      String string0 = "\\u";
      String string1 = StringUtils.trim(string0);
      assertNotNull(string1);
      assertEquals("\\u", string1);
      
      ArrayDeque<Integer> arrayDeque0 = new ArrayDeque<Integer>();
      assertNotNull(arrayDeque0);
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      
      Iterator<Integer> iterator0 = arrayDeque0.descendingIterator();
      assertNotNull(iterator0);
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      
      String string2 = StringUtils.join(iterator0, " vs ");
      assertNotNull(string2);
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("", string2);
      
      String string3 = StringUtils.substringAfter(" vs ", ":XdK%=xck:.|K@C");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals("", string3);
      
      float[] floatArray0 = new float[6];
      floatArray0[1] = (-672.57324F);
      floatArray0[2] = 820.7103F;
      floatArray0[3] = (-672.57324F);
      floatArray0[4] = (float) 'E';
      floatArray0[5] = (-672.57324F);
      String string4 = StringUtils.join(floatArray0, 'k');
      assertNotNull(string4);
      assertEquals(6, floatArray0.length);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertEquals("0.0k-672.57324k820.7103k-672.57324k69.0k-672.57324", string4);
      assertArrayEquals(new float[] {0.0F, (-672.57324F), 820.7103F, (-672.57324F), 69.0F, (-672.57324F)}, floatArray0, 0.01F);
      
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      charSequenceArray0[0] = (CharSequence) string0;
      charSequenceArray0[1] = (CharSequence) string1;
      charSequenceArray0[2] = (CharSequence) null;
      charSequenceArray0[3] = (CharSequence) " vs ";
      boolean boolean0 = StringUtils.isNoneEmpty(charSequenceArray0);
      assertEquals(4, charSequenceArray0.length);
      assertFalse(boolean0);
      
      String string5 = StringUtils.replaceChars("=.dg1Z1035!b_", "j}&~\"Em\"+oiMNou-X", "");
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertEquals("=.dg1Z1035!b_", string5);
      
      String string6 = StringUtils.toRootUpperCase((String) null);
      assertNull(string6);
      
      String string7 = StringUtils.reverse("pV&d&F@?O[k");
      assertNotNull(string7);
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string3));
      assertEquals("k[O?@F&d&Vp", string7);
      
      String string8 = StringUtils.abbreviate("u0", 4076);
      assertNotNull(string8);
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string2));
      assertEquals("u0", string8);
  }

  @Test(timeout = 4000)
  public void test913()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "Wd|}51/]/&`bsA";
      stringArray0[2] = "Wd|}51/]/&`bsA";
      stringArray0[3] = "Wd|}51/]/&`bsA";
      String string0 = StringUtils.firstNonBlank(stringArray0);
      assertNotNull(string0);
      assertEquals(4, stringArray0.length);
      assertEquals("Wd|}51/]/&`bsA", string0);
  }

  @Test(timeout = 4000)
  public void test914()  throws Throwable  {
      int int0 = StringUtils.compare("Minimum abbreviation width-is %dMinimum abbreDiation width is %d", "reu4xq]aI@b");
      assertEquals((-37), int0);
      
      String string0 = StringUtils.abbreviate((String) null, 838, (-1));
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test915()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "java.lang.Object@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.Object@50d3e7ejava.lang.Object@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.Object@50d3e7e";
      stringArray0[1] = "java.lang.Object@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.Object@50d3e7ejava.lang.Object@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.Object@50d3e7e";
      stringArray0[2] = "java.lang.Object@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.Object@50d3e7ejava.lang.Object@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.Object@50d3e7e";
      stringArray0[3] = "java.lang.Object@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.Object@50d3e7ejava.lang.Object@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.Object@50d3e7e";
      String string0 = StringUtils.replaceEach("java.lang.Object@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.Object@50d3e7ejava.lang.Object@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.Object@50d3e7e", stringArray0, stringArray0);
      assertNotNull(string0);
      assertEquals(4, stringArray0.length);
      
      boolean boolean0 = StringUtils.isNumericSpace("java.lang.Object@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.Object@50d3e7ejava.lang.Object@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.Object@50d3e7e");
      assertFalse(boolean0);
      
      String string1 = StringUtils.removeEndIgnoreCase("java.lang.Object@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.Object@50d3e7ejava.lang.Object@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.Object@50d3e7e", "java.lang.Object@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.Object@50d3e7ejava.lang.Object@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.Object@50d3e7e");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      
      String string2 = StringUtils.wrap("pV&d&F@?O[k", "java.lang.Object@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.Object@50d3e7ejava.lang.Object@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.Object@50d3e7e");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      CharSequence[] charSequenceArray0 = new CharSequence[6];
      charSequenceArray0[0] = (CharSequence) "java.lang.Object@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.Object@50d3e7ejava.lang.Object@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.Object@50d3e7e";
      charSequenceArray0[1] = (CharSequence) "java.lang.Object@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.Object@50d3e7ejava.lang.Object@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.Object@50d3e7e";
      charSequenceArray0[2] = (CharSequence) "java.lang.Object@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.Object@50d3e7ejava.lang.Object@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.Object@50d3e7e";
      charSequenceArray0[3] = (CharSequence) "java.lang.Object@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.Object@50d3e7ejava.lang.Object@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.Object@50d3e7e";
      charSequenceArray0[4] = (CharSequence) "java.lang.Object@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.Object@50d3e7ejava.lang.Object@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.Object@50d3e7epV&d&F@?O[kjava.lang.Object@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.Object@50d3e7ejava.lang.Object@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.Object@50d3e7e";
      charSequenceArray0[5] = (CharSequence) "java.lang.Object@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.Object@50d3e7ejava.lang.Object@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.Object@50d3e7epV&d&F@?O[kjava.lang.Object@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.Object@50d3e7ejava.lang.Object@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.Object@50d3e7e";
      int int0 = StringUtils.indexOfDifference(charSequenceArray0);
      assertEquals(6, charSequenceArray0.length);
      assertEquals(248, int0);
      
      String string3 = StringUtils.chomp("java.lang.Object@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.Object@50d3e7ejava.lang.Object@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.Object@50d3e7e", "java.lang.Object@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.Object@50d3e7ejava.lang.Object@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.Object@50d3e7e");
      assertNotNull(string3);
      assertTrue(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals("", string3);
      
      boolean boolean1 = StringUtils.isAllEmpty(stringArray0);
      assertEquals(4, stringArray0.length);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = StringUtils.startsWithIgnoreCase((CharSequence) null, charSequenceArray0[5]);
      assertEquals(6, charSequenceArray0.length);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      
      String string4 = StringUtils.removeEndIgnoreCase(", '", " ");
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertEquals(", '", string4);
      
      boolean boolean3 = StringUtils.equalsAny(charSequenceArray0[5], charSequenceArray0);
      assertEquals(6, charSequenceArray0.length);
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3);
      
      String[] stringArray1 = StringUtils.splitPreserveAllTokens("java.lang.Object@52b769b5java.lang.Object@1d3febfajava.lang.Object@4c16c3aejava.lang.Object@4a32f5f1java.lang.Object@23a1c7c3java.lang.Object@52b769b5java.lang.Object@1d3febfajava.lang.Object@4c16c3aejava.lang.Object@4a32f5f1java.lang.Object@23a1c7c3");
      assertNotNull(stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(1, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      String string5 = StringUtils.join((Object[]) stringArray0, "Aborting to protect against StackOverflowError - output of one loop is the input of another", 248, (-4055));
      assertNotNull(string5);
      assertNotSame(stringArray0, stringArray1);
      assertEquals(4, stringArray0.length);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertTrue(string5.equals((Object)string3));
      assertTrue(string5.equals((Object)string1));
      assertEquals("", string5);
      
      String string6 = StringUtils.join((Object[]) stringArray0, "", 127, 127);
      assertNotNull(string6);
      assertNotSame(stringArray0, stringArray1);
      assertEquals(4, stringArray0.length);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string4));
      assertTrue(string6.equals((Object)string1));
      assertTrue(string6.equals((Object)string3));
      assertEquals("", string6);
      
      String string7 = StringUtils.join((Object[]) stringArray0, 'R', 8192, 127);
      assertNotNull(string7);
      assertNotSame(stringArray0, stringArray1);
      assertEquals(4, stringArray0.length);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertTrue(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string4));
      assertTrue(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string2));
      assertEquals("", string7);
      
      String[] stringArray2 = StringUtils.splitPreserveAllTokens("java.lang.Object@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.Object@50d3e7ejava.lang.Object@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.Object@50d3e7e", "'[@Mdd3u-_r$");
      assertNotNull(stringArray2);
      assertNotSame(stringArray2, stringArray0);
      assertNotSame(stringArray2, stringArray1);
      assertEquals(23, stringArray2.length);
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertFalse(stringArray2.equals((Object)stringArray1));
  }

  @Test(timeout = 4000)
  public void test916()  throws Throwable  {
      String string0 = StringUtils.remove("$4'Tcj.*5", 'o');
      assertNotNull(string0);
      assertEquals("$4'Tcj.*5", string0);
      
      String string1 = StringUtils.remove("", 'o');
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "", (CharSequence) "$4'Tcj.*5", (-721));
      assertEquals((-1), int0);
      
      boolean boolean0 = StringUtils.containsAny((CharSequence) "$4'Tcj.*5", (CharSequence) "");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test917()  throws Throwable  {
      int int0 = StringUtils.compare("Minimum abbreviation width-is %dMinimum abbreDiation width is %d", (String) null);
      assertEquals(1, int0);
      
      String string0 = StringUtils.wrap((String) null, 'i');
      assertNull(string0);
      
      int int1 = StringUtils.countMatches((CharSequence) null, (CharSequence) "Minimum abbreviation width-is %dMinimum abbreDiation width is %d");
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      String string1 = StringUtils.center((String) null, 0);
      assertNull(string1);
      
      int int2 = StringUtils.indexOfIgnoreCase((CharSequence) null, (CharSequence) "Minimum abbreviation width-is %dMinimum abbreDiation width is %d", 100);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals((-1), int2);
  }

  @Test(timeout = 4000)
  public void test918()  throws Throwable  {
      ArrayDeque<Integer> arrayDeque0 = new ArrayDeque<Integer>();
      assertNotNull(arrayDeque0);
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      
      Iterator<Integer> iterator0 = arrayDeque0.descendingIterator();
      assertNotNull(iterator0);
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("x7P*-", 't');
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      String string0 = StringUtils.join((Object[]) stringArray0, "{}", 1840, 1840);
      assertNotNull(string0);
      assertEquals(1, stringArray0.length);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test919()  throws Throwable  {
      String string0 = StringUtils.substringAfterLast("Minimum abbreviation width with offset is %d", (-21));
      assertNotNull(string0);
      assertEquals("", string0);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "", (CharSequence) "", 2);
      assertEquals(0, int0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[0] = (CharSequence) "~(";
      charSequenceArray0[1] = (CharSequence) "~(";
      String string1 = StringUtils.appendIfMissing("~(", "~(", charSequenceArray0);
      assertNotNull(string1);
      assertEquals(2, charSequenceArray0.length);
      assertFalse(string1.equals((Object)string0));
      assertEquals("~(", string1);
      
      String string2 = StringUtils.joinWith("Minimum abbreviation width with offset is %d", charSequenceArray0);
      assertNotNull(string2);
      assertEquals(2, charSequenceArray0.length);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("~(Minimum abbreviation width with offset is %d~(", string2);
      
      boolean boolean0 = StringUtils.isAlpha("~(Minimum abbreviation width with offset is %d~(");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test920()  throws Throwable  {
      int int0 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      String string0 = StringUtils.substringBefore(".We", (-1));
      assertNotNull(string0);
      assertEquals(".We", string0);
  }

  @Test(timeout = 4000)
  public void test921()  throws Throwable  {
      String string0 = StringUtils.substringAfter("org.apache.commons.lang3.StringUtils", "\n");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.normalizeSpace((String) null);
      assertNull(string1);
      
      String string2 = StringUtils.removeEndIgnoreCase((String) null, "Z~");
      assertNull(string2);
      
      boolean boolean0 = StringUtils.equalsIgnoreCase((CharSequence) null, "Z~");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test922()  throws Throwable  {
      int int0 = StringUtils.compare("j", "wk#[y!i", true);
      assertEquals((-13), int0);
  }

  @Test(timeout = 4000)
  public void test923()  throws Throwable  {
      String string0 = StringUtils.substringAfterLast("W~p/]:FDw`qEP(g{Xm", 8);
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.unwrap("E=,1}G?in7_TlUU", '\'');
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("E=,1}G?in7_TlUU", string1);
      
      String string2 = StringUtils.replaceChars("W~p/]:FDw`qEP(g{Xm", 'v', 'v');
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("W~p/]:FDw`qEP(g{Xm", string2);
      
      char[] charArray0 = new char[2];
      charArray0[0] = ']';
      charArray0[1] = 'v';
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "", charArray0);
      assertEquals(2, charArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new char[] {']', 'v'}, charArray0);
      
      boolean boolean1 = StringUtils.isAllUpperCase("W~p/]:FDw`qEP(g{Xm");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) "W~p/]:FDw`qEP(g{Xm";
      objectArray0[1] = (Object) "";
      objectArray0[2] = (Object) "E=,1}G?in7_TlUU";
      objectArray0[3] = (Object) 'v';
      objectArray0[4] = (Object) "W~p/]:FDw`qEP(g{Xm";
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[5] = object0;
      objectArray0[6] = (Object) 'v';
      objectArray0[7] = (Object) "E=,1}G?in7_TlUU";
      objectArray0[8] = (Object) "";
      String string3 = StringUtils.join(objectArray0, 'I', 10, 8);
      assertNotNull(string3);
      assertEquals(9, objectArray0.length);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals("", string3);
      
      CharSequence charSequence0 = StringUtils.getIfBlank((CharSequence) "", (Supplier<CharSequence>) null);
      assertNull(charSequence0);
      
      int int0 = StringUtils.indexOfAny((CharSequence) null, charArray0);
      assertEquals(2, charArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new char[] {']', 'v'}, charArray0);
      
      double double0 = StringUtils.getJaroWinklerDistance("W~p/]:FDw`qEP(g{Xm", "E=,1}G?in7_TlUU");
      assertEquals(0.0, double0, 0.01);
      
      String string4 = StringUtils.substringAfterLast("glkD$K8Z!re+=t]", 58);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertEquals("", string4);
      
      CharSequence[] charSequenceArray0 = new CharSequence[7];
      charSequenceArray0[0] = (CharSequence) "glkD$K8Z!re+=t]";
      charSequenceArray0[1] = (CharSequence) "glkD$K8Z!re+=t]";
      charSequenceArray0[2] = (CharSequence) "W~p/]:FDw`qEP(g{Xm";
      String string5 = StringUtils.EMPTY;
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertEquals("", string5);
      
      charSequenceArray0[3] = (CharSequence) "";
      charSequenceArray0[4] = (CharSequence) "";
      charSequenceArray0[5] = (CharSequence) "E=,1}G?in7_TlUU";
      charSequenceArray0[6] = (CharSequence) "";
      boolean boolean2 = StringUtils.equalsAnyIgnoreCase("W~p/]:FDw`qEP(g{Xm", charSequenceArray0);
      assertEquals(7, charSequenceArray0.length);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2);
  }

  @Test(timeout = 4000)
  public void test924()  throws Throwable  {
      String string0 = StringUtils.EMPTY;
      assertNotNull(string0);
      assertEquals("", string0);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "", (CharSequence) "");
      assertEquals(0, int0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "";
      charSequenceArray0[2] = (CharSequence) "";
      charSequenceArray0[3] = (CharSequence) "";
      String string1 = StringUtils.appendIfMissingIgnoreCase("", charSequenceArray0[3], charSequenceArray0);
      assertNotNull(string1);
      assertEquals(5, charSequenceArray0.length);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      
      charSequenceArray0[4] = (CharSequence) "";
      boolean boolean0 = StringUtils.isAllBlank(charSequenceArray0);
      assertEquals(5, charSequenceArray0.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test925()  throws Throwable  {
      String string0 = StringUtils.removeEndIgnoreCase("", "");
      assertNotNull(string0);
      assertEquals("", string0);
      
      Supplier<CharSequence> supplier0 = (Supplier<CharSequence>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier0).get();
      CharSequence charSequence0 = StringUtils.getIfBlank((CharSequence) "", supplier0);
      assertNull(charSequence0);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) null, (CharSequence) null);
      assertEquals((-1), int0);
      
      String string1 = StringUtils.toRootUpperCase("");
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      
      Object[] objectArray0 = new Object[0];
      String string2 = StringUtils.joinWith("Strings must not be null", objectArray0);
      assertNotNull(string2);
      assertEquals(0, objectArray0.length);
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertEquals("", string2);
      
      String string3 = "\\u";
      int int1 = StringUtils.compare("", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(int1 == int0);
      assertEquals((-2), int1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[8];
      charSequenceArray0[0] = (CharSequence) "Strings must not be null";
      charSequenceArray0[1] = (CharSequence) "";
      charSequenceArray0[2] = (CharSequence) "";
      charSequenceArray0[3] = (CharSequence) "";
      charSequenceArray0[4] = null;
      charSequenceArray0[5] = (CharSequence) "Strings must not be null";
      String string4 = StringUtils.remove("", 'C');
      assertNotNull(string4);
      assertTrue(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string2));
      assertEquals("", string4);
      
      charSequenceArray0[6] = (CharSequence) "";
      charSequenceArray0[7] = (CharSequence) "Strings must not be null";
      boolean boolean0 = StringUtils.isAllBlank(charSequenceArray0);
      assertEquals(8, charSequenceArray0.length);
      assertFalse(boolean0);
      
      String string5 = StringUtils.substringBefore(", Length: 0", (-2105));
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertEquals(", Length: 0", string5);
  }

  @Test(timeout = 4000)
  public void test926()  throws Throwable  {
      String string0 = StringUtils.toRootUpperCase("Minimum abbreviation width is %d");
      assertNotNull(string0);
      assertEquals("MINIMUM ABBREVIATION WIDTH IS %D", string0);
      
      String string1 = StringUtils.reverse("}\"}|{Lx@=E=_OU9d=");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("=d9UO_=E=@xL{|}\"}", string1);
      
      String string2 = StringUtils.abbreviate("=d9UO_=E=@xL{|}\"}", 53);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertEquals("=d9UO_=E=@xL{|}\"}", string2);
  }

  @Test(timeout = 4000)
  public void test927()  throws Throwable  {
      String string0 = StringUtils.chomp((String) null, "");
      assertNull(string0);
      
      String string1 = StringUtils.replacePattern("[3yrCmjrl/", "Arguments cannot both be null", (String) null);
      assertNotNull(string1);
      assertEquals("[3yrCmjrl/", string1);
      
      String string2 = StringUtils.getDigits("Arguments cannot both be null");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertEquals("", string2);
      
      Stack<String> stack0 = new Stack<String>();
      assertNotNull(stack0);
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertFalse(stack0.contains(string1));
      
      stack0.removeAllElements();
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertFalse(stack0.contains(string1));
      
      stack0.addElement("t@L@\"");
      assertEquals("[t@L@\"]", stack0.toString());
      assertFalse(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertEquals(1, stack0.size());
      assertFalse(stack0.contains(string1));
      assertTrue(stack0.contains("t@L@\""));
      
      ListIterator<String> listIterator0 = stack0.listIterator();
      assertNotNull(listIterator0);
      assertEquals("[t@L@\"]", stack0.toString());
      assertFalse(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertEquals(1, stack0.size());
      assertFalse(listIterator0.hasPrevious());
      assertTrue(listIterator0.hasNext());
      assertFalse(stack0.contains(string1));
      assertTrue(stack0.contains("t@L@\""));
      
      String string3 = StringUtils.join((Iterator<?>) listIterator0, 'D');
      assertNotNull(string3);
      assertEquals("[t@L@\"]", stack0.toString());
      assertFalse(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertEquals(1, stack0.size());
      assertFalse(listIterator0.hasNext());
      assertTrue(listIterator0.hasPrevious());
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals("t@L@\"", string3);
      assertFalse(stack0.contains(string1));
      assertTrue(stack0.contains(string3));
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)16;
      // Undeclared exception!
      try { 
        Charset.forName("");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // 
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test928()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = ",/66A7z~@r:n5z ?m";
      stringArray0[1] = "e)iya!";
      Integer integer0 = new Integer(Integer.MIN_VALUE);
      assertNotNull(integer0);
      assertEquals(Integer.MIN_VALUE, (int)integer0);
      
      PriorityQueue<Integer> priorityQueue0 = new PriorityQueue<Integer>();
      assertNotNull(priorityQueue0);
      assertEquals(0, priorityQueue0.size());
      assertFalse(priorityQueue0.contains(Integer.MIN_VALUE));
      
      boolean boolean0 = priorityQueue0.add(integer0);
      assertEquals(1, priorityQueue0.size());
      assertTrue(boolean0);
      assertTrue(priorityQueue0.contains(Integer.MIN_VALUE));
      
      String string0 = StringUtils.join((Iterable<?>) priorityQueue0, 'n');
      assertNotNull(string0);
      assertEquals(1, priorityQueue0.size());
      assertEquals("-2147483648", string0);
      assertTrue(priorityQueue0.contains(Integer.MIN_VALUE));
  }

  @Test(timeout = 4000)
  public void test929()  throws Throwable  {
      String[] stringArray0 = new String[5];
      StringUtils.strip(stringArray0[0]);
      Class<Locale.Category> class0 = Locale.Category.class;
      EnumSet<Locale.Category> enumSet0 = EnumSet.noneOf(class0);
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      Locale.Category locale_Category1 = Locale.Category.DISPLAY;
      EnumSet.of(locale_Category1);
      enumSet0.add(locale_Category0);
      Iterator<Locale.Category> iterator0 = enumSet0.iterator();
      StringUtils.join(iterator0, "!Q*H^a%`Ah*^");
      StringUtils.firstNonBlank(stringArray0);
      String string0 = StringUtils.getDigits((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test930()  throws Throwable  {
      String[] stringArray0 = new String[1];
      String string0 = StringUtils.replaceEachRepeatedly("*WD{)21,;e+I!5ueo$i", stringArray0, stringArray0);
      assertEquals("*WD{)21,;e+I!5ueo$i", string0);
  }

  @Test(timeout = 4000)
  public void test931()  throws Throwable  {
      String string0 = StringUtils.wrap("W-:$-TX6hO ", "[$z");
      StringUtils.replaceChars("[$zW-:$-TX6hO [$z", '%', '%');
      StringUtils.containsIgnoreCase("[$zW-:$-TX6hO [$z", "W-:$-TX6hO ");
      PriorityQueue<Integer> priorityQueue0 = new PriorityQueue<Integer>();
      String string1 = StringUtils.join((Iterable<?>) priorityQueue0, '%');
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test932()  throws Throwable  {
      StringUtils.chomp((String) null, "");
      Vector<CharBuffer> vector0 = new Vector<CharBuffer>();
      LinkedHashSet<CharBuffer> linkedHashSet0 = new LinkedHashSet<CharBuffer>();
      vector0.addAll((Collection<? extends CharBuffer>) linkedHashSet0);
      String string0 = StringUtils.join((List<?>) vector0, (String) null, 3476, 3476);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test933()  throws Throwable  {
      String string0 = StringUtils.repeat(" in an array of ", " in an array of ", (-353));
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test934()  throws Throwable  {
      StringUtils.chomp((String) null, "");
      StringUtils.replacePattern("[3yrCmjrl/", "Arguments cannot both be null", (String) null);
      StringUtils.getDigits((String) null);
      Stack<String> stack0 = new Stack<String>();
      stack0.removeAllElements();
      stack0.addElement("t@L@\"");
      ListIterator<String> listIterator0 = stack0.listIterator();
      StringUtils.join((Iterator<?>) listIterator0, 'D');
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)16;
      // Undeclared exception!
      try { 
        Charset.forName("");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // 
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test935()  throws Throwable  {
      StringUtils.repeat("c^P#chHM", 6);
      StringUtils.indexOfAny((CharSequence) "c^P#chHMc^P#chHMc^P#chHMc^P#chHMc^P#chHMc^P#chHM", "c^P#chHMc^P#chHMc^P#chHMc^P#chHMc^P#chHMc^P#chHM");
      StringUtils.rightPad("c^P#chHM", 0, "w[ S*{(\"xv");
      StringUtils.replacePattern("c^P#chHM", "c^P#chHM", "c^P#chHMc^P#chHMc^P#chHMc^P#chHMc^P#chHMc^P#chHM");
      String[] stringArray0 = new String[5];
      stringArray0[0] = "c^P#chHM";
      stringArray0[1] = "c^P#chHM";
      stringArray0[2] = "w[ S*{(\"xv";
      stringArray0[3] = "c^P#chHMc^P#chHMc^P#chHMc^P#chHMc^P#chHMc^P#chHM";
      stringArray0[4] = "c^P#chHM";
      StringUtils.getCommonPrefix(stringArray0);
      StringUtils.stripStart("c^P#chHMc^P#chHMc^P#chHMc^P#chHMc^P#chHMc^P#chHM", "kbA*[am$0#;+)");
      StringUtils.repeat("", 948);
      StringUtils.isAllLowerCase("");
      String string0 = StringUtils.join((byte[]) null, '^', 65536, (-1073741822));
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test936()  throws Throwable  {
      String string0 = StringUtils.replaceOnceIgnoreCase("", "", "");
      assertEquals("", string0);
      
      byte[] byteArray0 = new byte[21];
      byteArray0[0] = (byte) (-109);
      byteArray0[1] = (byte)18;
      byteArray0[2] = (byte)69;
      byteArray0[3] = (byte)50;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)95;
      String string1 = StringUtils.join(byteArray0, ',', (int) (byte) (-109), (-1683));
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test937()  throws Throwable  {
      short[] shortArray0 = new short[0];
      // Undeclared exception!
      try { 
        StringUtils.join(shortArray0, 'h', 0, 8);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test938()  throws Throwable  {
      String string0 = StringUtils.right(" is not in the range '0' - '9' is not in the range '0' - '9'", (-1540));
      assertNotNull(string0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)8;
      String string1 = StringUtils.join(byteArray0, 'M');
      assertNotNull(string1);
      assertEquals("1M8", string1);
  }

  @Test(timeout = 4000)
  public void test939()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)104;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-106);
      byteArray0[4] = (byte)1;
      byteArray0[5] = (byte) (-43);
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)54;
      String string0 = StringUtils.join(byteArray0, '#', 16, (int) (byte)0);
      assertNotNull(string0);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) (byte)104;
      doubleArray0[1] = (double) '#';
      doubleArray0[2] = (double) (byte)54;
      doubleArray0[3] = (double) (byte)0;
      doubleArray0[4] = (double) (byte) (-106);
      doubleArray0[5] = (double) (byte)0;
      doubleArray0[6] = (double) (byte)1;
      doubleArray0[7] = (double) (byte)0;
      doubleArray0[8] = (double) (byte) (-43);
      String string1 = StringUtils.join(doubleArray0, '#');
      assertNotNull(string1);
      assertEquals("104.0#35.0#54.0#0.0#-106.0#0.0#1.0#0.0#-43.0", string1);
  }

  @Test(timeout = 4000)
  public void test940()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      String string0 = StringUtils.join(doubleArray0, 'z');
      assertEquals("0.0z0.0z0.0z0.0", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test941()  throws Throwable  {
      String[] stringArray0 = new String[5];
      String string0 = StringUtils.strip(stringArray0[0]);
      assertNull(string0);
      
      String string1 = StringUtils.removeEndIgnoreCase(" vs  vs ", " vs  vs ");
      assertEquals("", string1);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) " vs ", (CharSequence) " vs ");
      assertEquals(0, int0);
      
      String[] stringArray1 = StringUtils.splitByWholeSeparatorPreserveAllTokens(" vs ", " ");
      assertEquals(3, stringArray1.length);
      
      Integer integer0 = new Integer(156);
      String string2 = StringUtils.wrapIfMissing("6gsf@(9p*~`", "The String must not be empty");
      assertEquals("The String must not be empty6gsf@(9p*~`The String must not be empty", string2);
      
      StringUtils.getJaroWinklerDistance("", "The String must not be empty6gsf@(9p*~`The String must not be empty");
      boolean boolean0 = StringUtils.isAnyEmpty(stringArray0);
      boolean boolean1 = StringUtils.isAsciiPrintable("The String must not be empty");
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test942()  throws Throwable  {
      String string0 = "A< C){4iAR1?6R<Bw}r>y6xwnG!";
      // Undeclared exception!
      try { 
        StringUtils.abbreviate("A< C){4iAR1?6R<Bw}r>y6xwnG!", "p{InCombiningDiacriticalMarks}+", (-3017), (-3017));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum abbreviation width is 32
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test943()  throws Throwable  {
      Object[] objectArray0 = new Object[3];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      String string0 = StringUtils.join(objectArray0, "");
      assertNotNull(string0);
      
      String string1 = StringUtils.abbreviateMiddle("", "java.lang.Object@2901246java.lang.Object@5c330b60java.lang.Object@6040acef", (-382));
      assertFalse(string1.equals((Object)string0));
      
      LinkedList<Locale.Category> linkedList0 = new LinkedList<Locale.Category>();
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      linkedList0.add(locale_Category0);
      Iterator<Locale.Category> iterator0 = linkedList0.descendingIterator();
      String string2 = StringUtils.join(iterator0, 'q');
      assertNotNull(string2);
      assertEquals("DISPLAY", string2);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) (-382);
      doubleArray0[1] = (double) (-382);
      doubleArray0[2] = (double) (-382);
      doubleArray0[3] = (-56.79743649);
      doubleArray0[4] = (double) (-382);
      doubleArray0[5] = (double) (-382);
      doubleArray0[6] = (double) (-382);
      String string3 = StringUtils.join(doubleArray0, 'V', (-382), (-382));
      assertTrue(string3.equals((Object)string1));
      assertNotNull(string3);
  }

  @Test(timeout = 4000)
  public void test944()  throws Throwable  {
      StringUtils.swapCase("");
      boolean boolean0 = StringUtils.isNotEmpty("");
      assertFalse(boolean0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "";
      charSequenceArray0[2] = (CharSequence) "";
      charSequenceArray0[3] = (CharSequence) "";
      charSequenceArray0[4] = (CharSequence) "";
      boolean boolean1 = StringUtils.containsAny((CharSequence) "", charSequenceArray0);
      StringUtils.wrap("", 'Q');
      StringUtils.center("", 0, "");
      String string0 = StringUtils.replacePattern("", "", "");
      assertEquals("", string0);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("wDPtb=E*0D +", "org.apache.commons.lang3.ObjectUtils$Null", (-1105));
      String string1 = StringUtils.normalizeSpace("offset cannot be negative");
      assertEquals("offset cannot be negative", string1);
      
      boolean boolean2 = StringUtils.isNoneBlank(stringArray0);
      assertTrue(boolean2 == boolean1);
      
      String string2 = StringUtils.replaceFirst("java.lang.Object@52b769b5java.lang.Object@1d3febfajava.lang.Object@4c16c3aejava.lang.Object@4a32f5f1java.lang.Object@23a1c7c3java.lang.Object@52b769b5java.lang.Object@1d3febfajava.lang.Object@4c16c3aejava.lang.Object@4a32f5f1java.lang.Object@23a1c7c3", "Aborting to protect against StackOverflowError - output of one loop is the input of another", "");
      assertFalse(string2.equals((Object)string0));
      
      String string3 = StringUtils.replaceIgnoreCase("I?]7{F|", "Aborting to protect against StackOverflowError - output of one loop is the input of another", "I?]7{F|", 49);
      assertEquals("I?]7{F|", string3);
  }

  @Test(timeout = 4000)
  public void test945()  throws Throwable  {
      StringUtils.join((Iterator<?>) null, "");
      char[] charArray0 = new char[2];
      charArray0[0] = 'b';
      charArray0[1] = 'b';
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "", charArray0);
      assertEquals((-1), int0);
      
      String[] stringArray0 = StringUtils.splitByCharacterType("");
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string0 = StringUtils.wrap("kWx8CT8U_(Su5H(POYh", 'b');
      assertEquals("bkWx8CT8U_(Su5H(POYhb", string0);
  }

  @Test(timeout = 4000)
  public void test946()  throws Throwable  {
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) "";
      objectArray0[1] = (Object) "";
      objectArray0[2] = (Object) "";
      objectArray0[3] = (Object) "";
      objectArray0[4] = (Object) "";
      objectArray0[5] = (Object) "";
      objectArray0[6] = (Object) "";
      Object object0 = new Object();
      objectArray0[7] = object0;
      objectArray0[8] = (Object) "";
      StringUtils.join(objectArray0, "");
      StringUtils.wrapIfMissing("java.lang.Object@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.Object@50d3e7ejava.lang.Object@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.Object@50d3e7ejava.lang.Object@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.Object@50d3e7ejava.lang.Object@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.Object@50d3e7e", "xxU");
      StringUtils.splitByWholeSeparatorPreserveAllTokens(">*?YJE+", "W1PeqR@");
      StringUtils.splitByCharacterTypeCamelCase("{}");
      Vector<Locale.LanguageRange> vector0 = new Vector<Locale.LanguageRange>();
      HashSet<Locale> hashSet0 = new HashSet<Locale>();
      Locale.lookup(vector0, hashSet0);
      char[] charArray0 = new char[1];
      charArray0[0] = 'F';
      StringUtils.join(charArray0, 'y');
      // Undeclared exception!
      try { 
        StringUtils.getFuzzyDistance("F", "W1PeqR@", (Locale) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Locale must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test947()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "java.lang.Object@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.Object@50d3e7ejava.lang.Object@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.Object@50d3e7e";
      stringArray0[1] = "java.lang.Object@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.Object@50d3e7ejava.lang.Object@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.Object@50d3e7e";
      String string0 = StringUtils.trimToEmpty("java.lang.Object@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.Object@50d3e7ejava.lang.Object@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.Object@50d3e7e");
      String string1 = StringUtils.wrapIfMissing("java.lang.Object@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.Object@50d3e7ejava.lang.Object@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.Object@50d3e7e", "java.lang.Object@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.Object@50d3e7ejava.lang.Object@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.Object@50d3e7e");
      assertTrue(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test948()  throws Throwable  {
      String string0 = "ClP># gfKW@vC";
      int int0 = (-1417);
      // Undeclared exception!
      try { 
        StringUtils.abbreviate("xo{K5zw+xG*A.Io>u", "org.apache.commons.lang3.Charsets", (-1417));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum abbreviation width is 34
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test949()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("ASG?bZ0Eo.k!?8*IR", "ASG?bZ0Eo.k!?8*IR", (-205));
      assertEquals(2, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test950()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("c^P@NHM", "c^P@NHM");
      String string0 = StringUtils.lowerCase("c^P@NHM", (Locale) null);
      assertEquals("c^p@nhm", string0);
      
      boolean boolean0 = StringUtils.isAnyBlank(stringArray0);
      assertEquals(2, stringArray0.length);
      assertTrue(boolean0);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "{}", (CharSequence) "{}");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test951()  throws Throwable  {
      String string0 = StringUtils.reverse("pV&d&F@?O[k");
      assertEquals("k[O?@F&d&Vp", string0);
      
      String string1 = StringUtils.abbreviate("pV&d&F@?O[k", 53);
      assertEquals("pV&d&F@?O[k", string1);
  }

  @Test(timeout = 4000)
  public void test952()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("d/\"Z7FPYtK-O", "offset cannot be negative", 0);
      assertNotNull(stringArray0);
      
      String string0 = StringUtils.normalizeSpace("offset cannot be negative");
      assertEquals("offset cannot be negative", string0);
      
      boolean boolean0 = StringUtils.isNoneBlank(stringArray0);
      assertEquals(2, stringArray0.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test953()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("{}");
      String string0 = StringUtils.lowerCase("c^P@NHM", (Locale) null);
      assertEquals("c^p@nhm", string0);
      
      boolean boolean0 = StringUtils.isAnyBlank(stringArray0);
      assertEquals(2, stringArray0.length);
      assertFalse(boolean0);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "{}", (CharSequence) "{}");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test954()  throws Throwable  {
      Object[] objectArray0 = new Object[5];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Object object4 = new Object();
      objectArray0[4] = object4;
      String string0 = "";
      StringUtils.join(objectArray0, "");
      StringUtils.wrapIfMissing("java.lang.Object@475c0024java.lang.Object@68077113java.lang.Object@4104c4edjava.lang.Object@7a858acajava.lang.Object@5d7ff89e", "java.lang.Object@475c0024java.lang.Object@68077113java.lang.Object@4104c4edjava.lang.Object@7a858acajava.lang.Object@5d7ff89e");
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("wDPtb=E*0D +", "{}");
      StringUtils.splitByCharacterTypeCamelCase("");
      StringUtils.lowerCase("", (Locale) null);
      StringUtils.isAnyBlank(stringArray0);
      // Undeclared exception!
      try { 
        StringUtils.abbreviate("{}", "wDPtb=E*0D +", 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum abbreviation width is 14
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test955()  throws Throwable  {
      Integer[] integerArray0 = new Integer[1];
      Integer integer0 = new Integer(643);
      integerArray0[0] = integer0;
      String string0 = StringUtils.join(integerArray0);
      assertEquals("643", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test956()  throws Throwable  {
      StringUtils.rightPad("f>-l|^^'S`C", (-161), "V");
      StringUtils.replaceIgnoreCase("V", "V", "Search and Replace array lengths don't match: ", Integer.MAX_VALUE);
      StringUtils.contains((CharSequence) "f>-l|^^'S`C", (CharSequence) "Search and Replace array lengths don't match: ");
      StringUtils.repeat('n', 0);
      StringUtils.stripAccents("$3]");
      StringUtils.unwrap("java.lang.Object@7ae88c63java.lang.Object@46e4abbejava.lang.Object@7ae88c63java.lang.Object@2b93da5fjava.lang.Object@58b1910ajava.lang.Object@7ae88c63java.lang.Object@46e4abbejava.lang.Object@7ae88c63java.lang.Object@2b93da5fjava.lang.Object@58b1910a", 'i');
      int int0 = StringUtils.indexOf((CharSequence) "Search and Replace array lengths don't match: ", (-953));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test957()  throws Throwable  {
      StringUtils.rightPad("f>-l|^^'S`C", (-161), "V");
      String string0 = StringUtils.replaceIgnoreCase("V", "V", "Search and Replace array lengths don't match: ", (-161));
      assertEquals("Search and Replace array lengths don't match: ", string0);
      
      boolean boolean0 = StringUtils.contains((CharSequence) "f>-l|^^'S`C", (CharSequence) "Search and Replace array lengths don't match: ");
      assertFalse(boolean0);
      
      StringUtils.repeat('n', 0);
      String string1 = StringUtils.stripAccents("$3]");
      assertEquals("$3]", string1);
      
      String string2 = StringUtils.replaceOnceIgnoreCase("", "Index: ", "$3]");
      String string3 = StringUtils.overlay("s|[vM[", "", 0, 0);
      assertEquals("s|[vM[", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.substringAfterLast("", "U-0I_sa9{4d&NF");
      assertTrue(string4.equals((Object)string2));
  }

  @Test(timeout = 4000)
  public void test958()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "java.lang.OWject@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.Object@50d3e7ejava.lang.Object@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.bject@50d3e7e";
      stringArray0[1] = "java.lang.OWject@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.Object@50d3e7ejava.lang.Object@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.bject@50d3e7e";
      String string0 = StringUtils.replaceOnce("java.lang.OWject@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.Object@50d3e7ejava.lang.Object@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.bject@50d3e7e", "java.lang.OWject@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.Object@50d3e7ejava.lang.Object@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.bject@50d3e7e", "java.lang.OWject@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.Object@50d3e7ejava.lang.Object@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.bject@50d3e7e");
      String string1 = StringUtils.appendIfMissingIgnoreCase("java.lang.OWject@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.Object@50d3e7ejava.lang.Object@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.bject@50d3e7e", (CharSequence) null, stringArray0);
      assertTrue(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test959()  throws Throwable  {
      String string0 = StringUtils.rightPad("f>-l|^^'S`C", (-161), "V");
      assertEquals("f>-l|^^'S`C", string0);
      
      String string1 = StringUtils.replaceIgnoreCase("V", "V", "Search and Replace array lengths don't match: ", Integer.MAX_VALUE);
      assertEquals("Search and Replace array lengths don't match: ", string1);
      
      StringUtils.contains((CharSequence) "f>-l|^^'S`C", (CharSequence) "Search and Replace array lengths don't match: ");
      String string2 = StringUtils.stripAccents("$3]");
      assertEquals("$3]", string2);
      
      String string3 = StringUtils.replaceOnceIgnoreCase(";e|PvY[M,WJ=KeK,MR", "Index: ", "$3]");
      assertEquals(";e|PvY[M,WJ=KeK,MR", string3);
      
      String string4 = StringUtils.overlay("s|[vM[", "org.apache.commons.lang3.RegExUtils", 0, 0);
      assertEquals("org.apache.commons.lang3.RegExUtilss|[vM[", string4);
      
      StringUtils.substringAfterLast("", "U-0I_sa9{4d&NF");
      String string5 = StringUtils.defaultIfBlank("V", "org.apache.commons.lang3.RegExUtils");
      assertEquals("V", string5);
  }

  @Test(timeout = 4000)
  public void test960()  throws Throwable  {
      String string0 = StringUtils.rightPad("pV&d&F@?O[k", (-1948), "pV&d&F@?O[k");
      assertEquals("pV&d&F@?O[k", string0);
      
      String string1 = StringUtils.abbreviate("org.apache.commons.lang3.StringUtils5|5pGW#urA~r?~3", "pV&d&F@?O[k", (-1948), 126);
      assertEquals("org.apache.commons.lang3.StringUtils5|5pGW#urA~r?~3", string1);
  }

  @Test(timeout = 4000)
  public void test961()  throws Throwable  {
      String string0 = StringUtils.deleteWhitespace("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test962()  throws Throwable  {
      StringUtils.containsOnly((CharSequence) null, "k]uJp{mQ8S!");
      StringUtils.stripAccents((String) null);
      int[] intArray0 = StringUtils.toCodePoints((CharSequence) null);
      assertNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test963()  throws Throwable  {
      StringUtils.wrap("W~p/]:FDw`qEP(g{Xm", 'v');
      StringUtils.removeStart("vW~p/]:FDw`qEP(g{Xmv", "aD");
      StringUtils.unwrap("vW~p/]:FDw`qEP(g{Xmv", 'o');
      StringUtils.indexOf((CharSequence) "vW~p/]:FDw`qEP(g{Xmv", (-1179));
      StringUtils.repeat('v', (-1179));
      String string0 = StringUtils.removeAll((String) null, "vW~p/]:FDw`qEP(g{Xmv");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test964()  throws Throwable  {
      StringUtils.removeIgnoreCase(" ", "");
      int int0 = StringUtils.indexOf((CharSequence) " ", 4);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test965()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("pV&d&F@?O[k", "pV&d&F@?O[k", 550);
      assertNotNull(stringArray0);
      assertEquals(12, stringArray0.length);
      
      String string0 = StringUtils.rightPad("pV&d&F@?O[k", 22, "pV&d&F@?O[k");
      assertEquals("pV&d&F@?O[kpV&d&F@?O[k", string0);
      
      boolean boolean0 = StringUtils.isNumeric("pV&d&F@?O[k");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test966()  throws Throwable  {
      String string0 = StringUtils.swapCase("E2*1.s*OqQHFD&gQd9O");
      assertEquals("e2*1.S*oQqhfd&GqD9o", string0);
      
      String string1 = StringUtils.overlay("Of~n$Z*>85&", (String) null, 115, 115);
      assertEquals("Of~n$Z*>85&", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.toRootLowerCase("Of~n$Z*>85&");
      assertEquals("of~n$z*>85&", string2);
      
      String string3 = StringUtils.defaultIfBlank("U-0I_sa9{4d&NF", "X(GtxbA&,GC");
      assertEquals("U-0I_sa9{4d&NF", string3);
  }

  @Test(timeout = 4000)
  public void test967()  throws Throwable  {
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "c^P@NHM", (CharSequence) "c^P@NHM");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test968()  throws Throwable  {
      String string0 = StringUtils.remove("\r", "\r");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test969()  throws Throwable  {
      String string0 = StringUtils.replaceOnceIgnoreCase("", "", "");
      assertEquals("", string0);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("", '\u0086');
      assertNotNull(stringArray0);
      
      int int0 = StringUtils.lastIndexOfAny("", stringArray0);
      assertEquals((-1), int0);
      assertEquals(0, stringArray0.length);
      
      boolean boolean0 = StringUtils.isBlank("");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test970()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "java.lang.Object@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.Object@50d3e7ejava.lang.Object@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.Object@50d3e7e";
      stringArray0[1] = "java.lang.Object@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.Object@50d3e7ejava.lang.Object@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.Object@50d3e7e";
      stringArray0[2] = "java.lang.Object@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.Object@50d3e7ejava.lang.Object@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.Object@50d3e7e";
      stringArray0[3] = "java.lang.Object@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.Object@50d3e7ejava.lang.Object@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.Object@50d3e7e";
      String string0 = StringUtils.replaceEach("java.lang.Object@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.Object@50d3e7ejava.lang.Object@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.Object@50d3e7e", stringArray0, stringArray0);
      boolean boolean0 = StringUtils.isNumericSpace("java.lang.Object@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.Object@50d3e7ejava.lang.Object@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.Object@50d3e7e");
      String string1 = StringUtils.stripAccents("java.lang.Object@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.Object@50d3e7ejava.lang.Object@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.Object@50d3e7e");
      assertTrue(string1.equals((Object)string0));
      
      String string2 = StringUtils.replaceOnceIgnoreCase("java.lang.Object@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.Object@50d3e7ejava.lang.Object@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.Object@50d3e7ejava.lang.Object@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.Object@50d3e7ejava.lang.Object@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.Object@50d3e7e", "", "java.lang.Object@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.Object@50d3e7ejava.lang.Object@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.Object@50d3e7e");
      String string3 = StringUtils.overlay("java.lang.Object@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.Object@50d3e7ejava.lang.Object@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.Object@50d3e7e", "K_|d4?rO3lp`,uBW;", (-342), (-342));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      
      String string4 = StringUtils.substringAfterLast("java.lang.Object@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.Object@50d3e7ejava.lang.Object@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.Object@50d3e7ejava.lang.Object@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.Object@50d3e7ejava.lang.Object@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.Object@50d3e7e", "java.lang.Object@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.Object@50d3e7ejava.lang.Object@56b5c730java.lang.Object@1de495b1java.lang.Object@56b5c730java.lang.Object@56b5c730java.lang.Object@50d3e7e");
      assertFalse(string4.equals((Object)string2));
      assertEquals("", string4);
      
      String string5 = StringUtils.defaultIfBlank("", "$3]");
      assertEquals("$3]", string5);
      
      boolean boolean1 = StringUtils.isAnyEmpty(stringArray0);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test971()  throws Throwable  {
      String[] stringArray0 = new String[6];
      String string0 = StringUtils.strip(stringArray0[0]);
      assertNull(string0);
      
      String string1 = StringUtils.replaceOnceIgnoreCase("maxWith cannot be negative", " vs  vs ", " vs  vs ");
      assertEquals("maxWith cannot be negative", string1);
  }

  @Test(timeout = 4000)
  public void test972()  throws Throwable  {
      StringUtils.remove("$4'Tcj.*5", 'o');
      String string0 = StringUtils.SPACE;
      StringUtils.replaceIgnoreCase((String) null, "$4'Tcj.*5", "$4'Tcj.*5", 282);
      StringUtils.contains((CharSequence) "$4'Tcj.*5", (CharSequence) " ");
      int[] intArray0 = StringUtils.toCodePoints((CharSequence) null);
      assertNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test973()  throws Throwable  {
      StringUtils.rightPad("f>-l|^^'S`C", (-161), "V");
      String string0 = StringUtils.replaceIgnoreCase("V", "V", "Search and Replace array lengths don't match: ", Integer.MAX_VALUE);
      assertEquals("Search and Replace array lengths don't match: ", string0);
      
      StringUtils.contains((CharSequence) "f>-l|^^'S`C", (CharSequence) "Search and Replace array lengths don't match: ");
      StringUtils.repeat('n', 0);
      String string1 = StringUtils.stripAccents("$3]");
      assertEquals("$3]", string1);
      
      String string2 = StringUtils.replaceOnceIgnoreCase("", "Index: ", "$3]");
      assertEquals("", string2);
      
      String string3 = StringUtils.overlay("s|[vM[", "", 0, 0);
      assertEquals("s|[vM[", string3);
      
      String string4 = StringUtils.substringAfterLast("", "U-0I_sa9{4d&NF");
      assertFalse(string4.equals((Object)string3));
  }

  @Test(timeout = 4000)
  public void test974()  throws Throwable  {
      String string0 = StringUtils.overlay("_", "_", (-1201), (-1201));
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isEmpty("__");
      String string1 = StringUtils.capitalize("__");
      assertTrue(string1.equals((Object)string0));
      
      StringUtils.isEmpty("__");
      boolean boolean1 = StringUtils.isWhitespace("__");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test975()  throws Throwable  {
      String string0 = StringUtils.stripAccents("Comparator should not be null.");
      assertNotNull(string0);
      assertEquals("Comparator should not be null.", string0);
      
      double double0 = StringUtils.getJaroWinklerDistance("Comparator should not be null.", "/681Uu");
      assertEquals(0.4, double0, 0.01);
  }
}
