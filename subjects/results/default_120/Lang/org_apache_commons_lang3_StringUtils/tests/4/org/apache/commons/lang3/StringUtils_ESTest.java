/*
 * This file was automatically generated by EvoSuite
 * Fri Apr 30 15:11:25 GMT 2021
 */

package org.apache.commons.lang3;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.UnsupportedEncodingException;
import java.nio.Buffer;
import java.nio.ByteBuffer;
import java.nio.CharBuffer;
import java.nio.charset.Charset;
import java.nio.charset.IllegalCharsetNameException;
import java.nio.charset.UnsupportedCharsetException;
import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collection;
import java.util.Comparator;
import java.util.ConcurrentModificationException;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Iterator;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.ListIterator;
import java.util.Locale;
import java.util.PriorityQueue;
import java.util.ServiceLoader;
import java.util.Set;
import java.util.Spliterator;
import java.util.Stack;
import java.util.TreeSet;
import java.util.Vector;
import java.util.function.Consumer;
import java.util.function.Function;
import java.util.function.Supplier;
import java.util.function.UnaryOperator;
import java.util.regex.PatternSyntaxException;
import java.util.stream.Stream;
import org.apache.commons.lang3.StringUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class StringUtils_ESTest extends StringUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      StringUtils.substringAfter("q@F!X#Ug_t@", (-1344));
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.add("");
      linkedList0.add("Aborting to protect against StackOverflowError - output of one loop is the input of another");
      linkedList0.stream();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>(linkedList0);
      StringUtils.join((Iterable<?>) linkedHashSet0, '$');
      int[] intArray0 = new int[0];
      StringUtils.join(intArray0, '$');
      StringUtils.rightPad("TvDp)$Mry-EA7WqNj,", 32, "$Aborting to protect against StackOverflowError - output of one loop is the input of another");
      StringUtils.unwrap("Strings must not be null", "Object varargs must not be null");
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      Locale locale0 = Locale.GERMANY;
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.EXTENDED_FILTERING;
      Locale.filterTags((List<Locale.LanguageRange>) arrayList0, (Collection<String>) set0, locale_FilteringMode0);
      StringUtils.substringAfter("\n", 598);
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) 0;
      floatArray0[1] = (float) (-1);
      floatArray0[2] = (float) 'Y';
      floatArray0[3] = (float) 'Y';
      floatArray0[4] = (float) 598;
      StringUtils.strip("3-/J");
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      linkedHashSet0.add((String) null);
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      charSequenceArray0[0] = (CharSequence) "s?m(/";
      charSequenceArray0[1] = (CharSequence) " ";
      charSequenceArray0[2] = (CharSequence) "3-/J";
      StringUtils.isAllEmpty(charSequenceArray0);
      StringUtils.containsAny((CharSequence) "\r", (CharSequence) "s?m(/");
      StringUtils.removePattern("'qD41`", " ");
      StringUtils.substringAfterLast("...", 46);
      StringUtils.removeEnd(" ", "'qD41`");
      StringUtils.substringBetween("...", "/cU@t%)nyGG3SGpbZ");
      // Undeclared exception!
      try { 
        StringUtils.abbreviate("Strings must not be null", "s?m(/", 46, 10);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum abbreviation width with offset is 11
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      StringUtils.removeEnd("N-.;tIy|fN9\"", "jrV!");
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      charSequenceArray0[0] = (CharSequence) "N-.;tIy|fN9\"";
      charSequenceArray0[1] = (CharSequence) "jrV!";
      charSequenceArray0[2] = (CharSequence) "N-.;tIy|fN9\"";
      StringUtils.equalsAnyIgnoreCase("N-.;tIy|fN9\"", charSequenceArray0);
      int int0 = (-3101);
      // Undeclared exception!
      try { 
        StringUtils.getLevenshteinDistance(charSequenceArray0[1], charSequenceArray0[1], (-3101));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Threshold must not be negative
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      Locale locale0 = Locale.GERMANY;
      locale0.getUnicodeLocaleAttributes();
      byte[] byteArray0 = new byte[0];
      StringUtils.join(byteArray0, 's', (-1), (-1));
      StringUtils.lastOrdinalIndexOf("", "", (-1));
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) arrayList0;
      objectArray0[2] = (Object) stringUtils0;
      StringUtils.join(objectArray0, "\r");
      StringUtils.splitPreserveAllTokens("", 's');
      StringUtils.replaceFirst((String) null, "[]\r\rorg.apache.commons.lang3.StringUtils@1\r", "");
      Integer integer0 = new Integer(256);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      Locale locale0 = Locale.GERMANY;
      locale0.getUnicodeLocaleAttributes();
      locale0.getUnicodeLocaleAttributes();
      StringUtils.substring("", (-1), (-1));
      StringUtils.length("");
      StringUtils.abbreviate("", "", 77);
      CharSequence[] charSequenceArray0 = new CharSequence[6];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "\n";
      charSequenceArray0[2] = (CharSequence) " ";
      charSequenceArray0[3] = (CharSequence) "";
      charSequenceArray0[4] = (CharSequence) "\r";
      StringUtils.deleteWhitespace("\n");
      StringUtils.lastIndexOf((CharSequence) "", 256, 0);
      StringUtils.ordinalIndexOf("", "", 77);
      StringUtils.getLevenshteinDistance(charSequenceArray0[4], charSequenceArray0[0]);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      StringUtils.abbreviate("x[BEyAx", 10);
      StringUtils.removeStart("x[BEyAx", "x[BEyAx");
      StringUtils.getJaroWinklerDistance("", "");
      StringUtils.isBlank("");
      StringUtils.lastIndexOf((CharSequence) "x[BEyAx", 5950, 5950);
      StringUtils.join((byte[]) null, 'q', 5950, 5);
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short)161;
      shortArray0[1] = (short)76;
      shortArray0[2] = (short)2931;
      shortArray0[3] = (short) (-1155);
      shortArray0[4] = (short)138;
      StringUtils.join(shortArray0, 'q', (int) (short) (-1155), (int) (short) (-1155));
      CharSequence[] charSequenceArray0 = new CharSequence[9];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "";
      charSequenceArray0[2] = (CharSequence) "";
      charSequenceArray0[3] = (CharSequence) null;
      charSequenceArray0[4] = (CharSequence) "x[BEyAx";
      charSequenceArray0[5] = (CharSequence) "x[BEyAx";
      charSequenceArray0[6] = (CharSequence) "";
      charSequenceArray0[7] = (CharSequence) "x[BEyAx";
      StringUtils.join((Iterator<?>) null, 'q');
      charSequenceArray0[8] = (CharSequence) null;
      StringUtils.isAnyBlank(charSequenceArray0);
      Locale locale0 = Locale.ITALIAN;
      StringUtils.upperCase("`", locale0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      StringUtils.split("object", "9Y`]eiW^{x@Rl", 3);
      StringUtils.leftPad("object", 3);
      Locale locale0 = Locale.GERMANY;
      locale0.getUnicodeLocaleAttributes();
      StringUtils.substringBetween("IJ[>-hg9BsMG#l", "IJ[>-hg9BsMG#l");
      StringUtils.lowerCase("H^>WE");
      StringUtils.uncapitalize("object");
      StringUtils.splitPreserveAllTokens((String) null, " ", 12);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      short[] shortArray0 = new short[3];
      StringUtils.join(shortArray0, '!');
      StringUtils.ordinalIndexOf("0!0!0", "0!0!0", 156);
      StringUtils.indexOf((CharSequence) "0!0!0", (-1824));
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) (-1824);
      floatArray0[1] = (float) '!';
      floatArray0[2] = (float) (-1);
      floatArray0[3] = (-197.98013F);
      floatArray0[4] = (float) (-1);
      floatArray0[5] = (float) '!';
      floatArray0[6] = (float) (-1);
      floatArray0[7] = (float) (-1824);
      floatArray0[8] = (float) '!';
      StringUtils.join(floatArray0, '$', 156, 90);
      StringUtils.center("", (-1), '!');
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      StringUtils.stripStart("maxWith cannot be negative", "maxWith cannot be negative");
      StringUtils.getLevenshteinDistance((CharSequence) "", (CharSequence) "maxWith cannot be negative");
      StringUtils.equalsIgnoreCase("", "");
      long[] longArray0 = new long[4];
      longArray0[0] = (long) 26;
      longArray0[1] = (long) 26;
      longArray0[2] = (long) 26;
      longArray0[3] = (long) 26;
      StringUtils.join(longArray0, 't', Integer.MAX_VALUE, 26);
      StringUtils.chomp("");
      StringUtils.equals((CharSequence) "", (CharSequence) "");
      StringUtils.equalsIgnoreCase("", "");
      String[] stringArray0 = new String[0];
      StringUtils.stripAll(stringArray0);
      StringUtils.getDigits("&");
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[0] = null;
      int[] intArray0 = new int[9];
      intArray0[0] = (int) '9';
      intArray0[1] = (int) '9';
      StringUtils.replace((String) null, (String) null, "Hhy.f`}", 57);
      StringUtils.substringAfter((String) null, 30);
      StringUtils.length((CharSequence) null);
      StringUtils.stripStart("Hhy.f`}", (String) null);
      StringUtils.strip("Hhy.f`}", (String) null);
      StringUtils.toRootUpperCase(".$$ZyP3S;");
      StringUtils.isAllUpperCase(charSequenceArray0[0]);
      StringUtils.replaceAll("Hhy.f`}", (String) null, "ua[U0TPK");
      StringUtils.defaultIfEmpty((String) null, (String) null);
      StringUtils.chop((String) null);
      StringUtils.stripToEmpty(", '");
      StringUtils.isEmpty(charSequenceArray0[0]);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      StringUtils.upperCase("Minimum abbreviation width with offset is %d", (Locale) null);
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      StringUtils.mid("fyv$TYmh3$", 1632, 483);
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      StringUtils.getIfEmpty(".", supplier0);
      StringUtils.center("maxWith cannot be negative", 483, 'u');
      StringUtils.splitByCharacterTypeCamelCase("K3LKeY[($nDQ-Kg");
      StringUtils.rightPad("]", 1817);
      Vector<Integer> vector0 = new Vector<Integer>();
      StringUtils.join((Iterable<?>) vector0, "QnG");
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      StringUtils.split("object", "9Y`]eiW^{x@Rl", 3);
      StringUtils.leftPad("object", 3);
      StringUtils.splitPreserveAllTokens(" is not in the range '0' - '9'", "object");
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-5);
      byteArray0[1] = (byte)11;
      StringUtils.join((char[]) null, 'V');
      StringUtils.removeFirst("VR", " is not in the range '0' - '9'");
      StringUtils.leftPad("Locale must not be null", (-2857), "MIC4EhI<J}sRL");
      StringUtils.splitPreserveAllTokens("object", "hO#<?AT(P`'dZr%s3Locale must not be null", (int) (byte) (-5));
      StringUtils.strip((String) null);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      StringUtils.repeat(',', 711);
      StringUtils.isAlphanumericSpace(",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,");
      StringUtils.chop("z");
      StringUtils.substringAfterLast("\nQa4fE", 322);
      StringUtils.normalizeSpace("");
      StringUtils.deleteWhitespace("");
      StringUtils.split((String) null, "");
      StringUtils.countMatches((CharSequence) "\nQa4fE", (CharSequence) "");
      StringUtils.rightPad("", 1097, 'l');
      StringUtils.removeEnd("aX-1.0x-412.24x1.0x-2592.4207x-2730.193aX-1.0x-412.24x1.0x-2592.4207x-2730.193aX-1.0x-412.24x1.0x-2592.4207x-2730.193-1.0x-412.24x1.0x-2592.4207x-2730.193nt ", "\nQa4fE");
      StringUtils.indexOf((CharSequence) ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,", Integer.MAX_VALUE);
      StringUtils.endsWithAny("aX-1.0x-412.24x1.0x-2592.4207x-2730.193aX-1.0x-412.24x1.0x-2592.4207x-2730.193aX-1.0x-412.24x1.0x-2592.4207x-2730.193-1.0x-412.24x1.0x-2592.4207x-2730.193nt ", (CharSequence[]) null);
      StringUtils.isAnyBlank((CharSequence[]) null);
      StringUtils.indexOfDifference((CharSequence[]) null);
      StringUtils.lastIndexOf((CharSequence) "", 5777);
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) 322;
      floatArray0[1] = (float) 'l';
      // Undeclared exception!
      try { 
        StringUtils.join(floatArray0, 'l', 78, Integer.MAX_VALUE);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 78
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      Locale locale0 = Locale.GERMANY;
      locale0.getUnicodeLocaleAttributes();
      StringUtils.center("", (-275), (String) null);
      StringUtils.replace("tGn>7C$2P", " ", (String) null, 30);
      StringUtils.substringAfter("\n", 598);
      StringUtils.length("");
      StringUtils.stripStart("\r", "y;!/'jN");
      StringUtils.strip("\r", " ");
      StringUtils.toRootUpperCase("))");
      StringUtils.isAllUpperCase("W");
      StringUtils.defaultString("\n");
      StringUtils.defaultIfEmpty("", " ");
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short)2127;
      StringUtils.strip("SE#m YsvDD}Duej5+|", "SE#m YsvDD}Duej5+|");
      Object[] objectArray0 = new Object[0];
      StringUtils.join(objectArray0, '4', 1, (-827));
      Object object0 = new Object();
      Object object1 = new Object();
      StringUtils.join(objectArray0, '4', 718, 97);
      StringUtils.deleteWhitespace("");
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "";
      StringUtils.appendIfMissing((String) null, "", charSequenceArray0);
      StringUtils.containsAny((CharSequence) null, charSequenceArray0[1]);
      StringUtils.lastIndexOf(charSequenceArray0[0], (-637), 16);
      StringUtils.length("");
      StringUtils.equals((CharSequence) "", (CharSequence) "");
      StringUtils.split("", "Minimum abbreviation width with offset is %d");
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      StringUtils.wrapIfMissing("%d=7wr7,/{8", '`');
      Integer integer0 = new Integer('`');
      StringUtils.isWhitespace("rp$f");
      CharSequence[] charSequenceArray0 = new CharSequence[7];
      charSequenceArray0[0] = (CharSequence) "`%d=7wr7,/{8`";
      StringUtils.mid("Locale must not be null", '/', (int) integer0);
      StringUtils.substring("", (-3760));
      StringUtils.indexOfAny((CharSequence) "Locale must not be null", charSequenceArray0);
      StringUtils.removeStart("`%d=7wr7,/{8`", "=");
      StringUtils.getJaroWinklerDistance("rp$f", "");
      StringUtils.isBlank("");
      StringUtils.lastIndexOf((CharSequence) "Locale must not be null", (-3760), 101);
      StringUtils.join((byte[]) null, '/', (int) integer0, (-1));
      StringUtils.replaceChars((String) null, "", "N*#Sr6-nvC(jbi");
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      StringUtils.containsWhitespace("q@F!X#Ug_t@");
      StringUtils.substringAfter("q@F!X#Ug_t@", (-1344));
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.add("");
      linkedList0.add("Aborting to protect against StackOverflowError - output of one loop is the input of another");
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>(linkedList0);
      StringUtils.join((Iterable<?>) linkedHashSet0, '$');
      Stack<Locale.FilteringMode> stack0 = new Stack<Locale.FilteringMode>();
      StringUtils.join((List<?>) stack0, "", (-1344), (-2310));
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      StringUtils.trimToEmpty("\n");
      StringUtils.splitByWholeSeparator("", "\r", (-1));
      StringUtils.indexOfAny((CharSequence) "\r", "\r");
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      StringUtils.rightPad(" ", 0);
      StringUtils.repeat("\r", "\n", 49);
      StringUtils.replaceFirst(" ", "Kq'rBL0Rx0'n;X", " ");
      int int0 = new Integer(0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      String[] stringArray0 = StringUtils.split(" ");
      StringUtils.compareIgnoreCase(" ", " ");
      StringUtils.join((Object[]) stringArray0, " ");
      String[] stringArray1 = StringUtils.splitPreserveAllTokens("", 'I');
      StringUtils.getCommonPrefix(stringArray0);
      StringUtils.chop("");
      StringUtils.stripEnd("aO6S)!]+u", " Uh:*B;v+*E");
      Locale locale0 = Locale.CHINA;
      long[] longArray0 = new long[0];
      StringUtils.join(longArray0, '.');
      StringUtils.abbreviateMiddle("', is neither of type Map.Entry nor an Array", "aO6S)!]+u", '\'');
      StringUtils.equalsAny("", stringArray1);
      char[] charArray0 = new char[2];
      charArray0[0] = '4';
      charArray0[1] = '\'';
      StringUtils.indexOfAny((CharSequence) "=`%d=7wr7,/{8`Z", charArray0);
      Object object0 = new Object();
      StringUtils.joinWith("", stringArray0);
      StringUtils.deleteWhitespace("maxWith cannot be negative");
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      StringUtils.indexOfDifference((CharSequence[]) null);
      StringUtils.upperCase("5!EmBe5k");
      StringUtils.splitByWholeSeparator("5!EMBE5K", " ", (-1));
      char[] charArray0 = new char[9];
      charArray0[0] = '1';
      charArray0[1] = 'A';
      charArray0[2] = '1';
      charArray0[3] = '1';
      charArray0[4] = '1';
      charArray0[5] = 'A';
      charArray0[6] = '1';
      charArray0[8] = '1';
      StringUtils.join(charArray0, 'A');
      StringUtils.removeFirst("5!EmBe5k", (String) null);
      StringUtils.substringsBetween("1AAA1A1A1AAA1A\u0000A1", "5!EmBe5k", "+Z#&IO|qGtR8ufV");
      StringUtils.rightPad((String) null, 24);
      StringUtils.indexOfDifference((CharSequence) "5!EmBe5k", (CharSequence) "5!EmBe5k");
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      CharSequence charSequence0 = StringUtils.firstNonEmpty(charSequenceArray0);
      assertEquals(0, charSequenceArray0.length);
      assertNull(charSequence0);
      
      String string0 = StringUtils.swapCase("");
      assertNotNull(string0);
      assertEquals("", string0);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "kb>K:%lR&M+Fm2*/78", (CharSequence) null);
      assertEquals((-1), int0);
      
      String string1 = StringUtils.stripEnd(")!1XjMA#y,~aU", "");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(")!1XjMA#y,~aU", string1);
      
      int int1 = StringUtils.lastIndexOf((CharSequence) ")!1XjMA#y,~aU", 362, (-1));
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      String string2 = StringUtils.substringBeforeLast("kb>K:%lR&M+Fm2*/78", "kb>K:%lR&M+Fm2*/78");
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("", string2);
      
      String string3 = StringUtils.mid("", 64, 11);
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string0));
      assertNotNull(string3);
      assertEquals("", string3);
      
      String string4 = StringUtils.defaultString("kb>K:%lR&M+Fm2*/78");
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertNotNull(string4);
      assertEquals("kb>K:%lR&M+Fm2*/78", string4);
      
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) 256;
      floatArray0[1] = (float) (-1);
      floatArray0[3] = (float) (-5927);
      floatArray0[3] = (float) (-5927);
      floatArray0[4] = (float) 256;
      floatArray0[5] = (float) 0;
      floatArray0[6] = (float) 362;
      floatArray0[7] = (float) 64;
      floatArray0[8] = (float) 256;
      String string5 = StringUtils.join(floatArray0, '>', 1980, (-1));
      assertTrue(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertTrue(string5.equals((Object)string2));
      assertEquals(9, floatArray0.length);
      assertNotNull(string5);
      assertArrayEquals(new float[] {256.0F, (-1.0F), 0.0F, (-5927.0F), 256.0F, 0.0F, 362.0F, 64.0F, 256.0F}, floatArray0, 0.01F);
      assertEquals("", string5);
      
      String string6 = StringUtils.abbreviate("kb>K:%lR&M+Fm2*/78", "", (-674), 256);
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string5));
      assertTrue(string6.equals((Object)string4));
      assertNotNull(string6);
      assertEquals("kb>K:%lR&M+Fm2*/78", string6);
      
      StringUtils.getLevenshteinDistance((CharSequence) "", (CharSequence) "kb>K:%lR&M+Fm2*/78", 2);
      StringUtils.defaultIfBlank("#", "kb>K:%lR&M+Fm2*/78");
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) 1980;
      floatArray0[1] = 0.0F;
      floatArray0[2] = (float) 1980;
      floatArray0[3] = (float) 1980;
      floatArray0[4] = (float) 1980;
      floatArray0[5] = (float) 1980;
      floatArray0[6] = (float) 1980;
      floatArray0[7] = (float) 1980;
      floatArray0[8] = (float) 1980;
      StringUtils.join(floatArray0, '\\', (-406), (-2817));
      StringUtils.abbreviate("", "", 0, (-2187));
      StringUtils.getLevenshteinDistance((CharSequence) "", (CharSequence) "", 0);
      StringUtils.defaultIfBlank("Search and Replace array lengths don't match: ", "");
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      Locale locale0 = Locale.GERMANY;
      assertEquals("", locale0.getVariant());
      assertEquals("de_DE", locale0.toString());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("DE", locale0.getCountry());
      assertEquals("de", locale0.getLanguage());
      assertEquals("DEU", locale0.getISO3Country());
      assertNotNull(locale0);
      
      boolean boolean0 = StringUtils.isAsciiPrintable("");
      assertTrue(boolean0);
      
      Object[] objectArray0 = new Object[0];
      String string0 = StringUtils.remove("\r", 'U');
      assertNotNull(string0);
      assertEquals("\r", string0);
      
      String string1 = StringUtils.joinWith("Y", objectArray0);
      assertFalse(string1.equals((Object)string0));
      assertEquals(0, objectArray0.length);
      assertNotNull(string1);
      assertEquals("", string1);
      
      String string2 = StringUtils.repeat(" ", (int) 'U');
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("                                                                                     ", string2);
      
      String string3 = StringUtils.right("", (-1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      assertEquals("", string3);
      
      boolean boolean1 = StringUtils.isAllLowerCase("");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = StringUtils.isAlphanumericSpace("\r");
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
      
      boolean boolean3 = StringUtils.isMixedCase("");
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      String string0 = "";
      StringUtils.splitByCharacterTypeCamelCase("");
      StringUtils.equalsIgnoreCase("", "");
      Iterator<Locale.LanguageRange> iterator0 = (Iterator<Locale.LanguageRange>) mock(Iterator.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(iterator0).hasNext();
      StringUtils.join(iterator0, "");
      StringUtils.join((Iterator<?>) null, "/KEryYu");
      String string1 = "0fWH\\>.p<vpLWK_}";
      StringUtils.substringAfterLast("0fWH>.p<vpLWK_}", (-3894));
      // Undeclared exception!
      try { 
        StringUtils.getLevenshteinDistance((CharSequence) null, (CharSequence) "", (-3894));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      StringUtils.repeat('Q', 2);
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      StringUtils.difference("kb>K:%lR&M+Fm2*/78", "Array and element cannot both be null");
      String string0 = StringUtils.EMPTY;
      StringUtils.join((Object[]) charSequenceArray0, "=");
      StringUtils.endsWithIgnoreCase("QQ", "Array and element cannot both be null");
      StringUtils.capitalize("cE");
      StringUtils.isWhitespace("Array element ");
      StringUtils.center("QQ", 2, 'u');
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      Locale locale0 = Locale.GERMANY;
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.EXTENDED_FILTERING;
      Locale.filterTags((List<Locale.LanguageRange>) arrayList0, (Collection<String>) set0, locale_FilteringMode0);
      StringUtils.substringAfter("\n", 598);
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) 598;
      floatArray0[1] = (float) (-1);
      floatArray0[2] = (float) 'Y';
      floatArray0[3] = (float) 'Y';
      floatArray0[4] = (float) 598;
      StringUtils.join(floatArray0, 'Y', (-1), (-3901));
      StringUtils.center("\r", 32, "i cAC*VtBNwL^\"R");
      Locale locale1 = Locale.CANADA;
      Locale locale2 = Locale.forLanguageTag("");
      locale2.getUnicodeLocaleAttributes();
      StringUtils.substringAfter("", 997);
      StringUtils.length(" ");
      StringUtils.left("\r", (-1073741822));
      StringUtils.indexOfAnyBut((CharSequence) "", (CharSequence) "kcxSP%");
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      StringUtils.mid("`>fpkp=I?", 483, 1632);
      StringUtils.defaultString("N-OiSn0Rs>");
      StringUtils.equalsIgnoreCase("`>fpkp=I?", "&F)");
      StringUtils.equalsIgnoreCase("&F)", "N-OiSn0Rs>");
      CharSequence[] charSequenceArray0 = new CharSequence[6];
      charSequenceArray0[0] = (CharSequence) "&F)";
      String string0 = StringUtils.rightPad("`>fpkp=I?", 1943);
      charSequenceArray0[1] = (CharSequence) string0;
      charSequenceArray0[2] = (CharSequence) "&F)";
      charSequenceArray0[3] = (CharSequence) "";
      charSequenceArray0[4] = (CharSequence) "";
      StringUtils.toRootLowerCase(".");
      charSequenceArray0[5] = (CharSequence) ".";
      StringUtils.containsAny((CharSequence) "`>fpkp=I?", charSequenceArray0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("Supplied value must be a valid byte literal between -128 and 127: [");
      assertEquals(27, stringArray0.length);
      assertNotNull(stringArray0);
      
      boolean boolean0 = StringUtils.isAlphanumeric("Supplied value must be a valid byte literal between -128 and 127: [");
      assertFalse(boolean0);
      
      String[] stringArray1 = StringUtils.stripAll(stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(27, stringArray0.length);
      assertEquals(27, stringArray1.length);
      assertNotNull(stringArray1);
      
      String string0 = StringUtils.substringAfterLast("3cVDS7%sPY.d", "[5J#n[73#g[^2g");
      assertNotNull(string0);
      assertEquals("", string0);
      
      StringUtils.left("Supplied value must be a valid byte literal between -128 and 127: [", (-1142));
      long[] longArray0 = new long[2];
      longArray0[0] = (-1L);
      longArray0[1] = (long) (-1142);
      StringUtils.join(longArray0, 'y', 395, 395);
      String string1 = StringUtils.leftPad("\n", 3994, '!');
      char[] charArray0 = new char[8];
      charArray0[0] = 'z';
      charArray0[1] = 'y';
      charArray0[2] = 'y';
      charArray0[3] = 'y';
      charArray0[4] = '!';
      charArray0[5] = 'y';
      charArray0[6] = '!';
      charArray0[7] = 'y';
      // Undeclared exception!
      StringUtils.indexOfAnyBut((CharSequence) string1, charArray0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      String[] stringArray0 = StringUtils.split("object", "9Y`]eiW^{x@Rl", 3);
      StringUtils.strip("object", "object");
      StringUtils.substringsBetween("", "_ >{HP8q\"S", "IJ[>-hg9BsMG#l");
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-5);
      byteArray0[1] = (byte)11;
      byteArray0[2] = (byte)11;
      byteArray0[3] = (byte) (-5);
      StringUtils.replaceEachRepeatedly("9Y`]eiW^{x@Rl", stringArray0, (String[]) null);
      StringUtils.equalsAnyIgnoreCase("IJ[>-hg9BsMG#l", (CharSequence[]) null);
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      StringUtils.getFuzzyDistance("", "IJ[>-hg9BsMG#l", locale0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      StringUtils.stripStart("maxWith cannot be negative", "maxWith cannot be negative");
      StringUtils.getLevenshteinDistance((CharSequence) "", (CharSequence) "maxWith cannot be negative");
      StringUtils.equalsIgnoreCase("", "");
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      StringUtils.removePattern("&vQ8#A5?^S", "null/empty items");
      StringUtils.isNumeric("");
      StringUtils.indexOfDifference(charSequenceArray0);
      StringUtils.wrapIfMissing("maxWith cannot be negative", "Comparator should not be null.");
      StringUtils.substringBetween(", Length: 0", "org.apache.commons.lang3.CharSequenceUtils", "&vQ8#A5?^S");
      StringUtils.ordinalIndexOf(", Length: 0", (CharSequence) null, 51);
      char[] charArray0 = new char[3];
      charArray0[0] = '<';
      charArray0[1] = 'C';
      charArray0[2] = 's';
      StringUtils.indexOfAnyBut((CharSequence) "null/empty items", charArray0);
      StringUtils.indexOfIgnoreCase((CharSequence) "kZ", (CharSequence) "null/empty items", 51);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("Array element ", "Array element ");
      StringUtils.deleteWhitespace("Array element ");
      StringUtils.substringBetween("Array element ", "Arrayelement", "Arrayelement");
      StringUtils.chomp((String) null);
      StringUtils.removeEndIgnoreCase("Array element ", (String) null);
      StringUtils.firstNonBlank(stringArray0);
      StringUtils.countMatches((CharSequence) null, '=');
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      StringUtils.remove("QG$", '`');
      StringUtils.indexOf((CharSequence) "QG$", (CharSequence) "QG$", 40);
      long[] longArray0 = new long[3];
      longArray0[0] = 0L;
      StringUtils.stripEnd("QG$", (String) null);
      StringUtils.lastIndexOf((CharSequence) null, (-339), 32);
      StringUtils.substringBeforeLast("QG$", "QG$");
      StringUtils.substringBefore(";6_DtfnbvY!+LR}x$", 82);
      StringUtils.trimToEmpty("maxWith cannot be negative");
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      StringUtils.truncate("x}Pe.^gW=", 6, 122);
      StringUtils.strip("\n", "gW=");
      StringUtils.getDigits("org.apache.commons.lang3.StringUtils");
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      charSequenceArray0[0] = (CharSequence) "org.apache.commons.lang3.StringUtils";
      charSequenceArray0[1] = (CharSequence) "\n";
      charSequenceArray0[2] = (CharSequence) "org.apache.commons.lang3.StringUtils";
      charSequenceArray0[3] = (CharSequence) "\n";
      StringUtils.equalsAny("gW=", charSequenceArray0);
      StringUtils.lastIndexOf(charSequenceArray0[0], 6, 122);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      Locale locale0 = Locale.GERMANY;
      locale0.toLanguageTag();
      locale0.getUnicodeLocaleAttributes();
      byte[] byteArray0 = new byte[0];
      StringUtils.join(byteArray0, 's', (-1), (-1));
      StringUtils.indexOfDifference((CharSequence) " ", (CharSequence) "");
      StringUtils.split("", "F,*h/_\"B");
      StringUtils.indexOfIgnoreCase((CharSequence) "\n", (CharSequence) "\n", (-1));
      ArrayList<CharBuffer> arrayList0 = new ArrayList<CharBuffer>();
      StringUtils.rightPad("", Integer.MIN_VALUE, "\"-U/3tvEZiq'");
      StringUtils.center(" ", 99, "\"-U/3tvEZiq'");
      Locale locale1 = Locale.CANADA;
      locale1.getUnicodeLocaleAttributes();
      StringUtils.substringAfter("F,*h/_\"B", 0);
      StringUtils.length("*");
      StringUtils.left("MbclZ`zd]", 3658);
      StringUtils.indexOfAnyBut((CharSequence) "", (CharSequence) null);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      short[] shortArray0 = new short[7];
      StringUtils.center("null/empty items", (int) (short)0, "null/empty items");
      Locale locale0 = Locale.CANADA;
      locale0.getUnicodeLocaleKeys();
      locale0.getUnicodeLocaleAttributes();
      StringUtils.lastIndexOf((CharSequence) "=", 101, (int) (short)0);
      StringUtils.join((byte[]) null, 'C', 101, (int) (short)0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      StringUtils.split(":\"M%IsA5*[A");
      StringUtils.repeat("kb>K:%lR&M+Fm2*/78.", "Array elDement ", 125);
      StringUtils.wrap("the character ", '*');
      StringUtils.reverse("*the character *");
      StringUtils.isAnyEmpty(charSequenceArray0);
      StringUtils.isAlphanumeric("Array elDement ");
      StringUtils.difference("L}q`(GGXC5axA9kC(", "Locale must not be null");
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      StringUtils.lowerCase("null/empty items~4&4+2&FA");
      StringUtils.unwrap("x[BEyAxx[BEyAxx[...", "x[BEyAxx[BEyAxx[...");
      StringUtils.getLevenshteinDistance((CharSequence) "null/empty items~4&4+2&fa", (CharSequence) "null/empty items~4&4+2&fa", 22);
      StringUtils.rightPad("org.apache.commons.lang3.StringUtils", (-2640), "GdO[htbw}6Mc6.@E#)");
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      Locale locale0 = Locale.GERMANY;
      locale0.getUnicodeLocaleAttributes();
      byte[] byteArray0 = new byte[0];
      StringUtils.join(byteArray0, 's', (-1), (-1));
      Object[] objectArray0 = new Object[4];
      objectArray0[2] = (Object) stringUtils0;
      StringUtils.join(objectArray0, "\r");
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("", 'I');
      StringUtils.getCommonPrefix(stringArray0);
      StringUtils.chop(" ");
      StringUtils.stripEnd("!^z-:U", "193");
      StringUtils.wrapIfMissing("q`z", 'I');
      StringUtils.containsNone((CharSequence) "\n", "h}hI@ZQ6 ^mx6?L");
      StringUtils.indexOfAnyBut((CharSequence) "", (CharSequence) " ");
      StringUtils.substringAfter("\r\rorg.apache.commons.lang3.StringUtils@1\r", "D?,NFMlRh|/\"bG'E");
      Charset charset0 = Charset.defaultCharset();
      StringUtils.toEncodedString(byteArray0, charset0);
      StringUtils.indexOf((CharSequence) " ", (CharSequence) "");
      Charset.defaultCharset();
      // Undeclared exception!
      try { 
        Charset.forName("q`z");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // q`z
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      StringUtils.rightPad("The String must not be empty", (int) (byte)79, "!dds(>#05tu");
      StringUtils.center("*", (int) (byte)79, "The String must not be empty");
      Locale locale0 = Locale.CANADA;
      locale0.getScript();
      locale0.getUnicodeLocaleAttributes();
      StringUtils.substringAfter("maxWith cannot be negative", (int) (byte)79);
      String string0 = StringUtils.EMPTY;
      StringUtils.length("");
      StringUtils.left("kx<SP%", 0);
      StringUtils.indexOfAnyBut((CharSequence) "maxWith cannot be negative", (CharSequence) "null/empty items~4&4+2&FA");
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = '$';
      charArray0[1] = '$';
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      charSequenceArray0[0] = (CharSequence) "kb>K:%lR&M+Fm2*/78";
      StringUtils.rightPad("14@AzUu\"", 40, '$');
      charSequenceArray0[1] = (CharSequence) "14@AzUu\"$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$";
      charSequenceArray0[2] = (CharSequence) "kb>K:%lR&M+Fm2*/78";
      charSequenceArray0[3] = (CharSequence) "kb>K:%lR&M+Fm2*/78";
      StringUtils.firstNonBlank(charSequenceArray0);
      StringUtils.indexOf((CharSequence) "kb>K:%lR&M+Fm2*/78", (CharSequence) "kb>K:%lR&M+Fm2*/78", 2245);
      StringUtils.join((long[]) null, '$', 62, 55);
      StringUtils.equals(charSequenceArray0[1], (CharSequence) "14@AzUu\"$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$");
      StringUtils.equalsIgnoreCase("kb>K:%lR&M+Fm2*/78", "kb>K:%lR&M+Fm2*/78");
      String[] stringArray0 = new String[6];
      stringArray0[0] = "14@AzUu\"";
      stringArray0[1] = null;
      stringArray0[2] = "14@AzUu\"";
      stringArray0[3] = "14@AzUu\"";
      stringArray0[5] = "14@AzUu\"$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$";
      StringUtils.stripAll(stringArray0);
      StringUtils.getDigits("14@AzUu\"");
      StringUtils.join(charArray0, '');
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Integer integer0 = new Integer((-324));
      Integer integer1 = new Integer((-324));
      char[] charArray0 = new char[1];
      charArray0[0] = 'h';
      StringUtils.valueOf(charArray0);
      StringUtils.getDigits("6w#yEdv|M/NKamq&Rr");
      StringUtils.isBlank("h");
      StringUtils.countMatches((CharSequence) "6w#yEdv|M/NKamq&Rr", 'h');
      StringUtils.rightPad("]P", 25, "TkC=%S");
      Locale locale0 = Locale.KOREAN;
      locale0.getUnicodeLocaleAttributes();
      StringUtils.substringAfter("[Z}gBgZK>\"6f30zu|Do", 4113);
      StringUtils.length("]PTkC=%STkC=%STkC=%STkC=%");
      StringUtils.left("TkC=%S", (-19));
      StringUtils.unwrap("Threshold must not be negative", 'W');
      StringUtils.indexOfAnyBut((CharSequence) "6w#yEdv|M/NKamq&Rr", (CharSequence) "Threshold must not be negative");
      StringUtils.join((long[]) null, 'h', 25, 25);
      // Undeclared exception!
      try { 
        Charset.forName("");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // 
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      StringUtils.stripAccents("");
      CharSequence[] charSequenceArray0 = new CharSequence[8];
      StringUtils.join((char[]) null, '3');
      charSequenceArray0[0] = (CharSequence) null;
      charSequenceArray0[1] = (CharSequence) " is not in the range '0' - '9'";
      charSequenceArray0[2] = (CharSequence) "";
      charSequenceArray0[3] = (CharSequence) "";
      charSequenceArray0[4] = (CharSequence) " is not in the range '0' - '9'";
      charSequenceArray0[5] = (CharSequence) " is not in the range '0' - '9'";
      charSequenceArray0[6] = (CharSequence) " is not in the range '0' - '9'";
      charSequenceArray0[7] = (CharSequence) "";
      StringUtils.endsWithAny(" is not in the range '0' - '9'", charSequenceArray0);
      StringUtils.remove("", 'V');
      StringUtils.indexOfIgnoreCase((CharSequence) "", (CharSequence) "");
      StringUtils.substringBefore("org.apache.commons.lang3.StringUtils", 956);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      StringUtils.join(objectArray0);
      StringUtils.reverse("");
      StringUtils.containsWhitespace("Pl'I0C0]FVY*{:`jr{`");
      StringUtils.substringAfter("^f*uy+K+)I8=wl4", 48);
      StringUtils.truncate("R(<C", 751);
      StringUtils.indexOfDifference((CharSequence) "", (CharSequence) "^f*uy+K+)I8=wl4");
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      StringUtils.join((List<?>) linkedList0, '2', 3243, 3243);
      Object object0 = new Object();
      StringUtils.leftPad((String) null, 0, "");
      StringUtils.indexOf((CharSequence) "", (-2460));
      long[] longArray0 = new long[3];
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      linkedList0.removeLastOccurrence(locale_FilteringMode0);
      longArray0[0] = (long) 3243;
      longArray0[1] = (long) 48;
      longArray0[2] = (long) (-2460);
      // Undeclared exception!
      try { 
        StringUtils.join(longArray0, '=', (-1), 57);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      StringUtils.leftPad("Supplied value must be a valid byte literal between -128 and 127: [", (int) 'g', 'g');
      String[] stringArray0 = StringUtils.splitByCharacterType("Supplied value must be a valid byte literal between -128 and 127: [");
      StringUtils.rightPad(".", (-2518), "org.apache.commons.lang3.CharSequenceUtils");
      Object object0 = new Object();
      Object object1 = new Object();
      StringUtils.deleteWhitespace("object");
      StringUtils.isAnyBlank(stringArray0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      Locale locale0 = Locale.GERMANY;
      locale0.toLanguageTag();
      locale0.getUnicodeLocaleAttributes();
      byte[] byteArray0 = new byte[0];
      StringUtils.join(byteArray0, 's', (-1), (-1));
      StringUtils.indexOfDifference((CharSequence) " ", (CharSequence) "");
      StringUtils.split("", "F,*h/_\"B");
      StringUtils.indexOfIgnoreCase((CharSequence) "\n", (CharSequence) "\n", (-1));
      ArrayList<CharBuffer> arrayList0 = new ArrayList<CharBuffer>();
      StringUtils.defaultString("");
      StringUtils.equalsIgnoreCase("F,*h/_\"B", " ");
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      StringUtils.left("HY ", 1510);
      StringUtils.defaultString("HY ");
      String string0 = "ch";
      StringUtils.replacePattern("ch", "ch", "HY ");
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      String[] stringArray0 = new String[0];
      StringUtils.replaceEachRepeatedly("HY ", stringArray0, stringArray0);
      charSequenceArray0[0] = (CharSequence) "HY ";
      charSequenceArray0[1] = (CharSequence) "HY ";
      charSequenceArray0[2] = (CharSequence) "HY ";
      charSequenceArray0[3] = (CharSequence) "HY ";
      StringUtils.equalsAnyIgnoreCase("HY ", charSequenceArray0);
      char[] charArray0 = new char[6];
      charArray0[0] = '+';
      charArray0[1] = '2';
      charArray0[2] = '{';
      charArray0[3] = '1';
      charArray0[4] = 'E';
      charArray0[5] = 'U';
      StringUtils.indexOfAnyBut(charSequenceArray0[2], charArray0);
      StringUtils.split("HY ", '{');
      PriorityQueue<Integer> priorityQueue0 = new PriorityQueue<Integer>(64);
      StringUtils.join((Iterable<?>) priorityQueue0, "");
      // Undeclared exception!
      try { 
        Charset.forName(" -RF#<f");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         //  -RF#<f
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      StringUtils.abbreviate("org.apache.commons.lang3.Charsets", 43, 43);
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) 43;
      StringUtils.join(floatArray0, '/', 71, (-831));
      StringUtils.replaceAll("org.apache.commons.lang3.Charsets", "", "");
      StringUtils.equalsIgnoreCase("org.apache.commons.lang3.Charsets", "org.apache.commons.lang3.Charsets");
      String string0 = "QXSeGT?hby:W2sXe(";
      Locale locale0 = Locale.CHINESE;
      locale0.getDisplayScript();
      locale0.getExtensionKeys();
      LinkedHashSet<Locale> linkedHashSet0 = new LinkedHashSet<Locale>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      // Undeclared exception!
      try { 
        Locale.filter((List<Locale.LanguageRange>) null, (Collection<Locale>) linkedHashSet0, locale_FilteringMode0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[9];
      StringUtils.strip("org.apache.commons.lang3.RegExUtils");
      charSequenceArray0[1] = (CharSequence) "org.apache.commons.lang3.RegExUtils";
      charSequenceArray0[2] = (CharSequence) "org.apache.commons.lang3.RegExUtils";
      charSequenceArray0[3] = (CharSequence) "org.apache.commons.lang3.RegExUtils";
      charSequenceArray0[5] = (CharSequence) "org.apache.commons.lang3.RegExUtils";
      StringUtils.join((Object[]) charSequenceArray0, ']');
      StringUtils.countMatches(charSequenceArray0[3], charSequenceArray0[5]);
      StringUtils.remove("org.apache.commons.lang3.RegExUtils", 'l');
      CharSequence[] charSequenceArray1 = new CharSequence[0];
      StringUtils.isAlphaSpace("org.apache.commons.lang3.RegExUtils");
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      StringUtils.indexOfDifference((CharSequence[]) null);
      StringUtils.upperCase("5!Em5k");
      StringUtils.splitByWholeSeparator("5!EM5K", " ", (-1));
      char[] charArray0 = new char[9];
      charArray0[0] = '1';
      charArray0[1] = 'A';
      charArray0[2] = '1';
      charArray0[3] = '1';
      charArray0[4] = '1';
      charArray0[5] = 'A';
      charArray0[6] = '1';
      charArray0[7] = '1';
      charArray0[8] = '1';
      StringUtils.join(charArray0, 'A');
      StringUtils.removeFirst("5!Em5k", (String) null);
      StringUtils.join((Object[]) null, "5!Em5k", (-1), 102);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      StringUtils.abbreviate("x[BEyAx", 5);
      StringUtils.getJaroWinklerDistance("x[BEyAx", "x[...");
      long[] longArray0 = new long[3];
      longArray0[0] = (long) 322;
      StringUtils.capitalize((String) null);
      StringUtils.leftPad("The type must not be null", 21, "LYwYjr2<");
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      StringUtils.getIfEmpty("The type must not be null", supplier0);
      StringUtils.uncapitalize("Array element ");
      StringUtils.containsAny((CharSequence) null, (char[]) null);
      StringUtils.join((Object[]) null, "bha^k4\u0003H2rWUSO7S5", 108, 0);
      StringUtils.remove("p{InCombiningDiacriticalMarks}+", 'I');
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Locale locale0 = new Locale("...", "TTException cloning Cloneable type ");
      locale0.getUnicodeLocaleAttributes();
      StringUtils.substring("...", 64, 598);
      StringUtils.length("maxWith cannot be negative");
      StringUtils.abbreviate((String) null, "TTException cloning Cloneable type ", 256);
      StringUtils.deleteWhitespace("maxWith cannot be negative");
      StringUtils.lastIndexOf((CharSequence) "TTException cloning Cloneable type ", 1220, 26);
      StringUtils.ordinalIndexOf((CharSequence) null, "", 8192);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      StringUtils.substringAfterLast("Supplied value must be a valid byte literal between -128 and 127: [", "Supplied value must be a valid byte literal between -128 and 127: [");
      char[] charArray0 = new char[3];
      charArray0[0] = ')';
      charArray0[0] = ')';
      StringUtils.containsAny((CharSequence) "", charArray0);
      StringUtils.deleteWhitespace("");
      StringUtils.stripAccents("Supplied value must be a valid byte literal between -128 and 127: [");
      StringUtils.contains((CharSequence) "", (CharSequence) "Supplied value must be a valid byte literal between -128 and 127: [");
      StringUtils.splitByWholeSeparatorPreserveAllTokens("", "wS,[ yL,p");
      StringUtils.abbreviate("Supplied value must be a valid byte literal between -128 and 127: [", "Supplied value must be a valid byte literal between -128 and 127: [", (-201), 65536);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      StringUtils.join((byte[]) null, 'A');
      String[] stringArray0 = StringUtils.split(" ", "null/empty items", (int) (short)2);
      StringUtils.prependIfMissingIgnoreCase("H3", "H3", stringArray0);
      StringUtils.lowerCase("YT");
      StringUtils.splitByWholeSeparator((String) null, "null/empty items", 1576);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[6];
      charSequenceArray0[0] = (CharSequence) "kb>K:%lR&M+Fm2*/78";
      StringUtils.stripToNull("O");
      charSequenceArray0[1] = (CharSequence) "O";
      charSequenceArray0[2] = (CharSequence) "kb>K:%lR&M+Fm2*/78";
      StringUtils.isAnyEmpty(charSequenceArray0);
      StringUtils.isAllUpperCase("kb>K:%lR&M+Fm2*/78");
      StringUtils.difference("kb>K:%lR&M+Fm2*/78", "kb>K:%lR&M+Fm2*/78");
      StringUtils.substringBefore((String) null, 1339);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = 13;
      StringUtils.isMixedCase("(g^. 'zpD'x[.&?");
      StringUtils.substringBetween(" ", (String) null);
      StringUtils.lowerCase("#pzZ5CE</bj5C3");
      StringUtils.uncapitalize("=q@F!X#Ug_t@7eq3P]P}dcFH>x");
      String[] stringArray0 = StringUtils.splitPreserveAllTokens(" ", (String) null, 0);
      StringUtils.remove((String) null, "=q@F!X#Ug_t@7eq3P]P}dcFH>x");
      Stack<Object> stack0 = new Stack<Object>();
      stack0.add((Object) " ");
      Iterator<Object> iterator0 = stack0.iterator();
      StringUtils.join(iterator0, "#pzz5ce</bj5c3");
      StringUtils.isAnyEmpty(stringArray0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short)2127;
      StringUtils.strip("KO)(uo0>#;Ny", "KO)(uo0>#;Ny");
      Object[] objectArray0 = new Object[0];
      StringUtils.join(objectArray0, '4', 1, (-827));
      Object object0 = new Object();
      StringUtils.indexOfAny((CharSequence) "KO)(uo0>#;Ny", "");
      StringUtils.overlay("KO)(uo0>#;Ny", "KO)(uo0>#;Ny", (-1), 1);
      StringUtils.wrapIfMissing("...", "...");
      StringUtils.stripAll((String[]) null, "");
      StringUtils.leftPad("", (-985), "R[_Z");
      StringUtils.abbreviate("", (-711), 256);
      StringUtils.substringBefore("[7A!", "KO)(uo0>#;Ny");
      StringUtils.normalizeSpace("");
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = '8';
      charArray0[1] = '5';
      charArray0[2] = 'l';
      charArray0[3] = 'T';
      StringUtils.stripEnd("O", "O");
      StringUtils.abbreviate("Locale must not be null", "O", 1986, 1986);
      StringUtils.containsNone((CharSequence) "Locale must not be null", charArray0);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)89;
      // Undeclared exception!
      try { 
        StringUtils.toString(byteArray0, "O");
        fail("Expecting exception: UnsupportedCharsetException");
      
      } catch(UnsupportedCharsetException e) {
         //
         // O
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "=";
      stringArray0[1] = "=";
      stringArray0[2] = "=";
      stringArray0[3] = "=";
      stringArray0[4] = "=";
      StringUtils.join((int[]) null, '}');
      StringUtils.indexOfAny((CharSequence) null, (CharSequence[]) stringArray0);
      StringUtils.removeStart((String) null, "zyvL+TOEI");
      StringUtils.ordinalIndexOf("=", "=", (-1));
      StringUtils.isAsciiPrintable("=");
      StringUtils.countMatches((CharSequence) "=", '}');
      StringUtils.substring("=", (-1), (-2595));
      StringUtils.abbreviateMiddle("$", (String) null, (-1));
      StringUtils.mid("=", (-2228), 69);
      StringUtils.stripToNull("_");
      StringUtils.joinWith("=", stringArray0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      StringUtils.wrapIfMissing("%d=7wr7,/{8", '`');
      StringUtils.lastIndexOfIgnoreCase((CharSequence) "rp$f", (CharSequence) "`%d=7wr7,/{8`");
      StringUtils.isWhitespace("rp$f");
      CharSequence[] charSequenceArray0 = new CharSequence[7];
      charSequenceArray0[0] = (CharSequence) "`%d=7wr7,/{8`";
      StringUtils.rightPad("Locale must not be null", (-1), '/');
      StringUtils.substring("Locale must not be null", (-3760));
      StringUtils.indexOfAny((CharSequence) "Locale must not be null", charSequenceArray0);
      StringUtils.removeStart("`%d=7wr7,/{8`", "=");
      StringUtils.ordinalIndexOf("`%d=7wr7,/{8`", "=", '`');
      StringUtils.isAsciiPrintable("%d=7wr7,/{8");
      StringUtils.countMatches((CharSequence) "Locale must not be null", '/');
      StringUtils.substring("Locale must not be null", (-1), (-1));
      StringUtils.abbreviateMiddle("Locale must not be null", "`%d=7wr7,/{8`", (-1));
      StringUtils.mid("_", (-3760), (-2228));
      StringUtils.stripToNull("|c");
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)51;
      byteArray0[1] = (byte)51;
      byteArray0[2] = (byte)51;
      byteArray0[3] = (byte)51;
      byteArray0[4] = (byte) (-12);
      StringUtils.join(byteArray0, ':');
      String[] stringArray0 = StringUtils.split("", "51:51:51:51:-12", (int) (byte) (-12));
      StringUtils.prependIfMissingIgnoreCase("6)h)uW>", "#pzZ5CE</bj5C3", stringArray0);
      StringUtils.lowerCase("e*j)gaK");
      String string0 = "8zN:Xe=7WA=c(\\u8G?";
      StringUtils.splitByWholeSeparator((String) null, string0, (int) (byte)51);
      StringUtils.abbreviate((String) null, 13);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      StringUtils.substringBefore((String) null, (-1));
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      StringUtils.trimToEmpty("\n");
      StringUtils.splitByWholeSeparator("", "\r", (-1));
      StringUtils.substring("", 0, 0);
      StringUtils.overlay("", "\r", 0, (-1));
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      StringUtils.compare("Z", "=`%d=7wr7,/{8`");
      StringUtils.substring("ghhfOQ!a{@M#22", 29);
      StringUtils.leftPad("h", 48);
      StringUtils.wrapIfMissing("=`%d=7wr7,/{8`", "Z");
      int[] intArray0 = new int[0];
      StringUtils.join(intArray0, 'z', 1757, 438);
      StringUtils.unwrap("maxWith cannot be negative", "");
      StringUtils.join(intArray0, 'S');
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      Locale locale0 = Locale.GERMANY;
      locale0.getUnicodeLocaleAttributes();
      StringUtils.replace("tGn>7C$2P", " ", (String) null, 30);
      StringUtils.substringAfter("\n", (-1));
      StringUtils.length("");
      StringUtils.stripStart("\r", "y;!/'jN");
      StringUtils.strip("\r", " ");
      StringUtils.toRootUpperCase("))");
      StringUtils.isAllUpperCase("W");
      StringUtils.splitByWholeSeparator(".", "\n", 1574);
      StringUtils.substring((String) null, 1504, 1574);
      StringUtils.substringAfterLast("vN", (-1));
      StringUtils.center("M5>QRH_t`,Tv?5QaX-", 14);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      StringUtils.capitalize("");
      StringUtils.isAllUpperCase("");
      StringUtils.indexOfDifference((CharSequence) "", (CharSequence) "");
      StringUtils.split("Search and Replace array lengths don't match: ", "");
      StringUtils.indexOfIgnoreCase((CharSequence) "", (CharSequence) "", (-1));
      StringUtils.isWhitespace("");
      StringUtils.join((double[]) null, 'P', 0, 0);
      char[] charArray0 = new char[9];
      charArray0[0] = 'P';
      charArray0[1] = '.';
      charArray0[2] = 'P';
      charArray0[3] = 'K';
      charArray0[4] = 'P';
      charArray0[5] = 'P';
      charArray0[6] = 'P';
      charArray0[7] = 'P';
      charArray0[8] = 'P';
      StringUtils.indexOfAnyBut((CharSequence) "Search and Replace array lengths don't match: ", charArray0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      StringUtils.stripAccents("");
      StringUtils.wrap(" is not in the range '0' - '9'", '3');
      StringUtils.substringsBetween("", "3 is not in the range '0' - '9'3", "3 is not in the range '0' - '9'3");
      StringUtils.splitPreserveAllTokens(" is not in the range '0' - '9'", "");
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      linkedHashSet0.add("Cannot clone Cloneable type ");
      StringUtils.strip("9", "Cannot clone Cloneable type ");
      StringUtils.indexOfAny((CharSequence) "Cannot clone Cloneable type ", "");
      PriorityQueue<Object> priorityQueue0 = new PriorityQueue<Object>();
      StringUtils.join((Iterable<?>) linkedHashSet0, '3');
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      StringUtils.stripAccents("");
      StringUtils.substringsBetween("", "", "");
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      linkedHashSet0.add("Cannot clone Cloneable type ");
      StringUtils.strip("", "Cannot clone Cloneable type ");
      StringUtils.indexOfAny((CharSequence) "Cannot clone Cloneable type ", "");
      PriorityQueue<Object> priorityQueue0 = new PriorityQueue<Object>();
      StringUtils.join((Iterable<?>) linkedHashSet0, '3');
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      StringUtils.substringBetween("Z", "Z", "org.apache.commons.lang3.CharSequenceUtils");
      StringUtils.center((String) null, 12, 'z');
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      Iterator<Integer> iterator0 = arrayList0.iterator();
      arrayList0.add((Integer) null);
      // Undeclared exception!
      try { 
        StringUtils.join(iterator0, 'D');
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList$Itr", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = 'Q';
      StringUtils.substringBetween("H^>WE", (String) null);
      StringUtils.lowerCase("=q@F!X#Ug_t@7eq3P]P}dcFH>x");
      StringUtils.uncapitalize((String) null);
      StringUtils.splitPreserveAllTokens("=q@F!X#Ug_t@7eq3P]P}dcFH>x", (String) null, 0);
      StringUtils.remove("Arguments cannot both be null", (String) null);
      Iterator<Locale.LanguageRange> iterator0 = (Iterator<Locale.LanguageRange>) mock(Iterator.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(iterator0).hasNext();
      StringUtils.join(iterator0, (String) null);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      int int0 = 16;
      // Undeclared exception!
      try { 
        StringUtils.getLevenshteinDistance((CharSequence) null, (CharSequence) null, 16);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      StringUtils.compareIgnoreCase("=`%d=7wr7,/{8`", "Z");
      StringUtils.leftPad("", (-61), '{');
      StringUtils.capitalize("G,8)LV*9%gd?%zd");
      StringUtils.substringAfterLast("ghhfOQ!a{@M#22", "]Oqa\"n.iL&");
      StringUtils.join((char[]) null, '{');
      StringUtils.removeFirst("offset cannot be negative", "gS_Qg&");
      StringUtils.rotate("comparator", (-1381));
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      byte[] byteArray0 = new byte[0];
      StringUtils.join(byteArray0, 's', (-1), (-1));
      StringUtils.lastOrdinalIndexOf("", "", (-1));
      Object[] objectArray0 = new Object[4];
      objectArray0[2] = (Object) stringUtils0;
      StringUtils.join(objectArray0, "\r");
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("", 'I');
      StringUtils.getCommonPrefix(stringArray0);
      StringUtils.leftPad("", (-561));
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      StringUtils.toRootLowerCase("");
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      StringUtils.substringBeforeLast("", "");
      CharSequence[] charSequenceArray0 = new CharSequence[7];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[2] = (CharSequence) "";
      charSequenceArray0[6] = (CharSequence) "";
      charSequenceArray0[4] = (CharSequence) "";
      char[] charArray0 = new char[5];
      charArray0[2] = '7';
      charArray0[1] = '7';
      charArray0[2] = '7';
      charArray0[3] = '7';
      charArray0[4] = '5';
      StringUtils.containsAny(charSequenceArray0[6], charArray0);
      StringUtils.deleteWhitespace("Array and element cannot both be null");
      StringUtils.stripAccents("");
      Class<Object> class0 = Object.class;
      ServiceLoader.loadInstalled(class0);
      StringUtils.removeEnd("M5>QRH_t`,Tv?5Q", "aX-");
      StringUtils.appendIfMissing(".", charSequenceArray0[0], charSequenceArray0);
      StringUtils.getJaroWinklerDistance(".", ".");
      StringUtils.splitByWholeSeparator("", "Z=`%d=7wr7,/{8`");
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      StringUtils.replaceIgnoreCase("N-OiSn0Rs>", "N-OiSn0Rs>", "ghhfOQ!a{@M#22", 102);
      StringUtils.swapCase("N-OiSn0Rs>");
      StringUtils.splitByCharacterTypeCamelCase("?::<");
      StringUtils.normalizeSpace((String) null);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      StringUtils.compare("Z", "=`%d=7wr7,/{8`");
      StringUtils.substring("ghhfOQ!a{@M#22", 29);
      StringUtils.leftPad("h", 48);
      StringUtils.wrapIfMissing("=`%d=7wr7,/{8`", "Z");
      StringUtils.capitalize("offset cannot be negative");
      StringUtils.isWhitespace("                                               h");
      StringUtils.center("rWqZ$sAY6hjs", 2, 'z');
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[0] = (CharSequence) "Offset cannot be negative";
      charSequenceArray0[1] = (CharSequence) "rWqZ$sAY6hjs";
      StringUtils.isAllEmpty(charSequenceArray0);
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier0).get();
      StringUtils.getIfBlank("", supplier0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Locale locale0 = Locale.GERMANY;
      locale0.getDisplayLanguage();
      locale0.toLanguageTag();
      locale0.getUnicodeLocaleAttributes();
      long[] longArray0 = new long[0];
      StringUtils.join(longArray0, 'E', 55, (-2902));
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      StringUtils.firstNonBlank(charSequenceArray0);
      StringUtils.removeStart("de-DE", "de-DE");
      StringUtils.substringBeforeLast("Z'_O^?a", "Aborting to protect against StackOverflowError - output of one loop is the input of another");
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier0).get();
      StringUtils.getIfBlank("\n", supplier0);
      StringUtils.indexOf((CharSequence) null, 100);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      Locale locale0 = Locale.GERMANY;
      locale0.getUnicodeLocaleAttributes();
      StringUtils.replace("tGn>7C$2P", " ", (String) null, 30);
      StringUtils.substringAfter("\n", 598);
      StringUtils.length("");
      StringUtils.stripStart("\r", "y;!/'jN");
      StringUtils.strip("\r", " ");
      StringUtils.toRootUpperCase("))");
      StringUtils.isAllUpperCase("W");
      StringUtils.defaultString("ULV@FU?gjC\"t\"OT");
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      StringUtils.trimToEmpty(":W3vjMB@");
      String[] stringArray0 = StringUtils.splitByWholeSeparator(":W3vjMB@", ":W3vjMB@", 0);
      String string0 = StringUtils.LF;
      StringUtils.removeEnd("\n", "g{J.B6[Bmhg<");
      StringUtils.center("clonecloneThreshold must not be negative", 0);
      StringUtils.indexOfDifference((CharSequence) "\n", (CharSequence) "clonecloneThreshold must not be negative");
      StringUtils.replaceIgnoreCase("clonecloneThreshold must not be negative", "org.apache.com", "org.apache.commons.lang3.Charsets", (-904));
      StringUtils.equals((CharSequence) "\n", (CharSequence) "clonecloneThreshold must not be negative");
      StringUtils.lastIndexOfAny("clonecloneThreshold must not be negative", stringArray0);
      StringUtils.capitalize("N@~}");
      StringUtils.chomp((String) null);
      StringUtils.leftPad("193", 0, '$');
      StringUtils.isEmpty("193");
      StringUtils.wrap((String) null, "<D");
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      String string0 = "object";
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) "object";
      objectArray0[1] = (Object) "9Y`]eiW^{x@Rl";
      objectArray0[1] = (Object) "object";
      StringUtils.wrapIfMissing("9Y`]eiW^{x@Rl", "9Y`]eiW^{x@Rl");
      int[] intArray0 = new int[3];
      intArray0[0] = 438;
      intArray0[1] = 438;
      intArray0[2] = 438;
      // Undeclared exception!
      try { 
        StringUtils.join(intArray0, ')', (-1542), (-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1542
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      char[] charArray0 = new char[6];
      String string0 = StringUtils.EMPTY;
      StringUtils.containsOnly((CharSequence) "", charArray0);
      StringUtils.indexOfAny((CharSequence) "Cannot clone Cloneable type ", "Cannot clone Cloneable type ");
      StringUtils.overlay("Ua?mb}f0G~y", "T", 1574, (-13));
      StringUtils.wrapIfMissing("T", "T");
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      StringUtils.chop("Search and Replace array lengths don't match: ");
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      StringUtils.getDigits("9-5y1iX{EX`M@KK#[b");
      StringUtils.isAllEmpty((CharSequence[]) null);
      StringUtils.endsWithAny("951", (CharSequence[]) null);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 3.0;
      doubleArray0[1] = 3.0;
      StringUtils.difference("9-5y1iX{EX`M@KK#[b", "Search and Replace array lengths don't match:");
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      StringUtils.compareIgnoreCase("=`%d=7wr7,/{8`", "Z");
      StringUtils.strip("=`%d=7wr7,/{8`", "ghhfOQ!a{@M#22");
      StringUtils.trimToNull(";8zDq3%~Tc!");
      CharSequence[] charSequenceArray0 = new CharSequence[7];
      charSequenceArray0[0] = (CharSequence) "=`%d=7wr7,/{8`";
      charSequenceArray0[1] = (CharSequence) ";8zDq3%~Tc!";
      charSequenceArray0[2] = (CharSequence) "=`%d=7wr7,/{8`";
      charSequenceArray0[3] = (CharSequence) "ghhfOQ!a{@M#22";
      charSequenceArray0[4] = (CharSequence) "Z";
      charSequenceArray0[5] = (CharSequence) "=`%d=7wr7,/{8`";
      charSequenceArray0[6] = (CharSequence) "=`%d=7wr7,/{8`";
      StringUtils.indexOfDifference(charSequenceArray0);
      StringUtils.split(";8zDq3%~Tc!");
      int int0 = StringUtils.INDEX_NOT_FOUND;
      StringUtils.abbreviateMiddle(";8zDq3%~Tc!", ";8zDq3%~Tc!", (-1));
      StringUtils.substringAfterLast((String) null, 789);
      StringUtils.center("]", 829);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      StringUtils.stripToEmpty(" @ Mq}#],\"z7:=4j");
      StringUtils.getDigits("\"Vk?~G(:?@hcA_@).=");
      StringUtils.isAllEmpty((CharSequence[]) null);
      StringUtils.containsAny((CharSequence) "", (CharSequence) "\"Vk?~G(:?@hcA_@).=");
      StringUtils.removePattern("...", "...");
      StringUtils.defaultString("@ Mq}#],\"z7:=4j", "");
      Charset charset0 = Charset.defaultCharset();
      StringUtils.getBytes("\r", charset0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      StringUtils.containsAny((CharSequence) "m3:*", (CharSequence) null);
      StringUtils.defaultString("Threshold must not be negative", "The Array must not be null");
      Charset charset0 = Charset.defaultCharset();
      StringUtils.getBytes("...", charset0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      Locale locale0 = Locale.GERMANY;
      Locale.forLanguageTag("FFd' xs");
      locale0.getExtension('t');
      locale0.getUnicodeLocaleAttributes();
      StringUtils.substringAfter("\n", 598);
      StringUtils.length("");
      StringUtils.abbreviate("", "", 77);
      CharSequence[] charSequenceArray0 = new CharSequence[6];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "\n";
      charSequenceArray0[2] = (CharSequence) " ";
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[4] = (CharSequence) "\r";
      StringUtils.deleteWhitespace("\n");
      charSequenceArray0[5] = (CharSequence) "";
      StringUtils.equalsAny(" ", charSequenceArray0);
      StringUtils.replace("", "}7N?&Y2M95'Nj%(9", "Object varargs must not be null");
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      StringUtils.stripAccents("maxWith cannot be negative");
      StringUtils.getLevenshteinDistance((CharSequence) "maxWith cannot be negative", (CharSequence) "maxWith cannot be negative");
      StringUtils.removePattern("/?1", "w=");
      StringUtils.substringAfterLast("UyMB+6", 77);
      StringUtils.isWhitespace("maxWith cannot be negative");
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      Locale locale0 = Locale.GERMANY;
      locale0.getDisplayScript();
      locale0.getUnicodeLocaleAttributes();
      StringUtils.substringAfter("\n", 598);
      StringUtils.length("");
      StringUtils.abbreviate("", "", 77);
      locale0.getDisplayName();
      CharSequence[] charSequenceArray0 = new CharSequence[6];
      charSequenceArray0[0] = (CharSequence) "";
      locale0.getUnicodeLocaleAttributes();
      StringUtils.removeAll("", "#C\"Xh_-9uF-$eMJZu]w");
      StringUtils.trimToNull(";8zDq3%~Tc!");
      StringUtils.indexOfDifference(charSequenceArray0);
      StringUtils.split("");
      int int0 = StringUtils.INDEX_NOT_FOUND;
      StringUtils.substringBetween("", (String) null);
      StringUtils.lowerCase("");
      StringUtils.uncapitalize((String) null);
      StringUtils.splitPreserveAllTokens("E", "\r", (-3594));
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      StringUtils.substringBeforeLast("", "");
      CharSequence[] charSequenceArray0 = new CharSequence[7];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[2] = (CharSequence) "";
      charSequenceArray0[6] = (CharSequence) "";
      charSequenceArray0[4] = (CharSequence) "";
      StringUtils.trimToNull("Array and element cannot both be null");
      charSequenceArray0[6] = (CharSequence) "Array and element cannot both be null";
      StringUtils.indexOfDifference(charSequenceArray0);
      StringUtils.split("             ");
      StringUtils.upperCase("Arguments cannot both be null");
      StringUtils.splitByWholeSeparator("", "o^dd", 0);
      StringUtils.join((char[]) null, '\'');
      StringUtils.removeFirst((String) null, "o^dd");
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      StringUtils.substringAfterLast(" ", "DdE.");
      char[] charArray0 = new char[7];
      charArray0[0] = 'Z';
      charArray0[1] = 'w';
      charArray0[2] = 'o';
      charArray0[3] = 'J';
      charArray0[4] = ',';
      charArray0[5] = 'Z';
      charArray0[6] = '8';
      StringUtils.join(charArray0, ',');
      StringUtils.removeFirst("", "&]+RXw`SN0TJ");
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-94);
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte) (-102);
      byteArray0[3] = (byte)49;
      byteArray0[4] = (byte) (-85);
      // Undeclared exception!
      try { 
        StringUtils.join(byteArray0, 's', (int) (byte) (-102), 32);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -102
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      StringUtils.wrap("The String must not be empty", '+');
      StringUtils.contains((CharSequence) "+The String must not be empty+", (CharSequence) "The String must not be empty");
      StringUtils.replaceAll("X['vv/HrWqZ$", "ud2$uPDURvx", "+The String must not be empty+");
      StringUtils.isAllUpperCase("The String must not be empty");
      StringUtils.lastIndexOf((CharSequence) "The String must not be empty", 2408, 2408);
      StringUtils.chomp("X['vv/HrWqZ$");
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      charSequenceArray0[0] = (CharSequence) "ud2$uPDURvx";
      charSequenceArray0[1] = (CharSequence) "X['vv/HrWqZ$";
      charSequenceArray0[2] = (CharSequence) "The String must not be empty";
      StringUtils.indexOfAny((CharSequence) "ud2$uPDURvx", charSequenceArray0);
      long[] longArray0 = new long[7];
      longArray0[0] = (long) '+';
      longArray0[1] = (long) '+';
      longArray0[2] = (long) 2408;
      longArray0[3] = (long) '+';
      longArray0[4] = (long) 0;
      longArray0[5] = (long) '+';
      longArray0[6] = (long) (-1);
      StringUtils.join(longArray0, '+', 1272, 156);
      StringUtils.substring(" vs ", 2408);
      StringUtils.equalsAny("", charSequenceArray0);
      StringUtils.isBlank(" vs ");
      StringUtils.lastIndexOf((CharSequence) "", 0, 2408);
      StringUtils.defaultIfBlank("", "");
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      StringUtils.substringBeforeLast("", "");
      CharSequence[] charSequenceArray0 = new CharSequence[7];
      charSequenceArray0[0] = (CharSequence) "";
      StringUtils.wrap("", 'p');
      StringUtils.substringsBetween("zGiqL%uA|", "", "Threshold must not be negative");
      StringUtils.splitPreserveAllTokens((String) null, "B>yc'");
      StringUtils.replacePattern("offset cannot be negative", "The character ", "B>yc'");
      Vector<Locale.LanguageRange> vector0 = new Vector<Locale.LanguageRange>();
      StringUtils.prependIfMissingIgnoreCase("ZFEk]<M", "", (CharSequence[]) null);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = 13;
      intArray0[1] = 3;
      intArray0[2] = (-2060);
      intArray0[3] = 16;
      intArray0[4] = 38;
      intArray0[5] = 3159;
      String string0 = StringUtils.LF;
      StringUtils.stripToEmpty("\n");
      StringUtils.leftPad("s Dno?~]>8R", 4051, 'f');
      StringUtils.substringBetween("Array element ", ",|4lX4_9w`e>ly^A", ",|4lX4_9w`e>ly^A");
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      StringUtils.compare("...", "...", true);
      String[] stringArray0 = StringUtils.split("Kv9XcM");
      StringUtils.repeat("v", "the character ", 0);
      StringUtils.wrap("...", 'r');
      StringUtils.reverse("f]zIs0");
      StringUtils.isAnyEmpty(stringArray0);
      StringUtils.isAlphanumeric("the character ");
      StringUtils.difference("Z]@8~.", ".k!(JXM%ECycLfN");
      StringUtils.splitPreserveAllTokens("&-6U4hjcD0o");
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      Locale locale0 = Locale.GERMANY;
      locale0.getUnicodeLocaleAttributes();
      byte[] byteArray0 = new byte[0];
      StringUtils.join(byteArray0, 's', (-1), (-1));
      Object[] objectArray0 = new Object[4];
      objectArray0[2] = (Object) stringUtils0;
      StringUtils.join(objectArray0, "\r");
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("", 'I');
      StringUtils.getCommonPrefix(stringArray0);
      StringUtils.chop(" ");
      StringUtils.stripEnd("!^z-:U", "193");
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) 1986;
      floatArray0[2] = (float) 1986;
      StringUtils.join(floatArray0, '9', 30, (-561));
      StringUtils.abbreviate("X['vv/HrWqZ$sAY6hjsk_E-}6rb`[3C", "Cloneable type ", 4067, 30);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      Locale locale0 = Locale.GERMANY;
      locale0.getUnicodeLocaleAttributes();
      byte[] byteArray0 = new byte[0];
      StringUtils.join(byteArray0, 's', (-1), (-1));
      StringUtils.lastOrdinalIndexOf("", "", (-1));
      Object[] objectArray0 = new Object[4];
      objectArray0[2] = (Object) stringUtils0;
      StringUtils.join(objectArray0, "\r");
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("", 'I');
      StringUtils.getCommonPrefix(stringArray0);
      StringUtils.leftPad("", (-561));
      StringUtils.chop(" ");
      StringUtils.stripEnd("!^z-:U", "193");
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) 1986;
      floatArray0[1] = (float) 'I';
      floatArray0[2] = (float) 1986;
      StringUtils.join(floatArray0, '9', 30, (-561));
      StringUtils.abbreviate("X['vv/HrWqZ$sAY6hjsk_E-}6rb`[3C", "Cloneable type ", 4067, 30);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Integer integer0 = new Integer((-324));
      Integer integer1 = new Integer((-324));
      int int0 = StringUtils.INDEX_NOT_FOUND;
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) (-324);
      doubleArray0[1] = (double) (-324);
      doubleArray0[2] = (double) (-324);
      doubleArray0[3] = (double) (-324);
      doubleArray0[4] = (-1.0);
      doubleArray0[5] = 3.0;
      doubleArray0[6] = (double) 1L;
      StringUtils.join(doubleArray0, 'U');
      StringUtils.isAlphanumeric("-324.0U-324.0U-324.0U-324.0U-1.0U3.0U1.0");
      StringUtils.difference((String) null, "Locale must not be null");
      StringUtils.chomp((String) null);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      StringUtils.split("object", "9Y`]eiW^{x@Rl", 3);
      StringUtils.leftPad("object", 3);
      StringUtils.chop("Search and Replace array lengths don't match: ");
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      String[] stringArray0 = StringUtils.split("9-5y1iX{EX`M@KK#[b");
      StringUtils.repeat("9-5y1iX{EX`M@KK#[b", "the character ", 3);
      StringUtils.wrap("Search and Replace array lengths don't match:", 'r');
      StringUtils.reverse("object");
      StringUtils.isAnyEmpty(stringArray0);
      long[] longArray0 = new long[4];
      longArray0[0] = (long) 3;
      longArray0[1] = 1L;
      longArray0[2] = (long) 3;
      longArray0[3] = (long) 3;
      StringUtils.join(longArray0, '8');
      StringUtils.abbreviateMiddle("X&S7pX1tQ7?vr", ":27#[6FS&z2RQ7A]", 3);
      StringUtils.equalsAny("9-5y1iX{EX`M@KK#[b", stringArray0);
      StringUtils.indexOfAny((CharSequence) "object", (char[]) null);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = '8';
      charArray0[1] = '7';
      charArray0[2] = 'g';
      charArray0[3] = 'N';
      StringUtils.join(charArray0, '\u0014', (-3371), (-3371));
      StringUtils.isNumericSpace("");
      StringUtils.rightPad("", (-3371));
      Locale locale0 = Locale.ENGLISH;
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "";
      StringUtils.indexOfAny((CharSequence) "", charSequenceArray0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      short[] shortArray0 = new short[4];
      String string0 = StringUtils.CR;
      StringUtils.join(shortArray0, '!');
      StringUtils.ordinalIndexOf("\r", "\r", 30);
      StringUtils.reverseDelimited((String) null, 'Y');
      StringUtils.indexOf((CharSequence) null, 156);
      StringUtils.substringAfter("0!0!0!0", (-1));
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      StringUtils.wrap("The String must not be empty", '+');
      StringUtils.contains((CharSequence) "+The String must not be empty+", (CharSequence) "The String must not be empty");
      StringUtils.replaceAll("X['vv/HrWqZ$", "uda$uPsuRvx", "+The String must not be empty+");
      StringUtils.isAllUpperCase("The String must not be empty");
      StringUtils.lastIndexOf((CharSequence) "The String must not be empty", 2408, 2408);
      StringUtils.chomp("X['vv/HrWqZ$");
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      charSequenceArray0[0] = (CharSequence) "uda$uPsuRvx";
      charSequenceArray0[1] = (CharSequence) "X['vv/HrWqZ$";
      charSequenceArray0[2] = (CharSequence) "The String must not be empty";
      StringUtils.indexOfAny((CharSequence) "uda$uPsuRvx", charSequenceArray0);
      long[] longArray0 = new long[7];
      longArray0[0] = (long) '+';
      longArray0[1] = (long) '+';
      longArray0[2] = (long) 2408;
      longArray0[3] = (long) '+';
      longArray0[4] = (long) 0;
      longArray0[5] = (long) '+';
      longArray0[6] = (long) (-1);
      StringUtils.join(longArray0, '+', 1272, 156);
      StringUtils.substring(" vs ", 2408);
      StringUtils.equalsAny("", charSequenceArray0);
      StringUtils.isBlank(" vs ");
      StringUtils.lastIndexOf((CharSequence) "", 0, 2408);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      String string0 = "~%]>{S;#Z;I|nUeI3v";
      StringUtils.removeEndIgnoreCase("~%]>{S;#Z;I|nUeI3v", "~%]>{S;#Z;I|nUeI3v");
      String string1 = null;
      StringUtils.removeEndIgnoreCase((String) null, "");
      int[] intArray0 = null;
      char char0 = '_';
      StringUtils.join((int[]) null, '_');
      Stack<Locale.LanguageRange> stack0 = new Stack<Locale.LanguageRange>();
      Locale.LanguageRange locale_LanguageRange0 = null;
      try {
        locale_LanguageRange0 = new Locale.LanguageRange("J1yxme^( CISv|\"vv{");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // range=j1yxme^( cisv|\"vv{
         //
         verifyException("java.util.Locale$LanguageRange", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      StringUtils.split("objecGHwt", "9Y`]eiW^{x@Rl", 3);
      StringUtils.leftPad("objecGHwt", 3);
      StringUtils.substringsBetween("objecGHwt", "_ >{HP8q\"S", "IJ[>-hg9BsMG#l");
      StringUtils.splitPreserveAllTokens("IJ[>-hg9BsMG#l", "objecGHwt");
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-5);
      byteArray0[1] = (byte)11;
      StringUtils.chop("IJ[>-hg9BsMG#l");
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      StringUtils.abbreviateMiddle((String) null, "IJ[>-hg9BsMG#l", 3091);
      StringUtils.equalsAny("IJ[>-hg9BsMG#l", (CharSequence[]) null);
      StringUtils.startsWithAny("objecGHwt", (CharSequence[]) null);
      StringUtils.stripAll((String[]) null);
      StringUtils.getDigits("+*I");
      StringUtils.join((int[]) null, ')');
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      StringUtils.leftPad("Supplied value must be a valid byte literal between -128 and 127: [", 50, 'g');
      StringUtils.leftPad("Array element ", 50, "Locale must not be null");
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      StringUtils.getIfEmpty("Locale must not be null", supplier0);
      char[] charArray0 = new char[3];
      charArray0[0] = 'g';
      charArray0[1] = 'g';
      StringUtils.valueOf(charArray0);
      StringUtils.rightPad("Locale must not be null", (int) 'g');
      StringUtils.isBlank("Supplied value must be a valid byte literal between -128 and 127: [");
      StringUtils.countMatches((CharSequence) "Supplied value must be a valid byte literal between -128 and 127: [", '&');
      StringUtils.indexOfAnyBut((CharSequence) "gg\u0000", charArray0);
      StringUtils.indexOfAnyBut((CharSequence) "Locale must not be null", charArray0);
      StringUtils.leftPad("Supplied value must be a valid byte literal between -128 and 127: [", (-1209), 'x');
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      long[] longArray0 = new long[2];
      longArray0[1] = (long) '8';
      // Undeclared exception!
      try { 
        StringUtils.join(longArray0, 'h', 7, 31);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 7
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      long[] longArray0 = new long[2];
      longArray0[0] = 869L;
      longArray0[1] = (long) '8';
      // Undeclared exception!
      try { 
        StringUtils.join(longArray0, 'h', 7, 31);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 7
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      Locale locale0 = Locale.GERMANY;
      locale0.getDisplayScript();
      locale0.getUnicodeLocaleAttributes();
      StringUtils.substringAfter("\n", 598);
      StringUtils.length("");
      StringUtils.abbreviate("", "", 77);
      StringUtils.replaceAll("\r", "\r", "");
      CharSequence[] charSequenceArray0 = new CharSequence[6];
      charSequenceArray0[0] = (CharSequence) "";
      locale0.getUnicodeLocaleAttributes();
      StringUtils.trimToNull(";8zDq3%~Tc!");
      StringUtils.indexOfDifference(charSequenceArray0);
      StringUtils.split("");
      int int0 = StringUtils.INDEX_NOT_FOUND;
      StringUtils.replaceIgnoreCase("Exception cloning Cloneable type TT", ";8zDq3%~Tc!", "#|pOToSH", 97);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      StringUtils.trimToEmpty(":W3vjMB@");
      String[] stringArray0 = StringUtils.splitByWholeSeparator(":W3vjMB@", ":W3vjMB@", 0);
      String string0 = StringUtils.LF;
      StringUtils.equalsAny(":W3vjMB@", stringArray0);
      StringUtils.replaceChars((String) null, 'C', '*');
      StringUtils.prependIfMissingIgnoreCase("Comparator should not be null.", ":W3vjMB@", stringArray0);
      StringUtils.lowerCase("ceN3VDz{6[~Bb#");
      StringUtils.splitByWholeSeparator("x[BEyAx", "", 123);
      StringUtils.wrapIfMissing("9", "H");
      StringUtils.substringAfter("^i&98w5Hm", 3);
      StringUtils.truncate("8", 3);
      StringUtils.wrap("-5y1iX{EX`M@KK#[b", '2');
      StringUtils.center((String) null, 3, "");
      StringUtils.wrapIfMissing("X['vv/HrWqZ$sAY6hjs", "k_E-}6rb`[3C");
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = 'Q';
      StringUtils.chomp("nt ");
      StringUtils.indexOfAnyBut((CharSequence) "nt ", charArray0);
      StringUtils.getLevenshteinDistance((CharSequence) "nt ", (CharSequence) "nt ");
      StringUtils.normalizeSpace(">6^n$~R+hn-! G");
      StringUtils.wrapIfMissing("-5y1iX{EX`M@KK#[b", '!');
      StringUtils.containsNone((CharSequence) ">6^n$~R+hn-! G", "nt ");
      StringUtils.indexOfAnyBut((CharSequence) "!-5y1iX{EX`M@KK#[b!", (CharSequence) "-5y1iX{EX`M@KK#[b");
      String string0 = null;
      StringUtils.substringAfter((String) null, "!-5y1iX{EX`M@KK#[b!");
      StringUtils.indexOf((CharSequence) "-5y1iX{EX`M@KK#[b", (CharSequence) null);
      Charset.defaultCharset();
      // Undeclared exception!
      try { 
        Charset.forName("%M}e9b:hS^");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // %M}e9b:hS^
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      StringUtils.normalizeSpace("R'1thkObject varargs must not be null");
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      StringUtils.substringBeforeLast("", "");
      CharSequence[] charSequenceArray0 = new CharSequence[7];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[2] = (CharSequence) "";
      charSequenceArray0[6] = (CharSequence) "";
      charSequenceArray0[4] = (CharSequence) "";
      StringUtils.trimToNull("Array and element cannot both be null");
      charSequenceArray0[6] = (CharSequence) "Array and element cannot both be null";
      StringUtils.indexOfDifference(charSequenceArray0);
      String[] stringArray0 = StringUtils.split("             ");
      StringUtils.upperCase("Arguments cannot both be null");
      StringUtils.splitByWholeSeparator("", "o^dd", 0);
      String string0 = StringUtils.LF;
      StringUtils.equalsAny("ARGUMENTS CANNOT BOTH BE NULL", stringArray0);
      StringUtils.replaceChars("", '*', 'z');
      StringUtils.split((String) null);
      StringUtils.isAsciiPrintable("Array and element cannot both be null");
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      StringUtils.replace("s'@z)sozJ", "s'@z)sozJ", (String) null, 1908);
      String[] stringArray0 = StringUtils.split("s'@z)sozJ", "s'@z)sozJ", 120);
      StringUtils.prependIfMissingIgnoreCase("The character ", "The character ", stringArray0);
      StringUtils.lowerCase("org.apache.commons.lang3.ArrayUtils");
      StringUtils.splitByWholeSeparator("org.apache.commons.lang3.arrayutils", "org.apache.commons.lang3.ArrayUtils", 120);
      StringUtils.removePattern("kZ", "&vQ8#A5?^S");
      StringUtils.isNumeric("kZ");
      StringUtils.indexOfDifference((CharSequence[]) stringArray0);
      StringUtils.ordinalIndexOf("The character ", (CharSequence) null, (-1650));
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      StringUtils.remove(".", '=');
      StringUtils.isAsciiPrintable(".");
      String[] stringArray0 = StringUtils.splitPreserveAllTokens(".", "-*\u0003Fa+Tx@", 76);
      char[] charArray0 = new char[2];
      charArray0[0] = '=';
      charArray0[1] = '=';
      StringUtils.containsAny((CharSequence) "-*\u0003Fa+Tx@", charArray0);
      StringUtils.join(charArray0, 'h', 76, 76);
      StringUtils.getDigits("-*\u0003Fa+Tx@");
      StringUtils.isBlank(".");
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) '=';
      StringUtils.join(floatArray0, '$', 76, 76);
      StringUtils.substringBefore("", "");
      StringUtils.countMatches((CharSequence) ".", '$');
      StringUtils.endsWithAny("", stringArray0);
      StringUtils.length("3");
      StringUtils.splitByWholeSeparatorPreserveAllTokens("UkNJr./8ViINBb", " is not in the range '0' - '9'", 5);
      StringUtils.equalsIgnoreCase("", "");
      StringUtils.substring(".", 181, (-1257));
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      StringUtils.endsWithAny((CharSequence) null, charSequenceArray0);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      StringUtils.chop("Search and Replace array lengths don't match: ");
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      StringUtils.getDigits("9-5y1iX{EX`M@KK#[b");
      StringUtils.isAllEmpty((CharSequence[]) null);
      StringUtils.endsWithAny("951", (CharSequence[]) null);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 3.0;
      doubleArray0[1] = 3.0;
      StringUtils.join(doubleArray0, '9');
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      String string0 = StringUtils.substringBeforeLast("", "");
      assertNotNull(string0);
      assertEquals("", string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[7];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[2] = (CharSequence) "";
      charSequenceArray0[6] = (CharSequence) "";
      charSequenceArray0[4] = (CharSequence) "";
      String string1 = StringUtils.trimToNull("Array and element cannot both be null");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("Array and element cannot both be null", string1);
      
      charSequenceArray0[6] = (CharSequence) "Array and element cannot both be null";
      int int0 = StringUtils.indexOfDifference(charSequenceArray0);
      assertEquals(7, charSequenceArray0.length);
      assertEquals(0, int0);
      
      String[] stringArray0 = StringUtils.split("             ");
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string2 = StringUtils.upperCase("Arguments cannot both be null");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("ARGUMENTS CANNOT BOTH BE NULL", string2);
      
      int[] intArray0 = new int[9];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = (int) 'z';
      intArray0[4] = 0;
      intArray0[5] = (int) 'z';
      intArray0[6] = 0;
      intArray0[7] = 0;
      intArray0[8] = (int) 'z';
      String string3 = StringUtils.join(intArray0, 'z', 0, 0);
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals(9, intArray0.length);
      assertNotNull(string3);
      assertArrayEquals(new int[] {0, 0, 0, 122, 0, 122, 0, 0, 122}, intArray0);
      assertEquals("", string3);
      
      String string4 = StringUtils.unwrap("", "");
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string3));
      assertNotNull(string4);
      assertEquals("", string4);
      
      boolean boolean0 = StringUtils.containsOnly(charSequenceArray0[0], ")!1XjMA#y,~aU");
      assertEquals(7, charSequenceArray0.length);
      assertTrue(boolean0);
      
      char[] charArray0 = new char[5];
      charArray0[0] = 'z';
      charArray0[1] = 'z';
      charArray0[2] = 'z';
      charArray0[3] = 'z';
      charArray0[4] = 'z';
      StringUtils.containsOnly(charSequenceArray0[0], charArray0);
      StringUtils.normalizeSpace("");
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short)2;
      shortArray0[1] = (short)2;
      shortArray0[2] = (short)2;
      StringUtils.rightPad("R'1thk", (int) (short)2, "null/empty items");
      StringUtils.center("null/empty items", (int) (short)2, "null/empty items");
      Locale locale0 = Locale.KOREAN;
      locale0.getUnicodeLocaleAttributes();
      StringUtils.substringAfter(" ", (int) (short)2);
      StringUtils.length("R'1thk");
      StringUtils.left(",czGBE", (short)2);
      StringUtils.indexOfAnyBut((CharSequence) " ", (CharSequence) "null/empty items");
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      StringUtils.lowerCase("null/empty items~4&4+2&FA");
      StringUtils.unwrap("x[BEyAxx[BEyAxx[...", "x[BEyAxx[BEyAxx[...");
      StringUtils.removeEnd("GdO[htbw}6Mc6.@E#)", "null/empty items~4&4+2&fa");
      StringUtils.containsOnly((CharSequence) "GdO[htbw}6Mc6.@E#)", "GdO[htbw}6Mc6.@E#)");
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-111);
      byteArray0[1] = (byte)26;
      Locale locale0 = Locale.KOREAN;
      locale0.getUnicodeLocaleAttributes();
      StringUtils.substringAfter("X?\"7", (-1608));
      StringUtils.length("GdO[htbw}6Mc6.@E#)");
      StringUtils.left("null/empty items~4&4+2&FA", 20);
      StringUtils.indexOfAnyBut((CharSequence) "x[BEyAxx[BEyAxx[...", (CharSequence) "");
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      StringUtils.isMixedCase((CharSequence) null);
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("Supplied value must be a valid byte literal between -128 and 127: [");
      StringUtils.isAlphanumeric("Supplied value must be a valid byte literal between -128 and 127: [");
      StringUtils.joinWith("             ", stringArray0);
      StringUtils.isEmpty((CharSequence) null);
      StringUtils.isNumeric("Supplied                           value                           must                           be                           a                           valid                           byte                           literal                           between                           -             128                           and                           127             :                           [");
      StringUtils.reverse("object");
      StringUtils.substringAfter("V1YAun`g%l4Le>$", 3);
      char[] charArray0 = new char[9];
      charArray0[0] = 'j';
      charArray0[1] = 'j';
      charArray0[2] = 'f';
      charArray0[3] = 'm';
      charArray0[4] = '\\';
      charArray0[5] = '\\';
      charArray0[7] = 'j';
      charArray0[8] = '4';
      StringUtils.containsNone((CharSequence) "", charArray0);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      String string0 = StringUtils.LF;
      float[] floatArray0 = new float[1];
      floatArray0[0] = 600.4837F;
      StringUtils.compare("9j0-+ji_s", "\n");
      StringUtils.substring("9j0-+ji_s", 47);
      StringUtils.isAlphaSpace("\n");
      StringUtils.trimToEmpty((String) null);
      Locale locale0 = new Locale("", "\n", "&vQ8#A5?^S");
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      ArrayList<Locale> arrayList1 = new ArrayList<Locale>();
      LinkedList<Locale> linkedList0 = new LinkedList<Locale>(arrayList1);
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      Locale.filter((List<Locale.LanguageRange>) arrayList0, (Collection<Locale>) linkedList0, locale_FilteringMode0);
      locale0.getDisplayScript();
      StringUtils.lowerCase("", locale0);
      StringUtils.isAlphaSpace("9j0-+ji_s");
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.parallelStream();
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      charSequenceArray0[0] = (CharSequence) "', s neither of type Map.Entry no an Array";
      charSequenceArray0[1] = (CharSequence) "', s neither of type Map.Entry no an Array";
      charSequenceArray0[2] = (CharSequence) "', s neither of type Map.Entry no an Array";
      charSequenceArray0[3] = (CharSequence) "', s neither of type Map.Entry no an Array";
      charSequenceArray0[4] = (CharSequence) "', s neither of type Map.Entry no an Array";
      StringUtils.isAnyBlank(charSequenceArray0);
      StringUtils.remove("PlCn", 'H');
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      StringUtils.substringBeforeLast("", "");
      CharSequence[] charSequenceArray0 = new CharSequence[7];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[2] = (CharSequence) "";
      charSequenceArray0[6] = (CharSequence) "";
      charSequenceArray0[4] = (CharSequence) "";
      StringUtils.trimToNull("Array and element cannot both be null");
      charSequenceArray0[6] = (CharSequence) "Array and element cannot both be null";
      StringUtils.indexOfDifference(charSequenceArray0);
      StringUtils.split("             ");
      StringUtils.upperCase("Arguments cannot both be null");
      int[] intArray0 = new int[9];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = (int) 'z';
      intArray0[4] = 0;
      intArray0[5] = (int) 'z';
      intArray0[6] = 0;
      intArray0[7] = 0;
      intArray0[8] = (int) 'z';
      StringUtils.join(intArray0, 'z', 0, 0);
      StringUtils.unwrap("", "");
      StringUtils.containsOnly(charSequenceArray0[0], ")!1XjMA#y,~aU");
      StringUtils.appendIfMissing("Array and element cannot both be null", "Arguments cannot both be null", charSequenceArray0);
      StringUtils.countMatches((CharSequence) "", (CharSequence) "Array and element cannot both be null");
      StringUtils.indexOf((CharSequence) "", 76, 122);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[9];
      charSequenceArray0[7] = (CharSequence) "org.apache.commons.lang3.RegExUtils";
      charSequenceArray0[2] = (CharSequence) "org.apache.commons.lang3.RegExUtils";
      charSequenceArray0[4] = (CharSequence) "org.apache.commons.lang3.RegExUtils";
      charSequenceArray0[5] = (CharSequence) "org.apache.commons.lang3.RegExUtils";
      StringUtils.join((Object[]) charSequenceArray0, ']');
      StringUtils.countMatches(charSequenceArray0[3], charSequenceArray0[5]);
      StringUtils.split("]]org.apache.commons.lang3.RegExUtils]]org.apache.commons.lang3.RegExUtils]org.apache.commons.lang3.RegExUtils]]org.apache.commons.lang3.RegExUtils]", ']');
      try { 
        StringUtils.getBytes("p{InCombiningDiacriticalMarks}+", "org.apache.commons.lang3.RegExUtils");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(UnsupportedEncodingException e) {
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      StringUtils.center("G", 98);
      CharSequence[] charSequenceArray0 = new CharSequence[6];
      StringUtils.left((String) null, 98);
      charSequenceArray0[0] = (CharSequence) null;
      StringUtils.strip((String) null, "org.apache.commons.lang3.exception.CloneFailedException");
      charSequenceArray0[1] = (CharSequence) null;
      char[] charArray0 = new char[1];
      charArray0[0] = '4';
      StringUtils.join(charArray0, 'A');
      charSequenceArray0[2] = (CharSequence) "4";
      charSequenceArray0[3] = (CharSequence) "                                                G                                                 ";
      charSequenceArray0[4] = (CharSequence) " vs ";
      charSequenceArray0[5] = (CharSequence) "                                                G                                                 ";
      StringUtils.isAllEmpty(charSequenceArray0);
      StringUtils.overlay("...", "p=An8A;;o8.fei", 98, (-2004318069));
      StringUtils.lowerCase("comparator");
      StringUtils.uncapitalize((String) null);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "The character ";
      charSequenceArray0[2] = (CharSequence) "The character ";
      StringUtils.chomp("The character ");
      StringUtils.leftPad("org.apache.commons.lang3.CharSequenceUtils", (-3773), '`');
      StringUtils.center("The character ", 49, "org.apache.commons.lang3.CharSequenceUtils");
      StringUtils.equals((CharSequence) "The character ", (CharSequence) "org.apache.commonThe character org.apache.commons");
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      String string0 = StringUtils.LF;
      StringUtils.removeEnd("\n", "jg{J.B0[Bm!PI");
      StringUtils.center("clonecloneThreshold must not be negative", 12);
      StringUtils.center("Index: ", (-2602), "Search and Replace array lengths don't match: the character Search and Replace array lengths don't match: the character Search and Replace array lengths don't match: the character the character ");
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      StringUtils.lowerCase("null/empty items~4&4+2&FA");
      StringUtils.unwrap("x[BEyAxx[BEyAxx[...", "x[BEyAxx[BEyAxx[...");
      StringUtils.removeEnd("GdO[htbw}6Mc6.@E#)", "null/empty items~4&4+2&fa");
      StringUtils.containsOnly((CharSequence) "GdO[htbw}6Mc6.@E#)", "GdO[htbw}6Mc6.@E#)");
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-111);
      byteArray0[1] = (byte)26;
      byteArray0[2] = (byte)71;
      StringUtils.center("null/empty items~4&4+2&fa", (-1), "GdO[htbw}6Mc6.@E#)");
      StringUtils.rightPad("V,4$t,is}TWv", (int) (byte)57);
      StringUtils.lastIndexOfIgnoreCase((CharSequence) "GdO[htbw}6Mc6.@E#)", (CharSequence) "V,4$t,is}TWv", (int) (byte)57);
      StringUtils.containsIgnoreCase("null/empty items~4&4+2&fa", "V,4$t,is}TWv");
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = '$';
      charArray0[1] = 'Q';
      charArray0[3] = '7';
      charArray0[4] = '$';
      StringUtils.containsAny((CharSequence) "kb>K:%lR&M+Fm2*/78", charArray0);
      StringUtils.deleteWhitespace("kb>K:%lR&M+Fm2*/78");
      String string0 = "g\\XYl'|2.y";
      StringUtils.stripAccents("gXYl'|2.y");
      Class<Object> class0 = Object.class;
      ServiceLoader.loadInstalled(class0);
      String string1 = ".";
      StringUtils.removeEnd("\r", ".");
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      charSequenceArray0[0] = (CharSequence) "The character ";
      StringUtils.appendIfMissing("gXYl'|2.y", "\r", charSequenceArray0);
      StringUtils.getJaroWinklerDistance(charSequenceArray0[0], "kb>K:%lR&M+Fm2*/78");
      StringUtils.split("\r");
      // Undeclared exception!
      StringUtils.repeat("tj_g", "\r", 32767);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      String[] stringArray0 = StringUtils.split("object", "9Y`]eiW^{x@Rl", 3);
      StringUtils.prependIfMissingIgnoreCase("-5y1iX{EX`M@KK#[b", "-5y1iX{EX`M@KK#[b", stringArray0);
      StringUtils.lowerCase("-5y1iX{EX`M@KK#[b");
      StringUtils.splitByWholeSeparator("-5y1ix{ex`m@kk#[b", "x[BEyAx", 3);
      int[] intArray0 = new int[8];
      intArray0[1] = 3;
      StringUtils.wrapIfMissing("9", "-5y1iX{EX`M@KK#[b");
      StringUtils.rightPad("-5y1iX{EX`M@KK#[b", (-2732), "org.apache.commons.lang3.CharUtils");
      StringUtils.defaultIfBlank((CharSequence) "-5y1iX{EX`M@KK#[b", (CharSequence) "-5y1iX{EX`M@KK#[b");
      StringUtils.equals((CharSequence) "object", (CharSequence) "-5y1iX{EX`M@KK#[b");
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 3;
      doubleArray0[1] = (double) 'L';
      doubleArray0[2] = (double) 3;
      doubleArray0[3] = (double) (-2732);
      doubleArray0[4] = (double) (-2732);
      StringUtils.join(doubleArray0, 'L');
      StringUtils.truncate("-5y1iX{EX`M@KK#[b9-5y1iX{EX`M@KK#[b", 48, 3);
      StringUtils.strip("Strings must not be null", "-5y1iX{EX`M@KK#[b");
      StringUtils.getDigits("\r");
      char[] charArray0 = new char[1];
      charArray0[0] = 'L';
      StringUtils.indexOfAnyBut((CharSequence) "", charArray0);
      StringUtils.splitByWholeSeparatorPreserveAllTokens((String) null, "4qUh", 3);
      StringUtils.getCommonPrefix((String[]) null);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      String[] stringArray0 = StringUtils.split("object", "9Y`]eiW^{x@Rl", 3);
      StringUtils.prependIfMissingIgnoreCase("-5y1iX{EX`M@KK#[b", "-5y1iX{EX`M@KK#[b", stringArray0);
      StringUtils.removeStart("9Y`]eiW^{x@Rl", "object");
      StringUtils.splitByWholeSeparator("9Y`]eiW^{x@Rl", "x[BEyAx", 3);
      int[] intArray0 = new int[8];
      intArray0[1] = 3;
      intArray0[2] = 3;
      intArray0[3] = 3;
      intArray0[4] = 3;
      intArray0[6] = (int) '8';
      intArray0[7] = (int) '8';
      StringUtils.join(intArray0, '5');
      StringUtils.substringAfterLast((String) null, 56);
      StringUtils.center("}6", 38);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      Locale locale0 = Locale.GERMANY;
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      Locale.setDefault(locale_Category0, locale0);
      locale0.getUnicodeLocaleAttributes();
      StringUtils.removeStart("", "\n");
      CharSequence[] charSequenceArray0 = new CharSequence[8];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "\n";
      charSequenceArray0[2] = (CharSequence) "\r";
      charSequenceArray0[3] = (CharSequence) "\r";
      charSequenceArray0[4] = (CharSequence) "";
      charSequenceArray0[5] = (CharSequence) "\n";
      charSequenceArray0[6] = (CharSequence) "\n";
      charSequenceArray0[7] = (CharSequence) "\r";
      StringUtils.indexOfDifference(charSequenceArray0);
      StringUtils.split("");
      int int0 = StringUtils.INDEX_NOT_FOUND;
      StringUtils.abbreviateMiddle("E", "Cai~", 157);
      StringUtils.substringAfterLast("GdO[htbw}6Mc6.@E#)null/empty items~4&4+2&fa", (-4248));
      StringUtils.center("", (-1));
      StringUtils.isWhitespace("\n");
      StringUtils.countMatches((CharSequence) " ", '@');
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "The character ";
      charSequenceArray0[2] = (CharSequence) "The character ";
      StringUtils.splitByWholeSeparator("Threshold must not be negative", "9tp@+_c-AgJ9-w", (-487));
      StringUtils.compareIgnoreCase("S0.$/8C:6V1", (String) null, true);
      StringUtils.isAsciiPrintable("Threshold must not be negative");
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = '$';
      charArray0[1] = 'Q';
      charArray0[2] = '$';
      charArray0[3] = '7';
      charArray0[4] = '$';
      StringUtils.containsAny((CharSequence) "kb>K:%lR&M+Fm2*/78", charArray0);
      StringUtils.deleteWhitespace("kb>K:%lR&M+Fm2*/78");
      StringUtils.stripAccents("gXYl'|2.y");
      Class<Object> class0 = Object.class;
      ServiceLoader.loadInstalled(class0);
      StringUtils.removeEnd("\r", ".");
      long[] longArray0 = new long[8];
      longArray0[0] = (long) 25;
      longArray0[1] = (long) '$';
      longArray0[2] = (long) (-32768);
      longArray0[3] = (long) '$';
      longArray0[4] = (long) (-32768);
      longArray0[5] = (long) 'Q';
      longArray0[6] = (long) '$';
      longArray0[7] = (long) '$';
      StringUtils.join(longArray0, 'n', 25, (-32768));
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (-1051);
      shortArray0[1] = (short) (-2564);
      shortArray0[2] = (short) (-1051);
      shortArray0[3] = (short)2;
      Locale locale0 = Locale.US;
      assertEquals("en", locale0.getLanguage());
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("en_US", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("US", locale0.getCountry());
      assertEquals("eng", locale0.getISO3Language());
      assertNotNull(locale0);
      
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      assertEquals("en", locale0.getLanguage());
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("en_US", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("US", locale0.getCountry());
      assertEquals("eng", locale0.getISO3Language());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertNotNull(set0);
      
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.EXTENDED_FILTERING;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) arrayList0, (Collection<String>) set0, locale_FilteringMode0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertEquals("en", locale0.getLanguage());
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("en_US", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("US", locale0.getCountry());
      assertEquals("eng", locale0.getISO3Language());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
      
      String string0 = StringUtils.substringAfter("K! #@E8r2>", 1794);
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.abbreviate("nP6:kx]p", "", (-1948));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("nP6:kx]p", string1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      charSequenceArray0[0] = (CharSequence) "\r";
      charSequenceArray0[1] = (CharSequence) "nP6:kx]p";
      String string2 = StringUtils.abbreviateMiddle("\r", "Ifhe|5G*,S@R! U3#mJ", 2985);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("\r", string2);
      
      charSequenceArray0[2] = (CharSequence) "\r";
      charSequenceArray0[3] = (CharSequence) "K! #@E8r2>";
      charSequenceArray0[4] = (CharSequence) "nP6:kx]p";
      boolean boolean0 = StringUtils.isAnyEmpty(charSequenceArray0);
      assertEquals(5, charSequenceArray0.length);
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isAllUpperCase((CharSequence) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      StringUtils.isAsciiPrintable("\r");
      StringUtils.replaceOnce("\n", (String) null, "K! #@E8r2>");
      StringUtils.replace("nP6:kx]p", "nP6:kx]p", "nt ");
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      String string0 = StringUtils.replace("Aborting to protect against StackOverflowError - output of one loop is the input of another", "Aborting to protect against StackOverflowError - output of one loop is the input of another", "Aborting to protect against StackOverflowError - output of one loop is the input of another", 571);
      assertNotNull(string0);
      assertEquals("Aborting to protect against StackOverflowError - output of one loop is the input of another", string0);
      
      String string1 = StringUtils.replaceIgnoreCase("Aborting to protect against StackOverflowError - output of one loop is the input of another", "", "", (-4154));
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("Aborting to protect against StackOverflowError - output of one loop is the input of another", string1);
      
      Locale locale0 = Locale.forLanguageTag("Aborting to protect against StackOverflowError - output of one loop is the input of another");
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getISO3Language());
      assertNotNull(locale0);
      
      Locale locale1 = Locale.ROOT;
      assertEquals("", locale1.getISO3Language());
      assertEquals("", locale1.getLanguage());
      assertEquals("", locale1.getCountry());
      assertEquals("", locale1.toString());
      assertEquals("", locale1.getISO3Country());
      assertEquals("", locale1.getVariant());
      assertSame(locale1, locale0);
      assertNotNull(locale1);
      
      int int0 = StringUtils.getFuzzyDistance("Aborting to protect against StackOverflowError - output of one loop is the input of another", "Aborting to protect against StackOverflowError - output of one loop is the input of another", locale1);
      assertEquals("", locale1.getISO3Language());
      assertEquals("", locale1.getLanguage());
      assertEquals("", locale1.getCountry());
      assertEquals("", locale1.toString());
      assertEquals("", locale1.getISO3Country());
      assertEquals("", locale1.getVariant());
      assertSame(locale1, locale0);
      assertEquals(271, int0);
      
      String string2 = StringUtils.wrap("Z1T", '3');
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("3Z1T3", string2);
      
      String[] stringArray0 = StringUtils.substringsBetween("Z1T", "Aborting to protect against StackOverflowError - output of one loop is the input of another", "Aborting to protect against StackOverflowError - output of one loop is the input of another");
      assertNull(stringArray0);
      
      String[] stringArray1 = StringUtils.splitPreserveAllTokens("org.apache.commons.lang3.Charsets", "Aborting to protect against StackOverflowError - output of one loop is the input of another");
      assertEquals(26, stringArray1.length);
      assertNotNull(stringArray1);
      
      String string3 = StringUtils.replacePattern("(8IKy@3z4", (String) null, (String) null);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      
      Stack<Locale.LanguageRange> stack0 = new Stack<Locale.LanguageRange>();
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.isEmpty());
      assertNotNull(stack0);
      
      UnaryOperator<Locale.LanguageRange> unaryOperator0 = UnaryOperator.identity();
      assertNotNull(unaryOperator0);
      
      Vector<Locale.LanguageRange> vector0 = new Vector<Locale.LanguageRange>();
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertNotNull(vector0);
      
      vector0.replaceAll(unaryOperator0);
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      
      PriorityQueue<String> priorityQueue0 = new PriorityQueue<String>();
      assertEquals(0, priorityQueue0.size());
      assertNotNull(priorityQueue0);
      assertFalse(priorityQueue0.contains("Aborting to protect against StackOverflowError - output of one loop is the input of another"));
      
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) stack0, (Collection<String>) priorityQueue0);
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.isEmpty());
      assertEquals(0, priorityQueue0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
      assertFalse(priorityQueue0.contains("Aborting to protect against StackOverflowError - output of one loop is the input of another"));
      assertFalse(list0.contains("Aborting to protect against StackOverflowError - output of one loop is the input of another"));
      
      ArrayDeque<String> arrayDeque0 = new ArrayDeque<String>(priorityQueue0);
      assertEquals(0, priorityQueue0.size());
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      assertNotNull(arrayDeque0);
      assertFalse(priorityQueue0.contains("Aborting to protect against StackOverflowError - output of one loop is the input of another"));
      assertFalse(arrayDeque0.contains("Aborting to protect against StackOverflowError - output of one loop is the input of another"));
      
      Iterator<String> iterator0 = arrayDeque0.iterator();
      assertEquals(0, priorityQueue0.size());
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      assertNotNull(iterator0);
      assertFalse(priorityQueue0.contains("Aborting to protect against StackOverflowError - output of one loop is the input of another"));
      assertFalse(arrayDeque0.contains("Aborting to protect against StackOverflowError - output of one loop is the input of another"));
      
      String string4 = StringUtils.repeat('3', 1028);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertNotNull(string4);
      
      String string5 = StringUtils.CR;
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertNotNull(string5);
      assertEquals("\r", string5);
      
      boolean boolean0 = StringUtils.isAsciiPrintable("\r");
      assertFalse(boolean0);
      
      String string6 = StringUtils.rightPad("\r", 812, "Z1T");
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string2));
      assertNotNull(string6);
      assertEquals("\rstring6);
      
      StringUtils.join((Object[]) stringArray1, '8', 271, (-4154));
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      Locale locale0 = Locale.GERMANY;
      assertEquals("de_DE", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("DE", locale0.getCountry());
      assertEquals("de", locale0.getLanguage());
      assertEquals("DEU", locale0.getISO3Country());
      assertNotNull(locale0);
      
      String string0 = StringUtils.substringAfter("\n", 598);
      assertNotNull(string0);
      assertEquals("", string0);
      
      int int0 = StringUtils.length("");
      assertEquals(0, int0);
      
      String string1 = StringUtils.center(" ", 256);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("                                                                                                                                                                                                                                                                ", string1);
      
      String string2 = StringUtils.abbreviate("", "", 77);
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("", string2);
      
      CharSequence[] charSequenceArray0 = new CharSequence[8];
      charSequenceArray0[0] = (CharSequence) "";
      String string3 = StringUtils.lowerCase("", locale0);
      assertEquals("de_DE", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("DE", locale0.getCountry());
      assertEquals("de", locale0.getLanguage());
      assertEquals("DEU", locale0.getISO3Country());
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string2));
      assertNotNull(string3);
      assertEquals("", string3);
      
      charSequenceArray0[1] = (CharSequence) "";
      charSequenceArray0[2] = (CharSequence) "";
      charSequenceArray0[3] = (CharSequence) "";
      charSequenceArray0[4] = (CharSequence) "";
      String string4 = StringUtils.wrapIfMissing("", " ");
      assertFalse(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string2));
      assertNotNull(string4);
      assertEquals("", string4);
      
      String string5 = StringUtils.replaceOnceIgnoreCase("", "U<7J'7^@[fLi;n", "D}|H=z");
      assertTrue(string5.equals((Object)string4));
      assertTrue(string5.equals((Object)string0));
      assertTrue(string5.equals((Object)string2));
      assertTrue(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertNotNull(string5);
      assertEquals("", string5);
      
      boolean boolean0 = StringUtils.equalsAnyIgnoreCase("", charSequenceArray0);
      assertEquals(8, charSequenceArray0.length);
      assertTrue(boolean0);
      
      int int1 = StringUtils.indexOfAny((CharSequence) "", "");
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      String string6 = StringUtils.overlay("Comparator should not be null.", "", (-3711), (-3711));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string4));
      assertNotNull(string6);
      assertEquals("Comparator should not be null.", string6);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      String string0 = StringUtils.substringBeforeLast("", "");
      assertNotNull(string0);
      assertEquals("", string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[7];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[2] = (CharSequence) "";
      charSequenceArray0[6] = (CharSequence) "";
      charSequenceArray0[4] = (CharSequence) "";
      String string1 = StringUtils.trimToNull("Array and element cannot both be null");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("Array and element cannot both be null", string1);
      
      charSequenceArray0[6] = (CharSequence) "Array and element cannot both be null";
      int int0 = StringUtils.indexOfDifference(charSequenceArray0);
      assertEquals(7, charSequenceArray0.length);
      assertEquals(0, int0);
      
      String[] stringArray0 = StringUtils.split("             ");
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string2 = StringUtils.upperCase("");
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("", string2);
      
      int[] intArray0 = new int[9];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = (int) 'z';
      intArray0[4] = 0;
      intArray0[5] = (int) 'z';
      intArray0[6] = 0;
      intArray0[7] = 0;
      intArray0[8] = (int) 'z';
      String string3 = StringUtils.join(intArray0, 'z', 0, 0);
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string2));
      assertEquals(9, intArray0.length);
      assertNotNull(string3);
      assertArrayEquals(new int[] {0, 0, 0, 122, 0, 122, 0, 0, 122}, intArray0);
      assertEquals("", string3);
      
      String string4 = StringUtils.unwrap("", "");
      assertTrue(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string3));
      assertNotNull(string4);
      assertEquals("", string4);
      
      boolean boolean0 = StringUtils.containsOnly(charSequenceArray0[0], ")!1XjMA#y,~aU");
      assertEquals(7, charSequenceArray0.length);
      assertTrue(boolean0);
      
      String string5 = StringUtils.unwrap("5moc6/tm{'v F2W", 'z');
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertNotNull(string5);
      assertEquals("5moc6/tm{'v F2W", string5);
      
      boolean boolean1 = StringUtils.containsNone((CharSequence) "5moc6/tm{'v F2W", (char[]) null);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      charSequenceArray0[0] = (CharSequence) "\n";
      charSequenceArray0[2] = (CharSequence) " ";
      charSequenceArray0[3] = (CharSequence) "\n";
      String[] stringArray0 = StringUtils.split(" ", "9Y`]eiW^{x@Rl", (-1));
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string0 = StringUtils.difference("\r", "9Y`]eiW^{x@Rl");
      assertNotNull(string0);
      assertEquals("9Y`]eiW^{x@Rl", string0);
      
      String string1 = StringUtils.EMPTY;
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
      
      String string2 = StringUtils.join((Object[]) charSequenceArray0, "Array element ");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals(5, charSequenceArray0.length);
      assertNotNull(string2);
      assertEquals("\nArray element Array element  Array element \nArray element ", string2);
      
      boolean boolean0 = StringUtils.endsWithIgnoreCase("\n", "");
      assertTrue(boolean0);
      
      String string3 = StringUtils.capitalize("object");
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      assertEquals("Object", string3);
      
      boolean boolean1 = StringUtils.isWhitespace("Arguments cannot both be null");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string4 = StringUtils.center(" ", 2, 'u');
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertNotNull(string4);
      assertEquals(" u", string4);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      String string0 = StringUtils.capitalize((String) null);
      assertNull(string0);
      
      boolean boolean0 = StringUtils.containsAnyIgnoreCase("x[BEyAxx[BEyAxx[...", (CharSequence[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short)2127;
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      charSequenceArray0[0] = null;
      charSequenceArray0[2] = null;
      String string0 = StringUtils.SPACE;
      assertNotNull(string0);
      assertEquals(" ", string0);
      
      int int0 = StringUtils.indexOfIgnoreCase(charSequenceArray0[0], (CharSequence) " ", (int) (short)2127);
      assertEquals(3, charSequenceArray0.length);
      assertEquals((-1), int0);
      
      boolean boolean0 = StringUtils.isNumericSpace((CharSequence) null);
      assertFalse(boolean0);
      
      String string1 = StringUtils.leftPad(" ", (int) (short)2127, "mbyrg");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      String string2 = StringUtils.getIfEmpty("23\"%KnE_,=)JXL\"R1K", supplier0);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("23\"%KnE_,=)JXL\"R1K", string2);
      
      String string3 = StringUtils.center("x[BEy7}`X.Sn", 8192, 'Z');
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens(string3, "mbyrg");
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals(2, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string4 = StringUtils.rightPad(string1, 21);
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertNotNull(string4);
      
      Vector<Integer> vector0 = new Vector<Integer>();
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertNotNull(vector0);
      assertFalse(vector0.contains(21));
      
      Integer integer0 = new Integer(4);
      assertFalse(integer0.equals((Object)int0));
      assertNotNull(integer0);
      assertEquals(4, (int)integer0);
      
      boolean boolean1 = vector0.add(integer0);
      assertEquals("[4]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertFalse(vector0.isEmpty());
      assertEquals(1, vector0.size());
      assertFalse(boolean1 == boolean0);
      assertFalse(integer0.equals((Object)int0));
      assertTrue(vector0.contains(integer0));
      assertFalse(vector0.contains(21));
      assertTrue(boolean1);
      
      Stream<Integer> stream0 = vector0.stream();
      assertEquals("[4]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertFalse(vector0.isEmpty());
      assertEquals(1, vector0.size());
      assertNotNull(stream0);
      assertTrue(vector0.contains(integer0));
      assertFalse(vector0.contains(21));
      
      String string5 = StringUtils.join((Iterable<?>) vector0, "x[BEy7}`X.Sn");
      assertEquals("[4]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertFalse(vector0.isEmpty());
      assertEquals(1, vector0.size());
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertNotNull(string5);
      assertTrue(vector0.contains(integer0));
      assertFalse(vector0.contains(21));
      assertEquals("4", string5);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Locale locale0 = Locale.GERMANY;
      assertEquals("DE", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("de_DE", locale0.toString());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("de", locale0.getLanguage());
      assertEquals("DEU", locale0.getISO3Country());
      assertNotNull(locale0);
      
      Stack<Object> stack0 = new Stack<Object>();
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertNotNull(stack0);
      
      Stack<Object> stack1 = new Stack<Object>();
      assertTrue(stack1.empty());
      assertEquals(0, stack1.size());
      assertTrue(stack1.isEmpty());
      assertEquals(10, stack1.capacity());
      assertEquals("[]", stack1.toString());
      assertTrue(stack1.equals((Object)stack0));
      assertNotNull(stack1);
      
      Locale locale1 = Locale.FRANCE;
      assertEquals("fra", locale1.getISO3Language());
      assertEquals("", locale1.getVariant());
      assertEquals("FRA", locale1.getISO3Country());
      assertEquals("FR", locale1.getCountry());
      assertEquals("fr", locale1.getLanguage());
      assertEquals("fr_FR", locale1.toString());
      assertFalse(locale1.equals((Object)locale0));
      assertNotSame(locale1, locale0);
      assertNotNull(locale1);
      
      String[] stringArray0 = Locale.getISOLanguages();
      assertEquals(188, stringArray0.length);
      assertNotNull(stringArray0);
      
      boolean boolean0 = stack0.add((Object) stack1);
      assertEquals("[[]]", stack0.toString());
      assertEquals(1, stack0.size());
      assertFalse(stack0.isEmpty());
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertTrue(stack1.empty());
      assertEquals(0, stack1.size());
      assertTrue(stack1.isEmpty());
      assertEquals(10, stack1.capacity());
      assertEquals("[]", stack1.toString());
      assertFalse(stack0.equals((Object)stack1));
      assertFalse(stack1.equals((Object)stack0));
      assertNotSame(stack0, stack1);
      assertNotSame(stack1, stack0);
      assertTrue(boolean0);
      
      Iterator<Object> iterator0 = stack0.iterator();
      assertEquals("[[]]", stack0.toString());
      assertEquals(1, stack0.size());
      assertFalse(stack0.isEmpty());
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.equals((Object)stack1));
      assertNotSame(stack0, stack1);
      assertNotNull(iterator0);
      
      String string0 = StringUtils.join(iterator0, " ");
      assertEquals("[[]]", stack0.toString());
      assertEquals(1, stack0.size());
      assertFalse(stack0.isEmpty());
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.equals((Object)stack1));
      assertNotSame(stack0, stack1);
      assertNotNull(string0);
      assertFalse(stack0.contains(" "));
      assertEquals("[]", string0);
      
      boolean boolean1 = StringUtils.isAnyEmpty(stringArray0);
      assertFalse(boolean1 == boolean0);
      assertEquals(188, stringArray0.length);
      assertFalse(boolean1);
      
      String string1 = StringUtils.replaceIgnoreCase("[]", "...", (String) null, (-3532));
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("[]", string1);
      
      boolean boolean2 = StringUtils.equals((CharSequence) "[]", (CharSequence) " ");
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[0] = "X['vv/HrWqZ$";
      stringArray0[1] = "X['vv/HrWqZ$";
      stringArray0[2] = "X['vv/HrWqZ$";
      stringArray0[3] = "X['vv/HrWqZ$";
      stringArray0[4] = "X['vv/HrWqZ$";
      stringArray0[5] = "maxWith cannot be negative";
      stringArray0[6] = "X['vv/HrWqZ$";
      // Undeclared exception!
      try { 
        StringUtils.replaceEachRepeatedly("X['vv/HrWqZ$", stringArray0, stringArray0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Aborting to protect against StackOverflowError - output of one loop is the input of another
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      int int0 = StringUtils.indexOfDifference((CharSequence) null, (CharSequence) null);
      assertEquals((-1), int0);
      
      long[] longArray0 = new long[7];
      longArray0[0] = (long) (-1);
      longArray0[1] = (long) (-1);
      longArray0[2] = (long) (-1);
      longArray0[3] = (long) (-1);
      longArray0[4] = (long) (-1);
      longArray0[5] = (long) (-1);
      longArray0[6] = (long) (-1);
      String string0 = StringUtils.join(longArray0, 'Z', (-1), (-1));
      assertEquals(7, longArray0.length);
      assertNotNull(string0);
      assertArrayEquals(new long[] {(-1L), (-1L), (-1L), (-1L), (-1L), (-1L), (-1L)}, longArray0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      Locale locale0 = Locale.GERMANY;
      assertEquals("DE", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("de", locale0.getLanguage());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("de_DE", locale0.toString());
      assertEquals("DEU", locale0.getISO3Country());
      assertNotNull(locale0);
      
      boolean boolean0 = StringUtils.isAsciiPrintable("");
      assertTrue(boolean0);
      
      Object[] objectArray0 = new Object[0];
      String string0 = StringUtils.remove("\r", 'U');
      assertNotNull(string0);
      assertEquals("\r", string0);
      
      String string1 = StringUtils.joinWith("Y", objectArray0);
      assertFalse(string1.equals((Object)string0));
      assertEquals(0, objectArray0.length);
      assertNotNull(string1);
      assertEquals("", string1);
      
      String string2 = StringUtils.join(objectArray0, "R(<Cq@F!X#Ug_t@");
      assertFalse(string2.equals((Object)string0));
      assertEquals(0, objectArray0.length);
      assertNotNull(string2);
      assertEquals("", string2);
      
      String string3 = StringUtils.right("", (-1));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      assertEquals("", string3);
      
      boolean boolean1 = StringUtils.isAllLowerCase("");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = StringUtils.isAlphanumericSpace("\r");
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      String string4 = StringUtils.defaultIfEmpty("\r", "");
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertNotNull(string4);
      assertEquals("\r", string4);
      
      boolean boolean3 = StringUtils.isMixedCase("");
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      int int0 = StringUtils.compare("...", "...", true);
      assertEquals(0, int0);
      
      String string0 = StringUtils.center("Kv9XcM", Integer.MIN_VALUE);
      assertNotNull(string0);
      assertEquals("Kv9XcM", string0);
      
      boolean boolean0 = StringUtils.isAllEmpty((CharSequence[]) null);
      assertTrue(boolean0);
      
      double double0 = StringUtils.getJaroWinklerDistance("Kv9XcM", "...");
      assertEquals(0.0, double0, 0.01);
      
      String string1 = StringUtils.repeat("clone", 322);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      int int1 = StringUtils.indexOfIgnoreCase((CharSequence) string1, (CharSequence) "", 0);
      assertFalse(string1.equals((Object)string0));
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      
      String string2 = StringUtils.CR;
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("\r", string2);
      
      boolean boolean1 = StringUtils.isNoneEmpty((CharSequence[]) null);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      int[] intArray0 = new int[9];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 322;
      intArray0[3] = 0;
      intArray0[4] = Integer.MIN_VALUE;
      intArray0[5] = 0;
      intArray0[6] = 0;
      intArray0[7] = 322;
      intArray0[8] = 322;
      String string3 = StringUtils.join(intArray0, 'y');
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals(9, intArray0.length);
      assertNotNull(string3);
      assertArrayEquals(new int[] {0, 0, 322, 0, Integer.MIN_VALUE, 0, 0, 322, 322}, intArray0);
      assertEquals("0y0y322y0y-2147483648y0y0y322y322", string3);
      
      int int2 = StringUtils.lastOrdinalIndexOf("clone", "", 322);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(5, int2);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("Array element ", (String) null);
      assertEquals(3, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string0 = StringUtils.deleteWhitespace((String) null);
      assertNull(string0);
      
      Integer[] integerArray0 = new Integer[4];
      String string1 = StringUtils.difference("", "Arguments cannot both be null");
      assertNotNull(string1);
      assertEquals("Arguments cannot both be null", string1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[9];
      charSequenceArray0[0] = (CharSequence) "Arguments cannot both be null";
      String string2 = StringUtils.EMPTY;
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("", string2);
      
      charSequenceArray0[1] = (CharSequence) "";
      charSequenceArray0[2] = (CharSequence) "Array element ";
      String string3 = StringUtils.join((Object[]) stringArray0, "");
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals(3, stringArray0.length);
      assertNotNull(string3);
      assertEquals("Arrayelement", string3);
      
      charSequenceArray0[3] = (CharSequence) "Arrayelement";
      charSequenceArray0[4] = (CharSequence) null;
      charSequenceArray0[7] = (CharSequence) "Arguments cannot both be null";
      Locale locale0 = Locale.GERMANY;
      assertEquals("", locale0.getVariant());
      assertEquals("de_DE", locale0.toString());
      assertEquals("de", locale0.getLanguage());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("DE", locale0.getCountry());
      assertEquals("deu", locale0.getISO3Language());
      assertNotNull(locale0);
      
      Set<Character> set0 = locale0.getExtensionKeys();
      assertEquals("", locale0.getVariant());
      assertEquals("de_DE", locale0.toString());
      assertEquals("de", locale0.getLanguage());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("DE", locale0.getCountry());
      assertEquals("deu", locale0.getISO3Language());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertNotNull(set0);
      
      Set<String> set1 = locale0.getUnicodeLocaleAttributes();
      assertEquals("", locale0.getVariant());
      assertEquals("de_DE", locale0.toString());
      assertEquals("de", locale0.getLanguage());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("DE", locale0.getCountry());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals(0, set1.size());
      assertTrue(set1.isEmpty());
      assertNotNull(set1);
      assertFalse(set1.contains(""));
      
      int int0 = StringUtils.compare("Arguments cannot both be null", "");
      assertEquals(29, int0);
      
      String string4 = StringUtils.substring("Arrayelement", (-943));
      assertTrue(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertNotNull(string4);
      assertEquals("Arrayelement", string4);
      
      boolean boolean0 = StringUtils.isAlphaSpace("");
      assertTrue(boolean0);
      
      int int1 = StringUtils.compare((String) null, "9", true);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      Locale locale0 = Locale.GERMANY;
      assertEquals("de_DE", locale0.toString());
      assertEquals("de", locale0.getLanguage());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("DE", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertNotNull(locale0);
      
      String string0 = locale0.getDisplayScript();
      assertEquals("de_DE", locale0.toString());
      assertEquals("de", locale0.getLanguage());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("DE", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertNotNull(string0);
      assertEquals("", string0);
      
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      assertEquals("de_DE", locale0.toString());
      assertEquals("de", locale0.getLanguage());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("DE", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertNotNull(set0);
      assertFalse(set0.contains(string0));
      
      String string1 = StringUtils.substringAfter("\n", 598);
      assertNotNull(string1);
      assertEquals("", string1);
      
      int int0 = StringUtils.length("");
      assertEquals(0, int0);
      
      String string2 = StringUtils.abbreviate("", "", 77);
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("", string2);
      
      String string3 = StringUtils.substringBefore("Uun2IAe}3w5RsI_Up", (String) null);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      assertEquals("Uun2IAe}3w5RsI_Up", string3);
      
      String string4 = StringUtils.wrap("k$", '*');
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertNotNull(string4);
      assertEquals("*k$*", string4);
      
      String string5 = StringUtils.reverse("Uun2IAe}3w5RsI_Up");
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertNotNull(string5);
      assertEquals("pU_IsR5w3}eAI2nuU", string5);
      
      String string6 = "\\u";
      String string7 = StringUtils.wrap(string6, '}');
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string3));
      assertNotNull(string7);
      assertEquals("}\\u}", string7);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      int int0 = StringUtils.compare("...", "...", true);
      assertEquals(0, int0);
      
      String string0 = StringUtils.strip("...", "...");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.substringBefore("", 3116);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      String string0 = StringUtils.substringBefore(" ", 64);
      assertNotNull(string0);
      assertEquals(" ", string0);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      float[] floatArray0 = new float[5];
      floatArray0[1] = (-412.24F);
      String string0 = StringUtils.uncapitalize("KO)(uo0>#;N");
      assertNotNull(string0);
      assertEquals("kO)(uo0>#;N", string0);
      
      String string1 = StringUtils.replaceChars("kO)(uo0>#;N", "kO)(uo0>#;N", "/q?ca3#*'o\"(U4RI^");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("/q?ca3#*'o\"", string1);
      
      String string2 = StringUtils.substringBefore("KO)(uo0>#;N", 109);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("KO)(uo0>#;N", string2);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      char[] charArray0 = new char[6];
      String string0 = StringUtils.EMPTY;
      assertNotNull(string0);
      assertEquals("", string0);
      
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "", charArray0);
      assertEquals(6, charArray0.length);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertTrue(boolean0);
      
      String string1 = StringUtils.substring("org.apache.commons.lang3.CharUtils", (-2005));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("org.apache.commons.lang3.CharUtils", string1);
      
      boolean boolean1 = StringUtils.isAlphaSpace("Cannot clone Cloneable type ");
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      boolean boolean2 = StringUtils.contains((CharSequence) "org.apache.commons.lang3.CharUtils", 93);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      String string0 = StringUtils.leftPad("Supplied value must be a valid byte literal between -128 and 127: [", 50, 'g');
      assertNotNull(string0);
      assertEquals("Supplied value must be a valid byte literal between -128 and 127: [", string0);
      
      String string1 = StringUtils.leftPad("Array element ", 50, "Locale must not be null");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("Locale must not be nullLocale must nArray element ", string1);
      
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      String string2 = StringUtils.getIfEmpty("Locale must not be null", supplier0);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("Locale must not be null", string2);
      
      String string3 = StringUtils.abbreviateMiddle((String) null, (String) null, 15);
      assertNull(string3);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      String string0 = "...";
      char[] charArray0 = new char[6];
      charArray0[0] = ':';
      charArray0[1] = '5';
      charArray0[2] = ':';
      charArray0[3] = 'B';
      charArray0[4] = 'D';
      charArray0[5] = 'B';
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "...", charArray0);
      assertEquals(6, charArray0.length);
      assertArrayEquals(new char[] {':', '5', ':', 'B', 'D', 'B'}, charArray0);
      assertEquals(0, int0);
      
      int int1 = StringUtils.getLevenshteinDistance((CharSequence) "...", (CharSequence) "...");
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      
      String string1 = StringUtils.normalizeSpace("D-M|fDAnNUrLf~9*e");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("D-M|fDAnNUrLf~9*e", string1);
      
      String string2 = StringUtils.wrapIfMissing("IJ[>-hg9BsMG#IJ[>-hg9BsMG#", ':');
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals(":IJ[>-hg9BsMG#IJ[>-hg9BsMG#:", string2);
      
      boolean boolean0 = StringUtils.containsNone((CharSequence) "D-M|fDAnNUrLf~9*e", (String) null);
      assertTrue(boolean0);
      
      int int2 = StringUtils.indexOfAnyBut((CharSequence) null, (CharSequence) "D-M|fDAnNUrLf~9*e");
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals((-1), int2);
      
      String string3 = StringUtils.substringAfter("Minimum abbreviation width with offset is %d", "=");
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      assertEquals("", string3);
      
      String string4 = "qJ{q";
      String string5 = StringUtils.replaceAll("...", "\n", "qJ{q");
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertTrue(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertNotNull(string5);
      assertEquals("...", string5);
      
      CharSequence charSequence0 = StringUtils.defaultIfEmpty((CharSequence) "\n", (CharSequence) "...");
      assertFalse(charSequence0.equals((Object)string4));
      assertFalse(charSequence0.equals((Object)string5));
      assertFalse(charSequence0.equals((Object)string2));
      assertFalse(charSequence0.equals((Object)string3));
      assertFalse(charSequence0.equals((Object)string0));
      assertFalse(charSequence0.equals((Object)string1));
      assertNotNull(charSequence0);
      assertEquals("\n", charSequence0);
      
      int int3 = StringUtils.indexOf((CharSequence) "\n", (CharSequence) null);
      assertFalse(int3 == int0);
      assertTrue(int3 == int2);
      assertFalse(int3 == int1);
      assertEquals((-1), int3);
      
      Charset charset0 = Charset.defaultCharset();
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.displayName());
      assertNotNull(charset0);
      
      // Undeclared exception!
      try { 
        ByteBuffer.allocateDirect((-67));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative capacity: -67
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      String string0 = StringUtils.stripAccents("");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.wrap(" is not in the range '0' - '9'", '3');
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("3 is not in the range '0' - '9'3", string1);
      
      String[] stringArray0 = StringUtils.substringsBetween("", "3 is not in the range '0' - '9'3", "3 is not in the range '0' - '9'3");
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      boolean boolean0 = StringUtils.containsNone((CharSequence) " is not in the range '0' - '9'", (String) null);
      assertTrue(boolean0);
      
      String[] stringArray1 = StringUtils.split("K8^O9|EdG\"]Z_uU", 'R');
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray1, stringArray0);
      assertEquals(1, stringArray1.length);
      assertNotNull(stringArray1);
      
      String string2 = StringUtils.join((Object[]) stringArray0, '=');
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertNotSame(stringArray0, stringArray1);
      assertEquals(0, stringArray0.length);
      assertNotNull(string2);
      assertEquals("", string2);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      String string0 = StringUtils.unwrap((String) null, 'A');
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByCharacterType("1{t\"n}~.Y};dsu=mD");
      assertEquals(15, stringArray0.length);
      assertNotNull(stringArray0);
      
      char[] charArray0 = new char[9];
      charArray0[0] = '=';
      String string0 = StringUtils.substring("1{t\"n}~.Y};dsu=mD", (-731));
      assertNotNull(string0);
      assertEquals("1{t\"n}~.Y};dsu=mD", string0);
      
      String string1 = StringUtils.leftPad("h", (-731));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("h", string1);
      
      String string2 = "\\u";
      String string3 = StringUtils.wrapIfMissing(string2, "");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      assertEquals("\\u", string3);
      
      String string4 = StringUtils.substringAfter("Rt}hHLhM_Y6T!m)j]", (-1877));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertNotNull(string4);
      assertEquals("", string4);
      
      // Undeclared exception!
      try { 
        StringUtils.truncate(string3, (-1877));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // maxWith cannot be negative
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      String string0 = StringUtils.substringBeforeLast("U{", "\n");
      assertNotNull(string0);
      assertEquals("U{", string0);
      
      String string1 = StringUtils.wrapIfMissing("org.apache.commons.lang3.exception.CloneFailedException", "");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("org.apache.commons.lang3.exception.CloneFailedException", string1);
      
      String string2 = StringUtils.substring("nHU`D", 2781);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("", string2);
      
      String string3 = StringUtils.leftPad("mf", 4, "nHU`D");
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      assertEquals("nmf", string3);
      
      int int0 = StringUtils.indexOf((CharSequence) "\r", (-1));
      assertEquals((-1), int0);
      
      char[] charArray0 = new char[0];
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "", charArray0);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      String string0 = StringUtils.mid("N]I`al;FP_1$^j,.Q<l", 128, 4150);
      assertNotNull(string0);
      assertEquals("", string0);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "", 16);
      assertEquals((-1), int0);
      
      boolean boolean0 = StringUtils.isAlphaSpace("");
      assertTrue(boolean0);
      
      boolean boolean1 = StringUtils.contains((CharSequence) "N]I`al;FP_1$^j,.Q<l", 2545);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short)2;
      shortArray0[1] = (short)2;
      shortArray0[2] = (short)2;
      String string0 = StringUtils.rightPad("R'1thk", (int) (short)2, "null/empty items");
      assertNotNull(string0);
      assertEquals("R'1thk", string0);
      
      String string1 = StringUtils.center("null/empty items", (int) (short)2, "null/empty items");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("null/empty items", string1);
      
      boolean boolean0 = StringUtils.contains((CharSequence) "R'1thk", (CharSequence) "R'1thk");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      String string0 = StringUtils.join(objectArray0);
      assertEquals(1, objectArray0.length);
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.reverse("");
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
      
      boolean boolean0 = StringUtils.containsWhitespace("Pl'I0C0]FVY*{:`jr{`");
      assertFalse(boolean0);
      
      String string2 = StringUtils.substringAfter("^f*uy+K+)I8=wl4", 48);
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("", string2);
      
      String string3 = StringUtils.truncate("R(<C", 751);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      assertEquals("R(<C", string3);
      
      String string4 = StringUtils.center("", 751, "");
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertNotNull(string4);
      assertEqualsstring4);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      int int0 = StringUtils.ordinalIndexOf(" ", " ", 13);
      assertEquals((-1), int0);
      
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short)2;
      shortArray0[1] = (short)2;
      shortArray0[2] = (short)2;
      String[] stringArray0 = StringUtils.splitPreserveAllTokens(" ", 'f');
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string0 = StringUtils.rightPad("R'1thk", (int) (short)2, "null/empty items");
      assertNotNull(string0);
      assertEquals("R'1thk", string0);
      
      String string1 = StringUtils.center("null/empty items", (int) (short)2, "null/empty items");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("null/empty items", string1);
      
      String string2 = StringUtils.rightPad(" ", (-1));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals(" ", string2);
      
      int int1 = StringUtils.lastIndexOfIgnoreCase((CharSequence) " ", (CharSequence) " ", 1);
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      boolean boolean0 = StringUtils.containsIgnoreCase(" ", "R'1thk");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) "object";
      objectArray0[1] = (Object) "9Y`]eiW^{x@Rl";
      objectArray0[2] = (Object) "object";
      objectArray0[3] = (Object) "object";
      objectArray0[4] = (Object) "object";
      objectArray0[5] = (Object) "9Y`]eiW^{x@Rl";
      String string0 = StringUtils.join(objectArray0, "nt aX-1.0x-412.24x1.0x-2592.4207x-2730.193aX-1.0x-412.24x1.0x-2592.4207x-2730.193aX-1.0x-412.24x1.0x-2592.4207x-2730.193-1.0x-412.24x1.0x-2592.4207x-2730.193");
      assertEquals(6, objectArray0.length);
      assertNotNull(string0);
      assertEquals("objectnt aX-1.0x-412.24x1.0x-2592.4207x-2730.193aX-1.0x-412.24x1.0x-2592.4207x-2730.193aX-1.0x-412.24x1.0x-2592.4207x-2730.193-1.0x-412.24x1.0x-2592.4207x-2730.1939Y`]eiW^{x@Rlnt aX-1.0x-412.24x1.0x-2592.4207x-2730.193aX-1.0x-412.24x1.0x-2592.4207x-2730.193aX-1.0x-412.24x1.0x-2592.4207x-2730.193-1.0x-412.24x1.0x-2592.4207x-2730.193objectnt aX-1.0x-412.24x1.0x-2592.4207x-2730.193aX-1.0x-412.24x1.0x-2592.4207x-2730.193aX-1.0x-412.24x1.0x-2592.4207x-2730.193-1.0x-412.24x1.0x-2592.4207x-2730.193objectnt aX-1.0x-412.24x1.0x-2592.4207x-2730.193aX-1.0x-412.24x1.0x-2592.4207x-2730.193aX-1.0x-412.24x1.0x-2592.4207x-2730.193-1.0x-412.24x1.0x-2592.4207x-2730.193objectnt aX-1.0x-412.24x1.0x-2592.4207x-2730.193aX-1.0x-412.24x1.0x-2592.4207x-2730.193aX-1.0x-412.24x1.0x-2592.4207x-2730.193-1.0x-412.24x1.0x-2592.4207x-2730.1939Y`]eiW^{x@Rl", string0);
      
      boolean boolean0 = StringUtils.isAllLowerCase("object");
      assertTrue(boolean0);
      
      boolean boolean1 = StringUtils.isAlphanumericSpace("objectnt aX-1.0x-412.24x1.0x-2592.4207x-2730.193aX-1.0x-412.24x1.0x-2592.4207x-2730.193aX-1.0x-412.24x1.0x-2592.4207x-2730.193-1.0x-412.24x1.0x-2592.4207x-2730.1939Y`]eiW^{x@Rlnt aX-1.0x-412.24x1.0x-2592.4207x-2730.193aX-1.0x-412.24x1.0x-2592.4207x-2730.193aX-1.0x-412.24x1.0x-2592.4207x-2730.193-1.0x-412.24x1.0x-2592.4207x-2730.193objectnt aX-1.0x-412.24x1.0x-2592.4207x-2730.193aX-1.0x-412.24x1.0x-2592.4207x-2730.193aX-1.0x-412.24x1.0x-2592.4207x-2730.193-1.0x-412.24x1.0x-2592.4207x-2730.193objectnt aX-1.0x-412.24x1.0x-2592.4207x-2730.193aX-1.0x-412.24x1.0x-2592.4207x-2730.193aX-1.0x-412.24x1.0x-2592.4207x-2730.193-1.0x-412.24x1.0x-2592.4207x-2730.193objectnt aX-1.0x-412.24x1.0x-2592.4207x-2730.193aX-1.0x-412.24x1.0x-2592.4207x-2730.193aX-1.0x-412.24x1.0x-2592.4207x-2730.193-1.0x-412.24x1.0x-2592.4207x-2730.1939Y`]eiW^{x@Rl");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string1 = StringUtils.defaultIfEmpty("objectnt aX-1.0x-412.24x1.0x-2592.4207x-2730.193aX-1.0x-412.24x1.0x-2592.4207x-2730.193aX-1.0x-412.24x1.0x-2592.4207x-2730.193-1.0x-412.24x1.0x-2592.4207x-2730.1939Y`]eiW^{x@Rlnt aX-1.0x-412.24x1.0x-2592.4207x-2730.193aX-1.0x-412.24x1.0x-2592.4207x-2730.193aX-1.0x-412.24x1.0x-2592.4207x-2730.193-1.0x-412.24x1.0x-2592.4207x-2730.193objectnt aX-1.0x-412.24x1.0x-2592.4207x-2730.193aX-1.0x-412.24x1.0x-2592.4207x-2730.193aX-1.0x-412.24x1.0x-2592.4207x-2730.193-1.0x-412.24x1.0x-2592.4207x-2730.193objectnt aX-1.0x-412.24x1.0x-2592.4207x-2730.193aX-1.0x-412.24x1.0x-2592.4207x-2730.193aX-1.0x-412.24x1.0x-2592.4207x-2730.193-1.0x-412.24x1.0x-2592.4207x-2730.193objectnt aX-1.0x-412.24x1.0x-2592.4207x-2730.193aX-1.0x-412.24x1.0x-2592.4207x-2730.193aX-1.0x-412.24x1.0x-2592.4207x-2730.193-1.0x-412.24x1.0x-2592.4207x-2730.1939Y`]eiW^{x@Rl", "");
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("objectnt aX-1.0x-412.24x1.0x-2592.4207x-2730.193aX-1.0x-412.24x1.0x-2592.4207x-2730.193aX-1.0x-412.24x1.0x-2592.4207x-2730.193-1.0x-412.24x1.0x-2592.4207x-2730.1939Y`]eiW^{x@Rlnt aX-1.0x-412.24x1.0x-2592.4207x-2730.193aX-1.0x-412.24x1.0x-2592.4207x-2730.193aX-1.0x-412.24x1.0x-2592.4207x-2730.193-1.0x-412.24x1.0x-2592.4207x-2730.193objectnt aX-1.0x-412.24x1.0x-2592.4207x-2730.193aX-1.0x-412.24x1.0x-2592.4207x-2730.193aX-1.0x-412.24x1.0x-2592.4207x-2730.193-1.0x-412.24x1.0x-2592.4207x-2730.193objectnt aX-1.0x-412.24x1.0x-2592.4207x-2730.193aX-1.0x-412.24x1.0x-2592.4207x-2730.193aX-1.0x-412.24x1.0x-2592.4207x-2730.193-1.0x-412.24x1.0x-2592.4207x-2730.193objectnt aX-1.0x-412.24x1.0x-2592.4207x-2730.193aX-1.0x-412.24x1.0x-2592.4207x-2730.193aX-1.0x-412.24x1.0x-2592.4207x-2730.193-1.0x-412.24x1.0x-2592.4207x-2730.1939Y`]eiW^{x@Rl", string1);
      
      boolean boolean2 = StringUtils.isMixedCase("9Y`]eiW^{x@Rl");
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "object";
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "9Y`]eiW^{x@Rl", (CharSequence) "object", 79);
      assertEquals((-1), int0);
      
      boolean boolean0 = StringUtils.containsIgnoreCase("9Y`]eiW^{x@Rl", "object");
      assertFalse(boolean0);
      
      String[] stringArray1 = StringUtils.stripAll(stringArray0, "9Y`]eiW^{x@Rl");
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(2, stringArray0.length);
      assertEquals(2, stringArray1.length);
      assertNotNull(stringArray1);
      
      String[] stringArray2 = StringUtils.splitPreserveAllTokens(stringArray0[1], stringArray0[1]);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertNotSame(stringArray0, stringArray1);
      assertEquals(2, stringArray0.length);
      assertNull(stringArray2);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = 'Q';
      long[] longArray0 = new long[1];
      longArray0[0] = (long) 'O';
      String string0 = StringUtils.join(longArray0, 'x');
      assertEquals(1, longArray0.length);
      assertNotNull(string0);
      assertArrayEquals(new long[] {79L}, longArray0);
      assertEquals("79", string0);
      
      String[] stringArray0 = StringUtils.split("79", "9", 0);
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string1 = StringUtils.substringBetween("H^>WE", (String) null);
      assertNull(string1);
      
      String string2 = StringUtils.lowerCase("=q@F!X#Ug_t@7eq3P]P}dcFH>x");
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      String string3 = StringUtils.uncapitalize((String) null);
      assertNull(string3);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = '8';
      charArray0[1] = '5';
      String string0 = StringUtils.leftPad((String) null, 50, 'g');
      assertNull(string0);
      
      String[] stringArray0 = StringUtils.splitByCharacterType(" vs ");
      assertEquals(3, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string1 = StringUtils.rightPad("The type must not be null", (-1539), (String) null);
      assertNotNull(string1);
      assertEquals("The type must not be null", string1);
      
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) null;
      objectArray0[0] = (Object) "The type must not be null";
      objectArray0[2] = (Object) " vs ";
      objectArray0[3] = (Object) null;
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[4] = object0;
      String string2 = StringUtils.EMPTY;
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("", string2);
      
      String string3 = StringUtils.substringBetween((String) null, "", "");
      assertNull(string3);
      
      String string4 = StringUtils.reverseDelimited("V,1", '5');
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertNotNull(string4);
      assertEquals("V,1", string4);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      String string0 = StringUtils.reverseDelimited("x[BEyAx", 'g');
      assertNotNull(string0);
      assertEquals("x[BEyAx", string0);
      
      String[] stringArray0 = Locale.getISOLanguages();
      assertEquals(188, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string1 = StringUtils.rightPad("x[BEyAx", (int) 'g', "x[BEyAx");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("x[BEyAxx[BEyAxx[BEyAxx[BEyAxx[BEyAxx[BEyAxx[BEyAxx[BEyAxx[BEyAxx[BEyAxx[BEyAxx[BEyAxx[BEyAxx[BEyAxx[BEy", string1);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      String string2 = StringUtils.join((Object[]) stringArray0, (String) null);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals(188, stringArray0.length);
      assertNotNull(string2);
      assertEquals("aaabaeafakamanarasavayazbabebgbhbibmbnbobrbscacechcocrcscucvcydadedvdzeeeleneoeseteufafffifjfofrfygagdglgngugvhahehihohrhthuhyhziaidieigiiikinioisitiuiwjajijvkakgkikjkkklkmknkokrkskukvkwkylalblglilnloltlulvmgmhmimkmlmnmomrmsmtmynanbndnengnlnnnonrnvnyocojomorospapiplpsptqurmrnrorurwsascsdsesgsiskslsmsnsosqsrssstsusvswtatetgthtitktltntotrtstttwtyugukuruzvevivowawoxhyiyozazhzu", string2);
      
      boolean boolean0 = StringUtils.isAllLowerCase((CharSequence) null);
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isAlphanumericSpace("The type must notbe null");
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String string3 = StringUtils.defaultIfEmpty("x[BEyAxx[BEyAxx[BEyAxx[BEyAxx[BEyAxx[BEyAxx[BEyAxx[BEyAxx[BEyAxx[BEyAxx[BEyAxx[BEyAxx[BEyAxx[BEyAxx[BEy", "x[BEyAxx[BEyAxx[BEyAxx[BEyAxx[BEyAxx[BEyAxx[BEyAxx[BEyAxx[BEyAxx[BEyAxx[BEyAxx[BEyAxx[BEyAxx[BEyAxx[BEy");
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string1));
      assertNotNull(string3);
      assertEquals("x[BEyAxx[BEyAxx[BEyAxx[BEyAxx[BEyAxx[BEyAxx[BEyAxx[BEyAxx[BEyAxx[BEyAxx[BEyAxx[BEyAxx[BEyAxx[BEyAxx[BEy", string3);
      
      boolean boolean2 = StringUtils.isMixedCase("x[BEyAx");
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      String[] stringArray0 = StringUtils.split("");
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      int int0 = StringUtils.compareIgnoreCase("", "");
      assertEquals(0, int0);
      
      boolean boolean0 = StringUtils.isAlpha("");
      assertFalse(boolean0);
      
      String string0 = StringUtils.appendIfMissing("a", "a", stringArray0);
      assertEquals(0, stringArray0.length);
      assertNotNull(string0);
      assertEquals("a", string0);
      
      String[] stringArray1 = StringUtils.stripAll(stringArray0, "x&{#0],$RHy");
      assertSame(stringArray0, stringArray1);
      assertSame(stringArray1, stringArray0);
      assertEquals(0, stringArray0.length);
      assertEquals(0, stringArray1.length);
      assertNotNull(stringArray1);
      
      String string1 = StringUtils.reverse("&X3YY%@");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("@%YY3X&", string1);
      
      Vector<Integer> vector0 = new Vector<Integer>();
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.isEmpty());
      assertNotNull(vector0);
      assertFalse(vector0.contains(int0));
      
      Integer integer0 = new Integer(0);
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      boolean boolean1 = vector0.add(integer0);
      assertFalse(vector0.isEmpty());
      assertEquals("[0]", vector0.toString());
      assertEquals(1, vector0.size());
      assertEquals(10, vector0.capacity());
      assertTrue(integer0.equals((Object)int0));
      assertFalse(boolean1 == boolean0);
      assertTrue(vector0.contains(int0));
      assertTrue(boolean1);
      
      boolean boolean2 = vector0.add(integer0);
      assertFalse(vector0.isEmpty());
      assertEquals(2, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals("[0, 0]", vector0.toString());
      assertTrue(integer0.equals((Object)int0));
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertTrue(vector0.contains(int0));
      assertTrue(boolean2);
      
      boolean boolean3 = vector0.add(integer0);
      assertEquals("[0, 0, 0]", vector0.toString());
      assertFalse(vector0.isEmpty());
      assertEquals(3, vector0.size());
      assertEquals(10, vector0.capacity());
      assertTrue(integer0.equals((Object)int0));
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3 == boolean0);
      assertTrue(vector0.contains(int0));
      assertTrue(boolean3);
      
      Spliterator<Integer> spliterator0 = vector0.spliterator();
      assertEquals("[0, 0, 0]", vector0.toString());
      assertFalse(vector0.isEmpty());
      assertEquals(3, vector0.size());
      assertEquals(10, vector0.capacity());
      assertNotNull(spliterator0);
      assertTrue(vector0.contains(int0));
      
      String string2 = StringUtils.removeAll("Bj8vv#:)=+@CQjPr\"6f", "@%YY3X&");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("Bj8vv#:)=+@CQjPr\"6f", string2);
      
      String string3 = StringUtils.stripStart("yR1MavwCN", "&X3YY%@");
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      assertEquals("yR1MavwCN", string3);
      
      String string4 = StringUtils.abbreviateMiddle(", Length: 0", "kb>K:%lR&M+Fm2*/78.", 0);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertNotNull(string4);
      assertEquals(", Length: 0", string4);
      
      boolean boolean4 = StringUtils.equalsAny("Bj8vv#:)=+@CQjPr\"6f", stringArray1);
      assertTrue(boolean4 == boolean0);
      assertFalse(boolean4 == boolean3);
      assertFalse(boolean4 == boolean1);
      assertFalse(boolean4 == boolean2);
      assertSame(stringArray0, stringArray1);
      assertSame(stringArray1, stringArray0);
      assertEquals(0, stringArray0.length);
      assertEquals(0, stringArray1.length);
      assertFalse(boolean4);
      
      String string5 = StringUtils.stripAccents("x&{#0],$RHy");
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertNotNull(string5);
      assertEquals("x&{#0],$RHy", string5);
      
      boolean boolean5 = StringUtils.startsWithAny("x&{#0],$RHy", stringArray0);
      assertFalse(boolean5 == boolean2);
      assertFalse(boolean5 == boolean1);
      assertTrue(boolean5 == boolean0);
      assertTrue(boolean5 == boolean4);
      assertFalse(boolean5 == boolean3);
      assertSame(stringArray0, stringArray1);
      assertEquals(0, stringArray0.length);
      assertFalse(boolean5);
      
      String[] stringArray2 = StringUtils.stripAll(stringArray0);
      assertSame(stringArray0, stringArray1);
      assertSame(stringArray0, stringArray2);
      assertSame(stringArray2, stringArray1);
      assertSame(stringArray2, stringArray0);
      assertEquals(0, stringArray0.length);
      assertEquals(0, stringArray2.length);
      assertNotNull(stringArray2);
      
      String string6 = StringUtils.getDigits("\"DiNx5,+.hP${E");
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string4));
      assertNotNull(string6);
      assertEquals("5", string6);
      
      String string7 = StringUtils.stripStart(",r$h1r5.]Q.:fM+", "4#6O|dbH2> BS$");
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string4));
      assertNotNull(string7);
      assertEquals(",r$h1r5.]Q.:fM+", string7);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      Locale locale0 = Locale.GERMANY;
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("de", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("de_DE", locale0.toString());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("DE", locale0.getCountry());
      assertNotNull(locale0);
      
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("de", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("de_DE", locale0.toString());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("DE", locale0.getCountry());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertNotNull(set0);
      
      String string0 = StringUtils.substringAfter("\n", 598);
      assertNotNull(string0);
      assertEquals("", string0);
      
      int int0 = StringUtils.length("");
      assertEquals(0, int0);
      
      String string1 = StringUtils.stripToNull("\r");
      assertNull(string1);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      String string2 = StringUtils.join(booleanArray0, '/', 1431, 256);
      assertEquals(4, booleanArray0.length);
      assertNotNull(string2);
      assertTrue(Arrays.equals(new boolean[] {true, false, true, true}, booleanArray0));
      assertEquals("", string2);
      
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      charSequenceArray0[0] = (CharSequence) " ";
      charSequenceArray0[1] = (CharSequence) "O";
      charSequenceArray0[2] = (CharSequence) "\n";
      charSequenceArray0[3] = (CharSequence) null;
      charSequenceArray0[4] = (CharSequence) "";
      String string3 = StringUtils.appendIfMissingIgnoreCase("", "", charSequenceArray0);
      assertTrue(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string2));
      assertEquals(5, charSequenceArray0.length);
      assertNotNull(string3);
      assertEquals("", string3);
      
      String string4 = StringUtils.stripToNull("?rJaCN.)c/2'D");
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertNotNull(string4);
      assertEquals("?rJaCN.)c/2'D", string4);
      
      boolean boolean0 = StringUtils.containsAnyIgnoreCase("?rJaCN.)c/2'D", charSequenceArray0);
      assertEquals(5, charSequenceArray0.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      String string0 = StringUtils.leftPad("Supplied value must be a valid byte literal between -128 and 127: [", 50, 'g');
      assertNotNull(string0);
      assertEquals("Supplied value must be a valid byte literal between -128 and 127: [", string0);
      
      String string1 = StringUtils.uncapitalize("H|A16<g");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("h|A16<g", string1);
      
      int int0 = StringUtils.length("Supplied value must be a valid byte literal between -128 and 127: [");
      assertEquals(67, int0);
      
      String string2 = StringUtils.substringAfterLast(" has no clone method", "RI");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("", string2);
      
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      booleanArray0[6] = true;
      booleanArray0[7] = true;
      String string3 = StringUtils.join(booleanArray0, '?');
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals(8, booleanArray0.length);
      assertNotNull(string3);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, false, true, true, true, true}, booleanArray0));
      assertEquals("true?true?true?false?true?true?true?true", string3);
      
      boolean boolean0 = StringUtils.contains((CharSequence) " has no clone method", (CharSequence) "O;(I!5?^");
      assertFalse(boolean0);
      
      String string4 = StringUtils.rightPad("Supplied value must be a valid byte literal between -128 and 127: [", 67, "W5\"2;v");
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string0));
      assertNotNull(string4);
      assertEquals("Supplied value must be a valid byte literal between -128 and 127: [", string4);
      
      int int1 = StringUtils.lastIndexOf((CharSequence) "H|A16<g", 67, 321);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      String string5 = StringUtils.unwrap("8tR'z.8zqxol'bTt", 'O');
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertNotNull(string5);
      assertEquals("8tR'z.8zqxol'bTt", string5);
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      float[] floatArray0 = new float[4];
      floatArray0[1] = (-412.24F);
      String string0 = StringUtils.uncapitalize("KO)(uo0>#;N");
      assertNotNull(string0);
      assertEquals("kO)(uo0>#;N", string0);
      
      String string1 = StringUtils.replaceChars("kO)(uo0>#;N", "kO)(uo0>#;N", "/q?ca3#*'o\"(U4RI^");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("/q?ca3#*'o\"", string1);
      
      String string2 = StringUtils.substringBefore("KO)(uo0>#;N", 109);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("KO)(uo0>#;N", string2);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      int int0 = StringUtils.compareIgnoreCase("=`%d=7wr7,/{8`", "Z");
      assertEquals((-61), int0);
      
      String string0 = StringUtils.strip("=`%d=7wr7,/{8`", "ghhfOQ!a{@M#22");
      assertNotNull(string0);
      assertEquals("=`%d=7wr7,/{8`", string0);
      
      boolean boolean0 = StringUtils.isNumericSpace("=`%d=7wr7,/{8`");
      assertFalse(boolean0);
      
      String string1 = StringUtils.rightPad("ghhfOQ!a{@M#22", 10);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("ghhfOQ!a{@M#22", string1);
      
      Locale locale0 = Locale.ENGLISH;
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("en", locale0.toString());
      assertNotNull(locale0);
      
      String string2 = StringUtils.trimToEmpty("Exception cloning Cloneable type ");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("Exception cloning Cloneable type", string2);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparator("Z", "ghhfOQ!a{@M#22", (-61));
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string3 = StringUtils.LF;
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      assertEquals("\n", string3);
      
      CharSequence charSequence0 = StringUtils.getIfBlank((CharSequence) "Exception cloning Cloneable type", (Supplier<CharSequence>) null);
      assertFalse(charSequence0.equals((Object)string0));
      assertFalse(charSequence0.equals((Object)string3));
      assertTrue(charSequence0.equals((Object)string2));
      assertFalse(charSequence0.equals((Object)string1));
      assertNotNull(charSequence0);
      assertEquals("Exception cloning Cloneable type", charSequence0);
      
      boolean boolean1 = StringUtils.equalsAny("=`%d=7wr7,/{8`", stringArray0);
      assertTrue(boolean1 == boolean0);
      assertEquals(1, stringArray0.length);
      assertFalse(boolean1);
      
      String string4 = StringUtils.replaceChars("O~iwE", 'f', 'C');
      assertFalse(string4.equals((Object)charSequence0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertNotNull(string4);
      assertEquals("O~iwE", string4);
      
      String[] stringArray1 = StringUtils.split("ghhfOQ!a{@M#22");
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray1, stringArray0);
      assertEquals(1, stringArray1.length);
      assertNotNull(stringArray1);
      
      boolean boolean2 = StringUtils.isAsciiPrintable("Exception cloning Cloneable type");
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2);
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      Locale locale0 = Locale.GERMANY;
      assertEquals("DE", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("de_DE", locale0.toString());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("de", locale0.getLanguage());
      assertNotNull(locale0);
      
      boolean boolean0 = StringUtils.isAsciiPrintable("");
      assertTrue(boolean0);
      
      Object[] objectArray0 = new Object[0];
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("", "aX-");
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string0 = StringUtils.remove("\r", 'U');
      assertNotNull(string0);
      assertEquals("\r", string0);
      
      String string1 = StringUtils.joinWith("Y", objectArray0);
      assertFalse(string1.equals((Object)string0));
      assertEquals(0, objectArray0.length);
      assertNotNull(string1);
      assertEquals("", string1);
      
      String string2 = StringUtils.repeat(" ", (int) 'U');
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("                                                                                     ", string2);
      
      String string3 = StringUtils.right("", (-1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      assertEquals("", string3);
      
      boolean boolean1 = StringUtils.isAllLowerCase("");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = StringUtils.isAlphanumericSpace("\r");
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      ArrayList<Object> arrayList1 = new ArrayList<Object>();
      assertTrue(arrayList1.isEmpty());
      assertEquals(0, arrayList1.size());
      assertNotNull(arrayList1);
      assertFalse(arrayList1.contains("\r"));
      
      String string4 = StringUtils.abbreviateMiddle("", " ", 13);
      assertFalse(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertNotNull(string4);
      assertEquals("", string4);
      
      boolean boolean3 = StringUtils.equalsAny("Y", (CharSequence[]) null);
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3);
      
      boolean boolean4 = StringUtils.startsWithAny("", (CharSequence[]) null);
      assertTrue(boolean4 == boolean1);
      assertTrue(boolean4 == boolean3);
      assertFalse(boolean4 == boolean0);
      assertTrue(boolean4 == boolean2);
      assertFalse(boolean4);
      
      String string5 = StringUtils.getDigits("");
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertTrue(string5.equals((Object)string3));
      assertTrue(string5.equals((Object)string1));
      assertTrue(string5.equals((Object)string4));
      assertNotNull(string5);
      assertEquals("", string5);
      
      String[] stringArray1 = StringUtils.splitByCharacterTypeCamelCase("");
      assertSame(stringArray1, stringArray0);
      assertEquals(0, stringArray1.length);
      assertNotNull(stringArray1);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      String string0 = StringUtils.abbreviate("^f*uy+K+)I8=wl4", "", 0);
      assertNotNull(string0);
      assertEquals("^f*uy+K+)I8=wl4", string0);
      
      String string1 = StringUtils.getDigits("");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
      
      String string2 = StringUtils.abbreviate("", 0);
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("", string2);
      
      String string3 = StringUtils.substring("Strings must not be null", 0, 2046);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      assertEquals("Strings must not be null", string3);
      
      String[] stringArray0 = StringUtils.splitByCharacterType("");
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string4 = StringUtils.rightPad("V7c|aftBzrB7}`X.Sn", (-2518), ".");
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertNotNull(string4);
      assertEquals("V7c|aftBzrB7}`X.Sn", string4);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      String string5 = StringUtils.join((Object[]) stringArray0, " ");
      assertTrue(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertTrue(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertEquals(0, stringArray0.length);
      assertNotNull(string5);
      assertEquals("", string5);
      
      boolean boolean0 = StringUtils.isAllLowerCase("V7c|aftBzrB7}`X.Sn");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isAlphanumericSpace("");
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String string6 = StringUtils.defaultIfEmpty("OC%A=(<37w+8_", "-!5SC)G`U%]CGx3");
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string0));
      assertNotNull(string6);
      assertEquals("OC%A=(<37w+8_", string6);
      
      boolean boolean2 = StringUtils.isMixedCase("^f*uy+K+)I8=wl4");
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2);
      
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      String string7 = StringUtils.getIfBlank(".", supplier0);
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string5));
      assertNotNull(string7);
      assertEquals(".", string7);
      
      String[] stringArray1 = StringUtils.splitPreserveAllTokens("=q@F!X#Ug_t@7eq3P]P}dcFH>x");
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray1, stringArray0);
      assertEquals(1, stringArray1.length);
      assertNotNull(stringArray1);
      
      String[] stringArray2 = StringUtils.splitByWholeSeparator("V7c|aftBzrB7}`X.Sn", "=q@F!X#Ug_t@7eq3P]P}dcFH>x");
      assertFalse(stringArray2.equals((Object)stringArray1));
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertNotSame(stringArray2, stringArray1);
      assertNotSame(stringArray2, stringArray0);
      assertEquals(1, stringArray2.length);
      assertNotNull(stringArray2);
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = 'Q';
      String string0 = StringUtils.substringAfter("Array element ", 21);
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.abbreviate("Locale must not be null", (String) null, 21);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("Locale must not be null", string1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      charSequenceArray0[0] = (CharSequence) "Locale must not be null";
      charSequenceArray0[1] = (CharSequence) "Locale must not be null";
      charSequenceArray0[2] = (CharSequence) null;
      boolean boolean0 = StringUtils.isAnyEmpty(charSequenceArray0);
      assertEquals(3, charSequenceArray0.length);
      assertTrue(boolean0);
      
      boolean boolean1 = StringUtils.isAllUpperCase("Locale must not be null");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string2 = StringUtils.joinWith((String) null, charSequenceArray0);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals(3, charSequenceArray0.length);
      assertNotNull(string2);
      assertEquals("Locale must not be nullLocale must not be null", string2);
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "The character ";
      charSequenceArray0[2] = (CharSequence) "The character ";
      String[] stringArray0 = StringUtils.splitByWholeSeparator("Threshold must not be negative", "9tp@+_c-AgJ9-w", (-487));
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      boolean boolean0 = StringUtils.isAnyEmpty(charSequenceArray0);
      assertEquals(4, charSequenceArray0.length);
      assertTrue(boolean0);
      
      boolean boolean1 = StringUtils.isAllUpperCase("S0.$/8C:6V1");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = 13;
      boolean boolean0 = StringUtils.isMixedCase("(g^. 'zpD'x[.&?");
      assertTrue(boolean0);
      
      char[] charArray0 = new char[0];
      boolean boolean1 = StringUtils.containsOnly((CharSequence) "(g^. 'zpD'x[.&?", charArray0);
      assertFalse(boolean1 == boolean0);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      assertFalse(boolean1);
      
      int int0 = StringUtils.indexOf((CharSequence) "(g^. 'zpD'x[.&?", 97);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = (int) 'z';
      intArray0[1] = (int) 'z';
      intArray0[2] = 527;
      intArray0[3] = (int) 'z';
      intArray0[4] = 0;
      intArray0[5] = (-3435);
      String string0 = StringUtils.join(intArray0, 'B', Integer.MIN_VALUE, 122);
      assertEquals(6, intArray0.length);
      assertNotNull(string0);
      assertArrayEquals(new int[] {122, 122, 527, 122, 0, (-3435)}, intArray0);
      assertEquals("", string0);
      
      String string1 = StringUtils.unwrap("", "N;MP=|En");
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
      
      String string2 = StringUtils.substringBetween("odwu9^M", "kb>K:%lR&M+Fm2*/78.");
      assertNull(string2);
      
      boolean boolean0 = StringUtils.containsOnly((CharSequence) null, ")!1XjMA#y,~aU");
      assertFalse(boolean0);
      
      char[] charArray0 = new char[0];
      boolean boolean1 = StringUtils.containsOnly((CharSequence) "N;MP=|En", charArray0);
      assertTrue(boolean1 == boolean0);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      assertFalse(boolean1);
      
      String string3 = StringUtils.replace("}\u0002jczw,h6Lb", (String) null, "~npN-%f{", 22);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      assertEquals("}\u0002jczw,h6Lb", string3);
      
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "}\u0002jczw,h6Lb", charArray0);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      String[] stringArray0 = StringUtils.split("object", "9Y`]eiW^{x@Rl", 3);
      assertEquals(2, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string0 = StringUtils.leftPad("object", 3);
      assertNotNull(string0);
      assertEquals("object", string0);
      
      String string1 = StringUtils.chop("Search and Replace array lengths don't match: ");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("Search and Replace array lengths don't match:", string1);
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      assertFalse(linkedList0.contains("object"));
      
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      assertFalse(arrayList0.contains("object"));
      
      String string2 = StringUtils.abbreviateMiddle("IJ[>-hg9BsMG#l", "Search and Replace array lengths don't match:", 2128);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("IJ[>-hg9BsMG#l", string2);
      
      boolean boolean0 = StringUtils.equalsAny("IJ[>-hg9BsMG#l", stringArray0);
      assertEquals(2, stringArray0.length);
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.startsWithAny("9Y`]eiW^{x@Rl", stringArray0);
      assertTrue(boolean1 == boolean0);
      assertEquals(2, stringArray0.length);
      assertFalse(boolean1);
      
      String string3 = StringUtils.getDigits("IJ[>-hg9BsMG#l");
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      assertEquals("9", string3);
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short)2127;
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      charSequenceArray0[0] = null;
      charSequenceArray0[2] = null;
      String string0 = StringUtils.SPACE;
      assertNotNull(string0);
      assertEquals(" ", string0);
      
      int int0 = StringUtils.indexOfIgnoreCase(charSequenceArray0[0], (CharSequence) " ", (int) (short)2127);
      assertEquals(3, charSequenceArray0.length);
      assertEquals((-1), int0);
      
      boolean boolean0 = StringUtils.isNumericSpace((CharSequence) null);
      assertFalse(boolean0);
      
      String string1 = StringUtils.leftPad(" ", (int) (short)2127, "mbyrg");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      String string2 = StringUtils.getIfEmpty("23\"%KnE_,=)JXL\"R1K", supplier0);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("23\"%KnE_,=)JXL\"R1K", string2);
      
      // Undeclared exception!
      try { 
        StringUtils.getLevenshteinDistance((CharSequence) "mbyrg", (CharSequence) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      String string0 = "8";
      String string1 = StringUtils.strip("8");
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("8", string1);
      
      int int0 = StringUtils.countMatches((CharSequence) "8", (CharSequence) "8");
      assertEquals(1, int0);
      
      char char0 = '?';
      String string2 = StringUtils.wrap("8", '?');
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("?8?", string2);
      
      int int1 = StringUtils.getLevenshteinDistance((CharSequence) "8", (CharSequence) "8");
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      String string3 = null;
      String string4 = StringUtils.abbreviate((String) null, 126);
      assertNull(string4);
      
      // Undeclared exception!
      try { 
        StringUtils.getLevenshteinDistance((CharSequence) "?8?", (CharSequence) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      String string0 = StringUtils.lowerCase("null/empty items~4&4+2&FA");
      assertNotNull(string0);
      assertEquals("null/empty items~4&4+2&fa", string0);
      
      String string1 = StringUtils.abbreviateMiddle("...", "comparator", 2);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("...", string1);
      
      boolean boolean0 = StringUtils.equalsAny("null/empty items~4&4+2&fa", (CharSequence[]) null);
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.startsWithAny("x[BEyAxx[BEyAxx[...", (CharSequence[]) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = "null/empty items~4&4+2&FA";
      stringArray0[1] = "comparator";
      stringArray0[2] = "...";
      stringArray0[3] = "null/empty items~4&4+2&fa";
      String[] stringArray1 = StringUtils.stripAll(stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(4, stringArray0.length);
      assertEquals(4, stringArray1.length);
      assertNotNull(stringArray1);
      
      String string2 = "f@v1V!%Q=\\D^SY";
      String string3 = StringUtils.replaceFirst("...", "V5+7Kj", "f@v1V!%Q=D^SY");
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      assertEquals("...", string3);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "null/empty items~4&4+2&fa", (CharSequence) "...");
      assertEquals(25, int0);
      
      Charset charset0 = Charset.defaultCharset();
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.toString());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.name());
      assertNotNull(charset0);
      
      // Undeclared exception!
      try { 
        Charset.isSupported("Comparator should not be null.");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // Comparator should not be null.
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      Locale locale0 = Locale.GERMANY;
      assertEquals("DE", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("de_DE", locale0.toString());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("de", locale0.getLanguage());
      assertEquals("deu", locale0.getISO3Language());
      assertNotNull(locale0);
      
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      assertEquals("DE", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("de_DE", locale0.toString());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("de", locale0.getLanguage());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertNotNull(set0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[9];
      charSequenceArray0[0] = (CharSequence) " ";
      String string0 = StringUtils.join((Iterable<?>) set0, 'H');
      assertEquals("DE", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("de_DE", locale0.toString());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("de", locale0.getLanguage());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertNotNull(string0);
      assertFalse(set0.contains(" "));
      assertEquals("", string0);
      
      charSequenceArray0[1] = (CharSequence) "";
      charSequenceArray0[2] = (CharSequence) " ";
      charSequenceArray0[3] = (CharSequence) "\r";
      charSequenceArray0[4] = (CharSequence) "\n";
      charSequenceArray0[5] = (CharSequence) "\r";
      charSequenceArray0[6] = (CharSequence) "";
      charSequenceArray0[7] = (CharSequence) "\r";
      charSequenceArray0[8] = (CharSequence) " ";
      boolean boolean0 = StringUtils.isAllEmpty(charSequenceArray0);
      assertEquals(9, charSequenceArray0.length);
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.containsAny(charSequenceArray0[7], charSequenceArray0[0]);
      assertTrue(boolean1 == boolean0);
      assertEquals(9, charSequenceArray0.length);
      assertFalse(boolean1);
      
      String string1 = StringUtils.removePattern("_,T,,%h%0E_E`!", "VImKvw");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("_,T,,%h%0E_E`!", string1);
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      String string0 = StringUtils.substringAfterLast("Supplied value must be a valid byte literal between -128 and 127: [", "Supplied value must be a valid byte literal between -128 and 127: [");
      assertNotNull(string0);
      assertEquals("", string0);
      
      char[] charArray0 = new char[3];
      charArray0[0] = ')';
      charArray0[0] = ')';
      String string1 = StringUtils.deleteWhitespace("");
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
      
      String string2 = StringUtils.stripAccents("9Bf;oQZFH\"2RFO");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("9Bf;oQZFH\"2RFO", string2);
      
      String string3 = StringUtils.stripAccents("9Bf;oQZFH\"2RFO");
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string2));
      assertNotNull(string3);
      assertEquals("9Bf;oQZFH\"2RFO", string3);
      
      boolean boolean0 = StringUtils.contains((CharSequence) "9Bf;oQZFH\"2RFO", (CharSequence) "9Bf;oQZFH\"2RFO");
      assertTrue(boolean0);
      
      int[] intArray0 = StringUtils.toCodePoints("");
      assertEquals(0, intArray0.length);
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      
      boolean boolean1 = StringUtils.isAllLowerCase("9Bf;oQZFH\"2RFO");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      String string0 = "1{t\"n}~.Y};dsu=mD";
      String[] stringArray0 = StringUtils.splitByCharacterType("1{t\"n}~.Y};dsu=mD");
      assertEquals(15, stringArray0.length);
      assertNotNull(stringArray0);
      
      char[] charArray0 = new char[9];
      charArray0[0] = '=';
      charArray0[1] = 'r';
      charArray0[2] = 'G';
      charArray0[3] = '_';
      charArray0[4] = 'G';
      charArray0[5] = 'D';
      charArray0[6] = ':';
      charArray0[7] = '5';
      charArray0[8] = 'B';
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "1{t\"n}~.Y};dsu=mD", charArray0);
      assertEquals(9, charArray0.length);
      assertArrayEquals(new char[] {'=', 'r', 'G', '_', 'G', 'D', ':', '5', 'B'}, charArray0);
      assertEquals(0, int0);
      
      int int1 = StringUtils.getLevenshteinDistance((CharSequence) "1{t\"n}~.Y};dsu=mD", (CharSequence) "1{t\"n}~.Y};dsu=mD");
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      
      String string1 = StringUtils.normalizeSpace("1{t\"n}~.Y};dsu=mD");
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("1{t\"n}~.Y};dsu=mD", string1);
      
      String string2 = StringUtils.wrapIfMissing("1{t\"n}~.Y};dsu=mD", '!');
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("!1{t\"n}~.Y};dsu=mD!", string2);
      
      boolean boolean0 = StringUtils.containsNone((CharSequence) "!1{t\"n}~.Y};dsu=mD!", "1{t\"n}~.Y};dsu=mD");
      assertFalse(boolean0);
      
      int int2 = StringUtils.indexOfAnyBut((CharSequence) "1{t\"n}~.Y};dsu=mD", (CharSequence) "!1{t\"n}~.Y};dsu=mD!");
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals((-1), int2);
      
      String string3 = StringUtils.substringAfter("\n", "1{t\"n}~.Y};dsu=mD");
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      assertEquals("", string3);
      
      int int3 = StringUtils.indexOf((CharSequence) "!1{t\"n}~.Y};dsu=mD!", (CharSequence) "");
      assertTrue(int3 == int1);
      assertTrue(int3 == int0);
      assertFalse(int3 == int2);
      assertEquals(0, int3);
      
      Charset charset0 = Charset.defaultCharset();
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.name());
      assertNotNull(charset0);
      
      // Undeclared exception!
      try { 
        Charset.forName((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null charset name
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      String string0 = StringUtils.getDigits("d%69s3wbN8{h}g");
      assertNotNull(string0);
      assertEquals("6938", string0);
      
      boolean boolean0 = StringUtils.isAllEmpty((CharSequence[]) null);
      assertTrue(boolean0);
      
      String string1 = StringUtils.center("Kv9XcM", 25, '#');
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("#########Kv9XcM##########", string1);
      
      boolean boolean1 = StringUtils.containsAny((CharSequence) "#########Kv9XcM#########", (CharSequence) "");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string2 = StringUtils.removePattern("comparator", "org.apache.commons.lang3.CharsetsCannot clone Cloneable type ");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("comparator", string2);
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      String string0 = StringUtils.removePattern("ubs<", "ubs<");
      assertNotNull(string0);
      assertEquals("", string0);
      
      boolean boolean0 = StringUtils.containsAny((CharSequence) "", (CharSequence[]) null);
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isNumeric("");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string1 = StringUtils.reverse("ubs<");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("<sbu", string1);
      
      char[] charArray0 = new char[9];
      charArray0[0] = 'o';
      charArray0[1] = 'b';
      charArray0[2] = 'f';
      charArray0[3] = '\\';
      charArray0[4] = 'd';
      charArray0[5] = '>';
      charArray0[6] = ',';
      charArray0[7] = 'j';
      charArray0[8] = 'j';
      boolean boolean2 = StringUtils.containsNone((CharSequence) "<sbu", charArray0);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertEquals(9, charArray0.length);
      assertArrayEquals(new char[] {'o', 'b', 'f', '\\', 'd', '>', ',', 'j', 'j'}, charArray0);
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      String string0 = StringUtils.wrapIfMissing("aX-1.0x-412.24x1.0x-2592.4207x-2730.193aX-1.0x-412.24x1.0x-2592.4207x-2730.193aX-1.0x-412.24x1.0x-2592.4207x-2730.193-1.0x-412.24x1.0x-2592.4207x-2730.193nt ", '5');
      assertNotNull(string0);
      assertEquals("5aX-1.0x-412.24x1.0x-2592.4207x-2730.193aX-1.0x-412.24x1.0x-2592.4207x-2730.193aX-1.0x-412.24x1.0x-2592.4207x-2730.193-1.0x-412.24x1.0x-2592.4207x-2730.193nt 5", string0);
      
      String string1 = StringUtils.rightPad("aX-1.0x-412.24x1.0x-2592.4207x-2730.193aX-1.0x-412.24x1.0x-2592.4207x-2730.193aX-1.0x-412.24x1.0x-2592.4207x-2730.193-1.0x-412.24x1.0x-2592.4207x-2730.193nt ", (-3760));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("aX-1.0x-412.24x1.0x-2592.4207x-2730.193aX-1.0x-412.24x1.0x-2592.4207x-2730.193aX-1.0x-412.24x1.0x-2592.4207x-2730.193-1.0x-412.24x1.0x-2592.4207x-2730.193nt ", string1);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "rp$f", (CharSequence) "kb>K:%lR&M+Fm2*/78");
      assertEquals((-1), int0);
      
      boolean boolean0 = StringUtils.isWhitespace("aX-1.0x-412.24x1.0x-2592.4207x-2730.193aX-1.0x-412.24x1.0x-2592.4207x-2730.193aX-1.0x-412.24x1.0x-2592.4207x-2730.193-1.0x-412.24x1.0x-2592.4207x-2730.193nt ");
      assertFalse(boolean0);
      
      String string2 = StringUtils.center("rp$f", (-3760));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("rp$f", string2);
      
      int int1 = StringUtils.countMatches((CharSequence) "rp$f", 'T');
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      String string3 = StringUtils.rightPad("kb>K:%lR&M+Fm2*/78", (-1), "5aX-1.0x-412.24x1.0x-2592.4207x-2730.193aX-1.0x-412.24x1.0x-2592.4207x-2730.193aX-1.0x-412.24x1.0x-2592.4207x-2730.193-1.0x-412.24x1.0x-2592.4207x-2730.193nt 5");
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      assertEquals("kb>K:%lR&M+Fm2*/78", string3);
      
      CharSequence charSequence0 = StringUtils.defaultIfBlank((CharSequence) "rp$f", (CharSequence) "kb>K:%lR&M+Fm2*/78");
      assertFalse(charSequence0.equals((Object)string3));
      assertTrue(charSequence0.equals((Object)string2));
      assertFalse(charSequence0.equals((Object)string1));
      assertFalse(charSequence0.equals((Object)string0));
      assertNotNull(charSequence0);
      assertEquals("rp$f", charSequence0);
      
      boolean boolean1 = StringUtils.equals((CharSequence) "kb>K:%lR&M+Fm2*/78", (CharSequence) "rp$f");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (-3760);
      doubleArray0[1] = (double) 'L';
      String string4 = StringUtils.join(doubleArray0, 'T');
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)charSequence0));
      assertFalse(string4.equals((Object)string0));
      assertEquals(2, doubleArray0.length);
      assertNotNull(string4);
      assertArrayEquals(new double[] {(-3760.0), 76.0}, doubleArray0, 0.01);
      assertEquals("-3760.0T76.0", string4);
      
      String string5 = StringUtils.truncate("aX-1.0x-412.24x1.0x-2592.4207x-2730.193aX-1.0x-412.24x1.0x-2592.4207x-2730.193aX-1.0x-412.24x1.0x-2592.4207x-2730.193-1.0x-412.24x1.0x-2592.4207x-2730.193nt ", 11, 0);
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)charSequence0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertNotNull(string5);
      assertEquals("", string5);
      
      String string6 = StringUtils.strip("nt aX-1.0x-412.24x1.0x-2592.4207x-2730.193aX-1.0x-412.24x1.0x-2592.4207x-2730.193aX-1.0x-412.24x1.0x-2592.4207x-2730.193-1.0x-412.24x1.0x-2592.4207x-2730.193", "\r.");
      assertFalse(string6.equals((Object)charSequence0));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string3));
      assertNotNull(string6);
      assertEquals("nt aX-1.0x-412.24x1.0x-2592.4207x-2730.193aX-1.0x-412.24x1.0x-2592.4207x-2730.193aX-1.0x-412.24x1.0x-2592.4207x-2730.193-1.0x-412.24x1.0x-2592.4207x-2730.193", string6);
      
      String string7 = StringUtils.getDigits("TOed(ag/wB@~}A5~|I");
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)charSequence0));
      assertFalse(string7.equals((Object)string4));
      assertNotNull(string7);
      assertEquals("5", string7);
      
      char[] charArray0 = new char[5];
      charArray0[0] = '5';
      charArray0[1] = 'L';
      charArray0[2] = 'L';
      charArray0[3] = '5';
      charArray0[4] = '5';
      boolean boolean2 = StringUtils.containsNone((CharSequence) "rp$f", charArray0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertEquals(5, charArray0.length);
      assertArrayEquals(new char[] {'5', 'L', 'L', '5', '5'}, charArray0);
      assertTrue(boolean2);
      
      int int2 = StringUtils.lastOrdinalIndexOf("kb>K:%lR&M+Fm2*/78", "aX-1.0x-412.24x1.0x-2592.4207x-2730.193aX-1.0x-412.24x1.0x-2592.4207x-2730.193aX-1.0x-412.24x1.0x-2592.4207x-2730.193-1.0x-412.24x1.0x-2592.4207x-2730.193nt ", (-1));
      assertTrue(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals((-1), int2);
      
      String string8 = StringUtils.unwrap((String) null, "Object varargs must not be null");
      assertNull(string8);
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      CharSequence charSequence0 = StringUtils.firstNonEmpty(charSequenceArray0);
      assertEquals(0, charSequenceArray0.length);
      assertNull(charSequence0);
      
      String string0 = StringUtils.swapCase("kb>K:%lR&M+Fm2*/78");
      assertNotNull(string0);
      assertEquals("KB>k:%Lr&m+fM2*/78", string0);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "kb>K:%lR&M+Fm2*/78", (CharSequence) null);
      assertEquals((-1), int0);
      
      String string1 = StringUtils.stripEnd(")!1XjMA#y,~aU", "KB>k:%L\r&m+fM2*/78");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(")!1XjMA#y,~aU", string1);
      
      int int1 = StringUtils.lastIndexOf((CharSequence) ")!1XjMA#y,~aU", 362, (-1));
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      char[] charArray0 = new char[7];
      charArray0[0] = 'R';
      charArray0[1] = ')';
      charArray0[2] = '0';
      charArray0[3] = 'r';
      charArray0[5] = '-';
      charArray0[6] = '=';
      boolean boolean0 = StringUtils.containsNone((CharSequence) "KB>k:%L\r&m+fM2*/78", charArray0);
      assertEquals(7, charArray0.length);
      assertArrayEquals(new char[] {'R', ')', '0', 'r', '\u0000', '-', '='}, charArray0);
      assertTrue(boolean0);
      
      String string2 = StringUtils.LF;
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("\n", string2);
      
      int int2 = StringUtils.lastOrdinalIndexOf(")!1XjMA#y,~aU", "\n", 362);
      assertTrue(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals((-1), int2);
      
      boolean boolean1 = StringUtils.containsOnly((CharSequence) ")!1XjMA#y,~aU", "7}`X.Snx[BEy");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String[] stringArray0 = new String[5];
      stringArray0[0] = ")!1XjMA#y,~aU";
      stringArray0[1] = "7}`X.Snx[BEy";
      stringArray0[2] = "\n";
      stringArray0[3] = "KB>k:%L\r&m+fM2*/78";
      stringArray0[4] = "kb>K:%lR&M+Fm2*/78";
      String string3 = StringUtils.firstNonBlank(stringArray0);
      assertTrue(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals(5, stringArray0.length);
      assertNotNull(string3);
      assertEquals(")!1XjMA#y,~aU", string3);
      
      String string4 = StringUtils.replaceEach(")!1XjMA#y,~aU", stringArray0, stringArray0);
      assertFalse(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertEquals(5, stringArray0.length);
      assertNotNull(string4);
      assertEquals(")!1XjMA#y,~aU", string4);
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      String string0 = StringUtils.wrapIfMissing("aX-1.0x-412.24x1.0x-2592.4207x-2730.193aX-1.0x-412.24x1.0x-2592.4207x-2730.193aX-1.0x-412.24x1.0x-2592.4207x-2730.193-1.0x-412.24x1.0x-2592.4207x-2730.193", "nt ");
      assertNotNull(string0);
      assertEquals("nt aX-1.0x-412.24x1.0x-2592.4207x-2730.193aX-1.0x-412.24x1.0x-2592.4207x-2730.193aX-1.0x-412.24x1.0x-2592.4207x-2730.193-1.0x-412.24x1.0x-2592.4207x-2730.193nt ", string0);
      
      String[] stringArray0 = StringUtils.split((String) null, (String) null, 5);
      assertNull(stringArray0);
      
      String string1 = StringUtils.prependIfMissingIgnoreCase((String) null, "nt ", (CharSequence[]) null);
      assertNull(string1);
      
      String string2 = StringUtils.lowerCase((String) null);
      assertNull(string2);
      
      String[] stringArray1 = StringUtils.splitByWholeSeparator("e!", "yX", 5);
      assertEquals(1, stringArray1.length);
      assertNotNull(stringArray1);
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = 'Q';
      long[] longArray0 = new long[1];
      longArray0[0] = (long) 'O';
      String string0 = StringUtils.join(longArray0, 'x');
      assertEquals(1, longArray0.length);
      assertNotNull(string0);
      assertArrayEquals(new long[] {79L}, longArray0);
      assertEquals("79", string0);
      
      String string1 = StringUtils.replaceFirst("79", "9", "79");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("779", string1);
      
      Integer integer0 = new Integer((-1913));
      assertNotNull(integer0);
      assertEquals((-1913), (int)integer0);
      
      byte[] byteArray0 = StringUtils.getBytes((String) null, "org.apache.commons.lang3.exception.CloneFailedException");
      assertEquals(0, byteArray0.length);
      assertNotNull(byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      String string0 = StringUtils.abbreviate("x[BEyAx", 5);
      assertNotNull(string0);
      assertEquals("x[...", string0);
      
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) true;
      objectArray0[2] = (Object) true;
      objectArray0[3] = (Object) "x[...";
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[4] = object0;
      objectArray0[5] = (Object) true;
      objectArray0[6] = (Object) true;
      objectArray0[7] = (Object) true;
      objectArray0[8] = (Object) "x[...";
      String string1 = StringUtils.join(objectArray0, 'B');
      assertFalse(string1.equals((Object)string0));
      assertEquals(9, objectArray0.length);
      assertNotNull(string1);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "trueBBtrueBx[...Bjava.lang.Object@2fae2d0cBtrueBtrueBtrueBx[...", (CharSequence) "x[...");
      assertEquals(58, int0);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("x[BEyAx");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      boolean boolean0 = StringUtils.isAnyEmpty(stringArray0);
      assertEquals(1, stringArray0.length);
      assertFalse(boolean0);
      
      String string2 = StringUtils.remove("x[...", '}');
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("x[...", string2);
      
      int int1 = StringUtils.lastIndexOf((CharSequence) "x[...", (CharSequence) "x[BEyAx", (-2687));
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      String[] stringArray1 = StringUtils.split("x[...", "$7", 322);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray1, stringArray0);
      assertEquals(1, stringArray1.length);
      assertNotNull(stringArray1);
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      float[] floatArray0 = new float[3];
      floatArray0[0] = 1.0F;
      floatArray0[1] = (-2730.193F);
      floatArray0[2] = (-2730.193F);
      String string0 = StringUtils.join(floatArray0, 'x');
      assertEquals(3, floatArray0.length);
      assertNotNull(string0);
      assertArrayEquals(new float[] {1.0F, (-2730.193F), (-2730.193F)}, floatArray0, 0.01F);
      assertEquals("1.0x-2730.193x-2730.193", string0);
      
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) " ");
      assertFalse(charBuffer0.hasArray());
      assertEquals(1, charBuffer0.remaining());
      assertEquals(1, charBuffer0.capacity());
      assertEquals(1, charBuffer0.limit());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(" ", charBuffer0.toString());
      assertEquals(1, charBuffer0.length());
      assertFalse(charBuffer0.isDirect());
      assertTrue(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.position());
      assertNotNull(charBuffer0);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = " ";
      String string1 = StringUtils.getCommonPrefix(stringArray0);
      assertFalse(string1.equals((Object)string0));
      assertEquals(1, stringArray0.length);
      assertNotNull(string1);
      assertEquals(" ", string1);
      
      String string2 = StringUtils.prependIfMissingIgnoreCase("', has a length less than 2", " ", stringArray0);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals(1, stringArray0.length);
      assertNotNull(string2);
      assertEquals(" ', has a length less than 2", string2);
      
      String string3 = StringUtils.lowerCase("The character ");
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      assertEquals("the character ", string3);
      
      String[] stringArray1 = StringUtils.splitByCharacterTypeCamelCase(" ");
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray1, stringArray0);
      assertEquals(1, stringArray1.length);
      assertNotNull(stringArray1);
      
      String string4 = StringUtils.wrapIfMissing("the character ", "1.0x-2730.193x-2730.193");
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertNotNull(string4);
      assertEquals("1.0x-2730.193x-2730.193the character 1.0x-2730.193x-2730.193", string4);
      
      String string5 = StringUtils.substringAfter(" ", 1712);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertNotNull(string5);
      assertEquals("", string5);
      
      String string6 = StringUtils.truncate("1.0x-2730.193x-2730.193the character 1.0x-2730.193x-2730.193", 438);
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string5));
      assertTrue(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string3));
      assertNotNull(string6);
      assertEquals("1.0x-2730.193x-2730.193the character 1.0x-2730.193x-2730.193", string6);
      
      String string7 = StringUtils.wrap("org.apache.commons.lang3.ObjectUtils$Null", 'x');
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string1));
      assertNotNull(string7);
      assertEquals("xorg.apache.commons.lang3.ObjectUtils$Nullx", string7);
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      assertFalse(linkedList0.contains("', has a length less than 2"));
      
      boolean boolean0 = linkedList0.add((Object) "The character ");
      assertEquals(1, linkedList0.size());
      assertTrue(linkedList0.contains("The character "));
      assertFalse(linkedList0.contains("', has a length less than 2"));
      assertTrue(boolean0);
      
      String string8 = StringUtils.join((List<?>) linkedList0, "The character ", Integer.MAX_VALUE, 1148);
      assertEquals(1, linkedList0.size());
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string3));
      assertNotNull(string8);
      assertTrue(linkedList0.contains("The character "));
      assertFalse(linkedList0.contains("', has a length less than 2"));
      assertEquals("", string8);
      
      String string9 = StringUtils.rotate(" ', has a length less than 2", 3);
      assertFalse(string9.equals((Object)string1));
      assertFalse(string9.equals((Object)string5));
      assertFalse(string9.equals((Object)string6));
      assertFalse(string9.equals((Object)string2));
      assertFalse(string9.equals((Object)string7));
      assertFalse(string9.equals((Object)string3));
      assertFalse(string9.equals((Object)string0));
      assertFalse(string9.equals((Object)string8));
      assertFalse(string9.equals((Object)string4));
      assertNotNull(string9);
      assertEquals("n 2 ', has a length less tha", string9);
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = ',';
      charArray0[1] = ',';
      charArray0[2] = ',';
      charArray0[3] = '7';
      charArray0[4] = ',';
      boolean boolean0 = StringUtils.containsAny((CharSequence) "kb>K:%lR&M+Fm2*/78", charArray0);
      assertEquals(5, charArray0.length);
      assertArrayEquals(new char[] {',', ',', ',', '7', ','}, charArray0);
      assertTrue(boolean0);
      
      String string0 = StringUtils.deleteWhitespace("kb>K:%lR&M+Fm2*/78");
      assertNotNull(string0);
      assertEquals("kb>K:%lR&M+Fm2*/78", string0);
      
      String string1 = StringUtils.stripAccents("gXYl'|2.y");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("gXYl'|2.y", string1);
      
      Class<Object> class0 = Object.class;
      ServiceLoader<Object> serviceLoader0 = ServiceLoader.loadInstalled(class0);
      assertEquals("java.util.ServiceLoader[java.lang.Object]", serviceLoader0.toString());
      assertNotNull(serviceLoader0);
      
      Iterator<Locale.LanguageRange> iterator0 = (Iterator<Locale.LanguageRange>) mock(Iterator.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(iterator0).hasNext();
      String string2 = StringUtils.join(iterator0, "\r");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("", string2);
      
      double double0 = StringUtils.getJaroWinklerDistance("gXYl'|2.y", "");
      assertEquals(0.0, double0, 0.01);
      
      String string3 = StringUtils.chop("\r");
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      assertEquals("", string3);
      
      String string4 = StringUtils.replaceAll("...", "kb>K:%lR&M+Fm2*/78.", "kb>K:%lR&M+Fm2*/78.");
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertNotNull(string4);
      assertEquals("...", string4);
      
      int int0 = StringUtils.countMatches((CharSequence) "...", (CharSequence) "...");
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      String string0 = StringUtils.trimToEmpty(":W3vjMB@");
      assertNotNull(string0);
      assertEquals(":W3vjMB@", string0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparator(":W3vjMB@", ":W3vjMB@", 0);
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string1 = StringUtils.substring(":W3vjMB@", 0, 0);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
      
      String string2 = StringUtils.strip("s?m(/");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("s?m(/", string2);
      
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertNotNull(linkedHashSet0);
      assertFalse(linkedHashSet0.contains(":W3vjMB@"));
      
      boolean boolean0 = linkedHashSet0.add("pk?9bG");
      assertFalse(linkedHashSet0.isEmpty());
      assertEquals(1, linkedHashSet0.size());
      assertTrue(linkedHashSet0.contains("pk?9bG"));
      assertFalse(linkedHashSet0.contains(":W3vjMB@"));
      assertTrue(boolean0);
      
      boolean boolean1 = linkedHashSet0.add((String) null);
      assertFalse(linkedHashSet0.isEmpty());
      assertEquals(2, linkedHashSet0.size());
      assertTrue(boolean1 == boolean0);
      assertTrue(linkedHashSet0.contains("pk?9bG"));
      assertFalse(linkedHashSet0.contains(":W3vjMB@"));
      assertTrue(boolean1);
      
      boolean boolean2 = linkedHashSet0.add((String) null);
      assertFalse(linkedHashSet0.isEmpty());
      assertEquals(2, linkedHashSet0.size());
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertTrue(linkedHashSet0.contains("pk?9bG"));
      assertFalse(linkedHashSet0.contains(":W3vjMB@"));
      assertFalse(boolean2);
      
      int int0 = StringUtils.countMatches((CharSequence) "s?m(/", '#');
      assertEquals(0, int0);
      
      String string3 = StringUtils.replaceIgnoreCase((String) null, "`", "iMaAtJB-~\"<s");
      assertNull(string3);
      
      String string4 = StringUtils.rightPad(".8,J$gajVw#kS+", (-4197));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertNotNull(string4);
      assertEquals(".8,J$gajVw#kS+", string4);
      
      String string5 = StringUtils.substringBefore(":W3vjMB@", ":W3vjMB@");
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertTrue(string5.equals((Object)string1));
      assertNotNull(string5);
      assertEquals("", string5);
      
      int int1 = StringUtils.countMatches((CharSequence) "", 'r');
      assertTrue(int1 == int0);
      assertEquals(0, int1);
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      String string0 = "\\u";
      String string1 = StringUtils.replacePattern("u<.8,J$iajVw#kB+", "u<.8,J$iajVw#kB+", "org.apache.commons.lang3.LocaleUtils");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("u<.8,J$iajVw#kB+", string1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[9];
      charSequenceArray0[0] = (CharSequence) "...";
      charSequenceArray0[1] = (CharSequence) "...";
      charSequenceArray0[2] = (CharSequence) null;
      charSequenceArray0[3] = (CharSequence) "u<.8,J$iajVw#kB+";
      charSequenceArray0[4] = (CharSequence) string0;
      String string2 = StringUtils.replace((String) null, "...", "eX!$Gj*TLHKtdBg%W");
      assertNull(string2);
      
      charSequenceArray0[5] = (CharSequence) null;
      charSequenceArray0[6] = (CharSequence) "u<.8,J$iajVw#kB+";
      charSequenceArray0[7] = (CharSequence) "u<.8,J$iajVw#kB+";
      charSequenceArray0[8] = (CharSequence) "...";
      boolean boolean0 = StringUtils.isNoneBlank(charSequenceArray0);
      assertEquals(9, charSequenceArray0.length);
      assertFalse(boolean0);
      
      String string3 = StringUtils.removeEndIgnoreCase("", ".G'{");
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      assertEquals("", string3);
      
      String string4 = StringUtils.prependIfMissingIgnoreCase("", "u<.8,J$iajVw#kB+", charSequenceArray0);
      assertTrue(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertEquals(9, charSequenceArray0.length);
      assertNotNull(string4);
      assertEquals("u<.8,J$iajVw#kB+", string4);
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      Class<String> class0 = String.class;
      ServiceLoader<String> serviceLoader0 = ServiceLoader.loadInstalled(class0);
      assertEquals("java.util.ServiceLoader[java.lang.String]", serviceLoader0.toString());
      assertNotNull(serviceLoader0);
      
      Spliterator<String> spliterator0 = serviceLoader0.spliterator();
      assertEquals("java.util.ServiceLoader[java.lang.String]", serviceLoader0.toString());
      assertNotNull(spliterator0);
      
      String[] stringArray0 = StringUtils.split("object", "", 16);
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string0 = StringUtils.substringBetween("LgyjtZ)UUfzY>", "");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.lowerCase("-5y1iX{EX`M@KK#[b");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("-5y1ix{ex`m@kk#[b", string1);
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[9];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "";
      charSequenceArray0[2] = (CharSequence) "";
      String string0 = StringUtils.join((Object[]) charSequenceArray0, 'n');
      assertEquals(9, charSequenceArray0.length);
      assertNotNull(string0);
      assertEquals("nnnnnnnn", string0);
      
      charSequenceArray0[3] = (CharSequence) "nnnnnnnn";
      String string1 = StringUtils.replace("MnfvbCI", "m =}1c< ", "83R;");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("MnfvbCI", string1);
      
      charSequenceArray0[4] = (CharSequence) "MnfvbCI";
      charSequenceArray0[5] = (CharSequence) "";
      charSequenceArray0[6] = (CharSequence) "";
      String string2 = StringUtils.overlay((String) null, "c\"", (-1018), (-1018));
      assertNull(string2);
      
      charSequenceArray0[7] = (CharSequence) null;
      charSequenceArray0[8] = (CharSequence) "";
      boolean boolean0 = StringUtils.isAnyEmpty(charSequenceArray0);
      assertEquals(9, charSequenceArray0.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      String string0 = StringUtils.substring((String) null, 0, 0);
      assertNull(string0);
      
      String string1 = StringUtils.overlay((String) null, (String) null, 18, 0);
      assertNull(string1);
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = 'Q';
      long[] longArray0 = new long[1];
      longArray0[0] = (long) 'O';
      String string0 = StringUtils.join(longArray0, 'x');
      assertEquals(1, longArray0.length);
      assertNotNull(string0);
      assertArrayEquals(new long[] {79L}, longArray0);
      assertEquals("79", string0);
      
      String[] stringArray0 = StringUtils.split("79", "9", 0);
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string1 = StringUtils.substringBetween(">^](", (String) null);
      assertNull(string1);
      
      String string2 = StringUtils.unwrap("a4yhg/", "79");
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("a4yhg/", string2);
      
      String string3 = StringUtils.firstNonBlank(stringArray0);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals(1, stringArray0.length);
      assertNotNull(string3);
      assertEquals("7", string3);
      
      String string4 = StringUtils.substringBeforeLast("a4yhg/", "7");
      assertFalse(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertNotNull(string4);
      assertEquals("a4yhg/", string4);
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      String string0 = StringUtils.substringAfter("The Array must not be null", "}");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.removeStartIgnoreCase("The Array must not be null", "");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("The Array must not be null", string1);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "The Array must not be null", 100, 100);
      assertEquals((-1), int0);
      
      String string2 = StringUtils.upperCase("Minimum abbreviation width with offset is %d");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("MINIMUM ABBREVIATION WIDTH WITH OFFSET IS %D", string2);
      
      int[] intArray0 = new int[4];
      intArray0[0] = (-1);
      intArray0[1] = (-1);
      intArray0[2] = 100;
      intArray0[3] = (-1);
      String string3 = StringUtils.join(intArray0, 'z', 102, 0);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals(4, intArray0.length);
      assertNotNull(string3);
      assertArrayEquals(new int[] {(-1), (-1), 100, (-1)}, intArray0);
      assertEquals("", string3);
      
      String string4 = StringUtils.unwrap("Minimum abbreviation width with offset is %d", ")!1XjMA#y,~aU");
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertNotNull(string4);
      assertEquals("Minimum abbreviation width with offset is %d", string4);
      
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "}", "GdO[htbw}6Mc6.@E#)");
      assertTrue(boolean0);
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'z';
      charArray0[1] = 'z';
      charArray0[2] = 'z';
      charArray0[3] = 'z';
      boolean boolean1 = StringUtils.containsOnly((CharSequence) "MINIMUM ABBREVIATION WIDTH WITH OFFSET IS %D", charArray0);
      assertFalse(boolean1 == boolean0);
      assertEquals(4, charArray0.length);
      assertArrayEquals(new char[] {'z', 'z', 'z', 'z'}, charArray0);
      assertFalse(boolean1);
      
      int int1 = StringUtils.indexOfAnyBut((CharSequence) "", charArray0);
      assertTrue(int1 == int0);
      assertEquals(4, charArray0.length);
      assertArrayEquals(new char[] {'z', 'z', 'z', 'z'}, charArray0);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      String string0 = StringUtils.stripToEmpty(" @ Mq}#]\"z7:|=4j");
      assertNotNull(string0);
      assertEquals("@ Mq}#]\"z7:|=4j", string0);
      
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = true;
      booleanArray0[5] = false;
      booleanArray0[6] = false;
      booleanArray0[7] = true;
      // Undeclared exception!
      try { 
        StringUtils.join(booleanArray0, '[', 14, 228);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 14
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      Locale locale0 = Locale.GERMANY;
      assertEquals("DE", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("de_DE", locale0.toString());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("de", locale0.getLanguage());
      assertEquals("DEU", locale0.getISO3Country());
      assertNotNull(locale0);
      
      Locale locale1 = Locale.TAIWAN;
      assertEquals("TW", locale1.getCountry());
      assertEquals("", locale1.getVariant());
      assertEquals("TWN", locale1.getISO3Country());
      assertEquals("zh", locale1.getLanguage());
      assertEquals("zho", locale1.getISO3Language());
      assertEquals("zh_TW", locale1.toString());
      assertFalse(locale1.equals((Object)locale0));
      assertNotSame(locale1, locale0);
      assertNotNull(locale1);
      
      String string0 = locale0.getDisplayLanguage(locale1);
      assertEquals("DE", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("de_DE", locale0.toString());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("de", locale0.getLanguage());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("TW", locale1.getCountry());
      assertEquals("", locale1.getVariant());
      assertEquals("TWN", locale1.getISO3Country());
      assertEquals("zh", locale1.getLanguage());
      assertEquals("zho", locale1.getISO3Language());
      assertEquals("zh_TW", locale1.toString());
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(locale1.equals((Object)locale0));
      assertNotSame(locale0, locale1);
      assertNotSame(locale1, locale0);
      assertNotNull(string0);
      assertEquals("\u5FB7\u6587", string0);
      
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      assertEquals("DE", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("de_DE", locale0.toString());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("de", locale0.getLanguage());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertFalse(locale0.equals((Object)locale1));
      assertNotSame(locale0, locale1);
      assertNotNull(set0);
      assertFalse(set0.contains(string0));
      
      boolean boolean0 = StringUtils.containsIgnoreCase("", "");
      assertTrue(boolean0);
      
      String[] stringArray0 = StringUtils.substringsBetween("", "Cdb\"'JOcon{3;<u", "kb>K:%lR&M+Fm2*/78object");
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-69);
      byteArray0[1] = (byte)53;
      byteArray0[2] = (byte) (-125);
      boolean boolean1 = StringUtils.isWhitespace("\r");
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      boolean boolean2 = StringUtils.contains((CharSequence) "\n", (CharSequence) "kb>K:%lR&M+Fm2*/78object");
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2);
      
      boolean boolean3 = StringUtils.isNumericSpace(" ");
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3);
      
      String string1 = StringUtils.leftPad("Array element ", 15, "G^XoO=BS8~vW[uuC");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("GArray element ", string1);
      
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier0).get();
      String string2 = StringUtils.getIfEmpty((String) null, supplier0);
      assertNull(string2);
      
      String string3 = StringUtils.abbreviateMiddle("193", (String) null, (-1));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      assertEquals("193", string3);
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      int int0 = StringUtils.compare("...", "...", true);
      assertEquals(0, int0);
      
      String string0 = StringUtils.center("Kv9XcM", Integer.MIN_VALUE);
      assertNotNull(string0);
      assertEquals("Kv9XcM", string0);
      
      boolean boolean0 = StringUtils.isAllEmpty((CharSequence[]) null);
      assertTrue(boolean0);
      
      double double0 = new Integer(Integer.MIN_VALUE);
      assertEquals(Integer.MIN_VALUE, double0, 0.01);
      
      String string1 = StringUtils.substringBetween("Kv9XcM", "Kv9XcM");
      assertNull(string1);
      
      int int1 = StringUtils.indexOfIgnoreCase((CharSequence) null, (CharSequence) "", 0);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      String string2 = StringUtils.CR;
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("\r", string2);
      
      String string3 = StringUtils.remove((String) null, 'L');
      assertNull(string3);
      
      boolean boolean1 = StringUtils.isNoneEmpty((CharSequence[]) null);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      String string0 = StringUtils.difference("6w#yEdv|M/NKamq&Rr", "6w#yEdv|M/NKamq&Rr");
      assertNotNull(string0);
      assertEquals("", string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      charSequenceArray0[0] = (CharSequence) "6w#yEdv|M/NKamq&Rr";
      boolean boolean0 = StringUtils.isAllBlank(charSequenceArray0);
      assertEquals(1, charSequenceArray0.length);
      assertFalse(boolean0);
      
      String string1 = StringUtils.capitalize(" vs ");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(" vs ", string1);
      
      boolean boolean1 = StringUtils.isWhitespace("6w#yEdv|M/NKamq&Rr");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = StringUtils.contains((CharSequence) " is not in the range '0' - '9'", (CharSequence) "");
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2);
      
      boolean boolean3 = StringUtils.isNumericSpace(" vs ");
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3);
      
      String string2 = StringUtils.replaceIgnoreCase("", "", "18X2;9.Yn=Sa|;c1*;", (-4154));
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("", string2);
      
      Locale locale0 = Locale.forLanguageTag(", Length: 0");
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertNotNull(locale0);
      
      Locale locale1 = Locale.ROOT;
      assertEquals("", locale1.getISO3Country());
      assertEquals("", locale1.getISO3Language());
      assertEquals("", locale1.getVariant());
      assertEquals("", locale1.toString());
      assertEquals("", locale1.getLanguage());
      assertEquals("", locale1.getCountry());
      assertSame(locale1, locale0);
      assertNotNull(locale1);
      
      int int0 = StringUtils.getFuzzyDistance("18X2;9.Yn=Sa|;c1*;", charSequenceArray0[0], locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertSame(locale0, locale1);
      assertEquals(1, charSequenceArray0.length);
      assertEquals(0, int0);
      
      String string3 = StringUtils.mid("JVF'~2-)AXhx", 1632, 0);
      assertTrue(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      assertEquals("", string3);
      
      String string4 = StringUtils.defaultString("-5y1iX{EX`M@KK#[b9");
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertNotNull(string4);
      assertEquals("-5y1iX{EX`M@KK#[b9", string4);
      
      String string5 = StringUtils.appendIfMissing("t 4EK2wQ%w2BNa3Ltbp", "", charSequenceArray0);
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertEquals(1, charSequenceArray0.length);
      assertNotNull(string5);
      assertEquals("t 4EK2wQ%w2BNa3Ltbp", string5);
      
      boolean boolean4 = StringUtils.equalsIgnoreCase("", " vs ");
      assertTrue(boolean4 == boolean1);
      assertTrue(boolean4 == boolean3);
      assertFalse(boolean4 == boolean2);
      assertTrue(boolean4 == boolean0);
      assertFalse(boolean4);
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      String[] stringArray0 = StringUtils.substringsBetween("KO)(uo0>#;N", "KO)(uo0>#;N", "KO)(uo0>#;N");
      assertNull(stringArray0);
      
      String[] stringArray1 = StringUtils.splitPreserveAllTokens("KO)(uo0>#;N", "KO)(uo0>#;N");
      assertEquals(12, stringArray1.length);
      assertNotNull(stringArray1);
      
      String string0 = StringUtils.replacePattern("", "]e|P3Z!wl=~", "]e|P3Z!wl=~");
      assertNotNull(string0);
      assertEquals("", string0);
      
      Stack<Locale.LanguageRange> stack0 = new Stack<Locale.LanguageRange>();
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertNotNull(stack0);
      
      UnaryOperator<Locale.LanguageRange> unaryOperator0 = UnaryOperator.identity();
      assertNotNull(unaryOperator0);
      
      UnaryOperator<Locale.LanguageRange> unaryOperator1 = UnaryOperator.identity();
      assertSame(unaryOperator1, unaryOperator0);
      assertNotNull(unaryOperator1);
      
      stack0.replaceAll(unaryOperator1);
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertSame(unaryOperator1, unaryOperator0);
      
      PriorityQueue<String> priorityQueue0 = new PriorityQueue<String>();
      assertEquals(0, priorityQueue0.size());
      assertNotNull(priorityQueue0);
      assertFalse(priorityQueue0.contains("]e|P3Z!wl=~"));
      
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) stack0, (Collection<String>) priorityQueue0);
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals(0, priorityQueue0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
      assertFalse(priorityQueue0.contains("]e|P3Z!wl=~"));
      assertFalse(list0.contains("]e|P3Z!wl=~"));
      
      ArrayDeque<String> arrayDeque0 = new ArrayDeque<String>(list0);
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals(0, priorityQueue0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      assertNotNull(arrayDeque0);
      assertFalse(priorityQueue0.contains("]e|P3Z!wl=~"));
      assertFalse(list0.contains("]e|P3Z!wl=~"));
      assertFalse(arrayDeque0.contains("]e|P3Z!wl=~"));
      
      Iterator<String> iterator0 = arrayDeque0.iterator();
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals(0, priorityQueue0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      assertNotNull(iterator0);
      assertFalse(priorityQueue0.contains("]e|P3Z!wl=~"));
      assertFalse(list0.contains("]e|P3Z!wl=~"));
      assertFalse(arrayDeque0.contains("]e|P3Z!wl=~"));
      
      String string1 = StringUtils.repeat('\"', (-2049));
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
      
      boolean boolean0 = StringUtils.isAsciiPrintable("");
      assertTrue(boolean0);
      
      String string2 = StringUtils.rightPad(".", 812, "BEyAx");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals(".BEyAxBEyAxBEyAxBEyAxBEyAxBEyAxBEyAxBEyAxBEyAxBEyAxBEyAxBEyAxBEyAxBEyAxBEyAxBEyAxBEyAxBEyAxBEyAxBEyAxBEyAxBEyAxBEyAxBEyAxBEyAxBEyAxBEyAxBEyAxBEyAxBEyAxBEyAxBEyAxBEyAxBEyAxBEyAxBEyAxBEyAxBEyAxBEyAxBEyAxBEyAxBEyAxBEyAxBEyAxBEyAxBEyAxBEyAxBEyAxBEyAxBEyAxBEyAxBEyAxBEyAxBEyAxBEyAxBEyAxBEyAxBEyAxBEyAxBEyAxBEyAxBEyAxBEyAxBEyAxBEyAxBEyAxBEyAxBEyAxBEyAxBEyAxBEyAxBEyAxBEyAxBEyAxBEyAxBEyAxBEyAxBEyAxBEyAxBEyAxBEyAxBEyAxBEyAxBEyAxBEyAxBEyAxBEyAxBEyAxBEyAxBEyAxBEyAxBEyAxBEyAxBEyAxBEyAxBEyAxBEyAxBEyAxBEyAxBEyAxBEyAxBEyAxBEyAxBEyAxBEyAxBEyAxBEyAxBEyAxBEyAxBEyAxBEyAxBEyAxBEyAxBEyAxBEyAxBEyAxBEyAxBEyAxBEyAxBEyAxBEyAxBEyAxBEyAxBEyAxBEyAxBEyAxBEyAxBEyAxBEyAxBEyAxBEyAxBEyAxBEyAxBEyAxBEyAxBEyAxBEyAxBEyAxBEyAxBEyAxBEyAxBEyAxBEyAxBEyAxBEyAxBEyAxBEyAxBEyAxBEyAxBEyAxBEyAxBEyAxBEyAxBEyAxBEyAxBEyAxBEyAxBEyAxBEyAxBEyAxBEyAxBEyAxB", string2);
      
      StringUtils.join((Object[]) null, 'N', (-2049), 64);
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = '8';
      charArray0[1] = '5';
      charArray0[2] = 'g';
      charArray0[3] = 'N';
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-71);
      byteArray0[1] = (byte)23;
      byteArray0[2] = (byte)43;
      byteArray0[3] = (byte)5;
      byteArray0[4] = (byte) (-1);
      String string0 = StringUtils.toString(byteArray0, (String) null);
      assertEquals(5, byteArray0.length);
      assertNotNull(string0);
      assertArrayEquals(new byte[] {(byte) (-71), (byte)23, (byte)43, (byte)5, (byte) (-1)}, byteArray0);
      assertEquals("\uFFFD\u0017+\u0005\uFFFD", string0);
      
      int int0 = StringUtils.indexOf((CharSequence) "\uFFFD\u0017+\u0005\uFFFD", 64, (int) (byte)43);
      assertEquals((-1), int0);
      
      String string1 = StringUtils.strip("GQ%srxt@br{=_");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[8];
      float[] floatArray0 = new float[5];
      floatArray0[0] = (-1.0F);
      floatArray0[1] = (-412.24F);
      floatArray0[2] = 1.0F;
      floatArray0[3] = (-2592.4207F);
      floatArray0[4] = (-2730.193F);
      String string0 = StringUtils.join(floatArray0, 'x');
      assertEquals(5, floatArray0.length);
      assertNotNull(string0);
      assertArrayEquals(new float[] {(-1.0F), (-412.24F), 1.0F, (-2592.4207F), (-2730.193F)}, floatArray0, 0.01F);
      assertEquals("-1.0x-412.24x1.0x-2592.4207x-2730.193", string0);
      
      charSequenceArray0[0] = (CharSequence) "-1.0x-412.24x1.0x-2592.4207x-2730.193";
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "-1.0x-412.24x1.0x-2592.4207x-2730.193");
      assertEquals("-1.0x-412.24x1.0x-2592.4207x-2730.193", charBuffer0.toString());
      assertEquals(37, charBuffer0.capacity());
      assertEquals(37, charBuffer0.limit());
      assertTrue(charBuffer0.isReadOnly());
      assertEquals(37, charBuffer0.length());
      assertTrue(charBuffer0.hasRemaining());
      assertFalse(charBuffer0.hasArray());
      assertEquals(37, charBuffer0.remaining());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.position());
      assertNotNull(charBuffer0);
      
      String[] stringArray0 = new String[9];
      stringArray0[0] = "-1.0x-412.24x1.0x-2592.4207x-2730.193";
      stringArray0[1] = "-1.0x-412.24x1.0x-2592.4207x-2730.193";
      stringArray0[2] = "-1.0x-412.24x1.0x-2592.4207x-2730.193";
      stringArray0[3] = "-1.0x-412.24x1.0x-2592.4207x-2730.193";
      charSequenceArray0[3] = (CharSequence) "";
      stringArray0[5] = "-1.0x-412.24x1.0x-2592.4207x-2730.193";
      stringArray0[6] = "-1.0x-412.24x1.0x-2592.4207x-2730.193";
      stringArray0[7] = "-1.0x-412.24x1.0x-2592.4207x-2730.193";
      stringArray0[8] = "-1.0x-412.24x1.0x-2592.4207x-2730.193";
      String string1 = StringUtils.getCommonPrefix(stringArray0);
      assertFalse(string1.equals((Object)string0));
      assertEquals(9, stringArray0.length);
      assertNotNull(string1);
      assertEquals("", string1);
      
      String string2 = StringUtils.leftPad(stringArray0[4], 1712);
      assertEquals(9, stringArray0.length);
      assertNull(string2);
      
      charSequenceArray0[3] = (CharSequence) null;
      String string3 = StringUtils.chop("W%");
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      assertEquals("W", string3);
      
      charSequenceArray0[4] = (CharSequence) "W";
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      assertFalse(linkedList0.contains("-1.0x-412.24x1.0x-2592.4207x-2730.193"));
      
      String string4 = StringUtils.join((List<?>) linkedList0, "-1.0x-412.24x1.0x-2592.4207x-2730.193", 1712, 1712);
      assertEquals(0, linkedList0.size());
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertNotNull(string4);
      assertFalse(linkedList0.contains("-1.0x-412.24x1.0x-2592.4207x-2730.193"));
      assertEquals("", string4);
      
      charSequenceArray0[5] = (CharSequence) "";
      String string5 = StringUtils.repeat("aX", "-1.0x-412.24x1.0x-2592.4207x-2730.193", 3);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertNotNull(string5);
      assertEquals("aX-1.0x-412.24x1.0x-2592.4207x-2730.193aX-1.0x-412.24x1.0x-2592.4207x-2730.193aX", string5);
      
      charSequenceArray0[6] = (CharSequence) "aX-1.0x-412.24x1.0x-2592.4207x-2730.193aX-1.0x-412.24x1.0x-2592.4207x-2730.193aX";
      String string6 = StringUtils.upperCase("", (Locale) null);
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string3));
      assertTrue(string6.equals((Object)string1));
      assertTrue(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string5));
      assertNotNull(string6);
      assertEquals("", string6);
      
      charSequenceArray0[7] = (CharSequence) "";
      boolean boolean0 = StringUtils.isAnyEmpty(charSequenceArray0);
      assertEquals(8, charSequenceArray0.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      float[] floatArray0 = new float[3];
      floatArray0[0] = 1.0F;
      floatArray0[1] = (-2730.193F);
      floatArray0[2] = (-2730.193F);
      String string0 = StringUtils.join(floatArray0, 'x');
      assertEquals(3, floatArray0.length);
      assertNotNull(string0);
      assertArrayEquals(new float[] {1.0F, (-2730.193F), (-2730.193F)}, floatArray0, 0.01F);
      assertEquals("1.0x-2730.193x-2730.193", string0);
      
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) " ");
      assertTrue(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.position());
      assertEquals(" ", charBuffer0.toString());
      assertEquals(1, charBuffer0.length());
      assertFalse(charBuffer0.hasArray());
      assertFalse(charBuffer0.isDirect());
      assertEquals(1, charBuffer0.limit());
      assertEquals(1, charBuffer0.capacity());
      assertEquals(1, charBuffer0.remaining());
      assertTrue(charBuffer0.hasRemaining());
      assertNotNull(charBuffer0);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = " ";
      String string1 = StringUtils.getCommonPrefix(stringArray0);
      assertFalse(string1.equals((Object)string0));
      assertEquals(1, stringArray0.length);
      assertNotNull(string1);
      assertEquals(" ", string1);
      
      int int0 = (-1143);
      String string2 = StringUtils.leftPad("", (-1143));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("", string2);
      
      String string3 = StringUtils.chop("IJ[>-hg9BsMG#l");
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      assertEquals("IJ[>-hg9BsMG#", string3);
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      assertFalse(linkedList0.contains('x'));
      
      // Undeclared exception!
      try { 
        StringUtils.join((List<?>) linkedList0, "", 108, 1712);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // toIndex = 1712
         //
         verifyException("java.util.SubList", e);
      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      String string0 = StringUtils.difference("6w#yEdv|M/NKamq&Rr", "6w#yEdv|M/NKamq&Rr");
      assertNotNull(string0);
      assertEquals("", string0);
      
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) 3160;
      floatArray0[1] = (float) 'R';
      floatArray0[2] = (-1.0F);
      floatArray0[3] = (float) 3160;
      floatArray0[4] = (float) 'R';
      int int0 = StringUtils.length("6w#yEdv|M/NKamq&Rr");
      assertEquals(18, int0);
      
      String string1 = StringUtils.center("6w#yEdv|M/NKamq&Rr", (-2755));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("6w#yEdv|M/NKamq&Rr", string1);
      
      String string2 = StringUtils.abbreviate("6w#yEdv|M/NKamq&Rr", "", 1086);
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("6w#yEdv|M/NKamq&Rr", string2);
      
      String string3 = StringUtils.lowerCase("6w#yEdv|M/NKamq&Rr", (Locale) null);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      assertEquals("6w#yedv|m/nkamq&rr", string3);
      
      String string4 = StringUtils.stripStart("A\"Z&!lbwQpB\"D%ty", "x[BEyAxx[BEyAx");
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertNotNull(string4);
      assertEquals("\"Z&!lbwQpB\"D%ty", string4);
      
      String string5 = StringUtils.strip("2jZt))#=hSC", "\"Z&!lbwQpB\"D%ty");
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertNotNull(string5);
      assertEquals("2jZt))#=hSC", string5);
      
      String string6 = StringUtils.removePattern((String) null, "");
      assertNull(string6);
      
      String string7 = StringUtils.defaultString("Threshold must not be negative");
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string0));
      assertNotNull(string7);
      assertEquals("Threshold must not be negative", string7);
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      Locale locale0 = Locale.GERMANY;
      assertEquals("DE", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("de", locale0.getLanguage());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("de_DE", locale0.toString());
      assertNotNull(locale0);
      
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      assertEquals("DE", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("de", locale0.getLanguage());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("de_DE", locale0.toString());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertNotNull(set0);
      
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.EXTENDED_FILTERING;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) arrayList0, (Collection<String>) set0, locale_FilteringMode0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertEquals("DE", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("de", locale0.getLanguage());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("de_DE", locale0.toString());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
      
      String string0 = StringUtils.substringAfter("\n", 598);
      assertNotNull(string0);
      assertEquals("", string0);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) 0;
      floatArray0[1] = (float) (-1);
      floatArray0[2] = (float) 'Y';
      floatArray0[3] = (float) 'Y';
      floatArray0[4] = (float) 598;
      String string1 = StringUtils.replaceOnce("!?5e6G ", "", "!?5e6G ");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("!?5e6G ", string1);
      
      String string2 = StringUtils.join(floatArray0, 'Y', (-1), (-3901));
      assertFalse(string2.equals((Object)string1));
      assertEquals(5, floatArray0.length);
      assertNotNull(string2);
      assertArrayEquals(new float[] {0.0F, (-1.0F), 89.0F, 89.0F, 598.0F}, floatArray0, 0.01F);
      assertEquals("", string2);
      
      String string3 = StringUtils.rotate("", (-3901));
      assertTrue(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      assertEquals("", string3);
      
      String string4 = StringUtils.repeat("\r", (-620));
      assertFalse(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string3));
      assertNotNull(string4);
      assertEquals("", string4);
      
      String[] stringArray0 = new String[6];
      stringArray0[0] = "";
      stringArray0[1] = "\r";
      stringArray0[2] = "";
      stringArray0[3] = "\r";
      stringArray0[4] = "";
      stringArray0[5] = "";
      String string5 = StringUtils.getCommonPrefix(stringArray0);
      assertFalse(string5.equals((Object)string1));
      assertTrue(string5.equals((Object)string3));
      assertEquals(6, stringArray0.length);
      assertNotNull(string5);
      assertEquals("", string5);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "", (CharSequence) "", (-1));
      assertEquals(0, int0);
      
      String string6 = StringUtils.CR;
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string1));
      assertNotNull(string6);
      assertEquals("\r", string6);
      
      String string7 = StringUtils.remove("", 'd');
      assertFalse(string7.equals((Object)string6));
      assertTrue(string7.equals((Object)string2));
      assertTrue(string7.equals((Object)string0));
      assertTrue(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string1));
      assertTrue(string7.equals((Object)string4));
      assertTrue(string7.equals((Object)string3));
      assertNotNull(string7);
      assertEquals("", string7);
      
      boolean boolean0 = StringUtils.isNoneEmpty(stringArray0);
      assertEquals(6, stringArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      Locale locale0 = Locale.GERMANY;
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("de_DE", locale0.toString());
      assertEquals("DE", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("de", locale0.getLanguage());
      assertNotNull(locale0);
      
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("de_DE", locale0.toString());
      assertEquals("DE", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("de", locale0.getLanguage());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertNotNull(set0);
      
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.EXTENDED_FILTERING;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) arrayList0, (Collection<String>) set0, locale_FilteringMode0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("de_DE", locale0.toString());
      assertEquals("DE", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("de", locale0.getLanguage());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
      
      String string0 = StringUtils.substringAfter("\n", 598);
      assertNotNull(string0);
      assertEquals("", string0);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) 0;
      floatArray0[1] = (float) (-1);
      floatArray0[2] = (float) 'Y';
      floatArray0[3] = (float) 'Y';
      floatArray0[4] = (float) 598;
      String string1 = StringUtils.join(floatArray0, 'Y', (-1), (-3901));
      assertEquals(5, floatArray0.length);
      assertNotNull(string1);
      assertArrayEquals(new float[] {0.0F, (-1.0F), 89.0F, 89.0F, 598.0F}, floatArray0, 0.01F);
      assertEquals("", string1);
      
      String string2 = StringUtils.rotate("", (-3901));
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("", string2);
      
      CharBuffer charBuffer0 = CharBuffer.allocate(598);
      assertEquals(598, charBuffer0.limit());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(598, charBuffer0.remaining());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", charBuffer0.toString());
      assertFalse(charBuffer0.isDirect());
      assertEquals(598, charBuffer0.length());
      assertEquals(0, charBuffer0.position());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(598, charBuffer0.capacity());
      assertTrue(charBuffer0.hasArray());
      assertNotNull(charBuffer0);
      
      Supplier<CharBuffer> supplier0 = (Supplier<CharBuffer>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      CharBuffer charBuffer1 = StringUtils.getIfEmpty(charBuffer0, supplier0);
      assertEquals(0, charBuffer1.position());
      assertEquals(598, charBuffer1.length());
      assertEquals(598, charBuffer1.remaining());
      assertEquals(598, charBuffer1.capacity());
      assertTrue(charBuffer1.hasRemaining());
      assertTrue(charBuffer1.hasArray());
      assertEquals(598, charBuffer1.limit());
      assertEquals(0, charBuffer1.arrayOffset());
      assertFalse(charBuffer1.isReadOnly());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", charBuffer1.toString());
      assertFalse(charBuffer1.isDirect());
      assertEquals(598, charBuffer0.limit());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(598, charBuffer0.remaining());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", charBuffer0.toString());
      assertFalse(charBuffer0.isDirect());
      assertEquals(598, charBuffer0.length());
      assertEquals(0, charBuffer0.position());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(598, charBuffer0.capacity());
      assertTrue(charBuffer0.hasArray());
      assertSame(charBuffer1, charBuffer0);
      assertSame(charBuffer0, charBuffer1);
      assertNotNull(charBuffer1);
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      String string0 = StringUtils.wrapIfMissing("aX-1.0x-412.24x1.0x-2592.4207x-2730.193aX-1.0x-412.24x1.0x-2592.4207x-2730.193aX-1.0x-412.24x1.0x-2592.4207x-2730.193-1.0x-412.24x1.0x-2592.4207x-2730.193nt ", '5');
      assertNotNull(string0);
      assertEquals("5aX-1.0x-412.24x1.0x-2592.4207x-2730.193aX-1.0x-412.24x1.0x-2592.4207x-2730.193aX-1.0x-412.24x1.0x-2592.4207x-2730.193-1.0x-412.24x1.0x-2592.4207x-2730.193nt 5", string0);
      
      String string1 = StringUtils.rightPad("aX-1.0x-412.24x1.0x-2592.4207x-2730.193aX-1.0x-412.24x1.0x-2592.4207x-2730.193aX-1.0x-412.24x1.0x-2592.4207x-2730.193-1.0x-412.24x1.0x-2592.4207x-2730.193nt ", (-3760));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("aX-1.0x-412.24x1.0x-2592.4207x-2730.193aX-1.0x-412.24x1.0x-2592.4207x-2730.193aX-1.0x-412.24x1.0x-2592.4207x-2730.193-1.0x-412.24x1.0x-2592.4207x-2730.193nt ", string1);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "rp$f", (CharSequence) "kb>K:%lR&M+Fm2*/78");
      assertEquals((-1), int0);
      
      boolean boolean0 = StringUtils.isWhitespace("aX-1.0x-412.24x1.0x-2592.4207x-2730.193aX-1.0x-412.24x1.0x-2592.4207x-2730.193aX-1.0x-412.24x1.0x-2592.4207x-2730.193-1.0x-412.24x1.0x-2592.4207x-2730.193nt ");
      assertFalse(boolean0);
      
      String string2 = StringUtils.center("rp$f", (-3760));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("rp$f", string2);
      
      int int1 = StringUtils.countMatches((CharSequence) "rp$f", 'T');
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      String string3 = StringUtils.rightPad("kb>K:%lR&M+Fm2*/78", (-1), "5aX-1.0x-412.24x1.0x-2592.4207x-2730.193aX-1.0x-412.24x1.0x-2592.4207x-2730.193aX-1.0x-412.24x1.0x-2592.4207x-2730.193-1.0x-412.24x1.0x-2592.4207x-2730.193nt 5");
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      assertEquals("kb>K:%lR&M+Fm2*/78", string3);
      
      CharSequence charSequence0 = StringUtils.defaultIfBlank((CharSequence) "rp$f", (CharSequence) "kb>K:%lR&M+Fm2*/78");
      assertFalse(charSequence0.equals((Object)string3));
      assertTrue(charSequence0.equals((Object)string2));
      assertFalse(charSequence0.equals((Object)string0));
      assertFalse(charSequence0.equals((Object)string1));
      assertNotNull(charSequence0);
      assertEquals("rp$f", charSequence0);
      
      boolean boolean1 = StringUtils.equals((CharSequence) "kb>K:%lR&M+Fm2*/78", (CharSequence) "rp$f");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (-3760);
      doubleArray0[1] = (double) 'L';
      int int2 = StringUtils.lastOrdinalIndexOf("aX-1.0x-412.24x1.0x-2592.4207x-2730.193aX-1.0x-412.24x1.0x-2592.4207x-2730.193aX-1.0x-412.24x1.0x-2592.4207x-2730.193-1.0x-412.24x1.0x-2592.4207x-2730.193nt ", "rp$f", 21);
      assertFalse(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals((-1), int2);
      
      Object[] objectArray0 = new Object[0];
      String string4 = StringUtils.join(objectArray0, "clone");
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)charSequence0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertEquals(0, objectArray0.length);
      assertNotNull(string4);
      assertEquals("", string4);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("dCw5<|z{=;y", 's');
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      int int3 = StringUtils.indexOfAnyBut((CharSequence) "5aX-1.0x-412.24x1.0x-2592.4207x-2730.193aX-1.0x-412.24x1.0x-2592.4207x-2730.193aX-1.0x-412.24x1.0x-2592.4207x-2730.193-1.0x-412.24x1.0x-2592.4207x-2730.193nt 5", (CharSequence) "rp$f");
      assertFalse(int3 == int0);
      assertTrue(int3 == int1);
      assertFalse(int3 == int2);
      assertEquals(0, int3);
      
      String string5 = StringUtils.upperCase("Index: ");
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)charSequence0));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertNotNull(string5);
      assertEquals("INDEX: ", string5);
      
      String string6 = StringUtils.overlay("}gfseLh", " 2tx=Ws7%eR!K,SEH", (-3760), 0);
      assertFalse(string6.equals((Object)charSequence0));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string3));
      assertNotNull(string6);
      assertEquals(" 2tx=Ws7%eR!K,SEH}gfseLh", string6);
      
      String string7 = StringUtils.unwrap("~4&4+2&FAnull/empty items", "~4&4+2&FAnull/empty items");
      assertFalse(string7.equals((Object)charSequence0));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string0));
      assertNotNull(string7);
      assertEquals("~4&4+2&FAnull/empty items", string7);
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = '8';
      String string0 = StringUtils.removeIgnoreCase("9Y`]eiW^{x@Rl", "ot be negative");
      assertNotNull(string0);
      assertEquals("9Y`]eiW^{x@Rl", string0);
      
      boolean boolean0 = StringUtils.contains((CharSequence) "9Y`]eiW^{x@Rl", 3833);
      assertFalse(boolean0);
      
      int int0 = StringUtils.indexOf((CharSequence) "9Y`]eiW^{x@Rl", (-32768), (-32768));
      assertEquals((-1), int0);
      
      String string1 = StringUtils.stripAccents("ot be negative");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("ot be negative", string1);
      
      int int1 = StringUtils.compare("^5Lu5cU9 t@rj<9k*", "_SpVN");
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      String string2 = StringUtils.substring("nt aX-1.0x-412.24x1.0x-2592.4207x-2730.193aX-1.0x-412.24x1.0x-2592.4207x-2730.193aX-1.0x-412.24x1.0x-2592.4207x-2730.193-1.0x-412.24x1.0x-2592.4207x-2730.193", 1046);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("", string2);
      
      String string3 = StringUtils.unwrap("9Y`]eiW^{x@Rl", '8');
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string0));
      assertNotNull(string3);
      assertEquals("9Y`]eiW^{x@Rl", string3);
      
      String string4 = StringUtils.join((boolean[]) null, 'B', (-1), (-32768));
      assertNull(string4);
      
      String string5 = StringUtils.normalizeSpace("9Y`]eiW^{x@Rl");
      assertTrue(string5.equals((Object)string3));
      assertTrue(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertNotNull(string5);
      assertEquals("9Y`]eiW^{x@Rl", string5);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparator(".", "`enGHFwU4`)oA");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      String string0 = StringUtils.normalizeSpace("9-5y1iX{EX`M@KK#[b");
      assertNotNull(string0);
      assertEquals("9-5y1iX{EX`M@KK#[b", string0);
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[0] = null;
      String string0 = StringUtils.unwrap((String) null, '9');
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      String[] stringArray0 = StringUtils.split("");
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      int int0 = StringUtils.compareIgnoreCase("", "");
      assertEquals(0, int0);
      
      String string0 = StringUtils.stripAccents("");
      assertNotNull(string0);
      assertEquals("", string0);
      
      int int1 = StringUtils.compare("H`XuI2/u[OISPJ T", "H`XuI2/u[OISPJ T");
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      
      String string1 = StringUtils.substring("^5Lu5cU9 t@rj<9k*", 1046);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
      
      String string2 = StringUtils.unwrap("", '4');
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("", string2);
      
      String string3 = StringUtils.join((boolean[]) null, '|', 0, 448);
      assertNull(string3);
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = '`';
      charArray0[1] = 'l';
      charArray0[2] = 'r';
      charArray0[3] = 'H';
      charArray0[4] = '>';
      charArray0[5] = 'h';
      String string0 = StringUtils.join(charArray0, '>');
      assertEquals(6, charArray0.length);
      assertNotNull(string0);
      assertArrayEquals(new char[] {'`', 'l', 'r', 'H', '>', 'h'}, charArray0);
      assertEquals("`>l>r>H>>>h", string0);
      
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "`>l>r>H>>>h", charArray0);
      assertEquals(6, charArray0.length);
      assertArrayEquals(new char[] {'`', 'l', 'r', 'H', '>', 'h'}, charArray0);
      assertTrue(boolean0);
      
      int[] intArray0 = StringUtils.toCodePoints("`>l>r>H>>>h");
      assertEquals(11, intArray0.length);
      assertNotNull(intArray0);
      
      String string1 = StringUtils.toRootUpperCase("`>l>r>H>>>h");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("`>L>R>H>>>H", string1);
      
      String string2 = StringUtils.join(charArray0, 'r', 321, 321);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals(6, charArray0.length);
      assertNotNull(string2);
      assertArrayEquals(new char[] {'`', 'l', 'r', 'H', '>', 'h'}, charArray0);
      assertEquals("", string2);
      
      String string3 = StringUtils.deleteWhitespace("Array and element cannot both be null");
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      assertEquals("Arrayandelementcannotbothbenull", string3);
      
      String string4 = StringUtils.substringAfter("DI.u&xKa$:JmrN9i", 13);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertNotNull(string4);
      assertEquals("", string4);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "", "");
      assertEquals((-1), int0);
      
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) "Array and element cannot both be null";
      objectArray0[1] = (Object) 'l';
      String[] stringArray0 = new String[7];
      stringArray0[0] = null;
      stringArray0[1] = "Arrayandelementcannotbothbenull";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = null;
      stringArray0[5] = "";
      stringArray0[6] = null;
      String string5 = StringUtils.replaceEachRepeatedly("`>L>R>H>>>H", stringArray0, stringArray0);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertTrue(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertEquals(7, stringArray0.length);
      assertNotNull(string5);
      assertEquals("`>L>R>H>>>H", string5);
      
      String string6 = StringUtils.getDigits((String) null);
      assertNull(string6);
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      String string0 = StringUtils.substring("[vFLKc)9,Gv`%%aXl", Integer.MAX_VALUE);
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.leftPad(" vs ", 1975);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.wrapIfMissing("x[BEy", "7}`X.Sn");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("7}`X.Snx[BEy7}`X.Sn", string2);
      
      String string3 = StringUtils.substringAfter(" vs ", 23);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      assertEquals("", string3);
      
      String string4 = StringUtils.truncate("", 1975);
      assertFalse(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertNotNull(string4);
      assertEquals("", string4);
      
      String string5 = StringUtils.EMPTY;
      assertTrue(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertNotNull(string5);
      assertEquals("", string5);
      
      String string6 = StringUtils.substringBetween("x[BEy", "", string1);
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string5));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string4));
      assertNull(string6);
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      Integer integer0 = new Integer((-324));
      assertNotNull(integer0);
      assertEquals((-324), (int)integer0);
      
      Integer integer1 = new Integer((-324));
      assertTrue(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals((-324), (int)integer1);
      
      char[] charArray0 = new char[1];
      charArray0[0] = '\u0015';
      String string0 = StringUtils.valueOf(charArray0);
      assertEquals(1, charArray0.length);
      assertNotNull(string0);
      assertArrayEquals(new char[] {'\u0015'}, charArray0);
      assertEquals("\u0015", string0);
      
      String string1 = StringUtils.getDigits("6w#yEdv|M/NKamq&Rr");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("6", string1);
      
      boolean boolean0 = StringUtils.isBlank("\u0015");
      assertFalse(boolean0);
      
      int int0 = StringUtils.countMatches((CharSequence) "6w#yEdv|M/NKamq&Rr", 'h');
      assertEquals(0, int0);
      
      int int1 = StringUtils.indexOfAnyBut((CharSequence) "6", charArray0);
      assertTrue(int1 == int0);
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'\u0015'}, charArray0);
      assertEquals(0, int1);
      
      int int2 = StringUtils.indexOfAnyBut((CharSequence) "\u0015", charArray0);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'\u0015'}, charArray0);
      assertEquals((-1), int2);
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = '8';
      charArray0[1] = '5';
      charArray0[2] = 'g';
      charArray0[3] = 'N';
      String string0 = StringUtils.stripAccents("gXYl'|2.y");
      assertNotNull(string0);
      assertEquals("gXYl'|2.y", string0);
      
      Class<Object> class0 = Object.class;
      ServiceLoader<Object> serviceLoader0 = ServiceLoader.loadInstalled(class0);
      assertEquals("java.util.ServiceLoader[java.lang.Object]", serviceLoader0.toString());
      assertNotNull(serviceLoader0);
      
      String string1 = StringUtils.removeEnd("=q@F!X#Ug_t@", "7eq3P]P}dcFH>x");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("=q@F!X#Ug_t@", string1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      charSequenceArray0[0] = (CharSequence) ".";
      Locale locale0 = Locale.PRC;
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertNotNull(locale0);
      
      String string2 = StringUtils.lowerCase("=q@F!X#Ug_t@", locale0);
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("=q@f!x#ug_t@", string2);
      
      charSequenceArray0[1] = (CharSequence) "=q@f!x#ug_t@";
      Locale locale1 = (Locale)locale0.clone();
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CN", locale1.getCountry());
      assertEquals("zh", locale1.getLanguage());
      assertEquals("zh_CN", locale1.toString());
      assertEquals("zho", locale1.getISO3Language());
      assertEquals("CHN", locale1.getISO3Country());
      assertEquals("", locale1.getVariant());
      assertTrue(locale1.equals((Object)locale0));
      assertNotSame(locale0, locale1);
      assertNotSame(locale1, locale0);
      assertNotNull(locale1);
      
      String string3 = StringUtils.truncate((String) null, 116);
      assertNull(string3);
      
      charSequenceArray0[2] = (CharSequence) null;
      charSequenceArray0[3] = (CharSequence) ".";
      charSequenceArray0[4] = (CharSequence) "8e";
      String string4 = StringUtils.appendIfMissing("8e", "\r", charSequenceArray0);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertEquals(5, charSequenceArray0.length);
      assertNotNull(string4);
      assertEquals("8e", string4);
      
      // Undeclared exception!
      try { 
        StringUtils.getJaroWinklerDistance("gXYl'|2.y", charSequenceArray0[2]);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      String string0 = StringUtils.swapCase("");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.removeEnd("g{J.B6[Bmhg<", "");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("g{J.B6[Bmhg<", string1);
      
      String string2 = StringUtils.center("g{J.B6[Bmhg<", 16);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("  g{J.B6[Bmhg<  ", string2);
      
      int int0 = StringUtils.indexOfDifference((CharSequence) "kb>K:%lR&M+Fm2*/78", (CharSequence) "g{J.B6[Bmhg<");
      assertEquals(0, int0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      String string3 = null;
      String string4 = StringUtils.leftPad((String) null, 122, "org.apache.commons.lang3.Charsets");
      assertNull(string4);
      
      int int1 = StringUtils.indexOf((CharSequence) null, 16);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      // Undeclared exception!
      try { 
        StringUtils.getJaroWinklerDistance("", (CharSequence) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      String string0 = StringUtils.join(objectArray0);
      assertEquals(1, objectArray0.length);
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.reverse("");
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
      
      String string2 = StringUtils.abbreviate("", 5);
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("", string2);
      
      double double0 = StringUtils.getJaroWinklerDistance("", "");
      assertEquals(0.0, double0, 0.01);
      
      int int0 = StringUtils.indexOf((CharSequence) "", Integer.MAX_VALUE);
      assertEquals((-1), int0);
      
      String string3 = StringUtils.truncate("", 4, 944);
      assertTrue(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string1));
      assertNotNull(string3);
      assertEquals("", string3);
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      String string0 = "aqr%Nr\"5^39(n#*";
      String string1 = StringUtils.toRootLowerCase("aqr%Nr\"5^39(n#*");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("aqr%nr\"5^39(n#*", string1);
      
      // Undeclared exception!
      try { 
        StringUtils.replaceFirst("aqr%Nr\"5^39(n#*", "aqr%Nr\"5^39(n#*", "aqr%nr\"5^39(n#*");
        fail("Expecting exception: PatternSyntaxException");
      
      } catch(PatternSyntaxException e) {
         //
         // Unclosed group near index 16
         // aqr%Nr\"5^39(n#*
         //
         verifyException("java.util.regex.Pattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = '$';
      charArray0[1] = '$';
      charArray0[2] = '$';
      charArray0[3] = '7';
      charArray0[4] = '$';
      boolean boolean0 = StringUtils.containsAny((CharSequence) "kb>K:%lR&M+Fm2*/78", charArray0);
      assertEquals(5, charArray0.length);
      assertArrayEquals(new char[] {'$', '$', '$', '7', '$'}, charArray0);
      assertTrue(boolean0);
      
      String string0 = StringUtils.deleteWhitespace("kb>K:%lR&M+Fm2*/78");
      assertNotNull(string0);
      assertEquals("kb>K:%lR&M+Fm2*/78", string0);
      
      String string1 = StringUtils.stripAccents("gXYl'|2.y");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("gXYl'|2.y", string1);
      
      Class<Object> class0 = Object.class;
      ServiceLoader<Object> serviceLoader0 = ServiceLoader.loadInstalled(class0);
      assertEquals("java.util.ServiceLoader[java.lang.Object]", serviceLoader0.toString());
      assertNotNull(serviceLoader0);
      
      String string2 = StringUtils.removeEnd("kb>K:%lR&M+Fm2*/78", ".");
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("kb>K:%lR&M+Fm2*/78", string2);
      
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      charSequenceArray0[0] = (CharSequence) "The character ";
      String string3 = StringUtils.appendIfMissing("gXYl'|2.y", "gXYl'|2.y", charSequenceArray0);
      assertTrue(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals(1, charSequenceArray0.length);
      assertNotNull(string3);
      assertEquals("gXYl'|2.y", string3);
      
      boolean boolean1 = StringUtils.containsAny((CharSequence) "gXYl'|2.y", (CharSequence) ".");
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String string4 = StringUtils.removePattern(" cP", "w7|dK!B5k'D]Od");
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertNotNull(string4);
      assertEquals(" cP", string4);
      
      // Undeclared exception!
      try { 
        StringUtils.replaceFirst("C#-O_m", "x[BEyAx", "w7|dK!B5k'D]Od");
        fail("Expecting exception: PatternSyntaxException");
      
      } catch(PatternSyntaxException e) {
         //
         // Unclosed character class near index 6
         // x[BEyAx
         //       ^
         //
         verifyException("java.util.regex.Pattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      int int0 = StringUtils.compare("...", "...", true);
      assertEquals(0, int0);
      
      String string0 = StringUtils.center("Kv9XcM", Integer.MIN_VALUE);
      assertNotNull(string0);
      assertEquals("Kv9XcM", string0);
      
      boolean boolean0 = StringUtils.isAllEmpty((CharSequence[]) null);
      assertTrue(boolean0);
      
      double double0 = StringUtils.getJaroWinklerDistance("Kv9XcM", "...");
      assertEquals(0.0, double0, 0.01);
      
      String string1 = StringUtils.repeat("clone", 322);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      int int1 = StringUtils.indexOfIgnoreCase((CharSequence) string1, (CharSequence) "", 0);
      assertFalse(string1.equals((Object)string0));
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      
      String string2 = StringUtils.CR;
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("\r", string2);
      
      String string3 = StringUtils.remove(string1, 'L');
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      
      boolean boolean1 = StringUtils.isNoneEmpty((CharSequence[]) null);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short)2;
      shortArray0[1] = (short)2;
      shortArray0[2] = (short) (-2564);
      shortArray0[3] = (short) (-2564);
      shortArray0[4] = (short)2;
      String string0 = StringUtils.join(shortArray0, '1');
      assertEquals(5, shortArray0.length);
      assertNotNull(string0);
      assertArrayEquals(new short[] {(short)2, (short)2, (short) (-2564), (short) (-2564), (short)2}, shortArray0);
      assertEquals("2121-25641-256412", string0);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "\n", (CharSequence) "\r");
      assertEquals((-1), int0);
      
      char[] charArray0 = new char[2];
      charArray0[0] = '1';
      charArray0[1] = '1';
      int int1 = StringUtils.indexOfAny((CharSequence) " ", charArray0);
      assertTrue(int1 == int0);
      assertEquals(2, charArray0.length);
      assertArrayEquals(new char[] {'1', '1'}, charArray0);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      Integer integer0 = new Integer((-324));
      assertNotNull(integer0);
      assertEquals((-324), (int)integer0);
      
      Integer integer1 = new Integer((-324));
      assertTrue(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals((-324), (int)integer1);
      
      int int0 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      long[] longArray0 = new long[6];
      longArray0[0] = (long) 'U';
      longArray0[1] = (long) (-1);
      longArray0[2] = 1L;
      longArray0[3] = (-1125L);
      longArray0[4] = 1L;
      longArray0[5] = 0L;
      String string0 = StringUtils.join(longArray0, '.');
      assertEquals(6, longArray0.length);
      assertNotNull(string0);
      assertArrayEquals(new long[] {85L, (-1L), 1L, (-1125L), 1L, 0L}, longArray0);
      assertEquals("85.-1.1.-1125.1.0", string0);
      
      String string1 = StringUtils.abbreviateMiddle("85.-1.1.-1125.1.0", "X&S7pX1tQ7?vr", (-324));
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("85.-1.1.-1125.1.0", string1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[7];
      charSequenceArray0[0] = (CharSequence) "X&S7pX1tQ7?vr";
      charSequenceArray0[1] = (CharSequence) "Invalid locale format: ";
      charSequenceArray0[2] = (CharSequence) "85.-1.1.-1125.1.0";
      charSequenceArray0[3] = (CharSequence) "Invalid locale format: ";
      charSequenceArray0[4] = (CharSequence) "85.-1.1.-1125.1.0";
      charSequenceArray0[5] = (CharSequence) "85.-1.1.-1125.1.0";
      charSequenceArray0[6] = (CharSequence) "X&S7pX1tQ7?vr";
      boolean boolean0 = StringUtils.equalsAny("X&S7pX1tQ7?vr", charSequenceArray0);
      assertEquals(7, charSequenceArray0.length);
      assertTrue(boolean0);
      
      char[] charArray0 = new char[5];
      charArray0[0] = 'U';
      charArray0[1] = '.';
      charArray0[2] = '.';
      charArray0[3] = 'U';
      charArray0[4] = '.';
      int int1 = StringUtils.indexOfAny((CharSequence) "85.-1.1.-1125.1.0", charArray0);
      assertFalse(int1 == int0);
      assertEquals(5, charArray0.length);
      assertArrayEquals(new char[] {'U', '.', '.', 'U', '.'}, charArray0);
      assertEquals(2, int1);
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Stream<String> stream0 = linkedList0.parallelStream();
      assertEquals(0, linkedList0.size());
      assertNotNull(stream0);
      
      boolean boolean0 = linkedList0.add("', is neither of type Map.Entry nor an Array");
      assertEquals(1, linkedList0.size());
      assertTrue(linkedList0.contains("', is neither of type Map.Entry nor an Array"));
      assertTrue(boolean0);
      
      LinkedList<String> linkedList1 = new LinkedList<String>();
      assertEquals(0, linkedList1.size());
      assertFalse(linkedList1.equals((Object)linkedList0));
      assertNotNull(linkedList1);
      assertFalse(linkedList1.contains("', is neither of type Map.Entry nor an Array"));
      
      boolean boolean1 = linkedList0.add("', is neither of type Map.Entry nor an Array");
      assertEquals(2, linkedList0.size());
      assertFalse(linkedList0.equals((Object)linkedList1));
      assertTrue(boolean1 == boolean0);
      assertNotSame(linkedList0, linkedList1);
      assertTrue(linkedList0.contains("', is neither of type Map.Entry nor an Array"));
      assertTrue(boolean1);
      
      boolean boolean2 = linkedList1.offerFirst((String) null);
      assertEquals(1, linkedList1.size());
      assertFalse(linkedList1.equals((Object)linkedList0));
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertNotSame(linkedList1, linkedList0);
      assertFalse(linkedList1.contains("', is neither of type Map.Entry nor an Array"));
      assertTrue(boolean2);
      
      String string0 = linkedList0.pollFirst();
      assertEquals(1, linkedList0.size());
      assertFalse(linkedList0.equals((Object)linkedList1));
      assertNotSame(linkedList0, linkedList1);
      assertNotNull(string0);
      assertTrue(linkedList0.contains("', is neither of type Map.Entry nor an Array"));
      assertEquals("', is neither of type Map.Entry nor an Array", string0);
      
      String string1 = linkedList1.pollFirst();
      assertEquals(0, linkedList1.size());
      assertFalse(linkedList1.equals((Object)linkedList0));
      assertNotSame(linkedList1, linkedList0);
      assertNull(string1);
      assertFalse(linkedList1.contains("', is neither of type Map.Entry nor an Array"));
      
      String string2 = StringUtils.join((List<?>) linkedList1, 'P', (-82), (-82));
      assertEquals(0, linkedList1.size());
      assertFalse(linkedList1.equals((Object)linkedList0));
      assertFalse(string2.equals((Object)string0));
      assertNotSame(linkedList1, linkedList0);
      assertNotNull(string2);
      assertFalse(linkedList1.contains(string2));
      assertEquals("", string2);
      
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) null;
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[1] = object0;
      String string3 = StringUtils.join(objectArray0, 'h');
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals(2, objectArray0.length);
      assertNotNull(string3);
      
      String string4 = StringUtils.stripAccents("\"IP'TI/m`j2");
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertNotNull(string4);
      assertEquals("\"IP'TI/m`j2", string4);
      
      long[] longArray0 = new long[0];
      String string5 = StringUtils.join(longArray0, 'h');
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertEquals(0, longArray0.length);
      assertNotNull(string5);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals("", string5);
      
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "hjava.lang.Object@7ada206b", (CharSequence) "\"IP'TI/m`j2");
      assertEquals(0, int0);
      
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short)46;
      String[] stringArray0 = StringUtils.splitByWholeSeparator("9QW5iDm;,TaUB", "Supplied value must be a valid byte literal between -32768 and 32767: [", (int) (short)1103);
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string6 = StringUtils.join(longArray0, 'N');
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string3));
      assertEquals(0, longArray0.length);
      assertNotNull(string6);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals("", string6);
      
      String string7 = StringUtils.abbreviateMiddle("\"IP'TI/m`j2", "Arguments cannot both be null", 0);
      assertFalse(string7.equals((Object)string2));
      assertTrue(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string0));
      assertNotNull(string7);
      assertEquals("\"IP'TI/m`j2", string7);
      
      boolean boolean3 = StringUtils.equalsAny("hjava.lang.Object@7ada206b", stringArray0);
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3 == boolean0);
      assertEquals(1, stringArray0.length);
      assertFalse(boolean3);
      
      String string8 = StringUtils.replaceEach((String) null, stringArray0, stringArray0);
      assertEquals(1, stringArray0.length);
      assertNull(string8);
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      String string0 = StringUtils.stripAccents("");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.wrap(" is not in the range '0' - '9'", '3');
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("3 is not in the range '0' - '9'3", string1);
      
      String string2 = StringUtils.chop("");
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("", string2);
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      assertFalse(linkedList0.contains(""));
      
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      assertFalse(arrayList0.contains(""));
      
      int int0 = (-1220);
      // Undeclared exception!
      try { 
        StringUtils.join((List<?>) arrayList0, " is not in the range '0' - '9'", (-1220), 299);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // fromIndex = -1220
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      String string0 = "";
      String string1 = StringUtils.substring("", (-2854));
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
      
      boolean boolean0 = StringUtils.equalsIgnoreCase("", "");
      assertTrue(boolean0);
      
      String string2 = StringUtils.wrapIfMissing("", "");
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("", string2);
      
      String string3 = StringUtils.substringAfter("", (-2854));
      assertTrue(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string0));
      assertNotNull(string3);
      assertEquals("", string3);
      
      // Undeclared exception!
      try { 
        StringUtils.truncate("", (-2854));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // maxWith cannot be negative
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = '8';
      String string0 = StringUtils.removeIgnoreCase("9Y`]eiW^{x@Rl", "ot be negative");
      assertNotNull(string0);
      assertEquals("9Y`]eiW^{x@Rl", string0);
      
      boolean boolean0 = StringUtils.contains((CharSequence) "9Y`]eiW^{x@Rl", 3833);
      assertFalse(boolean0);
      
      int int0 = StringUtils.indexOf((CharSequence) "9Y`]eiW^{x@Rl", (-32768), (-32768));
      assertEquals((-1), int0);
      
      String string1 = StringUtils.stripAccents("ot be negative");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("ot be negative", string1);
      
      int int1 = StringUtils.compare("^5Lu5cU9 t@rj<9k*", "_SpVN");
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      String string2 = StringUtils.substring("nt aX-1.0x-412.24x1.0x-2592.4207x-2730.193aX-1.0x-412.24x1.0x-2592.4207x-2730.193aX-1.0x-412.24x1.0x-2592.4207x-2730.193-1.0x-412.24x1.0x-2592.4207x-2730.193", 1046);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("", string2);
      
      String string3 = StringUtils.unwrap("9Y`]eiW^{x@Rl", '8');
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      assertEquals("9Y`]eiW^{x@Rl", string3);
      
      String string4 = StringUtils.join((boolean[]) null, 'B', (-1), (-32768));
      assertNull(string4);
      
      String string5 = StringUtils.overlay("9Y`]eiW^{x@Rl", "ot be negative", 3833, (-1));
      assertFalse(string5.equals((Object)string3));
      assertTrue(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertNotNull(string5);
      assertEquals("ot be negative", string5);
      
      int int2 = StringUtils.indexOfIgnoreCase((CharSequence) "ot be negative", (CharSequence) "ot be negative", (-1));
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(0, int2);
      
      int int3 = StringUtils.lastIndexOf((CharSequence) "9Y`]eiW^{x@Rl", (CharSequence) "");
      assertFalse(int3 == int1);
      assertFalse(int3 == int0);
      assertFalse(int3 == int2);
      assertEquals(13, int3);
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      String string0 = StringUtils.wrapIfMissing("aX-1.0x-412.24x1.0x-2592.4207x-2730.193aX-1.0x-412.24x1.0x-2592.4207x-2730.193aX-1.0x-412.24x1.0x-2592.4207x-2730.193-1.0x-412.24x1.0x-2592.4207x-2730.193", "nt ");
      assertNotNull(string0);
      assertEquals("nt aX-1.0x-412.24x1.0x-2592.4207x-2730.193aX-1.0x-412.24x1.0x-2592.4207x-2730.193aX-1.0x-412.24x1.0x-2592.4207x-2730.193-1.0x-412.24x1.0x-2592.4207x-2730.193nt ", string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[0] = (CharSequence) "aX-1.0x-412.24x1.0x-2592.4207x-2730.193aX-1.0x-412.24x1.0x-2592.4207x-2730.193aX-1.0x-412.24x1.0x-2592.4207x-2730.193-1.0x-412.24x1.0x-2592.4207x-2730.193";
      charSequenceArray0[1] = (CharSequence) "aX-1.0x-412.24x1.0x-2592.4207x-2730.193aX-1.0x-412.24x1.0x-2592.4207x-2730.193aX-1.0x-412.24x1.0x-2592.4207x-2730.193-1.0x-412.24x1.0x-2592.4207x-2730.193";
      boolean boolean0 = StringUtils.equalsAnyIgnoreCase("nt aX-1.0x-412.24x1.0x-2592.4207x-2730.193aX-1.0x-412.24x1.0x-2592.4207x-2730.193aX-1.0x-412.24x1.0x-2592.4207x-2730.193-1.0x-412.24x1.0x-2592.4207x-2730.193nt ", charSequenceArray0);
      assertEquals(2, charSequenceArray0.length);
      assertFalse(boolean0);
      
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = false;
      booleanArray0[2] = false;
      int int0 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      String[] stringArray0 = StringUtils.splitByCharacterType("nt aX-1.0x-412.24x1.0x-2592.4207x-2730.193aX-1.0x-412.24x1.0x-2592.4207x-2730.193aX-1.0x-412.24x1.0x-2592.4207x-2730.193-1.0x-412.24x1.0x-2592.4207x-2730.193nt ");
      assertEquals(102, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string1 = StringUtils.getCommonPrefix(stringArray0);
      assertFalse(string1.equals((Object)string0));
      assertEquals(102, stringArray0.length);
      assertNotNull(string1);
      assertEquals("", string1);
      
      String string2 = StringUtils.defaultIfBlank("p{InCombiningDiacriticalMarks}+", "T6:|{w=. ");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("p{InCombiningDiacriticalMarks}+", string2);
      
      int int1 = StringUtils.indexOfDifference((CharSequence) "T6:|{w=. ", charSequenceArray0[0]);
      assertFalse(int1 == int0);
      assertEquals(2, charSequenceArray0.length);
      assertEquals(0, int1);
      
      int int2 = StringUtils.indexOfIgnoreCase((CharSequence) "aX-1.0x-412.24x1.0x-2592.4207x-2730.193aX-1.0x-412.24x1.0x-2592.4207x-2730.193aX-1.0x-412.24x1.0x-2592.4207x-2730.193-1.0x-412.24x1.0x-2592.4207x-2730.193", (CharSequence) "p{InCombiningDiacriticalMarks}+", (-3));
      assertFalse(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals((-1), int2);
      
      String string3 = StringUtils.normalizeSpace(", Length: ");
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      assertEquals(", Length:", string3);
      
      String string4 = StringUtils.lowerCase(", Length: ");
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertNotNull(string4);
      assertEquals(", length: ", string4);
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      Locale locale0 = Locale.GERMANY;
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("DE", locale0.getCountry());
      assertEquals("de", locale0.getLanguage());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("de_DE", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertNotNull(locale0);
      
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("DE", locale0.getCountry());
      assertEquals("de", locale0.getLanguage());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("de_DE", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertNotNull(set0);
      
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.EXTENDED_FILTERING;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) arrayList0, (Collection<String>) set0, locale_FilteringMode0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("DE", locale0.getCountry());
      assertEquals("de", locale0.getLanguage());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("de_DE", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
      
      String string0 = StringUtils.substringAfter("\n", 598);
      assertNotNull(string0);
      assertEquals("", string0);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) 0;
      boolean boolean0 = StringUtils.containsIgnoreCase("\r", " ");
      assertFalse(boolean0);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) " ", (CharSequence) "\r");
      assertEquals((-1), int0);
      
      int int1 = StringUtils.indexOf((CharSequence) "\n", 32, 598);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      String[] stringArray0 = StringUtils.splitByCharacterType("\r");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string1 = StringUtils.getCommonPrefix(stringArray0);
      assertFalse(string1.equals((Object)string0));
      assertEquals(1, stringArray0.length);
      assertNotNull(string1);
      assertEquals("\r", string1);
      
      String string2 = StringUtils.defaultIfBlank(" ", "");
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("", string2);
      
      int int2 = StringUtils.indexOfDifference((CharSequence) "", (CharSequence) "\r");
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(0, int2);
      
      int int3 = StringUtils.indexOfIgnoreCase((CharSequence) "", (CharSequence) "\r", 11);
      assertTrue(int3 == int1);
      assertTrue(int3 == int0);
      assertFalse(int3 == int2);
      assertEquals((-1), int3);
      
      String string3 = StringUtils.normalizeSpace("\r");
      assertTrue(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      assertEquals("", string3);
      
      boolean boolean1 = StringUtils.endsWithAny("", stringArray0);
      assertTrue(boolean1 == boolean0);
      assertEquals(1, stringArray0.length);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      String string0 = StringUtils.difference("", "");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.normalizeSpace("");
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[6];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "";
      charSequenceArray0[2] = (CharSequence) "";
      charSequenceArray0[3] = (CharSequence) "";
      charSequenceArray0[4] = (CharSequence) "";
      charSequenceArray0[5] = (CharSequence) "";
      boolean boolean0 = StringUtils.isAllEmpty(charSequenceArray0);
      assertEquals(6, charSequenceArray0.length);
      assertTrue(boolean0);
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = 711.9006F;
      floatArray0[1] = (-1265.1405F);
      floatArray0[2] = 0.0F;
      floatArray0[3] = (-1.0F);
      floatArray0[4] = 0.0F;
      floatArray0[5] = 4988.4175F;
      floatArray0[6] = 3980.7625F;
      floatArray0[7] = 0.0F;
      String string2 = StringUtils.join(floatArray0, 'q', 64, 12);
      assertTrue(string2.equals((Object)string1));
      assertEquals(8, floatArray0.length);
      assertNotNull(string2);
      assertArrayEquals(new float[] {711.9006F, (-1265.1405F), 0.0F, (-1.0F), 0.0F, 4988.4175F, 3980.7625F, 0.0F}, floatArray0, 0.01F);
      assertEquals("", string2);
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      String string0 = StringUtils.trimToEmpty(":W3vjMB@");
      assertNotNull(string0);
      assertEquals(":W3vjMB@", string0);
      
      String string1 = StringUtils.LF;
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("\n", string1);
      
      String string2 = StringUtils.removeEnd("\n", "g{J.B6[Bmhg<");
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("\n", string2);
      
      String string3 = StringUtils.replaceIgnoreCase("clonecloneThreshold must not be negative", "org.apache.com", "org.apache.commons.lang3.Charsets", (-904));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      assertEquals("clonecloneThreshold must not be negative", string3);
      
      String string4 = StringUtils.capitalize("N@~}");
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertNotNull(string4);
      assertEquals("N@~}", string4);
      
      String string5 = StringUtils.chomp((String) null);
      assertNull(string5);
      
      String string6 = StringUtils.wrap((String) null, "<D");
      assertNull(string6);
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      String string0 = StringUtils.substringAfterLast("Supplied value must be a valid byte literal between -128 and 127: [", "Supplied value must be a valid byte literal between -128 and 127: [");
      assertNotNull(string0);
      assertEquals("", string0);
      
      char[] charArray0 = new char[3];
      charArray0[0] = '@';
      charArray0[1] = 'a';
      charArray0[0] = '$';
      boolean boolean0 = StringUtils.containsAny((CharSequence) "", charArray0);
      assertEquals(3, charArray0.length);
      assertArrayEquals(new char[] {'$', 'a', '\u0000'}, charArray0);
      assertFalse(boolean0);
      
      String string1 = StringUtils.deleteWhitespace("");
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
      
      int[] intArray0 = new int[9];
      intArray0[0] = (int) 'a';
      intArray0[1] = 2319;
      intArray0[2] = (int) '$';
      intArray0[3] = (int) '$';
      intArray0[4] = 0;
      intArray0[6] = (int) '.';
      intArray0[7] = (int) '.';
      intArray0[8] = (int) '$';
      String string2 = StringUtils.join(intArray0, 'a');
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals(9, intArray0.length);
      assertNotNull(string2);
      assertArrayEquals(new int[] {97, 2319, 36, 36, 0, 0, 46, 46, 36}, intArray0);
      assertEquals("97a2319a36a36a0a0a46a46a36", string2);
      
      int int0 = StringUtils.indexOf((CharSequence) "", (CharSequence) "", 127);
      assertEquals(0, int0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[8];
      charSequenceArray0[0] = (CharSequence) "";
      String string3 = StringUtils.wrap("", "Z");
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string1));
      assertNotNull(string3);
      assertEquals("", string3);
      
      charSequenceArray0[1] = (CharSequence) "";
      charSequenceArray0[2] = (CharSequence) "Supplied value must be a valid byte literal between -128 and 127: [";
      charSequenceArray0[3] = (CharSequence) "";
      charSequenceArray0[4] = (CharSequence) " ";
      charSequenceArray0[5] = (CharSequence) " ";
      charSequenceArray0[6] = (CharSequence) "";
      charSequenceArray0[7] = (CharSequence) "Supplied value must be a valid byte literal between -128 and 127: [";
      String string4 = StringUtils.prependIfMissing(" ", "", charSequenceArray0);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertEquals(8, charSequenceArray0.length);
      assertNotNull(string4);
      assertEquals(" ", string4);
      
      boolean boolean1 = StringUtils.contains((CharSequence) " ", 0);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = 'Q';
      String string0 = StringUtils.chomp("nt ");
      assertNotNull(string0);
      assertEquals("nt ", string0);
      
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "nt ", charArray0);
      assertEquals(6, charArray0.length);
      assertArrayEquals(new char[] {'Q', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(0, int0);
      
      int int1 = StringUtils.getLevenshteinDistance((CharSequence) "nt ", (CharSequence) "nt ");
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      
      String string1 = StringUtils.normalizeSpace(">6^n$~R+hn-! G");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(">6^n$~R+hn-! G", string1);
      
      String string2 = StringUtils.wrapIfMissing("-5y1iX{EX`M@KK#[b", '!');
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("!-5y1iX{EX`M@KK#[b!", string2);
      
      boolean boolean0 = StringUtils.containsNone((CharSequence) ">6^n$~R+hn-! G", "nt ");
      assertFalse(boolean0);
      
      int int2 = StringUtils.indexOfAnyBut((CharSequence) "!-5y1iX{EX`M@KK#[b!", (CharSequence) "-5y1iX{EX`M@KK#[b");
      assertTrue(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals(0, int2);
      
      String string3 = StringUtils.substringAfter((String) null, "!-5y1iX{EX`M@KK#[b!");
      assertNull(string3);
      
      int int3 = StringUtils.indexOf((CharSequence) "-5y1iX{EX`M@KK#[b", (CharSequence) null);
      assertFalse(int3 == int0);
      assertFalse(int3 == int1);
      assertFalse(int3 == int2);
      assertEquals((-1), int3);
      
      Charset charset0 = Charset.defaultCharset();
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.name());
      assertNotNull(charset0);
      
      String string4 = StringUtils.normalizeSpace(">6^n$~R+hn-! G");
      assertTrue(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertNotNull(string4);
      assertEquals(">6^n$~R+hn-! G", string4);
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      String string0 = StringUtils.stripAccents("");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.wrap(" is not in the range '0' - '9'", '3');
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("3 is not in the range '0' - '9'3", string1);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-95);
      byteArray0[1] = (byte) (-117);
      Charset charset0 = Charset.defaultCharset();
      assertEquals("UTF-8", charset0.toString());
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.name());
      assertTrue(charset0.isRegistered());
      assertNotNull(charset0);
      
      String string2 = StringUtils.toEncodedString(byteArray0, charset0);
      assertEquals("UTF-8", charset0.toString());
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.name());
      assertTrue(charset0.isRegistered());
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals(2, byteArray0.length);
      assertNotNull(string2);
      assertArrayEquals(new byte[] {(byte) (-95), (byte) (-117)}, byteArray0);
      assertEquals("\uFFFD\uFFFD", string2);
      
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) " is not in the range '0' - '9'";
      charSequenceArray0[2] = (CharSequence) "\uFFFD\uFFFD";
      charSequenceArray0[3] = (CharSequence) "zGiqL%uA|";
      charSequenceArray0[4] = (CharSequence) " is not in the range '0' - '9'";
      boolean boolean0 = StringUtils.equalsAny("\uFFFD\uFFFD", charSequenceArray0);
      assertEquals(5, charSequenceArray0.length);
      assertTrue(boolean0);
      
      int int0 = StringUtils.indexOfIgnoreCase(charSequenceArray0[0], (CharSequence) " is not in the range '0' - '9'", 2995);
      assertEquals(5, charSequenceArray0.length);
      assertEquals((-1), int0);
      
      String string3 = StringUtils.substringAfter((String) null, "3 is not in the range '0' - '9'3");
      assertNull(string3);
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      int int0 = StringUtils.compareIgnoreCase("=`%d=7wr7,/{8`", "Z");
      assertEquals((-61), int0);
      
      String string0 = StringUtils.strip("=`%d=7wr7,/{8`", "ghhfOQ!a{@M#22");
      assertNotNull(string0);
      assertEquals("=`%d=7wr7,/{8`", string0);
      
      boolean boolean0 = StringUtils.isNumericSpace("=`%d=7wr7,/{8`");
      assertFalse(boolean0);
      
      String string1 = StringUtils.rightPad("ghhfOQ!a{@M#22", 10);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("ghhfOQ!a{@M#22", string1);
      
      Locale locale0 = Locale.ENGLISH;
      assertEquals("", locale0.getCountry());
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      assertNotNull(locale0);
      
      String string2 = StringUtils.lowerCase("=`%d=7wr7,/{8`", locale0);
      assertEquals("", locale0.getCountry());
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("=`%d=7wr7,/{8`", string2);
      
      int int1 = StringUtils.INDEX_NOT_FOUND;
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      char char0 = '$';
      char[] charArray0 = new char[5];
      charArray0[0] = '$';
      String string0 = StringUtils.rightPad("kb>K:%lR&M+Fm2*/78", 8192, 'p');
      assertNotNull(string0);
      
      int int0 = (-182);
      String string1 = StringUtils.substring(string0, (-182));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("pppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppp", string1);
      
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) "kb>K:%lR&M+Fm2*/78";
      objectArray0[1] = (Object) string0;
      objectArray0[2] = (Object) "kb>K:%lR&M+Fm2*/78";
      objectArray0[3] = (Object) '$';
      objectArray0[4] = (Object) "kb>K:%lR&M+Fm2*/78";
      objectArray0[5] = (Object) string0;
      objectArray0[6] = (Object) '$';
      objectArray0[7] = (Object) '$';
      int int1 = StringUtils.indexOfAny((CharSequence) string0, "kb>K:%lR&M+Fm2*/78");
      assertFalse(string0.equals((Object)string1));
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[0] = (CharSequence) string0;
      charSequenceArray0[1] = (CharSequence) string0;
      boolean boolean0 = StringUtils.equalsAny("kb>K:%lR&M+Fm2*/78", charSequenceArray0);
      assertEquals(2, charSequenceArray0.length);
      assertFalse(boolean0);
      
      // Undeclared exception!
      StringUtils.getJaroWinklerDistance(string0, string0);
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      String[] stringArray0 = StringUtils.split("9Y`]eiW^{x@Rl", "9Y`]eiW^{x@Rl", 3);
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string0 = StringUtils.prependIfMissingIgnoreCase("W", "W", stringArray0);
      assertEquals(0, stringArray0.length);
      assertNotNull(string0);
      assertEquals("W", string0);
      
      String[] stringArray1 = StringUtils.splitByWholeSeparator("W", "x[BEyAx", 3);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray1, stringArray0);
      assertEquals(1, stringArray1.length);
      assertNotNull(stringArray1);
      
      int int0 = StringUtils.compareIgnoreCase("@]^gMrky|`c/", "W", true);
      assertEquals((-55), int0);
      
      boolean boolean0 = StringUtils.isAsciiPrintable("x[BEyAx");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = 'Q';
      charArray0[1] = 'O';
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      boolean boolean0 = linkedList0.offerFirst("B5o>k<P.S~");
      assertEquals(1, linkedList0.size());
      assertTrue(linkedList0.contains("B5o>k<P.S~"));
      assertTrue(boolean0);
      
      LinkedList<String> linkedList1 = new LinkedList<String>();
      assertEquals(0, linkedList1.size());
      assertFalse(linkedList1.equals((Object)linkedList0));
      assertNotNull(linkedList1);
      assertFalse(linkedList1.contains("B5o>k<P.S~"));
      
      String string0 = linkedList1.pollFirst();
      assertEquals(0, linkedList1.size());
      assertFalse(linkedList1.equals((Object)linkedList0));
      assertNotSame(linkedList1, linkedList0);
      assertNull(string0);
      assertFalse(linkedList1.contains("B5o>k<P.S~"));
      
      String string1 = linkedList0.pollFirst();
      assertEquals(0, linkedList0.size());
      assertTrue(linkedList0.equals((Object)linkedList1));
      assertNotSame(linkedList0, linkedList1);
      assertNotNull(string1);
      assertFalse(linkedList0.contains("B5o>k<P.S~"));
      assertEquals("B5o>k<P.S~", string1);
      
      String string2 = StringUtils.join((List<?>) linkedList1, 'Q', 337, 16);
      assertEquals(0, linkedList1.size());
      assertTrue(linkedList1.equals((Object)linkedList0));
      assertFalse(string2.equals((Object)string1));
      assertNotSame(linkedList1, linkedList0);
      assertNotNull(string2);
      assertFalse(linkedList1.contains("B5o>k<P.S~"));
      assertEquals("", string2);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      String string3 = StringUtils.leftPad((String) null, 16, "B5o>k<P.S~");
      assertNull(string3);
      
      int int0 = StringUtils.indexOf((CharSequence) null, 107);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short)2127;
      String string0 = StringUtils.leftPad((String) null, (int) (short)2127, (String) null);
      assertNull(string0);
      
      int int0 = StringUtils.indexOf((CharSequence) null, 51);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      Locale locale0 = Locale.GERMANY;
      assertEquals("de_DE", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("DE", locale0.getCountry());
      assertEquals("de", locale0.getLanguage());
      assertNotNull(locale0);
      
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      assertEquals("de_DE", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("DE", locale0.getCountry());
      assertEquals("de", locale0.getLanguage());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertNotNull(set0);
      
      byte[] byteArray0 = new byte[0];
      String string0 = StringUtils.join(byteArray0, 's', (-1), (-1));
      assertEquals(0, byteArray0.length);
      assertNotNull(string0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals("", string0);
      
      int int0 = StringUtils.lastOrdinalIndexOf("", "", (-1));
      assertEquals((-1), int0);
      
      Object[] objectArray0 = new Object[4];
      objectArray0[2] = (Object) stringUtils0;
      String string1 = StringUtils.join(objectArray0, "\r");
      assertFalse(string1.equals((Object)string0));
      assertEquals(4, objectArray0.length);
      assertNotNull(string1);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("", 's');
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string2 = StringUtils.getCommonPrefix(stringArray0);
      assertFalse(string2.equals((Object)string1));
      assertEquals(0, stringArray0.length);
      assertNotNull(string2);
      assertEquals("", string2);
      
      String string3 = StringUtils.leftPad("", (-561));
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string0));
      assertNotNull(string3);
      assertEquals("", string3);
      
      String string4 = StringUtils.chop(" ");
      assertFalse(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string3));
      assertNotNull(string4);
      assertEquals("", string4);
      
      String string5 = StringUtils.repeat("", "", 3);
      assertTrue(string5.equals((Object)string4));
      assertTrue(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertTrue(string5.equals((Object)string3));
      assertTrue(string5.equals((Object)string2));
      assertNotNull(string5);
      assertEquals("", string5);
      
      String string6 = StringUtils.upperCase(" ", (Locale) null);
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string3));
      assertNotNull(string6);
      assertEquals(" ", string6);
      
      boolean boolean0 = StringUtils.isAnyEmpty(stringArray0);
      assertEquals(0, stringArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      String string0 = StringUtils.LF;
      assertNotNull(string0);
      assertEquals("\n", string0);
      
      int int0 = StringUtils.indexOfDifference((CharSequence) "\n", (CharSequence) "\n");
      assertEquals((-1), int0);
      
      String[] stringArray0 = StringUtils.split("\n", "");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      int int1 = StringUtils.indexOf((CharSequence) "", 3027);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      String string1 = StringUtils.deleteWhitespace("\n");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
      
      boolean boolean0 = StringUtils.isAlphaSpace("\n");
      assertFalse(boolean0);
      
      String[] stringArray1 = StringUtils.splitPreserveAllTokens("\n", 'b');
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray1, stringArray0);
      assertEquals(1, stringArray1.length);
      assertNotNull(stringArray1);
      
      String string2 = StringUtils.getCommonPrefix(stringArray1);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertNotSame(stringArray1, stringArray0);
      assertEquals(1, stringArray1.length);
      assertNotNull(string2);
      assertEquals("\n", string2);
      
      int int2 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "\n", (CharSequence) "", 2011);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(1, int2);
      
      boolean boolean1 = StringUtils.containsIgnoreCase("", "");
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String[] stringArray2 = StringUtils.stripAll(stringArray1, "...");
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertFalse(stringArray2.equals((Object)stringArray1));
      assertNotSame(stringArray1, stringArray2);
      assertNotSame(stringArray1, stringArray0);
      assertNotSame(stringArray2, stringArray0);
      assertNotSame(stringArray2, stringArray1);
      assertEquals(1, stringArray1.length);
      assertEquals(1, stringArray2.length);
      assertNotNull(stringArray2);
      
      String string3 = StringUtils.chomp("Threshold must not be negative");
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      assertEquals("Threshold must not be negative", string3);
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      String string0 = StringUtils.remove("P.ikGNWDF", "2I@uQsj3(");
      assertNotNull(string0);
      assertEquals("P.ikGNWDF", string0);
      
      String string1 = StringUtils.join((int[]) null, '\\');
      assertNull(string1);
      
      int int0 = StringUtils.compare("2I@uQsj3(", "s%rWx$kaSIdQB,x%$';", true);
      assertEquals((-65), int0);
      
      CharSequence charSequence0 = StringUtils.firstNonEmpty((CharSequence[]) null);
      assertNull(charSequence0);
      
      String string2 = StringUtils.appendIfMissing("&,Jh*Kj", "^R#", (CharSequence[]) null);
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("&,Jh*Kj^R#", string2);
      
      int int1 = StringUtils.lastIndexOf((CharSequence) "2I@uQsj3(", 15, 15);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      String string3 = StringUtils.substringBeforeLast("!j{T%OM\"P,", "P.ikGNWDF");
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      assertEquals("!j{T%OM\"P,", string3);
      
      String string4 = StringUtils.mid("7Xv7OT,v", (-65), 4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertNotNull(string4);
      assertEquals("7Xv7", string4);
      
      String string5 = StringUtils.rightPad("!j{T%OM\"P,", (-65), 'f');
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertTrue(string5.equals((Object)string3));
      assertNotNull(string5);
      assertEquals("!j{T%OM\"P,", string5);
      
      String string6 = StringUtils.wrap("J>", (String) null);
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string4));
      assertNotNull(string6);
      assertEquals("J>", string6);
      
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier0).get();
      String string7 = StringUtils.getIfEmpty((String) null, supplier0);
      assertNull(string7);
      
      int int2 = StringUtils.indexOf((CharSequence) "7Xv7OT,v", (CharSequence) "7Xv7");
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(0, int2);
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      String string0 = StringUtils.abbreviate("x[BEyAx", 5);
      assertNotNull(string0);
      assertEquals("x[...", string0);
      
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) true;
      objectArray0[2] = (Object) true;
      objectArray0[3] = (Object) "x[...";
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[4] = object0;
      objectArray0[5] = (Object) true;
      objectArray0[6] = (Object) true;
      String string1 = StringUtils.defaultString("Locale must not be null", "x[...");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("Locale must not be null", string1);
      
      String string2 = StringUtils.wrapIfMissing("x[BEyAxx[BEyAx", "x[...");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("x[...x[BEyAxx[BEyAxx[...", string2);
      
      String string3 = StringUtils.substringAfter((String) null, 122);
      assertNull(string3);
      
      String string4 = StringUtils.truncate("x[...x[BEyAxx[BEyAxx[...", 5);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string0));
      assertNotNull(string4);
      assertEquals("x[...", string4);
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      String string0 = StringUtils.wrapIfMissing("%d=7wr7,/{8", '`');
      assertNotNull(string0);
      assertEquals("`%d=7wr7,/{8`", string0);
      
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) "p43zIfPE>T";
      objectArray0[1] = (Object) "%d=7wr7,/{8";
      objectArray0[2] = (Object) "%d=7wr7,/{8";
      objectArray0[3] = (Object) "p43zIfPE>T";
      objectArray0[4] = (Object) "`%d=7wr7,/{8`";
      objectArray0[5] = (Object) "%d=7wr7,/{8";
      objectArray0[6] = (Object) "%d=7wr7,/{8";
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[7] = object0;
      String string1 = StringUtils.join(objectArray0, "|'3>m", 559, 559);
      assertFalse(string1.equals((Object)string0));
      assertEquals(8, objectArray0.length);
      assertNotNull(string1);
      assertEquals("", string1);
      
      String string2 = StringUtils.overlay("c8luy&", "%d=7wr7,/{8", 473, (-505));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("%d=7wr7,/{8", string2);
      
      String string3 = StringUtils.leftPad("", 473, '`');
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      assertEquals("`````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````", string3);
      
      boolean boolean0 = StringUtils.startsWith("`````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````", "c8luy&");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      String string0 = StringUtils.wrapIfMissing("aX-1.0x-412.24x1.0x-2592.4207x-2730.193aX-1.0x-412.24x1.0x-2592.4207x-2730.193aX-1.0x-412.24x1.0x-2592.4207x-2730.193-1.0x-412.24x1.0x-2592.4207x-2730.193", "nt ");
      assertNotNull(string0);
      assertEquals("nt aX-1.0x-412.24x1.0x-2592.4207x-2730.193aX-1.0x-412.24x1.0x-2592.4207x-2730.193aX-1.0x-412.24x1.0x-2592.4207x-2730.193-1.0x-412.24x1.0x-2592.4207x-2730.193nt ", string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[0] = (CharSequence) "aX-1.0x-412.24x1.0x-2592.4207x-2730.193aX-1.0x-412.24x1.0x-2592.4207x-2730.193aX-1.0x-412.24x1.0x-2592.4207x-2730.193-1.0x-412.24x1.0x-2592.4207x-2730.193";
      charSequenceArray0[1] = (CharSequence) "aX-1.0x-412.24x1.0x-2592.4207x-2730.193aX-1.0x-412.24x1.0x-2592.4207x-2730.193aX-1.0x-412.24x1.0x-2592.4207x-2730.193-1.0x-412.24x1.0x-2592.4207x-2730.193";
      boolean boolean0 = StringUtils.equalsAnyIgnoreCase("nt aX-1.0x-412.24x1.0x-2592.4207x-2730.193aX-1.0x-412.24x1.0x-2592.4207x-2730.193aX-1.0x-412.24x1.0x-2592.4207x-2730.193-1.0x-412.24x1.0x-2592.4207x-2730.193nt ", charSequenceArray0);
      assertEquals(2, charSequenceArray0.length);
      assertFalse(boolean0);
      
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      int int0 = StringUtils.indexOfAny((CharSequence) "nt aX-1.0x-412.24x1.0x-2592.4207x-2730.193aX-1.0x-412.24x1.0x-2592.4207x-2730.193aX-1.0x-412.24x1.0x-2592.4207x-2730.193-1.0x-412.24x1.0x-2592.4207x-2730.193nt ", "Cannot clone Cloneable type ");
      assertEquals(0, int0);
      
      String string1 = StringUtils.overlay("T6:|{w=. ", (String) null, 0, 1574);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      String[] stringArray0 = StringUtils.split("object", "9Y`]eiW^{x@Rl", 3);
      assertEquals(2, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string0 = StringUtils.prependIfMissingIgnoreCase("-5y1iX{EX`M@KK#[b", "-5y1iX{EX`M@KK#[b", stringArray0);
      assertEquals(2, stringArray0.length);
      assertNotNull(string0);
      assertEquals("-5y1iX{EX`M@KK#[b", string0);
      
      String string1 = StringUtils.lowerCase("-5y1iX{EX`M@KK#[b");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("-5y1ix{ex`m@kk#[b", string1);
      
      String[] stringArray1 = StringUtils.splitByWholeSeparator("-5y1ix{ex`m@kk#[b", "x[BEyAx", 3);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray1, stringArray0);
      assertEquals(1, stringArray1.length);
      assertNotNull(stringArray1);
      
      int[] intArray0 = new int[8];
      intArray0[1] = 3;
      String string2 = StringUtils.wrapIfMissing("9", "-5y1iX{EX`M@KK#[b");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("-5y1iX{EX`M@KK#[b9-5y1iX{EX`M@KK#[b", string2);
      
      String string3 = StringUtils.substringAfter("-5y1iX{EX`M@KK#[b", 438);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      assertEquals("", string3);
      
      String string4 = StringUtils.rightPad("6.Q(f`(H2", 438, '+');
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertNotNull(string4);
      assertEquals("6.Q(f`(H2+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++", string4);
      
      String string5 = StringUtils.substring("", 3);
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertNotNull(string5);
      assertEquals("", string5);
      
      String string6 = StringUtils.join((Object[]) stringArray1, ',', 2783, Integer.MIN_VALUE);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string1));
      assertTrue(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string2));
      assertTrue(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string0));
      assertNotSame(stringArray1, stringArray0);
      assertEquals(1, stringArray1.length);
      assertNotNull(string6);
      assertEquals("", string6);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      String string7 = StringUtils.join((Object[]) stringArray1, '+', 1806, 718);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string4));
      assertTrue(string7.equals((Object)string6));
      assertNotSame(stringArray1, stringArray0);
      assertEquals(1, stringArray1.length);
      assertNotNull(string7);
      assertEquals("", string7);
      
      short[] shortArray0 = new short[0];
      String string8 = StringUtils.join(shortArray0, 'G');
      assertTrue(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string4));
      assertEquals(0, shortArray0.length);
      assertNotNull(string8);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals("", string8);
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      CharSequence charSequence0 = StringUtils.firstNonEmpty(charSequenceArray0);
      assertEquals(0, charSequenceArray0.length);
      assertNull(charSequence0);
      
      String string0 = StringUtils.swapCase("");
      assertNotNull(string0);
      assertEquals("", string0);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "kb>K:%lR&M+Fm2*/78", (CharSequence) null);
      assertEquals((-1), int0);
      
      String string1 = StringUtils.stripEnd(")!1XjMA#y,~aU", "");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(")!1XjMA#y,~aU", string1);
      
      int int1 = StringUtils.lastIndexOf((CharSequence) ")!1XjMA#y,~aU", 362, (-1));
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      String string2 = StringUtils.substringBeforeLast("kb>K:%lR&M+Fm2*/78", "kb>K:%lR&M+Fm2*/78");
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("", string2);
      
      String string3 = StringUtils.mid("", 64, 11);
      assertTrue(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      assertEquals("", string3);
      
      String string4 = StringUtils.defaultString("kb>K:%lR&M+Fm2*/78");
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertNotNull(string4);
      assertEquals("kb>K:%lR&M+Fm2*/78", string4);
      
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) 256;
      floatArray0[1] = (float) (-1);
      floatArray0[3] = (float) (-5927);
      floatArray0[3] = (float) (-5927);
      floatArray0[4] = (float) 256;
      floatArray0[5] = (float) 0;
      floatArray0[6] = (float) 362;
      floatArray0[7] = (float) 64;
      floatArray0[8] = (float) 256;
      String string5 = StringUtils.join(floatArray0, '>', 1980, (-1));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertTrue(string5.equals((Object)string2));
      assertTrue(string5.equals((Object)string0));
      assertEquals(9, floatArray0.length);
      assertNotNull(string5);
      assertArrayEquals(new float[] {256.0F, (-1.0F), 0.0F, (-5927.0F), 256.0F, 0.0F, 362.0F, 64.0F, 256.0F}, floatArray0, 0.01F);
      assertEquals("", string5);
      
      String string6 = StringUtils.abbreviate("kb>K:%lR&M+Fm2*/78", "", (-674), 256);
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string2));
      assertTrue(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string0));
      assertNotNull(string6);
      assertEquals("kb>K:%lR&M+Fm2*/78", string6);
      
      int int2 = StringUtils.compareIgnoreCase("kb>K:%lR&M+Fm2*/78", ")!1XjMA#y,~aU");
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(66, int2);
      
      int int3 = StringUtils.indexOf((CharSequence) "", (-674));
      assertFalse(int3 == int2);
      assertTrue(int3 == int1);
      assertTrue(int3 == int0);
      assertEquals((-1), int3);
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      String string0 = StringUtils.wrapIfMissing("%d=7wr7,/{8", '?');
      assertNotNull(string0);
      assertEquals("?%d=7wr7,/{8?", string0);
      
      String string1 = StringUtils.rightPad("rp$f", (-3760));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("rp$f", string1);
      
      int int0 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      boolean boolean0 = StringUtils.isWhitespace("rp$f");
      assertFalse(boolean0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[7];
      charSequenceArray0[0] = (CharSequence) "rp$f";
      charSequenceArray0[1] = (CharSequence) "?%d=7wr7,/{8?";
      charSequenceArray0[3] = (CharSequence) "%d=7wr7,/{8";
      charSequenceArray0[4] = (CharSequence) "rp$f";
      charSequenceArray0[5] = (CharSequence) "?%d=7wr7,/{8?";
      charSequenceArray0[6] = (CharSequence) "rp$f";
      String string2 = StringUtils.rightPad("\n", 1828, "?%d=7wr7,/{8?");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      String string3 = StringUtils.join((Object[]) charSequenceArray0, "q@F!X#Ug_t@");
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals(7, charSequenceArray0.length);
      assertNotNull(string3);
      assertEquals("rp$fq@F!X#Ug_t@?%d=7wr7,/{8?q@F!X#Ug_t@q@F!X#Ug_t@%d=7wr7,/{8q@F!X#Ug_t@rp$fq@F!X#Ug_t@?%d=7wr7,/{8?q@F!X#Ug_t@rp$f", string3);
      
      boolean boolean1 = StringUtils.isAllLowerCase(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string1));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = StringUtils.isAlphanumericSpace("\n");
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      String string4 = StringUtils.defaultIfEmpty("\n", "k)9n1!d,w");
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertNotNull(string4);
      assertEquals("\n", string4);
      
      boolean boolean3 = StringUtils.isMixedCase("%d=7wr7,/{8");
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3);
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      String string0 = StringUtils.join(objectArray0);
      assertEquals(1, objectArray0.length);
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.abbreviate("Ut,,CR2ngAk~Qb*_xA<", 2147483645);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("Ut,,CR2ngAk~Qb*_xA<", string1);
      
      String string2 = StringUtils.removeEndIgnoreCase("", "^z2KG");
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("", string2);
      
      String string3 = StringUtils.defaultIfBlank("", "*8p^j4aHG");
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      assertEquals("*8p^j4aHG", string3);
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("q@F!X#Ug_t@", "(Ad{JKOkvP]^ry2!*~", (-1));
      assertEquals(2, stringArray0.length);
      assertNotNull(stringArray0);
      
      boolean boolean0 = StringUtils.containsIgnoreCase("(Ad{JKOkvP]^ry2!*~", "q@F!X#Ug_t@");
      assertFalse(boolean0);
      
      String string0 = StringUtils.chomp("R(<C", "q@F!X#Ug_t@");
      assertNotNull(string0);
      assertEquals("R(<C", string0);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "R(<C", (CharSequence) "R(<C");
      assertEquals(0, int0);
      
      int int1 = StringUtils.indexOf((CharSequence) "q@F!X#Ug_t@", 0, 0);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      String[] stringArray1 = StringUtils.splitByCharacterType("uYa'*po!d9_");
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray1, stringArray0);
      assertEquals(9, stringArray1.length);
      assertNotNull(stringArray1);
      
      String string1 = StringUtils.getCommonPrefix(stringArray1);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(stringArray1, stringArray0);
      assertEquals(9, stringArray1.length);
      assertNotNull(string1);
      assertEquals("", string1);
      
      String string2 = StringUtils.leftPad("q@F!X#Ug_t@", 12, "q@F!X#Ug_t@");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("q@F!X#Ug_t@", string2);
      
      int int2 = StringUtils.indexOf((CharSequence) "q@F!X#Ug_t@", 0);
      assertFalse(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals((-1), int2);
      
      char[] charArray0 = new char[2];
      charArray0[0] = '{';
      charArray0[1] = '\"';
      boolean boolean1 = StringUtils.containsAny((CharSequence) "R(<C", charArray0);
      assertTrue(boolean1 == boolean0);
      assertEquals(2, charArray0.length);
      assertArrayEquals(new char[] {'{', '\"'}, charArray0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      // Undeclared exception!
      try { 
        StringUtils.abbreviate("Minimum abbreviation width is %d", "Supplied value must be a valid byte literal between -128 and 127: [", (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum abbreviation width is 68
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "The character ";
      charSequenceArray0[2] = (CharSequence) "The character ";
      String[] stringArray0 = StringUtils.splitByWholeSeparator("Threshold must not be negative", "Threshold must not be negative", (-487));
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      int int0 = StringUtils.compareIgnoreCase("S0.$/8C:6V1", (String) null, true);
      assertEquals(1, int0);
      
      boolean boolean0 = StringUtils.isAsciiPrintable("Threshold must not be negative");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      Locale locale0 = Locale.GERMANY;
      assertEquals("", locale0.getVariant());
      assertEquals("de", locale0.getLanguage());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("de_DE", locale0.toString());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("DE", locale0.getCountry());
      assertNotNull(locale0);
      
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      assertEquals("", locale0.getVariant());
      assertEquals("de", locale0.getLanguage());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("de_DE", locale0.toString());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("DE", locale0.getCountry());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertNotNull(set0);
      
      String string0 = StringUtils.substringAfter("\n", 598);
      assertNotNull(string0);
      assertEquals("", string0);
      
      int int0 = StringUtils.length("");
      assertEquals(0, int0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      charSequenceArray0[0] = (CharSequence) "\n";
      charSequenceArray0[1] = (CharSequence) "\n";
      charSequenceArray0[2] = (CharSequence) "";
      double[] doubleArray0 = new double[0];
      String string1 = StringUtils.join(doubleArray0, '<');
      assertEquals(0, doubleArray0.length);
      assertNotNull(string1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals("", string1);
      
      charSequenceArray0[3] = (CharSequence) "";
      charSequenceArray0[4] = (CharSequence) "";
      boolean boolean0 = StringUtils.equalsAny(" ", charSequenceArray0);
      assertEquals(5, charSequenceArray0.length);
      assertFalse(boolean0);
      
      int int1 = StringUtils.compareIgnoreCase(" ", (String) null);
      assertFalse(int1 == int0);
      assertEquals(1, int1);
      
      int[] intArray0 = new int[7];
      intArray0[0] = (int) '<';
      intArray0[1] = 1995;
      intArray0[2] = 0;
      intArray0[3] = Integer.MIN_VALUE;
      intArray0[4] = 598;
      intArray0[5] = 6;
      intArray0[6] = 598;
      String string2 = StringUtils.join(intArray0, '.');
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals(7, intArray0.length);
      assertNotNull(string2);
      assertArrayEquals(new int[] {60, 1995, 0, Integer.MIN_VALUE, 598, 6, 598}, intArray0);
      assertEquals("60.1995.0.-2147483648.598.6.598", string2);
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      String string0 = StringUtils.lowerCase("null/empty items~4&4+2&FA");
      assertNotNull(string0);
      assertEquals("null/empty items~4&4+2&fa", string0);
      
      String string1 = StringUtils.abbreviateMiddle("...", "comparator", 2);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("...", string1);
      
      boolean boolean0 = StringUtils.equalsAny("null/empty items~4&4+2&fa", (CharSequence[]) null);
      assertFalse(boolean0);
      
      int int0 = StringUtils.compareIgnoreCase("...", (String) null, false);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("Array element ", (String) null);
      assertEquals(3, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string0 = StringUtils.deleteWhitespace((String) null);
      assertNull(string0);
      
      Integer[] integerArray0 = new Integer[4];
      Integer integer0 = new Integer((-943));
      assertNotNull(integer0);
      assertEquals((-943), (int)integer0);
      
      integerArray0[0] = integer0;
      String string1 = StringUtils.difference("", "Arguments cannot both be null");
      assertNotNull(string1);
      assertEquals("Arguments cannot both be null", string1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[9];
      charSequenceArray0[0] = (CharSequence) "Arguments cannot both be null";
      String string2 = StringUtils.EMPTY;
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("", string2);
      
      charSequenceArray0[1] = (CharSequence) "";
      charSequenceArray0[2] = (CharSequence) "Array element ";
      String string3 = StringUtils.join((Object[]) stringArray0, "");
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals(3, stringArray0.length);
      assertNotNull(string3);
      assertEquals("Arrayelement", string3);
      
      charSequenceArray0[3] = (CharSequence) "Arrayelement";
      charSequenceArray0[4] = (CharSequence) null;
      charSequenceArray0[5] = (CharSequence) "Arguments cannot both be null";
      charSequenceArray0[6] = (CharSequence) null;
      charSequenceArray0[7] = (CharSequence) null;
      charSequenceArray0[8] = (CharSequence) "";
      boolean boolean0 = StringUtils.isAllBlank(charSequenceArray0);
      assertEquals(9, charSequenceArray0.length);
      assertFalse(boolean0);
      
      String string4 = StringUtils.capitalize("aX-1.0x-412.24x1.0x-2592.4207x-2730.193aX-1.0x-412.24x1.0x-2592.4207x-2730.193aX-1.0x-412.24x1.0x-2592.4207x-2730.193-1.0x-412.24x1.0x-2592.4207x-2730.193nt ");
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertNotNull(string4);
      assertEquals("AX-1.0x-412.24x1.0x-2592.4207x-2730.193aX-1.0x-412.24x1.0x-2592.4207x-2730.193aX-1.0x-412.24x1.0x-2592.4207x-2730.193-1.0x-412.24x1.0x-2592.4207x-2730.193nt ", string4);
      
      boolean boolean1 = StringUtils.isWhitespace("AX-1.0x-412.24x1.0x-2592.4207x-2730.193aX-1.0x-412.24x1.0x-2592.4207x-2730.193aX-1.0x-412.24x1.0x-2592.4207x-2730.193-1.0x-412.24x1.0x-2592.4207x-2730.193nt ");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string5 = StringUtils.center("", 2, 'u');
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertNotNull(string5);
      assertEquals("uu", string5);
      
      String string6 = StringUtils.replaceEach("u-](", stringArray0, stringArray0);
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string1));
      assertEquals(3, stringArray0.length);
      assertNotNull(string6);
      assertEquals("u-](", string6);
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      int int0 = (-1);
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("q@F!X#Ug_t@", "(Ad{JKOkvP]^ry2!*~", (-1));
      assertEquals(2, stringArray0.length);
      assertNotNull(stringArray0);
      
      boolean boolean0 = StringUtils.containsIgnoreCase("(Ad{JKOkvP]^ry2!*~", "q@F!X#Ug_t@");
      assertFalse(boolean0);
      
      String string0 = StringUtils.chomp("=", "q@F!X#Ug_t@");
      assertNotNull(string0);
      assertEquals("=", string0);
      
      int int1 = StringUtils.lastIndexOf((CharSequence) "=", (CharSequence) "=");
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      int int2 = StringUtils.indexOf((CharSequence) "q@F!X#Ug_t@", 0, 0);
      assertFalse(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals((-1), int2);
      
      String[] stringArray1 = StringUtils.splitByCharacterType("uYa'*po!d9_");
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray1, stringArray0);
      assertEquals(9, stringArray1.length);
      assertNotNull(stringArray1);
      
      String string1 = StringUtils.getCommonPrefix(stringArray1);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(stringArray1, stringArray0);
      assertEquals(9, stringArray1.length);
      assertNotNull(string1);
      assertEquals("", string1);
      
      String string2 = StringUtils.defaultIfBlank("uYa'*po!d9_", "");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("uYa'*po!d9_", string2);
      
      String[] stringArray2 = StringUtils.splitByWholeSeparator("=", "", 0);
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertFalse(stringArray2.equals((Object)stringArray1));
      assertNotSame(stringArray2, stringArray0);
      assertNotSame(stringArray2, stringArray1);
      assertEquals(1, stringArray2.length);
      assertNotNull(stringArray2);
      
      int int3 = StringUtils.indexOfDifference((CharSequence) "uYa'*po!d9_", (CharSequence) "(Ad{JKOkvP]^ry2!*~");
      assertTrue(int3 == int1);
      assertFalse(int3 == int0);
      assertFalse(int3 == int2);
      assertEquals(0, int3);
      
      int int4 = StringUtils.indexOfIgnoreCase((CharSequence) "uYa'*po!d9_", (CharSequence) "(Ad{JKOkvP]^ry2!*~", (-3));
      assertTrue(int4 == int2);
      assertFalse(int4 == int1);
      assertTrue(int4 == int0);
      assertFalse(int4 == int3);
      assertEquals((-1), int4);
      
      String string3 = StringUtils.substringAfterLast("uYa'*po!d9_", "(Ad{JKOkvP]^ry2!*~");
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      assertEquals("", string3);
      
      int int5 = StringUtils.indexOfDifference((CharSequence) "=", (CharSequence) "=");
      assertTrue(int5 == int2);
      assertTrue(int5 == int4);
      assertFalse(int5 == int3);
      assertTrue(int5 == int0);
      assertFalse(int5 == int1);
      assertEquals((-1), int5);
      
      byte[] byteArray0 = new byte[0];
      String string4 = StringUtils.reverse("(Ad{JKOkvP]^ry2!*~");
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertNotNull(string4);
      assertEquals("~*!2yr^]PvkOKJ{dA(", string4);
      
      String string5 = StringUtils.getCommonPrefix(stringArray0);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertFalse(stringArray0.equals((Object)stringArray2));
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertNotSame(stringArray0, stringArray2);
      assertNotSame(stringArray0, stringArray1);
      assertEquals(2, stringArray0.length);
      assertNotNull(string5);
      assertEquals("", string5);
      
      boolean boolean1 = StringUtils.isAlphaSpace("=");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      int int6 = StringUtils.compareIgnoreCase("~*!2yr^]PvkOKJ{dA(", "");
      assertFalse(int6 == int0);
      assertFalse(int6 == int5);
      assertFalse(int6 == int2);
      assertFalse(int6 == int3);
      assertFalse(int6 == int4);
      assertFalse(int6 == int1);
      assertEquals(18, int6);
      
      String string6 = StringUtils.uncapitalize("(Ad{JKOkvP]^ry2!*~");
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string1));
      assertNotNull(string6);
      assertEquals("(Ad{JKOkvP]^ry2!*~", string6);
      
      String string7 = "!:w}\"9GI_<";
      // Undeclared exception!
      try { 
        StringUtils.toString(byteArray0, "!:w}\"9GI_<");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // !:w}\"9GI_<
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      Integer integer0 = new Integer((-324));
      assertNotNull(integer0);
      assertEquals((-324), (int)integer0);
      
      Integer integer1 = new Integer((-324));
      assertTrue(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals((-324), (int)integer1);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'U';
      String string0 = StringUtils.substringBetween("6w#yEdv|M/NKamq&Rr", "6w#yEdv|M/NKamq&Rr", "6w#yEdv|M/NKamq&Rr");
      assertNull(string0);
      
      String string1 = StringUtils.getDigits("6w#yEdv|M/NKamq&Rr");
      assertNotNull(string1);
      assertEquals("6", string1);
      
      boolean boolean0 = StringUtils.isBlank((CharSequence) null);
      assertTrue(boolean0);
      
      int int0 = StringUtils.countMatches((CharSequence) "6w#yEdv|M/NKamq&Rr", 'U');
      assertEquals(0, int0);
      
      String string2 = StringUtils.replaceIgnoreCase("vf", "%TOR!<=)jW$e&pyfR^(", "%TOR!<=)jW$e&pyfR^(");
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("vf", string2);
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      Locale locale0 = Locale.GERMANY;
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("DE", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("de", locale0.getLanguage());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("de_DE", locale0.toString());
      assertNotNull(locale0);
      
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("DE", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("de", locale0.getLanguage());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("de_DE", locale0.toString());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertNotNull(set0);
      
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.EXTENDED_FILTERING;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) arrayList0, (Collection<String>) set0, locale_FilteringMode0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("DE", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("de", locale0.getLanguage());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("de_DE", locale0.toString());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
      
      String string0 = StringUtils.substringAfter("\n", 598);
      assertNotNull(string0);
      assertEquals("", string0);
      
      int int0 = StringUtils.length("");
      assertEquals(0, int0);
      
      String string1 = StringUtils.center(" ", 256);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("                                                                                                                                                                                                                                                                ", string1);
      
      String string2 = StringUtils.abbreviate("", "", 77);
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("", string2);
      
      CharSequence[] charSequenceArray0 = new CharSequence[8];
      charSequenceArray0[0] = (CharSequence) "";
      String string3 = StringUtils.lowerCase("", locale0);
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("DE", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("de", locale0.getLanguage());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("de_DE", locale0.toString());
      assertTrue(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      assertEquals("", string3);
      
      charSequenceArray0[1] = (CharSequence) "";
      String[] stringArray0 = new String[4];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "D[sw$u<Cbv ";
      stringArray0[3] = "m>NR4Hv_/iHX";
      String[] stringArray1 = StringUtils.stripAll(stringArray0, (String) null);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray1, stringArray0);
      assertNotSame(stringArray0, stringArray1);
      assertEquals(4, stringArray1.length);
      assertEquals(4, stringArray0.length);
      assertNotNull(stringArray1);
      
      charSequenceArray0[2] = (CharSequence) "";
      charSequenceArray0[3] = (CharSequence) "";
      charSequenceArray0[4] = (CharSequence) "";
      String string4 = StringUtils.stripStart("x[BEyAxx[BEyAx", " ");
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertNotNull(string4);
      assertEquals("x[BEyAxx[BEyAx", string4);
      
      String string5 = StringUtils.strip("N.`;`", "\n");
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertNotNull(string5);
      assertEquals("N.`;`", string5);
      
      PriorityQueue<Integer> priorityQueue0 = new PriorityQueue<Integer>();
      assertEquals(0, priorityQueue0.size());
      assertNotNull(priorityQueue0);
      assertFalse(priorityQueue0.contains(int0));
      
      Iterator<Integer> iterator0 = priorityQueue0.iterator();
      assertEquals(0, priorityQueue0.size());
      assertNotNull(iterator0);
      assertFalse(priorityQueue0.contains(int0));
      
      String string6 = StringUtils.join(iterator0, "x[BEyAxx[BEyAx");
      assertEquals(0, priorityQueue0.size());
      assertTrue(string6.equals((Object)string3));
      assertTrue(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string1));
      assertNotNull(string6);
      assertFalse(priorityQueue0.contains(int0));
      assertEquals("", string6);
      
      String string7 = StringUtils.unwrap("c^2CX~OFj?{M", "");
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string4));
      assertNotNull(string7);
      assertEquals("c^2CX~OFj?{M", string7);
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      boolean boolean0 = StringUtils.containsNone((CharSequence) "\n", "");
      assertTrue(boolean0);
      
      String[] stringArray0 = StringUtils.split("InCex: ", '=');
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string0 = StringUtils.strip("InCex: ");
      assertNotNull(string0);
      assertEquals("InCex:", string0);
      
      String string1 = StringUtils.join((Object[]) stringArray0, '=');
      assertFalse(string1.equals((Object)string0));
      assertEquals(1, stringArray0.length);
      assertNotNull(string1);
      assertEquals("InCex: ", string1);
      
      int int0 = StringUtils.countMatches((CharSequence) "", (CharSequence) "InCex: ");
      assertEquals(0, int0);
      
      String[] stringArray1 = StringUtils.split("<cq37htchH=eXaP?-", '*');
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray1, stringArray0);
      assertEquals(1, stringArray1.length);
      assertNotNull(stringArray1);
      
      try { 
        StringUtils.getBytes("\n", ")m(l");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(UnsupportedEncodingException e) {
      }
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      String string0 = StringUtils.repeat('Q', 16);
      assertNotNull(string0);
      assertEquals("QQQQQQQQQQQQQQQQ", string0);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "QQQQQQQQQQQQQQQQ", 0, 0);
      assertEquals((-1), int0);
      
      boolean boolean0 = StringUtils.equalsIgnoreCase("QQQQQQQQQQQQQQQQ", "QQQQQQQQQQQQQQQQ");
      assertTrue(boolean0);
      
      String string1 = StringUtils.reverse((String) null);
      assertNull(string1);
      
      String string2 = StringUtils.difference("I5N%yz", "Djgc2/qB^,8");
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("Djgc2/qB^,8", string2);
      
      int int1 = StringUtils.indexOfIgnoreCase((CharSequence) "Djgc2/qB^,8", (CharSequence) "Djgc2/qB^,8");
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      String string3 = StringUtils.difference("rK-g<68E`4", "~RI}aG:q5>\"6V @$j");
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      assertEquals("~RI}aG:q5>\"6V @$j", string3);
      
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      charSequenceArray0[0] = (CharSequence) "QQQQQQQQQQQQQQQQ";
      String string4 = StringUtils.strip((String) null, "p8\"9(yE^/&~..6cj");
      assertNull(string4);
      
      charSequenceArray0[1] = (CharSequence) null;
      charSequenceArray0[2] = (CharSequence) "~RI}aG:q5>\"6V @$j";
      charSequenceArray0[3] = (CharSequence) "rK-g<68E`4";
      String string5 = StringUtils.prependIfMissing("I5N%yz", "~RI}aG:q5>\"6V @$j", charSequenceArray0);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertEquals(4, charSequenceArray0.length);
      assertNotNull(string5);
      assertEquals("~RI}aG:q5>\"6V @$jI5N%yz", string5);
      
      boolean boolean1 = StringUtils.endsWith("~RI}aG:q5>\"6V @$jI5N%yz", "~RI}aG:q5>\"6V @$jI5N%yz");
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String string6 = StringUtils.right((String) null, 1258);
      assertNull(string6);
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      String string0 = StringUtils.reverseDelimited("x[BEyAx", 'g');
      assertNotNull(string0);
      assertEquals("x[BEyAx", string0);
      
      String string1 = StringUtils.join((char[]) null, 'T');
      assertNull(string1);
      
      int[] intArray0 = StringUtils.toCodePoints((CharSequence) null);
      assertNull(intArray0);
      
      String string2 = StringUtils.join((Object[]) null, 'g');
      assertNull(string2);
      
      int int0 = StringUtils.indexOfDifference((CharSequence) null, (CharSequence) "x[BEyAx");
      assertEquals(0, int0);
      
      String string3 = StringUtils.defaultString((String) null, "R,A&");
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      assertEquals("R,A&", string3);
      
      String string4 = StringUtils.wrapIfMissing("=`%d=7wr7,/{8`Z", "R,A&");
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertNotNull(string4);
      assertEquals("R,A&=`%d=7wr7,/{8`ZR,A&", string4);
      
      String string5 = StringUtils.substringAfter("The character ", 0);
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertNotNull(string5);
      assertEquals("", string5);
      
      String string6 = StringUtils.truncate("&", 0);
      assertTrue(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string3));
      assertNotNull(string6);
      assertEquals("", string6);
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      String string0 = StringUtils.remove("P.ikGNWDF", "2I@uQsj3(");
      assertNotNull(string0);
      assertEquals("P.ikGNWDF", string0);
      
      int int0 = StringUtils.indexOf((CharSequence) "P.ikGNWDF", (-2272));
      assertEquals((-1), int0);
      
      String string1 = StringUtils.deleteWhitespace("P.ikGNWDF");
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("P.ikGNWDF", string1);
      
      boolean boolean0 = StringUtils.isAlphaSpace("2I@uQsj3(");
      assertFalse(boolean0);
      
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) "2I@uQsj3(";
      objectArray0[1] = (Object) "2I@uQsj3(";
      objectArray0[1] = (Object) "P.ikGNWDF";
      objectArray0[3] = (Object) "P.ikGNWDF";
      String string2 = StringUtils.join(objectArray0, 'h');
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals(4, objectArray0.length);
      assertNotNull(string2);
      assertEquals("2I@uQsj3(hP.ikGNWDFhhP.ikGNWDF", string2);
      
      String string3 = StringUtils.stripAccents("P.ikGNWDF");
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string1));
      assertNotNull(string3);
      assertEquals("P.ikGNWDF", string3);
      
      long[] longArray0 = new long[6];
      longArray0[0] = (long) (-1);
      longArray0[1] = (long) (-2272);
      longArray0[2] = (long) 'h';
      longArray0[3] = (long) (-1);
      longArray0[4] = (long) (-2272);
      longArray0[5] = (long) (-1);
      String string4 = StringUtils.join(longArray0, 'h');
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertEquals(6, longArray0.length);
      assertNotNull(string4);
      assertArrayEquals(new long[] {(-1L), (-2272L), 104L, (-1L), (-2272L), (-1L)}, longArray0);
      assertEquals("-1h-2272h104h-1h-2272h-1", string4);
      
      String string5 = StringUtils.leftPad("-1h-2272h104h-1h-2272h-1", 108, "offset cannot be negative");
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertNotNull(string5);
      assertEquals("offset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset ca-1h-2272h104h-1h-2272h-1", string5);
      
      int int1 = StringUtils.indexOfAnyBut((CharSequence) "2I@uQsj3(", (CharSequence) "offset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset ca-1h-2272h104h-1h-2272h-1");
      assertFalse(int1 == int0);
      assertEquals(1, int1);
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      Locale locale0 = Locale.GERMANY;
      assertEquals("de_DE", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("DE", locale0.getCountry());
      assertEquals("de", locale0.getLanguage());
      assertEquals("DEU", locale0.getISO3Country());
      assertNotNull(locale0);
      
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      assertEquals("de_DE", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("DE", locale0.getCountry());
      assertEquals("de", locale0.getLanguage());
      assertEquals("DEU", locale0.getISO3Country());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertNotNull(set0);
      
      String string0 = StringUtils.substringAfter("\n", 598);
      assertNotNull(string0);
      assertEquals("", string0);
      
      int int0 = StringUtils.length("");
      assertEquals(0, int0);
      
      String string1 = StringUtils.abbreviate("", "", 77);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[6];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "\n";
      charSequenceArray0[2] = (CharSequence) " ";
      charSequenceArray0[3] = (CharSequence) "";
      charSequenceArray0[4] = (CharSequence) "\r";
      String string2 = StringUtils.deleteWhitespace("\n");
      assertTrue(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("", string2);
      
      int int1 = StringUtils.lastIndexOf((CharSequence) "", 256, 0);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      int int2 = StringUtils.ordinalIndexOf("", "", 77);
      assertFalse(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals(0, int2);
      
      String string3 = StringUtils.wrap("}w9khK", "");
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      assertEquals("}w9khK", string3);
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      Locale locale0 = Locale.GERMANY;
      assertEquals("", locale0.getVariant());
      assertEquals("de", locale0.getLanguage());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("DE", locale0.getCountry());
      assertEquals("de_DE", locale0.toString());
      assertNotNull(locale0);
      
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      assertEquals("", locale0.getVariant());
      assertEquals("de", locale0.getLanguage());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("DE", locale0.getCountry());
      assertEquals("de_DE", locale0.toString());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertNotNull(set0);
      
      String string0 = StringUtils.substring("", 598, 598);
      assertNotNull(string0);
      assertEquals("", string0);
      
      int int0 = StringUtils.length("");
      assertEquals(0, int0);
      
      String string1 = StringUtils.abbreviate("", "", 77);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[6];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "\n";
      charSequenceArray0[2] = (CharSequence) " ";
      charSequenceArray0[3] = (CharSequence) "";
      charSequenceArray0[4] = (CharSequence) "\r";
      String string2 = StringUtils.deleteWhitespace("\n");
      assertTrue(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("", string2);
      
      int int1 = StringUtils.lastIndexOf((CharSequence) "", 256, 0);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      int int2 = StringUtils.ordinalIndexOf("", "", 77);
      assertFalse(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals(0, int2);
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      Locale locale0 = Locale.GERMANY;
      assertEquals("de", locale0.getLanguage());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("DE", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("de_DE", locale0.toString());
      assertNotNull(locale0);
      
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      assertEquals("de", locale0.getLanguage());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("DE", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("de_DE", locale0.toString());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertNotNull(set0);
      
      byte[] byteArray0 = new byte[0];
      String string0 = StringUtils.join(byteArray0, 's', (-1), (-1));
      assertEquals(0, byteArray0.length);
      assertNotNull(string0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals("", string0);
      
      int int0 = StringUtils.lastOrdinalIndexOf("", "", (-1));
      assertEquals((-1), int0);
      
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) arrayList0;
      objectArray0[1] = (Object) "";
      objectArray0[2] = (Object) stringUtils0;
      String string1 = StringUtils.join(objectArray0, "\r");
      assertFalse(string1.equals((Object)string0));
      assertEquals(4, objectArray0.length);
      assertNotNull(string1);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("", 'I');
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      int int1 = StringUtils.indexOfAnyBut((CharSequence) "", (CharSequence) "");
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      String string2 = StringUtils.upperCase("9(");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("9(", string2);
      
      boolean boolean0 = StringUtils.contains((CharSequence) "", (CharSequence) "");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      String string0 = StringUtils.leftPad("x[BEyAx", (int) 'g', 'g');
      assertNotNull(string0);
      assertEquals("ggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggx[BEyAx", string0);
      
      String[] stringArray0 = Locale.getISOLanguages();
      assertEquals(188, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string1 = StringUtils.rightPad("ggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggx[BEyAx", (int) 'g', "x[BEyAx");
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("ggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggx[BEyAx", string1);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      String string2 = StringUtils.join((Object[]) stringArray0, (String) null);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals(188, stringArray0.length);
      assertNotNull(string2);
      assertEquals("aaabaeafakamanarasavayazbabebgbhbibmbnbobrbscacechcocrcscucvcydadedvdzeeeleneoeseteufafffifjfofrfygagdglgngugvhahehihohrhthuhyhziaidieigiiikinioisitiuiwjajijvkakgkikjkkklkmknkokrkskukvkwkylalblglilnloltlulvmgmhmimkmlmnmomrmsmtmynanbndnengnlnnnonrnvnyocojomorospapiplpsptqurmrnrorurwsascsdsesgsiskslsmsnsosqsrssstsusvswtatetgthtitktltntotrtstttwtyugukuruzvevivowawoxhyiyozazhzu", string2);
      
      boolean boolean0 = StringUtils.isAllLowerCase((CharSequence) null);
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isAlphanumericSpace("The type must notbe null");
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String string3 = StringUtils.defaultIfEmpty("ggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggx[BEyAx", "ggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggx[BEyAx");
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string1));
      assertNotNull(string3);
      assertEquals("ggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggx[BEyAx", string3);
      
      boolean boolean2 = StringUtils.isMixedCase("ggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggx[BEyAx");
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2);
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[9];
      String string0 = StringUtils.strip("org.apache.commons.lang3.RegExUtils");
      assertNotNull(string0);
      assertEquals("org.apache.commons.lang3.RegExUtils", string0);
      
      String string1 = StringUtils.difference((String) null, "maxWith cannot be negativemaxWith cannot be negative");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("maxWith cannot be negativemaxWith cannot be negative", string1);
      
      String string2 = StringUtils.center("maxWith cannot be negativemaxWith cannot be negative", 4, '');
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("maxWith cannot be negativemaxWith cannot be negative", string2);
      
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "maxWith cannot be negativemaxWith cannot be negative", 4, 4);
      assertEquals(0, charBuffer0.remaining());
      assertEquals(4, charBuffer0.limit());
      assertEquals(4, charBuffer0.position());
      assertEquals(52, charBuffer0.capacity());
      assertFalse(charBuffer0.hasRemaining());
      assertEquals("", charBuffer0.toString());
      assertTrue(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.length());
      assertFalse(charBuffer0.hasArray());
      assertFalse(charBuffer0.isDirect());
      assertNotNull(charBuffer0);
      
      boolean boolean0 = StringUtils.isNotBlank(charBuffer0);
      assertEquals(0, charBuffer0.remaining());
      assertEquals(4, charBuffer0.limit());
      assertEquals(4, charBuffer0.position());
      assertEquals(52, charBuffer0.capacity());
      assertFalse(charBuffer0.hasRemaining());
      assertEquals("", charBuffer0.toString());
      assertTrue(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.length());
      assertFalse(charBuffer0.hasArray());
      assertFalse(charBuffer0.isDirect());
      assertFalse(boolean0);
      
      int int0 = new Integer('');
      assertEquals(127, int0);
      
      String string3 = StringUtils.substringAfter("i(E", "org.apache.commons.lang3.RegExUtils");
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      assertEquals("", string3);
      
      boolean boolean1 = StringUtils.contains((CharSequence) charBuffer0, (CharSequence) "x&{#0],$RHy");
      assertEquals(0, charBuffer0.remaining());
      assertEquals(4, charBuffer0.limit());
      assertEquals(4, charBuffer0.position());
      assertEquals(52, charBuffer0.capacity());
      assertFalse(charBuffer0.hasRemaining());
      assertEquals("", charBuffer0.toString());
      assertTrue(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.length());
      assertFalse(charBuffer0.hasArray());
      assertFalse(charBuffer0.isDirect());
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string4 = StringUtils.wrapIfMissing("maxWith cannot be negativemaxWith cannot be negative", '');
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertNotNull(string4);
      assertEquals("maxWith cannot be negativemaxWith cannot be negative", string4);
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      charSequenceArray0[2] = (CharSequence) "\n";
      charSequenceArray0[2] = (CharSequence) " ";
      String string0 = StringUtils.join((Object[]) charSequenceArray0, "yX");
      assertEquals(5, charSequenceArray0.length);
      assertNotNull(string0);
      assertEquals("yXyX yXyX", string0);
      
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "yXyX yXyX", (CharSequence) "\n");
      assertEquals(0, int0);
      
      String string1 = StringUtils.difference((String) null, "\r");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("\r", string1);
      
      boolean boolean0 = StringUtils.contains((CharSequence) "G@*`|ITjN +QJ5x", (CharSequence) "\r");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isAlphanumeric("\r");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("Array element ", "Array element ");
      assertEquals(2, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string0 = StringUtils.deleteWhitespace("Array element ");
      assertNotNull(string0);
      assertEquals("Arrayelement", string0);
      
      Integer[] integerArray0 = new Integer[4];
      Integer integer0 = new Integer((-943));
      assertNotNull(integer0);
      assertEquals((-943), (int)integer0);
      
      integerArray0[0] = integer0;
      boolean boolean0 = StringUtils.equals((CharSequence) "Array element ", (CharSequence) "Arrayelement");
      assertFalse(boolean0);
      
      String string1 = StringUtils.rightPad("Array element ", (int) integerArray0[0], '2');
      assertFalse(string1.equals((Object)string0));
      assertEquals(4, integerArray0.length);
      assertNotNull(string1);
      assertEquals("Array element ", string1);
      
      int int0 = StringUtils.compare(".8y#w=ieC=zU", "@>x/4OzBmKg]&4e?#0", true);
      assertEquals((-18), int0);
      
      String string2 = StringUtils.center("Array element ", (-943));
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("Array element ", string2);
      
      boolean boolean1 = StringUtils.isAllEmpty(stringArray0);
      assertFalse(boolean1 == boolean0);
      assertEquals(2, stringArray0.length);
      assertTrue(boolean1);
      
      String string3 = StringUtils.overlay("...", "@>x/4OzBmKg]&4e?#0", 76, (-943));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      assertEquals("@>x/4OzBmKg]&4e?#0", string3);
      
      String string4 = StringUtils.unwrap("Array element ", "Array element ");
      assertFalse(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertNotNull(string4);
      assertEquals("Array element ", string4);
      
      boolean boolean2 = StringUtils.startsWithIgnoreCase("...", "@>x/4OzBmKg]&4e?#0");
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)8192;
      String string5 = StringUtils.join(shortArray0, 'W', (-1071), (-2039));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertEquals(1, shortArray0.length);
      assertNotNull(string5);
      assertArrayEquals(new short[] {(short)8192}, shortArray0);
      assertEquals("", string5);
      
      int int1 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "Array element ", (CharSequence) "");
      assertFalse(int1 == int0);
      assertEquals(14, int1);
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      String string0 = StringUtils.mid((String) null, 5, (-25));
      assertNull(string0);
      
      boolean boolean0 = StringUtils.equalsIgnoreCase((CharSequence) null, (CharSequence) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = '8';
      charArray0[1] = '5';
      String string0 = StringUtils.leftPad((String) null, 50, 'g');
      assertNull(string0);
      
      String string1 = StringUtils.mid((String) null, 50, 50);
      assertNull(string1);
      
      String string2 = StringUtils.defaultString("xx!?`i(F5A9:G");
      assertNotNull(string2);
      assertEquals("xx!?`i(F5A9:G", string2);
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) 50;
      floatArray0[1] = (-588.7F);
      floatArray0[2] = (float) '8';
      floatArray0[3] = (float) 31;
      floatArray0[4] = 1.0F;
      floatArray0[5] = (float) '5';
      floatArray0[6] = (float) 2293;
      String string3 = StringUtils.join(floatArray0, 'q', 2471, 2471);
      assertFalse(string3.equals((Object)string2));
      assertEquals(7, floatArray0.length);
      assertNotNull(string3);
      assertArrayEquals(new float[] {50.0F, (-588.7F), 56.0F, 31.0F, 1.0F, 53.0F, 2293.0F}, floatArray0, 0.01F);
      assertEquals("", string3);
      
      String string4 = StringUtils.rotate(" *z", 2293);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertNotNull(string4);
      assertEquals("z *", string4);
      
      boolean boolean0 = StringUtils.isMixedCase((CharSequence) null);
      assertFalse(boolean0);
      
      String string5 = StringUtils.rightPad("p*LAqR+y1;dV", 2293);
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertNotNull(string5);
      
      int int0 = StringUtils.indexOf((CharSequence) "xx!?`i(F5A9:G", (CharSequence) string5);
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertEquals((-1), int0);
      
      String string6 = StringUtils.removeFirst("9R?Gg)9:jV8twn>", "RZ|fY&_q7OW");
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string4));
      assertNotNull(string6);
      assertEquals("9R?Gg)9:jV8twn>", string6);
      
      boolean boolean1 = StringUtils.equalsIgnoreCase(string0, string6);
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string4));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      String[] stringArray0 = StringUtils.split("object", "9Y`]eiW^{x@Rl", 3);
      assertEquals(2, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string0 = StringUtils.prependIfMissingIgnoreCase("-5y1iX{EX`M@KK#[b", "-5y1iX{EX`M@KK#[b", stringArray0);
      assertEquals(2, stringArray0.length);
      assertNotNull(string0);
      assertEquals("-5y1iX{EX`M@KK#[b", string0);
      
      String string1 = StringUtils.lowerCase("-5y1iX{EX`M@KK#[b");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("-5y1ix{ex`m@kk#[b", string1);
      
      String[] stringArray1 = StringUtils.splitByWholeSeparator("-5y1ix{ex`m@kk#[b", "x[BEyAx", 3);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray1, stringArray0);
      assertEquals(1, stringArray1.length);
      assertNotNull(stringArray1);
      
      int[] intArray0 = new int[8];
      intArray0[1] = 3;
      String string2 = StringUtils.wrapIfMissing("9", "-5y1iX{EX`M@KK#[b");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("-5y1iX{EX`M@KK#[b9-5y1iX{EX`M@KK#[b", string2);
      
      String string3 = StringUtils.substringAfter("-5y1iX{EX`M@KK#[b", 438);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      assertEquals("", string3);
      
      String string4 = StringUtils.truncate((String) null, 3);
      assertNull(string4);
      
      String string5 = StringUtils.wrap("-5y1iX{EX`M@KK#[b", '2');
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertNotNull(string5);
      assertEquals("2-5y1iX{EX`M@KK#[b2", string5);
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = '$';
      String string0 = StringUtils.truncate((String) null, 8192);
      assertNull(string0);
      
      String string1 = StringUtils.wrap(", Length: 0", 'z');
      assertNotNull(string1);
      assertEquals("z, Length: 0z", string1);
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short)2127;
      String string0 = StringUtils.strip("KO)(uo0>#;Ny", "_wy`sG+n-P0");
      assertNotNull(string0);
      assertEquals("KO)(uo0>#;N", string0);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "_wy`sG+n-P0", "KO)(uo0>#;Ny");
      assertEquals(2, int0);
      
      PriorityQueue<Object> priorityQueue0 = new PriorityQueue<Object>();
      assertEquals(0, priorityQueue0.size());
      assertNotNull(priorityQueue0);
      assertFalse(priorityQueue0.contains((short)2127));
      
      String string1 = StringUtils.truncate("_wy`sG+n-P0", 4);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("_wy`", string1);
      
      String string2 = StringUtils.center("KO)(uo0>#;Ny", 10, "KO)(uo0>#;Ny");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("KO)(uo0>#;Ny", string2);
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      String string0 = StringUtils.wrapIfMissing("aX-1.0x-412.24x1.0x-2592.4207x-2730.193aX-1.0x-412.24x1.0x-2592.4207x-2730.193aX-1.0x-412.24x1.0x-2592.4207x-2730.193-1.0x-412.24x1.0x-2592.4207x-2730.193", "nt ");
      assertNotNull(string0);
      assertEquals("nt aX-1.0x-412.24x1.0x-2592.4207x-2730.193aX-1.0x-412.24x1.0x-2592.4207x-2730.193aX-1.0x-412.24x1.0x-2592.4207x-2730.193-1.0x-412.24x1.0x-2592.4207x-2730.193nt ", string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[0] = (CharSequence) "aX-1.0x-412.24x1.0x-2592.4207x-2730.193aX-1.0x-412.24x1.0x-2592.4207x-2730.193aX-1.0x-412.24x1.0x-2592.4207x-2730.193-1.0x-412.24x1.0x-2592.4207x-2730.193";
      charSequenceArray0[1] = (CharSequence) "aX-1.0x-412.24x1.0x-2592.4207x-2730.193aX-1.0x-412.24x1.0x-2592.4207x-2730.193aX-1.0x-412.24x1.0x-2592.4207x-2730.193-1.0x-412.24x1.0x-2592.4207x-2730.193";
      boolean boolean0 = StringUtils.equalsAnyIgnoreCase("nt aX-1.0x-412.24x1.0x-2592.4207x-2730.193aX-1.0x-412.24x1.0x-2592.4207x-2730.193aX-1.0x-412.24x1.0x-2592.4207x-2730.193-1.0x-412.24x1.0x-2592.4207x-2730.193nt ", charSequenceArray0);
      assertEquals(2, charSequenceArray0.length);
      assertFalse(boolean0);
      
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      int int0 = StringUtils.indexOfAny((CharSequence) "nt aX-1.0x-412.24x1.0x-2592.4207x-2730.193aX-1.0x-412.24x1.0x-2592.4207x-2730.193aX-1.0x-412.24x1.0x-2592.4207x-2730.193-1.0x-412.24x1.0x-2592.4207x-2730.193nt ", "Cannot clone Cloneable type ");
      assertEquals(0, int0);
      
      String string1 = StringUtils.join((Object[]) charSequenceArray0, "Cannot clone Cloneable type ", 36, 2);
      assertFalse(string1.equals((Object)string0));
      assertEquals(2, charSequenceArray0.length);
      assertNotNull(string1);
      assertEquals("", string1);
      
      String string2 = StringUtils.overlay("nX)d{d>QC{XCk@K", "Cannot clone Cloneable type ", 3334, 2700);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("nX)d{d>QC{XCk@KCannot clone Cloneable type ", string2);
      
      boolean boolean1 = StringUtils.startsWith("nt ", "");
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      String string0 = StringUtils.wrapIfMissing("aX-1.0x-412.24x1.0x-2592.4207x-2730.193aX-1.0x-412.24x1.0x-2592.4207x-2730.193aX-1.0x-412.24x1.0x-2592.4207x-2730.193-1.0x-412.24x1.0x-2592.4207x-2730.193", "nt ");
      assertNotNull(string0);
      assertEquals("nt aX-1.0x-412.24x1.0x-2592.4207x-2730.193aX-1.0x-412.24x1.0x-2592.4207x-2730.193aX-1.0x-412.24x1.0x-2592.4207x-2730.193-1.0x-412.24x1.0x-2592.4207x-2730.193nt ", string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[9];
      charSequenceArray0[0] = (CharSequence) "nt aX-1.0x-412.24x1.0x-2592.4207x-2730.193aX-1.0x-412.24x1.0x-2592.4207x-2730.193aX-1.0x-412.24x1.0x-2592.4207x-2730.193-1.0x-412.24x1.0x-2592.4207x-2730.193nt ";
      charSequenceArray0[2] = (CharSequence) "aX-1.0x-412.24x1.0x-2592.4207x-2730.193aX-1.0x-412.24x1.0x-2592.4207x-2730.193aX-1.0x-412.24x1.0x-2592.4207x-2730.193-1.0x-412.24x1.0x-2592.4207x-2730.193";
      charSequenceArray0[4] = (CharSequence) "'";
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) 31;
      floatArray0[1] = (float) 'R';
      floatArray0[2] = (float) 'R';
      String string1 = StringUtils.join(floatArray0, 'v', 3160, 31);
      assertFalse(string1.equals((Object)string0));
      assertEquals(3, floatArray0.length);
      assertNotNull(string1);
      assertArrayEquals(new float[] {31.0F, 82.0F, 82.0F}, floatArray0, 0.01F);
      assertEquals("", string1);
      
      String string2 = StringUtils.rotate("'", 3160);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("'", string2);
      
      CharBuffer charBuffer0 = CharBuffer.allocate(1919);
      assertEquals(1919, charBuffer0.remaining());
      assertEquals(1919, charBuffer0.capacity());
      assertEquals(1919, charBuffer0.limit());
      assertEquals(0, charBuffer0.position());
      assertEquals(1919, charBuffer0.length());
      assertFalse(charBuffer0.isReadOnly());
      assertTrue(charBuffer0.hasRemaining());
      assertFalse(charBuffer0.isDirect());
      assertTrue(charBuffer0.hasArray());
      assertEquals(0, charBuffer0.arrayOffset());
      assertNotNull(charBuffer0);
      
      Supplier<CharBuffer> supplier0 = (Supplier<CharBuffer>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      CharBuffer charBuffer1 = StringUtils.getIfEmpty(charBuffer0, supplier0);
      assertEquals(1919, charBuffer0.remaining());
      assertEquals(1919, charBuffer0.capacity());
      assertEquals(1919, charBuffer0.limit());
      assertEquals(0, charBuffer0.position());
      assertEquals(1919, charBuffer0.length());
      assertFalse(charBuffer0.isReadOnly());
      assertTrue(charBuffer0.hasRemaining());
      assertFalse(charBuffer0.isDirect());
      assertTrue(charBuffer0.hasArray());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(1919, charBuffer1.capacity());
      assertEquals(1919, charBuffer1.remaining());
      assertFalse(charBuffer1.isReadOnly());
      assertTrue(charBuffer1.hasArray());
      assertTrue(charBuffer1.hasRemaining());
      assertFalse(charBuffer1.isDirect());
      assertEquals(1919, charBuffer1.length());
      assertEquals(0, charBuffer1.arrayOffset());
      assertEquals(0, charBuffer1.position());
      assertEquals(1919, charBuffer1.limit());
      assertSame(charBuffer0, charBuffer1);
      assertSame(charBuffer1, charBuffer0);
      assertNotNull(charBuffer1);
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      int int0 = StringUtils.compare("...", "...", true);
      assertEquals(0, int0);
      
      String string0 = StringUtils.center("Kv9XcM", Integer.MIN_VALUE);
      assertNotNull(string0);
      assertEquals("Kv9XcM", string0);
      
      String string1 = StringUtils.substringAfter((String) null, Integer.MIN_VALUE);
      assertNull(string1);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) 0;
      floatArray0[1] = (float) 'Y';
      String string2 = StringUtils.join(floatArray0, '+', 576, 0);
      assertFalse(string2.equals((Object)string0));
      assertEquals(2, floatArray0.length);
      assertNotNull(string2);
      assertArrayEquals(new float[] {0.0F, 89.0F}, floatArray0, 0.01F);
      assertEquals("", string2);
      
      String string3 = StringUtils.rotate("193", 0);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      assertEquals("193", string3);
      
      CharBuffer charBuffer0 = CharBuffer.allocate(1850);
      assertEquals(1850, charBuffer0.length());
      assertEquals(1850, charBuffer0.remaining());
      assertFalse(charBuffer0.isReadOnly());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.position());
      assertTrue(charBuffer0.hasRemaining());
      assertTrue(charBuffer0.hasArray());
      assertEquals(1850, charBuffer0.limit());
      assertEquals(1850, charBuffer0.capacity());
      assertEquals(0, charBuffer0.arrayOffset());
      assertNotNull(charBuffer0);
      
      Supplier<CharBuffer> supplier0 = (Supplier<CharBuffer>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      CharBuffer charBuffer1 = StringUtils.getIfEmpty(charBuffer0, supplier0);
      assertEquals(1850, charBuffer0.length());
      assertEquals(1850, charBuffer0.remaining());
      assertFalse(charBuffer0.isReadOnly());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.position());
      assertTrue(charBuffer0.hasRemaining());
      assertTrue(charBuffer0.hasArray());
      assertEquals(1850, charBuffer0.limit());
      assertEquals(1850, charBuffer0.capacity());
      assertEquals(0, charBuffer0.arrayOffset());
      assertFalse(charBuffer1.isDirect());
      assertEquals(1850, charBuffer1.limit());
      assertTrue(charBuffer1.hasRemaining());
      assertEquals(0, charBuffer1.arrayOffset());
      assertEquals(1850, charBuffer1.length());
      assertTrue(charBuffer1.hasArray());
      assertEquals(1850, charBuffer1.capacity());
      assertFalse(charBuffer1.isReadOnly());
      assertEquals(0, charBuffer1.position());
      assertEquals(1850, charBuffer1.remaining());
      assertSame(charBuffer0, charBuffer1);
      assertSame(charBuffer1, charBuffer0);
      assertNotNull(charBuffer1);
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      int int0 = StringUtils.ordinalIndexOf(" ", " ", 13);
      assertEquals((-1), int0);
      
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short)2;
      shortArray0[1] = (short)2;
      shortArray0[2] = (short)2;
      char char0 = 'Y';
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) 37;
      floatArray0[1] = (float) 37;
      floatArray0[2] = (float) 13;
      floatArray0[3] = (float) 37;
      String string0 = StringUtils.join(floatArray0, 'Y', 2025, (-1911871957));
      assertEquals(4, floatArray0.length);
      assertNotNull(string0);
      assertArrayEquals(new float[] {37.0F, 37.0F, 13.0F, 37.0F}, floatArray0, 0.01F);
      assertEquals("", string0);
      
      String string1 = StringUtils.rotate(" ", 0);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(" ", string1);
      
      CharBuffer charBuffer0 = CharBuffer.allocate(10);
      assertEquals(0, charBuffer0.arrayOffset());
      assertFalse(charBuffer0.isDirect());
      assertTrue(charBuffer0.hasArray());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(10, charBuffer0.length());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(10, charBuffer0.limit());
      assertEquals(0, charBuffer0.position());
      assertEquals(10, charBuffer0.remaining());
      assertEquals(10, charBuffer0.capacity());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", charBuffer0.toString());
      assertNotNull(charBuffer0);
      
      char[] charArray0 = new char[3];
      charArray0[0] = 'Y';
      charArray0[1] = 'Y';
      charArray0[2] = 'Y';
      // Undeclared exception!
      try { 
        CharBuffer.wrap(charArray0, (-882), (int) (short)2);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      String string0 = StringUtils.substring("}L~.", (-3733));
      assertNotNull(string0);
      assertEquals("}L~.", string0);
      
      String string1 = StringUtils.unwrap("}L~.", '-');
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("}L~.", string1);
      
      String string2 = StringUtils.join((byte[]) null, 'S');
      assertNull(string2);
      
      String[] stringArray0 = StringUtils.split("...", "}L~.", 2);
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string3 = StringUtils.prependIfMissingIgnoreCase("...Z", (CharSequence) null, stringArray0);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals(0, stringArray0.length);
      assertNotNull(string3);
      assertEquals("...Z", string3);
      
      String string4 = StringUtils.lowerCase("org.apache.commons.lang3.Charsets.@E#)null/empty items~4&4+2&fa");
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertNotNull(string4);
      
      String[] stringArray1 = StringUtils.splitByWholeSeparator("", (String) null, 9);
      assertSame(stringArray1, stringArray0);
      assertEquals(0, stringArray1.length);
      assertNotNull(stringArray1);
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("q@F!X#Ug_t@", "(Ad{JKOkvP]^ry2!*~", (-1));
      assertEquals(2, stringArray0.length);
      assertNotNull(stringArray0);
      
      boolean boolean0 = StringUtils.containsIgnoreCase("(Ad{JKOkvP]^ry2!*~", "q@F!X#Ug_t@");
      assertFalse(boolean0);
      
      String string0 = StringUtils.chomp("R(<C", "q@F!X#Ug_t@");
      assertNotNull(string0);
      assertEquals("R(<C", string0);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "R(<C", (CharSequence) "R(<C");
      assertEquals(0, int0);
      
      int int1 = StringUtils.indexOf((CharSequence) "q@F!X#Ug_t@", 0, 0);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      String[] stringArray1 = StringUtils.splitByCharacterType("uYa'*po!d9_");
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray1, stringArray0);
      assertEquals(9, stringArray1.length);
      assertNotNull(stringArray1);
      
      String string1 = StringUtils.getCommonPrefix(stringArray1);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(stringArray1, stringArray0);
      assertEquals(9, stringArray1.length);
      assertNotNull(string1);
      assertEquals("", string1);
      
      String string2 = StringUtils.defaultIfBlank("uYa'*po!d9_", "");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("uYa'*po!d9_", string2);
      
      String[] stringArray2 = StringUtils.splitByWholeSeparator("R(<C", "", 0);
      assertFalse(stringArray2.equals((Object)stringArray1));
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertNotSame(stringArray2, stringArray1);
      assertNotSame(stringArray2, stringArray0);
      assertEquals(1, stringArray2.length);
      assertNotNull(stringArray2);
      
      int int2 = StringUtils.indexOfDifference((CharSequence) "uYa'*po!d9_", (CharSequence) "(Ad{JKOkvP]^ry2!*~");
      assertFalse(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals(0, int2);
      
      int int3 = StringUtils.indexOfIgnoreCase((CharSequence) "uYa'*po!d9_", (CharSequence) "(Ad{JKOkvP]^ry2!*~", (-3));
      assertFalse(int3 == int2);
      assertFalse(int3 == int0);
      assertTrue(int3 == int1);
      assertEquals((-1), int3);
      
      String string3 = StringUtils.substringAfterLast("uYa'*po!d9_", "(Ad{JKOkvP]^ry2!*~");
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      assertEquals("", string3);
      
      int int4 = StringUtils.indexOfDifference((CharSequence) "R(<C", (CharSequence) "R(<C");
      assertTrue(int4 == int1);
      assertTrue(int4 == int3);
      assertFalse(int4 == int0);
      assertFalse(int4 == int2);
      assertEquals((-1), int4);
      
      byte[] byteArray0 = new byte[0];
      String string4 = StringUtils.join(byteArray0, '8');
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertEquals(0, byteArray0.length);
      assertNotNull(string4);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals("", string4);
      
      String string5 = StringUtils.getCommonPrefix(stringArray0);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertFalse(stringArray0.equals((Object)stringArray2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray0, stringArray2);
      assertEquals(2, stringArray0.length);
      assertNotNull(string5);
      assertEquals("", string5);
      
      boolean boolean1 = StringUtils.isAlphaSpace("R(<C");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      int int5 = StringUtils.compareIgnoreCase("", "");
      assertFalse(int5 == int3);
      assertFalse(int5 == int4);
      assertTrue(int5 == int2);
      assertTrue(int5 == int0);
      assertFalse(int5 == int1);
      assertEquals(0, int5);
      
      String string6 = StringUtils.uncapitalize("(Ad{JKOkvP]^ry2!*~");
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string5));
      assertNotNull(string6);
      assertEquals("(Ad{JKOkvP]^ry2!*~", string6);
      
      String string7 = "!:w}\"9GI_<";
      // Undeclared exception!
      try { 
        StringUtils.toString(byteArray0, "!:w}\"9GI_<");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // !:w}\"9GI_<
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      String string0 = StringUtils.defaultIfBlank("", "...");
      assertNotNull(string0);
      assertEquals("...", string0);
      
      boolean boolean0 = StringUtils.isAsciiPrintable("...");
      assertTrue(boolean0);
      
      String string1 = StringUtils.stripEnd("", "...");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
      
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) "...";
      objectArray0[1] = (Object) "";
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[2] = object0;
      objectArray0[4] = (Object) "...";
      // Undeclared exception!
      try { 
        StringUtils.join(objectArray0, "", 20, 1427);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 20
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[0] = 'i';
      charArray0[1] = '6';
      charArray0[2] = '9';
      charArray0[3] = 'A';
      charArray0[4] = ':';
      charArray0[5] = '?';
      charArray0[6] = '{';
      boolean boolean0 = StringUtils.containsOnly((CharSequence) null, charArray0);
      assertEquals(7, charArray0.length);
      assertArrayEquals(new char[] {'i', '6', '9', 'A', ':', '?', '{'}, charArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = '`';
      charArray0[1] = 'l';
      charArray0[2] = 'r';
      charArray0[3] = 'H';
      charArray0[4] = '>';
      charArray0[5] = 'h';
      String string0 = StringUtils.join(charArray0, '>');
      assertEquals(6, charArray0.length);
      assertNotNull(string0);
      assertArrayEquals(new char[] {'`', 'l', 'r', 'H', '>', 'h'}, charArray0);
      assertEquals("`>l>r>H>>>h", string0);
      
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "`>l>r>H>>>h", charArray0);
      assertEquals(6, charArray0.length);
      assertArrayEquals(new char[] {'`', 'l', 'r', 'H', '>', 'h'}, charArray0);
      assertTrue(boolean0);
      
      int[] intArray0 = StringUtils.toCodePoints("`>l>r>H>>>h");
      assertEquals(11, intArray0.length);
      assertNotNull(intArray0);
      
      String string1 = StringUtils.toRootUpperCase("`>l>r>H>>>h");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("`>L>R>H>>>H", string1);
      
      String string2 = StringUtils.join(charArray0, 'r', 321, 321);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals(6, charArray0.length);
      assertNotNull(string2);
      assertArrayEquals(new char[] {'`', 'l', 'r', 'H', '>', 'h'}, charArray0);
      assertEquals("", string2);
      
      String string3 = StringUtils.deleteWhitespace("Array and element cannot both be null");
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      assertEquals("Arrayandelementcannotbothbenull", string3);
      
      String string4 = StringUtils.substringAfter("DI.u&xKa$:JmrN9i", 13);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertNotNull(string4);
      assertEquals("", string4);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "", "");
      assertEquals((-1), int0);
      
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) "Array and element cannot both be null";
      objectArray0[1] = (Object) 'l';
      // Undeclared exception!
      try { 
        StringUtils.join(objectArray0, (String) null, (-1), 2700);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      String string0 = StringUtils.stripStart("maxWith cannot be negative", "maxWith cannot be negative");
      assertNotNull(string0);
      assertEquals("", string0);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "", (CharSequence) "maxWith cannot be negative");
      assertEquals(26, int0);
      
      boolean boolean0 = StringUtils.equalsIgnoreCase("", "");
      assertTrue(boolean0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[9];
      String string1 = StringUtils.remove("", 'G');
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
      
      boolean boolean1 = StringUtils.isNoneEmpty(charSequenceArray0);
      assertFalse(boolean1 == boolean0);
      assertEquals(9, charSequenceArray0.length);
      assertFalse(boolean1);
      
      int int1 = StringUtils.indexOf((CharSequence) "maxWith cannot be negative", (CharSequence) ", Length: 0", (-3231));
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test287()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      String string0 = StringUtils.appendIfMissingIgnoreCase("", "", charSequenceArray0);
      assertEquals(0, charSequenceArray0.length);
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.reverse((String) null);
      assertNull(string1);
      
      String string2 = StringUtils.abbreviate("", (String) null, 0, 0);
      assertTrue(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("", string2);
      
      String string3 = StringUtils.center("The character ", 0);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      assertEquals("The character ", string3);
      
      boolean boolean0 = StringUtils.equals((CharSequence) null, (CharSequence) "");
      assertFalse(boolean0);
      
      String string4 = StringUtils.rightPad("*3d,y8Y%UBd{{:R", 0, '+');
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertNotNull(string4);
      assertEquals("*3d,y8Y%UBd{{:R", string4);
      
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[0] = true;
      booleanArray0[5] = false;
      booleanArray0[6] = false;
      booleanArray0[7] = false;
      String string5 = StringUtils.join(booleanArray0, 'n', 8, (-1310));
      assertTrue(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertTrue(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertEquals(8, booleanArray0.length);
      assertNotNull(string5);
      assertTrue(Arrays.equals(new boolean[] {true, false, false, false, false, false, false, false}, booleanArray0));
      assertEquals("", string5);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("&5wUx/:{H>l'l", "~^jbro'eEH9v\"&#S");
      assertEquals(4, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string6 = StringUtils.trim((String) null);
      assertNull(string6);
      
      String string7 = StringUtils.rightPad(", '", 8, (String) null);
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string2));
      assertNotNull(string7);
      assertEquals(", '     ", string7);
      
      String string8 = StringUtils.removeStart("The character ", "");
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string4));
      assertTrue(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string0));
      assertNotNull(string8);
      assertEquals("The character ", string8);
      
      String string9 = StringUtils.remove("\r", 'n');
      assertFalse(string9.equals((Object)string3));
      assertFalse(string9.equals((Object)string8));
      assertFalse(string9.equals((Object)string4));
      assertFalse(string9.equals((Object)string7));
      assertFalse(string9.equals((Object)string0));
      assertFalse(string9.equals((Object)string5));
      assertFalse(string9.equals((Object)string2));
      assertNotNull(string9);
      assertEquals("\r", string9);
  }

  @Test(timeout = 4000)
  public void test288()  throws Throwable  {
      String string0 = StringUtils.removeStart("", "");
      assertNotNull(string0);
      assertEquals("", string0);
      
      boolean boolean0 = StringUtils.endsWithAny("", (CharSequence[]) null);
      assertFalse(boolean0);
      
      String string1 = StringUtils.substringBefore("Strings must not be null", 4165);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("Strings must not be null", string1);
      
      String string2 = StringUtils.strip("Q^)Sa");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("Q^)Sa", string2);
      
      String string3 = StringUtils.removeStart("Locale must not be null", (String) null);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      assertEquals("Locale must not be null", string3);
      
      String string4 = StringUtils.removePattern((String) null, "");
      assertNull(string4);
      
      int int0 = StringUtils.ordinalIndexOf("Q^)Sa", (CharSequence) null, 2);
      assertEquals((-1), int0);
      
      boolean boolean1 = StringUtils.containsAny((CharSequence) "", (CharSequence) "Q^)Sa");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string5 = StringUtils.stripStart("xAK fm@N`go#", "J");
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertNotNull(string5);
      assertEquals("xAK fm@N`go#", string5);
      
      boolean boolean2 = StringUtils.isAnyEmpty((CharSequence[]) null);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      
      String string6 = StringUtils.repeat((String) null, 50);
      assertNull(string6);
  }

  @Test(timeout = 4000)
  public void test289()  throws Throwable  {
      String string0 = StringUtils.join((boolean[]) null, 'U', 32, (-3684));
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test290()  throws Throwable  {
      String string0 = StringUtils.wrapIfMissing("aX-1.0x-412.24x1.0x-2592.4207x-2730.193aX-1.0x-412.24x1.0x-2592.4207x-2730.193aX-1.0x-412.24x1.0x-2592.4207x-2730.193-1.0x-412.24x1.0x-2592.4207x-2730.193", "nt ");
      assertNotNull(string0);
      assertEquals("nt aX-1.0x-412.24x1.0x-2592.4207x-2730.193aX-1.0x-412.24x1.0x-2592.4207x-2730.193aX-1.0x-412.24x1.0x-2592.4207x-2730.193-1.0x-412.24x1.0x-2592.4207x-2730.193nt ", string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[9];
      charSequenceArray0[0] = (CharSequence) "nt aX-1.0x-412.24x1.0x-2592.4207x-2730.193aX-1.0x-412.24x1.0x-2592.4207x-2730.193aX-1.0x-412.24x1.0x-2592.4207x-2730.193-1.0x-412.24x1.0x-2592.4207x-2730.193nt ";
      charSequenceArray0[2] = (CharSequence) "aX-1.0x-412.24x1.0x-2592.4207x-2730.193aX-1.0x-412.24x1.0x-2592.4207x-2730.193aX-1.0x-412.24x1.0x-2592.4207x-2730.193-1.0x-412.24x1.0x-2592.4207x-2730.193";
      charSequenceArray0[4] = (CharSequence) "'";
      String string1 = StringUtils.EMPTY;
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
      
      char[] charArray0 = new char[9];
      charArray0[0] = 'a';
      charArray0[1] = '$';
      charArray0[2] = 'a';
      charArray0[3] = '$';
      charArray0[4] = '$';
      charArray0[5] = 'a';
      charArray0[6] = 'a';
      charArray0[7] = '$';
      charArray0[8] = '$';
      boolean boolean0 = StringUtils.containsAny((CharSequence) "", charArray0);
      assertEquals(9, charArray0.length);
      assertArrayEquals(new char[] {'a', '$', 'a', '$', '$', 'a', 'a', '$', '$'}, charArray0);
      assertFalse(boolean0);
      
      String string2 = StringUtils.deleteWhitespace("O/1P'er} n");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("O/1P'er}n", string2);
      
      String string3 = StringUtils.stripAccents("9Bf;oQZFH\"2RFO");
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      assertEquals("9Bf;oQZFH\"2RFO", string3);
      
      String string4 = StringUtils.stripToNull((String) null);
      assertNull(string4);
      
      String string5 = StringUtils.wrap("#", 'a');
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertNotNull(string5);
      assertEquals("a#a", string5);
      
      boolean boolean1 = StringUtils.contains((CharSequence) null, (CharSequence) "a#a");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test291()  throws Throwable  {
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      Locale locale0 = Locale.GERMANY;
      assertEquals("de", locale0.getLanguage());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("de_DE", locale0.toString());
      assertEquals("DE", locale0.getCountry());
      assertNotNull(locale0);
      
      Object[] objectArray0 = new Object[0];
      String string0 = StringUtils.stripToNull((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test292()  throws Throwable  {
      String string0 = StringUtils.difference("6w#yEdv|M/NKamq&Rr", "6w#yEdv|M/NKamq&Rr");
      assertNotNull(string0);
      assertEquals("", string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      charSequenceArray0[0] = (CharSequence) "6w#yEdv|M/NKamq&Rr";
      boolean boolean0 = StringUtils.isAllBlank(charSequenceArray0);
      assertEquals(1, charSequenceArray0.length);
      assertFalse(boolean0);
      
      String string1 = StringUtils.capitalize(" vs ");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(" vs ", string1);
      
      boolean boolean1 = StringUtils.isWhitespace("6w#yEdv|M/NKamq&Rr");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = StringUtils.contains((CharSequence) " is not in the range '0' - '9'", (CharSequence) "");
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2);
      
      boolean boolean3 = StringUtils.isNumericSpace(" vs ");
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3);
      
      String string2 = StringUtils.leftPad("mbyrg", 8192, "7G_.@-!.-a%m");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      String string3 = StringUtils.getIfEmpty("7G_.@-!.-a%m", supplier0);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      assertEquals("7G_.@-!.-a%m", string3);
  }

  @Test(timeout = 4000)
  public void test293()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[1] = 'Q';
      charArray0[2] = '$';
      charArray0[3] = '7';
      String string0 = StringUtils.join((Object[]) null, "kb>K:%lR&M+Fm2*/78");
      assertNull(string0);
      
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "kb>K:%lR&M+Fm2*/78", (CharSequence) "kb>K:%lR&M+Fm2*/78");
      assertEquals((-1), int0);
      
      String string1 = StringUtils.center("z9]NdoCi'78'>>", (-1), '\'');
      assertNotNull(string1);
      assertEquals("z9]NdoCi'78'>>", string1);
  }

  @Test(timeout = 4000)
  public void test294()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = 'Q';
      charArray0[1] = 'O';
      charArray0[3] = 'd';
      charArray0[4] = '!';
      charArray0[5] = 'E';
      String string0 = StringUtils.join(charArray0, 'Q');
      assertEquals(6, charArray0.length);
      assertNotNull(string0);
      assertArrayEquals(new char[] {'Q', 'O', '\u0000', 'd', '!', 'E'}, charArray0);
      assertEquals("QQOQ\u0000QdQ!QE", string0);
      
      int[] intArray0 = StringUtils.toCodePoints("QQOQ\u0000QdQ!QE");
      assertEquals(11, intArray0.length);
      assertNotNull(intArray0);
      
      String string1 = StringUtils.join((Object[]) null, '\u0000');
      assertNull(string1);
      
      int int0 = StringUtils.indexOfDifference((CharSequence) null, (CharSequence) "QQOQ\u0000QdQ!QE");
      assertEquals(0, int0);
      
      String string2 = StringUtils.defaultString("QQOQ\u0000QdQ!QE", (String) null);
      assertTrue(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("QQOQ\u0000QdQ!QE", string2);
      
      String string3 = StringUtils.wrapIfMissing("The character ", "TOed(ag/wB@~}A5~|I");
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      assertEquals("TOed(ag/wB@~}A5~|IThe character TOed(ag/wB@~}A5~|I", string3);
      
      String string4 = StringUtils.substringAfter(", '", 0);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertNotNull(string4);
      assertEquals("", string4);
      
      String string5 = StringUtils.truncate("", 0);
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertTrue(string5.equals((Object)string4));
      assertNotNull(string5);
      assertEquals("", string5);
      
      String string6 = StringUtils.abbreviate("", 51);
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string3));
      assertTrue(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string2));
      assertTrue(string6.equals((Object)string4));
      assertNotNull(string6);
      assertEquals("", string6);
      
      String string7 = StringUtils.toRootUpperCase("");
      assertTrue(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string2));
      assertTrue(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string0));
      assertTrue(string7.equals((Object)string5));
      assertNotNull(string7);
      assertEquals("", string7);
  }

  @Test(timeout = 4000)
  public void test295()  throws Throwable  {
      String string0 = StringUtils.remove("P.ikGNWDF", "2I@uQsj3(");
      assertNotNull(string0);
      assertEquals("P.ikGNWDF", string0);
      
      int int0 = StringUtils.indexOf((CharSequence) "P.ikGNWDF", (-2272));
      assertEquals((-1), int0);
      
      String string1 = StringUtils.deleteWhitespace("P.ikGNWDF");
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("P.ikGNWDF", string1);
      
      boolean boolean0 = StringUtils.isAlphaSpace("2I@uQsj3(");
      assertFalse(boolean0);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("P.ikGNWDF", '<');
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string2 = StringUtils.rightPad("P.ikGNWDF", 3, "P.ikGNWDF");
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("P.ikGNWDF", string2);
      
      String string3 = StringUtils.getCommonPrefix(stringArray0);
      assertTrue(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string0));
      assertEquals(1, stringArray0.length);
      assertNotNull(string3);
      assertEquals("P.ikGNWDF", string3);
      
      String string4 = StringUtils.rightPad("2I@uQsj3(", 1947);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertNotNull(string4);
      
      int int1 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "P.ikGNWDF", (CharSequence) "P.ikGNWDF", 74);
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      boolean boolean1 = StringUtils.containsIgnoreCase(string4, "P.ikGNWDF");
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test296()  throws Throwable  {
      float[] floatArray0 = new float[5];
      String string0 = StringUtils.join(floatArray0, 'M');
      assertEquals(5, floatArray0.length);
      assertNotNull(string0);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals("0.0M0.0M0.0M0.0M0.0", string0);
      
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "0.0M0.0M0.0M0.0M0.0");
      assertFalse(charBuffer0.isDirect());
      assertEquals(19, charBuffer0.remaining());
      assertEquals(19, charBuffer0.length());
      assertEquals("0.0M0.0M0.0M0.0M0.0", charBuffer0.toString());
      assertEquals(19, charBuffer0.capacity());
      assertEquals(19, charBuffer0.limit());
      assertFalse(charBuffer0.hasArray());
      assertEquals(0, charBuffer0.position());
      assertTrue(charBuffer0.isReadOnly());
      assertTrue(charBuffer0.hasRemaining());
      assertNotNull(charBuffer0);
      
      CharBuffer charBuffer1 = CharBuffer.wrap((CharSequence) charBuffer0, 14, 14);
      assertFalse(charBuffer0.isDirect());
      assertEquals(19, charBuffer0.remaining());
      assertEquals(19, charBuffer0.length());
      assertEquals("0.0M0.0M0.0M0.0M0.0", charBuffer0.toString());
      assertEquals(19, charBuffer0.capacity());
      assertEquals(19, charBuffer0.limit());
      assertFalse(charBuffer0.hasArray());
      assertEquals(0, charBuffer0.position());
      assertTrue(charBuffer0.isReadOnly());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(0, charBuffer1.length());
      assertFalse(charBuffer1.isDirect());
      assertEquals("", charBuffer1.toString());
      assertEquals(19, charBuffer1.capacity());
      assertFalse(charBuffer1.hasRemaining());
      assertFalse(charBuffer1.hasArray());
      assertEquals(14, charBuffer1.limit());
      assertTrue(charBuffer1.isReadOnly());
      assertEquals(0, charBuffer1.remaining());
      assertEquals(14, charBuffer1.position());
      assertFalse(charBuffer1.equals((Object)charBuffer0));
      assertNotSame(charBuffer0, charBuffer1);
      assertNotSame(charBuffer1, charBuffer0);
      assertNotNull(charBuffer1);
      
      Buffer buffer0 = charBuffer1.flip();
      assertFalse(charBuffer0.isDirect());
      assertEquals(19, charBuffer0.remaining());
      assertEquals(19, charBuffer0.length());
      assertEquals("0.0M0.0M0.0M0.0M0.0", charBuffer0.toString());
      assertEquals(19, charBuffer0.capacity());
      assertEquals(19, charBuffer0.limit());
      assertFalse(charBuffer0.hasArray());
      assertEquals(0, charBuffer0.position());
      assertTrue(charBuffer0.isReadOnly());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(14, charBuffer1.length());
      assertFalse(charBuffer1.isDirect());
      assertEquals(19, charBuffer1.capacity());
      assertFalse(charBuffer1.hasArray());
      assertEquals(14, charBuffer1.remaining());
      assertEquals(14, charBuffer1.limit());
      assertTrue(charBuffer1.isReadOnly());
      assertEquals(0, charBuffer1.position());
      assertEquals("0.0M0.0M0.0M0.", charBuffer1.toString());
      assertTrue(charBuffer1.hasRemaining());
      assertFalse(buffer0.isDirect());
      assertTrue(buffer0.hasRemaining());
      assertEquals(19, buffer0.capacity());
      assertEquals(14, buffer0.limit());
      assertFalse(buffer0.hasArray());
      assertEquals(0, buffer0.position());
      assertEquals(14, buffer0.remaining());
      assertTrue(buffer0.isReadOnly());
      assertFalse(charBuffer0.equals((Object)charBuffer1));
      assertFalse(charBuffer1.equals((Object)charBuffer0));
      assertNotSame(charBuffer0, charBuffer1);
      assertNotSame(charBuffer1, charBuffer0);
      assertNotNull(buffer0);
      
      String string1 = StringUtils.mid("0.0M0.0M0.0M0.0M0.0", 2293, 2293);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
      
      String string2 = StringUtils.defaultString("org.apache.commons.lang3.Charsets");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("org.apache.commons.lang3.Charsets", string2);
      
      String string3 = StringUtils.join(floatArray0, '8', 104, (-137));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals(5, floatArray0.length);
      assertNotNull(string3);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals("", string3);
      
      String string4 = StringUtils.rotate("org.apache.commons.lang3.Charsets", (-137));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertNotNull(string4);
      assertEquals("pache.commons.lang3.Charsetsorg.a", string4);
  }

  @Test(timeout = 4000)
  public void test297()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      Locale locale0 = Locale.GERMANY;
      assertEquals("de", locale0.getLanguage());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("de_DE", locale0.toString());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("DE", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertNotNull(locale0);
      
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      assertEquals("de", locale0.getLanguage());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("de_DE", locale0.toString());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("DE", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertNotNull(set0);
      
      String string0 = StringUtils.stripEnd(",>@uZbXeCbv_hg", ",>@uZbXeCbv_hg");
      assertNotNull(string0);
      assertEquals("", string0);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "\r", (-1), 31);
      assertEquals((-1), int0);
      
      String string1 = StringUtils.substringBeforeLast("Pl'I0C0]FVY*{:`jr{`z9]NdoCi'78'>>", "AS>B(p,qwGHs@d");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("Pl'I0C0]FVY*{:`jr{`z9]NdoCi'78'>>", string1);
      
      String string2 = StringUtils.mid("Pl'I0C0]FVY*{:`jr{`z9]NdoCi'78'>>", 6, 1249);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("0]FVY*{:`jr{`z9]NdoCi'78'>>", string2);
      
      String string3 = StringUtils.defaultString("");
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      assertEquals("", string3);
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) 362;
      floatArray0[1] = (float) '>';
      floatArray0[2] = (float) 362;
      floatArray0[3] = (float) 6;
      floatArray0[4] = 844.443F;
      floatArray0[5] = (float) '>';
      floatArray0[6] = (float) '>';
      floatArray0[7] = (float) 362;
      String string4 = StringUtils.join(floatArray0, '>', 1980, (-1));
      assertTrue(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertEquals(8, floatArray0.length);
      assertNotNull(string4);
      assertArrayEquals(new float[] {362.0F, 62.0F, 362.0F, 6.0F, 844.443F, 62.0F, 62.0F, 362.0F}, floatArray0, 0.01F);
      assertEquals("", string4);
      
      String string5 = StringUtils.abbreviate(" in an array of ", "Pl'I0C0]FVY*{:`jr{`z9]NdoCi'78'>>", 362, 1249);
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertNotNull(string5);
      assertEquals(" in an array of ", string5);
  }

  @Test(timeout = 4000)
  public void test298()  throws Throwable  {
      String[] stringArray0 = StringUtils.split("object", "9Y`]eiW^{x@Rl", 3);
      assertEquals(2, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string0 = StringUtils.leftPad("object", 3);
      assertNotNull(string0);
      assertEquals("object", string0);
      
      String string1 = StringUtils.chop("Search and Replace array lengths don't match: ");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("Search and Replace array lengths don't match:", string1);
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      assertFalse(linkedList0.contains("Search and Replace array lengths don't match: "));
      
      boolean boolean0 = StringUtils.isMixedCase("object");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test299()  throws Throwable  {
      int int0 = StringUtils.ordinalIndexOf(" ", " ", 13);
      assertEquals((-1), int0);
      
      String string0 = StringUtils.abbreviate(" ", " ", 10);
      assertNotNull(string0);
      assertEquals(" ", string0);
      
      String string1 = StringUtils.deleteWhitespace("J}a0bsWE(YBuB");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("J}a0bsWE(YBuB", string1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      boolean boolean0 = StringUtils.equalsAny(" ", charSequenceArray0);
      assertEquals(0, charSequenceArray0.length);
      assertFalse(boolean0);
      
      String string2 = StringUtils.join((Object[]) charSequenceArray0, '$');
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals(0, charSequenceArray0.length);
      assertNotNull(string2);
      assertEquals("", string2);
      
      String string3 = StringUtils.overlay(" ", "J}a0bsWE(YBuB", (-1), 23);
      assertTrue(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      assertEquals("J}a0bsWE(YBuB", string3);
      
      String[] stringArray0 = new String[7];
      stringArray0[0] = "J}a0bsWE(YBuB";
      stringArray0[1] = "_*Q4?UnV\u0004B";
      stringArray0[2] = " ";
      stringArray0[3] = "J}a0bsWE(YBuB";
      stringArray0[4] = "J}a0bsWE(YBuB";
      stringArray0[5] = "";
      stringArray0[6] = " ";
      String[] stringArray1 = new String[8];
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      stringArray1[0] = "J}a0bsWE(YBuB";
      stringArray1[1] = " ";
      stringArray1[2] = "J}a0bsWE(YBuB";
      stringArray1[3] = "J}a0bsWE(YBuB";
      stringArray1[4] = "J}a0bsWE(YBuB";
      stringArray1[5] = " ";
      stringArray1[6] = " ";
      stringArray1[7] = "J}a0bsWE(YBuB";
      // Undeclared exception!
      try { 
        StringUtils.replaceEach("J}a0bsWE(YBuB", stringArray0, stringArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Search and Replace array lengths don't match: 7 vs 8
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test300()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "t7/DBWdSY|A[0X";
      String[] stringArray1 = new String[6];
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      stringArray1[0] = "org.apache.commons.lang3.ObjectUtils$Null";
      stringArray1[2] = "t7/DBWdSY|A[0X";
      stringArray1[3] = "org.apache.commons.lang3.CharUtils";
      stringArray1[4] = "t7/DBWdSY|A[0X";
      stringArray1[5] = ";^/sRgdt]";
      // Undeclared exception!
      try { 
        StringUtils.replaceEachRepeatedly("org.apache.commons.lang3.ObjectUtils$Null", stringArray0, stringArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Search and Replace array lengths don't match: 1 vs 6
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test301()  throws Throwable  {
      String[] stringArray0 = StringUtils.split("object", "9Y`]eiW^{x@Rl", 3);
      assertEquals(2, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string0 = StringUtils.prependIfMissingIgnoreCase("-5y1iX{EX`M@KK#[b", "-5y1iX{EX`M@KK#[b", stringArray0);
      assertEquals(2, stringArray0.length);
      assertNotNull(string0);
      assertEquals("-5y1iX{EX`M@KK#[b", string0);
      
      String string1 = StringUtils.lowerCase("-5y1iX{EX`M@KK#[b");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("-5y1ix{ex`m@kk#[b", string1);
      
      String[] stringArray1 = StringUtils.splitByWholeSeparator("-5y1ix{ex`m@kk#[b", "x[BEyAx", 3);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray1, stringArray0);
      assertEquals(1, stringArray1.length);
      assertNotNull(stringArray1);
      
      int[] intArray0 = new int[8];
      intArray0[1] = 3;
      intArray0[2] = 3;
      intArray0[3] = 3;
      intArray0[4] = 3;
      intArray0[6] = (int) '8';
      intArray0[7] = (int) '8';
      String string2 = StringUtils.join(intArray0, '5');
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals(8, intArray0.length);
      assertNotNull(string2);
      assertArrayEquals(new int[] {0, 3, 3, 3, 3, 0, 56, 56}, intArray0);
      assertEquals("05353535350556556", string2);
      
      int int0 = StringUtils.compare("'Sd6K_;M-=", "-5y1iX{EX`M@KK#[b", false);
      assertEquals((-6), int0);
      
      String string3 = StringUtils.rightPad("object", (-733), '5');
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      assertEquals("object", string3);
      
      String string4 = StringUtils.substring("XZc^`#{MoTqK.5MV@uN", (-2135));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertNotNull(string4);
      assertEquals("XZc^`#{MoTqK.5MV@uN", string4);
      
      String string5 = StringUtils.join((Object[]) stringArray0, '/', 0, 0);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertNotSame(stringArray0, stringArray1);
      assertEquals(2, stringArray0.length);
      assertNotNull(string5);
      assertEquals("", string5);
      
      String string6 = StringUtils.overlay("~D'nSV", (String) null, 3, 5);
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string5));
      assertNotNull(string6);
      assertEquals("~D'V", string6);
      
      // Undeclared exception!
      try { 
        StringUtils.replaceEach("~D'V", stringArray1, stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Search and Replace array lengths don't match: 1 vs 2
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test302()  throws Throwable  {
      Integer integer0 = new Integer((-324));
      assertNotNull(integer0);
      assertEquals((-324), (int)integer0);
      
      Integer integer1 = new Integer((-324));
      assertTrue(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals((-324), (int)integer1);
      
      String string0 = StringUtils.wrap("U;", "U;");
      assertNotNull(string0);
      assertEquals("U;U;U;", string0);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "U;U;U;", (CharSequence) "U;");
      assertEquals(4, int0);
      
      String string1 = StringUtils.rightPad("W.-e/sH*1O-+x", (-2731), '7');
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("W.-e/sH*1O-+x", string1);
  }

  @Test(timeout = 4000)
  public void test303()  throws Throwable  {
      String string0 = StringUtils.LF;
      assertNotNull(string0);
      assertEquals("\n", string0);
      
      int int0 = StringUtils.indexOfDifference((CharSequence) "\n", (CharSequence) "\n");
      assertEquals((-1), int0);
      
      String string1 = StringUtils.capitalize("");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
      
      String string2 = StringUtils.wrapIfMissing("MN+O9}+Lt|qQ", 'M');
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("MN+O9}+Lt|qQM", string2);
      
      String string3 = StringUtils.capitalize("");
      assertFalse(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      assertEquals("", string3);
      
      String string4 = StringUtils.remove("^Ix7#O=YJrk{VPu", 'M');
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertNotNull(string4);
      assertEquals("^Ix7#O=YJrk{VPu", string4);
      
      boolean boolean0 = StringUtils.containsNone((CharSequence) "^Ix7#O=YJrk{VPu", "7");
      assertFalse(boolean0);
      
      String[] stringArray0 = StringUtils.split("org.apache.commons.lang3.ObjectUtils", '=');
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) "^Ix7#O=YJrk{VPu";
      objectArray0[1] = (Object) "\n";
      objectArray0[2] = (Object) "^Ix7#O=YJrk{VPu";
      objectArray0[3] = (Object) "^Ix7#O=YJrk{VPu";
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      String string5 = StringUtils.join(booleanArray0, 'L');
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertEquals(2, booleanArray0.length);
      assertNotNull(string5);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      assertEquals("falseLfalse", string5);
      
      String string6 = StringUtils.substringBetween("org.apache.commons.lang3.ObjectUtils", (String) null, "D][Ll(JW");
      assertNull(string6);
      
      String string7 = StringUtils.wrap("CCM", "");
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string3));
      assertNotNull(string7);
      assertEquals("CCM", string7);
      
      String string8 = StringUtils.removeStart("", " ");
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string4));
      assertTrue(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string2));
      assertTrue(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string5));
      assertNotNull(string8);
      assertEquals("", string8);
      
      String string9 = StringUtils.getCommonPrefix(stringArray0);
      assertFalse(string9.equals((Object)string4));
      assertFalse(string9.equals((Object)string0));
      assertFalse(string9.equals((Object)string5));
      assertFalse(string9.equals((Object)string2));
      assertFalse(string9.equals((Object)string1));
      assertFalse(string9.equals((Object)string3));
      assertFalse(string9.equals((Object)string8));
      assertFalse(string9.equals((Object)string7));
      assertEquals(1, stringArray0.length);
      assertNotNull(string9);
      assertEquals("org.apache.commons.lang3.ObjectUtils", string9);
  }

  @Test(timeout = 4000)
  public void test304()  throws Throwable  {
      String string0 = StringUtils.removeStart("", "");
      assertNotNull(string0);
      assertEquals("", string0);
      
      boolean boolean0 = StringUtils.endsWithAny("", (CharSequence[]) null);
      assertFalse(boolean0);
      
      String string1 = StringUtils.substringBefore("Strings must not be null", 4165);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("Strings must not be null", string1);
      
      String string2 = StringUtils.strip("Q^)Sa");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("Q^)Sa", string2);
      
      int[] intArray0 = new int[0];
      String string3 = StringUtils.join(intArray0, 'f', 1, (-1389));
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals(0, intArray0.length);
      assertNotNull(string3);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals("", string3);
  }

  @Test(timeout = 4000)
  public void test305()  throws Throwable  {
      Integer integer0 = new Integer((-324));
      assertNotNull(integer0);
      assertEquals((-324), (int)integer0);
      
      Integer integer1 = new Integer((-324));
      assertTrue(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals((-324), (int)integer1);
      
      String string0 = StringUtils.substringBetween((String) null, "UWUwIH1");
      assertNull(string0);
      
      String string1 = StringUtils.unwrap(".ArrayUtils", (String) null);
      assertNotNull(string1);
      assertEquals(".ArrayUtils", string1);
      
      String string2 = StringUtils.center(" vs ", (-324), (String) null);
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals(" vs ", string2);
  }

  @Test(timeout = 4000)
  public void test306()  throws Throwable  {
      String string0 = StringUtils.stripAccents("");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.wrap(" is not in the range '0' - '9'", '3');
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("3 is not in the range '0' - '9'3", string1);
      
      String[] stringArray0 = StringUtils.substringsBetween("zGiqL%uA|", "tqGfjg", "tqGfjg");
      assertNull(stringArray0);
      
      String[] stringArray1 = StringUtils.splitPreserveAllTokens(" is not in the range '0' - '9'", "");
      assertEquals(1, stringArray1.length);
      assertNotNull(stringArray1);
      
      String string2 = StringUtils.replacePattern(" is not in the range '0' - '9'", "pv", "pv");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals(" is not in the range '0' - '9'", string2);
      
      int int0 = StringUtils.compare("', has a length less than 2", "pv");
      assertEquals((-73), int0);
      
      String string3 = StringUtils.substring("", (-73));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string0));
      assertNotNull(string3);
      assertEquals("", string3);
      
      boolean boolean0 = StringUtils.isAlphaSpace("");
      assertTrue(boolean0);
      
      String string4 = StringUtils.rightPad((String) null, 18, ".2Fts");
      assertNull(string4);
      
      String string5 = StringUtils.join((byte[]) null, '3', 1114111, 80);
      assertNull(string5);
  }

  @Test(timeout = 4000)
  public void test307()  throws Throwable  {
      String string0 = StringUtils.LF;
      assertNotNull(string0);
      assertEquals("\n", string0);
      
      int int0 = StringUtils.indexOfDifference((CharSequence) "\n", (CharSequence) "\n");
      assertEquals((-1), int0);
      
      String[] stringArray0 = StringUtils.split("\n", "");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      int int1 = StringUtils.indexOfIgnoreCase((CharSequence) "\n", (CharSequence) "", (-1));
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      boolean boolean0 = StringUtils.isWhitespace("");
      assertTrue(boolean0);
      
      String string1 = StringUtils.rightPad((String) null, 0, "");
      assertNull(string1);
  }

  @Test(timeout = 4000)
  public void test308()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = '$';
      charArray0[1] = 'Q';
      charArray0[2] = '$';
      charArray0[3] = '7';
      charArray0[4] = '$';
      boolean boolean0 = StringUtils.containsAny((CharSequence) "kb>K:%lR&M+Fm2*/78", charArray0);
      assertEquals(5, charArray0.length);
      assertArrayEquals(new char[] {'$', 'Q', '$', '7', '$'}, charArray0);
      assertTrue(boolean0);
      
      String string0 = StringUtils.deleteWhitespace("kb>K:%lR&M+Fm2*/78");
      assertNotNull(string0);
      assertEquals("kb>K:%lR&M+Fm2*/78", string0);
      
      int int0 = StringUtils.indexOf((CharSequence) "kb>K:%lR&M+Fm2*/78", 25, (-32768));
      assertEquals((-1), int0);
      
      Vector<Locale.LanguageRange> vector0 = new Vector<Locale.LanguageRange>();
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertNotNull(vector0);
      
      UnaryOperator<Locale.LanguageRange> unaryOperator0 = UnaryOperator.identity();
      assertNotNull(unaryOperator0);
      
      UnaryOperator<Object> unaryOperator1 = UnaryOperator.identity();
      assertNotNull(unaryOperator1);
      
      Function<Object, Locale.LanguageRange> function0 = (Function<Object, Locale.LanguageRange>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, Locale.LanguageRange> function1 = unaryOperator1.andThen((Function<? super Object, ? extends Locale.LanguageRange>) function0);
      assertFalse(function1.equals((Object)function0));
      assertNotNull(function1);
      
      Function<Object, Locale.LanguageRange> function2 = unaryOperator0.compose((Function<? super Object, ? extends Locale.LanguageRange>) function1);
      assertFalse(function1.equals((Object)function0));
      assertFalse(function2.equals((Object)function0));
      assertFalse(function2.equals((Object)function1));
      assertNotNull(function2);
      
      vector0.replaceAll(unaryOperator0);
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      
      PriorityQueue<String> priorityQueue0 = new PriorityQueue<String>();
      assertEquals(0, priorityQueue0.size());
      assertNotNull(priorityQueue0);
      assertFalse(priorityQueue0.contains("kb>K:%lR&M+Fm2*/78"));
      
      HashMap<String, List<String>> hashMap0 = new HashMap<String, List<String>>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      List<Locale.LanguageRange> list0 = Locale.LanguageRange.mapEquivalents(vector0, hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertNotNull(list0);
      
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>(list0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertNotNull(arrayList0);
      
      List<String> list1 = Locale.filterTags((List<Locale.LanguageRange>) arrayList0, (Collection<String>) priorityQueue0);
      assertEquals(0, priorityQueue0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertEquals(0, list1.size());
      assertTrue(list1.isEmpty());
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertNotNull(list1);
      assertFalse(priorityQueue0.contains("kb>K:%lR&M+Fm2*/78"));
      assertFalse(list1.contains("kb>K:%lR&M+Fm2*/78"));
      
      ArrayDeque<String> arrayDeque0 = new ArrayDeque<String>(list1);
      assertEquals(0, priorityQueue0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertEquals(0, list1.size());
      assertTrue(list1.isEmpty());
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertNotNull(arrayDeque0);
      assertFalse(priorityQueue0.contains("kb>K:%lR&M+Fm2*/78"));
      assertFalse(list1.contains("kb>K:%lR&M+Fm2*/78"));
      assertFalse(arrayDeque0.contains("kb>K:%lR&M+Fm2*/78"));
      
      boolean boolean1 = arrayDeque0.addAll(list1);
      assertEquals(0, priorityQueue0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertEquals(0, list1.size());
      assertTrue(list1.isEmpty());
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertFalse(boolean1 == boolean0);
      assertFalse(priorityQueue0.contains("kb>K:%lR&M+Fm2*/78"));
      assertFalse(list1.contains("kb>K:%lR&M+Fm2*/78"));
      assertFalse(arrayDeque0.contains("kb>K:%lR&M+Fm2*/78"));
      assertFalse(boolean1);
      
      Iterator<String> iterator0 = arrayDeque0.iterator();
      assertEquals(0, priorityQueue0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertEquals(0, list1.size());
      assertTrue(list1.isEmpty());
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertNotNull(iterator0);
      assertFalse(priorityQueue0.contains("kb>K:%lR&M+Fm2*/78"));
      assertFalse(list1.contains("kb>K:%lR&M+Fm2*/78"));
      assertFalse(arrayDeque0.contains("kb>K:%lR&M+Fm2*/78"));
      
      String string1 = StringUtils.join(iterator0, 'M');
      assertEquals(0, priorityQueue0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertEquals(0, list1.size());
      assertTrue(list1.isEmpty());
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertFalse(priorityQueue0.contains(string1));
      assertFalse(list1.contains(string1));
      assertFalse(arrayDeque0.contains(string1));
      assertEquals("", string1);
      
      String string2 = StringUtils.substringBefore(".8,J$gajVw#kS+", "ubs<");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals(".8,J$gajVw#kS+", string2);
      
      int int1 = StringUtils.getLevenshteinDistance((CharSequence) ".8,J$gajVw#kS+", (CharSequence) "kb>K:%lR&M+Fm2*/78");
      assertFalse(int1 == int0);
      assertEquals(18, int1);
  }

  @Test(timeout = 4000)
  public void test309()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Stream<String> stream0 = linkedList0.parallelStream();
      assertEquals(0, linkedList0.size());
      assertNotNull(stream0);
      
      boolean boolean0 = linkedList0.add("', is neither of type Map.Entry nor an Array");
      assertEquals(1, linkedList0.size());
      assertTrue(linkedList0.contains("', is neither of type Map.Entry nor an Array"));
      assertTrue(boolean0);
      
      LinkedList<String> linkedList1 = new LinkedList<String>();
      assertEquals(0, linkedList1.size());
      assertFalse(linkedList1.equals((Object)linkedList0));
      assertNotNull(linkedList1);
      assertFalse(linkedList1.contains("', is neither of type Map.Entry nor an Array"));
      
      boolean boolean1 = linkedList1.offerFirst((String) null);
      assertEquals(1, linkedList1.size());
      assertFalse(linkedList1.equals((Object)linkedList0));
      assertTrue(boolean1 == boolean0);
      assertNotSame(linkedList1, linkedList0);
      assertFalse(linkedList1.contains("', is neither of type Map.Entry nor an Array"));
      assertTrue(boolean1);
      
      String string0 = linkedList0.pollFirst();
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.equals((Object)linkedList1));
      assertNotSame(linkedList0, linkedList1);
      assertNotNull(string0);
      assertFalse(linkedList0.contains(string0));
      assertEquals("', is neither of type Map.Entry nor an Array", string0);
      
      String string1 = linkedList1.pollFirst();
      assertEquals(0, linkedList1.size());
      assertTrue(linkedList1.equals((Object)linkedList0));
      assertNotSame(linkedList1, linkedList0);
      assertNull(string1);
      assertFalse(linkedList1.contains(string0));
      
      String string2 = StringUtils.join((List<?>) linkedList1, 'P', (-82), (-82));
      assertEquals(0, linkedList1.size());
      assertTrue(linkedList1.equals((Object)linkedList0));
      assertFalse(string2.equals((Object)string0));
      assertNotSame(linkedList1, linkedList0);
      assertNotNull(string2);
      assertFalse(linkedList1.contains(string2));
      assertEquals("", string2);
      
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) null;
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 'P';
      doubleArray0[1] = (double) (-82);
      doubleArray0[2] = (double) 'P';
      doubleArray0[3] = (double) '\u008B';
      doubleArray0[4] = (double) (-82);
      doubleArray0[5] = (double) (-82);
      String string3 = StringUtils.join(doubleArray0, 'P', (-82), (-82));
      assertFalse(string3.equals((Object)string0));
      assertEquals(6, doubleArray0.length);
      assertNotNull(string3);
      assertArrayEquals(new double[] {80.0, (-82.0), 80.0, 139.0, (-82.0), (-82.0)}, doubleArray0, 0.01);
      assertEquals("", string3);
      
      String string4 = StringUtils.center("NU>^N/zmPh`gV", (-82));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertNotNull(string4);
      assertEquals("NU>^N/zmPh`gV", string4);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) null, (CharSequence) "NU>^N/zmPh`gV", 2652);
      assertEquals((-1), int0);
      
      String string5 = StringUtils.substring("", 2397);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertNotNull(string5);
      assertEquals("", string5);
      
      boolean boolean2 = StringUtils.isAlphaSpace((CharSequence) null);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2);
      
      String string6 = StringUtils.join(doubleArray0, '\u008B');
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string5));
      assertEquals(6, doubleArray0.length);
      assertNotNull(string6);
      assertArrayEquals(new double[] {80.0, (-82.0), 80.0, 139.0, (-82.0), (-82.0)}, doubleArray0, 0.01);
      assertEquals("80.0\u008B-82.0\u008B80.0\u008B139.0\u008B-82.0\u008B-82.0", string6);
      
      int int1 = StringUtils.countMatches((CharSequence) "80.0\u008B-82.0\u008B80.0\u008B139.0\u008B-82.0\u008B-82.0", '2');
      assertFalse(int1 == int0);
      assertEquals(3, int1);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "1qE";
      String string7 = StringUtils.replaceEachRepeatedly((String) null, stringArray0, stringArray0);
      assertEquals(1, stringArray0.length);
      assertNull(string7);
  }

  @Test(timeout = 4000)
  public void test310()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      Locale locale0 = Locale.GERMANY;
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("DE", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("de", locale0.getLanguage());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("de_DE", locale0.toString());
      assertNotNull(locale0);
      
      Locale locale1 = Locale.US;
      assertEquals("USA", locale1.getISO3Country());
      assertEquals("en", locale1.getLanguage());
      assertEquals("", locale1.getVariant());
      assertEquals("eng", locale1.getISO3Language());
      assertEquals("en_US", locale1.toString());
      assertEquals("US", locale1.getCountry());
      assertFalse(locale1.equals((Object)locale0));
      assertNotSame(locale1, locale0);
      assertNotNull(locale1);
      
      String string0 = locale0.getDisplayVariant(locale1);
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("DE", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("de", locale0.getLanguage());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("de_DE", locale0.toString());
      assertEquals("USA", locale1.getISO3Country());
      assertEquals("en", locale1.getLanguage());
      assertEquals("", locale1.getVariant());
      assertEquals("eng", locale1.getISO3Language());
      assertEquals("en_US", locale1.toString());
      assertEquals("US", locale1.getCountry());
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(locale1.equals((Object)locale0));
      assertNotSame(locale0, locale1);
      assertNotSame(locale1, locale0);
      assertNotNull(string0);
      assertEquals("", string0);
      
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("DE", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("de", locale0.getLanguage());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("de_DE", locale0.toString());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertFalse(locale0.equals((Object)locale1));
      assertNotSame(locale0, locale1);
      assertNotNull(set0);
      assertFalse(set0.contains(string0));
      
      byte[] byteArray0 = new byte[0];
      String string1 = StringUtils.join(byteArray0, 's', (-1), (-1));
      assertEquals(0, byteArray0.length);
      assertNotNull(string1);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals("", string1);
      
      int int0 = StringUtils.lastOrdinalIndexOf("", "", (-1));
      assertEquals((-1), int0);
      
      int int1 = StringUtils.lastOrdinalIndexOf("\n", " ", 30);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      boolean boolean0 = StringUtils.contains((CharSequence) "\r", (CharSequence) null);
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isAlphaSpace((CharSequence) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test311()  throws Throwable  {
      boolean boolean0 = StringUtils.containsOnly((CharSequence) null, (String) null);
      assertFalse(boolean0);
      
      String string0 = StringUtils.center((String) null, (int) (byte) (-111), "E?`n<]'l");
      assertNull(string0);
      
      String string1 = StringUtils.rightPad("E?`n<]'l", 2384);
      assertNotNull(string1);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) null, (CharSequence) null, 118);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test312()  throws Throwable  {
      int int0 = (-548);
      String string0 = StringUtils.repeat('9', (-548));
      assertNotNull(string0);
      assertEquals("", string0);
      
      // Undeclared exception!
      try { 
        StringUtils.getFuzzyDistance("", "", (Locale) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Locale must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test313()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = 'Q';
      charArray0[1] = 'O';
      charArray0[2] = '_';
      charArray0[3] = 'd';
      charArray0[4] = '!';
      charArray0[5] = 'E';
      String string0 = StringUtils.join(charArray0, 'Q');
      assertEquals(6, charArray0.length);
      assertNotNull(string0);
      assertArrayEquals(new char[] {'Q', 'O', '_', 'd', '!', 'E'}, charArray0);
      assertEquals("QQOQ_QdQ!QE", string0);
      
      int[] intArray0 = StringUtils.toCodePoints("QQOQ_QdQ!QE");
      assertEquals(11, intArray0.length);
      assertNotNull(intArray0);
      
      String string1 = StringUtils.join((Object[]) null, '_');
      assertNull(string1);
      
      String string2 = StringUtils.join((Object[]) null, "The Array must not be null");
      assertNull(string2);
      
      int int0 = StringUtils.indexOfAnyBut((CharSequence) null, (CharSequence) "The Array must not be null");
      assertEquals((-1), int0);
      
      boolean boolean0 = StringUtils.contains((CharSequence) "objectThe character ", (CharSequence) null);
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isNumericSpace((CharSequence) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test314()  throws Throwable  {
      String string0 = StringUtils.toRootUpperCase((String) null);
      assertNull(string0);
      
      CharSequence charSequence0 = StringUtils.defaultIfEmpty((CharSequence) null, (CharSequence) null);
      assertNull(charSequence0);
      
      boolean boolean0 = StringUtils.isNumericSpace((CharSequence) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test315()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("Array element ", "Array element ");
      assertEquals(2, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string0 = StringUtils.deleteWhitespace("Array element ");
      assertNotNull(string0);
      assertEquals("Arrayelement", string0);
      
      Integer integer0 = new Integer((-1199));
      assertNotNull(integer0);
      assertEquals((-1199), (int)integer0);
      
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      int int0 = StringUtils.compare("Arrayelement", "Z]@8~.", false);
      assertEquals((-25), int0);
      
      String string1 = StringUtils.center("", 56);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("                                                        ", string1);
      
      boolean boolean0 = StringUtils.isAllEmpty(stringArray0);
      assertEquals(2, stringArray0.length);
      assertTrue(boolean0);
      
      boolean boolean1 = StringUtils.containsAny((CharSequence) "Kv9XcM", (CharSequence) "Arrayelement");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string2 = StringUtils.removePattern("Z]@8~.", "                                                        ");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("Z]@8~.", string2);
  }

  @Test(timeout = 4000)
  public void test316()  throws Throwable  {
      Class<String> class0 = String.class;
      ServiceLoader<String> serviceLoader0 = ServiceLoader.loadInstalled(class0);
      assertEquals("java.util.ServiceLoader[java.lang.String]", serviceLoader0.toString());
      assertNotNull(serviceLoader0);
      
      Spliterator<String> spliterator0 = serviceLoader0.spliterator();
      assertEquals("java.util.ServiceLoader[java.lang.String]", serviceLoader0.toString());
      assertNotNull(spliterator0);
      
      Spliterator<String> spliterator1 = serviceLoader0.spliterator();
      assertEquals("java.util.ServiceLoader[java.lang.String]", serviceLoader0.toString());
      assertFalse(spliterator1.equals((Object)spliterator0));
      assertNotSame(spliterator1, spliterator0);
      assertNotNull(spliterator1);
      
      int int0 = StringUtils.compare("TOed(ag/wB@~}A5~|I", "_*=Ja$UfR0j>r=ee0u");
      assertEquals((-11), int0);
      
      String string0 = StringUtils.join((Integer[]) null);
      assertNull(string0);
      
      String string1 = StringUtils.leftPad("maxWith cannot be negative", (-2235), 'S');
      assertNotNull(string1);
      assertEquals("maxWith cannot be negative", string1);
      
      String string2 = StringUtils.repeat(':', 64);
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::", string2);
      
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      charSequenceArray0[0] = (CharSequence) "_*=Ja$UfR0j>r=ee0u";
      charSequenceArray0[1] = (CharSequence) "";
      charSequenceArray0[2] = (CharSequence) "maxWith cannot be negative";
      charSequenceArray0[3] = (CharSequence) "TOed(ag/wB@~}A5~|I";
      String string3 = StringUtils.appendIfMissingIgnoreCase("", "::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::", charSequenceArray0);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals(4, charSequenceArray0.length);
      assertNotNull(string3);
      assertEquals("", string3);
      
      String string4 = StringUtils.trimToNull("::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::");
      assertTrue(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertNotNull(string4);
      assertEquals("::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::", string4);
      
      String string5 = StringUtils.appendIfMissingIgnoreCase("maxWith cannot be negative", "::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::", charSequenceArray0);
      assertTrue(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertEquals(4, charSequenceArray0.length);
      assertNotNull(string5);
      assertEquals("maxWith cannot be negative", string5);
      
      String string6 = StringUtils.stripStart("", "");
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string5));
      assertTrue(string6.equals((Object)string3));
      assertNotNull(string6);
      assertEquals("", string6);
      
      String string7 = StringUtils.strip("EbugL([QqU?)WA", (String) null);
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string3));
      assertNotNull(string7);
      assertEquals("EbugL([QqU?)WA", string7);
      
      String string8 = StringUtils.upperCase((String) null);
      assertNull(string8);
  }

  @Test(timeout = 4000)
  public void test317()  throws Throwable  {
      Class<String> class0 = String.class;
      ServiceLoader<String> serviceLoader0 = ServiceLoader.loadInstalled(class0);
      assertEquals("java.util.ServiceLoader[java.lang.String]", serviceLoader0.toString());
      assertNotNull(serviceLoader0);
      
      Spliterator<String> spliterator0 = serviceLoader0.spliterator();
      assertEquals("java.util.ServiceLoader[java.lang.String]", serviceLoader0.toString());
      assertNotNull(spliterator0);
      
      Spliterator<String> spliterator1 = serviceLoader0.spliterator();
      assertEquals("java.util.ServiceLoader[java.lang.String]", serviceLoader0.toString());
      assertFalse(spliterator1.equals((Object)spliterator0));
      assertNotSame(spliterator1, spliterator0);
      assertNotNull(spliterator1);
      
      int int0 = StringUtils.compare("TOed(ag/wB@~}A5~|I", "_*=Ja$UfR0j>r=ee0u");
      assertEquals((-11), int0);
      
      String string0 = StringUtils.join((Integer[]) null);
      assertNull(string0);
      
      String string1 = StringUtils.leftPad("maxWith cannot be negative", (-2235), 'S');
      assertNotNull(string1);
      assertEquals("maxWith cannot be negative", string1);
      
      String string2 = StringUtils.repeat(':', 64);
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::", string2);
      
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      charSequenceArray0[0] = (CharSequence) "_*=Ja$UfR0j>r=ee0u";
      charSequenceArray0[1] = (CharSequence) "";
      charSequenceArray0[3] = (CharSequence) "TOed(ag/wB@~}A5~|I";
      String string3 = StringUtils.appendIfMissingIgnoreCase("", "::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::", charSequenceArray0);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals(4, charSequenceArray0.length);
      assertNotNull(string3);
      assertEquals("", string3);
      
      String string4 = StringUtils.trimToNull("::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::");
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string2));
      assertNotNull(string4);
      assertEquals("::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::", string4);
      
      String string5 = StringUtils.appendIfMissingIgnoreCase("maxWith cannot be negative", "::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::", charSequenceArray0);
      assertTrue(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertEquals(4, charSequenceArray0.length);
      assertNotNull(string5);
      assertEquals("maxWith cannot be negative", string5);
      
      String string6 = StringUtils.stripStart("", "");
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string4));
      assertTrue(string6.equals((Object)string3));
      assertNotNull(string6);
      assertEquals("", string6);
      
      String string7 = StringUtils.strip("EbugL([QqU?)WA", (String) null);
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string6));
      assertNotNull(string7);
      assertEquals("EbugL([QqU?)WA", string7);
      
      String string8 = StringUtils.upperCase((String) null);
      assertNull(string8);
  }

  @Test(timeout = 4000)
  public void test318()  throws Throwable  {
      String string0 = StringUtils.abbreviate("", 0, 4);
      assertNotNull(string0);
      assertEquals("", string0);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 4;
      doubleArray0[1] = (double) 4;
      doubleArray0[2] = (double) 4;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) 0;
      String string1 = StringUtils.join(doubleArray0, '\u008B', 0, 4);
      assertFalse(string1.equals((Object)string0));
      assertEquals(6, doubleArray0.length);
      assertNotNull(string1);
      assertArrayEquals(new double[] {4.0, 4.0, 4.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals("4.0\u008B4.0\u008B4.0\u008B0.0", string1);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "", (CharSequence) "", 0);
      assertEquals(0, int0);
      
      String string2 = StringUtils.substring(" ", (-3764));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals(" ", string2);
      
      boolean boolean0 = StringUtils.isAlphaSpace("4.0\u008B4.0\u008B4.0\u008B0.0");
      assertFalse(boolean0);
      
      int int1 = StringUtils.countMatches((CharSequence) " ", '2');
      assertTrue(int1 == int0);
      assertEquals(0, int1);
  }

  @Test(timeout = 4000)
  public void test319()  throws Throwable  {
      float[] floatArray0 = new float[1];
      floatArray0[0] = 0.0F;
      // Undeclared exception!
      try { 
        StringUtils.join(floatArray0, ';', (-1272), 20);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1272
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test320()  throws Throwable  {
      String string0 = StringUtils.replace("Aborting to protect against StackOverflowError - output of one loop is the input of another", "Aborting to protect against StackOverflowError - output of one loop is the input of another", "Aborting to protect against StackOverflowError - output of one loop is the input of another", 571);
      assertNotNull(string0);
      assertEquals("Aborting to protect against StackOverflowError - output of one loop is the input of another", string0);
      
      String string1 = StringUtils.replaceIgnoreCase("Aborting to protect against StackOverflowError - output of one loop is the input of another", "", "", (-4154));
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("Aborting to protect against StackOverflowError - output of one loop is the input of another", string1);
      
      int int0 = StringUtils.lastOrdinalIndexOf("Aborting to protect against StackOverflowError - output of one loop is the input of another", "Aborting to protect against StackOverflowError - output of one loop is the input of another", (-4154));
      assertEquals((-1), int0);
      
      Locale locale0 = Locale.forLanguageTag("Aborting to protect against StackOverflowError - output of one loop is the input of another");
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertNotNull(locale0);
      
      Locale locale1 = Locale.ROOT;
      assertEquals("", locale1.toString());
      assertEquals("", locale1.getISO3Country());
      assertEquals("", locale1.getVariant());
      assertEquals("", locale1.getLanguage());
      assertEquals("", locale1.getISO3Language());
      assertEquals("", locale1.getCountry());
      assertSame(locale1, locale0);
      assertNotNull(locale1);
      
      int int1 = StringUtils.getFuzzyDistance("Aborting to protect against StackOverflowError - output of one loop is the input of another", "Aborting to protect against StackOverflowError - output of one loop is the input of another", locale1);
      assertEquals("", locale1.toString());
      assertEquals("", locale1.getISO3Country());
      assertEquals("", locale1.getVariant());
      assertEquals("", locale1.getLanguage());
      assertEquals("", locale1.getISO3Language());
      assertEquals("", locale1.getCountry());
      assertFalse(int1 == int0);
      assertSame(locale1, locale0);
      assertEquals(271, int1);
      
      int int2 = 1632;
      String string2 = StringUtils.mid("u-](", 1632, 571);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("", string2);
      
      String string3 = StringUtils.defaultString("]");
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      assertEquals("]", string3);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = 0.0F;
      floatArray0[1] = (float) 571;
      floatArray0[2] = 0.0F;
      floatArray0[3] = (float) 31;
      floatArray0[4] = (float) 2293;
      floatArray0[5] = (-1.0F);
      // Undeclared exception!
      try { 
        StringUtils.join(floatArray0, 'R', (-4154), 3160);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -4154
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test321()  throws Throwable  {
      boolean boolean0 = StringUtils.containsIgnoreCase("(Ad{JKkvP]^ry2!*I~", "q@F!X#Ug_t@");
      assertFalse(boolean0);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "(Ad{JKkvP]^ry2!*I~", (CharSequence) "(Ad{JKkvP]^ry2!*I~");
      assertEquals(0, int0);
      
      int int1 = StringUtils.indexOf((CharSequence) "q@F!X#Ug_t@", 0, 0);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      String[] stringArray0 = StringUtils.splitByCharacterType("(Ad{JKkvP]^ry2!*I~");
      assertEquals(14, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string0 = StringUtils.replaceIgnoreCase("?#vrV?k&cX8V\".B94PF", "?#vrV?k&cX8V\".B94PF", "R. ?Ytf.U0lpBISX", 100);
      assertNotNull(string0);
      assertEquals("R. ?Ytf.U0lpBISX", string0);
      
      String string1 = StringUtils.swapCase((String) null);
      assertNull(string1);
      
      String string2 = StringUtils.normalizeSpace((String) null);
      assertNull(string2);
  }

  @Test(timeout = 4000)
  public void test322()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = '$';
      charArray0[1] = 'Q';
      charArray0[2] = '$';
      charArray0[3] = '7';
      charArray0[4] = '$';
      boolean boolean0 = StringUtils.containsAny((CharSequence) "kb>K:%lR&M+Fm2*/78", charArray0);
      assertEquals(5, charArray0.length);
      assertArrayEquals(new char[] {'$', 'Q', '$', '7', '$'}, charArray0);
      assertTrue(boolean0);
      
      String string0 = StringUtils.deleteWhitespace("kb>K:%lR&M+Fm2*/78");
      assertNotNull(string0);
      assertEquals("kb>K:%lR&M+Fm2*/78", string0);
      
      int int0 = StringUtils.indexOf((CharSequence) "kb>K:%lR&M+Fm2*/78", 25, (-32768));
      assertEquals((-1), int0);
      
      int int1 = StringUtils.compare((String) null, "9j0-+ji_s");
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      String string1 = StringUtils.substring(")!1XjMA#y,~aU", 5);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("MA#y,~aU", string1);
      
      boolean boolean1 = StringUtils.isAlphaSpace("kb>K:%lR&M+Fm2*/78");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string2 = StringUtils.rightPad("kb>K:%lR&M+Fm2*/78", 322, "gXYl'|2.y");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("kb>K:%lR&M+Fm2*/78gXYl'|2.ygXYl'|2.ygXYl'|2.ygXYl'|2.ygXYl'|2.ygXYl'|2.ygXYl'|2.ygXYl'|2.ygXYl'|2.ygXYl'|2.ygXYl'|2.ygXYl'|2.ygXYl'|2.ygXYl'|2.ygXYl'|2.ygXYl'|2.ygXYl'|2.ygXYl'|2.ygXYl'|2.ygXYl'|2.ygXYl'|2.ygXYl'|2.ygXYl'|2.ygXYl'|2.ygXYl'|2.ygXYl'|2.ygXYl'|2.ygXYl'|2.ygXYl'|2.ygXYl'|2.ygXYl'|2.ygXYl'|2.ygXYl'|2.ygXYl'|2", string2);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)126;
      byteArray0[1] = (byte)39;
      byteArray0[2] = (byte)77;
      byteArray0[3] = (byte) (-5);
      byteArray0[4] = (byte)11;
      // Undeclared exception!
      try { 
        StringUtils.join(byteArray0, 'O', 10, 322);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 10
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test323()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      String string0 = StringUtils.defaultString("");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.defaultIfEmpty("", "[IAwU9");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("[IAwU9", string1);
  }

  @Test(timeout = 4000)
  public void test324()  throws Throwable  {
      boolean boolean0 = StringUtils.isAllUpperCase("}L~.");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test325()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      Locale locale0 = Locale.GERMANY;
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("de", locale0.getLanguage());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("DE", locale0.getCountry());
      assertEquals("de_DE", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertNotNull(locale0);
      
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("de", locale0.getLanguage());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("DE", locale0.getCountry());
      assertEquals("de_DE", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertNotNull(set0);
      
      String string0 = StringUtils.substringAfter("\n", 598);
      assertNotNull(string0);
      assertEquals("", string0);
      
      int int0 = StringUtils.length("");
      assertEquals(0, int0);
      
      String string1 = StringUtils.abbreviate("", "", 77);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[6];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "\n";
      charSequenceArray0[2] = (CharSequence) " ";
      charSequenceArray0[3] = (CharSequence) "";
      charSequenceArray0[4] = (CharSequence) "\r";
      String string2 = StringUtils.deleteWhitespace("\n");
      assertTrue(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("", string2);
      
      charSequenceArray0[5] = (CharSequence) "";
      boolean boolean0 = StringUtils.equalsAny(" ", charSequenceArray0);
      assertEquals(6, charSequenceArray0.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test326()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Stream<String> stream0 = linkedList0.parallelStream();
      assertEquals(0, linkedList0.size());
      assertNotNull(stream0);
      
      boolean boolean0 = linkedList0.add("', is neither of type Map.Entry nor an Array");
      assertEquals(1, linkedList0.size());
      assertTrue(linkedList0.contains("', is neither of type Map.Entry nor an Array"));
      assertTrue(boolean0);
      
      LinkedList<String> linkedList1 = new LinkedList<String>();
      assertEquals(0, linkedList1.size());
      assertFalse(linkedList1.equals((Object)linkedList0));
      assertNotNull(linkedList1);
      assertFalse(linkedList1.contains("', is neither of type Map.Entry nor an Array"));
      
      boolean boolean1 = linkedList1.offerFirst((String) null);
      assertEquals(1, linkedList1.size());
      assertFalse(linkedList1.equals((Object)linkedList0));
      assertTrue(boolean1 == boolean0);
      assertNotSame(linkedList1, linkedList0);
      assertFalse(linkedList1.contains("', is neither of type Map.Entry nor an Array"));
      assertTrue(boolean1);
      
      String string0 = linkedList0.pollFirst();
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.equals((Object)linkedList1));
      assertNotSame(linkedList0, linkedList1);
      assertNotNull(string0);
      assertFalse(linkedList0.contains(string0));
      assertEquals("', is neither of type Map.Entry nor an Array", string0);
      
      String string1 = linkedList1.pollFirst();
      assertEquals(0, linkedList1.size());
      assertTrue(linkedList1.equals((Object)linkedList0));
      assertNotSame(linkedList1, linkedList0);
      assertNull(string1);
      assertFalse(linkedList1.contains(string0));
      
      String string2 = StringUtils.join((List<?>) linkedList1, 'P', (-82), (-82));
      assertEquals(0, linkedList1.size());
      assertTrue(linkedList1.equals((Object)linkedList0));
      assertFalse(string2.equals((Object)string0));
      assertNotSame(linkedList1, linkedList0);
      assertNotNull(string2);
      assertFalse(linkedList1.contains(string0));
      assertEquals("", string2);
      
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) null;
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[1] = object0;
      String string3 = StringUtils.join(objectArray0, 'h');
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals(2, objectArray0.length);
      assertNotNull(string3);
      
      String string4 = StringUtils.stripAccents("\"IP'TI/m`j2");
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertNotNull(string4);
      assertEquals("\"IP'TI/m`j2", string4);
      
      long[] longArray0 = new long[0];
      String string5 = StringUtils.join(longArray0, 'h');
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertEquals(0, longArray0.length);
      assertNotNull(string5);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals("", string5);
      
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "hjava.lang.Object@35dbb65b", (CharSequence) "\"IP'TI/m`j2");
      assertEquals(0, int0);
      
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short)46;
      shortArray0[1] = (short)1096;
      shortArray0[2] = (short) (-2389);
      shortArray0[3] = (short)53;
      shortArray0[4] = (short) (-2848);
  }

  @Test(timeout = 4000)
  public void test327()  throws Throwable  {
      String string0 = StringUtils.abbreviate("bg1&:{)wot>X", (-671), 18);
      assertNotNull(string0);
      assertEquals("bg1&:{)wot>X", string0);
      
      String string1 = StringUtils.left("aX-1.0x-412.24x1.0x-2592.4207x-2730.193aX-1.0x-412.24x1.0x-2592.4207x-2730.193aX-1.0x-412.24x1.0x-2592.4207x-2730.193-1.0x-412.24x1.0x-2592.4207x-2730.193nt ", (-671));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
      
      long[] longArray0 = new long[8];
      longArray0[0] = (long) 18;
      longArray0[1] = (long) 18;
      longArray0[2] = (long) (-671);
      longArray0[3] = (long) 18;
      longArray0[4] = (long) (-671);
      longArray0[5] = (-1L);
      longArray0[6] = (long) 18;
      String string2 = StringUtils.stripEnd("", "Minimum abbreviation width with offset is %d");
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("", string2);
  }

  @Test(timeout = 4000)
  public void test328()  throws Throwable  {
      int int0 = StringUtils.ordinalIndexOf(" ", " ", 13);
      assertEquals((-1), int0);
      
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short)2;
      shortArray0[1] = (short)2;
      shortArray0[2] = (short)2;
      shortArray0[3] = (short)2;
      shortArray0[4] = (short)2;
      shortArray0[5] = (short)122;
      shortArray0[6] = (short) (-1);
      String string0 = StringUtils.join(shortArray0, 'w', 5, (int) (short)2);
      assertEquals(7, shortArray0.length);
      assertNotNull(string0);
      assertArrayEquals(new short[] {(short)2, (short)2, (short)2, (short)2, (short)2, (short)122, (short) (-1)}, shortArray0);
      assertEquals("", string0);
      
      String string1 = StringUtils.getDigits("!7:Qt6dCnXT?4^J<6");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("7646", string1);
      
      int int1 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "7646", (CharSequence) "7646", (-2389));
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      String string2 = StringUtils.join(booleanArray0, '>', (int) (short)2, Integer.MIN_VALUE);
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals(3, booleanArray0.length);
      assertNotNull(string2);
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray0));
      assertEquals("", string2);
      
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) (short) (-1);
      objectArray0[1] = (Object) (short)2;
      String string3 = StringUtils.joinWith("", objectArray0);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals(2, objectArray0.length);
      assertNotNull(string3);
      assertEquals("-12", string3);
      
      int int2 = StringUtils.lastIndexOf((CharSequence) "!7:Qt6dCnXT?4^J<6", (-2389));
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals((-1), int2);
      
      // Undeclared exception!
      try { 
        Charset.forName("N@>");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // N@>
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test329()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = '$';
      charArray0[1] = 'Q';
      charArray0[2] = '$';
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Stream<String> stream0 = linkedList0.parallelStream();
      assertEquals(0, linkedList0.size());
      assertNotNull(stream0);
      
      boolean boolean0 = linkedList0.add("kb>K:%lR&M+Fm2*/78");
      assertEquals(1, linkedList0.size());
      assertTrue(linkedList0.contains("kb>K:%lR&M+Fm2*/78"));
      assertTrue(boolean0);
      
      boolean boolean1 = linkedList0.offerFirst("q=|9AC");
      assertEquals(2, linkedList0.size());
      assertTrue(boolean1 == boolean0);
      assertTrue(linkedList0.contains("q=|9AC"));
      assertTrue(boolean1);
      
      String string0 = linkedList0.pollFirst();
      assertEquals(1, linkedList0.size());
      assertNotNull(string0);
      assertTrue(linkedList0.contains("kb>K:%lR&M+Fm2*/78"));
      assertFalse(linkedList0.contains("q=|9AC"));
      assertEquals("q=|9AC", string0);
      
      String string1 = linkedList0.pollFirst();
      assertEquals(0, linkedList0.size());
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertFalse(linkedList0.contains("q=|9AC"));
      assertEquals("kb>K:%lR&M+Fm2*/78", string1);
      
      String string2 = StringUtils.join((List<?>) linkedList0, '4', (-1037), (-1037));
      assertEquals(0, linkedList0.size());
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertFalse(linkedList0.contains(string2));
      assertEquals("", string2);
      
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) linkedList0;
      objectArray0[1] = (Object) '$';
      objectArray0[2] = (Object) "kb>K:%lR&M+Fm2*/78";
      String string3 = StringUtils.join(objectArray0, 'O');
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals(3, objectArray0.length);
      assertNotNull(string3);
      assertEquals("[]O$Okb>K:%lR&M+Fm2*/78", string3);
      
      String string4 = StringUtils.stripAccents("Search and Replace array lengths don't match: ");
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertNotNull(string4);
      assertEquals("Search and Replace array lengths don't match: ", string4);
      
      String string5 = StringUtils.stripEnd("Pl'I0C0]FVY*{:`jr{`", (String) null);
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertNotNull(string5);
      assertEquals("Pl'I0C0]FVY*{:`jr{`", string5);
  }

  @Test(timeout = 4000)
  public void test330()  throws Throwable  {
      Object[] objectArray0 = new Object[4];
      String[] stringArray0 = new String[0];
      char[] charArray0 = new char[4];
      charArray0[0] = '%';
      charArray0[1] = ']';
      charArray0[2] = '{';
      charArray0[3] = 'V';
      boolean boolean0 = StringUtils.containsAny((CharSequence) "Index: ", charArray0);
      assertEquals(4, charArray0.length);
      assertArrayEquals(new char[] {'%', ']', '{', 'V'}, charArray0);
      assertFalse(boolean0);
      
      String string0 = StringUtils.deleteWhitespace(" w7");
      assertNotNull(string0);
      assertEquals("w7", string0);
      
      String string1 = StringUtils.stripAccents(" w7");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(" w7", string1);
      
      Class<Object> class0 = Object.class;
      ServiceLoader<Object> serviceLoader0 = ServiceLoader.loadInstalled(class0);
      assertEquals("java.util.ServiceLoader[java.lang.Object]", serviceLoader0.toString());
      assertNotNull(serviceLoader0);
      
      String string2 = StringUtils.removeEnd((String) null, "w7");
      assertNull(string2);
      
      double double0 = StringUtils.getJaroWinklerDistance("The character ", "gXYl'|2.y");
      assertEquals(0.0, double0, 0.01);
      
      String[] stringArray1 = StringUtils.splitByWholeSeparator("c9n)]]6", "The character ");
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray1, stringArray0);
      assertEquals(1, stringArray1.length);
      assertNotNull(stringArray1);
  }

  @Test(timeout = 4000)
  public void test331()  throws Throwable  {
      String string0 = StringUtils.replace("Aborting to protect against StackOverflowError - output of one loop is the input of another", "Aborting to protect against StackOverflowError - output of one loop is the input of another", "Aborting to protect against StackOverflowError - output of one loop is the input of another", 571);
      assertNotNull(string0);
      assertEquals("Aborting to protect against StackOverflowError - output of one loop is the input of another", string0);
      
      String string1 = StringUtils.replaceIgnoreCase("Aborting to protect against StackOverflowError - output of one loop is the input of another", "", "", (-4154));
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("Aborting to protect against StackOverflowError - output of one loop is the input of another", string1);
      
      int int0 = StringUtils.lastOrdinalIndexOf("Aborting to protect against StackOverflowError - output of one loop is the input of another", "Aborting to protect against StackOverflowError - output of one loop is the input of another", (-4154));
      assertEquals((-1), int0);
      
      Locale locale0 = Locale.forLanguageTag("Aborting to protect against StackOverflowError - output of one loop is the input of another");
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.toString());
      assertNotNull(locale0);
      
      Locale locale1 = Locale.ROOT;
      assertEquals("", locale1.getISO3Country());
      assertEquals("", locale1.getLanguage());
      assertEquals("", locale1.getISO3Language());
      assertEquals("", locale1.getVariant());
      assertEquals("", locale1.getCountry());
      assertEquals("", locale1.toString());
      assertSame(locale1, locale0);
      assertNotNull(locale1);
      
      int int1 = StringUtils.getFuzzyDistance("Aborting to protect against StackOverflowError - output of one loop is the input of another", "Aborting to protect against StackOverflowError - output of one loop is the input of another", locale1);
      assertEquals("", locale1.getISO3Country());
      assertEquals("", locale1.getLanguage());
      assertEquals("", locale1.getISO3Language());
      assertEquals("", locale1.getVariant());
      assertEquals("", locale1.getCountry());
      assertEquals("", locale1.toString());
      assertFalse(int1 == int0);
      assertSame(locale1, locale0);
      assertEquals(271, int1);
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'M';
      charArray0[1] = '5';
      charArray0[2] = '5';
      charArray0[3] = '2';
      String string2 = StringUtils.join(charArray0, 'M', 1577, 9);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals(4, charArray0.length);
      assertNotNull(string2);
      assertArrayEquals(new char[] {'M', '5', '5', '2'}, charArray0);
      assertEquals("", string2);
      
      boolean boolean0 = StringUtils.isNumericSpace("");
      assertTrue(boolean0);
      
      String string3 = StringUtils.rightPad("lU%W;e:", 571);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      assertEquals("lU%W;estring3);
      
      Locale locale2 = Locale.ENGLISH;
      assertEquals("en", locale2.getLanguage());
      assertEquals("", locale2.getCountry());
      assertEquals("eng", locale2.getISO3Language());
      assertEquals("", locale2.getISO3Country());
      assertEquals("", locale2.getVariant());
      assertEquals("en", locale2.toString());
      assertFalse(locale2.equals((Object)locale1));
      assertFalse(locale2.equals((Object)locale0));
      assertNotSame(locale2, locale1);
      assertNotSame(locale2, locale0);
      assertNotNull(locale2);
      
      int int2 = StringUtils.getFuzzyDistance("", "", locale2);
      assertEquals("en", locale2.getLanguage());
      assertEquals("", locale2.getCountry());
      assertEquals("eng", locale2.getISO3Language());
      assertEquals("", locale2.getISO3Country());
      assertEquals("", locale2.getVariant());
      assertEquals("en", locale2.toString());
      assertFalse(locale2.equals((Object)locale1));
      assertFalse(locale2.equals((Object)locale0));
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertNotSame(locale2, locale1);
      assertNotSame(locale2, locale0);
      assertEquals(0, int2);
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      assertFalse(linkedList0.contains('M'));
      
      Iterator<Object> iterator0 = linkedList0.iterator();
      assertEquals(0, linkedList0.size());
      assertNotNull(iterator0);
      assertFalse(linkedList0.contains('M'));
      
      String string4 = StringUtils.join(iterator0, "aX-1.0x-412.24x1.0x-2592.4207x-2730.193aX-1.0x-412.24x1.0x-2592.4207x-2730.193aX-1.0x-412.24x1.0x-2592.4207x-2730.193-1.0x-412.24x1.0x-2592.4207x-2730.193aX-1.0x-412.24x1.0x-2592.4207x-2730.193aX-1.0x-412.24x1.0x-2592.4207x-2730.193aX-1.0x-412.24x1.0x-2592.4207x-2730.193-1.0x-412.24x1.0x-2592.4207x-2730.193");
      assertEquals(0, linkedList0.size());
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertNotNull(string4);
      assertFalse(linkedList0.contains('M'));
      assertEquals("", string4);
  }

  @Test(timeout = 4000)
  public void test332()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      Locale locale0 = Locale.GERMANY;
      assertEquals("de", locale0.getLanguage());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("de_DE", locale0.toString());
      assertEquals("DE", locale0.getCountry());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertNotNull(locale0);
      
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      assertEquals("de", locale0.getLanguage());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("de_DE", locale0.toString());
      assertEquals("DE", locale0.getCountry());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertNotNull(set0);
      
      String string0 = StringUtils.substringAfter("\n", 598);
      assertNotNull(string0);
      assertEquals("", string0);
      
      int int0 = StringUtils.length("");
      assertEquals(0, int0);
      
      String string1 = StringUtils.strip("YhJXeCeXp@Jl!n6", " vs ");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("YhJXeCeXp@Jl!n6", string1);
      
      int int1 = StringUtils.indexOfAny((CharSequence) "", "YhJXeCeXp@Jl!n6");
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      PriorityQueue<Object> priorityQueue0 = new PriorityQueue<Object>();
      assertEquals(0, priorityQueue0.size());
      assertNotNull(priorityQueue0);
      assertFalse(priorityQueue0.contains("\n"));
      
      String string2 = StringUtils.join((Iterable<?>) priorityQueue0, 'd');
      assertEquals(0, priorityQueue0.size());
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertFalse(priorityQueue0.contains("\n"));
      assertEquals("", string2);
  }

  @Test(timeout = 4000)
  public void test333()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("Array element ", (String) null);
      assertEquals(3, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string0 = StringUtils.deleteWhitespace((String) null);
      assertNull(string0);
      
      Integer[] integerArray0 = new Integer[4];
      Integer integer0 = new Integer((-943));
      assertNotNull(integer0);
      assertEquals((-943), (int)integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((-2016));
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals((-2016), (int)integer1);
      
      integerArray0[1] = integer1;
      Integer integer2 = new Integer((int) integerArray0[1]);
      assertTrue(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      assertEquals(4, integerArray0.length);
      assertNotNull(integer2);
      assertEquals((-2016), (int)integer2);
      
      integerArray0[2] = integer2;
      char[] charArray0 = new char[8];
      charArray0[0] = 'U';
      charArray0[1] = 'P';
      charArray0[2] = '\u0015';
      charArray0[3] = '&';
      charArray0[4] = 'U';
      charArray0[5] = 'U';
      int int0 = StringUtils.indexOfAny((CharSequence) null, ":W3vjMB@");
      assertEquals((-1), int0);
      
      boolean boolean0 = StringUtils.equalsAny("Array element ", stringArray0);
      assertEquals(3, stringArray0.length);
      assertFalse(boolean0);
      
      CharSequence charSequence0 = StringUtils.defaultIfBlank((CharSequence) null, (CharSequence) ":W3vjMB@");
      assertNotNull(charSequence0);
      assertEquals(":W3vjMB@", charSequence0);
      
      boolean boolean1 = StringUtils.isAlphanumericSpace(":W3vjMB@");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string1 = StringUtils.substringAfterLast(":W3vjMB@", (int) integerArray0[0]);
      assertFalse(string1.equals((Object)charSequence0));
      assertEquals(4, integerArray0.length);
      assertNotNull(string1);
      assertEquals("", string1);
      
      String[] stringArray1 = StringUtils.split("", 'u');
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray1, stringArray0);
      assertEquals(0, stringArray1.length);
      assertNotNull(stringArray1);
      
      String[] stringArray2 = StringUtils.splitPreserveAllTokens("Array element ", "Minimum abbreviation width with offset is %d");
      assertFalse(stringArray2.equals((Object)stringArray1));
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertNotSame(stringArray2, stringArray1);
      assertNotSame(stringArray2, stringArray0);
      assertEquals(12, stringArray2.length);
      assertNotNull(stringArray2);
  }

  @Test(timeout = 4000)
  public void test334()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      Locale locale0 = Locale.GERMANY;
      assertEquals("de_DE", locale0.toString());
      assertEquals("DE", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("de", locale0.getLanguage());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("deu", locale0.getISO3Language());
      assertNotNull(locale0);
      
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      assertEquals("de_DE", locale0.toString());
      assertEquals("DE", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("de", locale0.getLanguage());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertNotNull(set0);
      
      byte[] byteArray0 = new byte[0];
      String string0 = StringUtils.join(byteArray0, 's', (-1), (-1));
      assertEquals(0, byteArray0.length);
      assertNotNull(string0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals("", string0);
      
      int int0 = StringUtils.lastOrdinalIndexOf("", "", (-1));
      assertEquals((-1), int0);
      
      Object[] objectArray0 = new Object[4];
      objectArray0[2] = (Object) stringUtils0;
      String string1 = StringUtils.join(objectArray0, "\r");
      assertFalse(string1.equals((Object)string0));
      assertEquals(4, objectArray0.length);
      assertNotNull(string1);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("", 's');
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string2 = StringUtils.getCommonPrefix(stringArray0);
      assertFalse(string2.equals((Object)string1));
      assertEquals(0, stringArray0.length);
      assertNotNull(string2);
      assertEquals("", string2);
      
      String string3 = StringUtils.leftPad("', is neither of type Map.Entry nor an ArrayMinimum abbreviation width with offset is %d", (-1), 's');
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      assertEquals("', is neither of type Map.Entry nor an ArrayMinimum abbreviation width with offset is %d", string3);
  }

  @Test(timeout = 4000)
  public void test335()  throws Throwable  {
      String string0 = StringUtils.capitalize("");
      assertNotNull(string0);
      assertEquals("", string0);
      
      boolean boolean0 = StringUtils.isAnyEmpty((CharSequence[]) null);
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isAllUpperCase("");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      int int0 = StringUtils.indexOf((CharSequence) "", (-4939));
      assertEquals((-1), int0);
      
      String string1 = StringUtils.substringAfterLast((String) null, (String) null);
      assertNull(string1);
  }

  @Test(timeout = 4000)
  public void test336()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = 'Q';
      String string0 = StringUtils.join((Iterator<?>) null, "");
      assertNull(string0);
      
      int int0 = StringUtils.indexOfAnyBut((CharSequence) null, (CharSequence) "");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test337()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = '$';
      charArray0[1] = 'Q';
      charArray0[2] = '$';
      charArray0[3] = '7';
      charArray0[4] = '$';
      boolean boolean0 = StringUtils.containsAny((CharSequence) "kb>K:%lR&M+Fm2*/78", charArray0);
      assertEquals(5, charArray0.length);
      assertArrayEquals(new char[] {'$', 'Q', '$', '7', '$'}, charArray0);
      assertTrue(boolean0);
      
      String string0 = StringUtils.deleteWhitespace("kb>K:%lR&M+Fm2*/78");
      assertNotNull(string0);
      assertEquals("kb>K:%lR&M+Fm2*/78", string0);
      
      String string1 = StringUtils.stripAccents("gXYl'|2.y");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("gXYl'|2.y", string1);
      
      Class<Object> class0 = Object.class;
      ServiceLoader<Object> serviceLoader0 = ServiceLoader.loadInstalled(class0);
      assertEquals("java.util.ServiceLoader[java.lang.Object]", serviceLoader0.toString());
      assertNotNull(serviceLoader0);
      
      String string2 = StringUtils.removeEnd("\r", ".");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("\r", string2);
      
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      charSequenceArray0[0] = (CharSequence) "The character ";
      String string3 = StringUtils.appendIfMissing("gXYl'|2.y", "\r", charSequenceArray0);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals(1, charSequenceArray0.length);
      assertNotNull(string3);
      assertEquals("gXYl'|2.y\r", string3);
      
      double double0 = StringUtils.getJaroWinklerDistance(charSequenceArray0[0], "kb>K:%lR&M+Fm2*/78");
      assertEquals(1, charSequenceArray0.length);
      assertEquals(0.0, double0, 0.01);
      
      String string4 = StringUtils.repeat("", 8192);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertNotNull(string4);
      assertEquals("", string4);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "gXYl'|2.y", (CharSequence) "\r", 1191);
      assertEquals((-1), int0);
      
      String string5 = StringUtils.CR;
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertTrue(string5.equals((Object)string2));
      assertNotNull(string5);
      assertEquals("\r", string5);
      
      String string6 = StringUtils.remove("gXYl'|2.y", 'c');
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string2));
      assertTrue(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string0));
      assertNotNull(string6);
      assertEquals("gXYl'|2.y", string6);
      
      boolean boolean1 = StringUtils.isNoneEmpty(charSequenceArray0);
      assertTrue(boolean1 == boolean0);
      assertEquals(1, charSequenceArray0.length);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test338()  throws Throwable  {
      String string0 = StringUtils.defaultString("", "");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.removePattern("", "");
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
      
      Locale locale0 = Locale.GERMANY;
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("de", locale0.getLanguage());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("DE", locale0.getCountry());
      assertEquals("de_DE", locale0.toString());
      assertNotNull(locale0);
      
      Stack<Locale.LanguageRange> stack0 = new Stack<Locale.LanguageRange>();
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertNotNull(stack0);
      
      Locale.LanguageRange locale_LanguageRange0 = null;
      try {
        locale_LanguageRange0 = new Locale.LanguageRange((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Locale$LanguageRange", e);
      }
  }

  @Test(timeout = 4000)
  public void test339()  throws Throwable  {
      String string0 = StringUtils.join((boolean[]) null, 'D');
      assertNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[0] = (CharSequence) null;
      charSequenceArray0[1] = (CharSequence) null;
      boolean boolean0 = StringUtils.isAnyEmpty(charSequenceArray0);
      assertEquals(2, charSequenceArray0.length);
      assertTrue(boolean0);
      
      String string1 = StringUtils.removeStartIgnoreCase(", Length: 0", ", Length: 0");
      assertNotNull(string1);
      assertEquals("", string1);
      
      int int0 = StringUtils.countMatches((CharSequence) ", Length: 0", (CharSequence) null);
      assertEquals(0, int0);
      
      String string2 = StringUtils.join((Object[]) charSequenceArray0, ", Length: 0", 0, 0);
      assertTrue(string2.equals((Object)string1));
      assertEquals(2, charSequenceArray0.length);
      assertNotNull(string2);
      assertEquals("", string2);
      
      String string3 = StringUtils.rotate("Threshold must not be negativez9]NdoCi'78'>>", 1583);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      assertEquals("hreshold must not be negativez9]NdoCi'78'>>T", string3);
  }

  @Test(timeout = 4000)
  public void test340()  throws Throwable  {
      String string0 = StringUtils.removeEndIgnoreCase("Z=`%d=7wr7,/{8`", "Z=`%d=7wr7,/{8`");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.rightPad(" ", 65, '.');
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(" ................................................................", string1);
      
      int int0 = StringUtils.countMatches((CharSequence) " ................................................................", (CharSequence) " ................................................................");
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test341()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      String string0 = StringUtils.rightPad("", (-1));
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.left(", Length ", 1025);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(", Length ", string1);
      
      String string2 = StringUtils.leftPad(" ", 1025, "\r");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      int int0 = StringUtils.indexOfAnyBut((CharSequence) string2, (CharSequence) ", Length ");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals(0, int0);
      
      boolean boolean0 = StringUtils.containsWhitespace(", Length ");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test342()  throws Throwable  {
      Integer integer0 = new Integer((-324));
      assertNotNull(integer0);
      assertEquals((-324), (int)integer0);
      
      Integer integer1 = new Integer((-324));
      assertTrue(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals((-324), (int)integer1);
      
      String string0 = StringUtils.rightPad("6w#yEdv|M/NKamq&Rr", (-324));
      assertNotNull(string0);
      assertEquals("6w#yEdv|M/NKamq&Rr", string0);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "6w#yEdv|M/NKamq&Rr", (CharSequence) "6w#yEdv|M/NKamq&Rr");
      assertEquals(0, int0);
      
      boolean boolean0 = StringUtils.isWhitespace("6w#yEdv|M/NKamq&Rr");
      assertFalse(boolean0);
      
      String string1 = StringUtils.rightPad("6w#yEdv|M/NKamq&Rr", (-324), '5');
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("6w#yEdv|M/NKamq&Rr", string1);
      
      String string2 = StringUtils.substring("Kl", 537);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("", string2);
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) integer0;
      String string3 = StringUtils.join(objectArray0, '!', 2147483645, 0);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals(1, objectArray0.length);
      assertNotNull(string3);
      assertEquals("", string3);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      // Undeclared exception!
      try { 
        StringUtils.join(objectArray0, '6', 256, 537);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 256
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test343()  throws Throwable  {
      String string0 = StringUtils.removeStartIgnoreCase(":6\"%y#5t>,5Q", ":6\"%y#5t>,5Q");
      assertNotNull(string0);
      assertEquals("", string0);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) null, (CharSequence) ":6\"%y#5t>,5Q");
      assertEquals((-1), int0);
      
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) "";
      objectArray0[1] = (Object) null;
      String string1 = StringUtils.join(objectArray0, ":6\"%y#5t>,5Q", (-1), (-1));
      assertTrue(string1.equals((Object)string0));
      assertEquals(2, objectArray0.length);
      assertNotNull(string1);
      assertEquals("", string1);
      
      try { 
        StringUtils.getBytes("Object varargs must not be null", ":6\"%y#5t>,5Q");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(UnsupportedEncodingException e) {
      }
  }

  @Test(timeout = 4000)
  public void test344()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[8];
      float[] floatArray0 = new float[5];
      floatArray0[0] = (-1.0F);
      floatArray0[1] = (-412.24F);
      floatArray0[2] = 1.0F;
      floatArray0[3] = (-2592.42F);
      floatArray0[4] = (-2730.193F);
      String string0 = StringUtils.join(floatArray0, 'x');
      assertEquals(5, floatArray0.length);
      assertNotNull(string0);
      assertArrayEquals(new float[] {(-1.0F), (-412.24F), 1.0F, (-2592.42F), (-2730.193F)}, floatArray0, 0.01F);
      assertEquals("-1.0x-412.24x1.0x-2592.42x-2730.193", string0);
      
      charSequenceArray0[0] = (CharSequence) "-1.0x-412.24x1.0x-2592.42x-2730.193";
      int int0 = StringUtils.compare("=`%d=7wr7,/{8`", "TOed(ag/wB@~}A5~|IThe character ");
      assertEquals((-23), int0);
      
      String string1 = StringUtils.substring("-1.0x-412.24x1.0x-2592.42x-2730.193", 48);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
      
      String string2 = StringUtils.leftPad("=mTq", (-23));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("=mTq", string2);
      
      int int1 = StringUtils.compareIgnoreCase("=`%d=7wr7,/{8`", "-1.0x-412.24x1.0x-2592.42x-2730.193", true);
      assertFalse(int1 == int0);
      assertEquals(16, int1);
  }

  @Test(timeout = 4000)
  public void test345()  throws Throwable  {
      String string0 = "";
      String string1 = StringUtils.substring("", (-2854));
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'y';
      charArray0[1] = 'H';
      int int0 = 106;
      // Undeclared exception!
      try { 
        StringUtils.join(charArray0, 'H', (-3371), 106);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -3371
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test346()  throws Throwable  {
      int int0 = 16;
      String string0 = StringUtils.repeat('Q', 16);
      assertNotNull(string0);
      assertEquals("QQQQQQQQQQQQQQQQ", string0);
      
      int int1 = StringUtils.lastIndexOf((CharSequence) "QQQQQQQQQQQQQQQQ", 0, 0);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      int int2 = (-3371);
      char[] charArray0 = new char[8];
      charArray0[0] = 'N';
      charArray0[1] = 'Q';
      charArray0[2] = 'N';
      charArray0[3] = '\u0014';
      charArray0[4] = '\u0014';
      charArray0[5] = 'Q';
      charArray0[6] = 'Q';
      charArray0[7] = '\u0014';
      // Undeclared exception!
      try { 
        StringUtils.join(charArray0, 'H', (-3371), 1045);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -3371
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test347()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = '8';
      charArray0[1] = '5';
      String string0 = StringUtils.leftPad((String) null, 50, 'g');
      assertNull(string0);
      
      String[] stringArray0 = StringUtils.splitByCharacterType(" vs ");
      assertEquals(3, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string1 = StringUtils.rightPad("The type must not be null", (-1539), (String) null);
      assertNotNull(string1);
      assertEquals("The type must not be null", string1);
      
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) null;
      objectArray0[0] = (Object) "The type must not be null";
      objectArray0[2] = (Object) " vs ";
      objectArray0[3] = (Object) null;
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[4] = object0;
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      objectArray0[5] = object1;
      objectArray0[6] = (Object) " vs ";
      objectArray0[7] = (Object) "The type must not be null";
      objectArray0[8] = (Object) "The type must not be null";
      String string2 = StringUtils.join(objectArray0, "The type must not be null");
      assertFalse(string2.equals((Object)string1));
      assertEquals(9, objectArray0.length);
      assertNotNull(string2);
      
      boolean boolean0 = StringUtils.isAllLowerCase(" vs ");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isAlphanumericSpace((CharSequence) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string3 = StringUtils.defaultIfEmpty("u-](", "org.apache.commons.lang3.RegExUtils");
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      assertEquals("u-](", string3);
      
      boolean boolean2 = StringUtils.isMixedCase("The type must not be null");
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2);
  }

  @Test(timeout = 4000)
  public void test348()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = 'Q';
      String string0 = StringUtils.replaceIgnoreCase("Strings must not be null", "nt ", "R[_Z", (-904));
      assertNotNull(string0);
      assertEquals("Strings must not be null", string0);
      
      boolean boolean0 = StringUtils.equals((CharSequence) "Strings must not be null", (CharSequence) "Strings must not be null");
      assertTrue(boolean0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      int int0 = StringUtils.lastIndexOfAny("Strings must not be null", charSequenceArray0);
      assertEquals(0, charSequenceArray0.length);
      assertEquals((-1), int0);
      
      String string1 = StringUtils.capitalize("?om',S!r");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("?om',S!r", string1);
      
      String string2 = StringUtils.chomp("nt ");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("nt ", string2);
      
      String string3 = StringUtils.leftPad((String) null, 371, 'Q');
      assertNull(string3);
      
      boolean boolean1 = StringUtils.isEmpty("?om',S!r");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string4 = StringUtils.wrap((String) null, "?om',S!r");
      assertNull(string4);
      
      String string5 = StringUtils.stripEnd("Strings must not be null", (String) null);
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertTrue(string5.equals((Object)string0));
      assertNotNull(string5);
      assertEquals("Strings must not be null", string5);
  }

  @Test(timeout = 4000)
  public void test349()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = 'Q';
      charArray0[1] = 'O';
      long[] longArray0 = new long[1];
      longArray0[0] = (long) 'O';
      String string0 = StringUtils.join(longArray0, 'x');
      assertEquals(1, longArray0.length);
      assertNotNull(string0);
      assertArrayEquals(new long[] {79L}, longArray0);
      assertEquals("79", string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      charSequenceArray0[0] = (CharSequence) "79";
      charSequenceArray0[1] = (CharSequence) "79";
      charSequenceArray0[2] = (CharSequence) "79";
      boolean boolean0 = StringUtils.equalsAny("79", charSequenceArray0);
      assertEquals(3, charSequenceArray0.length);
      assertTrue(boolean0);
      
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "79", charArray0);
      assertEquals(6, charArray0.length);
      assertArrayEquals(new char[] {'Q', 'O', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(0, int0);
      
      String string1 = StringUtils.valueOf(charArray0);
      assertFalse(string1.equals((Object)string0));
      assertEquals(6, charArray0.length);
      assertNotNull(string1);
      assertArrayEquals(new char[] {'Q', 'O', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals("QO\u0000\u0000\u0000\u0000", string1);
      
      int[] intArray0 = StringUtils.toCodePoints(charSequenceArray0[1]);
      assertEquals(3, charSequenceArray0.length);
      assertEquals(2, intArray0.length);
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {55, 57}, intArray0);
  }

  @Test(timeout = 4000)
  public void test350()  throws Throwable  {
      String[] stringArray0 = StringUtils.split("x[BEyAx", "x[BEyAx");
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      boolean boolean0 = StringUtils.isWhitespace("x[BEyAx");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isAnyEmpty(stringArray0);
      assertTrue(boolean1 == boolean0);
      assertEquals(0, stringArray0.length);
      assertFalse(boolean1);
      
      boolean boolean2 = StringUtils.isNotBlank("x[BEyAx");
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2);
      
      boolean boolean3 = StringUtils.isAllEmpty(stringArray0);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3 == boolean1);
      assertEquals(0, stringArray0.length);
      assertTrue(boolean3);
      
      String string0 = StringUtils.removeEnd("x[BEyAx", "x[BEyAx");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.defaultString("");
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
      
      String string2 = StringUtils.stripEnd("NDG$T!NDG$T!", "RN`z-`#9?O$XvX");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("NDG$T!NDG$T!", string2);
      
      String string3 = StringUtils.replace("Exception cloning Cloneable type ", "", "");
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      assertEquals("Exception cloning Cloneable type ", string3);
      
      boolean boolean4 = StringUtils.isAnyBlank(stringArray0);
      assertTrue(boolean4 == boolean0);
      assertFalse(boolean4 == boolean2);
      assertFalse(boolean4 == boolean3);
      assertTrue(boolean4 == boolean1);
      assertEquals(0, stringArray0.length);
      assertFalse(boolean4);
      
      String string4 = StringUtils.remove("", 'X');
      assertTrue(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertNotNull(string4);
      assertEquals("", string4);
  }

  @Test(timeout = 4000)
  public void test351()  throws Throwable  {
      String string0 = StringUtils.substring("", (-2854));
      assertNotNull(string0);
      assertEquals("", string0);
      
      boolean boolean0 = StringUtils.equalsIgnoreCase("", "");
      assertTrue(boolean0);
      
      String string1 = StringUtils.reverse("");
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
      
      char[] charArray0 = new char[4];
      int[] intArray0 = new int[8];
      intArray0[0] = 3654;
      intArray0[1] = (int) '\u0000';
      intArray0[2] = (-376);
      intArray0[3] = (-2854);
      Class<String> class0 = String.class;
      ServiceLoader<String> serviceLoader0 = ServiceLoader.loadInstalled(class0);
      assertEquals("java.util.ServiceLoader[java.lang.String]", serviceLoader0.toString());
      assertNotNull(serviceLoader0);
      
      Spliterator<String> spliterator0 = serviceLoader0.spliterator();
      assertEquals("java.util.ServiceLoader[java.lang.String]", serviceLoader0.toString());
      assertNotNull(spliterator0);
      
      Class<Object> class1 = Object.class;
      ServiceLoader<Object> serviceLoader1 = ServiceLoader.loadInstalled(class1);
      assertEquals("java.util.ServiceLoader[java.lang.Object]", serviceLoader1.toString());
      assertNotNull(serviceLoader1);
      
      String string2 = StringUtils.removeEnd("FS}+9xk$BAW&:$NB9GO", "");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("FS}+9xk$BAW&:$NB9GO", string2);
      
      CharSequence[] charSequenceArray0 = new CharSequence[8];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "";
      String string3 = StringUtils.unwrap("The character ", 'p');
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      assertEquals("The character ", string3);
      
      charSequenceArray0[2] = (CharSequence) "The character ";
      String string4 = StringUtils.lowerCase("The character ");
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertNotNull(string4);
      assertEquals("the character ", string4);
      
      charSequenceArray0[3] = (CharSequence) "the character ";
      charSequenceArray0[4] = (CharSequence) "The character ";
      charSequenceArray0[5] = (CharSequence) "kDSZ;FRM";
      charSequenceArray0[6] = (CharSequence) "";
      charSequenceArray0[7] = (CharSequence) "";
      String string5 = StringUtils.appendIfMissing("Strings must not be null", "kDSZ;FRM", charSequenceArray0);
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertEquals(8, charSequenceArray0.length);
      assertNotNull(string5);
      assertEquals("Strings must not be null", string5);
      
      double double0 = StringUtils.getJaroWinklerDistance("The character ", charSequenceArray0[7]);
      assertEquals(8, charSequenceArray0.length);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test352()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      Locale locale0 = Locale.GERMANY;
      assertEquals("de_DE", locale0.toString());
      assertEquals("DE", locale0.getCountry());
      assertEquals("de", locale0.getLanguage());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertNotNull(locale0);
      
      String string0 = StringUtils.substring("nt aX-1.0x-412.24x1.0x-2592.4207x-2730.193aX-1.0x-412.24x1.0x-2592.4207x-2730.193aX-1.0x-412.24x1.0x-2592.4207x-2730.193-1.0x-412.24x1.0x-2592.4207x-2730.193", (-1));
      assertNotNull(string0);
      assertEquals("3", string0);
      
      String string1 = StringUtils.unwrap(" ", 'M');
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(" ", string1);
      
      String string2 = StringUtils.join((boolean[]) null, 's', (-1), 1855);
      assertNull(string2);
  }

  @Test(timeout = 4000)
  public void test353()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = '8';
      String string0 = StringUtils.removeIgnoreCase("9Y`]eiW^{x@Rl", "zt be negative");
      assertNotNull(string0);
      assertEquals("9Y`]eiW^{x@Rl", string0);
      
      boolean boolean0 = StringUtils.contains((CharSequence) "9Y`]eiW^{x@Rl", 3833);
      assertFalse(boolean0);
      
      int int0 = StringUtils.indexOf((CharSequence) "9Y`]eiW^{x@Rl", (-32768), (-32768));
      assertEquals((-1), int0);
      
      String string1 = StringUtils.stripAccents("zt be negative");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("zt be negative", string1);
      
      int int1 = StringUtils.compare("^5Lu5cU9 t@rj<9k*", "_SpVN");
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      String string2 = StringUtils.substring("nt aX-1.0x-412.24x1.0x-2592.4207x-2730.193aX-1.0x-412.24x1.0x-2592.4207x-2730.193aX-1.0x-412.24x1.0x-2592.4207x-2730.193-1.0x-412.24x1.0x-2592.4207x-2730.193", 1046);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("", string2);
      
      String string3 = StringUtils.lowerCase("zt be negative");
      assertTrue(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      assertEquals("zt be negative", string3);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparator("zt be negative", "^5Lu5cU9 t@rj<9k*");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string4 = StringUtils.right("TOed(ag/wB@~}A5~|IThe character ", 3833);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertNotNull(string4);
      assertEquals("TOed(ag/wB@~}A5~|IThe character ", string4);
  }

  @Test(timeout = 4000)
  public void test354()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[9];
      String string0 = StringUtils.strip("org.apache.commons.lang3.RegExUtils");
      assertNotNull(string0);
      assertEquals("org.apache.commons.lang3.RegExUtils", string0);
      
      charSequenceArray0[1] = (CharSequence) "org.apache.commons.lang3.RegExUtils";
      charSequenceArray0[2] = (CharSequence) "org.apache.commons.lang3.RegExUtils";
      charSequenceArray0[3] = (CharSequence) "org.apache.commons.lang3.RegExUtils";
      charSequenceArray0[5] = (CharSequence) "org.apache.commons.lang3.RegExUtils";
      String string1 = StringUtils.join((Object[]) charSequenceArray0, ']');
      assertFalse(string1.equals((Object)string0));
      assertEquals(9, charSequenceArray0.length);
      assertNotNull(string1);
      assertEquals("]org.apache.commons.lang3.RegExUtils]org.apache.commons.lang3.RegExUtils]org.apache.commons.lang3.RegExUtils]]org.apache.commons.lang3.RegExUtils]]]", string1);
      
      int int0 = StringUtils.countMatches(charSequenceArray0[3], charSequenceArray0[5]);
      assertEquals(9, charSequenceArray0.length);
      assertEquals(1, int0);
      
      String[] stringArray0 = StringUtils.split("]org.apache.commons.lang3.RegExUtils]org.apache.commons.lang3.RegExUtils]org.apache.commons.lang3.RegExUtils]]org.apache.commons.lang3.RegExUtils]]]", ']');
      assertEquals(4, stringArray0.length);
      assertNotNull(stringArray0);
      
      try { 
        StringUtils.getBytes("org.apache.commons.lang3.RegExUtils", "org.apache.commons.lang3.RegExUtils");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(UnsupportedEncodingException e) {
      }
  }

  @Test(timeout = 4000)
  public void test355()  throws Throwable  {
      String string0 = StringUtils.lowerCase("null/empty items~4&4+2&FA");
      assertNotNull(string0);
      assertEquals("null/empty items~4&4+2&fa", string0);
      
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      String string1 = StringUtils.join((List<?>) linkedList0, "zx^7k", 101, 101);
      assertEquals(0, linkedList0.size());
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertFalse(linkedList0.contains(101));
      assertEquals("", string1);
      
      String string2 = StringUtils.repeat((String) null, "vHC", 2117);
      assertNull(string2);
      
      String string3 = StringUtils.SPACE;
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      assertEquals(" ", string3);
  }

  @Test(timeout = 4000)
  public void test356()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[0] = null;
      charSequenceArray0[1] = null;
      String string0 = StringUtils.join((Object[]) charSequenceArray0, 'j', 1191, 98);
      assertEquals(2, charSequenceArray0.length);
      assertNotNull(string0);
      assertEquals("", string0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      String string1 = StringUtils.join((Object[]) charSequenceArray0, 'j', 98, 98);
      assertEquals(2, charSequenceArray0.length);
      assertNotNull(string1);
      assertEquals("", string1);
      
      String string2 = StringUtils.replaceOnce("", "", "");
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("", string2);
      
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Stack<Locale> stack0 = new Stack<Locale>();
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertNotNull(stack0);
      
      Locale locale0 = Locale.lookup(linkedList0, stack0);
      assertEquals(0, linkedList0.size());
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertNull(locale0);
      
      String string3 = StringUtils.lowerCase("", (Locale) null);
      assertTrue(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string2));
      assertNotNull(string3);
      assertEquals("", string3);
  }

  @Test(timeout = 4000)
  public void test357()  throws Throwable  {
      String string0 = StringUtils.upperCase((String) null);
      assertNull(string0);
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'u';
      charArray0[1] = 'v';
      int int0 = StringUtils.indexOfAnyBut((CharSequence) null, charArray0);
      assertEquals(2, charArray0.length);
      assertArrayEquals(new char[] {'u', 'v'}, charArray0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test358()  throws Throwable  {
      String[] stringArray0 = StringUtils.split(" ");
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      char[] charArray0 = new char[0];
      String string0 = StringUtils.valueOf(charArray0);
      assertEquals(0, charArray0.length);
      assertNotNull(string0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals("", string0);
      
      String string1 = StringUtils.getDigits("");
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
      
      boolean boolean0 = StringUtils.isBlank(" ");
      assertTrue(boolean0);
      
      int int0 = StringUtils.countMatches((CharSequence) "", '\u0015');
      assertEquals(0, int0);
      
      String string2 = StringUtils.replaceIgnoreCase("...", "", (String) null);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("...", string2);
      
      String string3 = StringUtils.rightPad("", 6);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      assertEquals("      ", string3);
      
      int int1 = StringUtils.countMatches((CharSequence) "...", 'a');
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      
      boolean boolean1 = StringUtils.containsNone((CharSequence) null, charArray0);
      assertTrue(boolean1 == boolean0);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      assertTrue(boolean1);
      
      String[] stringArray1 = StringUtils.substringsBetween("...", "", "maxWith cannot be negative");
      assertNull(stringArray1);
  }

  @Test(timeout = 4000)
  public void test359()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      String string0 = StringUtils.mid("fyv$TYmh3$", 1632, 483);
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.join((List<?>) arrayList0, '7', 8192, (-3));
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(string1);
      assertEquals("", string1);
      
      boolean boolean0 = StringUtils.isWhitespace("\r");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test360()  throws Throwable  {
      String string0 = StringUtils.replace("s'@z)sozJ", "s'@z)sozJ", (String) null, 1881);
      assertNotNull(string0);
      assertEquals("s'@z)sozJ", string0);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      String string1 = StringUtils.join(booleanArray0, '_');
      assertFalse(string1.equals((Object)string0));
      assertEquals(1, booleanArray0.length);
      assertNotNull(string1);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertEquals("false", string1);
      
      Class<String> class0 = String.class;
      ServiceLoader<String> serviceLoader0 = ServiceLoader.loadInstalled(class0);
      assertEquals("java.util.ServiceLoader[java.lang.String]", serviceLoader0.toString());
      assertNotNull(serviceLoader0);
      
      Iterator<String> iterator0 = serviceLoader0.iterator();
      assertEquals("java.util.ServiceLoader[java.lang.String]", serviceLoader0.toString());
      assertNotNull(iterator0);
      
      String string2 = StringUtils.join(iterator0, ',');
      assertEquals("java.util.ServiceLoader[java.lang.String]", serviceLoader0.toString());
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("", string2);
      
      String string3 = StringUtils.substringBefore("ot be negative", "ot be negative");
      assertTrue(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      assertEquals("", string3);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "#", (CharSequence) "");
      assertEquals(1, int0);
      
      boolean boolean0 = StringUtils.containsNone((CharSequence) "s'@z)sozJ", "comparator");
      assertFalse(boolean0);
      
      ArrayDeque<String> arrayDeque0 = new ArrayDeque<String>();
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      assertNotNull(arrayDeque0);
      assertFalse(arrayDeque0.contains(string3));
      
      boolean boolean1 = arrayDeque0.add("\r");
      assertFalse(arrayDeque0.isEmpty());
      assertEquals(1, arrayDeque0.size());
      assertFalse(boolean1 == boolean0);
      assertFalse(arrayDeque0.contains(string3));
      assertTrue(arrayDeque0.contains("\r"));
      assertTrue(boolean1);
      
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      String string4 = StringUtils.getIfEmpty("HD4#", supplier0);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertNotNull(string4);
      assertEquals("HD4#", string4);
  }

  @Test(timeout = 4000)
  public void test361()  throws Throwable  {
      String string0 = StringUtils.rightPad("Array element ", 586, 'p');
      assertNotNull(string0);
      assertEquals("Array element pppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppp", string0);
      
      String string1 = StringUtils.substring("*J/]Yow)8wbJ+", 50);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
      
      String string2 = StringUtils.join((Object[]) null, 'p', (-3800), 850);
      assertNull(string2);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      String string3 = StringUtils.join((Object[]) null, 'b', (-325), (-2521));
      assertNull(string3);
  }

  @Test(timeout = 4000)
  public void test362()  throws Throwable  {
      String string0 = StringUtils.wrap(" is not in the range '0' - '9'", '3');
      assertNotNull(string0);
      assertEquals("3 is not in the range '0' - '9'3", string0);
      
      String[] stringArray0 = StringUtils.substringsBetween("zGiqL%uA|", "3 is not in the range '0' - '9'3", "3 is not in the range '0' - '9'3");
      assertNull(stringArray0);
      
      String[] stringArray1 = StringUtils.splitPreserveAllTokens(" is not in the range '0' - '9'", "");
      assertEquals(1, stringArray1.length);
      assertNotNull(stringArray1);
      
      String string1 = StringUtils.replacePattern(" is not in the range '0' - '9'", "", "");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(" is not in the range '0' - '9'", string1);
      
      Vector<Locale.LanguageRange> vector0 = new Stack<Locale.LanguageRange>();
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertNotNull(vector0);
      
      UnaryOperator<Locale.LanguageRange> unaryOperator0 = UnaryOperator.identity();
      assertNotNull(unaryOperator0);
      
      vector0.replaceAll(unaryOperator0);
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      
      PriorityQueue<String> priorityQueue0 = new PriorityQueue<String>();
      assertEquals(0, priorityQueue0.size());
      assertNotNull(priorityQueue0);
      assertFalse(priorityQueue0.contains(""));
      
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) vector0, (Collection<String>) priorityQueue0);
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertEquals(0, priorityQueue0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
      assertFalse(priorityQueue0.contains(""));
      assertFalse(list0.contains(""));
      
      ArrayDeque<String> arrayDeque0 = new ArrayDeque<String>(list0);
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertEquals(0, priorityQueue0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      assertNotNull(arrayDeque0);
      assertFalse(priorityQueue0.contains(""));
      assertFalse(list0.contains(""));
      assertFalse(arrayDeque0.contains(""));
      
      Iterator<String> iterator0 = arrayDeque0.iterator();
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertEquals(0, priorityQueue0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      assertNotNull(iterator0);
      assertFalse(priorityQueue0.contains(""));
      assertFalse(list0.contains(""));
      assertFalse(arrayDeque0.contains(""));
      
      StringUtils.repeat('3', 812);
      StringUtils.isAsciiPrintable("3 is not in the range '0' - '9'3");
      StringUtils.rightPad("^M", 812, (String) null);
      StringUtils.join((Object[]) null, '8', 143, 199);
  }

  @Test(timeout = 4000)
  public void test363()  throws Throwable  {
      String string0 = StringUtils.stripStart("maxWith cannot be negative", "maxWith cannot be negative");
      assertNotNull(string0);
      assertEquals("", string0);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "", (CharSequence) "maxWith cannot be negative");
      assertEquals(26, int0);
      
      boolean boolean0 = StringUtils.equalsIgnoreCase("", "");
      assertTrue(boolean0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[9];
      CharSequence charSequence0 = StringUtils.defaultIfBlank((CharSequence) "", (CharSequence) "%cf]l:uy>#-V");
      assertFalse(charSequence0.equals((Object)string0));
      assertNotNull(charSequence0);
      assertEquals("%cf]l:uy>#-V", charSequence0);
      
      charSequenceArray0[0] = (CharSequence) "%cf]l:uy>#-V";
      charSequenceArray0[1] = (CharSequence) "maxWith cannot be negative";
      charSequenceArray0[2] = (CharSequence) "maxWith cannot be negative";
      charSequenceArray0[3] = (CharSequence) "%cf]l:uy>#-V";
      charSequenceArray0[4] = (CharSequence) "";
      charSequenceArray0[5] = (CharSequence) "%cf]l:uy>#-V";
      charSequenceArray0[6] = (CharSequence) "%cf]l:uy>#-V";
      CharSequence[] charSequenceArray1 = new CharSequence[2];
      assertFalse(charSequenceArray1.equals((Object)charSequenceArray0));
      
      charSequenceArray1[0] = (CharSequence) "%cf]l:uy>#-V";
      charSequenceArray1[1] = (CharSequence) "";
      CharSequence charSequence1 = StringUtils.firstNonEmpty(charSequenceArray1);
      assertFalse(charSequenceArray1.equals((Object)charSequenceArray0));
      assertFalse(charSequence1.equals((Object)string0));
      assertTrue(charSequence1.equals((Object)charSequence0));
      assertNotSame(charSequenceArray1, charSequenceArray0);
      assertEquals(2, charSequenceArray1.length);
      assertNotNull(charSequence1);
      assertEquals("%cf]l:uy>#-V", charSequence1);
      
      charSequenceArray0[7] = (CharSequence) "%cf]l:uy>#-V";
      int int1 = StringUtils.indexOfIgnoreCase(charSequenceArray0[1], charSequenceArray0[6]);
      assertFalse(int1 == int0);
      assertFalse(charSequenceArray0.equals((Object)charSequenceArray1));
      assertNotSame(charSequenceArray0, charSequenceArray1);
      assertEquals(9, charSequenceArray0.length);
      assertEquals((-1), int1);
      
      boolean boolean1 = StringUtils.endsWith(charSequenceArray0[5], charSequenceArray0[6]);
      assertTrue(boolean1 == boolean0);
      assertFalse(charSequenceArray0.equals((Object)charSequenceArray1));
      assertNotSame(charSequenceArray0, charSequenceArray1);
      assertEquals(9, charSequenceArray0.length);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test364()  throws Throwable  {
      boolean boolean0 = StringUtils.isMixedCase("Supplied value must be a valid byte literal between -128 and 127: [");
      assertTrue(boolean0);
      
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("Supplied value must be a valid byte literal between -128 and 127: [");
      assertEquals(27, stringArray0.length);
      assertNotNull(stringArray0);
      
      boolean boolean1 = StringUtils.isAlphanumeric("Supplied value must be a valid byte literal between -128 and 127: [");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String[] stringArray1 = StringUtils.stripAll(stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(27, stringArray0.length);
      assertEquals(27, stringArray1.length);
      assertNotNull(stringArray1);
      
      String[] stringArray2 = StringUtils.splitByWholeSeparatorPreserveAllTokens("Supplied value must be a valid byte literal between -128 and 127: [", "");
      assertFalse(stringArray2.equals((Object)stringArray1));
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertNotSame(stringArray2, stringArray1);
      assertNotSame(stringArray2, stringArray0);
      assertEquals(13, stringArray2.length);
      assertNotNull(stringArray2);
      
      String string0 = StringUtils.join((int[]) null, 'C');
      assertNull(string0);
      
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        StringUtils.toString(byteArray0, "Cloneable type ");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // Cloneable type 
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test365()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Stream<String> stream0 = linkedList0.parallelStream();
      assertEquals(0, linkedList0.size());
      assertNotNull(stream0);
      
      boolean boolean0 = linkedList0.add("', is neither of type Map.Entry nor an Array");
      assertEquals(1, linkedList0.size());
      assertTrue(linkedList0.contains("', is neither of type Map.Entry nor an Array"));
      assertTrue(boolean0);
      
      LinkedList<String> linkedList1 = new LinkedList<String>();
      assertEquals(0, linkedList1.size());
      assertFalse(linkedList1.equals((Object)linkedList0));
      assertNotNull(linkedList1);
      assertFalse(linkedList1.contains("', is neither of type Map.Entry nor an Array"));
      
      boolean boolean1 = linkedList1.offerFirst((String) null);
      assertEquals(1, linkedList1.size());
      assertFalse(linkedList1.equals((Object)linkedList0));
      assertTrue(boolean1 == boolean0);
      assertNotSame(linkedList1, linkedList0);
      assertFalse(linkedList1.contains("', is neither of type Map.Entry nor an Array"));
      assertTrue(boolean1);
      
      String string0 = linkedList0.pollFirst();
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.equals((Object)linkedList1));
      assertNotSame(linkedList0, linkedList1);
      assertNotNull(string0);
      assertFalse(linkedList0.contains(string0));
      assertEquals("', is neither of type Map.Entry nor an Array", string0);
      
      String string1 = linkedList1.pollFirst();
      assertEquals(0, linkedList1.size());
      assertTrue(linkedList1.equals((Object)linkedList0));
      assertNotSame(linkedList1, linkedList0);
      assertNull(string1);
      assertFalse(linkedList1.contains(string0));
      
      String string2 = StringUtils.join((List<?>) linkedList1, 'P', (-82), (-82));
      assertEquals(0, linkedList1.size());
      assertTrue(linkedList1.equals((Object)linkedList0));
      assertFalse(string2.equals((Object)string0));
      assertNotSame(linkedList1, linkedList0);
      assertNotNull(string2);
      assertFalse(linkedList1.contains(string0));
      assertEquals("", string2);
      
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) null;
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[1] = object0;
      String string3 = StringUtils.join(objectArray0, 'h');
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals(2, objectArray0.length);
      assertNotNull(string3);
      
      String string4 = StringUtils.stripAccents("\"IP'TI/m`j2");
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertNotNull(string4);
      assertEquals("\"IP'TI/m`j2", string4);
      
      String string5 = StringUtils.stripEnd("<Z07)", "Minimum abbreviation width with offset is %d");
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertNotNull(string5);
      assertEquals("<Z07)", string5);
  }

  @Test(timeout = 4000)
  public void test366()  throws Throwable  {
      String[] stringArray0 = StringUtils.split("");
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      int int0 = StringUtils.compareIgnoreCase("", "");
      assertEquals(0, int0);
      
      boolean boolean0 = StringUtils.isAlpha("");
      assertFalse(boolean0);
      
      String string0 = StringUtils.appendIfMissing("a", "a", stringArray0);
      assertEquals(0, stringArray0.length);
      assertNotNull(string0);
      assertEquals("a", string0);
      
      String[] stringArray1 = StringUtils.stripAll(stringArray0, "x&{#0],$RHy");
      assertSame(stringArray0, stringArray1);
      assertSame(stringArray1, stringArray0);
      assertEquals(0, stringArray0.length);
      assertEquals(0, stringArray1.length);
      assertNotNull(stringArray1);
      
      int int1 = StringUtils.indexOfDifference((CharSequence[]) stringArray0);
      assertFalse(int1 == int0);
      assertSame(stringArray0, stringArray1);
      assertEquals(0, stringArray0.length);
      assertEquals((-1), int1);
      
      int int2 = StringUtils.ordinalIndexOf("", "", (-4289));
      assertTrue(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals((-1), int2);
      
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short)2;
      shortArray0[1] = (short)2;
      shortArray0[2] = (short)2;
      shortArray0[3] = (short)2;
      shortArray0[4] = (short)2;
      shortArray0[5] = (short)2;
      shortArray0[6] = (short)2;
      String string1 = StringUtils.join(shortArray0, '6', 95, (-669));
      assertFalse(string1.equals((Object)string0));
      assertEquals(7, shortArray0.length);
      assertNotNull(string1);
      assertArrayEquals(new short[] {(short)2, (short)2, (short)2, (short)2, (short)2, (short)2, (short)2}, shortArray0);
      assertEquals("", string1);
      
      String string2 = StringUtils.removeStartIgnoreCase("a", "a");
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("", string2);
      
      int int3 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "a", (CharSequence) "a", (-911));
      assertTrue(int3 == int1);
      assertFalse(int3 == int0);
      assertTrue(int3 == int2);
      assertEquals((-1), int3);
      
      String string3 = StringUtils.right("a", 132);
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      assertEquals("a", string3);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      String string4 = StringUtils.join(booleanArray0, '6', 22, 0);
      assertTrue(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertEquals(1, booleanArray0.length);
      assertNotNull(string4);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertEquals("", string4);
  }

  @Test(timeout = 4000)
  public void test367()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[9];
      String string0 = StringUtils.strip("org.apache.commons.lang3.RegExUtils");
      assertNotNull(string0);
      assertEquals("org.apache.commons.lang3.RegExUtils", string0);
      
      charSequenceArray0[0] = (CharSequence) "org.apache.commons.lang3.RegExUtils";
      charSequenceArray0[1] = (CharSequence) "org.apache.commons.lang3.RegExUtils";
      charSequenceArray0[2] = (CharSequence) "org.apache.commons.lang3.RegExUtils";
      charSequenceArray0[3] = (CharSequence) "org.apache.commons.lang3.RegExUtils";
      charSequenceArray0[4] = (CharSequence) "org.apache.commons.lang3.RegExUtils";
      charSequenceArray0[5] = (CharSequence) "org.apache.commons.lang3.RegExUtils";
      charSequenceArray0[6] = (CharSequence) "org.apache.commons.lang3.RegExUtils";
      charSequenceArray0[7] = (CharSequence) "org.apache.commons.lang3.RegExUtils";
      charSequenceArray0[8] = (CharSequence) "org.apache.commons.lang3.RegExUtils";
      String string1 = StringUtils.appendIfMissing("org.apache.commons.lang3.RegExUtils", "org.apache.commons.lang3.RegExUtils", charSequenceArray0);
      assertTrue(string1.equals((Object)string0));
      assertEquals(9, charSequenceArray0.length);
      assertNotNull(string1);
      assertEquals("org.apache.commons.lang3.RegExUtils", string1);
      
      boolean boolean0 = StringUtils.equalsIgnoreCase("org.apache.commons.lang3.RegExUtils", (CharSequence) null);
      assertFalse(boolean0);
      
      String string2 = StringUtils.substringAfter("org.apache.commons.lang3.RegExUtils", (-2098));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("", string2);
  }

  @Test(timeout = 4000)
  public void test368()  throws Throwable  {
      String string0 = StringUtils.trimToEmpty(":W3vjMB@");
      assertNotNull(string0);
      assertEquals(":W3vjMB@", string0);
      
      String string1 = StringUtils.LF;
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("\n", string1);
      
      CharSequence charSequence0 = StringUtils.getIfBlank((CharSequence) "\n", (Supplier<CharSequence>) null);
      assertNull(charSequence0);
      
      String string2 = StringUtils.replaceChars((String) null, 'C', '*');
      assertNull(string2);
      
      String[] stringArray0 = StringUtils.split("\n");
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      boolean boolean0 = StringUtils.isAsciiPrintable(":W3vjMB@");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test369()  throws Throwable  {
      String string0 = StringUtils.removeIgnoreCase((String) null, "K4[3-&%er>.qL- |");
      assertNull(string0);
      
      int int0 = 3833;
      boolean boolean0 = StringUtils.contains((CharSequence) null, 3833);
      assertFalse(boolean0);
      
      String string1 = "'D&{dHk/3lh*)t9F:KK";
      String string2 = StringUtils.replacePattern((String) null, "I*Hl", "'D&{dHk/3lh*)t9F:KK");
      assertNull(string2);
      
      String[] stringArray0 = StringUtils.substringsBetween("5C'7", (String) null, "PU#=(~W7Vy/");
      assertNull(stringArray0);
      
      String string3 = StringUtils.replaceChars((String) null, 't', ',');
      assertNull(string3);
      
      // Undeclared exception!
      try { 
        StringUtils.getJaroWinklerDistance((CharSequence) null, "PU#=(~W7Vy/");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test370()  throws Throwable  {
      Class<String> class0 = String.class;
      ServiceLoader<String> serviceLoader0 = ServiceLoader.loadInstalled(class0);
      assertEquals("java.util.ServiceLoader[java.lang.String]", serviceLoader0.toString());
      assertNotNull(serviceLoader0);
      
      Spliterator<String> spliterator0 = serviceLoader0.spliterator();
      assertEquals("java.util.ServiceLoader[java.lang.String]", serviceLoader0.toString());
      assertNotNull(spliterator0);
      
      int int0 = StringUtils.compare("TOed(ag/wB@~}A5~|I", "_*=Ja$UfR0j>r=ee0u");
      assertEquals((-11), int0);
      
      String string0 = StringUtils.substring(" h/", (-3764));
      assertNotNull(string0);
      assertEquals(" h/", string0);
      
      boolean boolean0 = StringUtils.isAlphaSpace(" h/");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test371()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[1] = 'Q';
      charArray0[2] = '$';
      charArray0[4] = '$';
      boolean boolean0 = StringUtils.containsAny((CharSequence) "kb>K:%lR&M+Fm2*/78", charArray0);
      assertEquals(5, charArray0.length);
      assertArrayEquals(new char[] {'\u0000', 'Q', '$', '\u0000', '$'}, charArray0);
      assertFalse(boolean0);
      
      String string0 = StringUtils.deleteWhitespace("kb>K:%lR&M+Fm2*/78");
      assertNotNull(string0);
      assertEquals("kb>K:%lR&M+Fm2*/78", string0);
      
      Integer integer0 = new Integer('$');
      assertNotNull(integer0);
      assertEquals(36, (int)integer0);
      
      int int0 = StringUtils.compare((String) null, "9j0-+ji_s");
      assertEquals((-1), int0);
      
      String string1 = StringUtils.substring(")!1XjMA#y,~aU", 5);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("MA#y,~aU", string1);
      
      boolean boolean1 = StringUtils.isAlphaSpace("kb>K:%lR&M+Fm2*/78");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string2 = StringUtils.replaceAll(")!1XjMA#y,~aU", ")!1XjMA#y,~aU", (String) null);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals(")!1XjMA#y,~aU", string2);
  }

  @Test(timeout = 4000)
  public void test372()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = '$';
      charArray0[1] = 'Q';
      charArray0[2] = '$';
      charArray0[3] = '7';
      charArray0[4] = '$';
      boolean boolean0 = StringUtils.containsAny((CharSequence) "kb>K:%lR&M+Fm2*/78", charArray0);
      assertEquals(5, charArray0.length);
      assertArrayEquals(new char[] {'$', 'Q', '$', '7', '$'}, charArray0);
      assertTrue(boolean0);
      
      String string0 = StringUtils.deleteWhitespace("kb>K:%lR&M+Fm2*/78");
      assertNotNull(string0);
      assertEquals("kb>K:%lR&M+Fm2*/78", string0);
      
      int int0 = StringUtils.indexOf((CharSequence) "kb>K:%lR&M+Fm2*/78", 25, (-32768));
      assertEquals((-1), int0);
      
      String string1 = StringUtils.stripAccents("gXYl'|2.y");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("gXYl'|2.y", string1);
      
      int int1 = StringUtils.compare((String) null, "9j0-+ji_s");
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      String string2 = StringUtils.substring(")!1XjMA#y,~aU", 5);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("MA#y,~aU", string2);
      
      boolean boolean1 = StringUtils.isAlphaSpace("gXYl'|2.y");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test373()  throws Throwable  {
      String string0 = StringUtils.stripAccents("");
      assertNotNull(string0);
      assertEquals("", string0);
      
      boolean boolean0 = StringUtils.isNotBlank("");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isAllEmpty((CharSequence[]) null);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String string1 = StringUtils.removeEnd("Supplied value must be a valid byte literal between -128 and 127: [", "");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("Supplied value must be a valid byte literal between -128 and 127: [", string1);
      
      String string2 = StringUtils.lowerCase("...");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("...", string2);
      
      String string3 = StringUtils.abbreviate("y !zX", "", 345, 345);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      assertEquals("y !zX", string3);
      
      Locale locale0 = new Locale("Supplied value must be a valid byte literal between -128 and 127: [", "...", "y !zX");
      assertEquals("y !zX", locale0.getVariant());
      assertEquals("supplied value must be a valid byte literal between -128 and 127: [", locale0.getLanguage());
      assertEquals("supplied value must be a valid byte literal between -128 and 127: [_..._y !zX", locale0.toString());
      assertEquals("...", locale0.getCountry());
      assertNotNull(locale0);
      
      Locale locale1 = Locale.UK;
      assertEquals("en_GB", locale1.toString());
      assertEquals("eng", locale1.getISO3Language());
      assertEquals("GB", locale1.getCountry());
      assertEquals("en", locale1.getLanguage());
      assertEquals("GBR", locale1.getISO3Country());
      assertEquals("", locale1.getVariant());
      assertFalse(locale1.equals((Object)locale0));
      assertNotSame(locale1, locale0);
      assertNotNull(locale1);
      
      Locale locale2 = Locale.TAIWAN;
      assertEquals("TWN", locale2.getISO3Country());
      assertEquals("zh", locale2.getLanguage());
      assertEquals("", locale2.getVariant());
      assertEquals("zho", locale2.getISO3Language());
      assertEquals("TW", locale2.getCountry());
      assertEquals("zh_TW", locale2.toString());
      assertFalse(locale2.equals((Object)locale1));
      assertFalse(locale2.equals((Object)locale0));
      assertNotSame(locale2, locale1);
      assertNotSame(locale2, locale0);
      assertNotNull(locale2);
      
      Set<Character> set0 = locale2.getExtensionKeys();
      assertEquals("TWN", locale2.getISO3Country());
      assertEquals("zh", locale2.getLanguage());
      assertEquals("", locale2.getVariant());
      assertEquals("zho", locale2.getISO3Language());
      assertEquals("TW", locale2.getCountry());
      assertEquals("zh_TW", locale2.toString());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertFalse(locale2.equals((Object)locale1));
      assertFalse(locale2.equals((Object)locale0));
      assertNotSame(locale2, locale1);
      assertNotSame(locale2, locale0);
      assertNotNull(set0);
      
      String string4 = locale1.getDisplayVariant(locale2);
      assertEquals("en_GB", locale1.toString());
      assertEquals("eng", locale1.getISO3Language());
      assertEquals("GB", locale1.getCountry());
      assertEquals("en", locale1.getLanguage());
      assertEquals("GBR", locale1.getISO3Country());
      assertEquals("", locale1.getVariant());
      assertEquals("TWN", locale2.getISO3Country());
      assertEquals("zh", locale2.getLanguage());
      assertEquals("", locale2.getVariant());
      assertEquals("zho", locale2.getISO3Language());
      assertEquals("TW", locale2.getCountry());
      assertEquals("zh_TW", locale2.toString());
      assertFalse(locale1.equals((Object)locale0));
      assertFalse(locale1.equals((Object)locale2));
      assertFalse(locale2.equals((Object)locale1));
      assertFalse(locale2.equals((Object)locale0));
      assertTrue(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertNotSame(locale1, locale0);
      assertNotSame(locale1, locale2);
      assertNotSame(locale2, locale1);
      assertNotSame(locale2, locale0);
      assertNotNull(string4);
      assertEquals("", string4);
      
      boolean boolean2 = locale2.hasExtensions();
      assertEquals("TWN", locale2.getISO3Country());
      assertEquals("zh", locale2.getLanguage());
      assertEquals("", locale2.getVariant());
      assertEquals("zho", locale2.getISO3Language());
      assertEquals("TW", locale2.getCountry());
      assertEquals("zh_TW", locale2.toString());
      assertFalse(locale2.equals((Object)locale1));
      assertFalse(locale2.equals((Object)locale0));
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertNotSame(locale2, locale1);
      assertNotSame(locale2, locale0);
      assertFalse(boolean2);
      
      String string5 = locale1.getDisplayCountry(locale0);
      assertEquals("y !zX", locale0.getVariant());
      assertEquals("supplied value must be a valid byte literal between -128 and 127: [", locale0.getLanguage());
      assertEquals("supplied value must be a valid byte literal between -128 and 127: [_..._y !zX", locale0.toString());
      assertEquals("...", locale0.getCountry());
      assertEquals("en_GB", locale1.toString());
      assertEquals("eng", locale1.getISO3Language());
      assertEquals("GB", locale1.getCountry());
      assertEquals("en", locale1.getLanguage());
      assertEquals("GBR", locale1.getISO3Country());
      assertEquals("", locale1.getVariant());
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(locale0.equals((Object)locale2));
      assertFalse(locale1.equals((Object)locale0));
      assertFalse(locale1.equals((Object)locale2));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertNotSame(locale0, locale1);
      assertNotSame(locale0, locale2);
      assertNotSame(locale1, locale0);
      assertNotSame(locale1, locale2);
      assertNotNull(string5);
      assertEquals("United Kingdom", string5);
      
      String string6 = locale0.getDisplayLanguage();
      assertEquals("y !zX", locale0.getVariant());
      assertEquals("supplied value must be a valid byte literal between -128 and 127: [", locale0.getLanguage());
      assertEquals("supplied value must be a valid byte literal between -128 and 127: [_..._y !zX", locale0.toString());
      assertEquals("...", locale0.getCountry());
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(locale0.equals((Object)locale2));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string4));
      assertNotSame(locale0, locale1);
      assertNotSame(locale0, locale2);
      assertNotNull(string6);
      assertEquals("supplied value must be a valid byte literal between -128 and 127: [", string6);
      
      long[] longArray0 = new long[7];
      longArray0[0] = (long) 345;
      longArray0[1] = (long) 345;
      longArray0[2] = (long) 345;
      longArray0[3] = (long) 345;
      longArray0[4] = (long) 345;
      longArray0[5] = (long) 345;
      longArray0[6] = (long) 345;
      String string7 = StringUtils.join(longArray0, '%');
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string5));
      assertEquals(7, longArray0.length);
      assertNotNull(string7);
      assertArrayEquals(new long[] {345L, 345L, 345L, 345L, 345L, 345L, 345L}, longArray0);
      assertEquals("345%345%345%345%345%345%345", string7);
      
      boolean boolean3 = StringUtils.equalsAny("United Kingdom", (CharSequence[]) null);
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3);
      
      char[] charArray0 = new char[2];
      charArray0[0] = '%';
      charArray0[1] = '%';
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "y !zX", charArray0);
      assertEquals(2, charArray0.length);
      assertArrayEquals(new char[] {'%', '%'}, charArray0);
      assertEquals(0, int0);
      
      boolean boolean4 = StringUtils.equals((CharSequence) "...", (CharSequence) null);
      assertFalse(boolean4 == boolean1);
      assertTrue(boolean4 == boolean2);
      assertTrue(boolean4 == boolean0);
      assertTrue(boolean4 == boolean3);
      assertFalse(boolean4);
  }

  @Test(timeout = 4000)
  public void test374()  throws Throwable  {
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short)2127;
      String string0 = StringUtils.strip("KO)(uo0>#;Ny", "_wy`sG+n-P0");
      assertNotNull(string0);
      assertEquals("KO)(uo0>#;N", string0);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "_wy`sG+n-P0", "KO)(uo0>#;Ny");
      assertEquals(2, int0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[7];
      charSequenceArray0[0] = (CharSequence) "KO)(uo0>#;N";
      String string1 = StringUtils.join((long[]) null, 'O');
      assertNull(string1);
      
      String string2 = StringUtils.abbreviateMiddle("_wy`sG+n-P0", "KO)(uo0>#;N", 2);
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("_wy`sG+n-P0", string2);
      
      boolean boolean0 = StringUtils.equalsAny("Invalid locale format: ", charSequenceArray0);
      assertEquals(7, charSequenceArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test375()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      boolean boolean0 = StringUtils.isAllBlank(charSequenceArray0);
      assertEquals(0, charSequenceArray0.length);
      assertTrue(boolean0);
      
      String string0 = StringUtils.capitalize("xp");
      assertNotNull(string0);
      assertEquals("Xp", string0);
      
      boolean boolean1 = StringUtils.isWhitespace("aX-1.0x-412.24x1.0x-2592.4207x-2730.193aX-1.0x-412.24x1.0x-2592.4207x-2730.193aX-1.0x-412.24x1.0x-2592.4207x-2730.193-1.0x-412.24x1.0x-2592.4207x-2730.193nt ");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string1 = StringUtils.center("Array element ", 2, 'w');
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("Array element ", string1);
  }

  @Test(timeout = 4000)
  public void test376()  throws Throwable  {
      String string0 = StringUtils.rightPad("', is neither of type Map.Entry nor an Array", (-1945));
      assertNotNull(string0);
      assertEquals("', is neither of type Map.Entry nor an Array", string0);
      
      int int0 = StringUtils.indexOf((CharSequence) "', is neither of type Map.Entry nor an Array", (-1945));
      assertEquals((-1), int0);
      
      CharSequence[] charSequenceArray0 = null;
      boolean boolean0 = StringUtils.isAllBlank((CharSequence[]) null);
      assertTrue(boolean0);
      
      String string1 = "Index: ";
      String string2 = StringUtils.toRootUpperCase("', is neither of type Map.Entry nor an Array");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("', IS NEITHER OF TYPE MAP.ENTRY NOR AN ARRAY", string2);
      
      String string3 = null;
      // Undeclared exception!
      try { 
        Charset.forName("q]hq");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // q]hq
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test377()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      Locale locale0 = Locale.GERMANY;
      assertEquals("de", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("de_DE", locale0.toString());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("DE", locale0.getCountry());
      assertNotNull(locale0);
      
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      assertEquals("de", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("de_DE", locale0.toString());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("DE", locale0.getCountry());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertNotNull(set0);
      
      String string0 = StringUtils.substringAfter("\n", 598);
      assertNotNull(string0);
      assertEquals("", string0);
      
      int int0 = StringUtils.length("");
      assertEquals(0, int0);
      
      String string1 = StringUtils.abbreviate("", "", 77);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[6];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "\n";
      charSequenceArray0[2] = (CharSequence) " ";
      charSequenceArray0[3] = (CharSequence) "";
      charSequenceArray0[4] = (CharSequence) "\r";
      String string2 = StringUtils.deleteWhitespace("\n");
      assertTrue(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("", string2);
      
      String string3 = StringUtils.difference("p{InCombiningDiacriticalMarks}+", "\n");
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      assertEquals("\n", string3);
      
      boolean boolean0 = StringUtils.isAllBlank(charSequenceArray0);
      assertEquals(6, charSequenceArray0.length);
      assertTrue(boolean0);
      
      String string4 = StringUtils.capitalize("Array element ");
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertNotNull(string4);
      assertEquals("Array element ", string4);
      
      boolean boolean1 = StringUtils.isWhitespace(charSequenceArray0[1]);
      assertTrue(boolean1 == boolean0);
      assertEquals(6, charSequenceArray0.length);
      assertTrue(boolean1);
      
      boolean boolean2 = StringUtils.contains((CharSequence) "p{InCombiningDiacriticalMarks}+", charSequenceArray0[2]);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertEquals(6, charSequenceArray0.length);
      assertFalse(boolean2);
      
      boolean boolean3 = StringUtils.isNumericSpace(charSequenceArray0[4]);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3 == boolean1);
      assertEquals(6, charSequenceArray0.length);
      assertFalse(boolean3);
      
      String string5 = StringUtils.leftPad("#o~Q?4XC&WqE", 0, "Array element ");
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertNotNull(string5);
      assertEquals("#o~Q?4XC&WqE", string5);
      
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      String string6 = StringUtils.getIfEmpty("Array element ", supplier0);
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string1));
      assertTrue(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string5));
      assertNotNull(string6);
      assertEquals("Array element ", string6);
  }

  @Test(timeout = 4000)
  public void test378()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("Array element ", (String) null);
      assertEquals(3, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string0 = StringUtils.deleteWhitespace((String) null);
      assertNull(string0);
      
      Integer[] integerArray0 = new Integer[4];
      Integer integer0 = new Integer((-943));
      assertNotNull(integer0);
      assertEquals((-943), (int)integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((-2016));
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals((-2016), (int)integer1);
      
      integerArray0[1] = integer1;
      Integer integer2 = new Integer((int) integerArray0[1]);
      assertTrue(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      assertEquals(4, integerArray0.length);
      assertNotNull(integer2);
      assertEquals((-2016), (int)integer2);
      
      integerArray0[2] = integer2;
      char[] charArray0 = new char[8];
      charArray0[0] = 'U';
      charArray0[1] = 'P';
      charArray0[2] = '\u0015';
      charArray0[3] = '&';
      charArray0[4] = 'U';
      charArray0[5] = 'U';
      charArray0[6] = 'U';
      charArray0[7] = 'U';
      String string1 = StringUtils.valueOf(charArray0);
      assertEquals(8, charArray0.length);
      assertNotNull(string1);
      assertArrayEquals(new char[] {'U', 'P', '\u0015', '&', 'U', 'U', 'U', 'U'}, charArray0);
      assertEquals("UP\u0015&UUUU", string1);
      
      String string2 = StringUtils.getDigits("Array element ");
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("", string2);
      
      boolean boolean0 = StringUtils.isBlank("UP\u0015&UUUU");
      assertFalse(boolean0);
      
      int int0 = StringUtils.countMatches((CharSequence) "UP\u0015&UUUU", 'P');
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test379()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[0] = null;
      charSequenceArray0[1] = null;
      int int0 = StringUtils.indexOfAny((CharSequence) null, charSequenceArray0);
      assertEquals(2, charSequenceArray0.length);
      assertEquals((-1), int0);
      
      String string0 = StringUtils.removeStart("NDG$T!", "NDG$T!");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.removeAll("Cannot clone Cloneable type ", "");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("Cannot clone Cloneable type ", string1);
      
      String string2 = StringUtils.stripStart("...", "");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("...", string2);
      
      String[] stringArray0 = StringUtils.split("NDG$T!");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string3 = StringUtils.leftPad("/rTY>xc__z;>q_rsr", (-1), "/rTY>xc__z;>q_rsr");
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      assertEquals("/rTY>xc__z;>q_rsr", string3);
      
      String string4 = StringUtils.wrap("", 'r');
      assertTrue(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertNotNull(string4);
      assertEquals("", string4);
      
      String string5 = StringUtils.reverse("bmcsh>");
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertNotNull(string5);
      assertEquals(">hscmb", string5);
      
      boolean boolean0 = StringUtils.isAnyEmpty(charSequenceArray0);
      assertEquals(2, charSequenceArray0.length);
      assertTrue(boolean0);
      
      String string6 = StringUtils.substring((String) null, (-1));
      assertNull(string6);
  }

  @Test(timeout = 4000)
  public void test380()  throws Throwable  {
      String string0 = StringUtils.substring("}L~.", (-3733));
      assertNotNull(string0);
      assertEquals("}L~.", string0);
      
      String string1 = StringUtils.substring((String) null, (-3733));
      assertNull(string1);
  }

  @Test(timeout = 4000)
  public void test381()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("Supplied value must be a valid byte literal between -128 and 127: [");
      assertEquals(27, stringArray0.length);
      assertNotNull(stringArray0);
      
      boolean boolean0 = StringUtils.isAlphanumeric("Supplied value must be a valid byte literal between -128 and 127: [");
      assertFalse(boolean0);
      
      String[] stringArray1 = StringUtils.stripAll(stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(27, stringArray0.length);
      assertEquals(27, stringArray1.length);
      assertNotNull(stringArray1);
      
      String string0 = StringUtils.substringAfterLast("3cVDS7%sPY.d", "[5J#n[73#g[^2g");
      assertNotNull(string0);
      assertEquals("", string0);
      
      boolean boolean1 = StringUtils.isAlpha("3cVDS7%sPY.d");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string1 = StringUtils.appendIfMissingIgnoreCase("3cVDS7%sPY.d", "Supplied value must be a valid byte literal between -128 and 127: [", stringArray0);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(stringArray0, stringArray1);
      assertEquals(27, stringArray0.length);
      assertNotNull(string1);
      assertEquals("3cVDS7%sPY.dSupplied value must be a valid byte literal between -128 and 127: [", string1);
      
      String string2 = StringUtils.substringBetween("", "", (String) null);
      assertNull(string2);
      
      boolean boolean2 = StringUtils.isNumericSpace("");
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2);
      
      boolean boolean3 = StringUtils.isWhitespace("[5J#n[73#g[^2g");
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3);
  }

  @Test(timeout = 4000)
  public void test382()  throws Throwable  {
      String string0 = StringUtils.substringAfter("The Array must not be null", "}");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.removeStartIgnoreCase("The Array must not be null", "");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("The Array must not be null", string1);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "The Array must not be null", 100, 100);
      assertEquals((-1), int0);
      
      String string2 = StringUtils.upperCase("Minimum abbreviation width with offset is %d");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("MINIMUM ABBREVIATION WIDTH WITH OFFSET IS %D", string2);
      
      int[] intArray0 = new int[4];
      intArray0[0] = (-1);
      intArray0[1] = (-1);
      intArray0[2] = 100;
      intArray0[3] = (-1);
      String string3 = StringUtils.join(intArray0, 'z', 102, 0);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals(4, intArray0.length);
      assertNotNull(string3);
      assertArrayEquals(new int[] {(-1), (-1), 100, (-1)}, intArray0);
      assertEquals("", string3);
      
      String string4 = StringUtils.unwrap("Minimum abbreviation width with offset is %d", ")!1XjMA#y,~aU");
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertNotNull(string4);
      assertEquals("Minimum abbreviation width with offset is %d", string4);
      
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "}", "GdO[htbw}6Mc6.@E#)");
      assertTrue(boolean0);
      
      Locale locale0 = Locale.KOREA;
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("KR", locale0.getCountry());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("KOR", locale0.getISO3Country());
      assertNotNull(locale0);
      
      String string5 = StringUtils.upperCase(")!1XjMA#y,~aU", locale0);
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("KR", locale0.getCountry());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("KOR", locale0.getISO3Country());
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertNotNull(string5);
      assertEquals(")!1XJMA#Y,~AU", string5);
      
      boolean boolean1 = StringUtils.endsWithIgnoreCase(")!1XJMA#Y,~AU", "MINIMUM ABBREVIATION WIDTH WITH OFFSET IS %D");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test383()  throws Throwable  {
      String string0 = StringUtils.substringAfterLast("Supplied value must be a valid byte literal between -128 and 127: [", "Supplied value must be a valid byte literal between -128 and 127: [");
      assertNotNull(string0);
      assertEquals("", string0);
      
      char[] charArray0 = new char[3];
      charArray0[0] = '@';
      charArray0[1] = 'a';
      charArray0[2] = '$';
      boolean boolean0 = StringUtils.containsAny((CharSequence) "", charArray0);
      assertEquals(3, charArray0.length);
      assertArrayEquals(new char[] {'@', 'a', '$'}, charArray0);
      assertFalse(boolean0);
      
      String string1 = StringUtils.deleteWhitespace("");
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
      
      String string2 = StringUtils.stripAccents("9Bf;oQZFH\"2RFO");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("9Bf;oQZFH\"2RFO", string2);
      
      int int0 = StringUtils.compare("", ")!1XjMA#y,~aU");
      assertEquals((-13), int0);
      
      String string3 = StringUtils.substring("Search and Replace array lengths don't match: ", 380);
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string1));
      assertNotNull(string3);
      assertEquals("", string3);
      
      String string4 = StringUtils.leftPad("iq#9nlF_", 867);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertNotNull(string4);
      assertEqualsiq#9nlF_", string4);
      
      int int1 = StringUtils.compareIgnoreCase("", "Supplied value must be a valid byte literal between -128 and 127: [", true);
      assertFalse(int1 == int0);
      assertEquals((-67), int1);
  }

  @Test(timeout = 4000)
  public void test384()  throws Throwable  {
      String string0 = StringUtils.removePattern("ubs<", "ubs<");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.abbreviateMiddle("^f*uy+K+)I8=wl4Z", "", 32767);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("^f*uy+K+)I8=wl4Z", string1);
      
      String string2 = StringUtils.substringAfterLast("X.W(1D3", 29);
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("", string2);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "", (CharSequence) "", 24);
      assertEquals((-1), int0);
      
      int int1 = StringUtils.compareIgnoreCase("vyI7M?D++CGrBpJ2Hv7", (String) null, false);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test385()  throws Throwable  {
      String[] stringArray0 = new String[21];
      stringArray0[0] = "t7/DBWdSY|A[0X";
      stringArray0[1] = "Z]@8~.";
      String string0 = StringUtils.replaceEachRepeatedly("~x!0n@^E", stringArray0, stringArray0);
      assertEquals(21, stringArray0.length);
      assertNotNull(string0);
      assertEquals("~x!0n@^E", string0);
      
      boolean boolean0 = StringUtils.equalsAnyIgnoreCase("~x!0n@^E", stringArray0);
      assertEquals(21, stringArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test386()  throws Throwable  {
      String string0 = StringUtils.wrap(" is not in the range '0' - '9'", '3');
      assertNotNull(string0);
      assertEquals("3 is not in the range '0' - '9'3", string0);
      
      String string1 = StringUtils.SPACE;
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(" ", string1);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) null, (CharSequence) " is not in the range '0' - '9'", (int) (short)2127);
      assertEquals((-1), int0);
      
      boolean boolean0 = StringUtils.isWhitespace("zGiqL%uA|");
      assertFalse(boolean0);
      
      String string2 = StringUtils.replaceEachRepeatedly("", (String[]) null, (String[]) null);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("", string2);
  }

  @Test(timeout = 4000)
  public void test387()  throws Throwable  {
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short)2127;
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      charSequenceArray0[0] = null;
      charSequenceArray0[2] = null;
      String string0 = StringUtils.SPACE;
      assertNotNull(string0);
      assertEquals(" ", string0);
      
      int int0 = StringUtils.indexOfIgnoreCase(charSequenceArray0[0], (CharSequence) " ", (int) (short)2127);
      assertEquals(3, charSequenceArray0.length);
      assertEquals((-1), int0);
      
      boolean boolean0 = StringUtils.isWhitespace(charSequenceArray0[1]);
      assertEquals(3, charSequenceArray0.length);
      assertFalse(boolean0);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = " ";
      boolean boolean1 = StringUtils.containsAnyIgnoreCase(" ", stringArray0);
      assertFalse(boolean1 == boolean0);
      assertEquals(2, stringArray0.length);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test388()  throws Throwable  {
      String string0 = StringUtils.center("org.apache.commons.lang3.StringUtils", 8192);
      assertNotNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[8];
      charSequenceArray0[0] = (CharSequence) string0;
      int int0 = StringUtils.length(charSequenceArray0[0]);
      assertEquals(8, charSequenceArray0.length);
      assertEquals(8192, int0);
      
      String string1 = StringUtils.center("org.apache.commons.lang3.StringUtils", 4192);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.abbreviate("[=", string1, 8192);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("[=", string2);
      
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      assertEquals("TW", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_TW", locale0.toString());
      assertNotNull(locale0);
      
      String string3 = StringUtils.lowerCase("[=", locale0);
      assertEquals("TW", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_TW", locale0.toString());
      assertTrue(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      assertEquals("[=", string3);
      
      String string4 = StringUtils.stripStart((String) null, "org.apache.commons.lang3.StringUtils");
      assertNull(string4);
      
      String string5 = StringUtils.strip((String) null, "vjkf%J5sh ~>vq");
      assertNull(string5);
  }

  @Test(timeout = 4000)
  public void test389()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = 'Q';
      charArray0[1] = 'O';
      long[] longArray0 = new long[1];
      longArray0[0] = (long) 'O';
      String string0 = StringUtils.join(longArray0, 'x');
      assertEquals(1, longArray0.length);
      assertNotNull(string0);
      assertArrayEquals(new long[] {79L}, longArray0);
      assertEquals("79", string0);
      
      String[] stringArray0 = StringUtils.split("79", "9", 0);
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string1 = StringUtils.substringBetween("H^>WE", (String) null);
      assertNull(string1);
      
      String string2 = StringUtils.lowerCase("=q@F!X#Ug_t@7eq3P]P}dcFH>x");
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test390()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      String[] stringArray0 = StringUtils.split("\r", " ", 100);
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string0 = StringUtils.prependIfMissingIgnoreCase("\n", "\n", stringArray0);
      assertEquals(1, stringArray0.length);
      assertNotNull(string0);
      assertEquals("\n", string0);
      
      String string1 = StringUtils.lowerCase("\n");
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("\n", string1);
      
      String[] stringArray1 = StringUtils.splitByWholeSeparator("Cannot clone Cloneable type ", "Supplied value must be a valid byte literal between -128 and 127: [", 100);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray1, stringArray0);
      assertEquals(1, stringArray1.length);
      assertNotNull(stringArray1);
  }

  @Test(timeout = 4000)
  public void test391()  throws Throwable  {
      String string0 = StringUtils.removeEnd("Threshold must not be negative", "z9]NdoCi'78'>>");
      assertNotNull(string0);
      assertEquals("Threshold must not be negative", string0);
      
      String string1 = StringUtils.substringAfterLast("B", 101);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
      
      long[] longArray0 = new long[7];
      longArray0[0] = (long) '_';
      longArray0[1] = (long) '_';
      longArray0[2] = (long) 101;
      longArray0[3] = (long) '_';
      longArray0[4] = (long) '_';
      longArray0[5] = (long) 101;
      boolean boolean0 = StringUtils.isAlpha("Threshold must not be negative");
      assertFalse(boolean0);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("Threshold must not be negative", "B");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      Locale locale0 = Locale.ROOT;
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.toString());
      assertNotNull(locale0);
      
      String string2 = StringUtils.replaceChars("l{`", '_', 'H');
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("l{`", string2);
      
      int[] intArray0 = new int[0];
      String string3 = StringUtils.join(intArray0, 'a', (-444), (-444));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals(0, intArray0.length);
      assertNotNull(string3);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals("", string3);
      
      // Undeclared exception!
      try { 
        StringUtils.abbreviate("=:\"xy", (-585));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum abbreviation width is 4
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test392()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      String string0 = StringUtils.remove("", "\n");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.repeat("MN+O9}+Lt|qQ", "Np*il\"9^", (-1));
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
      
      String string2 = "Threshold must not be negative";
      String string3 = StringUtils.replaceChars("Minimum abbreviation width with offset is %d", "Threshold must not be negative", "e*j)gaK");
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      assertEquals("Mj)Kw*w*Kffg)g%", string3);
      
      char[] charArray0 = new char[7];
      charArray0[0] = '-';
      charArray0[1] = '\u0087';
      charArray0[2] = '(';
      charArray0[3] = '(';
      charArray0[4] = '(';
      charArray0[5] = '(';
      charArray0[6] = '}';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      assertEquals("-\u0087((((}", charBuffer0.toString());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.isDirect());
      assertTrue(charBuffer0.hasArray());
      assertEquals(7, charBuffer0.remaining());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(7, charBuffer0.length());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(7, charBuffer0.limit());
      assertEquals(7, charBuffer0.capacity());
      assertEquals(7, charArray0.length);
      assertNotNull(charBuffer0);
      assertArrayEquals(new char[] {'-', '\u0087', '(', '(', '(', '(', '}'}, charArray0);
      
      int int0 = (-2960);
      int int1 = (-1468);
      // Undeclared exception!
      try { 
        charBuffer0.get(charArray0, (-2960), (-1468));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test393()  throws Throwable  {
      String string0 = StringUtils.replace("Aborting to protect against StackOverflowError - output of one loop is the input of another", "Aborting to protect against StackOverflowError - output of one loop is the input of another", "Aborting to protect against StackOverflowError - output of one loop is the input of another", 571);
      assertNotNull(string0);
      assertEquals("Aborting to protect against StackOverflowError - output of one loop is the input of another", string0);
      
      String string1 = StringUtils.replaceIgnoreCase("Aborting to protect against StackOverflowError - output of one loop is the input of another", "", "", (-4154));
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("Aborting to protect against StackOverflowError - output of one loop is the input of another", string1);
      
      String string2 = StringUtils.rightPad("Aborting to protect against StackOverflowError - output of one loop is the input of another", 571, 'B');
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("Aborting to protect against StackOverflowError - output of one loop is the input of anotherBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB", string2);
      
      int int0 = StringUtils.compare("Aborting to protect against StackOverflowError - output of one loop is the input of another", "Aborting to protect against StackOverflowError - output of one loop is the input of another", false);
      assertEquals(0, int0);
      
      String string3 = StringUtils.center(".8y#w=ieC=zU", 571);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      assertEquals("                                                                                                                                                                                                                                                                                       .8y#w=ieC=zU                                                                                                                                                                                                                                                                                        ", string3);
      
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      boolean boolean0 = StringUtils.isAllEmpty(charSequenceArray0);
      assertEquals(0, charSequenceArray0.length);
      assertTrue(boolean0);
      
      String string4 = StringUtils.overlay("Aborting to protect against StackOverflowError - output of one loop is the input of another", "EFb<6wi", 128, 76);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertNotNull(string4);
      assertEquals("Aborting to protect against StackOverflowError - output of one loop is the iEFb<6wi", string4);
      
      String string5 = StringUtils.unwrap("Aborting to protect against StackOverflowError - output of one loop is the input of another", "Aborting to protect against StackOverflowError - output of one loop is the iEFb<6wi");
      assertTrue(string5.equals((Object)string0));
      assertTrue(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertNotNull(string5);
      assertEquals("Aborting to protect against StackOverflowError - output of one loop is the input of another", string5);
  }

  @Test(timeout = 4000)
  public void test394()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      Locale locale0 = Locale.GERMANY;
      assertEquals("DE", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("de_DE", locale0.toString());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("de", locale0.getLanguage());
      assertNotNull(locale0);
      
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      assertEquals("DE", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("de_DE", locale0.toString());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("de", locale0.getLanguage());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertNotNull(set0);
      
      int int0 = StringUtils.compare("", "\r");
      assertEquals((-1), int0);
      
      String string0 = StringUtils.substring("J@|mh9v&W,_-YS{~%(", Integer.MIN_VALUE);
      assertNotNull(string0);
      assertEquals("J@|mh9v&W,_-YS{~%(", string0);
      
      boolean boolean0 = StringUtils.isAlphaSpace("");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test395()  throws Throwable  {
      String string0 = StringUtils.stripEnd("{$Om", "{$Om");
      assertNotNull(string0);
      assertEquals("", string0);
      
      boolean boolean0 = StringUtils.isAlphaSpace("");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test396()  throws Throwable  {
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short)2127;
      String string0 = StringUtils.strip("KO)(uo0>#;Ny", "_wy`sG+n-P0");
      assertNotNull(string0);
      assertEquals("KO)(uo0>#;N", string0);
      
      String[] stringArray0 = StringUtils.split("_wy`sG+n-P0", "KO)(uo0>#;N");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string1 = "9~tGN{J--|u4;";
      String string2 = "x[BEyAx";
      // Undeclared exception!
      try { 
        StringUtils.removeAll("KO)(uo0>#;N", "x[BEyAx");
        fail("Expecting exception: PatternSyntaxException");
      
      } catch(PatternSyntaxException e) {
         //
         // Unclosed character class near index 6
         // x[BEyAx
         //       ^
         //
         verifyException("java.util.regex.Pattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test397()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      Locale locale0 = Locale.GERMANY;
      assertEquals("DE", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("de_DE", locale0.toString());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("de", locale0.getLanguage());
      assertEquals("DEU", locale0.getISO3Country());
      assertNotNull(locale0);
      
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      assertEquals("DE", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("de_DE", locale0.toString());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("de", locale0.getLanguage());
      assertEquals("DEU", locale0.getISO3Country());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertNotNull(set0);
      
      String string0 = StringUtils.substringAfter("\n", 598);
      assertNotNull(string0);
      assertEquals("", string0);
      
      int int0 = StringUtils.length("");
      assertEquals(0, int0);
      
      String string1 = StringUtils.abbreviate("", "", 598);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
      
      String string2 = StringUtils.deleteWhitespace("\n");
      assertTrue(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("", string2);
  }

  @Test(timeout = 4000)
  public void test398()  throws Throwable  {
      String string0 = StringUtils.chomp("aX-1.0x-412.24x1.0x-2592.4207x-2730.193aX-1.0x-412.24x1.0x-2592.4207x-2730.193aX-1.0x-412.24x1.0x-2592.4207x-2730.193-1.0x-412.24x1.0x-2592.4207x-2730.193", "aX-1.0x-412.24x1.0x-2592.4207x-2730.193aX-1.0x-412.24x1.0x-2592.4207x-2730.193aX-1.0x-412.24x1.0x-2592.4207x-2730.193-1.0x-412.24x1.0x-2592.4207x-2730.193");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.capitalize("nt ");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("Nt ", string1);
      
      String string2 = StringUtils.replace("nt ", " is not in the range '0' - '9'", "");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("nt ", string2);
      
      Locale locale0 = Locale.JAPANESE;
      assertEquals("", locale0.getISO3Country());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertNotNull(locale0);
      
      String string3 = StringUtils.lowerCase("%cf]l:uy>#-V", locale0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      assertEquals("%cf]l:uy>#-v", string3);
      
      CharSequence[] charSequenceArray0 = new CharSequence[8];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "Nt ";
      charSequenceArray0[2] = (CharSequence) " is not in the range '0' - '9'";
      charSequenceArray0[3] = (CharSequence) "%cf]l:uy>#-V";
      charSequenceArray0[4] = (CharSequence) "%cf]l:uy>#-V";
      charSequenceArray0[5] = (CharSequence) "nt ";
      charSequenceArray0[6] = (CharSequence) "maxWith cannot be negative";
      charSequenceArray0[7] = (CharSequence) " is not in the range '0' - '9'";
      boolean boolean0 = StringUtils.isAnyEmpty(charSequenceArray0);
      assertEquals(8, charSequenceArray0.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test399()  throws Throwable  {
      String string0 = StringUtils.wrapIfMissing("%d=7wr7,/{8", '`');
      assertNotNull(string0);
      assertEquals("`%d=7wr7,/{8`", string0);
      
      String string1 = StringUtils.rightPad("rp$f", (-3760));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("rp$f", string1);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "rp$f", (CharSequence) "`%d=7wr7,/{8`");
      assertEquals((-1), int0);
      
      boolean boolean0 = StringUtils.isWhitespace("rp$f");
      assertFalse(boolean0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[7];
      charSequenceArray0[0] = (CharSequence) "rp$f";
      charSequenceArray0[0] = (CharSequence) "`%d=7wr7,/{8`";
      String string2 = StringUtils.rightPad("Locale must not be null", (-1), '/');
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("Locale must not be null", string2);
      
      String string3 = StringUtils.substring("Locale must not be null", (-3760));
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      assertEquals("Locale must not be null", string3);
      
      int int1 = StringUtils.indexOfAny((CharSequence) "Locale must not be null", charSequenceArray0);
      assertTrue(int1 == int0);
      assertEquals(7, charSequenceArray0.length);
      assertEquals((-1), int1);
      
      String string4 = StringUtils.removeStart("`%d=7wr7,/{8`", "=");
      assertTrue(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertNotNull(string4);
      assertEquals("`%d=7wr7,/{8`", string4);
      
      int int2 = StringUtils.indexOfDifference((CharSequence) "Locale must not be null", (CharSequence) "%d=7wr7,/{8");
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(0, int2);
      
      boolean boolean1 = StringUtils.isAsciiPrintable("%d=7wr7,/{8");
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      int int3 = StringUtils.countMatches((CharSequence) "Locale must not be null", '/');
      assertFalse(int3 == int1);
      assertTrue(int3 == int2);
      assertFalse(int3 == int0);
      assertEquals(0, int3);
      
      String string5 = StringUtils.substring("Locale must not be null", (-1), 0);
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertNotNull(string5);
      assertEquals("", string5);
      
      String string6 = StringUtils.abbreviateMiddle("Locale must not be null", "`%d=7wr7,/{8`", (-1));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string0));
      assertTrue(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string5));
      assertTrue(string6.equals((Object)string3));
      assertNotNull(string6);
      assertEquals("Locale must not be null", string6);
      
      String string7 = StringUtils.mid("_", (-3760), (-2228));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string0));
      assertNotNull(string7);
      assertEquals("", string7);
      
      String string8 = StringUtils.stripToNull("|c");
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string7));
      assertNotNull(string8);
      assertEquals("|c", string8);
  }

  @Test(timeout = 4000)
  public void test400()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      String string0 = StringUtils.trimToEmpty("\n");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparator("", "\r", (-1));
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      Integer integer0 = new Integer(1);
      assertNotNull(integer0);
      assertEquals(1, (int)integer0);
      
      boolean boolean0 = StringUtils.isWhitespace("");
      assertTrue(boolean0);
      
      String string1 = StringUtils.mid("", 25, 25);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
      
      String string2 = StringUtils.substring(" ", (-2441));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals(" ", string2);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "\n", (CharSequence[]) stringArray0);
      assertEquals(0, stringArray0.length);
      assertEquals((-1), int0);
      
      double double0 = StringUtils.getJaroWinklerDistance("\r", "hO#<?AT(P`'dZr%s3");
      assertEquals(0.0, double0, 0.01);
      
      int int1 = StringUtils.indexOf((CharSequence) "", (-1));
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      boolean boolean1 = StringUtils.isAlphanumericSpace("");
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String[] stringArray1 = StringUtils.splitByWholeSeparatorPreserveAllTokens("\r", "hO#<?AT(P`'dZr%s3", 16);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray1, stringArray0);
      assertEquals(1, stringArray1.length);
      assertNotNull(stringArray1);
      
      int int2 = StringUtils.indexOfDifference((CharSequence[]) stringArray0);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
      assertNotSame(stringArray0, stringArray1);
      assertEquals(0, stringArray0.length);
      assertEquals((-1), int2);
  }

  @Test(timeout = 4000)
  public void test401()  throws Throwable  {
      String[] stringArray0 = StringUtils.split("object", "9Y`]eiW^{x@Rl", 3);
      assertEquals(2, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string0 = StringUtils.prependIfMissingIgnoreCase("-5y1iX{EX`M@KK#[b", "-5y1iX{EX`M@KK#[b", stringArray0);
      assertEquals(2, stringArray0.length);
      assertNotNull(string0);
      assertEquals("-5y1iX{EX`M@KK#[b", string0);
      
      String string1 = StringUtils.lowerCase("-5y1iX{EX`M@KK#[b");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("-5y1ix{ex`m@kk#[b", string1);
      
      String[] stringArray1 = StringUtils.splitByWholeSeparator("-5y1ix{ex`m@kk#[b", "x[BEyAx", 3);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray1, stringArray0);
      assertEquals(1, stringArray1.length);
      assertNotNull(stringArray1);
      
      int[] intArray0 = new int[8];
      intArray0[1] = 3;
      intArray0[2] = 3;
      intArray0[3] = 3;
      intArray0[4] = 3;
      intArray0[6] = (int) '8';
      intArray0[7] = (int) '8';
      String string2 = StringUtils.join(intArray0, '5');
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals(8, intArray0.length);
      assertNotNull(string2);
      assertArrayEquals(new int[] {0, 3, 3, 3, 3, 0, 56, 56}, intArray0);
      assertEquals("05353535350556556", string2);
      
      int int0 = StringUtils.compare("'Sd6K_;M-=", "-5y1iX{EX`M@KK#[b", false);
      assertEquals((-6), int0);
      
      String string3 = StringUtils.rightPad("object", (-733), '5');
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      assertEquals("object", string3);
      
      String string4 = StringUtils.substring("XZc^`#{MoTqK.5MV@uN", (-2135));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertNotNull(string4);
      assertEquals("XZc^`#{MoTqK.5MV@uN", string4);
      
      String string5 = StringUtils.join((Object[]) stringArray0, '/', 0, 0);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertNotSame(stringArray0, stringArray1);
      assertEquals(2, stringArray0.length);
      assertNotNull(string5);
      assertEquals("", string5);
      
      String string6 = StringUtils.overlay("~D'nSV", (String) null, 3, 5);
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string1));
      assertNotNull(string6);
      assertEquals("~D'V", string6);
      
      boolean boolean0 = StringUtils.isNoneEmpty(stringArray1);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray1, stringArray0);
      assertEquals(1, stringArray1.length);
      assertTrue(boolean0);
      
      boolean boolean1 = StringUtils.containsIgnoreCase("XZc^`#{MoTqK.5MV@uN", (CharSequence) null);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      int int1 = StringUtils.indexOfAny((CharSequence) "", (CharSequence[]) stringArray0);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertFalse(int1 == int0);
      assertNotSame(stringArray0, stringArray1);
      assertEquals(2, stringArray0.length);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test402()  throws Throwable  {
      String string0 = StringUtils.stripStart("%d=7wr7,/{8", "%d=7wr7,/{8");
      assertNotNull(string0);
      assertEquals("", string0);
      
      Integer integer0 = new Integer('`');
      assertNotNull(integer0);
      assertEquals(96, (int)integer0);
      
      boolean boolean0 = StringUtils.isWhitespace("rp$f");
      assertFalse(boolean0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[7];
      charSequenceArray0[0] = (CharSequence) "";
      String string1 = StringUtils.mid("Locale must not be null", '/', (int) integer0);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
      
      String string2 = StringUtils.substring("", (-3760));
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("", string2);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "Locale must not be null", charSequenceArray0);
      assertEquals(7, charSequenceArray0.length);
      assertEquals(0, int0);
      
      String string3 = StringUtils.overlay("%d=7wr7,/{8", "Strings must not be null", 0, 0);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      assertEquals("Strings must not be null%d=7wr7,/{8", string3);
      
      String string4 = StringUtils.abbreviateMiddle("yvk]>e?&ue-x-/+ZB", "Locale must not be null", (-3760));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertNotNull(string4);
      assertEquals("yvk]>e?&ue-x-/+ZB", string4);
  }

  @Test(timeout = 4000)
  public void test403()  throws Throwable  {
      String string0 = StringUtils.CR;
      assertNotNull(string0);
      assertEquals("\r", string0);
      
      int int0 = StringUtils.indexOfDifference((CharSequence) "\r", (CharSequence) "\r");
      assertEquals((-1), int0);
      
      String[] stringArray0 = StringUtils.split("\r", "");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      int int1 = StringUtils.indexOf((CharSequence) "", 3027);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      String string1 = StringUtils.deleteWhitespace("\r");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
      
      boolean boolean0 = StringUtils.isAlphaSpace((CharSequence) null);
      assertFalse(boolean0);
      
      String[] stringArray1 = StringUtils.splitPreserveAllTokens("\r", 'b');
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray1, stringArray0);
      assertEquals(1, stringArray1.length);
      assertNotNull(stringArray1);
      
      boolean boolean1 = StringUtils.containsWhitespace("");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string2 = StringUtils.replaceAll("", "", "");
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("", string2);
      
      String string3 = StringUtils.truncate("", 3027);
      assertTrue(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string1));
      assertNotNull(string3);
      assertEquals("", string3);
      
      String string4 = StringUtils.center("", 751, "M{|q @#X:3*:6q]-<");
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertNotNull(string4);
      assertEquals("M{|q @#X:3*:6q]-<M{|q @#X:3*:6q]-<M{|q @#X:3*:6q]-<M{|q @#X:3*:6q]-<M{|q @#X:3*:6q]-<M{|q @#X:3*:6q]-<M{|q @#X:3*:6q]-<M{|q @#X:3*:6q]-<M{|q @#X:3*:6q]-<M{|q @#X:3*:6q]-<M{|q @#X:3*:6q]-<M{|q @#X:3*:6q]-<M{|q @#X:3*:6q]-<M{|q @#X:3*:6q]-<M{|q @#X:3*:6q]-<M{|q @#X:3*:6q]-<M{|q @#X:3*:6q]-<M{|q @#X:3*:6q]-<M{|q @#X:3*:6q]-<M{|q @#X:3*:6q]-<M{|q @#X:3*:6q]-<M{|q @#X:3*:6q]-<MM{|q @#X:3*:6q]-<M{|q @#X:3*:6q]-<M{|q @#X:3*:6q]-<M{|q @#X:3*:6q]-<M{|q @#X:3*:6q]-<M{|q @#X:3*:6q]-<M{|q @#X:3*:6q]-<M{|q @#X:3*:6q]-<M{|q @#X:3*:6q]-<M{|q @#X:3*:6q]-<M{|q @#X:3*:6q]-<M{|q @#X:3*:6q]-<M{|q @#X:3*:6q]-<M{|q @#X:3*:6q]-<M{|q @#X:3*:6q]-<M{|q @#X:3*:6q]-<M{|q @#X:3*:6q]-<M{|q @#X:3*:6q]-<M{|q @#X:3*:6q]-<M{|q @#X:3*:6q]-<M{|q @#X:3*:6q]-<M{|q @#X:3*:6q]-<M{", string4);
  }

  @Test(timeout = 4000)
  public void test404()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = 'Q';
      charArray0[1] = 'O';
      charArray0[2] = '_';
      charArray0[3] = 'd';
      charArray0[4] = '!';
      charArray0[5] = 'E';
      String string0 = StringUtils.join(charArray0, 'Q');
      assertEquals(6, charArray0.length);
      assertNotNull(string0);
      assertArrayEquals(new char[] {'Q', 'O', '_', 'd', '!', 'E'}, charArray0);
      assertEquals("QQOQ_QdQ!QE", string0);
      
      int[] intArray0 = StringUtils.toCodePoints("QQOQ_QdQ!QE");
      assertEquals(11, intArray0.length);
      assertNotNull(intArray0);
      
      String string1 = StringUtils.join((Object[]) null, '_');
      assertNull(string1);
      
      int int0 = StringUtils.indexOfDifference((CharSequence) null, (CharSequence) "QQOQ_QdQ!QE");
      assertEquals(0, int0);
      
      String string2 = StringUtils.defaultString("QQOQ_QdQ!QE", (String) null);
      assertTrue(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("QQOQ_QdQ!QE", string2);
      
      String string3 = StringUtils.wrapIfMissing("The character ", "TOed(ag/wB@~}A5~|I");
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      assertEquals("TOed(ag/wB@~}A5~|IThe character TOed(ag/wB@~}A5~|I", string3);
      
      String string4 = StringUtils.substringAfter(", '", 0);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertNotNull(string4);
      assertEquals("", string4);
      
      String string5 = StringUtils.truncate("", 0);
      assertFalse(string5.equals((Object)string3));
      assertTrue(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertNotNull(string5);
      assertEquals("", string5);
      
      boolean boolean0 = StringUtils.containsNone((CharSequence) null, "The character ");
      assertTrue(boolean0);
      
      int int1 = StringUtils.indexOfAnyBut((CharSequence) "", charArray0);
      assertFalse(int1 == int0);
      assertEquals(6, charArray0.length);
      assertArrayEquals(new char[] {'Q', 'O', '_', 'd', '!', 'E'}, charArray0);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test405()  throws Throwable  {
      String string0 = StringUtils.strip("ghhfOQ!a{@M#22", "ghhfOQ!a{@M#22");
      assertNotNull(string0);
      assertEquals("", string0);
      
      boolean boolean0 = StringUtils.isNumericSpace("ghhfOQ!a{@M#22");
      assertFalse(boolean0);
      
      String string1 = StringUtils.replaceChars("ghhfOQ!a{@M#22", "ghhfOQ!a{@M#22", "Array and element cannot both be null");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("Array and elee", string1);
      
      boolean boolean1 = StringUtils.containsOnly((CharSequence) "Array and element cannot both be null", "sV%");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string2 = StringUtils.deleteWhitespace("ghhfOQ!a{@M#22");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("ghhfOQ!a{@M#22", string2);
  }

  @Test(timeout = 4000)
  public void test406()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = (-400);
      int int0 = StringUtils.compare((String) null, (String) null);
      assertEquals(0, int0);
      
      String string0 = StringUtils.substring("Comparator should not be null.", (-400));
      assertNotNull(string0);
      assertEquals("Comparator should not be null.", string0);
  }

  @Test(timeout = 4000)
  public void test407()  throws Throwable  {
      String string0 = StringUtils.substring("#|pOToSH", 1336);
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.unwrap("Object varargs must not be null", '-');
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("Object varargs must not be null", string1);
  }

  @Test(timeout = 4000)
  public void test408()  throws Throwable  {
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short)2127;
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      String string0 = StringUtils.wrap((String) null, '^');
      assertNull(string0);
      
      String[] stringArray0 = StringUtils.substringsBetween((String) null, "tqGfjg", (String) null);
      assertNull(stringArray0);
      
      String[] stringArray1 = StringUtils.splitPreserveAllTokens((String) null, "w]8 ");
      assertNull(stringArray1);
      
      String string1 = StringUtils.replacePattern("79", (String) null, "Locale must not be null");
      assertNotNull(string1);
      assertEquals("79", string1);
      
      Vector<Locale.LanguageRange> vector0 = new Vector<Locale.LanguageRange>();
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertNotNull(vector0);
      
      String string2 = StringUtils.prependIfMissingIgnoreCase("79", (CharSequence) null, (CharSequence[]) null);
      assertTrue(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("79", string2);
  }

  @Test(timeout = 4000)
  public void test409()  throws Throwable  {
      int int0 = StringUtils.indexOfAny((CharSequence) "}~.", "}~.");
      assertEquals(0, int0);
      
      String string0 = StringUtils.overlay("6 ", "jxIJLH}:puyjb1jcH", 1574, 1574);
      assertNotNull(string0);
      assertEquals("6 jxIJLH}:puyjb1jcH", string0);
      
      String string1 = StringUtils.wrapIfMissing("T", "]bOkB@Vp z %~4:iNvg");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("]bOkB@Vp z %~4:iNvgT]bOkB@Vp z %~4:iNvg", string1);
  }

  @Test(timeout = 4000)
  public void test410()  throws Throwable  {
      String string0 = StringUtils.LF;
      assertNotNull(string0);
      assertEquals("\n", string0);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "\n", "...");
      assertEquals((-1), int0);
      
      String string1 = StringUtils.overlay(">/u;Z+", (String) null, 460, (-1680));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
  }

  @Test(timeout = 4000)
  public void test411()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[1] = 670.2402;
      doubleArray0[2] = (-1587.19729612);
      doubleArray0[4] = 0.0;
      String string0 = StringUtils.chop("...");
      assertNotNull(string0);
      assertEquals("..", string0);
      
      String string1 = StringUtils.replaceOnceIgnoreCase("...", "...", "+H1xjs`[f?M");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("+H1xjs`[f?M", string1);
      
      String string2 = StringUtils.defaultIfEmpty("}79P(*uBsoK-PqJvK", "Minimum abbreviation width with offset is %d");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("}79P(*uBsoK-PqJvK", string2);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-16);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)26;
      String string3 = StringUtils.removeEnd("Array element ", "l{`");
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      assertEquals("Array element ", string3);
      
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      charSequenceArray0[0] = (CharSequence) "Array element ";
      charSequenceArray0[1] = (CharSequence) "Array element ";
      charSequenceArray0[2] = (CharSequence) "Minimum abbreviation width with offset is %d";
      charSequenceArray0[3] = (CharSequence) "Array element ";
      charSequenceArray0[4] = (CharSequence) "Minimum abbreviation width with offset is %d";
      double double0 = StringUtils.getJaroWinklerDistance("}79P(*uBsoK-PqJvK", "+H1xjs`[f?M");
      assertEquals(0.38, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test412()  throws Throwable  {
      String[] stringArray0 = StringUtils.split("object", "9Y`]eiW^{x@Rl", 3);
      assertEquals(2, stringArray0.length);
      assertNotNull(stringArray0);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "object", 1778);
      assertEquals((-1), int0);
      
      String string0 = StringUtils.unwrap("9Y`]eiW^{x@Rl", '~');
      assertNotNull(string0);
      assertEquals("9Y`]eiW^{x@Rl", string0);
      
      String string1 = StringUtils.rotate("object", 1778);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("ctobje", string1);
      
      CharSequence charSequence0 = StringUtils.defaultIfBlank((CharSequence) "ctobje", (CharSequence) null);
      assertTrue(charSequence0.equals((Object)string1));
      assertFalse(charSequence0.equals((Object)string0));
      assertNotNull(charSequence0);
      assertEquals("ctobje", charSequence0);
      
      // Undeclared exception!
      try { 
        StringUtils.getJaroWinklerDistance((CharSequence) null, "ctobje");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test413()  throws Throwable  {
      String string0 = StringUtils.replace("(l", "_*Q4?UnV\u0004B", "_*Q4?UnV\u0004B", (-1341));
      assertNotNull(string0);
      assertEquals("(l", string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      charSequenceArray0[0] = (CharSequence) "_*Q4?UnV\u0004B";
      charSequenceArray0[1] = (CharSequence) "(l";
      charSequenceArray0[2] = (CharSequence) "(l";
      charSequenceArray0[3] = (CharSequence) "(l";
      charSequenceArray0[4] = (CharSequence) "(l";
      boolean boolean0 = StringUtils.containsAnyIgnoreCase("(l", charSequenceArray0);
      assertEquals(5, charSequenceArray0.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test414()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[1] = 102;
      intArray0[2] = 0;
      intArray0[3] = 102;
      intArray0[4] = 102;
      intArray0[5] = (int) 'z';
      String string0 = StringUtils.join(intArray0, '\'', 102, 0);
      assertEquals(6, intArray0.length);
      assertNotNull(string0);
      assertArrayEquals(new int[] {0, 102, 0, 102, 102, 122}, intArray0);
      assertEquals("", string0);
      
      String string1 = StringUtils.unwrap("`Rpb=87tGg-S", "`Rpb=87tGg-S");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("`Rpb=87tGg-S", string1);
      
      String string2 = StringUtils.repeat('Q', 2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("QQ", string2);
      
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      charSequenceArray0[0] = (CharSequence) "`Rpb=87tGg-S";
      charSequenceArray0[1] = (CharSequence) "QQ";
      charSequenceArray0[2] = (CharSequence) "Array and element cannot both be null";
      boolean boolean0 = StringUtils.containsAnyIgnoreCase("QQ", charSequenceArray0);
      assertEquals(3, charSequenceArray0.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test415()  throws Throwable  {
      String string0 = StringUtils.repeat('Q', 16);
      assertNotNull(string0);
      assertEquals("QQQQQQQQQQQQQQQQ", string0);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "QQQQQQQQQQQQQQQQ", 0, 0);
      assertEquals((-1), int0);
      
      String string1 = StringUtils.leftPad("QQQQQQQQQQQQQQQQ", (-1), '#');
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("QQQQQQQQQQQQQQQQ", string1);
      
      String[] stringArray0 = StringUtils.splitByCharacterType((String) null);
      assertNull(stringArray0);
      
      String string2 = StringUtils.rightPad("QQQQQQQQQQQQQQQQ", 0, "QQQQQQQQQQQQQQQQ");
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("QQQQQQQQQQQQQQQQ", string2);
      
      String string3 = StringUtils.join((Object[]) null, "Threshold must not be negative");
      assertNull(string3);
      
      boolean boolean0 = StringUtils.isAllLowerCase("QQQQQQQQQQQQQQQQ");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isAlphanumericSpace((CharSequence) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string4 = StringUtils.defaultIfEmpty("OMw>WC$>`m7lgA0.", "eg+7:eQ");
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertNotNull(string4);
      assertEquals("OMw>WC$>`m7lgA0.", string4);
      
      boolean boolean2 = StringUtils.isMixedCase((CharSequence) null);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      String string5 = StringUtils.strip("[-;p", "K5zgaG77yy|{p/.");
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertNotNull(string5);
      assertEquals("[-;", string5);
      
      String string6 = StringUtils.stripStart((String) null, (String) null);
      assertNull(string6);
  }

  @Test(timeout = 4000)
  public void test416()  throws Throwable  {
      Class<String> class0 = String.class;
      ServiceLoader<String> serviceLoader0 = ServiceLoader.loadInstalled(class0);
      assertEquals("java.util.ServiceLoader[java.lang.String]", serviceLoader0.toString());
      assertNotNull(serviceLoader0);
      
      Class<CharBuffer> class1 = CharBuffer.class;
      ServiceLoader<CharBuffer> serviceLoader1 = ServiceLoader.loadInstalled(class1);
      assertEquals("java.util.ServiceLoader[java.nio.CharBuffer]", serviceLoader1.toString());
      assertNotNull(serviceLoader1);
      
      Spliterator<String> spliterator0 = serviceLoader0.spliterator();
      assertEquals("java.util.ServiceLoader[java.lang.String]", serviceLoader0.toString());
      assertNotNull(spliterator0);
      
      String string0 = StringUtils.join((Object[]) null, (String) null);
      assertNull(string0);
      
      int int0 = StringUtils.indexOfAnyBut((CharSequence) null, (CharSequence) null);
      assertEquals((-1), int0);
      
      String string1 = StringUtils.difference("Index: ", "G@*`|ITjN +QJ5x");
      assertNotNull(string1);
      assertEquals("G@*`|ITjN +QJ5x", string1);
      
      boolean boolean0 = StringUtils.contains((CharSequence) null, (CharSequence) "G@*`|ITjN +QJ5x");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isNumericSpace((CharSequence) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = StringUtils.isAlphaSpace("Index: ");
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test417()  throws Throwable  {
      String[] stringArray0 = StringUtils.split("object", "9Y`]eiW^{x@Rl", 3);
      assertEquals(2, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string0 = StringUtils.leftPad("object", 3);
      assertNotNull(string0);
      assertEquals("object", string0);
      
      String string1 = StringUtils.chop("Search and Replace array lengths don't match: ");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("Search and Replace array lengths don't match:", string1);
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      assertFalse(linkedList0.contains("Search and Replace array lengths don't match: "));
      
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      assertFalse(arrayList0.contains("Search and Replace array lengths don't match: "));
      
      String string2 = StringUtils.abbreviateMiddle("IJ[>-hg9BsMG#l", "Search and Replace array lengths don't match:", 2123);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("IJ[>-hg9BsMG#l", string2);
      
      boolean boolean0 = StringUtils.equalsAny("IJ[>-hg9BsMG#l", stringArray0);
      assertEquals(2, stringArray0.length);
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.startsWithAny("9Y`]eiW^{x@Rl", stringArray0);
      assertTrue(boolean1 == boolean0);
      assertEquals(2, stringArray0.length);
      assertFalse(boolean1);
      
      String[] stringArray1 = new String[7];
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      stringArray1[0] = "object";
      stringArray1[1] = "IJ[>-hg9BsMG#l";
      stringArray1[2] = "Search and Replace array lengths don't match:";
      stringArray1[3] = "9Y`]eiW^{x@Rl";
      stringArray1[4] = "IJ[>-hg9BsMG#l";
      stringArray1[5] = "IJ[>-hg9BsMG#l";
      stringArray1[6] = "Search and Replace array lengths don't match: ";
      String[] stringArray2 = StringUtils.stripAll(stringArray1);
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertFalse(stringArray2.equals((Object)stringArray1));
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray2, stringArray0);
      assertNotSame(stringArray2, stringArray1);
      assertNotSame(stringArray1, stringArray2);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(7, stringArray2.length);
      assertEquals(7, stringArray1.length);
      assertNotNull(stringArray2);
      
      String string3 = StringUtils.getDigits("9Y`]eiW^{x@Rl");
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      assertEquals("9", string3);
  }

  @Test(timeout = 4000)
  public void test418()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = 'Q';
      long[] longArray0 = new long[1];
      longArray0[0] = (long) 'O';
      String string0 = StringUtils.join(longArray0, 'x');
      assertEquals(1, longArray0.length);
      assertNotNull(string0);
      assertArrayEquals(new long[] {79L}, longArray0);
      assertEquals("79", string0);
      
      String[] stringArray0 = StringUtils.split("79", "9", 0);
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string1 = StringUtils.substringBetween("H^>WE", (String) null);
      assertNull(string1);
      
      String string2 = StringUtils.lowerCase("=q@F!X#Ug_t@7eq3P]P}dcFH>x");
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      String string3 = StringUtils.join((float[]) null, 'x');
      assertNull(string3);
      
      boolean boolean0 = StringUtils.contains((CharSequence) "H^>WE", (CharSequence) "H^>WE");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test419()  throws Throwable  {
      String string0 = StringUtils.chomp(")!1XjMA#y,~aU");
      assertNotNull(string0);
      assertEquals(")!1XjMA#y,~aU", string0);
      
      String string1 = StringUtils.substring(")!1XjMA#y,~aU", (-32768));
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(")!1XjMA#y,~aU", string1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      charSequenceArray0[2] = (CharSequence) ")!1XjMA#y,~aU";
      int int0 = StringUtils.lastIndexOfAny(")!1XjMA#y,~aU", charSequenceArray0);
      assertEquals(4, charSequenceArray0.length);
      assertEquals(0, int0);
      
      String string2 = StringUtils.substringAfterLast("DG'mib`w", 0);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("", string2);
      
      boolean boolean0 = StringUtils.startsWithAny(")!1XjMA#y,~aU", charSequenceArray0);
      assertEquals(4, charSequenceArray0.length);
      assertTrue(boolean0);
      
      String[] stringArray0 = StringUtils.split("org.apache.commons.lang3.RegExUtils", '<');
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test420()  throws Throwable  {
      String string0 = StringUtils.replaceEach("(/'fX", (String[]) null, (String[]) null);
      assertNotNull(string0);
      assertEquals("(/'fX", string0);
      
      boolean boolean0 = StringUtils.startsWithAny("(/'fX", (CharSequence[]) null);
      assertFalse(boolean0);
      
      String string1 = StringUtils.rightPad("\r", 159, 'o');
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("\roooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo", string1);
  }

  @Test(timeout = 4000)
  public void test421()  throws Throwable  {
      String string0 = StringUtils.substringAfter("^f*uy+K+)I8=wl4", 48);
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.truncate("R(<C", 751);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("R(<C", string1);
  }

  @Test(timeout = 4000)
  public void test422()  throws Throwable  {
      Object[] objectArray0 = new Object[5];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      objectArray0[1] = object1;
      Object object2 = new Object();
      assertFalse(object2.equals((Object)object0));
      assertFalse(object2.equals((Object)object1));
      assertNotNull(object2);
      
      objectArray0[2] = object2;
      Object object3 = new Object();
      assertFalse(object3.equals((Object)object1));
      assertFalse(object3.equals((Object)object0));
      assertFalse(object3.equals((Object)object2));
      assertNotNull(object3);
      
      objectArray0[3] = object3;
      Object object4 = new Object();
      assertFalse(object4.equals((Object)object2));
      assertFalse(object4.equals((Object)object3));
      assertFalse(object4.equals((Object)object1));
      assertFalse(object4.equals((Object)object0));
      assertNotNull(object4);
      
      objectArray0[4] = object4;
      String string0 = StringUtils.join(objectArray0, "3E[8WnR-zVr,b>N", 1336, 953);
      assertEquals(5, objectArray0.length);
      assertNotNull(string0);
      assertEquals("", string0);
      
      boolean boolean0 = StringUtils.containsAny((CharSequence) "", (char[]) null);
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.equals((CharSequence) "3E[8WnR-zVr,b>N", (CharSequence) "3E[8WnR-zVr,b>N");
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test423()  throws Throwable  {
      String string0 = StringUtils.center("org.apache.commons.lang3.StringUtils", 8192);
      assertNotNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[8];
      charSequenceArray0[0] = (CharSequence) string0;
      String string1 = StringUtils.abbreviate((String) null, string0, 322);
      assertNull(string1);
      
      charSequenceArray0[1] = (CharSequence) null;
      charSequenceArray0[2] = (CharSequence) "org.apache.commons.lang3.StringUtils";
      charSequenceArray0[3] = (CharSequence) string0;
      charSequenceArray0[4] = (CharSequence) "org.apache.commons.lang3.StringUtils";
      charSequenceArray0[5] = (CharSequence) string0;
      charSequenceArray0[6] = (CharSequence) string0;
      charSequenceArray0[7] = (CharSequence) "org.apache.commons.lang3.StringUtils";
      boolean boolean0 = StringUtils.isAnyEmpty(charSequenceArray0);
      assertEquals(8, charSequenceArray0.length);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 322;
      doubleArray0[1] = (double) 8192;
      doubleArray0[2] = (double) 8192;
      doubleArray0[3] = (double) 8192;
      String string2 = StringUtils.join(doubleArray0, '<', 8192, (-32768));
      assertFalse(string2.equals((Object)string0));
      assertEquals(4, doubleArray0.length);
      assertNotNull(string2);
      assertArrayEquals(new double[] {322.0, 8192.0, 8192.0, 8192.0}, doubleArray0, 0.01);
      assertEquals("", string2);
      
      boolean boolean1 = StringUtils.containsIgnoreCase(charSequenceArray0[7], string0);
      assertFalse(string0.equals((Object)string2));
      assertFalse(boolean1 == boolean0);
      assertEquals(8, charSequenceArray0.length);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test424()  throws Throwable  {
      Locale locale0 = Locale.US;
      assertEquals("en", locale0.getLanguage());
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("en_US", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("US", locale0.getCountry());
      assertNotNull(locale0);
      
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      assertEquals("en", locale0.getLanguage());
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("en_US", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("US", locale0.getCountry());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertNotNull(set0);
      
      String string0 = StringUtils.lowerCase("Aborting to protect against StackOverflowError - output of one loop is the input of another", locale0);
      assertEquals("en", locale0.getLanguage());
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("en_US", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("US", locale0.getCountry());
      assertNotNull(string0);
      assertEquals("aborting to protect against stackoverflowerror - output of one loop is the input of another", string0);
  }

  @Test(timeout = 4000)
  public void test425()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      Locale locale0 = Locale.GERMANY;
      assertEquals("de_DE", locale0.toString());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("DE", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("de", locale0.getLanguage());
      assertEquals("DEU", locale0.getISO3Country());
      assertNotNull(locale0);
      
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      assertEquals("de_DE", locale0.toString());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("DE", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("de", locale0.getLanguage());
      assertEquals("DEU", locale0.getISO3Country());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertNotNull(set0);
      
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.EXTENDED_FILTERING;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) arrayList0, (Collection<String>) set0, locale_FilteringMode0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertEquals("de_DE", locale0.toString());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("DE", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("de", locale0.getLanguage());
      assertEquals("DEU", locale0.getISO3Country());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
      
      String string0 = StringUtils.substringAfter("\n", 598);
      assertNotNull(string0);
      assertEquals("", string0);
      
      int int0 = StringUtils.length("");
      assertEquals(0, int0);
      
      String string1 = StringUtils.center(" ", 256);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("                                                                                                                                                                                                                                                                ", string1);
      
      String string2 = StringUtils.abbreviate("", "", 77);
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("", string2);
      
      CharSequence[] charSequenceArray0 = new CharSequence[8];
      charSequenceArray0[0] = (CharSequence) "";
      String string3 = StringUtils.lowerCase("", locale0);
      assertEquals("de_DE", locale0.toString());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("DE", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("de", locale0.getLanguage());
      assertEquals("DEU", locale0.getISO3Country());
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string0));
      assertNotNull(string3);
      assertEquals("", string3);
      
      charSequenceArray0[1] = (CharSequence) "";
      charSequenceArray0[2] = (CharSequence) "";
      charSequenceArray0[3] = (CharSequence) "";
      charSequenceArray0[4] = (CharSequence) "";
      charSequenceArray0[5] = (CharSequence) null;
      charSequenceArray0[6] = (CharSequence) "";
      charSequenceArray0[7] = (CharSequence) " ";
      boolean boolean0 = StringUtils.isAnyEmpty(charSequenceArray0);
      assertEquals(8, charSequenceArray0.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test426()  throws Throwable  {
      String string0 = StringUtils.stripAccents("");
      assertNotNull(string0);
      assertEquals("", string0);
      
      boolean boolean0 = StringUtils.isNotBlank("");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isAllEmpty((CharSequence[]) null);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String string1 = StringUtils.removeEnd("Supplied value must be a valid byte literal between -128 and 127: [", "");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("Supplied value must be a valid byte literal between -128 and 127: [", string1);
      
      String string2 = StringUtils.lowerCase("...");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("...", string2);
      
      String string3 = StringUtils.abbreviate("y !zX", "", 345, 345);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      assertEquals("y !zX", string3);
      
      Locale locale0 = new Locale("Supplied value must be a valid byte literal between -128 and 127: [", "...", "y !zX");
      assertEquals("supplied value must be a valid byte literal between -128 and 127: [", locale0.getLanguage());
      assertEquals("supplied value must be a valid byte literal between -128 and 127: [_..._y !zX", locale0.toString());
      assertEquals("y !zX", locale0.getVariant());
      assertEquals("...", locale0.getCountry());
      assertNotNull(locale0);
      
      Locale locale1 = Locale.UK;
      assertEquals("en", locale1.getLanguage());
      assertEquals("en_GB", locale1.toString());
      assertEquals("GBR", locale1.getISO3Country());
      assertEquals("", locale1.getVariant());
      assertEquals("eng", locale1.getISO3Language());
      assertEquals("GB", locale1.getCountry());
      assertFalse(locale1.equals((Object)locale0));
      assertNotSame(locale1, locale0);
      assertNotNull(locale1);
      
      Locale locale2 = Locale.TAIWAN;
      assertEquals("zho", locale2.getISO3Language());
      assertEquals("TW", locale2.getCountry());
      assertEquals("TWN", locale2.getISO3Country());
      assertEquals("zh", locale2.getLanguage());
      assertEquals("zh_TW", locale2.toString());
      assertEquals("", locale2.getVariant());
      assertFalse(locale2.equals((Object)locale0));
      assertFalse(locale2.equals((Object)locale1));
      assertNotSame(locale2, locale0);
      assertNotSame(locale2, locale1);
      assertNotNull(locale2);
      
      Set<Character> set0 = locale2.getExtensionKeys();
      assertEquals("zho", locale2.getISO3Language());
      assertEquals("TW", locale2.getCountry());
      assertEquals("TWN", locale2.getISO3Country());
      assertEquals("zh", locale2.getLanguage());
      assertEquals("zh_TW", locale2.toString());
      assertEquals("", locale2.getVariant());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertFalse(locale2.equals((Object)locale0));
      assertFalse(locale2.equals((Object)locale1));
      assertNotSame(locale2, locale0);
      assertNotSame(locale2, locale1);
      assertNotNull(set0);
      
      String string4 = locale1.getDisplayVariant(locale2);
      assertEquals("en", locale1.getLanguage());
      assertEquals("en_GB", locale1.toString());
      assertEquals("GBR", locale1.getISO3Country());
      assertEquals("", locale1.getVariant());
      assertEquals("eng", locale1.getISO3Language());
      assertEquals("GB", locale1.getCountry());
      assertEquals("zho", locale2.getISO3Language());
      assertEquals("TW", locale2.getCountry());
      assertEquals("TWN", locale2.getISO3Country());
      assertEquals("zh", locale2.getLanguage());
      assertEquals("zh_TW", locale2.toString());
      assertEquals("", locale2.getVariant());
      assertFalse(locale1.equals((Object)locale2));
      assertFalse(locale1.equals((Object)locale0));
      assertFalse(locale2.equals((Object)locale0));
      assertFalse(locale2.equals((Object)locale1));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string0));
      assertNotSame(locale1, locale2);
      assertNotSame(locale1, locale0);
      assertNotSame(locale2, locale0);
      assertNotSame(locale2, locale1);
      assertNotNull(string4);
      assertEquals("", string4);
      
      boolean boolean2 = locale2.hasExtensions();
      assertEquals("zho", locale2.getISO3Language());
      assertEquals("TW", locale2.getCountry());
      assertEquals("TWN", locale2.getISO3Country());
      assertEquals("zh", locale2.getLanguage());
      assertEquals("zh_TW", locale2.toString());
      assertEquals("", locale2.getVariant());
      assertFalse(locale2.equals((Object)locale0));
      assertFalse(locale2.equals((Object)locale1));
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertNotSame(locale2, locale0);
      assertNotSame(locale2, locale1);
      assertFalse(boolean2);
      
      String string5 = locale1.getDisplayCountry(locale0);
      assertEquals("supplied value must be a valid byte literal between -128 and 127: [", locale0.getLanguage());
      assertEquals("supplied value must be a valid byte literal between -128 and 127: [_..._y !zX", locale0.toString());
      assertEquals("y !zX", locale0.getVariant());
      assertEquals("...", locale0.getCountry());
      assertEquals("en", locale1.getLanguage());
      assertEquals("en_GB", locale1.toString());
      assertEquals("GBR", locale1.getISO3Country());
      assertEquals("", locale1.getVariant());
      assertEquals("eng", locale1.getISO3Language());
      assertEquals("GB", locale1.getCountry());
      assertFalse(locale0.equals((Object)locale2));
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(locale1.equals((Object)locale2));
      assertFalse(locale1.equals((Object)locale0));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertNotSame(locale0, locale2);
      assertNotSame(locale0, locale1);
      assertNotSame(locale1, locale2);
      assertNotSame(locale1, locale0);
      assertNotNull(string5);
      assertEquals("United Kingdom", string5);
      
      String string6 = locale0.getDisplayLanguage();
      assertEquals("supplied value must be a valid byte literal between -128 and 127: [", locale0.getLanguage());
      assertEquals("supplied value must be a valid byte literal between -128 and 127: [_..._y !zX", locale0.toString());
      assertEquals("y !zX", locale0.getVariant());
      assertEquals("...", locale0.getCountry());
      assertFalse(locale0.equals((Object)locale2));
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string1));
      assertNotSame(locale0, locale2);
      assertNotSame(locale0, locale1);
      assertNotNull(string6);
      assertEquals("supplied value must be a valid byte literal between -128 and 127: [", string6);
      
      long[] longArray0 = new long[7];
      longArray0[0] = (long) 345;
      longArray0[1] = (long) 345;
      longArray0[2] = (long) 345;
      longArray0[3] = (long) 345;
      longArray0[4] = (long) 345;
      longArray0[5] = (long) 345;
      longArray0[6] = (long) 345;
      String string7 = StringUtils.join(longArray0, '%');
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string3));
      assertEquals(7, longArray0.length);
      assertNotNull(string7);
      assertArrayEquals(new long[] {345L, 345L, 345L, 345L, 345L, 345L, 345L}, longArray0);
      assertEquals("345%345%345%345%345%345%345", string7);
      
      boolean boolean3 = StringUtils.equalsAny("United Kingdom", (CharSequence[]) null);
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3);
      
      int int0 = StringUtils.length("y !zX");
      assertEquals(5, int0);
  }

  @Test(timeout = 4000)
  public void test427()  throws Throwable  {
      String[] stringArray0 = StringUtils.split("9YI]eiW^{EnWRl", "9YI]eiW^{EnWRl", 3);
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      boolean boolean0 = StringUtils.equalsAny("W", stringArray0);
      assertEquals(0, stringArray0.length);
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isWhitespace("W");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test428()  throws Throwable  {
      float[] floatArray0 = new float[5];
      floatArray0[0] = (-1.0F);
      floatArray0[1] = (-412.24F);
      floatArray0[2] = 1.0F;
      floatArray0[3] = (-2592.4207F);
      floatArray0[4] = (-2730.193F);
      String[] stringArray0 = StringUtils.split("3yh;5&9>U|r", "3yh;5&9>U|r");
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string0 = StringUtils.removeAll("3yh;5&9>U|r", "3yh;5&9>U|r");
      assertNotNull(string0);
      assertEquals("|", string0);
      
      String string1 = StringUtils.remove("org.apache.commons.lang3.CharSequenceUtils", "', is neither of type Map.Entry nor an Array");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("org.apache.commons.lang3.CharSequenceUtils", string1);
      
      String string2 = StringUtils.replacePattern("9~tGN{J--|u4;", "org.apache.commons.lang3.CharSequenceUtils", "G%M7viq{()9C[4w|Rn0");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("9~tGN{J--|u4;", string2);
      
      boolean boolean0 = StringUtils.endsWith("|", "9~tGN{J--|u4;");
      assertFalse(boolean0);
      
      String string3 = StringUtils.removeEndIgnoreCase("|", "9~tGN{J--|u4;");
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      assertEquals("|", string3);
      
      String string4 = StringUtils.replacePattern((String) null, " has no clone method", (String) null);
      assertNull(string4);
  }

  @Test(timeout = 4000)
  public void test429()  throws Throwable  {
      String string0 = StringUtils.replace("Aborting to protect against StackOverflowError - output of one loop is the input of another", "Aborting to protect against StackOverflowError - output of one loop is the input of another", "Aborting to protect against StackOverflowError - output of one loop is the input of another", 571);
      assertNotNull(string0);
      assertEquals("Aborting to protect against StackOverflowError - output of one loop is the input of another", string0);
      
      String string1 = StringUtils.replaceIgnoreCase("Aborting to protect against StackOverflowError - output of one loop is the input of another", "", "", (-4154));
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("Aborting to protect against StackOverflowError - output of one loop is the input of another", string1);
      
      Locale locale0 = Locale.forLanguageTag("Aborting to protect against StackOverflowError - output of one loop is the input of another");
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertNotNull(locale0);
      
      Locale locale1 = Locale.ROOT;
      assertEquals("", locale1.getISO3Language());
      assertEquals("", locale1.getLanguage());
      assertEquals("", locale1.getVariant());
      assertEquals("", locale1.getISO3Country());
      assertEquals("", locale1.getCountry());
      assertEquals("", locale1.toString());
      assertSame(locale1, locale0);
      assertNotNull(locale1);
      
      int int0 = StringUtils.getFuzzyDistance("Aborting to protect against StackOverflowError - output of one loop is the input of another", "Aborting to protect against StackOverflowError - output of one loop is the input of another", locale1);
      assertEquals("", locale1.getISO3Language());
      assertEquals("", locale1.getLanguage());
      assertEquals("", locale1.getVariant());
      assertEquals("", locale1.getISO3Country());
      assertEquals("", locale1.getCountry());
      assertEquals("", locale1.toString());
      assertSame(locale1, locale0);
      assertEquals(271, int0);
      
      String string2 = StringUtils.mid("u-](", 1632, 571);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("", string2);
      
      String string3 = StringUtils.defaultString("]");
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      assertEquals("]", string3);
      
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      charSequenceArray0[0] = (CharSequence) "Aborting to protect against StackOverflowError - output of one loop is the input of another";
      charSequenceArray0[2] = (CharSequence) "Aborting to protect against StackOverflowError - output of one loop is the input of another";
      String string4 = StringUtils.appendIfMissing("The character ", "Aborting to protect against StackOverflowError - output of one loop is the input of another", charSequenceArray0);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertEquals(3, charSequenceArray0.length);
      assertNotNull(string4);
      assertEquals("The character Aborting to protect against StackOverflowError - output of one loop is the input of another", string4);
      
      boolean boolean0 = StringUtils.equalsIgnoreCase("u-](", "");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test430()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      String string0 = StringUtils.CR;
      assertNotNull(string0);
      assertEquals("\r", string0);
      
      String string1 = StringUtils.rightPad(" ", (-733), '\\');
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(" ", string1);
      
      String string2 = StringUtils.substring("\r", 1429);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("", string2);
      
      String string3 = StringUtils.join((Object[]) null, 'X', 116, (-1289));
      assertNull(string3);
      
      CharSequence[] charSequenceArray0 = new CharSequence[9];
      String string4 = StringUtils.substringAfter("^8\"W9", (String) null);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertNotNull(string4);
      assertEquals("", string4);
      
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) " ";
      String string5 = StringUtils.center("\r", 848, 'C');
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertNotNull(string5);
      assertEquals("CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC\rCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC", string5);
      
      charSequenceArray0[2] = (CharSequence) "CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC\rCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC";
      charSequenceArray0[3] = (CharSequence) null;
      charSequenceArray0[4] = (CharSequence) null;
      charSequenceArray0[5] = (CharSequence) null;
      charSequenceArray0[6] = (CharSequence) "\r";
      charSequenceArray0[7] = (CharSequence) "\r";
      charSequenceArray0[8] = (CharSequence) " ";
      boolean boolean0 = StringUtils.endsWithAny("\r", charSequenceArray0);
      assertEquals(9, charSequenceArray0.length);
      assertTrue(boolean0);
      
      int int0 = StringUtils.ordinalIndexOf(" ", charSequenceArray0[1], 1021);
      assertEquals(9, charSequenceArray0.length);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test431()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("Array element ", (String) null);
      assertEquals(3, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string0 = StringUtils.deleteWhitespace((String) null);
      assertNull(string0);
      
      Integer[] integerArray0 = new Integer[4];
      Integer integer0 = new Integer((-943));
      assertNotNull(integer0);
      assertEquals((-943), (int)integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((-2016));
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals((-2016), (int)integer1);
      
      integerArray0[1] = integer1;
      Integer integer2 = new Integer((int) integerArray0[1]);
      assertTrue(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      assertEquals(4, integerArray0.length);
      assertNotNull(integer2);
      assertEquals((-2016), (int)integer2);
      
      integerArray0[2] = integer2;
      char[] charArray0 = new char[8];
      charArray0[0] = 'U';
      charArray0[1] = 'P';
      charArray0[2] = '\u0015';
      charArray0[3] = '&';
      charArray0[4] = 'U';
      charArray0[5] = 'U';
      charArray0[6] = 'U';
      String[] stringArray1 = StringUtils.split("Array element ", (String) null);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray1, stringArray0);
      assertEquals(2, stringArray1.length);
      assertNotNull(stringArray1);
      
      String string1 = StringUtils.removeAll((String) null, "9~tGN{J--|u4;");
      assertNull(string1);
      
      String string2 = StringUtils.remove((String) null, "', is neither of type Map.Entry nor an Array");
      assertNull(string2);
      
      boolean boolean0 = StringUtils.endsWith((CharSequence) null, (CharSequence) null);
      assertTrue(boolean0);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "9~tGN{J--|u4;", (CharSequence) "Array element ");
      assertEquals((-1), int0);
      
      String string3 = StringUtils.substringAfter("9~tGN{J--|u4;", (String) null);
      assertNotNull(string3);
      assertEquals("", string3);
      
      String string4 = StringUtils.replacePattern("", "", " has no clone method");
      assertFalse(string4.equals((Object)string3));
      assertNotNull(string4);
      assertEquals(" has no clone method", string4);
  }

  @Test(timeout = 4000)
  public void test432()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      String string0 = StringUtils.stripStart("\r", "\r");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens(" ", "\r");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string1 = StringUtils.substring("", 4, 9);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
      
      String string2 = StringUtils.remove("", "");
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("", string2);
      
      String string3 = StringUtils.center((String) null, 0);
      assertNull(string3);
  }

  @Test(timeout = 4000)
  public void test433()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      Locale locale0 = Locale.GERMANY;
      assertEquals("de_DE", locale0.toString());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("DE", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("de", locale0.getLanguage());
      assertEquals("DEU", locale0.getISO3Country());
      assertNotNull(locale0);
      
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      assertEquals("de_DE", locale0.toString());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("DE", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("de", locale0.getLanguage());
      assertEquals("DEU", locale0.getISO3Country());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertNotNull(set0);
      
      byte[] byteArray0 = new byte[0];
      String string0 = StringUtils.join(byteArray0, 's', (-1), (-1));
      assertEquals(0, byteArray0.length);
      assertNotNull(string0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals("", string0);
      
      int int0 = StringUtils.lastOrdinalIndexOf("", "", (-1));
      assertEquals((-1), int0);
      
      String string1 = StringUtils.substring(", Length: ", (-1));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(" ", string1);
      
      boolean boolean0 = StringUtils.isAlphaSpace((CharSequence) null);
      assertFalse(boolean0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      CharSequence charSequence0 = StringUtils.firstNonEmpty(charSequenceArray0);
      assertEquals(0, charSequenceArray0.length);
      assertNull(charSequence0);
      
      int int1 = StringUtils.indexOfIgnoreCase((CharSequence) "o`**r>jxZ%", (CharSequence) "");
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      boolean boolean1 = StringUtils.endsWith((CharSequence) null, "\r");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string2 = StringUtils.substringAfter(" ", "\n");
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("", string2);
  }

  @Test(timeout = 4000)
  public void test434()  throws Throwable  {
      String string0 = StringUtils.LF;
      assertNotNull(string0);
      assertEquals("\n", string0);
      
      int int0 = StringUtils.indexOfDifference((CharSequence) "\n", (CharSequence) "\n");
      assertEquals((-1), int0);
      
      String[] stringArray0 = StringUtils.split("\n", "");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string1 = StringUtils.join((int[]) null, '[');
      assertNull(string1);
      
      int int1 = StringUtils.compare("\n", (String) null, true);
      assertFalse(int1 == int0);
      assertEquals(1, int1);
      
      CharSequence charSequence0 = StringUtils.firstNonEmpty((CharSequence[]) stringArray0);
      assertTrue(charSequence0.equals((Object)string0));
      assertEquals(1, stringArray0.length);
      assertNotNull(charSequence0);
      assertEquals("\n", charSequence0);
      
      String string2 = StringUtils.appendIfMissing("The character ", "\n", (CharSequence[]) null);
      assertFalse(string2.equals((Object)charSequence0));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("The character \n", string2);
      
      int int2 = StringUtils.lastIndexOf((CharSequence) "", 32, 1746);
      assertFalse(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals((-1), int2);
      
      String string3 = StringUtils.substringBeforeLast("^R#", "");
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)charSequence0));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      assertEquals("^R#", string3);
      
      Vector<Locale.LanguageRange> vector0 = new Vector<Locale.LanguageRange>();
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertNotNull(vector0);
      
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      assertFalse(linkedList0.contains("The character "));
      
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) vector0, (Collection<String>) linkedList0, locale_FilteringMode0);
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertEquals(0, linkedList0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
      assertFalse(linkedList0.contains("The character "));
      assertFalse(list0.contains("The character "));
      
      String string4 = StringUtils.substringAfter((String) null, 598);
      assertNull(string4);
      
      int int3 = StringUtils.length("^R#");
      assertFalse(int3 == int2);
      assertFalse(int3 == int1);
      assertFalse(int3 == int0);
      assertEquals(3, int3);
      
      int int4 = StringUtils.ordinalIndexOf("\n", "\n", 456);
      assertTrue(int4 == int2);
      assertFalse(int4 == int3);
      assertFalse(int4 == int1);
      assertTrue(int4 == int0);
      assertEquals((-1), int4);
  }

  @Test(timeout = 4000)
  public void test435()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 13;
      String string0 = StringUtils.chomp(")j1y-~m&w_YR%", ")j1y-~m&w_YR%");
      assertNotNull(string0);
      assertEquals("", string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      charSequenceArray0[0] = (CharSequence) ")j1y-~m&w_YR%";
      boolean boolean0 = StringUtils.isAnyBlank(charSequenceArray0);
      assertEquals(1, charSequenceArray0.length);
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isNumeric(charSequenceArray0[0]);
      assertTrue(boolean1 == boolean0);
      assertEquals(1, charSequenceArray0.length);
      assertFalse(boolean1);
      
      int int0 = StringUtils.indexOf(charSequenceArray0[0], 13);
      assertEquals(1, charSequenceArray0.length);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test436()  throws Throwable  {
      float[] floatArray0 = new float[5];
      floatArray0[0] = (-1.0F);
      floatArray0[1] = (-412.24F);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)10;
      byteArray0[1] = (byte)98;
      byteArray0[2] = (byte)31;
      String string0 = StringUtils.join(byteArray0, 'l', (int) (byte)98, (int) (byte)31);
      assertEquals(3, byteArray0.length);
      assertNotNull(string0);
      assertArrayEquals(new byte[] {(byte)10, (byte)98, (byte)31}, byteArray0);
      assertEquals("", string0);
      
      String string1 = "\\B&9,5'F5>";
      // Undeclared exception!
      try { 
        StringUtils.truncate("B&9,5'F5>", (int) (byte)31, (-4611));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // maxWith cannot be negative
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test437()  throws Throwable  {
      String string0 = StringUtils.substringBetween("Pl'I0C0]FVY*{:`jr{`", "Pl'I0C0]FVY*{:`jr{`");
      assertNull(string0);
      
      String string1 = StringUtils.deleteWhitespace((String) null);
      assertNull(string1);
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) null;
      String string2 = StringUtils.join(objectArray0);
      assertEquals(1, objectArray0.length);
      assertNotNull(string2);
      assertEquals("", string2);
      
      String string3 = StringUtils.trim("nt ");
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      assertEquals("nt", string3);
      
      boolean boolean0 = StringUtils.containsWhitespace("Pl'I0C0]FVY*{:`jr{`");
      assertFalse(boolean0);
      
      String string4 = StringUtils.replace("%,!4,]IQkd1 bH@yJ)7", (String) null, "nt aX-1.0x-412.24x1.0x-2592.4207x-2730.193aX-1.0x-412.24x1.0x-2592.4207x-2730.193aX-1.0x-412.24x1.0x-2592.4207x-2730.193-1.0x-412.24x1.0x-2592.4207x-2730.193");
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertNotNull(string4);
      assertEquals("%,!4,]IQkd1 bH@yJ)7", string4);
      
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      booleanArray0[6] = false;
      booleanArray0[7] = false;
      String string5 = StringUtils.rotate((String) null, (-2672));
      assertNull(string5);
  }

  @Test(timeout = 4000)
  public void test438()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[8];
      float[] floatArray0 = new float[5];
      floatArray0[0] = (-1.0F);
      floatArray0[1] = (-412.24F);
      floatArray0[2] = 1.0F;
      floatArray0[3] = (-2592.4207F);
      floatArray0[4] = (-2730.193F);
      String string0 = StringUtils.join(floatArray0, 'x');
      assertEquals(5, floatArray0.length);
      assertNotNull(string0);
      assertArrayEquals(new float[] {(-1.0F), (-412.24F), 1.0F, (-2592.4207F), (-2730.193F)}, floatArray0, 0.01F);
      assertEquals("-1.0x-412.24x1.0x-2592.4207x-2730.193", string0);
      
      charSequenceArray0[0] = (CharSequence) "-1.0x-412.24x1.0x-2592.4207x-2730.193";
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "-1.0x-412.24x1.0x-2592.4207x-2730.193");
      assertFalse(charBuffer0.hasArray());
      assertEquals(37, charBuffer0.limit());
      assertFalse(charBuffer0.isDirect());
      assertEquals(37, charBuffer0.capacity());
      assertEquals("-1.0x-412.24x1.0x-2592.4207x-2730.193", charBuffer0.toString());
      assertEquals(37, charBuffer0.length());
      assertTrue(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.position());
      assertEquals(37, charBuffer0.remaining());
      assertTrue(charBuffer0.hasRemaining());
      assertNotNull(charBuffer0);
      
      Buffer buffer0 = charBuffer0.flip();
      assertEquals(0, charBuffer0.remaining());
      assertFalse(charBuffer0.hasArray());
      assertFalse(charBuffer0.isDirect());
      assertEquals(37, charBuffer0.capacity());
      assertEquals(0, charBuffer0.limit());
      assertFalse(charBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.length());
      assertEquals("", charBuffer0.toString());
      assertTrue(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.position());
      assertEquals(0, buffer0.remaining());
      assertFalse(buffer0.hasArray());
      assertTrue(buffer0.isReadOnly());
      assertEquals(37, buffer0.capacity());
      assertEquals(0, buffer0.position());
      assertFalse(buffer0.isDirect());
      assertEquals(0, buffer0.limit());
      assertFalse(buffer0.hasRemaining());
      assertNotNull(buffer0);
      
      charSequenceArray0[1] = (CharSequence) charBuffer0;
      String[] stringArray0 = new String[9];
      stringArray0[0] = "-1.0x-412.24x1.0x-2592.4207x-2730.193";
      stringArray0[1] = "-1.0x-412.24x1.0x-2592.4207x-2730.193";
      stringArray0[2] = "-1.0x-412.24x1.0x-2592.4207x-2730.193";
      String string1 = StringUtils.mid("y 3jx*Wf", 2293, 2293);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
      
      String string2 = StringUtils.defaultString("-1.0x-412.24x1.0x-2592.4207x-2730.193");
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("-1.0x-412.24x1.0x-2592.4207x-2730.193", string2);
      
      String string3 = StringUtils.join(floatArray0, 'x', 2293, 31);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals(5, floatArray0.length);
      assertNotNull(string3);
      assertArrayEquals(new float[] {(-1.0F), (-412.24F), 1.0F, (-2592.4207F), (-2730.193F)}, floatArray0, 0.01F);
      assertEquals("", string3);
      
      String string4 = StringUtils.rotate("-1.0x-412.24x1.0x-2592.4207x-2730.193", 31);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertNotNull(string4);
      assertEquals("412.24x1.0x-2592.4207x-2730.193-1.0x-", string4);
  }

  @Test(timeout = 4000)
  public void test439()  throws Throwable  {
      String string0 = StringUtils.stripStart("maxWith cannot be negative", "maxWith cannot be negative");
      assertNotNull(string0);
      assertEquals("", string0);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "", (CharSequence) "maxWith cannot be negative");
      assertEquals(26, int0);
      
      boolean boolean0 = StringUtils.equalsIgnoreCase("", "");
      assertTrue(boolean0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[9];
      CharSequence charSequence0 = StringUtils.defaultIfBlank((CharSequence) "", (CharSequence) "k:%oT");
      assertFalse(charSequence0.equals((Object)string0));
      assertNotNull(charSequence0);
      assertEquals("k:%oT", charSequence0);
      
      charSequenceArray0[0] = (CharSequence) "k:%oT";
      charSequenceArray0[1] = (CharSequence) "maxWith cannot be negative";
      charSequenceArray0[2] = (CharSequence) "maxWith cannot be negative";
      charSequenceArray0[3] = (CharSequence) "k:%oT";
      charSequenceArray0[4] = (CharSequence) "";
      charSequenceArray0[5] = (CharSequence) "k:%oT";
      charSequenceArray0[6] = (CharSequence) "k:%oT";
      CharSequence[] charSequenceArray1 = new CharSequence[2];
      assertFalse(charSequenceArray1.equals((Object)charSequenceArray0));
      
      charSequenceArray1[0] = (CharSequence) "k:%oT";
      charSequenceArray1[1] = (CharSequence) "";
      CharSequence charSequence1 = StringUtils.firstNonEmpty(charSequenceArray1);
      assertFalse(charSequenceArray1.equals((Object)charSequenceArray0));
      assertFalse(charSequence1.equals((Object)string0));
      assertTrue(charSequence1.equals((Object)charSequence0));
      assertNotSame(charSequenceArray1, charSequenceArray0);
      assertEquals(2, charSequenceArray1.length);
      assertNotNull(charSequence1);
      assertEquals("k:%oT", charSequence1);
      
      charSequenceArray0[7] = (CharSequence) "k:%oT";
      charSequenceArray0[8] = (CharSequence) "maxWith cannot be negative";
      String string1 = StringUtils.appendIfMissing("k:%oT", "k:%oT", charSequenceArray0);
      assertFalse(string1.equals((Object)string0));
      assertTrue(string1.equals((Object)charSequence0));
      assertTrue(string1.equals((Object)charSequence1));
      assertFalse(charSequenceArray0.equals((Object)charSequenceArray1));
      assertNotSame(charSequenceArray0, charSequenceArray1);
      assertEquals(9, charSequenceArray0.length);
      assertNotNull(string1);
      assertEquals("k:%oT", string1);
      
      int int1 = StringUtils.lastIndexOf((CharSequence) "", (CharSequence) "k:%oT");
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      int int2 = StringUtils.lastIndexOf(charSequenceArray0[2], (-5927), 11);
      assertFalse(charSequenceArray0.equals((Object)charSequenceArray1));
      assertFalse(int2 == int0);
      assertTrue(int2 == int1);
      assertNotSame(charSequenceArray0, charSequenceArray1);
      assertEquals(9, charSequenceArray0.length);
      assertEquals((-1), int2);
      
      String string2 = StringUtils.substringBeforeLast("", "");
      assertFalse(string2.equals((Object)charSequence1));
      assertFalse(string2.equals((Object)charSequence0));
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("", string2);
      
      String string3 = StringUtils.mid("", 31, 256);
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)charSequence1));
      assertFalse(string3.equals((Object)charSequence0));
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string2));
      assertNotNull(string3);
      assertEquals("", string3);
      
      String string4 = StringUtils.defaultString("e*j)gaK");
      assertFalse(string4.equals((Object)charSequence0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)charSequence1));
      assertFalse(string4.equals((Object)string0));
      assertNotNull(string4);
      assertEquals("e*j)gaK", string4);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) 31;
      floatArray0[1] = (float) (-5927);
      String string5 = StringUtils.substring("", (int) '>', (-5927));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)charSequence0));
      assertTrue(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)charSequence1));
      assertTrue(string5.equals((Object)string2));
      assertNotNull(string5);
      assertEquals("", string5);
  }

  @Test(timeout = 4000)
  public void test440()  throws Throwable  {
      String string0 = StringUtils.trimToEmpty(":W3vjMB@");
      assertNotNull(string0);
      assertEquals(":W3vjMB@", string0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparator(":W3vjMB@", ":W3vjMB@", 0);
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string1 = StringUtils.strip("s?m(/");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("s?m(/", string1);
      
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertNotNull(linkedHashSet0);
      assertFalse(linkedHashSet0.contains(":W3vjMB@"));
      
      boolean boolean0 = linkedHashSet0.add("pk?9bG");
      assertFalse(linkedHashSet0.isEmpty());
      assertEquals(1, linkedHashSet0.size());
      assertTrue(linkedHashSet0.contains("pk?9bG"));
      assertFalse(linkedHashSet0.contains(":W3vjMB@"));
      assertTrue(boolean0);
      
      boolean boolean1 = StringUtils.isAllEmpty(stringArray0);
      assertTrue(boolean1 == boolean0);
      assertEquals(1, stringArray0.length);
      assertTrue(boolean1);
      
      boolean boolean2 = StringUtils.containsAny((CharSequence) ":W3vjMB@", (CharSequence) ":W3vjMB@");
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2);
      
      String string2 = StringUtils.removePattern("'qD41`", ":W3vjMB@");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("'qD41`", string2);
      
      String string3 = StringUtils.substringAfterLast("c", 0);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      assertEquals("", string3);
  }

  @Test(timeout = 4000)
  public void test441()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      charSequenceArray0[0] = (CharSequence) "...";
      charSequenceArray0[1] = (CharSequence) "Z]@8~.";
      boolean boolean0 = StringUtils.isAllEmpty(charSequenceArray0);
      assertEquals(3, charSequenceArray0.length);
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.containsAny(charSequenceArray0[0], charSequenceArray0[2]);
      assertTrue(boolean1 == boolean0);
      assertEquals(3, charSequenceArray0.length);
      assertFalse(boolean1);
      
      String string0 = StringUtils.difference("Z]@8~.", "Z]@8~.");
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test442()  throws Throwable  {
      String string0 = StringUtils.wrap((String) null, ';');
      assertNull(string0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparator((String) null, (String) null);
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test443()  throws Throwable  {
      String string0 = StringUtils.replaceIgnoreCase("N-OiSn0Rs>", "N-OiSn0Rs>", "ghhfOQ!a{@M#22", 102);
      assertNotNull(string0);
      assertEquals("ghhfOQ!a{@M#22", string0);
      
      String string1 = StringUtils.swapCase("N-OiSn0Rs>");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("n-oIsN0rS>", string1);
      
      String string2 = StringUtils.normalizeSpace((String) null);
      assertNull(string2);
  }

  @Test(timeout = 4000)
  public void test444()  throws Throwable  {
      String string0 = StringUtils.stripStart("maxWith cannot be negative", "maxWith cannot be negative");
      assertNotNull(string0);
      assertEquals("", string0);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "", (CharSequence) "maxWith cannot be negative");
      assertEquals(26, int0);
      
      boolean boolean0 = StringUtils.equalsIgnoreCase("", "");
      assertTrue(boolean0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[9];
      CharSequence charSequence0 = StringUtils.defaultIfBlank((CharSequence) "", (CharSequence) ", Length: 0");
      assertFalse(charSequence0.equals((Object)string0));
      assertNotNull(charSequence0);
      assertEquals(", Length: 0", charSequence0);
      
      charSequenceArray0[0] = (CharSequence) ", Length: 0";
      charSequenceArray0[1] = (CharSequence) "maxWith cannot be negative";
      charSequenceArray0[2] = (CharSequence) "maxWith cannot be negative";
      charSequenceArray0[3] = (CharSequence) ", Length: 0";
      charSequenceArray0[4] = (CharSequence) "";
      charSequenceArray0[5] = (CharSequence) ", Length: 0";
      charSequenceArray0[6] = (CharSequence) ", Length: 0";
      CharSequence[] charSequenceArray1 = new CharSequence[2];
      assertFalse(charSequenceArray1.equals((Object)charSequenceArray0));
      
      charSequenceArray1[0] = (CharSequence) ", Length: 0";
      charSequenceArray1[1] = (CharSequence) "";
      CharSequence charSequence1 = StringUtils.firstNonEmpty(charSequenceArray1);
      assertFalse(charSequenceArray1.equals((Object)charSequenceArray0));
      assertFalse(charSequence1.equals((Object)string0));
      assertTrue(charSequence1.equals((Object)charSequence0));
      assertNotSame(charSequenceArray1, charSequenceArray0);
      assertEquals(2, charSequenceArray1.length);
      assertNotNull(charSequence1);
      assertEquals(", Length: 0", charSequence1);
      
      charSequenceArray0[7] = (CharSequence) ", Length: 0";
      charSequenceArray0[8] = (CharSequence) "maxWith cannot be negative";
      String string1 = StringUtils.swapCase(", Length: 0");
      assertFalse(string1.equals((Object)charSequence1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)charSequence0));
      assertNotNull(string1);
      assertEquals(", lENGTH: 0", string1);
      
      int int1 = StringUtils.lastIndexOf((CharSequence) "", (CharSequence) ", lENGTH: 0");
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      int int2 = StringUtils.lastIndexOf(charSequenceArray0[2], (-5927), 11);
      assertFalse(charSequenceArray0.equals((Object)charSequenceArray1));
      assertFalse(int2 == int0);
      assertTrue(int2 == int1);
      assertNotSame(charSequenceArray0, charSequenceArray1);
      assertEquals(9, charSequenceArray0.length);
      assertEquals((-1), int2);
      
      String string2 = StringUtils.substringBeforeLast("", "");
      assertFalse(string2.equals((Object)charSequence1));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)charSequence0));
      assertTrue(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("", string2);
      
      String string3 = StringUtils.mid("", 0, 256);
      assertFalse(string3.equals((Object)charSequence0));
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)charSequence1));
      assertTrue(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      assertEquals("", string3);
      
      String string4 = StringUtils.defaultString("e*j)gaK");
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)charSequence1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)charSequence0));
      assertNotNull(string4);
      assertEquals("e*j)gaK", string4);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) 0;
      floatArray0[1] = (float) (-5927);
      String string5 = StringUtils.join(floatArray0, '>', 0, 0);
      assertFalse(string5.equals((Object)charSequence0));
      assertTrue(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)charSequence1));
      assertFalse(string5.equals((Object)string4));
      assertTrue(string5.equals((Object)string2));
      assertTrue(string5.equals((Object)string3));
      assertEquals(2, floatArray0.length);
      assertNotNull(string5);
      assertArrayEquals(new float[] {0.0F, (-5927.0F)}, floatArray0, 0.01F);
      assertEquals("", string5);
  }

  @Test(timeout = 4000)
  public void test445()  throws Throwable  {
      String string0 = StringUtils.leftPad("Supplied value must be a valid byte literal between -128 and 127: [", 50, 'g');
      assertNotNull(string0);
      assertEquals("Supplied value must be a valid byte literal between -128 and 127: [", string0);
      
      String[] stringArray0 = StringUtils.splitByCharacterType("...!eC:fL^MxNTr");
      assertEquals(11, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string1 = StringUtils.rightPad(".", (-2518), "org.apache.commons.lang3.CharSequenceUtils");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(".", string1);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      String string2 = StringUtils.join((Object[]) stringArray0, "pYG1W!?");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals(11, stringArray0.length);
      assertNotNull(string2);
      assertEquals("...!pYG1W!?epYG1W!?CpYG1W!?:pYG1W!?fpYG1W!?LpYG1W!?^pYG1W!?MpYG1W!?xpYG1W!?NTpYG1W!?r", string2);
      
      boolean boolean0 = StringUtils.isAllLowerCase("The type must not be null");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isAlphanumericSpace("pYG1W!?");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string3 = StringUtils.defaultIfEmpty("!eC", "%cf]l:uy>#-V");
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      assertEquals("!eC", string3);
      
      boolean boolean2 = StringUtils.isMixedCase("u-](");
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test446()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      Locale locale0 = Locale.GERMANY;
      assertEquals("de", locale0.getLanguage());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("de_DE", locale0.toString());
      assertEquals("DE", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertNotNull(locale0);
      
      Locale locale1 = Locale.US;
      assertEquals("en", locale1.getLanguage());
      assertEquals("USA", locale1.getISO3Country());
      assertEquals("en_US", locale1.toString());
      assertEquals("US", locale1.getCountry());
      assertEquals("", locale1.getVariant());
      assertEquals("eng", locale1.getISO3Language());
      assertFalse(locale1.equals((Object)locale0));
      assertNotSame(locale1, locale0);
      assertNotNull(locale1);
      
      String string0 = locale1.getDisplayScript(locale0);
      assertEquals("de", locale0.getLanguage());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("de_DE", locale0.toString());
      assertEquals("DE", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale1.getLanguage());
      assertEquals("USA", locale1.getISO3Country());
      assertEquals("en_US", locale1.toString());
      assertEquals("US", locale1.getCountry());
      assertEquals("", locale1.getVariant());
      assertEquals("eng", locale1.getISO3Language());
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(locale1.equals((Object)locale0));
      assertNotSame(locale0, locale1);
      assertNotSame(locale1, locale0);
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = locale0.getDisplayCountry(locale1);
      assertEquals("de", locale0.getLanguage());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("de_DE", locale0.toString());
      assertEquals("DE", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale1.getLanguage());
      assertEquals("USA", locale1.getISO3Country());
      assertEquals("en_US", locale1.toString());
      assertEquals("US", locale1.getCountry());
      assertEquals("", locale1.getVariant());
      assertEquals("eng", locale1.getISO3Language());
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(locale1.equals((Object)locale0));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(locale0, locale1);
      assertNotSame(locale1, locale0);
      assertNotNull(string1);
      assertEquals("Germany", string1);
      
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      assertEquals("de", locale0.getLanguage());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("de_DE", locale0.toString());
      assertEquals("DE", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertFalse(locale0.equals((Object)locale1));
      assertNotSame(locale0, locale1);
      assertNotNull(set0);
      assertFalse(set0.contains(string0));
      
      String string2 = StringUtils.replace(" ", " ", (String) null, 30);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals(" ", string2);
      
      String string3 = StringUtils.trimToNull(" ");
      assertNull(string3);
      
      String string4 = StringUtils.trimToEmpty("");
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string0));
      assertNotNull(string4);
      assertEquals("", string4);
  }

  @Test(timeout = 4000)
  public void test447()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("Array element ", "Array element ");
      assertEquals(2, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string0 = StringUtils.deleteWhitespace("Array element ");
      assertNotNull(string0);
      assertEquals("Arrayelement", string0);
      
      Integer[] integerArray0 = new Integer[4];
      int int0 = (-943);
      Integer integer0 = new Integer((-943));
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(integer0);
      assertEquals((-943), (int)integer0);
      
      integerArray0[0] = integer0;
      boolean boolean0 = StringUtils.equals((CharSequence) "Array element ", (CharSequence) "Arrayelement");
      assertFalse(boolean0);
      
      char char0 = '2';
      String string1 = StringUtils.rightPad("Array element ", (int) integerArray0[0], '2');
      assertFalse(string1.equals((Object)string0));
      assertEquals(4, integerArray0.length);
      assertNotNull(string1);
      assertEquals("Array element ", string1);
      
      // Undeclared exception!
      try { 
        StringUtils.abbreviate("(vAE", (-943));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum abbreviation width is 4
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test448()  throws Throwable  {
      String string0 = StringUtils.LF;
      assertNotNull(string0);
      assertEquals("\n", string0);
      
      int int0 = StringUtils.indexOfDifference((CharSequence) "\n", (CharSequence) "\n");
      assertEquals((-1), int0);
      
      String string1 = StringUtils.capitalize("");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
      
      String string2 = StringUtils.wrapIfMissing("MN+O9}+Lt|qQ", 'M');
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("MN+O9}+Lt|qQM", string2);
      
      String string3 = StringUtils.capitalize("");
      assertTrue(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      assertEquals("", string3);
      
      String string4 = StringUtils.remove("^Ix7#O=YJrk{VPu", 'M');
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertNotNull(string4);
      assertEquals("^Ix7#O=YJrk{VPu", string4);
      
      boolean boolean0 = StringUtils.containsNone((CharSequence) "^Ix7#O=YJrk{VPu", "7");
      assertFalse(boolean0);
      
      String[] stringArray0 = StringUtils.split("org.apache.commons.lang3.ObjectUtils", '=');
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) "^Ix7#O=YJrk{VPu";
      objectArray0[1] = (Object) "\n";
      objectArray0[2] = (Object) "^Ix7#O=YJrk{VPu";
      objectArray0[3] = (Object) "^Ix7#O=YJrk{VPu";
      objectArray0[4] = (Object) "";
      objectArray0[5] = (Object) "MN+O9}+Lt|qQM";
      objectArray0[6] = (Object) "";
      String string5 = StringUtils.join(objectArray0, '=');
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertEquals(7, objectArray0.length);
      assertNotNull(string5);
      assertEquals("^Ix7#O=YJrk{VPu=\n=^Ix7#O=YJrk{VPu=^Ix7#O=YJrk{VPu==MN+O9}+Lt|qQM=", string5);
      
      int int1 = StringUtils.getLevenshteinDistance((CharSequence) "\n", (CharSequence) "");
      assertFalse(int1 == int0);
      assertEquals(1, int1);
      
      String[] stringArray1 = StringUtils.splitPreserveAllTokens("^Ix7#O=YJrk{VPu");
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray1, stringArray0);
      assertEquals(1, stringArray1.length);
      assertNotNull(stringArray1);
      
      boolean boolean1 = StringUtils.containsWhitespace("\n");
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test449()  throws Throwable  {
      String string0 = StringUtils.stripStart("maxWith cannot be negative", "maxWith cannot be negative");
      assertNotNull(string0);
      assertEquals("", string0);
      
      int int0 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      boolean boolean0 = StringUtils.equalsIgnoreCase("", "");
      assertTrue(boolean0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[9];
      CharSequence charSequence0 = StringUtils.defaultIfBlank((CharSequence) "", (CharSequence) ", Length: 0");
      assertFalse(charSequence0.equals((Object)string0));
      assertNotNull(charSequence0);
      assertEquals(", Length: 0", charSequence0);
      
      charSequenceArray0[0] = (CharSequence) ", Length: 0";
      charSequenceArray0[1] = (CharSequence) "maxWith cannot be negative";
      charSequenceArray0[0] = (CharSequence) "maxWith cannot be negative";
      charSequenceArray0[3] = (CharSequence) ", Length: 0";
      charSequenceArray0[4] = (CharSequence) "";
      charSequenceArray0[5] = (CharSequence) ", Length: 0";
      charSequenceArray0[6] = (CharSequence) ", Length: 0";
      CharSequence[] charSequenceArray1 = new CharSequence[2];
      assertFalse(charSequenceArray1.equals((Object)charSequenceArray0));
      
      charSequenceArray1[0] = (CharSequence) ", Length: 0";
      charSequenceArray1[1] = (CharSequence) "";
      CharSequence charSequence1 = StringUtils.firstNonEmpty(charSequenceArray1);
      assertFalse(charSequenceArray1.equals((Object)charSequenceArray0));
      assertTrue(charSequence1.equals((Object)charSequence0));
      assertFalse(charSequence1.equals((Object)string0));
      assertNotSame(charSequenceArray1, charSequenceArray0);
      assertEquals(2, charSequenceArray1.length);
      assertNotNull(charSequence1);
      assertEquals(", Length: 0", charSequence1);
      
      charSequenceArray0[7] = (CharSequence) ", Length: 0";
      charSequenceArray0[8] = (CharSequence) "maxWith cannot be negative";
      String string1 = StringUtils.swapCase(", Length: 0");
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)charSequence1));
      assertFalse(string1.equals((Object)charSequence0));
      assertNotNull(string1);
      assertEquals(", lENGTH: 0", string1);
      
      int int1 = StringUtils.lastIndexOf((CharSequence) "", (CharSequence) ", lENGTH: 0");
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      int int2 = StringUtils.lastIndexOf(charSequenceArray0[2], (-5927), 11);
      assertFalse(charSequenceArray0.equals((Object)charSequenceArray1));
      assertTrue(int2 == int0);
      assertTrue(int2 == int1);
      assertNotSame(charSequenceArray0, charSequenceArray1);
      assertEquals(9, charSequenceArray0.length);
      assertEquals((-1), int2);
      
      String string2 = StringUtils.substringBeforeLast("", "");
      assertFalse(string2.equals((Object)charSequence1));
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)charSequence0));
      assertNotNull(string2);
      assertEquals("", string2);
      
      String string3 = StringUtils.mid("", 0, 256);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)charSequence1));
      assertFalse(string3.equals((Object)charSequence0));
      assertTrue(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string2));
      assertNotNull(string3);
      assertEquals("", string3);
      
      String string4 = StringUtils.defaultString("e*j)gaK");
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)charSequence0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)charSequence1));
      assertFalse(string4.equals((Object)string0));
      assertNotNull(string4);
      assertEquals("e*j)gaK", string4);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) 0;
      floatArray0[1] = (float) (-5927);
      String string5 = StringUtils.join(floatArray0, '>', 0, 0);
      assertTrue(string5.equals((Object)string0));
      assertTrue(string5.equals((Object)string2));
      assertTrue(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)charSequence1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)charSequence0));
      assertFalse(string5.equals((Object)string1));
      assertEquals(2, floatArray0.length);
      assertNotNull(string5);
      assertArrayEquals(new float[] {0.0F, (-5927.0F)}, floatArray0, 0.01F);
      assertEquals("", string5);
      
      boolean boolean1 = StringUtils.containsWhitespace("");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string6 = StringUtils.removeAll("aX-", "");
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)charSequence0));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)charSequence1));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string0));
      assertNotNull(string6);
      assertEquals("aX-", string6);
  }

  @Test(timeout = 4000)
  public void test450()  throws Throwable  {
      String string0 = "Pl'I0C0]FVY*{:`jr{`";
      String string1 = StringUtils.substringBetween("Pl'I0C0]FVY*{:`jr{`", "Pl'I0C0]FVY*{:`jr{`");
      assertNull(string1);
      
      String string2 = StringUtils.deleteWhitespace((String) null);
      assertNull(string2);
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) null;
      String string3 = StringUtils.join(objectArray0);
      assertFalse(string3.equals((Object)string0));
      assertEquals(1, objectArray0.length);
      assertNotNull(string3);
      assertEquals("", string3);
      
      String string4 = StringUtils.trim("nt ");
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertNotNull(string4);
      assertEquals("nt", string4);
      
      boolean boolean0 = StringUtils.containsWhitespace("Pl'I0C0]FVY*{:`jr{`");
      assertFalse(boolean0);
      
      String string5 = "nt aX-1.0x-412.24x1.0x-2592.4207x-2730.193aX-1.0x-412.24x1.0x-2592.4207x-2730.193aX-1.0x-412.24x1.0x-2592.4207x-2730.193-1.0x-412.24x1.0x-2592.4207x-2730.193";
      String string6 = StringUtils.replace("%,!4,]IQkd1 bH@yJ)7", (String) null, "nt aX-1.0x-412.24x1.0x-2592.4207x-2730.193aX-1.0x-412.24x1.0x-2592.4207x-2730.193aX-1.0x-412.24x1.0x-2592.4207x-2730.193-1.0x-412.24x1.0x-2592.4207x-2730.193");
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string0));
      assertNotNull(string6);
      assertEquals("%,!4,]IQkd1 bH@yJ)7", string6);
      
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      booleanArray0[6] = false;
      booleanArray0[7] = false;
      booleanArray0[8] = true;
      char char0 = 'B';
      String string7 = StringUtils.join(booleanArray0, 'B');
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string5));
      assertEquals(9, booleanArray0.length);
      assertNotNull(string7);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false, false, true}, booleanArray0));
      assertEquals("falseBfalseBfalseBfalseBfalseBfalseBfalseBfalseBtrue", string7);
      
      // Undeclared exception!
      try { 
        StringUtils.abbreviate("%,!4,]IQkd1 bH@yJ)7", (-3104));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum abbreviation width is 4
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test451()  throws Throwable  {
      String string0 = StringUtils.stripAccents("");
      assertNotNull(string0);
      assertEquals("", string0);
      
      boolean boolean0 = StringUtils.isNotBlank("");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isAllEmpty((CharSequence[]) null);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String string1 = StringUtils.removeEnd("Supplied value must be a valid byte literal between -128 and 127: [", "");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("Supplied value must be a valid byte literal between -128 and 127: [", string1);
      
      String string2 = StringUtils.center("The String must not be empty", (-501));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("The String must not be empty", string2);
      
      CharSequence[] charSequenceArray0 = new CharSequence[6];
      charSequenceArray0[0] = (CharSequence) "...";
      charSequenceArray0[1] = (CharSequence) "The String must not be empty";
      charSequenceArray0[2] = (CharSequence) "";
      charSequenceArray0[3] = (CharSequence) "...";
      // Undeclared exception!
      try { 
        StringUtils.joinWith("Supplied value must be a valid byte literal between -128 and 127: [", (Object[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object varargs must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test452()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      String string0 = StringUtils.join(objectArray0);
      assertEquals(1, objectArray0.length);
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.abbreviate("Ut,,CR2ngAk~Qb*_xA<", 2147483645);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("Ut,,CR2ngAk~Qb*_xA<", string1);
      
      Class<CharBuffer> class0 = CharBuffer.class;
      ServiceLoader<CharBuffer> serviceLoader0 = ServiceLoader.loadInstalled(class0);
      assertEquals("java.util.ServiceLoader[java.nio.CharBuffer]", serviceLoader0.toString());
      assertNotNull(serviceLoader0);
      
      String string2 = StringUtils.join((Iterable<?>) serviceLoader0, '_');
      assertEquals("java.util.ServiceLoader[java.nio.CharBuffer]", serviceLoader0.toString());
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("", string2);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "Ut,,CR2ngAk~Qb*_xA<", (CharSequence) "");
      assertEquals(19, int0);
      
      String string3 = StringUtils.wrapIfMissing("Exception cloning Cloneable type ", "");
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      assertEquals("Exception cloning Cloneable type ", string3);
      
      String string4 = StringUtils.removeEndIgnoreCase("p{InCombiningDiacriticalMarks}+", (String) null);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertNotNull(string4);
      assertEquals("p{InCombiningDiacriticalMarks}+", string4);
      
      int int1 = StringUtils.indexOfAnyBut((CharSequence) "', is neither of type Map.Entry nor an Array", (CharSequence) "p{InCombiningDiacriticalMarks}+");
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      String string5 = StringUtils.rightPad(" ", (-4), '_');
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertNotNull(string5);
      assertEquals(" ", string5);
  }

  @Test(timeout = 4000)
  public void test453()  throws Throwable  {
      String[] stringArray0 = StringUtils.split("object", "9Y`]eiW^{x@Rl", 3);
      assertEquals(2, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string0 = StringUtils.leftPad("object", 3);
      assertNotNull(string0);
      assertEquals("object", string0);
      
      String string1 = StringUtils.chop("object");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("objec", string1);
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      assertFalse(linkedList0.contains(3));
      
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      assertFalse(arrayList0.contains(3));
      
      String string2 = StringUtils.abbreviateMiddle("IJ[>-hg9BsMG#l", "objec", 2123);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("IJ[>-hg9BsMG#l", string2);
      
      boolean boolean0 = StringUtils.equalsAny("IJ[>-hg9BsMG#l", stringArray0);
      assertEquals(2, stringArray0.length);
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.startsWithAny("9Y`]eiW^{x@Rl", stringArray0);
      assertTrue(boolean1 == boolean0);
      assertEquals(2, stringArray0.length);
      assertFalse(boolean1);
      
      String[] stringArray1 = new String[7];
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      stringArray1[0] = "object";
      stringArray1[1] = "IJ[>-hg9BsMG#l";
      stringArray1[3] = "9Y`]eiW^{x@Rl";
      stringArray1[4] = "IJ[>-hg9BsMG#l";
      stringArray1[5] = "IJ[>-hg9BsMG#l";
      stringArray1[6] = "IJ[>-hg9BsMG#l";
      String[] stringArray2 = StringUtils.stripAll(stringArray1);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertFalse(stringArray2.equals((Object)stringArray1));
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertNotSame(stringArray1, stringArray0);
      assertNotSame(stringArray1, stringArray2);
      assertNotSame(stringArray2, stringArray1);
      assertNotSame(stringArray2, stringArray0);
      assertEquals(7, stringArray1.length);
      assertEquals(7, stringArray2.length);
      assertNotNull(stringArray2);
      
      String string3 = StringUtils.getDigits("9Y`]eiW^{x@Rl");
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      assertEquals("9", string3);
      
      String string4 = StringUtils.wrapIfMissing("cloneThreshold must not be negative", "clone");
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertNotNull(string4);
      assertEquals("cloneThreshold must not be negativeclone", string4);
      
      int int0 = StringUtils.indexOf((CharSequence) "cloneThreshold must not be negative", (CharSequence) "IJ[>-hg9BsMG#l", (-1));
      assertEquals((-1), int0);
      
      int int1 = StringUtils.indexOfAny((CharSequence) "9", (CharSequence[]) stringArray2);
      assertTrue(int1 == int0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertFalse(stringArray1.equals((Object)stringArray2));
      assertFalse(stringArray2.equals((Object)stringArray1));
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertNotSame(stringArray1, stringArray0);
      assertNotSame(stringArray1, stringArray2);
      assertNotSame(stringArray2, stringArray1);
      assertNotSame(stringArray2, stringArray0);
      assertEquals(7, stringArray1.length);
      assertEquals(7, stringArray2.length);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test454()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = object0;
      objectArray0[1] = object0;
      String string0 = StringUtils.joinWith("", objectArray0);
      assertEquals(2, objectArray0.length);
      assertNotNull(string0);
      
      String string1 = StringUtils.deleteWhitespace("OCI8k");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("OCI8k", string1);
  }

  @Test(timeout = 4000)
  public void test455()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "object";
      stringArray0[1] = "object";
      String string0 = StringUtils.getCommonPrefix(stringArray0);
      assertEquals(2, stringArray0.length);
      assertNotNull(string0);
      assertEquals("object", string0);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "9Y`]eiW^{x@Rl", (CharSequence) "object", 79);
      assertEquals((-1), int0);
      
      boolean boolean0 = StringUtils.containsIgnoreCase("9Y`]eiW^{x@Rl", "object");
      assertFalse(boolean0);
      
      String[] stringArray1 = StringUtils.stripAll(stringArray0, "9Y`]eiW^{x@Rl");
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(2, stringArray0.length);
      assertEquals(2, stringArray1.length);
      assertNotNull(stringArray1);
      
      String[] stringArray2 = StringUtils.splitPreserveAllTokens("object", "object");
      assertFalse(stringArray2.equals((Object)stringArray1));
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertNotSame(stringArray2, stringArray1);
      assertNotSame(stringArray2, stringArray0);
      assertEquals(7, stringArray2.length);
      assertNotNull(stringArray2);
  }

  @Test(timeout = 4000)
  public void test456()  throws Throwable  {
      int int0 = StringUtils.indexOfDifference((CharSequence) "kb>K:%lR&M+Fm2*/78", (CharSequence) "kb>K:%lR&M+Fm2*/78");
      assertEquals((-1), int0);
      
      String string0 = StringUtils.defaultString("object", "Invalid locale format: ");
      assertNotNull(string0);
      assertEquals("object", string0);
      
      String string1 = StringUtils.wrapIfMissing("object", "kb>K:%lR&M+Fm2*/78");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("kb>K:%lR&M+Fm2*/78objectkb>K:%lR&M+Fm2*/78", string1);
      
      String string2 = StringUtils.substringAfter("LeU7R{,[.9?", (-1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("", string2);
      
      // Undeclared exception!
      try { 
        StringUtils.truncate("", (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // maxWith cannot be negative
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test457()  throws Throwable  {
      String string0 = StringUtils.wrapIfMissing("aX-1.0x-412.24x1.0x-2592.4207x-2730.193aX-1.0x-412.24x1.0x-2592.4207x-2730.193aX-1.0x-412.24x1.0x-2592.4207x-2730.193-1.0x-412.24x1.0x-2592.4207x-2730.193", "nt ");
      assertNotNull(string0);
      assertEquals("nt aX-1.0x-412.24x1.0x-2592.4207x-2730.193aX-1.0x-412.24x1.0x-2592.4207x-2730.193aX-1.0x-412.24x1.0x-2592.4207x-2730.193-1.0x-412.24x1.0x-2592.4207x-2730.193nt ", string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[0] = (CharSequence) "aX-1.0x-412.24x1.0x-2592.4207x-2730.193aX-1.0x-412.24x1.0x-2592.4207x-2730.193aX-1.0x-412.24x1.0x-2592.4207x-2730.193-1.0x-412.24x1.0x-2592.4207x-2730.193";
      charSequenceArray0[1] = (CharSequence) "aX-1.0x-412.24x1.0x-2592.4207x-2730.193aX-1.0x-412.24x1.0x-2592.4207x-2730.193aX-1.0x-412.24x1.0x-2592.4207x-2730.193-1.0x-412.24x1.0x-2592.4207x-2730.193";
      boolean boolean0 = StringUtils.equalsAnyIgnoreCase("nt aX-1.0x-412.24x1.0x-2592.4207x-2730.193aX-1.0x-412.24x1.0x-2592.4207x-2730.193aX-1.0x-412.24x1.0x-2592.4207x-2730.193-1.0x-412.24x1.0x-2592.4207x-2730.193nt ", charSequenceArray0);
      assertEquals(2, charSequenceArray0.length);
      assertFalse(boolean0);
      
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      String string1 = StringUtils.join(booleanArray0, 'c');
      assertFalse(string1.equals((Object)string0));
      assertEquals(5, booleanArray0.length);
      assertNotNull(string1);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false}, booleanArray0));
      assertEquals("falsecfalsecfalsecfalsecfalse", string1);
      
      String string2 = StringUtils.join((Object[]) charSequenceArray0, "Object varargs must not be null", 13, 11);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals(2, charSequenceArray0.length);
      assertNotNull(string2);
      assertEquals("", string2);
      
      String string3 = StringUtils.removeEndIgnoreCase("nt ", "nt ");
      assertTrue(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      assertEquals("", string3);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparator("nt ", "", 11);
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String[] stringArray1 = StringUtils.splitByCharacterTypeCamelCase("aX-1.0x-412.24x1.0x-2592.4207x-2730.193aX-1.0x-412.24x1.0x-2592.4207x-2730.193aX-1.0x-412.24x1.0x-2592.4207x-2730.193-1.0x-412.24x1.0x-2592.4207x-2730.193");
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray1, stringArray0);
      assertEquals(98, stringArray1.length);
      assertNotNull(stringArray1);
      
      boolean boolean1 = StringUtils.isMixedCase(charSequenceArray0[0]);
      assertFalse(boolean1 == boolean0);
      assertEquals(2, charSequenceArray0.length);
      assertTrue(boolean1);
      
      String[] stringArray2 = StringUtils.splitByCharacterTypeCamelCase("nt ");
      assertFalse(stringArray2.equals((Object)stringArray1));
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertNotSame(stringArray2, stringArray1);
      assertNotSame(stringArray2, stringArray0);
      assertEquals(2, stringArray2.length);
      assertNotNull(stringArray2);
      
      boolean boolean2 = StringUtils.isAlphanumeric("");
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2);
      
      String string4 = StringUtils.joinWith("             ", stringArray2);
      assertFalse(stringArray2.equals((Object)stringArray1));
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertNotSame(stringArray2, stringArray1);
      assertNotSame(stringArray2, stringArray0);
      assertEquals(2, stringArray2.length);
      assertNotNull(string4);
      assertEquals("nt              ", string4);
      
      boolean boolean3 = StringUtils.isEmpty("");
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3);
      
      String[] stringArray3 = StringUtils.splitPreserveAllTokens("F_.}|uy'h ]", '{');
      assertFalse(stringArray3.equals((Object)stringArray0));
      assertFalse(stringArray3.equals((Object)stringArray2));
      assertFalse(stringArray3.equals((Object)stringArray1));
      assertNotSame(stringArray3, stringArray0);
      assertNotSame(stringArray3, stringArray2);
      assertNotSame(stringArray3, stringArray1);
      assertEquals(1, stringArray3.length);
      assertNotNull(stringArray3);
      
      String string5 = StringUtils.rightPad("nt aX-1.0x-412.24x1.0x-2592.4207x-2730.193aX-1.0x-412.24x1.0x-2592.4207x-2730.193aX-1.0x-412.24x1.0x-2592.4207x-2730.193-1.0x-412.24x1.0x-2592.4207x-2730.193nt ", 13, "F_.}|uy'h ]");
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertTrue(string5.equals((Object)string0));
      assertNotNull(string5);
      assertEquals("nt aX-1.0x-412.24x1.0x-2592.4207x-2730.193aX-1.0x-412.24x1.0x-2592.4207x-2730.193aX-1.0x-412.24x1.0x-2592.4207x-2730.193-1.0x-412.24x1.0x-2592.4207x-2730.193nt ", string5);
      
      String string6 = StringUtils.getCommonPrefix(stringArray3);
      assertFalse(stringArray3.equals((Object)stringArray0));
      assertFalse(stringArray3.equals((Object)stringArray2));
      assertFalse(stringArray3.equals((Object)stringArray1));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string2));
      assertNotSame(stringArray3, stringArray0);
      assertNotSame(stringArray3, stringArray2);
      assertNotSame(stringArray3, stringArray1);
      assertEquals(1, stringArray3.length);
      assertNotNull(string6);
      assertEquals("F_.}|uy'h ]", string6);
      
      String string7 = StringUtils.rightPad("", 11);
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string0));
      assertNotNull(string7);
      assertEquals("           ", string7);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "aX-1.0x-412.24x1.0x-2592.4207x-2730.193aX-1.0x-412.24x1.0x-2592.4207x-2730.193aX-1.0x-412.24x1.0x-2592.4207x-2730.193-1.0x-412.24x1.0x-2592.4207x-2730.193", (CharSequence) "", 13);
      assertEquals(13, int0);
      
      boolean boolean4 = StringUtils.containsIgnoreCase("nt ", "nt aX-1.0x-412.24x1.0x-2592.4207x-2730.193aX-1.0x-412.24x1.0x-2592.4207x-2730.193aX-1.0x-412.24x1.0x-2592.4207x-2730.193-1.0x-412.24x1.0x-2592.4207x-2730.193nt ");
      assertFalse(boolean4 == boolean3);
      assertTrue(boolean4 == boolean2);
      assertFalse(boolean4 == boolean1);
      assertTrue(boolean4 == boolean0);
      assertFalse(boolean4);
  }

  @Test(timeout = 4000)
  public void test458()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      Locale locale0 = Locale.GERMANY;
      assertEquals("de_DE", locale0.toString());
      assertEquals("de", locale0.getLanguage());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("DE", locale0.getCountry());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertNotNull(locale0);
      
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      assertEquals("de_DE", locale0.toString());
      assertEquals("de", locale0.getLanguage());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("DE", locale0.getCountry());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertNotNull(set0);
      
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.EXTENDED_FILTERING;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) arrayList0, (Collection<String>) set0, locale_FilteringMode0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertEquals("de_DE", locale0.toString());
      assertEquals("de", locale0.getLanguage());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("DE", locale0.getCountry());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
      
      String string0 = StringUtils.substringAfter("\n", 598);
      assertNotNull(string0);
      assertEquals("", string0);
      
      int int0 = StringUtils.length("");
      assertEquals(0, int0);
      
      String string1 = StringUtils.center(" ", 256);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("                                                                                                                                                                                                                                                                ", string1);
      
      String string2 = StringUtils.abbreviate("", "", 77);
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("", string2);
      
      CharSequence[] charSequenceArray0 = new CharSequence[8];
      charSequenceArray0[0] = (CharSequence) "";
      String string3 = StringUtils.lowerCase("", locale0);
      assertEquals("de_DE", locale0.toString());
      assertEquals("de", locale0.getLanguage());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("DE", locale0.getCountry());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertTrue(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      assertEquals("", string3);
      
      charSequenceArray0[1] = (CharSequence) "";
      charSequenceArray0[2] = (CharSequence) "";
      charSequenceArray0[3] = (CharSequence) "";
      charSequenceArray0[4] = (CharSequence) "";
      String string4 = StringUtils.stripStart("x[BEyAxx[BEyAx", " ");
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertNotNull(string4);
      assertEquals("x[BEyAxx[BEyAx", string4);
      
      String string5 = StringUtils.strip("N.`;`", "\n");
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertNotNull(string5);
      assertEquals("N.`;`", string5);
      
      String string6 = StringUtils.replaceChars(" ", "                                                                                                                                                                                                                                                                ", "");
      assertTrue(string6.equals((Object)string0));
      assertTrue(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string4));
      assertTrue(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string1));
      assertNotNull(string6);
      assertEquals("", string6);
      
      boolean boolean0 = StringUtils.equalsAnyIgnoreCase("", charSequenceArray0);
      assertEquals(8, charSequenceArray0.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test459()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[6];
      charSequenceArray0[2] = (CharSequence) "org.apache.commons.lang3.StringUtils";
      charSequenceArray0[4] = (CharSequence) "org.apache.commons.lang3.StringUtils";
      boolean boolean0 = StringUtils.isAnyEmpty(charSequenceArray0);
      assertEquals(6, charSequenceArray0.length);
      assertTrue(boolean0);
      
      boolean boolean1 = StringUtils.equalsAnyIgnoreCase("org.apache.commons.lang3.StringUtils", charSequenceArray0);
      assertTrue(boolean1 == boolean0);
      assertEquals(6, charSequenceArray0.length);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test460()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "t7/DBWdSY|A[0X";
      stringArray0[1] = "Z]@8~.";
      String string0 = StringUtils.replaceEachRepeatedly("~x!0n@^E", stringArray0, stringArray0);
      assertEquals(2, stringArray0.length);
      assertNotNull(string0);
      assertEquals("~x!0n@^E", string0);
      
      boolean boolean0 = StringUtils.equalsAnyIgnoreCase("~x!0n@^E", stringArray0);
      assertEquals(2, stringArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test461()  throws Throwable  {
      String string0 = StringUtils.stripAccents("");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.wrap(" is not in the range '0' - '9'", '3');
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("3 is not in the range '0' - '9'3", string1);
      
      String[] stringArray0 = StringUtils.substringsBetween("", "3 is not in the range '0' - '9'3", "3 is not in the range '0' - '9'3");
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      String[] stringArray1 = StringUtils.splitPreserveAllTokens(" is not in the range '0' - '9'", "");
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray1, stringArray0);
      assertEquals(1, stringArray1.length);
      assertNotNull(stringArray1);
      
      String string2 = StringUtils.join((Object[]) stringArray1, '3');
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotSame(stringArray1, stringArray0);
      assertEquals(1, stringArray1.length);
      assertNotNull(string2);
      assertEquals(" is not in the range '0' - '9'", string2);
      
      boolean boolean0 = StringUtils.equalsAnyIgnoreCase(" is not in the range '0' - '9'", stringArray0);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertNotSame(stringArray0, stringArray1);
      assertEquals(0, stringArray0.length);
      assertFalse(boolean0);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "", "k");
      assertEquals((-1), int0);
      
      String string3 = StringUtils.overlay("", (String) null, (byte)11, (-1));
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      assertEquals("", string3);
      
      String string4 = StringUtils.substringBefore("Ct%=<K;{C", (int) (byte)11);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertNotNull(string4);
      assertEquals("Ct%=<K;{C", string4);
      
      String[] stringArray2 = StringUtils.substringsBetween("k", "", "X'i");
      assertNull(stringArray2);
  }

  @Test(timeout = 4000)
  public void test462()  throws Throwable  {
      String string0 = StringUtils.substringBetween("3cVDS7%sPY.d", "3cVDS7%sPY.d", "3cVDS7%sPY.d");
      assertNull(string0);
      
      boolean boolean0 = StringUtils.equalsIgnoreCase("3cVDS7%sPY.d", (CharSequence) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test463()  throws Throwable  {
      String string0 = StringUtils.left(";Y@/7", (-2583));
      assertNotNull(string0);
      assertEquals("", string0);
      
      boolean boolean0 = StringUtils.isAlphanumericSpace(";Y@/7");
      assertFalse(boolean0);
      
      double double0 = StringUtils.getJaroWinklerDistance("", ";Y@/7");
      assertEquals(0.0, double0, 0.01);
      
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "";
      charSequenceArray0[2] = (CharSequence) ";Y@/7";
      charSequenceArray0[3] = (CharSequence) ";Y@/7";
      boolean boolean1 = StringUtils.equalsAny("", charSequenceArray0);
      assertFalse(boolean1 == boolean0);
      assertEquals(4, charSequenceArray0.length);
      assertTrue(boolean1);
      
      boolean boolean2 = StringUtils.contains(charSequenceArray0[0], charSequenceArray0[3]);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertEquals(4, charSequenceArray0.length);
      assertFalse(boolean2);
      
      String string1 = StringUtils.removeAll("org.apache.commons.lang3.StringUtils", "Array and element cannot both be null");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("org.apache.commons.lang3.StringUtils", string1);
      
      String string2 = StringUtils.stripStart("org.apache.commons.lang3.StringUtils", "yR1MavwCN");
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("org.apache.commons.lang3.StringUtils", string2);
      
      String[] stringArray0 = StringUtils.split("3MFQ9FIc_*%R:G");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string3 = StringUtils.leftPad("org.apache.commons.lang3.StringUtils", 0, (String) null);
      assertTrue(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      assertEquals("org.apache.commons.lang3.StringUtils", string3);
      
      String string4 = StringUtils.rightPad("org.apache.commons.lang3.StringUtils", (-2583), 'X');
      assertTrue(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertNotNull(string4);
      assertEquals("org.apache.commons.lang3.StringUtils", string4);
      
      String string5 = StringUtils.substring("bq", (-2583));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertNotNull(string5);
      assertEquals("bq", string5);
      
      String string6 = StringUtils.join((Object[]) charSequenceArray0, 'H', 6, (-2583));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string2));
      assertEquals(4, charSequenceArray0.length);
      assertNotNull(string6);
      assertEquals("", string6);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      String string7 = StringUtils.join((Object[]) charSequenceArray0, 'X', 98, (-1317));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string4));
      assertEquals(4, charSequenceArray0.length);
      assertNotNull(string7);
      assertEquals("", string7);
      
      int int0 = StringUtils.indexOf(charSequenceArray0[1], charSequenceArray0[2]);
      assertEquals(4, charSequenceArray0.length);
      assertEquals((-1), int0);
      
      boolean boolean3 = StringUtils.equalsAnyIgnoreCase("org.apache.commons.lang3.StringUtils", charSequenceArray0);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertEquals(4, charSequenceArray0.length);
      assertFalse(boolean3);
  }

  @Test(timeout = 4000)
  public void test464()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = '8';
      charArray0[1] = '5';
      charArray0[2] = 'g';
      String string0 = "\\u";
      String string1 = StringUtils.replacePattern("J[vm*j*Tc[", string0, (String) null);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("J[vm*j*Tc[", string1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      charSequenceArray0[0] = (CharSequence) "J[vm*j*Tc[";
      charSequenceArray0[1] = (CharSequence) "J[vm*j*Tc[";
      charSequenceArray0[2] = (CharSequence) "2d~n=U^W^";
      charSequenceArray0[3] = (CharSequence) "2d~n=U^W^";
      charSequenceArray0[4] = (CharSequence) "org.apache.commons.lang3.StringUtils";
      boolean boolean0 = StringUtils.isNoneBlank(charSequenceArray0);
      assertEquals(5, charSequenceArray0.length);
      assertTrue(boolean0);
      
      String string2 = StringUtils.removeEndIgnoreCase("#d8~f9rv%?nx<~w", "org.apache.commons.lang3.StringUtils");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("#d8~f9rv%?nx<~w", string2);
      
      String string3 = StringUtils.prependIfMissingIgnoreCase("%7U4fUt+p(xb", "#d8~f9rv%?nx<~w", charSequenceArray0);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals(5, charSequenceArray0.length);
      assertNotNull(string3);
      assertEquals("#d8~f9rv%?nx<~w%7U4fUt+p(xb", string3);
      
      String string4 = StringUtils.capitalize("Object varargs must not be null");
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertNotNull(string4);
      assertEquals("Object varargs must not be null", string4);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      String string5 = StringUtils.join(booleanArray0, '8', (-2881), (-2881));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertEquals(3, booleanArray0.length);
      assertNotNull(string5);
      assertTrue(Arrays.equals(new boolean[] {true, true, true}, booleanArray0));
      assertEquals("", string5);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "", (-2881));
      assertEquals((-1), int0);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("{nr3F(K-*;^A&Cl,", "J[vm*j*Tc[", 739);
      assertEquals(2, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test465()  throws Throwable  {
      String string0 = StringUtils.trim("object");
      assertNotNull(string0);
      assertEquals("object", string0);
      
      String string1 = StringUtils.uncapitalize("object");
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("object", string1);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "object", 1201);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test466()  throws Throwable  {
      String string0 = StringUtils.wrapIfMissing("%d=7wr7,/{8", '`');
      assertNotNull(string0);
      assertEquals("`%d=7wr7,/{8`", string0);
      
      String string1 = StringUtils.rightPad("rp$f", (-3760));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("rp$f", string1);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "rp$f", (CharSequence) "`%d=7wr7,/{8`");
      assertEquals((-1), int0);
      
      boolean boolean0 = StringUtils.isWhitespace("rp$f");
      assertFalse(boolean0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[7];
      charSequenceArray0[0] = (CharSequence) "rp$f";
      charSequenceArray0[1] = (CharSequence) "`%d=7wr7,/{8`";
      charSequenceArray0[3] = (CharSequence) "%d=7wr7,/{8";
      charSequenceArray0[4] = (CharSequence) "rp$f";
      charSequenceArray0[5] = (CharSequence) "`%d=7wr7,/{8`";
      charSequenceArray0[6] = (CharSequence) "rp$f";
      CharSequence charSequence0 = StringUtils.firstNonEmpty((CharSequence[]) null);
      assertNull(charSequence0);
      
      String string2 = StringUtils.appendIfMissing("^R#", "^R#", charSequenceArray0);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals(7, charSequenceArray0.length);
      assertNotNull(string2);
      assertEquals("^R#", string2);
      
      int int1 = StringUtils.lastIndexOf(charSequenceArray0[6], 34, 10);
      assertTrue(int1 == int0);
      assertEquals(7, charSequenceArray0.length);
      assertEquals((-1), int1);
      
      String string3 = StringUtils.substringBeforeLast("^R#", "`%d=7wr7,/{8`");
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string2));
      assertNotNull(string3);
      assertEquals("^R#", string3);
      
      String string4 = StringUtils.mid("MU02JN]i", 34, 11);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertNotNull(string4);
      assertEquals("", string4);
      
      String string5 = StringUtils.rightPad("rp$f", (-1381), 'f');
      assertFalse(string5.equals((Object)string2));
      assertTrue(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertNotNull(string5);
      assertEquals("rp$f", string5);
      
      int int2 = StringUtils.indexOf((CharSequence) "%d=7wr7,/{8", 10, 15);
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals((-1), int2);
      
      String string6 = StringUtils.stripAccents("%d=7wr7,/{8");
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string0));
      assertNotNull(string6);
      assertEquals("%d=7wr7,/{8", string6);
      
      int int3 = StringUtils.lastIndexOf((CharSequence) "%d=7wr7,/{8", 160);
      assertTrue(int3 == int0);
      assertTrue(int3 == int1);
      assertTrue(int3 == int2);
      assertEquals((-1), int3);
      
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short)33;
      shortArray0[1] = (short)2;
      shortArray0[2] = (short) (-2564);
      shortArray0[3] = (short)3207;
      shortArray0[4] = (short)109;
      shortArray0[5] = (short) (-1051);
      String string7 = StringUtils.join(shortArray0, 'f');
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string4));
      assertEquals(6, shortArray0.length);
      assertNotNull(string7);
      assertArrayEquals(new short[] {(short)33, (short)2, (short) (-2564), (short)3207, (short)109, (short) (-1051)}, shortArray0);
      assertEquals("33f2f-2564f3207f109f-1051", string7);
      
      int int4 = StringUtils.lastIndexOf((CharSequence) "33f2f-2564f3207f109f-1051", (CharSequence) "%d=7wr7,/{8");
      assertTrue(int4 == int2);
      assertTrue(int4 == int3);
      assertTrue(int4 == int0);
      assertTrue(int4 == int1);
      assertEquals((-1), int4);
  }

  @Test(timeout = 4000)
  public void test467()  throws Throwable  {
      String string0 = StringUtils.repeat('Q', (int) 'Q');
      assertNotNull(string0);
      assertEquals("QQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQ", string0);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "QQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQ", 0, 0);
      assertEquals((-1), int0);
      
      Class<String> class0 = String.class;
      ServiceLoader<String> serviceLoader0 = ServiceLoader.load(class0);
      assertEquals("java.util.ServiceLoader[java.lang.String]", serviceLoader0.toString());
      assertNotNull(serviceLoader0);
      
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      serviceLoader0.forEach(consumer0);
      assertEquals("java.util.ServiceLoader[java.lang.String]", serviceLoader0.toString());
      
      String[] stringArray0 = new String[5];
      stringArray0[0] = "QQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQ";
      stringArray0[1] = "QQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQ";
      stringArray0[2] = "QQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQ";
      stringArray0[3] = "QQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQ";
      stringArray0[4] = "QQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQ";
      String[] stringArray1 = StringUtils.stripAll(stringArray0, (String) null);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(5, stringArray0.length);
      assertEquals(5, stringArray1.length);
      assertNotNull(stringArray1);
      
      String string1 = StringUtils.deleteWhitespace(" has no clone method");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("hasnoclonemethod", string1);
  }

  @Test(timeout = 4000)
  public void test468()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("Array element ", "Array element ");
      assertEquals(2, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string0 = StringUtils.deleteWhitespace("Array element ");
      assertNotNull(string0);
      assertEquals("Arrayelement", string0);
      
      String string1 = StringUtils.lowerCase("F_-$&Vw5'_");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("f_-$&vw5'_", string1);
      
      String string2 = StringUtils.chomp((String) null);
      assertNull(string2);
      
      String string3 = StringUtils.removeEndIgnoreCase("Array element ", "f_-$&vw5'_");
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      assertEquals("Array element ", string3);
      
      String string4 = StringUtils.firstNonBlank(stringArray0);
      assertEquals(2, stringArray0.length);
      assertNull(string4);
  }

  @Test(timeout = 4000)
  public void test469()  throws Throwable  {
      String string0 = StringUtils.stripStart("maxWith cannot be negative", "maxWith cannot be negative");
      assertNotNull(string0);
      assertEquals("", string0);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "", (CharSequence) "maxWith cannot be negative");
      assertEquals(26, int0);
      
      boolean boolean0 = StringUtils.equalsIgnoreCase("", "");
      assertTrue(boolean0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[9];
      CharSequence charSequence0 = StringUtils.defaultIfBlank((CharSequence) "", (CharSequence) "k:%oT");
      assertFalse(charSequence0.equals((Object)string0));
      assertNotNull(charSequence0);
      assertEquals("k:%oT", charSequence0);
      
      charSequenceArray0[0] = (CharSequence) "k:%oT";
      charSequenceArray0[1] = (CharSequence) "maxWith cannot be negative";
      charSequenceArray0[2] = (CharSequence) "maxWith cannot be negative";
      charSequenceArray0[3] = (CharSequence) "k:%oT";
      charSequenceArray0[4] = (CharSequence) "";
      charSequenceArray0[5] = (CharSequence) "k:%oT";
      charSequenceArray0[6] = (CharSequence) "k:%oT";
      CharSequence[] charSequenceArray1 = new CharSequence[2];
      assertFalse(charSequenceArray1.equals((Object)charSequenceArray0));
      
      charSequenceArray1[0] = (CharSequence) "k:%oT";
      CharSequence charSequence1 = StringUtils.firstNonEmpty(charSequenceArray1);
      assertFalse(charSequenceArray1.equals((Object)charSequenceArray0));
      assertFalse(charSequence1.equals((Object)string0));
      assertTrue(charSequence1.equals((Object)charSequence0));
      assertNotSame(charSequenceArray1, charSequenceArray0);
      assertEquals(2, charSequenceArray1.length);
      assertNotNull(charSequence1);
      assertEquals("k:%oT", charSequence1);
      
      charSequenceArray0[7] = (CharSequence) "k:%oT";
      charSequenceArray0[8] = (CharSequence) "maxWith cannot be negative";
      String string1 = StringUtils.appendIfMissing("k:%oT", "k:%oT", charSequenceArray0);
      assertFalse(string1.equals((Object)string0));
      assertTrue(string1.equals((Object)charSequence0));
      assertTrue(string1.equals((Object)charSequence1));
      assertFalse(charSequenceArray0.equals((Object)charSequenceArray1));
      assertNotSame(charSequenceArray0, charSequenceArray1);
      assertEquals(9, charSequenceArray0.length);
      assertNotNull(string1);
      assertEquals("k:%oT", string1);
      
      int int1 = StringUtils.lastIndexOf((CharSequence) "", (CharSequence) "k:%oT");
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      int int2 = StringUtils.lastIndexOf(charSequenceArray0[2], (-5927), (-5927));
      assertTrue(int2 == int1);
      assertFalse(int2 == int0);
      assertFalse(charSequenceArray0.equals((Object)charSequenceArray1));
      assertNotSame(charSequenceArray0, charSequenceArray1);
      assertEquals(9, charSequenceArray0.length);
      assertEquals((-1), int2);
      
      String string2 = StringUtils.substringBeforeLast("", "");
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)charSequence1));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)charSequence0));
      assertNotNull(string2);
      assertEquals("", string2);
      
      String string3 = StringUtils.mid("", 0, 256);
      assertFalse(string3.equals((Object)charSequence0));
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)charSequence1));
      assertTrue(string3.equals((Object)string2));
      assertNotNull(string3);
      assertEquals("", string3);
      
      String string4 = StringUtils.defaultString("e*j)gaK");
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)charSequence1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)charSequence0));
      assertNotNull(string4);
      assertEquals("e*j)gaK", string4);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) 0;
      floatArray0[1] = (float) (-5927);
      String string5 = StringUtils.join(floatArray0, '>', 0, 0);
      assertFalse(string5.equals((Object)charSequence0));
      assertTrue(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertTrue(string5.equals((Object)string3));
      assertTrue(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)charSequence1));
      assertFalse(string5.equals((Object)string4));
      assertEquals(2, floatArray0.length);
      assertNotNull(string5);
      assertArrayEquals(new float[] {0.0F, (-5927.0F)}, floatArray0, 0.01F);
      assertEquals("", string5);
      
      String string6 = StringUtils.substringAfter("HiwSo>}72+:n`>M8^_<T`vv.Y_", "");
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)charSequence1));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)charSequence0));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string1));
      assertNotNull(string6);
      assertEquals("HiwSo>}72+:n`>M8^_<T`vv.Y_", string6);
  }

  @Test(timeout = 4000)
  public void test470()  throws Throwable  {
      String string0 = StringUtils.swapCase("Minimum abbreviation width with offset is %d");
      assertNotNull(string0);
      assertEquals("mINIMUM ABBREVIATION WIDTH WITH OFFSET IS %D", string0);
      
      String[] stringArray0 = StringUtils.splitByCharacterType("Minimum abbreviation width with offset is %d");
      assertEquals(15, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string1 = StringUtils.getCommonPrefix(stringArray0);
      assertFalse(string1.equals((Object)string0));
      assertEquals(15, stringArray0.length);
      assertNotNull(string1);
      assertEquals("", string1);
      
      String string2 = StringUtils.defaultIfBlank("", "mINIMUM ABBREVIATION WIDTH WITH OFFSET IS %D");
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("mINIMUM ABBREVIATION WIDTH WITH OFFSET IS %D", string2);
      
      int int0 = StringUtils.indexOfDifference((CharSequence) "", (CharSequence) "Minimum abbreviation width with offset is %d");
      assertEquals(0, int0);
      
      String string3 = StringUtils.normalizeSpace("Search and Replace array lengths don't match: ");
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      assertEquals("Search and Replace array lengths don't match:", string3);
  }

  @Test(timeout = 4000)
  public void test471()  throws Throwable  {
      String string0 = StringUtils.substring("", (-2854));
      assertNotNull(string0);
      assertEquals("", string0);
      
      boolean boolean0 = StringUtils.equalsIgnoreCase("", "");
      assertTrue(boolean0);
      
      String string1 = StringUtils.reverse("");
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
      
      char[] charArray0 = new char[4];
      int[] intArray0 = new int[8];
      intArray0[0] = 3654;
      intArray0[1] = (int) '\u0000';
      intArray0[2] = (-376);
      intArray0[3] = (-2854);
      intArray0[4] = (int) 'p';
      intArray0[5] = (-2854);
      intArray0[6] = (int) '\u0000';
      String string2 = StringUtils.difference("", "Djgc2/qB^,8");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("Djgc2/qB^,8", string2);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "Djgc2/qB^,8", (CharSequence) "");
      assertEquals(0, int0);
      
      boolean boolean1 = StringUtils.endsWith("Djgc2/qB^,8", "Djgc2/qB^,8");
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test472()  throws Throwable  {
      String[] stringArray0 = StringUtils.split("object", "9Y`]eiW^{x@Rl", 3);
      assertEquals(2, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string0 = StringUtils.leftPad("object", 3);
      assertNotNull(string0);
      assertEquals("object", string0);
      
      String string1 = StringUtils.chop("Search and Replace array lengths don't match: ");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("Search and Replace array lengths don't match:", string1);
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      assertFalse(linkedList0.contains("9Y`]eiW^{x@Rl"));
      
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      assertFalse(arrayList0.contains("9Y`]eiW^{x@Rl"));
      
      String[] stringArray1 = StringUtils.split("9-5y1iX{EX`M@KK#[b");
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray1, stringArray0);
      assertEquals(1, stringArray1.length);
      assertNotNull(stringArray1);
      
      String string2 = StringUtils.repeat("9-5y1iX{EX`M@KK#[b", "the character ", 3);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("9-5y1iX{EX`M@KK#[bthe character 9-5y1iX{EX`M@KK#[bthe character 9-5y1iX{EX`M@KK#[b", string2);
      
      String string3 = StringUtils.wrap("Search and Replace array lengths don't match:", 'r');
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      assertEquals("rSearch and Replace array lengths don't match:r", string3);
      
      String string4 = StringUtils.reverse("object");
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertNotNull(string4);
      assertEquals("tcejbo", string4);
      
      boolean boolean0 = StringUtils.isAnyEmpty(stringArray1);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray1, stringArray0);
      assertEquals(1, stringArray1.length);
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isAlphanumeric("object");
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String string5 = StringUtils.difference("9Y`]eiW^{x@Rl", "Locale must not be null");
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertNotNull(string5);
      assertEquals("Locale must not be null", string5);
  }

  @Test(timeout = 4000)
  public void test473()  throws Throwable  {
      String[] stringArray0 = StringUtils.split("");
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      int int0 = StringUtils.compareIgnoreCase("", "");
      assertEquals(0, int0);
      
      boolean boolean0 = StringUtils.isAlpha("");
      assertFalse(boolean0);
      
      String string0 = StringUtils.appendIfMissing("a", "a", stringArray0);
      assertEquals(0, stringArray0.length);
      assertNotNull(string0);
      assertEquals("a", string0);
      
      String[] stringArray1 = StringUtils.stripAll(stringArray0, "x&{#0],$RHy");
      assertSame(stringArray0, stringArray1);
      assertSame(stringArray1, stringArray0);
      assertEquals(0, stringArray0.length);
      assertEquals(0, stringArray1.length);
      assertNotNull(stringArray1);
      
      String string1 = StringUtils.reverse("&X3YY%@");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("@%YY3X&", string1);
      
      Vector<Integer> vector0 = new Vector<Integer>();
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertNotNull(vector0);
      assertFalse(vector0.contains(int0));
      
      Integer integer0 = new Integer(0);
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      boolean boolean1 = vector0.add(integer0);
      assertEquals(10, vector0.capacity());
      assertFalse(vector0.isEmpty());
      assertEquals("[0]", vector0.toString());
      assertEquals(1, vector0.size());
      assertTrue(integer0.equals((Object)int0));
      assertFalse(boolean1 == boolean0);
      assertTrue(vector0.contains(int0));
      assertTrue(boolean1);
      
      ListIterator<Integer> listIterator0 = vector0.listIterator();
      assertEquals(10, vector0.capacity());
      assertFalse(vector0.isEmpty());
      assertEquals("[0]", vector0.toString());
      assertEquals(1, vector0.size());
      assertFalse(listIterator0.hasPrevious());
      assertTrue(listIterator0.hasNext());
      assertNotNull(listIterator0);
      assertTrue(vector0.contains(int0));
      
      Integer integer1 = new Integer(0);
      assertTrue(integer1.equals((Object)integer0));
      assertTrue(integer1.equals((Object)int0));
      assertNotNull(integer1);
      assertEquals(0, (int)integer1);
      
      boolean boolean2 = vector0.add(integer1);
      assertEquals(10, vector0.capacity());
      assertEquals("[0, 0]", vector0.toString());
      assertEquals(2, vector0.size());
      assertFalse(vector0.isEmpty());
      assertTrue(integer1.equals((Object)integer0));
      assertTrue(integer1.equals((Object)int0));
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertTrue(vector0.contains(integer1));
      assertTrue(boolean2);
      
      boolean boolean3 = vector0.add(integer1);
      assertEquals(10, vector0.capacity());
      assertEquals(3, vector0.size());
      assertFalse(vector0.isEmpty());
      assertEquals("[0, 0, 0]", vector0.toString());
      assertTrue(integer1.equals((Object)integer0));
      assertTrue(integer1.equals((Object)int0));
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertTrue(vector0.contains(integer1));
      assertTrue(boolean3);
      
      Spliterator<Integer> spliterator0 = vector0.spliterator();
      assertEquals(10, vector0.capacity());
      assertEquals(3, vector0.size());
      assertFalse(vector0.isEmpty());
      assertEquals("[0, 0, 0]", vector0.toString());
      assertNotNull(spliterator0);
      assertTrue(vector0.contains(integer1));
      
      String string2 = StringUtils.removeAll("Bj8vv#:)=+@CQjPr\"6f", "@%YY3X&");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("Bj8vv#:)=+@CQjPr\"6f", string2);
      
      String string3 = StringUtils.stripStart("yR1MavwCN", "&X3YY%@");
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      assertEquals("yR1MavwCN", string3);
      
      String[] stringArray2 = StringUtils.split("e*j)gaK");
      assertFalse(stringArray2.equals((Object)stringArray1));
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertNotSame(stringArray2, stringArray1);
      assertNotSame(stringArray2, stringArray0);
      assertEquals(1, stringArray2.length);
      assertNotNull(stringArray2);
      
      String string4 = StringUtils.substringBefore("a", "HiwSo>}72+:n`>M8^_<T`vv.Y_");
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string0));
      assertNotNull(string4);
      assertEquals("a", string4);
      
      String string5 = StringUtils.wrap("Bj8vv#:)=+@CQjPr\"6f", 'r');
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertNotNull(string5);
      assertEquals("rBj8vv#:)=+@CQjPr\"6fr", string5);
      
      String string6 = StringUtils.reverse("=NmxlWo}DTgSX'");
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string3));
      assertNotNull(string6);
      assertEquals("'XSgTD}oWlxmN=", string6);
      
      boolean boolean4 = StringUtils.isAnyEmpty(stringArray0);
      assertFalse(stringArray0.equals((Object)stringArray2));
      assertFalse(boolean4 == boolean2);
      assertFalse(boolean4 == boolean3);
      assertTrue(boolean4 == boolean0);
      assertFalse(boolean4 == boolean1);
      assertSame(stringArray0, stringArray1);
      assertNotSame(stringArray0, stringArray2);
      assertEquals(0, stringArray0.length);
      assertFalse(boolean4);
      
      boolean boolean5 = StringUtils.isAlphanumeric("a");
      assertFalse(boolean5 == boolean4);
      assertFalse(boolean5 == boolean0);
      assertTrue(boolean5 == boolean3);
      assertTrue(boolean5 == boolean1);
      assertTrue(boolean5 == boolean2);
      assertTrue(boolean5);
      
      String string7 = StringUtils.difference("(|N", "p{InCombiningDiacriticalMarks}+");
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string5));
      assertNotNull(string7);
      assertEquals("p{InCombiningDiacriticalMarks}+", string7);
  }

  @Test(timeout = 4000)
  public void test474()  throws Throwable  {
      String string0 = StringUtils.defaultString("u-](");
      assertNotNull(string0);
      assertEquals("u-](", string0);
      
      String string1 = StringUtils.join((float[]) null, '>', 3156, 4);
      assertNull(string1);
  }

  @Test(timeout = 4000)
  public void test475()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("q@F!X#Ug_t@", "(Ad{JKOkvP]^ry2!*~", (-1));
      assertEquals(2, stringArray0.length);
      assertNotNull(stringArray0);
      
      boolean boolean0 = StringUtils.containsIgnoreCase("(Ad{JKOkvP]^ry2!*~", "q@F!X#Ug_t@");
      assertFalse(boolean0);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "(Ad{JKOkvP]^ry2!*~", (CharSequence) "(Ad{JKOkvP]^ry2!*~");
      assertEquals(0, int0);
      
      int int1 = StringUtils.indexOf((CharSequence) "q@F!X#Ug_t@", 0, 0);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      String string0 = StringUtils.overlay("q@F!X#Ug_t@", "aX-1.0x-412.24x1.0x-2592.4207x-2730.193aX-1.0x-412.24x1.0x-2592.4207x-2730.193aX-1.0x-412.24x1.0x-2592.4207x-2730.193-1.0x-412.24x1.0x-2592.4207x-2730.193nt ", (-1), (-1));
      assertNotNull(string0);
      assertEquals("aX-1.0x-412.24x1.0x-2592.4207x-2730.193aX-1.0x-412.24x1.0x-2592.4207x-2730.193aX-1.0x-412.24x1.0x-2592.4207x-2730.193-1.0x-412.24x1.0x-2592.4207x-2730.193nt q@F!X#Ug_t@", string0);
  }

  @Test(timeout = 4000)
  public void test476()  throws Throwable  {
      String string0 = StringUtils.stripStart("maxWith cannot be negative", "maxWith cannot be negative");
      assertNotNull(string0);
      assertEquals("", string0);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "", (CharSequence) "maxWith cannot be negative");
      assertEquals(26, int0);
      
      boolean boolean0 = StringUtils.equalsIgnoreCase("", "");
      assertTrue(boolean0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[9];
      CharSequence charSequence0 = StringUtils.defaultIfBlank((CharSequence) "", (CharSequence) "%cf]l:uy>#-V");
      assertFalse(charSequence0.equals((Object)string0));
      assertNotNull(charSequence0);
      assertEquals("%cf]l:uy>#-V", charSequence0);
      
      charSequenceArray0[0] = (CharSequence) "%cf]l:uy>#-V";
      charSequenceArray0[1] = (CharSequence) "maxWith cannot be negative";
      charSequenceArray0[2] = (CharSequence) "maxWith cannot be negative";
      charSequenceArray0[3] = (CharSequence) "%cf]l:uy>#-V";
      charSequenceArray0[4] = (CharSequence) "";
      charSequenceArray0[5] = (CharSequence) "%cf]l:uy>#-V";
      charSequenceArray0[6] = (CharSequence) "%cf]l:uy>#-V";
      CharSequence[] charSequenceArray1 = new CharSequence[2];
      assertFalse(charSequenceArray1.equals((Object)charSequenceArray0));
      
      charSequenceArray1[0] = (CharSequence) "%cf]l:uy>#-V";
      charSequenceArray1[1] = (CharSequence) "";
      CharSequence charSequence1 = StringUtils.firstNonEmpty(charSequenceArray1);
      assertFalse(charSequenceArray1.equals((Object)charSequenceArray0));
      assertFalse(charSequence1.equals((Object)string0));
      assertTrue(charSequence1.equals((Object)charSequence0));
      assertNotSame(charSequenceArray1, charSequenceArray0);
      assertEquals(2, charSequenceArray1.length);
      assertNotNull(charSequence1);
      assertEquals("%cf]l:uy>#-V", charSequence1);
      
      charSequenceArray0[7] = (CharSequence) "%cf]l:uy>#-V";
      charSequenceArray0[8] = (CharSequence) "maxWith cannot be negative";
      String string1 = StringUtils.wrap("maxWith cannot be negative", "%cf]l:uy>#-V");
      assertFalse(string1.equals((Object)charSequence0));
      assertFalse(string1.equals((Object)charSequence1));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("%cf]l:uy>#-VmaxWith cannot be negative%cf]l:uy>#-V", string1);
      
      int int1 = StringUtils.lastIndexOf((CharSequence) "", (CharSequence) "%cf]l:uy>#-VmaxWith cannot be negative%cf]l:uy>#-V");
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      ArrayDeque<String> arrayDeque0 = new ArrayDeque<String>((-3275));
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      assertNotNull(arrayDeque0);
      assertFalse(arrayDeque0.contains(""));
      
      String string2 = StringUtils.join((Iterable<?>) arrayDeque0, "%cf]l:uy>#-VmaxWith cannot be negative%cf]l:uy>#-V");
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      assertFalse(string2.equals((Object)charSequence0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)charSequence1));
      assertTrue(string2.equals((Object)string0));
      assertNotNull(string2);
      assertFalse(arrayDeque0.contains(string2));
      assertEquals("", string2);
      
      String string3 = StringUtils.deleteWhitespace("org.apache.commons.lang3.ObjectUtils");
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)charSequence1));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)charSequence0));
      assertNotNull(string3);
      assertEquals("org.apache.commons.lang3.ObjectUtils", string3);
      
      int int2 = StringUtils.indexOf((CharSequence) "org.apache.commons.lang3.ObjectUtils", 85, 25);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(31, int2);
      
      String string4 = StringUtils.stripAccents("9Bf;oQZFH\"2RFO");
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)charSequence1));
      assertFalse(string4.equals((Object)charSequence0));
      assertFalse(string4.equals((Object)string3));
      assertNotNull(string4);
      assertEquals("9Bf;oQZFH\"2RFO", string4);
  }

  @Test(timeout = 4000)
  public void test477()  throws Throwable  {
      String string0 = StringUtils.substring("}~.", (-3733));
      assertNotNull(string0);
      assertEquals("}~.", string0);
      
      boolean boolean0 = StringUtils.isAlphaSpace("}~.");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.contains((CharSequence) "}~.", (-354));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test478()  throws Throwable  {
      String string0 = StringUtils.stripAccents("");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.wrap(" is not in the range '0' - '9'", '3');
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("3 is not in the range '0' - '9'3", string1);
      
      String[] stringArray0 = StringUtils.substringsBetween("zGiqL%uA|", "tqGfjg", "tqGfjg");
      assertNull(stringArray0);
      
      String[] stringArray1 = StringUtils.splitPreserveAllTokens(" is not in the range '0' - '9'", "");
      assertEquals(1, stringArray1.length);
      assertNotNull(stringArray1);
      
      String string2 = StringUtils.replacePattern(" is not in the range '0' - '9'", "", "");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals(" is not in the range '0' - '9'", string2);
      
      Vector<Locale.LanguageRange> vector0 = new Vector<Locale.LanguageRange>();
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertNotNull(vector0);
      
      UnaryOperator<Locale.LanguageRange> unaryOperator0 = UnaryOperator.identity();
      assertNotNull(unaryOperator0);
      
      vector0.replaceAll(unaryOperator0);
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      
      PriorityQueue<String> priorityQueue0 = new PriorityQueue<String>();
      assertEquals(0, priorityQueue0.size());
      assertNotNull(priorityQueue0);
      assertFalse(priorityQueue0.contains(" is not in the range '0' - '9'"));
      
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) vector0, (Collection<String>) priorityQueue0);
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertEquals(0, priorityQueue0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
      assertFalse(priorityQueue0.contains(" is not in the range '0' - '9'"));
      assertFalse(list0.contains(" is not in the range '0' - '9'"));
      
      ArrayDeque<String> arrayDeque0 = new ArrayDeque<String>(list0);
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertEquals(0, priorityQueue0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      assertNotNull(arrayDeque0);
      assertFalse(priorityQueue0.contains(" is not in the range '0' - '9'"));
      assertFalse(list0.contains(" is not in the range '0' - '9'"));
      assertFalse(arrayDeque0.contains(" is not in the range '0' - '9'"));
      
      Iterator<String> iterator0 = arrayDeque0.iterator();
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertEquals(0, priorityQueue0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      assertNotNull(iterator0);
      assertFalse(priorityQueue0.contains(" is not in the range '0' - '9'"));
      assertFalse(list0.contains(" is not in the range '0' - '9'"));
      assertFalse(arrayDeque0.contains(" is not in the range '0' - '9'"));
      
      String string3 = StringUtils.join(iterator0, 'c');
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertEquals(0, priorityQueue0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string0));
      assertNotNull(string3);
      assertFalse(priorityQueue0.contains(" is not in the range '0' - '9'"));
      assertFalse(list0.contains(" is not in the range '0' - '9'"));
      assertFalse(arrayDeque0.contains(" is not in the range '0' - '9'"));
      assertEquals("", string3);
      
      String string4 = StringUtils.substringBefore("#", "#");
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string3));
      assertNotNull(string4);
      assertEquals("", string4);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "", (CharSequence) "");
      assertEquals(0, int0);
      
      boolean boolean0 = StringUtils.containsNone((CharSequence) "", "#");
      assertTrue(boolean0);
      
      boolean boolean1 = arrayDeque0.add("HD4#");
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertEquals(0, priorityQueue0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertFalse(arrayDeque0.isEmpty());
      assertEquals(1, arrayDeque0.size());
      assertTrue(boolean1 == boolean0);
      assertFalse(priorityQueue0.contains(" is not in the range '0' - '9'"));
      assertFalse(list0.contains(" is not in the range '0' - '9'"));
      assertTrue(arrayDeque0.contains("HD4#"));
      assertFalse(arrayDeque0.contains(" is not in the range '0' - '9'"));
      assertTrue(boolean1);
      
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier0).get();
      String string5 = StringUtils.getIfEmpty("", supplier0);
      assertNull(string5);
  }

  @Test(timeout = 4000)
  public void test479()  throws Throwable  {
      int int0 = StringUtils.compare("...", "...", true);
      assertEquals(0, int0);
      
      String string0 = StringUtils.center("Kv9XcM", Integer.MIN_VALUE);
      assertNotNull(string0);
      assertEquals("Kv9XcM", string0);
      
      boolean boolean0 = StringUtils.isAllEmpty((CharSequence[]) null);
      assertTrue(boolean0);
      
      double double0 = StringUtils.getJaroWinklerDistance("Kv9XcM", "...");
      assertEquals(0.0, double0, 0.01);
      
      CharBuffer charBuffer0 = CharBuffer.allocate(0);
      assertTrue(charBuffer0.hasArray());
      assertEquals("", charBuffer0.toString());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(0, charBuffer0.remaining());
      assertEquals(0, charBuffer0.capacity());
      assertEquals(0, charBuffer0.limit());
      assertFalse(charBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.position());
      assertEquals(0, charBuffer0.length());
      assertFalse(charBuffer0.isDirect());
      assertFalse(charBuffer0.isReadOnly());
      assertNotNull(charBuffer0);
      
      Supplier<CharBuffer> supplier0 = (Supplier<CharBuffer>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier0).get();
      CharBuffer charBuffer1 = StringUtils.getIfEmpty(charBuffer0, supplier0);
      assertTrue(charBuffer0.hasArray());
      assertEquals("", charBuffer0.toString());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(0, charBuffer0.remaining());
      assertEquals(0, charBuffer0.capacity());
      assertEquals(0, charBuffer0.limit());
      assertFalse(charBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.position());
      assertEquals(0, charBuffer0.length());
      assertFalse(charBuffer0.isDirect());
      assertFalse(charBuffer0.isReadOnly());
      assertNull(charBuffer1);
  }

  @Test(timeout = 4000)
  public void test480()  throws Throwable  {
      String string0 = StringUtils.substringBeforeLast("", "");
      assertNotNull(string0);
      assertEquals("", string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[7];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "";
      charSequenceArray0[2] = (CharSequence) "";
      charSequenceArray0[3] = (CharSequence) "";
      charSequenceArray0[4] = (CharSequence) "";
      String string1 = StringUtils.trimToNull("Array and element cannot both be null");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("Array and element cannot both be null", string1);
      
      charSequenceArray0[6] = (CharSequence) "Array and element cannot both be null";
      int int0 = StringUtils.indexOfDifference(charSequenceArray0);
      assertEquals(7, charSequenceArray0.length);
      assertEquals(0, int0);
      
      int int1 = StringUtils.ordinalIndexOf(charSequenceArray0[0], "", 0);
      assertFalse(int1 == int0);
      assertEquals(7, charSequenceArray0.length);
      assertEquals((-1), int1);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)2;
      String string2 = StringUtils.join(shortArray0, '6', (-1), (-363));
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals(1, shortArray0.length);
      assertNotNull(string2);
      assertArrayEquals(new short[] {(short)2}, shortArray0);
      assertEquals("", string2);
      
      int int2 = StringUtils.lastIndexOfIgnoreCase(charSequenceArray0[0], (CharSequence) "", (-620));
      assertTrue(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(7, charSequenceArray0.length);
      assertEquals((-1), int2);
      
      boolean[] booleanArray0 = new boolean[5];
      // Undeclared exception!
      try { 
        StringUtils.join(booleanArray0, '[', (-363), 13);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -363
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test481()  throws Throwable  {
      String string0 = StringUtils.lowerCase("null/empty items~4&4+2&FA");
      assertNotNull(string0);
      assertEquals("null/empty items~4&4+2&fa", string0);
      
      String string1 = StringUtils.unwrap("x[BEyAxx[BEyAxx[...", "x[BEyAxx[BEyAxx[...");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("x[BEyAxx[BEyAxx[...", string1);
      
      String string2 = StringUtils.replaceChars("null/empty items~4&4+2&fa", "x[BEyAxx[BEyAxx[...", "GdO[htbw}6Mc6.@E#)");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("null/empth items~4&4+2&fa", string2);
      
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "null/empth items~4&4+2&fa", "null/empth items~4&4+2&fa");
      assertTrue(boolean0);
      
      String string3 = StringUtils.deleteWhitespace("null/empty items~4&4+2&fa");
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      assertEquals("null/emptyitems~4&4+2&fa", string3);
  }

  @Test(timeout = 4000)
  public void test482()  throws Throwable  {
      String string0 = StringUtils.overlay("{$Om", " 94MbWG<(7<$G", 64, (-1824));
      assertNotNull(string0);
      assertEquals(" 94MbWG<(7<$G", string0);
      
      int int0 = StringUtils.indexOf((CharSequence) " 94MbWG<(7<$G", (-181));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test483()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[7];
      String string0 = "offset cannot be negative";
      Locale locale0 = Locale.KOREA;
      assertEquals("ko_KR", locale0.toString());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("KR", locale0.getCountry());
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("kor", locale0.getISO3Language());
      assertNotNull(locale0);
      
      String string1 = StringUtils.upperCase("offset cannot be negative", locale0);
      assertEquals("ko_KR", locale0.toString());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("KR", locale0.getCountry());
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("kor", locale0.getISO3Language());
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("OFFSET CANNOT BE NEGATIVE", string1);
      
      charSequenceArray0[0] = (CharSequence) "OFFSET CANNOT BE NEGATIVE";
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)13;
      byteArray0[1] = (byte)84;
      byteArray0[2] = (byte)24;
      byteArray0[3] = (byte) (-32);
      byteArray0[4] = (byte)7;
      byteArray0[5] = (byte)5;
      byteArray0[6] = (byte) (-128);
      byteArray0[7] = (byte) (-128);
      String string2 = "qIdJ~q\\]ah";
      // Undeclared exception!
      try { 
        StringUtils.toString(byteArray0, "qIdJ~q]ah");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // qIdJ~q]ah
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test484()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = 'Q';
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)79;
      byteArray0[1] = (byte)110;
      // Undeclared exception!
      try { 
        StringUtils.join(byteArray0, 'Q', (int) (byte)79, (int) (byte)110);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 79
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test485()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      Locale locale0 = Locale.GERMANY;
      assertEquals("", locale0.getVariant());
      assertEquals("DE", locale0.getCountry());
      assertEquals("de_DE", locale0.toString());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("de", locale0.getLanguage());
      assertEquals("deu", locale0.getISO3Language());
      assertNotNull(locale0);
      
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      assertEquals("", locale0.getVariant());
      assertEquals("DE", locale0.getCountry());
      assertEquals("de_DE", locale0.toString());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("de", locale0.getLanguage());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertNotNull(set0);
      
      boolean boolean0 = StringUtils.containsIgnoreCase("", "");
      assertTrue(boolean0);
      
      String[] stringArray0 = StringUtils.substringsBetween("", "Cdb\"'JOcon{3;<u", "kb>K:%lR&M+Fm2*/78object");
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-69);
      byteArray0[1] = (byte)53;
      byteArray0[2] = (byte) (-125);
      byteArray0[3] = (byte)5;
      byteArray0[4] = (byte)11;
      byteArray0[5] = (byte)5;
      byteArray0[6] = (byte) (-65);
      byteArray0[7] = (byte)64;
      String string0 = StringUtils.join(byteArray0, ']');
      assertEquals(8, byteArray0.length);
      assertNotNull(string0);
      assertArrayEquals(new byte[] {(byte) (-69), (byte)53, (byte) (-125), (byte)5, (byte)11, (byte)5, (byte) (-65), (byte)64}, byteArray0);
      assertEquals("-69]53]-125]5]11]5]-65]64", string0);
  }

  @Test(timeout = 4000)
  public void test486()  throws Throwable  {
      String string0 = StringUtils.remove("P.ikGNWDF", "2I@uQsj3(");
      assertNotNull(string0);
      assertEquals("P.ikGNWDF", string0);
      
      int int0 = StringUtils.indexOf((CharSequence) "P.ikGNWDF", (-2272));
      assertEquals((-1), int0);
      
      String string1 = StringUtils.deleteWhitespace("P.ikGNWDF");
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("P.ikGNWDF", string1);
      
      boolean boolean0 = StringUtils.isAlphaSpace("2I@uQsj3(");
      assertFalse(boolean0);
      
      String[] stringArray0 = Locale.getISOLanguages();
      assertEquals(188, stringArray0.length);
      assertNotNull(stringArray0);
      
      int int1 = 3;
      String string2 = StringUtils.rightPad("P.ikGNWDF", 3, "P.ikGNWDF");
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("P.ikGNWDF", string2);
      
      String string3 = StringUtils.getCommonPrefix(stringArray0);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals(188, stringArray0.length);
      assertNotNull(string3);
      assertEquals("", string3);
      
      String string4 = StringUtils.rightPad("2I@uQsj3(", 1947);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertNotNull(string4);
      
      boolean boolean1 = StringUtils.containsIgnoreCase(string4, "P.ikGNWDF");
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      // Undeclared exception!
      try { 
        StringUtils.replaceAll("P.ikGNWDF", "2I@uQsj3(", "E:AxK R5';loh~094|#");
        fail("Expecting exception: PatternSyntaxException");
      
      } catch(PatternSyntaxException e) {
         //
         // Unclosed group near index 9
         // 2I@uQsj3(
         //
         verifyException("java.util.regex.Pattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test487()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      byte[] byteArray0 = new byte[11];
      byteArray0[0] = (byte)79;
      String string0 = StringUtils.join(byteArray0, ':');
      assertEquals(11, byteArray0.length);
      assertNotNull(string0);
      assertEquals("79:0:0:0:0:0:0:0:0:0:0", string0);
      
      String[] stringArray0 = new String[0];
      String string1 = StringUtils.replaceEachRepeatedly("\r", stringArray0, stringArray0);
      assertFalse(string1.equals((Object)string0));
      assertEquals(0, stringArray0.length);
      assertNotNull(string1);
      assertEquals("\r", string1);
  }

  @Test(timeout = 4000)
  public void test488()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = ")!1XjMA#y,~aU";
      stringArray0[1] = "e*j)gaK";
      stringArray0[2] = " vs ";
      stringArray0[3] = "9U!{jlmT@{?`x(fG";
      stringArray0[4] = "gJ!*PXlvf @wg8F*2|q";
      stringArray0[5] = "*";
      String string0 = StringUtils.getCommonPrefix(stringArray0);
      assertEquals(6, stringArray0.length);
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.chop("e*j)gaK");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("e*j)ga", string1);
      
      boolean boolean0 = StringUtils.isEmpty("9U!{jlmT@{?`x(fG");
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)92;
      byteArray0[1] = (byte) (-63);
      byteArray0[2] = (byte)5;
      byteArray0[3] = (byte)23;
      // Undeclared exception!
      try { 
        StringUtils.join(byteArray0, '?', (-687), (int) (byte) (-63));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -687
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test489()  throws Throwable  {
      String[] stringArray0 = StringUtils.split("object", "org.apache.commons.lang3.ArrayUtils", 3);
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string0 = StringUtils.substringBetween("object", "object");
      assertNull(string0);
      
      String string1 = StringUtils.getDigits("p{InCombiningDiacriticalMarks}+");
      assertNotNull(string1);
      assertEquals("", string1);
      
      boolean boolean0 = StringUtils.isAllEmpty((CharSequence[]) null);
      assertTrue(boolean0);
      
      boolean boolean1 = StringUtils.containsAny((CharSequence) null, (CharSequence) "object");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      // Undeclared exception!
      try { 
        StringUtils.removePattern("Q[uMKmWZ", "Q[uMKmWZ");
        fail("Expecting exception: PatternSyntaxException");
      
      } catch(PatternSyntaxException e) {
         //
         // Unclosed character class near index 7
         // Q[uMKmWZ
         //        ^
         //
         verifyException("java.util.regex.Pattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test490()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "The character ";
      charSequenceArray0[2] = (CharSequence) "The character ";
      boolean boolean0 = StringUtils.equalsAny("", charSequenceArray0);
      assertEquals(4, charSequenceArray0.length);
      assertTrue(boolean0);
      
      String string0 = StringUtils.removePattern("", "^5Lu5cU9 t@rj<9*");
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test491()  throws Throwable  {
      float[] floatArray0 = new float[0];
      char char0 = ']';
      String string0 = StringUtils.join(floatArray0, ']');
      assertEquals(0, floatArray0.length);
      assertNotNull(string0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals("", string0);
      
      String string1 = "{}";
      // Undeclared exception!
      try { 
        StringUtils.removePattern("{}", "{}");
        fail("Expecting exception: PatternSyntaxException");
      
      } catch(PatternSyntaxException e) {
         //
         // Illegal repetition
         // {}
         //
         verifyException("java.util.regex.Pattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test492()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      Locale locale0 = Locale.GERMANY;
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("DE", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("de", locale0.getLanguage());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("de_DE", locale0.toString());
      assertNotNull(locale0);
      
      LinkedHashSet<Locale> linkedHashSet0 = new LinkedHashSet<Locale>();
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertNotNull(linkedHashSet0);
      assertFalse(linkedHashSet0.contains(locale0));
      
      Locale locale1 = Locale.lookup(arrayList0, linkedHashSet0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertNull(locale1);
      assertFalse(linkedHashSet0.contains(locale0));
      
      String string0 = locale0.getDisplayScript((Locale) null);
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("DE", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("de", locale0.getLanguage());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("de_DE", locale0.toString());
      assertNotNull(string0);
      assertEquals("", string0);
      
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("DE", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("de", locale0.getLanguage());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("de_DE", locale0.toString());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertNotNull(set0);
      assertFalse(set0.contains(string0));
      
      String string1 = StringUtils.substringAfter("\n", 598);
      assertNotNull(string1);
      assertEquals("", string1);
      
      int int0 = StringUtils.length("");
      assertEquals(0, int0);
      
      String string2 = StringUtils.abbreviate("", "", 77);
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("", string2);
      
      CharSequence[] charSequenceArray0 = new CharSequence[6];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "\n";
      boolean boolean0 = StringUtils.isWhitespace("");
      assertTrue(boolean0);
      
      boolean boolean1 = StringUtils.contains((CharSequence) " is not in the range '0' - '9'", charSequenceArray0[0]);
      assertTrue(boolean1 == boolean0);
      assertEquals(6, charSequenceArray0.length);
      assertTrue(boolean1);
      
      String string3 = StringUtils.abbreviate(" is not in the range '0' - '9'", 2772, 2772);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      assertEquals(" is not in the range '0' - '9'", string3);
      
      boolean boolean2 = StringUtils.isNumericSpace(" is not in the range '0' - '9'");
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2);
      
      String string4 = StringUtils.leftPad("8", 0, " is not in the range '0' - '9'");
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertNotNull(string4);
      assertEquals("8", string4);
      
      String string5 = StringUtils.getIfEmpty("", (Supplier<String>) null);
      assertNull(string5);
  }

  @Test(timeout = 4000)
  public void test493()  throws Throwable  {
      ArrayList<Locale.FilteringMode> arrayList0 = new ArrayList<Locale.FilteringMode>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      ListIterator<Locale.FilteringMode> listIterator0 = arrayList0.listIterator();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertFalse(listIterator0.hasPrevious());
      assertFalse(listIterator0.hasNext());
      assertNotNull(listIterator0);
      
      String string0 = StringUtils.join((Iterator<?>) listIterator0, '{');
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertFalse(listIterator0.hasPrevious());
      assertFalse(listIterator0.hasNext());
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.removeStartIgnoreCase("m3:*", ":,3}u");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("m3:*", string1);
      
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      String string2 = StringUtils.getIfEmpty("!,:-K90M", supplier0);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("!,:-K90M", string2);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("!,:-K90M", "offset cannot be negative");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test494()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[7];
      charSequenceArray0[2] = (CharSequence) "";
      String string0 = StringUtils.trimToNull("Array and element cannot both be null");
      assertNotNull(string0);
      assertEquals("Array and element cannot both be null", string0);
      
      charSequenceArray0[6] = (CharSequence) "Array and element cannot both be null";
      int int0 = StringUtils.indexOfDifference(charSequenceArray0);
      assertEquals(7, charSequenceArray0.length);
      assertEquals(0, int0);
      
      String[] stringArray0 = StringUtils.split("             ");
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string1 = StringUtils.upperCase("Arguments cannot both be null");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("ARGUMENTS CANNOT BOTH BE NULL", string1);
      
      String string2 = StringUtils.getIfEmpty("aX-", (Supplier<String>) null);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("aX-", string2);
      
      String string3 = "\\u";
      String string4 = StringUtils.abbreviateMiddle(string3, "Threshold must not be negative", (-369));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertNotNull(string4);
      assertEquals("\\u", string4);
      
      boolean boolean0 = StringUtils.equals((CharSequence) "", (CharSequence) "Array and element cannot both be null");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test495()  throws Throwable  {
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) "kb>K:%lR&M+Fm2*/78";
      objectArray0[1] = (Object) "kb>K:%lR&M+Fm2*/78";
      objectArray0[2] = (Object) "kb>K:%lR&M+Fm2*/78";
      // Undeclared exception!
      try { 
        StringUtils.join(objectArray0, ';', (-4563), 323);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -4563
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test496()  throws Throwable  {
      String string0 = StringUtils.wrapIfMissing("%d=7wr7,/{8", '`');
      assertNotNull(string0);
      assertEquals("`%d=7wr7,/{8`", string0);
      
      String string1 = StringUtils.rightPad("rp$f", (-3760));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("rp$f", string1);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "rp$f", (CharSequence) "`%d=7wr7,/{8`");
      assertEquals((-1), int0);
      
      boolean boolean0 = StringUtils.isWhitespace("rp$f");
      assertFalse(boolean0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[7];
      charSequenceArray0[0] = (CharSequence) "rp$f";
      charSequenceArray0[1] = (CharSequence) "`%d=7wr7,/{8`";
      charSequenceArray0[3] = (CharSequence) "%d=7wr7,/{8";
      char char0 = '/';
      String string2 = StringUtils.rightPad("Locale must not be null", (-1), '/');
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("Locale must not be null", string2);
      
      String string3 = StringUtils.substring("Locale must not be null", (-3760));
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      assertEquals("Locale must not be null", string3);
      
      // Undeclared exception!
      try { 
        StringUtils.join((Object[]) charSequenceArray0, '3', (-3760), 98);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -3760
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test497()  throws Throwable  {
      String string0 = StringUtils.chomp(")!1XjMA#y,~aU");
      assertNotNull(string0);
      assertEquals(")!1XjMA#y,~aU", string0);
      
      String string1 = StringUtils.substring(")!1XjMA#y,~aU", (-32768));
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(")!1XjMA#y,~aU", string1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      charSequenceArray0[0] = (CharSequence) ")!1XjMA#y,~aU";
      charSequenceArray0[2] = (CharSequence) ")!1XjMA#y,~aU";
      int int0 = StringUtils.lastIndexOfAny(")!1XjMA#y,~aU", charSequenceArray0);
      assertEquals(4, charSequenceArray0.length);
      assertEquals(0, int0);
      
      String string2 = StringUtils.substringAfterLast("DG'mib`w", 0);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("", string2);
      
      int int1 = StringUtils.compareIgnoreCase(")!1XjMA#y,~aU", ")!1XjMA#y,~aU", false);
      assertTrue(int1 == int0);
      assertEquals(0, int1);
  }

  @Test(timeout = 4000)
  public void test498()  throws Throwable  {
      String string0 = StringUtils.chomp(")!1XjMA#y,~aU");
      assertNotNull(string0);
      assertEquals(")!1XjMA#y,~aU", string0);
      
      String string1 = StringUtils.substring(")!1XjMA#y,~aU", (-32768));
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(")!1XjMA#y,~aU", string1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      charSequenceArray0[2] = (CharSequence) ")!1XjMA#y,~aU";
      int int0 = StringUtils.lastIndexOfAny(")!1XjMA#y,~aU", charSequenceArray0);
      assertEquals(4, charSequenceArray0.length);
      assertEquals(0, int0);
      
      String string2 = StringUtils.substringAfterLast("DG'mib`w", 0);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("", string2);
      
      int int1 = StringUtils.compareIgnoreCase(")!1XjMA#y,~aU", ")!1XjMA#y,~aU", false);
      assertTrue(int1 == int0);
      assertEquals(0, int1);
  }

  @Test(timeout = 4000)
  public void test499()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      String string0 = StringUtils.trimToEmpty("\n");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparator("", "\r", (-1));
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "\r", "\r");
      assertEquals(0, int0);
      
      String string1 = StringUtils.substring("", 0, 0);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
      
      String string2 = StringUtils.overlay("", "\r", 0, (-1));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("\r", string2);
      
      int int1 = StringUtils.lastIndexOfAny(" ", stringArray0);
      assertFalse(int1 == int0);
      assertEquals(0, stringArray0.length);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test500()  throws Throwable  {
      String string0 = StringUtils.trimToEmpty(":W3vjMB@");
      assertNotNull(string0);
      assertEquals(":W3vjMB@", string0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparator(":W3vjMB@", ":W3vjMB@", 0);
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string1 = StringUtils.strip("7:!\"VrN_1", (String) null);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("7:!\"VrN_1", string1);
      
      String string2 = StringUtils.getDigits(":W3vjMB@");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("3", string2);
  }

  @Test(timeout = 4000)
  public void test501()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      Locale locale0 = Locale.GERMANY;
      assertEquals("de_DE", locale0.toString());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("DE", locale0.getCountry());
      assertEquals("de", locale0.getLanguage());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertNotNull(locale0);
      
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      assertEquals("de_DE", locale0.toString());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("DE", locale0.getCountry());
      assertEquals("de", locale0.getLanguage());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertNotNull(set0);
      
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) arrayList0, (Collection<String>) set0, locale_FilteringMode0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertEquals("de_DE", locale0.toString());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("DE", locale0.getCountry());
      assertEquals("de", locale0.getLanguage());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
      
      String string0 = StringUtils.substringAfter("\n", 598);
      assertNotNull(string0);
      assertEquals("", string0);
      
      int int0 = StringUtils.length("");
      assertEquals(0, int0);
      
      String string1 = StringUtils.center(" ", 256);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("                                                                                                                                                                                                                                                                ", string1);
      
      String string2 = StringUtils.abbreviate("", "", 77);
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("", string2);
      
      CharSequence[] charSequenceArray0 = new CharSequence[6];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "\n";
      charSequenceArray0[2] = (CharSequence) " ";
      charSequenceArray0[3] = (CharSequence) "";
      charSequenceArray0[4] = (CharSequence) "                                                                                                                                                                                                                                                                ";
      String string3 = StringUtils.deleteWhitespace("\n");
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string2));
      assertNotNull(string3);
      assertEquals("", string3);
      
      charSequenceArray0[5] = (CharSequence) "";
      boolean boolean0 = StringUtils.equalsAny("                                                                                                                                                                                                                                                                ", charSequenceArray0);
      assertEquals(6, charSequenceArray0.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test502()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[8];
      charSequenceArray0[0] = null;
      charSequenceArray0[1] = (CharSequence) "object";
      charSequenceArray0[2] = (CharSequence) "object";
      String string0 = StringUtils.LF;
      assertNotNull(string0);
      assertEquals("\n", string0);
      
      charSequenceArray0[3] = (CharSequence) "\n";
      charSequenceArray0[4] = (CharSequence) "org.apache.commons.lang3.ArrayUtils";
      CharSequence charSequence0 = StringUtils.getIfBlank(charSequenceArray0[3], (Supplier<CharSequence>) null);
      assertEquals(8, charSequenceArray0.length);
      assertNull(charSequence0);
      
      charSequenceArray0[5] = null;
      charSequenceArray0[6] = (CharSequence) "object";
      charSequenceArray0[7] = (CharSequence) "org.apache.commons.lang3.ArrayUtils";
      boolean boolean0 = StringUtils.equalsAny((CharSequence) null, charSequenceArray0);
      assertEquals(8, charSequenceArray0.length);
      assertTrue(boolean0);
      
      int[] intArray0 = StringUtils.toCodePoints("\n");
      assertEquals(1, intArray0.length);
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {10}, intArray0);
      
      String string1 = StringUtils.rightPad((String) null, 3, "aX-1.0x-412.24x1.0x-2592.4207x-2730.193aX-1.0x-412.24x1.0x-2592.4207x-2730.193aX-1.0x-412.24x1.0x-2592.4207x-2730.193-1.0x-412.24x1.0x-2592.4207x-2730.193nt ");
      assertNull(string1);
      
      String string2 = StringUtils.rightPad("D<Z9<nIdze", 3166);
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      String string3 = StringUtils.uncapitalize("8");
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      assertEquals("8", string3);
      
      int int0 = StringUtils.indexOf((CharSequence) null, (CharSequence) "D<Z9<nIdze", 3166);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test503()  throws Throwable  {
      String string0 = StringUtils.stripStart("maxWith cannot be negative", "maxWith cannot be negative");
      assertNotNull(string0);
      assertEquals("", string0);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "", (CharSequence) "maxWith cannot be negative");
      assertEquals(26, int0);
      
      boolean boolean0 = StringUtils.equalsIgnoreCase("", "");
      assertTrue(boolean0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[9];
      CharSequence charSequence0 = StringUtils.defaultIfBlank((CharSequence) "", (CharSequence) "k:%oT");
      assertFalse(charSequence0.equals((Object)string0));
      assertNotNull(charSequence0);
      assertEquals("k:%oT", charSequence0);
      
      charSequenceArray0[0] = (CharSequence) "k:%oT";
      charSequenceArray0[1] = (CharSequence) "maxWith cannot be negative";
      charSequenceArray0[2] = (CharSequence) "maxWith cannot be negative";
      charSequenceArray0[3] = (CharSequence) "k:%oT";
      charSequenceArray0[4] = (CharSequence) "";
      charSequenceArray0[5] = (CharSequence) "k:%oT";
      charSequenceArray0[6] = (CharSequence) "k:%oT";
      CharSequence[] charSequenceArray1 = new CharSequence[2];
      assertFalse(charSequenceArray1.equals((Object)charSequenceArray0));
      
      charSequenceArray1[0] = (CharSequence) "k:%oT";
      charSequenceArray1[1] = (CharSequence) "";
      CharSequence charSequence1 = StringUtils.firstNonEmpty(charSequenceArray1);
      assertFalse(charSequenceArray1.equals((Object)charSequenceArray0));
      assertFalse(charSequence1.equals((Object)string0));
      assertTrue(charSequence1.equals((Object)charSequence0));
      assertNotSame(charSequenceArray1, charSequenceArray0);
      assertEquals(2, charSequenceArray1.length);
      assertNotNull(charSequence1);
      assertEquals("k:%oT", charSequence1);
      
      charSequenceArray0[7] = (CharSequence) "k:%oT";
      charSequenceArray0[8] = (CharSequence) "maxWith cannot be negative";
      String string1 = StringUtils.appendIfMissing("k:%oT", "k:%oT", charSequenceArray0);
      assertTrue(string1.equals((Object)charSequence0));
      assertFalse(string1.equals((Object)string0));
      assertTrue(string1.equals((Object)charSequence1));
      assertFalse(charSequenceArray0.equals((Object)charSequenceArray1));
      assertNotSame(charSequenceArray0, charSequenceArray1);
      assertEquals(9, charSequenceArray0.length);
      assertNotNull(string1);
      assertEquals("k:%oT", string1);
      
      int int1 = StringUtils.lastIndexOf((CharSequence) "", (CharSequence) "k:%oT");
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      int int2 = StringUtils.lastIndexOf(charSequenceArray0[2], (-5927), 11);
      assertFalse(charSequenceArray0.equals((Object)charSequenceArray1));
      assertFalse(int2 == int0);
      assertTrue(int2 == int1);
      assertNotSame(charSequenceArray0, charSequenceArray1);
      assertEquals(9, charSequenceArray0.length);
      assertEquals((-1), int2);
      
      String string2 = StringUtils.substringBeforeLast("", "");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)charSequence0));
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)charSequence1));
      assertNotNull(string2);
      assertEquals("", string2);
      
      String string3 = StringUtils.mid("", 0, 256);
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)charSequence1));
      assertTrue(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)charSequence0));
      assertNotNull(string3);
      assertEquals("", string3);
      
      String string4 = StringUtils.defaultString("e*j)gaK");
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)charSequence0));
      assertFalse(string4.equals((Object)charSequence1));
      assertFalse(string4.equals((Object)string1));
      assertNotNull(string4);
      assertEquals("e*j)gaK", string4);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) (-5927);
      floatArray0[1] = (float) (-5927);
      String string5 = StringUtils.substringBefore("", "");
      assertFalse(string5.equals((Object)charSequence0));
      assertFalse(string5.equals((Object)string4));
      assertTrue(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertTrue(string5.equals((Object)string2));
      assertTrue(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)charSequence1));
      assertNotNull(string5);
      assertEquals("", string5);
  }

  @Test(timeout = 4000)
  public void test504()  throws Throwable  {
      int int0 = StringUtils.compare("Z", "=`%d=7wr7,/{8`");
      assertEquals(29, int0);
      
      String string0 = StringUtils.substring("ghhfOQ!a{@M#22", 29);
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.leftPad("h", 48);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("                                               h", string1);
      
      String string2 = StringUtils.wrapIfMissing("=`%d=7wr7,/{8`", "Z");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("Z=`%d=7wr7,/{8`Z", string2);
      
      String string3 = StringUtils.substringAfter("Arrayelement", 438);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      assertEquals("", string3);
      
      String string4 = StringUtils.truncate((String) null, 438);
      assertNull(string4);
      
      String string5 = StringUtils.EMPTY;
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertNotNull(string5);
      assertEquals("", string5);
      
      String string6 = StringUtils.substringBetween("", "Arrayelement", "]I:RR/|5'hqH@yBk#%C");
      assertNull(string6);
      
      boolean boolean0 = StringUtils.isEmpty("");
      assertTrue(boolean0);
      
      String string7 = StringUtils.substringBefore("Arrayelement", (String) null);
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string3));
      assertNotNull(string7);
      assertEquals("Arrayelement", string7);
      
      // Undeclared exception!
      try { 
        StringUtils.abbreviate("3%#`MTu", (-2377));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum abbreviation width is 4
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test505()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      Locale locale0 = Locale.GERMANY;
      assertEquals("de", locale0.getLanguage());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("de_DE", locale0.toString());
      assertEquals("DE", locale0.getCountry());
      assertNotNull(locale0);
      
      String string0 = locale0.getDisplayName();
      assertEquals("de", locale0.getLanguage());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("de_DE", locale0.toString());
      assertEquals("DE", locale0.getCountry());
      assertNotNull(string0);
      assertEquals("German (Germany)", string0);
      
      boolean boolean0 = StringUtils.containsIgnoreCase("\n", " ");
      assertFalse(boolean0);
      
      String string1 = StringUtils.leftPad("", (-1));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
      
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      assertEquals("de", locale0.getLanguage());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("de_DE", locale0.toString());
      assertEquals("DE", locale0.getCountry());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertNotNull(set0);
      assertFalse(set0.contains(" "));
      
      String string2 = StringUtils.substringBetween("\n", "\r");
      assertNull(string2);
      
      String string3 = StringUtils.lowerCase(" ");
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      assertEquals(" ", string3);
      
      String string4 = StringUtils.substringBefore("", "LB-`SVqJ5");
      assertFalse(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertNotNull(string4);
      assertEquals("", string4);
      
      String string5 = StringUtils.wrap("H^>WE", 'y');
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertNotNull(string5);
      assertEquals("yH^>WEy", string5);
      
      String string6 = StringUtils.reverse("");
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string0));
      assertTrue(string6.equals((Object)string1));
      assertTrue(string6.equals((Object)string4));
      assertNotNull(string6);
      assertEquals("", string6);
      
      String string7 = StringUtils.wrap("Array element ", 'y');
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string5));
      assertNotNull(string7);
      assertEquals("yArray element y", string7);
  }

  @Test(timeout = 4000)
  public void test506()  throws Throwable  {
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) "object";
      objectArray0[1] = (Object) "object";
      String string0 = StringUtils.overlay("V_Itg]0i", "}CXlvir&O30O}CXlvir&O30O", (-390), (-390));
      assertNotNull(string0);
      assertEquals("}CXlvir&O30O}CXlvir&O30OV_Itg]0i", string0);
      
      String string1 = StringUtils.unwrap("fE,t^ yNxks5nr", "object");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("fE,t^ yNxks5nr", string1);
  }

  @Test(timeout = 4000)
  public void test507()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = '8';
      charArray0[1] = '5';
      charArray0[2] = 'g';
      charArray0[3] = 'N';
      String string0 = StringUtils.join(charArray0, ' ', (-3371), (-3371));
      assertEquals(5, charArray0.length);
      assertNotNull(string0);
      assertArrayEquals(new char[] {'8', '5', 'g', 'N', '\u0000'}, charArray0);
      assertEquals("", string0);
      
      boolean boolean0 = StringUtils.isNumericSpace("");
      assertTrue(boolean0);
      
      String string1 = StringUtils.rightPad("", (-3371));
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
      
      Locale locale0 = Locale.ENGLISH;
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertNotNull(locale0);
      
      int int0 = StringUtils.getFuzzyDistance("", "", locale0);
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test508()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      String[] stringArray0 = StringUtils.split(":\"M%IsA5*[A");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string0 = StringUtils.repeat("kb>K:%lR&M+Fm2*/78.", "Array elDement ", 125);
      assertNotNull(string0);
      
      String string1 = StringUtils.wrap("the character ", '*');
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("*the character *", string1);
      
      String string2 = StringUtils.reverse((String) null);
      assertNull(string2);
      
      boolean boolean0 = StringUtils.isAnyEmpty(charSequenceArray0);
      assertEquals(0, charSequenceArray0.length);
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isAlphanumeric("Array elDement ");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string3 = StringUtils.difference("L}q`(GGXC5axA9kC(", "Locale must not be null");
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      assertEquals("ocale must not be null", string3);
  }

  @Test(timeout = 4000)
  public void test509()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens(" ", "R[_Z", (-1));
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      int int0 = 48;
      int int1 = 403;
      String string0 = StringUtils.substring("'^~=m(LpX@zb)#+t,:", 403);
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = "h";
      int int2 = 65536;
      // Undeclared exception!
      StringUtils.leftPad("\r", 65536);
  }

  @Test(timeout = 4000)
  public void test510()  throws Throwable  {
      String string0 = StringUtils.difference("6w#yEdv|M/NKamq&Rr", "6w#yEdv|M/NKamq&Rr");
      assertNotNull(string0);
      assertEquals("", string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      charSequenceArray0[0] = (CharSequence) "6w#yEdv|M/NKamq&Rr";
      boolean boolean0 = StringUtils.endsWith(charSequenceArray0[0], "6w#yEdv|M/NKamq&Rr");
      assertEquals(3, charSequenceArray0.length);
      assertTrue(boolean0);
      
      String string1 = StringUtils.substringAfterLast("", (-110));
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
  }

  @Test(timeout = 4000)
  public void test511()  throws Throwable  {
      Class<String> class0 = String.class;
      ServiceLoader<String> serviceLoader0 = ServiceLoader.loadInstalled(class0);
      assertEquals("java.util.ServiceLoader[java.lang.String]", serviceLoader0.toString());
      assertNotNull(serviceLoader0);
      
      Spliterator<String> spliterator0 = serviceLoader0.spliterator();
      assertEquals("java.util.ServiceLoader[java.lang.String]", serviceLoader0.toString());
      assertNotNull(spliterator0);
      
      Spliterator<String> spliterator1 = serviceLoader0.spliterator();
      assertEquals("java.util.ServiceLoader[java.lang.String]", serviceLoader0.toString());
      assertFalse(spliterator1.equals((Object)spliterator0));
      assertNotSame(spliterator1, spliterator0);
      assertNotNull(spliterator1);
      
      int int0 = StringUtils.compare("TOed(ag/wB@~}A5~|I", "_*=Ja$UfR0j>r=ee0u");
      assertEquals((-11), int0);
      
      String string0 = StringUtils.substring(" h/", (-3764));
      assertNotNull(string0);
      assertEquals(" h/", string0);
      
      boolean boolean0 = StringUtils.isAlphaSpace(" h/");
      assertFalse(boolean0);
      
      String string1 = StringUtils.difference(" h/", (String) null);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(" h/", string1);
  }

  @Test(timeout = 4000)
  public void test512()  throws Throwable  {
      String[] stringArray0 = StringUtils.split("");
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      int int0 = StringUtils.compareIgnoreCase("", "");
      assertEquals(0, int0);
      
      boolean boolean0 = StringUtils.isAlpha("");
      assertFalse(boolean0);
      
      String string0 = StringUtils.appendIfMissing("", "", stringArray0);
      assertEquals(0, stringArray0.length);
      assertNotNull(string0);
      assertEquals("", string0);
      
      String[] stringArray1 = StringUtils.stripAll(stringArray0, "x&{#0],$RHy");
      assertSame(stringArray0, stringArray1);
      assertSame(stringArray1, stringArray0);
      assertEquals(0, stringArray0.length);
      assertEquals(0, stringArray1.length);
      assertNotNull(stringArray1);
      
      String string1 = StringUtils.reverse("&X3YY%@");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("@%YY3X&", string1);
      
      Vector<Integer> vector0 = new Vector<Integer>();
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.isEmpty());
      assertNotNull(vector0);
      assertFalse(vector0.contains(int0));
      
      Integer integer0 = new Integer(0);
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      boolean boolean1 = vector0.add(integer0);
      assertFalse(vector0.isEmpty());
      assertEquals("[0]", vector0.toString());
      assertEquals(1, vector0.size());
      assertEquals(10, vector0.capacity());
      assertTrue(integer0.equals((Object)int0));
      assertFalse(boolean1 == boolean0);
      assertTrue(vector0.contains(integer0));
      assertTrue(boolean1);
      
      ListIterator<Integer> listIterator0 = vector0.listIterator();
      assertFalse(vector0.isEmpty());
      assertEquals("[0]", vector0.toString());
      assertEquals(1, vector0.size());
      assertEquals(10, vector0.capacity());
      assertTrue(listIterator0.hasNext());
      assertFalse(listIterator0.hasPrevious());
      assertNotNull(listIterator0);
      assertTrue(vector0.contains(integer0));
      
      Integer integer1 = new Integer(0);
      assertTrue(integer1.equals((Object)int0));
      assertTrue(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(0, (int)integer1);
      
      boolean boolean2 = vector0.add(integer1);
      assertFalse(vector0.isEmpty());
      assertEquals(2, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals("[0, 0]", vector0.toString());
      assertTrue(integer1.equals((Object)int0));
      assertTrue(integer1.equals((Object)integer0));
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertTrue(vector0.contains(integer0));
      assertTrue(boolean2);
      
      boolean boolean3 = vector0.add(integer1);
      assertEquals("[0, 0, 0]", vector0.toString());
      assertFalse(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals(3, vector0.size());
      assertTrue(integer1.equals((Object)int0));
      assertTrue(integer1.equals((Object)integer0));
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertTrue(vector0.contains(integer0));
      assertTrue(boolean3);
      
      Spliterator<Integer> spliterator0 = vector0.spliterator();
      assertEquals("[0, 0, 0]", vector0.toString());
      assertFalse(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals(3, vector0.size());
      assertNotNull(spliterator0);
      assertTrue(vector0.contains(integer0));
      
      String string2 = StringUtils.removeAll("Bj8vv#:)=+@CQjPr\"6f", "@%YY3X&");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("Bj8vv#:)=+@CQjPr\"6f", string2);
      
      String string3 = StringUtils.stripStart("yR1MavwCN", "&X3YY%@");
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      assertEquals("yR1MavwCN", string3);
      
      String[] stringArray2 = StringUtils.split("e*j)gaK");
      assertFalse(stringArray2.equals((Object)stringArray1));
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertNotSame(stringArray2, stringArray1);
      assertNotSame(stringArray2, stringArray0);
      assertEquals(1, stringArray2.length);
      assertNotNull(stringArray2);
      
      String string4 = StringUtils.leftPad("HiwSo>}72+:n`>M8^_<T`vv.Y_", 1582, "HiwSo>}72+:n`>M8^_<T`vv.Y_");
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertNotNull(string4);
      
      String string5 = StringUtils.wrap("Bj8vv#:)=+@CQjPr\"6f", 'r');
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertNotNull(string5);
      assertEquals("rBj8vv#:)=+@CQjPr\"6fr", string5);
      
      String string6 = StringUtils.reverse("=NmxlWo}DTgSX'");
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string2));
      assertNotNull(string6);
      assertEquals("'XSgTD}oWlxmN=", string6);
      
      boolean boolean4 = StringUtils.isAnyEmpty(stringArray0);
      assertFalse(stringArray0.equals((Object)stringArray2));
      assertTrue(boolean4 == boolean0);
      assertFalse(boolean4 == boolean1);
      assertFalse(boolean4 == boolean2);
      assertFalse(boolean4 == boolean3);
      assertNotSame(stringArray0, stringArray2);
      assertSame(stringArray0, stringArray1);
      assertEquals(0, stringArray0.length);
      assertFalse(boolean4);
      
      boolean boolean5 = StringUtils.isAlphanumeric("");
      assertTrue(boolean5 == boolean0);
      assertTrue(boolean5 == boolean4);
      assertFalse(boolean5 == boolean1);
      assertFalse(boolean5 == boolean3);
      assertFalse(boolean5 == boolean2);
      assertFalse(boolean5);
      
      String string7 = StringUtils.difference("(|N", "p{InCombiningDiacriticalMarks}+");
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string5));
      assertNotNull(string7);
      assertEquals("p{InCombiningDiacriticalMarks}+", string7);
  }

  @Test(timeout = 4000)
  public void test513()  throws Throwable  {
      String string0 = StringUtils.stripStart("maxWith cannot be negative", "maxWith cannot be negative");
      assertNotNull(string0);
      assertEquals("", string0);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "", (CharSequence) "maxWith cannot be negative");
      assertEquals(26, int0);
      
      boolean boolean0 = StringUtils.equalsIgnoreCase("", "");
      assertTrue(boolean0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[9];
      CharSequence charSequence0 = StringUtils.defaultIfBlank((CharSequence) "", (CharSequence) ", Length: 0");
      assertFalse(charSequence0.equals((Object)string0));
      assertNotNull(charSequence0);
      assertEquals(", Length: 0", charSequence0);
      
      charSequenceArray0[0] = (CharSequence) ", Length: 0";
      charSequenceArray0[1] = (CharSequence) "maxWith cannot be negative";
      charSequenceArray0[2] = (CharSequence) "maxWith cannot be negative";
      charSequenceArray0[3] = (CharSequence) ", Length: 0";
      charSequenceArray0[4] = (CharSequence) "";
      charSequenceArray0[5] = (CharSequence) ", Length: 0";
      charSequenceArray0[6] = (CharSequence) ", Length: 0";
      CharSequence[] charSequenceArray1 = new CharSequence[2];
      assertFalse(charSequenceArray1.equals((Object)charSequenceArray0));
      
      charSequenceArray1[0] = (CharSequence) ", Length: 0";
      charSequenceArray1[1] = (CharSequence) "";
      String string1 = StringUtils.reverse(", Length: 0");
      assertFalse(string1.equals((Object)charSequence0));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("0 :htgneL ,", string1);
      
      boolean boolean1 = StringUtils.isAnyEmpty(charSequenceArray0);
      assertTrue(boolean1 == boolean0);
      assertFalse(charSequenceArray0.equals((Object)charSequenceArray1));
      assertNotSame(charSequenceArray0, charSequenceArray1);
      assertEquals(9, charSequenceArray0.length);
      assertTrue(boolean1);
      
      boolean boolean2 = StringUtils.isAlphanumeric(", Length: 0");
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
      
      String string2 = StringUtils.difference("maxWith cannot be negative", "p{InCombiningDiacriticalMarks}+");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)charSequence0));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("p{InCombiningDiacriticalMarks}+", string2);
  }

  @Test(timeout = 4000)
  public void test514()  throws Throwable  {
      String string0 = StringUtils.wrapIfMissing("%d=7wr7,/{8", '`');
      assertNotNull(string0);
      assertEquals("`%d=7wr7,/{8`", string0);
      
      String string1 = "rp$f";
      String string2 = StringUtils.rightPad("rp$f", (-3760));
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("rp$f", string2);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "rp$f", (CharSequence) "`%d=7wr7,/{8`");
      assertEquals((-1), int0);
      
      boolean boolean0 = StringUtils.isWhitespace("rp$f");
      assertFalse(boolean0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[7];
      charSequenceArray0[0] = (CharSequence) "rp$f";
      charSequenceArray0[1] = (CharSequence) "`%d=7wr7,/{8`";
      charSequenceArray0[3] = (CharSequence) "%d=7wr7,/{8";
      char char0 = '6';
      String string3 = StringUtils.rightPad("Locale must not be null", (-1), '6');
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      assertEquals("Locale must not be null", string3);
      
      String string4 = StringUtils.overlay("%d=7wr7,/{8", "%d=7wr7,/{8", '6', (-3760));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertNotNull(string4);
      assertEquals("%d=7wr7,/{8", string4);
      
      // Undeclared exception!
      try { 
        StringUtils.join((Object[]) charSequenceArray0, '3', (-3760), 98);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -3760
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test515()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = '8';
      String[] stringArray0 = StringUtils.split("object", "9Y`]eiW^{x@Rl", 3);
      assertEquals(2, stringArray0.length);
      assertNotNull(stringArray0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[0] = (CharSequence) "9Y`]eiW^{x@Rl";
      charSequenceArray0[1] = (CharSequence) "9Y`]eiW^{x@Rl";
      String string0 = StringUtils.prependIfMissingIgnoreCase("-5y1iX{EX`M@KK#[b", "-5y1iX{EX`M@KK#[b", charSequenceArray0);
      assertEquals(2, charSequenceArray0.length);
      assertNotNull(string0);
      assertEquals("-5y1iX{EX`M@KK#[b", string0);
      
      String string1 = StringUtils.lowerCase("-5y1iX{EX`M@KK#[b");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("-5y1ix{ex`m@kk#[b", string1);
      
      String[] stringArray1 = StringUtils.splitByWholeSeparator("-5y1ix{ex`m@kk#[b", "x[BEyAx", 3);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray1, stringArray0);
      assertEquals(1, stringArray1.length);
      assertNotNull(stringArray1);
      
      int[] intArray0 = new int[8];
      intArray0[0] = (int) '8';
      intArray0[1] = 3;
      intArray0[2] = 3;
      intArray0[3] = 3;
      intArray0[4] = 3;
      intArray0[5] = (int) '8';
      intArray0[6] = (int) '8';
      intArray0[7] = (int) '8';
      String string2 = StringUtils.join(intArray0, '5');
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals(8, intArray0.length);
      assertNotNull(string2);
      assertArrayEquals(new int[] {56, 3, 3, 3, 3, 56, 56, 56}, intArray0);
      assertEquals("5653535353556556556", string2);
      
      int int0 = StringUtils.compare("'Sd6K_;M-=", "-5y1iX{EX`M@KK#[b", false);
      assertEquals((-6), int0);
      
      String string3 = StringUtils.rightPad("object", (-733), '5');
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      assertEquals("object", string3);
      
      String string4 = StringUtils.substring("XZc^`#{MoTqK.5MV@uN", (-2135));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertNotNull(string4);
      assertEquals("XZc^`#{MoTqK.5MV@uN", string4);
      
      String string5 = StringUtils.join((Object[]) stringArray0, '/', 56, 56);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertNotSame(stringArray0, stringArray1);
      assertEquals(2, stringArray0.length);
      assertNotNull(string5);
      assertEquals("", string5);
      
      String string6 = StringUtils.overlay("~D'nSV", (String) null, 3, 5);
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string1));
      assertNotNull(string6);
      assertEquals("~D'V", string6);
  }

  @Test(timeout = 4000)
  public void test516()  throws Throwable  {
      String string0 = StringUtils.stripAccents("");
      assertNotNull(string0);
      assertEquals("", string0);
      
      boolean boolean0 = StringUtils.isNotBlank("");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isAllEmpty((CharSequence[]) null);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String string1 = StringUtils.removeEnd("Supplied value must be a valid byte literal between -128 and 127: [", "");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("Supplied value must be a valid byte literal between -128 and 127: [", string1);
      
      String string2 = StringUtils.lowerCase("...");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("...", string2);
      
      String string3 = StringUtils.abbreviate("y !zX", "", 345, 345);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      assertEquals("y !zX", string3);
      
      Locale locale0 = new Locale("Supplied value must be a valid byte literal between -128 and 127: [", "...", "y !zX");
      assertEquals("y !zX", locale0.getVariant());
      assertEquals("supplied value must be a valid byte literal between -128 and 127: [", locale0.getLanguage());
      assertEquals("supplied value must be a valid byte literal between -128 and 127: [_..._y !zX", locale0.toString());
      assertEquals("...", locale0.getCountry());
      assertNotNull(locale0);
      
      Locale locale1 = Locale.UK;
      assertEquals("en_GB", locale1.toString());
      assertEquals("en", locale1.getLanguage());
      assertEquals("eng", locale1.getISO3Language());
      assertEquals("GB", locale1.getCountry());
      assertEquals("GBR", locale1.getISO3Country());
      assertEquals("", locale1.getVariant());
      assertFalse(locale1.equals((Object)locale0));
      assertNotSame(locale1, locale0);
      assertNotNull(locale1);
      
      Locale locale2 = Locale.TAIWAN;
      assertEquals("TWN", locale2.getISO3Country());
      assertEquals("", locale2.getVariant());
      assertEquals("zh", locale2.getLanguage());
      assertEquals("zho", locale2.getISO3Language());
      assertEquals("zh_TW", locale2.toString());
      assertEquals("TW", locale2.getCountry());
      assertFalse(locale2.equals((Object)locale1));
      assertFalse(locale2.equals((Object)locale0));
      assertNotSame(locale2, locale1);
      assertNotSame(locale2, locale0);
      assertNotNull(locale2);
      
      String string4 = locale1.getDisplayVariant(locale2);
      assertEquals("en_GB", locale1.toString());
      assertEquals("en", locale1.getLanguage());
      assertEquals("eng", locale1.getISO3Language());
      assertEquals("GB", locale1.getCountry());
      assertEquals("GBR", locale1.getISO3Country());
      assertEquals("", locale1.getVariant());
      assertEquals("TWN", locale2.getISO3Country());
      assertEquals("", locale2.getVariant());
      assertEquals("zh", locale2.getLanguage());
      assertEquals("zho", locale2.getISO3Language());
      assertEquals("zh_TW", locale2.toString());
      assertEquals("TW", locale2.getCountry());
      assertFalse(locale1.equals((Object)locale0));
      assertFalse(locale1.equals((Object)locale2));
      assertFalse(locale2.equals((Object)locale1));
      assertFalse(locale2.equals((Object)locale0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertNotSame(locale1, locale0);
      assertNotSame(locale1, locale2);
      assertNotSame(locale2, locale1);
      assertNotSame(locale2, locale0);
      assertNotNull(string4);
      assertEquals("", string4);
      
      boolean boolean2 = locale2.hasExtensions();
      assertEquals("TWN", locale2.getISO3Country());
      assertEquals("", locale2.getVariant());
      assertEquals("zh", locale2.getLanguage());
      assertEquals("zho", locale2.getISO3Language());
      assertEquals("zh_TW", locale2.toString());
      assertEquals("TW", locale2.getCountry());
      assertFalse(locale2.equals((Object)locale1));
      assertFalse(locale2.equals((Object)locale0));
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertNotSame(locale2, locale1);
      assertNotSame(locale2, locale0);
      assertFalse(boolean2);
      
      String string5 = locale1.getDisplayCountry(locale0);
      assertEquals("y !zX", locale0.getVariant());
      assertEquals("supplied value must be a valid byte literal between -128 and 127: [", locale0.getLanguage());
      assertEquals("supplied value must be a valid byte literal between -128 and 127: [_..._y !zX", locale0.toString());
      assertEquals("...", locale0.getCountry());
      assertEquals("en_GB", locale1.toString());
      assertEquals("en", locale1.getLanguage());
      assertEquals("eng", locale1.getISO3Language());
      assertEquals("GB", locale1.getCountry());
      assertEquals("GBR", locale1.getISO3Country());
      assertEquals("", locale1.getVariant());
      assertFalse(locale0.equals((Object)locale2));
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(locale1.equals((Object)locale0));
      assertFalse(locale1.equals((Object)locale2));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertNotSame(locale0, locale2);
      assertNotSame(locale0, locale1);
      assertNotSame(locale1, locale0);
      assertNotSame(locale1, locale2);
      assertNotNull(string5);
      assertEquals("United Kingdom", string5);
      
      String string6 = locale0.getDisplayLanguage();
      assertEquals("y !zX", locale0.getVariant());
      assertEquals("supplied value must be a valid byte literal between -128 and 127: [", locale0.getLanguage());
      assertEquals("supplied value must be a valid byte literal between -128 and 127: [_..._y !zX", locale0.toString());
      assertEquals("...", locale0.getCountry());
      assertFalse(locale0.equals((Object)locale2));
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string0));
      assertNotSame(locale0, locale2);
      assertNotSame(locale0, locale1);
      assertNotNull(string6);
      assertEquals("supplied value must be a valid byte literal between -128 and 127: [", string6);
      
      Locale locale3 = Locale.PRC;
      assertEquals("CN", locale3.getCountry());
      assertEquals("zh", locale3.getLanguage());
      assertEquals("zh_CN", locale3.toString());
      assertEquals("zho", locale3.getISO3Language());
      assertEquals("CHN", locale3.getISO3Country());
      assertEquals("", locale3.getVariant());
      assertFalse(locale3.equals((Object)locale1));
      assertFalse(locale3.equals((Object)locale2));
      assertFalse(locale3.equals((Object)locale0));
      assertNotSame(locale3, locale1);
      assertNotSame(locale3, locale2);
      assertNotSame(locale3, locale0);
      assertNotNull(locale3);
      
      String string7 = locale3.getDisplayLanguage();
      assertEquals("CN", locale3.getCountry());
      assertEquals("zh", locale3.getLanguage());
      assertEquals("zh_CN", locale3.toString());
      assertEquals("zho", locale3.getISO3Language());
      assertEquals("CHN", locale3.getISO3Country());
      assertEquals("", locale3.getVariant());
      assertFalse(locale3.equals((Object)locale1));
      assertFalse(locale3.equals((Object)locale2));
      assertFalse(locale3.equals((Object)locale0));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string4));
      assertNotSame(locale3, locale1);
      assertNotSame(locale3, locale2);
      assertNotSame(locale3, locale0);
      assertNotNull(string7);
      assertEquals("Chinese", string7);
      
      Locale locale4 = Locale.forLanguageTag("Minimum abbreviation width with offset is %d");
      assertEquals("", locale4.getISO3Country());
      assertEquals("", locale4.getLanguage());
      assertEquals("", locale4.getISO3Language());
      assertEquals("", locale4.getCountry());
      assertEquals("", locale4.getVariant());
      assertEquals("", locale4.toString());
      assertFalse(locale4.equals((Object)locale3));
      assertFalse(locale4.equals((Object)locale2));
      assertFalse(locale4.equals((Object)locale1));
      assertFalse(locale4.equals((Object)locale0));
      assertNotSame(locale4, locale3);
      assertNotSame(locale4, locale2);
      assertNotSame(locale4, locale1);
      assertNotSame(locale4, locale0);
      assertNotNull(locale4);
      
      int int0 = StringUtils.getFuzzyDistance("/>hhEc", "United Kingdom", locale0);
      assertEquals("y !zX", locale0.getVariant());
      assertEquals("supplied value must be a valid byte literal between -128 and 127: [", locale0.getLanguage());
      assertEquals("supplied value must be a valid byte literal between -128 and 127: [_..._y !zX", locale0.toString());
      assertEquals("...", locale0.getCountry());
      assertFalse(locale0.equals((Object)locale3));
      assertFalse(locale0.equals((Object)locale2));
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(locale0.equals((Object)locale4));
      assertNotSame(locale0, locale3);
      assertNotSame(locale0, locale2);
      assertNotSame(locale0, locale1);
      assertNotSame(locale0, locale4);
      assertEquals(0, int0);
      
      String string8 = StringUtils.strip("yl:o", "");
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string5));
      assertNotNull(string8);
      assertEquals("yl:o", string8);
      
      String string9 = StringUtils.replacePattern((String) null, "aX-1.0x-412.24x1.0x-2592.4207x-2730.193aX-1.0x-412.24x1.0x-2592.4207x-2730.193aX-1.0x-412.24x1.0x-2592.4207x-2730.193-1.0x-412.24x1.0x-2592.4207x-2730.193", "B");
      assertNull(string9);
      
      boolean boolean3 = StringUtils.isNoneBlank((CharSequence[]) null);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3);
      
      String string10 = StringUtils.prependIfMissingIgnoreCase("g*OfEMez+ a$'c=x", "Supplied value must be a valid byte literal between -128 and 127: [", (CharSequence[]) null);
      assertFalse(string10.equals((Object)string7));
      assertFalse(string10.equals((Object)string6));
      assertFalse(string10.equals((Object)string5));
      assertFalse(string10.equals((Object)string0));
      assertFalse(string10.equals((Object)string3));
      assertFalse(string10.equals((Object)string1));
      assertFalse(string10.equals((Object)string4));
      assertFalse(string10.equals((Object)string2));
      assertFalse(string10.equals((Object)string8));
      assertNotNull(string10);
      assertEquals("Supplied value must be a valid byte literal between -128 and 127: [g*OfEMez+ a$'c=x", string10);
      
      String string11 = StringUtils.leftPad("Minimum abbreviation width with offset is %d", 345, 'l');
      assertFalse(string11.equals((Object)string0));
      assertFalse(string11.equals((Object)string1));
      assertFalse(string11.equals((Object)string4));
      assertFalse(string11.equals((Object)string3));
      assertFalse(string11.equals((Object)string6));
      assertFalse(string11.equals((Object)string10));
      assertFalse(string11.equals((Object)string7));
      assertFalse(string11.equals((Object)string8));
      assertFalse(string11.equals((Object)string2));
      assertFalse(string11.equals((Object)string5));
      assertNotNull(string11);
      assertEquals("lllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllMinimum abbreviation width with offset is %d", string11);
  }

  @Test(timeout = 4000)
  public void test517()  throws Throwable  {
      String string0 = StringUtils.leftPad("a*Ei5QXJx@]Y", (-301), '+');
      assertNotNull(string0);
      assertEquals("a*Ei5QXJx@]Y", string0);
      
      String string1 = StringUtils.capitalize("+g_Vn{H=4.3l(?#");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("+g_Vn{H=4.3l(?#", string1);
      
      String string2 = StringUtils.substringAfterLast("a*Ei5QXJx@]Y", "Aborting to protect against StackOverflowError - output of one loop is the input of another");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("", string2);
      
      String string3 = StringUtils.join((char[]) null, '+');
      assertNull(string3);
      
      // Undeclared exception!
      try { 
        StringUtils.removeFirst("Aborting to protect against StackOverflowError - output of one loop is the input of another", "-5y1iX{EX`M@KK#[b9");
        fail("Expecting exception: PatternSyntaxException");
      
      } catch(PatternSyntaxException e) {
         //
         // Illegal repetition near index 5
         // -5y1iX{EX`M@KK#[b9
         //      ^
         //
         verifyException("java.util.regex.Pattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test518()  throws Throwable  {
      String string0 = StringUtils.substringAfterLast("Supplied value must be a valid byte literal between -128 and 127: [", "Supplied value must be a valid byte literal between -128 and 127: [");
      assertNotNull(string0);
      assertEquals("", string0);
      
      char[] charArray0 = new char[3];
      charArray0[0] = ')';
      charArray0[1] = 'a';
      charArray0[0] = '$';
      boolean boolean0 = StringUtils.containsAny((CharSequence) "", charArray0);
      assertEquals(3, charArray0.length);
      assertArrayEquals(new char[] {'$', 'a', '\u0000'}, charArray0);
      assertFalse(boolean0);
      
      String string1 = StringUtils.deleteWhitespace("");
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
      
      String string2 = StringUtils.stripAccents("9Bf;oQZFH\"2RFO");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("9Bf;oQZFH\"2RFO", string2);
      
      String string3 = StringUtils.stripToNull("Supplied value must be a valid byte literal between -128 and 127: [");
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      assertEquals("Supplied value must be a valid byte literal between -128 and 127: [", string3);
      
      boolean boolean1 = StringUtils.contains((CharSequence) "9Bf;oQZFH\"2RFO", (CharSequence) "Supplied value must be a valid byte literal between -128 and 127: [");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      int[] intArray0 = StringUtils.toCodePoints("");
      assertEquals(0, intArray0.length);
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
  }

  @Test(timeout = 4000)
  public void test519()  throws Throwable  {
      float[] floatArray0 = new float[5];
      floatArray0[0] = (-1.0F);
      String string0 = StringUtils.deleteWhitespace("g{J.B6[Bmhg<fnr;K|OqmY83QIT<Ym");
      assertNotNull(string0);
      assertEquals("g{J.B6[Bmhg<fnr;K|OqmY83QIT<Ym", string0);
      
      String string1 = StringUtils.stripAccents("\n");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("\n", string1);
      
      String string2 = StringUtils.stripAccents("\n");
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("\n", string2);
      
      boolean boolean0 = StringUtils.contains((CharSequence) "g{J.B6[Bmhg<fnr;K|OqmY83QIT<Ym", (CharSequence) "\n");
      assertFalse(boolean0);
      
      int[] intArray0 = StringUtils.toCodePoints("g{J.B6[Bmhg<fnr;K|OqmY83QIT<Ym");
      assertEquals(30, intArray0.length);
      assertNotNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test520()  throws Throwable  {
      String string0 = StringUtils.repeat('Q', (int) 'Q');
      assertNotNull(string0);
      assertEquals("QQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQ", string0);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "QQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQ", 0, 0);
      assertEquals((-1), int0);
      
      String string1 = StringUtils.leftPad("QQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQ", (-1), '#');
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("QQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQ", string1);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens((String) null, 'Q');
      assertNull(stringArray0);
      
      String string2 = StringUtils.rightPad("QQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQ", 0, "QQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQ");
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("QQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQ", string2);
      
      String string3 = StringUtils.join((Object[]) null, "Threshold must not be negative");
      assertNull(string3);
      
      boolean boolean0 = StringUtils.isAllLowerCase("QQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQ");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isAlphanumericSpace((CharSequence) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string4 = StringUtils.defaultIfEmpty("OMw>WC$>`m7lgA0.", "eg+7:eQ");
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertNotNull(string4);
      assertEquals("OMw>WC$>`m7lgA0.", string4);
      
      boolean boolean2 = StringUtils.isMixedCase((CharSequence) null);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      int[] intArray0 = StringUtils.toCodePoints("OMw>WC$>`m7lgA0.");
      assertEquals(17, intArray0.length);
      assertNotNull(intArray0);
      
      char[] charArray0 = new char[5];
      charArray0[0] = '#';
      charArray0[1] = '>';
      charArray0[2] = 'Q';
      charArray0[3] = '#';
      charArray0[4] = 'Q';
      String string5 = StringUtils.join(charArray0, '4');
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertEquals(5, charArray0.length);
      assertNotNull(string5);
      assertArrayEquals(new char[] {'#', '>', 'Q', '#', 'Q'}, charArray0);
      assertEquals("#4>4Q4#4Q", string5);
  }

  @Test(timeout = 4000)
  public void test521()  throws Throwable  {
      String string0 = StringUtils.substringAfter("The Array must not be null", "}");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.removeStartIgnoreCase("The Array must not be null", "");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("The Array must not be null", string1);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "The Array must not be null", 100, 100);
      assertEquals((-1), int0);
      
      String string2 = StringUtils.upperCase("Minimum abbreviation width with offset is %d");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("MINIMUM ABBREVIATION WIDTH WITH OFFSET IS %D", string2);
      
      int[] intArray0 = new int[4];
      intArray0[0] = (-1);
      intArray0[1] = (-1);
      intArray0[2] = 100;
      intArray0[3] = (-1);
      String string3 = StringUtils.join(intArray0, 'z', 102, 0);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals(4, intArray0.length);
      assertNotNull(string3);
      assertArrayEquals(new int[] {(-1), (-1), 100, (-1)}, intArray0);
      assertEquals("", string3);
      
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      PriorityQueue<String> priorityQueue0 = new PriorityQueue<String>(comparator0);
      assertEquals(0, priorityQueue0.size());
      assertNotNull(priorityQueue0);
      assertFalse(priorityQueue0.contains(string2));
      
      String string4 = StringUtils.join((Iterable<?>) priorityQueue0, "");
      assertEquals(0, priorityQueue0.size());
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertNotNull(string4);
      assertFalse(priorityQueue0.contains("The Array must not be null"));
      assertEquals("", string4);
  }

  @Test(timeout = 4000)
  public void test522()  throws Throwable  {
      String[] stringArray0 = StringUtils.split("object", "9Y`]eiW^{x@Rl", 3);
      assertEquals(2, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string0 = StringUtils.prependIfMissingIgnoreCase("-5y1iX{EX`M@KK#[b", "-5y1iX{EX`M@KK#[b", stringArray0);
      assertEquals(2, stringArray0.length);
      assertNotNull(string0);
      assertEquals("-5y1iX{EX`M@KK#[b", string0);
      
      String string1 = StringUtils.lowerCase("-5y1iX{EX`M@KK#[b");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("-5y1ix{ex`m@kk#[b", string1);
      
      String[] stringArray1 = StringUtils.splitByWholeSeparator("-5y1ix{ex`m@kk#[b", "x[BEyAx", 3);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray1, stringArray0);
      assertEquals(1, stringArray1.length);
      assertNotNull(stringArray1);
      
      int[] intArray0 = new int[8];
      intArray0[1] = 3;
      intArray0[2] = 3;
      intArray0[3] = 3;
      String string2 = StringUtils.join((long[]) null, 'J');
      assertNull(string2);
      
      String string3 = StringUtils.abbreviateMiddle("Invalid locale format: ", "uZuli&V`K", 3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      assertEquals("Invalid locale format: ", string3);
      
      boolean boolean0 = StringUtils.equalsAny("Invalid locale format: ", stringArray0);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertNotSame(stringArray0, stringArray1);
      assertEquals(2, stringArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test523()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = 'Q';
      long[] longArray0 = new long[1];
      String string0 = StringUtils.join(longArray0, 'x');
      assertEquals(1, longArray0.length);
      assertNotNull(string0);
      assertArrayEquals(new long[] {0L}, longArray0);
      assertEquals("0", string0);
      
      String[] stringArray0 = StringUtils.split("0", "9", 0);
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string1 = StringUtils.defaultIfBlank("9", "F?Sh=");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("9", string1);
  }

  @Test(timeout = 4000)
  public void test524()  throws Throwable  {
      String string0 = StringUtils.abbreviate("x[BEyAx", 5);
      assertNotNull(string0);
      assertEquals("x[...", string0);
      
      long[] longArray0 = new long[0];
      String string1 = StringUtils.join(longArray0, 'o', 5, 5);
      assertFalse(string1.equals((Object)string0));
      assertEquals(0, longArray0.length);
      assertNotNull(string1);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals("", string1);
  }

  @Test(timeout = 4000)
  public void test525()  throws Throwable  {
      String[] stringArray0 = StringUtils.split("object", "9Y`]eiW^{x@Rl", 3);
      assertEquals(2, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string0 = StringUtils.abbreviate("object", "object", 77);
      assertNotNull(string0);
      assertEquals("object", string0);
      
      String string1 = StringUtils.deleteWhitespace("H'A(");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("H'A(", string1);
      
      boolean boolean0 = StringUtils.equalsAny("9Y`]eiW^{x@Rl", stringArray0);
      assertEquals(2, stringArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test526()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 670.2402;
      doubleArray0[1] = 670.2402;
      doubleArray0[2] = (-1587.19729612);
      doubleArray0[4] = 670.2402;
      String string0 = StringUtils.chop("...");
      assertNotNull(string0);
      assertEquals("..", string0);
      
      String string1 = StringUtils.replaceOnceIgnoreCase("...", "...", "+H1xjs`[f?M");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("+H1xjs`[f?M", string1);
      
      String string2 = StringUtils.defaultIfEmpty("}79P(*uBsoK-PqJvK", "Minimum abbreviation width with offset is %d");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("}79P(*uBsoK-PqJvK", string2);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-16);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)26;
      byteArray0[3] = (byte)16;
      String string3 = StringUtils.removeEnd("Array element ", "l{`");
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      assertEquals("Array element ", string3);
      
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      charSequenceArray0[0] = (CharSequence) "..";
      charSequenceArray0[1] = (CharSequence) "+H1xjs`[f?M";
      charSequenceArray0[2] = (CharSequence) "Minimum abbreviation width with offset is %d";
      charSequenceArray0[3] = (CharSequence) "Array element ";
      charSequenceArray0[4] = (CharSequence) "}79P(*uBsoK-PqJvK";
      String string4 = StringUtils.appendIfMissing("Array element ", "+H1xjs`[f?M", charSequenceArray0);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertEquals(5, charSequenceArray0.length);
      assertNotNull(string4);
      assertEquals("Array element ", string4);
      
      double double0 = StringUtils.getJaroWinklerDistance("}79P(*uBsoK-PqJvK", "Array element ");
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test527()  throws Throwable  {
      String string0 = StringUtils.LF;
      assertNotNull(string0);
      assertEquals("\n", string0);
      
      String string1 = StringUtils.removeEnd("\n", "g{J.B6[Bmhg<");
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("\n", string1);
      
      String string2 = StringUtils.center("clonecloneThreshold must not be negative", 12);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("clonecloneThreshold must not be negative", string2);
      
      int int0 = StringUtils.indexOfDifference((CharSequence) "\n", (CharSequence) "clonecloneThreshold must not be negative");
      assertEquals(0, int0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      String string3 = StringUtils.leftPad("clonecloneThreshold must not be negative", 122, "org.apache.commons.lang3.Charsets");
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      assertEquals("org.apache.commons.lang3.Charsetsorg.apache.commons.lang3.Charsetsorg.apache.commoclonecloneThreshold must not be negative", string3);
      
      int int1 = StringUtils.indexOf((CharSequence) "clonecloneThreshold must not be negative", 12);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      double double0 = StringUtils.getJaroWinklerDistance("org.apache.commons.lang3.Charsetsorg.apache.commons.lang3.Charsetsorg.apache.commoclonecloneThreshold must not be negative", "clonecloneThreshold must not be negative");
      assertEquals(0.5, double0, 0.01);
      
      String string4 = StringUtils.substringBetween("8", "org.apache.commons.lang3.Charsetsorg.apache.commons.lang3.Charsetsorg.apache.commoclonecloneThreshold must not be negative");
      assertNull(string4);
      
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      charSequenceArray0[0] = (CharSequence) "g{J.B6[Bmhg<";
      charSequenceArray0[1] = (CharSequence) "org.apache.commons.lang3.Charsets";
      charSequenceArray0[2] = (CharSequence) "g{J.B6[Bmhg<";
      charSequenceArray0[3] = (CharSequence) "clonecloneThreshold must not be negative";
      charSequenceArray0[4] = (CharSequence) "\n";
      boolean boolean0 = StringUtils.endsWithAny("org.apache.commons.lang3.Charsetsorg.apache.commons.lang3.Charsetsorg.apache.commoclonecloneThreshold must not be negative", charSequenceArray0);
      assertEquals(5, charSequenceArray0.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test528()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = '$';
      charArray0[1] = 'Q';
      charArray0[2] = '$';
      charArray0[3] = '7';
      charArray0[4] = '$';
      boolean boolean0 = StringUtils.containsAny((CharSequence) "kb>K:%lR&M+Fm2*/78", charArray0);
      assertEquals(5, charArray0.length);
      assertArrayEquals(new char[] {'$', 'Q', '$', '7', '$'}, charArray0);
      assertTrue(boolean0);
      
      String string0 = StringUtils.deleteWhitespace("kb>K:%lR&M+Fm2*/78");
      assertNotNull(string0);
      assertEquals("kb>K:%lR&M+Fm2*/78", string0);
      
      String string1 = StringUtils.stripAccents("gXYl'|2.y");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("gXYl'|2.y", string1);
      
      Class<Object> class0 = Object.class;
      ServiceLoader<Object> serviceLoader0 = ServiceLoader.loadInstalled(class0);
      assertEquals("java.util.ServiceLoader[java.lang.Object]", serviceLoader0.toString());
      assertNotNull(serviceLoader0);
      
      String string2 = StringUtils.removeEnd("\r", ".");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("\r", string2);
      
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      charSequenceArray0[0] = (CharSequence) "The character ";
      String string3 = StringUtils.appendIfMissing("gXYl'|2.y", "\r", charSequenceArray0);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals(1, charSequenceArray0.length);
      assertNotNull(string3);
      assertEquals("gXYl'|2.y\r", string3);
      
      double double0 = StringUtils.getJaroWinklerDistance(charSequenceArray0[0], "kb>K:%lR&M+Fm2*/78");
      assertEquals(1, charSequenceArray0.length);
      assertEquals(0.0, double0, 0.01);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparator("N@>", "\r");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test529()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 670.2402;
      doubleArray0[1] = (-2084.81847130194);
      doubleArray0[2] = (-1587.19729612);
      doubleArray0[3] = 1.5;
      doubleArray0[4] = 0.0;
      String string0 = StringUtils.join(doubleArray0, '}');
      assertEquals(5, doubleArray0.length);
      assertNotNull(string0);
      assertArrayEquals(new double[] {670.2402, (-2084.81847130194), (-1587.19729612), 1.5, 0.0}, doubleArray0, 0.01);
      assertEquals("670.2402}-2084.81847130194}-1587.19729612}1.5}0.0", string0);
      
      String string1 = StringUtils.chop("...");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("..", string1);
      
      String string2 = StringUtils.replaceOnceIgnoreCase("...", "...", "+H1xjs`[f?M");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("+H1xjs`[f?M", string2);
      
      String string3 = StringUtils.defaultIfEmpty("}79P(*uBsoK-PqJvK", "Minimum abbreviation width with offset is %d");
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      assertEquals("}79P(*uBsoK-PqJvK", string3);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-16);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)26;
      byteArray0[3] = (byte)16;
      String string4 = StringUtils.join(byteArray0, '}', (int) (byte)16, (int) (byte)16);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertEquals(4, byteArray0.length);
      assertNotNull(string4);
      assertArrayEquals(new byte[] {(byte) (-16), (byte)0, (byte)26, (byte)16}, byteArray0);
      assertEquals("", string4);
      
      int int0 = StringUtils.indexOf((CharSequence) "}79P(*uBsoK-PqJvK", (CharSequence) "670.2402}-2084.81847130194}-1587.19729612}1.5}0.0");
      assertEquals((-1), int0);
      
      String[] stringArray0 = StringUtils.split("670.2402}-2084.81847130194}-1587.19729612}1.5}0.0", '');
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string5 = StringUtils.removeEnd("Array element ", "l{`");
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertNotNull(string5);
      assertEquals("Array element ", string5);
      
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      charSequenceArray0[0] = (CharSequence) "Array element ";
      charSequenceArray0[1] = (CharSequence) "Array element ";
      charSequenceArray0[2] = (CharSequence) "Minimum abbreviation width with offset is %d";
      charSequenceArray0[3] = (CharSequence) "Array element ";
      charSequenceArray0[4] = (CharSequence) "Minimum abbreviation width with offset is %d";
      String string6 = StringUtils.appendIfMissing("Array element ", "+H1xjs`[f?M", charSequenceArray0);
      assertTrue(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string1));
      assertEquals(5, charSequenceArray0.length);
      assertNotNull(string6);
      assertEquals("Array element ", string6);
      
      double double0 = StringUtils.getJaroWinklerDistance("}79P(*uBsoK-PqJvK", "Array element ");
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test530()  throws Throwable  {
      String string0 = StringUtils.substring("}L~.", (-3733));
      assertNotNull(string0);
      assertEquals("}L~.", string0);
      
      String string1 = StringUtils.wrapIfMissing("}L~.", '3');
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("3}L~.3", string1);
      
      String string2 = StringUtils.join((boolean[]) null, '3', 9, 32);
      assertNull(string2);
      
      String string3 = StringUtils.removeEndIgnoreCase("}L~.", "org.apache.commons.lang3.LocaleUtils");
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string0));
      assertNotNull(string3);
      assertEquals("}L~.", string3);
      
      Locale locale0 = Locale.US;
      assertEquals("en_US", locale0.toString());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("US", locale0.getCountry());
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      assertNotNull(locale0);
      
      int int0 = StringUtils.getFuzzyDistance("}L~.", "}L~.", locale0);
      assertEquals("en_US", locale0.toString());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("US", locale0.getCountry());
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      assertEquals(10, int0);
  }

  @Test(timeout = 4000)
  public void test531()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = (-383);
      intArray0[1] = 322;
      intArray0[2] = (-383);
      // Undeclared exception!
      try { 
        StringUtils.join(intArray0, '%', (-383), 100);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -383
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test532()  throws Throwable  {
      String string0 = StringUtils.substring("", (-2854));
      assertNotNull(string0);
      assertEquals("", string0);
      
      boolean boolean0 = StringUtils.equalsIgnoreCase("", "");
      assertTrue(boolean0);
      
      String string1 = StringUtils.reverse("");
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
      
      char[] charArray0 = new char[4];
      int[] intArray0 = new int[8];
      intArray0[0] = 3654;
      intArray0[1] = (int) '\u0000';
      intArray0[2] = (-376);
      intArray0[3] = (-2854);
      intArray0[4] = (int) 'p';
      intArray0[5] = (-2854);
      intArray0[6] = (int) '\u0000';
      intArray0[7] = (-2854);
      // Undeclared exception!
      try { 
        StringUtils.join(intArray0, '\u0000', (-383), 322);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -383
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test533()  throws Throwable  {
      Class<String> class0 = String.class;
      ServiceLoader<String> serviceLoader0 = ServiceLoader.loadInstalled(class0);
      assertEquals("java.util.ServiceLoader[java.lang.String]", serviceLoader0.toString());
      assertNotNull(serviceLoader0);
      
      Spliterator<String> spliterator0 = serviceLoader0.spliterator();
      assertEquals("java.util.ServiceLoader[java.lang.String]", serviceLoader0.toString());
      assertNotNull(spliterator0);
      
      Class<Object> class1 = Object.class;
      ServiceLoader<Object> serviceLoader1 = ServiceLoader.loadInstalled(class1);
      assertEquals("java.util.ServiceLoader[java.lang.Object]", serviceLoader1.toString());
      assertNotNull(serviceLoader1);
      
      int int0 = StringUtils.indexOfDifference((CharSequence[]) null);
      assertEquals((-1), int0);
      
      String string0 = StringUtils.removeEnd("HiwSo>}72", "+:n`>M8^_<T`vv.Y_");
      assertNotNull(string0);
      assertEquals("HiwSo>}72", string0);
      
      String[] stringArray0 = new String[6];
      stringArray0[0] = ")z0egak";
      stringArray0[1] = "M8jy6B";
      stringArray0[4] = "M8jy6B";
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      serviceLoader0.forEach(consumer0);
      assertEquals("java.util.ServiceLoader[java.lang.String]", serviceLoader0.toString());
      
      String string1 = StringUtils.stripAccents((String) null);
      assertNull(string1);
      
      String string2 = StringUtils.lowerCase("aX-1.0x-412.24x1.0x-2592.4207x-2730.193aX-1.0x-412.24x1.0x-2592.4207x-2730.193aX-1.0x-412.24x1.0x-2592.4207x-2730.193-1.0x-412.24x1.0x-2592.4207x-2730.193");
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("ax-1.0x-412.24x1.0x-2592.4207x-2730.193ax-1.0x-412.24x1.0x-2592.4207x-2730.193ax-1.0x-412.24x1.0x-2592.4207x-2730.193-1.0x-412.24x1.0x-2592.4207x-2730.193", string2);
      
      String[] stringArray1 = StringUtils.splitByWholeSeparatorPreserveAllTokens("hY", "u-](", (-1));
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray1, stringArray0);
      assertEquals(1, stringArray1.length);
      assertNotNull(stringArray1);
  }

  @Test(timeout = 4000)
  public void test534()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      int int0 = StringUtils.indexOfDifference(charSequenceArray0);
      assertEquals(0, charSequenceArray0.length);
      assertEquals((-1), int0);
      
      String[] stringArray0 = StringUtils.split("IBP");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      int int1 = StringUtils.INDEX_NOT_FOUND;
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      String string0 = StringUtils.abbreviateMiddle("Array element ", "Array element ", 34);
      assertNotNull(string0);
      assertEquals("Array element ", string0);
      
      boolean boolean0 = StringUtils.isAnyBlank(stringArray0);
      assertEquals(1, stringArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test535()  throws Throwable  {
      String string0 = StringUtils.stripAccents((String) null);
      assertNull(string0);
      
      String string1 = StringUtils.wrap(" is not in the range '0' - '9'", '3');
      assertNotNull(string1);
      assertEquals("3 is not in the range '0' - '9'3", string1);
      
      String[] stringArray0 = StringUtils.substringsBetween("zGiqL%uA|", "tqGfjg", "tqGfjg");
      assertNull(stringArray0);
      
      String[] stringArray1 = StringUtils.splitPreserveAllTokens(" is not in the range '0' - '9'", "");
      assertEquals(1, stringArray1.length);
      assertNotNull(stringArray1);
      
      String string2 = StringUtils.difference("", (String) null);
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("", string2);
      
      Vector<Locale.LanguageRange> vector0 = new Vector<Locale.LanguageRange>();
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertNotNull(vector0);
      
      String string3 = StringUtils.prependIfMissingIgnoreCase(" is not in the range '0' - '9'", (CharSequence) null, stringArray1);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals(1, stringArray1.length);
      assertNotNull(string3);
      assertEquals(" is not in the range '0' - '9'", string3);
  }

  @Test(timeout = 4000)
  public void test536()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByCharacterType((String) null);
      assertNull(stringArray0);
      
      String string0 = StringUtils.deleteWhitespace((String) null);
      assertNull(string0);
      
      Integer[] integerArray0 = new Integer[4];
      Integer integer0 = new Integer((-943));
      assertNotNull(integer0);
      assertEquals((-943), (int)integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((-2016));
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals((-2016), (int)integer1);
      
      integerArray0[1] = integer1;
      Integer integer2 = new Integer((int) integerArray0[1]);
      assertTrue(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      assertEquals(4, integerArray0.length);
      assertNotNull(integer2);
      assertEquals((-2016), (int)integer2);
      
      integerArray0[2] = integer2;
      Integer integer3 = new Integer((int) integerArray0[0]);
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer2));
      assertTrue(integer3.equals((Object)integer0));
      assertEquals(4, integerArray0.length);
      assertNotNull(integer3);
      assertEquals((-943), (int)integer3);
      
      integerArray0[3] = integer3;
      String string1 = StringUtils.join(integerArray0);
      assertEquals(4, integerArray0.length);
      assertNotNull(string1);
      assertEquals("-943-2016-2016-943", string1);
      
      String string2 = StringUtils.join((String[]) null);
      assertNull(string2);
      
      String string3 = StringUtils.replaceEach("%cf]l:uy>#-V", (String[]) null, (String[]) null);
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      assertEquals("%cf]l:uy>#-V", string3);
  }

  @Test(timeout = 4000)
  public void test537()  throws Throwable  {
      String[] stringArray0 = StringUtils.split("InCex: ", '=');
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string0 = StringUtils.join((Object[]) null, '=');
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test538()  throws Throwable  {
      String string0 = StringUtils.stripStart("maxWith cannot be negative", "maxWith cannot be negative");
      assertNotNull(string0);
      assertEquals("", string0);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "", (CharSequence) "maxWith cannot be negative");
      assertEquals(26, int0);
      
      boolean boolean0 = StringUtils.equalsIgnoreCase("", "");
      assertTrue(boolean0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[9];
      CharSequence charSequence0 = StringUtils.defaultIfBlank((CharSequence) "", (CharSequence) "k:%oT");
      assertFalse(charSequence0.equals((Object)string0));
      assertNotNull(charSequence0);
      assertEquals("k:%oT", charSequence0);
      
      charSequenceArray0[0] = (CharSequence) "k:%oT";
      charSequenceArray0[1] = (CharSequence) "maxWith cannot be negative";
      charSequenceArray0[2] = (CharSequence) "maxWith cannot be negative";
      charSequenceArray0[3] = (CharSequence) "k:%oT";
      charSequenceArray0[4] = (CharSequence) "";
      charSequenceArray0[5] = (CharSequence) "k:%oT";
      charSequenceArray0[6] = (CharSequence) "k:%oT";
      CharSequence[] charSequenceArray1 = new CharSequence[2];
      assertFalse(charSequenceArray1.equals((Object)charSequenceArray0));
      
      charSequenceArray1[0] = (CharSequence) "k:%oT";
      charSequenceArray1[1] = (CharSequence) "";
      CharSequence charSequence1 = StringUtils.firstNonEmpty(charSequenceArray1);
      assertFalse(charSequenceArray1.equals((Object)charSequenceArray0));
      assertFalse(charSequence1.equals((Object)string0));
      assertTrue(charSequence1.equals((Object)charSequence0));
      assertNotSame(charSequenceArray1, charSequenceArray0);
      assertEquals(2, charSequenceArray1.length);
      assertNotNull(charSequence1);
      assertEquals("k:%oT", charSequence1);
      
      charSequenceArray0[7] = (CharSequence) "k:%oT";
      charSequenceArray0[8] = (CharSequence) "maxWith cannot be negative";
      String string1 = StringUtils.appendIfMissing("k:%oT", "k:%oT", charSequenceArray0);
      assertFalse(string1.equals((Object)string0));
      assertTrue(string1.equals((Object)charSequence1));
      assertTrue(string1.equals((Object)charSequence0));
      assertFalse(charSequenceArray0.equals((Object)charSequenceArray1));
      assertNotSame(charSequenceArray0, charSequenceArray1);
      assertEquals(9, charSequenceArray0.length);
      assertNotNull(string1);
      assertEquals("k:%oT", string1);
      
      int int1 = StringUtils.lastIndexOf((CharSequence) "", (CharSequence) "k:%oT");
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      int int2 = StringUtils.lastIndexOf(charSequenceArray0[2], (-5927), 11);
      assertFalse(charSequenceArray0.equals((Object)charSequenceArray1));
      assertTrue(int2 == int1);
      assertFalse(int2 == int0);
      assertNotSame(charSequenceArray0, charSequenceArray1);
      assertEquals(9, charSequenceArray0.length);
      assertEquals((-1), int2);
      
      String string2 = StringUtils.substringBeforeLast("", "");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)charSequence1));
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)charSequence0));
      assertNotNull(string2);
      assertEquals("", string2);
      
      String string3 = StringUtils.mid("", 0, 256);
      assertTrue(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)charSequence0));
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)charSequence1));
      assertNotNull(string3);
      assertEquals("", string3);
      
      String string4 = StringUtils.defaultString("e*j)gaK");
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)charSequence0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)charSequence1));
      assertNotNull(string4);
      assertEquals("e*j)gaK", string4);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) 0;
      floatArray0[1] = (float) (-5927);
      String string5 = StringUtils.join(floatArray0, '>', 0, 0);
      assertTrue(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)charSequence0));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertTrue(string5.equals((Object)string3));
      assertTrue(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)charSequence1));
      assertEquals(2, floatArray0.length);
      assertNotNull(string5);
      assertArrayEquals(new float[] {0.0F, (-5927.0F)}, floatArray0, 0.01F);
      assertEquals("", string5);
  }

  @Test(timeout = 4000)
  public void test539()  throws Throwable  {
      String string0 = StringUtils.strip("s?m(/");
      assertNotNull(string0);
      assertEquals("s?m(/", string0);
      
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertNotNull(linkedHashSet0);
      assertFalse(linkedHashSet0.contains(string0));
      
      boolean boolean0 = linkedHashSet0.add("pk?9bG");
      assertFalse(linkedHashSet0.isEmpty());
      assertEquals(1, linkedHashSet0.size());
      assertTrue(linkedHashSet0.contains("pk?9bG"));
      assertFalse(linkedHashSet0.contains(string0));
      assertTrue(boolean0);
      
      boolean boolean1 = linkedHashSet0.add("Array element ");
      assertFalse(linkedHashSet0.isEmpty());
      assertEquals(2, linkedHashSet0.size());
      assertTrue(boolean1 == boolean0);
      assertTrue(linkedHashSet0.contains("pk?9bG"));
      assertFalse(linkedHashSet0.contains(string0));
      assertTrue(boolean1);
      
      boolean boolean2 = linkedHashSet0.add((String) null);
      assertFalse(linkedHashSet0.isEmpty());
      assertEquals(3, linkedHashSet0.size());
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertTrue(linkedHashSet0.contains("pk?9bG"));
      assertFalse(linkedHashSet0.contains(string0));
      assertTrue(boolean2);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) ":W3vjMB@", (-54), 32);
      assertEquals((-1), int0);
      
      String string1 = StringUtils.substringBeforeLast(":W3vjMB@", "pk?9bG");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(":W3vjMB@", string1);
      
      String string2 = StringUtils.mid("Array element l{`", (-5927), 256);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("Array element l{`", string2);
      
      String string3 = StringUtils.defaultString("u-](");
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      assertEquals("u-](", string3);
      
      String string4 = StringUtils.join((float[]) null, '>', 105, 32);
      assertNull(string4);
  }

  @Test(timeout = 4000)
  public void test540()  throws Throwable  {
      String string0 = "x[BEyAx";
      String[] stringArray0 = StringUtils.split("x[BEyAx", "x[BEyAx");
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      boolean boolean0 = StringUtils.isWhitespace("x[BEyAx");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isAnyEmpty(stringArray0);
      assertTrue(boolean1 == boolean0);
      assertEquals(0, stringArray0.length);
      assertFalse(boolean1);
      
      boolean boolean2 = StringUtils.isNotBlank("x[BEyAx");
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2);
      
      boolean boolean3 = StringUtils.isAllEmpty(stringArray0);
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3 == boolean1);
      assertEquals(0, stringArray0.length);
      assertTrue(boolean3);
      
      String string1 = StringUtils.removeEnd("x[BEyAx", "x[BEyAx");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
      
      String string2 = StringUtils.abbreviate("/>hhEc", "x[BEyAx", 345, 345);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("/>hhEc", string2);
      
      Locale locale0 = new Locale("", "", "Minimum abbreviation width with offset is %d");
      assertEquals("", locale0.getCountry());
      assertEquals("Minimum abbreviation width with offset is %d", locale0.getVariant());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Language());
      assertNotNull(locale0);
      
      Locale locale1 = Locale.UK;
      assertEquals("en_GB", locale1.toString());
      assertEquals("GBR", locale1.getISO3Country());
      assertEquals("en", locale1.getLanguage());
      assertEquals("", locale1.getVariant());
      assertEquals("eng", locale1.getISO3Language());
      assertEquals("GB", locale1.getCountry());
      assertFalse(locale1.equals((Object)locale0));
      assertNotSame(locale1, locale0);
      assertNotNull(locale1);
      
      String string3 = locale1.getDisplayVariant(locale0);
      assertEquals("", locale0.getCountry());
      assertEquals("Minimum abbreviation width with offset is %d", locale0.getVariant());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Language());
      assertEquals("en_GB", locale1.toString());
      assertEquals("GBR", locale1.getISO3Country());
      assertEquals("en", locale1.getLanguage());
      assertEquals("", locale1.getVariant());
      assertEquals("eng", locale1.getISO3Language());
      assertEquals("GB", locale1.getCountry());
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(locale1.equals((Object)locale0));
      assertTrue(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertNotSame(locale0, locale1);
      assertNotSame(locale1, locale0);
      assertNotNull(string3);
      assertEquals("", string3);
      
      boolean boolean4 = locale1.hasExtensions();
      assertEquals("en_GB", locale1.toString());
      assertEquals("GBR", locale1.getISO3Country());
      assertEquals("en", locale1.getLanguage());
      assertEquals("", locale1.getVariant());
      assertEquals("eng", locale1.getISO3Language());
      assertEquals("GB", locale1.getCountry());
      assertFalse(locale1.equals((Object)locale0));
      assertTrue(boolean4 == boolean0);
      assertFalse(boolean4 == boolean2);
      assertFalse(boolean4 == boolean3);
      assertTrue(boolean4 == boolean1);
      assertNotSame(locale1, locale0);
      assertFalse(boolean4);
      
      String string4 = locale0.getDisplayCountry(locale1);
      assertEquals("", locale0.getCountry());
      assertEquals("Minimum abbreviation width with offset is %d", locale0.getVariant());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Language());
      assertEquals("en_GB", locale1.toString());
      assertEquals("GBR", locale1.getISO3Country());
      assertEquals("en", locale1.getLanguage());
      assertEquals("", locale1.getVariant());
      assertEquals("eng", locale1.getISO3Language());
      assertEquals("GB", locale1.getCountry());
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(locale1.equals((Object)locale0));
      assertTrue(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertNotSame(locale0, locale1);
      assertNotSame(locale1, locale0);
      assertNotNull(string4);
      assertEquals("", string4);
      
      String string5 = locale1.getDisplayLanguage();
      assertEquals("en_GB", locale1.toString());
      assertEquals("GBR", locale1.getISO3Country());
      assertEquals("en", locale1.getLanguage());
      assertEquals("", locale1.getVariant());
      assertEquals("eng", locale1.getISO3Language());
      assertEquals("GB", locale1.getCountry());
      assertFalse(locale1.equals((Object)locale0));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertNotSame(locale1, locale0);
      assertNotNull(string5);
      assertEquals("English", string5);
      
      String string6 = locale1.getDisplayLanguage();
      assertEquals("en_GB", locale1.toString());
      assertEquals("GBR", locale1.getISO3Country());
      assertEquals("en", locale1.getLanguage());
      assertEquals("", locale1.getVariant());
      assertEquals("eng", locale1.getISO3Language());
      assertEquals("GB", locale1.getCountry());
      assertFalse(locale1.equals((Object)locale0));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string4));
      assertNotSame(locale1, locale0);
      assertNotNull(string6);
      assertEquals("English", string6);
      
      Locale locale2 = Locale.forLanguageTag("");
      assertEquals("", locale2.getISO3Country());
      assertEquals("", locale2.getISO3Language());
      assertEquals("", locale2.getLanguage());
      assertEquals("", locale2.getCountry());
      assertEquals("", locale2.getVariant());
      assertEquals("", locale2.toString());
      assertFalse(locale2.equals((Object)locale0));
      assertFalse(locale2.equals((Object)locale1));
      assertNotSame(locale2, locale0);
      assertNotSame(locale2, locale1);
      assertNotNull(locale2);
      
      int int0 = StringUtils.getFuzzyDistance("", "x[BEyAx", locale0);
      assertEquals("", locale0.getCountry());
      assertEquals("Minimum abbreviation width with offset is %d", locale0.getVariant());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Language());
      assertFalse(locale0.equals((Object)locale2));
      assertFalse(locale0.equals((Object)locale1));
      assertNotSame(locale0, locale2);
      assertNotSame(locale0, locale1);
      assertEquals(0, int0);
      
      String string7 = StringUtils.strip("", "");
      assertFalse(string7.equals((Object)string5));
      assertTrue(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string6));
      assertTrue(string7.equals((Object)string3));
      assertTrue(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string2));
      assertNotNull(string7);
      assertEquals("", string7);
      
      // Undeclared exception!
      try { 
        StringUtils.replacePattern("", "t>*r9M$IUC{cHnf_", "['Zjk4kCk.uCu");
        fail("Expecting exception: PatternSyntaxException");
      
      } catch(PatternSyntaxException e) {
         //
         // Illegal repetition near index 9
         // t>*r9M$IUC{cHnf_
         //          ^
         //
         verifyException("java.util.regex.Pattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test541()  throws Throwable  {
      Object[] objectArray0 = new Object[4];
      String string0 = StringUtils.join(objectArray0);
      assertEquals(4, objectArray0.length);
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.replaceIgnoreCase("", "", "nt aX-1.0x-412.24x1.0x-2592.4207x-2730.193aX-1.0x-412.24x1.0x-2592.4207x-2730.193aX-1.0x-412.24x1.0x-2592.4207x-2730.193-1.0x-412.24x1.0x-2592.4207x-2730.193", (-3733));
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
      
      String string2 = StringUtils.wrapIfMissing("", '3');
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("", string2);
      
      String string3 = StringUtils.join((boolean[]) null, '>', 9, 9);
      assertNull(string3);
      
      String string4 = StringUtils.removeEndIgnoreCase("nt aX-1.0x-412.24x1.0x-2592.4207x-2730.193aX-1.0x-412.24x1.0x-2592.4207x-2730.193aX-1.0x-412.24x1.0x-2592.4207x-2730.193-1.0x-412.24x1.0x-2592.4207x-2730.193", "p");
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertNotNull(string4);
      assertEquals("nt aX-1.0x-412.24x1.0x-2592.4207x-2730.193aX-1.0x-412.24x1.0x-2592.4207x-2730.193aX-1.0x-412.24x1.0x-2592.4207x-2730.193-1.0x-412.24x1.0x-2592.4207x-2730.193", string4);
      
      Locale locale0 = Locale.US;
      assertEquals("", locale0.getVariant());
      assertEquals("US", locale0.getCountry());
      assertEquals("en_US", locale0.toString());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      assertEquals("USA", locale0.getISO3Country());
      assertNotNull(locale0);
      
      String string5 = locale0.getDisplayCountry();
      assertEquals("", locale0.getVariant());
      assertEquals("US", locale0.getCountry());
      assertEquals("en_US", locale0.toString());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      assertEquals("USA", locale0.getISO3Country());
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertNotNull(string5);
      assertEquals("United States", string5);
      
      int int0 = StringUtils.getFuzzyDistance("", "", locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("US", locale0.getCountry());
      assertEquals("en_US", locale0.toString());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      assertEquals("USA", locale0.getISO3Country());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test542()  throws Throwable  {
      String string0 = StringUtils.upperCase("#l!Elg+0bH\"&7F),");
      assertNotNull(string0);
      assertEquals("#L!ELG+0BH\"&7F),", string0);
      
      boolean boolean0 = StringUtils.isAllLowerCase("#l!Elg+0bH\"&7F),");
      assertFalse(boolean0);
      
      String string1 = StringUtils.capitalize("");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
      
      String string2 = StringUtils.wrapIfMissing("", 'M');
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("", string2);
      
      String string3 = StringUtils.capitalize((String) null);
      assertNull(string3);
      
      String string4 = StringUtils.repeat("Threshold must not be negative", "+)3+wnY4'A)d1", (-243));
      assertTrue(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string1));
      assertNotNull(string4);
      assertEquals("", string4);
      
      String string5 = StringUtils.replaceChars("MN+O9}+Lt|qQ", "E*/+/o,^", "w");
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertNotNull(string5);
      assertEquals("MNO9}Lt|qQ", string5);
      
      char[] charArray0 = new char[7];
      charArray0[0] = '(';
      charArray0[1] = '}';
      charArray0[2] = 'M';
      charArray0[3] = '(';
      charArray0[4] = 'M';
      charArray0[5] = 'M';
      charArray0[6] = '}';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(7, charBuffer0.limit());
      assertFalse(charBuffer0.isReadOnly());
      assertFalse(charBuffer0.isDirect());
      assertEquals(7, charBuffer0.capacity());
      assertTrue(charBuffer0.hasRemaining());
      assertTrue(charBuffer0.hasArray());
      assertEquals("(}M(MM}", charBuffer0.toString());
      assertEquals(7, charBuffer0.length());
      assertEquals(7, charBuffer0.remaining());
      assertEquals(0, charBuffer0.position());
      assertEquals(7, charArray0.length);
      assertNotNull(charBuffer0);
      assertArrayEquals(new char[] {'(', '}', 'M', '(', 'M', 'M', '}'}, charArray0);
      
      // Undeclared exception!
      try { 
        charBuffer0.get(charArray0, 52, 256);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test543()  throws Throwable  {
      String string0 = StringUtils.substringAfterLast("Supplied value must be a valid byte literal between -128 and 127: [", "Supplied value must be a valid byte literal between -128 and 127: [");
      assertNotNull(string0);
      assertEquals("", string0);
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "";
      String string1 = StringUtils.join(objectArray0, ')', 64, 37);
      assertEquals(1, objectArray0.length);
      assertNotNull(string1);
      assertEquals("", string1);
  }

  @Test(timeout = 4000)
  public void test544()  throws Throwable  {
      int int0 = StringUtils.compare("...", "...", true);
      assertEquals(0, int0);
      
      String string0 = StringUtils.lowerCase("...");
      assertNotNull(string0);
      assertEquals("...", string0);
      
      int int1 = StringUtils.compare("9j0-+ji_s", (String) null);
      assertFalse(int1 == int0);
      assertEquals(1, int1);
      
      String string1 = StringUtils.substring((String) null, 5);
      assertNull(string1);
      
      boolean boolean0 = StringUtils.isAlphaSpace("...");
      assertFalse(boolean0);
      
      String string2 = StringUtils.trimToEmpty("...");
      assertTrue(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("...", string2);
      
      Locale locale0 = null;
      try {
        locale0 = new Locale("$Xw5G8NP\"R", (String) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Locale", e);
      }
  }

  @Test(timeout = 4000)
  public void test545()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      Locale locale0 = Locale.GERMANY;
      assertEquals("de", locale0.getLanguage());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("DE", locale0.getCountry());
      assertEquals("de_DE", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertNotNull(locale0);
      
      Set<String> set0 = new HashSet<String>();
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertNotNull(set0);
      
      String string0 = StringUtils.remove("", '-');
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test546()  throws Throwable  {
      String string0 = StringUtils.replace("/AXW(#z,vQvj!1+\"B", "/AXW(#z,vQvj!1+\"B", "Locale must not be null");
      assertNotNull(string0);
      assertEquals("Locale must not be null", string0);
      
      boolean boolean0 = StringUtils.contains((CharSequence) "Locale must not be null", 122);
      assertFalse(boolean0);
      
      int int0 = StringUtils.indexOf((CharSequence) "Locale must not be null", 76, 76);
      assertEquals((-1), int0);
      
      String string1 = StringUtils.left("pYG1W!?", (-1781));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
  }

  @Test(timeout = 4000)
  public void test547()  throws Throwable  {
      String[] stringArray0 = StringUtils.split("object", "org.apache.commons.lang3.ArrayUtils", 3);
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string0 = StringUtils.substringBetween("object", "object");
      assertNull(string0);
      
      String string1 = StringUtils.lowerCase((String) null);
      assertNull(string1);
      
      byte[] byteArray0 = StringUtils.getBytes((String) null, "object");
      assertEquals(0, byteArray0.length);
      assertNotNull(byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[7];
      charSequenceArray0[0] = (CharSequence) "org.apache.commons.lang3.ArrayUtils";
      charSequenceArray0[1] = (CharSequence) null;
      charSequenceArray0[2] = (CharSequence) null;
      charSequenceArray0[3] = (CharSequence) null;
      String string2 = StringUtils.wrap((String) null, 'P');
      assertNull(string2);
      
      charSequenceArray0[4] = (CharSequence) null;
      charSequenceArray0[5] = (CharSequence) "object";
      charSequenceArray0[6] = (CharSequence) null;
      String string3 = StringUtils.prependIfMissing((String) null, (CharSequence) null, charSequenceArray0);
      assertEquals(7, charSequenceArray0.length);
      assertNull(string3);
  }

  @Test(timeout = 4000)
  public void test548()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[0] = null;
      charSequenceArray0[1] = null;
      int int0 = StringUtils.indexOfAny((CharSequence) null, charSequenceArray0);
      assertEquals(2, charSequenceArray0.length);
      assertEquals((-1), int0);
      
      String string0 = StringUtils.removeStart("NDG$T!", "NDG$T!");
      assertNotNull(string0);
      assertEquals("", string0);
      
      int int1 = StringUtils.indexOfDifference(charSequenceArray0[1], (CharSequence) "");
      assertFalse(int1 == int0);
      assertEquals(2, charSequenceArray0.length);
      assertEquals(0, int1);
      
      boolean boolean0 = StringUtils.isAsciiPrintable(charSequenceArray0[1]);
      assertEquals(2, charSequenceArray0.length);
      assertFalse(boolean0);
      
      int int2 = StringUtils.countMatches((CharSequence) "", '[');
      assertFalse(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals(0, int2);
      
      String string1 = StringUtils.substring(" ", 0, (-1));
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
      
      String string2 = StringUtils.abbreviateMiddle("", (String) null, (-214));
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("", string2);
      
      String string3 = StringUtils.mid("", (-214), 0);
      assertTrue(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string0));
      assertNotNull(string3);
      assertEquals("", string3);
      
      String string4 = StringUtils.stripToNull("l\"Ud");
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertNotNull(string4);
      assertEquals("l\"Ud", string4);
      
      String string5 = StringUtils.replace("", "", "r+tB(5?gT(KO2", 0);
      assertTrue(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertTrue(string5.equals((Object)string1));
      assertTrue(string5.equals((Object)string2));
      assertTrue(string5.equals((Object)string0));
      assertNotNull(string5);
      assertEquals("", string5);
      
      try { 
        StringUtils.getBytes(" ", "'$AxFDseX;Vkb%)E23x");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(UnsupportedEncodingException e) {
      }
  }

  @Test(timeout = 4000)
  public void test549()  throws Throwable  {
      try { 
        StringUtils.getBytes("kb>K:%lR&M+Fm2*/78", "{}");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(UnsupportedEncodingException e) {
      }
  }

  @Test(timeout = 4000)
  public void test550()  throws Throwable  {
      String string0 = StringUtils.lowerCase("");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.substringBeforeLast("", "");
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
      
      boolean boolean0 = StringUtils.containsIgnoreCase("", "");
      assertTrue(boolean0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[7];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "";
      charSequenceArray0[2] = (CharSequence) "";
      charSequenceArray0[3] = (CharSequence) "";
      charSequenceArray0[4] = (CharSequence) "";
      charSequenceArray0[5] = (CharSequence) "";
      String string2 = StringUtils.trimToNull("Array and element cannot both be null");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("Array and element cannot both be null", string2);
      
      charSequenceArray0[6] = (CharSequence) "Array and element cannot both be null";
      Locale locale0 = new Locale("", "", "");
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.toString());
      assertNotNull(locale0);
      
      Locale locale1 = Locale.UK;
      assertEquals("eng", locale1.getISO3Language());
      assertEquals("GB", locale1.getCountry());
      assertEquals("", locale1.getVariant());
      assertEquals("en", locale1.getLanguage());
      assertEquals("en_GB", locale1.toString());
      assertEquals("GBR", locale1.getISO3Country());
      assertFalse(locale1.equals((Object)locale0));
      assertNotSame(locale1, locale0);
      assertNotNull(locale1);
      
      String string3 = locale0.getDisplayVariant(locale1);
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.toString());
      assertEquals("eng", locale1.getISO3Language());
      assertEquals("GB", locale1.getCountry());
      assertEquals("", locale1.getVariant());
      assertEquals("en", locale1.getLanguage());
      assertEquals("en_GB", locale1.toString());
      assertEquals("GBR", locale1.getISO3Country());
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(locale1.equals((Object)locale0));
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string1));
      assertNotSame(locale0, locale1);
      assertNotSame(locale1, locale0);
      assertNotNull(string3);
      assertEquals("", string3);
      
      boolean boolean1 = locale0.hasExtensions();
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.toString());
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(boolean1 == boolean0);
      assertNotSame(locale0, locale1);
      assertFalse(boolean1);
      
      String string4 = locale0.getDisplayCountry(locale1);
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.toString());
      assertEquals("eng", locale1.getISO3Language());
      assertEquals("GB", locale1.getCountry());
      assertEquals("", locale1.getVariant());
      assertEquals("en", locale1.getLanguage());
      assertEquals("en_GB", locale1.toString());
      assertEquals("GBR", locale1.getISO3Country());
      assertTrue(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(locale1.equals((Object)locale0));
      assertNotSame(locale0, locale1);
      assertNotSame(locale1, locale0);
      assertNotNull(string4);
      assertEquals("", string4);
      
      String string5 = locale1.getDisplayLanguage();
      assertEquals("eng", locale1.getISO3Language());
      assertEquals("GB", locale1.getCountry());
      assertEquals("", locale1.getVariant());
      assertEquals("en", locale1.getLanguage());
      assertEquals("en_GB", locale1.toString());
      assertEquals("GBR", locale1.getISO3Country());
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertFalse(locale1.equals((Object)locale0));
      assertNotSame(locale1, locale0);
      assertNotNull(string5);
      assertEquals("English", string5);
      
      String string6 = locale0.getDisplayLanguage();
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.toString());
      assertTrue(string6.equals((Object)string1));
      assertTrue(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string2));
      assertFalse(locale0.equals((Object)locale1));
      assertNotSame(locale0, locale1);
      assertNotNull(string6);
      assertEquals("", string6);
      
      String string7 = locale0.getDisplayCountry();
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.toString());
      assertFalse(string7.equals((Object)string2));
      assertTrue(string7.equals((Object)string1));
      assertTrue(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string5));
      assertFalse(locale0.equals((Object)locale1));
      assertNotSame(locale0, locale1);
      assertNotNull(string7);
      assertEquals("", string7);
      
      Locale locale2 = Locale.forLanguageTag("");
      assertEquals("", locale2.toString());
      assertEquals("", locale2.getVariant());
      assertEquals("", locale2.getISO3Country());
      assertEquals("", locale2.getISO3Language());
      assertEquals("", locale2.getLanguage());
      assertEquals("", locale2.getCountry());
      assertTrue(locale2.equals((Object)locale0));
      assertFalse(locale2.equals((Object)locale1));
      assertNotSame(locale2, locale0);
      assertNotSame(locale2, locale1);
      assertNotNull(locale2);
      
      String string8 = locale2.getDisplayName();
      assertEquals("", locale2.toString());
      assertEquals("", locale2.getVariant());
      assertEquals("", locale2.getISO3Country());
      assertEquals("", locale2.getISO3Language());
      assertEquals("", locale2.getLanguage());
      assertEquals("", locale2.getCountry());
      assertTrue(locale2.equals((Object)locale0));
      assertFalse(locale2.equals((Object)locale1));
      assertTrue(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string2));
      assertTrue(string8.equals((Object)string0));
      assertNotSame(locale2, locale0);
      assertNotSame(locale2, locale1);
      assertNotNull(string8);
      assertEquals("", string8);
      
      int int0 = StringUtils.getFuzzyDistance("Array and element cannot both be null", "Array and element cannot both be null", locale2);
      assertEquals("", locale2.toString());
      assertEquals("", locale2.getVariant());
      assertEquals("", locale2.getISO3Country());
      assertEquals("", locale2.getISO3Language());
      assertEquals("", locale2.getLanguage());
      assertEquals("", locale2.getCountry());
      assertTrue(locale2.equals((Object)locale0));
      assertFalse(locale2.equals((Object)locale1));
      assertNotSame(locale2, locale0);
      assertNotSame(locale2, locale1);
      assertEquals(109, int0);
      
      String string9 = StringUtils.strip("', has a length less than 2", "");
      assertFalse(string9.equals((Object)string0));
      assertFalse(string9.equals((Object)string3));
      assertFalse(string9.equals((Object)string7));
      assertFalse(string9.equals((Object)string1));
      assertFalse(string9.equals((Object)string5));
      assertFalse(string9.equals((Object)string4));
      assertFalse(string9.equals((Object)string2));
      assertFalse(string9.equals((Object)string8));
      assertFalse(string9.equals((Object)string6));
      assertNotNull(string9);
      assertEquals("', has a length less than 2", string9);
      
      boolean boolean2 = StringUtils.isNoneBlank(charSequenceArray0);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertEquals(7, charSequenceArray0.length);
      assertFalse(boolean2);
      
      String string10 = StringUtils.prependIfMissingIgnoreCase("", charSequenceArray0[6], charSequenceArray0);
      assertTrue(string10.equals((Object)string7));
      assertTrue(string10.equals((Object)string1));
      assertFalse(string10.equals((Object)string2));
      assertTrue(string10.equals((Object)string8));
      assertFalse(string10.equals((Object)string5));
      assertTrue(string10.equals((Object)string4));
      assertTrue(string10.equals((Object)string3));
      assertTrue(string10.equals((Object)string6));
      assertFalse(string10.equals((Object)string9));
      assertTrue(string10.equals((Object)string0));
      assertEquals(7, charSequenceArray0.length);
      assertNotNull(string10);
      assertEquals("", string10);
  }

  @Test(timeout = 4000)
  public void test551()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      boolean boolean0 = StringUtils.isAllBlank(charSequenceArray0);
      assertEquals(1, charSequenceArray0.length);
      assertTrue(boolean0);
      
      String string0 = StringUtils.capitalize(" vs ");
      assertNotNull(string0);
      assertEquals(" vs ", string0);
      
      String string1 = StringUtils.join((int[]) null, '{');
      assertNull(string1);
  }

  @Test(timeout = 4000)
  public void test552()  throws Throwable  {
      boolean boolean0 = StringUtils.containsWhitespace("q@F!X#Ug_t@");
      assertFalse(boolean0);
      
      String string0 = StringUtils.substringAfter("q@F!X#Ug_t@", (-1344));
      assertNotNull(string0);
      assertEquals("", string0);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) (-1344);
      floatArray0[1] = (float) 48;
      floatArray0[2] = 0.0F;
      floatArray0[3] = (float) (-1344);
      floatArray0[4] = 0.0F;
      floatArray0[5] = (float) (-1344);
      String string1 = StringUtils.join(floatArray0, '0', 64, 30);
      assertEquals(6, floatArray0.length);
      assertNotNull(string1);
      assertArrayEquals(new float[] {(-1344.0F), 48.0F, 0.0F, (-1344.0F), 0.0F, (-1344.0F)}, floatArray0, 0.01F);
      assertEquals("", string1);
      
      String string2 = StringUtils.abbreviate("q@F!X#Ug_t@", "", 30, 331);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("q@F!X#Ug_t@", string2);
  }

  @Test(timeout = 4000)
  public void test553()  throws Throwable  {
      int int0 = StringUtils.compare("Z", "=`%d=7wr7,/{8`");
      assertEquals(29, int0);
      
      String[] stringArray0 = StringUtils.split(" ", " ", 48);
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string0 = StringUtils.prependIfMissingIgnoreCase("'^\"}4+dk4/3B$u", " ", stringArray0);
      assertEquals(0, stringArray0.length);
      assertNotNull(string0);
      assertEquals(" '^\"}4+dk4/3B$u", string0);
      
      String[] stringArray1 = StringUtils.splitByWholeSeparator(" ", (String) null, 29);
      assertSame(stringArray1, stringArray0);
      assertEquals(0, stringArray1.length);
      assertNotNull(stringArray1);
      
      int int1 = StringUtils.compareIgnoreCase("$", "'^\"}4+dk4/3B$u", true);
      assertFalse(int1 == int0);
      assertEquals((-3), int1);
      
      boolean boolean0 = StringUtils.isAsciiPrintable("@]^gMrky|`c/");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test554()  throws Throwable  {
      String string0 = StringUtils.removeEndIgnoreCase("org.apache.commons.lang3.LocaleUtils", "A3]Y");
      assertNotNull(string0);
      assertEquals("org.apache.commons.lang3.LocaleUtils", string0);
      
      Locale locale0 = Locale.US;
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en_US", locale0.toString());
      assertEquals("US", locale0.getCountry());
      assertNotNull(locale0);
      
      String string1 = locale0.getDisplayCountry();
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en_US", locale0.toString());
      assertEquals("US", locale0.getCountry());
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("United States", string1);
      
      int int0 = StringUtils.getFuzzyDistance("A3]Y", "United States", locale0);
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en_US", locale0.toString());
      assertEquals("US", locale0.getCountry());
      assertEquals(0, int0);
      
      int int1 = StringUtils.length("United States");
      assertFalse(int1 == int0);
      assertEquals(13, int1);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("org.apache.commons.lang3.LocaleUtils", "Z=`%d=7wr7,/{8`", (-571));
      assertEquals(2, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test555()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[8];
      String string0 = StringUtils.stripAccents("Tr0hNO1_l.Fh,g&%");
      assertNotNull(string0);
      assertEquals("Tr0hNO1_l.Fh,g&%", string0);
      
      String string1 = "x[BEyAxx[BEyAx";
      String string2 = StringUtils.strip("9JJxZ<*lc_", "x[BEyAxx[BEyAx");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("9JJxZ<*lc_", string2);
      
      String string3 = "t>*r9M$IUC{cHnf_";
      // Undeclared exception!
      try { 
        StringUtils.replacePattern("Tr0hNO1_l.Fh,g&%", "q+Pup+'?X(S", " ");
        fail("Expecting exception: PatternSyntaxException");
      
      } catch(PatternSyntaxException e) {
         //
         // Unclosed group near index 11
         // q+Pup+'?X(S
         //
         verifyException("java.util.regex.Pattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test556()  throws Throwable  {
      String[] stringArray0 = StringUtils.split("x[BEyAx", "x[BEyAx");
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      boolean boolean0 = StringUtils.isWhitespace("x[BEyAx");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isAnyEmpty(stringArray0);
      assertTrue(boolean1 == boolean0);
      assertEquals(0, stringArray0.length);
      assertFalse(boolean1);
      
      String string0 = StringUtils.wrap("%0G6!wxhe", '3');
      assertNotNull(string0);
      assertEquals("3%0G6!wxhe3", string0);
      
      String[] stringArray1 = StringUtils.substringsBetween("4&>eS,$DPx-)v=h", "", "");
      assertNull(stringArray1);
      
      String[] stringArray2 = StringUtils.splitPreserveAllTokens("J`", "x[BEyAx");
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertNotSame(stringArray2, stringArray0);
      assertEquals(1, stringArray2.length);
      assertNotNull(stringArray2);
      
      // Undeclared exception!
      try { 
        StringUtils.replacePattern("zGiqL%uA|", "x[BEyAx", "J`");
        fail("Expecting exception: PatternSyntaxException");
      
      } catch(PatternSyntaxException e) {
         //
         // Unclosed character class near index 6
         // x[BEyAx
         //       ^
         //
         verifyException("java.util.regex.Pattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test557()  throws Throwable  {
      String string0 = StringUtils.removeEndIgnoreCase("t} NtV)0:on", "t} NtV)0:on");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.unwrap("t} NtV)0:on", "rV;|jPQJej");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("t} NtV)0:on", string1);
      
      String[] stringArray0 = StringUtils.substringsBetween("8", (String) null, "");
      assertNull(stringArray0);
      
      String string2 = StringUtils.wrapIfMissing("l", 'B');
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("BlB", string2);
  }

  @Test(timeout = 4000)
  public void test558()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("Strings must not be null", "K3", 101);
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string0 = StringUtils.substringBefore("Cannot clone Cloneable type ", "Strings must not be null");
      assertNotNull(string0);
      assertEquals("Cannot clone Cloneable type ", string0);
  }

  @Test(timeout = 4000)
  public void test559()  throws Throwable  {
      String string0 = StringUtils.substringBefore("#|pOToSH", "");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.wrap("n}}1g+cS/.;~,= E\"K@", 'n');
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("nn}}1g+cS/.;~,= E\"K@n", string1);
      
      String string2 = StringUtils.reverse("...");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("...", string2);
      
      String string3 = StringUtils.wrap("Array element ", '}');
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      assertEquals("}Array element }", string3);
      
      String string4 = StringUtils.center("n}}1g+cS/.;~,= E\"K@", 13, 'z');
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertNotNull(string4);
      assertEquals("n}}1g+cS/.;~,= E\"K@", string4);
      
      String string5 = StringUtils.capitalize(", Length: 0");
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertNotNull(string5);
      assertEquals(", Length: 0", string5);
  }

  @Test(timeout = 4000)
  public void test560()  throws Throwable  {
      String string0 = StringUtils.remove("P.ikGNWDF", "2I@uQsj3(");
      assertNotNull(string0);
      assertEquals("P.ikGNWDF", string0);
      
      int int0 = StringUtils.indexOf((CharSequence) "P.ikGNWDF", (-2272));
      assertEquals((-1), int0);
      
      String string1 = StringUtils.mid("P.ikGNWDF", (-2272), (-1));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
      
      boolean boolean0 = StringUtils.isAlphaSpace("2I@uQsj3(");
      assertFalse(boolean0);
      
      String string2 = StringUtils.leftPad("", (-1), "Array element ");
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("", string2);
      
      int int1 = StringUtils.indexOf((CharSequence) "P.ikGNWDF", (-1));
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      String string3 = StringUtils.removeStartIgnoreCase("-5y1iX{EX`M@KK#[b9", "P.ikGNWDF");
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      assertEquals("-5y1iX{EX`M@KK#[b9", string3);
      
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      String string4 = StringUtils.removeEndIgnoreCase("", "");
      assertFalse(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertNotNull(string4);
      assertEquals("", string4);
      
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "-5y1iX{EX`M@KK#[b9";
      charSequenceArray0[2] = (CharSequence) "";
      charSequenceArray0[3] = (CharSequence) "";
      charSequenceArray0[4] = (CharSequence) "2I@uQsj3(";
      String string5 = StringUtils.prependIfMissing("2I@uQsj3(", "-5y1iX{EX`M@KK#[b9", charSequenceArray0);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertEquals(5, charSequenceArray0.length);
      assertNotNull(string5);
      assertEquals("2I@uQsj3(", string5);
      
      int int2 = StringUtils.countMatches((CharSequence) "2I@uQsj3(", (CharSequence) "");
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(0, int2);
  }

  @Test(timeout = 4000)
  public void test561()  throws Throwable  {
      String string0 = StringUtils.abbreviateMiddle("UMtoj[Ox`C", "UMtoj[Ox`C", 435);
      assertNotNull(string0);
      assertEquals("UMtoj[Ox`C", string0);
      
      String string1 = StringUtils.substring("UMtoj[Ox`C", 84, 1435);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
  }

  @Test(timeout = 4000)
  public void test562()  throws Throwable  {
      String string0 = StringUtils.removeStart("q>m>z;1Ot>Ca", "}L~.");
      assertNotNull(string0);
      assertEquals("q>m>z;1Ot>Ca", string0);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "q>m>z;1Ot>Ca", (-3733), (-94));
      assertEquals((-1), int0);
      
      String string1 = StringUtils.substringBeforeLast("\r", "{#");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("\r", string1);
      
      String string2 = StringUtils.substringBefore("org.apache.", 23);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("org.apache.", string2);
  }

  @Test(timeout = 4000)
  public void test563()  throws Throwable  {
      Locale locale0 = Locale.ROOT;
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertNotNull(locale0);
      
      String string0 = StringUtils.wrap("Strings must not be null", "s#1e;u{aU\"uu2/h0");
      assertNotNull(string0);
      assertEquals("s#1e;u{aU\"uu2/h0Strings must not be nulls#1e;u{aU\"uu2/h0", string0);
  }

  @Test(timeout = 4000)
  public void test564()  throws Throwable  {
      String string0 = StringUtils.wrapIfMissing("%d=7wr7,/{8", '`');
      assertNotNull(string0);
      assertEquals("`%d=7wr7,/{8`", string0);
      
      String string1 = StringUtils.rightPad("rp$f", (-3760));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("rp$f", string1);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "rp$f", (CharSequence) "`%d=7wr7,/{8`");
      assertEquals((-1), int0);
      
      boolean boolean0 = StringUtils.isWhitespace("rp$f");
      assertFalse(boolean0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[7];
      charSequenceArray0[0] = (CharSequence) "rp$f";
      charSequenceArray0[1] = (CharSequence) "`%d=7wr7,/{8`";
      charSequenceArray0[3] = (CharSequence) "%d=7wr7,/{8";
      charSequenceArray0[4] = (CharSequence) "rp$f";
      charSequenceArray0[5] = (CharSequence) "`%d=7wr7,/{8`";
      charSequenceArray0[6] = (CharSequence) "rp$f";
      CharSequence charSequence0 = StringUtils.firstNonEmpty((CharSequence[]) null);
      assertNull(charSequence0);
      
      String string2 = StringUtils.appendIfMissing("^R#", "^R#", charSequenceArray0);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals(7, charSequenceArray0.length);
      assertNotNull(string2);
      assertEquals("^R#", string2);
      
      int int1 = StringUtils.lastIndexOf(charSequenceArray0[6], 34, 10);
      assertTrue(int1 == int0);
      assertEquals(7, charSequenceArray0.length);
      assertEquals((-1), int1);
      
      String string3 = StringUtils.substringBeforeLast("^R#", "`%d=7wr7,/{8`");
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      assertEquals("^R#", string3);
      
      String string4 = StringUtils.mid("MU02JN]i", 34, 11);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertNotNull(string4);
      assertEquals("", string4);
      
      String string5 = StringUtils.rightPad("rp$f", (-1381), 'f');
      assertTrue(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertNotNull(string5);
      assertEquals("rp$f", string5);
      
      String string6 = StringUtils.wrap("l{`", "'+4O:cD,`ri2Hx=,!");
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string5));
      assertNotNull(string6);
      assertEquals("'+4O:cD,`ri2Hx=,!l{`'+4O:cD,`ri2Hx=,!", string6);
  }

  @Test(timeout = 4000)
  public void test565()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = '$';
      Object object0 = new Object();
      assertNotNull(object0);
      
      String string0 = StringUtils.replaceChars("x[...x[BEyAxx[BEyAx", "x[...x[BEyAxx[BEyAx", "U&#d+Q2:1@P8Fpa8");
      assertNotNull(string0);
      assertEquals("U&###U&:1@PUU&:1@PU", string0);
  }

  @Test(timeout = 4000)
  public void test566()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      CharSequence charSequence0 = StringUtils.firstNonEmpty(charSequenceArray0);
      assertEquals(0, charSequenceArray0.length);
      assertNull(charSequence0);
      
      String string0 = StringUtils.replaceChars("kb>K:%lR&M+Fm2*/78", "kb>K:%lR&M+Fm2*/78", "");
      assertNotNull(string0);
      assertEquals("", string0);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "kb>K:%lR&M+Fm2*/78", (CharSequence) null);
      assertEquals((-1), int0);
      
      boolean boolean0 = StringUtils.containsIgnoreCase("", "kb>K:%lR&M+Fm2*/78");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test567()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      String string0 = StringUtils.repeat("MN+O9}+Lt|qQ", "Np*il\"9^", (-1));
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.replaceChars("Minimum abbreviation width with offset is %d", "Threshold must not be negative", "e*j)gaK");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("Mj)Kw*w*Kffg)g%", string1);
      
      char[] charArray0 = new char[7];
      charArray0[0] = '7';
      charArray0[1] = '';
      charArray0[2] = '(';
      charArray0[3] = '(';
      charArray0[4] = '(';
      charArray0[5] = '(';
      charArray0[6] = '}';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      assertEquals("7((((}", charBuffer0.toString());
      assertEquals(7, charBuffer0.length());
      assertEquals(0, charBuffer0.position());
      assertEquals(0, charBuffer0.arrayOffset());
      assertFalse(charBuffer0.isDirect());
      assertTrue(charBuffer0.hasArray());
      assertEquals(7, charBuffer0.remaining());
      assertEquals(7, charBuffer0.limit());
      assertEquals(7, charBuffer0.capacity());
      assertFalse(charBuffer0.isReadOnly());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(7, charArray0.length);
      assertNotNull(charBuffer0);
      assertArrayEquals(new char[] {'7', '', '(', '(', '(', '(', '}'}, charArray0);
      
      int int0 = (-2960);
      int int1 = (-1468);
      // Undeclared exception!
      try { 
        charBuffer0.get(charArray0, (-2960), (-1468));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test568()  throws Throwable  {
      String string0 = StringUtils.substringBetween("3cVDS7%sPY.d", "3cVDS7%sPY.d", "3cVDS7%sPY.d");
      assertNull(string0);
      
      String string1 = StringUtils.removeEnd((String) null, "3cVDS7%sPY.d");
      assertNull(string1);
      
      String string2 = StringUtils.abbreviate((String) null, "\"i'>C~djS{#V#", (-478), (-478));
      assertNull(string2);
  }

  @Test(timeout = 4000)
  public void test569()  throws Throwable  {
      String[] stringArray0 = StringUtils.split("x[BEyAx", "x[BEyAx");
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      boolean boolean0 = StringUtils.isWhitespace("x[BEyAx");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isAnyEmpty(stringArray0);
      assertTrue(boolean1 == boolean0);
      assertEquals(0, stringArray0.length);
      assertFalse(boolean1);
      
      boolean boolean2 = StringUtils.isNotBlank("x[BEyAx");
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2);
      
      boolean boolean3 = StringUtils.isAllEmpty(stringArray0);
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertEquals(0, stringArray0.length);
      assertTrue(boolean3);
      
      String string0 = StringUtils.removeEnd("x[BEyAx", "x[BEyAx");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.lowerCase("");
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
      
      String string2 = StringUtils.stripAccents("");
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("", string2);
      
      String string3 = StringUtils.stripEnd("NDG$T!NDG$T!", ":0");
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      assertEquals("NDG$T!NDG$T!", string3);
      
      String string4 = StringUtils.replace("Exception cloning Cloneable type ", "", "");
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertNotNull(string4);
      assertEquals("Exception cloning Cloneable type ", string4);
      
      boolean boolean4 = StringUtils.isAnyBlank(stringArray0);
      assertFalse(boolean4 == boolean2);
      assertFalse(boolean4 == boolean3);
      assertTrue(boolean4 == boolean0);
      assertTrue(boolean4 == boolean1);
      assertEquals(0, stringArray0.length);
      assertFalse(boolean4);
      
      String string5 = StringUtils.remove("", 'X');
      assertTrue(string5.equals((Object)string0));
      assertTrue(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertTrue(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertNotNull(string5);
      assertEquals("", string5);
  }

  @Test(timeout = 4000)
  public void test570()  throws Throwable  {
      String string0 = StringUtils.remove("QG$", '`');
      assertNotNull(string0);
      assertEquals("QG$", string0);
      
      String string1 = StringUtils.rotate("QG$", 51);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("QG$", string1);
  }

  @Test(timeout = 4000)
  public void test571()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      Locale locale0 = Locale.GERMANY;
      assertEquals("de_DE", locale0.toString());
      assertEquals("de", locale0.getLanguage());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("DE", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertNotNull(locale0);
      
      String string0 = StringUtils.stripStart("d 32767: [", "d 32767: [");
      assertNotNull(string0);
      assertEquals("", string0);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "d 32767: [", (CharSequence) "");
      assertEquals(10, int0);
      
      boolean boolean0 = StringUtils.equalsIgnoreCase("", "");
      assertTrue(boolean0);
      
      boolean boolean1 = StringUtils.isAnyEmpty((CharSequence[]) null);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test572()  throws Throwable  {
      String string0 = StringUtils.abbreviate("org.apache.commons.lang3.CharUtils", 1259);
      assertNotNull(string0);
      assertEquals("org.apache.commons.lang3.CharUtils", string0);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "org.apache.commons.lang3.CharUtils", (CharSequence) "org.apache.commons.lang3.CharUtils");
      assertEquals(0, int0);
      
      String string1 = StringUtils.uncapitalize("org.apache.commons.lang3.CharUtils");
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("org.apache.commons.lang3.CharUtils", string1);
      
      String string2 = StringUtils.trimToNull("=lnZ+IF/7U.pM");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("=lnZ+IF/7U.pM", string2);
  }

  @Test(timeout = 4000)
  public void test573()  throws Throwable  {
      byte[] byteArray0 = new byte[21];
      byteArray0[0] = (byte)57;
      byteArray0[1] = (byte)54;
      String string0 = StringUtils.join(byteArray0, '7');
      assertEquals(21, byteArray0.length);
      assertNotNull(string0);
      assertEquals("5775470707070707070707070707070707070707070", string0);
      
      boolean boolean0 = StringUtils.containsNone((CharSequence) "5775470707070707070707070707070707070707070", "5775470707070707070707070707070707070707070");
      assertFalse(boolean0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens((String) null, (String) null);
      assertNull(stringArray0);
      
      String string1 = StringUtils.join((Object[]) null, '7');
      assertNull(string1);
  }

  @Test(timeout = 4000)
  public void test574()  throws Throwable  {
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short)5;
      shortArray0[2] = (short)5;
      String string0 = StringUtils.rightPad("R'1thk", (int) (short)5, "null/empty items");
      assertNotNull(string0);
      assertEquals("R'1thk", string0);
      
      String string1 = StringUtils.center("null/empty items", (int) (short)5, "null/empty items");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("null/empty items", string1);
      
      Locale locale0 = Locale.US;
      assertEquals("en_US", locale0.toString());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("US", locale0.getCountry());
      assertNotNull(locale0);
      
      String string2 = StringUtils.removeStartIgnoreCase("R'1thk", "null/empty items");
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("R'1thk", string2);
      
      int int0 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      char[] charArray0 = new char[1];
      charArray0[0] = '+';
      boolean boolean0 = StringUtils.containsNone((CharSequence) "R'1thk", charArray0);
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'+'}, charArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test575()  throws Throwable  {
      String string0 = StringUtils.unwrap("object", "GdO[htbw}6Mc6.@E#)");
      assertNotNull(string0);
      assertEquals("object", string0);
      
      String string1 = StringUtils.getDigits("^/9");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("9", string1);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("3i;x>Fw6i");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "object", (CharSequence) "object");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test576()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[8];
      float[] floatArray0 = new float[5];
      floatArray0[0] = (-1.0F);
      floatArray0[1] = (-412.24F);
      floatArray0[2] = 1.0F;
      floatArray0[3] = (-2592.4207F);
      floatArray0[4] = (-2730.193F);
      String string0 = StringUtils.join(floatArray0, 'x');
      assertEquals(5, floatArray0.length);
      assertNotNull(string0);
      assertArrayEquals(new float[] {(-1.0F), (-412.24F), 1.0F, (-2592.4207F), (-2730.193F)}, floatArray0, 0.01F);
      assertEquals("-1.0x-412.24x1.0x-2592.4207x-2730.193", string0);
      
      charSequenceArray0[0] = (CharSequence) "-1.0x-412.24x1.0x-2592.4207x-2730.193";
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "-1.0x-412.24x1.0x-2592.4207x-2730.193");
      assertEquals("-1.0x-412.24x1.0x-2592.4207x-2730.193", charBuffer0.toString());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.hasArray());
      assertFalse(charBuffer0.isDirect());
      assertEquals(37, charBuffer0.remaining());
      assertEquals(37, charBuffer0.capacity());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(37, charBuffer0.length());
      assertTrue(charBuffer0.isReadOnly());
      assertEquals(37, charBuffer0.limit());
      assertNotNull(charBuffer0);
      
      charSequenceArray0[1] = (CharSequence) charBuffer0;
      String[] stringArray0 = new String[12];
      stringArray0[0] = "-1.0x-412.24x1.0x-2592.4207x-2730.193";
      stringArray0[1] = "-1.0x-412.24x1.0x-2592.4207x-2730.193";
      stringArray0[2] = "-1.0x-412.24x1.0x-2592.4207x-2730.193";
      stringArray0[3] = "-1.0x-412.24x1.0x-2592.4207x-2730.193";
      stringArray0[4] = "";
      stringArray0[5] = "-1.0x-412.24x1.0x-2592.4207x-2730.193";
      stringArray0[6] = "-1.0x-412.24x1.0x-2592.4207x-2730.193";
      stringArray0[7] = "-1.0x-412.24x1.0x-2592.4207x-2730.193";
      stringArray0[8] = "-1.0x-412.24x1.0x-2592.4207x-2730.193";
      String string1 = StringUtils.getCommonPrefix(stringArray0);
      assertFalse(string1.equals((Object)string0));
      assertEquals(12, stringArray0.length);
      assertNotNull(string1);
      assertEquals("", string1);
      
      charSequenceArray0[2] = (CharSequence) "";
      String string2 = StringUtils.leftPad("", 1712);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      charSequenceArray0[3] = (CharSequence) string2;
      String string3 = StringUtils.chop("WI");
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      assertEquals("W", string3);
      
      charSequenceArray0[4] = (CharSequence) "W";
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      assertFalse(linkedList0.contains(1.0F));
      
      String string4 = StringUtils.join((List<?>) linkedList0, "-1.0x-412.24x1.0x-2592.4207x-2730.193", 1712, 1712);
      assertEquals(0, linkedList0.size());
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertNotNull(string4);
      assertFalse(linkedList0.contains(1.0F));
      assertEquals("", string4);
      
      charSequenceArray0[5] = (CharSequence) "";
      String string5 = StringUtils.repeat("aX", "-1.0x-412.24x1.0x-2592.4207x-2730.193", 3);
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertNotNull(string5);
      assertEquals("aX-1.0x-412.24x1.0x-2592.4207x-2730.193aX-1.0x-412.24x1.0x-2592.4207x-2730.193aX", string5);
      
      charSequenceArray0[6] = (CharSequence) "aX-1.0x-412.24x1.0x-2592.4207x-2730.193aX-1.0x-412.24x1.0x-2592.4207x-2730.193aX";
      String string6 = StringUtils.upperCase("", (Locale) null);
      assertTrue(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string2));
      assertTrue(string6.equals((Object)string4));
      assertNotNull(string6);
      assertEquals("", string6);
      
      charSequenceArray0[7] = (CharSequence) "";
      boolean boolean0 = StringUtils.isAnyEmpty(charSequenceArray0);
      assertEquals(8, charSequenceArray0.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test577()  throws Throwable  {
      Locale locale0 = Locale.ROOT;
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertNotNull(locale0);
      
      String string0 = StringUtils.replaceChars("object", ';', 'B');
      assertNotNull(string0);
      assertEquals("object", string0);
  }

  @Test(timeout = 4000)
  public void test578()  throws Throwable  {
      String string0 = StringUtils.LF;
      assertNotNull(string0);
      assertEquals("\n", string0);
      
      int int0 = StringUtils.indexOfDifference((CharSequence) "\n", (CharSequence) "\n");
      assertEquals((-1), int0);
      
      String string1 = StringUtils.capitalize("");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
      
      String string2 = StringUtils.wrapIfMissing("MN+O9}+Lt|qQ", 'M');
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("MN+O9}+Lt|qQM", string2);
      
      String string3 = StringUtils.capitalize("");
      assertTrue(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      assertEquals("", string3);
      
      String string4 = StringUtils.repeat("Threshold must not be negative", "org.apache.commons.lang3.StringUtils", 1223);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertNotNull(string4);
      
      String string5 = StringUtils.mid("Threshold must not be negative", (-495), 3);
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertNotNull(string5);
      assertEquals("Thr", string5);
      
      String string6 = StringUtils.stripToNull("The String must not be empty");
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string1));
      assertNotNull(string6);
      assertEquals("The String must not be empty", string6);
      
      String string7 = StringUtils.replaceChars("", 'r', 'M');
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string0));
      assertTrue(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string2));
      assertTrue(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string6));
      assertNotNull(string7);
      assertEquals("", string7);
      
      int int1 = StringUtils.indexOfIgnoreCase((CharSequence) "", (CharSequence) "", 1886);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens(string4, "MN+O9}+Lt|qQ");
      assertFalse(string4.equals((Object)string7));
      assertFalse(string4.equals((Object)string6));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string5));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test579()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[0] = null;
      charSequenceArray0[1] = null;
      int int0 = StringUtils.indexOfAny((CharSequence) null, charSequenceArray0);
      assertEquals(2, charSequenceArray0.length);
      assertEquals((-1), int0);
      
      String string0 = StringUtils.removeStart("NDG$T!", "NDG$T!");
      assertNotNull(string0);
      assertEquals("", string0);
      
      int int1 = StringUtils.indexOfDifference(charSequenceArray0[1], (CharSequence) "");
      assertFalse(int1 == int0);
      assertEquals(2, charSequenceArray0.length);
      assertEquals(0, int1);
      
      boolean boolean0 = StringUtils.isAsciiPrintable(charSequenceArray0[1]);
      assertEquals(2, charSequenceArray0.length);
      assertFalse(boolean0);
      
      int int2 = StringUtils.countMatches((CharSequence) "", '[');
      assertTrue(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(0, int2);
      
      String string1 = StringUtils.substring(" ", 0, (-1));
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
      
      String string2 = StringUtils.abbreviateMiddle("", (String) null, (-214));
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("", string2);
      
      String string3 = StringUtils.replaceChars("xg", "", "AHa$`rVej^X[Fd,\"gm");
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      assertEquals("xg", string3);
      
      char[] charArray0 = new char[1];
      charArray0[0] = '[';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      assertEquals(0, charBuffer0.position());
      assertEquals(1, charBuffer0.limit());
      assertTrue(charBuffer0.hasArray());
      assertEquals(1, charBuffer0.remaining());
      assertEquals(0, charBuffer0.arrayOffset());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals("[", charBuffer0.toString());
      assertEquals(1, charBuffer0.capacity());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(1, charBuffer0.length());
      assertFalse(charBuffer0.isDirect());
      assertEquals(1, charArray0.length);
      assertNotNull(charBuffer0);
      assertArrayEquals(new char[] {'['}, charArray0);
      
      // Undeclared exception!
      try { 
        charBuffer0.get(charArray0, (-847), 115);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test580()  throws Throwable  {
      String string0 = StringUtils.replaceChars("clone", "^dgpRZ`I sa.xE ", "Locale must not be null");
      assertNotNull(string0);
      assertEquals("clone", string0);
  }

  @Test(timeout = 4000)
  public void test581()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = 'Q';
      String string0 = StringUtils.lowerCase((String) null);
      assertNull(string0);
      
      String string1 = StringUtils.unwrap((String) null, "y`eQ#hS4o[A");
      assertNull(string1);
      
      String string2 = StringUtils.replaceChars("GdO[htbw}6Mc6.@E#)", (String) null, (String) null);
      assertNotNull(string2);
      assertEquals("GdO[htbw}6Mc6.@E#)", string2);
      
      boolean boolean0 = StringUtils.contains((CharSequence) null, (CharSequence) "GdO[htbw}6Mc6.@E#)");
      assertFalse(boolean0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      charSequenceArray0[0] = (CharSequence) "GdO[htbw}6Mc6.@E#)";
      charSequenceArray0[1] = (CharSequence) "y`eQ#hS4o[A";
      charSequenceArray0[2] = (CharSequence) "y`eQ#hS4o[A";
      charSequenceArray0[3] = (CharSequence) null;
      boolean boolean1 = StringUtils.containsAny((CharSequence) null, charSequenceArray0);
      assertTrue(boolean1 == boolean0);
      assertEquals(4, charSequenceArray0.length);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test582()  throws Throwable  {
      String string0 = StringUtils.leftPad("x[BEyAx", (int) 'g', 'g');
      assertNotNull(string0);
      assertEquals("ggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggx[BEyAx", string0);
      
      String[] stringArray0 = Locale.getISOLanguages();
      assertEquals(188, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string1 = StringUtils.rightPad("ggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggx[BEyAx", (int) 'g', "x[BEyAx");
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("ggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggx[BEyAx", string1);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      String string2 = StringUtils.join((Object[]) stringArray0, (String) null);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals(188, stringArray0.length);
      assertNotNull(string2);
      assertEquals("aaabaeafakamanarasavayazbabebgbhbibmbnbobrbscacechcocrcscucvcydadedvdzeeeleneoeseteufafffifjfofrfygagdglgngugvhahehihohrhthuhyhziaidieigiiikinioisitiuiwjajijvkakgkikjkkklkmknkokrkskukvkwkylalblglilnloltlulvmgmhmimkmlmnmomrmsmtmynanbndnengnlnnnonrnvnyocojomorospapiplpsptqurmrnrorurwsascsdsesgsiskslsmsnsosqsrssstsusvswtatetgthtitktltntotrtstttwtyugukuruzvevivowawoxhyiyozazhzu", string2);
      
      boolean boolean0 = StringUtils.isAllLowerCase((CharSequence) null);
      assertFalse(boolean0);
      
      String string3 = StringUtils.defaultIfEmpty("ggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggx[BEyAx", "ggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggx[BEyAx");
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string1));
      assertNotNull(string3);
      assertEquals("ggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggx[BEyAx", string3);
      
      boolean boolean1 = StringUtils.isMixedCase("ggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggx[BEyAx");
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test583()  throws Throwable  {
      int[] intArray0 = new int[0];
      String string0 = StringUtils.join(intArray0, 'z', 1757, 438);
      assertEquals(0, intArray0.length);
      assertNotNull(string0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals("", string0);
      
      String string1 = StringUtils.unwrap("maxWith cannot be negative", "");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("maxWith cannot be negative", string1);
      
      String string2 = StringUtils.removeStart("sKxo<J", "sKxo<J");
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("", string2);
      
      String string3 = StringUtils.join(intArray0, 'z', 1757, 438);
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string2));
      assertEquals(0, intArray0.length);
      assertNotNull(string3);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals("", string3);
      
      boolean boolean0 = StringUtils.isBlank("");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test584()  throws Throwable  {
      String string0 = StringUtils.stripStart("", "");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.difference("", "ft{X&Y9ufPzlOW+5#");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("ft{X&Y9ufPzlOW+5#", string1);
      
      int int0 = StringUtils.countMatches((CharSequence) "ft{X&Y9ufPzlOW+5#", 'A');
      assertEquals(0, int0);
      
      String string2 = StringUtils.stripEnd("9H", "YM");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("9H", string2);
      
      CharSequence[] charSequenceArray0 = new CharSequence[8];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "ft{X&Y9ufPzlOW+5#";
      charSequenceArray0[2] = (CharSequence) "9H";
      charSequenceArray0[3] = (CharSequence) "";
      String string3 = StringUtils.reverseDelimited((String) null, 'A');
      assertNull(string3);
      
      charSequenceArray0[4] = (CharSequence) null;
      charSequenceArray0[5] = (CharSequence) "";
      charSequenceArray0[6] = (CharSequence) "ft{X&Y9ufPzlOW+5#";
      charSequenceArray0[7] = (CharSequence) "";
      int int1 = StringUtils.indexOfAny((CharSequence) "ft{X&Y9ufPzlOW+5#", charSequenceArray0);
      assertTrue(int1 == int0);
      assertEquals(8, charSequenceArray0.length);
      assertEquals(0, int1);
  }

  @Test(timeout = 4000)
  public void test585()  throws Throwable  {
      String[] stringArray0 = StringUtils.split(" ");
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      int int0 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      long[] longArray0 = new long[7];
      longArray0[0] = 0L;
      longArray0[1] = 1L;
      longArray0[2] = (long) (-1);
      longArray0[3] = (long) (-1);
      longArray0[4] = (-1125L);
      longArray0[5] = (long) (-1);
      longArray0[1] = (long) (-1);
      String string0 = StringUtils.join(longArray0, 'v');
      assertEquals(7, longArray0.length);
      assertNotNull(string0);
      assertArrayEquals(new long[] {0L, (-1L), (-1L), (-1L), (-1125L), (-1L), 0L}, longArray0);
      assertEquals("0v-1v-1v-1v-1125v-1v0", string0);
      
      String string1 = StringUtils.abbreviateMiddle(" ", "Invalid locale format: ", (-1));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(" ", string1);
      
      boolean boolean0 = StringUtils.equalsAny(" ", stringArray0);
      assertEquals(0, stringArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test586()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = '8';
      String string0 = StringUtils.substringAfterLast("K\"#<QxH7'0l|n", "K\"#<QxH7'0l|n");
      assertNotNull(string0);
      assertEquals("", string0);
      
      boolean boolean0 = StringUtils.containsAny((CharSequence) "", charArray0);
      assertEquals(5, charArray0.length);
      assertArrayEquals(new char[] {'8', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertFalse(boolean0);
      
      String string1 = StringUtils.deleteWhitespace("...");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("...", string1);
      
      String string2 = StringUtils.stripAccents("...");
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("...", string2);
      
      String string3 = StringUtils.stripToNull("");
      assertNull(string3);
      
      boolean boolean1 = StringUtils.contains((CharSequence) "...", (CharSequence) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test587()  throws Throwable  {
      String[] stringArray0 = StringUtils.split(" ");
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      int int0 = StringUtils.compareIgnoreCase(" ", " ");
      assertEquals(0, int0);
      
      boolean boolean0 = StringUtils.isAlpha(" ");
      assertFalse(boolean0);
      
      String string0 = StringUtils.appendIfMissing("", "", stringArray0);
      assertEquals(0, stringArray0.length);
      assertNotNull(string0);
      assertEquals("", string0);
      
      String[] stringArray1 = StringUtils.splitPreserveAllTokens(" ", " ");
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray1, stringArray0);
      assertEquals(2, stringArray1.length);
      assertNotNull(stringArray1);
      
      Locale locale0 = Locale.ROOT;
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.toString());
      assertNotNull(locale0);
      
      String string1 = StringUtils.removeStart("\"-U/3tvEZiq'", "{2sv8\"C@0,5Sg8FRS");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("\"-U/3tvEZiq'", string1);
  }

  @Test(timeout = 4000)
  public void test588()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      Locale locale0 = Locale.GERMANY;
      assertEquals("de_DE", locale0.toString());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("DE", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("de", locale0.getLanguage());
      assertEquals("DEU", locale0.getISO3Country());
      assertNotNull(locale0);
      
      String string0 = locale0.getDisplayCountry();
      assertEquals("de_DE", locale0.toString());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("DE", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("de", locale0.getLanguage());
      assertEquals("DEU", locale0.getISO3Country());
      assertNotNull(string0);
      assertEquals("Germany", string0);
      
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      assertEquals("de_DE", locale0.toString());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("DE", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("de", locale0.getLanguage());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertNotNull(set0);
      assertFalse(set0.contains(string0));
      
      String string1 = StringUtils.mid("]\"", (-3220), 32);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("]\"", string1);
      
      String string2 = StringUtils.rightPad("", (-1), 'j');
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("", string2);
      
      String string3 = StringUtils.wrap(" ", "");
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      assertEquals(" ", string3);
      
      String string4 = StringUtils.lowerCase("maxWith cannot be negative");
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertNotNull(string4);
      assertEquals("maxwith cannot be negative", string4);
  }

  @Test(timeout = 4000)
  public void test589()  throws Throwable  {
      String string0 = StringUtils.join((boolean[]) null, '>');
      assertNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[0] = (CharSequence) null;
      charSequenceArray0[1] = (CharSequence) null;
      boolean boolean0 = StringUtils.isAnyEmpty(charSequenceArray0);
      assertEquals(2, charSequenceArray0.length);
      assertTrue(boolean0);
      
      int int0 = StringUtils.indexOfAny(charSequenceArray0[0], charSequenceArray0);
      assertEquals(2, charSequenceArray0.length);
      assertEquals((-1), int0);
      
      int int1 = StringUtils.indexOf(charSequenceArray0[0], (-1));
      assertTrue(int1 == int0);
      assertEquals(2, charSequenceArray0.length);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test590()  throws Throwable  {
      String string0 = StringUtils.stripToNull("Strings must not be null");
      assertNotNull(string0);
      assertEquals("Strings must not be null", string0);
      
      // Undeclared exception!
      try { 
        StringUtils.toString((byte[]) null, ":s7$;\"4g");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // :s7$;\"4g
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test591()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      String string0 = StringUtils.trimToEmpty("\n");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparator("", "\r", (-1));
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "\r", "\r");
      assertEquals(0, int0);
      
      String string1 = StringUtils.difference("Threshold must not be negative", "Locale must not be null");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("Locale must not be null", string1);
  }

  @Test(timeout = 4000)
  public void test592()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[0] = null;
      charSequenceArray0[1] = null;
      int int0 = StringUtils.indexOfAny((CharSequence) null, charSequenceArray0);
      assertEquals(2, charSequenceArray0.length);
      assertEquals((-1), int0);
      
      String string0 = StringUtils.removeStart("NDG$T!", "NDG$T!");
      assertNotNull(string0);
      assertEquals("", string0);
      
      int int1 = StringUtils.indexOfDifference(charSequenceArray0[1], (CharSequence) "");
      assertFalse(int1 == int0);
      assertEquals(2, charSequenceArray0.length);
      assertEquals(0, int1);
      
      boolean boolean0 = StringUtils.isAsciiPrintable(charSequenceArray0[1]);
      assertEquals(2, charSequenceArray0.length);
      assertFalse(boolean0);
      
      int int2 = StringUtils.countMatches((CharSequence) "", '[');
      assertTrue(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(0, int2);
      
      String string1 = StringUtils.lowerCase("e*j)gaK");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("e*j)gak", string1);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparator("Minimum abbreviation width is %d", "%cf]l:uy>#-V", 0);
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test593()  throws Throwable  {
      String string0 = StringUtils.removeFirst("^z>", "...");
      assertNotNull(string0);
      assertEquals("", string0);
      
      int int0 = StringUtils.countMatches((CharSequence) "", 'N');
      assertEquals(0, int0);
      
      double[] doubleArray0 = new double[0];
      String string1 = StringUtils.LF;
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("\n", string1);
      
      String string2 = StringUtils.replaceFirst("^z>", "\n", "...");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("^z>", string2);
  }

  @Test(timeout = 4000)
  public void test594()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      String string0 = StringUtils.join(booleanArray0, '7', 8192, 13);
      assertEquals(5, booleanArray0.length);
      assertNotNull(string0);
      assertTrue(Arrays.equals(new boolean[] {true, true, false, true, true}, booleanArray0));
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test595()  throws Throwable  {
      String string0 = StringUtils.chomp("aX-1.0x-412.24x1.0x-2592.4207x-2730.193aX-1.0x-412.24x1.0x-2592.4207x-2730.193aX-1.0x-412.24x1.0x-2592.4207x-2730.193-1.0x-412.24x1.0x-2592.4207x-2730.193", "aX-1.0x-412.24x1.0x-2592.4207x-2730.193aX-1.0x-412.24x1.0x-2592.4207x-2730.193aX-1.0x-412.24x1.0x-2592.4207x-2730.193-1.0x-412.24x1.0x-2592.4207x-2730.193");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.capitalize("nt ");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("Nt ", string1);
      
      String string2 = StringUtils.replace("nt ", " is not in the range '0' - '9'", "");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("nt ", string2);
      
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      charSequenceArray0[0] = (CharSequence) "maxWith cannot be negative";
      charSequenceArray0[1] = (CharSequence) "";
      charSequenceArray0[2] = (CharSequence) "aX-1.0x-412.24x1.0x-2592.4207x-2730.193aX-1.0x-412.24x1.0x-2592.4207x-2730.193aX-1.0x-412.24x1.0x-2592.4207x-2730.193-1.0x-412.24x1.0x-2592.4207x-2730.193";
      boolean boolean0 = StringUtils.equalsAny("nt ", charSequenceArray0);
      assertEquals(3, charSequenceArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test596()  throws Throwable  {
      Object[] objectArray0 = new Object[5];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      String string0 = StringUtils.replaceChars("e*j)gaK", "-^(.", "-^(.");
      assertNotNull(string0);
      assertEquals("e*j)gaK", string0);
      
      char char0 = '7';
      char[] charArray0 = new char[2];
      charArray0[0] = '7';
      charArray0[1] = '7';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(2, charBuffer0.capacity());
      assertEquals("77", charBuffer0.toString());
      assertEquals(2, charBuffer0.length());
      assertEquals(2, charBuffer0.remaining());
      assertTrue(charBuffer0.hasArray());
      assertEquals(2, charBuffer0.limit());
      assertEquals(0, charBuffer0.position());
      assertTrue(charBuffer0.hasRemaining());
      assertFalse(charBuffer0.isDirect());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(2, charArray0.length);
      assertNotNull(charBuffer0);
      assertArrayEquals(new char[] {'7', '7'}, charArray0);
      
      // Undeclared exception!
      try { 
        charBuffer0.get(charArray0, (-1464), (-1464));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test597()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      Locale locale0 = Locale.GERMANY;
      assertEquals("de_DE", locale0.toString());
      assertEquals("DE", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("de", locale0.getLanguage());
      assertNotNull(locale0);
      
      String string0 = locale0.toLanguageTag();
      assertEquals("de_DE", locale0.toString());
      assertEquals("DE", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("de", locale0.getLanguage());
      assertNotNull(string0);
      assertEquals("de-DE", string0);
      
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      assertEquals("de_DE", locale0.toString());
      assertEquals("DE", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("de", locale0.getLanguage());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertNotNull(set0);
      assertFalse(set0.contains(string0));
      
      byte[] byteArray0 = new byte[0];
      String string1 = StringUtils.join(byteArray0, 's', (-1), (-1));
      assertFalse(string1.equals((Object)string0));
      assertEquals(0, byteArray0.length);
      assertNotNull(string1);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals("", string1);
      
      int int0 = StringUtils.indexOfDifference((CharSequence) " ", (CharSequence) "");
      assertEquals(0, int0);
      
      String[] stringArray0 = StringUtils.split("", "F,*h/_\"B");
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      int int1 = StringUtils.indexOfIgnoreCase((CharSequence) "\n", (CharSequence) "\n", (-1));
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      
      ArrayList<CharBuffer> arrayList0 = new ArrayList<CharBuffer>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      String string2 = StringUtils.join((List<?>) arrayList0, 'O', 1, 0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("", string2);
      
      boolean boolean0 = StringUtils.isWhitespace("");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test598()  throws Throwable  {
      String string0 = StringUtils.capitalize("");
      assertNotNull(string0);
      assertEquals("", string0);
      
      boolean boolean0 = StringUtils.isAnyEmpty((CharSequence[]) null);
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isAnyEmpty((CharSequence[]) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test599()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[9];
      String string0 = StringUtils.strip("org.apache.commons.lang3.RegExUtils");
      assertNotNull(string0);
      assertEquals("org.apache.commons.lang3.RegExUtils", string0);
      
      charSequenceArray0[2] = (CharSequence) "org.apache.commons.lang3.RegExUtils";
      charSequenceArray0[1] = (CharSequence) "org.apache.commons.lang3.RegExUtils";
      charSequenceArray0[2] = (CharSequence) "org.apache.commons.lang3.RegExUtils";
      charSequenceArray0[3] = (CharSequence) "org.apache.commons.lang3.RegExUtils";
      charSequenceArray0[4] = (CharSequence) "org.apache.commons.lang3.RegExUtils";
      Object object0 = new Object();
      assertNotNull(object0);
      
      String string1 = StringUtils.replaceChars("", "y9AUbzXNCY:Bk] *vS", "org.apache.commons.lang3.RegExUtils");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
      
      boolean boolean0 = StringUtils.isMixedCase("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test600()  throws Throwable  {
      String string0 = StringUtils.LF;
      assertNotNull(string0);
      assertEquals("\n", string0);
      
      int int0 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      String string1 = StringUtils.capitalize("");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
      
      String string2 = StringUtils.wrapIfMissing("MN+O9}+Lt|qQ", 'M');
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("MN+O9}+Lt|qQM", string2);
      
      String string3 = StringUtils.capitalize("");
      assertTrue(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      assertEquals("", string3);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      String string4 = StringUtils.replaceChars("", "", "");
      assertTrue(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertNotNull(string4);
      assertEquals("", string4);
  }

  @Test(timeout = 4000)
  public void test601()  throws Throwable  {
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short)2127;
      String string0 = StringUtils.lowerCase("WrY?-%aiOjE:6R`pVB6");
      assertNotNull(string0);
      assertEquals("wry?-%aioje:6r`pvb6", string0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparator("&vQ8#A5?^S", "&vQ8#A5?^S", (int) (short)2127);
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test602()  throws Throwable  {
      String string0 = StringUtils.trimToEmpty(":W3vjMB@");
      assertNotNull(string0);
      assertEquals(":W3vjMB@", string0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparator(":W3vjMB@", ":W3vjMB@", 0);
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string1 = StringUtils.strip("s?m(/");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("s?m(/", string1);
      
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertNotNull(linkedHashSet0);
      assertFalse(linkedHashSet0.contains(":W3vjMB@"));
      
      boolean boolean0 = linkedHashSet0.add("pk?9bG");
      assertEquals(1, linkedHashSet0.size());
      assertFalse(linkedHashSet0.isEmpty());
      assertTrue(linkedHashSet0.contains("pk?9bG"));
      assertFalse(linkedHashSet0.contains(":W3vjMB@"));
      assertTrue(boolean0);
      
      boolean boolean1 = linkedHashSet0.add((String) null);
      assertFalse(linkedHashSet0.isEmpty());
      assertEquals(2, linkedHashSet0.size());
      assertTrue(boolean1 == boolean0);
      assertTrue(linkedHashSet0.contains("pk?9bG"));
      assertFalse(linkedHashSet0.contains(":W3vjMB@"));
      assertTrue(boolean1);
      
      boolean boolean2 = linkedHashSet0.add((String) null);
      assertFalse(linkedHashSet0.isEmpty());
      assertEquals(2, linkedHashSet0.size());
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertTrue(linkedHashSet0.contains("pk?9bG"));
      assertFalse(linkedHashSet0.contains(":W3vjMB@"));
      assertFalse(boolean2);
      
      String string2 = StringUtils.join((Iterable<?>) linkedHashSet0, "");
      assertFalse(linkedHashSet0.isEmpty());
      assertEquals(2, linkedHashSet0.size());
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertTrue(linkedHashSet0.contains("pk?9bG"));
      assertFalse(linkedHashSet0.contains(":W3vjMB@"));
      assertEquals("pk?9bG", string2);
      
      String string3 = StringUtils.deleteWhitespace("s?m(/");
      assertTrue(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      assertEquals("s?m(/", string3);
  }

  @Test(timeout = 4000)
  public void test603()  throws Throwable  {
      String string0 = StringUtils.substring("", (-2854));
      assertNotNull(string0);
      assertEquals("", string0);
      
      boolean boolean0 = StringUtils.equalsIgnoreCase("", "");
      assertTrue(boolean0);
      
      String string1 = StringUtils.reverse("");
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'p';
      char char0 = 'w';
      charArray0[1] = 'w';
      char char1 = '0';
      charArray0[2] = '0';
      char char2 = 'O';
      charArray0[3] = 'O';
      boolean boolean1 = StringUtils.containsAny((CharSequence) "", charArray0);
      assertFalse(boolean1 == boolean0);
      assertEquals(4, charArray0.length);
      assertArrayEquals(new char[] {'p', 'w', '0', 'O'}, charArray0);
      assertFalse(boolean1);
      
      boolean boolean2 = StringUtils.startsWithIgnoreCase("", "");
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2);
      
      boolean boolean3 = StringUtils.isEmpty("");
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3);
      
      String string2 = StringUtils.strip("9S[", "");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("9S[", string2);
      
      boolean boolean4 = StringUtils.containsAny((CharSequence) "9S[", charArray0);
      assertFalse(boolean4 == boolean3);
      assertTrue(boolean4 == boolean1);
      assertFalse(boolean4 == boolean0);
      assertFalse(boolean4 == boolean2);
      assertEquals(4, charArray0.length);
      assertArrayEquals(new char[] {'p', 'w', '0', 'O'}, charArray0);
      assertFalse(boolean4);
      
      String string3 = StringUtils.upperCase("9S[");
      assertTrue(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      assertEquals("9S[", string3);
      
      CharBuffer[] charBufferArray0 = new CharBuffer[1];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      assertFalse(charBuffer0.isReadOnly());
      assertEquals("pw0O", charBuffer0.toString());
      assertEquals(4, charBuffer0.capacity());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(4, charBuffer0.limit());
      assertEquals(4, charBuffer0.length());
      assertTrue(charBuffer0.hasArray());
      assertTrue(charBuffer0.hasRemaining());
      assertFalse(charBuffer0.isDirect());
      assertEquals(4, charBuffer0.remaining());
      assertEquals(0, charBuffer0.position());
      assertEquals(4, charArray0.length);
      assertNotNull(charBuffer0);
      assertArrayEquals(new char[] {'p', 'w', '0', 'O'}, charArray0);
      
      // Undeclared exception!
      try { 
        charBuffer0.append((CharSequence) "", (-628), (-2854));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test604()  throws Throwable  {
      String string0 = StringUtils.upperCase("Search and Replace array lengths don't match: ");
      assertNotNull(string0);
      assertEquals("SEARCH AND REPLACE ARRAY LENGTHS DON'T MATCH: ", string0);
      
      char[] charArray0 = new char[0];
      boolean boolean0 = StringUtils.containsAny((CharSequence) "SEARCH AND REPLACE ARRAY LENGTHS DON'T MATCH: ", charArray0);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      assertFalse(boolean0);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("SEARCH AND REPLACE ARRAY LENGTHS DON'T MATCH: ", (String) null);
      assertEquals(8, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string1 = null;
      String string2 = StringUtils.chomp("Search and Replace array lengths don't match: ", (String) null);
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("Search and Replace array lengths don't match: ", string2);
      
      // Undeclared exception!
      try { 
        StringUtils.getJaroWinklerDistance("Search and Replace array lengths don't match: ", (CharSequence) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test605()  throws Throwable  {
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      Spliterator<Object> spliterator0 = arrayList0.spliterator();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(spliterator0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = arrayList0.add(object0);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertTrue(arrayList0.contains(object0));
      assertTrue(boolean0);
      
      boolean boolean1 = arrayList0.add((Object) null);
      assertEquals(2, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertTrue(boolean1 == boolean0);
      assertTrue(arrayList0.contains(object0));
      assertTrue(boolean1);
      
      String string0 = StringUtils.join((List<?>) arrayList0, "%cf]l:uy>#-V", 5010, 5010);
      assertEquals(2, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertNotNull(string0);
      assertFalse(arrayList0.contains(5010));
      assertTrue(arrayList0.contains(object0));
      assertEquals("", string0);
      
      String string1 = StringUtils.substringAfterLast((String) null, (String) null);
      assertNull(string1);
      
      String string2 = StringUtils.repeat("", (-3371));
      assertNotNull(string2);
      assertEquals("", string2);
      
      TreeSet<Integer> treeSet0 = new TreeSet<Integer>();
      assertNotNull(treeSet0);
      assertFalse(treeSet0.contains(5010));
      
      Iterator<Integer> iterator0 = treeSet0.descendingIterator();
      assertNotNull(iterator0);
      assertFalse(treeSet0.contains(5010));
      
      String string3 = StringUtils.join(iterator0, (String) null);
      assertNotNull(string3);
      assertFalse(treeSet0.contains(5010));
      assertEquals("", string3);
      
      String[] stringArray0 = new String[5];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = null;
      stringArray0[3] = null;
      stringArray0[4] = null;
      String string4 = StringUtils.firstNonBlank(stringArray0);
      assertEquals(5, stringArray0.length);
      assertNull(string4);
      
      boolean boolean2 = StringUtils.isWhitespace("");
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)50;
      byteArray0[1] = (byte) (-80);
      byteArray0[2] = (byte)10;
      byteArray0[3] = (byte) (-11);
      byteArray0[4] = (byte)69;
      // Undeclared exception!
      try { 
        StringUtils.join(byteArray0, 't', (-3371), (int) (byte)10);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -3371
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test606()  throws Throwable  {
      int int0 = StringUtils.compare("...", "...", true);
      assertEquals(0, int0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      boolean boolean0 = StringUtils.containsAnyIgnoreCase("Kv9XcM", charSequenceArray0);
      assertEquals(0, charSequenceArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test607()  throws Throwable  {
      String string0 = StringUtils.toRootLowerCase("aqr%Nr\"5^39(n#*");
      assertNotNull(string0);
      assertEquals("aqr%nr\"5^39(n#*", string0);
      
      String string1 = StringUtils.stripStart("aqr%Nr\"5^39(n#*", "aqr%Nr\"5^39(n#*");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
      
      String string2 = StringUtils.join((Object[]) null, '\"');
      assertNull(string2);
      
      String[] stringArray0 = StringUtils.split("0w{|lv#m(8(Mh]V 9t~", '\"');
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string3 = StringUtils.repeat('\"', (-1887));
      assertTrue(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      assertEquals("", string3);
  }

  @Test(timeout = 4000)
  public void test608()  throws Throwable  {
      String string0 = StringUtils.abbreviate("", 0, 0);
      assertNotNull(string0);
      assertEquals("", string0);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) 0;
      String string1 = StringUtils.join(doubleArray0, 'z', 0, 0);
      assertTrue(string1.equals((Object)string0));
      assertEquals(6, doubleArray0.length);
      assertNotNull(string1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals("", string1);
      
      char[] charArray0 = new char[6];
      charArray0[0] = 'z';
      charArray0[1] = 'z';
      charArray0[2] = 'U';
      charArray0[3] = 'U';
      charArray0[4] = 'z';
      charArray0[5] = '/';
      String string2 = StringUtils.valueOf(charArray0);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals(6, charArray0.length);
      assertNotNull(string2);
      assertArrayEquals(new char[] {'z', 'z', 'U', 'U', 'z', '/'}, charArray0);
      assertEquals("zzUUz/", string2);
      
      boolean boolean0 = StringUtils.isAllLowerCase("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test609()  throws Throwable  {
      String string0 = StringUtils.capitalize("");
      assertNotNull(string0);
      assertEquals("", string0);
      
      boolean boolean0 = StringUtils.containsAnyIgnoreCase("", (CharSequence[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test610()  throws Throwable  {
      String string0 = StringUtils.stripAccents("Minimum abbreviatioswidtS+is %d");
      assertNotNull(string0);
      assertEquals("Minimum abbreviatioswidtS+is %d", string0);
      
      String string1 = StringUtils.lowerCase("Minimum abbreviatioswidtS+is %d");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("minimum abbreviatioswidts+is %d", string1);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("Minimum abbreviatioswidtS+is %d", "u-](", 32);
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test611()  throws Throwable  {
      int int0 = StringUtils.ordinalIndexOf(" ", " ", 13);
      assertEquals((-1), int0);
      
      int int1 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "x[BEyAxx[BEyAx", (CharSequence) "x[BEyAxx[BEyAx", 308);
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("......", "......");
      assertEquals(7, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test612()  throws Throwable  {
      String string0 = StringUtils.abbreviate("", 0, 0);
      assertNotNull(string0);
      assertEquals("", string0);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) 0;
      String string1 = StringUtils.join(doubleArray0, 'z', 0, 0);
      assertTrue(string1.equals((Object)string0));
      assertEquals(6, doubleArray0.length);
      assertNotNull(string1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals("", string1);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "", (CharSequence) "", 0);
      assertEquals(0, int0);
      
      String string2 = StringUtils.join((Integer[]) null);
      assertNull(string2);
      
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      String string3 = StringUtils.leftPad("Object varargs must not be null", (-2235), 'z');
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      assertEquals("Object varargs must not be null", string3);
      
      charSequenceArray0[0] = (CharSequence) "Object varargs must not be null";
      charSequenceArray0[1] = (CharSequence) "";
      String string4 = StringUtils.repeat('n', 0);
      assertTrue(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertNotNull(string4);
      assertEquals("", string4);
      
      charSequenceArray0[2] = (CharSequence) "";
      String string5 = StringUtils.appendIfMissingIgnoreCase("''\finlU^;", "", charSequenceArray0);
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertEquals(5, charSequenceArray0.length);
      assertNotNull(string5);
      assertEquals("''\finlU^;", string5);
      
      charSequenceArray0[3] = (CharSequence) "''\finlU^;";
      charSequenceArray0[4] = (CharSequence) "";
      String string6 = StringUtils.appendIfMissingIgnoreCase("", (CharSequence) null, charSequenceArray0);
      assertTrue(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string5));
      assertTrue(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string3));
      assertTrue(string6.equals((Object)string1));
      assertEquals(5, charSequenceArray0.length);
      assertNotNull(string6);
      assertEquals("", string6);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("PV|de*=,VsF", "", (-2235));
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      boolean boolean0 = StringUtils.containsAnyIgnoreCase("", stringArray0);
      assertEquals(1, stringArray0.length);
      assertFalse(boolean0);
      
      String string7 = StringUtils.firstNonBlank(stringArray0);
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string4));
      assertEquals(1, stringArray0.length);
      assertNotNull(string7);
      assertEquals("PV|de*=,VsF", string7);
      
      String string8 = StringUtils.stripStart("G,A!z lThvV<.", "");
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string1));
      assertNotNull(string8);
      assertEquals("G,A!z lThvV<.", string8);
      
      String string9 = StringUtils.strip("Object varargs must not be null", "LA");
      assertTrue(string9.equals((Object)string3));
      assertFalse(string9.equals((Object)string5));
      assertFalse(string9.equals((Object)string1));
      assertFalse(string9.equals((Object)string8));
      assertFalse(string9.equals((Object)string0));
      assertFalse(string9.equals((Object)string6));
      assertFalse(string9.equals((Object)string7));
      assertFalse(string9.equals((Object)string4));
      assertNotNull(string9);
      assertEquals("Object varargs must not be null", string9);
  }

  @Test(timeout = 4000)
  public void test613()  throws Throwable  {
      String string0 = "', is neither of type Map.Entry nor an Array";
      String string1 = StringUtils.join((Object[]) null, 'h');
      assertNull(string1);
      
      // Undeclared exception!
      try { 
        StringUtils.getLevenshteinDistance((CharSequence) null, (CharSequence) "', is neither of type Map.Entry nor an Array");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test614()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      String string0 = StringUtils.abbreviate("H9", "H9", 103, 103);
      assertNotNull(string0);
      assertEquals("H9", string0);
      
      String string1 = StringUtils.mid("H9", 103, 103);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
  }

  @Test(timeout = 4000)
  public void test615()  throws Throwable  {
      String string0 = StringUtils.join((short[]) null, 'f');
      assertNull(string0);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) null, (CharSequence) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test616()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      String string0 = StringUtils.abbreviate("x[BEyAx", 5);
      assertNotNull(string0);
      assertEquals("x[...", string0);
      
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) true;
      objectArray0[2] = (Object) true;
      objectArray0[3] = (Object) "x[...";
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[4] = object0;
      objectArray0[5] = (Object) true;
      objectArray0[6] = (Object) true;
      objectArray0[7] = (Object) true;
      objectArray0[8] = (Object) "x[...";
      String string1 = StringUtils.join(objectArray0, 'B');
      assertFalse(string1.equals((Object)string0));
      assertEquals(9, objectArray0.length);
      assertNotNull(string1);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "trueBBtrueBx[...Bjava.lang.Object@17aaeb46BtrueBtrueBtrueBx[...", (CharSequence) "x[...");
      assertEquals(58, int0);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("x[BEyAx");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      try { 
        StringUtils.getBytes("x[...", "x[BEyAx");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(UnsupportedEncodingException e) {
      }
  }

  @Test(timeout = 4000)
  public void test617()  throws Throwable  {
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short)2127;
      String string0 = StringUtils.getDigits("org.apache.commons.lang3.ObjectUtils");
      assertNotNull(string0);
      assertEquals("3", string0);
      
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertNotNull(linkedHashSet0);
      assertFalse(linkedHashSet0.contains("org.apache.commons.lang3.ObjectUtils"));
      
      boolean boolean0 = linkedHashSet0.add((String) null);
      assertEquals(1, linkedHashSet0.size());
      assertFalse(linkedHashSet0.isEmpty());
      assertFalse(linkedHashSet0.contains("org.apache.commons.lang3.ObjectUtils"));
      assertTrue(boolean0);
      
      LinkedHashSet linkedHashSet1 = (LinkedHashSet)linkedHashSet0.clone();
      assertEquals(1, linkedHashSet0.size());
      assertFalse(linkedHashSet0.isEmpty());
      assertEquals(1, linkedHashSet1.size());
      assertFalse(linkedHashSet1.isEmpty());
      assertNotNull(linkedHashSet1);
      assertFalse(linkedHashSet0.contains("org.apache.commons.lang3.ObjectUtils"));
      
      boolean boolean1 = linkedHashSet0.add("org.apache.commons.lang3.Charsets");
      assertEquals(2, linkedHashSet0.size());
      assertFalse(linkedHashSet0.isEmpty());
      assertTrue(boolean1 == boolean0);
      assertTrue(linkedHashSet0.contains("org.apache.commons.lang3.Charsets"));
      assertFalse(linkedHashSet0.contains(string0));
      assertTrue(boolean1);
      
      String string1 = StringUtils.join((Iterable<?>) linkedHashSet0, "6$ _A&");
      assertEquals(2, linkedHashSet0.size());
      assertFalse(linkedHashSet0.isEmpty());
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertTrue(linkedHashSet0.contains("org.apache.commons.lang3.Charsets"));
      assertFalse(linkedHashSet0.contains("6$ _A&"));
      assertEquals("6$ _A&org.apache.commons.lang3.Charsets", string1);
      
      String string2 = StringUtils.deleteWhitespace("3");
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("3", string2);
      
      boolean boolean2 = StringUtils.isWhitespace((CharSequence) null);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test618()  throws Throwable  {
      int int0 = StringUtils.compare("...", "...", true);
      assertEquals(0, int0);
      
      String string0 = StringUtils.getDigits("...");
      assertNotNull(string0);
      assertEquals("", string0);
      
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertNotNull(linkedHashSet0);
      assertFalse(linkedHashSet0.contains("..."));
      
      boolean boolean0 = linkedHashSet0.add("H");
      assertEquals(1, linkedHashSet0.size());
      assertFalse(linkedHashSet0.isEmpty());
      assertFalse(linkedHashSet0.contains("..."));
      assertTrue(linkedHashSet0.contains("H"));
      assertTrue(boolean0);
      
      LinkedHashSet linkedHashSet1 = (LinkedHashSet)linkedHashSet0.clone();
      assertEquals(1, linkedHashSet0.size());
      assertFalse(linkedHashSet0.isEmpty());
      assertFalse(linkedHashSet1.isEmpty());
      assertEquals(1, linkedHashSet1.size());
      assertNotNull(linkedHashSet1);
      assertFalse(linkedHashSet0.contains("..."));
      assertTrue(linkedHashSet0.contains("H"));
      
      boolean boolean1 = linkedHashSet0.add("Z]@8~.");
      assertEquals(2, linkedHashSet0.size());
      assertFalse(linkedHashSet0.isEmpty());
      assertTrue(boolean1 == boolean0);
      assertFalse(linkedHashSet0.contains("..."));
      assertTrue(linkedHashSet0.contains("Z]@8~."));
      assertTrue(boolean1);
      
      String string1 = StringUtils.join((Iterable<?>) linkedHashSet0, "6$ _A&");
      assertEquals(2, linkedHashSet0.size());
      assertFalse(linkedHashSet0.isEmpty());
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertFalse(linkedHashSet0.contains(string1));
      assertTrue(linkedHashSet0.contains("Z]@8~."));
      assertEquals("H6$ _A&Z]@8~.", string1);
      
      String string2 = StringUtils.deleteWhitespace("...");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("...", string2);
      
      boolean boolean2 = StringUtils.isWhitespace("Z]@8~.");
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test619()  throws Throwable  {
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short)2127;
      String string0 = StringUtils.strip("KO)(uo0>#;Ny", "_wy`sG+n-P0");
      assertNotNull(string0);
      assertEquals("KO)(uo0>#;N", string0);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "_wy`sG+n-P0", "KO)(uo0>#;Ny");
      assertEquals(2, int0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[7];
      charSequenceArray0[0] = (CharSequence) "KO)(uo0>#;N";
      charSequenceArray0[1] = (CharSequence) "KO)(uo0>#;N";
      charSequenceArray0[2] = (CharSequence) "KO)(uo0>#;N";
      String string1 = StringUtils.join((Object[]) charSequenceArray0, 'G', (int) (short)2127, (int) (short)2127);
      assertFalse(string1.equals((Object)string0));
      assertEquals(7, charSequenceArray0.length);
      assertNotNull(string1);
      assertEquals("", string1);
      
      String string2 = StringUtils.deleteWhitespace("KO)(uo0>#;N");
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("KO)(uo0>#;N", string2);
      
      String string3 = StringUtils.join((char[]) null, 'G', 25, 0);
      assertNull(string3);
  }

  @Test(timeout = 4000)
  public void test620()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      String string0 = StringUtils.trimToEmpty("\n");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparator("", "\r", (-1));
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "\r", "\r");
      assertEquals(0, int0);
      
      String string1 = StringUtils.substring("", 0, 0);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
      
      String string2 = StringUtils.removeEnd("Object varargs must not be null", "Object varargs must not be null");
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("", string2);
      
      String string3 = StringUtils.substringAfterLast("\n", "1e");
      assertTrue(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string0));
      assertNotNull(string3);
      assertEquals("", string3);
      
      int int1 = StringUtils.indexOfDifference((CharSequence) "", (CharSequence) "clonecloneThreshold must not be negative");
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      String string4 = StringUtils.leftPad("\r", 122, "org.apache.commons.lang3.Charsets");
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertNotNull(string4);
      assertEquals("org.apache.commons.lang3.Charsetsorg.apache.commons.lang3.Charsetsorg.apache.commons.lang3.Charsetsorg.apache.commons.lan\r", string4);
      
      String string5 = StringUtils.join((Iterable<?>) null, "org.apache.commons.lang3.Charsets");
      assertNull(string5);
      
      int int2 = StringUtils.indexOf((CharSequence) null, 95);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals((-1), int2);
      
      double double0 = StringUtils.getJaroWinklerDistance("", " ");
      assertEquals(0.0, double0, 0.01);
      
      String string6 = StringUtils.uncapitalize("r,vyf(;P");
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string4));
      assertNotNull(string6);
      assertEquals("r,vyf(;P", string6);
      
      String string7 = StringUtils.substringBetween("Object varargs must not be null", "Object varargs must not be null");
      assertNull(string7);
      
      boolean boolean0 = StringUtils.endsWithAny("", stringArray0);
      assertEquals(0, stringArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test621()  throws Throwable  {
      String string0 = StringUtils.strip("a*Ei5QXJx@]Y", "a*Ei5QXJx@]Y");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.substringAfterLast("C", "!");
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
      
      boolean boolean0 = StringUtils.isNumericSpace("");
      assertTrue(boolean0);
      
      String string2 = StringUtils.rightPad("", 13);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("             ", string2);
      
      Locale locale0 = Locale.ENGLISH;
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("en", locale0.toString());
      assertEquals("en", locale0.getLanguage());
      assertNotNull(locale0);
      
      Locale locale1 = Locale.ENGLISH;
      assertEquals("en", locale1.toString());
      assertEquals("", locale1.getCountry());
      assertEquals("en", locale1.getLanguage());
      assertEquals("eng", locale1.getISO3Language());
      assertEquals("", locale1.getISO3Country());
      assertEquals("", locale1.getVariant());
      assertSame(locale1, locale0);
      assertNotNull(locale1);
      
      String string3 = StringUtils.lowerCase("!", locale1);
      assertEquals("en", locale1.toString());
      assertEquals("", locale1.getCountry());
      assertEquals("en", locale1.getLanguage());
      assertEquals("eng", locale1.getISO3Language());
      assertEquals("", locale1.getISO3Country());
      assertEquals("", locale1.getVariant());
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertSame(locale1, locale0);
      assertNotNull(string3);
      assertEquals("!", string3);
      
      int int0 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test622()  throws Throwable  {
      String string0 = StringUtils.leftPad("x[BEyAx", (int) 'g', 'g');
      assertNotNull(string0);
      assertEquals("ggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggx[BEyAx", string0);
      
      String[] stringArray0 = Locale.getISOLanguages();
      assertEquals(188, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string1 = StringUtils.rightPad("ggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggx[BEyAx", (int) 'g', "x[BEyAx");
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("ggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggx[BEyAx", string1);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      String[] stringArray1 = StringUtils.split((String) null, "=", 3);
      assertNull(stringArray1);
      
      String string2 = StringUtils.leftPad("the character 1.0x-2730.193x-2730.193", (-1143));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("the character 1.0x-2730.193x-2730.193", string2);
      
      String string3 = StringUtils.chop((String) null);
      assertNull(string3);
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      assertFalse(linkedList0.contains("="));
      
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      assertFalse(arrayList0.contains("="));
      
      String string4 = StringUtils.join((List<?>) linkedList0, "Supplied value must be a valid byte literal between -32768 and 32767: [", 1474, 3);
      assertEquals(0, linkedList0.size());
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertNotNull(string4);
      assertFalse(linkedList0.contains("="));
      assertEquals("", string4);
      
      String string5 = StringUtils.repeat("Search and Replace array lengths don't match: ", (String) null, 13);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertNotNull(string5);
      assertEquals("Search and Replace array lengths don't match: Search and Replace array lengths don't match: Search and Replace array lengths don't match: Search and Replace array lengths don't match: Search and Replace array lengths don't match: Search and Replace array lengths don't match: Search and Replace array lengths don't match: Search and Replace array lengths don't match: Search and Replace array lengths don't match: Search and Replace array lengths don't match: Search and Replace array lengths don't match: Search and Replace array lengths don't match: Search and Replace array lengths don't match: ", string5);
      
      String string6 = StringUtils.SPACE;
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string5));
      assertNotNull(string6);
      assertEquals(" ", string6);
      
      String string7 = StringUtils.getCommonPrefix(stringArray0);
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string0));
      assertEquals(188, stringArray0.length);
      assertNotNull(string7);
      assertEquals("", string7);
      
      int int0 = StringUtils.indexOf((CharSequence) " ", (CharSequence) "", 1474);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test623()  throws Throwable  {
      boolean boolean0 = StringUtils.startsWithAny((CharSequence) null, (CharSequence[]) null);
      assertFalse(boolean0);
      
      String string0 = StringUtils.chop("`jT");
      assertNotNull(string0);
      assertEquals("`j", string0);
  }

  @Test(timeout = 4000)
  public void test624()  throws Throwable  {
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      String string0 = StringUtils.rightPad("object", 903);
      assertNotNull(string0);
      assertEquals("objectstring0);
      
      String string1 = StringUtils.repeat("?eKzh6`>dZu)5c", "#O_NN", (-3509));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "object", (CharSequence) "#O_NN", (-1412));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test625()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = 'Q';
      charArray0[1] = 'Q';
      charArray0[2] = 'Q';
      charArray0[3] = 'Q';
      charArray0[4] = 'Q';
      String string0 = StringUtils.join(charArray0, 'Q', 127, 127);
      assertEquals(5, charArray0.length);
      assertNotNull(string0);
      assertArrayEquals(new char[] {'Q', 'Q', 'Q', 'Q', 'Q'}, charArray0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test626()  throws Throwable  {
      HashSet<CharBuffer> hashSet0 = new HashSet<CharBuffer>(9, 2132.89F);
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertNotNull(hashSet0);
      
      String string0 = StringUtils.join((Iterable<?>) hashSet0, "The Array must not be null");
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test627()  throws Throwable  {
      String string0 = StringUtils.strip("ghhfOQ!a{@M#22", "ghhfOQ!a{@M#22");
      assertNotNull(string0);
      assertEquals("", string0);
      
      boolean boolean0 = StringUtils.isNumericSpace("ghhfOQ!a{@M#22");
      assertFalse(boolean0);
      
      String string1 = StringUtils.center("`8", 94);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("                                              `8                                              ", string1);
      
      String string2 = StringUtils.defaultString("                                              `8                                              ", "pFQA_2L/:5M1p");
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("                                              `8                                              ", string2);
  }

  @Test(timeout = 4000)
  public void test628()  throws Throwable  {
      String string0 = StringUtils.stripAccents("");
      assertNotNull(string0);
      assertEquals("", string0);
      
      boolean boolean0 = StringUtils.isNotBlank("");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isAllEmpty((CharSequence[]) null);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String string1 = StringUtils.removeEnd("Supplied value must be a valid byte literal between -128 and 127: [", "");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("Supplied value must be a valid byte literal between -128 and 127: [", string1);
      
      String string2 = StringUtils.replaceChars(")!1XjMA#y,~aU", " in an array of ", "\r");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals(")!1XjMA#,~U", string2);
      
      boolean boolean2 = StringUtils.startsWithAny("Supplied value must be a valid byte literal between -128 and 127: [", (CharSequence[]) null);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2);
      
      String string3 = StringUtils.removeIgnoreCase("...", "The character ");
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      assertEquals("...", string3);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "871/y(&o", (CharSequence) "", 97);
      assertEquals(8, int0);
      
      boolean boolean3 = StringUtils.isEmpty("871/y(&o");
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3);
      
      String string4 = StringUtils.substringAfter("{j`l@dCQNM&E:'2:", 11);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertNotNull(string4);
      assertEquals("", string4);
  }

  @Test(timeout = 4000)
  public void test629()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = '8';
      charArray0[1] = '5';
      charArray0[2] = 'g';
      charArray0[3] = 'N';
      charArray0[4] = ',';
      String string0 = StringUtils.join(charArray0, ' ', (-3371), (-3371));
      assertEquals(5, charArray0.length);
      assertNotNull(string0);
      assertArrayEquals(new char[] {'8', '5', 'g', 'N', ','}, charArray0);
      assertEquals("", string0);
      
      boolean boolean0 = StringUtils.isNumericSpace("");
      assertTrue(boolean0);
      
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      assertFalse(linkedList0.contains(string0));
      
      boolean boolean1 = linkedList0.add("");
      assertEquals(1, linkedList0.size());
      assertTrue(boolean1 == boolean0);
      assertTrue(linkedList0.contains(""));
      assertTrue(boolean1);
      
      Iterator<String> iterator0 = linkedList0.iterator();
      assertEquals(1, linkedList0.size());
      assertNotNull(iterator0);
      assertTrue(linkedList0.contains(""));
      
      linkedList0.addLast((String) null);
      assertEquals(2, linkedList0.size());
      assertTrue(linkedList0.contains(""));
      
      boolean boolean2 = linkedList0.offer("");
      assertEquals(3, linkedList0.size());
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertTrue(linkedList0.contains(""));
      assertTrue(boolean2);
      
      boolean boolean3 = linkedList0.add("uw//z>t_dSO/$!O6S");
      assertEquals(4, linkedList0.size());
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertTrue(linkedList0.contains(""));
      assertTrue(boolean3);
      
      String string1 = linkedList0.remove();
      assertEquals(3, linkedList0.size());
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertTrue(linkedList0.contains(string1));
      assertEquals("", string1);
      
      boolean boolean4 = linkedList0.add("");
      assertEquals(4, linkedList0.size());
      assertTrue(boolean4 == boolean2);
      assertTrue(boolean4 == boolean3);
      assertTrue(boolean4 == boolean1);
      assertTrue(boolean4 == boolean0);
      assertTrue(linkedList0.contains(string1));
      assertTrue(boolean4);
      
      String string2 = linkedList0.remove(0);
      assertEquals(3, linkedList0.size());
      assertNull(string2);
      assertTrue(linkedList0.contains(string1));
      
      String string3 = StringUtils.join((Iterable<?>) linkedList0, "");
      assertEquals(3, linkedList0.size());
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      assertTrue(linkedList0.contains(string1));
      assertEquals("uw//z>t_dSO/$!O6S", string3);
      
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[0] = (CharSequence) null;
      charSequenceArray0[1] = (CharSequence) null;
      boolean boolean5 = StringUtils.startsWithAny("", charSequenceArray0);
      assertFalse(boolean5 == boolean1);
      assertFalse(boolean5 == boolean0);
      assertFalse(boolean5 == boolean2);
      assertFalse(boolean5 == boolean4);
      assertFalse(boolean5 == boolean3);
      assertEquals(2, charSequenceArray0.length);
      assertFalse(boolean5);
      
      String string4 = StringUtils.substringBeforeLast((String) null, (String) null);
      assertNull(string4);
      
      String string5 = StringUtils.repeat("", (String) null, (-1611));
      assertTrue(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertNotNull(string5);
      assertEquals("", string5);
      
      String string6 = StringUtils.reverse("Y[~");
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string1));
      assertNotNull(string6);
      assertEquals("~[Y", string6);
  }

  @Test(timeout = 4000)
  public void test630()  throws Throwable  {
      String string0 = StringUtils.upperCase("#l!Elg+0bH\"&7F),");
      assertNotNull(string0);
      assertEquals("#L!ELG+0BH\"&7F),", string0);
      
      boolean boolean0 = StringUtils.isAllLowerCase("#l!Elg+0bH\"&7F),");
      assertFalse(boolean0);
      
      String[] stringArray0 = StringUtils.split("", "#L!ELG+0BH\"&7F),");
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string1 = StringUtils.join((int[]) null, '[');
      assertNull(string1);
      
      int int0 = StringUtils.compare("', has a length less than 2", "^hci t", false);
      assertEquals((-55), int0);
      
      String string2 = StringUtils.rightPad("", 0, '/');
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("", string2);
  }

  @Test(timeout = 4000)
  public void test631()  throws Throwable  {
      String string0 = StringUtils.substring("", (-2854));
      assertNotNull(string0);
      assertEquals("", string0);
      
      boolean boolean0 = StringUtils.equalsIgnoreCase("", "");
      assertTrue(boolean0);
      
      String string1 = StringUtils.reverse("");
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
      
      String string2 = StringUtils.wrap("Sqx`|=%^:C`W3[", "");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("Sqx`|=%^:C`W3[", string2);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "", (CharSequence) "Sqx`|=%^:C`W3[");
      assertEquals((-1), int0);
      
      boolean boolean1 = StringUtils.isMixedCase("Sqx`|=%^:C`W3[");
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'v';
      charArray0[1] = 'P';
      boolean boolean2 = StringUtils.containsNone((CharSequence) "", charArray0);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertEquals(2, charArray0.length);
      assertArrayEquals(new char[] {'v', 'P'}, charArray0);
      assertTrue(boolean2);
      
      String string3 = StringUtils.defaultString("org.apache.commons.lang3.Charsets");
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      assertEquals("org.apache.commons.lang3.Charsets", string3);
  }

  @Test(timeout = 4000)
  public void test632()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      Locale locale0 = Locale.GERMANY;
      assertEquals("de_DE", locale0.toString());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("DE", locale0.getCountry());
      assertEquals("de", locale0.getLanguage());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertNotNull(locale0);
      
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      assertEquals("de_DE", locale0.toString());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("DE", locale0.getCountry());
      assertEquals("de", locale0.getLanguage());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertNotNull(set0);
      
      byte[] byteArray0 = new byte[0];
      String string0 = StringUtils.join(byteArray0, 's', (-1), (-1));
      assertEquals(0, byteArray0.length);
      assertNotNull(string0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals("", string0);
      
      int int0 = StringUtils.lastOrdinalIndexOf("", "", (-1));
      assertEquals((-1), int0);
      
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) arrayList0;
      String string1 = StringUtils.join(objectArray0, (String) null);
      assertFalse(string1.equals((Object)string0));
      assertEquals(4, objectArray0.length);
      assertNotNull(string1);
      assertEquals("[]", string1);
      
      boolean boolean0 = StringUtils.isAllLowerCase("");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isAlphanumericSpace("nt aX-1.0x-412.24x1.0x-2592.4207x-2730.193aX-1.0x-412.24x1.0x-2592.4207x-2730.193aX-1.0x-412.24x1.0x-2592.4207x-2730.193-1.0x-412.24x1.0x-2592.4207x-2730.193");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string2 = StringUtils.defaultIfEmpty(" ", "}[n%2%9,^&ZE._b{/");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals(" ", string2);
      
      boolean boolean2 = StringUtils.isMixedCase("\n");
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test633()  throws Throwable  {
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) "object";
      objectArray0[1] = (Object) "object";
      objectArray0[3] = (Object) "object";
      boolean boolean0 = StringUtils.isAllLowerCase("object");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test634()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[9];
      String string0 = StringUtils.strip("org.apache.commons.lang3.RegExUtils");
      assertNotNull(string0);
      assertEquals("org.apache.commons.lang3.RegExUtils", string0);
      
      String string1 = StringUtils.join((Object[]) charSequenceArray0, "org.apache.commons.lang3.RegExUtils");
      assertFalse(string1.equals((Object)string0));
      assertEquals(9, charSequenceArray0.length);
      assertNotNull(string1);
      assertEquals("org.apache.commons.lang3.RegExUtilsorg.apache.commons.lang3.RegExUtilsorg.apache.commons.lang3.RegExUtilsorg.apache.commons.lang3.RegExUtilsorg.apache.commons.lang3.RegExUtilsorg.apache.commons.lang3.RegExUtilsorg.apache.commons.lang3.RegExUtilsorg.apache.commons.lang3.RegExUtils", string1);
      
      boolean boolean0 = StringUtils.isAllLowerCase("org.apache.commons.lang3.RegExUtilsorg.apache.commons.lang3.RegExUtilsorg.apache.commons.lang3.RegExUtilsorg.apache.commons.lang3.RegExUtilsorg.apache.commons.lang3.RegExUtilsorg.apache.commons.lang3.RegExUtilsorg.apache.commons.lang3.RegExUtilsorg.apache.commons.lang3.RegExUtils");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isAlphanumericSpace("org.apache.commons.lang3.RegExUtils");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string2 = StringUtils.defaultIfEmpty("", "u-](");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("u-](", string2);
      
      boolean boolean2 = StringUtils.isMixedCase("org.apache.commons.lang3.RegExUtils");
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2);
  }

  @Test(timeout = 4000)
  public void test635()  throws Throwable  {
      String string0 = StringUtils.rightPad("=`%d=7wr7,/{8`", 48, "ghhfOQ!a{@M#22");
      assertNotNull(string0);
      assertEquals("=`%d=7wr7,/{8`ghhfOQ!a{@M#22ghhfOQ!a{@M#22ghhfOQ", string0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "Z";
      String string1 = StringUtils.join(objectArray0, "<[.<38[");
      assertFalse(string1.equals((Object)string0));
      assertEquals(1, objectArray0.length);
      assertNotNull(string1);
      assertEquals("Z", string1);
      
      boolean boolean0 = StringUtils.isAllLowerCase("=`%d=7wr7,/{8`");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isAlphanumericSpace((CharSequence) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string2 = StringUtils.defaultIfEmpty("9 OKQkd<f#TP1", "ghhfOQ!a{@M#22");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("9 OKQkd<f#TP1", string2);
      
      boolean boolean2 = StringUtils.isMixedCase("9 OKQkd<f#TP1");
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2);
  }

  @Test(timeout = 4000)
  public void test636()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("q@F!X#Ug_t@", "(Ad{JKOkvP]^ry2!*~", (-1));
      assertEquals(2, stringArray0.length);
      assertNotNull(stringArray0);
      
      boolean boolean0 = StringUtils.containsIgnoreCase("(Ad{JKOkvP]^ry2!*~", "q@F!X#Ug_t@");
      assertFalse(boolean0);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "(Ad{JKOkvP]^ry2!*~", (CharSequence) "(Ad{JKOkvP]^ry2!*~");
      assertEquals(0, int0);
      
      String string0 = StringUtils.substringBetween("q@F!X#Ug_t@", "-5y1iX{EX`M@KK#[b");
      assertNull(string0);
      
      String string1 = StringUtils.lowerCase("(Ad{JKOkvP]^ry2!*~");
      assertNotNull(string1);
      assertEquals("(ad{jkokvp]^ry2!*~", string1);
      
      boolean boolean1 = StringUtils.isMixedCase((CharSequence) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test637()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      boolean boolean0 = StringUtils.containsNone((CharSequence) "\n", "");
      assertTrue(boolean0);
      
      String[] stringArray0 = StringUtils.split("Index: ", '=');
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string0 = StringUtils.join((Object[]) stringArray0, '=');
      assertEquals(1, stringArray0.length);
      assertNotNull(string0);
      assertEquals("Index: ", string0);
  }

  @Test(timeout = 4000)
  public void test638()  throws Throwable  {
      boolean boolean0 = StringUtils.containsWhitespace("q@F!X#Ug_t@");
      assertFalse(boolean0);
      
      String string0 = StringUtils.substringAfter("q@F!X#Ug_t@", (-1344));
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.truncate("{2sv8\"C@0,5Sg8FRS", 48);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.center("R(<C", 102, "");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("                                                 R(<C                                                 ", string2);
  }

  @Test(timeout = 4000)
  public void test639()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      boolean boolean0 = StringUtils.isAllBlank(charSequenceArray0);
      assertEquals(1, charSequenceArray0.length);
      assertTrue(boolean0);
      
      String string0 = StringUtils.capitalize(" vs ");
      assertNotNull(string0);
      assertEquals(" vs ", string0);
      
      String string1 = StringUtils.center(" vs ", 76, " vs ");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(" vs  vs  vs  vs  vs  vs  vs  vs  vs  vs  vs  vs  vs  vs  vs  vs  vs  vs  vs ", string1);
  }

  @Test(timeout = 4000)
  public void test640()  throws Throwable  {
      String string0 = StringUtils.trimToEmpty(":W3vjMB@");
      assertNotNull(string0);
      assertEquals(":W3vjMB@", string0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparator(":W3vjMB@", ":W3vjMB@", (-23));
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string1 = StringUtils.substring(":W3vjMB@", (-23), 0);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
      
      String string2 = StringUtils.substringAfterLast(":W3vjMB@", (-4248));
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("", string2);
      
      String string3 = StringUtils.center("dO[htbw}6Mc6.@E#)null/emptyitems~4&4+2&fa", 85);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      assertEquals("                      dO[htbw}6Mc6.@E#)null/emptyitems~4&4+2&fa                      ", string3);
      
      int int0 = StringUtils.countMatches((CharSequence) "", 'Q');
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test641()  throws Throwable  {
      String string0 = StringUtils.substring("`", 53, 1320);
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test642()  throws Throwable  {
      Integer integer0 = new Integer((-324));
      assertNotNull(integer0);
      assertEquals((-324), (int)integer0);
      
      Integer integer1 = new Integer((-324));
      assertTrue(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals((-324), (int)integer1);
      
      char[] charArray0 = new char[1];
      charArray0[0] = '\u0015';
      String string0 = StringUtils.valueOf(charArray0);
      assertEquals(1, charArray0.length);
      assertNotNull(string0);
      assertArrayEquals(new char[] {'\u0015'}, charArray0);
      assertEquals("\u0015", string0);
      
      String string1 = StringUtils.getDigits("6w#yEdv|M/NKamq&Rr");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("6", string1);
      
      boolean boolean0 = StringUtils.isBlank("\u0015");
      assertFalse(boolean0);
      
      int int0 = StringUtils.countMatches((CharSequence) "6w#yEdv|M/NKamq&Rr", 'U');
      assertEquals(0, int0);
      
      String string2 = StringUtils.replaceIgnoreCase("vf", "%TOR!<=)jW$e&pyfR^(", "%TOR!<=)jW$e&pyfR^(");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("vf", string2);
  }

  @Test(timeout = 4000)
  public void test643()  throws Throwable  {
      String string0 = StringUtils.substringAfter("The Array must not be null", "}");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.removeStartIgnoreCase("The Array must not be null", "");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("The Array must not be null", string1);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "The Array must not be null", 100, 100);
      assertEquals((-1), int0);
      
      String string2 = StringUtils.upperCase("Minimum abbreviation width with offset is %d");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("MINIMUM ABBREVIATION WIDTH WITH OFFSET IS %D", string2);
      
      int[] intArray0 = new int[4];
      intArray0[0] = (-1);
      intArray0[1] = (-1);
      intArray0[2] = 100;
      intArray0[3] = (-1);
      String string3 = StringUtils.join(intArray0, 'z', 102, 0);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals(4, intArray0.length);
      assertNotNull(string3);
      assertArrayEquals(new int[] {(-1), (-1), 100, (-1)}, intArray0);
      assertEquals("", string3);
      
      int int1 = StringUtils.indexOfAny((CharSequence) "The Array must not be null", "");
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      String string4 = StringUtils.strip("org.apache.commons.lang3.ObjectUtils", "Minimum abbreviation width with offset is %d");
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertNotNull(string4);
      assertEquals("g.apache.commons.lang3.ObjectUtil", string4);
      
      int int2 = StringUtils.lastIndexOf((CharSequence) "The Array must not be null", (CharSequence) "", (-1));
      assertTrue(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals((-1), int2);
  }

  @Test(timeout = 4000)
  public void test644()  throws Throwable  {
      String string0 = StringUtils.stripAccents("");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.wrap(" is not in the range '0' - '9'", '3');
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("3 is not in the range '0' - '9'3", string1);
      
      String string2 = StringUtils.rightPad("S\"{HIoZjCM5", 1381, "");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      String string3 = StringUtils.center("Cloneable type ", 1381, "Locale must not be null");
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      
      Locale locale0 = Locale.KOREAN;
      assertEquals("", locale0.getVariant());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("ko", locale0.toString());
      assertNotNull(locale0);
      
      String string4 = locale0.getDisplayName();
      assertEquals("", locale0.getVariant());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("ko", locale0.toString());
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertNotNull(string4);
      assertEquals("Korean", string4);
      
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      assertEquals("", locale0.getVariant());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("ko", locale0.toString());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertNotNull(set0);
      assertFalse(set0.contains(string2));
      
      int int0 = StringUtils.indexOf((CharSequence) "Cloneable type ", 1739);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test645()  throws Throwable  {
      String[] stringArray0 = StringUtils.split("object", "9Y`]eiW^{x@Rl", 3);
      assertEquals(2, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string0 = StringUtils.prependIfMissingIgnoreCase("-5y1iX{EX`M@KK#[b", "-5y1iX{EX`M@KK#[b", stringArray0);
      assertEquals(2, stringArray0.length);
      assertNotNull(string0);
      assertEquals("-5y1iX{EX`M@KK#[b", string0);
      
      String string1 = StringUtils.lowerCase("-5y1iX{EX`M@KK#[b");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("-5y1ix{ex`m@kk#[b", string1);
      
      String[] stringArray1 = StringUtils.splitByWholeSeparator("-5y1ix{ex`m@kk#[b", "x[BEyAx", 3);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray1, stringArray0);
      assertEquals(1, stringArray1.length);
      assertNotNull(stringArray1);
      
      int[] intArray0 = new int[8];
      intArray0[1] = 3;
      intArray0[2] = 3;
      intArray0[3] = 3;
      String string2 = StringUtils.join((long[]) null, 'J');
      assertNull(string2);
      
      String string3 = StringUtils.abbreviateMiddle("Invalid locale format: ", "uZuli&V`K", 3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      assertEquals("Invalid locale format: ", string3);
      
      PriorityQueue<Object> priorityQueue0 = new PriorityQueue<Object>();
      assertEquals(0, priorityQueue0.size());
      assertNotNull(priorityQueue0);
      assertFalse(priorityQueue0.contains("-5y1iX{EX`M@KK#[b"));
      
      Stream<Object> stream0 = priorityQueue0.parallelStream();
      assertEquals(0, priorityQueue0.size());
      assertNotNull(stream0);
      assertFalse(priorityQueue0.contains("-5y1iX{EX`M@KK#[b"));
      
      String string4 = StringUtils.join((Iterable<?>) priorityQueue0, '');
      assertEquals(0, priorityQueue0.size());
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertNotNull(string4);
      assertFalse(priorityQueue0.contains("-5y1iX{EX`M@KK#[b"));
      assertEquals("", string4);
      
      String string5 = StringUtils.uncapitalize("aX-1.0x-412.24x1.0x-2592.4207x-2730.193aX-1.0x-412.24x1.0x-2592.4207x-2730.193aX-1.0x-412.24x1.0x-2592.4207x-2730.193-1.0x-412.24x1.0x-2592.4207x-2730.193nt ");
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertNotNull(string5);
      assertEquals("aX-1.0x-412.24x1.0x-2592.4207x-2730.193aX-1.0x-412.24x1.0x-2592.4207x-2730.193aX-1.0x-412.24x1.0x-2592.4207x-2730.193-1.0x-412.24x1.0x-2592.4207x-2730.193nt ", string5);
      
      boolean boolean0 = StringUtils.isAlphanumericSpace("aX-1.0x-412.24x1.0x-2592.4207x-2730.193aX-1.0x-412.24x1.0x-2592.4207x-2730.193aX-1.0x-412.24x1.0x-2592.4207x-2730.193-1.0x-412.24x1.0x-2592.4207x-2730.193nt ");
      assertFalse(boolean0);
      
      String string6 = StringUtils.remove("x[BEyAx", "object");
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string1));
      assertNotNull(string6);
      assertEquals("x[BEyAx", string6);
  }

  @Test(timeout = 4000)
  public void test646()  throws Throwable  {
      String string0 = StringUtils.substringAfterLast("Supplied value must be a valid byte literal between -128 and 127: [", "Supplied value must be a valid byte literal between -128 and 127: [");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.stripToEmpty("Supplied value must be a valid byte literal between -128 and 127: [");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("Supplied value must be a valid byte literal between -128 and 127: [", string1);
      
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("Supplied value must be a valid byte literal between -128 and 127: [");
      assertEquals(27, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test647()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      Locale locale0 = Locale.GERMANY;
      assertEquals("de_DE", locale0.toString());
      assertEquals("DE", locale0.getCountry());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("de", locale0.getLanguage());
      assertEquals("DEU", locale0.getISO3Country());
      assertNotNull(locale0);
      
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      assertEquals("de_DE", locale0.toString());
      assertEquals("DE", locale0.getCountry());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("de", locale0.getLanguage());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertNotNull(set0);
      
      Set<String> set1 = locale0.getUnicodeLocaleAttributes();
      assertEquals("de_DE", locale0.toString());
      assertEquals("DE", locale0.getCountry());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("de", locale0.getLanguage());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals(0, set1.size());
      assertTrue(set1.isEmpty());
      assertSame(set1, set0);
      assertNotNull(set1);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "\n";
      stringArray0[1] = "\n";
      String[] stringArray1 = StringUtils.splitByCharacterType("\r");
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray1, stringArray0);
      assertEquals(1, stringArray1.length);
      assertNotNull(stringArray1);
      
      String string0 = StringUtils.getDigits("");
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test648()  throws Throwable  {
      String string0 = StringUtils.replace("s'@z)sozJ", "s'@z)sozJ", (String) null, 1881);
      assertNotNull(string0);
      assertEquals("s'@z)sozJ", string0);
      
      boolean[] booleanArray0 = new boolean[1];
      String string1 = StringUtils.join(booleanArray0, '%');
      assertFalse(string1.equals((Object)string0));
      assertEquals(1, booleanArray0.length);
      assertNotNull(string1);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertEquals("false", string1);
      
      String string2 = StringUtils.strip("O;(I!5?^", ", Length: 0");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("O;(I!5?^", string2);
      
      boolean boolean0 = StringUtils.contains((CharSequence) "false", (CharSequence) "s'@z)sozJ");
      assertFalse(boolean0);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "^CjGC", 1881, 1881);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test649()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      charSequenceArray0[0] = (CharSequence) "\n";
      charSequenceArray0[1] = (CharSequence) "";
      charSequenceArray0[2] = (CharSequence) " ";
      charSequenceArray0[3] = (CharSequence) "\n";
      String[] stringArray0 = StringUtils.split(" ", "9Y`]eiW^{x@Rl", (-1));
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      charSequenceArray0[4] = (CharSequence) "9Y`]eiW^{x@Rl";
      String string0 = StringUtils.prependIfMissingIgnoreCase("\r", "\n", charSequenceArray0);
      assertEquals(5, charSequenceArray0.length);
      assertNotNull(string0);
      assertEquals("\r", string0);
      
      String string1 = StringUtils.substring(":J,h(3eaQ{j{BWdBj", (-1), 41);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("j", string1);
      
      String string2 = StringUtils.abbreviateMiddle("\n", "D.wXoI`e/kh(", 10);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("\n", string2);
      
      String string3 = StringUtils.mid("C(h1", 0, (-214));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      assertEquals("", string3);
      
      String string4 = StringUtils.stripToNull("0_|fzSd_*");
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertNotNull(string4);
      assertEquals("0_|fzSd_*", string4);
  }

  @Test(timeout = 4000)
  public void test650()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = '8';
      String string0 = StringUtils.substringAfter("The String must not be empty", 15);
      assertNotNull(string0);
      assertEquals("", string0);
      
      int int0 = StringUtils.length("");
      assertEquals(0, int0);
      
      String string1 = StringUtils.abbreviate("@ZhV(jFj)MIa^e", "", (-2783));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("@ZhV(jFj)MIa^e", string1);
      
      String string2 = StringUtils.deleteWhitespace(", Length: 0");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals(",Length:0", string2);
      
      int int1 = StringUtils.ordinalIndexOf(",Length:0", "@ZhV(jFj)MIa^e", 356);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      String string3 = StringUtils.wrap((String) null, "j");
      assertNull(string3);
  }

  @Test(timeout = 4000)
  public void test651()  throws Throwable  {
      int int0 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      String string0 = StringUtils.rightPad("Sm&6-Y9ubT)R!R-t", 16, "0.E6FV-r2KVzFePw>");
      assertNotNull(string0);
      assertEquals("Sm&6-Y9ubT)R!R-t", string0);
  }

  @Test(timeout = 4000)
  public void test652()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      String string0 = StringUtils.substringAfterLast(" ", "");
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test653()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[1] = '$';
      charArray0[2] = '$';
      charArray0[4] = '$';
      byte[] byteArray0 = new byte[0];
      String string0 = StringUtils.join(byteArray0, '$', (-1739), (-1739));
      assertEquals(0, byteArray0.length);
      assertNotNull(string0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals("", string0);
      
      String string1 = StringUtils.uncapitalize("");
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
      
      String string2 = StringUtils.trimToNull("");
      assertNull(string2);
  }

  @Test(timeout = 4000)
  public void test654()  throws Throwable  {
      String string0 = StringUtils.abbreviate("^f*uy+K+)I8=wl4", "", 0);
      assertNotNull(string0);
      assertEquals("^f*uy+K+)I8=wl4", string0);
      
      String string1 = StringUtils.getDigits("");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
      
      String string2 = StringUtils.reverse("");
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("", string2);
      
      String string3 = StringUtils.substring("Strings must not be null", 0, 2046);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      assertEquals("Strings must not be null", string3);
      
      String string4 = StringUtils.uncapitalize("");
      assertTrue(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertNotNull(string4);
      assertEquals("", string4);
      
      int int0 = StringUtils.length("");
      assertEquals(0, int0);
      
      String string5 = StringUtils.substringAfterLast("W5\"2;v", "Strings must not be null");
      assertFalse(string5.equals((Object)string3));
      assertTrue(string5.equals((Object)string4));
      assertTrue(string5.equals((Object)string1));
      assertTrue(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertNotNull(string5);
      assertEquals("", string5);
      
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      booleanArray0[6] = false;
      String string6 = StringUtils.join(booleanArray0, 'L');
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string5));
      assertEquals(7, booleanArray0.length);
      assertNotNull(string6);
      assertTrue(Arrays.equals(new boolean[] {false, true, false, true, true, true, false}, booleanArray0));
      assertEquals("falseLtrueLfalseLtrueLtrueLtrueLfalse", string6);
      
      String string7 = StringUtils.strip("O;(I!5?^", "^CjGC");
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string4));
      assertNotNull(string7);
      assertEquals("O;(I!5?^", string7);
      
      boolean boolean0 = StringUtils.contains((CharSequence) "^f*uy+K+)I8=wl4", (CharSequence) "W5\"2;v");
      assertFalse(boolean0);
      
      String string8 = StringUtils.rightPad("", 54, "");
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string7));
      assertNotNull(string8);
      assertEquals("                                                      ", string8);
      
      int int1 = StringUtils.lastIndexOf((CharSequence) "                                                      ", 0, 0);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test655()  throws Throwable  {
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short)2127;
      shortArray0[1] = (short)76;
      shortArray0[2] = (short)0;
      // Undeclared exception!
      try { 
        StringUtils.join(shortArray0, '*', (int) (short)76, 2063);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 76
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test656()  throws Throwable  {
      String[] stringArray0 = StringUtils.split(" ");
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      char[] charArray0 = new char[0];
      String string0 = StringUtils.valueOf(charArray0);
      assertEquals(0, charArray0.length);
      assertNotNull(string0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals("", string0);
      
      String string1 = StringUtils.getDigits("");
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
      
      boolean boolean0 = StringUtils.isBlank(" ");
      assertTrue(boolean0);
      
      Class<Object> class0 = Object.class;
      ServiceLoader<Object> serviceLoader0 = ServiceLoader.loadInstalled(class0);
      assertEquals("java.util.ServiceLoader[java.lang.Object]", serviceLoader0.toString());
      assertNotNull(serviceLoader0);
      
      String string2 = StringUtils.join((Iterable<?>) serviceLoader0, " ");
      assertEquals("java.util.ServiceLoader[java.lang.Object]", serviceLoader0.toString());
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("", string2);
      
      String string3 = StringUtils.deleteWhitespace("Search and Replace array lengths don't match: ");
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      assertEquals("SearchandReplacearraylengthsdon'tmatch:", string3);
  }

  @Test(timeout = 4000)
  public void test657()  throws Throwable  {
      boolean boolean0 = StringUtils.containsOnly((CharSequence) null, "Threshold must not be negative");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test658()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      String string0 = StringUtils.appendIfMissingIgnoreCase("", "", charSequenceArray0);
      assertEquals(0, charSequenceArray0.length);
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.toRootLowerCase((String) null);
      assertNull(string1);
      
      String string2 = StringUtils.abbreviate("", (String) null, 0, 0);
      assertTrue(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("", string2);
      
      String string3 = StringUtils.center("The character ", 0);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      assertEquals("The character ", string3);
      
      boolean boolean0 = StringUtils.equals((CharSequence) null, (CharSequence) "");
      assertFalse(boolean0);
      
      String string4 = StringUtils.rightPad("*3d,y8Y%UBd{{:R", 0, '+');
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertNotNull(string4);
      assertEquals("*3d,y8Y%UBd{{:R", string4);
      
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = true;
      booleanArray0[5] = false;
      booleanArray0[6] = false;
      booleanArray0[7] = false;
      String string5 = StringUtils.join(booleanArray0, 'n', 8, (-1310));
      assertFalse(string5.equals((Object)string4));
      assertTrue(string5.equals((Object)string2));
      assertTrue(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertEquals(8, booleanArray0.length);
      assertNotNull(string5);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, true, false, false, false}, booleanArray0));
      assertEquals("", string5);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("&5wUx/:{H>l'l", "~^jbro'eEH9v\"&#S");
      assertEquals(4, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string6 = StringUtils.trim((String) null);
      assertNull(string6);
      
      String string7 = StringUtils.rightPad(", '", 8, (String) null);
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string3));
      assertNotNull(string7);
      assertEquals(", '     ", string7);
  }

  @Test(timeout = 4000)
  public void test659()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)8;
      byteArray0[1] = (byte)12;
      byteArray0[2] = (byte) (-121);
      byteArray0[3] = (byte)88;
      byteArray0[4] = (byte)12;
      byteArray0[5] = (byte) (-122);
      byteArray0[6] = (byte)15;
      String string0 = StringUtils.toEncodedString(byteArray0, (Charset) null);
      assertEquals(7, byteArray0.length);
      assertNotNull(string0);
      assertArrayEquals(new byte[] {(byte)8, (byte)12, (byte) (-121), (byte)88, (byte)12, (byte) (-122), (byte)15}, byteArray0);
      assertEquals("\b\f\uFFFDX\f\uFFFD\u000F", string0);
      
      boolean boolean0 = StringUtils.containsWhitespace("\b\f\uFFFDX\f\uFFFD\u000F");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test660()  throws Throwable  {
      String string0 = StringUtils.substringBetween("", (String) null);
      assertNull(string0);
      
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "", (String) null);
      assertFalse(boolean0);
      
      char[] charArray0 = new char[5];
      charArray0[0] = '|';
      charArray0[1] = 'a';
      charArray0[2] = '%';
      charArray0[3] = 'U';
      charArray0[4] = 'h';
      boolean boolean1 = StringUtils.containsOnly((CharSequence) "kb>K:%lR&M+Fm2*/78.", charArray0);
      assertTrue(boolean1 == boolean0);
      assertEquals(5, charArray0.length);
      assertArrayEquals(new char[] {'|', 'a', '%', 'U', 'h'}, charArray0);
      assertFalse(boolean1);
      
      String string1 = StringUtils.replace((String) null, (String) null, "&?[`Li$T`8y^F+", 8192);
      assertNull(string1);
      
      int int0 = StringUtils.indexOfAnyBut((CharSequence) null, charArray0);
      assertEquals(5, charArray0.length);
      assertArrayEquals(new char[] {'|', 'a', '%', 'U', 'h'}, charArray0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test661()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      Locale locale0 = Locale.GERMANY;
      assertEquals("de", locale0.getLanguage());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("DE", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("de_DE", locale0.toString());
      assertNotNull(locale0);
      
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      assertEquals("de", locale0.getLanguage());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("DE", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("de_DE", locale0.toString());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertNotNull(set0);
      
      Set<String> set1 = locale0.getUnicodeLocaleKeys();
      assertEquals("de", locale0.getLanguage());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("DE", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("de_DE", locale0.toString());
      assertEquals(0, set1.size());
      assertTrue(set1.isEmpty());
      assertSame(set1, set0);
      assertNotNull(set1);
      
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.EXTENDED_FILTERING;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) arrayList0, (Collection<String>) set0, locale_FilteringMode0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertEquals("de", locale0.getLanguage());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("DE", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("de_DE", locale0.toString());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertSame(set0, set1);
      assertNotNull(list0);
      
      String string0 = StringUtils.substringAfter("\n", 598);
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.abbreviate("\n", (String) null, (-1));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("\n", string1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      charSequenceArray0[0] = (CharSequence) "";
      boolean boolean0 = StringUtils.isAnyEmpty(charSequenceArray0);
      assertEquals(1, charSequenceArray0.length);
      assertTrue(boolean0);
      
      boolean boolean1 = StringUtils.isAllUpperCase("\n");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test662()  throws Throwable  {
      String string0 = StringUtils.replaceIgnoreCase("FV p:3`w6b", "object", "czstk<8*v", 76);
      assertNotNull(string0);
      assertEquals("FV p:3`w6b", string0);
  }

  @Test(timeout = 4000)
  public void test663()  throws Throwable  {
      boolean boolean0 = StringUtils.isAllUpperCase((CharSequence) null);
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.containsOnly((CharSequence) null, "h298b)&Q=>v<3n>I~l");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string0 = StringUtils.replaceIgnoreCase("h298b)&Q=>v<3n>I~l", "u;I", "u;I", (-1531));
      assertNotNull(string0);
      assertEquals("h298b)&Q=>v<3n>I~l", string0);
      
      String string1 = StringUtils.trim("h298b)&Q=>v<3n>I~l");
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("h298b)&Q=>v<3n>I~l", string1);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-55);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-102);
      byteArray0[3] = (byte) (-53);
      byteArray0[4] = (byte)0;
      Charset charset0 = Charset.defaultCharset();
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.name());
      assertNotNull(charset0);
      
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "h298b)&Q=>v<3n>I~l");
      assertEquals("h298b)&Q=>v<3n>I~l", charBuffer0.toString());
      assertEquals(18, charBuffer0.remaining());
      assertEquals(18, charBuffer0.capacity());
      assertFalse(charBuffer0.hasArray());
      assertFalse(charBuffer0.isDirect());
      assertTrue(charBuffer0.hasRemaining());
      assertTrue(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.position());
      assertEquals(18, charBuffer0.length());
      assertEquals(18, charBuffer0.limit());
      assertNotNull(charBuffer0);
      
      char char0 = charBuffer0.charAt((byte)0);
      assertEquals("h298b)&Q=>v<3n>I~l", charBuffer0.toString());
      assertEquals(18, charBuffer0.remaining());
      assertEquals(18, charBuffer0.capacity());
      assertFalse(charBuffer0.hasArray());
      assertFalse(charBuffer0.isDirect());
      assertTrue(charBuffer0.hasRemaining());
      assertTrue(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.position());
      assertEquals(18, charBuffer0.length());
      assertEquals(18, charBuffer0.limit());
      assertEquals('h', char0);
      
      ByteBuffer byteBuffer0 = charset0.encode(charBuffer0);
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.name());
      assertEquals(18, charBuffer0.capacity());
      assertEquals(0, charBuffer0.length());
      assertEquals(0, charBuffer0.remaining());
      assertFalse(charBuffer0.hasArray());
      assertFalse(charBuffer0.isDirect());
      assertTrue(charBuffer0.isReadOnly());
      assertEquals(18, charBuffer0.position());
      assertFalse(charBuffer0.hasRemaining());
      assertEquals("", charBuffer0.toString());
      assertEquals(18, charBuffer0.limit());
      assertEquals(18, byteBuffer0.remaining());
      assertEquals(19, byteBuffer0.capacity());
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals(18, byteBuffer0.limit());
      assertTrue(byteBuffer0.hasArray());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertEquals(0, byteBuffer0.position());
      assertFalse(byteBuffer0.isDirect());
      assertTrue(byteBuffer0.hasRemaining());
      assertEquals("java.nio.HeapByteBuffer[pos=0 lim=18 cap=19]", byteBuffer0.toString());
      assertNotNull(byteBuffer0);
      
      String string2 = StringUtils.toEncodedString(byteArray0, charset0);
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.name());
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals(5, byteArray0.length);
      assertNotNull(string2);
      assertArrayEquals(new byte[] {(byte) (-55), (byte)0, (byte) (-102), (byte) (-53), (byte)0}, byteArray0);
      assertEquals("\uFFFD\u0000\uFFFD\uFFFD\u0000", string2);
      
      String string3 = StringUtils.abbreviate("", "u;I", (int) (byte) (-53), (int) (byte) (-55));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      assertEquals("", string3);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens((String) null, 'C');
      assertNull(stringArray0);
      
      char[] charArray0 = new char[7];
      charArray0[0] = 'C';
      charArray0[1] = 'h';
      charArray0[2] = 'C';
      charArray0[3] = 'h';
      charArray0[4] = 'C';
      charArray0[5] = 'U';
      charArray0[6] = 'C';
      String string4 = StringUtils.valueOf(charArray0);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertEquals(7, charArray0.length);
      assertNotNull(string4);
      assertArrayEquals(new char[] {'C', 'h', 'C', 'h', 'C', 'U', 'C'}, charArray0);
      assertEquals("ChChCUC", string4);
  }

  @Test(timeout = 4000)
  public void test664()  throws Throwable  {
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      Locale locale0 = Locale.GERMANY;
      assertEquals("de_DE", locale0.toString());
      assertEquals("DE", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("de", locale0.getLanguage());
      assertNotNull(locale0);
      
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      assertEquals("de_DE", locale0.toString());
      assertEquals("DE", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("de", locale0.getLanguage());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertNotNull(set0);
      
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) arrayList0, (Collection<String>) set0, locale_FilteringMode0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertEquals("de_DE", locale0.toString());
      assertEquals("DE", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("de", locale0.getLanguage());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
      
      String string0 = StringUtils.substringAfter("", 598);
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.abbreviate((String) null, "", 598);
      assertNull(string1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      charSequenceArray0[0] = (CharSequence) null;
      charSequenceArray0[1] = (CharSequence) null;
      charSequenceArray0[2] = (CharSequence) "";
      boolean boolean0 = StringUtils.isAnyEmpty(charSequenceArray0);
      assertEquals(3, charSequenceArray0.length);
      assertTrue(boolean0);
      
      String string2 = StringUtils.defaultIfEmpty((String) null, "");
      assertTrue(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("", string2);
      
      boolean boolean1 = StringUtils.isAllEmpty(charSequenceArray0);
      assertTrue(boolean1 == boolean0);
      assertEquals(3, charSequenceArray0.length);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test665()  throws Throwable  {
      int int0 = StringUtils.ordinalIndexOf(" ", " ", 13);
      assertEquals((-1), int0);
      
      int int1 = StringUtils.indexOf((CharSequence) " ", 308);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      int int2 = StringUtils.indexOfDifference((CharSequence) " ", (CharSequence) " ");
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals((-1), int2);
      
      int int3 = StringUtils.indexOf((CharSequence) " ", (CharSequence) " ");
      assertFalse(int3 == int0);
      assertFalse(int3 == int1);
      assertFalse(int3 == int2);
      assertEquals(0, int3);
  }

  @Test(timeout = 4000)
  public void test666()  throws Throwable  {
      String string0 = StringUtils.leftPad("h", 48);
      assertNotNull(string0);
      assertEquals("                                               h", string0);
      
      String string1 = StringUtils.wrapIfMissing("=`%d=7wr7,/{8`", "Z");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("Z=`%d=7wr7,/{8`Z", string1);
      
      int[] intArray0 = new int[0];
      String string2 = StringUtils.substringBefore("=`%d=7wr7,/{8`", (int) 'z');
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("=`%d=7wr7,/{8`", string2);
      
      String string3 = StringUtils.unwrap("maxWith cannot be negative", "=`%d=7wr7,/{8`");
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      assertEquals("maxWith cannot be negative", string3);
      
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "Z=`%d=7wr7,/{8`Z", " %oS");
      assertFalse(boolean0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      charSequenceArray0[0] = (CharSequence) " %oS";
      String string4 = StringUtils.prependIfMissing("h", (CharSequence) null, charSequenceArray0);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertEquals(1, charSequenceArray0.length);
      assertNotNull(string4);
      assertEquals("h", string4);
      
      int int0 = StringUtils.indexOf((CharSequence) null, (CharSequence) "h");
      assertEquals((-1), int0);
      
      char[] charArray0 = new char[3];
      charArray0[0] = 'z';
      charArray0[1] = 'z';
      charArray0[2] = 'z';
      boolean boolean1 = StringUtils.containsNone((CharSequence) "Z=`%d=7wr7,/{8`Z", charArray0);
      assertFalse(boolean1 == boolean0);
      assertEquals(3, charArray0.length);
      assertArrayEquals(new char[] {'z', 'z', 'z'}, charArray0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test667()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      String string0 = StringUtils.join(byteArray0, '&', (int) '&', (-1));
      assertEquals(0, byteArray0.length);
      assertNotNull(string0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals("", string0);
      
      String string1 = StringUtils.uncapitalize("null/empty items~4&4+2&FA");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("null/empty items~4&4+2&FA", string1);
      
      String string2 = StringUtils.trimToNull("null/empty items~4&4+2&FA");
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("null/empty items~4&4+2&FA", string2);
  }

  @Test(timeout = 4000)
  public void test668()  throws Throwable  {
      String string0 = StringUtils.defaultString("Strings must not be null");
      assertNotNull(string0);
      assertEquals("Strings must not be null", string0);
      
      String string1 = StringUtils.defaultIfEmpty("Strings must not be null", "Strings must not be null");
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("Strings must not be null", string1);
  }

  @Test(timeout = 4000)
  public void test669()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[9];
      String string0 = StringUtils.strip("org.apache.commons.lang3.RegExUtils");
      assertNotNull(string0);
      assertEquals("org.apache.commons.lang3.RegExUtils", string0);
      
      charSequenceArray0[0] = (CharSequence) "org.apache.commons.lang3.RegExUtils";
      charSequenceArray0[1] = (CharSequence) "org.apache.commons.lang3.RegExUtils";
      charSequenceArray0[2] = (CharSequence) "org.apache.commons.lang3.RegExUtils";
      charSequenceArray0[3] = (CharSequence) "org.apache.commons.lang3.RegExUtils";
      charSequenceArray0[4] = (CharSequence) "org.apache.commons.lang3.RegExUtils";
      charSequenceArray0[5] = (CharSequence) "org.apache.commons.lang3.RegExUtils";
      String string1 = StringUtils.join((Object[]) charSequenceArray0, ']');
      assertFalse(string1.equals((Object)string0));
      assertEquals(9, charSequenceArray0.length);
      assertNotNull(string1);
      assertEquals("org.apache.commons.lang3.RegExUtils]org.apache.commons.lang3.RegExUtils]org.apache.commons.lang3.RegExUtils]org.apache.commons.lang3.RegExUtils]org.apache.commons.lang3.RegExUtils]org.apache.commons.lang3.RegExUtils]]]", string1);
      
      int int0 = StringUtils.countMatches(charSequenceArray0[3], charSequenceArray0[5]);
      assertEquals(9, charSequenceArray0.length);
      assertEquals(1, int0);
      
      String[] stringArray0 = StringUtils.split("org.apache.commons.lang3.RegExUtils]org.apache.commons.lang3.RegExUtils]org.apache.commons.lang3.RegExUtils]org.apache.commons.lang3.RegExUtils]org.apache.commons.lang3.RegExUtils]org.apache.commons.lang3.RegExUtils]]]", ']');
      assertEquals(6, stringArray0.length);
      assertNotNull(stringArray0);
      
      try { 
        StringUtils.getBytes("p{InCombiningDiacriticalMarks}+", "org.apache.commons.lang3.RegExUtils");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(UnsupportedEncodingException e) {
      }
  }

  @Test(timeout = 4000)
  public void test670()  throws Throwable  {
      String string0 = StringUtils.abbreviate("bg1&:{)wot>X", (-671), 18);
      assertNotNull(string0);
      assertEquals("bg1&:{)wot>X", string0);
      
      String string1 = StringUtils.left("aX-1.0x-412.24x1.0x-2592.4207x-2730.193aX-1.0x-412.24x1.0x-2592.4207x-2730.193aX-1.0x-412.24x1.0x-2592.4207x-2730.193-1.0x-412.24x1.0x-2592.4207x-2730.193nt ", (-671));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
      
      long[] longArray0 = new long[8];
      longArray0[0] = (long) 18;
      longArray0[1] = (long) 18;
      longArray0[2] = (long) (-671);
      longArray0[3] = (long) 18;
      longArray0[4] = (long) (-671);
      longArray0[5] = (-1L);
      longArray0[6] = (long) (-671);
      longArray0[7] = (long) (-671);
      String string2 = StringUtils.join(longArray0, 'O');
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals(8, longArray0.length);
      assertNotNull(string2);
      assertArrayEquals(new long[] {18L, 18L, (-671L), 18L, (-671L), (-1L), (-671L), (-671L)}, longArray0);
      assertEquals("18O18O-671O18O-671O-1O-671O-671", string2);
      
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "", (CharSequence) "18O18O-671O18O-671O-1O-671O-671");
      assertEquals((-1), int0);
      
      short[] shortArray0 = new short[0];
      // Undeclared exception!
      try { 
        StringUtils.join(shortArray0, 'Z', (-671), 116);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -671
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test671()  throws Throwable  {
      String string0 = StringUtils.replace("Aborting to protect against StackOverflowError - output of one loop is the input of another", "Aborting to protect against StackOverflowError - output of one loop is the input of another", "Aborting to protect against StackOverflowError - output of one loop is the input of another", 571);
      assertNotNull(string0);
      assertEquals("Aborting to protect against StackOverflowError - output of one loop is the input of another", string0);
      
      String string1 = StringUtils.replaceIgnoreCase("Aborting to protect against StackOverflowError - output of one loop is the input of another", "", "", (-4154));
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("Aborting to protect against StackOverflowError - output of one loop is the input of another", string1);
      
      int int0 = StringUtils.lastOrdinalIndexOf("Aborting to protect against StackOverflowError - output of one loop is the input of another", "Aborting to protect against StackOverflowError - output of one loop is the input of another", (-4154));
      assertEquals((-1), int0);
      
      Object[] objectArray0 = new Object[0];
      String string2 = StringUtils.join(objectArray0, "P!ML(H+wAVH1Qe^71");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals(0, objectArray0.length);
      assertNotNull(string2);
      assertEquals("", string2);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("Aborting to protect against StackOverflowError - output of one loop is the input of another", 'w');
      assertEquals(2, stringArray0.length);
      assertNotNull(stringArray0);
      
      int int1 = StringUtils.indexOfAnyBut((CharSequence) "", (CharSequence) "");
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      String string3 = StringUtils.upperCase("");
      assertFalse(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      assertEquals("", string3);
      
      boolean boolean0 = StringUtils.contains((CharSequence) "", (CharSequence) "Aborting to protect against StackOverflowError - output of one loop is the input of another");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test672()  throws Throwable  {
      String string0 = StringUtils.right("Index: ", 0);
      assertNotNull(string0);
      assertEquals("", string0);
      
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) "";
      String string1 = StringUtils.join(objectArray0, "");
      assertTrue(string1.equals((Object)string0));
      assertEquals(4, objectArray0.length);
      assertNotNull(string1);
      assertEquals("", string1);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("Index: ", '5');
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "Index: ", (CharSequence) "");
      assertEquals((-1), int0);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) 0;
      floatArray0[1] = (-2573.7275F);
      floatArray0[2] = (float) '5';
      floatArray0[3] = 681.94F;
      String string2 = StringUtils.upperCase("Index: ");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("INDEX: ", string2);
      
      boolean boolean0 = StringUtils.contains((CharSequence) "", (CharSequence) "Index: ");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test673()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      String string0 = StringUtils.CR;
      assertNotNull(string0);
      assertEquals("\r", string0);
      
      LinkedList<Integer> linkedList1 = new LinkedList<Integer>();
      assertEquals(0, linkedList1.size());
      assertNotNull(linkedList1);
      
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "\r", (CharSequence) "\r");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test674()  throws Throwable  {
      String string0 = StringUtils.wrapIfMissing("aX-1.0x-412.24x1.0x-2592.4207x-2730.193aX-1.0x-412.24x1.0x-2592.4207x-2730.193aX-1.0x-412.24x1.0x-2592.4207x-2730.193-1.0x-412.24x1.0x-2592.4207x-2730.193", "nt ");
      assertNotNull(string0);
      assertEquals("nt aX-1.0x-412.24x1.0x-2592.4207x-2730.193aX-1.0x-412.24x1.0x-2592.4207x-2730.193aX-1.0x-412.24x1.0x-2592.4207x-2730.193-1.0x-412.24x1.0x-2592.4207x-2730.193nt ", string0);
      
      String string1 = StringUtils.join((byte[]) null, ';', 5111, 8);
      assertNull(string1);
      
      String string2 = StringUtils.leftPad(":]G4(Um{bj{[%>V.bFTGy^", 53, "Minimum abbreviation width with offset is %d");
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("Minimum abbreviation width with:]G4(Um{bj{[%>V.bFTGy^", string2);
  }

  @Test(timeout = 4000)
  public void test675()  throws Throwable  {
      int int0 = 0;
      String string0 = StringUtils.right("Index: ", 0);
      assertNotNull(string0);
      assertEquals("", string0);
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "";
      String string1 = StringUtils.join(objectArray0, "");
      assertTrue(string1.equals((Object)string0));
      assertEquals(1, objectArray0.length);
      assertNotNull(string1);
      assertEquals("", string1);
      
      char char0 = '5';
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("Index: ", '5');
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      int int1 = StringUtils.indexOfAnyBut((CharSequence) "Index: ", (CharSequence) "");
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      String string2 = StringUtils.join((byte[]) null, '5', 0, 0);
      assertNull(string2);
      
      String string3 = null;
      // Undeclared exception!
      try { 
        StringUtils.truncate((String) null, (-929), 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // offset cannot be negative
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test676()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = '$';
      charArray0[1] = 'Q';
      charArray0[2] = '$';
      charArray0[3] = '7';
      String string0 = StringUtils.join((Object[]) null, "kb>K:%lR&M+Fm2*/78");
      assertNull(string0);
      
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "kb>K:%lR&M+Fm2*/78", (CharSequence) "kb>K:%lR&M+Fm2*/78");
      assertEquals((-1), int0);
      
      boolean boolean0 = StringUtils.contains((CharSequence) "objectThe character ", (CharSequence) "kb>K:%lR&M+Fm2*/78");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isNumericSpace("kb>K:%lR&M+Fm2*/78");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test677()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      String[] stringArray0 = StringUtils.split("Locale must not be null", 'J');
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test678()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      charSequenceArray0[0] = (CharSequence) "a>{[Gq:c*~]";
      charSequenceArray0[1] = (CharSequence) "a>{[Gq:c*~]";
      charSequenceArray0[2] = (CharSequence) "a>{[Gq:c*~]";
      String string0 = StringUtils.prependIfMissingIgnoreCase("a>{[Gq:c*~]", "a>{[Gq:c*~]", charSequenceArray0);
      assertEquals(3, charSequenceArray0.length);
      assertNotNull(string0);
      assertEquals("a>{[Gq:c*~]", string0);
  }

  @Test(timeout = 4000)
  public void test679()  throws Throwable  {
      String string0 = StringUtils.overlay("", "t} NtV)0:on", 30, (-15));
      assertNotNull(string0);
      assertEquals("t} NtV)0:on", string0);
      
      String string1 = StringUtils.unwrap("", "lXG");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
      
      String string2 = StringUtils.unwrap("t} NtV)0:on", "");
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("t} NtV)0:on", string2);
  }

  @Test(timeout = 4000)
  public void test680()  throws Throwable  {
      String string0 = StringUtils.trim("");
      assertNotNull(string0);
      assertEquals("", string0);
      
      int int0 = StringUtils.indexOf((CharSequence) "", 6, 0);
      assertEquals((-1), int0);
      
      String string1 = StringUtils.strip("");
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
  }

  @Test(timeout = 4000)
  public void test681()  throws Throwable  {
      String string0 = StringUtils.stripAccents("");
      assertNotNull(string0);
      assertEquals("", string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "";
      charSequenceArray0[2] = (CharSequence) "";
      boolean boolean0 = StringUtils.isNoneBlank(charSequenceArray0);
      assertEquals(3, charSequenceArray0.length);
      assertFalse(boolean0);
      
      String string1 = StringUtils.prependIfMissingIgnoreCase("", "", charSequenceArray0);
      assertTrue(string1.equals((Object)string0));
      assertEquals(3, charSequenceArray0.length);
      assertNotNull(string1);
      assertEquals("", string1);
  }

  @Test(timeout = 4000)
  public void test682()  throws Throwable  {
      String string0 = StringUtils.remove("P.ikGNWDF", "2I@uQsj3(");
      assertNotNull(string0);
      assertEquals("P.ikGNWDF", string0);
      
      int int0 = StringUtils.indexOf((CharSequence) "P.ikGNWDF", (-2272));
      assertEquals((-1), int0);
      
      String string1 = StringUtils.deleteWhitespace("P.ikGNWDF");
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("P.ikGNWDF", string1);
      
      boolean boolean0 = StringUtils.isAlphaSpace("2I@uQsj3(");
      assertFalse(boolean0);
      
      String string2 = StringUtils.leftPad("P.ikGNWDF", (-1), "Array element ");
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("P.ikGNWDF", string2);
      
      int int1 = StringUtils.indexOf((CharSequence) "P.ikGNWDF", (-1));
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test683()  throws Throwable  {
      String string0 = StringUtils.removeEnd("Threshold must not be negative", "z9]NdoCi'78'>>");
      assertNotNull(string0);
      assertEquals("Threshold must not be negative", string0);
      
      String string1 = StringUtils.removeStart("z9]NdoCi'78'>>", "Pl'I0C0]FVY*{:`jr{`");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("z9]NdoCi'78'>>", string1);
      
      String string2 = StringUtils.substringAfterLast("B", 101);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("", string2);
      
      long[] longArray0 = new long[7];
      longArray0[0] = (long) '_';
      longArray0[1] = (long) '_';
      longArray0[2] = (long) 101;
      longArray0[3] = (long) '_';
      longArray0[4] = (long) '_';
      longArray0[5] = (long) 101;
      longArray0[6] = (long) '_';
      String string3 = StringUtils.join(longArray0, '_');
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals(7, longArray0.length);
      assertNotNull(string3);
      assertArrayEquals(new long[] {95L, 95L, 101L, 95L, 95L, 101L, 95L}, longArray0);
      assertEquals("95_95_101_95_95_101_95", string3);
      
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[0] = (CharSequence) "z9]NdoCi'78'>>";
      charSequenceArray0[1] = (CharSequence) "z9]NdoCi'78'>>";
      boolean boolean0 = StringUtils.equalsAny("95_95_101_95_95_101_95", charSequenceArray0);
      assertEquals(2, charSequenceArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test684()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      String string0 = StringUtils.join((List<?>) linkedList0, '2', 13, 13);
      assertEquals(0, linkedList0.size());
      assertNotNull(string0);
      assertEquals("", string0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      String string1 = StringUtils.leftPad("", 160, "");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("                                                                                                                                                                ", string1);
      
      int int0 = StringUtils.indexOf((CharSequence) "", (-479));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test685()  throws Throwable  {
      String[] stringArray0 = StringUtils.split("x[BEyAx", "x[BEyAx");
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      boolean boolean0 = StringUtils.isWhitespace("x[BEyAx");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isAnyEmpty(stringArray0);
      assertTrue(boolean1 == boolean0);
      assertEquals(0, stringArray0.length);
      assertFalse(boolean1);
      
      String string0 = StringUtils.leftPad("x[BEyAx", 322, 'g');
      assertNotNull(string0);
      assertEquals("gggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggx[BEyAx", string0);
      
      String[] stringArray1 = StringUtils.splitByCharacterType(" vs ");
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray1, stringArray0);
      assertEquals(3, stringArray1.length);
      assertNotNull(stringArray1);
      
      String string1 = StringUtils.rightPad("gggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggx[BEyAx", 322, "x[BEyAx");
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("gggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggx[BEyAx", string1);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      String string2 = StringUtils.join((Object[]) stringArray1, (String) null);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotSame(stringArray1, stringArray0);
      assertEquals(3, stringArray1.length);
      assertNotNull(string2);
      assertEquals(" vs ", string2);
      
      boolean boolean2 = StringUtils.isAllLowerCase((CharSequence) null);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      boolean boolean3 = StringUtils.isAlphanumericSpace("The type must not be null");
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3);
      
      String string3 = StringUtils.defaultIfEmpty("gggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggx[BEyAx", "gggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggx[BEyAx");
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string0));
      assertNotNull(string3);
      assertEquals("gggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggx[BEyAx", string3);
      
      boolean boolean4 = StringUtils.isMixedCase("gggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggx[BEyAx");
      assertFalse(boolean4 == boolean0);
      assertTrue(boolean4 == boolean3);
      assertFalse(boolean4 == boolean2);
      assertFalse(boolean4 == boolean1);
      assertTrue(boolean4);
  }

  @Test(timeout = 4000)
  public void test686()  throws Throwable  {
      String string0 = StringUtils.abbreviate("x[BEyAx", 5);
      assertNotNull(string0);
      assertEquals("x[...", string0);
      
      double double0 = StringUtils.getJaroWinklerDistance("x[BEyAx", "x[...");
      assertEquals(0.56, double0, 0.01);
      
      int int0 = StringUtils.indexOf((CharSequence) "x[...", 5);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test687()  throws Throwable  {
      String string0 = StringUtils.repeat('Q', 97);
      assertNotNull(string0);
      assertEquals("QQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQ", string0);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "QQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQ", 0, 0);
      assertEquals((-1), int0);
      
      String string1 = StringUtils.leftPad("QQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQ", (-1), '#');
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("QQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQ", string1);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens((String) null, 'Q');
      assertNull(stringArray0);
      
      String string2 = StringUtils.rightPad("QQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQ", 0, "QQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQ");
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("QQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQ", string2);
      
      String string3 = StringUtils.join((Object[]) null, "Threshold must not be negative");
      assertNull(string3);
      
      boolean boolean0 = StringUtils.isAllLowerCase("QQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQ");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isAlphanumericSpace((CharSequence) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string4 = StringUtils.defaultIfEmpty("OMw>WC$>`m7lgA0.", "eg+7:eQ");
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertNotNull(string4);
      assertEquals("OMw>WC$>`m7lgA0.", string4);
      
      boolean boolean2 = StringUtils.isMixedCase((CharSequence) null);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test688()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      Locale locale0 = Locale.GERMANY;
      assertEquals("de", locale0.getLanguage());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("DE", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("de_DE", locale0.toString());
      assertEquals("DEU", locale0.getISO3Country());
      assertNotNull(locale0);
      
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      assertEquals("de", locale0.getLanguage());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("DE", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("de_DE", locale0.toString());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertNotNull(set0);
      
      String string0 = StringUtils.substringAfter("\n", 598);
      assertNotNull(string0);
      assertEquals("", string0);
      
      int int0 = StringUtils.length("");
      assertEquals(0, int0);
      
      String string1 = StringUtils.left("", 598);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
      
      int int1 = StringUtils.indexOfAnyBut((CharSequence) "", (CharSequence) "\r");
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test689()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Stream<String> stream0 = linkedList0.parallelStream();
      assertEquals(0, linkedList0.size());
      assertNotNull(stream0);
      
      boolean boolean0 = linkedList0.add("', is neither of type Map.Entry nor an Array");
      assertEquals(1, linkedList0.size());
      assertTrue(linkedList0.contains("', is neither of type Map.Entry nor an Array"));
      assertTrue(boolean0);
      
      LinkedList<String> linkedList1 = new LinkedList<String>();
      assertEquals(0, linkedList1.size());
      assertFalse(linkedList1.equals((Object)linkedList0));
      assertNotNull(linkedList1);
      assertFalse(linkedList1.contains("', is neither of type Map.Entry nor an Array"));
      
      boolean boolean1 = linkedList1.offerFirst((String) null);
      assertEquals(1, linkedList1.size());
      assertFalse(linkedList1.equals((Object)linkedList0));
      assertTrue(boolean1 == boolean0);
      assertNotSame(linkedList1, linkedList0);
      assertFalse(linkedList1.contains("', is neither of type Map.Entry nor an Array"));
      assertTrue(boolean1);
      
      String string0 = linkedList0.pollFirst();
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.equals((Object)linkedList1));
      assertNotSame(linkedList0, linkedList1);
      assertNotNull(string0);
      assertFalse(linkedList0.contains(string0));
      assertEquals("', is neither of type Map.Entry nor an Array", string0);
      
      String string1 = linkedList1.pollFirst();
      assertEquals(0, linkedList1.size());
      assertTrue(linkedList1.equals((Object)linkedList0));
      assertNotSame(linkedList1, linkedList0);
      assertNull(string1);
      assertFalse(linkedList1.contains(string0));
      
      String string2 = StringUtils.join((List<?>) linkedList1, 'P', 532, 532);
      assertEquals(0, linkedList1.size());
      assertTrue(linkedList1.equals((Object)linkedList0));
      assertFalse(string2.equals((Object)string0));
      assertNotSame(linkedList1, linkedList0);
      assertNotNull(string2);
      assertFalse(linkedList1.contains(string0));
      assertEquals("", string2);
      
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) null;
      Object object0 = new Object();
      assertNotNull(object0);
      
      String string3 = StringUtils.leftPad("', is neither of type Map.Entry nor an Array", 532, (String) null);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      assertEquals("                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        ', is neither of type Map.Entry nor an Array", string3);
      
      int int0 = StringUtils.indexOf((CharSequence) "', is neither of type Map.Entry nor an Array", (-479));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test690()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[0] = (CharSequence) ":W3vjMB@";
      charSequenceArray0[0] = (CharSequence) ":W3vjMB@";
      boolean boolean0 = StringUtils.equalsAny(":W3vjMB@", charSequenceArray0);
      assertEquals(2, charSequenceArray0.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test691()  throws Throwable  {
      String string0 = StringUtils.leftPad("q@F!X#Ug_t@", 48, "f2+:I+(zo'wRzB(3");
      assertNotNull(string0);
      assertEquals("f2+:I+(zo'wRzB(3f2+:I+(zo'wRzB(3f2+:q@F!X#Ug_t@", string0);
      
      int int0 = StringUtils.indexOf((CharSequence) "f2+:I+(zo'wRzB(3", 0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test692()  throws Throwable  {
      String string0 = StringUtils.stripStart("maxWith cannot be negative", "maxWith cannot be negative");
      assertNotNull(string0);
      assertEquals("", string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[6];
      String string1 = StringUtils.removeAll("", "3-/J");
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
      
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "maxWith cannot be negative";
      charSequenceArray0[2] = (CharSequence) "maxWith cannot be negative";
      charSequenceArray0[3] = (CharSequence) "";
      charSequenceArray0[4] = (CharSequence) "";
      charSequenceArray0[5] = (CharSequence) "maxWith cannot be negative";
      boolean boolean0 = StringUtils.isAnyEmpty(charSequenceArray0);
      assertEquals(6, charSequenceArray0.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test693()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlphanumericSpace("kb>K:%lR&M+Fm2*/78");
      assertFalse(boolean0);
      
      String string0 = StringUtils.defaultIfEmpty("kb>K:%lR&M+Fm2*/78", "eKADJFOC0");
      assertNotNull(string0);
      assertEquals("kb>K:%lR&M+Fm2*/78", string0);
      
      boolean boolean1 = StringUtils.isMixedCase("kb>K:%lR&M+Fm2*/78");
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test694()  throws Throwable  {
      String string0 = StringUtils.left(";Y@/7", (-2583));
      assertNotNull(string0);
      assertEquals("", string0);
      
      boolean boolean0 = StringUtils.isAlphanumericSpace(";Y@/7");
      assertFalse(boolean0);
      
      double double0 = StringUtils.getJaroWinklerDistance("", ";Y@/7");
      assertEquals(0.0, double0, 0.01);
      
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "";
      charSequenceArray0[2] = (CharSequence) ";Y@/7";
      charSequenceArray0[3] = (CharSequence) ";Y@/7";
      boolean boolean1 = StringUtils.equalsAny("", charSequenceArray0);
      assertFalse(boolean1 == boolean0);
      assertEquals(4, charSequenceArray0.length);
      assertTrue(boolean1);
      
      boolean boolean2 = StringUtils.contains(charSequenceArray0[0], charSequenceArray0[3]);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertEquals(4, charSequenceArray0.length);
      assertFalse(boolean2);
      
      String string1 = StringUtils.removeAll("org.apache.commons.lang3.StringUtils", "Array and element cannot both be null");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("org.apache.commons.lang3.StringUtils", string1);
      
      String string2 = StringUtils.stripStart("org.apache.commons.lang3.StringUtils", "yR1MavwCN");
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("org.apache.commons.lang3.StringUtils", string2);
      
      String[] stringArray0 = StringUtils.split("3MFQ9FIc_*%R:G");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string3 = StringUtils.leftPad("org.apache.commons.lang3.StringUtils", 0, (String) null);
      assertTrue(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string2));
      assertNotNull(string3);
      assertEquals("org.apache.commons.lang3.StringUtils", string3);
      
      String string4 = StringUtils.wrap("4Ef_gx\"j6#\"", 'r');
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertNotNull(string4);
      assertEquals("r4Ef_gx\"j6#\"r", string4);
      
      String string5 = StringUtils.reverse("{}");
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertNotNull(string5);
      assertEquals("}{", string5);
      
      boolean boolean3 = StringUtils.isAnyEmpty(charSequenceArray0);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3 == boolean2);
      assertEquals(4, charSequenceArray0.length);
      assertTrue(boolean3);
  }

  @Test(timeout = 4000)
  public void test695()  throws Throwable  {
      short[] shortArray0 = new short[3];
      String string0 = StringUtils.join(shortArray0, '!');
      assertEquals(3, shortArray0.length);
      assertNotNull(string0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0}, shortArray0);
      assertEquals("0!0!0", string0);
      
      int int0 = StringUtils.ordinalIndexOf("0!0!0", "0!0!0", 156);
      assertEquals((-1), int0);
      
      int int1 = StringUtils.indexOf((CharSequence) "0!0!0", (-1824));
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      String string1 = StringUtils.rotate((String) null, (-29));
      assertNull(string1);
      
      String string2 = StringUtils.repeat('!', 1008);
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      Locale locale0 = Locale.PRC;
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("CN", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_CN", locale0.toString());
      assertNotNull(locale0);
      
      // Undeclared exception!
      try { 
        StringUtils.getFuzzyDistance(string2, (CharSequence) null, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test696()  throws Throwable  {
      String string0 = StringUtils.LF;
      assertNotNull(string0);
      assertEquals("\n", string0);
      
      int int0 = StringUtils.indexOfDifference((CharSequence) "\n", (CharSequence) "\n");
      assertEquals((-1), int0);
      
      String[] stringArray0 = StringUtils.split("");
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      int int1 = StringUtils.indexOf((CharSequence) "", 3027);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      String string1 = StringUtils.deleteWhitespace("\n");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
      
      boolean boolean0 = StringUtils.isAlphaSpace("\n");
      assertFalse(boolean0);
      
      String[] stringArray1 = StringUtils.splitPreserveAllTokens("\n", 'b');
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray1, stringArray0);
      assertEquals(1, stringArray1.length);
      assertNotNull(stringArray1);
      
      String string2 = StringUtils.strip("'h{e]AmORVl]", "");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("'h{e]AmORVl]", string2);
  }

  @Test(timeout = 4000)
  public void test697()  throws Throwable  {
      String string0 = StringUtils.chomp(")!1XjMA#y,~aU");
      assertNotNull(string0);
      assertEquals(")!1XjMA#y,~aU", string0);
      
      String string1 = StringUtils.substring(")!1XjMA#y,~aU", (-32768));
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(")!1XjMA#y,~aU", string1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      charSequenceArray0[0] = (CharSequence) ")!1XjMA#y,~aU";
      charSequenceArray0[2] = (CharSequence) ")!1XjMA#y,~aU";
      int int0 = StringUtils.lastIndexOfAny(")!1XjMA#y,~aU", charSequenceArray0);
      assertEquals(4, charSequenceArray0.length);
      assertEquals(0, int0);
      
      String string2 = StringUtils.substringAfterLast("DG'mib`w", 0);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("", string2);
      
      boolean boolean0 = StringUtils.isNotEmpty(", '");
      assertTrue(boolean0);
      
      String string3 = StringUtils.removeIgnoreCase(", '", (String) null);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      assertEquals(", '", string3);
      
      boolean boolean1 = StringUtils.contains((CharSequence) "", 3833);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string4 = StringUtils.replacePattern(")!1XjMA#y,~aU", "5C'7", "-6O");
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string0));
      assertNotNull(string4);
      assertEquals(")!1XjMA#y,~aU", string4);
      
      String[] stringArray0 = StringUtils.substringsBetween("rLvq;XF-", "\r", "u-](");
      assertNull(stringArray0);
      
      Locale locale0 = Locale.ROOT;
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getLanguage());
      assertNotNull(locale0);
      
      String string5 = StringUtils.replaceChars("Strings must not be null", 'c', ',');
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertNotNull(string5);
      assertEquals("Strings must not be null", string5);
      
      double double0 = StringUtils.getJaroWinklerDistance("Strings must not be null", "");
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test698()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = 'Q';
      String string0 = StringUtils.abbreviateMiddle(">/u;Z+", "org.apache.commons.lang3.Charsets", 4308);
      assertNotNull(string0);
      assertEquals(">/u;Z+", string0);
      
      String string1 = StringUtils.substringAfterLast("GdO[htbw}6Mc6.@E#)null/empty items~4&4+2&fa", 54);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(".@E#)null/empty items~4&4+2&fa", string1);
      
      String string2 = StringUtils.center("", (-32768));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("", string2);
      
      String string3 = StringUtils.removeEnd("org.apache.commons.lang3.Charsets", ".@E#)null/empty items~4&4+2&fa");
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      assertEquals("org.apache.commons.lang3.Charsets", string3);
  }

  @Test(timeout = 4000)
  public void test699()  throws Throwable  {
      String string0 = StringUtils.stripStart("", "");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.difference("", "ft{X&Y9ufPzlOW+5#");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("ft{X&Y9ufPzlOW+5#", string1);
      
      int int0 = StringUtils.countMatches((CharSequence) "ft{X&Y9ufPzlOW+5#", 'A');
      assertEquals(0, int0);
      
      String string2 = StringUtils.stripEnd("9H", "YM");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("9H", string2);
      
      CharSequence[] charSequenceArray0 = new CharSequence[8];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "ft{X&Y9ufPzlOW+5#";
      charSequenceArray0[2] = (CharSequence) "9H";
      charSequenceArray0[3] = (CharSequence) "";
      String string3 = StringUtils.reverseDelimited((String) null, 'A');
      assertNull(string3);
      
      charSequenceArray0[4] = (CharSequence) null;
      Locale locale0 = Locale.FRANCE;
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("fr_FR", locale0.toString());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("FR", locale0.getCountry());
      assertNotNull(locale0);
      
      // Undeclared exception!
      try { 
        StringUtils.getFuzzyDistance("", charSequenceArray0[4], locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test700()  throws Throwable  {
      String string0 = StringUtils.rightPad("GY$t", 8192, 'p');
      assertNotNull(string0);
      
      String string1 = StringUtils.substring(string0, 8192);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
  }

  @Test(timeout = 4000)
  public void test701()  throws Throwable  {
      String string0 = StringUtils.stripEnd("Minimum abbreviation width with offset is %d", "Minimum abbreviation width with offset is %d");
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test702()  throws Throwable  {
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short)2127;
      String string0 = StringUtils.strip("KO)(uo0>#;Ny", "_wy`sG+n-P0");
      assertNotNull(string0);
      assertEquals("KO)(uo0>#;N", string0);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "_wy`sG+n-P0", "KO)(uo0>#;Ny");
      assertEquals(2, int0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[7];
      charSequenceArray0[0] = (CharSequence) "KO)(uo0>#;N";
      charSequenceArray0[1] = (CharSequence) "KO)(uo0>#;N";
      charSequenceArray0[2] = (CharSequence) "KO)(uo0>#;N";
      charSequenceArray0[3] = (CharSequence) "KO)(uo0>#;Ny";
      charSequenceArray0[4] = (CharSequence) "KO)(uo0>#;Ny";
      charSequenceArray0[5] = (CharSequence) "KO)(uo0>#;Ny";
      charSequenceArray0[6] = (CharSequence) "_wy`sG+n-P0";
      boolean boolean0 = StringUtils.equalsAny("KO)(uo0>#;Ny", charSequenceArray0);
      assertEquals(7, charSequenceArray0.length);
      assertTrue(boolean0);
      
      boolean boolean1 = StringUtils.isAlphanumericSpace(charSequenceArray0[3]);
      assertFalse(boolean1 == boolean0);
      assertEquals(7, charSequenceArray0.length);
      assertFalse(boolean1);
      
      String string1 = StringUtils.substringAfterLast("", (int) (short)2127);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
  }

  @Test(timeout = 4000)
  public void test703()  throws Throwable  {
      String string0 = StringUtils.join((Integer[]) null);
      assertNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[9];
      charSequenceArray0[2] = (CharSequence) null;
      String string1 = StringUtils.substring("", 0);
      assertNotNull(string1);
      assertEquals("", string1);
      
      charSequenceArray0[3] = (CharSequence) "";
      charSequenceArray0[4] = (CharSequence) null;
      charSequenceArray0[5] = (CharSequence) null;
      charSequenceArray0[6] = (CharSequence) null;
      charSequenceArray0[7] = (CharSequence) null;
      charSequenceArray0[8] = (CharSequence) null;
      int int0 = StringUtils.lastIndexOfAny((CharSequence) null, charSequenceArray0);
      assertEquals(9, charSequenceArray0.length);
      assertEquals((-1), int0);
      
      String[] stringArray0 = StringUtils.substringsBetween((String) null, "", "");
      assertNull(stringArray0);
      
      Locale locale0 = Locale.ROOT;
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.toString());
      assertNotNull(locale0);
      
      String string2 = StringUtils.replaceChars(":W3vjMB@", 'N', ' ');
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals(":W3vjMB@", string2);
  }

  @Test(timeout = 4000)
  public void test704()  throws Throwable  {
      String string0 = StringUtils.substringAfterLast("Supplied value must be a valid byte literal between -128 and 127: [", "Supplied value must be a valid byte literal between -128 and 127: [");
      assertNotNull(string0);
      assertEquals("", string0);
      
      char[] charArray0 = new char[3];
      charArray0[0] = '@';
      charArray0[1] = 'a';
      charArray0[2] = '$';
      boolean boolean0 = StringUtils.containsAny((CharSequence) "", charArray0);
      assertEquals(3, charArray0.length);
      assertArrayEquals(new char[] {'@', 'a', '$'}, charArray0);
      assertFalse(boolean0);
      
      String string1 = StringUtils.deleteWhitespace("");
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
      
      int int0 = StringUtils.indexOf((CharSequence) "", (-32768), 25);
      assertEquals((-1), int0);
      
      String string2 = StringUtils.stripAccents("9Bf;oQZFH\"2RFO");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("9Bf;oQZFH\"2RFO", string2);
      
      int int1 = StringUtils.compare("", ")!1XjMA#y,~aU");
      assertFalse(int1 == int0);
      assertEquals((-13), int1);
      
      String string3 = StringUtils.substring("Search and Replace array lengths don't match: ", 380);
      assertTrue(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      assertEquals("", string3);
  }

  @Test(timeout = 4000)
  public void test705()  throws Throwable  {
      String string0 = "N]I`al;FP_1$^j,.Q<l";
      String string1 = StringUtils.mid("N]I`al;FP_1$^j,.Q<l", 128, 4150);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
      
      String string2 = StringUtils.leftPad("N]I`al;FP_1$^j,.Q<l", 128);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("                                                                                                             N]I`al;FP_1$^j,.Q<l", string2);
      
      String string3 = "IJ[>-hg9BsMG#l";
      String string4 = "_ >{HP8q\"S";
      String string5 = "org.apache.commons.lang3.StringUtils";
      String[] stringArray0 = StringUtils.substringsBetween("org.apache.commons.lang3.StringUtils", "                                                                                                             N]I`al;FP_1$^j,.Q<l", (String) null);
      assertNull(stringArray0);
      
      String string6 = " is not in the range '0' - '9'";
      // Undeclared exception!
      try { 
        StringUtils.abbreviate("org.apache.commons.lang3.StringUtils", (-950));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum abbreviation width is 4
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test706()  throws Throwable  {
      String string0 = StringUtils.abbreviateMiddle("uW .9FUN}?f", "IJ[>-hg9BsMG#lobjectIJ[>-hg9BsMG#lobjectIJ[>-hg9BsMG#lobjectobject", 0);
      assertNotNull(string0);
      assertEquals("uW .9FUN}?f", string0);
      
      String string1 = StringUtils.substringAfterLast("IJ[>-hg9BsMG#lobjectIJ[>-hg9BsMG#lobjectIJ[>-hg9BsMG#lobjectobject", 32767);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
  }

  @Test(timeout = 4000)
  public void test707()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = '8';
      String string0 = StringUtils.removeIgnoreCase("9Y`]eiW^{x@Rl", "ot be negative");
      assertNotNull(string0);
      assertEquals("9Y`]eiW^{x@Rl", string0);
      
      boolean boolean0 = StringUtils.contains((CharSequence) "9Y`]eiW^{x@Rl", 3833);
      assertFalse(boolean0);
      
      String string1 = StringUtils.replacePattern("9Y`]eiW^{x@Rl", "_", "-6O");
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("9Y`]eiW^{x@Rl", string1);
      
      String[] stringArray0 = StringUtils.substringsBetween("9Y`]eiW^{x@Rl", "eXvsHPl@C{{h", "5C'7");
      assertNull(stringArray0);
      
      Locale locale0 = Locale.ROOT;
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.toString());
      assertNotNull(locale0);
      
      String string2 = StringUtils.replaceChars("', has a length less than 2", '~', 't');
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("', has a length less than 2", string2);
      
      double double0 = StringUtils.getJaroWinklerDistance("', has a length less than 2", "', has a length less than 2");
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test708()  throws Throwable  {
      String string0 = StringUtils.removeEndIgnoreCase("t} NtV)0:on", "t} NtV)0:on");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.replaceOnce("", "", " 6");
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
      
      boolean boolean0 = StringUtils.isAllUpperCase("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test709()  throws Throwable  {
      String string0 = StringUtils.leftPad("x[BEyAx", (int) 'g', 'g');
      assertNotNull(string0);
      assertEquals("ggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggx[BEyAx", string0);
      
      String[] stringArray0 = Locale.getISOLanguages();
      assertEquals(188, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string1 = StringUtils.rightPad("ggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggx[BEyAx", (int) 'g', "x[BEyAx");
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("ggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggx[BEyAx", string1);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      String string2 = StringUtils.join((Object[]) stringArray0, (String) null);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals(188, stringArray0.length);
      assertNotNull(string2);
      assertEquals("aaabaeafakamanarasavayazbabebgbhbibmbnbobrbscacechcocrcscucvcydadedvdzeeeleneoeseteufafffifjfofrfygagdglgngugvhahehihohrhthuhyhziaidieigiiikinioisitiuiwjajijvkakgkikjkkklkmknkokrkskukvkwkylalblglilnloltlulvmgmhmimkmlmnmomrmsmtmynanbndnengnlnnnonrnvnyocojomorospapiplpsptqurmrnrorurwsascsdsesgsiskslsmsnsosqsrssstsusvswtatetgthtitktltntotrtstttwtyugukuruzvevivowawoxhyiyozazhzu", string2);
      
      boolean boolean0 = StringUtils.isAllLowerCase((CharSequence) null);
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isAlphanumericSpace("The type must not be null");
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String string3 = StringUtils.removeIgnoreCase("The type must not be null", (String) null);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      assertEquals("The type must not be null", string3);
      
      boolean boolean2 = StringUtils.isMixedCase("ggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggx[BEyAx");
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2);
  }

  @Test(timeout = 4000)
  public void test710()  throws Throwable  {
      String string0 = StringUtils.join((Integer[]) null);
      assertNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[9];
      charSequenceArray0[0] = (CharSequence) null;
      charSequenceArray0[2] = (CharSequence) null;
      String string1 = StringUtils.substring("", 0);
      assertNotNull(string1);
      assertEquals("", string1);
      
      charSequenceArray0[3] = (CharSequence) "";
      charSequenceArray0[4] = (CharSequence) null;
      charSequenceArray0[5] = (CharSequence) null;
      charSequenceArray0[6] = (CharSequence) null;
      charSequenceArray0[7] = (CharSequence) null;
      charSequenceArray0[8] = (CharSequence) null;
      int int0 = StringUtils.lastIndexOfAny((CharSequence) null, charSequenceArray0);
      assertEquals(9, charSequenceArray0.length);
      assertEquals((-1), int0);
      
      String string2 = StringUtils.substringAfterLast("DG'mib`w", 0);
      assertTrue(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("", string2);
      
      String string3 = StringUtils.stripEnd(", '", "");
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      assertEquals(", '", string3);
      
      boolean boolean0 = StringUtils.isNotEmpty(charSequenceArray0[2]);
      assertEquals(9, charSequenceArray0.length);
      assertFalse(boolean0);
      
      String string4 = StringUtils.removeIgnoreCase("", ", '");
      assertTrue(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertNotNull(string4);
      assertEquals("", string4);
      
      boolean boolean1 = StringUtils.contains((CharSequence) "", 0);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string5 = StringUtils.replacePattern(", '", "", "c/sKrU0");
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertNotNull(string5);
      assertEquals("c/sKrU0,c/sKrU0 c/sKrU0'c/sKrU0", string5);
      
      String[] stringArray0 = StringUtils.substringsBetween("", "", (String) null);
      assertNull(stringArray0);
      
      Locale locale0 = Locale.ROOT;
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertNotNull(locale0);
      
      String string6 = locale0.getDisplayVariant();
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertFalse(string6.equals((Object)string3));
      assertTrue(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string5));
      assertTrue(string6.equals((Object)string4));
      assertNotNull(string6);
      assertEquals("", string6);
      
      // Undeclared exception!
      try { 
        StringUtils.getFuzzyDistance(charSequenceArray0[7], charSequenceArray0[2], locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test711()  throws Throwable  {
      String string0 = StringUtils.replace("Aborting to protect against StackOverflowError - output of one loop is the input of another", "Aborting to protect against StackOverflowError - output of one loop is the input of another", "Aborting to protect against StackOverflowError - output of one loop is the input of another", 571);
      assertNotNull(string0);
      assertEquals("Aborting to protect against StackOverflowError - output of one loop is the input of another", string0);
      
      String string1 = StringUtils.replaceIgnoreCase("Aborting to protect against StackOverflowError - output of one loop is the input of another", "", "", (-4154));
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("Aborting to protect against StackOverflowError - output of one loop is the input of another", string1);
      
      int int0 = StringUtils.lastOrdinalIndexOf("Aborting to protect against StackOverflowError - output of one loop is the input of another", "Aborting to protect against StackOverflowError - output of one loop is the input of another", (-4154));
      assertEquals((-1), int0);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "Aborting to protect against StackOverflowError - output of one loop is the input of another";
      stringArray0[1] = "Aborting to protect against StackOverflowError - output of one loop is the input of another";
      String[] stringArray1 = StringUtils.stripAll(stringArray0, "Aborting to protect against StackOverflowError - output of one loop is the input of another");
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(2, stringArray0.length);
      assertEquals(2, stringArray1.length);
      assertNotNull(stringArray1);
      
      String string2 = StringUtils.join((Object[]) stringArray0, 'C');
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotSame(stringArray0, stringArray1);
      assertEquals(2, stringArray0.length);
      assertNotNull(string2);
      assertEquals("Aborting to protect against StackOverflowError - output of one loop is the input of anotherCAborting to protect against StackOverflowError - output of one loop is the input of another", string2);
      
      String string3 = StringUtils.stripAccents("");
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      assertEquals("", string3);
      
      String string4 = StringUtils.stripEnd("Aborting to protect against StackOverflowError - output of one loop is the input of another", "Aborting to protect against StackOverflowError - output of one loop is the input of another");
      assertTrue(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertNotNull(string4);
      assertEquals("", string4);
  }

  @Test(timeout = 4000)
  public void test712()  throws Throwable  {
      String string0 = StringUtils.stripToEmpty(" @ Mq}#],\"z7:=4j");
      assertNotNull(string0);
      assertEquals("@ Mq}#],\"z7:=4j", string0);
      
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("@ Mq}#],\"z7:=4j");
      assertEquals(13, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test713()  throws Throwable  {
      String string0 = StringUtils.rotate("kb>K:%lR&M+Fm2*/78", 366);
      assertNotNull(string0);
      assertEquals("m2*/78kb>K:%lR&M+F", string0);
  }

  @Test(timeout = 4000)
  public void test714()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[0] = null;
      String string0 = StringUtils.left(" vs ", 160);
      assertNotNull(string0);
      assertEquals(" vs ", string0);
      
      int int0 = StringUtils.indexOfAnyBut(charSequenceArray0[0], (CharSequence) " vs ");
      assertEquals(2, charSequenceArray0.length);
      assertEquals((-1), int0);
      
      boolean boolean0 = StringUtils.contains((CharSequence) null, (-1));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test715()  throws Throwable  {
      String string0 = StringUtils.join((Integer[]) null);
      assertNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[9];
      charSequenceArray0[0] = (CharSequence) null;
      charSequenceArray0[1] = (CharSequence) null;
      charSequenceArray0[2] = (CharSequence) null;
      String string1 = StringUtils.substring("", 0);
      assertNotNull(string1);
      assertEquals("", string1);
      
      charSequenceArray0[3] = (CharSequence) "";
      charSequenceArray0[4] = (CharSequence) null;
      charSequenceArray0[5] = (CharSequence) null;
      charSequenceArray0[6] = (CharSequence) null;
      charSequenceArray0[7] = (CharSequence) null;
      charSequenceArray0[8] = (CharSequence) null;
      int int0 = StringUtils.lastIndexOfAny((CharSequence) null, charSequenceArray0);
      assertEquals(9, charSequenceArray0.length);
      assertEquals((-1), int0);
      
      String string2 = StringUtils.substringAfterLast("DG'mib`w", 0);
      assertTrue(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("", string2);
      
      String string3 = StringUtils.stripEnd(", '", "");
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      assertEquals(", '", string3);
      
      boolean boolean0 = StringUtils.isNotEmpty(charSequenceArray0[2]);
      assertEquals(9, charSequenceArray0.length);
      assertFalse(boolean0);
      
      String string4 = StringUtils.removeIgnoreCase("", ", '");
      assertTrue(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertNotNull(string4);
      assertEquals("", string4);
      
      boolean boolean1 = StringUtils.contains((CharSequence) "", 0);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string5 = StringUtils.replacePattern(", '", "", "c/sKrU0");
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertNotNull(string5);
      assertEquals("c/sKrU0,c/sKrU0 c/sKrU0'c/sKrU0", string5);
      
      String[] stringArray0 = StringUtils.substringsBetween("", "rLvq;XF-", (String) null);
      assertNull(stringArray0);
      
      Locale locale0 = Locale.ROOT;
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Language());
      assertNotNull(locale0);
      
      // Undeclared exception!
      try { 
        StringUtils.getFuzzyDistance(charSequenceArray0[7], charSequenceArray0[2], locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test716()  throws Throwable  {
      String string0 = StringUtils.wrap((String) null, ';');
      assertNull(string0);
      
      String string1 = StringUtils.repeat((String) null, 8192);
      assertNull(string1);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) null, (CharSequence) null, 8192);
      assertEquals((-1), int0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[8];
      charSequenceArray0[0] = (CharSequence) null;
      String string2 = StringUtils.CR;
      assertNotNull(string2);
      assertEquals("\r", string2);
      
      charSequenceArray0[1] = (CharSequence) "\r";
      charSequenceArray0[2] = (CharSequence) null;
      String string3 = StringUtils.remove(" in an array of ", '&');
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      assertEquals(" in an array of ", string3);
      
      charSequenceArray0[3] = (CharSequence) " in an array of ";
      charSequenceArray0[4] = (CharSequence) null;
      charSequenceArray0[5] = (CharSequence) null;
      charSequenceArray0[6] = (CharSequence) null;
      charSequenceArray0[7] = (CharSequence) null;
      boolean boolean0 = StringUtils.isNoneEmpty(charSequenceArray0);
      assertEquals(8, charSequenceArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test717()  throws Throwable  {
      String string0 = StringUtils.stripAccents("");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.wrap(" is not in the range '0' - '9'", '3');
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("3 is not in the range '0' - '9'3", string1);
      
      String[] stringArray0 = StringUtils.substringsBetween("", "3 is not in the range '0' - '9'3", "3 is not in the range '0' - '9'3");
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      String[] stringArray1 = StringUtils.splitPreserveAllTokens(" is not in the range '0' - '9'", "");
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray1, stringArray0);
      assertEquals(1, stringArray1.length);
      assertNotNull(stringArray1);
      
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertNotNull(linkedHashSet0);
      assertFalse(linkedHashSet0.contains(string1));
      
      boolean boolean0 = linkedHashSet0.add("Cannot clone Cloneable type ");
      assertFalse(linkedHashSet0.isEmpty());
      assertEquals(1, linkedHashSet0.size());
      assertTrue(linkedHashSet0.contains("Cannot clone Cloneable type "));
      assertFalse(linkedHashSet0.contains(string1));
      assertTrue(boolean0);
      
      boolean boolean1 = linkedHashSet0.add("Cannot clone Cloneable type ");
      assertFalse(linkedHashSet0.isEmpty());
      assertEquals(1, linkedHashSet0.size());
      assertFalse(boolean1 == boolean0);
      assertTrue(linkedHashSet0.contains("Cannot clone Cloneable type "));
      assertFalse(linkedHashSet0.contains(string1));
      assertFalse(boolean1);
      
      String string2 = StringUtils.unwrap("`", "3UZkpvV1zf(\"[sD");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("`", string2);
      
      String[] stringArray2 = StringUtils.split("`", "");
      assertFalse(stringArray2.equals((Object)stringArray1));
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertNotSame(stringArray2, stringArray1);
      assertNotSame(stringArray2, stringArray0);
      assertEquals(1, stringArray2.length);
      assertNotNull(stringArray2);
      
      String string3 = StringUtils.toRootUpperCase((String) null);
      assertNull(string3);
  }

  @Test(timeout = 4000)
  public void test718()  throws Throwable  {
      String string0 = StringUtils.wrapIfMissing("aX-1.0x-412.24x1.0x-2592.4207x-2730.193aX-1.0x-412.24x1.0x-2592.4207x-2730.193aX-1.0x-412.24x1.0x-2592.4207x-2730.193-1.0x-412.24x1.0x-2592.4207x-2730.193", "nt ");
      assertNotNull(string0);
      assertEquals("nt aX-1.0x-412.24x1.0x-2592.4207x-2730.193aX-1.0x-412.24x1.0x-2592.4207x-2730.193aX-1.0x-412.24x1.0x-2592.4207x-2730.193-1.0x-412.24x1.0x-2592.4207x-2730.193nt ", string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[0] = (CharSequence) "aX-1.0x-412.24x1.0x-2592.4207x-2730.193aX-1.0x-412.24x1.0x-2592.4207x-2730.193aX-1.0x-412.24x1.0x-2592.4207x-2730.193-1.0x-412.24x1.0x-2592.4207x-2730.193";
      charSequenceArray0[1] = (CharSequence) "aX-1.0x-412.24x1.0x-2592.4207x-2730.193aX-1.0x-412.24x1.0x-2592.4207x-2730.193aX-1.0x-412.24x1.0x-2592.4207x-2730.193-1.0x-412.24x1.0x-2592.4207x-2730.193";
      boolean boolean0 = StringUtils.isNoneEmpty(charSequenceArray0);
      assertEquals(2, charSequenceArray0.length);
      assertTrue(boolean0);
      
      String string1 = StringUtils.joinWith("79", charSequenceArray0);
      assertFalse(string1.equals((Object)string0));
      assertEquals(2, charSequenceArray0.length);
      assertNotNull(string1);
      assertEquals("aX-1.0x-412.24x1.0x-2592.4207x-2730.193aX-1.0x-412.24x1.0x-2592.4207x-2730.193aX-1.0x-412.24x1.0x-2592.4207x-2730.193-1.0x-412.24x1.0x-2592.4207x-2730.19379aX-1.0x-412.24x1.0x-2592.4207x-2730.193aX-1.0x-412.24x1.0x-2592.4207x-2730.193aX-1.0x-412.24x1.0x-2592.4207x-2730.193-1.0x-412.24x1.0x-2592.4207x-2730.193", string1);
      
      String string2 = StringUtils.removeEndIgnoreCase("aX-1.0x-412.24x1.0x-2592.4207x-2730.193aX-1.0x-412.24x1.0x-2592.4207x-2730.193aX-1.0x-412.24x1.0x-2592.4207x-2730.193-1.0x-412.24x1.0x-2592.4207x-2730.193", "nt ");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("aX-1.0x-412.24x1.0x-2592.4207x-2730.193aX-1.0x-412.24x1.0x-2592.4207x-2730.193aX-1.0x-412.24x1.0x-2592.4207x-2730.193-1.0x-412.24x1.0x-2592.4207x-2730.193", string2);
  }

  @Test(timeout = 4000)
  public void test719()  throws Throwable  {
      String string0 = StringUtils.rightPad("', is neither of type Map.Entry nor an Array", (-1945));
      assertNotNull(string0);
      assertEquals("', is neither of type Map.Entry nor an Array", string0);
      
      int int0 = StringUtils.indexOf((CharSequence) "', is neither of type Map.Entry nor an Array", (-1945));
      assertEquals((-1), int0);
      
      CharSequence[] charSequenceArray0 = null;
      boolean boolean0 = StringUtils.isNoneEmpty((CharSequence[]) null);
      assertTrue(boolean0);
      
      String string1 = "Index: ";
      String string2 = StringUtils.toRootUpperCase("Index: ");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("INDEX: ", string2);
      
      String string3 = null;
      // Undeclared exception!
      try { 
        Charset.forName("q]hq");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // q]hq
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test720()  throws Throwable  {
      int int0 = StringUtils.ordinalIndexOf(" ", " ", 13);
      assertEquals((-1), int0);
      
      String string0 = StringUtils.stripStart("(", "x[BEyAxx[BEyAx");
      assertNotNull(string0);
      assertEquals("(", string0);
      
      String string1 = StringUtils.strip("W", "'h{e]AmORVl]");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("W", string1);
      
      String string2 = StringUtils.toRootUpperCase("9");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("9", string2);
      
      boolean boolean0 = StringUtils.isAllUpperCase("9");
      assertFalse(boolean0);
      
      String string3 = StringUtils.defaultString("x[BEyAxx[BEyAx");
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      assertEquals("x[BEyAxx[BEyAx", string3);
  }

  @Test(timeout = 4000)
  public void test721()  throws Throwable  {
      String string0 = StringUtils.getCommonPrefix((String[]) null);
      assertNotNull(string0);
      assertEquals("", string0);
      
      boolean boolean0 = StringUtils.containsIgnoreCase("", "");
      assertTrue(boolean0);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens(", Length: ", "r9lia<},TbG!mj)a|");
      assertEquals(2, stringArray0.length);
      assertNotNull(stringArray0);
      
      boolean boolean1 = StringUtils.isAlpha("");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test722()  throws Throwable  {
      String string0 = StringUtils.substringBefore("Strings must not be null", "Strings must not be null");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.reverse("Minimum abbreviation width is %d");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("d% si htdiw noitaiverbba muminiM", string1);
      
      String string2 = StringUtils.wrap("Z=`%d=7wr7,/{8`", '0');
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("0Z=`%d=7wr7,/{8`0", string2);
  }

  @Test(timeout = 4000)
  public void test723()  throws Throwable  {
      String[] stringArray0 = StringUtils.split("");
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      int int0 = StringUtils.compareIgnoreCase("", "");
      assertEquals(0, int0);
      
      boolean boolean0 = StringUtils.isAlpha("");
      assertFalse(boolean0);
      
      String string0 = StringUtils.appendIfMissing("", "", stringArray0);
      assertEquals(0, stringArray0.length);
      assertNotNull(string0);
      assertEquals("", string0);
      
      String[] stringArray1 = StringUtils.stripAll(stringArray0, "x&{#0],$RHy");
      assertSame(stringArray0, stringArray1);
      assertSame(stringArray1, stringArray0);
      assertEquals(0, stringArray0.length);
      assertEquals(0, stringArray1.length);
      assertNotNull(stringArray1);
      
      String string1 = "&X3YY%@";
      String string2 = StringUtils.reverse("&X3YY%@");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("@%YY3X&", string2);
      
      Vector<Integer> vector0 = new Vector<Integer>();
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertNotNull(vector0);
      assertFalse(vector0.contains(int0));
      
      Integer integer0 = new Integer(0);
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      boolean boolean1 = vector0.add(integer0);
      assertEquals(10, vector0.capacity());
      assertEquals("[0]", vector0.toString());
      assertEquals(1, vector0.size());
      assertFalse(vector0.isEmpty());
      assertTrue(integer0.equals((Object)int0));
      assertFalse(boolean1 == boolean0);
      assertTrue(vector0.contains(int0));
      assertTrue(boolean1);
      
      char char0 = '|';
      boolean boolean2 = vector0.add(integer0);
      assertEquals(2, vector0.size());
      assertEquals(10, vector0.capacity());
      assertFalse(vector0.isEmpty());
      assertEquals("[0, 0]", vector0.toString());
      assertTrue(integer0.equals((Object)int0));
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertTrue(vector0.contains(int0));
      assertTrue(boolean2);
      
      Spliterator<Integer> spliterator0 = vector0.spliterator();
      assertEquals(2, vector0.size());
      assertEquals(10, vector0.capacity());
      assertFalse(vector0.isEmpty());
      assertEquals("[0, 0]", vector0.toString());
      assertNotNull(spliterator0);
      assertTrue(vector0.contains(int0));
      
      Integer integer1 = new Integer(0);
      assertTrue(integer1.equals((Object)integer0));
      assertTrue(integer1.equals((Object)int0));
      assertNotNull(integer1);
      assertEquals(0, (int)integer1);
      
      boolean boolean3 = vector0.add(integer1);
      assertEquals(10, vector0.capacity());
      assertEquals(3, vector0.size());
      assertEquals("[0, 0, 0]", vector0.toString());
      assertFalse(vector0.isEmpty());
      assertTrue(integer1.equals((Object)integer0));
      assertTrue(integer1.equals((Object)int0));
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertTrue(vector0.contains(0));
      assertTrue(boolean3);
      
      // Undeclared exception!
      try { 
        vector0.set(2721, integer1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Array index out of range: 2721
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test724()  throws Throwable  {
      Object[] objectArray0 = new Object[4];
      String string0 = StringUtils.join(objectArray0);
      assertEquals(4, objectArray0.length);
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.getCommonPrefix((String[]) null);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "", (CharSequence) "", 2011);
      assertEquals(0, int0);
      
      boolean boolean0 = StringUtils.containsIgnoreCase("", "");
      assertTrue(boolean0);
      
      String[] stringArray0 = StringUtils.stripAll((String[]) null, "r9lia<},TbG!mj)a|");
      assertNull(stringArray0);
      
      String[] stringArray1 = StringUtils.splitPreserveAllTokens(", Length: ", "r9lia<},TbG!mj)a|");
      assertEquals(2, stringArray1.length);
      assertNotNull(stringArray1);
  }

  @Test(timeout = 4000)
  public void test725()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[0] = (CharSequence) null;
      charSequenceArray0[1] = (CharSequence) null;
      String string0 = StringUtils.appendIfMissing((String) null, (CharSequence) null, charSequenceArray0);
      assertEquals(2, charSequenceArray0.length);
      assertNull(string0);
      
      boolean boolean0 = StringUtils.isAlphanumeric((CharSequence) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test726()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 103.952389755145;
      doubleArray0[1] = (-770.791817848);
      doubleArray0[2] = 1161.0;
      // Undeclared exception!
      try { 
        StringUtils.join(doubleArray0, 'T', 77, 659);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 77
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }
}
