/*
 * This file was automatically generated by EvoSuite
 * Fri Apr 30 15:27:04 GMT 2021
 */

package org.apache.commons.lang3;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StringWriter;
import java.io.UnsupportedEncodingException;
import java.nio.Buffer;
import java.nio.ByteBuffer;
import java.nio.CharBuffer;
import java.nio.charset.Charset;
import java.nio.charset.IllegalCharsetNameException;
import java.nio.charset.UnsupportedCharsetException;
import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collection;
import java.util.Comparator;
import java.util.ConcurrentModificationException;
import java.util.EnumSet;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;
import java.util.ListIterator;
import java.util.Locale;
import java.util.PriorityQueue;
import java.util.Set;
import java.util.Stack;
import java.util.TreeSet;
import java.util.Vector;
import java.util.function.Consumer;
import java.util.function.Supplier;
import java.util.regex.PatternSyntaxException;
import java.util.stream.IntStream;
import java.util.stream.Stream;
import org.apache.commons.lang3.StringUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class StringUtils_ESTest extends StringUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      String string0 = StringUtils.substringAfterLast("2q\"z/", "m0G)U4Df(5(Rm0G)U4Df(5(R");
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOf((CharSequence) "", (-1054));
      assertEquals((-1), int0);
      
      String string1 = StringUtils.rightPad(" hIC,dQ", 321, " hIC,dQ");
      assertEquals(" hIC,dQ hIC,dQ hIC,dQ hIC,dQ hIC,dQ hIC,dQ hIC,dQ hIC,dQ hIC,dQ hIC,dQ hIC,dQ hIC,dQ hIC,dQ hIC,dQ hIC,dQ hIC,dQ hIC,dQ hIC,dQ hIC,dQ hIC,dQ hIC,dQ hIC,dQ hIC,dQ hIC,dQ hIC,dQ hIC,dQ hIC,dQ hIC,dQ hIC,dQ hIC,dQ hIC,dQ hIC,dQ hIC,dQ hIC,dQ hIC,dQ hIC,dQ hIC,dQ hIC,dQ hIC,dQ hIC,dQ hIC,dQ hIC,dQ hIC,dQ hIC,dQ hIC,dQ hIC,d", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      charSequenceArray0[0] = (CharSequence) "m0G)U4Df(5(Rm0G)U4Df(5(R";
      charSequenceArray0[1] = (CharSequence) "";
      charSequenceArray0[2] = (CharSequence) " hIC,dQ hIC,dQ hIC,dQ hIC,dQ hIC,dQ hIC,dQ hIC,dQ hIC,dQ hIC,dQ hIC,dQ hIC,dQ hIC,dQ hIC,dQ hIC,dQ hIC,dQ hIC,dQ hIC,dQ hIC,dQ hIC,dQ hIC,dQ hIC,dQ hIC,dQ hIC,dQ hIC,dQ hIC,dQ hIC,dQ hIC,dQ hIC,dQ hIC,dQ hIC,dQ hIC,dQ hIC,dQ hIC,dQ hIC,dQ hIC,dQ hIC,dQ hIC,dQ hIC,dQ hIC,dQ hIC,dQ hIC,dQ hIC,dQ hIC,dQ hIC,dQ hIC,dQ hIC,d";
      boolean boolean0 = StringUtils.startsWithAny(" hIC,dQ", charSequenceArray0);
      assertTrue(boolean0);
      assertEquals(3, charSequenceArray0.length);
      
      String string2 = StringUtils.join((double[]) null, 'R');
      assertNull(string2);
      
      String string3 = StringUtils.defaultString("Y)3n1`2_97u G#5v_Y)3n1`2_97u G#5v_Y)3n1`2_97u G#5v_Y)3n1`2_97u G#5v__");
      assertEquals("Y)3n1`2_97u G#5v_Y)3n1`2_97u G#5v_Y)3n1`2_97u G#5v_Y)3n1`2_97u G#5v__", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      
      String string4 = StringUtils.replaceFirst("Q<bi<B8..elvwXA#`9", "94", " hIC,dQ");
      assertEquals("Q<bi<B8..elvwXA#`9", string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertNotNull(string4);
      
      String[] stringArray0 = new String[6];
      stringArray0[0] = "m0G)U4Df(5(Rm0G)U4Df(5(R";
      stringArray0[1] = "94";
      stringArray0[2] = null;
      stringArray0[3] = "94";
      stringArray0[4] = null;
      stringArray0[5] = " hIC,dQ hIC,dQ hIC,dQ hIC,dQ hIC,dQ hIC,dQ hIC,dQ hIC,dQ hIC,dQ hIC,dQ hIC,dQ hIC,dQ hIC,dQ hIC,dQ hIC,dQ hIC,dQ hIC,dQ hIC,dQ hIC,dQ hIC,dQ hIC,dQ hIC,dQ hIC,dQ hIC,dQ hIC,dQ hIC,dQ hIC,dQ hIC,dQ hIC,dQ hIC,dQ hIC,dQ hIC,dQ hIC,dQ hIC,dQ hIC,dQ hIC,dQ hIC,dQ hIC,dQ hIC,dQ hIC,dQ hIC,dQ hIC,dQ hIC,dQ hIC,dQ hIC,dQ hIC,d";
      String string5 = StringUtils.firstNonBlank(stringArray0);
      assertEquals("m0G)U4Df(5(Rm0G)U4Df(5(R", string5);
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertNotNull(string5);
      assertEquals(6, stringArray0.length);
      
      String string6 = StringUtils.remove(string2, '}');
      assertNull(string6);
      
      char[] charArray0 = new char[7];
      charArray0[0] = 'R';
      charArray0[1] = 'R';
      charArray0[2] = 't';
      charArray0[3] = '>';
      charArray0[4] = '}';
      charArray0[5] = 'R';
      charArray0[6] = '}';
      // Undeclared exception!
      try { 
        StringUtils.join(charArray0, 'h', (-1), 321);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      charSequenceArray0[0] = (CharSequence) "ND5";
      String string0 = StringUtils.unwrap(">Ti]L;f", "\u0001,9");
      assertEquals(">Ti]L;f", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.substringAfter("k0", (String) null);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.remove("maxWith cannot be negativeoffset cannot be negativeMinimum abbreviation width with offset is %d", '^');
      assertEquals("maxWith cannot be negativeoffset cannot be negativeMinimum abbreviation width with offset is %d", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      String string3 = StringUtils.normalizeSpace("p{InCombiningDiacriticalMarks}+");
      assertEquals("p{InCombiningDiacriticalMarks}+", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      String string0 = StringUtils.rotate("hY6", 1);
      assertEquals("6hY", string0);
      assertNotNull(string0);
      
      Object[] objectArray0 = new Object[23];
      objectArray0[0] = (Object) "hY6";
      objectArray0[1] = (Object) "6hY";
      objectArray0[2] = (Object) "6hY";
      objectArray0[3] = (Object) "6hY";
      objectArray0[4] = (Object) "hY6";
      objectArray0[5] = (Object) "hY6";
      objectArray0[6] = (Object) "6hY";
      String string1 = StringUtils.join(objectArray0, "comparator");
      assertEquals("hY6comparator6hYcomparator6hYcomparator6hYcomparatorhY6comparatorhY6comparator6hYcomparatorcomparatorcomparatorcomparatorcomparatorcomparatorcomparatorcomparatorcomparatorcomparatorcomparatorcomparatorcomparatorcomparatorcomparatorcomparator", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(23, objectArray0.length);
      
      String string2 = StringUtils.rightPad("", 1, '~');
      assertEquals("~", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      String string3 = StringUtils.unwrap("~", "2q\"z/");
      assertEquals("~", string3);
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      
      int int0 = StringUtils.countMatches((CharSequence) "6hY", 'P');
      assertEquals(0, int0);
      
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      Locale.Category locale_Category1 = Locale.Category.DISPLAY;
      EnumSet<Locale.Category> enumSet0 = EnumSet.of(locale_Category0, locale_Category1, locale_Category0, locale_Category1);
      assertTrue(enumSet0.contains(locale_Category0));
      assertEquals(1, enumSet0.size());
      assertNotNull(enumSet0);
      assertSame(locale_Category0, locale_Category1);
      assertSame(locale_Category1, locale_Category0);
      
      Iterator<Locale.Category> iterator0 = enumSet0.iterator();
      assertTrue(enumSet0.contains(locale_Category0));
      assertEquals(1, enumSet0.size());
      assertNotNull(iterator0);
      assertSame(locale_Category0, locale_Category1);
      assertSame(locale_Category1, locale_Category0);
      
      String string4 = StringUtils.join(iterator0, '~');
      assertTrue(enumSet0.contains(locale_Category0));
      assertEquals("DISPLAY", string4);
      assertEquals(1, enumSet0.size());
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertNotNull(string4);
      assertSame(locale_Category0, locale_Category1);
      assertSame(locale_Category1, locale_Category0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase(":lGnqLeX*");
      assertNotNull(stringArray0);
      assertEquals(6, stringArray0.length);
      
      char[] charArray0 = new char[5];
      charArray0[0] = '^';
      charArray0[1] = '$';
      charArray0[2] = '%';
      charArray0[3] = '*';
      charArray0[4] = 'K';
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "tlK[aH5", charArray0);
      assertArrayEquals(new char[] {'^', '$', '%', '*', 'K'}, charArray0);
      assertFalse(boolean0);
      assertEquals(5, charArray0.length);
      
      String string0 = StringUtils.abbreviate("tlK[aH5", 2, 48);
      assertEquals("tlK[aH5", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "Array and element cannot both be null", (CharSequence) "tlK[aH5", 3);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      String string0 = StringUtils.removeAll(" ", " ");
      assertEquals("", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.containsAny((CharSequence) "", (char[]) null);
      assertFalse(boolean0);
      
      String string1 = StringUtils.deleteWhitespace("\r");
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.defaultString("");
      assertEquals("", string2);
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertNotNull(string2);
      
      int[] intArray0 = StringUtils.toCodePoints(" ");
      assertArrayEquals(new int[] {32}, intArray0);
      assertNotNull(intArray0);
      assertEquals(1, intArray0.length);
      
      String string3 = StringUtils.wrapIfMissing("E{ea7{1?", "{}");
      assertEquals("{}E{ea7{1?{}", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      
      int[] intArray1 = StringUtils.toCodePoints("{}E{ea7{1?{}");
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(12, intArray1.length);
      
      String string4 = StringUtils.rightPad("", (-1246), '\'');
      assertEquals("", string4);
      assertFalse(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string0));
      assertNotNull(string4);
      
      String string5 = StringUtils.replaceAll("", "", " ");
      assertEquals(" ", string5);
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertNotNull(string5);
      
      Locale locale0 = Locale.CANADA;
      assertEquals("en", locale0.getLanguage());
      assertEquals("en_CA", locale0.toString());
      assertEquals("CA", locale0.getCountry());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("CAN", locale0.getISO3Country());
      assertNotNull(locale0);
      
      String string6 = StringUtils.lowerCase(" ", locale0);
      assertEquals(" ", string6);
      assertEquals("en", locale0.getLanguage());
      assertEquals("en_CA", locale0.toString());
      assertEquals("CA", locale0.getCountry());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("CAN", locale0.getISO3Country());
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string2));
      assertTrue(string6.equals((Object)string5));
      assertNotNull(string6);
      
      String string7 = StringUtils.chomp("Aborting to protect against StackOverflowError - output of one loop is the input of another");
      assertEquals("Aborting to protect against StackOverflowError - output of one loop is the input of another", string7);
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string3));
      assertNotNull(string7);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      String string0 = StringUtils.replaceEachRepeatedly("di{qE=k4PE#2^6Rq6Cq", (String[]) null, (String[]) null);
      assertEquals("di{qE=k4PE#2^6Rq6Cq", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.substringBefore("Arguments cannot both be null", (String) null);
      assertEquals("Arguments cannot both be null", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      int int0 = StringUtils.lastIndexOfAny((CharSequence) null, (CharSequence[]) null);
      assertEquals((-1), int0);
      
      int int1 = StringUtils.indexOf((CharSequence) null, (CharSequence) null, (-1));
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      
      boolean boolean0 = StringUtils.isAlphanumericSpace("Arguments cannot both be null");
      assertTrue(boolean0);
      
      boolean boolean1 = StringUtils.isAllLowerCase("di{qE=k4PE#2^6Rq6Cq");
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short)50;
      shortArray0[1] = (short) (-1160);
      shortArray0[2] = (short) (-1172);
      shortArray0[3] = (short)121;
      shortArray0[4] = (short) (-1770);
      String string2 = StringUtils.join(shortArray0, '?', (-1), (int) (short) (-1172));
      assertArrayEquals(new short[] {(short)50, (short) (-1160), (short) (-1172), (short)121, (short) (-1770)}, shortArray0);
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals(5, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = 'd';
      charArray0[1] = 'I';
      charArray0[2] = 'I';
      charArray0[3] = 'I';
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[0] = null;
      charSequenceArray0[1] = (CharSequence) "org.apache.commons.lang3.CharSequenceUtils";
      String string0 = StringUtils.appendIfMissing("org.apache.commons.lang3.CharSequenceUtils", (CharSequence) null, charSequenceArray0);
      assertEquals("org.apache.commons.lang3.CharSequenceUtils", string0);
      assertNotNull(string0);
      assertEquals(2, charSequenceArray0.length);
      
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) " ", charSequenceArray0[1], (-1));
      assertEquals((-1), int0);
      assertEquals(2, charSequenceArray0.length);
      
      int int1 = StringUtils.indexOf((CharSequence) "\r", 12);
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      
      String string1 = StringUtils.replaceAll("\r", (String) null, "org.apache.commons.lang3.CharSequenceUtils");
      assertEquals("\r", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.containsNone((CharSequence) "\r", charArray0);
      assertArrayEquals(new char[] {'d', 'I', 'I', 'I'}, charArray0);
      assertTrue(boolean0);
      assertEquals(4, charArray0.length);
      
      String string2 = StringUtils.center("\n", 2, "r~ lE=czd&L[Ss}");
      assertEquals("\nr", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      boolean boolean1 = StringUtils.isNumericSpace("\r");
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      ArrayDeque<Locale> arrayDeque0 = new ArrayDeque<Locale>(19);
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      assertNotNull(arrayDeque0);
      
      String string3 = StringUtils.join((Iterable<?>) arrayDeque0, "*j_v.;$19+");
      assertEquals("", string3);
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      String string0 = StringUtils.trimToNull("~Vr");
      assertEquals("~Vr", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.truncate("8pR2B:PK5lx\"7", 0, 32);
      assertEquals("8pR2B:PK5lx\"7", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.deleteWhitespace((String) null);
      assertNull(string2);
      
      CharSequence[] charSequenceArray0 = new CharSequence[6];
      charSequenceArray0[0] = (CharSequence) "~Vr";
      String string3 = StringUtils.getDigits("VbdGVbdG");
      assertEquals("", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      
      charSequenceArray0[1] = (CharSequence) "";
      charSequenceArray0[2] = (CharSequence) "~Vr";
      charSequenceArray0[3] = (CharSequence) null;
      charSequenceArray0[4] = (CharSequence) "~Vr";
      String string4 = StringUtils.substringAfter("offset cannot be negative", 32);
      assertEquals("cannot be negative", string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertNotNull(string4);
      
      charSequenceArray0[5] = (CharSequence) "cannot be negative";
      int int0 = StringUtils.indexOfAny((CharSequence) null, charSequenceArray0);
      assertEquals((-1), int0);
      assertEquals(6, charSequenceArray0.length);
      
      String[] stringArray0 = StringUtils.split((String) null);
      assertNull(stringArray0);
      
      String[] stringArray1 = StringUtils.split("", (String) null);
      assertNotNull(stringArray1);
      assertEquals(0, stringArray1.length);
      
      int int1 = StringUtils.countMatches((CharSequence) null, charSequenceArray0[1]);
      assertEquals(0, int1);
      assertFalse(int1 == int0);
      assertEquals(6, charSequenceArray0.length);
      
      String string5 = StringUtils.leftPad("offset cannot be negative", 32, "{}");
      assertEquals("{}{}{}{offset cannot be negative", string5);
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertNotNull(string5);
      
      int[] intArray0 = new int[9];
      intArray0[0] = 32;
      intArray0[1] = 0;
      intArray0[2] = (-1);
      intArray0[3] = 32;
      intArray0[4] = 32;
      intArray0[5] = 0;
      intArray0[6] = 0;
      intArray0[7] = 0;
      intArray0[8] = 0;
      String string6 = StringUtils.join(intArray0, 'D', 0, 0);
      assertArrayEquals(new int[] {32, 0, (-1), 32, 32, 0, 0, 0, 0}, intArray0);
      assertEquals("", string6);
      assertTrue(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string1));
      assertNotNull(string6);
      assertEquals(9, intArray0.length);
      
      // Undeclared exception!
      try { 
        StringUtils.getLevenshteinDistance((CharSequence) "8pR2B:PK5lx\"7", (CharSequence) null, 65536);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[17];
      String string0 = StringUtils.stripAccents((String) null);
      assertNull(string0);
      
      charSequenceArray0[0] = (CharSequence) null;
      charSequenceArray0[1] = (CharSequence) "\n\n";
      String string1 = StringUtils.appendIfMissing("Array element ", "*{SR\"`K0", charSequenceArray0);
      assertEquals("Array element *{SR\"`K0", string1);
      assertNotNull(string1);
      assertEquals(17, charSequenceArray0.length);
      
      String string2 = StringUtils.unwrap((String) null, '3');
      assertNull(string2);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens((String) null, "Array element *{SR\"`K0", 124);
      assertNull(stringArray0);
      
      boolean boolean0 = StringUtils.isAlphanumeric((CharSequence) null);
      assertFalse(boolean0);
      
      int int0 = StringUtils.ordinalIndexOf((CharSequence) null, "Array element *{SR\"`K0", 124);
      assertEquals((-1), int0);
      
      String string3 = StringUtils.chop("\n\n");
      assertEquals("\n", string3);
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      
      boolean boolean1 = StringUtils.isAlphanumericSpace("Array element *{SR\"`K0");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String string4 = StringUtils.getDigits("_4%s s,{^vM9gV6>rl");
      assertEquals("496", string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertNotNull(string4);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (-1);
      doubleArray0[1] = (double) (-1);
      doubleArray0[2] = (double) (-1);
      String string5 = StringUtils.join(doubleArray0, '3');
      assertArrayEquals(new double[] {(-1.0), (-1.0), (-1.0)}, doubleArray0, 0.01);
      assertEquals("-1.03-1.03-1.0", string5);
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertNotNull(string5);
      assertEquals(3, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      String string0 = StringUtils.upperCase("Wo>i");
      assertEquals("WO>I", string0);
      assertNotNull(string0);
      
      double double0 = StringUtils.getJaroWinklerDistance("WO>I", "Wo>i");
      assertEquals(0.67, double0, 0.01);
      
      String string1 = "comparator";
      String string2 = StringUtils.wrap("comparator", 'f');
      assertEquals("fcomparatorf", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      String string3 = StringUtils.remove("Object varargs must not be null", "Wo>i");
      assertEquals("Object varargs must not be null", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      
      String string4 = "Aborting to protect against StackOverflowError - output of one loop is the input of another";
      String string5 = StringUtils.strip("Object varargs must not be null", "Aborting to protect against StackOverflowError - output of one loop is the input of another");
      assertEquals("ject varargs m", string5);
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertNotNull(string5);
      
      String string6 = StringUtils.replace("comparator", "i9X", "Array element ", 2304);
      assertEquals("comparator", string6);
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string3));
      assertTrue(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string2));
      assertNotNull(string6);
      
      // Undeclared exception!
      try { 
        StringUtils.abbreviate("ject varargs m", 2304, 6);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum abbreviation width with offset is 7
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      String string0 = StringUtils.removeEnd("org.apache.commons.lang3.ObjectUtils$Null", "@J(?mTkP%H7vTZ-");
      assertEquals("org.apache.commons.lang3.ObjectUtils$Null", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = new String[0];
      String string1 = StringUtils.getCommonPrefix(stringArray0);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(0, stringArray0.length);
      
      String string2 = StringUtils.replaceOnceIgnoreCase("@J(?mTkP%H7vTZ-", "@J(?mTkP%H7vTZ-", " vs ");
      assertEquals(" vs ", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      char char0 = '[';
      String string3 = StringUtils.wrap("Xf%#5GEhYZc8ZBl.-O1", '[');
      assertEquals("[Xf%#5GEhYZc8ZBl.-O1[", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      
      String string4 = StringUtils.remove(" vs ", "Xf%#5GEhYZc8ZBl.-O1");
      assertEquals(" vs ", string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertNotNull(string4);
      
      String string5 = "Aborting to protect against StackOverflowError - output of one loop is the input of another";
      String string6 = StringUtils.strip("@J(?mTkP%H7vTZ-", "s");
      assertEquals("@J(?mTkP%H7vTZ-", string6);
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string4));
      assertNotNull(string6);
      
      int int0 = 528;
      int int1 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "@J(?mTkP%H7vTZ-", (CharSequence) "@J(?mTkP%H7vTZ-", 528);
      assertEquals(0, int1);
      assertFalse(int1 == int0);
      
      String string7 = StringUtils.replace("@J(?mTkP%H7vTZ-", "org.apache.commons.lang3.ObjectUtils$Null", " ", 528);
      assertEquals("@J(?mTkP%H7vTZ-", string7);
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string0));
      assertTrue(string7.equals((Object)string6));
      assertNotNull(string7);
      
      int int2 = 5;
      // Undeclared exception!
      try { 
        StringUtils.abbreviate("Aborting to protect against StackOverflowError - output of one loop is the input of another", 528, 5);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum abbreviation width with offset is 7
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      String string0 = StringUtils.removeEnd("org.apache.commons.lang3.ObjectUtils$Null", "@J(?mTkP%H7vTZ-");
      assertEquals("org.apache.commons.lang3.ObjectUtils$Null", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = new String[0];
      String string1 = StringUtils.getCommonPrefix(stringArray0);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(0, stringArray0.length);
      
      String string2 = StringUtils.replaceChars("org.apache.commons.lang3.ObjectUtils$Null", "", "");
      assertEquals("org.apache.commons.lang3.ObjectUtils$Null", string2);
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertNotNull(string2);
      
      String string3 = StringUtils.stripToNull("org.apache.commons.lang3.ObjectUtils$Null");
      assertEquals("org.apache.commons.lang3.ObjectUtils$Null", string3);
      assertTrue(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string0));
      assertNotNull(string3);
      
      String string4 = StringUtils.replace("maxWith cannot be negatives", (String) null, "mparr", (-1868));
      assertEquals("maxWith cannot be negatives", string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertNotNull(string4);
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertFalse(linkedList0.contains("@J(?mTkP%H7vTZ-"));
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      boolean boolean0 = linkedList0.add((Object) "org.apache.commons.lang3.ObjectUtils$Null");
      assertFalse(linkedList0.contains("@J(?mTkP%H7vTZ-"));
      assertTrue(linkedList0.contains("org.apache.commons.lang3.ObjectUtils$Null"));
      assertTrue(boolean0);
      assertEquals(1, linkedList0.size());
      
      String string5 = StringUtils.removePattern("", "maxWith cannot be negatives");
      assertEquals("", string5);
      assertFalse(string5.equals((Object)string2));
      assertTrue(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertNotNull(string5);
      
      String string6 = StringUtils.SPACE;
      assertEquals(" ", string6);
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string0));
      assertNotNull(string6);
      
      String string7 = StringUtils.stripAccents("si3YS?K,|w~o");
      assertEquals("si3YS?K,|w~o", string7);
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string5));
      assertNotNull(string7);
      
      String string8 = StringUtils.wrapIfMissing("", '-');
      assertEquals("", string8);
      assertFalse(string8.equals((Object)string3));
      assertTrue(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string0));
      assertTrue(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string6));
      assertNotNull(string8);
      
      String string9 = StringUtils.strip("#");
      assertEquals("#", string9);
      assertFalse(string9.equals((Object)string6));
      assertFalse(string9.equals((Object)string2));
      assertFalse(string9.equals((Object)string4));
      assertFalse(string9.equals((Object)string8));
      assertFalse(string9.equals((Object)string7));
      assertFalse(string9.equals((Object)string5));
      assertFalse(string9.equals((Object)string1));
      assertFalse(string9.equals((Object)string3));
      assertFalse(string9.equals((Object)string0));
      assertNotNull(string9);
      
      boolean boolean1 = StringUtils.endsWithAny("maxWith cannot be negatives", stringArray0);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      assertEquals(0, stringArray0.length);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 's';
      int int0 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      String string10 = StringUtils.center("", 1552, 'K');
      assertFalse(string10.equals((Object)string9));
      assertFalse(string10.equals((Object)string3));
      assertFalse(string10.equals((Object)string7));
      assertFalse(string10.equals((Object)string4));
      assertFalse(string10.equals((Object)string2));
      assertFalse(string10.equals((Object)string0));
      assertFalse(string10.equals((Object)string5));
      assertFalse(string10.equals((Object)string1));
      assertFalse(string10.equals((Object)string8));
      assertFalse(string10.equals((Object)string6));
      assertNotNull(string10);
      
      String string11 = StringUtils.center("si3YS?K,|w~o", 56, "|FY6`&7,rq+gJeQ");
      assertEquals("|FY6`&7,rq+gJeQ|FY6`&7si3YS?K,|w~o|FY6`&7,rq+gJeQ|FY6`&7", string11);
      assertFalse(string11.equals((Object)string3));
      assertFalse(string11.equals((Object)string1));
      assertFalse(string11.equals((Object)string9));
      assertFalse(string11.equals((Object)string6));
      assertFalse(string11.equals((Object)string8));
      assertFalse(string11.equals((Object)string10));
      assertFalse(string11.equals((Object)string5));
      assertFalse(string11.equals((Object)string2));
      assertFalse(string11.equals((Object)string4));
      assertFalse(string11.equals((Object)string0));
      assertFalse(string11.equals((Object)string7));
      assertNotNull(string11);
      
      int int1 = StringUtils.indexOfDifference((CharSequence[]) stringArray0);
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      assertEquals(0, stringArray0.length);
      
      int int2 = StringUtils.ordinalIndexOf(" vs ", "|FY6`&7,rq+gJeQ|FY6`&7si3YS?K,|w~o|FY6`&7,rq+gJeQ|FY6`&7", 1552);
      assertEquals((-1), int2);
      assertTrue(int2 == int0);
      assertTrue(int2 == int1);
      
      String string12 = StringUtils.right("org.apache.commons.lang3.ObjectUtils$Null", (-1));
      assertEquals("", string12);
      assertFalse(string12.equals((Object)string2));
      assertFalse(string12.equals((Object)string7));
      assertFalse(string12.equals((Object)string10));
      assertTrue(string12.equals((Object)string8));
      assertFalse(string12.equals((Object)string4));
      assertTrue(string12.equals((Object)string5));
      assertFalse(string12.equals((Object)string3));
      assertFalse(string12.equals((Object)string6));
      assertFalse(string12.equals((Object)string11));
      assertFalse(string12.equals((Object)string9));
      assertFalse(string12.equals((Object)string0));
      assertNotNull(string12);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      String string0 = StringUtils.removeAll(" ", " ");
      assertEquals("", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isAlphanumeric("");
      assertFalse(boolean0);
      
      Stack<Locale.Category> stack0 = new Stack<Locale.Category>();
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.empty());
      assertNotNull(stack0);
      
      Stack<Locale.Category> stack1 = new Stack<Locale.Category>();
      assertTrue(stack1.isEmpty());
      assertEquals("[]", stack1.toString());
      assertEquals(10, stack1.capacity());
      assertTrue(stack1.empty());
      assertEquals(0, stack1.size());
      assertTrue(stack1.equals((Object)stack0));
      assertNotNull(stack1);
      
      Iterator<Locale.Category> iterator0 = stack1.iterator();
      assertTrue(stack1.isEmpty());
      assertEquals("[]", stack1.toString());
      assertEquals(10, stack1.capacity());
      assertTrue(stack1.empty());
      assertEquals(0, stack1.size());
      assertTrue(stack1.equals((Object)stack0));
      assertNotNull(iterator0);
      assertNotSame(stack1, stack0);
      
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      stack1.sort(comparator0);
      assertTrue(stack1.isEmpty());
      assertEquals("[]", stack1.toString());
      assertEquals(10, stack1.capacity());
      assertTrue(stack1.empty());
      assertEquals(0, stack1.size());
      assertTrue(stack1.equals((Object)stack0));
      assertNotSame(stack1, stack0);
      
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      boolean boolean1 = stack1.add(locale_Category0);
      assertTrue(stack1.contains(locale_Category0));
      assertTrue(boolean1);
      assertEquals(10, stack1.capacity());
      assertEquals("[DISPLAY]", stack1.toString());
      assertFalse(stack1.isEmpty());
      assertFalse(stack1.empty());
      assertEquals(1, stack1.size());
      assertFalse(stack1.equals((Object)stack0));
      assertFalse(boolean1 == boolean0);
      assertNotSame(stack1, stack0);
      
      // Undeclared exception!
      try { 
        StringUtils.join(iterator0, '?');
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Vector$Itr", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      String string0 = StringUtils.removeEnd("org.apache.commons.lang3.ObjectUtils$Null", "@J(?mTkP%H7vTZ-");
      assertEquals("org.apache.commons.lang3.ObjectUtils$Null", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = new String[0];
      String string1 = StringUtils.getCommonPrefix(stringArray0);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(0, stringArray0.length);
      
      char[] charArray0 = new char[0];
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "org.apache.commons.lang3.ObjectUtils$Null", charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertFalse(boolean0);
      assertEquals(0, charArray0.length);
      
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      assertFalse(arrayList0.contains("@J(?mTkP%H7vTZ-"));
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      String string2 = StringUtils.join((List<?>) arrayList0, 'T', 2653, 77);
      assertFalse(arrayList0.contains(77));
      assertEquals("", string2);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      int int0 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      double[] doubleArray0 = new double[0];
      // Undeclared exception!
      try { 
        StringUtils.join(doubleArray0, 'T', 32, 2653);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 32
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      String string0 = StringUtils.truncate("offset cannot be negative", 322, 322);
      assertEquals("", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "offset cannot be negative", "");
      assertFalse(boolean0);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "offset cannot be negative", (CharSequence) "offset cannot be negative", 322);
      assertEquals(0, int0);
      
      String string1 = StringUtils.substringAfter("*xr|Zj", "");
      assertEquals("*xr|Zj", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.remove("*xr|Zj", 'U');
      assertEquals("*xr|Zj", string2);
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      String string3 = StringUtils.stripToNull("*xr|Zj");
      assertEquals("*xr|Zj", string3);
      assertTrue(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      
      String string4 = StringUtils.substringBefore("*xr|Zj", 2);
      assertEquals("*xr|Zj", string4);
      assertTrue(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string3));
      assertNotNull(string4);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = 'y';
      charArray0[1] = '-';
      charArray0[2] = '6';
      charArray0[3] = '-';
      charArray0[4] = 'l';
      charArray0[5] = '*';
      charArray0[6] = 'K';
      charArray0[7] = '*';
      String string0 = StringUtils.join(charArray0, '&', Integer.MAX_VALUE, (-2));
      assertArrayEquals(new char[] {'y', '-', '6', '-', 'l', '*', 'K', '*'}, charArray0);
      assertEquals("", string0);
      assertNotNull(string0);
      assertEquals(8, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Vector<CharBuffer> vector0 = new Vector<CharBuffer>();
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertNotNull(vector0);
      
      String string0 = StringUtils.replaceChars("org.apache.commons.lang3.ObjectUtils$Null", 'g', 'g');
      assertEquals("org.apache.commons.lang3.ObjectUtils$Null", string0);
      assertNotNull(string0);
      
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "org.apache.commons.lang3.ObjectUtils$Null");
      assertEquals(41, charBuffer0.remaining());
      assertEquals(41, charBuffer0.capacity());
      assertEquals(0, charBuffer0.position());
      assertTrue(charBuffer0.isReadOnly());
      assertEquals("org.apache.commons.lang3.ObjectUtils$Null", charBuffer0.toString());
      assertEquals(41, charBuffer0.limit());
      assertEquals(41, charBuffer0.length());
      assertFalse(charBuffer0.hasArray());
      assertFalse(charBuffer0.isDirect());
      assertTrue(charBuffer0.hasRemaining());
      assertNotNull(charBuffer0);
      
      String string1 = StringUtils.abbreviate("org.apache.commons.lang3.ObjectUtils$Null", "|N", 96);
      assertEquals("org.apache.commons.lang3.ObjectUtils$Null", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.removeIgnoreCase("p", "Y)3n1`2_97u G#5v_Y)3n1`2_97u G#5v_Y)3n1`2_97u G#5v_Y)3n1`2_97u G#5v__");
      assertEquals("p", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      boolean boolean0 = StringUtils.isAlphanumeric("org.apache.commons.lang3.ObjectUtils$Null");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isWhitespace("org.apache.commons.lang3.ObjectUtils$Null");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String string3 = StringUtils.replaceEachRepeatedly("Object varargs must not be null", (String[]) null, (String[]) null);
      assertEquals("Object varargs must not be null", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      
      String string4 = StringUtils.substringBefore("tgPBf^tY&s(j", "Arguments cannot both be nullND5");
      assertEquals("tgPBf^tY&s(j", string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertNotNull(string4);
      
      int int0 = StringUtils.lastIndexOfAny("p", (CharSequence[]) null);
      assertEquals((-1), int0);
      
      String string5 = StringUtils.removePattern("org.apache.commons.lang3.ObjectUtils$Null", "Object varargs must not be null");
      assertEquals("org.apache.commons.lang3.ObjectUtils$Null", string5);
      assertTrue(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertTrue(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertNotNull(string5);
      
      int int1 = StringUtils.indexOf((CharSequence) charBuffer0, (CharSequence) "org.apache.commons.lang3.ObjectUtils$Null", 42);
      assertEquals((-1), int1);
      assertEquals(41, charBuffer0.remaining());
      assertEquals(41, charBuffer0.capacity());
      assertEquals(0, charBuffer0.position());
      assertTrue(charBuffer0.isReadOnly());
      assertEquals("org.apache.commons.lang3.ObjectUtils$Null", charBuffer0.toString());
      assertEquals(41, charBuffer0.limit());
      assertEquals(41, charBuffer0.length());
      assertFalse(charBuffer0.hasArray());
      assertFalse(charBuffer0.isDirect());
      assertTrue(charBuffer0.hasRemaining());
      assertTrue(int1 == int0);
      
      boolean boolean2 = StringUtils.isAlphanumericSpace(charBuffer0);
      assertFalse(boolean2);
      assertEquals(41, charBuffer0.remaining());
      assertEquals(41, charBuffer0.capacity());
      assertEquals(0, charBuffer0.position());
      assertTrue(charBuffer0.isReadOnly());
      assertEquals("org.apache.commons.lang3.ObjectUtils$Null", charBuffer0.toString());
      assertEquals(41, charBuffer0.limit());
      assertEquals(41, charBuffer0.length());
      assertFalse(charBuffer0.hasArray());
      assertFalse(charBuffer0.isDirect());
      assertTrue(charBuffer0.hasRemaining());
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      boolean boolean3 = StringUtils.isAllLowerCase("p");
      assertTrue(boolean3);
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3 == boolean1);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      Object object2 = new Object();
      assertFalse(object2.equals((Object)object1));
      assertFalse(object2.equals((Object)object0));
      assertNotNull(object2);
      
      Object object3 = new Object();
      assertFalse(object3.equals((Object)object1));
      assertFalse(object3.equals((Object)object0));
      assertFalse(object3.equals((Object)object2));
      assertNotNull(object3);
      
      Integer integer0 = new Integer(64);
      assertEquals(64, (int)integer0);
      assertNotNull(integer0);
      
      String string0 = StringUtils.join((Integer[]) null);
      assertNull(string0);
      
      int int0 = StringUtils.compareIgnoreCase("\n\n", "s", false);
      assertEquals((-105), int0);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens((String) null);
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "&?qu g]3*=", "&?qu g]3*=");
      assertTrue(boolean0);
      
      String string0 = StringUtils.defaultString("_", "offset cannot be negative");
      assertEquals("_", string0);
      assertNotNull(string0);
      
      boolean boolean1 = StringUtils.isAlphanumericSpace("_");
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      String string1 = StringUtils.difference("_", "_");
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.removeEnd("_", "_");
      assertEquals("", string2);
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      String string3 = StringUtils.reverseDelimited("_", 'n');
      assertEquals("_", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string0));
      assertNotNull(string3);
      
      boolean boolean2 = StringUtils.isWhitespace("");
      assertTrue(boolean2);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) "_";
      objectArray0[1] = (Object) "&?qu g]3*=";
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[2] = object0;
      objectArray0[3] = (Object) "_";
      objectArray0[4] = (Object) "_";
      objectArray0[5] = (Object) "";
      String string4 = StringUtils.join(objectArray0, 'K', 359, 60);
      assertEquals("", string4);
      assertTrue(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertNotNull(string4);
      assertEquals(6, objectArray0.length);
      
      String string5 = StringUtils.capitalize("");
      assertEquals("", string5);
      assertTrue(string5.equals((Object)string4));
      assertTrue(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertTrue(string5.equals((Object)string1));
      assertNotNull(string5);
      
      PriorityQueue<Integer> priorityQueue0 = new PriorityQueue<Integer>();
      assertFalse(priorityQueue0.contains(359));
      assertEquals(0, priorityQueue0.size());
      assertNotNull(priorityQueue0);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "", (CharSequence) "offset cannot be negative", 127);
      assertEquals(25, int0);
      
      String string6 = StringUtils.substringAfter("", "");
      assertEquals("", string6);
      assertTrue(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string0));
      assertTrue(string6.equals((Object)string4));
      assertTrue(string6.equals((Object)string2));
      assertTrue(string6.equals((Object)string1));
      assertNotNull(string6);
      
      String string7 = StringUtils.remove("v_Q>/,}Index:", '.');
      assertEquals("v_Q>/,}Index:", string7);
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string0));
      assertNotNull(string7);
      
      String string8 = StringUtils.removeEndIgnoreCase("", "v_Q>/,}Index:");
      assertEquals("", string8);
      assertTrue(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string3));
      assertTrue(string8.equals((Object)string2));
      assertTrue(string8.equals((Object)string4));
      assertTrue(string8.equals((Object)string1));
      assertTrue(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string7));
      assertNotNull(string8);
      
      String string9 = StringUtils.replaceIgnoreCase("+8!OMIOI-?y8%&gp", "K)KZhU3-rY", "org.apache.commons.lang3.ObjectUtils$Nullorg.apache.commons.lang3.ObjectUtils$Null", 60);
      assertEquals("+8!OMIOI-?y8%&gp", string9);
      assertFalse(string9.equals((Object)string0));
      assertFalse(string9.equals((Object)string7));
      assertFalse(string9.equals((Object)string6));
      assertFalse(string9.equals((Object)string1));
      assertFalse(string9.equals((Object)string8));
      assertFalse(string9.equals((Object)string2));
      assertFalse(string9.equals((Object)string4));
      assertFalse(string9.equals((Object)string3));
      assertFalse(string9.equals((Object)string5));
      assertNotNull(string9);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      String string0 = StringUtils.deleteWhitespace(", LengLth: 0!)");
      assertEquals(",LengLth:0!)", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.substringBefore("Search and Replace aLray lengths don#g match: ", 115);
      assertEquals("Search and Replace aLray length", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "C'gV*{x)ucqxxxB6k";
      String string2 = StringUtils.appendIfMissing("'eCD?.`*%7-c7A0", "C'gV*{x)ucqxxxB6k", stringArray0);
      assertEquals("'eCD?.`*%7-c7A0C'gV*{x)ucqxxxB6k", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals(2, stringArray0.length);
      
      String string3 = StringUtils.getDigits("Search and Replace aLray lengths don#g match: ");
      assertEquals("", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      
      String string4 = StringUtils.lowerCase("G^7|+zFpb:oK?5");
      assertEquals("g^7|+zfpb:ok?5", string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertNotNull(string4);
      
      String string5 = StringUtils.abbreviate("k!DilRqedowPa|Okjcp", "k!DilRqedowPa|Okjcp", 160, 125);
      assertEquals("k!DilRqedowPa|Okjcp", string5);
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertNotNull(string5);
      
      String string6 = StringUtils.removeEndIgnoreCase((String) null, " hIC,dQ");
      assertNull(string6);
      
      boolean boolean0 = StringUtils.isBlank("k!DilRqedowPa|Okjcp");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      String string0 = StringUtils.right("diF3Wv9sN!", 8);
      assertEquals("F3Wv9sN!", string0);
      assertNotNull(string0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      String string1 = StringUtils.replaceEachRepeatedly("\n\n", (String[]) null, (String[]) null);
      assertEquals("\n\n", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[7];
      charSequenceArray0[0] = (CharSequence) "diF3Wv9sN!";
      charSequenceArray0[1] = (CharSequence) "\n\n";
      charSequenceArray0[2] = (CharSequence) "\n\n";
      String string2 = StringUtils.trim("\n\n");
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      String string3 = StringUtils.abbreviateMiddle(" has no clone method", " has no clone method", 2);
      assertEquals(" has no clone method", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      
      String string4 = StringUtils.uncapitalize(" has no clone method");
      assertEquals(" has no clone method", string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string3));
      assertNotNull(string4);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[1] = 'a';
      charArray0[2] = '\"';
      String string0 = StringUtils.join(charArray0, '\"', 67, 66);
      assertArrayEquals(new char[] {'\u0000', 'a', '\"'}, charArray0);
      assertEquals("", string0);
      assertNotNull(string0);
      assertEquals(3, charArray0.length);
      
      String string1 = StringUtils.replaceChars("", "", "+0");
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "";
      String string2 = StringUtils.wrap("/p)?<D@d;4g(/O>", '\"');
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      CharSequence[] charSequenceArray1 = new CharSequence[6];
      assertFalse(charSequenceArray1.equals((Object)charSequenceArray0));
      
      charSequenceArray1[0] = (CharSequence) "";
      long[] longArray0 = new long[2];
      longArray0[0] = (long) 'c';
      longArray0[1] = (long) 66;
      String string3 = StringUtils.join(longArray0, ' ', (-1791), (-1791));
      assertArrayEquals(new long[] {99L, 66L}, longArray0);
      assertEquals("", string3);
      assertTrue(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      assertEquals(2, longArray0.length);
      
      Locale locale0 = Locale.JAPAN;
      assertEquals("JP", locale0.getCountry());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja_JP", locale0.toString());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertNotNull(locale0);
      
      int int0 = StringUtils.getFuzzyDistance("", "/p)?<D@d;4g(/O>", locale0);
      assertEquals(0, int0);
      assertEquals("JP", locale0.getCountry());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja_JP", locale0.toString());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      
      int int1 = StringUtils.indexOf(charSequenceArray1[0], (CharSequence) "", 0);
      assertEquals(0, int1);
      assertTrue(int1 == int0);
      assertFalse(charSequenceArray1.equals((Object)charSequenceArray0));
      assertNotSame(charSequenceArray1, charSequenceArray0);
      assertEquals(6, charSequenceArray1.length);
      
      String string4 = StringUtils.upperCase((String) null);
      assertNull(string4);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      String string0 = StringUtils.unwrap("t)mzG1WCD1k#4d(PK\"#", 's');
      assertEquals("t)mzG1WCD1k#4d(PK\"#", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.reverse((String) null);
      assertNull(string1);
      
      char[] charArray0 = new char[9];
      charArray0[0] = 's';
      charArray0[1] = 's';
      charArray0[2] = '&';
      charArray0[3] = 's';
      charArray0[4] = 's';
      charArray0[5] = 's';
      charArray0[6] = 's';
      charArray0[7] = 's';
      charArray0[8] = 's';
      boolean boolean0 = StringUtils.containsOnly((CharSequence) null, charArray0);
      assertArrayEquals(new char[] {'s', 's', '&', 's', 's', 's', 's', 's', 's'}, charArray0);
      assertFalse(boolean0);
      assertEquals(9, charArray0.length);
      
      String string2 = StringUtils.abbreviate("Array and element cannot both be null", 2, 21);
      assertEquals("Array and element ...", string2);
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "t)mzG1WCD1k#4d(PK\"#", (CharSequence) null, 1606);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      String string0 = StringUtils.substringAfter("[D/.5Q]{sGZM2sH<] in an array of ", "!");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.trimToNull("");
      assertNull(string1);
      
      String string2 = StringUtils.substringAfterLast(" is not in the range '0' - '9'", 53);
      assertEquals("", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.center((String) null, 53, '~');
      assertNull(string3);
      
      String string4 = StringUtils.center("VwYF a90Hla68", 53, "~!%q{-kC<;JCc");
      assertEquals("~!%q{-kC<;JCc~!%q{-kVwYF a90Hla68~!%q{-kC<;JCc~!%q{-k", string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertNotNull(string4);
      
      String string5 = StringUtils.rightPad("Arguments cannot both be null", 53, (String) null);
      assertEquals("Arguments cannot both be null                        ", string5);
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertNotNull(string5);
      
      String string6 = StringUtils.substringAfterLast("hYPPL9", (-2136));
      assertEquals("", string6);
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string5));
      assertNotNull(string6);
      
      int int0 = StringUtils.countMatches((CharSequence) "VwYF a90Hla68", (CharSequence) null);
      assertEquals(0, int0);
      
      boolean boolean0 = StringUtils.equals((CharSequence) " is not in the range '0' - '9'", (CharSequence) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      String string0 = StringUtils.substring("Arguments cannot both be null", 846, 846);
      assertEquals("", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.equalsIgnoreCase("", "Arguments cannot both be null");
      assertFalse(boolean0);
      
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) "Arguments cannot both be null";
      objectArray0[1] = (Object) "xM\"kaCGP:ux,Hsq<EadSearch and Replace array lengths don't match: ";
      objectArray0[2] = (Object) "xM\"kaCGP:ux,Hsq<EadSearch and Replace array lengths don't match: ";
      String string1 = StringUtils.joinWith("xM\"kaCGP:ux,Hsq<EadSearch and Replace array lengths don't match: ", objectArray0);
      assertEquals("Arguments cannot both be nullxM\"kaCGP:ux,Hsq<EadSearch and Replace array lengths don't match: xM\"kaCGP:ux,Hsq<EadSearch and Replace array lengths don't match: xM\"kaCGP:ux,Hsq<EadSearch and Replace array lengths don't match: xM\"kaCGP:ux,Hsq<EadSearch and Replace array lengths don't match: ", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(3, objectArray0.length);
      
      int[] intArray0 = StringUtils.toCodePoints("Arguments cannot both be null");
      assertNotNull(intArray0);
      assertEquals(29, intArray0.length);
      
      String string2 = StringUtils.toRootUpperCase("org.apache.commons.lang3.StringUtils");
      assertEquals("ORG.APACHE.COMMONS.LANG3.STRINGUTILS", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      String string3 = null;
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens((String) null, "`)8.@'{i!]4D.", (-32768));
      assertNull(stringArray0);
      
      int int0 = 7;
      int int1 = StringUtils.lastIndexOf((CharSequence) "", (CharSequence) "Arguments cannot both be nullxM\"kaCGP:ux,Hsq<EadSearch and Replace array lengths don't match: xM\"kaCGP:ux,Hsq<EadSearch and Replace array lengths don't match: xM\"kaCGP:ux,Hsq<EadSearch and Replace array lengths don't match: xM\"kaCGP:ux,Hsq<EadSearch and Replace array lengths don't match: ", 7);
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      
      boolean boolean1 = StringUtils.contains((CharSequence) "", (CharSequence) "org.apache.commons.lang3.StringUtils");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      // Undeclared exception!
      try { 
        StringUtils.abbreviate("ORG.APACHE.COMMONS.LANG3.STRINGUTILS", "Arguments cannot both be null", (-542));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum abbreviation width is 30
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[8];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "Minimum abbreviation width with offset is %d";
      charSequenceArray0[2] = (CharSequence) "Minimum abbreviation width with offset is %d";
      String string0 = StringUtils.trimToNull("Minimum abbreviation width with offset is %d");
      assertEquals("Minimum abbreviation width with offset is %d", string0);
      assertNotNull(string0);
      
      charSequenceArray0[3] = (CharSequence) "Minimum abbreviation width with offset is %d";
      charSequenceArray0[4] = (CharSequence) "Minimum abbreviation width with offset is %d";
      charSequenceArray0[5] = (CharSequence) "Minimum abbreviation width with offset is %d";
      String string1 = StringUtils.rotate("clone", 2);
      assertEquals("neclo", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      charSequenceArray0[6] = (CharSequence) "neclo";
      charSequenceArray0[7] = (CharSequence) "Minimum abbreviation width with offset is %d";
      boolean boolean0 = StringUtils.isAllBlank(charSequenceArray0);
      assertFalse(boolean0);
      assertEquals(8, charSequenceArray0.length);
      
      String string2 = StringUtils.defaultIfEmpty("i5Bx]88.7ITWgP;D", "i5Bx]88.7ITWgP;D");
      assertEquals("i5Bx]88.7ITWgP;D", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      boolean boolean1 = StringUtils.endsWith(charSequenceArray0[7], charSequenceArray0[3]);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      assertEquals(8, charSequenceArray0.length);
      
      String string3 = StringUtils.defaultString("i5Bx]88.7ITWgP;D");
      assertEquals("i5Bx]88.7ITWgP;D", string3);
      assertTrue(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      
      int int0 = StringUtils.countMatches((CharSequence) "Minimum abbreviation width with offset is %d", (CharSequence) "i5Bx]88.7ITWgP;D");
      assertEquals(0, int0);
      
      String string4 = StringUtils.defaultString((String) null);
      assertEquals("", string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertNotNull(string4);
      
      String string5 = StringUtils.substring("clone", 2);
      assertEquals("one", string5);
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertNotNull(string5);
      
      String string6 = StringUtils.appendIfMissing("", "clone", charSequenceArray0);
      assertEquals("", string6);
      assertFalse(string6.equals((Object)string0));
      assertTrue(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string3));
      assertNotNull(string6);
      assertEquals(8, charSequenceArray0.length);
      
      String string7 = StringUtils.replace("i5Bx]88.7ITWgP;D", "", (String) null);
      assertEquals("i5Bx]88.7ITWgP;D", string7);
      assertFalse(string7.equals((Object)string0));
      assertTrue(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string4));
      assertTrue(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string5));
      assertNotNull(string7);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlphanumeric("");
      assertFalse(boolean0);
      
      Stack<Locale.Category> stack0 = new Stack<Locale.Category>();
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertNotNull(stack0);
      
      Iterator<Locale.Category> iterator0 = stack0.iterator();
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertNotNull(iterator0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparator("", "WyN@;CP@@E exe-I}|j");
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      String string0 = StringUtils.replaceChars((String) null, (String) null, (String) null);
      assertNull(string0);
      
      boolean boolean0 = StringUtils.isEmpty((CharSequence) null);
      assertTrue(boolean0);
      
      String string1 = StringUtils.replaceFirst((String) null, "org.apache.commons.lang3.StringUtils", (String) null);
      assertNull(string1);
      
      boolean boolean1 = StringUtils.contains((CharSequence) null, (CharSequence) null);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      String string2 = StringUtils.unwrap((String) null, "bLcA{nL#b]D( '");
      assertNull(string2);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte) (-5);
      byteArray0[3] = (byte)43;
      byteArray0[4] = (byte) (-93);
      byteArray0[5] = (byte)19;
      byteArray0[6] = (byte) (-122);
      String string3 = StringUtils.toString(byteArray0, (String) null);
      assertArrayEquals(new byte[] {(byte) (-1), (byte) (-1), (byte) (-5), (byte)43, (byte) (-93), (byte)19, (byte) (-122)}, byteArray0);
      assertEquals("\uFFFD\uFFFD\uFFFD+\uFFFD\u0013\uFFFD", string3);
      assertNotNull(string3);
      assertEquals(7, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      String string0 = StringUtils.rightPad("", 2986, "");
      assertNotNull(string0);
      
      String string1 = StringUtils.rightPad(" has no clone method", 2986, "A");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.substringAfterLast("s", 994);
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      int int0 = StringUtils.countMatches((CharSequence) "", (CharSequence) "s");
      assertEquals(0, int0);
      
      boolean boolean0 = StringUtils.equals((CharSequence) "", (CharSequence) "");
      assertTrue(boolean0);
      
      String string3 = StringUtils.replaceFirst("", "A", "A");
      assertEquals("", string3);
      assertFalse(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      
      String string4 = StringUtils.stripAccents("");
      assertEquals("", string4);
      assertFalse(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string2));
      assertNotNull(string4);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      char[] charArray0 = new char[9];
      charArray0[0] = 'e';
      charArray0[1] = 'e';
      charArray0[2] = 'e';
      charArray0[3] = 'e';
      charArray0[4] = 'e';
      charArray0[5] = 'e';
      charArray0[6] = 'e';
      charArray0[7] = 'e';
      charArray0[8] = 'e';
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "@", charArray0);
      assertArrayEquals(new char[] {'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e'}, charArray0);
      assertEquals(0, int0);
      assertEquals(9, charArray0.length);
      
      String string0 = StringUtils.center("@", (-1), 'e');
      assertEquals("@", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.abbreviate((String) null, (String) null, (-146));
      assertNull(string1);
      
      String string2 = StringUtils.removeIgnoreCase("LYh@0zT2xU<,", ".9 @bnr");
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      boolean boolean0 = StringUtils.isAlphanumeric("LYh@0zT2xU<,");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isWhitespace(".9 @bnr");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String[] stringArray0 = StringUtils.split("MTsOZ6x", ":?z@?8F$Bh${j*kJLwDSOctai;rjC':\"4p{{>D", (-1059));
      assertNotNull(stringArray0);
      assertEquals(2, stringArray0.length);
      
      CharBuffer charBuffer0 = StringUtils.defaultIfBlank((CharBuffer) null, (CharBuffer) null);
      assertNull(charBuffer0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("BIROD\"s", "BIROD\"s");
      assertNotNull(stringArray0);
      assertEquals(2, stringArray0.length);
      
      String[] stringArray1 = StringUtils.substringsBetween("BIROD\"s", "7#pdP&C6=5[#|,K1!", ",|zG'l@!i%E^`3&");
      assertNull(stringArray1);
      
      String[] stringArray2 = StringUtils.stripAll(stringArray0);
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertNotNull(stringArray2);
      assertNotSame(stringArray0, stringArray2);
      assertNotSame(stringArray2, stringArray0);
      assertEquals(2, stringArray0.length);
      assertEquals(2, stringArray2.length);
      
      Vector<Object> vector0 = new Vector<Object>();
      assertFalse(vector0.contains(",|zG'l@!i%E^`3&"));
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertNotNull(vector0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = vector0.add(object0);
      assertFalse(vector0.contains(",|zG'l@!i%E^`3&"));
      assertTrue(vector0.contains(object0));
      assertTrue(boolean0);
      assertEquals(10, vector0.capacity());
      assertFalse(vector0.isEmpty());
      assertEquals(1, vector0.size());
      
      String string0 = StringUtils.join((Iterable<?>) vector0, 'W');
      assertFalse(vector0.contains('W'));
      assertTrue(vector0.contains(object0));
      assertEquals(10, vector0.capacity());
      assertFalse(vector0.isEmpty());
      assertEquals(1, vector0.size());
      assertNotNull(string0);
      
      String string1 = StringUtils.truncate(" vs ", 160, 160);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      String[] stringArray0 = StringUtils.substringsBetween("yK", "yK", "L#7");
      assertNull(stringArray0);
      
      String[] stringArray1 = StringUtils.stripAll((String[]) null);
      assertNull(stringArray1);
      
      Vector<Object> vector0 = new Vector<Object>();
      assertFalse(vector0.contains("L#7"));
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.isEmpty());
      assertNotNull(vector0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = vector0.add(object0);
      assertTrue(vector0.contains(object0));
      assertFalse(vector0.contains("L#7"));
      assertTrue(boolean0);
      assertFalse(vector0.isEmpty());
      assertEquals(1, vector0.size());
      assertEquals(10, vector0.capacity());
      
      String string0 = StringUtils.join((Iterable<?>) vector0, 'M');
      assertTrue(vector0.contains(object0));
      assertFalse(vector0.contains("L#7"));
      assertFalse(vector0.isEmpty());
      assertEquals(1, vector0.size());
      assertEquals(10, vector0.capacity());
      assertNotNull(string0);
      
      String string1 = StringUtils.truncate("L#7", (int) 'M', 1558);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      String string0 = StringUtils.substringAfter((String) null, "");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "&?qu g]3*=", "&?qu g]3*=");
      assertTrue(boolean0);
      
      String string0 = StringUtils.defaultString("_", "offset cannot be negative");
      assertEquals("_", string0);
      assertNotNull(string0);
      
      boolean boolean1 = StringUtils.isAlphanumericSpace("_");
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      String string1 = StringUtils.difference("_", "_");
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.removeEnd("_", "_");
      assertEquals("", string2);
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      String string3 = StringUtils.reverseDelimited("_", 'n');
      assertEquals("_", string3);
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      
      int int0 = StringUtils.indexOf((CharSequence) "&?qu g]3*=", 127);
      assertEquals((-1), int0);
      
      boolean boolean2 = StringUtils.isWhitespace("");
      assertTrue(boolean2);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) "_";
      objectArray0[1] = (Object) "&?qu g]3*=";
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[2] = object0;
      objectArray0[3] = (Object) "_";
      objectArray0[4] = (Object) "_";
      objectArray0[5] = (Object) "";
      int int1 = 60;
      String string4 = StringUtils.join(objectArray0, 'K', 359, 60);
      assertEquals("", string4);
      assertTrue(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertNotNull(string4);
      assertEquals(6, objectArray0.length);
      
      String string5 = StringUtils.capitalize("");
      assertEquals("", string5);
      assertFalse(string5.equals((Object)string0));
      assertTrue(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertTrue(string5.equals((Object)string1));
      assertTrue(string5.equals((Object)string2));
      assertNotNull(string5);
      
      PriorityQueue<Integer> priorityQueue0 = new PriorityQueue<Integer>();
      assertFalse(priorityQueue0.contains(int1));
      assertEquals(0, priorityQueue0.size());
      assertNotNull(priorityQueue0);
      
      int int2 = StringUtils.getLevenshteinDistance((CharSequence) "", (CharSequence) "offset cannot be negative", 127);
      assertEquals(25, int2);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      
      String string6 = StringUtils.substringAfter("", "");
      assertEquals("", string6);
      assertTrue(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string3));
      assertTrue(string6.equals((Object)string5));
      assertTrue(string6.equals((Object)string1));
      assertTrue(string6.equals((Object)string2));
      assertNotNull(string6);
      
      String string7 = StringUtils.remove("v_Q>/,}Index:", '.');
      assertEquals("v_Q>/,}Index:", string7);
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string5));
      assertNotNull(string7);
      
      // Undeclared exception!
      try { 
        StringUtils.truncate("", (-1), 60);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // offset cannot be negative
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      boolean boolean0 = StringUtils.isNumeric("F1~Sp}mS5");
      assertFalse(boolean0);
      
      String[] stringArray0 = new String[5];
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "";
      String[] stringArray1 = StringUtils.stripAll(stringArray0, "AM[om");
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(5, stringArray0.length);
      assertEquals(5, stringArray1.length);
      
      String string0 = StringUtils.stripStart("F1~Sp}mS5", stringArray0[1]);
      assertEquals("F1~Sp}mS5", string0);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertNotNull(string0);
      assertNotSame(stringArray0, stringArray1);
      assertEquals(5, stringArray0.length);
      
      StringUtils.rightPad("", 947, 'r');
      StringUtils.startsWithAny("", stringArray1);
      StringUtils.unwrap("AM[om", ":DMST1QK;[C'~N+");
      StringUtils.center("Object varargs must not be null", 947, 'r');
      StringUtils.indexOfAnyBut((CharSequence) "", (CharSequence) null);
      StringUtils.substringBeforeLast("Zu", " in an array of ");
      StringUtils.difference("rrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrr", "");
      StringUtils.unwrap("~{ p4Nr", " in an array of ");
      StringUtils.indexOfDifference((CharSequence) null, (CharSequence) "G^7|+zFpb:oK?5");
      StringUtils.splitByCharacterType("rrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrObject varargs must not be nullrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrr");
      StringUtils.split((String) null, 'u');
      StringUtils.removeAll("AM[om", "");
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      String string0 = StringUtils.leftPad("", 0, 'N');
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.substringAfter("8&|'|{GL2>}{FALs", 4);
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      int int0 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[1] = 'a';
      charArray0[2] = '\"';
      String string0 = StringUtils.join(charArray0, '\"', 67, 66);
      assertArrayEquals(new char[] {'\u0000', 'a', '\"'}, charArray0);
      assertEquals("", string0);
      assertNotNull(string0);
      assertEquals(3, charArray0.length);
      
      String string1 = StringUtils.replaceChars("", "", "+0");
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "";
      String string2 = StringUtils.wrap("/p)?<D@d;4g(/O>", '\"');
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      CharSequence[] charSequenceArray1 = new CharSequence[6];
      assertFalse(charSequenceArray1.equals((Object)charSequenceArray0));
      
      charSequenceArray1[0] = (CharSequence) "";
      long[] longArray0 = new long[2];
      longArray0[0] = (long) 'V';
      longArray0[1] = (long) 66;
      String string3 = StringUtils.join(longArray0, ' ', (-1791), (-1791));
      assertArrayEquals(new long[] {86L, 66L}, longArray0);
      assertEquals("", string3);
      assertTrue(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      assertEquals(2, longArray0.length);
      
      Locale locale0 = Locale.JAPAN;
      assertEquals("ja", locale0.getLanguage());
      assertEquals("JP", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("ja_JP", locale0.toString());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("JPN", locale0.getISO3Country());
      assertNotNull(locale0);
      
      String string4 = StringUtils.join((boolean[]) null, '3', (-2049), (-2049));
      assertNull(string4);
      
      String string5 = StringUtils.rightPad("\"/p)?<D@d;4g(/O>\"", 67, "+0");
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertNotNull(string5);
      
      String string6 = StringUtils.substringBetween("org.apache.commons.lang3.StringUtils", "org.apache.commons.lang3.ArrayUtils", (String) null);
      assertNull(string6);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      charSequenceArray0[0] = (CharSequence) "0FO5}hhQ5YS+G9";
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      int int0 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      String string0 = StringUtils.prependIfMissing("#ax&EK7nJTA(Oe;l zJ", "\r", charSequenceArray0);
      assertEquals("\r#ax&EK7nJTA(Oe;l zJ", string0);
      assertNotNull(string0);
      assertEquals(4, charSequenceArray0.length);
      
      int int1 = StringUtils.indexOfDifference((CharSequence) "\r#ax&EK7nJTA(Oe;l zJ", (CharSequence) " in an array of ");
      assertEquals(0, int1);
      assertFalse(int1 == int0);
      
      String string1 = StringUtils.stripAccents("\r");
      assertEquals("\r", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      double double0 = StringUtils.getJaroWinklerDistance("#ax&EK7nJTA(Oe;l zJ", " ");
      assertEquals(0.0, double0, 0.01);
      
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      assertEquals("TW", locale0.getCountry());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertNotNull(locale0);
      
      String string2 = locale0.getDisplayScript();
      assertEquals("", string2);
      assertEquals("TW", locale0.getCountry());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      String string3 = StringUtils.joinWith("\n", charSequenceArray0);
      assertEquals("0FO5}hhQ5YS+G9\n\n\n", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      assertEquals(4, charSequenceArray0.length);
      
      String string4 = StringUtils.substring(" &h", (-1), 3667);
      assertEquals("h", string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertNotNull(string4);
      
      String string5 = StringUtils.right("0FO5}hhQ5YS+G9", 3667);
      assertEquals("0FO5}hhQ5YS+G9", string5);
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertNotNull(string5);
      
      int int2 = StringUtils.indexOfDifference(charSequenceArray0);
      assertEquals(0, int2);
      assertFalse(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals(4, charSequenceArray0.length);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 2740.867485;
      String string0 = StringUtils.join(doubleArray0, 'X');
      assertArrayEquals(new double[] {2740.867485}, doubleArray0, 0.01);
      assertEquals("2740.867485", string0);
      assertNotNull(string0);
      assertEquals(1, doubleArray0.length);
      
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) "2740.867485";
      objectArray0[1] = (Object) "2740.867485";
      objectArray0[2] = (Object) 2740.867485;
      objectArray0[3] = (Object) "2740.867485";
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[4] = object0;
      objectArray0[5] = (Object) "2740.867485";
      objectArray0[6] = (Object) 2740.867485;
      objectArray0[7] = (Object) 2740.867485;
      objectArray0[8] = (Object) "2740.867485";
      String string1 = StringUtils.join(objectArray0, "org.apache.commons.lang3.StringUtils");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(9, objectArray0.length);
      
      String[] stringArray0 = StringUtils.split("", '&');
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      
      boolean boolean0 = StringUtils.isAlphaSpace("");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      String string0 = StringUtils.upperCase("Strings must not be null");
      assertEquals("STRINGS MUST NOT BE NULL", string0);
      assertNotNull(string0);
      
      char[] charArray0 = new char[4];
      charArray0[0] = '';
      charArray0[1] = '';
      charArray0[2] = 'F';
      charArray0[3] = 'F';
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "STRINGS MUST NOT BE NULL", charArray0);
      assertArrayEquals(new char[] {'', '', 'F', 'F'}, charArray0);
      assertEquals(0, int0);
      assertEquals(4, charArray0.length);
      
      String string1 = StringUtils.center("STRINGS MUST NOT BE NULL", 0, 'F');
      assertEquals("STRINGS MUST NOT BE NULL", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.center("Strings must not be null", 0, "Strings must not be null");
      assertEquals("Strings must not be null", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      String string3 = StringUtils.abbreviate("oD\"tmRH5r7+QV<;<# ", "z:l'qyTaLmL_u0h;=", 7, (int) 'F');
      assertEquals("oD\"tmRH5r7+QV<;<# ", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      
      String string4 = StringUtils.unwrap(".Q)SY{", "m]Fxq{aG");
      assertEquals(".Q)SY{", string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertNotNull(string4);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      String string0 = StringUtils.removeAll(" ", " ");
      assertEquals("", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.containsAny((CharSequence) "", (char[]) null);
      assertFalse(boolean0);
      
      String string1 = StringUtils.deleteWhitespace("\r");
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.replaceFirst("u", "\r", (String) null);
      assertEquals("u", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      String string3 = StringUtils.LF;
      assertEquals("\n", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      
      boolean boolean1 = StringUtils.containsOnly((CharSequence) null, (char[]) null);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String string4 = StringUtils.abbreviate("org.apache.commons.lang3.ObjectUtils$Null@J(?mTkP%H7vTZ-", 16, 10);
      assertEquals("...ns.l...", string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertNotNull(string4);
      
      String string5 = StringUtils.truncate("\n", 321);
      assertEquals("\n", string5);
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertTrue(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertNotNull(string5);
      
      String string6 = StringUtils.chomp("2q\"z/");
      assertEquals("2q\"z/", string6);
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string0));
      assertNotNull(string6);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      String string0 = StringUtils.deleteWhitespace("_");
      assertEquals("_", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = new String[6];
      stringArray0[0] = "XrQF1Gf";
      stringArray0[1] = "_";
      stringArray0[2] = "C'gV*{x)ucqxxxB6k";
      stringArray0[3] = "_";
      stringArray0[4] = "C'gV*{x)ucqxxxB6k";
      stringArray0[5] = "_";
      String[] stringArray1 = StringUtils.stripAll(stringArray0, "bin|IFEp=OW]!\"2");
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(6, stringArray0.length);
      assertEquals(6, stringArray1.length);
      
      String string1 = StringUtils.leftPad((String) null, 50, "RqSF/rpt!qnyVE");
      assertNull(string1);
      
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "Index:", (String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      String string0 = StringUtils.join((Object[]) charSequenceArray0, 'n');
      assertEquals("", string0);
      assertNotNull(string0);
      assertEquals(1, charSequenceArray0.length);
      
      ArrayList<String> arrayList0 = new ArrayList<String>();
      assertFalse(arrayList0.contains(string0));
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      String string1 = StringUtils.join((List<?>) arrayList0, 'v', (int) 'n', (int) 'n');
      assertFalse(arrayList0.contains(string0));
      assertEquals("", string1);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)97;
      byteArray0[1] = (byte)14;
      byteArray0[2] = (byte)14;
      boolean boolean0 = StringUtils.isAlphanumeric("");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isNoneBlank(charSequenceArray0);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals(1, charSequenceArray0.length);
      
      String string2 = StringUtils.substringBetween("org.apache.commons.lang3.StringUtils", "\rArray element ", " vs ");
      assertNull(string2);
      
      int[] intArray0 = StringUtils.toCodePoints("org.apache.commons.lang3.StringUtils");
      assertNotNull(intArray0);
      assertEquals(36, intArray0.length);
      
      String string3 = StringUtils.center("org.apache.commons.lang3.ObjectUtils$Nullorg.apache.commons.lang3.ObjectUtils$Null", (int) (byte)14, '3');
      assertEquals("org.apache.commons.lang3.ObjectUtils$Nullorg.apache.commons.lang3.ObjectUtils$Null", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      
      String string4 = StringUtils.chomp("\rArray element ");
      assertEquals("\rArray element ", string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertNotNull(string4);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("[D/.5Q]{sGZM2sH<]", (String) null);
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      boolean boolean2 = StringUtils.isAlphanumericSpace("\rArray element ");
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      charSequenceArray0[0] = (CharSequence) "KX+";
      charSequenceArray0[1] = (CharSequence) "KX+";
      charSequenceArray0[2] = (CharSequence) "KX+";
      charSequenceArray0[3] = (CharSequence) "KX+";
      charSequenceArray0[4] = (CharSequence) "KX+";
      int int0 = StringUtils.indexOfDifference(charSequenceArray0);
      assertEquals((-1), int0);
      assertEquals(5, charSequenceArray0.length);
      
      char[] charArray0 = new char[5];
      charArray0[0] = 'O';
      charArray0[1] = '$';
      charArray0[2] = 'O';
      charArray0[3] = '!';
      charArray0[4] = 'O';
      boolean boolean0 = StringUtils.containsNone(charSequenceArray0[4], charArray0);
      assertArrayEquals(new char[] {'O', '$', 'O', '!', 'O'}, charArray0);
      assertTrue(boolean0);
      assertEquals(5, charSequenceArray0.length);
      assertEquals(5, charArray0.length);
      
      boolean boolean1 = StringUtils.isAlphanumeric(charSequenceArray0[4]);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      assertEquals(5, charSequenceArray0.length);
      
      boolean boolean2 = StringUtils.isNoneBlank(charSequenceArray0);
      assertTrue(boolean2);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertEquals(5, charSequenceArray0.length);
      
      String string0 = StringUtils.substringBetween("\rArray element ", "org.apache.commons.lang3.ObjectUtils$Null@J(?mTkP%H7vTZ-", "KX+");
      assertNull(string0);
      
      int[] intArray0 = StringUtils.toCodePoints(charSequenceArray0[2]);
      assertArrayEquals(new int[] {75, 88, 43}, intArray0);
      assertNotNull(intArray0);
      assertEquals(5, charSequenceArray0.length);
      assertEquals(3, intArray0.length);
      
      String string1 = StringUtils.center("", (-1), 'O');
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.chomp("KX+");
      assertEquals("KX+", string2);
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("", "Object varargs must not be null");
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      
      boolean boolean3 = StringUtils.isAlphanumericSpace("");
      assertTrue(boolean3);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3 == boolean1);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      String string0 = StringUtils.abbreviate("", "", (-1051), (-3148));
      assertEquals("", string0);
      assertNotNull(string0);
      
      CharSequence charSequence0 = StringUtils.defaultIfEmpty((CharSequence) "", (CharSequence) "");
      assertEquals("", charSequence0);
      assertTrue(charSequence0.equals((Object)string0));
      assertNotNull(charSequence0);
      
      boolean boolean0 = StringUtils.isNumericSpace("");
      assertTrue(boolean0);
      
      String string1 = StringUtils.removeStart(".ObjectUtils$Null", "I]b.\"S6aH\"g*W+^");
      assertEquals(".ObjectUtils$Null", string1);
      assertFalse(string1.equals((Object)charSequence0));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "", (CharSequence) ".ObjectUtils$Null", (-3148));
      assertEquals((-1), int0);
      
      char[] charArray0 = new char[6];
      charArray0[0] = 'J';
      charArray0[1] = 'J';
      charArray0[2] = 'J';
      charArray0[3] = 'J';
      charArray0[4] = 'J';
      charArray0[5] = 'J';
      int int1 = StringUtils.indexOfAny((CharSequence) null, charArray0);
      assertArrayEquals(new char[] {'J', 'J', 'J', 'J', 'J', 'J'}, charArray0);
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      assertEquals(6, charArray0.length);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "";
      String string2 = StringUtils.getCommonPrefix(stringArray0);
      assertEquals("", string2);
      assertTrue(string2.equals((Object)charSequence0));
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals(1, stringArray0.length);
      
      int int2 = StringUtils.lastIndexOfAny(".ObjectUtils$Null", stringArray0);
      assertEquals(17, int2);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(1, stringArray0.length);
      
      String string3 = StringUtils.replaceEachRepeatedly(".ObjectUtils$Null", stringArray0, stringArray0);
      assertEquals(".ObjectUtils$Null", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)charSequence0));
      assertFalse(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string1));
      assertNotNull(string3);
      assertEquals(1, stringArray0.length);
      
      String string4 = StringUtils.trimToNull("");
      assertNull(string4);
      
      boolean boolean1 = StringUtils.isAllLowerCase("");
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      String string5 = StringUtils.leftPad("", (-494));
      assertEquals("", string5);
      assertTrue(string5.equals((Object)string2));
      assertTrue(string5.equals((Object)charSequence0));
      assertFalse(string5.equals((Object)string1));
      assertTrue(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertNotNull(string5);
      
      String string6 = StringUtils.trimToEmpty("<xw}%Jq%(<");
      assertEquals("<xw}%Jq%(<", string6);
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)charSequence0));
      assertNotNull(string6);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      String string0 = StringUtils.getDigits("Array element Array element ");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.abbreviate("", 16, 16);
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      short[] shortArray0 = new short[0];
      String string2 = StringUtils.join(shortArray0, '\"');
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals("", string2);
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals(0, shortArray0.length);
      
      String string3 = StringUtils.rightPad("", 16, '.');
      assertEquals("................", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      
      String string4 = StringUtils.left("sBL<q}~jRZ;", 16);
      assertEquals("sBL<q}~jRZ;", string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertNotNull(string4);
      
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) "";
      objectArray0[1] = (Object) "";
      String string5 = StringUtils.join(objectArray0, "", 16, Integer.MIN_VALUE);
      assertEquals("", string5);
      assertFalse(string5.equals((Object)string3));
      assertTrue(string5.equals((Object)string1));
      assertTrue(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertTrue(string5.equals((Object)string2));
      assertNotNull(string5);
      assertEquals(2, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      String string0 = StringUtils.repeat("*{SR\"`K0", (String) null, (-1381));
      assertEquals("", string0);
      assertNotNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[9];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) null;
      charSequenceArray0[2] = (CharSequence) "*{SR\"`K0";
      charSequenceArray0[3] = (CharSequence) "*{SR\"`K0";
      charSequenceArray0[4] = (CharSequence) "*{SR\"`K0";
      charSequenceArray0[5] = (CharSequence) "*{SR\"`K0";
      charSequenceArray0[6] = (CharSequence) "*{SR\"`K0";
      String string1 = StringUtils.abbreviate((String) null, 6);
      assertNull(string1);
      
      charSequenceArray0[7] = (CharSequence) null;
      charSequenceArray0[8] = (CharSequence) null;
      boolean boolean0 = StringUtils.isAnyEmpty(charSequenceArray0);
      assertTrue(boolean0);
      assertEquals(9, charSequenceArray0.length);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "", (CharSequence) "", 104);
      assertEquals(0, int0);
      
      String string0 = StringUtils.replace("#", "", (String) null, 104);
      assertEquals("#", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.abbreviate("#", 90, 90);
      assertEquals("#", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      char[] charArray0 = new char[7];
      charArray0[0] = 't';
      charArray0[1] = ']';
      charArray0[2] = 'r';
      charArray0[3] = 'm';
      charArray0[4] = 'k';
      charArray0[5] = 'x';
      charArray0[6] = 'L';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      assertArrayEquals(new char[] {'t', ']', 'r', 'm', 'k', 'x', 'L'}, charArray0);
      assertTrue(charBuffer0.hasArray());
      assertEquals(7, charBuffer0.remaining());
      assertEquals(7, charBuffer0.capacity());
      assertEquals(0, charBuffer0.position());
      assertEquals(7, charBuffer0.length());
      assertEquals("t]rmkxL", charBuffer0.toString());
      assertFalse(charBuffer0.isDirect());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(7, charBuffer0.limit());
      assertTrue(charBuffer0.hasRemaining());
      assertNotNull(charBuffer0);
      assertEquals(7, charArray0.length);
      
      char[] charArray1 = new char[4];
      assertFalse(charArray1.equals((Object)charArray0));
      
      charArray1[0] = 'L';
      charArray1[1] = 't';
      charArray1[2] = 'r';
      charArray1[3] = 'm';
      // Undeclared exception!
      try { 
        charBuffer0.get(charArray1, 487, 0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      boolean boolean0 = StringUtils.isEmpty("l(c\"B4`q5AeDf\"5{");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.containsOnly((CharSequence) "l(c\"B4`q5AeDf\"5{", (char[]) null);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String string0 = StringUtils.abbreviate("l(c\"B4`q5AeDf\"5{", 2, 16);
      assertEquals("l(c\"B4`q5AeDf\"5{", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.truncate("l(c\"B4`q5AeDf\"5{", 16);
      assertEquals("l(c\"B4`q5AeDf\"5{", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.chomp("l(c\"B4`q5AeDf\"5{");
      assertEquals("l(c\"B4`q5AeDf\"5{", string2);
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = object0;
      objectArray0[1] = object1;
      String string0 = StringUtils.join(objectArray0, 'e', 127, 86);
      assertEquals("", string0);
      assertNotNull(string0);
      assertEquals(2, objectArray0.length);
      
      String string1 = StringUtils.abbreviate("", "@", 86, 8);
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.removeIgnoreCase("", "");
      assertEquals("", string2);
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertNotNull(string2);
      
      int int0 = StringUtils.length("");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "`$Q5o'S#9:q`|d";
      stringArray0[1] = "`$Q5o'S#9:q`|d";
      String[] stringArray1 = StringUtils.stripAll(stringArray0, "q(_Bbu+T<4>m$@Sv'v&");
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(2, stringArray0.length);
      assertEquals(2, stringArray1.length);
      
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "q(_Bbu+T<4>m$@Sv'v&", "?'");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isAllEmpty(stringArray1);
      assertFalse(boolean1);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertTrue(boolean1 == boolean0);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(2, stringArray0.length);
      assertEquals(2, stringArray1.length);
      
      boolean boolean2 = StringUtils.isAnyEmpty(stringArray0);
      assertFalse(boolean2);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertNotSame(stringArray0, stringArray1);
      assertEquals(2, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      String string0 = StringUtils.strip("Index: ");
      assertEquals("Index:", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.contains((CharSequence) "Index:", 3);
      assertFalse(boolean0);
      
      String[] stringArray0 = new String[5];
      stringArray0[0] = "Index: ";
      stringArray0[1] = "Index: ";
      stringArray0[2] = "Index:";
      stringArray0[3] = "Index: ";
      stringArray0[4] = "Index: ";
      String[] stringArray1 = StringUtils.stripAll(stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(5, stringArray0.length);
      assertEquals(5, stringArray1.length);
      
      boolean boolean1 = StringUtils.endsWithAny("Index: ", stringArray1);
      assertFalse(boolean1);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertTrue(boolean1 == boolean0);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(5, stringArray0.length);
      assertEquals(5, stringArray1.length);
      
      char[] charArray0 = new char[0];
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "Index: ", charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals((-1), int0);
      assertEquals(0, charArray0.length);
      
      String string1 = StringUtils.replaceAll("E", "v_Q>/,}", "Index:");
      assertEquals("E", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      boolean boolean2 = StringUtils.isMixedCase("Index: ");
      assertTrue(boolean2);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      
      String string2 = StringUtils.defaultString("Index:", "Index: ");
      assertEquals("Index:", string2);
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertNotNull(string2);
      
      boolean boolean3 = StringUtils.isAlphanumericSpace("E");
      assertTrue(boolean3);
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      
      String string3 = StringUtils.difference("Index:", "Index:");
      assertEquals("", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      
      String string4 = StringUtils.removeEnd("v_Q>/,}", "Index:");
      assertEquals("v_Q>/,}", string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertNotNull(string4);
      
      String string5 = StringUtils.reverseDelimited("Index: ", 'n');
      assertEquals("dex: nI", string5);
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertNotNull(string5);
      
      int int1 = StringUtils.indexOf((CharSequence) "dex: nI", (-1));
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      
      boolean boolean4 = StringUtils.isWhitespace("Index:");
      assertFalse(boolean4);
      assertTrue(boolean4 == boolean0);
      assertFalse(boolean4 == boolean2);
      assertFalse(boolean4 == boolean3);
      assertTrue(boolean4 == boolean1);
      
      String string6 = StringUtils.join((Object[]) stringArray0, 'n', 879, (-1));
      assertEquals("", string6);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string0));
      assertNotNull(string6);
      assertNotSame(stringArray0, stringArray1);
      assertEquals(5, stringArray0.length);
      
      String string7 = StringUtils.capitalize("yLbGrNYtngmg,!:C");
      assertEquals("YLbGrNYtngmg,!:C", string7);
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string6));
      assertNotNull(string7);
      
      PriorityQueue<Integer> priorityQueue0 = new PriorityQueue<Integer>();
      assertFalse(priorityQueue0.contains(3));
      assertEquals(0, priorityQueue0.size());
      assertNotNull(priorityQueue0);
      
      int int2 = StringUtils.getLevenshteinDistance((CharSequence) "Index: ", (CharSequence) "Index:", 3);
      assertEquals(1, int2);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      
      String string8 = StringUtils.substringAfter("...", "org.apache.3ommons.lang3.LocaleUties");
      assertEquals("", string8);
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string0));
      assertNotNull(string8);
      
      String string9 = StringUtils.remove("Index: ", ')');
      assertEquals("Index: ", string9);
      assertFalse(string9.equals((Object)string4));
      assertFalse(string9.equals((Object)string7));
      assertFalse(string9.equals((Object)string2));
      assertFalse(string9.equals((Object)string0));
      assertFalse(string9.equals((Object)string6));
      assertFalse(string9.equals((Object)string5));
      assertFalse(string9.equals((Object)string1));
      assertFalse(string9.equals((Object)string8));
      assertFalse(string9.equals((Object)string3));
      assertNotNull(string9);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      String[] stringArray0 = new String[1];
      String string0 = StringUtils.getCommonPrefix(stringArray0);
      assertEquals("", string0);
      assertNotNull(string0);
      assertEquals(1, stringArray0.length);
      
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "", (char[]) null);
      assertFalse(boolean0);
      
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      assertFalse(arrayList0.contains(""));
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 101;
      doubleArray0[1] = (double) '';
      doubleArray0[2] = (double) 101;
      doubleArray0[3] = (double) '';
      doubleArray0[4] = (double) 101;
      doubleArray0[5] = (double) 101;
      doubleArray0[6] = (double) 101;
      doubleArray0[7] = (double) '';
      doubleArray0[8] = (double) 101;
      String string1 = StringUtils.join(doubleArray0, '', (-1321), (-1321));
      assertArrayEquals(new double[] {101.0, 127.0, 101.0, 127.0, 101.0, 101.0, 101.0, 127.0, 101.0}, doubleArray0, 0.01);
      assertEquals("", string1);
      assertNotNull(string1);
      assertEquals(9, doubleArray0.length);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "", (CharSequence) "");
      assertEquals(0, int0);
      
      String string2 = StringUtils.defaultString("Invalid locale format: ", "el");
      assertEquals("Invalid locale format: ", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      String string3 = StringUtils.capitalize("");
      assertEquals("", string3);
      assertTrue(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string0));
      assertNotNull(string3);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      String string0 = StringUtils.CR;
      assertEquals("\r", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isNotBlank("\r");
      assertFalse(boolean0);
      
      String string1 = StringUtils.removeStart("R=X\"eH+!97+RVrt&", (String) null);
      assertEquals("R=X\"eH+!97+RVrt&", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.toRootUpperCase("(");
      assertEquals("(", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      CharSequence[] charSequenceArray0 = new CharSequence[6];
      charSequenceArray0[0] = (CharSequence) "R=X\"eH+!97+RVrt&";
      charSequenceArray0[1] = (CharSequence) "R=X\"eH+!97+RVrt&";
      String string3 = StringUtils.replaceOnceIgnoreCase("8dvkUvc1?}#$g,}%L", "M.|?ia{>>9t-", "\r");
      assertEquals("8dvkUvc1?}#$g,}%L", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      
      charSequenceArray0[2] = (CharSequence) "8dvkUvc1?}#$g,}%L";
      charSequenceArray0[3] = (CharSequence) "(";
      charSequenceArray0[4] = (CharSequence) "(";
      charSequenceArray0[5] = (CharSequence) "(";
      String string4 = StringUtils.appendIfMissingIgnoreCase("f`3rXO(@]q$3?#", "(", charSequenceArray0);
      assertEquals("f`3rXO(@]q$3?#(", string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertNotNull(string4);
      assertEquals(6, charSequenceArray0.length);
      
      int[] intArray0 = StringUtils.toCodePoints("f`3rXO(@]q$3?#(");
      assertNotNull(intArray0);
      assertEquals(15, intArray0.length);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens((String) null, "...");
      assertNull(stringArray0);
      
      int int0 = StringUtils.indexOfAny((CharSequence) null, (CharSequence[]) null);
      assertEquals((-1), int0);
      
      String string5 = StringUtils.lowerCase((String) null);
      assertNull(string5);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 2.0;
      doubleArray0[1] = (double) (-1);
      doubleArray0[2] = (double) (-1);
      doubleArray0[3] = (double) (-1);
      doubleArray0[4] = (double) (-1);
      String string6 = StringUtils.join(doubleArray0, 'M', (-1), (-1));
      assertArrayEquals(new double[] {2.0, (-1.0), (-1.0), (-1.0), (-1.0)}, doubleArray0, 0.01);
      assertEquals("", string6);
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string1));
      assertNotNull(string6);
      assertEquals(5, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      String string0 = StringUtils.substringAfter("[D/.5Q]{sGZM2sH<] in an array of ", "W");
      assertEquals("", string0);
      assertNotNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[0] = (CharSequence) "W";
      charSequenceArray0[1] = (CharSequence) "W";
      String string1 = StringUtils.lowerCase((String) null);
      assertNull(string1);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      String string0 = StringUtils.capitalize((String) null);
      assertNull(string0);
      
      int[] intArray0 = StringUtils.toCodePoints((CharSequence) null);
      assertNull(intArray0);
      
      String string1 = StringUtils.reverse((String) null);
      assertNull(string1);
      
      boolean boolean0 = StringUtils.isEmpty((CharSequence) null);
      assertTrue(boolean0);
      
      String string2 = StringUtils.removeStart((String) null, "Ki[6h^s~- a>'}oo");
      assertNull(string2);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("Y)3n1`2_97u G#5v_Y)3n1`2_97u G#5v_Y)3n1`2_97u G#5v_Y)3n1`2_97u G#5v__", "org.apache.commons.lang3.ObjectUtils");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      String string3 = StringUtils.join((Iterator<?>) null, 'N');
      assertNull(string3);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      String[] stringArray0 = new String[1];
      String string0 = StringUtils.getCommonPrefix(stringArray0);
      assertEquals("", string0);
      assertNotNull(string0);
      assertEquals(1, stringArray0.length);
      
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "", (char[]) null);
      assertFalse(boolean0);
      
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      assertFalse(arrayList0.contains(""));
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      String string1 = StringUtils.uncapitalize("");
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.joinWith("", stringArray0);
      assertEquals("", string2);
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals(1, stringArray0.length);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)76;
      byteArray0[1] = (byte)28;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-20);
      byteArray0[4] = (byte)84;
      byteArray0[5] = (byte)0;
      // Undeclared exception!
      try { 
        StringUtils.toString(byteArray0, "XrQF1Gf");
        fail("Expecting exception: UnsupportedCharsetException");
      
      } catch(UnsupportedCharsetException e) {
         //
         // XrQF1Gf
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      String string0 = StringUtils.substringAfter("[D/.5Q]{sGZM2sH<] in an array of ", "!");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.trimToNull("");
      assertNull(string1);
      
      String string2 = StringUtils.substringAfterLast(" is not in the range '0' - '9'", 53);
      assertEquals("", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.reverseDelimited("~!%q{-kC<;JCc", '~');
      assertEquals("!%q{-kC<;JCc", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      
      String string4 = StringUtils.center((String) null, 53, '~');
      assertNull(string4);
      
      String string5 = StringUtils.center("VwYF a90Hla68", 53, "~!%q{-kC<;JCc");
      assertEquals("~!%q{-kC<;JCc~!%q{-kVwYF a90Hla68~!%q{-kC<;JCc~!%q{-k", string5);
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertNotNull(string5);
      
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[0] = (CharSequence) "[D/.5Q]{sGZM2sH<] in an array of ";
      charSequenceArray0[1] = (CharSequence) "";
      int int0 = StringUtils.indexOfDifference(charSequenceArray0);
      assertEquals(0, int0);
      assertEquals(2, charSequenceArray0.length);
      
      String string6 = StringUtils.deleteWhitespace(" is not in the range '0' - '9'");
      assertEquals("isnotintherange'0'-'9'", string6);
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string0));
      assertNotNull(string6);
      
      int int1 = StringUtils.ordinalIndexOf("!", "isnotintherange'0'-'9'", 53);
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      
      String string7 = StringUtils.right("MXg;$o39[Ro;*O`Kg?", 0);
      assertEquals("", string7);
      assertFalse(string7.equals((Object)string5));
      assertTrue(string7.equals((Object)string0));
      assertTrue(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string6));
      assertNotNull(string7);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      String[] stringArray0 = new String[13];
      stringArray0[1] = "";
      String string0 = StringUtils.firstNonBlank(stringArray0);
      assertNull(string0);
      assertEquals(13, stringArray0.length);
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = (-1.0F);
      floatArray0[3] = (-2834.8596F);
      floatArray0[4] = (-2530.9985F);
      floatArray0[6] = 0.0F;
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertFalse(linkedList0.contains(0.0F));
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Iterator<Object> iterator0 = linkedList0.iterator();
      assertFalse(linkedList0.contains(0.0F));
      assertEquals(0, linkedList0.size());
      assertNotNull(iterator0);
      
      CharBuffer charBuffer0 = CharBuffer.allocate(10);
      assertEquals(0, charBuffer0.arrayOffset());
      assertFalse(charBuffer0.isDirect());
      assertFalse(charBuffer0.isReadOnly());
      assertTrue(charBuffer0.hasArray());
      assertEquals(10, charBuffer0.capacity());
      assertEquals(10, charBuffer0.limit());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(10, charBuffer0.length());
      assertEquals(0, charBuffer0.position());
      assertEquals(10, charBuffer0.remaining());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", charBuffer0.toString());
      assertNotNull(charBuffer0);
      
      boolean boolean0 = linkedList0.add((Object) charBuffer0);
      assertFalse(linkedList0.contains(0.0F));
      assertTrue(boolean0);
      assertEquals(1, linkedList0.size());
      assertEquals(0, charBuffer0.arrayOffset());
      assertFalse(charBuffer0.isDirect());
      assertFalse(charBuffer0.isReadOnly());
      assertTrue(charBuffer0.hasArray());
      assertEquals(10, charBuffer0.capacity());
      assertEquals(10, charBuffer0.limit());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(10, charBuffer0.length());
      assertEquals(0, charBuffer0.position());
      assertEquals(10, charBuffer0.remaining());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", charBuffer0.toString());
      
      // Undeclared exception!
      try { 
        StringUtils.join(iterator0, string0);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.LinkedList$ListItr", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      String string0 = StringUtils.upperCase("U0Djk`7:WOLdCtho_4");
      assertEquals("U0DJK`7:WOLDCTHO_4", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.unwrap("U0DJK`7:WOLDCTHO_4", '$');
      assertEquals("U0DJK`7:WOLDCTHO_4", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.substringAfter("/|0aV%|(&88)", 3);
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      CharSequence[] charSequenceArray0 = new CharSequence[6];
      charSequenceArray0[0] = (CharSequence) "U0DJK`7:WOLDCTHO_4";
      charSequenceArray0[1] = (CharSequence) "U0DJK`7:WOLDCTHO_4";
      charSequenceArray0[2] = (CharSequence) "U0Djk`7:WOLdCtho_4";
      String string3 = StringUtils.join((byte[]) null, '$', 3, 1120);
      assertNull(string3);
      
      charSequenceArray0[3] = (CharSequence) null;
      charSequenceArray0[4] = (CharSequence) "/|0aV%|(&88)";
      Vector<Locale.LanguageRange> vector0 = new Vector<Locale.LanguageRange>();
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertNotNull(vector0);
      
      int[] intArray0 = StringUtils.toCodePoints(charSequenceArray0[0]);
      assertNotNull(intArray0);
      assertEquals(6, charSequenceArray0.length);
      assertEquals(19, intArray0.length);
      
      boolean boolean0 = StringUtils.containsWhitespace(charSequenceArray0[1]);
      assertFalse(boolean0);
      assertEquals(6, charSequenceArray0.length);
      
      String string4 = StringUtils.rightPad("Comparator should not be null.", 3, "#|Z^~f.");
      assertEquals("Comparator should not be null.", string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertNotNull(string4);
      
      boolean boolean1 = StringUtils.isAlphaSpace("Comparator should not be null.");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      String string0 = StringUtils.removeStartIgnoreCase("Search and Replace array lengths don't match: Array element Search and Replace array lengths don't match: Array element Search and Replace array lengths don't match: Array element Search and Replace array lengths don't match: Array element Array element ", "Search and Replace array lengths don't match: Array element Search and Replace array lengths don't match: Array element Search and Replace array lengths don't match: Array element Search and Replace array lengths don't match: Array element Array element ");
      assertEquals("", string0);
      assertNotNull(string0);
      
      // Undeclared exception!
      try { 
        StringUtils.getJaroWinklerDistance("", (CharSequence) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      String string0 = StringUtils.trimToNull("qD/.5Q]{&GZM2vH<]");
      assertEquals("qD/.5Q]{&GZM2vH<]", string0);
      assertNotNull(string0);
      
      charSequenceArray0[0] = (CharSequence) "qD/.5Q]{&GZM2vH<]";
      int int0 = StringUtils.lastIndexOfIgnoreCase(charSequenceArray0[0], (CharSequence) "qD/.5Q]{&GZM2vH<]", 2304);
      assertEquals(0, int0);
      assertEquals(1, charSequenceArray0.length);
      
      String string1 = StringUtils.replace("Mx#Dlegb}H]io!", "Arguments cannot both be null", "Mx#Dlegb}H]io!", 0);
      assertEquals("Mx#Dlegb}H]io!", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.abbreviate("", 85, 2304);
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      String string0 = StringUtils.upperCase("Strings must not be null");
      assertEquals("STRINGS MUST NOT BE NULL", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.toRootLowerCase("Dh<PG9l");
      assertEquals("dh<pg9l", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.isAllUpperCase("dh<pg9l");
      assertFalse(boolean0);
      
      String string2 = StringUtils.unwrap((String) null, "STRINGS MUST NOT BE NULL");
      assertNull(string2);
      
      String string3 = StringUtils.center("Dh<PG9l", 9, 'k');
      assertEquals("kDh<PG9lk", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "kDh<PG9lk", (CharSequence) "dh<pg9l");
      assertEquals(0, int0);
      
      String string4 = StringUtils.substringBeforeLast("!6@s!uSf]NL", "");
      assertEquals("!6@s!uSf]NL", string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertNotNull(string4);
      
      String string5 = StringUtils.difference("Threshold must not be negative", "Object varargs must not be null");
      assertEquals("Object varargs must not be null", string5);
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertNotNull(string5);
      
      String string6 = StringUtils.unwrap("Threshold must not be negative", "*_3IcLR4-chy.~q");
      assertEquals("Threshold must not be negative", string6);
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string5));
      assertNotNull(string6);
      
      int int1 = StringUtils.indexOfDifference((CharSequence) "G^7|+zFpb:oK?5", (CharSequence) "Threshold must not be negative");
      assertEquals(0, int1);
      assertTrue(int1 == int0);
      
      String[] stringArray0 = StringUtils.splitByCharacterType("Q2q=]l");
      assertNotNull(stringArray0);
      assertEquals(6, stringArray0.length);
      
      String string7 = StringUtils.stripToNull("_");
      assertEquals("_", string7);
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string6));
      assertNotNull(string7);
      
      String string8 = StringUtils.repeat('k', 0);
      assertEquals("", string8);
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string5));
      assertNotNull(string8);
      
      boolean boolean1 = StringUtils.equalsAny("", stringArray0);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals(6, stringArray0.length);
      
      int int2 = StringUtils.compare(" ", "!6@s!uSf]NL");
      assertEquals((-1), int2);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      
      String string9 = StringUtils.rotate("@b4)RYI8Zo", 9);
      assertEquals("b4)RYI8Zo@", string9);
      assertFalse(string9.equals((Object)string5));
      assertFalse(string9.equals((Object)string0));
      assertFalse(string9.equals((Object)string8));
      assertFalse(string9.equals((Object)string6));
      assertFalse(string9.equals((Object)string4));
      assertFalse(string9.equals((Object)string1));
      assertFalse(string9.equals((Object)string7));
      assertFalse(string9.equals((Object)string3));
      assertNotNull(string9);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      String string0 = StringUtils.getDigits("Array element ");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.strip("[ R4Pk;9", "");
      assertEquals("[ R4Pk;9", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "[ R4Pk;9", (CharSequence) "[ R4Pk;9", 95);
      assertEquals(0, int0);
      
      String string2 = StringUtils.replace((String) null, "PvVU'_5~+", "Array element ", 0);
      assertNull(string2);
      
      boolean boolean0 = StringUtils.contains((CharSequence) "Array element ", 1);
      assertFalse(boolean0);
      
      String string3 = StringUtils.getDigits("+)osW'Hym");
      assertEquals("", string3);
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) "[ R4Pk;9";
      objectArray0[1] = (Object) "";
      String string4 = StringUtils.join(objectArray0, 't');
      assertEquals("[ R4Pk;9t", string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertNotNull(string4);
      assertEquals(2, objectArray0.length);
      
      int int1 = StringUtils.indexOf((CharSequence) "[ R4Pk;9t", (CharSequence) "PvVU'_5~+");
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase(":lGnqLeX*");
      assertNotNull(stringArray0);
      assertEquals(6, stringArray0.length);
      
      String string0 = StringUtils.join((List<?>) null, '5', 1448, 556);
      assertNull(string0);
      
      int int0 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      String string1 = StringUtils.firstNonEmpty(stringArray0);
      assertEquals(":", string1);
      assertNotNull(string1);
      assertEquals(6, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      String string0 = StringUtils.unwrap("Search and Replace array lengths don't match: ", "#");
      assertEquals("Search and Replace array lengths don't match: ", string0);
      assertNotNull(string0);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-1.0);
      doubleArray0[1] = 1.0;
      doubleArray0[2] = 1.0;
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) (-1.0);
      String string1 = StringUtils.normalizeSpace("Search and Replace array lengths don't match: ");
      assertEquals("Search and Replace array lengths don't match:", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.trimToNull("p{InCombiningDiacriticalMarks}+");
      assertEquals("p{InCombiningDiacriticalMarks}+", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      String string3 = StringUtils.leftPad("Search and Replace array lengths don't match:", 1614, "#");
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      
      boolean boolean0 = StringUtils.isAlphanumeric("Search and Replace array lengths don't match: ");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      boolean boolean0 = StringUtils.isEmpty("l(c\"B4`q5AeDf\"5{");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.containsOnly((CharSequence) "l(c\"B4`q5AeDf\"5{", (char[]) null);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String string0 = StringUtils.abbreviate("l(c\"B4`q5AeDf\"5{", 2, 16);
      assertEquals("l(c\"B4`q5AeDf\"5{", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.truncate("Kx?'],`(Dw~$", 16);
      assertEquals("Kx?'],`(Dw~$", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      int int0 = StringUtils.indexOfDifference((CharSequence) "Kx?'],`(Dw~$", (CharSequence) "l(c\"B4`q5AeDf\"5{");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      String string0 = StringUtils.removeFirst("", "Locale must not be null");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparator("Locale must not be null", (String) null);
      assertNotNull(stringArray0);
      assertEquals(5, stringArray0.length);
      
      String string1 = StringUtils.join((Object[]) stringArray0, "Locale must not be null");
      assertEquals("LocaleLocale must not be nullmustLocale must not be nullnotLocale must not be nullbeLocale must not be nullnull", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(5, stringArray0.length);
      
      boolean boolean0 = StringUtils.contains((CharSequence) null, (CharSequence) "LocaleLocale must not be nullmustLocale must not be nullnotLocale must not be nullbeLocale must not be nullnull");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      String string0 = StringUtils.substringAfter("[D/.5Q]{sGZM2sH<] in an array of ", "!");
      assertEquals("", string0);
      assertNotNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[0] = (CharSequence) "!";
      charSequenceArray0[1] = (CharSequence) "!";
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("o9*`", "o9*`", 124);
      assertNotNull(stringArray0);
      assertEquals(5, stringArray0.length);
      
      boolean boolean0 = StringUtils.isAlphanumeric(charSequenceArray0[0]);
      assertFalse(boolean0);
      assertEquals(2, charSequenceArray0.length);
      
      int int0 = StringUtils.ordinalIndexOf("", "", 1123);
      assertEquals(0, int0);
      
      String string1 = StringUtils.chop("[D/.5Q]{sGZM2sH<] in an array of ");
      assertEquals("[D/.5Q]{sGZM2sH<] in an array of", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      boolean boolean1 = StringUtils.isAlphanumericSpace("[D/.5Q]{sGZM2sH<] in an array of");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String string2 = StringUtils.getDigits("!");
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) null;
      String string0 = StringUtils.joinWith((String) null, objectArray0);
      assertEquals("", string0);
      assertNotNull(string0);
      assertEquals(1, objectArray0.length);
      
      String string1 = StringUtils.substring("", 0, 0);
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      long[] longArray0 = new long[6];
      longArray0[0] = (long) 0;
      longArray0[1] = (long) 0;
      longArray0[2] = (long) 0;
      longArray0[3] = (long) 0;
      longArray0[4] = (long) 0;
      longArray0[5] = (long) 0;
      String string2 = StringUtils.rightPad("", 0);
      assertEquals("", string2);
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertNotNull(string2);
      
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      String string3 = StringUtils.join((Object[]) charSequenceArray0, (String) null);
      assertEquals("", string3);
      assertTrue(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string0));
      assertNotNull(string3);
      assertEquals(4, charSequenceArray0.length);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 0L;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0L;
      doubleArray0[3] = (double) 0L;
      String string4 = StringUtils.join(doubleArray0, '2', 116, 0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals("", string4);
      assertTrue(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string2));
      assertNotNull(string4);
      assertEquals(4, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      float[] floatArray0 = new float[3];
      floatArray0[0] = 0.0F;
      floatArray0[1] = 692.4639F;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-29);
      String string0 = StringUtils.join(byteArray0, 'I');
      assertArrayEquals(new byte[] {(byte) (-29)}, byteArray0);
      assertEquals("-29", string0);
      assertNotNull(string0);
      assertEquals(1, byteArray0.length);
      
      String string1 = StringUtils.stripEnd("-29", "COucLtwBF^c^a`'");
      assertEquals("-29", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.containsIgnoreCase("-29", "-29");
      assertTrue(boolean0);
      
      String string2 = StringUtils.wrap("-29", 'I');
      assertEquals("I-29I", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "-29", (CharSequence) "I-29I", 16);
      assertEquals(2, int0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      charSequenceArray0[0] = (CharSequence) "-29";
      boolean boolean1 = StringUtils.isNoneBlank(charSequenceArray0);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals(1, charSequenceArray0.length);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("ND5", "ND5", 83);
      assertNotNull(stringArray0);
      assertEquals(2, stringArray0.length);
      
      String string0 = StringUtils.removeIgnoreCase((String) null, "M'2o/I");
      assertNull(string0);
      
      long[] longArray0 = new long[5];
      longArray0[0] = (long) 83;
      longArray0[1] = (long) '5';
      longArray0[2] = (long) '5';
      longArray0[4] = (long) '5';
      String string1 = StringUtils.join(longArray0, '5');
      assertArrayEquals(new long[] {83L, 53L, 53L, 0L, 53L}, longArray0);
      assertEquals("8355355350553", string1);
      assertNotNull(string1);
      assertEquals(5, longArray0.length);
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertFalse(linkedList0.contains("M'2o/I"));
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      String string2 = StringUtils.substring((String) null, 1138);
      assertNull(string2);
      
      String string3 = StringUtils.abbreviate("{e8", "oD\"tmRH5r7+QV<;<# ", 119, 4054);
      assertEquals("{e8", string3);
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      
      int int0 = StringUtils.length("8355355350553");
      assertEquals(13, int0);
      
      String string4 = StringUtils.substringBefore((String) null, "(-+G:UDFUFtWYd");
      assertNull(string4);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Vector<CharBuffer> vector0 = new Vector<CharBuffer>();
      assertTrue(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertNotNull(vector0);
      
      String string0 = StringUtils.replaceChars("org.apache.commons.lang3.ObjectUtils$Null", 'g', 'g');
      assertEquals("org.apache.commons.lang3.ObjectUtils$Null", string0);
      assertNotNull(string0);
      
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "org.apache.commons.lang3.ObjectUtils$Null");
      assertEquals("org.apache.commons.lang3.ObjectUtils$Null", charBuffer0.toString());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.hasArray());
      assertFalse(charBuffer0.isDirect());
      assertEquals(41, charBuffer0.remaining());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(41, charBuffer0.limit());
      assertTrue(charBuffer0.isReadOnly());
      assertEquals(41, charBuffer0.capacity());
      assertEquals(41, charBuffer0.length());
      assertNotNull(charBuffer0);
      
      String string1 = StringUtils.abbreviate("org.apache.commons.lang3.ObjectUtils$Null", "|N", 96);
      assertEquals("org.apache.commons.lang3.ObjectUtils$Null", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.removeIgnoreCase("p", "Y)3n1`2_97u G#5v_Y)3n1`2_97u G#5v_Y)3n1`2_97u G#5v_Y)3n1`2_97u G#5v__");
      assertEquals("p", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      boolean boolean0 = StringUtils.isAlphanumeric("org.apache.commons.lang3.ObjectUtils$Null");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isWhitespace("org.apache.commons.lang3.ObjectUtils$Null");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String string3 = StringUtils.replaceEachRepeatedly("Object varargs must not be null", (String[]) null, (String[]) null);
      assertEquals("Object varargs must not be null", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      
      String string4 = StringUtils.substringBefore("tgPBf^tY&s(j", "Arguments cannot both be nullND5");
      assertEquals("tgPBf^tY&s(j", string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertNotNull(string4);
      
      int int0 = StringUtils.lastIndexOfAny("p", (CharSequence[]) null);
      assertEquals((-1), int0);
      
      boolean boolean2 = StringUtils.equalsAny("tgPBf^tY&s(j", (CharSequence[]) null);
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      String string0 = StringUtils.removeAll(" ", " ");
      assertEquals("", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.containsAny((CharSequence) "", (char[]) null);
      assertFalse(boolean0);
      
      String string1 = StringUtils.deleteWhitespace("\r");
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.abbreviate("u", " ", 31, 71);
      assertEquals("u", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      CharSequence charSequence0 = StringUtils.defaultIfEmpty((CharSequence) "u", (CharSequence) " ");
      assertEquals("u", charSequence0);
      assertFalse(charSequence0.equals((Object)string0));
      assertFalse(charSequence0.equals((Object)string1));
      assertTrue(charSequence0.equals((Object)string2));
      assertNotNull(charSequence0);
      
      boolean boolean1 = StringUtils.isNumericSpace("u");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      float[] floatArray0 = new float[0];
      String string3 = StringUtils.join(floatArray0, '*', 8192, 31);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals("", string3);
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)charSequence0));
      assertNotNull(string3);
      assertEquals(0, floatArray0.length);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "", (CharSequence) "", 31);
      assertEquals(0, int0);
      
      int int1 = StringUtils.indexOfAny((CharSequence) " ", (char[]) null);
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      
      String string4 = StringUtils.getCommonPrefix((String[]) null);
      assertEquals("", string4);
      assertFalse(string4.equals((Object)charSequence0));
      assertTrue(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertNotNull(string4);
      
      int int2 = StringUtils.lastIndexOfAny("", (CharSequence[]) null);
      assertEquals((-1), int2);
      assertFalse(int2 == int0);
      assertTrue(int2 == int1);
      
      String string5 = StringUtils.replaceEachRepeatedly("", (String[]) null, (String[]) null);
      assertEquals("", string5);
      assertFalse(string5.equals((Object)charSequence0));
      assertTrue(string5.equals((Object)string3));
      assertTrue(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertTrue(string5.equals((Object)string4));
      assertTrue(string5.equals((Object)string1));
      assertNotNull(string5);
      
      String string6 = StringUtils.trimToNull("");
      assertNull(string6);
      
      boolean boolean2 = StringUtils.isAllLowerCase("Locale must not be null");
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      String string7 = StringUtils.leftPad("Locale must not be null", 38);
      assertEquals("               Locale must not be null", string7);
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)charSequence0));
      assertNotNull(string7);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      String string0 = StringUtils.right("diF3Wv9sN!", 8);
      assertEquals("F3Wv9sN!", string0);
      assertNotNull(string0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      String string1 = StringUtils.replaceEachRepeatedly("\n\n", (String[]) null, (String[]) null);
      assertEquals("\n\n", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[7];
      charSequenceArray0[0] = (CharSequence) "diF3Wv9sN!";
      charSequenceArray0[1] = (CharSequence) "\n\n";
      charSequenceArray0[2] = (CharSequence) "\n\n";
      String string2 = StringUtils.deleteWhitespace("...");
      assertEquals("...", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      boolean boolean0 = StringUtils.isAllUpperCase("\n\n");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isNotEmpty(" has no clone method");
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      char[] charArray0 = new char[2];
      charArray0[0] = '$';
      charArray0[1] = '$';
      boolean boolean2 = StringUtils.containsNone(charSequenceArray0[0], charArray0);
      assertArrayEquals(new char[] {'$', '$'}, charArray0);
      assertTrue(boolean2);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertEquals(7, charSequenceArray0.length);
      assertEquals(2, charArray0.length);
      
      boolean boolean3 = StringUtils.isAlphanumeric(charSequenceArray0[1]);
      assertFalse(boolean3);
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertEquals(7, charSequenceArray0.length);
      
      boolean boolean4 = StringUtils.isNoneBlank((CharSequence[]) null);
      assertTrue(boolean4);
      assertTrue(boolean4 == boolean2);
      assertTrue(boolean4 == boolean1);
      assertFalse(boolean4 == boolean3);
      assertFalse(boolean4 == boolean0);
      
      String string3 = StringUtils.substringBetween("...", "\n\n", "\rArray element ");
      assertNull(string3);
      
      int[] intArray0 = StringUtils.toCodePoints(charSequenceArray0[2]);
      assertArrayEquals(new int[] {10, 10}, intArray0);
      assertNotNull(intArray0);
      assertEquals(2, intArray0.length);
      assertEquals(7, charSequenceArray0.length);
      
      String string4 = StringUtils.center("\n\n", 15, 'O');
      assertEquals("OOOOOO\n\nOOOOOOO", string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertNotNull(string4);
      
      String string5 = StringUtils.chomp("org.apache.commons.lang3.StringUtils");
      assertEquals("org.apache.commons.lang3.StringUtils", string5);
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertNotNull(string5);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("...", "Minimum abbreviation width with offset is %d");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      boolean boolean5 = StringUtils.isAlphanumericSpace((CharSequence) null);
      assertFalse(boolean5);
      assertTrue(boolean5 == boolean3);
      assertFalse(boolean5 == boolean4);
      assertFalse(boolean5 == boolean1);
      assertFalse(boolean5 == boolean2);
      assertTrue(boolean5 == boolean0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      boolean boolean0 = StringUtils.isEmpty("l(c\"B4`q5AeDf\"5{");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.containsOnly((CharSequence) "l(c\"B4`q5AeDf\"5{", (char[]) null);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String string0 = StringUtils.rightPad("l(c\"B4`q5AeDf\"5{", 2);
      assertEquals("l(c\"B4`q5AeDf\"5{", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.substringAfterLast("l(c\"B4`q5AeDf\"5{", 2);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      int int0 = StringUtils.countMatches((CharSequence) "l(c\"B4`q5AeDf\"5{", (CharSequence) null);
      assertEquals(0, int0);
      
      boolean boolean2 = StringUtils.equals((CharSequence) null, (CharSequence) "l(c\"B4`q5AeDf\"5{");
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      String string2 = StringUtils.abbreviateMiddle("Threshold must not be negative", "", 0);
      assertEquals("Threshold must not be negative", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      int int0 = StringUtils.compare("The character ", "Strings must not be null", false);
      assertEquals(1, int0);
      
      String string0 = StringUtils.chop("k4H^icl7/-KDOtWq{2u");
      assertEquals("k4H^icl7/-KDOtWq{2", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.replaceChars("org.apache.commons.lang3.CharSequenceUtils", 'i', '9');
      assertEquals("org.apache.commons.lang3.CharSequenceUt9ls", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      int[] intArray0 = new int[5];
      intArray0[0] = 1;
      intArray0[1] = 1;
      intArray0[2] = (int) '9';
      intArray0[3] = (int) 'E';
      intArray0[3] = 1;
      String string2 = StringUtils.join(intArray0, '9', 0, 1);
      assertArrayEquals(new int[] {1, 1, 57, 1, 0}, intArray0);
      assertEquals("1", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals(5, intArray0.length);
      
      String string3 = StringUtils.rotate("Xf'omJF,xW/ 8i:}y", 1829);
      assertEquals(":}yXf'omJF,xW/ 8i", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      
      boolean boolean0 = StringUtils.isAlpha("org.apache.commons.lang3.CharSequenceUtils");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      String string0 = StringUtils.stripToEmpty("G^7|+zFpb:oK?5");
      assertEquals("G^7|+zFpb:oK?5", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.abbreviate("Minimum abbreviation width with offset is %d", "G^7|+zFpb:oK?5", 4, 52);
      assertEquals("Minimum abbreviation width with offset is %d", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.substringAfterLast("G^7|+zFpb:oK?5", 52);
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      int int0 = StringUtils.countMatches((CharSequence) "Minimum abbreviation width with offset is %d", (CharSequence) "Minimum abbreviation width with offset is %d");
      assertEquals(1, int0);
      
      boolean boolean0 = StringUtils.equals((CharSequence) "Minimum abbreviation width with offset is %d", (CharSequence) "G^7|+zFpb:oK?5");
      assertFalse(boolean0);
      
      String string3 = StringUtils.wrap("N!'P^h'IcRbY  L", '[');
      assertEquals("[N!'P^h'IcRbY  L[", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("", "G^7|+zFpb:oK?5", 1);
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      
      String string4 = StringUtils.substringAfter("N!'P^h'IcRbY  L", 24);
      assertEquals("", string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertNotNull(string4);
      
      String string5 = StringUtils.prependIfMissingIgnoreCase("Aborting to protect against StackOverflowError - output of one loop is the input of anotherPB$Ps@D6Z-{(7Pq<", "", stringArray0);
      assertEquals("Aborting to protect against StackOverflowError - output of one loop is the input of anotherPB$Ps@D6Z-{(7Pq<", string5);
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertNotNull(string5);
      assertEquals(0, stringArray0.length);
      
      char[] charArray0 = new char[6];
      charArray0[0] = '[';
      charArray0[1] = 'V';
      charArray0[2] = '[';
      charArray0[3] = '[';
      charArray0[4] = '[';
      charArray0[5] = '[';
      boolean boolean1 = StringUtils.containsNone((CharSequence) "Aborting to protect against StackOverflowError - output of one loop is the input of anotherPB$Ps@D6Z-{(7Pq<", charArray0);
      assertArrayEquals(new char[] {'[', 'V', '[', '[', '[', '['}, charArray0);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      assertEquals(6, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      String[] stringArray0 = new String[13];
      stringArray0[1] = "";
      String string0 = StringUtils.firstNonBlank(stringArray0);
      assertNull(string0);
      assertEquals(13, stringArray0.length);
      
      boolean boolean0 = StringUtils.startsWithAny("", stringArray0);
      assertFalse(boolean0);
      assertEquals(13, stringArray0.length);
      
      String string1 = StringUtils.defaultString((String) null);
      assertEquals("", string1);
      assertNotNull(string1);
      
      int[] intArray0 = StringUtils.toCodePoints("");
      assertArrayEquals(new int[] {}, intArray0);
      assertNotNull(intArray0);
      assertEquals(0, intArray0.length);
      
      String string2 = StringUtils.wrapIfMissing("", "");
      assertEquals("", string2);
      assertTrue(string2.equals((Object)string1));
      assertNotNull(string2);
      
      int[] intArray1 = StringUtils.toCodePoints("ILg");
      assertArrayEquals(new int[] {73, 76, 103}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(3, intArray1.length);
      
      boolean boolean1 = StringUtils.containsWhitespace("");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Vector<CharBuffer> vector0 = new Vector<CharBuffer>();
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertNotNull(vector0);
      
      String string0 = StringUtils.replaceChars("org.apache.commons.lang3.ObjectUtils$Null", 'g', 'g');
      assertEquals("org.apache.commons.lang3.ObjectUtils$Null", string0);
      assertNotNull(string0);
      
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "org.apache.commons.lang3.ObjectUtils$Null");
      assertEquals(0, charBuffer0.position());
      assertTrue(charBuffer0.isReadOnly());
      assertEquals(41, charBuffer0.limit());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(41, charBuffer0.capacity());
      assertEquals(41, charBuffer0.length());
      assertEquals("org.apache.commons.lang3.ObjectUtils$Null", charBuffer0.toString());
      assertFalse(charBuffer0.hasArray());
      assertFalse(charBuffer0.isDirect());
      assertEquals(41, charBuffer0.remaining());
      assertNotNull(charBuffer0);
      
      String string1 = StringUtils.abbreviate("org.apache.commons.lang3.ObjectUtils$Null", "|N", 96);
      assertEquals("org.apache.commons.lang3.ObjectUtils$Null", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.removeIgnoreCase("p", "Y)3n1`2_97u G#5v_Y)3n1`2_97u G#5v_Y)3n1`2_97u G#5v_Y)3n1`2_97u G#5v__");
      assertEquals("p", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      boolean boolean0 = StringUtils.isAlphanumeric("org.apache.commons.lang3.ObjectUtils$Null");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isWhitespace("org.apache.commons.lang3.ObjectUtils$Null");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String[] stringArray0 = StringUtils.split("org.apache.commons.lang3.ObjectUtils$Null", "Y)3n1`2_97u G#5v_Y)3n1`2_97u G#5v_Y)3n1`2_97u G#5v_Y)3n1`2_97u G#5v__", (-1051));
      assertNotNull(stringArray0);
      assertEquals(5, stringArray0.length);
      
      String string3 = StringUtils.stripEnd("org.apache.commons.lang3.ObjectUtils$Null", "p");
      assertEquals("org.apache.commons.lang3.ObjectUtils$Null", string3);
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string1));
      assertNotNull(string3);
      
      int int0 = StringUtils.indexOfDifference((CharSequence[]) stringArray0);
      assertEquals(0, int0);
      assertEquals(5, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      String string0 = StringUtils.trim((String) null);
      assertNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      boolean boolean0 = StringUtils.equalsAnyIgnoreCase((CharSequence) null, charSequenceArray0);
      assertFalse(boolean0);
      assertEquals(0, charSequenceArray0.length);
      
      float[] floatArray0 = new float[9];
      floatArray0[0] = (-2214.6025F);
      floatArray0[1] = (-2662.0F);
      floatArray0[2] = 605.3F;
      floatArray0[3] = 1314.0422F;
      floatArray0[4] = 1.0F;
      floatArray0[5] = 1.0F;
      floatArray0[6] = 2613.8933F;
      floatArray0[7] = 1417.6676F;
      floatArray0[8] = 1.0F;
      // Undeclared exception!
      try { 
        StringUtils.join(floatArray0, '>', 393, 4233);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 393
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      String string0 = StringUtils.removeStart("*{SR\"`K0", "}5n.$69QS )=/tT|Krl");
      assertEquals("*{SR\"`K0", string0);
      assertNotNull(string0);
      
      int[] intArray0 = StringUtils.toCodePoints("Array element ");
      assertNotNull(intArray0);
      assertEquals(14, intArray0.length);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("`r\"I<58oyHO@en", "Array element ");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      boolean boolean0 = StringUtils.containsWhitespace("}5n.$69QS )=/tT|Krl");
      assertTrue(boolean0);
      
      String string1 = StringUtils.substringAfter("jTe-:_{HhB4", "*{SR\"`K0");
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.chomp((String) null);
      assertNull(string2);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      boolean boolean0 = StringUtils.isNumeric("F1~Sp}mS5");
      assertFalse(boolean0);
      
      String[] stringArray0 = new String[5];
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "";
      String[] stringArray1 = StringUtils.stripAll(stringArray0, "AM[om");
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(5, stringArray0.length);
      assertEquals(5, stringArray1.length);
      
      String string0 = StringUtils.stripStart("F1~Sp}mS5", stringArray0[1]);
      assertEquals("F1~Sp}mS5", string0);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertNotNull(string0);
      assertNotSame(stringArray0, stringArray1);
      assertEquals(5, stringArray0.length);
      
      StringUtils.rightPad("", 947, 'r');
      StringUtils.startsWithAny("", stringArray1);
      StringUtils.isNotEmpty("");
      char[] charArray0 = new char[3];
      charArray0[0] = ';';
      charArray0[1] = 'r';
      charArray0[2] = 'M';
      StringUtils.containsAny((CharSequence) "rrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrr", charArray0);
      StringUtils.uncapitalize("^W1Txp^lQ8#3:Ll0RA{");
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      String string0 = StringUtils.CR;
      assertEquals("\r", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isNotBlank("\r");
      assertFalse(boolean0);
      
      Charset charset0 = Charset.defaultCharset();
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.canEncode());
      assertNotNull(charset0);
      
      String string1 = StringUtils.substringBeforeLast("-Z!#0INiy1>W", "");
      assertEquals("-Z!#0INiy1>W", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.substringBefore("\r", (-1481));
      assertEquals("\r", string2);
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertNotNull(string2);
      
      String string3 = StringUtils.normalizeSpace("org.apache.commons.lang3.StringUtils");
      assertEquals("org.apache.commons.lang3.StringUtils", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      
      String string4 = StringUtils.wrap("\r", ", '");
      assertEquals(", '\r, '", string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertNotNull(string4);
      
      Locale locale0 = Locale.CANADA_FRENCH;
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("CA", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr_CA", locale0.toString());
      assertNotNull(locale0);
      
      String string5 = locale0.getDisplayScript();
      assertEquals("", string5);
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("CA", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr_CA", locale0.toString());
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertNotNull(string5);
      
      boolean boolean1 = locale0.hasExtensions();
      assertFalse(boolean1);
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("CA", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr_CA", locale0.toString());
      assertTrue(boolean1 == boolean0);
      
      int int0 = StringUtils.getFuzzyDistance(", '\r, '", "", locale0);
      assertEquals(0, int0);
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("CA", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr_CA", locale0.toString());
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      // Undeclared exception!
      try { 
        StringUtils.join(booleanArray0, 'b', 947, 1260);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 947
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      String[] stringArray0 = new String[13];
      stringArray0[1] = "";
      String string0 = StringUtils.firstNonBlank(stringArray0);
      assertNull(string0);
      assertEquals(13, stringArray0.length);
      
      boolean boolean0 = StringUtils.startsWithAny("", stringArray0);
      assertFalse(boolean0);
      assertEquals(13, stringArray0.length);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "", (CharSequence) "");
      assertEquals(0, int0);
      
      String string1 = StringUtils.removeStartIgnoreCase((String) null, "{}");
      assertNull(string1);
      
      String string2 = StringUtils.substringAfterLast("co$mparator", "{}");
      assertEquals("", string2);
      assertNotNull(string2);
      
      boolean boolean1 = StringUtils.startsWithIgnoreCase((CharSequence) null, "");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String string3 = StringUtils.join((Object[]) stringArray0);
      assertEquals("", string3);
      assertTrue(string3.equals((Object)string2));
      assertNotNull(string3);
      assertEquals(13, stringArray0.length);
      
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      String string4 = StringUtils.getIfEmpty("ILg", supplier0);
      assertEquals("ILg", string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertNotNull(string4);
      
      int int1 = StringUtils.indexOf((CharSequence) "2';a", 0);
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      
      boolean boolean2 = StringUtils.isMixedCase("");
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      String[] stringArray1 = StringUtils.substringsBetween("", (String) null, "Comparator should not be null.");
      assertNull(stringArray1);
      
      // Undeclared exception!
      try { 
        StringUtils.truncate("", (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // maxWith cannot be negative
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = '2';
      charArray0[1] = 's';
      charArray0[2] = '2';
      String[] stringArray0 = StringUtils.splitByCharacterType("sm]@m4P(6<");
      assertNotNull(stringArray0);
      assertEquals(9, stringArray0.length);
      
      String string0 = StringUtils.wrapIfMissing("sm]@m4P(6<", '1');
      assertEquals("1sm]@m4P(6<1", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.endsWithAny("1sm]@m4P(6<1", stringArray0);
      assertFalse(boolean0);
      assertEquals(9, stringArray0.length);
      
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "sm]@m4P(6<", charArray0);
      assertArrayEquals(new char[] {'2', 's', '2'}, charArray0);
      assertEquals(1, int0);
      assertEquals(3, charArray0.length);
      
      String[] stringArray1 = StringUtils.splitPreserveAllTokens("1sm]@m4P(6<1", 's');
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(2, stringArray1.length);
      
      boolean boolean1 = StringUtils.containsAny((CharSequence) "sm]@m4P(6<", charArray0);
      assertArrayEquals(new char[] {'2', 's', '2'}, charArray0);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      assertEquals(3, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      String string0 = "U0Djk`7:WOLdCtho_4";
      String string1 = StringUtils.upperCase("U0Djk`7:WOLdCtho_4");
      assertEquals("U0DJK`7:WOLDCTHO_4", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.wrapIfMissing("U0DJK`7:WOLDCTHO_4", '$');
      assertEquals("$U0DJK`7:WOLDCTHO_4$", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "$U0DJK`7:WOLDCTHO_4$", (CharSequence) "$U0DJK`7:WOLDCTHO_4$", 3);
      assertEquals(0, int0);
      
      String string3 = StringUtils.trimToEmpty("U0DJK`7:WOLDCTHO_4");
      assertEquals("U0DJK`7:WOLDCTHO_4", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string1));
      assertNotNull(string3);
      
      String string4 = "L!mNYV=#y>?nr";
      String string5 = StringUtils.unwrap("U0Djk`7:WOLdCtho_4", "L!mNYV=#y>?nr");
      assertEquals("U0Djk`7:WOLdCtho_4", string5);
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertTrue(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertNotNull(string5);
      
      String string6 = StringUtils.abbreviate((String) null, 11, 930);
      assertNull(string6);
      
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      String string7 = "/:";
      Locale locale0 = Locale.ENGLISH;
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertNotNull(locale0);
      
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Stack<Locale.LanguageRange> stack0 = new Stack<Locale.LanguageRange>();
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertNotNull(stack0);
      
      Locale.LanguageRange locale_LanguageRange0 = null;
      try {
        locale_LanguageRange0 = new Locale.LanguageRange("=-/ewql_");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // range==-/ewql_
         //
         verifyException("java.util.Locale$LanguageRange", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      String string0 = StringUtils.strip("Index: ");
      assertEquals("Index:", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.contains((CharSequence) "Index:", 3);
      assertFalse(boolean0);
      
      String[] stringArray0 = new String[5];
      stringArray0[0] = "Index: ";
      stringArray0[1] = "Index: ";
      stringArray0[3] = "Index: ";
      stringArray0[4] = "Index: ";
      String[] stringArray1 = StringUtils.stripAll(stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(5, stringArray0.length);
      assertEquals(5, stringArray1.length);
      
      boolean boolean1 = StringUtils.endsWithAny("Index: ", stringArray1);
      assertFalse(boolean1);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertTrue(boolean1 == boolean0);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(5, stringArray0.length);
      assertEquals(5, stringArray1.length);
      
      char[] charArray0 = new char[1];
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "Index: ", charArray0);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertEquals(0, int0);
      assertEquals(1, charArray0.length);
      
      String string1 = StringUtils.replaceAll("E", "v_Q>/,}", stringArray0[2]);
      assertEquals("E", string1);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertNotSame(stringArray0, stringArray1);
      assertEquals(5, stringArray0.length);
      
      boolean boolean2 = StringUtils.isMixedCase("Index: ");
      assertTrue(boolean2);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      
      boolean boolean3 = StringUtils.isAlphanumericSpace("E");
      assertTrue(boolean3);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3 == boolean1);
      
      String string2 = StringUtils.difference("Index: ", "Index:");
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      String string3 = StringUtils.removeEnd("v_Q>/,}", "Index:");
      assertEquals("v_Q>/,}", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      
      String string4 = StringUtils.reverseDelimited("Index: ", 'n');
      assertEquals("dex: nI", string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertNotNull(string4);
      
      int int1 = StringUtils.indexOf((CharSequence) "dex: nI", 0);
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      
      boolean boolean4 = StringUtils.isWhitespace(stringArray0[2]);
      assertFalse(boolean4);
      assertFalse(boolean4 == boolean2);
      assertFalse(boolean4 == boolean3);
      assertTrue(boolean4 == boolean0);
      assertTrue(boolean4 == boolean1);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertNotSame(stringArray0, stringArray1);
      assertEquals(5, stringArray0.length);
      
      String string5 = StringUtils.capitalize("yLbGrNYtngmg,!:C");
      assertEquals("YLbGrNYtngmg,!:C", string5);
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertNotNull(string5);
      
      PriorityQueue<Integer> priorityQueue0 = new PriorityQueue<Integer>();
      assertFalse(priorityQueue0.contains(int1));
      assertEquals(0, priorityQueue0.size());
      assertNotNull(priorityQueue0);
      
      int int2 = StringUtils.getLevenshteinDistance((CharSequence) "Index: ", (CharSequence) "Index:", 3);
      assertEquals(1, int2);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      
      String string6 = StringUtils.substringAfter("...", "org.apache.3ommons.lang3.LocaleUties");
      assertEquals("", string6);
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string3));
      assertTrue(string6.equals((Object)string2));
      assertNotNull(string6);
      
      String string7 = StringUtils.remove("Index: ", ')');
      assertEquals("Index: ", string7);
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string5));
      assertNotNull(string7);
      
      boolean boolean5 = StringUtils.isAllEmpty(stringArray1);
      assertFalse(boolean5);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertFalse(boolean5 == boolean2);
      assertFalse(boolean5 == boolean3);
      assertTrue(boolean5 == boolean4);
      assertTrue(boolean5 == boolean0);
      assertTrue(boolean5 == boolean1);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(5, stringArray0.length);
      assertEquals(5, stringArray1.length);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      String[] stringArray0 = new String[0];
      String[] stringArray1 = StringUtils.stripAll(stringArray0);
      assertNotNull(stringArray1);
      assertSame(stringArray0, stringArray1);
      assertSame(stringArray1, stringArray0);
      assertEquals(0, stringArray0.length);
      assertEquals(0, stringArray1.length);
      
      String string0 = StringUtils.substringBetween("~OFE:c.QsRA@m<h_nkv", "Object varargs must not be null", "~");
      assertNull(string0);
      
      String string1 = StringUtils.leftPad((String) null, 122, 'W');
      assertNull(string1);
      
      String string2 = StringUtils.joinWith("Array element V", stringArray1);
      assertEquals("", string2);
      assertNotNull(string2);
      assertSame(stringArray0, stringArray1);
      assertSame(stringArray1, stringArray0);
      assertEquals(0, stringArray0.length);
      assertEquals(0, stringArray1.length);
      
      String string3 = StringUtils.overlay("Minimum abbreviation width with offset is %d", "~OFE:c.QsRA@m<h_nkv", (-2040), (-2040));
      assertEquals("~OFE:c.QsRA@m<h_nkvMinimum abbreviation width with offset is %d", string3);
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      
      String string4 = StringUtils.replaceChars("o9*`", (String) null, (String) null);
      assertEquals("o9*`", string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertNotNull(string4);
      
      String[] stringArray2 = StringUtils.stripAll(stringArray0, "Strings must not be null");
      assertNotNull(stringArray2);
      assertSame(stringArray0, stringArray1);
      assertSame(stringArray0, stringArray2);
      assertSame(stringArray2, stringArray0);
      assertSame(stringArray2, stringArray1);
      assertEquals(0, stringArray0.length);
      assertEquals(0, stringArray2.length);
      
      String string5 = StringUtils.unwrap("Array element V", '\\');
      assertEquals("Array element V", string5);
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertNotNull(string5);
      
      boolean boolean0 = StringUtils.isAnyEmpty(stringArray0);
      assertFalse(boolean0);
      assertSame(stringArray0, stringArray1);
      assertSame(stringArray0, stringArray2);
      assertEquals(0, stringArray0.length);
      
      String string6 = StringUtils.replace("$", "64", "", 110);
      assertEquals("$", string6);
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string4));
      assertNotNull(string6);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "Object varargs must not be null", (CharSequence) "64", 110);
      assertEquals((-1), int0);
      
      String string7 = StringUtils.toRootUpperCase("AGB0<c,<;Se%p");
      assertEquals("AGB0<C,<;SE%P", string7);
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string3));
      assertNotNull(string7);
      
      String string8 = StringUtils.substring("}sr", (-2040), 23);
      assertEquals("}sr", string8);
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string4));
      assertNotNull(string8);
      
      String[] stringArray3 = StringUtils.splitPreserveAllTokens("Cannot clone Cloneable type ", '\\');
      assertFalse(stringArray3.equals((Object)stringArray2));
      assertFalse(stringArray3.equals((Object)stringArray0));
      assertFalse(stringArray3.equals((Object)stringArray1));
      assertNotNull(stringArray3);
      assertNotSame(stringArray3, stringArray2);
      assertNotSame(stringArray3, stringArray0);
      assertNotSame(stringArray3, stringArray1);
      assertEquals(1, stringArray3.length);
      
      String[] stringArray4 = StringUtils.substringsBetween("B0Tc,YKz/g.73m%L", "maxWith cannot be negativ:", "o9*`");
      assertNull(stringArray4);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      String string0 = StringUtils.deleteWhitespace("C1k-7_rbEbjE6eQS8]^");
      assertEquals("C1k-7_rbEbjE6eQS8]^", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isAllUpperCase("C1k-7_rbEbjE6eQS8]^");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isNotEmpty("C1k-7_rbEbjE6eQS8]^");
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      char[] charArray0 = new char[2];
      charArray0[0] = '`';
      charArray0[1] = '`';
      boolean boolean2 = StringUtils.containsOnly((CharSequence) "C1k-7_rbEbjE6eQS8]^", charArray0);
      assertArrayEquals(new char[] {'`', '`'}, charArray0);
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertEquals(2, charArray0.length);
      
      String string1 = StringUtils.substringBefore("[~B4m{N_y", "7a");
      assertEquals("[~B4m{N_y", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.replaceChars("[~B4m{N_y", 'Y', '<');
      assertEquals("[~B4m{N_y", string2);
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertNotNull(string2);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "7a", (CharSequence) "[~B4m{N_y");
      assertEquals(9, int0);
      
      boolean boolean3 = StringUtils.contains((CharSequence) "[~B4m{N_y", (CharSequence) "7a");
      assertFalse(boolean3);
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      
      int int1 = StringUtils.indexOfAnyBut((CharSequence) "7a", charArray0);
      assertArrayEquals(new char[] {'`', '`'}, charArray0);
      assertEquals(0, int1);
      assertFalse(int1 == int0);
      assertEquals(2, charArray0.length);
      
      String string3 = StringUtils.center((String) null, 4, '<');
      assertNull(string3);
      
      String string4 = StringUtils.center("C1k-7_rbEbjE6eQS8]^", (int) '`', (String) null);
      assertEquals("                                      C1k-7_rbEbjE6eQS8]^                                       ", string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertNotNull(string4);
      
      boolean boolean4 = StringUtils.isBlank("C1k-7_rbEbjE6eQS8]^");
      assertFalse(boolean4);
      assertTrue(boolean4 == boolean2);
      assertTrue(boolean4 == boolean3);
      assertFalse(boolean4 == boolean1);
      assertTrue(boolean4 == boolean0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      String string0 = StringUtils.replaceAll("Object varargs must not be null", (String) null, "A6");
      assertEquals("Object varargs must not be null", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.rightPad("Z\"", 2986, (String) null);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.rightPad("(u}Y]ZRo39m_k6", 10, "A6");
      assertEquals("(u}Y]ZRo39m_k6", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      String string3 = StringUtils.substringAfterLast("D~N-5~x;qL4'zXo}", 2986);
      assertEquals("", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      
      int int0 = StringUtils.countMatches((CharSequence) "(u}Y]ZRo39m_k6", (CharSequence) "Supplied value must be a valid byte literal between -32768 and 32767: [");
      assertEquals(0, int0);
      
      String string4 = StringUtils.center("Supplied value must be a valid byte literal between -32768 and 32767: [", 994, (String) null);
      assertEquals("                                                                                                                                                                                                                                                                                                                                                                                                                                                                             Supplied value must be a valid byte literal between -32768 and 32767: [                                                                                                                                                                                                                                                                                                                                                                                                                                                                              ", string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertNotNull(string4);
      
      boolean boolean0 = StringUtils.equals((CharSequence) "(u}Y]ZRo39m_k6", (CharSequence) "                                                                                                                                                                                                                                                                                                                                                                                                                                                                             Supplied value must be a valid byte literal between -32768 and 32767: [                                                                                                                                                                                                                                                                                                                                                                                                                                                                              ");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      String[] stringArray0 = StringUtils.substringsBetween("?!", "?!", "?!");
      assertNull(stringArray0);
      
      int int0 = StringUtils.compare("^Bm<?O+Fq", "", false);
      assertEquals(9, int0);
      
      String string0 = StringUtils.chop("^Bm<?O+Fq");
      assertEquals("^Bm<?O+F", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.replaceChars("}y)'.O76EU1eWbjj", 'l', 'E');
      assertEquals("}y)'.O76EU1eWbjj", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.getCommonPrefix((String[]) null);
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      int int1 = StringUtils.lastIndexOfAny("", (CharSequence[]) null);
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      
      String[] stringArray1 = new String[1];
      stringArray1[0] = "}y)'.O76EU1eWbjj";
      String[] stringArray2 = new String[6];
      assertFalse(stringArray2.equals((Object)stringArray1));
      
      stringArray2[0] = "?!";
      stringArray2[1] = "_TzDi O:?~@~";
      stringArray2[2] = "";
      stringArray2[3] = "}y)'.O76EU1eWbjj";
      stringArray2[4] = "";
      stringArray2[5] = "";
      // Undeclared exception!
      try { 
        StringUtils.replaceEachRepeatedly("Strings must not be null", stringArray1, stringArray2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Search and Replace array lengths don't match: 1 vs 6
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      boolean boolean0 = StringUtils.containsWhitespace("{}");
      assertFalse(boolean0);
      
      String string0 = StringUtils.substringBefore("ObjectUtils$Null", "ObjectUtils$Null");
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "ObjectUtils$Null", (CharSequence) "ObjectUtils$Null");
      assertEquals(0, int0);
      
      String string1 = StringUtils.substringBetween("c,b3mVjS;.X4", "I,`W");
      assertNull(string1);
      
      String string2 = StringUtils.defaultIfBlank("I,`W", "wKCJsWCz(sPm");
      assertEquals("I,`W", string2);
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = "";
      stringArray0[1] = null;
      stringArray0[2] = "";
      stringArray0[3] = "G>$.'F";
      String[] stringArray1 = new String[3];
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      stringArray1[0] = "c,b3mVjS;.X4";
      stringArray1[1] = "{}";
      stringArray1[2] = null;
      // Undeclared exception!
      try { 
        StringUtils.replaceEach("G>$.'F", stringArray0, stringArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Search and Replace array lengths don't match: 4 vs 3
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 64;
      Integer integer0 = new Integer(64);
      assertEquals(64, (int)integer0);
      assertNotNull(integer0);
      
      Integer[] integerArray0 = new Integer[8];
      integerArray0[0] = integer0;
      integerArray0[1] = integer0;
      integerArray0[2] = (Integer) 64;
      integerArray0[3] = (Integer) 64;
      integerArray0[4] = (Integer) 64;
      integerArray0[5] = (Integer) 64;
      integerArray0[6] = integer0;
      integerArray0[7] = integer0;
      String string0 = StringUtils.join(integerArray0);
      assertEquals("6464646464646464", string0);
      assertNotNull(string0);
      assertEquals(8, integerArray0.length);
      
      int int0 = StringUtils.compareIgnoreCase("offset cannot be negative", "offset cannot be negative", true);
      assertEquals(0, int0);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("object");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      String[] stringArray1 = new String[5];
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      stringArray1[0] = "6464646464646464";
      stringArray1[1] = "6464646464646464";
      stringArray1[2] = "offset cannot be negative";
      stringArray1[3] = "object";
      stringArray1[4] = "object";
      String[] stringArray2 = new String[7];
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertFalse(stringArray2.equals((Object)stringArray1));
      
      stringArray2[0] = "6464646464646464";
      stringArray2[1] = "#";
      stringArray2[2] = "object";
      stringArray2[3] = "object";
      stringArray2[4] = "6464646464646464";
      stringArray2[5] = "6464646464646464";
      stringArray2[6] = "Supplied value must be a valid byte literal between -128 and 127: [";
      // Undeclared exception!
      try { 
        StringUtils.replaceEachRepeatedly("object", stringArray1, stringArray2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Search and Replace array lengths don't match: 5 vs 7
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      int int0 = StringUtils.lastIndexOf((CharSequence) "{}", 229, (-1208));
      assertEquals((-1), int0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      charSequenceArray0[0] = (CharSequence) "{}";
      int int1 = StringUtils.indexOfAny((CharSequence) "{}", charSequenceArray0);
      assertEquals(0, int1);
      assertFalse(int1 == int0);
      assertEquals(3, charSequenceArray0.length);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("{}", " ", 124);
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      boolean boolean0 = StringUtils.isAlphanumeric(charSequenceArray0[0]);
      assertFalse(boolean0);
      assertEquals(3, charSequenceArray0.length);
      
      int int2 = StringUtils.indexOfAnyBut((CharSequence) " ", (char[]) null);
      assertEquals((-1), int2);
      assertTrue(int2 == int0);
      assertFalse(int2 == int1);
      
      String string0 = StringUtils.chomp("o9*`");
      assertEquals("o9*`", string0);
      assertNotNull(string0);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      String string1 = StringUtils.join(booleanArray0, 'q');
      assertTrue(Arrays.equals(new boolean[] {true, false, false}, booleanArray0));
      assertEquals("trueqfalseqfalse", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(3, booleanArray0.length);
      
      int int3 = StringUtils.lastOrdinalIndexOf("trueqfalseqfalse", charSequenceArray0[0], 1012);
      assertEquals((-1), int3);
      assertTrue(int3 == int2);
      assertFalse(int3 == int1);
      assertTrue(int3 == int0);
      assertEquals(3, charSequenceArray0.length);
      
      String string2 = StringUtils.substringBeforeLast("Arra", "maxWith cannot be negative");
      assertEquals("Arra", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      String string3 = StringUtils.substringAfterLast("Arra", (-1));
      assertEquals("", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      String string0 = StringUtils.substringAfter("offset cannot be negative", 64);
      assertEquals("", string0);
      assertNotNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[6];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "";
      charSequenceArray0[2] = (CharSequence) "Array element ";
      charSequenceArray0[3] = (CharSequence) "";
      charSequenceArray0[4] = (CharSequence) "offset cannot be negative";
      charSequenceArray0[5] = (CharSequence) "offset cannot be negative";
      int int0 = StringUtils.indexOfAny((CharSequence) "", charSequenceArray0);
      assertEquals(0, int0);
      assertEquals(6, charSequenceArray0.length);
      
      String[] stringArray0 = StringUtils.split("");
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      
      String[] stringArray1 = StringUtils.split(")(n1UwG53m38", " ");
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(1, stringArray1.length);
      
      int int1 = StringUtils.countMatches((CharSequence) "", charSequenceArray0[0]);
      assertEquals(0, int1);
      assertTrue(int1 == int0);
      assertEquals(6, charSequenceArray0.length);
      
      String string1 = StringUtils.left(" ", 0);
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.substringBetween("", "");
      assertEquals("", string2);
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertNotNull(string2);
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertFalse(linkedList0.contains("offset cannot be negative"));
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      String[] stringArray2 = StringUtils.substringsBetween("Ju{9bGB:0", "-Is@DJi!FuCt$b", "");
      assertNull(stringArray2);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      String string0 = StringUtils.join((Object[]) charSequenceArray0, 'n');
      assertEquals("", string0);
      assertNotNull(string0);
      assertEquals(1, charSequenceArray0.length);
      
      ArrayList<String> arrayList0 = new ArrayList<String>();
      assertFalse(arrayList0.contains(string0));
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      String string1 = StringUtils.join((List<?>) arrayList0, 'v', (int) 'n', (int) 'n');
      assertFalse(arrayList0.contains(string0));
      assertEquals("", string1);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)97;
      byteArray0[1] = (byte)14;
      byteArray0[2] = (byte)14;
      byteArray0[3] = (byte)95;
      byteArray0[4] = (byte)109;
      // Undeclared exception!
      try { 
        StringUtils.join(byteArray0, '8', (int) (byte)95, (int) 'n');
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 95
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      String string0 = StringUtils.deleteWhitespace(", Length: 0%!)");
      assertEquals(",Length:0%!)", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.substringBefore("Search and Replace aLray lengths don#g match: ", 115);
      assertEquals("Search and Replace aLray length", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "C'gV*{x)ucqxxxB6k";
      stringArray0[1] = "XrQF1Gf";
      String[] stringArray1 = StringUtils.stripAll(stringArray0, "XrQF1Gf");
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(2, stringArray0.length);
      assertEquals(2, stringArray1.length);
      
      String string2 = StringUtils.leftPad("F1~Sp}mS5 ", 115, "-ZxcRn3FJ:");
      assertEquals("-ZxcRn3FJ:-ZxcRn3FJ:-ZxcRn3FJ:-ZxcRn3FJ:-ZxcRn3FJ:-ZxcRn3FJ:-ZxcRn3FJ:-ZxcRn3FJ:-ZxcRn3FJ:-ZxcRn3FJ:-ZxcRF1~Sp}mS5 ", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "XrQF1Gf", "|X");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      String string0 = StringUtils.removeEnd("org.apache.commons.lang3.ObjectUtils$Null", "@J(?mTkP%H7vTZ-");
      assertEquals("org.apache.commons.lang3.ObjectUtils$Null", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = new String[0];
      String string1 = StringUtils.getCommonPrefix(stringArray0);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(0, stringArray0.length);
      
      String string2 = StringUtils.replaceOnceIgnoreCase("@J(?mTkP%H7vTZ-", "@J(?mTkP%H7vTZ-", " vs ");
      assertEquals(" vs ", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      String string3 = StringUtils.stripToNull(" vs ");
      assertEquals("vs", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      
      String string4 = StringUtils.replace("maxWith cannot be negatives", (String) null, "comparator", (-1868));
      assertEquals("maxWith cannot be negatives", string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertNotNull(string4);
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertFalse(linkedList0.contains("org.apache.commons.lang3.ObjectUtils$Null"));
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      boolean boolean0 = linkedList0.add((Object) "vs");
      assertFalse(linkedList0.contains("org.apache.commons.lang3.ObjectUtils$Null"));
      assertTrue(linkedList0.contains("vs"));
      assertTrue(boolean0);
      assertEquals(1, linkedList0.size());
      
      String string5 = StringUtils.removePattern("", "maxWith cannot be negatives");
      assertEquals("", string5);
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertTrue(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertNotNull(string5);
      
      String string6 = StringUtils.SPACE;
      assertEquals(" ", string6);
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string0));
      assertNotNull(string6);
      
      String string7 = StringUtils.stripAccents("si3YS?K,|w~o");
      assertEquals("si3YS?K,|w~o", string7);
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string4));
      assertNotNull(string7);
      
      String string8 = StringUtils.wrapIfMissing("", '-');
      assertEquals("", string8);
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string2));
      assertTrue(string8.equals((Object)string5));
      assertTrue(string8.equals((Object)string1));
      assertNotNull(string8);
      
      String string9 = StringUtils.strip("#");
      assertEquals("#", string9);
      assertFalse(string9.equals((Object)string7));
      assertFalse(string9.equals((Object)string4));
      assertFalse(string9.equals((Object)string1));
      assertFalse(string9.equals((Object)string8));
      assertFalse(string9.equals((Object)string3));
      assertFalse(string9.equals((Object)string5));
      assertFalse(string9.equals((Object)string6));
      assertFalse(string9.equals((Object)string2));
      assertFalse(string9.equals((Object)string0));
      assertNotNull(string9);
      
      boolean boolean1 = StringUtils.endsWithAny("maxWith cannot be negatives", stringArray0);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      assertEquals(0, stringArray0.length);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 's';
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "si3YS?K,|w~o", charArray0);
      assertArrayEquals(new char[] {'s'}, charArray0);
      assertEquals(1, int0);
      assertEquals(1, charArray0.length);
      
      String string10 = StringUtils.center("", 1551, 'K');
      assertFalse(string10.equals((Object)string4));
      assertFalse(string10.equals((Object)string9));
      assertFalse(string10.equals((Object)string2));
      assertFalse(string10.equals((Object)string3));
      assertFalse(string10.equals((Object)string0));
      assertFalse(string10.equals((Object)string5));
      assertFalse(string10.equals((Object)string6));
      assertFalse(string10.equals((Object)string8));
      assertFalse(string10.equals((Object)string1));
      assertFalse(string10.equals((Object)string7));
      assertNotNull(string10);
      
      String string11 = StringUtils.center("si3YS?K,|w~o", 50, "|FY6`&7,rq+gJeQ");
      assertEquals("|FY6`&7,rq+gJeQ|FY6si3YS?K,|w~o|FY6`&7,rq+gJeQ|FY6", string11);
      assertFalse(string11.equals((Object)string3));
      assertFalse(string11.equals((Object)string10));
      assertFalse(string11.equals((Object)string5));
      assertFalse(string11.equals((Object)string6));
      assertFalse(string11.equals((Object)string2));
      assertFalse(string11.equals((Object)string0));
      assertFalse(string11.equals((Object)string4));
      assertFalse(string11.equals((Object)string7));
      assertFalse(string11.equals((Object)string9));
      assertFalse(string11.equals((Object)string1));
      assertFalse(string11.equals((Object)string8));
      assertNotNull(string11);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      String string0 = StringUtils.defaultString("offset cannot be negative");
      assertEquals("offset cannot be negative", string0);
      assertNotNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      charSequenceArray0[0] = (CharSequence) "2";
      boolean boolean0 = StringUtils.isAllUpperCase((CharSequence) null);
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isNotEmpty("offset cannot be negative");
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      String string1 = StringUtils.removeStart((String) null, "2");
      assertNull(string1);
      
      String string2 = StringUtils.substringBeforeLast("offset cannot be negative", "?1s82}X");
      assertEquals("offset cannot be negative", string2);
      assertTrue(string2.equals((Object)string0));
      assertNotNull(string2);
      
      String string3 = StringUtils.rightPad("Cloneable type ", (-1896), 'M');
      assertEquals("Cloneable type ", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      
      String string4 = StringUtils.unwrap("?1s82}X", (String) null);
      assertEquals("?1s82}X", string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertNotNull(string4);
      
      int int0 = StringUtils.indexOfDifference(charSequenceArray0[0], (CharSequence) "Array element VbdG");
      assertEquals(0, int0);
      assertEquals(1, charSequenceArray0.length);
      
      String[] stringArray0 = StringUtils.splitByCharacterType("");
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      
      String[] stringArray1 = new String[3];
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      stringArray1[0] = "Cloneable type ";
      stringArray1[1] = "offset cannot be negative";
      stringArray1[2] = "offset cannot be negative";
      String string5 = StringUtils.replaceEachRepeatedly((String) null, stringArray0, stringArray1);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNull(string5);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(0, stringArray0.length);
      assertEquals(3, stringArray1.length);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "{}";
      stringArray0[1] = "";
      String string0 = StringUtils.mid("p.<*'&E{h", 0, (-299));
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.removeEnd("", "");
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      char[] charArray0 = new char[0];
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "", charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertTrue(boolean0);
      assertEquals(0, charArray0.length);
      
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      assertFalse(arrayList0.contains(""));
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      boolean boolean1 = arrayList0.add((Object) "p.<*'&E{h");
      assertTrue(arrayList0.contains("p.<*'&E{h"));
      assertFalse(arrayList0.contains(""));
      assertTrue(boolean1);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertTrue(boolean1 == boolean0);
      
      String string2 = StringUtils.join((List<?>) arrayList0, '%', 0, (-646));
      assertTrue(arrayList0.contains("p.<*'&E{h"));
      assertFalse(arrayList0.contains(""));
      assertEquals("", string2);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertTrue(string2.equals((Object)string1));
      assertNotNull(string2);
      
      int int0 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      String[] stringArray1 = StringUtils.splitByCharacterTypeCamelCase("");
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(0, stringArray1.length);
      
      String string3 = StringUtils.join((Iterable<?>) arrayList0, "");
      assertTrue(arrayList0.contains("p.<*'&E{h"));
      assertFalse(arrayList0.contains(""));
      assertEquals("p.<*'&E{h", string3);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      boolean boolean0 = StringUtils.isNumeric("F1~Sp}mS5");
      assertFalse(boolean0);
      
      String[] stringArray0 = new String[5];
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "";
      String[] stringArray1 = StringUtils.stripAll(stringArray0, "AM[om");
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(5, stringArray0.length);
      assertEquals(5, stringArray1.length);
      
      String string0 = StringUtils.join((Object[]) stringArray0);
      assertEquals("", string0);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertNotNull(string0);
      assertNotSame(stringArray0, stringArray1);
      assertEquals(5, stringArray0.length);
      
      int int0 = StringUtils.lastOrdinalIndexOf("F1~Sp}mS5", "", (-1834));
      assertEquals((-1), int0);
      
      String string1 = StringUtils.substringBetween("", "ND5");
      assertNull(string1);
      
      boolean boolean1 = StringUtils.containsWhitespace("ND5");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String string2 = StringUtils.replaceAll((String) null, "", "The type must not be null");
      assertNull(string2);
      
      String string3 = StringUtils.lowerCase("", (Locale) null);
      assertEquals("", string3);
      assertTrue(string3.equals((Object)string0));
      assertNotNull(string3);
      
      String string4 = StringUtils.chomp("");
      assertEquals("", string4);
      assertTrue(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string0));
      assertNotNull(string4);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      String string0 = StringUtils.prependIfMissingIgnoreCase("qD/.5Q]{&GZM2vH<]", "qD/.5Q]{&GZM2vH<]", charSequenceArray0);
      assertEquals("qD/.5Q]{&GZM2vH<]", string0);
      assertNotNull(string0);
      assertEquals(1, charSequenceArray0.length);
      
      String string1 = StringUtils.abbreviateMiddle("qD/.5Q]{&GZM2vH<]", "maxWith cannot be negative", (-972));
      assertEquals("qD/.5Q]{&GZM2vH<]", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.truncate("Array and element cannot both be null", 10);
      assertEquals("Array and ", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      Locale locale0 = Locale.UK;
      assertEquals("GB", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals("en_GB", locale0.toString());
      assertNotNull(locale0);
      
      int int0 = StringUtils.getFuzzyDistance("qD/.5Q]{&GZM2vH<]", "xewt", locale0);
      assertEquals(0, int0);
      assertEquals("GB", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals("en_GB", locale0.toString());
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      String string0 = StringUtils.repeat("\r", 5899);
      assertNotNull(string0);
      
      String[] stringArray0 = StringUtils.stripAll((String[]) null, "\r");
      assertNull(stringArray0);
      
      String string1 = StringUtils.uncapitalize("VhCYY");
      assertEquals("vhCYY", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.leftPad((String) null, 5899, 'm');
      assertNull(string2);
      
      String string3 = StringUtils.join((Object[]) null, 'm', 5899, 50);
      assertNull(string3);
      
      String string4 = StringUtils.rotate((String) null, 2479);
      assertNull(string4);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      String[] stringArray0 = new String[1];
      String string0 = StringUtils.getCommonPrefix(stringArray0);
      assertEquals("", string0);
      assertNotNull(string0);
      assertEquals(1, stringArray0.length);
      
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      int int0 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "", (char[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      String string0 = StringUtils.substringBeforeLast("", "Minimum abbreviation width is %d");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.uncapitalize(" ");
      assertEquals(" ", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) " ";
      objectArray0[1] = (Object) "";
      String string2 = StringUtils.join(objectArray0);
      assertEquals(" ", string2);
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals(2, objectArray0.length);
      
      int int0 = StringUtils.lastOrdinalIndexOf("Minimum abbreviation width is %d", "Minimum abbreviation width is %d", 0);
      assertEquals((-1), int0);
      
      String string3 = StringUtils.substringBetween((String) null, " ");
      assertNull(string3);
      
      boolean boolean0 = StringUtils.containsWhitespace("");
      assertFalse(boolean0);
      
      char[] charArray0 = new char[0];
      boolean boolean1 = StringUtils.containsOnly((CharSequence) null, charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals(0, charArray0.length);
      
      String string4 = StringUtils.substringBefore(" ", "gova@g^1OI");
      assertEquals(" ", string4);
      assertTrue(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertNotNull(string4);
      
      String string5 = StringUtils.replaceChars((String) null, '<', '4');
      assertNull(string5);
      
      // Undeclared exception!
      try { 
        StringUtils.getLevenshteinDistance((CharSequence) "", (CharSequence) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      String string0 = StringUtils.removeIgnoreCase("wO", ":u");
      assertEquals("wO", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isAlphanumeric(":u");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isWhitespace("gJ'2`^I>7>1=?w4kd#m");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String[] stringArray0 = StringUtils.split((String) null, "gJ'2`^I>7>1=?w4kd#m", 1278);
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      double double0 = StringUtils.getJaroWinklerDistance("l(c\"B4`q5AeDf\"5{", "{}");
      assertEquals(0.0, double0, 0.01);
      
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      assertEquals("TW", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertNotNull(locale0);
      
      Locale locale1 = (Locale)locale0.clone();
      assertEquals("TW", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zho", locale1.getISO3Language());
      assertEquals("TW", locale1.getCountry());
      assertEquals("TWN", locale1.getISO3Country());
      assertEquals("zh_TW", locale1.toString());
      assertEquals("zh", locale1.getLanguage());
      assertEquals("", locale1.getVariant());
      assertTrue(locale1.equals((Object)locale0));
      assertNotNull(locale1);
      assertNotSame(locale0, locale1);
      assertNotSame(locale1, locale0);
      
      String string0 = locale0.getDisplayScript();
      assertEquals("", string0);
      assertEquals("TW", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertTrue(locale0.equals((Object)locale1));
      assertNotNull(string0);
      assertNotSame(locale0, locale1);
      
      String[] stringArray0 = StringUtils.substringsBetween("", "uRD(<qr H?R=g", "l(c\"B4`q5AeDf\"5{");
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      Object object0 = new Object();
      assertNotNull(object0);
      
      String string0 = StringUtils.join(objectArray0, 'p');
      assertEquals("", string0);
      assertNotNull(string0);
      assertEquals(1, objectArray0.length);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "", (CharSequence) "");
      assertEquals(0, int0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      charSequenceArray0[0] = (CharSequence) "";
      boolean boolean0 = StringUtils.endsWithAny("", charSequenceArray0);
      assertFalse(boolean0);
      assertEquals(1, charSequenceArray0.length);
      
      int int1 = StringUtils.countMatches((CharSequence) "", 'p');
      assertEquals(0, int1);
      assertTrue(int1 == int0);
      
      int int2 = StringUtils.lastIndexOfIgnoreCase(charSequenceArray0[0], (CharSequence) "");
      assertEquals(0, int2);
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals(1, charSequenceArray0.length);
      
      String string1 = StringUtils.removeStartIgnoreCase("", "");
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.substringAfterLast("", "");
      assertEquals("", string2);
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertNotNull(string2);
      
      boolean boolean1 = StringUtils.startsWithIgnoreCase("", "");
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      String string3 = StringUtils.join(objectArray0);
      assertEquals("", string3);
      assertTrue(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string1));
      assertNotNull(string3);
      assertEquals(1, objectArray0.length);
      
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn("2';a").when(supplier0).get();
      String string4 = StringUtils.getIfEmpty("", supplier0);
      assertEquals("2';a", string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertNotNull(string4);
      
      int int3 = StringUtils.indexOf((CharSequence) "", 0);
      assertEquals((-1), int3);
      assertFalse(int3 == int2);
      assertFalse(int3 == int1);
      assertFalse(int3 == int0);
      
      boolean boolean2 = StringUtils.isMixedCase("");
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      
      String[] stringArray0 = StringUtils.substringsBetween("", "2';a", "pHw4*K");
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      
      String string5 = StringUtils.substringBefore("", 0);
      assertEquals("", string5);
      assertTrue(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertTrue(string5.equals((Object)string2));
      assertTrue(string5.equals((Object)string3));
      assertTrue(string5.equals((Object)string0));
      assertNotNull(string5);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      String string0 = StringUtils.unwrap("Search and Replace array lengths don't match: ", "#");
      assertEquals("Search and Replace array lengths don't match: ", string0);
      assertNotNull(string0);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-1.0);
      doubleArray0[1] = 1.0;
      doubleArray0[2] = 1.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (-1202.7774749406442);
      doubleArray0[5] = 1.0;
      String string1 = StringUtils.join(doubleArray0, 'K');
      assertArrayEquals(new double[] {(-1.0), 1.0, 1.0, 0.0, (-1202.7774749406442), 1.0}, doubleArray0, 0.01);
      assertEquals("-1.0K1.0K1.0K0.0K-1202.7774749406442K1.0", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(6, doubleArray0.length);
      
      String string2 = StringUtils.substring("-1.0K1.0K1.0K0.0K-1202.7774749406442K1.0", (-2482), (-565));
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      String string3 = StringUtils.center("", (-2230));
      assertEquals("", string3);
      assertFalse(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      
      String string4 = StringUtils.mid("", (-2482), (-593));
      assertEquals("", string4);
      assertFalse(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertNotNull(string4);
      
      boolean boolean0 = StringUtils.equals((CharSequence) "", (CharSequence) "");
      assertTrue(boolean0);
      
      String string5 = StringUtils.wrapIfMissing("Strings must not be null", 'K');
      assertEquals("KStrings must not be nullK", string5);
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertNotNull(string5);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      String string0 = StringUtils.truncate("", 32);
      assertEquals("", string0);
      assertNotNull(string0);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) 32;
      floatArray0[1] = (float) 32;
      floatArray0[2] = (float) ',';
      String string1 = StringUtils.join(floatArray0, ']');
      assertArrayEquals(new float[] {32.0F, 32.0F, 44.0F}, floatArray0, 0.01F);
      assertEquals("32.0]32.0]44.0", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(3, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("2@", "2@", (-5749));
      assertNotNull(stringArray0);
      assertEquals(3, stringArray0.length);
      
      int int0 = (-300);
      String string0 = StringUtils.rotate("x)r", (-300));
      assertEquals("x)r", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.equalsAny("org.apache.commons.lang3.ArrayUtils", stringArray0);
      assertFalse(boolean0);
      assertEquals(3, stringArray0.length);
      
      String string1 = StringUtils.removeStart("~J(dEx:", "x)r");
      assertEquals("~J(dEx:", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      // Undeclared exception!
      try { 
        StringUtils.truncate("org.apache.commons.lang3.ArrayUtils", (-3086));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // maxWith cannot be negative
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      String string0 = StringUtils.capitalize((String) null);
      assertNull(string0);
      
      int[] intArray0 = StringUtils.toCodePoints((CharSequence) null);
      assertNull(intArray0);
      
      String string1 = StringUtils.rotate("Q", (-449));
      assertEquals("Q", string1);
      assertNotNull(string1);
      
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier0).get();
      String string2 = StringUtils.getIfBlank((String) null, supplier0);
      assertNull(string2);
      
      String string3 = StringUtils.remove("h3cF0:J#IK>Rju7", 'm');
      assertEquals("h3cF0:J#IK>Rju7", string3);
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      String string0 = StringUtils.mid("F/@Lu2J", (-9), (-9));
      assertEquals("", string0);
      assertNotNull(string0);
      
      double double0 = StringUtils.getJaroWinklerDistance("\n", "");
      assertEquals(0.0, double0, 0.01);
      
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertNotNull(locale0);
      
      int int0 = StringUtils.compare("\n", "Array and element cannot both be null", true);
      assertEquals((-55), int0);
      
      String string1 = StringUtils.chop("N'G&;5q>m");
      assertEquals("N'G&;5q>", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.replaceChars("Aborting to protect against StackOverflowError - output of one loop is the input of another", 'Q', 'E');
      assertEquals("Aborting to protect against StackOverflowError - output of one loop is the input of another", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      int[] intArray0 = new int[7];
      intArray0[0] = (-814);
      intArray0[1] = (-55);
      intArray0[2] = (int) 'Q';
      intArray0[3] = (-55);
      intArray0[4] = (int) 'Q';
      intArray0[5] = (int) 'Q';
      intArray0[6] = (-9);
      // Undeclared exception!
      try { 
        StringUtils.join(intArray0, 'Q', (-814), 81);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -814
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      String string0 = StringUtils.unwrap("Search and Replace array lengths don't match: ", "#");
      assertEquals("Search and Replace array lengths don't match: ", string0);
      assertNotNull(string0);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-1.0);
      doubleArray0[1] = 1.0;
      doubleArray0[2] = 1.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (-1202.7774749406442);
      doubleArray0[5] = 1.0;
      String string1 = StringUtils.join(doubleArray0, 'K');
      assertArrayEquals(new double[] {(-1.0), 1.0, 1.0, 0.0, (-1202.7774749406442), 1.0}, doubleArray0, 0.01);
      assertEquals("-1.0K1.0K1.0K0.0K-1202.7774749406442K1.0", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(6, doubleArray0.length);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)762;
      String string2 = StringUtils.join(shortArray0, 'K');
      assertArrayEquals(new short[] {(short)762}, shortArray0);
      assertEquals("762", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals(1, shortArray0.length);
      
      int[] intArray0 = StringUtils.toCodePoints("Search and Replace array lengths don't match: ");
      assertNotNull(intArray0);
      assertEquals(46, intArray0.length);
      
      boolean boolean0 = StringUtils.isAllLowerCase("-1.0K1.0K1.0K0.0K-1202.7774749406442K1.0");
      assertFalse(boolean0);
      
      String string3 = StringUtils.trimToEmpty("#");
      assertEquals("#", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      
      int int0 = StringUtils.compareIgnoreCase("-1.0K1.0K1.0K0.0K-1202.7774749406442K1.0", "-1.0K1.0K1.0K0.0K-1202.7774749406442K1.0");
      assertEquals(0, int0);
      
      String string4 = StringUtils.trimToEmpty("wEGX3Ht%{^.]uI*");
      assertEquals("wEGX3Ht%{^.]uI*", string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertNotNull(string4);
      
      int int1 = StringUtils.lastIndexOf((CharSequence) "wEGX3Ht%{^.]uI*", 0);
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "";
      stringArray0[1] = "fa;DNS,I=**@aeP2wA";
      stringArray0[2] = "$Zg4vz'<*";
      stringArray0[3] = "Array and element cannot both be null";
      stringArray0[4] = "";
      stringArray0[5] = "";
      stringArray0[6] = "";
      stringArray0[7] = "";
      String string0 = StringUtils.getCommonPrefix(stringArray0);
      assertEquals("", string0);
      assertNotNull(string0);
      assertEquals(8, stringArray0.length);
      
      boolean boolean0 = StringUtils.isAlphaSpace("");
      assertTrue(boolean0);
      
      String string1 = StringUtils.defaultString("");
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn("").when(supplier0).get();
      String string2 = StringUtils.getIfBlank("", supplier0);
      assertEquals("", string2);
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertNotNull(string2);
      
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      charSequenceArray0[0] = (CharSequence) "";
      boolean boolean1 = StringUtils.isMixedCase(charSequenceArray0[0]);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      assertEquals(1, charSequenceArray0.length);
      
      String string3 = StringUtils.defaultIfEmpty("", "i5Bx]88.7ITWgP;D");
      assertEquals("i5Bx]88.7ITWgP;D", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      
      boolean boolean2 = StringUtils.endsWith("", "\r");
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      
      String string4 = StringUtils.defaultString("");
      assertEquals("", string4);
      assertTrue(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertNotNull(string4);
      
      int int0 = StringUtils.countMatches((CharSequence) "", (CharSequence) "\r");
      assertEquals(0, int0);
      
      String string5 = StringUtils.defaultString("");
      assertEquals("", string5);
      assertTrue(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertTrue(string5.equals((Object)string4));
      assertTrue(string5.equals((Object)string0));
      assertTrue(string5.equals((Object)string2));
      assertNotNull(string5);
      
      String string6 = StringUtils.substring("", 0);
      assertEquals("", string6);
      assertTrue(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string3));
      assertTrue(string6.equals((Object)string4));
      assertTrue(string6.equals((Object)string1));
      assertTrue(string6.equals((Object)string0));
      assertTrue(string6.equals((Object)string2));
      assertNotNull(string6);
      
      String string7 = StringUtils.appendIfMissing("Locale must not be null", "", stringArray0);
      assertEquals("Locale must not be null", string7);
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string6));
      assertNotNull(string7);
      assertEquals(8, stringArray0.length);
      
      String string8 = StringUtils.replace("", "^P%j9Z<?^4>)R3x", "$.oi^#6Yamk?F");
      assertEquals("", string8);
      assertTrue(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string3));
      assertTrue(string8.equals((Object)string5));
      assertTrue(string8.equals((Object)string4));
      assertTrue(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string7));
      assertTrue(string8.equals((Object)string6));
      assertTrue(string8.equals((Object)string0));
      assertNotNull(string8);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      String string0 = StringUtils.rightPad("#", 0, "F1~Sp}mS5");
      assertEquals("#", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.removeEnd("", " ");
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      int int0 = StringUtils.compareIgnoreCase("", "|?MUv!*2");
      assertEquals((-8), int0);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[0] = '`';
      charArray0[1] = '`';
      charArray0[2] = '`';
      charArray0[3] = '`';
      charArray0[4] = '`';
      charArray0[5] = '`';
      charArray0[6] = '`';
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "", charArray0);
      assertArrayEquals(new char[] {'`', '`', '`', '`', '`', '`', '`'}, charArray0);
      assertTrue(boolean0);
      assertEquals(7, charArray0.length);
      
      String string0 = StringUtils.substringBefore("(* /k\"C>&qCb?s", (String) null);
      assertEquals("(* /k\"C>&qCb?s", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.replaceChars("[~B4m{N_y", '`', '?');
      assertEquals("[~B4m{N_y", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "", (CharSequence) "[~B4m{N_y");
      assertEquals(9, int0);
      
      String string2 = StringUtils.unwrap("7a", '<');
      assertEquals("7a", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      String string3 = StringUtils.lowerCase("7a");
      assertEquals("7a", string3);
      assertTrue(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      String string0 = StringUtils.toRootUpperCase("");
      assertEquals("", string0);
      assertNotNull(string0);
      
      char[] charArray0 = new char[0];
      String string1 = StringUtils.join(charArray0, '[');
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(0, charArray0.length);
      
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      String string2 = StringUtils.getIfBlank("DR{D7RXKBu:0fKQ2", supplier0);
      assertEquals("DR{D7RXKBu:0fKQ2", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      String string3 = StringUtils.deleteWhitespace("org.apache.commons.lang3.ObjectUtils");
      assertEquals("org.apache.commons.lang3.ObjectUtils", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("");
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      Object object2 = new Object();
      assertFalse(object2.equals((Object)object1));
      assertFalse(object2.equals((Object)object0));
      assertNotNull(object2);
      
      String[] stringArray0 = new String[8];
      String string0 = StringUtils.removeStartIgnoreCase("...", "i.y#[;EHR");
      assertEquals("...", string0);
      assertNotNull(string0);
      
      double double0 = StringUtils.getJaroWinklerDistance("\n\n", "...");
      assertEquals(0.0, double0, 0.01);
      
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      assertEquals("TW", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertNotNull(locale0);
      
      Locale locale1 = Locale.forLanguageTag("od&s310)%'s");
      assertEquals("", locale1.getCountry());
      assertEquals("", locale1.getVariant());
      assertEquals("", locale1.getISO3Language());
      assertEquals("", locale1.getISO3Country());
      assertEquals("", locale1.toString());
      assertEquals("", locale1.getLanguage());
      assertFalse(locale1.equals((Object)locale0));
      assertNotNull(locale1);
      assertNotSame(locale1, locale0);
      
      Locale locale2 = Locale.forLanguageTag("@J(?mTkP%H7vTZ-");
      assertEquals("", locale2.getCountry());
      assertEquals("", locale2.getISO3Language());
      assertEquals("", locale2.getLanguage());
      assertEquals("", locale2.toString());
      assertEquals("", locale2.getISO3Country());
      assertEquals("", locale2.getVariant());
      assertFalse(locale2.equals((Object)locale0));
      assertNotNull(locale2);
      assertSame(locale2, locale1);
      assertNotSame(locale2, locale0);
      
      String string1 = StringUtils.lowerCase("_`0+[Nh;[z}/.7J7k", locale0);
      assertEquals("_`0+[nh;[z}/.7j7k", string1);
      assertEquals("TW", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertFalse(locale0.equals((Object)locale2));
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertNotSame(locale0, locale2);
      assertNotSame(locale0, locale1);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      String string0 = StringUtils.substringAfter("[D/.5Q]{sGZM2sH<] in an array of ", "P");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.trimToNull("");
      assertNull(string1);
      
      String string2 = StringUtils.substringAfterLast(" is not in the range '0' - '9'", 53);
      assertEquals("", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.reverseDelimited("~!%q{-kC<;JCc", '~');
      assertEquals("!%q{-kC<;JCc", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      
      String string4 = StringUtils.center((String) null, 53, '~');
      assertNull(string4);
      
      String string5 = StringUtils.center("[D/.5Q]{sGZM2sH<] in an array of ", 53, "~!%q{-kC<;JCc");
      assertEquals("~!%q{-kC<;[D/.5Q]{sGZM2sH<] in an array of ~!%q{-kC<;", string5);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertNotNull(string5);
      
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[0] = (CharSequence) "[D/.5Q]{sGZM2sH<] in an array of ";
      charSequenceArray0[1] = (CharSequence) "";
      int int0 = StringUtils.indexOfDifference(charSequenceArray0);
      assertEquals(0, int0);
      assertEquals(2, charSequenceArray0.length);
      
      String string6 = StringUtils.deleteWhitespace(" is not in the range '0' - '9'");
      assertEquals("isnotintherange'0'-'9'", string6);
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string2));
      assertNotNull(string6);
      
      int int1 = StringUtils.ordinalIndexOf("P", "isnotintherange'0'-'9'", 53);
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      
      String string7 = StringUtils.right("MXg;$o39[Ro;*O`Kg?", 0);
      assertEquals("", string7);
      assertTrue(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string6));
      assertTrue(string7.equals((Object)string2));
      assertNotNull(string7);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      String string0 = StringUtils.removePattern("Array element ", "");
      assertEquals("Array element ", string0);
      assertNotNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      charSequenceArray0[1] = (CharSequence) "";
      String string1 = StringUtils.SPACE;
      assertEquals(" ", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      charSequenceArray0[2] = (CharSequence) " ";
      charSequenceArray0[3] = (CharSequence) "Array element ";
      charSequenceArray0[4] = (CharSequence) "Array element ";
      String string2 = StringUtils.substringAfterLast("VbdGVbdG", "The Array must not be null");
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      String string3 = StringUtils.repeat("Search and Replace array lengths don't match: ", "l' ~Wohr[dG3\"ig.l' ~Wohr[dG3\"ig.", 4);
      assertEquals("Search and Replace array lengths don't match: l' ~Wohr[dG3\"ig.l' ~Wohr[dG3\"ig.Search and Replace array lengths don't match: l' ~Wohr[dG3\"ig.l' ~Wohr[dG3\"ig.Search and Replace array lengths don't match: l' ~Wohr[dG3\"ig.l' ~Wohr[dG3\"ig.Search and Replace array lengths don't match: ", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      
      String string4 = StringUtils.unwrap("jhb3ibO*jp*Hjhb3ibO*jp*H", 'H');
      assertEquals("jhb3ibO*jp*Hjhb3ibO*jp*H", string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertNotNull(string4);
      
      boolean boolean0 = StringUtils.contains((CharSequence) "Array element ", (CharSequence) "VbdGVbdG");
      assertFalse(boolean0);
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'H';
      charArray0[1] = 'H';
      charArray0[2] = 'H';
      charArray0[3] = 'H';
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "Search and Replace array lengths don't match: ", charArray0);
      assertArrayEquals(new char[] {'H', 'H', 'H', 'H'}, charArray0);
      assertEquals(0, int0);
      assertEquals(4, charArray0.length);
      
      String string5 = StringUtils.center((String) null, (-1), 'H');
      assertNull(string5);
      
      String string6 = StringUtils.center("#)z,KZSFQ-8?m8TB'y", 108, "org.apache.commons.lang3.ObjectUtils$Null@J(?mTkP%H7vTZ-");
      assertEquals("org.apache.commons.lang3.ObjectUtils$Null@J(#)z,KZSFQ-8?m8TB'yorg.apache.commons.lang3.ObjectUtils$Null@J(?", string6);
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string1));
      assertNotNull(string6);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      String string0 = StringUtils.join((Object[]) charSequenceArray0, 'n');
      assertEquals("", string0);
      assertNotNull(string0);
      assertEquals(1, charSequenceArray0.length);
      
      String string1 = StringUtils.removePattern((String) null, "t>[?5/K");
      assertNull(string1);
      
      String string2 = StringUtils.SPACE;
      assertEquals(" ", string2);
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      String string3 = StringUtils.stripAccents(",?j;)2C|:EN5FkD]]");
      assertEquals(",?j;)2C|:EN5FkD]]", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      
      String string4 = StringUtils.wrapIfMissing("|FY6`&7,rq+gJeQ", 's');
      assertEquals("s|FY6`&7,rq+gJeQs", string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertNotNull(string4);
      
      String string5 = StringUtils.strip("|FY6`&7,rq+gJeQ");
      assertEquals("|FY6`&7,rq+gJeQ", string5);
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertNotNull(string5);
      
      boolean boolean0 = StringUtils.endsWithAny("#", charSequenceArray0);
      assertFalse(boolean0);
      assertEquals(1, charSequenceArray0.length);
      
      char[] charArray0 = new char[7];
      charArray0[0] = 'n';
      charArray0[1] = 'n';
      charArray0[2] = 'n';
      charArray0[3] = '1';
      charArray0[4] = 'n';
      charArray0[5] = 'n';
      charArray0[6] = 's';
      int int0 = StringUtils.indexOfAnyBut((CharSequence) ",?j;)2C|:EN5FkD]]", charArray0);
      assertArrayEquals(new char[] {'n', 'n', 'n', '1', 'n', 'n', 's'}, charArray0);
      assertEquals(0, int0);
      assertEquals(7, charArray0.length);
      
      String string6 = StringUtils.center(" ", 0, 's');
      assertEquals(" ", string6);
      assertFalse(string6.equals((Object)string0));
      assertTrue(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string4));
      assertNotNull(string6);
      
      String string7 = StringUtils.center("Minimum abbreviation width is %d", 1622, " ");
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string0));
      assertNotNull(string7);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      String string0 = StringUtils.deleteWhitespace("_");
      assertEquals("_", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.countMatches((CharSequence) "_", 'v');
      assertEquals(0, int0);
      
      String string1 = StringUtils.truncate("wO", 12, 0);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "", "");
      assertTrue(boolean0);
      
      String string2 = StringUtils.substringBefore((String) null, "gJ'2`^I>7>1=?w4kd#m");
      assertNull(string2);
      
      int int1 = StringUtils.getLevenshteinDistance((CharSequence) "_", (CharSequence) "");
      assertEquals(1, int1);
      assertFalse(int1 == int0);
      
      String string3 = StringUtils.overlay("", ")jM.J@gV}3P", 5, 1);
      assertEquals(")jM.J@gV}3P", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      String string0 = StringUtils.deleteWhitespace("_");
      assertEquals("_", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.substringBefore((String) null, "gJ'2`^I>7>1=?w4kd#m");
      assertNull(string1);
      
      String string2 = StringUtils.normalizeSpace(")jM.J@gV}3P");
      assertEquals(")jM.J@gV}3P", string2);
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      String string0 = StringUtils.removePattern("Array element ", "ts");
      assertEquals("Array element ", string0);
      assertNotNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      charSequenceArray0[3] = (CharSequence) "ts";
      String string1 = StringUtils.SPACE;
      assertEquals(" ", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      charSequenceArray0[2] = (CharSequence) " ";
      charSequenceArray0[3] = (CharSequence) "Array element ";
      charSequenceArray0[4] = (CharSequence) "Array element ";
      String string2 = StringUtils.substringAfterLast("VbdGVbdG", "The Array must not be null");
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      String string3 = StringUtils.repeat("Search and Replace array lengths don't match: ", "l' ~Wohr[dG3\"ig.l' ~Wohr[dG3\"ig.", 4);
      assertEquals("Search and Replace array lengths don't match: l' ~Wohr[dG3\"ig.l' ~Wohr[dG3\"ig.Search and Replace array lengths don't match: l' ~Wohr[dG3\"ig.l' ~Wohr[dG3\"ig.Search and Replace array lengths don't match: l' ~Wohr[dG3\"ig.l' ~Wohr[dG3\"ig.Search and Replace array lengths don't match: ", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      
      String string4 = StringUtils.unwrap("jhb3ibO*jp*Hjhb3ibO*jp*H", 'H');
      assertEquals("jhb3ibO*jp*Hjhb3ibO*jp*H", string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertNotNull(string4);
      
      boolean boolean0 = StringUtils.contains((CharSequence) "Array element ", (CharSequence) "VbdGVbdG");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isWhitespace("Search and Replace array lengths don't match: ");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String string5 = StringUtils.unwrap("Minimum abbreviation width is %d", "!/=K");
      assertEquals("Minimum abbreviation width is %d", string5);
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertNotNull(string5);
      
      String string6 = StringUtils.substringAfter("jhb3ibO*jp*Hjhb3ibO*jp*H", "Array and element cannot both be null");
      assertEquals("", string6);
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string5));
      assertNotNull(string6);
      
      String string7 = StringUtils.remove("jhb3ibO*jp*Hjhb3ibO*jp*H", 'H');
      assertEquals("jhb3ibO*jp*jhb3ibO*jp*", string7);
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string4));
      assertNotNull(string7);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 155;
      doubleArray0[1] = (double) (-287);
      doubleArray0[2] = (double) 1;
      doubleArray0[3] = (double) '/';
      doubleArray0[4] = (double) 1;
      String string0 = StringUtils.abbreviate("KNqrkg", "Cannot clone Cloneable type ", 432);
      assertEquals("KNqrkg", string0);
      assertNotNull(string0);
      
      Locale locale0 = Locale.ITALY;
      assertEquals("it", locale0.getLanguage());
      assertEquals("IT", locale0.getCountry());
      assertEquals("it_IT", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("ITA", locale0.getISO3Country());
      assertNotNull(locale0);
      
      Locale locale1 = Locale.ITALIAN;
      assertEquals("it", locale1.getLanguage());
      assertEquals("", locale1.getISO3Country());
      assertEquals("", locale1.getVariant());
      assertEquals("it", locale1.toString());
      assertEquals("ita", locale1.getISO3Language());
      assertEquals("", locale1.getCountry());
      assertFalse(locale1.equals((Object)locale0));
      assertNotNull(locale1);
      assertNotSame(locale1, locale0);
      
      Locale locale2 = Locale.CANADA;
      assertEquals("en_CA", locale2.toString());
      assertEquals("eng", locale2.getISO3Language());
      assertEquals("en", locale2.getLanguage());
      assertEquals("", locale2.getVariant());
      assertEquals("CAN", locale2.getISO3Country());
      assertEquals("CA", locale2.getCountry());
      assertFalse(locale2.equals((Object)locale1));
      assertFalse(locale2.equals((Object)locale0));
      assertNotNull(locale2);
      assertNotSame(locale2, locale1);
      assertNotSame(locale2, locale0);
      
      int int0 = StringUtils.getFuzzyDistance("KNqrkg", "KNqrkg", locale2);
      assertEquals(16, int0);
      assertEquals("en_CA", locale2.toString());
      assertEquals("eng", locale2.getISO3Language());
      assertEquals("en", locale2.getLanguage());
      assertEquals("", locale2.getVariant());
      assertEquals("CAN", locale2.getISO3Country());
      assertEquals("CA", locale2.getCountry());
      assertFalse(locale2.equals((Object)locale1));
      assertFalse(locale2.equals((Object)locale0));
      assertNotSame(locale2, locale1);
      assertNotSame(locale2, locale0);
      
      int[] intArray0 = new int[0];
      String string1 = StringUtils.join(intArray0, '/');
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(0, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      String string0 = StringUtils.stripAccents("Aborting to protect against StackOverflowError - output of one loop is the input of another");
      assertEquals("Aborting to protect against StackOverflowError - output of one loop is the input of another", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.wrapIfMissing("#", 'u');
      assertEquals("u#u", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.strip("u#u");
      assertEquals("u#u", string2);
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertNotNull(string2);
      
      CharSequence[] charSequenceArray0 = new CharSequence[8];
      charSequenceArray0[0] = (CharSequence) "u#u";
      charSequenceArray0[1] = (CharSequence) "u#u";
      charSequenceArray0[2] = (CharSequence) "u#u";
      charSequenceArray0[4] = (CharSequence) "Aborting to protect against StackOverflowError - output of one loop is the input of another";
      charSequenceArray0[7] = (CharSequence) "u#u";
      boolean boolean0 = StringUtils.endsWithAny("Aborting to protect against StackOverflowError - output of one loop is the input of another", charSequenceArray0);
      assertTrue(boolean0);
      assertEquals(8, charSequenceArray0.length);
      
      char[] charArray0 = new char[9];
      charArray0[0] = 'u';
      charArray0[1] = '1';
      charArray0[2] = 'u';
      charArray0[3] = '1';
      charArray0[4] = '1';
      int int0 = StringUtils.countMatches((CharSequence) "u#u", 'F');
      assertEquals(0, int0);
      
      String string3 = StringUtils.truncate("u#u", 0, 0);
      assertEquals("", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      
      boolean boolean1 = StringUtils.containsOnly(charSequenceArray0[3], "#");
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      assertEquals(8, charSequenceArray0.length);
      
      String string4 = StringUtils.substringAfterLast("...", (-68));
      assertEquals("", string4);
      assertFalse(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertNotNull(string4);
      
      String string5 = StringUtils.deleteWhitespace("_");
      assertEquals("_", string5);
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertNotNull(string5);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      String string0 = StringUtils.stripToEmpty("G^7|+zFpb:oK?5");
      assertEquals("G^7|+zFpb:oK?5", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.abbreviate((String) null, "G^7|+zFpb:oK?5", 1739);
      assertNull(string1);
      
      String string2 = StringUtils.removeIgnoreCase("b!LC!A&/8maL.&_", (String) null);
      assertEquals("b!LC!A&/8maL.&_", string2);
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      boolean boolean0 = StringUtils.isAlphanumeric("G^7|+zFpb:oK?5");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isWhitespace("G^7|+zFpb:oK?5");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String[] stringArray0 = StringUtils.split("", "kT&v", 126);
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      
      String string3 = StringUtils.replaceIgnoreCase("]", "ENH'/z20XKKKw_YG", "}`", 126);
      assertEquals("]", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      
      String string4 = StringUtils.join((Iterator<?>) null, "b!LC!A&/8maL.&_");
      assertNull(string4);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      String[] stringArray0 = new String[13];
      stringArray0[1] = "";
      String string0 = StringUtils.firstNonBlank(stringArray0);
      assertNull(string0);
      assertEquals(13, stringArray0.length);
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = (-1.0F);
      floatArray0[2] = 1383.2F;
      floatArray0[3] = (-2836.3674F);
      floatArray0[4] = 1383.2F;
      floatArray0[5] = 601.31F;
      floatArray0[6] = 1383.2F;
      char[] charArray0 = new char[4];
      charArray0[0] = 'j';
      String string1 = StringUtils.join(floatArray0, 'a', 428, 428);
      assertArrayEquals(new float[] {(-1.0F), 0.0F, 1383.2F, (-2836.3674F), 1383.2F, 601.31F, 1383.2F}, floatArray0, 0.01F);
      assertEquals("", string1);
      assertNotNull(string1);
      assertEquals(7, floatArray0.length);
      
      String[] stringArray1 = StringUtils.substringsBetween((String) null, "", "D(7nG$A4+j.");
      assertNull(stringArray1);
      
      String string2 = StringUtils.prependIfMissingIgnoreCase("`y2Q//'9", "Array element ", stringArray0);
      assertEquals("`y2Q//'9", string2);
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals(13, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      String string0 = StringUtils.substringBeforeLast("", "Minimum abbreviation width is %d");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.uncapitalize(" ");
      assertEquals(" ", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) " ";
      objectArray0[1] = (Object) "";
      String string2 = StringUtils.join(objectArray0);
      assertEquals(" ", string2);
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals(2, objectArray0.length);
      
      int int0 = StringUtils.lastOrdinalIndexOf("Minimum abbreviation width is %d", "Minimum abbreviation width is %d", 0);
      assertEquals((-1), int0);
      
      String string3 = StringUtils.substringBetween((String) null, " ");
      assertNull(string3);
      
      boolean boolean0 = StringUtils.containsWhitespace("");
      assertFalse(boolean0);
      
      String[] stringArray0 = StringUtils.substringsBetween((String) null, (String) null, " ");
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      String string0 = StringUtils.normalizeSpace(">m9.`");
      assertEquals(">m9.`", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOfAny((CharSequence) ">m9.`", ">m9.`");
      assertEquals(0, int0);
      
      String string1 = StringUtils.substringBefore(">m9.`", 16);
      assertEquals(">m9.`", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.removeStartIgnoreCase("Array element ", "7C_C8],{'+a{I");
      assertEquals("Array element ", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      String string3 = StringUtils.stripToNull(">m9.`");
      assertEquals(">m9.`", string3);
      assertTrue(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[0] = (CharSequence) ">m9.`";
      charSequenceArray0[1] = (CharSequence) ">m9.`";
      boolean boolean0 = StringUtils.containsAny((CharSequence) ">m9.`", charSequenceArray0);
      assertTrue(boolean0);
      assertEquals(2, charSequenceArray0.length);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)62;
      byteArray0[0] = (byte) (-56);
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte)67;
      byteArray0[4] = (byte)15;
      byteArray0[5] = (byte)123;
      byteArray0[6] = (byte)123;
      String string4 = StringUtils.rightPad(", '", (int) (byte)123, "Array and element cannot both be null");
      assertEquals(", 'Array and element cannot both be nullArray and element cannot both be nullArray and element cannot both be nullArray and", string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertNotNull(string4);
      
      int int1 = StringUtils.countMatches((CharSequence) ">m9.`", (CharSequence) ">m9.`");
      assertEquals(1, int1);
      assertFalse(int1 == int0);
      
      boolean boolean1 = StringUtils.equals((CharSequence) "Array and element cannot both be null", (CharSequence) "7C_C8],{'+a{I");
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      String string0 = StringUtils.removeEnd("org.apache.commons.lang3.ObjectUtils$Null", "@J(?mTkP%H7vTZ-");
      assertEquals("org.apache.commons.lang3.ObjectUtils$Null", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = new String[0];
      String string1 = StringUtils.getCommonPrefix(stringArray0);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(0, stringArray0.length);
      
      String string2 = StringUtils.replaceOnceIgnoreCase("@J(?mTkP%H7vTZ-", "@J(?mTkP%H7vTZ-", " vs ");
      assertEquals(" vs ", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      String string3 = StringUtils.stripToNull(" vs ");
      assertEquals("vs", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      
      String string4 = StringUtils.replace("maxWith cannot be negatives", (String) null, "comparator", (-1868));
      assertEquals("maxWith cannot be negatives", string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertNotNull(string4);
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertFalse(linkedList0.contains("comparator"));
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      boolean boolean0 = linkedList0.add((Object) "vs");
      assertFalse(linkedList0.contains("comparator"));
      assertTrue(linkedList0.contains("vs"));
      assertTrue(boolean0);
      assertEquals(1, linkedList0.size());
      
      String string5 = StringUtils.join((List<?>) linkedList0, 'S', 35, (-1868));
      assertFalse(linkedList0.contains((-1868)));
      assertTrue(linkedList0.contains("vs"));
      assertEquals("", string5);
      assertEquals(1, linkedList0.size());
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertNotNull(string5);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)65;
      byteArray0[1] = (byte)30;
      byteArray0[2] = (byte)95;
      byteArray0[3] = (byte)10;
      byteArray0[4] = (byte)14;
      byteArray0[5] = (byte)112;
      byteArray0[6] = (byte)77;
      byteArray0[7] = (byte)37;
      String string6 = StringUtils.join(byteArray0, '\\', (-1914), (-2154));
      assertArrayEquals(new byte[] {(byte)65, (byte)30, (byte)95, (byte)10, (byte)14, (byte)112, (byte)77, (byte)37}, byteArray0);
      assertEquals("", string6);
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string3));
      assertNotNull(string6);
      assertEquals(8, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      String string0 = StringUtils.stripToEmpty("G^7|+zFpb:oK?5");
      assertEquals("G^7|+zFpb:oK?5", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = new String[6];
      stringArray0[0] = "G^7|+zFpb:oK?5";
      stringArray0[1] = "G^7|+zFpb:oK?5";
      stringArray0[2] = "G^7|+zFpb:oK?5";
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      int int0 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      String string1 = StringUtils.join((Object[]) stringArray0, 'k', (-1), (-1));
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(6, stringArray0.length);
      
      String[] stringArray1 = StringUtils.splitByCharacterType((String) null);
      assertNull(stringArray1);
      
      String string2 = StringUtils.replaceAll("~I4sA1z_FZR", "\r", "~I4sA1z_FZR");
      assertEquals("~I4sA1z_FZR", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      String string3 = StringUtils.leftPad("3", 10, 'Y');
      assertEquals("YYYYYYYYY3", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      
      String string4 = StringUtils.substringAfter("~I4sA1z_FZR", (-1));
      assertEquals("", string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertNotNull(string4);
      
      String string5 = StringUtils.uncapitalize("G{Hj>m~,");
      assertEquals("g{Hj>m~,", string5);
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertNotNull(string5);
      
      String string6 = StringUtils.joinWith("YYYYYYYYY3", stringArray0);
      assertEquals("G^7|+zFpb:oK?5YYYYYYYYY3G^7|+zFpb:oK?5YYYYYYYYY3G^7|+zFpb:oK?5YYYYYYYYY3YYYYYYYYY3YYYYYYYYY3", string6);
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string0));
      assertNotNull(string6);
      assertEquals(6, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      String string0 = StringUtils.deleteWhitespace("C1k-7_rbEbjE6eQS8]^");
      assertEquals("C1k-7_rbEbjE6eQS8]^", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isAllUpperCase("C1k-7_rbEbjE6eQS8]^");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isNotEmpty("C1k-7_rbEbjE6eQS8]^");
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      char[] charArray0 = new char[2];
      boolean boolean2 = StringUtils.containsOnly((CharSequence) "C1k-7_rbEbjE6eQS8]^", charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000'}, charArray0);
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertEquals(2, charArray0.length);
      
      String string1 = StringUtils.substringBefore("[~B4m{N_y", "C1k-7_rbEbjE6eQS8]^");
      assertEquals("[~B4m{N_y", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      boolean boolean3 = StringUtils.startsWith("[~B4m{N_y", "[~B4m{N_y");
      assertTrue(boolean3);
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "org.apache.commons.lang3.LocaleUtils", (CharSequence) "[~B4m{N_y", (-1081));
      assertEquals((-1), int0);
      
      double[] doubleArray0 = new double[0];
      String string2 = StringUtils.join(doubleArray0, '4');
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals(0, doubleArray0.length);
      
      String string3 = StringUtils.trim("L:K");
      assertEquals("L:K", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'J';
      charArray0[1] = '9';
      charArray0[2] = '=';
      charArray0[3] = 'Q';
      String string0 = StringUtils.join(charArray0, 'Q', 1391, 1391);
      assertArrayEquals(new char[] {'J', '9', '=', 'Q'}, charArray0);
      assertEquals("", string0);
      assertNotNull(string0);
      assertEquals(4, charArray0.length);
      
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "";
      charSequenceArray0[2] = (CharSequence) "";
      charSequenceArray0[3] = (CharSequence) "";
      charSequenceArray0[4] = (CharSequence) "";
      boolean boolean0 = StringUtils.isAnyEmpty(charSequenceArray0);
      assertTrue(boolean0);
      assertEquals(5, charSequenceArray0.length);
      
      String string1 = StringUtils.substringAfterLast("", "Search and Replace array lengths don't match: l' ~Wohr[dG3\"ig.l' ~Wohr[dG3\"ig.Search and Replace array lengths don't match: l' ~Wohr[dG3\"ig.l' ~Wohr[dG3\"ig.Search and Replace array lengths don't match: l' ~Wohr[dG3\"ig.l' ~Wohr[dG3\"ig.Search and Replace array lengths don't match: l' ~Wohr[dG3\"ig.l' ~Wohr[dG3\"ig.l' ~Wohr[dG3\"ig.l' ~Wohr[dG3\"ig.");
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.substringBetween(" vs ", "");
      assertEquals("", string2);
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      String string0 = StringUtils.substringBetween("Array element ", "Array element ", "");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.replaceIgnoreCase("Array element ", "Cloneable type ", "EQLIjzTMAf8!v(c;*");
      assertEquals("Array element ", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.replaceOnceIgnoreCase("Array element ", "p0(k'):XEGw@GuouuN", "c+DpmXZsf@i:");
      assertEquals("Array element ", string2);
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertNotNull(string2);
      
      String[] stringArray0 = StringUtils.split("Array element ", "", 636);
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      String string0 = StringUtils.upperCase("Strings must not be null");
      assertEquals("STRINGS MUST NOT BE NULL", string0);
      assertNotNull(string0);
      
      int int0 = 0;
      String string1 = StringUtils.mid("", 0, 0);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.join((Object[]) null, "...", 0, 0);
      assertNull(string2);
      
      String string3 = StringUtils.abbreviate("STRINGS MUST NOT BE NULL", (String) null, 0);
      assertEquals("STRINGS MUST NOT BE NULL", string3);
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string0));
      assertNotNull(string3);
      
      String string4 = StringUtils.lowerCase("`f#f6HHM0Gl\"po;>8@J(?VumTkP%H7vTZ");
      assertEquals("`f#f6hhm0gl\"po;>8@j(?vumtkp%h7vtz", string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertNotNull(string4);
      
      try { 
        StringUtils.getBytes("Array 1nd el_ment cannot both be null", "");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(UnsupportedEncodingException e) {
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      String string0 = StringUtils.substringBetween("ffst cannot be negative", "ffst cannot be negative");
      assertNull(string0);
      
      char[] charArray0 = new char[1];
      charArray0[0] = '\\';
      boolean boolean0 = StringUtils.containsOnly((CharSequence) null, charArray0);
      assertArrayEquals(new char[] {'\\'}, charArray0);
      assertFalse(boolean0);
      assertEquals(1, charArray0.length);
      
      String string1 = StringUtils.abbreviate("ffst cannot be negative", 53, 53);
      assertEquals("ffst cannot be negative", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      String string0 = StringUtils.trimToNull("~Vr");
      assertEquals("~Vr", string0);
      assertNotNull(string0);
      
      String string1 = "8pR2B:PK5lx\"7";
      String string2 = StringUtils.truncate("8pR2B:PK5lx\"7", 0, 32);
      assertEquals("8pR2B:PK5lx\"7", string2);
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      String string3 = null;
      String string4 = StringUtils.deleteWhitespace((String) null);
      assertNull(string4);
      
      CharSequence[] charSequenceArray0 = new CharSequence[6];
      charSequenceArray0[0] = (CharSequence) "~Vr";
      String string5 = "VbdGVbdG";
      String string6 = StringUtils.getDigits("VbdGVbdG");
      assertEquals("", string6);
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string2));
      assertNotNull(string6);
      
      charSequenceArray0[1] = (CharSequence) "";
      charSequenceArray0[2] = (CharSequence) "~Vr";
      charSequenceArray0[3] = (CharSequence) null;
      charSequenceArray0[4] = (CharSequence) "~Vr";
      String string7 = StringUtils.substringAfter("offset cannot be negative", 32);
      assertEquals("cannot be negative", string7);
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string0));
      assertNotNull(string7);
      
      charSequenceArray0[5] = (CharSequence) "cannot be negative";
      int int0 = StringUtils.indexOfAny((CharSequence) null, charSequenceArray0);
      assertEquals((-1), int0);
      assertEquals(6, charSequenceArray0.length);
      
      String[] stringArray0 = StringUtils.split((String) null);
      assertNull(stringArray0);
      
      String string8 = "";
      String[] stringArray1 = StringUtils.split("", (String) null);
      assertNotNull(stringArray1);
      assertEquals(0, stringArray1.length);
      
      int int1 = StringUtils.countMatches((CharSequence) null, charSequenceArray0[1]);
      assertEquals(0, int1);
      assertFalse(int1 == int0);
      assertEquals(6, charSequenceArray0.length);
      
      Supplier<CharSequence> supplier0 = (Supplier<CharSequence>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      CharSequence charSequence0 = StringUtils.getIfEmpty((CharSequence) "8pR2B:PK5lx\"7", supplier0);
      assertEquals("8pR2B:PK5lx\"7", charSequence0);
      assertFalse(charSequence0.equals((Object)string5));
      assertTrue(charSequence0.equals((Object)string2));
      assertTrue(charSequence0.equals((Object)string1));
      assertFalse(charSequence0.equals((Object)string0));
      assertFalse(charSequence0.equals((Object)string8));
      assertFalse(charSequence0.equals((Object)string7));
      assertFalse(charSequence0.equals((Object)string6));
      assertNotNull(charSequence0);
      
      // Undeclared exception!
      try { 
        StringUtils.getLevenshteinDistance((CharSequence) "8pR2B:PK5lx\"7", charSequenceArray0[3]);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      int int0 = StringUtils.countMatches((CharSequence) null, ')');
      assertEquals(0, int0);
      
      String string0 = "wO";
      String string1 = StringUtils.truncate("wO", 125, (int) ')');
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "wO", "wO");
      assertTrue(boolean0);
      
      String string2 = StringUtils.substringBefore("gJ'2`^I>7>1=?w4kd#m", "54I15aNzTHv}b");
      assertEquals("gJ'2`^I>7>1=?w4kd#m", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      // Undeclared exception!
      try { 
        StringUtils.getLevenshteinDistance((CharSequence) null, (CharSequence) "54I15aNzTHv}b");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      String string0 = StringUtils.join((Object[]) charSequenceArray0, 'n');
      assertEquals("", string0);
      assertNotNull(string0);
      assertEquals(1, charSequenceArray0.length);
      
      ArrayList<String> arrayList0 = new ArrayList<String>();
      assertFalse(arrayList0.contains(string0));
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      String string1 = StringUtils.join((List<?>) arrayList0, 'v', (int) 'n', (int) 'n');
      assertFalse(arrayList0.contains(string1));
      assertEquals("", string1);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)97;
      byteArray0[1] = (byte)14;
      byteArray0[2] = (byte)14;
      byteArray0[3] = (byte)95;
      String string2 = StringUtils.trimToNull("");
      assertNull(string2);
      
      String string3 = StringUtils.replaceIgnoreCase("", "", "maxWith cannot be negative");
      assertEquals("", string3);
      assertTrue(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string1));
      assertNotNull(string3);
      
      // Undeclared exception!
      try { 
        StringUtils.getLevenshteinDistance((CharSequence) "", (CharSequence) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      String string0 = StringUtils.deleteWhitespace("_");
      assertEquals("_", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.countMatches((CharSequence) "_", 'v');
      assertEquals(0, int0);
      
      boolean boolean0 = StringUtils.isWhitespace("_");
      assertFalse(boolean0);
      
      String string1 = StringUtils.unwrap("v", "!/=K");
      assertEquals("v", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.substringAfter("ND5", "!/=K");
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      String string3 = StringUtils.remove("Minimum abbreviation width is %d", 'v');
      assertEquals("Minimum abbreiation width is %d", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      String[] stringArray0 = new String[0];
      String string0 = StringUtils.getCommonPrefix(stringArray0);
      assertEquals("", string0);
      assertNotNull(string0);
      assertEquals(0, stringArray0.length);
      
      boolean[] booleanArray0 = new boolean[16];
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      int int0 = StringUtils.indexOfAny((CharSequence) "", (CharSequence[]) stringArray0);
      assertEquals((-1), int0);
      assertEquals(0, stringArray0.length);
      
      Locale locale0 = Locale.ITALY;
      assertEquals("it_IT", locale0.toString());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("IT", locale0.getCountry());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("ita", locale0.getISO3Language());
      assertNotNull(locale0);
      
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      Vector<Locale> vector0 = new Vector<Locale>();
      assertFalse(vector0.contains(locale0));
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.isEmpty());
      assertNotNull(vector0);
      
      List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) arrayList0, (Collection<Locale>) vector0);
      assertFalse(vector0.contains(locale0));
      assertFalse(list0.contains(locale0));
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.isEmpty());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
      
      Locale locale1 = Locale.lookup(arrayList0, list0);
      assertFalse(vector0.contains(locale0));
      assertFalse(list0.contains(locale0));
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.isEmpty());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNull(locale1);
      
      int int1 = StringUtils.getFuzzyDistance("", "", locale0);
      assertEquals(0, int1);
      assertEquals("it_IT", locale0.toString());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("IT", locale0.getCountry());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("ita", locale0.getISO3Language());
      assertFalse(int1 == int0);
      
      int[] intArray0 = new int[7];
      intArray0[0] = 13;
      intArray0[1] = (int) 'A';
      intArray0[2] = 13;
      intArray0[3] = (int) 'A';
      intArray0[4] = (-1);
      intArray0[5] = (-4492);
      intArray0[6] = 13;
      String string1 = StringUtils.join(intArray0, 'A');
      assertArrayEquals(new int[] {13, 65, 13, 65, (-1), (-4492), 13}, intArray0);
      assertEquals("13A65A13A65A-1A-4492A13", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(7, intArray0.length);
      
      boolean boolean0 = StringUtils.containsNone((CharSequence) null, (String) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[8];
      char[] charArray0 = new char[2];
      charArray0[0] = 'y';
      charArray0[1] = 'G';
      String string0 = StringUtils.valueOf(charArray0);
      assertArrayEquals(new char[] {'y', 'G'}, charArray0);
      assertEquals("yG", string0);
      assertNotNull(string0);
      assertEquals(2, charArray0.length);
      
      charSequenceArray0[0] = (CharSequence) "yG";
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 'y';
      doubleArray0[1] = (double) 'G';
      doubleArray0[2] = (double) 'G';
      doubleArray0[3] = (double) 'G';
      String string1 = StringUtils.join(doubleArray0, 'G');
      assertArrayEquals(new double[] {121.0, 71.0, 71.0, 71.0}, doubleArray0, 0.01);
      assertEquals("121.0G71.0G71.0G71.0", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(4, doubleArray0.length);
      
      charSequenceArray0[1] = (CharSequence) "121.0G71.0G71.0G71.0";
      String[] stringArray0 = new String[1];
      stringArray0[0] = "121.0G71.0G71.0G71.0";
      String string2 = StringUtils.getCommonPrefix(stringArray0);
      assertEquals("121.0G71.0G71.0G71.0", string2);
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals(1, stringArray0.length);
      
      charSequenceArray0[2] = (CharSequence) "121.0G71.0G71.0G71.0";
      String string3 = StringUtils.rightPad("121.0G71.0G71.0G71.0", (-3939));
      assertEquals("121.0G71.0G71.0G71.0", string3);
      assertTrue(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      
      charSequenceArray0[3] = (CharSequence) "121.0G71.0G71.0G71.0";
      String string4 = StringUtils.deleteWhitespace("");
      assertEquals("", string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertNotNull(string4);
      
      charSequenceArray0[4] = (CharSequence) "";
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)95;
      byteArray0[1] = (byte)59;
      byteArray0[2] = (byte)13;
      byteArray0[3] = (byte) (-17);
      String string5 = StringUtils.join(byteArray0, '/', Integer.MAX_VALUE, 4);
      assertArrayEquals(new byte[] {(byte)95, (byte)59, (byte)13, (byte) (-17)}, byteArray0);
      assertEquals("", string5);
      assertFalse(string5.equals((Object)string1));
      assertTrue(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertNotNull(string5);
      assertEquals(4, byteArray0.length);
      
      charSequenceArray0[5] = (CharSequence) "";
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = false;
      booleanArray0[5] = true;
      // Undeclared exception!
      try { 
        StringUtils.join(booleanArray0, 'p', (-1), 102);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 2740.867485;
      String string0 = StringUtils.join(doubleArray0, 'X');
      assertArrayEquals(new double[] {2740.867485}, doubleArray0, 0.01);
      assertEquals("2740.867485", string0);
      assertNotNull(string0);
      assertEquals(1, doubleArray0.length);
      
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) "2740.867485";
      objectArray0[1] = (Object) "2740.867485";
      objectArray0[2] = (Object) 2740.867485;
      objectArray0[3] = (Object) "2740.867485";
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[4] = object0;
      int int0 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      charSequenceArray0[0] = (CharSequence) "8c>!) u,eei!\"I2yC-U";
      charSequenceArray0[1] = (CharSequence) "8c>!) u,eei!\"I2yC-U";
      String string0 = StringUtils.rightPad((String) null, 23, 'r');
      assertNull(string0);
      
      charSequenceArray0[2] = (CharSequence) null;
      boolean boolean0 = StringUtils.startsWithAny("8c>!) u,eei!\"I2yC-U", charSequenceArray0);
      assertTrue(boolean0);
      assertEquals(3, charSequenceArray0.length);
      
      String string1 = StringUtils.center((String) null, 23, 'r');
      assertNull(string1);
      
      int int0 = StringUtils.indexOfAnyBut((CharSequence) null, (CharSequence) "\rArray element ");
      assertEquals((-1), int0);
      
      String string2 = StringUtils.center((String) null, (int) 'r', 'r');
      assertNull(string2);
      
      String string3 = StringUtils.rightPad("j&HQ<(>&J!C2Z", 23, 'r');
      assertEquals("j&HQ<(>&J!C2Zrrrrrrrrrr", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.unwrap("G^7|+zFpb:oK?5", (String) null);
      assertEquals("G^7|+zFpb:oK?5", string4);
      assertFalse(string4.equals((Object)string3));
      assertNotNull(string4);
      
      int int1 = StringUtils.indexOfDifference((CharSequence) "JY@o8b", (CharSequence) "G^7|+zFpb:oK?5");
      assertEquals(0, int1);
      assertFalse(int1 == int0);
      
      String[] stringArray0 = StringUtils.splitByCharacterType("\r");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) ':';
      floatArray0[1] = (float) ':';
      String string0 = StringUtils.join(floatArray0, ':', 48, (-931));
      assertArrayEquals(new float[] {58.0F, 58.0F}, floatArray0, 0.01F);
      assertEquals("", string0);
      assertNotNull(string0);
      assertEquals(2, floatArray0.length);
      
      String[] stringArray0 = new String[8];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "";
      stringArray0[6] = "2!,{+vAy@Ng";
      stringArray0[7] = "";
      String string1 = StringUtils.firstNonEmpty(stringArray0);
      assertEquals("2!,{+vAy@Ng", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(8, stringArray0.length);
      
      int int0 = StringUtils.indexOfDifference((CharSequence) "@J(?VumTkP%H7vTZ`f#f6HHM0Gl\"po;>8", (CharSequence) "");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      boolean boolean0 = StringUtils.isNumeric("F1~Sp}mS5");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isNumeric("");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (-287);
      String string0 = StringUtils.join(doubleArray0, '/', (-287), (-287));
      assertArrayEquals(new double[] {(-287.0)}, doubleArray0, 0.01);
      assertEquals("", string0);
      assertNotNull(string0);
      assertEquals(1, doubleArray0.length);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) ",ZBZD/YePMWJ[eT0K", (CharSequence) "F1~Sp}mS5");
      assertEquals((-1), int0);
      
      String string1 = StringUtils.wrapIfMissing("", '/');
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.lowerCase("ch");
      assertEquals("ch", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)74;
      byteArray0[1] = (byte) (-109);
      byteArray0[2] = (byte)10;
      byteArray0[3] = (byte) (-21);
      byteArray0[4] = (byte)13;
      String string3 = StringUtils.join(byteArray0, ')', (int) (byte)13, (int) (byte) (-109));
      assertArrayEquals(new byte[] {(byte)74, (byte) (-109), (byte)10, (byte) (-21), (byte)13}, byteArray0);
      assertEquals("", string3);
      assertTrue(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      assertEquals(5, byteArray0.length);
      
      String string4 = StringUtils.right("ch", 8192);
      assertEquals("ch", string4);
      assertFalse(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertNotNull(string4);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      String string0 = StringUtils.upperCase(", Length: ");
      assertEquals(", LENGTH: ", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.stripAccents("Aborting to protect against StackOverflowError - output of one loop is the input of another");
      assertEquals("Aborting to protect against StackOverflowError - output of one loop is the input of another", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.wrapIfMissing("#", 'u');
      assertEquals("u#u", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      String string3 = StringUtils.strip("u#u");
      assertEquals("u#u", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string2));
      assertNotNull(string3);
      
      CharSequence[] charSequenceArray0 = new CharSequence[8];
      charSequenceArray0[0] = (CharSequence) "u#u";
      charSequenceArray0[1] = (CharSequence) "u#u";
      charSequenceArray0[2] = (CharSequence) "u#u";
      charSequenceArray0[3] = (CharSequence) ", LENGTH: ";
      charSequenceArray0[4] = (CharSequence) "Aborting to protect against StackOverflowError - output of one loop is the input of another";
      charSequenceArray0[5] = (CharSequence) ", LENGTH: ";
      charSequenceArray0[6] = (CharSequence) ", LENGTH: ";
      charSequenceArray0[7] = (CharSequence) "u#u";
      boolean boolean0 = StringUtils.endsWithAny("Aborting to protect against StackOverflowError - output of one loop is the input of another", charSequenceArray0);
      assertTrue(boolean0);
      assertEquals(8, charSequenceArray0.length);
      
      char[] charArray0 = new char[9];
      charArray0[0] = 'u';
      charArray0[1] = '1';
      charArray0[2] = 'u';
      charArray0[3] = '1';
      charArray0[4] = '1';
      charArray0[5] = 'u';
      charArray0[6] = 'u';
      charArray0[7] = 'u';
      charArray0[8] = '1';
      int int0 = StringUtils.indexOfAnyBut((CharSequence) ", Length: ", charArray0);
      assertArrayEquals(new char[] {'u', '1', 'u', '1', '1', 'u', 'u', 'u', '1'}, charArray0);
      assertEquals(0, int0);
      assertEquals(9, charArray0.length);
      
      String string4 = StringUtils.center("%!)", 48, 'u');
      assertEquals("uuuuuuuuuuuuuuuuuuuuuu%!)uuuuuuuuuuuuuuuuuuuuuuu", string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertNotNull(string4);
      
      String string5 = StringUtils.center(", Length: ", (-1), "H'2N.#5KC;5");
      assertEquals(", Length: ", string5);
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertNotNull(string5);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      Locale locale0 = Locale.JAPAN;
      assertEquals("ja_JP", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("JP", locale0.getCountry());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("jpn", locale0.getISO3Language());
      assertNotNull(locale0);
      
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      String string0 = Locale.lookupTag(arrayList0, (Collection<String>) null);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNull(string0);
      
      CharSequence charSequence0 = null;
      // Undeclared exception!
      try { 
        StringUtils.getFuzzyDistance((CharSequence) null, (CharSequence) null, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      String string0 = null;
      String string1 = StringUtils.abbreviate((String) null, (String) null, 12);
      assertNull(string1);
      
      int int0 = StringUtils.indexOf((CharSequence) null, 12);
      assertEquals((-1), int0);
      
      String string2 = StringUtils.substringBeforeLast("nY(EuCtk4$H{v", "nY(EuCtk4$H{v");
      assertEquals("", string2);
      assertNotNull(string2);
      
      int[] intArray0 = new int[7];
      intArray0[0] = (-1);
      intArray0[1] = 12;
      intArray0[2] = 12;
      intArray0[3] = 12;
      intArray0[4] = 12;
      intArray0[5] = (-1049);
      intArray0[6] = 12;
      String string3 = StringUtils.join(intArray0, '2');
      assertArrayEquals(new int[] {(-1), 12, 12, 12, 12, (-1049), 12}, intArray0);
      assertEquals("-12122122122122-1049212", string3);
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      assertEquals(7, intArray0.length);
      
      boolean boolean0 = StringUtils.containsIgnoreCase((CharSequence) null, "-12122122122122-1049212");
      assertFalse(boolean0);
      
      Locale locale0 = Locale.forLanguageTag("");
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertNotNull(locale0);
      
      Stack<Locale.LanguageRange> stack0 = new Stack<Locale.LanguageRange>();
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertNotNull(stack0);
      
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      Locale.setDefault(locale_Category0, locale0);
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getVariant());
      
      ArrayDeque<String> arrayDeque0 = new ArrayDeque<String>();
      assertFalse(arrayDeque0.contains(string2));
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      assertNotNull(arrayDeque0);
      
      boolean boolean1 = arrayDeque0.add("x@4M'6`<");
      assertFalse(arrayDeque0.contains(string3));
      assertTrue(arrayDeque0.contains("x@4M'6`<"));
      assertTrue(boolean1);
      assertEquals(1, arrayDeque0.size());
      assertFalse(arrayDeque0.isEmpty());
      assertFalse(boolean1 == boolean0);
      
      boolean boolean2 = arrayDeque0.add("-12122122122122-1049212");
      assertFalse(arrayDeque0.contains(string2));
      assertTrue(arrayDeque0.contains(string3));
      assertTrue(boolean2);
      assertFalse(arrayDeque0.isEmpty());
      assertEquals(2, arrayDeque0.size());
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      assertFalse(set0.contains(string3));
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertNotNull(set0);
      
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) stack0, (Collection<String>) arrayDeque0);
      assertFalse(arrayDeque0.contains(string2));
      assertTrue(arrayDeque0.contains(string3));
      assertFalse(list0.contains(string3));
      assertFalse(arrayDeque0.isEmpty());
      assertEquals(2, arrayDeque0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertNotNull(list0);
      
      // Undeclared exception!
      try { 
        StringUtils.getFuzzyDistance((CharSequence) null, "nY(EuCtk4$H{v", locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      String string0 = StringUtils.getDigits("#");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.substringAfter("Arguments cannot both be null", 9);
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      charSequenceArray0[0] = (CharSequence) "";
      String string2 = StringUtils.substringAfter("Index: ", "dHsh/$PQa&Cycchzx");
      assertEquals("", string2);
      assertTrue(string2.equals((Object)string0));
      assertNotNull(string2);
      
      charSequenceArray0[1] = (CharSequence) "";
      charSequenceArray0[2] = (CharSequence) "Arguments cannot both be null";
      charSequenceArray0[3] = (CharSequence) "";
      charSequenceArray0[4] = (CharSequence) "F1~Sp}mS5";
      int int0 = StringUtils.indexOfAny((CharSequence) "", charSequenceArray0);
      assertEquals(0, int0);
      assertEquals(5, charSequenceArray0.length);
      
      String[] stringArray0 = StringUtils.split("F1~Sp}mS5");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      String[] stringArray1 = StringUtils.split((String) null, "!d[h52SK3Uyiq.d<qN");
      assertNull(stringArray1);
      
      int int1 = StringUtils.countMatches((CharSequence) "", charSequenceArray0[1]);
      assertEquals(0, int1);
      assertTrue(int1 == int0);
      assertEquals(5, charSequenceArray0.length);
      
      String string3 = StringUtils.left("#", 1845);
      assertEquals("#", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      
      String string4 = StringUtils.substringBetween("", "#");
      assertNull(string4);
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertFalse(linkedList0.contains("#"));
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      String[] stringArray2 = StringUtils.substringsBetween("VbdGVbdG", "", "JQM=5Ork5=3^IbZJqiS");
      assertNull(stringArray2);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      String[] stringArray0 = new String[13];
      stringArray0[1] = "";
      String string0 = StringUtils.firstNonBlank(stringArray0);
      assertNull(string0);
      assertEquals(13, stringArray0.length);
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = (-1.0F);
      floatArray0[2] = 1383.2F;
      floatArray0[3] = (-2836.3674F);
      floatArray0[4] = 1383.2F;
      floatArray0[5] = 601.31F;
      floatArray0[6] = 1383.2F;
      char[] charArray0 = new char[4];
      charArray0[0] = 'j';
      String string1 = StringUtils.join(floatArray0, 'a', 428, 428);
      assertArrayEquals(new float[] {(-1.0F), 0.0F, 1383.2F, (-2836.3674F), 1383.2F, 601.31F, 1383.2F}, floatArray0, 0.01F);
      assertEquals("", string1);
      assertNotNull(string1);
      assertEquals(7, floatArray0.length);
      
      String string2 = StringUtils.join((short[]) null, 'T', 428, 51);
      assertNull(string2);
      
      boolean boolean0 = StringUtils.endsWith((CharSequence) null, (CharSequence) null);
      assertTrue(boolean0);
      
      boolean boolean1 = StringUtils.isAllUpperCase("");
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      String string0 = StringUtils.substringAfter("[D/.5Q]{sGZM2sH<] in an array of ", "!");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.trimToNull("");
      assertNull(string1);
      
      String string2 = StringUtils.substringAfterLast(" is not in the range '0' - '9'", 53);
      assertEquals("", string2);
      assertNotNull(string2);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "", 12, 12);
      assertEquals((-1), int0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      boolean boolean0 = StringUtils.isAllLowerCase("~!%q{-kC<;JCc");
      assertFalse(boolean0);
      
      int[] intArray0 = StringUtils.toCodePoints(" is not in the range '0' - '9'");
      assertNotNull(intArray0);
      assertEquals(30, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Vector<CharBuffer> vector0 = new Vector<CharBuffer>();
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertNotNull(vector0);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "";
      String string0 = StringUtils.firstNonBlank(stringArray0);
      assertNull(string0);
      assertEquals(1, stringArray0.length);
      
      boolean boolean0 = StringUtils.startsWithAny("org.apache.commons.lang3.ObjectUtils$Null", stringArray0);
      assertTrue(boolean0);
      assertEquals(1, stringArray0.length);
      
      boolean boolean1 = StringUtils.containsWhitespace("org.apache.commons.lang3.ObjectUtils$Null");
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      String string1 = StringUtils.replaceFirst("w", "org.apache.commons.lang3.ObjectUtils$Null", "ILg");
      assertEquals("w", string1);
      assertNotNull(string1);
      
      int[] intArray0 = StringUtils.toCodePoints("org.apache.commons.lang3.ObjectUtils$Null");
      assertNotNull(intArray0);
      assertEquals(41, intArray0.length);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) 'e';
      floatArray0[1] = (float) 'e';
      floatArray0[2] = (float) 'e';
      String string2 = StringUtils.join(floatArray0, 'e');
      assertArrayEquals(new float[] {101.0F, 101.0F, 101.0F}, floatArray0, 0.01F);
      assertEquals("101.0e101.0e101.0", string2);
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals(3, floatArray0.length);
      
      String string3 = StringUtils.trim("Y(&iqd4O$FQtE");
      assertEquals("Y(&iqd4O$FQtE", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      String[] stringArray0 = new String[0];
      String string0 = StringUtils.getCommonPrefix(stringArray0);
      assertEquals("", string0);
      assertNotNull(string0);
      assertEquals(0, stringArray0.length);
      
      boolean[] booleanArray0 = new boolean[16];
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      int int0 = StringUtils.indexOfAny((CharSequence) "", (CharSequence[]) stringArray0);
      assertEquals((-1), int0);
      assertEquals(0, stringArray0.length);
      
      Locale locale0 = Locale.ITALY;
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("it_IT", locale0.toString());
      assertEquals("IT", locale0.getCountry());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertNotNull(locale0);
      
      int int1 = StringUtils.getFuzzyDistance("", "", locale0);
      assertEquals(0, int1);
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("it_IT", locale0.toString());
      assertEquals("IT", locale0.getCountry());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertFalse(int1 == int0);
      
      int[] intArray0 = new int[7];
      intArray0[0] = 13;
      intArray0[1] = (int) 'A';
      intArray0[2] = 13;
      intArray0[3] = (int) 'A';
      intArray0[4] = (-1);
      intArray0[5] = (-4492);
      intArray0[6] = 13;
      int int2 = StringUtils.lastOrdinalIndexOf("", "", (-1));
      assertEquals((-1), int2);
      assertFalse(int2 == int1);
      assertTrue(int2 == int0);
      
      String string1 = StringUtils.substringBeforeLast("", "maxWith cannot be negative");
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.substringAfterLast("maxWith cannot be negative", (-32768));
      assertEquals("", string2);
      assertTrue(string2.equals((Object)string1));
      assertNotNull(string2);
      
      String[] stringArray1 = StringUtils.splitPreserveAllTokens("", "");
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(0, stringArray1.length);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      String string0 = StringUtils.rightPad("Object varargs must not be null", 48, "/T1[");
      assertEquals("Object varargs must not be null/T1[/T1[/T1[/T1[/", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOf((CharSequence) null, (CharSequence) null);
      assertEquals((-1), int0);
      
      // Undeclared exception!
      try { 
        StringUtils.abbreviate("Exception cloning Cloneable type ", 307, (-1973));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum abbreviation width is 4
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      String string0 = StringUtils.removePattern("Array element ", "");
      assertEquals("Array element ", string0);
      assertNotNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      charSequenceArray0[1] = (CharSequence) "";
      String string1 = StringUtils.SPACE;
      assertEquals(" ", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      charSequenceArray0[2] = (CharSequence) " ";
      charSequenceArray0[3] = (CharSequence) "Array element ";
      String string2 = StringUtils.stripAccents("Minimum abbreviation width is %d");
      assertEquals("Minimum abbreviation width is %d", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      String string3 = StringUtils.wrapIfMissing("#", '1');
      assertEquals("1#1", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      
      String string4 = StringUtils.strip("#");
      assertEquals("#", string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertNotNull(string4);
      
      boolean boolean0 = StringUtils.endsWithAny("#", charSequenceArray0);
      assertTrue(boolean0);
      assertEquals(5, charSequenceArray0.length);
      
      char[] charArray0 = new char[4];
      charArray0[0] = '1';
      charArray0[1] = '1';
      charArray0[2] = '1';
      charArray0[3] = '1';
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "Array element ", charArray0);
      assertArrayEquals(new char[] {'1', '1', '1', '1'}, charArray0);
      assertEquals(0, int0);
      assertEquals(4, charArray0.length);
      
      String string5 = StringUtils.center("Minimum abbreviation width is %d", 0, '4');
      assertEquals("Minimum abbreviation width is %d", string5);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertTrue(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertNotNull(string5);
      
      String string6 = StringUtils.center("Minimum abbreviation width is %d", 872, "Array element ");
      assertEquals("Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Minimum abbreviation width is %dArray element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element ", string6);
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string5));
      assertNotNull(string6);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      String string0 = StringUtils.substringAfter("[D/.5Q]{sGZM2sH<] in an array of ", "!");
      assertEquals("", string0);
      assertNotNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[0] = (CharSequence) "!";
      charSequenceArray0[1] = (CharSequence) "!";
      int int0 = StringUtils.indexOfAny((CharSequence) "", charSequenceArray0);
      assertEquals((-1), int0);
      assertEquals(2, charSequenceArray0.length);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("o9*`", "o9*`", 124);
      assertNotNull(stringArray0);
      assertEquals(5, stringArray0.length);
      
      String string1 = StringUtils.stripAccents("bdGu");
      assertEquals("bdGu", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte)77;
      byteArray0[2] = (byte)37;
      String string2 = StringUtils.join(byteArray0, '6');
      assertArrayEquals(new byte[] {(byte)0, (byte)77, (byte)37}, byteArray0);
      assertEquals("0677637", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals(3, byteArray0.length);
      
      int int1 = StringUtils.getLevenshteinDistance((CharSequence) "bdGu", (CharSequence) "[D/.5Q]{sGZM2sH<] in an array of ");
      assertEquals(32, int1);
      assertFalse(int1 == int0);
      
      String string3 = StringUtils.stripEnd("", "COucLtwBF^c^a`'");
      assertEquals("", string3);
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      
      boolean boolean0 = StringUtils.containsIgnoreCase("[D/.5Q]{sGZM2sH<] in an array of ", "");
      assertTrue(boolean0);
      
      String string4 = StringUtils.wrap(">!u", 't');
      assertEquals("t>!ut", string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertNotNull(string4);
      
      int int2 = StringUtils.getLevenshteinDistance((CharSequence) "[D/.5Q]{sGZM2sH<] in an array of ", charSequenceArray0[0], (int) (byte)0);
      assertEquals((-1), int2);
      assertTrue(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(2, charSequenceArray0.length);
      
      CharSequence[] charSequenceArray1 = new CharSequence[5];
      assertFalse(charSequenceArray1.equals((Object)charSequenceArray0));
      
      charSequenceArray1[0] = (CharSequence) "0677637";
      charSequenceArray1[1] = (CharSequence) "bdGu";
      charSequenceArray1[2] = (CharSequence) "";
      charSequenceArray1[3] = (CharSequence) "";
      charSequenceArray1[4] = (CharSequence) "[D/.5Q]{sGZM2sH<] in an array of ";
      boolean boolean1 = StringUtils.isNoneBlank(charSequenceArray1);
      assertFalse(boolean1);
      assertFalse(charSequenceArray1.equals((Object)charSequenceArray0));
      assertFalse(boolean1 == boolean0);
      assertNotSame(charSequenceArray1, charSequenceArray0);
      assertEquals(5, charSequenceArray1.length);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      String string0 = StringUtils.CR;
      assertEquals("\r", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isNotBlank("\r");
      assertFalse(boolean0);
      
      String string1 = StringUtils.removeStart("R=X\"eH+!97+RVrt&", (String) null);
      assertEquals("R=X\"eH+!97+RVrt&", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.toRootUpperCase("(");
      assertEquals("(", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      CharSequence[] charSequenceArray0 = new CharSequence[6];
      charSequenceArray0[0] = (CharSequence) "R=X\"eH+!97+RVrt&";
      charSequenceArray0[1] = (CharSequence) "R=X\"eH+!97+RVrt&";
      String string3 = StringUtils.replaceOnceIgnoreCase("8dvkUvc1?}#$g,}%L", "M.|>i,{>>9t-", "\r");
      assertEquals("8dvkUvc1?}#$g,}%L", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      
      charSequenceArray0[2] = (CharSequence) "8dvkUvc1?}#$g,}%L";
      charSequenceArray0[3] = (CharSequence) "(";
      charSequenceArray0[4] = (CharSequence) "(";
      charSequenceArray0[5] = (CharSequence) "(";
      String string4 = StringUtils.appendIfMissingIgnoreCase("f`3rXO(@]q$3?#", "(", charSequenceArray0);
      assertEquals("f`3rXO(@]q$3?#(", string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertNotNull(string4);
      assertEquals(6, charSequenceArray0.length);
      
      int[] intArray0 = StringUtils.toCodePoints("f`3rXO(@]q$3?#(");
      assertNotNull(intArray0);
      assertEquals(15, intArray0.length);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens((String) null, "...");
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      String string0 = StringUtils.deleteWhitespace("_");
      assertEquals("_", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = StringUtils.stripAll((String[]) null, "Y)3n1`2_97u G#5v");
      assertNull(stringArray0);
      
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "_", (String) null);
      assertFalse(boolean0);
      
      String string1 = StringUtils.removeFirst((String) null, (String) null);
      assertNull(string1);
      
      String[] stringArray1 = StringUtils.splitByWholeSeparator((String) null, (String) null);
      assertNull(stringArray1);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      String string0 = StringUtils.removePattern("Array element ", "");
      assertEquals("Array element ", string0);
      assertNotNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      charSequenceArray0[1] = (CharSequence) "";
      String string1 = StringUtils.SPACE;
      assertEquals(" ", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      charSequenceArray0[2] = (CharSequence) " ";
      charSequenceArray0[3] = (CharSequence) "Array element ";
      charSequenceArray0[4] = (CharSequence) "Array element ";
      String string2 = StringUtils.substringAfterLast("VbdGVbdG", "The Array must not be null");
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      String string3 = StringUtils.repeat("Search and Replace array lengths don't match: ", "l' ~Wohr[dG3\"ig.l' ~Wohr[dG3\"ig.", 4);
      assertEquals("Search and Replace array lengths don't match: l' ~Wohr[dG3\"ig.l' ~Wohr[dG3\"ig.Search and Replace array lengths don't match: l' ~Wohr[dG3\"ig.l' ~Wohr[dG3\"ig.Search and Replace array lengths don't match: l' ~Wohr[dG3\"ig.l' ~Wohr[dG3\"ig.Search and Replace array lengths don't match: ", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      
      String string4 = StringUtils.unwrap("", 'H');
      assertEquals("", string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string2));
      assertNotNull(string4);
      
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short) (-33);
      shortArray0[1] = (short)127;
      shortArray0[2] = (short)1069;
      String string5 = StringUtils.join(shortArray0, '%');
      assertArrayEquals(new short[] {(short) (-33), (short)127, (short)1069}, shortArray0);
      assertEquals("-33%127%1069", string5);
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertNotNull(string5);
      assertEquals(3, shortArray0.length);
      
      int[] intArray0 = StringUtils.toCodePoints(charSequenceArray0[3]);
      assertNotNull(intArray0);
      assertEquals(5, charSequenceArray0.length);
      assertEquals(14, intArray0.length);
      
      boolean boolean0 = StringUtils.isAllLowerCase("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      String string0 = StringUtils.reverse("");
      assertEquals("", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isEmpty("");
      assertTrue(boolean0);
      
      char[] charArray0 = new char[8];
      charArray0[0] = '}';
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "", (CharSequence) "");
      assertEquals(0, int0);
      
      int int1 = StringUtils.lastIndexOf((CharSequence) "", (-2296), (-2296));
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short) (-33);
      shortArray0[1] = (short)762;
      shortArray0[2] = (short) (-33);
      shortArray0[3] = (short)762;
      shortArray0[4] = (short)762;
      String string1 = StringUtils.join(shortArray0, 'j');
      assertArrayEquals(new short[] {(short) (-33), (short)762, (short) (-33), (short)762, (short)762}, shortArray0);
      assertEquals("-33j762j-33j762j762", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(5, shortArray0.length);
      
      int[] intArray0 = StringUtils.toCodePoints("");
      assertArrayEquals(new int[] {}, intArray0);
      assertNotNull(intArray0);
      assertEquals(0, intArray0.length);
      
      boolean boolean1 = StringUtils.isAllLowerCase("");
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      String[] stringArray0 = new String[13];
      stringArray0[1] = "";
      String string0 = StringUtils.firstNonBlank(stringArray0);
      assertNull(string0);
      assertEquals(13, stringArray0.length);
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = (-1.0F);
      floatArray0[2] = 1383.2F;
      floatArray0[3] = (-2836.3674F);
      floatArray0[4] = (-2530.9985F);
      floatArray0[5] = 601.31F;
      floatArray0[6] = 1383.2F;
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertFalse(linkedList0.contains((-1.0F)));
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Iterator<Object> iterator0 = linkedList0.iterator();
      assertFalse(linkedList0.contains((-1.0F)));
      assertEquals(0, linkedList0.size());
      assertNotNull(iterator0);
      
      String string1 = StringUtils.join(iterator0, string0);
      assertFalse(linkedList0.contains((-1.0F)));
      assertEquals("", string1);
      assertEquals(0, linkedList0.size());
      assertNotNull(string1);
      assertEquals(13, stringArray0.length);
      
      String[] stringArray1 = StringUtils.splitByWholeSeparatorPreserveAllTokens("", "Y)3n1`2_97u G#5v");
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(0, stringArray1.length);
      
      String string2 = StringUtils.prependIfMissingIgnoreCase("", (CharSequence) null, stringArray0);
      assertEquals("", string2);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertTrue(string2.equals((Object)string1));
      assertNotNull(string2);
      assertNotSame(stringArray0, stringArray1);
      assertEquals(13, stringArray0.length);
      
      String string3 = StringUtils.substringAfterLast("", "Y)3n1`2_97u G#5v");
      assertEquals("", string3);
      assertTrue(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string1));
      assertNotNull(string3);
      
      String string4 = StringUtils.repeat("Y)3n1`2_97u G#5v", "_", 4);
      assertEquals("Y)3n1`2_97u G#5v_Y)3n1`2_97u G#5v_Y)3n1`2_97u G#5v_Y)3n1`2_97u G#5v", string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertNotNull(string4);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      String string0 = StringUtils.defaultString("Search and Relace array lengths on't match: ");
      assertEquals("Search and Relace array lengths on't match: ", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.containsWhitespace("Search and Relace array lengths on't match: ");
      assertTrue(boolean0);
      
      String string1 = StringUtils.substringAfter("Search and Relace array lengths on't match: ", 2770);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String[] stringArray0 = StringUtils.substringsBetween("", "84", "Search and Relace array lengths on't match: ");
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      
      String string2 = StringUtils.removeEndIgnoreCase("@J(?mTkP%H7vTZ-", "...");
      assertEquals("@J(?mTkP%H7vTZ-", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      boolean boolean1 = StringUtils.isNumeric("...");
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      String string0 = StringUtils.deleteWhitespace("C1k-7_rbEbjE6eQS8]^");
      assertEquals("C1k-7_rbEbjE6eQS8]^", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isAllUpperCase("C1k-7_rbEbjE6eQS8]^");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isNotEmpty("C1k-7_rbEbjE6eQS8]^");
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      char[] charArray0 = new char[2];
      boolean boolean2 = StringUtils.containsOnly((CharSequence) "C1k-7_rbEbjE6eQS8]^", charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000'}, charArray0);
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertEquals(2, charArray0.length);
      
      String string1 = StringUtils.substringBefore("[~B4m{N_y", "C1k-7_rbEbjE6eQS8]^");
      assertEquals("[~B4m{N_y", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.replaceChars("[~B4m{N_y", 'Y', '<');
      assertEquals("[~B4m{N_y", string2);
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "C1k-7_rbEbjE6eQS8]^", (CharSequence) "[~B4m{N_y");
      assertEquals(19, int0);
      
      String string3 = StringUtils.unwrap("C1k-7_rbEbjE6eQS8]^", '\u0000');
      assertEquals("C1k-7_rbEbjE6eQS8]^", string3);
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      
      String string4 = StringUtils.lowerCase("[~B4m{N_y");
      assertEquals("[~b4m{n_y", string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertNotNull(string4);
      
      int int1 = StringUtils.compare("]L8`:_)l3", "]L8`:_)l3", true);
      assertEquals(0, int1);
      assertFalse(int1 == int0);
      
      String string5 = StringUtils.trimToNull("m:dw,:[G;E7G1fRB6");
      assertEquals("m:dw,:[G;E7G1fRB6", string5);
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertNotNull(string5);
      
      boolean boolean3 = StringUtils.isAlphaSpace("m:dw,:[G;E7G1fRB6");
      assertFalse(boolean3);
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      Object[] objectArray0 = new Object[7];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      objectArray0[1] = object1;
      Object object2 = new Object();
      assertFalse(object2.equals((Object)object0));
      assertFalse(object2.equals((Object)object1));
      assertNotNull(object2);
      
      objectArray0[2] = object2;
      Object object3 = new Object();
      assertFalse(object3.equals((Object)object1));
      assertFalse(object3.equals((Object)object0));
      assertFalse(object3.equals((Object)object2));
      assertNotNull(object3);
      
      objectArray0[3] = object3;
      Object object4 = new Object();
      assertFalse(object4.equals((Object)object0));
      assertFalse(object4.equals((Object)object1));
      assertFalse(object4.equals((Object)object2));
      assertFalse(object4.equals((Object)object3));
      assertNotNull(object4);
      
      objectArray0[4] = object4;
      Object object5 = new Object();
      assertFalse(object5.equals((Object)object1));
      assertFalse(object5.equals((Object)object4));
      assertFalse(object5.equals((Object)object2));
      assertFalse(object5.equals((Object)object3));
      assertFalse(object5.equals((Object)object0));
      assertNotNull(object5);
      
      objectArray0[5] = object5;
      Object object6 = new Object();
      assertFalse(object6.equals((Object)object0));
      assertFalse(object6.equals((Object)object1));
      assertFalse(object6.equals((Object)object4));
      assertFalse(object6.equals((Object)object5));
      assertFalse(object6.equals((Object)object2));
      assertFalse(object6.equals((Object)object3));
      assertNotNull(object6);
      
      objectArray0[6] = object6;
      String string0 = StringUtils.join(objectArray0, 'e', 127, 127);
      assertEquals("", string0);
      assertNotNull(string0);
      assertEquals(7, objectArray0.length);
      
      String string1 = StringUtils.replaceAll("offset cannot be negative", "offset cannot be negative", "Arguments cannot both be null");
      assertEquals("Arguments cannot both be null", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String[] stringArray0 = new String[0];
      String string2 = StringUtils.firstNonEmpty(stringArray0);
      assertNull(string2);
      assertEquals(0, stringArray0.length);
      
      String string3 = StringUtils.chop("ch");
      assertEquals("c", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      
      String string4 = StringUtils.replaceIgnoreCase((String) null, "jhb3ibO*jp*Hjhb3ibO*jp*H", (String) null);
      assertNull(string4);
      
      String string5 = StringUtils.stripAccents("{}");
      assertEquals("{}", string5);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertNotNull(string5);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "Arguments cannot both be null", (CharSequence) "[D/.5Q]{sGZM2sH<] in an array of ");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      String string0 = StringUtils.substringAfter("[D/.5Q]{sGZM2sH<] in an array of ", "!");
      assertEquals("", string0);
      assertNotNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[0] = (CharSequence) "!";
      charSequenceArray0[1] = (CharSequence) "!";
      int int0 = StringUtils.indexOfAny((CharSequence) "", charSequenceArray0);
      assertEquals((-1), int0);
      assertEquals(2, charSequenceArray0.length);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("o9*`", "o9*`", 124);
      assertNotNull(stringArray0);
      assertEquals(5, stringArray0.length);
      
      String string1 = StringUtils.stripAccents("bdGu");
      assertEquals("bdGu", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-41);
      byteArray0[1] = (byte)77;
      byteArray0[2] = (byte)37;
      String string2 = StringUtils.join(byteArray0, '6');
      assertArrayEquals(new byte[] {(byte) (-41), (byte)77, (byte)37}, byteArray0);
      assertEquals("-41677637", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals(3, byteArray0.length);
      
      int int1 = StringUtils.getLevenshteinDistance((CharSequence) "bdGu", (CharSequence) "[D/.5Q]{sGZM2sH<] in an array of ");
      assertEquals(32, int1);
      assertFalse(int1 == int0);
      
      int[] intArray0 = new int[5];
      intArray0[0] = (int) '6';
      intArray0[1] = 31;
      intArray0[2] = (int) (byte)77;
      intArray0[3] = (int) (byte)77;
      intArray0[4] = 124;
      String string3 = StringUtils.join(intArray0, '6');
      assertArrayEquals(new int[] {54, 31, 77, 77, 124}, intArray0);
      assertEquals("546316776776124", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      assertEquals(5, intArray0.length);
      
      String string4 = StringUtils.substringBefore("[D/.5Q]{sGZM2sH<] in an array of ", "[D/.5Q]{sGZM2sH<] in an array of ");
      assertEquals("", string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertNotNull(string4);
      
      String string5 = StringUtils.stripEnd("-41677637", (String) null);
      assertEquals("-41677637", string5);
      assertFalse(string5.equals((Object)string4));
      assertTrue(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertNotNull(string5);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      boolean boolean0 = StringUtils.endsWithIgnoreCase((CharSequence) null, (CharSequence) null);
      assertTrue(boolean0);
      
      Object[] objectArray0 = new Object[6];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("maxWith cannot be negative", "maxWith cannot be negative", (-105));
      assertNotNull(stringArray0);
      assertEquals(27, stringArray0.length);
      
      String[] stringArray1 = StringUtils.substringsBetween("/u]Gj(^VY", "<8g-[0T", "org.apache.commons.lang3.ObjectUtils");
      assertNull(stringArray1);
      
      String string0 = StringUtils.prependIfMissingIgnoreCase("Array element ", "org.apache.commons.lang3.ObjectUtils", stringArray0);
      assertEquals("Array element ", string0);
      assertNotNull(string0);
      assertEquals(27, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      String string0 = StringUtils.leftPad("Y5rI'r}rR}@G@kj7q!%", 2789, 'B');
      assertNotNull(string0);
      
      String string1 = StringUtils.replaceOnceIgnoreCase("Y5rI'r}rR}@G@kj7q!%", (String) null, "t");
      assertEquals("Y5rI'r}rR}@G@kj7q!%", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.substring(string0, 2789);
      assertEquals("", string2);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      String string3 = StringUtils.unwrap("t8na6?9y,cuoiA(Up", 'B');
      assertEquals("t8na6?9y,cuoiA(Up", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      
      String string4 = StringUtils.normalizeSpace("Aborting to protect against StackOverflowError - output of one loop is the input of another");
      assertEquals("Aborting to protect against StackOverflowError - output of one loop is the input of another", string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertNotNull(string4);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("t8na6?9y,cuoiA(Up");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      String string5 = StringUtils.defaultIfEmpty(", Length: ", "The String must not be empty");
      assertEquals(", Length: ", string5);
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertNotNull(string5);
      
      int int0 = StringUtils.indexOf((CharSequence) "Aborting to protect against StackOverflowError - output of one loop is the input of another", (CharSequence) "t", 64);
      assertEquals(71, int0);
      
      int int1 = StringUtils.indexOfIgnoreCase((CharSequence) "Aborting to protect against StackOverflowError - output of one loop is the input of another", (CharSequence) "Y5rI'r}rR}@G@kj7q!%", 74);
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      
      String string6 = StringUtils.replaceChars("~6<)P=jEufw2%[5cy.C", '8', 'B');
      assertEquals("~6<)P=jEufw2%[5cy.C", string6);
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string5));
      assertNotNull(string6);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      String[] stringArray0 = new String[13];
      stringArray0[0] = "{}";
      stringArray0[1] = "";
      String string0 = StringUtils.firstNonBlank(stringArray0);
      assertEquals("{}", string0);
      assertNotNull(string0);
      assertEquals(13, stringArray0.length);
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = (-1.0F);
      Object object0 = new Object();
      assertNotNull(object0);
      
      String string1 = StringUtils.rightPad("", 25, "{}");
      assertEquals("{}{}{}{}{}{}{}{}{}{}{}{}{", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      int int0 = StringUtils.indexOfDifference((CharSequence) "{}", (CharSequence) null);
      assertEquals(0, int0);
      
      String[] stringArray1 = StringUtils.splitByCharacterType("org.apache.commons.lang3.exception.CloneFailedException");
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(17, stringArray1.length);
      
      String string2 = StringUtils.chomp("Array and element cannot both be null", "org.apache.commons.lang3.exception.CloneFailedException");
      assertEquals("Array and element cannot both be null", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      String string3 = StringUtils.substring("JFo|U'Q2kXa(jz", 25);
      assertEquals("", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      
      String string4 = StringUtils.replaceIgnoreCase("", "3^Vg')<ym<3^Vg'", "");
      assertEquals("", string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertNotNull(string4);
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      String[] stringArray0 = new String[13];
      stringArray0[0] = "{}";
      stringArray0[1] = "{}";
      String string0 = StringUtils.firstNonBlank(stringArray0);
      assertEquals("{}", string0);
      assertNotNull(string0);
      assertEquals(13, stringArray0.length);
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = (-1.0F);
      floatArray0[2] = 1383.2F;
      floatArray0[3] = (-2836.3674F);
      boolean boolean0 = StringUtils.isNotEmpty("{}");
      assertTrue(boolean0);
      
      String string1 = StringUtils.wrapIfMissing("W", '8');
      assertEquals("8W8", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      boolean boolean1 = StringUtils.isNoneEmpty(stringArray0);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      assertEquals(13, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "{}";
      stringArray0[1] = "";
      String string0 = StringUtils.mid("p.<*'&E{h", 0, (-299));
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.removeEnd("", "");
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.abbreviate("", "KkuJB<z]l[", (-262));
      assertEquals("", string2);
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertNotNull(string2);
      
      char[] charArray0 = new char[8];
      charArray0[0] = '8';
      charArray0[1] = 'v';
      charArray0[2] = 'v';
      charArray0[3] = '[';
      charArray0[4] = 'H';
      charArray0[5] = '*';
      charArray0[6] = 'H';
      charArray0[7] = 'f';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      assertArrayEquals(new char[] {'8', 'v', 'v', '[', 'H', '*', 'H', 'f'}, charArray0);
      assertFalse(charBuffer0.isReadOnly());
      assertEquals("8vv[H*Hf", charBuffer0.toString());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(0, charBuffer0.position());
      assertTrue(charBuffer0.hasArray());
      assertEquals(8, charBuffer0.remaining());
      assertEquals(8, charBuffer0.capacity());
      assertEquals(8, charBuffer0.length());
      assertFalse(charBuffer0.isDirect());
      assertEquals(8, charBuffer0.limit());
      assertTrue(charBuffer0.hasRemaining());
      assertNotNull(charBuffer0);
      assertEquals(8, charArray0.length);
      
      String string3 = StringUtils.wrapIfMissing("Ymu[s @", '[');
      assertEquals("[Ymu[s @[", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      
      int int0 = StringUtils.countMatches((CharSequence) "", (CharSequence) "[Ymu[s @[");
      assertEquals(0, int0);
      
      boolean boolean0 = StringUtils.isNoneEmpty(stringArray0);
      assertFalse(boolean0);
      assertEquals(2, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      String[] stringArray0 = new String[1];
      String string0 = StringUtils.getCommonPrefix(stringArray0);
      assertEquals("", string0);
      assertNotNull(string0);
      assertEquals(1, stringArray0.length);
      
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      // Undeclared exception!
      try { 
        StringUtils.join(booleanArray0, '0', (-21), 13);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -21
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      int int0 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      String[] stringArray0 = StringUtils.split("@", '');
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      String string0 = StringUtils.chop("@");
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      String string0 = StringUtils.CR;
      assertEquals("\r", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isNotBlank("\r");
      assertFalse(boolean0);
      
      Charset charset0 = Charset.defaultCharset();
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.toString());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.name());
      assertNotNull(charset0);
      
      String string1 = StringUtils.normalizeSpace("...");
      assertEquals("...", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.join((boolean[]) null, '@');
      assertNull(string2);
      
      boolean boolean1 = StringUtils.endsWith("...", "\r");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      boolean boolean2 = StringUtils.equalsIgnoreCase("\r", "...");
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens((String) null, (String) null, 1527);
      assertNull(stringArray0);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) '@';
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (double) '@';
      doubleArray0[3] = 132.7973549;
      String string3 = StringUtils.rightPad("3^Vg')<ym<3^Vg')<ym<", 1527, 'V');
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      
      String string4 = StringUtils.swapCase("3^Vg')<ym<3^Vg')<ym<");
      assertEquals("3^vG')<YM<3^vG')<YM<", string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertNotNull(string4);
      
      int int0 = StringUtils.ordinalIndexOf("3^vG')<YM<3^vG')<YM<", "uAYj#~~Xg", 1527);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      float[] floatArray0 = new float[3];
      floatArray0[0] = 0.0F;
      floatArray0[1] = 693.284F;
      long[] longArray0 = new long[5];
      longArray0[0] = (long) 'I';
      longArray0[1] = (long) 'I';
      longArray0[2] = (long) 'I';
      longArray0[3] = (long) 'I';
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 73L;
      doubleArray0[1] = (double) 73L;
      String string0 = StringUtils.join(doubleArray0, '/', (-287), (-287));
      assertArrayEquals(new double[] {73.0, 73.0}, doubleArray0, 0.01);
      assertEquals("", string0);
      assertNotNull(string0);
      assertEquals(2, doubleArray0.length);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "", (CharSequence) "");
      assertEquals(0, int0);
      
      String string1 = StringUtils.wrapIfMissing("", 'u');
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.lowerCase("  ");
      assertEquals("  ", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      String string0 = StringUtils.deleteWhitespace("_");
      assertEquals("_", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.countMatches((CharSequence) "_", 'v');
      assertEquals(0, int0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparator("Threshold must not be negative", "object");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      Object[] objectArray0 = new Object[7];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[1] = object0;
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      String string0 = StringUtils.unwrap("GU1$8zC\\qwJh8ru|", "GU1$8zC\\qwJh8ru|");
      assertEquals("GU1$8zC\\qwJh8ru|", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOf((CharSequence) "GU1$8zC\\qwJh8ru|", 58);
      assertEquals((-1), int0);
      
      int int1 = StringUtils.compareIgnoreCase("org.apache.commons.lang3.exception.CloneFailedException", "=1Uj");
      assertEquals(50, int1);
      assertFalse(int1 == int0);
      
      String string1 = StringUtils.normalizeSpace("org.apache.commons.lang3.exception.CloneFailedException");
      assertEquals("org.apache.commons.lang3.exception.CloneFailedException", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      charSequenceArray0[0] = (CharSequence) "=1Uj";
      charSequenceArray0[1] = (CharSequence) "=1Uj";
      charSequenceArray0[2] = (CharSequence) "GU1$8zC\\qwJh8ru|";
      charSequenceArray0[3] = (CharSequence) "=1Uj";
      boolean boolean0 = StringUtils.containsAny((CharSequence) "]vGsk8#+'", charSequenceArray0);
      assertFalse(boolean0);
      assertEquals(4, charSequenceArray0.length);
      
      Vector<Locale.LanguageRange> vector0 = new Vector<Locale.LanguageRange>();
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertNotNull(vector0);
      
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      assertEquals("", locale0.getVariant());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TWN", locale0.getISO3Country());
      assertNotNull(locale0);
      
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      assertFalse(set0.contains("GU1$8zC\\qwJh8ru|"));
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertEquals("", locale0.getVariant());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TWN", locale0.getISO3Country());
      assertNotNull(set0);
      
      LinkedList<String> linkedList0 = new LinkedList<String>(set0);
      assertFalse(set0.contains("GU1$8zC\\qwJh8ru|"));
      assertFalse(linkedList0.contains("GU1$8zC\\qwJh8ru|"));
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertEquals(0, linkedList0.size());
      assertEquals("", locale0.getVariant());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TWN", locale0.getISO3Country());
      assertNotNull(linkedList0);
      
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) vector0, (Collection<String>) linkedList0);
      assertFalse(set0.contains("GU1$8zC\\qwJh8ru|"));
      assertFalse(linkedList0.contains("GU1$8zC\\qwJh8ru|"));
      assertFalse(list0.contains("GU1$8zC\\qwJh8ru|"));
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertEquals(0, linkedList0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals("", locale0.getVariant());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TWN", locale0.getISO3Country());
      assertNotNull(list0);
      
      String string2 = StringUtils.join(list0, ":R.A7&ZEEY`=", 33, 33);
      assertFalse(set0.contains("GU1$8zC\\qwJh8ru|"));
      assertFalse(linkedList0.contains("GU1$8zC\\qwJh8ru|"));
      assertFalse(list0.contains("GU1$8zC\\qwJh8ru|"));
      assertEquals("", string2);
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertEquals(0, linkedList0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals("", locale0.getVariant());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TWN", locale0.getISO3Country());
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      boolean boolean1 = StringUtils.isNumericSpace("=1Uj");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String string3 = StringUtils.toRootLowerCase((String) null);
      assertNull(string3);
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      String[] stringArray0 = new String[13];
      stringArray0[1] = "";
      String string0 = StringUtils.firstNonBlank(stringArray0);
      assertNull(string0);
      assertEquals(13, stringArray0.length);
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = (-1.0F);
      floatArray0[2] = 1383.2F;
      floatArray0[3] = (-1.0F);
      floatArray0[4] = (-2530.9985F);
      floatArray0[5] = 601.31F;
      floatArray0[6] = 1383.2F;
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertFalse(linkedList0.contains((-2530.9985F)));
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Iterator<Object> iterator0 = linkedList0.iterator();
      assertFalse(linkedList0.contains((-2530.9985F)));
      assertEquals(0, linkedList0.size());
      assertNotNull(iterator0);
      
      String string1 = StringUtils.join(iterator0, string0);
      assertFalse(linkedList0.contains((-2530.9985F)));
      assertEquals("", string1);
      assertEquals(0, linkedList0.size());
      assertNotNull(string1);
      assertEquals(13, stringArray0.length);
      
      String string2 = StringUtils.join((List<?>) linkedList0, "", 50, 33);
      assertFalse(linkedList0.contains((-2530.9985F)));
      assertEquals("", string2);
      assertEquals(0, linkedList0.size());
      assertNotNull(string2);
      
      boolean boolean0 = StringUtils.isNumericSpace((CharSequence) null);
      assertFalse(boolean0);
      
      String string3 = StringUtils.toRootLowerCase((String) null);
      assertNull(string3);
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      String string0 = StringUtils.upperCase("Strings must not be null");
      assertEquals("STRINGS MUST NOT BE NULL", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.deleteWhitespace("Dh<PG9l");
      assertEquals("Dh<PG9l", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.isAllUpperCase("Dh<PG9l");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isNotEmpty("Dh<PG9l");
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short) (-1331);
      shortArray0[1] = (short)5;
      shortArray0[2] = (short)1266;
      String string2 = StringUtils.join(shortArray0, 'v', 99, 99);
      assertArrayEquals(new short[] {(short) (-1331), (short)5, (short)1266}, shortArray0);
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals(3, shortArray0.length);
      
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[2] = (CharSequence) "STRINGS MUST NOT BE NULL";
      charSequenceArray0[3] = (CharSequence) "Dh<PG9l";
      charSequenceArray0[4] = (CharSequence) "STRINGS MUST NOT BE NULL";
      String string3 = StringUtils.appendIfMissingIgnoreCase("", "STRINGS MUST NOT BE NULL", charSequenceArray0);
      assertEquals("", string3);
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      assertEquals(5, charSequenceArray0.length);
      
      boolean boolean2 = StringUtils.endsWith("", charSequenceArray0[0]);
      assertTrue(boolean2);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertEquals(5, charSequenceArray0.length);
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "{}";
      stringArray0[1] = "";
      String string0 = StringUtils.firstNonBlank(stringArray0);
      assertEquals("{}", string0);
      assertNotNull(string0);
      assertEquals(2, stringArray0.length);
      
      ArrayList<Locale> arrayList0 = new ArrayList<Locale>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      char char0 = '^';
      char char1 = 'H';
      // Undeclared exception!
      try { 
        StringUtils.join((List<?>) arrayList0, 'H', 10, 2753);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // toIndex = 2753
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = '`';
      charArray0[1] = '`';
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "C1k-7_rbEbjE6eQS8]^", charArray0);
      assertArrayEquals(new char[] {'`', '`'}, charArray0);
      assertFalse(boolean0);
      assertEquals(2, charArray0.length);
      
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      assertFalse(arrayList0.contains('`'));
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      // Undeclared exception!
      try { 
        StringUtils.join((List<?>) arrayList0, '`', 77, 2655);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // toIndex = 2655
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      boolean boolean0 = StringUtils.isNumeric("F1~Sp}mS5");
      assertFalse(boolean0);
      
      String[] stringArray0 = new String[5];
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "";
      String[] stringArray1 = StringUtils.stripAll(stringArray0, "AM[om");
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(5, stringArray0.length);
      assertEquals(5, stringArray1.length);
      
      String string0 = StringUtils.stripStart("F1~Sp}mS5", stringArray0[1]);
      assertEquals("F1~Sp}mS5", string0);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertNotNull(string0);
      assertNotSame(stringArray0, stringArray1);
      assertEquals(5, stringArray0.length);
      
      String string1 = StringUtils.abbreviate(stringArray0[0], stringArray0[1], 947);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertNull(string1);
      assertNotSame(stringArray0, stringArray1);
      assertEquals(5, stringArray0.length);
      
      String string2 = StringUtils.removeIgnoreCase(".9 @bnr", "UY7gz");
      assertEquals(".9 @bnr", string2);
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      boolean boolean1 = StringUtils.isAlphanumeric("");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      boolean boolean2 = StringUtils.isWhitespace("");
      assertTrue(boolean2);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      
      String[] stringArray2 = StringUtils.split("", (String) null, 947);
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertFalse(stringArray2.equals((Object)stringArray1));
      assertNotNull(stringArray2);
      assertNotSame(stringArray2, stringArray0);
      assertNotSame(stringArray2, stringArray1);
      assertEquals(0, stringArray2.length);
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      float[] floatArray0 = new float[3];
      floatArray0[0] = 0.0F;
      floatArray0[1] = 693.284F;
      long[] longArray0 = new long[5];
      longArray0[0] = (long) 'I';
      longArray0[1] = (long) 'I';
      longArray0[2] = (long) 'I';
      longArray0[3] = (long) 'I';
      longArray0[4] = (long) 'I';
      String string0 = StringUtils.chop((String) null);
      assertNull(string0);
      
      String string1 = StringUtils.replace((String) null, (String) null, (String) null);
      assertNull(string1);
      
      String[] stringArray0 = new String[0];
      String[] stringArray1 = StringUtils.stripAll(stringArray0, "78 c@iOT(_#p;OJ#*");
      assertNotNull(stringArray1);
      assertSame(stringArray0, stringArray1);
      assertSame(stringArray1, stringArray0);
      assertEquals(0, stringArray0.length);
      assertEquals(0, stringArray1.length);
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      String string0 = StringUtils.rightPad("", 2986, "");
      assertNotNull(string0);
      
      String string1 = StringUtils.upperCase(string0);
      assertNotNull(string1);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'r';
      int int0 = StringUtils.indexOfAny((CharSequence) "", charArray0);
      assertArrayEquals(new char[] {'r'}, charArray0);
      assertEquals((-1), int0);
      assertEquals(1, charArray0.length);
      
      String string2 = StringUtils.normalizeSpace("The Array must not be null");
      assertEquals("The Array must not be null", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      CharSequence[] charSequenceArray0 = new CharSequence[6];
      charSequenceArray0[0] = (CharSequence) string1;
      charSequenceArray0[1] = (CharSequence) string1;
      charSequenceArray0[2] = (CharSequence) "A";
      charSequenceArray0[3] = (CharSequence) "";
      charSequenceArray0[4] = (CharSequence) string0;
      String string3 = StringUtils.mid(string1, (-1610612734), 1493);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      
      charSequenceArray0[5] = (CharSequence) string3;
      boolean boolean0 = StringUtils.isAllEmpty(charSequenceArray0);
      assertFalse(boolean0);
      assertEquals(6, charSequenceArray0.length);
      
      char[] charArray1 = new char[1];
      assertFalse(charArray1.equals((Object)charArray0));
      
      charArray1[0] = 'r';
      String string4 = StringUtils.join(charArray1, 'N', 994, (-373));
      assertArrayEquals(new char[] {'r'}, charArray1);
      assertEquals("", string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(string4);
      assertNotSame(charArray1, charArray0);
      assertEquals(1, charArray1.length);
      
      boolean boolean1 = StringUtils.isAnyEmpty(charSequenceArray0);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      assertEquals(6, charSequenceArray0.length);
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      boolean boolean0 = StringUtils.isNumeric("F1~Sp}mS5");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isNumeric("");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String[] stringArray0 = new String[7];
      stringArray0[0] = ",ZBZD/YePMWJ[eT0K";
      stringArray0[1] = "";
      stringArray0[2] = "F1~Sp}mS5";
      stringArray0[3] = ",ZBZD/YePMWJ[eT0K";
      stringArray0[4] = "";
      stringArray0[5] = ",ZBZD/YePMWJ[eT0K";
      stringArray0[6] = "F1~Sp}mS5";
      String[] stringArray1 = StringUtils.stripAll(stringArray0, "\r\r");
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(7, stringArray0.length);
      assertEquals(7, stringArray1.length);
      
      String string0 = StringUtils.mid("F1~Sp}mS5", 4, 1511);
      assertEquals("p}mS5", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.stripStart(",ZBZD/YePMWJ[eT0K", ",ZBZD/YePMWJ[eT0K");
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.abbreviate("sm]@m4P(6<", "sm]@m4P(6<", 735);
      assertEquals("sm]@m4P(6<", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      int[] intArray0 = new int[5];
      intArray0[0] = 4;
      intArray0[1] = 735;
      intArray0[2] = 4;
      intArray0[3] = 1511;
      intArray0[4] = 735;
      // Undeclared exception!
      try { 
        StringUtils.join(intArray0, 'j', 4, 735);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      String string0 = " ";
      String string1 = StringUtils.removeAll(" ", " ");
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.containsAny((CharSequence) "", (char[]) null);
      assertFalse(boolean0);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "\r", (char[]) null);
      assertEquals((-1), int0);
      
      String string2 = StringUtils.normalizeSpace("\r");
      assertEquals("", string2);
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) " ";
      objectArray0[1] = (Object) " ";
      objectArray0[2] = (Object) "";
      objectArray0[3] = (Object) " ";
      objectArray0[4] = (Object) "\r";
      objectArray0[5] = (Object) "";
      objectArray0[6] = (Object) "\r";
      objectArray0[7] = (Object) ")QV6mP/+kjIR-";
      // Undeclared exception!
      try { 
        StringUtils.join(objectArray0, "b~c rWFMQk", 53, 4291);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 53
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      String string0 = StringUtils.rotate("xeR=", 48);
      assertEquals("xeR=", string0);
      assertNotNull(string0);
      
      StringWriter stringWriter0 = new StringWriter();
      assertEquals("", stringWriter0.toString());
      assertNotNull(stringWriter0);
      
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "s-D4{8$Mo,|,xZ");
      assertEquals("s-D4{8$Mo,|,xZ", stringWriter0.toString());
      assertEquals("s-D4{8$Mo,|,xZ", stringWriter1.toString());
      assertNotNull(stringWriter1);
      assertSame(stringWriter0, stringWriter1);
      assertSame(stringWriter1, stringWriter0);
      
      StringWriter stringWriter2 = stringWriter1.append('b');
      assertEquals("s-D4{8$Mo,|,xZb", stringWriter0.toString());
      assertEquals("s-D4{8$Mo,|,xZb", stringWriter1.toString());
      assertEquals("s-D4{8$Mo,|,xZb", stringWriter2.toString());
      assertNotNull(stringWriter2);
      assertSame(stringWriter0, stringWriter2);
      assertSame(stringWriter0, stringWriter1);
      assertSame(stringWriter1, stringWriter2);
      assertSame(stringWriter1, stringWriter0);
      assertSame(stringWriter2, stringWriter0);
      assertSame(stringWriter2, stringWriter1);
      
      StringBuffer stringBuffer0 = stringWriter2.getBuffer();
      assertEquals("s-D4{8$Mo,|,xZb", stringWriter0.toString());
      assertEquals("s-D4{8$Mo,|,xZb", stringWriter1.toString());
      assertEquals("s-D4{8$Mo,|,xZb", stringWriter2.toString());
      assertEquals("s-D4{8$Mo,|,xZb", stringBuffer0.toString());
      assertEquals(15, stringBuffer0.length());
      assertNotNull(stringBuffer0);
      assertSame(stringWriter0, stringWriter2);
      assertSame(stringWriter0, stringWriter1);
      assertSame(stringWriter1, stringWriter2);
      assertSame(stringWriter1, stringWriter0);
      assertSame(stringWriter2, stringWriter0);
      assertSame(stringWriter2, stringWriter1);
      
      stringWriter1.write(48);
      assertEquals("s-D4{8$Mo,|,xZb0", stringWriter0.toString());
      assertEquals("s-D4{8$Mo,|,xZb0", stringWriter1.toString());
      assertSame(stringWriter0, stringWriter2);
      assertSame(stringWriter0, stringWriter1);
      assertSame(stringWriter1, stringWriter2);
      assertSame(stringWriter1, stringWriter0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      boolean boolean0 = StringUtils.equalsAny(stringBuffer0, charSequenceArray0);
      assertFalse(boolean0);
      assertEquals("s-D4{8$Mo,|,xZb0", stringWriter0.toString());
      assertEquals("s-D4{8$Mo,|,xZb0", stringWriter1.toString());
      assertEquals("s-D4{8$Mo,|,xZb0", stringWriter2.toString());
      assertEquals("s-D4{8$Mo,|,xZb0", stringBuffer0.toString());
      assertEquals(16, stringBuffer0.length());
      assertSame(stringWriter0, stringWriter2);
      assertSame(stringWriter0, stringWriter1);
      assertSame(stringWriter1, stringWriter2);
      assertSame(stringWriter1, stringWriter0);
      assertSame(stringWriter2, stringWriter0);
      assertSame(stringWriter2, stringWriter1);
      assertEquals(0, charSequenceArray0.length);
      
      String string1 = StringUtils.removeStart("0\"j9+)Nv%kXU2q\"z/clone", "-E&ENRhr'KOc6)0,");
      assertEquals("0\"j9+)Nv%kXU2q\"z/clone", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "0\"j9+)Nv%kXU2q\"z/clone", (char[]) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "p{InCombiningDiacriticalMarks}+";
      String string0 = StringUtils.firstNonBlank(stringArray0);
      assertEquals("p{InCombiningDiacriticalMarks}+", string0);
      assertNotNull(string0);
      assertEquals(1, stringArray0.length);
      
      String[] stringArray1 = StringUtils.stripAll(stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(1, stringArray0.length);
      assertEquals(1, stringArray1.length);
      
      String string1 = StringUtils.substringAfter("p{InCombiningDiacriticalMarks}+", (-617));
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.stripToEmpty("p{InCombiningDiacriticalMarks}+");
      assertEquals("p{InCombiningDiacriticalMarks}+", string2);
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      String string3 = StringUtils.rightPad("p{InCombiningDiacriticalMarks}+", (-617), '(');
      assertEquals("p{InCombiningDiacriticalMarks}+", string3);
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string2));
      assertNotNull(string3);
      
      boolean boolean0 = StringUtils.endsWithAny("", stringArray1);
      assertFalse(boolean0);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(1, stringArray0.length);
      assertEquals(1, stringArray1.length);
      
      String string4 = StringUtils.rightPad("", 90, '(');
      assertEquals("((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((", string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertNotNull(string4);
      
      // Undeclared exception!
      try { 
        StringUtils.toEncodedString((byte[]) null, (Charset) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      int int0 = StringUtils.lastIndexOf((CharSequence) "{}", 229, (-1208));
      assertEquals((-1), int0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      charSequenceArray0[0] = (CharSequence) "{}";
      charSequenceArray0[1] = (CharSequence) "{}";
      charSequenceArray0[2] = (CharSequence) "{}";
      int int1 = StringUtils.indexOfAny((CharSequence) "{}", charSequenceArray0);
      assertEquals(0, int1);
      assertFalse(int1 == int0);
      assertEquals(3, charSequenceArray0.length);
      
      String[] stringArray0 = StringUtils.split("{}");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      int int2 = StringUtils.countMatches((CharSequence) "{}", charSequenceArray0[0]);
      assertEquals(1, int2);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(3, charSequenceArray0.length);
      
      String string0 = StringUtils.repeat("]eT06KT%~XvnTX}A6O\"", ", Length: 0", 4);
      assertEquals("]eT06KT%~XvnTX}A6O\", Length: 0]eT06KT%~XvnTX}A6O\", Length: 0]eT06KT%~XvnTX}A6O\", Length: 0]eT06KT%~XvnTX}A6O\"", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      String string0 = StringUtils.join((Object[]) charSequenceArray0, 'n');
      assertEquals("", string0);
      assertNotNull(string0);
      assertEquals(1, charSequenceArray0.length);
      
      String string1 = StringUtils.substringBetween("F:]4oQ_s0p=x+y", "F:]4oQ_s0p=x+y", ",?j;)2C|:EN5FkD]]");
      assertNull(string1);
      
      char[] charArray0 = new char[3];
      charArray0[0] = 'w';
      String string2 = StringUtils.replaceIgnoreCase("F:]4oQ_s0p=x+y", "bdG", "Cloneable type ");
      assertEquals("F:]4oQ_s0p=x+y", string2);
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      String string3 = StringUtils.replaceOnceIgnoreCase("", "Cloneable type ", "Cloneable type ");
      assertEquals("", string3);
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string0));
      assertNotNull(string3);
      
      String[] stringArray0 = StringUtils.split("Cloneable type ", (String) null, 2855);
      assertNotNull(stringArray0);
      assertEquals(2, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      String string0 = StringUtils.reverse((String) null);
      assertNull(string0);
      
      char[] charArray0 = new char[9];
      charArray0[2] = '&';
      boolean boolean0 = StringUtils.containsOnly((CharSequence) null, charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '&', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertFalse(boolean0);
      assertEquals(9, charArray0.length);
      
      String string1 = StringUtils.abbreviate("Array and element cannot both be null", 2, 21);
      assertEquals("Array and element ...", string1);
      assertNotNull(string1);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "t)mzG1WCD1k#4d(PK\"#", (CharSequence) null, 1606);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      String string0 = StringUtils.CR;
      assertEquals("\r", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isNotBlank("\r");
      assertFalse(boolean0);
      
      Charset charset0 = Charset.defaultCharset();
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.name());
      assertTrue(charset0.canEncode());
      assertNotNull(charset0);
      
      String string1 = StringUtils.normalizeSpace("...");
      assertEquals("...", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "\r", (CharSequence) "...");
      assertEquals((-1), int0);
      
      String string2 = StringUtils.toRootLowerCase("");
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      ArrayDeque<Object> arrayDeque0 = new ArrayDeque<Object>();
      assertFalse(arrayDeque0.contains("\r"));
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      assertNotNull(arrayDeque0);
      
      Integer integer0 = new Integer((-1));
      assertEquals((-1), (int)integer0);
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(integer0);
      
      arrayDeque0.push(integer0);
      assertFalse(arrayDeque0.contains("\r"));
      assertTrue(arrayDeque0.contains((-1)));
      assertFalse(arrayDeque0.isEmpty());
      assertEquals(1, arrayDeque0.size());
      assertTrue(integer0.equals((Object)int0));
      
      Iterator<Object> iterator0 = arrayDeque0.descendingIterator();
      assertFalse(arrayDeque0.contains("\r"));
      assertTrue(arrayDeque0.contains((-1)));
      assertFalse(arrayDeque0.isEmpty());
      assertEquals(1, arrayDeque0.size());
      assertNotNull(iterator0);
      
      String string3 = StringUtils.join(iterator0, (String) null);
      assertFalse(arrayDeque0.contains("\r"));
      assertTrue(arrayDeque0.contains((-1)));
      assertEquals("-1", string3);
      assertFalse(arrayDeque0.isEmpty());
      assertEquals(1, arrayDeque0.size());
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      String string0 = StringUtils.capitalize((String) null);
      assertNull(string0);
      
      int[] intArray0 = StringUtils.toCodePoints((CharSequence) null);
      assertNull(intArray0);
      
      boolean boolean0 = StringUtils.isAsciiPrintable((CharSequence) null);
      assertFalse(boolean0);
      
      String string1 = StringUtils.join((int[]) null, 'E', 0, 1462);
      assertNull(string1);
      
      Integer[] integerArray0 = new Integer[9];
      Integer integer0 = new Integer((-2561));
      assertEquals((-2561), (int)integer0);
      assertNotNull(integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(1462);
      assertEquals(1462, (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(38);
      assertEquals(38, (int)integer2);
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      assertNotNull(integer2);
      
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(128);
      assertEquals(128, (int)integer3);
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer0));
      assertNotNull(integer3);
      
      integerArray0[3] = integer3;
      Integer integer4 = new Integer(1248);
      assertEquals(1248, (int)integer4);
      assertFalse(integer4.equals((Object)integer3));
      assertFalse(integer4.equals((Object)integer1));
      assertFalse(integer4.equals((Object)integer0));
      assertFalse(integer4.equals((Object)integer2));
      assertNotNull(integer4);
      
      integerArray0[4] = integer4;
      Integer integer5 = new Integer(0);
      assertEquals(0, (int)integer5);
      assertFalse(integer5.equals((Object)integer3));
      assertFalse(integer5.equals((Object)integer4));
      assertFalse(integer5.equals((Object)integer2));
      assertFalse(integer5.equals((Object)integer1));
      assertFalse(integer5.equals((Object)integer0));
      assertNotNull(integer5);
      
      integerArray0[5] = integer5;
      Integer integer6 = new Integer(108);
      assertEquals(108, (int)integer6);
      assertFalse(integer6.equals((Object)integer2));
      assertFalse(integer6.equals((Object)integer1));
      assertFalse(integer6.equals((Object)integer5));
      assertFalse(integer6.equals((Object)integer3));
      assertFalse(integer6.equals((Object)integer4));
      assertFalse(integer6.equals((Object)integer0));
      assertNotNull(integer6);
      
      integerArray0[6] = integer6;
      Integer integer7 = new Integer(31);
      assertEquals(31, (int)integer7);
      assertFalse(integer7.equals((Object)integer6));
      assertFalse(integer7.equals((Object)integer2));
      assertFalse(integer7.equals((Object)integer4));
      assertFalse(integer7.equals((Object)integer0));
      assertFalse(integer7.equals((Object)integer3));
      assertFalse(integer7.equals((Object)integer1));
      assertFalse(integer7.equals((Object)integer5));
      assertNotNull(integer7);
      
      integerArray0[7] = integer7;
      Integer integer8 = new Integer(968);
      assertEquals(968, (int)integer8);
      assertFalse(integer8.equals((Object)integer2));
      assertFalse(integer8.equals((Object)integer7));
      assertFalse(integer8.equals((Object)integer4));
      assertFalse(integer8.equals((Object)integer0));
      assertFalse(integer8.equals((Object)integer3));
      assertFalse(integer8.equals((Object)integer6));
      assertFalse(integer8.equals((Object)integer5));
      assertFalse(integer8.equals((Object)integer1));
      assertNotNull(integer8);
      
      integerArray0[8] = integer8;
      String string2 = StringUtils.join(integerArray0);
      assertEquals("-25611462381281248010831968", string2);
      assertNotNull(string2);
      assertEquals(9, integerArray0.length);
      
      int int0 = StringUtils.compareIgnoreCase((String) null, "offset cannot be negative", false);
      assertEquals(1, int0);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("-25611462381281248010831968");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      String string0 = StringUtils.capitalize((String) null);
      assertNull(string0);
      
      int[] intArray0 = StringUtils.toCodePoints((CharSequence) null);
      assertNull(intArray0);
      
      boolean boolean0 = StringUtils.isAsciiPrintable((CharSequence) null);
      assertFalse(boolean0);
      
      String string1 = StringUtils.join((int[]) null, 'E', (int) 'E', 1462);
      assertNull(string1);
      
      Integer[] integerArray0 = new Integer[9];
      Integer integer0 = new Integer((-2561));
      assertEquals((-2561), (int)integer0);
      assertNotNull(integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(1462);
      assertEquals(1462, (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      
      integerArray0[1] = integer1;
      integerArray0[2] = integer1;
      Integer integer2 = new Integer(128);
      assertEquals(128, (int)integer2);
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertNotNull(integer2);
      
      integerArray0[3] = integer2;
      Integer integer3 = new Integer(1248);
      assertEquals(1248, (int)integer3);
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer1));
      assertNotNull(integer3);
      
      integerArray0[4] = integer3;
      Integer integer4 = new Integer('E');
      assertEquals(69, (int)integer4);
      assertFalse(integer4.equals((Object)integer0));
      assertFalse(integer4.equals((Object)integer3));
      assertFalse(integer4.equals((Object)integer2));
      assertFalse(integer4.equals((Object)integer1));
      assertNotNull(integer4);
      
      integerArray0[5] = integer4;
      Integer integer5 = new Integer(108);
      assertEquals(108, (int)integer5);
      assertFalse(integer5.equals((Object)integer4));
      assertFalse(integer5.equals((Object)integer2));
      assertFalse(integer5.equals((Object)integer1));
      assertFalse(integer5.equals((Object)integer3));
      assertFalse(integer5.equals((Object)integer0));
      assertNotNull(integer5);
      
      integerArray0[6] = integer5;
      Integer integer6 = new Integer(31);
      assertEquals(31, (int)integer6);
      assertFalse(integer6.equals((Object)integer4));
      assertFalse(integer6.equals((Object)integer1));
      assertFalse(integer6.equals((Object)integer2));
      assertFalse(integer6.equals((Object)integer0));
      assertFalse(integer6.equals((Object)integer5));
      assertFalse(integer6.equals((Object)integer3));
      assertNotNull(integer6);
      
      integerArray0[7] = integer6;
      Integer integer7 = new Integer(968);
      assertEquals(968, (int)integer7);
      assertFalse(integer7.equals((Object)integer4));
      assertFalse(integer7.equals((Object)integer5));
      assertFalse(integer7.equals((Object)integer0));
      assertFalse(integer7.equals((Object)integer6));
      assertFalse(integer7.equals((Object)integer1));
      assertFalse(integer7.equals((Object)integer2));
      assertFalse(integer7.equals((Object)integer3));
      assertNotNull(integer7);
      
      integerArray0[8] = integer7;
      String string2 = StringUtils.join(integerArray0);
      assertEquals("-25611462146212812486910831968", string2);
      assertNotNull(string2);
      assertEquals(9, integerArray0.length);
      
      int int0 = StringUtils.compareIgnoreCase((String) null, "offset cannot be negative", false);
      assertEquals(1, int0);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("-25611462146212812486910831968");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      int int1 = StringUtils.indexOfIgnoreCase((CharSequence) null, (CharSequence) "-25611462146212812486910831968");
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      String string0 = StringUtils.trimToNull("{r0tLR>p:.1");
      assertEquals("{r0tLR>p:.1", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.substringAfterLast("bP*b", 243);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.reverseDelimited("-AHe", '&');
      assertEquals("-AHe", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      boolean boolean0 = StringUtils.isNumericSpace("bP*b");
      assertFalse(boolean0);
      
      int int0 = StringUtils.compareIgnoreCase((String) null, "Search and Replace array lengths don't match: ");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      String string0 = StringUtils.rightPad("#", 0, "F1~Sp}mS5");
      assertEquals("#", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.countMatches((CharSequence) "F1~Sp}mS5", (CharSequence) "#");
      assertEquals(0, int0);
      
      // Undeclared exception!
      try { 
        StringUtils.abbreviate("F1~Sp}mS5", "F1~Sp}mS5", 32, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum abbreviation width is 10
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      String string0 = StringUtils.deleteWhitespace(", Length: 0%!)");
      assertEquals(",Length:0%!)", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.substringBefore("Search and Replace aLray lengths don#g match: ", 115);
      assertEquals("Search and Replace aLray length", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[0] = (CharSequence) "Search and Replace aLray length";
      charSequenceArray0[1] = (CharSequence) "Search and Replace aLray lengths don#g match: ";
      boolean boolean0 = StringUtils.isNoneBlank(charSequenceArray0);
      assertTrue(boolean0);
      assertEquals(2, charSequenceArray0.length);
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      String string0 = "{}";
      int int0 = StringUtils.lastIndexOf((CharSequence) "{}", 229, (-1208));
      assertEquals((-1), int0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      CharSequence[] charSequenceArray0 = null;
      String string1 = "eZG4l[P+{3S6OmU!Qg<";
      String string2 = StringUtils.appendIfMissing("eZG4l[P+{3S6OmU!Qg<", "{}", (CharSequence[]) null);
      assertEquals("eZG4l[P+{3S6OmU!Qg<{}", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      // Undeclared exception!
      try { 
        StringUtils.abbreviate("s", "eZG4l[P+{3S6OmU!Qg<{}", (-483), (-483));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum abbreviation width is 22
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      String string0 = " ";
      String string1 = StringUtils.removeAll(" ", " ");
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.containsAny((CharSequence) "", (char[]) null);
      assertFalse(boolean0);
      
      String string2 = StringUtils.deleteWhitespace("\r");
      assertEquals("", string2);
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      String string3 = StringUtils.replaceFirst("u", "\r", (String) null);
      assertEquals("u", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      
      String string4 = StringUtils.LF;
      assertEquals("\n", string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertNotNull(string4);
      
      float[] floatArray0 = new float[0];
      String string5 = StringUtils.join(floatArray0, 'P', 76, 76);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals("", string5);
      assertTrue(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertNotNull(string5);
      assertEquals(0, floatArray0.length);
      
      String string6 = StringUtils.rightPad((String) null, 76, "QG&nv#N");
      assertNull(string6);
      
      String string7 = StringUtils.removeEnd("u", (String) null);
      assertEquals("u", string7);
      assertTrue(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string1));
      assertNotNull(string7);
      
      String string8 = StringUtils.abbreviate(" ", "", 76);
      assertEquals(" ", string8);
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string4));
      assertTrue(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string5));
      assertNotNull(string8);
      
      int int0 = StringUtils.countMatches((CharSequence) "u", 'P');
      assertEquals(0, int0);
      
      Vector<Locale.LanguageRange> vector0 = new Vector<Locale.LanguageRange>();
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertNotNull(vector0);
      
      PriorityQueue<String> priorityQueue0 = new PriorityQueue<String>((Comparator<? super String>) null);
      assertFalse(priorityQueue0.contains(string2));
      assertEquals(0, priorityQueue0.size());
      assertNotNull(priorityQueue0);
      
      TreeSet<String> treeSet0 = new TreeSet<String>();
      assertFalse(treeSet0.contains(string2));
      assertNotNull(treeSet0);
      
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) vector0, (Collection<String>) treeSet0);
      assertFalse(treeSet0.contains(string2));
      assertFalse(list0.contains(string2));
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
      
      boolean boolean1 = treeSet0.isEmpty();
      assertFalse(treeSet0.contains(string2));
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      // Undeclared exception!
      try { 
        treeSet0.add((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.TreeMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      String string0 = StringUtils.reverse("");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("", "", 52);
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      
      String[] stringArray1 = StringUtils.substringsBetween("eT}I:q9BeuY$_CO35", "", "Strings must not be null");
      assertNull(stringArray1);
      
      String string1 = StringUtils.abbreviate("Ljin_BH].Z}plT}X", "", 52, (-32768));
      assertEquals("Ljin_BH].Z}plT}X", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.contains((CharSequence) "", (CharSequence) "Ljin_BH].Z}plT}X");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isAlphanumeric("");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String string2 = StringUtils.substringAfterLast("Ljin_BH].Z}plT}X", "eT}I:q9BeuY$_CO35");
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      String string0 = StringUtils.substringBeforeLast("5", "]U\"z");
      assertEquals("5", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.wrap("y;f", "Exception cloning Cloneable type ");
      assertEquals("Exception cloning Cloneable type y;fException cloning Cloneable type ", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.trimToEmpty("VbdG}rRfNpTl/@3(+");
      assertEquals("VbdG}rRfNpTl/@3(+", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      boolean boolean0 = StringUtils.isEmpty("5");
      assertFalse(boolean0);
      
      String string3 = StringUtils.abbreviate("VbdG}rRfNpTl/@3(+", "", (-3580));
      assertEquals("VbdG}rRfNpTl/@3(+", string3);
      assertFalse(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      
      String string4 = StringUtils.remove("BQ;*!?}c<kQ#2V-u/", "offset cannot be negative");
      assertEquals("BQ;*!?}c<kQ#2V-u/", string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertNotNull(string4);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("BQ;*!?}c<kQ#2V-u/");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      boolean boolean1 = StringUtils.equalsAnyIgnoreCase("", stringArray0);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[6];
      charSequenceArray0[0] = null;
      charSequenceArray0[1] = null;
      charSequenceArray0[2] = null;
      charSequenceArray0[3] = null;
      charSequenceArray0[4] = null;
      charSequenceArray0[5] = null;
      boolean boolean0 = StringUtils.equalsAny((CharSequence) null, charSequenceArray0);
      assertTrue(boolean0);
      assertEquals(6, charSequenceArray0.length);
      
      String string0 = StringUtils.abbreviateMiddle("s-D4{8$Mo,|,xZ", "s-D4{8$Mo,|,xZ", (-357));
      assertEquals("s-D4{8$Mo,|,xZ", string0);
      assertNotNull(string0);
      
      boolean boolean1 = StringUtils.isAlpha("s-D4{8$Mo,|,xZ");
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      char[] charArray0 = new char[0];
      String string1 = StringUtils.join(charArray0, 'V');
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(0, charArray0.length);
      
      String string2 = StringUtils.replaceFirst("s-D4{8$Mo,|,xZ", (String) null, "s-D4{8$Mo,|,xZ");
      assertEquals("s-D4{8$Mo,|,xZ", string2);
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      String string0 = StringUtils.defaultString("offset cannot be negative");
      assertEquals("offset cannot be negative", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.repeat("\r", 5899);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String[] stringArray0 = StringUtils.stripAll((String[]) null, "\r");
      assertNull(stringArray0);
      
      String string2 = StringUtils.truncate("The String must not be empty", 13);
      assertEquals("The String mu", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      String string3 = StringUtils.replaceIgnoreCase("offset cannot be negative", "", "\r");
      assertEquals("offset cannot be negative", string3);
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      
      boolean boolean0 = StringUtils.equalsAnyIgnoreCase(string1, (CharSequence[]) null);
      assertFalse(boolean0);
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string3));
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      String[] stringArray1 = StringUtils.stripAll((String[]) null, "uQB&cW}8!A$B1&<");
      assertNull(stringArray1);
      
      boolean boolean1 = StringUtils.containsOnly((CharSequence) "offset cannot be negative", "The String must not be empty");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String string4 = StringUtils.substringAfterLast("Y@", 5899);
      assertEquals("", string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertNotNull(string4);
      
      String string5 = StringUtils.mid("[ R4Pk;9Invalid locale format: ", 5899, 13);
      assertEquals("", string5);
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertNotNull(string5);
      
      String string6 = StringUtils.swapCase("");
      assertEquals("", string6);
      assertFalse(string6.equals((Object)string3));
      assertTrue(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string0));
      assertTrue(string6.equals((Object)string4));
      assertNotNull(string6);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) null, (CharSequence) "", 13);
      assertEquals((-1), int0);
      
      boolean boolean2 = StringUtils.isEmpty("offset cannot be negative");
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      String string0 = StringUtils.replaceIgnoreCase("org.apache.commons.lang3.ObjectUtils", "Array element ", (String) null);
      assertEquals("org.apache.commons.lang3.ObjectUtils", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) null, (CharSequence) "org.apache.commons.lang3.ObjectUtils", 1524);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      String string0 = StringUtils.reverse("Z");
      assertEquals("Z", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isEmpty("Z");
      assertFalse(boolean0);
      
      char[] charArray0 = new char[8];
      charArray0[0] = '}';
      charArray0[1] = '}';
      charArray0[2] = '}';
      charArray0[5] = '}';
      charArray0[7] = '}';
      boolean boolean1 = StringUtils.containsOnly((CharSequence) "Z", charArray0);
      assertArrayEquals(new char[] {'}', '}', '}', '\u0000', '\u0000', '}', '\u0000', '}'}, charArray0);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals(8, charArray0.length);
      
      String string1 = StringUtils.substringBefore("[~B4m{N_y", "[~B4m{N_y");
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "Z", (CharSequence) "");
      assertEquals(1, int0);
      
      String string2 = StringUtils.overlay("\r", "", 1, (-739));
      assertEquals("", string2);
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      int int1 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "", (CharSequence) "[~B4m{N_y", 140);
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("TW", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertNotNull(locale0);
      
      String string3 = StringUtils.lowerCase("", locale0);
      assertEquals("", string3);
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("TW", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertTrue(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string2));
      assertNotNull(string3);
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      charSequenceArray0[0] = (CharSequence) "8c>!) u,eei!\"I2yC-U";
      String string0 = StringUtils.abbreviate("Y)3n1`2_97u G#5v_Y)3n1`2_97u G#5v_Y)3n1`2_97u G#5v_Y)3n1`2_97u G#5v__", "Y)3n1`2_97u G#5v_Y)3n1`2_97u G#5v_Y)3n1`2_97u G#5v_Y)3n1`2_97u G#5v__", 3497);
      assertEquals("Y)3n1`2_97u G#5v_Y)3n1`2_97u G#5v_Y)3n1`2_97u G#5v_Y)3n1`2_97u G#5v__", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.substringBefore("Y)3n1`2_97u G#5v_Y)3n1`2_97u G#5v_Y)3n1`2_97u G#5v_Y)3n1`2_97u G#5v__", "8c>!) u,eei!\"I2yC-U");
      assertEquals("Y)3n1`2_97u G#5v_Y)3n1`2_97u G#5v_Y)3n1`2_97u G#5v_Y)3n1`2_97u G#5v__", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "Y)3n1`2_97u G#5v_Y)3n1`2_97u G#5v_Y)3n1`2_97u G#5v_Y)3n1`2_97u G#5v__", (CharSequence) "8c>!) u,eei!\"I2yC-U");
      assertEquals(65, int0);
      
      String string2 = StringUtils.overlay("#E#DmCB 7Oacn{t", (String) null, 2, 3497);
      assertEquals("#E", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      String string3 = StringUtils.remove("Y)3n1`2_97u G#5v_Y)3n1`2_97u G#5v_Y)3n1`2_97u G#5v_Y)3n1`2_97u G#5v__", '>');
      assertEquals("Y)3n1`2_97u G#5v_Y)3n1`2_97u G#5v_Y)3n1`2_97u G#5v_Y)3n1`2_97u G#5v__", string3);
      assertTrue(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      
      String string4 = StringUtils.removePattern((String) null, "Q`]rxRB0+*7/d");
      assertNull(string4);
      
      String string5 = StringUtils.replacePattern("Cannot clone Cloneable type ", (String) null, (String) null);
      assertEquals("Cannot clone Cloneable type ", string5);
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertNotNull(string5);
      
      boolean boolean0 = StringUtils.isAsciiPrintable("Cannot clone Cloneable type ");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = 'A';
      charArray0[1] = '[';
      charArray0[2] = '0';
      charArray0[3] = 'B';
      charArray0[4] = 'n';
      charArray0[5] = '$';
      charArray0[6] = 'P';
      charArray0[7] = 'J';
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "Strings must not be null", charArray0);
      assertArrayEquals(new char[] {'A', '[', '0', 'B', 'n', '$', 'P', 'J'}, charArray0);
      assertFalse(boolean0);
      assertEquals(8, charArray0.length);
      
      String string0 = StringUtils.substringBefore("R=X\"eH+!97+RVrt&3^Vg')<ym<3^Vg')<ym<", "[~B4m{N_y");
      assertEquals("R=X\"eH+!97+RVrt&3^Vg')<ym<3^Vg')<ym<", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "R=X\"eH+!97+RVrt&3^Vg')<ym<3^Vg')<ym<", (CharSequence) "[~B4m{N_y");
      assertEquals(34, int0);
      
      String string1 = StringUtils.overlay("9<c0@4", "R=X\"eH+!97+RVrt&3^Vg')<ym<3^Vg')<ym<", (-4817), 36);
      assertEquals("R=X\"eH+!97+RVrt&3^Vg')<ym<3^Vg')<ym<", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      boolean boolean1 = StringUtils.endsWith("R=X\"eH+!97+RVrt&3^Vg')<ym<3^Vg')<ym<", "[~B4m{N_y");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      String string0 = StringUtils.defaultString("Search and Replace array lengths don't match: ");
      assertEquals("Search and Replace array lengths don't match: ", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.substringBefore("Search and Replace array lengths don't match: ", "gJ'2`^I>7>1=?w4kd#m");
      assertEquals("Search and Replace array lengths don't match: ", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "Search and Replace array lengths don't match: ", (CharSequence) "Search and Replace array lengths don't match: ");
      assertEquals(0, int0);
      
      String string2 = StringUtils.overlay("*`'(8", " vs  vs ", 532, 0);
      assertEquals(" vs  vs ", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      float[] floatArray0 = new float[3];
      floatArray0[0] = 0.0F;
      Object[] objectArray0 = new Object[5];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      objectArray0[1] = (Object) 0.0F;
      objectArray0[2] = (Object) 0.0F;
      objectArray0[3] = (Object) 0.0F;
      objectArray0[4] = (Object) 0.0F;
      String string0 = StringUtils.join(objectArray0, "u/#]Z", (-2421), (-2421));
      assertEquals("", string0);
      assertNotNull(string0);
      assertEquals(5, objectArray0.length);
      
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("%:Oe");
      assertNotNull(stringArray0);
      assertEquals(2, stringArray0.length);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "", 2576);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      int int0 = StringUtils.compareIgnoreCase("]u{/y#|E<FROe<8gqC", "]u{/y#|E<FROe<8gqC", true);
      assertEquals(0, int0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      boolean boolean0 = StringUtils.isAnyBlank(charSequenceArray0);
      assertFalse(boolean0);
      assertEquals(0, charSequenceArray0.length);
      
      String[] stringArray0 = StringUtils.substringsBetween("]u{/y#|E<FROe<8gqC", "b>KDW<~HiO0rl*f^", "b>KDW<~HiO0rl*f^");
      assertNull(stringArray0);
      
      byte[] byteArray0 = new byte[0];
      String string0 = StringUtils.join(byteArray0, '3');
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals("", string0);
      assertNotNull(string0);
      assertEquals(0, byteArray0.length);
      
      char[] charArray0 = new char[4];
      charArray0[0] = '3';
      charArray0[1] = '3';
      charArray0[2] = '3';
      charArray0[3] = '#';
      String string1 = StringUtils.join(charArray0, '3');
      assertArrayEquals(new char[] {'3', '3', '3', '#'}, charArray0);
      assertEquals("333333#", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(4, charArray0.length);
      
      String string2 = StringUtils.replaceOnce("5.};Cg", "b>KDW<~HiO0rl*f^", "");
      assertEquals("5.};Cg", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      Charset charset0 = Charset.defaultCharset();
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.toString());
      assertEquals("UTF-8", charset0.name());
      assertNotNull(charset0);
      
      Charset charset1 = Charset.defaultCharset();
      assertEquals("UTF-8", charset1.displayName());
      assertTrue(charset1.canEncode());
      assertEquals("UTF-8", charset1.name());
      assertTrue(charset1.isRegistered());
      assertEquals("UTF-8", charset1.toString());
      assertNotNull(charset1);
      assertSame(charset1, charset0);
      
      String string3 = StringUtils.toEncodedString(byteArray0, charset0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals("", string3);
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.toString());
      assertEquals("UTF-8", charset0.name());
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string0));
      assertNotNull(string3);
      assertSame(charset0, charset1);
      assertEquals(0, byteArray0.length);
      
      int int1 = StringUtils.lastIndexOf((CharSequence) "", 0);
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      String[] stringArray0 = new String[13];
      stringArray0[0] = "{}";
      stringArray0[1] = "{}";
      String string0 = StringUtils.firstNonBlank(stringArray0);
      assertEquals("{}", string0);
      assertNotNull(string0);
      assertEquals(13, stringArray0.length);
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = (-1.0F);
      floatArray0[2] = 1383.2F;
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      Object object2 = new Object();
      assertFalse(object2.equals((Object)object1));
      assertFalse(object2.equals((Object)object0));
      assertNotNull(object2);
      
      String string1 = StringUtils.replaceEachRepeatedly("Exception cloning Cloneable type ", stringArray0, stringArray0);
      assertEquals("Exception cloning Cloneable type ", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(13, stringArray0.length);
      
      boolean boolean0 = StringUtils.equalsAny("Exception cloning Cloneable type ", stringArray0);
      assertFalse(boolean0);
      assertEquals(13, stringArray0.length);
      
      String string2 = StringUtils.removeStart("{}", "{}");
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      Stack<Integer> stack0 = new Stack<Integer>();
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertNotNull(stack0);
      
      Integer integer0 = new Integer(1);
      assertEquals(1, (int)integer0);
      assertNotNull(integer0);
      
      boolean boolean1 = stack0.add(integer0);
      assertTrue(stack0.contains(integer0));
      assertTrue(boolean1);
      assertEquals("[1]", stack0.toString());
      assertEquals(1, stack0.size());
      assertFalse(stack0.isEmpty());
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertFalse(boolean1 == boolean0);
      
      String string3 = StringUtils.join((List<?>) stack0, ':', (-863), Integer.MAX_VALUE);
      assertTrue(stack0.contains(integer0));
      assertFalse(stack0.contains(Integer.MAX_VALUE));
      assertEquals("", string3);
      assertEquals("[1]", stack0.toString());
      assertEquals(1, stack0.size());
      assertFalse(stack0.isEmpty());
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      
      String string4 = StringUtils.replaceOnce("", "Exception cloning Cloneable type ", "\n");
      assertEquals("", string4);
      assertFalse(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertNotNull(string4);
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("BIROD\"s", "BIROD\"s");
      assertNotNull(stringArray0);
      assertEquals(2, stringArray0.length);
      
      String string0 = StringUtils.join((List<?>) null, '$', 928, 0);
      assertNull(string0);
      
      int int0 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      String string1 = StringUtils.leftPad("F~%-6=Wh?B+mgZ*oJ", 1876, '6');
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      Stack<Integer> stack0 = new Stack<Integer>();
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertNotNull(stack0);
      
      String string0 = StringUtils.join((List<?>) stack0, '5', 2044, 32);
      assertFalse(stack0.contains(2044));
      assertEquals("", string0);
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      boolean boolean0 = StringUtils.isNumeric("F1~Sp}mS5");
      assertFalse(boolean0);
      
      String[] stringArray0 = new String[5];
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "";
      String[] stringArray1 = StringUtils.stripAll(stringArray0, "AM[om");
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(5, stringArray0.length);
      assertEquals(5, stringArray1.length);
      
      String string0 = StringUtils.stripStart("F1~Sp}mS5", stringArray0[1]);
      assertEquals("F1~Sp}mS5", string0);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertNotNull(string0);
      assertNotSame(stringArray0, stringArray1);
      assertEquals(5, stringArray0.length);
      
      String string1 = StringUtils.abbreviate(stringArray0[0], stringArray0[1], 947);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertNull(string1);
      assertNotSame(stringArray0, stringArray1);
      assertEquals(5, stringArray0.length);
      
      ArrayList<Locale> arrayList0 = new ArrayList<Locale>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      String string2 = StringUtils.join((List<?>) arrayList0, '^', 10, (-3749));
      assertEquals("", string2);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      char[] charArray0 = new char[2];
      charArray0[0] = '^';
      charArray0[1] = '^';
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "", charArray0);
      assertArrayEquals(new char[] {'^', '^'}, charArray0);
      assertEquals((-1), int0);
      assertEquals(2, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      String string0 = StringUtils.removePattern("/'Hr0O&r)!u=mN", "EnYIv");
      assertEquals("/'Hr0O&r)!u=mN", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "/'Hr0O&r)!u=mN", (CharSequence) "");
      assertEquals(14, int0);
      
      String string1 = StringUtils.unwrap("VU_]gkUQ6", 'j');
      assertEquals("VU_]gkUQ6", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      boolean boolean0 = StringUtils.isNumeric("F1~Sp}mS5");
      assertFalse(boolean0);
      
      String string0 = StringUtils.mid(",ZBZD/YePMWJ[eT0K", 157, (-3749));
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.stripStart("F1~Sp}mS5", "");
      assertEquals("F1~Sp}mS5", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.abbreviate("", "F1~Sp}mS5", 947);
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertNotNull(string2);
      
      CharSequence[] charSequenceArray0 = new CharSequence[7];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "F1~Sp}mS5";
      charSequenceArray0[2] = (CharSequence) "AM[om";
      charSequenceArray0[3] = (CharSequence) "";
      charSequenceArray0[4] = (CharSequence) "F1~Sp}mS5";
      charSequenceArray0[5] = (CharSequence) "";
      CharSequence charSequence0 = StringUtils.firstNonEmpty(charSequenceArray0);
      assertEquals("F1~Sp}mS5", charSequence0);
      assertFalse(charSequence0.equals((Object)string2));
      assertFalse(charSequence0.equals((Object)string0));
      assertTrue(charSequence0.equals((Object)string1));
      assertNotNull(charSequence0);
      assertEquals(7, charSequenceArray0.length);
      
      charSequenceArray0[6] = (CharSequence) "F1~Sp}mS5";
      boolean boolean1 = StringUtils.isAnyBlank(charSequenceArray0);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      assertEquals(7, charSequenceArray0.length);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "AM[om", charSequenceArray0[0]);
      assertEquals(5, int0);
      assertEquals(7, charSequenceArray0.length);
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      Object[] objectArray0 = new Object[7];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[1] = object0;
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      objectArray0[2] = object1;
      Object object2 = new Object();
      assertFalse(object2.equals((Object)object1));
      assertFalse(object2.equals((Object)object0));
      assertNotNull(object2);
      
      String[] stringArray0 = new String[8];
      stringArray0[0] = "od&s310)%'s";
      stringArray0[1] = "...";
      stringArray0[2] = "...";
      stringArray0[3] = "od&s310)%'s";
      stringArray0[5] = "od&s310)%'s";
      String[] stringArray1 = StringUtils.stripAll(stringArray0, "\r");
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(8, stringArray0.length);
      assertEquals(8, stringArray1.length);
      
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "od&s310)%'s", "`$Q5o'S#9:q`|d");
      assertFalse(boolean0);
      
      String string0 = StringUtils.removeFirst("...", "`$Q5o'S#9:q`|d");
      assertEquals("...", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      int int0 = StringUtils.lastIndexOf((CharSequence) "offset cannot be negative", 101, 48);
      assertEquals(24, int0);
      
      String string0 = StringUtils.replace("{}", "yr*vZtQ%\"D7JDe", ">rt:(O", 3463);
      assertEquals("{}", string0);
      assertNotNull(string0);
      
      try { 
        StringUtils.getBytes("%RQV", "Array element }yrRfNpTa/@3(+m");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(UnsupportedEncodingException e) {
      }
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) null;
      String string0 = StringUtils.joinWith((String) null, objectArray0);
      assertEquals("", string0);
      assertNotNull(string0);
      assertEquals(1, objectArray0.length);
      
      String string1 = StringUtils.substring("", 0, 0);
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      long[] longArray0 = new long[7];
      longArray0[0] = (long) 0;
      longArray0[1] = (long) 0;
      longArray0[2] = (long) 0;
      longArray0[3] = (long) 0;
      longArray0[4] = (long) 0;
      longArray0[5] = (long) 0;
      String string2 = StringUtils.rightPad("", 0);
      assertEquals("", string2);
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertNotNull(string2);
      
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) null;
      charSequenceArray0[2] = (CharSequence) null;
      charSequenceArray0[3] = (CharSequence) null;
      int int0 = StringUtils.indexOfDifference(charSequenceArray0);
      assertEquals(0, int0);
      assertEquals(4, charSequenceArray0.length);
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      float[] floatArray0 = new float[3];
      floatArray0[0] = 0.0F;
      floatArray0[1] = 693.284F;
      long[] longArray0 = new long[5];
      longArray0[0] = (long) 'I';
      longArray0[1] = (long) 'I';
      longArray0[2] = (long) 'I';
      longArray0[3] = (long) 'I';
      longArray0[4] = (long) 'I';
      String string0 = StringUtils.join(longArray0, 'I', 1899, 1899);
      assertArrayEquals(new long[] {73L, 73L, 73L, 73L, 73L}, longArray0);
      assertEquals("", string0);
      assertNotNull(string0);
      assertEquals(5, longArray0.length);
      
      String string1 = StringUtils.difference(";v%~0rz3%-Hv~u&u", "wS'8,-hA{:T:");
      assertEquals("wS'8,-hA{:T:", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      charSequenceArray0[0] = (CharSequence) ";v%~0rz3%-Hv~u&u";
      charSequenceArray0[1] = (CharSequence) "wS'8,-hA{:T:";
      charSequenceArray0[2] = (CharSequence) "wS'8,-hA{:T:";
      String string2 = StringUtils.appendIfMissingIgnoreCase("H`+*Od>1O", charSequenceArray0[0], charSequenceArray0);
      assertEquals("H`+*Od>1O;v%~0rz3%-Hv~u&u", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals(4, charSequenceArray0.length);
      
      charSequenceArray0[3] = (CharSequence) "H`+*Od>1O;v%~0rz3%-Hv~u&u";
      String string3 = StringUtils.prependIfMissingIgnoreCase("&%Cwx<#6D+", "/p)?<D@d;4g(/O>", charSequenceArray0);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      assertEquals(4, charSequenceArray0.length);
      
      boolean boolean0 = StringUtils.containsAny(charSequenceArray0[0], (CharSequence) "wS'8,-hA{:T:");
      assertTrue(boolean0);
      assertEquals(4, charSequenceArray0.length);
      
      String string4 = StringUtils.join((Object[]) charSequenceArray0, 'K', 1899, 1899);
      assertEquals("", string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertNotNull(string4);
      assertEquals(4, charSequenceArray0.length);
      
      String string5 = StringUtils.normalizeSpace("p{InCombiningDiacriticalMarks}+");
      assertEquals("p{InCombiningDiacriticalMarks}+", string5);
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertNotNull(string5);
      
      String string6 = StringUtils.trimToNull("p{InCombiningDiacriticalMarks}+");
      assertEquals("p{InCombiningDiacriticalMarks}+", string6);
      assertTrue(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string4));
      assertNotNull(string6);
      
      String string7 = StringUtils.leftPad("p{InCombiningDiacriticalMarks}+", 3742, "p{InCombiningDiacriticalMarks}+");
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string2));
      assertNotNull(string7);
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      String string0 = StringUtils.reverse("");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = new String[0];
      String[] stringArray1 = StringUtils.stripAll(stringArray0, "");
      assertNotNull(stringArray1);
      assertSame(stringArray0, stringArray1);
      assertSame(stringArray1, stringArray0);
      assertEquals(0, stringArray0.length);
      assertEquals(0, stringArray1.length);
      
      String string1 = StringUtils.leftPad("", 76, "F1~Sp}mS5 ");
      assertEquals("F1~Sp}mS5 F1~Sp}mS5 F1~Sp}mS5 F1~Sp}mS5 F1~Sp}mS5 F1~Sp}mS5 F1~Sp}mS5 F1~Sp}", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "P]\"qsSJ", "e");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isAnyBlank(stringArray1);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertSame(stringArray0, stringArray1);
      assertSame(stringArray1, stringArray0);
      assertEquals(0, stringArray0.length);
      assertEquals(0, stringArray1.length);
      
      int[] intArray0 = new int[1];
      intArray0[0] = 76;
      String string2 = StringUtils.join(intArray0, '8', 76, 76);
      assertArrayEquals(new int[] {76}, intArray0);
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals(1, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("?!", 'l');
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      String string0 = StringUtils.abbreviate((String) null, "?!", 108, 322);
      assertNull(string0);
      
      String string1 = StringUtils.abbreviate("?!", (String) null, 322, 322);
      assertEquals("?!", string1);
      assertNotNull(string1);
      
      char[] charArray0 = new char[1];
      charArray0[0] = '7';
      int int0 = StringUtils.indexOfAny((CharSequence) null, charArray0);
      assertArrayEquals(new char[] {'7'}, charArray0);
      assertEquals((-1), int0);
      assertEquals(1, charArray0.length);
      
      String string2 = StringUtils.defaultIfEmpty((String) null, (String) null);
      assertNull(string2);
      
      boolean boolean0 = StringUtils.containsNone((CharSequence) null, "?!");
      assertTrue(boolean0);
      
      String string3 = StringUtils.stripEnd((String) null, "?!");
      assertNull(string3);
      
      String string4 = StringUtils.removeFirst((String) null, (String) null);
      assertNull(string4);
      
      String string5 = StringUtils.center((String) null, 322);
      assertNull(string5);
      
      boolean boolean1 = StringUtils.isWhitespace((CharSequence) null);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      String string6 = StringUtils.repeat((String) null, (String) null, 322);
      assertNull(string6);
      
      String string7 = StringUtils.appendIfMissingIgnoreCase((String) null, (CharSequence) null, stringArray0);
      assertNull(string7);
      assertEquals(1, stringArray0.length);
      
      String string8 = StringUtils.repeat((String) null, 38);
      assertNull(string8);
      
      long[] longArray0 = new long[6];
      longArray0[0] = (long) (-1);
      longArray0[1] = (long) (-1);
      longArray0[2] = (long) '7';
      longArray0[3] = (long) 'l';
      longArray0[4] = (long) 108;
      longArray0[5] = (long) 108;
      String string9 = StringUtils.join(longArray0, 'I', 322, 108);
      assertArrayEquals(new long[] {(-1L), (-1L), 55L, 108L, 108L, 108L}, longArray0);
      assertEquals("", string9);
      assertFalse(string9.equals((Object)string1));
      assertNotNull(string9);
      assertEquals(6, longArray0.length);
      
      String string10 = StringUtils.difference(";v%~0rz3%-Hv~u&u", "-[7)_M(9ys?b094");
      assertEquals("-[7)_M(9ys?b094", string10);
      assertFalse(string10.equals((Object)string1));
      assertFalse(string10.equals((Object)string9));
      assertNotNull(string10);
      
      String string11 = StringUtils.prependIfMissingIgnoreCase("/p)?<D@d;4g(/O>", "?!", stringArray0);
      assertFalse(string11.equals((Object)string1));
      assertFalse(string11.equals((Object)string10));
      assertFalse(string11.equals((Object)string9));
      assertNotNull(string11);
      assertEquals(1, stringArray0.length);
      
      boolean boolean2 = StringUtils.containsAny((CharSequence) null, (CharSequence) null);
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      String string0 = StringUtils.stripToEmpty("G^7|+zFpb:oK?5");
      assertEquals("G^7|+zFpb:oK?5", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.normalizeSpace("j?Yo/[Pl$3");
      assertEquals("j?Yo/[Pl$3", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "G^7|+zFpb:oK?5", (CharSequence) "G^7|+zFpb:oK?5");
      assertEquals(0, int0);
      
      String string2 = StringUtils.removeStart("%!)", ", Length: 0");
      assertEquals("%!)", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      int int1 = StringUtils.indexOfDifference((CharSequence) "%!)", (CharSequence) "G^7|+zFpb:oK?5");
      assertEquals(0, int1);
      assertTrue(int1 == int0);
      
      String string3 = StringUtils.defaultString((String) null, "[>vYQ==jnM*");
      assertEquals("[>vYQ==jnM*", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      long[] longArray0 = new long[7];
      longArray0[0] = (long) '*';
      longArray0[1] = (long) '*';
      longArray0[2] = (long) '*';
      longArray0[3] = (long) '*';
      longArray0[4] = (long) '*';
      longArray0[0] = (long) '*';
      longArray0[6] = (long) '*';
      String string0 = StringUtils.join(longArray0, '*');
      assertArrayEquals(new long[] {42L, 42L, 42L, 42L, 42L, 0L, 42L}, longArray0);
      assertEquals("42*42*42*42*42*0*42", string0);
      assertNotNull(string0);
      assertEquals(7, longArray0.length);
      
      boolean boolean0 = StringUtils.contains((CharSequence) "Array element ", (CharSequence) "Array element ");
      assertTrue(boolean0);
      
      String string1 = StringUtils.replacePattern("42*42*42*42*42*0*42", "42*42*42*42*42*0*42", "k*vOE*`:9[itD=");
      assertEquals("42*42*42*42*42*0*42", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      // Undeclared exception!
      try { 
        StringUtils.getLevenshteinDistance((CharSequence) "42*42*42*42*42*0*42", (CharSequence) "k*vOE*`:9[itD=", (-2425));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Threshold must not be negative
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      String string0 = StringUtils.removePattern("jhb3ibO*jp*H", "PN");
      assertEquals("jhb3ibO*jp*H", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOf((CharSequence) "", 50, (-720));
      assertEquals((-1), int0);
      
      String string1 = StringUtils.left("PN", 101);
      assertEquals("PN", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.normalizeSpace("jhb3ibO*jp*H");
      assertEquals("jhb3ibO*jp*H", string2);
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertNotNull(string2);
      
      boolean boolean0 = StringUtils.startsWith("jhb3ibO*jp*H", "PN");
      assertFalse(boolean0);
      
      String string3 = StringUtils.removeStart("jhb3ibO*jp*H", "jhb3ibO*jp*H");
      assertEquals("", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      String string0 = StringUtils.swapCase(" has no clone method");
      assertEquals(" HAS NO CLONE METHOD", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) " has no clone method", (CharSequence) " HAS NO CLONE METHOD", 1152);
      assertEquals(16, int0);
      
      String string1 = StringUtils.substringAfter("'VE7Gato.F<_", " has no clone method");
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.remove("org.apache.commons.lang3.StringUtils", '+');
      assertEquals("org.apache.commons.lang3.StringUtils", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      String string3 = StringUtils.stripToNull("");
      assertNull(string3);
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      String string0 = StringUtils.substringBeforeLast("", "Minimum abbreviation width is %d");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.uncapitalize(" ");
      assertEquals(" ", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) " ";
      objectArray0[1] = (Object) "";
      String string2 = StringUtils.join(objectArray0);
      assertEquals(" ", string2);
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals(2, objectArray0.length);
      
      int int0 = StringUtils.lastOrdinalIndexOf("Minimum abbreviation width is %d", "Minimum abbreviation width is %d", 0);
      assertEquals((-1), int0);
      
      String string3 = StringUtils.substringBetween((String) null, " ");
      assertNull(string3);
      
      boolean boolean0 = StringUtils.containsWhitespace("");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.containsWhitespace((CharSequence) null);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      int int1 = StringUtils.getLevenshteinDistance((CharSequence) " ", (CharSequence) "", 70);
      assertEquals(1, int1);
      assertFalse(int1 == int0);
      
      int int2 = StringUtils.countMatches((CharSequence) " ", '^');
      assertEquals(0, int2);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      float[] floatArray0 = new float[3];
      floatArray0[0] = 0.0F;
      floatArray0[1] = 0.0F;
      floatArray0[2] = 0.0F;
      String string0 = StringUtils.join(floatArray0, '*');
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals("0.0*0.0*0.0", string0);
      assertNotNull(string0);
      assertEquals(3, floatArray0.length);
      
      boolean boolean0 = StringUtils.containsIgnoreCase("0.0*0.0*0.0", "0.0*0.0*0.0");
      assertTrue(boolean0);
      
      String string1 = StringUtils.wrap("0.0*0.0*0.0", '*');
      assertEquals("*0.0*0.0*0.0*", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "0.0*0.0*0.0", (CharSequence) "0.0*0.0*0.0", 307);
      assertEquals(0, int0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[8];
      charSequenceArray0[0] = (CharSequence) "*0.0*0.0*0.0*";
      charSequenceArray0[1] = (CharSequence) "org.apache.commons.lang3.LocaleUtils";
      charSequenceArray0[3] = (CharSequence) "*0.0*0.0*0.0*";
      charSequenceArray0[4] = (CharSequence) "*0.0*0.0*0.0*";
      charSequenceArray0[5] = (CharSequence) "org.apache.commons.lang3.LocaleUtils";
      charSequenceArray0[6] = (CharSequence) "0.0*0.0*0.0";
      charSequenceArray0[7] = (CharSequence) "org.apache.commons.lang3.LocaleUtils";
      boolean boolean1 = StringUtils.isNoneBlank(charSequenceArray0);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      assertEquals(8, charSequenceArray0.length);
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      String string0 = StringUtils.stripToEmpty("G^7|+zFpb:oK?5");
      assertEquals("G^7|+zFpb:oK?5", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.abbreviate("Minimum abbreviation width with offset is %d", "G^7|+zFpb:oK?5", 4, 52);
      assertEquals("Minimum abbreviation width with offset is %d", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      char[] charArray0 = new char[2];
      charArray0[0] = '&';
      charArray0[1] = 'r';
      int int0 = StringUtils.indexOfAny((CharSequence) "Minimum abbreviation width with offset is %d", charArray0);
      assertArrayEquals(new char[] {'&', 'r'}, charArray0);
      assertEquals(11, int0);
      assertEquals(2, charArray0.length);
      
      String string2 = StringUtils.normalizeSpace("G^7|+zFpb:oK?5");
      assertEquals("G^7|+zFpb:oK?5", string2);
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) 'r';
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      boolean boolean0 = StringUtils.isAllEmpty(charSequenceArray0);
      assertTrue(boolean0);
      assertEquals(0, charSequenceArray0.length);
      
      String string3 = StringUtils.join(charArray0, 'b', (-7293), Integer.MAX_VALUE);
      assertArrayEquals(new char[] {'&', 'r'}, charArray0);
      assertEquals("", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      assertEquals(2, charArray0.length);
      
      boolean boolean1 = StringUtils.isAnyEmpty(charSequenceArray0);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      assertEquals(0, charSequenceArray0.length);
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      String string0 = StringUtils.reverse((String) null);
      assertNull(string0);
      
      int int0 = StringUtils.ordinalIndexOf((CharSequence) null, (CharSequence) null, 14);
      assertEquals((-1), int0);
      
      String string1 = StringUtils.substringAfter((String) null, "ORBVV#");
      assertNull(string1);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("Cloneable type ", 'j');
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      String string2 = StringUtils.abbreviate((String) null, (String) null, 49, 191);
      assertNull(string2);
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      String string0 = StringUtils.removeEnd("org.apache.commons.lang3.ObjectUtils$Null", "@J(?mTkP%H7vTZ-");
      assertEquals("org.apache.commons.lang3.ObjectUtils$Null", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = new String[0];
      String string1 = StringUtils.stripEnd("org.apache.commons.lang3.ObjectUtils$Null", "org.apache.commons.lang3.ObjectUtils$Null");
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.replaceOnceIgnoreCase("@J(?mTkP%H7vTZ-", "@J(?mTkP%H7vTZ-", " vs ");
      assertEquals(" vs ", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      String string3 = StringUtils.substringAfterLast(" vs ", 61);
      assertEquals("", string3);
      assertFalse(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      
      int int0 = StringUtils.countMatches((CharSequence) "", (CharSequence) "org.apache.commons.lang3.ObjectUtils$Null");
      assertEquals(0, int0);
      
      boolean boolean0 = StringUtils.equals((CharSequence) "org.apache.commons.lang3.ObjectUtils$Null", (CharSequence) "");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      String string0 = StringUtils.replace("'_YY'<=}k)uxZ5", "'_YY'<=}k)uxZ5", "'_YY'<=}k)uxZ5", 97);
      assertEquals("'_YY'<=}k)uxZ5", string0);
      assertNotNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[6];
      charSequenceArray0[0] = (CharSequence) "'_YY'<=}k)uxZ5";
      charSequenceArray0[1] = (CharSequence) "'_YY'<=}k)uxZ5";
      charSequenceArray0[2] = (CharSequence) "'_YY'<=}k)uxZ5";
      CharSequence charSequence0 = StringUtils.defaultIfBlank((CharSequence) "'_YY'<=}k)uxZ5", charSequenceArray0[1]);
      assertEquals("'_YY'<=}k)uxZ5", charSequence0);
      assertTrue(charSequence0.equals((Object)string0));
      assertNotNull(charSequence0);
      assertEquals(6, charSequenceArray0.length);
      
      charSequenceArray0[3] = (CharSequence) "'_YY'<=}k)uxZ5";
      charSequenceArray0[4] = (CharSequence) "'_YY'<=}k)uxZ5";
      String string1 = StringUtils.reverseDelimited("Array and element cannot both be null", '4');
      assertEquals("Array and element cannot both be null", string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)charSequence0));
      assertNotNull(string1);
      
      charSequenceArray0[5] = (CharSequence) "Array and element cannot both be null";
      boolean boolean0 = StringUtils.isAllEmpty(charSequenceArray0);
      assertFalse(boolean0);
      assertEquals(6, charSequenceArray0.length);
      
      Locale locale0 = Locale.CANADA;
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("CA", locale0.getCountry());
      assertEquals("en_CA", locale0.toString());
      assertNotNull(locale0);
      
      Locale locale1 = (Locale)locale0.clone();
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("CA", locale0.getCountry());
      assertEquals("en_CA", locale0.toString());
      assertEquals("CA", locale1.getCountry());
      assertEquals("", locale1.getVariant());
      assertEquals("eng", locale1.getISO3Language());
      assertEquals("CAN", locale1.getISO3Country());
      assertEquals("en", locale1.getLanguage());
      assertEquals("en_CA", locale1.toString());
      assertTrue(locale1.equals((Object)locale0));
      assertNotNull(locale1);
      assertNotSame(locale0, locale1);
      assertNotSame(locale1, locale0);
      
      String string2 = locale0.getDisplayName();
      assertEquals("English (Canada)", string2);
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("CA", locale0.getCountry());
      assertEquals("en_CA", locale0.toString());
      assertTrue(locale0.equals((Object)locale1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)charSequence0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertNotSame(locale0, locale1);
      
      Locale locale2 = (Locale)locale0.clone();
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("CA", locale0.getCountry());
      assertEquals("en_CA", locale0.toString());
      assertEquals("CA", locale2.getCountry());
      assertEquals("", locale2.getVariant());
      assertEquals("eng", locale2.getISO3Language());
      assertEquals("CAN", locale2.getISO3Country());
      assertEquals("en", locale2.getLanguage());
      assertEquals("en_CA", locale2.toString());
      assertTrue(locale0.equals((Object)locale1));
      assertTrue(locale2.equals((Object)locale1));
      assertTrue(locale2.equals((Object)locale0));
      assertNotNull(locale2);
      assertNotSame(locale0, locale2);
      assertNotSame(locale0, locale1);
      assertNotSame(locale2, locale0);
      assertNotSame(locale2, locale1);
      
      String[] stringArray0 = Locale.getISOCountries();
      assertNotNull(stringArray0);
      assertEquals(250, stringArray0.length);
      
      String string3 = StringUtils.lowerCase("'_YY'<=}k)uxZ5", locale0);
      assertEquals("'_yy'<=}k)uxz5", string3);
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("CA", locale0.getCountry());
      assertEquals("en_CA", locale0.toString());
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)charSequence0));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertTrue(locale0.equals((Object)locale1));
      assertTrue(locale0.equals((Object)locale2));
      assertNotNull(string3);
      assertNotSame(locale0, locale2);
      assertNotSame(locale0, locale1);
      
      String[] stringArray1 = StringUtils.split("Wx/];^XI&~ct=", '4');
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(1, stringArray1.length);
      
      boolean boolean1 = StringUtils.endsWithAny(charSequenceArray0[5], stringArray1);
      assertFalse(boolean1);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertTrue(boolean1 == boolean0);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(1, stringArray1.length);
      assertEquals(6, charSequenceArray0.length);
      
      String string4 = StringUtils.substring("Array and element cannot both be null", 97, 97);
      assertEquals("", string4);
      assertFalse(string4.equals((Object)charSequence0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertNotNull(string4);
      
      String[] stringArray2 = StringUtils.stripAll(stringArray1);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertFalse(stringArray2.equals((Object)stringArray1));
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertNotNull(stringArray2);
      assertNotSame(stringArray1, stringArray0);
      assertNotSame(stringArray1, stringArray2);
      assertNotSame(stringArray2, stringArray1);
      assertNotSame(stringArray2, stringArray0);
      assertEquals(1, stringArray1.length);
      assertEquals(1, stringArray2.length);
      
      String string5 = StringUtils.defaultIfBlank((String) null, "English (Canada)");
      assertEquals("English (Canada)", string5);
      assertFalse(string5.equals((Object)charSequence0));
      assertFalse(string5.equals((Object)string4));
      assertTrue(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertNotNull(string5);
      
      Supplier<CharSequence> supplier0 = (Supplier<CharSequence>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      String string6 = (String)StringUtils.getIfEmpty(charSequenceArray0[5], supplier0);
      assertEquals("Array and element cannot both be null", string6);
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)charSequence0));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string2));
      assertTrue(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string4));
      assertNotNull(string6);
      assertEquals(6, charSequenceArray0.length);
      
      boolean boolean2 = StringUtils.isMixedCase("Array and element cannot both be null");
      assertTrue(boolean2);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      String string0 = StringUtils.strip("Index: ");
      assertEquals("Index:", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.contains((CharSequence) "Index:", 3);
      assertFalse(boolean0);
      
      String[] stringArray0 = new String[5];
      stringArray0[0] = "Index: ";
      stringArray0[1] = "Index: ";
      stringArray0[2] = "Index:";
      stringArray0[3] = "Index: ";
      stringArray0[4] = "Index: ";
      String[] stringArray1 = StringUtils.stripAll(stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(5, stringArray0.length);
      assertEquals(5, stringArray1.length);
      
      boolean boolean1 = StringUtils.endsWithAny("Index: ", stringArray1);
      assertFalse(boolean1);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertTrue(boolean1 == boolean0);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(5, stringArray0.length);
      assertEquals(5, stringArray1.length);
      
      char[] charArray0 = new char[0];
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "Index: ", charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals((-1), int0);
      assertEquals(0, charArray0.length);
      
      String string1 = StringUtils.replaceAll("E", "v_Q>/,}", "Index:");
      assertEquals("E", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      boolean boolean2 = StringUtils.isMixedCase("Index: ");
      assertTrue(boolean2);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      
      int int1 = StringUtils.indexOf((CharSequence) "Index: ", 4, 54);
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      
      String string2 = StringUtils.defaultString("Index: ");
      assertEquals("Index: ", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      String string0 = "\\u";
      String string1 = StringUtils.wrap((String) null, string0);
      assertNull(string1);
      
      char[] charArray0 = new char[2];
      char char0 = '&';
      charArray0[0] = '&';
      char char1 = 'l';
      charArray0[1] = 'l';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      assertArrayEquals(new char[] {'&', 'l'}, charArray0);
      assertTrue(charBuffer0.hasArray());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(2, charBuffer0.length());
      assertEquals("&l", charBuffer0.toString());
      assertEquals(0, charBuffer0.arrayOffset());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(2, charBuffer0.limit());
      assertEquals(2, charBuffer0.remaining());
      assertEquals(2, charBuffer0.capacity());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.position());
      assertNotNull(charBuffer0);
      assertEquals(2, charArray0.length);
      
      CharBuffer charBuffer1 = charBuffer0.duplicate();
      assertArrayEquals(new char[] {'&', 'l'}, charArray0);
      assertTrue(charBuffer0.hasArray());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(2, charBuffer0.length());
      assertEquals("&l", charBuffer0.toString());
      assertEquals(0, charBuffer0.arrayOffset());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(2, charBuffer0.limit());
      assertEquals(2, charBuffer0.remaining());
      assertEquals(2, charBuffer0.capacity());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer1.isReadOnly());
      assertEquals(2, charBuffer1.remaining());
      assertEquals(2, charBuffer1.capacity());
      assertEquals(2, charBuffer1.limit());
      assertEquals(0, charBuffer1.position());
      assertFalse(charBuffer1.isDirect());
      assertTrue(charBuffer1.hasArray());
      assertEquals(2, charBuffer1.length());
      assertTrue(charBuffer1.hasRemaining());
      assertEquals("&l", charBuffer1.toString());
      assertEquals(0, charBuffer1.arrayOffset());
      assertTrue(charBuffer1.equals((Object)charBuffer0));
      assertNotNull(charBuffer1);
      assertNotSame(charBuffer0, charBuffer1);
      assertNotSame(charBuffer1, charBuffer0);
      assertEquals(2, charArray0.length);
      
      Buffer buffer0 = charBuffer0.clear();
      assertArrayEquals(new char[] {'&', 'l'}, charArray0);
      assertTrue(charBuffer0.hasArray());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(2, charBuffer0.length());
      assertEquals("&l", charBuffer0.toString());
      assertEquals(0, charBuffer0.arrayOffset());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(2, charBuffer0.limit());
      assertEquals(2, charBuffer0.remaining());
      assertEquals(2, charBuffer0.capacity());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.position());
      assertTrue(buffer0.hasRemaining());
      assertFalse(buffer0.isDirect());
      assertTrue(buffer0.hasArray());
      assertFalse(buffer0.isReadOnly());
      assertEquals(0, buffer0.position());
      assertEquals(2, buffer0.limit());
      assertEquals(0, buffer0.arrayOffset());
      assertEquals(2, buffer0.remaining());
      assertEquals(2, buffer0.capacity());
      assertTrue(charBuffer0.equals((Object)charBuffer1));
      assertNotNull(buffer0);
      assertNotSame(charBuffer0, charBuffer1);
      assertEquals(2, charArray0.length);
      
      IntStream intStream0 = charBuffer0.codePoints();
      assertArrayEquals(new char[] {'&', 'l'}, charArray0);
      assertTrue(charBuffer0.hasArray());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(2, charBuffer0.length());
      assertEquals("&l", charBuffer0.toString());
      assertEquals(0, charBuffer0.arrayOffset());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(2, charBuffer0.limit());
      assertEquals(2, charBuffer0.remaining());
      assertEquals(2, charBuffer0.capacity());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.position());
      assertTrue(charBuffer0.equals((Object)charBuffer1));
      assertNotNull(intStream0);
      assertNotSame(charBuffer0, charBuffer1);
      assertEquals(2, charArray0.length);
      
      CharBuffer charBuffer2 = StringUtils.defaultIfBlank(charBuffer0, charBuffer0);
      assertArrayEquals(new char[] {'&', 'l'}, charArray0);
      assertTrue(charBuffer0.hasArray());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(2, charBuffer0.length());
      assertEquals("&l", charBuffer0.toString());
      assertEquals(0, charBuffer0.arrayOffset());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(2, charBuffer0.limit());
      assertEquals(2, charBuffer0.remaining());
      assertEquals(2, charBuffer0.capacity());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.position());
      assertTrue(charBuffer2.hasRemaining());
      assertTrue(charBuffer2.hasArray());
      assertEquals("&l", charBuffer2.toString());
      assertEquals(2, charBuffer2.remaining());
      assertEquals(2, charBuffer2.capacity());
      assertEquals(0, charBuffer2.arrayOffset());
      assertFalse(charBuffer2.isReadOnly());
      assertEquals(2, charBuffer2.limit());
      assertEquals(2, charBuffer2.length());
      assertEquals(0, charBuffer2.position());
      assertFalse(charBuffer2.isDirect());
      assertTrue(charBuffer0.equals((Object)charBuffer1));
      assertTrue(charBuffer2.equals((Object)charBuffer1));
      assertNotNull(charBuffer2);
      assertSame(charBuffer0, charBuffer2);
      assertNotSame(charBuffer0, charBuffer1);
      assertSame(charBuffer2, charBuffer0);
      assertNotSame(charBuffer2, charBuffer1);
      assertEquals(2, charArray0.length);
      
      int int0 = 98;
      int int1 = StringUtils.lastIndexOfIgnoreCase((CharSequence) charBuffer0, (CharSequence) charBuffer0, 98);
      assertArrayEquals(new char[] {'&', 'l'}, charArray0);
      assertEquals(0, int1);
      assertTrue(charBuffer0.hasArray());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(2, charBuffer0.length());
      assertEquals("&l", charBuffer0.toString());
      assertEquals(0, charBuffer0.arrayOffset());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(2, charBuffer0.limit());
      assertEquals(2, charBuffer0.remaining());
      assertEquals(2, charBuffer0.capacity());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.position());
      assertTrue(charBuffer0.equals((Object)charBuffer1));
      assertFalse(int1 == int0);
      assertSame(charBuffer0, charBuffer2);
      assertNotSame(charBuffer0, charBuffer1);
      assertEquals(2, charArray0.length);
      
      String string2 = StringUtils.removeEnd((String) null, (String) null);
      assertNull(string2);
      
      String string3 = "Exception cloning Cloneable type ";
      int int2 = (-2535);
      // Undeclared exception!
      try { 
        StringUtils.abbreviate("Exception cloning Cloneable type ", (-2535), (-2535));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum abbreviation width is 4
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      Object[] objectArray0 = new Object[7];
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("~`#!1A^0|PHyiy");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      String string0 = StringUtils.stripAccents("~`#!1A^0|PHyiy");
      assertEquals("~`#!1A^0|PHyiy", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.wrapIfMissing("~`#!1A^0|PHyiy", 'm');
      assertEquals("m~`#!1A^0|PHyiym", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      CharSequence charSequence0 = StringUtils.defaultIfBlank((CharSequence) "~`#!1A^0|PHyiy", (CharSequence) "~`#!1A^0|PHyiy");
      assertEquals("~`#!1A^0|PHyiy", charSequence0);
      assertFalse(charSequence0.equals((Object)string1));
      assertTrue(charSequence0.equals((Object)string0));
      assertNotNull(charSequence0);
      
      boolean boolean0 = StringUtils.endsWithAny("~`#!1A^0|PHyiy", stringArray0);
      assertTrue(boolean0);
      assertEquals(1, stringArray0.length);
      
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "GE IJm*plwq,C12", (char[]) null);
      assertEquals((-1), int0);
      
      String[] stringArray1 = StringUtils.splitPreserveAllTokens("~`#!1A^0|PHyiy", 't');
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(1, stringArray1.length);
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      Object[] objectArray0 = new Object[7];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      objectArray0[1] = object1;
      long[] longArray0 = new long[0];
      String string0 = StringUtils.join(longArray0, ')');
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals("", string0);
      assertNotNull(string0);
      assertEquals(0, longArray0.length);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "", (CharSequence) "", 8);
      assertEquals(0, int0);
      
      String string1 = StringUtils.getDigits("\r");
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.repeat((String) null, 108);
      assertNull(string2);
      
      String string3 = StringUtils.stripToEmpty("org.apache.commons.lang3.CharSequenceUtils");
      assertEquals("org.apache.commons.lang3.CharSequenceUtils", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      
      int int1 = StringUtils.indexOfIgnoreCase((CharSequence) null, (CharSequence) "org.apache.commons.lang3.CharSequenceUtils", 2914);
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      
      String string4 = StringUtils.unwrap((String) null, ')');
      assertNull(string4);
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      charSequenceArray0[0] = (CharSequence) "8c>!) u,eei!\"I2yC-U";
      charSequenceArray0[1] = (CharSequence) "8c>!) u,eei!\"I2yC-U";
      String string0 = StringUtils.rightPad((String) null, 23, 'r');
      assertNull(string0);
      
      charSequenceArray0[2] = (CharSequence) null;
      boolean boolean0 = StringUtils.startsWithAny("8c>!) u,eei!\"I2yC-U", charSequenceArray0);
      assertTrue(boolean0);
      assertEquals(3, charSequenceArray0.length);
      
      String string1 = StringUtils.unwrap("\rArray element ", "JY@o8b");
      assertEquals("\rArray element ", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.center("\rArray element ", 23, 'r');
      assertEquals("rrrr\rArray element rrrr", string2);
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "rrrr\rArray element rrrr", (CharSequence) "\rArray element ");
      assertEquals((-1), int0);
      
      String string3 = StringUtils.substringBeforeLast("[D/.5Q]{sGZM2sH<]", "Array and element cannot both be null");
      assertEquals("[D/.5Q]{sGZM2sH<]", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      
      String string4 = StringUtils.rightPad("j&HQ<(>&J!C2Z", 23, 'r');
      assertEquals("j&HQ<(>&J!C2Zrrrrrrrrrr", string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertNotNull(string4);
      
      String string5 = StringUtils.unwrap("G^7|+zFpb:oK?5", (String) null);
      assertEquals("G^7|+zFpb:oK?5", string5);
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertNotNull(string5);
      
      int int1 = StringUtils.indexOfDifference((CharSequence) "JY@o8b", (CharSequence) "G^7|+zFpb:oK?5");
      assertEquals(0, int1);
      assertFalse(int1 == int0);
      
      String[] stringArray0 = StringUtils.splitByCharacterType("\r");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      String string6 = StringUtils.chomp("JY@o8b", (String) null);
      assertEquals("JY@o8b", string6);
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string3));
      assertNotNull(string6);
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      String string0 = StringUtils.CR;
      assertEquals("\r", string0);
      assertNotNull(string0);
      
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) "\r";
      objectArray0[1] = (Object) "\r";
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[4] = object0;
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      objectArray0[3] = object1;
      objectArray0[4] = (Object) "\r";
      objectArray0[5] = (Object) "";
      String string1 = StringUtils.joinWith("\r", objectArray0);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(6, objectArray0.length);
      
      long[] longArray0 = new long[0];
      String string2 = StringUtils.join(longArray0, '5');
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals(0, longArray0.length);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "\r", (CharSequence) "clone", (-1002));
      assertEquals((-1), int0);
      
      String string3 = StringUtils.getDigits("\r");
      assertEquals("", string3);
      assertFalse(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      
      String string4 = StringUtils.stripStart("clone", "");
      assertEquals("clone", string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertNotNull(string4);
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      String[] stringArray0 = new String[0];
      String string0 = StringUtils.getCommonPrefix(stringArray0);
      assertEquals("", string0);
      assertNotNull(string0);
      assertEquals(0, stringArray0.length);
      
      boolean[] booleanArray0 = new boolean[16];
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      int int0 = StringUtils.indexOfAny((CharSequence) "", (CharSequence[]) stringArray0);
      assertEquals((-1), int0);
      assertEquals(0, stringArray0.length);
      
      Locale locale0 = Locale.ITALY;
      assertEquals("it", locale0.getLanguage());
      assertEquals("IT", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("it_IT", locale0.toString());
      assertEquals("ita", locale0.getISO3Language());
      assertNotNull(locale0);
      
      int int1 = StringUtils.getFuzzyDistance("", "", locale0);
      assertEquals(0, int1);
      assertEquals("it", locale0.getLanguage());
      assertEquals("IT", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("it_IT", locale0.toString());
      assertEquals("ita", locale0.getISO3Language());
      assertFalse(int1 == int0);
      
      int[] intArray0 = new int[7];
      intArray0[0] = 13;
      intArray0[1] = (int) 'A';
      intArray0[2] = 13;
      intArray0[3] = (int) 'A';
      intArray0[4] = (-1);
      intArray0[5] = (-4492);
      intArray0[6] = 13;
      String string1 = StringUtils.join(intArray0, 'A');
      assertArrayEquals(new int[] {13, 65, 13, 65, (-1), (-4492), 13}, intArray0);
      assertEquals("13A65A13A65A-1A-4492A13", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(7, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      String string0 = StringUtils.upperCase("Strings must not be null");
      assertEquals("STRINGS MUST NOT BE NULL", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.deleteWhitespace("Dh<PG9l");
      assertEquals("Dh<PG9l", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.isAllUpperCase("Dh<PG9l");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isNotEmpty("Dh<PG9l");
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      char[] charArray0 = new char[3];
      charArray0[0] = '$';
      charArray0[1] = 'v';
      charArray0[2] = 'O';
      boolean boolean2 = StringUtils.containsNone((CharSequence) "Dh<PG9l", charArray0);
      assertArrayEquals(new char[] {'$', 'v', 'O'}, charArray0);
      assertTrue(boolean2);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertEquals(3, charArray0.length);
      
      boolean[] booleanArray0 = new boolean[19];
      booleanArray0[0] = true;
      String string2 = StringUtils.join(booleanArray0, '#', 4, (-211));
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals(19, booleanArray0.length);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "Dh<PG9l", 63879);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      String string0 = StringUtils.substring("bjX'A", 1301);
      assertEquals("", string0);
      assertNotNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[7];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[4] = (CharSequence) "bjX'A";
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(108).when(comparator0).compare(anyString() , anyString());
      PriorityQueue<String> priorityQueue0 = new PriorityQueue<String>(comparator0);
      assertFalse(priorityQueue0.contains(""));
      assertEquals(0, priorityQueue0.size());
      assertNotNull(priorityQueue0);
      
      boolean boolean0 = priorityQueue0.add("WoSAV/xf>{FzJdM");
      assertFalse(priorityQueue0.contains(""));
      assertTrue(priorityQueue0.contains("WoSAV/xf>{FzJdM"));
      assertTrue(boolean0);
      assertEquals(1, priorityQueue0.size());
      
      boolean boolean1 = priorityQueue0.add("d<@38vwUK ~XpQ%8IZ");
      assertFalse(priorityQueue0.contains(""));
      assertTrue(priorityQueue0.contains("d<@38vwUK ~XpQ%8IZ"));
      assertTrue(boolean1);
      assertEquals(2, priorityQueue0.size());
      assertTrue(boolean1 == boolean0);
      
      Vector<Locale.LanguageRange> vector0 = new Vector<Locale.LanguageRange>();
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertNotNull(vector0);
      
      String string1 = StringUtils.join((Iterable<?>) priorityQueue0, "bjX'A");
      assertFalse(priorityQueue0.contains(""));
      assertTrue(priorityQueue0.contains("d<@38vwUK ~XpQ%8IZ"));
      assertEquals("WoSAV/xf>{FzJdMbjX'Ad<@38vwUK ~XpQ%8IZ", string1);
      assertEquals(2, priorityQueue0.size());
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) 1301;
      String[] stringArray0 = new String[8];
      stringArray0[0] = "";
      stringArray0[1] = "bjX'A";
      stringArray0[2] = "d<@38vwUK ~XpQ%8IZ";
      stringArray0[3] = "WoSAV/xf>{FzJdMbjX'Ad<@38vwUK ~XpQ%8IZ";
      stringArray0[4] = "TzN=*~J";
      stringArray0[5] = "";
      stringArray0[6] = "bjX'A";
      stringArray0[7] = "WoSAV/xf>{FzJdMbjX'Ad<@38vwUK ~XpQ%8IZ";
      // Undeclared exception!
      try { 
        StringUtils.replaceEachRepeatedly("WoSAV/xf>{FzJdMbjX'Ad<@38vwUK ~XpQ%8IZ", stringArray0, stringArray0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Aborting to protect against StackOverflowError - output of one loop is the input of another
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      boolean boolean0 = StringUtils.isNumeric("F1~Sp}mS5");
      assertFalse(boolean0);
      
      String[] stringArray0 = new String[5];
      stringArray0[0] = "";
      stringArray0[1] = ",ZBZD/YePMWJ[eT0K";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "";
      String[] stringArray1 = StringUtils.stripAll(stringArray0, "AM[om");
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(5, stringArray0.length);
      assertEquals(5, stringArray1.length);
      
      String string0 = StringUtils.mid(",ZBZD/YePMWJ[eT0K", 157, (-3749));
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.stripStart("F1~Sp}mS5", ",ZBZD/YePMWJ[eT0K");
      assertEquals("F1~Sp}mS5", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.abbreviate("", ",ZBZD/YePMWJ[eT0K", 947);
      assertEquals("", string2);
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      String string0 = StringUtils.stripToEmpty("G^7|+zFpb:oK?5");
      assertEquals("G^7|+zFpb:oK?5", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.abbreviate("Minimum abbreviation width with offset is %d", "G^7|+zFpb:oK?5", 4, 52);
      assertEquals("Minimum abbreviation width with offset is %d", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      char[] charArray0 = new char[2];
      charArray0[1] = 'r';
      int int0 = StringUtils.indexOfAny((CharSequence) "Minimum abbreviation width with offset is %d", charArray0);
      assertArrayEquals(new char[] {'\u0000', 'r'}, charArray0);
      assertEquals(11, int0);
      assertEquals(2, charArray0.length);
      
      String string2 = StringUtils.normalizeSpace("G^7|+zFpb:oK?5");
      assertEquals("G^7|+zFpb:oK?5", string2);
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) 'r';
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[1] = object0;
      objectArray0[2] = (Object) '\u0000';
      objectArray0[3] = (Object) "Minimum abbreviation width with offset is %d";
      String string3 = StringUtils.join(objectArray0, ")QV6mP/+kjIR-", 52, 7);
      assertEquals("", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      assertEquals(4, objectArray0.length);
      
      boolean boolean0 = StringUtils.endsWithIgnoreCase("", "G^7|+zFpb:oK?5");
      assertFalse(boolean0);
      
      int int1 = StringUtils.lastOrdinalIndexOf("Minimum abbreviation width with offset is %d", "", 10);
      assertEquals(44, int1);
      assertFalse(int1 == int0);
      
      int int2 = StringUtils.compare("G^7|+zFpb:oK?5", "G^7|+zFpb:oK?5", false);
      assertEquals(0, int2);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[7];
      charSequenceArray0[0] = (CharSequence) "G^7|+zFpb:oK?5";
      charSequenceArray0[1] = (CharSequence) "";
      charSequenceArray0[2] = (CharSequence) "Minimum abbreviation width with offset is %d";
      charSequenceArray0[3] = (CharSequence) "G^7|+zFpb:oK?5";
      charSequenceArray0[4] = (CharSequence) ")QV6mP/+kjIR-";
      charSequenceArray0[5] = (CharSequence) "G^7|+zFpb:oK?5";
      charSequenceArray0[6] = (CharSequence) "Minimum abbreviation width with offset is %d";
      boolean boolean1 = StringUtils.isAnyEmpty(charSequenceArray0);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      assertEquals(7, charSequenceArray0.length);
      
      String string4 = StringUtils.substring(" q", (-3503));
      assertEquals(" q", string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertNotNull(string4);
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      String string0 = StringUtils.substringAfter("[D/.5Q]{sGZM2sH<] in an array of ", "!");
      assertEquals("", string0);
      assertNotNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[0] = (CharSequence) "!";
      charSequenceArray0[1] = (CharSequence) "!";
      int int0 = StringUtils.compare("[!V", "[!V", false);
      assertEquals(0, int0);
      
      String string1 = StringUtils.chop("Locale must not be null");
      assertEquals("Locale must not be nul", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      int int1 = StringUtils.indexOf((CharSequence) "[D/.5Q]{sGZM2sH<] in an array of ", 0);
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      Object[] objectArray0 = new Object[7];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      String string0 = StringUtils.chomp("l' ~Wohr[dG3\"ig.", "l' ~Wohr[dG3\"ig.");
      assertEquals("", string0);
      assertNotNull(string0);
      
      charSequenceArray0[0] = (CharSequence) "";
      float[] floatArray0 = new float[3];
      floatArray0[0] = 43.8F;
      floatArray0[1] = 2162.6243F;
      floatArray0[2] = 1722.76F;
      String string1 = StringUtils.join(floatArray0, 'w');
      assertArrayEquals(new float[] {43.8F, 2162.6243F, 1722.76F}, floatArray0, 0.01F);
      assertEquals("43.8w2162.6243w1722.76", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(3, floatArray0.length);
      
      charSequenceArray0[1] = (CharSequence) "43.8w2162.6243w1722.76";
      String string2 = StringUtils.strip("mz#}}x6>_E/X");
      assertEquals("mz#}}x6>_E/X", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      charSequenceArray0[2] = (CharSequence) "mz#}}x6>_E/X";
      String string3 = StringUtils.substringBetween("mz#}}x6>_E/X", "{}");
      assertNull(string3);
      
      charSequenceArray0[3] = (CharSequence) null;
      String string4 = StringUtils.EMPTY;
      assertEquals("", string4);
      assertFalse(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertNotNull(string4);
      
      charSequenceArray0[4] = (CharSequence) "";
      boolean boolean0 = StringUtils.isAnyEmpty(charSequenceArray0);
      assertTrue(boolean0);
      assertEquals(5, charSequenceArray0.length);
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      String string0 = StringUtils.join((Object[]) charSequenceArray0, 'n');
      assertEquals("", string0);
      assertNotNull(string0);
      assertEquals(1, charSequenceArray0.length);
      
      String string1 = StringUtils.substringBetween("F:]4oQ_s0p=x+y", "\n\n", ",?j;)2C|:EN5FkD]]");
      assertNull(string1);
      
      char[] charArray0 = new char[3];
      charArray0[0] = 'w';
      charArray0[1] = 'F';
      charArray0[2] = '|';
      int int0 = StringUtils.indexOfAny((CharSequence) ",?j;)2C|:EN5FkD]]", "QNz.");
      assertEquals(10, int0);
      
      boolean boolean0 = StringUtils.isNumeric(",?j;)2C|:EN5FkD]]");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isAlphanumeric("qD/.5Q]{&GZM2vH<]");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      int int1 = StringUtils.indexOfAny((CharSequence) "F:]4oQ_s0p=x+y", charSequenceArray0);
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      assertEquals(1, charSequenceArray0.length);
      
      String string2 = StringUtils.truncate(" ", 5867);
      assertEquals(" ", string2);
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      short[] shortArray0 = new short[0];
      String string3 = StringUtils.join(shortArray0, '|');
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals("", string3);
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string0));
      assertNotNull(string3);
      assertEquals(0, shortArray0.length);
      
      String[] stringArray0 = StringUtils.split(" ");
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      
      String[] stringArray1 = StringUtils.splitPreserveAllTokens((String) null, "[D/.5Q]{sGZM2sH<] in an array of ");
      assertNull(stringArray1);
      
      String string4 = StringUtils.reverse((String) null);
      assertNull(string4);
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      String string0 = StringUtils.unwrap("t)mzG1WCD1k#4d(PK\"#", 's');
      assertEquals("t)mzG1WCD1k#4d(PK\"#", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.reverse((String) null);
      assertNull(string1);
      
      boolean boolean0 = StringUtils.isEmpty((CharSequence) null);
      assertTrue(boolean0);
      
      String string2 = StringUtils.removeStart("hU7", (String) null);
      assertEquals("hU7", string2);
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      int[] intArray0 = StringUtils.toCodePoints((CharSequence) null);
      assertNull(intArray0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens((String) null, "t)mzG1WCD1k#4d(PK\"#");
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      String string0 = StringUtils.substring("gbFYcsf", 1513);
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "", (CharSequence) "gbFYcsf", 1513);
      assertEquals((-1), int0);
      
      char[] charArray0 = new char[6];
      charArray0[0] = '7';
      charArray0[1] = '5';
      charArray0[2] = 'R';
      charArray0[3] = '?';
      charArray0[4] = '[';
      charArray0[5] = ',';
      boolean boolean0 = StringUtils.containsNone((CharSequence) null, charArray0);
      assertArrayEquals(new char[] {'7', '5', 'R', '?', '[', ','}, charArray0);
      assertTrue(boolean0);
      assertEquals(6, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      String string0 = StringUtils.substringBeforeLast("6@I@zB4T<hToDy+g}w", "]");
      assertEquals("6@I@zB4T<hToDy+g}w", string0);
      assertNotNull(string0);
      
      ArrayDeque<String> arrayDeque0 = new ArrayDeque<String>();
      assertFalse(arrayDeque0.contains("6@I@zB4T<hToDy+g}w"));
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      assertNotNull(arrayDeque0);
      
      Iterator<String> iterator0 = arrayDeque0.iterator();
      assertFalse(arrayDeque0.contains("6@I@zB4T<hToDy+g}w"));
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      assertNotNull(iterator0);
      
      String string1 = StringUtils.join(iterator0, ')');
      assertFalse(arrayDeque0.contains("6@I@zB4T<hToDy+g}w"));
      assertEquals("", string1);
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      String string0 = StringUtils.toRootUpperCase("");
      assertEquals("", string0);
      assertNotNull(string0);
      
      char[] charArray0 = new char[0];
      boolean boolean0 = StringUtils.containsNone((CharSequence) "", charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertTrue(boolean0);
      assertEquals(0, charArray0.length);
      
      boolean boolean1 = StringUtils.isAlphanumeric("");
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      String string1 = StringUtils.wrap("{", "");
      assertEquals("{", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.deleteWhitespace("EcJ[,+c9[7PB7");
      assertEquals("EcJ[,+c9[7PB7", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      boolean boolean2 = StringUtils.equalsIgnoreCase("EcJ[,+c9[7PB7", "EcJ[,+c9[7PB7");
      assertTrue(boolean2);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      Locale locale0 = new Locale("{", ", '");
      assertEquals("{", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals(", '", locale0.getCountry());
      assertEquals("{_, '", locale0.toString());
      assertNotNull(locale0);
      
      String string3 = StringUtils.defaultString("Search and Replace array lengths don't match: ");
      assertEquals("Search and Replace array lengths don't match: ", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      
      String string4 = StringUtils.repeat("-h}", 104);
      assertEquals("-h}-h}-h}-h}-h}-h}-h}-h}-h}-h}-h}-h}-h}-h}-h}-h}-h}-h}-h}-h}-h}-h}-h}-h}-h}-h}-h}-h}-h}-h}-h}-h}-h}-h}-h}-h}-h}-h}-h}-h}-h}-h}-h}-h}-h}-h}-h}-h}-h}-h}-h}-h}-h}-h}-h}-h}-h}-h}-h}-h}-h}-h}-h}-h}-h}-h}-h}-h}-h}-h}-h}-h}-h}-h}-h}-h}-h}-h}-h}-h}-h}-h}-h}-h}-h}-h}-h}-h}-h}-h}-h}-h}-h}-h}-h}-h}-h}-h}-h}-h}-h}-h}-h}-h}", string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertNotNull(string4);
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      int int0 = StringUtils.lastIndexOf((CharSequence) "{}", 229, (-1208));
      assertEquals((-1), int0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (-33);
      shortArray0[1] = (short)127;
      String string0 = StringUtils.join(shortArray0, 'R');
      assertArrayEquals(new short[] {(short) (-33), (short)127}, shortArray0);
      assertEquals("-33R127", string0);
      assertNotNull(string0);
      assertEquals(2, shortArray0.length);
      
      int[] intArray0 = StringUtils.toCodePoints("{}");
      assertArrayEquals(new int[] {123, 125}, intArray0);
      assertNotNull(intArray0);
      assertEquals(2, intArray0.length);
      
      boolean boolean0 = StringUtils.isAllLowerCase("{}");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      String string0 = StringUtils.deleteWhitespace(" is not in the range '0' - '9'");
      assertEquals("isnotintherange'0'-'9'", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.countMatches((CharSequence) "isnotintherange'0'-'9'", 'v');
      assertEquals(0, int0);
      
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) '*';
      floatArray0[1] = (float) '*';
      floatArray0[2] = 0.0F;
      floatArray0[3] = 1972.0F;
      floatArray0[4] = 0.0F;
      floatArray0[5] = 0.0F;
      floatArray0[6] = 0.0F;
      floatArray0[7] = (float) '*';
      String string1 = StringUtils.join(floatArray0, 'r');
      assertArrayEquals(new float[] {42.0F, 42.0F, 0.0F, 1972.0F, 0.0F, 0.0F, 0.0F, 42.0F}, floatArray0, 0.01F);
      assertEquals("42.0r42.0r0.0r1972.0r0.0r0.0r0.0r42.0", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(8, floatArray0.length);
      
      boolean boolean0 = StringUtils.containsIgnoreCase(" is not in the range '0' - '9'", "42.0r42.0r0.0r1972.0r0.0r0.0r0.0r42.0");
      assertFalse(boolean0);
      
      String string2 = StringUtils.wrap("[D/.5Q]{sGZM2sH<] in an array of ", 'v');
      assertEquals("v[D/.5Q]{sGZM2sH<] in an array of v", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      String string3 = StringUtils.strip("v[D/.5Q]{sGZM2sH<] in an array of v", "[D/.5Q]{sGZM2sH<] in an array of ");
      assertEquals("v[D/.5Q]{sGZM2sH<] in an array of v", string3);
      assertTrue(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      
      int int1 = StringUtils.compare("maxWith cannot be negative", "#", false);
      assertEquals(74, int1);
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      float[] floatArray0 = new float[2];
      floatArray0[0] = 1.0F;
      floatArray0[1] = 0.0F;
      String string0 = StringUtils.join(floatArray0, 'k', 56, 56);
      assertArrayEquals(new float[] {1.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals("", string0);
      assertNotNull(string0);
      assertEquals(2, floatArray0.length);
      
      int[] intArray0 = new int[7];
      intArray0[0] = (int) 'k';
      intArray0[1] = 56;
      intArray0[2] = 56;
      intArray0[3] = (int) 'k';
      intArray0[4] = 56;
      intArray0[5] = Integer.MAX_VALUE;
      intArray0[6] = 56;
      String string1 = StringUtils.join(intArray0, 'e');
      assertArrayEquals(new int[] {107, 56, 56, 107, 56, Integer.MAX_VALUE, 56}, intArray0);
      assertEquals("107e56e56e107e56e2147483647e56", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(7, intArray0.length);
      
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "";
      boolean boolean0 = StringUtils.startsWithAny("107e56e56e107e56e2147483647e56", charSequenceArray0);
      assertTrue(boolean0);
      assertEquals(2, charSequenceArray0.length);
      
      String string2 = StringUtils.wrapIfMissing("", 'k');
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertNotNull(string2);
      
      int int0 = StringUtils.indexOfIgnoreCase(charSequenceArray0[0], (CharSequence) "", 56);
      assertEquals((-1), int0);
      assertEquals(2, charSequenceArray0.length);
      
      String string3 = StringUtils.substringBetween("Y)3n1`2_97u G#5v_Y)3n1`2_97u G#5v_Y)3n1`2_97u G#5v_Y)3n1`2_97u G#5v__", "Y)3n1`2_97u G#5v_Y)3n1`2_97u G#5v_Y)3n1`2_97u G#5v_Y)3n1`2_97u G#5v__", "yt*]2?C(}RNCP");
      assertNull(string3);
      
      boolean boolean1 = StringUtils.contains((CharSequence) "107e56e56e107e56e2147483647e56", charSequenceArray0[0]);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals(2, charSequenceArray0.length);
      
      int int1 = StringUtils.compare("yt*]2?C(}RNCP", (String) null, true);
      assertEquals(1, int1);
      assertFalse(int1 == int0);
      
      // Undeclared exception!
      try { 
        StringUtils.join(floatArray0, '\"', (-1502), 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1502
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      String string0 = StringUtils.removePattern("Array element ", "");
      assertEquals("Array element ", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOf((CharSequence) "", 3606, 0);
      assertEquals((-1), int0);
      
      String string1 = StringUtils.left("ZLXv.[H", 3606);
      assertEquals("ZLXv.[H", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[8];
      charSequenceArray0[0] = (CharSequence) "ZLXv.[H";
      charSequenceArray0[1] = (CharSequence) "ZLXv.[H";
      charSequenceArray0[2] = (CharSequence) "Array element ";
      charSequenceArray0[3] = (CharSequence) "ZLXv.[H";
      charSequenceArray0[4] = (CharSequence) "";
      charSequenceArray0[5] = (CharSequence) "ZLXv.[H";
      charSequenceArray0[6] = (CharSequence) "ZLXv.[H";
      charSequenceArray0[7] = (CharSequence) "Array element ";
      String string2 = StringUtils.prependIfMissingIgnoreCase("ZLXv.[H", "", charSequenceArray0);
      assertEquals("ZLXv.[H", string2);
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals(8, charSequenceArray0.length);
      
      String string3 = StringUtils.removeStart("", "Array element ");
      assertEquals("", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      
      String string4 = StringUtils.substringBeforeLast((String) null, "Array element ");
      assertNull(string4);
      
      String[] stringArray0 = new String[0];
      String string5 = StringUtils.firstNonBlank(stringArray0);
      assertNull(string5);
      assertEquals(0, stringArray0.length);
      
      String string6 = StringUtils.removeIgnoreCase("e{v<'8Xw", "Array element \r");
      assertEquals("e{v<'8Xw", string6);
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string0));
      assertNotNull(string6);
      
      boolean boolean0 = StringUtils.isAlphanumeric("");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isWhitespace("Array element ");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String string7 = StringUtils.replace("", "Array element ", "u]`EaG,L$Y.`J", 3222);
      assertEquals("", string7);
      assertFalse(string7.equals((Object)string2));
      assertTrue(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string0));
      assertNotNull(string7);
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      String string0 = StringUtils.leftPad((String) null, 95);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      String string0 = StringUtils.leftPad("ch", 1028);
      assertNotNull(string0);
      
      int[] intArray0 = StringUtils.toCodePoints(string0);
      assertNotNull(intArray0);
      assertEquals(1028, intArray0.length);
      
      String string1 = StringUtils.center((String) null, (-2909), '|');
      assertNull(string1);
      
      String string2 = StringUtils.wrapIfMissing("ch", '|');
      assertEquals("|ch|", string2);
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      String string0 = StringUtils.deleteWhitespace("C1k-7_rbEbjE6eQS8]^");
      assertEquals("C1k-7_rbEbjE6eQS8]^", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isAllUpperCase("C1k-7_rbEbjE6eQS8]^");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isNotEmpty("C1k-7_rbEbjE6eQS8]^");
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      char[] charArray0 = new char[2];
      boolean boolean2 = StringUtils.containsOnly((CharSequence) "C1k-7_rbEbjE6eQS8]^", charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000'}, charArray0);
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertEquals(2, charArray0.length);
      
      String string1 = StringUtils.substringBefore("C1k-7_rbEbjE6eQS8]^", "C1k-7_rbEbjE6eQS8]^");
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.replaceChars("C1k-7_rbEbjE6eQS8]^", 'Y', '<');
      assertEquals("C1k-7_rbEbjE6eQS8]^", string2);
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertNotNull(string2);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "C1k-7_rbEbjE6eQS8]^", (CharSequence) "C1k-7_rbEbjE6eQS8]^");
      assertEquals(0, int0);
      
      String string3 = StringUtils.unwrap("C1k-7_rbEbjE6eQS8]^", '\u0000');
      assertEquals("C1k-7_rbEbjE6eQS8]^", string3);
      assertTrue(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      
      String string4 = StringUtils.lowerCase("C1k-7_rbEbjE6eQS8]^");
      assertEquals("c1k-7_rbebje6eqs8]^", string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertNotNull(string4);
      
      int int1 = StringUtils.compare("]L8`:_)l3", "]L8`:_)l3", true);
      assertEquals(0, int1);
      assertTrue(int1 == int0);
      
      String string5 = StringUtils.trimToNull("m:dw,:[G;E7G1fRB6");
      assertEquals("m:dw,:[G;E7G1fRB6", string5);
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertNotNull(string5);
      
      String string6 = StringUtils.left("m:dw,:[G;E7G1fRB6", 10);
      assertEquals("m:dw,:[G;E", string6);
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string4));
      assertNotNull(string6);
      
      String string7 = StringUtils.substringBetween("m:dw,:[G;E7G1fRB6", "C1k-7_rbEbjE6eQS8]^");
      assertNull(string7);
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertFalse(linkedList0.contains("C1k-7_rbEbjE6eQS8]^"));
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      boolean boolean0 = StringUtils.containsWhitespace("{}");
      assertFalse(boolean0);
      
      String string0 = StringUtils.chomp("ObjectUtils$Null");
      assertEquals("ObjectUtils$Null", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = StringUtils.substringsBetween("Cannot clone Cloneable type ", "ObjectUtils$Null", "ObjectUtils$Null");
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      String string0 = StringUtils.trimToNull("~Vr");
      assertEquals("~Vr", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.truncate("8pR2B:PK5lx\"7", 0, 32);
      assertEquals("8pR2B:PK5lx\"7", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.deleteWhitespace((String) null);
      assertNull(string2);
      
      CharSequence[] charSequenceArray0 = new CharSequence[6];
      charSequenceArray0[0] = (CharSequence) "~Vr";
      String string3 = StringUtils.getDigits("VbdGVbdG");
      assertEquals("", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      
      charSequenceArray0[1] = (CharSequence) "";
      charSequenceArray0[2] = (CharSequence) "~Vr";
      charSequenceArray0[3] = (CharSequence) null;
      charSequenceArray0[4] = (CharSequence) "~Vr";
      String string4 = StringUtils.substringAfter("offset cannot be negative", 32);
      assertEquals("cannot be negative", string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertNotNull(string4);
      
      charSequenceArray0[5] = (CharSequence) "cannot be negative";
      int int0 = StringUtils.indexOfAny((CharSequence) null, charSequenceArray0);
      assertEquals((-1), int0);
      assertEquals(6, charSequenceArray0.length);
      
      String[] stringArray0 = StringUtils.split((String) null);
      assertNull(stringArray0);
      
      String[] stringArray1 = StringUtils.split("", (String) null);
      assertNotNull(stringArray1);
      assertEquals(0, stringArray1.length);
      
      int int1 = StringUtils.countMatches((CharSequence) null, charSequenceArray0[1]);
      assertEquals(0, int1);
      assertFalse(int1 == int0);
      assertEquals(6, charSequenceArray0.length);
      
      boolean boolean0 = StringUtils.isNumeric("VbdGVbdG");
      assertFalse(boolean0);
      
      String string5 = StringUtils.left("*K", 0);
      assertEquals("", string5);
      assertTrue(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertNotNull(string5);
      
      String string6 = StringUtils.substringBetween("", "F.BHclWk~wl!q=U$~");
      assertNull(string6);
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertFalse(linkedList0.contains("~Vr"));
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      String[] stringArray2 = StringUtils.substringsBetween("@)0S+H7cTN7sp]", ", Length: 0", "~Vr");
      assertNull(stringArray2);
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      charSequenceArray0[0] = (CharSequence) "0FO5}hhQ5YS+G9";
      String string0 = StringUtils.substringBeforeLast("_", "_");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.substringAfterLast(" vs ", "Search and Replace array lengths don't match: Array element Search and Replace array lengths don't match: Array element Search and Replace array lengths don't match: Array element Search and Replace array lengths don't match: Array element Array element ");
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      int int0 = StringUtils.lastIndexOf(charSequenceArray0[0], 3);
      assertEquals((-1), int0);
      assertEquals(4, charSequenceArray0.length);
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      String string0 = StringUtils.replaceAll("L#7", " in an array of ", "\"1qx\"mTJ.$x<o!4w&d");
      assertEquals("L#7", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.repeat("SdK!H", "1", 1);
      assertEquals("SdK!H", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.defaultString("L#7");
      assertEquals("L#7", string2);
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertNotNull(string2);
      
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      charSequenceArray0[0] = (CharSequence) "L#7";
      boolean boolean0 = StringUtils.isAnyBlank(charSequenceArray0);
      assertFalse(boolean0);
      assertEquals(1, charSequenceArray0.length);
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[6];
      charSequenceArray0[0] = null;
      charSequenceArray0[1] = null;
      charSequenceArray0[2] = null;
      charSequenceArray0[3] = null;
      charSequenceArray0[4] = null;
      charSequenceArray0[5] = null;
      boolean boolean0 = StringUtils.equalsAny((CharSequence) null, charSequenceArray0);
      assertTrue(boolean0);
      assertEquals(6, charSequenceArray0.length);
      
      String string0 = StringUtils.abbreviateMiddle("s-D4{8$Mo,|,xZ", "s-D4{8$Mo,|,xZ", (-357));
      assertEquals("s-D4{8$Mo,|,xZ", string0);
      assertNotNull(string0);
      
      boolean boolean1 = StringUtils.isAlpha("s-D4{8$Mo,|,xZ");
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      String[] stringArray0 = new String[8];
      stringArray0[0] = "s-D4{8$Mo,|,xZ";
      stringArray0[1] = "s-D4{8$Mo,|,xZ";
      stringArray0[2] = "s-D4{8$Mo,|,xZ";
      stringArray0[3] = "s-D4{8$Mo,|,xZ";
      stringArray0[4] = "s-D4{8$Mo,|,xZ";
      stringArray0[5] = "s-D4{8$Mo,|,xZ";
      stringArray0[6] = "s-D4{8$Mo,|,xZ";
      stringArray0[7] = "s-D4{8$Mo,|,xZ";
      String[] stringArray1 = StringUtils.stripAll(stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertNotSame(stringArray0, stringArray1);
      assertEquals(8, stringArray1.length);
      assertEquals(8, stringArray0.length);
      
      char[] charArray0 = new char[8];
      charArray0[0] = '{';
      charArray0[1] = '|';
      charArray0[2] = 'n';
      charArray0[3] = '{';
      charArray0[4] = ',';
      charArray0[5] = 'u';
      charArray0[6] = '*';
      charArray0[7] = 'm';
      // Undeclared exception!
      try { 
        StringUtils.join(charArray0, 'm', (-1019), 4632);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1019
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("BIROD\"s", "BIROD\"s");
      assertNotNull(stringArray0);
      assertEquals(2, stringArray0.length);
      
      String[] stringArray1 = StringUtils.substringsBetween("BIROD\"s", "7#pdP&C6=5[#|,K1!", ",|zG'l@!i%E^`3&");
      assertNull(stringArray1);
      
      String[] stringArray2 = StringUtils.stripAll(stringArray0);
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertNotNull(stringArray2);
      assertNotSame(stringArray0, stringArray2);
      assertNotSame(stringArray2, stringArray0);
      assertEquals(2, stringArray0.length);
      assertEquals(2, stringArray2.length);
      
      Vector<Object> vector0 = new Vector<Object>();
      assertFalse(vector0.contains("BIROD\"s"));
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertNotNull(vector0);
      
      String string0 = StringUtils.join((Iterable<?>) vector0, 'W');
      assertFalse(vector0.contains("BIROD\"s"));
      assertEquals("", string0);
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      String string0 = StringUtils.getDigits("");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.strip("", "\"+wX\")epw4U(U.e=V\"+wX\")epw4U(U.e=V");
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "", (CharSequence) "", 2304);
      assertEquals(0, int0);
      
      String string2 = StringUtils.replace("", "", "\"+wX\")epw4U(U.e=V\"+wX\")epw4U(U.e=V", 0);
      assertEquals("", string2);
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      String string3 = StringUtils.substringAfterLast("\"+wX\")epw4U(U.e=V\"+wX\")epw4U(U.e=V", 0);
      assertEquals("", string3);
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      
      int int1 = StringUtils.countMatches((CharSequence) "\"+wX\")epw4U(U.e=V\"+wX\")epw4U(U.e=V", (CharSequence) "");
      assertEquals(0, int1);
      assertTrue(int1 == int0);
      
      boolean boolean0 = StringUtils.equals((CharSequence) "bdGMinimum abbreviation width is %d", (CharSequence) "");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = '2';
      charArray0[1] = '2';
      String string0 = StringUtils.join(charArray0, 'S', 67, 66);
      assertArrayEquals(new char[] {'2', '2', '\u0000'}, charArray0);
      assertEquals("", string0);
      assertNotNull(string0);
      assertEquals(3, charArray0.length);
      
      String string1 = StringUtils.capitalize("w%-aXWX=");
      assertEquals("W%-aXWX=", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      int int0 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      String string2 = StringUtils.replace("1qw$v|Rf;4TR^[", (String) null, "5by@eP", 1238);
      assertEquals("1qw$v|Rf;4TR^[", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = '2';
      charArray0[1] = '2';
      String string0 = StringUtils.join(charArray0, 'S', 67, 66);
      assertArrayEquals(new char[] {'2', '2', '\u0000'}, charArray0);
      assertEquals("", string0);
      assertNotNull(string0);
      assertEquals(3, charArray0.length);
      
      String string1 = StringUtils.capitalize("w%-aXWX=");
      assertEquals("W%-aXWX=", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      int int0 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      String string2 = StringUtils.chop("w%-aXWX=");
      assertEquals("w%-aXWX", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      String[] stringArray0 = new String[2];
      String string0 = StringUtils.substringBetween("U LMiMD(coqb", "Strings must not be null");
      assertNull(string0);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) null, (CharSequence) "Strings must not be null");
      assertEquals((-1), int0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      String string1 = StringUtils.joinWith((String) null, stringArray0);
      assertEquals("", string1);
      assertNotNull(string1);
      assertEquals(2, stringArray0.length);
      
      String string2 = StringUtils.substringBefore("I5Kz", (-3236));
      assertEquals("I5Kz", string2);
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      String string3 = StringUtils.chop("VbdG}rRfNpTl/@3(+");
      assertEquals("VbdG}rRfNpTl/@3(", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      String string0 = StringUtils.upperCase("Strings must not be null");
      assertEquals("STRINGS MUST NOT BE NULL", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.mid("", 0, 0);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.stripStart("", "STRINGS MUST NOT BE NULL");
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertNotNull(string2);
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = "Strings must not be null";
      stringArray0[1] = "";
      stringArray0[2] = "Strings must not be null";
      stringArray0[3] = "";
      String[] stringArray1 = new String[8];
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      stringArray1[0] = "Strings must not be null";
      stringArray1[1] = "";
      stringArray1[2] = "";
      stringArray1[3] = "Strings must not be null";
      stringArray1[4] = "R7til/'L";
      stringArray1[5] = "";
      stringArray1[6] = "";
      stringArray1[7] = "";
      String string3 = StringUtils.replaceEach("", stringArray0, stringArray1);
      assertEquals("", string3);
      assertTrue(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(string3);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(4, stringArray0.length);
      assertEquals(8, stringArray1.length);
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      String string0 = StringUtils.right("diF3Wv9sN!", 8);
      assertEquals("F3Wv9sN!", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOf((CharSequence) "3Wv9sN!", 8, 8);
      assertEquals((-1), int0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      charSequenceArray0[0] = (CharSequence) "diF3Wv9sN!";
      charSequenceArray0[1] = (CharSequence) "3Wv9sN!";
      charSequenceArray0[2] = (CharSequence) "diF3Wv9sN!";
      int int1 = StringUtils.indexOfAny((CharSequence) "3Wv9sN!", charSequenceArray0);
      assertEquals(0, int1);
      assertFalse(int1 == int0);
      assertEquals(3, charSequenceArray0.length);
      
      String string1 = StringUtils.leftPad("diF3Wv9sN!", (-1), "?1BUbYy?}1/LSTC 6?");
      assertEquals("diF3Wv9sN!", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.replaceChars("diF3Wv9sN!", 'e', 'e');
      assertEquals("diF3Wv9sN!", string2);
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      String string3 = StringUtils.substring("diF3Wv9sN!", (-998));
      assertEquals("diF3Wv9sN!", string3);
      assertTrue(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string1));
      assertNotNull(string3);
      
      String string4 = StringUtils.stripToNull("Locale must not be null");
      assertEquals("Locale must not be null", string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertNotNull(string4);
      
      int int2 = StringUtils.lastIndexOf((CharSequence) "Locale must not be null", (-998), 8);
      assertEquals((-1), int2);
      assertFalse(int2 == int1);
      assertTrue(int2 == int0);
      
      String string5 = StringUtils.replace("?1BUbYy?}1/LSTC 6?", "offset cannot be negative", "2;2fU<w=ql2Vd'RpKh", (-998));
      assertEquals("?1BUbYy?}1/LSTC 6?", string5);
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertNotNull(string5);
      
      try { 
        StringUtils.getBytes("}rRfNpTl/@3(+", "offset cannot be negative");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(UnsupportedEncodingException e) {
      }
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      String string0 = StringUtils.right("S40#", 1288);
      assertEquals("S40#", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      Object[] objectArray0 = new Object[6];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      String string0 = StringUtils.join(objectArray0, 'p');
      assertNotNull(string0);
      assertEquals(6, objectArray0.length);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "java.lang.Object@64652ea9ppppp", (CharSequence) "java.lang.Object@64652ea9ppppp");
      assertEquals(0, int0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      charSequenceArray0[0] = (CharSequence) "java.lang.Object@64652ea9ppppp";
      boolean boolean0 = StringUtils.endsWithAny("java.lang.Object@64652ea9ppppp", charSequenceArray0);
      assertTrue(boolean0);
      assertEquals(1, charSequenceArray0.length);
      
      int int1 = StringUtils.countMatches((CharSequence) "java.lang.Object@64652ea9ppppp", 'p');
      assertEquals(5, int1);
      assertFalse(int1 == int0);
      
      int int2 = StringUtils.lastIndexOfIgnoreCase(charSequenceArray0[0], (CharSequence) "java.lang.Object@64652ea9ppppp");
      assertEquals(0, int2);
      assertFalse(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals(1, charSequenceArray0.length);
      
      String string1 = StringUtils.removeStartIgnoreCase("java.lang.Object@64652ea9ppppp", "java.lang.Object@64652ea9ppppp");
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.strip("");
      assertEquals("", string2);
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      boolean boolean1 = StringUtils.startsWithIgnoreCase("", "");
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String string3 = StringUtils.join(objectArray0);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      assertEquals(6, objectArray0.length);
      
      int int3 = StringUtils.indexOfAny(charSequenceArray0[0], "[ R4Pk;9");
      assertEquals(18, int3);
      assertFalse(int3 == int2);
      assertFalse(int3 == int1);
      assertFalse(int3 == int0);
      assertEquals(1, charSequenceArray0.length);
      
      boolean boolean2 = StringUtils.isNumeric("java.lang.Object@64652ea9");
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      
      boolean boolean3 = StringUtils.isAlphanumeric("");
      assertFalse(boolean3);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3 == boolean0);
      
      int int4 = StringUtils.indexOfAny((CharSequence) "java.lang.Object@64652ea9ppppp", charSequenceArray0);
      assertEquals(0, int4);
      assertFalse(int4 == int1);
      assertTrue(int4 == int2);
      assertFalse(int4 == int3);
      assertTrue(int4 == int0);
      assertEquals(1, charSequenceArray0.length);
      
      String string4 = StringUtils.truncate("[ R4Pk;9", 0);
      assertEquals("", string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string2));
      assertNotNull(string4);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)2;
      shortArray0[1] = (short)5;
      String string5 = StringUtils.join(shortArray0, '%');
      assertArrayEquals(new short[] {(short)2, (short)5}, shortArray0);
      assertEquals("2%5", string5);
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertNotNull(string5);
      assertEquals(2, shortArray0.length);
      
      String string6 = StringUtils.deleteWhitespace("\n\n");
      assertEquals("", string6);
      assertFalse(string6.equals((Object)string5));
      assertTrue(string6.equals((Object)string4));
      assertTrue(string6.equals((Object)string1));
      assertTrue(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string0));
      assertNotNull(string6);
      
      String string7 = StringUtils.right("", 49);
      assertEquals("", string7);
      assertTrue(string7.equals((Object)string2));
      assertTrue(string7.equals((Object)string1));
      assertTrue(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string5));
      assertTrue(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string3));
      assertNotNull(string7);
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      String string0 = StringUtils.join(objectArray0, 'p');
      assertNotNull(string0);
      assertEquals(1, objectArray0.length);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) 'p';
      floatArray0[1] = (-4524.375F);
      floatArray0[2] = (float) 'p';
      String string1 = StringUtils.join(floatArray0, 'a', (int) 'p', (int) 'p');
      assertArrayEquals(new float[] {112.0F, (-4524.375F), 112.0F}, floatArray0, 0.01F);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(3, floatArray0.length);
      
      String string2 = StringUtils.rightPad("", (int) 'a', '\r');
      assertEquals("\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      String string3 = StringUtils.remove("java.lang.Object@26a470c", 'h');
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      
      String string4 = StringUtils.trimToNull("u");
      assertEquals("u", string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertNotNull(string4);
      
      String string5 = StringUtils.stripAccents("cbG{83E=|3J#");
      assertEquals("cbG{83E=|3J#", string5);
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertNotNull(string5);
      
      String string6 = StringUtils.reverseDelimited("Invalid ", 'h');
      assertEquals("Invalid ", string6);
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string3));
      assertNotNull(string6);
      
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[0] = (CharSequence) "u";
      charSequenceArray0[1] = (CharSequence) "java.lang.Object@26a470c";
      String string7 = StringUtils.appendIfMissing((String) null, "java.lang.Object@26a470c", charSequenceArray0);
      assertNull(string7);
      assertEquals(2, charSequenceArray0.length);
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      String string0 = StringUtils.trimToNull("~Vr");
      assertEquals("~Vr", string0);
      assertNotNull(string0);
      
      Locale locale0 = Locale.ENGLISH;
      assertEquals("", locale0.getCountry());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("en", locale0.toString());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertNotNull(locale0);
      
      int int0 = StringUtils.getFuzzyDistance("~Vr", "8pR2B:PK5lx\"7", locale0);
      assertEquals(0, int0);
      assertEquals("", locale0.getCountry());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("en", locale0.toString());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      
      String string1 = StringUtils.stripToEmpty("Locale must not be null");
      assertEquals("Locale must not be null", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      int int1 = StringUtils.indexOf((CharSequence) "Locale must not be null", (CharSequence) "Locale must not be null", 784);
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = '2';
      charArray0[2] = '&';
      String string0 = StringUtils.join(charArray0, '\u0000', 67, 66);
      assertArrayEquals(new char[] {'2', '\u0000', '&'}, charArray0);
      assertEquals("", string0);
      assertNotNull(string0);
      assertEquals(3, charArray0.length);
      
      String string1 = "[0";
      String string2 = StringUtils.replaceChars("", "", "[0");
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertNotNull(string2);
      
      String string3 = "}xk 6mk&yQ}^suYg]";
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "}xk 6mk&yQ}^suYg]";
      String string4 = StringUtils.replaceIgnoreCase("", "", "[0");
      assertEquals("", string4);
      assertFalse(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string0));
      assertNotNull(string4);
      
      CharSequence[] charSequenceArray1 = new CharSequence[6];
      assertFalse(charSequenceArray1.equals((Object)charSequenceArray0));
      
      charSequenceArray1[0] = (CharSequence) "";
      boolean boolean0 = StringUtils.isMixedCase(charSequenceArray0[0]);
      assertFalse(boolean0);
      assertFalse(charSequenceArray0.equals((Object)charSequenceArray1));
      assertNotSame(charSequenceArray0, charSequenceArray1);
      assertEquals(3, charSequenceArray0.length);
      
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparator("\n", "", 67);
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      
      Locale locale0 = Locale.JAPANESE;
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.toString());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertNotNull(locale0);
      
      int int0 = StringUtils.getFuzzyDistance("\r", " ", locale0);
      assertEquals(0, int0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.toString());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      
      try { 
        StringUtils.getBytes(" ", "E6$5XQ/l-@lOq");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(UnsupportedEncodingException e) {
      }
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      Object object0 = new Object();
      assertNotNull(object0);
      
      String string0 = StringUtils.join(objectArray0, 'p');
      assertEquals("", string0);
      assertNotNull(string0);
      assertEquals(1, objectArray0.length);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "", (CharSequence) "");
      assertEquals(0, int0);
      
      String string1 = StringUtils.removeStart("\r", "\r");
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.abbreviateMiddle("", "ls", 0);
      assertEquals("", string2);
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "\r", (CharSequence) "\r", (-131));
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[1] = (double) 0;
      doubleArray0[3] = 1046.299543063222;
      doubleArray0[4] = 1046.299543063222;
      doubleArray0[5] = 1046.299543063222;
      doubleArray0[6] = (double) 0;
      doubleArray0[7] = (double) '@';
      String string0 = StringUtils.left("o$p,m'x&-ZK", (-1457));
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.substringBetween("f0A^{$`]?wqU3B#\"K ~+}($\" ANNLbNW", "f0A^{$`]?wqU3B#\"K ~+}($\" ANNLbNW");
      assertNull(string1);
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertFalse(linkedList0.contains(0));
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      String[] stringArray0 = StringUtils.substringsBetween("P", "o$p,m'x&-ZK", "");
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      String string0 = StringUtils.join((boolean[]) null, '@');
      assertNull(string0);
      
      String string1 = StringUtils.mid((String) null, 828, 985);
      assertNull(string1);
      
      boolean boolean0 = StringUtils.endsWith((CharSequence) null, (CharSequence) null);
      assertTrue(boolean0);
      
      boolean boolean1 = StringUtils.equalsIgnoreCase((CharSequence) null, (CharSequence) null);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("offset cannot be negative", "GP2(5u&", 828);
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      String string2 = StringUtils.rightPad("GP2(5u&", 51, '&');
      assertEquals("GP2(5u&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.swapCase("GP2(5u&");
      assertEquals("gp2(5U&", string3);
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      
      int int0 = StringUtils.ordinalIndexOf("uAYj#~~Xg", "gp2(5U&", 985);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      String string0 = StringUtils.trimToNull("qD/.5Q]{&GZM2vH<]");
      assertEquals("qD/.5Q]{&GZM2vH<]", string0);
      assertNotNull(string0);
      
      charSequenceArray0[0] = (CharSequence) "qD/.5Q]{&GZM2vH<]";
      String string1 = StringUtils.prependIfMissingIgnoreCase("qD/.5Q]{&GZM2vH<]", "qD/.5Q]{&GZM2vH<]", charSequenceArray0);
      assertEquals("qD/.5Q]{&GZM2vH<]", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(1, charSequenceArray0.length);
      
      String string2 = StringUtils.removeStart("", "qD/.5Q]{&GZM2vH<]");
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      String string3 = StringUtils.substringBeforeLast("U'i{Gz>K", ")%");
      assertEquals("U'i{Gz>K", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      
      char[] charArray0 = new char[5];
      int int0 = StringUtils.compareIgnoreCase("5ph", "...");
      assertEquals(7, int0);
      
      String string4 = StringUtils.toRootLowerCase("U'i{Gz>K");
      assertEquals("u'i{gz>k", string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertNotNull(string4);
      
      String string5 = StringUtils.strip((String) null);
      assertNull(string5);
      
      boolean boolean0 = StringUtils.isAnyBlank(charSequenceArray0);
      assertFalse(boolean0);
      assertEquals(1, charSequenceArray0.length);
      
      int int1 = StringUtils.indexOfAnyBut((CharSequence) "", charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      assertEquals(5, charArray0.length);
      
      String string6 = StringUtils.mid((String) null, 322, 2147483623);
      assertNull(string6);
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      Object[] objectArray0 = new Object[7];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      objectArray0[1] = object1;
      Object object2 = new Object();
      assertFalse(object2.equals((Object)object0));
      assertFalse(object2.equals((Object)object1));
      assertNotNull(object2);
      
      String string0 = StringUtils.join((Iterable<?>) null, '(');
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      String string0 = StringUtils.removeAll(" ", " ");
      assertEquals("", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.containsAny((CharSequence) "", (char[]) null);
      assertFalse(boolean0);
      
      String string1 = StringUtils.deleteWhitespace("\r");
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.replaceFirst("u", "\r", (String) null);
      assertEquals("u", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      String string3 = StringUtils.LF;
      assertEquals("\n", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      
      float[] floatArray0 = new float[0];
      String string4 = StringUtils.join(floatArray0, 'P', 76, 76);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals("", string4);
      assertFalse(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertNotNull(string4);
      assertEquals(0, floatArray0.length);
      
      String string5 = StringUtils.rightPad("[ R4Pk;9Invalid locale format: ", 4632, '_');
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertNotNull(string5);
      
      String string6 = StringUtils.unwrap("\rArray element ", (String) null);
      assertEquals("\rArray element ", string6);
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string2));
      assertNotNull(string6);
      
      String string7 = StringUtils.join((Iterable<?>) null, '_');
      assertNull(string7);
      
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      charSequenceArray0[0] = (CharSequence) " ";
      charSequenceArray0[1] = (CharSequence) "u";
      charSequenceArray0[2] = (CharSequence) "[ R4Pk;9Invalid locale format: ";
      charSequenceArray0[3] = (CharSequence) "\r";
      int int0 = StringUtils.indexOfAny((CharSequence) "\rArray element ", charSequenceArray0);
      assertEquals(0, int0);
      assertEquals(4, charSequenceArray0.length);
  }

  @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      String[] stringArray0 = new String[13];
      stringArray0[0] = "{}";
      stringArray0[1] = "";
      String string0 = StringUtils.firstNonBlank(stringArray0);
      assertEquals("{}", string0);
      assertNotNull(string0);
      assertEquals(13, stringArray0.length);
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = (-1.0F);
      floatArray0[2] = 1383.2F;
      floatArray0[3] = (-2836.3674F);
      floatArray0[4] = (-2530.9985F);
      floatArray0[5] = 601.31F;
      floatArray0[6] = 1383.2F;
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertFalse(linkedList0.contains("{}"));
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Iterator<Object> iterator0 = linkedList0.iterator();
      assertFalse(linkedList0.contains("{}"));
      assertEquals(0, linkedList0.size());
      assertNotNull(iterator0);
      
      String string1 = StringUtils.join(iterator0, "{}");
      assertFalse(linkedList0.contains("{}"));
      assertEquals("", string1);
      assertEquals(0, linkedList0.size());
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.repeat("{}", "{}", 50);
      assertEquals("{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      String[] stringArray1 = StringUtils.splitByWholeSeparatorPreserveAllTokens("", "Y)3n1`2_97u G#5v");
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(0, stringArray1.length);
      
      // Undeclared exception!
      try { 
        Charset.forName("{}");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // {}
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = '2';
      charArray0[1] = 'a';
      charArray0[2] = '&';
      String string0 = StringUtils.join(charArray0, '&', 67, 66);
      assertArrayEquals(new char[] {'2', 'a', '&'}, charArray0);
      assertEquals("", string0);
      assertNotNull(string0);
      assertEquals(3, charArray0.length);
      
      String string1 = StringUtils.replaceChars("", "", "[0");
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "";
      String string2 = "/p)?<D@d;4g(/O>";
      String string3 = StringUtils.replaceIgnoreCase("/p)?<D@d;4g(/O>", "", "[0");
      assertFalse(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      
      CharSequence[] charSequenceArray1 = new CharSequence[6];
      assertFalse(charSequenceArray1.equals((Object)charSequenceArray0));
      
      charSequenceArray1[0] = (CharSequence) "";
      long[] longArray0 = new long[1];
      longArray0[0] = (long) '&';
      // Undeclared exception!
      try { 
        StringUtils.join(longArray0, 'y', 11, 3105);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 11
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      String string0 = StringUtils.CR;
      assertEquals("\r", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isNotBlank("\r");
      assertFalse(boolean0);
      
      Charset charset0 = Charset.defaultCharset();
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.toString());
      assertEquals("UTF-8", charset0.name());
      assertNotNull(charset0);
      
      String string1 = StringUtils.replaceChars("", 'g', 'D');
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "");
      assertTrue(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.hasArray());
      assertEquals("", charBuffer0.toString());
      assertFalse(charBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.limit());
      assertEquals(0, charBuffer0.remaining());
      assertEquals(0, charBuffer0.capacity());
      assertEquals(0, charBuffer0.length());
      assertFalse(charBuffer0.isDirect());
      assertNotNull(charBuffer0);
      
      Stack<CharBuffer> stack0 = new Stack<CharBuffer>();
      assertFalse(stack0.contains(charBuffer0));
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertNotNull(stack0);
      
      boolean boolean1 = stack0.add(charBuffer0);
      assertTrue(stack0.contains(charBuffer0));
      assertTrue(boolean1);
      assertTrue(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.hasArray());
      assertEquals("", charBuffer0.toString());
      assertFalse(charBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.limit());
      assertEquals(0, charBuffer0.remaining());
      assertEquals(0, charBuffer0.capacity());
      assertEquals(0, charBuffer0.length());
      assertFalse(charBuffer0.isDirect());
      assertEquals("[]", stack0.toString());
      assertFalse(stack0.isEmpty());
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals(1, stack0.size());
      assertFalse(boolean1 == boolean0);
      
      String string2 = StringUtils.join((List<?>) stack0, "T[QLmS-pCsFz4", 65536, 32);
      assertTrue(stack0.contains(charBuffer0));
      assertEquals("", string2);
      assertEquals("[]", stack0.toString());
      assertFalse(stack0.isEmpty());
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals(1, stack0.size());
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertNotNull(string2);
      
      String string3 = StringUtils.strip("ND5");
      assertEquals("ND5", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      
      boolean boolean2 = StringUtils.isNumeric("ND5");
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) "u/#]Z";
      objectArray0[1] = (Object) "org.apache.commons.lang3.ObjectUtils$Null";
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[2] = object0;
      // Undeclared exception!
      try { 
        StringUtils.join(objectArray0, "", (-128), 53);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -128
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test287()  throws Throwable  {
      String string0 = StringUtils.substringBeforeLast("...", "-Z!#0INiy1>W");
      assertEquals("...", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.substringBefore("...", 18);
      assertEquals("...", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.normalizeSpace("* $}i!#c(q<dht&");
      assertEquals("* $}i!#c(q<dht&", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      Locale locale0 = Locale.CANADA_FRENCH;
      assertEquals("fr", locale0.getLanguage());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("CA", locale0.getCountry());
      assertEquals("fr_CA", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertNotNull(locale0);
      
      int int0 = StringUtils.getFuzzyDistance("...", "...", locale0);
      assertEquals(7, int0);
      assertEquals("fr", locale0.getLanguage());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("CA", locale0.getCountry());
      assertEquals("fr_CA", locale0.toString());
      assertEquals("", locale0.getVariant());
      
      String string3 = StringUtils.rotate("O]p fsi", 107);
      assertEquals("siO]p f", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
  }

  @Test(timeout = 4000)
  public void test288()  throws Throwable  {
      String string0 = StringUtils.stripToEmpty("G^7|+zFpb:oK?5");
      assertEquals("G^7|+zFpb:oK?5", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.abbreviate("Minimum abbreviation width with offset is %d", "G^7|+zFpb:oK?5", 4, 52);
      assertEquals("Minimum abbreviation width with offset is %d", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      char[] charArray0 = new char[8];
      charArray0[0] = '&';
      charArray0[1] = 'r';
      int int0 = StringUtils.indexOfAny((CharSequence) "Minimum abbreviation width with offset is %d", charArray0);
      assertArrayEquals(new char[] {'&', 'r', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(11, int0);
      assertEquals(8, charArray0.length);
      
      String string2 = StringUtils.normalizeSpace("Minimum abbreviation width with offset is %d");
      assertEquals("Minimum abbreviation width with offset is %d", string2);
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) 'r';
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[1] = object0;
      objectArray0[2] = (Object) '&';
      String string3 = StringUtils.join(objectArray0, ")QV6mP/+kjIR-", 52, 7);
      assertEquals("", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      assertEquals(4, objectArray0.length);
      
      boolean boolean0 = StringUtils.endsWithIgnoreCase("", "G^7|+zFpb:oK?5");
      assertFalse(boolean0);
      
      int int1 = StringUtils.lastOrdinalIndexOf("Minimum abbreviation width with offset is %d", "", 10);
      assertEquals(44, int1);
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test289()  throws Throwable  {
      long[] longArray0 = new long[6];
      longArray0[0] = 0L;
      longArray0[1] = (-1189L);
      longArray0[2] = 0L;
      longArray0[3] = 0L;
      longArray0[4] = 3910L;
      longArray0[5] = 0L;
      String string0 = StringUtils.join(longArray0, '\\', 49, 49);
      assertArrayEquals(new long[] {0L, (-1189L), 0L, 0L, 3910L, 0L}, longArray0);
      assertEquals("", string0);
      assertNotNull(string0);
      assertEquals(6, longArray0.length);
      
      int int0 = StringUtils.indexOf((CharSequence) "", 14);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test290()  throws Throwable  {
      Object[] objectArray0 = new Object[7];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      objectArray0[1] = object1;
      Object object2 = new Object();
      assertFalse(object2.equals((Object)object0));
      assertFalse(object2.equals((Object)object1));
      assertNotNull(object2);
      
      objectArray0[2] = object2;
      Object object3 = new Object();
      assertFalse(object3.equals((Object)object2));
      assertFalse(object3.equals((Object)object0));
      assertFalse(object3.equals((Object)object1));
      assertNotNull(object3);
      
      objectArray0[3] = object3;
      boolean boolean0 = StringUtils.isEmpty((CharSequence) null);
      assertTrue(boolean0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      charSequenceArray0[0] = null;
      charSequenceArray0[1] = null;
      charSequenceArray0[2] = null;
      boolean boolean1 = StringUtils.isAllEmpty(charSequenceArray0);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals(3, charSequenceArray0.length);
      
      String string0 = StringUtils.join((char[]) null, 'E', (-7293), (-7293));
      assertNull(string0);
      
      boolean boolean2 = StringUtils.isAnyEmpty(charSequenceArray0);
      assertTrue(boolean2);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertEquals(3, charSequenceArray0.length);
  }

  @Test(timeout = 4000)
  public void test291()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = '2';
      charArray0[1] = 's';
      charArray0[2] = '2';
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("sm]@m4P(6<");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      String string0 = StringUtils.stripAccents("VbdG...");
      assertEquals("VbdG...", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.wrapIfMissing("sm]@m4P(6<", '1');
      assertEquals("1sm]@m4P(6<1", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.endsWithAny("1sm]@m4P(6<1", stringArray0);
      assertFalse(boolean0);
      assertEquals(1, stringArray0.length);
      
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "sm]@m4P(6<", charArray0);
      assertArrayEquals(new char[] {'2', 's', '2'}, charArray0);
      assertEquals(1, int0);
      assertEquals(3, charArray0.length);
      
      String[] stringArray1 = StringUtils.splitPreserveAllTokens("1sm]@m4P(6<1", 's');
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(2, stringArray1.length);
  }

  @Test(timeout = 4000)
  public void test292()  throws Throwable  {
      String string0 = StringUtils.reverse("");
      assertEquals("", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isEmpty("");
      assertTrue(boolean0);
      
      String string1 = StringUtils.abbreviate((String) null, (String) null, (-3580));
      assertNull(string1);
      
      String string2 = StringUtils.remove("org.apache.commons.lang3.StringUtils", "org.apache.commons.lang3.RegExUtils");
      assertEquals("org.apache.commons.lang3.StringUtils", string2);
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      int int0 = 56;
      String string3 = StringUtils.replaceChars("u", "", "");
      assertEquals("u", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      
      int int1 = StringUtils.lastIndexOf((CharSequence) "", (CharSequence) "");
      assertEquals(0, int1);
      assertFalse(int1 == int0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      // Undeclared exception!
      try { 
        StringUtils.joinWith("}rRfNpTl/@3(+", (Object[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object varargs must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test293()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "`$Q5o'S#9:q`|d";
      stringArray0[1] = "`$Q5o'S#9:q`|d";
      String[] stringArray1 = StringUtils.stripAll(stringArray0, "q(_Bbu+T<4>m$@Sv'v&");
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(2, stringArray0.length);
      assertEquals(2, stringArray1.length);
      
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "q(_Bbu+T<4>m$@Sv'v&", "?'");
      assertFalse(boolean0);
      
      int int0 = StringUtils.compareIgnoreCase("\"]WOI*[[bo7a\"wo<vX ", "`$Q5o'S#9:q`|d", false);
      assertEquals((-62), int0);
  }

  @Test(timeout = 4000)
  public void test294()  throws Throwable  {
      String string0 = StringUtils.deleteWhitespace("8c>!) u,eei!\"I2yC-U");
      assertEquals("8c>!)u,eei!\"I2yC-U", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.countMatches((CharSequence) "8c>!)u,eei!\"I2yC-U", 'v');
      assertEquals(0, int0);
      
      int int1 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      
      boolean boolean0 = StringUtils.isNumeric("8c>!) u,eei!\"I2yC-U");
      assertFalse(boolean0);
      
      String string1 = StringUtils.unwrap("8c>!)u,eei!\"I2yC-U", 'v');
      assertEquals("8c>!)u,eei!\"I2yC-U", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.deleteWhitespace("Erq5O9?k#;Ye6");
      assertEquals("Erq5O9?k#;Ye6", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      charSequenceArray0[0] = (CharSequence) "8c>!)u,eei!\"I2yC-U";
      boolean boolean1 = StringUtils.startsWith("Erq5O9?k#;Ye6", "Erq5O9?k#;Ye6");
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      String[] stringArray0 = new String[0];
      String string3 = StringUtils.firstNonEmpty(stringArray0);
      assertNull(string3);
      assertEquals(0, stringArray0.length);
      
      char[] charArray0 = new char[3];
      charArray0[0] = 'v';
      charArray0[1] = 'l';
      charArray0[2] = 'v';
      String string4 = StringUtils.join(charArray0, 'v');
      assertArrayEquals(new char[] {'v', 'l', 'v'}, charArray0);
      assertEquals("vvlvv", string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertNotNull(string4);
      assertEquals(3, charArray0.length);
      
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      String string5 = StringUtils.getIfBlank("org.apache.commons.lang3.ArrayUtils", supplier0);
      assertEquals("org.apache.commons.lang3.ArrayUtils", string5);
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertNotNull(string5);
      
      String[] stringArray1 = StringUtils.splitPreserveAllTokens((String) null);
      assertNull(stringArray1);
  }

  @Test(timeout = 4000)
  public void test295()  throws Throwable  {
      String string0 = StringUtils.substring("bjX'A", 1301);
      assertEquals("", string0);
      assertNotNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[7];
      charSequenceArray0[1] = (CharSequence) "";
      charSequenceArray0[4] = (CharSequence) "bjX'A";
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((-2373)).when(comparator0).compare(anyString() , anyString());
      PriorityQueue<String> priorityQueue0 = new PriorityQueue<String>(comparator0);
      assertFalse(priorityQueue0.contains(""));
      assertEquals(0, priorityQueue0.size());
      assertNotNull(priorityQueue0);
      
      boolean boolean0 = priorityQueue0.add("WoSAV/xf>{FzJdM");
      assertFalse(priorityQueue0.contains(""));
      assertTrue(priorityQueue0.contains("WoSAV/xf>{FzJdM"));
      assertTrue(boolean0);
      assertEquals(1, priorityQueue0.size());
      
      boolean boolean1 = priorityQueue0.add("d<@38vwUK ~XpQ%8IZ");
      assertFalse(priorityQueue0.contains(string0));
      assertTrue(priorityQueue0.contains("WoSAV/xf>{FzJdM"));
      assertTrue(boolean1);
      assertEquals(2, priorityQueue0.size());
      assertTrue(boolean1 == boolean0);
      
      Vector<Locale.LanguageRange> vector0 = new Vector<Locale.LanguageRange>();
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertNotNull(vector0);
      
      String string1 = StringUtils.join((Iterable<?>) priorityQueue0, "bjX'A");
      assertFalse(priorityQueue0.contains(string0));
      assertTrue(priorityQueue0.contains("WoSAV/xf>{FzJdM"));
      assertEquals("d<@38vwUK ~XpQ%8IZbjX'AWoSAV/xf>{FzJdM", string1);
      assertEquals(2, priorityQueue0.size());
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) 1301;
      floatArray0[1] = (float) 1301;
      floatArray0[2] = (float) 1301;
      floatArray0[3] = (float) 1301;
      floatArray0[4] = (float) 1301;
      floatArray0[5] = (float) 1301;
      String string2 = StringUtils.reverse("Strings must not be null");
      assertEquals("llun eb ton tsum sgnirtS", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      String string3 = StringUtils.wrapIfMissing("Invalid locale format: ", (String) null);
      assertEquals("Invalid locale format: ", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      
      CharSequence charSequence0 = StringUtils.defaultIfEmpty((CharSequence) "Invalid locale format: ", (CharSequence) "Invalid locale format: ");
      assertEquals("Invalid locale format: ", charSequence0);
      assertTrue(charSequence0.equals((Object)string3));
      assertFalse(charSequence0.equals((Object)string2));
      assertFalse(charSequence0.equals((Object)string1));
      assertFalse(charSequence0.equals((Object)string0));
      assertNotNull(charSequence0);
      
      boolean boolean2 = StringUtils.isEmpty("Invalid locale format: ");
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      
      boolean boolean3 = StringUtils.isAllEmpty(charSequenceArray0);
      assertFalse(boolean3);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3 == boolean0);
      assertEquals(7, charSequenceArray0.length);
      
      char[] charArray0 = new char[7];
      charArray0[0] = 'E';
      charArray0[1] = 'E';
      charArray0[2] = 'E';
      charArray0[3] = 'E';
      charArray0[4] = 'E';
      charArray0[5] = 'E';
      charArray0[6] = 'E';
      String string4 = StringUtils.join(charArray0, 'E', 0, 0);
      assertArrayEquals(new char[] {'E', 'E', 'E', 'E', 'E', 'E', 'E'}, charArray0);
      assertEquals("", string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)charSequence0));
      assertNotNull(string4);
      assertEquals(7, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test296()  throws Throwable  {
      boolean boolean0 = StringUtils.containsWhitespace("{}");
      assertFalse(boolean0);
      
      String string0 = StringUtils.chomp("ObjectUtils$Null");
      assertEquals("ObjectUtils$Null", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.chomp((String) null);
      assertNull(string1);
  }

  @Test(timeout = 4000)
  public void test297()  throws Throwable  {
      Object[] objectArray0 = new Object[7];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      objectArray0[1] = object1;
      Object object2 = new Object();
      assertFalse(object2.equals((Object)object1));
      assertFalse(object2.equals((Object)object0));
      assertNotNull(object2);
      
      objectArray0[2] = object2;
      Object object3 = new Object();
      assertFalse(object3.equals((Object)object2));
      assertFalse(object3.equals((Object)object0));
      assertFalse(object3.equals((Object)object1));
      assertNotNull(object3);
      
      String string0 = StringUtils.chomp("");
      assertEquals("", string0);
      assertNotNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      String string1 = StringUtils.replaceIgnoreCase((String) null, "zRLVb&a DMpMX{$;", "", 680);
      assertNull(string1);
      
      charSequenceArray0[0] = (CharSequence) null;
      charSequenceArray0[1] = (CharSequence) "";
      charSequenceArray0[2] = (CharSequence) "";
      charSequenceArray0[3] = (CharSequence) "";
      charSequenceArray0[4] = (CharSequence) "";
      boolean boolean0 = StringUtils.equalsAny("", charSequenceArray0);
      assertTrue(boolean0);
      assertEquals(5, charSequenceArray0.length);
      
      String string2 = StringUtils.abbreviateMiddle((String) null, "$T$\u0002H!GW^y[q]6O", 125);
      assertNull(string2);
      
      boolean boolean1 = StringUtils.isAlpha((CharSequence) null);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test298()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      Object object2 = new Object();
      assertFalse(object2.equals((Object)object1));
      assertFalse(object2.equals((Object)object0));
      assertNotNull(object2);
      
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = object2;
      Object object3 = new Object();
      assertFalse(object3.equals((Object)object0));
      assertFalse(object3.equals((Object)object1));
      assertFalse(object3.equals((Object)object2));
      assertNotNull(object3);
      
      objectArray0[1] = object3;
      String string0 = StringUtils.join(objectArray0, '\'', 127, 64);
      assertEquals("", string0);
      assertNotNull(string0);
      assertEquals(5, objectArray0.length);
      
      String string1 = StringUtils.replaceAll(")B{gfrjyB", "\n", ">J&&");
      assertEquals(")B{gfrjyB", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.leftPad("[ R4Pk;9", (-1), 'i');
      assertEquals("[ R4Pk;9", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      String string3 = StringUtils.substringAfter("[ R4Pk;9", 3094);
      assertEquals("", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      
      String string4 = StringUtils.substringAfterLast("", 3094);
      assertEquals("", string4);
      assertTrue(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertNotNull(string4);
      
      String string5 = StringUtils.rightPad("", 127);
      assertEquals("                                                                                                                               ", string5);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertNotNull(string5);
  }

  @Test(timeout = 4000)
  public void test299()  throws Throwable  {
      String[] stringArray0 = new String[13];
      stringArray0[0] = "{}";
      stringArray0[1] = "";
      String string0 = StringUtils.firstNonBlank(stringArray0);
      assertEquals("{}", string0);
      assertNotNull(string0);
      assertEquals(13, stringArray0.length);
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = (-1.0F);
      floatArray0[2] = 1383.2F;
      String string1 = StringUtils.joinWith("Supplied value must be a valid byte literal between -32768 and 32767: [", stringArray0);
      assertEquals("{}Supplied value must be a valid byte literal between -32768 and 32767: [Supplied value must be a valid byte literal between -32768 and 32767: [Supplied value must be a valid byte literal between -32768 and 32767: [Supplied value must be a valid byte literal between -32768 and 32767: [Supplied value must be a valid byte literal between -32768 and 32767: [Supplied value must be a valid byte literal between -32768 and 32767: [Supplied value must be a valid byte literal between -32768 and 32767: [Supplied value must be a valid byte literal between -32768 and 32767: [Supplied value must be a valid byte literal between -32768 and 32767: [Supplied value must be a valid byte literal between -32768 and 32767: [Supplied value must be a valid byte literal between -32768 and 32767: [Supplied value must be a valid byte literal between -32768 and 32767: [", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(13, stringArray0.length);
      
      String string2 = StringUtils.substring("{}", 0, 1287);
      assertEquals("{}", string2);
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertNotNull(string2);
      
      long[] longArray0 = new long[6];
      longArray0[0] = (long) '5';
      longArray0[1] = (long) '5';
      longArray0[2] = (long) 1287;
      longArray0[3] = (long) 1287;
      longArray0[4] = (long) 1287;
      longArray0[5] = (long) '5';
      String string3 = StringUtils.join(longArray0, '5');
      assertArrayEquals(new long[] {53L, 53L, 1287L, 1287L, 1287L, 53L}, longArray0);
      assertEquals("53553512875128751287553", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      assertEquals(6, longArray0.length);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "{}", (CharSequence) "{}", (-785));
      assertEquals((-1), int0);
      
      String string4 = StringUtils.getDigits("{}");
      assertEquals("", string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertNotNull(string4);
      
      String string5 = StringUtils.repeat("Supplied value must be a valid byte literal between -32768 and 32767: [", 15);
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertNotNull(string5);
  }

  @Test(timeout = 4000)
  public void test300()  throws Throwable  {
      String string0 = StringUtils.unwrap("", 'V');
      assertEquals("", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = new String[0];
      String string1 = StringUtils.firstNonBlank(stringArray0);
      assertNull(string1);
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test301()  throws Throwable  {
      String string0 = StringUtils.removeAll(" ", " ");
      assertEquals("", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.containsAny((CharSequence) "", (char[]) null);
      assertFalse(boolean0);
      
      String string1 = StringUtils.unwrap("Object varargs must not be null", '`');
      assertEquals("Object varargs must not be null", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      int int0 = StringUtils.compareIgnoreCase("bS_z.Y_oS*BH.WNj", "");
      assertEquals(17, int0);
      
      String string2 = StringUtils.toRootLowerCase(">_");
      assertEquals(">_", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      String string3 = StringUtils.strip("Object varargs must not be null");
      assertEquals("Object varargs must not be null", string3);
      assertTrue(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      charSequenceArray0[0] = (CharSequence) "Object varargs must not be null";
      charSequenceArray0[1] = (CharSequence) " ";
      charSequenceArray0[2] = (CharSequence) "bS_z.Y_oS*BH.WNj";
      boolean boolean1 = StringUtils.isAnyBlank(charSequenceArray0);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      assertEquals(3, charSequenceArray0.length);
      
      int int1 = StringUtils.indexOfAnyBut(charSequenceArray0[0], (char[]) null);
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      assertEquals(3, charSequenceArray0.length);
      
      String string4 = StringUtils.unwrap("Object varargs must not be null", "Object varargs must not be null");
      assertEquals("Object varargs must not be null", string4);
      assertTrue(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertNotNull(string4);
      
      String string5 = StringUtils.mid("object", 17, 965);
      assertEquals("", string5);
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertTrue(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertNotNull(string5);
  }

  @Test(timeout = 4000)
  public void test302()  throws Throwable  {
      String string0 = StringUtils.stripEnd("G^7|+zFpb:oK?5", "G^7|+zFpb:oK?5");
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "G^7|+zFpb:oK?5", (char[]) null);
      assertEquals((-1), int0);
      
      String string1 = StringUtils.chomp("...");
      assertEquals("...", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      int int1 = StringUtils.lastOrdinalIndexOf("", "G^7|+zFpb:oK?5", 11);
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      
      String string2 = StringUtils.removeStartIgnoreCase("", "");
      assertEquals("", string2);
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      String string3 = StringUtils.substringAfterLast((String) null, 1);
      assertNull(string3);
  }

  @Test(timeout = 4000)
  public void test303()  throws Throwable  {
      int int0 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      double[] doubleArray0 = new double[0];
      String string0 = StringUtils.join(doubleArray0, 'U', 32, 32);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals("", string0);
      assertNotNull(string0);
      assertEquals(0, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test304()  throws Throwable  {
      Object[] objectArray0 = new Object[7];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      objectArray0[1] = object1;
      double[] doubleArray0 = new double[0];
      // Undeclared exception!
      try { 
        StringUtils.join(doubleArray0, '3', 12, 973);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 12
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test305()  throws Throwable  {
      boolean boolean0 = StringUtils.startsWithAny((CharSequence) null, (CharSequence[]) null);
      assertFalse(boolean0);
      
      String string0 = StringUtils.replaceOnce((String) null, "Array element ", (String) null);
      assertNull(string0);
      
      int int0 = StringUtils.indexOfDifference((CharSequence) null, (CharSequence) "Array element ");
      assertEquals(0, int0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[6];
      charSequenceArray0[0] = (CharSequence) null;
      charSequenceArray0[1] = (CharSequence) null;
      charSequenceArray0[2] = (CharSequence) "Array element ";
      charSequenceArray0[3] = (CharSequence) "Array element ";
      charSequenceArray0[4] = (CharSequence) "Array element ";
      charSequenceArray0[5] = (CharSequence) null;
      boolean boolean1 = StringUtils.startsWithAny((CharSequence) null, charSequenceArray0);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals(6, charSequenceArray0.length);
      
      boolean boolean2 = StringUtils.contains((CharSequence) null, 0);
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      int int1 = StringUtils.lastIndexOfIgnoreCase((CharSequence) null, charSequenceArray0[5], 0);
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      assertEquals(6, charSequenceArray0.length);
      
      String string1 = StringUtils.capitalize((String) null);
      assertNull(string1);
      
      // Undeclared exception!
      try { 
        StringUtils.getLevenshteinDistance((CharSequence) null, charSequenceArray0[1], (-314));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test306()  throws Throwable  {
      Object[] objectArray0 = new Object[7];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      objectArray0[1] = object1;
      Object object2 = new Object();
      assertFalse(object2.equals((Object)object1));
      assertFalse(object2.equals((Object)object0));
      assertNotNull(object2);
      
      objectArray0[2] = object2;
      Object object3 = new Object();
      assertFalse(object3.equals((Object)object0));
      assertFalse(object3.equals((Object)object2));
      assertFalse(object3.equals((Object)object1));
      assertNotNull(object3);
      
      objectArray0[3] = object3;
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("Locale must not be null", "Locale must not be null", 3);
      assertNotNull(stringArray0);
      assertEquals(3, stringArray0.length);
      
      String[] stringArray1 = StringUtils.substringsBetween("Locale must not be null", "68=", "7#pdP&C6=5[#|,K1!");
      assertNull(stringArray1);
      
      String string0 = StringUtils.leftPad("Locale must not be null", (-1962));
      assertEquals("Locale must not be null", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.removeAll("Locale must not be null", "XxoiCll 9:\"7Kk!8");
      assertEquals("Locale must not be null", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test307()  throws Throwable  {
      Object[] objectArray0 = new Object[7];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      objectArray0[1] = object1;
      Object object2 = new Object();
      assertFalse(object2.equals((Object)object0));
      assertFalse(object2.equals((Object)object1));
      assertNotNull(object2);
      
      objectArray0[2] = object2;
      Object object3 = new Object();
      assertFalse(object3.equals((Object)object0));
      assertFalse(object3.equals((Object)object2));
      assertFalse(object3.equals((Object)object1));
      assertNotNull(object3);
      
      objectArray0[3] = object3;
      Object object4 = new Object();
      assertFalse(object4.equals((Object)object0));
      assertFalse(object4.equals((Object)object3));
      assertFalse(object4.equals((Object)object1));
      assertFalse(object4.equals((Object)object2));
      assertNotNull(object4);
      
      objectArray0[4] = object4;
      Object object5 = new Object();
      assertFalse(object5.equals((Object)object1));
      assertFalse(object5.equals((Object)object2));
      assertFalse(object5.equals((Object)object3));
      assertFalse(object5.equals((Object)object4));
      assertFalse(object5.equals((Object)object0));
      assertNotNull(object5);
      
      objectArray0[5] = object5;
      Object object6 = new Object();
      assertFalse(object6.equals((Object)object1));
      assertFalse(object6.equals((Object)object4));
      assertFalse(object6.equals((Object)object3));
      assertFalse(object6.equals((Object)object5));
      assertFalse(object6.equals((Object)object0));
      assertFalse(object6.equals((Object)object2));
      assertNotNull(object6);
      
      objectArray0[6] = object1;
      boolean boolean0 = StringUtils.isBlank("}yrRfNpTa/@3(+m");
      assertFalse(boolean0);
      
      int int0 = StringUtils.compare("VbdGArray element }yrRfNpTa/@3(+m", "VbdG...");
      assertEquals(19, int0);
      
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      assertFalse(linkedList0.contains(int0));
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Consumer<Integer> consumer0 = (Consumer<Integer>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      linkedList0.forEach(consumer0);
      assertFalse(linkedList0.contains(int0));
      assertEquals(0, linkedList0.size());
      
      String string0 = StringUtils.left("VbdG...", 19);
      assertEquals("VbdG...", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "maxWith cannot be negative";
      String string1 = StringUtils.replaceEach("maxWith cannot be negative", stringArray0, stringArray0);
      assertEquals("maxWith cannot be negative", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test308()  throws Throwable  {
      String string0 = StringUtils.mid("F/@Lu2J", (-9), (-9));
      assertEquals("", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = "";
      stringArray0[1] = "F/@Lu2J";
      stringArray0[2] = "F/@Lu2J";
      stringArray0[3] = "";
      String[] stringArray1 = StringUtils.stripAll(stringArray0, "");
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(4, stringArray0.length);
      assertEquals(4, stringArray1.length);
      
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "`$Q5o'S#9:q`|d", (String) null);
      assertFalse(boolean0);
      
      String string1 = StringUtils.appendIfMissing("F/@Lu2J", "", stringArray1);
      assertEquals("F/@Lu2J", string1);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(4, stringArray0.length);
      assertEquals(4, stringArray1.length);
  }

  @Test(timeout = 4000)
  public void test309()  throws Throwable  {
      boolean boolean0 = StringUtils.isNumeric("F1~Sp}mS5");
      assertFalse(boolean0);
      
      String[] stringArray0 = new String[5];
      stringArray0[0] = "";
      stringArray0[1] = ",ZBZD/YePMWJ[eT0K";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "";
      String[] stringArray1 = StringUtils.stripAll(stringArray0, "");
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(5, stringArray0.length);
      assertEquals(5, stringArray1.length);
      
      String string0 = StringUtils.uncapitalize("AM[om");
      assertEquals("aM[om", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test310()  throws Throwable  {
      String string0 = StringUtils.removePattern("Array element ", "");
      assertEquals("Array element ", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "", (CharSequence) "Array element ");
      assertEquals(14, int0);
  }

  @Test(timeout = 4000)
  public void test311()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = '2';
      charArray0[1] = '2';
      String string0 = StringUtils.substringBefore("2_xC@g", ", '");
      assertEquals("2_xC@g", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "2_xC@g", (CharSequence) "2_xC@g");
      assertEquals(0, int0);
      
      String string1 = "\\u";
      String string2 = StringUtils.overlay(", '", string1, 66, 67);
      assertEquals(", '\\u", string2);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test312()  throws Throwable  {
      String string0 = StringUtils.reverse("");
      assertEquals("", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isEmpty("");
      assertTrue(boolean0);
      
      char[] charArray0 = new char[8];
      charArray0[0] = '}';
      charArray0[1] = '}';
      charArray0[2] = '}';
      charArray0[5] = '}';
      charArray0[7] = '}';
      boolean boolean1 = StringUtils.containsOnly((CharSequence) "", charArray0);
      assertArrayEquals(new char[] {'}', '}', '}', '\u0000', '\u0000', '}', '\u0000', '}'}, charArray0);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals(8, charArray0.length);
      
      String string1 = StringUtils.substringBefore("[~B4m{N_y", "[~B4m{N_y");
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "", (CharSequence) "");
      assertEquals(0, int0);
      
      String string2 = StringUtils.overlay("\r", "", 0, (-739));
      assertEquals("\r", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test313()  throws Throwable  {
      String string0 = StringUtils.trimToNull("~Vr");
      assertEquals("~Vr", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.truncate("8pR2B:PK5lx\"7", 0, 32);
      assertEquals("8pR2B:PK5lx\"7", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.deleteWhitespace((String) null);
      assertNull(string2);
      
      int int0 = StringUtils.countMatches((CharSequence) "8pR2B:PK5lx\"7", 'v');
      assertEquals(0, int0);
      
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(supplier0).get();
      String string3 = StringUtils.getIfEmpty((String) null, supplier0);
      assertNull(string3);
      
      CharSequence[] charSequenceArray0 = new CharSequence[6];
      charSequenceArray0[0] = (CharSequence) "8pR2B:PK5lx\"7";
      charSequenceArray0[1] = (CharSequence) null;
      charSequenceArray0[2] = (CharSequence) null;
      charSequenceArray0[3] = (CharSequence) "~Vr";
      charSequenceArray0[4] = (CharSequence) null;
      int int1 = StringUtils.indexOfAny((CharSequence) "8pR2B:PK5lx\"7", charSequenceArray0);
      assertEquals(0, int1);
      assertTrue(int1 == int0);
      assertEquals(6, charSequenceArray0.length);
      
      String string4 = StringUtils.overlay("AxieV", "8pR2B:PK5lx\"7", 0, 0);
      assertEquals("8pR2B:PK5lx\"7AxieV", string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertNotNull(string4);
      
      String string5 = StringUtils.chomp((String) null, "8pR2B:PK5lx\"7");
      assertNull(string5);
  }

  @Test(timeout = 4000)
  public void test314()  throws Throwable  {
      float[] floatArray0 = new float[3];
      floatArray0[0] = 0.0F;
      floatArray0[1] = 693.284F;
      floatArray0[2] = 693.284F;
      String string0 = StringUtils.join(floatArray0, '%');
      assertArrayEquals(new float[] {0.0F, 693.284F, 693.284F}, floatArray0, 0.01F);
      assertEquals("0.0%693.284%693.284", string0);
      assertNotNull(string0);
      assertEquals(3, floatArray0.length);
      
      boolean boolean0 = StringUtils.containsIgnoreCase("0.0%693.284%693.284", "0.0%693.284%693.284");
      assertTrue(boolean0);
      
      String string1 = StringUtils.difference("bdGMinimum abbreviation width is %d", "~l~P_rj}X@#.d,Nq");
      assertEquals("~l~P_rj}X@#.d,Nq", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.repeat("0.0%693.284%693.284", (int) '%');
      assertEqualsstring2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      String string3 = StringUtils.chomp("0.0%693.284%693.284", "{}");
      assertEquals("0.0%693.284%693.284", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string0));
      assertNotNull(string3);
  }

  @Test(timeout = 4000)
  public void test315()  throws Throwable  {
      String[] stringArray0 = new String[13];
      stringArray0[0] = "{}";
      String string0 = StringUtils.firstNonBlank(stringArray0);
      assertEquals("{}", string0);
      assertNotNull(string0);
      assertEquals(13, stringArray0.length);
      
      boolean boolean0 = StringUtils.startsWithAny(stringArray0[1], stringArray0);
      assertFalse(boolean0);
      assertEquals(13, stringArray0.length);
      
      boolean boolean1 = StringUtils.containsWhitespace("{}");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String string1 = StringUtils.chomp("ObjectUtils$Null");
      assertEquals("ObjectUtils$Null", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      int int0 = StringUtils.indexOf((CharSequence) "{}", (CharSequence) "ObjectUtils$Null");
      assertEquals((-1), int0);
      
      String string2 = StringUtils.leftPad("ObjectUtils$Null", (-1), (String) null);
      assertEquals("ObjectUtils$Null", string2);
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      CharSequence[] charSequenceArray0 = new CharSequence[6];
      charSequenceArray0[0] = (CharSequence) "{}";
      charSequenceArray0[1] = (CharSequence) "{}";
      charSequenceArray0[2] = (CharSequence) null;
      String string3 = StringUtils.chomp("{}");
      assertEquals("{}", string3);
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      
      charSequenceArray0[3] = (CharSequence) "{}";
      charSequenceArray0[4] = (CharSequence) "ObjectUtils$Null";
      charSequenceArray0[5] = (CharSequence) "{}";
      String string4 = StringUtils.appendIfMissing("ObjectUtils$Null", "ObjectUtils$Null", charSequenceArray0);
      assertEquals("ObjectUtils$Null", string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string1));
      assertNotNull(string4);
      assertEquals(6, charSequenceArray0.length);
  }

  @Test(timeout = 4000)
  public void test316()  throws Throwable  {
      String string0 = StringUtils.defaultString("Search and Relace array lengths on't match: ");
      assertEquals("Search and Relace array lengths on't match: ", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.containsWhitespace("Search and Relace array lengths on't match: ");
      assertTrue(boolean0);
      
      String string1 = StringUtils.substringAfter("Search and Relace array lengths on't match: ", 2770);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.rightPad("Search and Relace array lengths on't match: ", 48, "_9M*`k[(O]");
      assertEquals("Search and Relace array lengths on't match: _9M*", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      boolean boolean1 = StringUtils.isAsciiPrintable("Search and Relace array lengths on't match: ");
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test317()  throws Throwable  {
      float[] floatArray0 = new float[3];
      floatArray0[0] = 0.0F;
      floatArray0[0] = 693.284F;
      floatArray0[2] = 0.0F;
      String string0 = StringUtils.join(floatArray0, '*');
      assertArrayEquals(new float[] {693.284F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals("693.284*0.0*0.0", string0);
      assertNotNull(string0);
      assertEquals(3, floatArray0.length);
      
      boolean boolean0 = StringUtils.containsIgnoreCase("693.284*0.0*0.0", "693.284*0.0*0.0");
      assertTrue(boolean0);
      
      String string1 = StringUtils.wrap("693.284*0.0*0.0", '*');
      assertEquals("*693.284*0.0*0.0*", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.strip("*693.284*0.0*0.0*", "org.apache.commons.lang3.LocaleUtils");
      assertEquals("*693.284*0.0*0.0*", string2);
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      boolean boolean1 = StringUtils.isAlphanumeric("*693.284*0.0*0.0*");
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[6];
      charSequenceArray0[0] = (CharSequence) "693.284*0.0*0.0";
      charSequenceArray0[1] = (CharSequence) "org.apache.commons.lang3.LocaleUtils";
      charSequenceArray0[2] = (CharSequence) "*693.284*0.0*0.0*";
      charSequenceArray0[3] = (CharSequence) "*693.284*0.0*0.0*";
      charSequenceArray0[4] = (CharSequence) "*693.284*0.0*0.0*";
      charSequenceArray0[5] = (CharSequence) "*693.284*0.0*0.0*";
      boolean boolean2 = StringUtils.containsAny((CharSequence) "*693.284*0.0*0.0*", charSequenceArray0);
      assertTrue(boolean2);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertEquals(6, charSequenceArray0.length);
      
      Locale locale0 = Locale.PRC;
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      assertNotNull(locale0);
      
      int int0 = StringUtils.getFuzzyDistance(charSequenceArray0[2], charSequenceArray0[2], locale0);
      assertEquals(49, int0);
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      assertEquals(6, charSequenceArray0.length);
  }

  @Test(timeout = 4000)
  public void test318()  throws Throwable  {
      String string0 = StringUtils.replace("&#.hF:Af]d@NQ>{3", "&#.hF:Af]d@NQ>{3", ".N[!eI\"p!Z");
      assertEquals(".N[!eI\"p!Z", string0);
      assertNotNull(string0);
      
      Object[] objectArray0 = new Object[0];
      String string1 = StringUtils.join(objectArray0, '.', Integer.MAX_VALUE, Integer.MAX_VALUE);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(0, objectArray0.length);
      
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[0] = (CharSequence) "&#.hF:Af]d@NQ>{3";
      charSequenceArray0[1] = (CharSequence) "&#.hF:Af]d@NQ>{3";
      String string2 = StringUtils.difference((String) null, "");
      assertEquals("", string2);
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      boolean boolean0 = StringUtils.isBlank("");
      assertTrue(boolean0);
      
      int int0 = StringUtils.compare("8w`bDx*!", ".N[!eI\"p!Z");
      assertEquals(10, int0);
      
      boolean boolean1 = StringUtils.isNumeric((CharSequence) null);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      String string3 = StringUtils.stripEnd("nB6+", "8w`bDx*!");
      assertEquals("nB6+", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      
      // Undeclared exception!
      try { 
        StringUtils.getFuzzyDistance("nB6+", "nB6+", (Locale) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Locale must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test319()  throws Throwable  {
      String string0 = StringUtils.deleteWhitespace("C1k-7_rbEbjE6eQS8]^");
      assertEquals("C1k-7_rbEbjE6eQS8]^", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isAllUpperCase("C1k-7_rbEbjE6eQS8]^");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isNotEmpty("C1k-7_rbEbjE6eQS8]^");
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      char[] charArray0 = new char[7];
      charArray0[0] = '`';
      charArray0[1] = 'v';
      charArray0[2] = ')';
      charArray0[3] = 'v';
      charArray0[4] = '$';
      charArray0[5] = 'n';
      charArray0[6] = 'O';
      boolean boolean2 = StringUtils.containsNone((CharSequence) "C1k-7_rbEbjE6eQS8]^", charArray0);
      assertArrayEquals(new char[] {'`', 'v', ')', 'v', '$', 'n', 'O'}, charArray0);
      assertTrue(boolean2);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertEquals(7, charArray0.length);
      
      boolean boolean3 = StringUtils.isAlphanumeric("C1k-7_rbEbjE6eQS8]^");
      assertFalse(boolean3);
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      charSequenceArray0[0] = (CharSequence) "C1k-7_rbEbjE6eQS8]^";
      charSequenceArray0[1] = (CharSequence) "C1k-7_rbEbjE6eQS8]^";
      charSequenceArray0[2] = (CharSequence) "C1k-7_rbEbjE6eQS8]^";
      String[] stringArray0 = new String[7];
      stringArray0[0] = "WkS}laRn@";
      stringArray0[1] = "C1k-7_rbEbjE6eQS8]^";
      stringArray0[2] = "C1k-7_rbEbjE6eQS8]^";
      stringArray0[3] = "C1k-7_rbEbjE6eQS8]^";
      stringArray0[4] = "C1k-7_rbEbjE6eQS8]^";
      stringArray0[5] = "WkS}laRn@";
      stringArray0[6] = "C1k-7_rbEbjE6eQS8]^";
      String string1 = StringUtils.replaceEach("WkS}laRn@", stringArray0, stringArray0);
      assertEquals("WkS}laRn@", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(7, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test320()  throws Throwable  {
      int int0 = StringUtils.compareIgnoreCase("org.apache.commons.lang3.RegExUtils", "\r", false);
      assertEquals(98, int0);
      
      Locale locale0 = Locale.ITALIAN;
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("it", locale0.getLanguage());
      assertEquals("ita", locale0.getISO3Language());
      assertNotNull(locale0);
      
      Vector<Locale.LanguageRange> vector0 = new Vector<Locale.LanguageRange>();
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertNotNull(vector0);
      
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      assertFalse(set0.contains("org.apache.commons.lang3.RegExUtils"));
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("it", locale0.getLanguage());
      assertEquals("ita", locale0.getISO3Language());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertNotNull(set0);
      
      Locale locale1 = Locale.forLanguageTag("org.apache.commons.lang3.RegExUtils");
      assertEquals("", locale1.getISO3Country());
      assertEquals("", locale1.getISO3Language());
      assertEquals("", locale1.getVariant());
      assertEquals("", locale1.toString());
      assertEquals("", locale1.getCountry());
      assertEquals("", locale1.getLanguage());
      assertFalse(locale1.equals((Object)locale0));
      assertNotNull(locale1);
      assertNotSame(locale1, locale0);
      
      String string0 = Locale.lookupTag(vector0, set0);
      assertFalse(set0.contains("org.apache.commons.lang3.RegExUtils"));
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("it", locale0.getLanguage());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertFalse(locale0.equals((Object)locale1));
      assertNull(string0);
      assertNotSame(locale0, locale1);
      
      int int1 = StringUtils.getFuzzyDistance("\r", "\r", locale0);
      assertEquals(1, int1);
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("it", locale0.getLanguage());
      assertEquals("ita", locale0.getISO3Language());
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(int1 == int0);
      assertNotSame(locale0, locale1);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "\r";
      stringArray0[1] = "-p1k*M4,E>[";
      String string1 = StringUtils.replaceEach("-p1k*M4,E>[", stringArray0, stringArray0);
      assertEquals("-p1k*M4,E>[", string1);
      assertNotNull(string1);
      assertEquals(2, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test321()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 64;
      String string0 = StringUtils.join(intArray0, '{', 1924, 1924);
      assertArrayEquals(new int[] {64}, intArray0);
      assertEquals("", string0);
      assertNotNull(string0);
      assertEquals(1, intArray0.length);
      
      int int0 = StringUtils.indexOf((CharSequence) "", (CharSequence) "");
      assertEquals(0, int0);
      
      String string1 = StringUtils.substringAfterLast((String) null, 0);
      assertNull(string1);
  }

  @Test(timeout = 4000)
  public void test322()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = '2';
      charArray0[1] = 's';
      charArray0[2] = '2';
      String string0 = StringUtils.join(charArray0, 'S', 67, 66);
      assertArrayEquals(new char[] {'2', 's', '2'}, charArray0);
      assertEquals("", string0);
      assertNotNull(string0);
      assertEquals(3, charArray0.length);
      
      String string1 = StringUtils.replaceChars("", "", "[0");
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      int int0 = StringUtils.lastIndexOf((CharSequence) "", (CharSequence) "");
      assertEquals(0, int0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      String string2 = StringUtils.joinWith("}xk 6mk&yQ`^suYg]", charSequenceArray0);
      assertEquals("}xk 6mk&yQ`^suYg]}xk 6mk&yQ`^suYg]", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals(3, charSequenceArray0.length);
  }

  @Test(timeout = 4000)
  public void test323()  throws Throwable  {
      String string0 = StringUtils.substringAfter("[D/.5Q]{sGZM2sH<] in an array of ", "!");
      assertEquals("", string0);
      assertNotNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[0] = (CharSequence) "!";
      charSequenceArray0[1] = (CharSequence) "!";
      int int0 = StringUtils.indexOfAny((CharSequence) "", charSequenceArray0);
      assertEquals((-1), int0);
      assertEquals(2, charSequenceArray0.length);
      
      String[] stringArray0 = StringUtils.split("");
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      
      String[] stringArray1 = StringUtils.split("[D/.5Q]{sGZM2sH<] in an array of ", "F.BHclWk~wl!q=U$~");
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(3, stringArray1.length);
      
      int int1 = StringUtils.countMatches((CharSequence) "!", charSequenceArray0[0]);
      assertEquals(1, int1);
      assertFalse(int1 == int0);
      assertEquals(2, charSequenceArray0.length);
      
      boolean boolean0 = StringUtils.isNumeric("[D/.5Q]{sGZM2sH<] in an array of ");
      assertFalse(boolean0);
      
      String string1 = StringUtils.left("org.apache.commons.lang3.ObjectUtils", (-1));
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.substringBetween("{oU+b}m>[]`&C", (String) null);
      assertNull(string2);
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertFalse(linkedList0.contains(""));
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      String[] stringArray2 = StringUtils.substringsBetween("\n\n", "org.apache.commons.lang3.ObjectUtils", (String) null);
      assertNull(stringArray2);
  }

  @Test(timeout = 4000)
  public void test324()  throws Throwable  {
      String string0 = StringUtils.trimToNull("Minimum abbreviation width with offset is %d");
      assertEquals("Minimum abbreviation width with offset is %d", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.lowerCase("\n");
      assertEquals("\n", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.replaceChars("|N", "Minimum abbreviation width with offset is %d", "Cloneable type Array element VbdG");
      assertEquals("|N", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      boolean boolean0 = StringUtils.isAlphaSpace("Minimum abbreviation width with offset is %d");
      assertFalse(boolean0);
      
      Object[] objectArray0 = new Object[0];
      // Undeclared exception!
      try { 
        StringUtils.join(objectArray0, ';', 86, 321);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 86
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test325()  throws Throwable  {
      String string0 = StringUtils.rightPad((String) null, 2986, "\r");
      assertNull(string0);
      
      String string1 = StringUtils.normalizeSpace("");
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.removeIgnoreCase("AyIi", "");
      assertEquals("AyIi", string2);
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      int int0 = StringUtils.indexOfDifference((CharSequence) "", (CharSequence) "");
      assertEquals((-1), int0);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = null;
      stringArray0[1] = "";
  }

  @Test(timeout = 4000)
  public void test326()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("@", "@", (-5749));
      assertNotNull(stringArray0);
      assertEquals(2, stringArray0.length);
      
      String[] stringArray1 = StringUtils.substringsBetween("7#pdP&C6=5[#|,K1!", "7#pdP&C6=5[#|,K1!", "@");
      assertNull(stringArray1);
  }

  @Test(timeout = 4000)
  public void test327()  throws Throwable  {
      String string0 = StringUtils.substringBeforeLast("", "Minimum abbreviation width is %d");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.uncapitalize(" ");
      assertEquals(" ", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      String string2 = StringUtils.join(booleanArray0, 'x', 0, (-164));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false}, booleanArray0));
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals(5, booleanArray0.length);
      
      String string3 = StringUtils.replaceIgnoreCase(" ", "\n", "");
      assertEquals(" ", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string1));
      assertNotNull(string3);
      
      boolean boolean0 = StringUtils.isMixedCase("");
      assertFalse(boolean0);
      
      int int0 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      String string4 = StringUtils.replaceChars("Minimum abbreviation width is %d", "E6$5XQ/l-@lOq", ";T*[SltxmJJVfm]{x");
      assertEquals("Minimum abbreviation width is %d", string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertNotNull(string4);
      
      String string5 = StringUtils.difference("G^7|+zFpb:oK?5", (String) null);
      assertEquals("G^7|+zFpb:oK?5", string5);
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertNotNull(string5);
      
      String string6 = StringUtils.repeat(" p.]Sq$W[fI;V+QY", 5);
      assertEquals(" p.]Sq$W[fI;V+QY p.]Sq$W[fI;V+QY p.]Sq$W[fI;V+QY p.]Sq$W[fI;V+QY p.]Sq$W[fI;V+QY", string6);
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string2));
      assertNotNull(string6);
      
      int int1 = StringUtils.indexOf((CharSequence) ";T*[SltxmJJVfm]{x", 0, 8);
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      
      String[] stringArray0 = StringUtils.substringsBetween("m~`PD", (String) null, (String) null);
      assertNull(stringArray0);
      
      String string7 = StringUtils.rightPad((String) null, (-1), "ch");
      assertNull(string7);
  }

  @Test(timeout = 4000)
  public void test328()  throws Throwable  {
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      String string0 = StringUtils.getIfEmpty("offset cannot be negative", supplier0);
      assertEquals("offset cannot be negative", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOf((CharSequence) "s-D4{8$Mo,|,xZ", 6);
      assertEquals((-1), int0);
      
      boolean boolean0 = StringUtils.isMixedCase("s-D4{8$Mo,|,xZ");
      assertTrue(boolean0);
      
      String[] stringArray0 = StringUtils.substringsBetween("*Q", "xeR=", "offset cannot be negative");
      assertNull(stringArray0);
      
      String string1 = StringUtils.substringBefore("*Q", 6);
      assertEquals("*Q", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test329()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("@", "@", (-5749));
      assertNotNull(stringArray0);
      assertEquals(2, stringArray0.length);
      
      String string0 = StringUtils.swapCase("v~Q>/,j>}Index:");
      assertEquals("V~q>/,J>}iNDEX:", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test330()  throws Throwable  {
      String string0 = StringUtils.defaultString("offset cannot be negative");
      assertEquals("offset cannot be negative", string0);
      assertNotNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      charSequenceArray0[0] = (CharSequence) "2";
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) 'j';
      floatArray0[1] = (-2530.9985F);
      floatArray0[2] = (float) 'j';
      floatArray0[3] = (float) 'j';
      String string1 = StringUtils.join(floatArray0, ';', 5899, (-2387));
      assertArrayEquals(new float[] {106.0F, (-2530.9985F), 106.0F, 106.0F}, floatArray0, 0.01F);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(4, floatArray0.length);
      
      String string2 = StringUtils.rightPad("$DK#,@ 1\"C", (-2387), 'j');
      assertEquals("$DK#,@ 1\"C", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      String string3 = StringUtils.swapCase("offset cannot be negative");
      assertEquals("OFFSET CANNOT BE NEGATIVE", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      
      String string4 = StringUtils.removeAll("bdG", "$DK#,@ 1\"C");
      assertEquals("bdG", string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertNotNull(string4);
      
      String[] stringArray0 = new String[7];
      stringArray0[0] = "$DK#,@ 1\"C";
      stringArray0[1] = " has no clone method";
      stringArray0[2] = "bdG";
      stringArray0[3] = "bdG";
      stringArray0[4] = "bdG";
      stringArray0[5] = "";
      stringArray0[6] = "";
      String string5 = StringUtils.firstNonEmpty(stringArray0);
      assertEquals("$DK#,@ 1\"C", string5);
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertTrue(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertNotNull(string5);
      assertEquals(7, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test331()  throws Throwable  {
      String[] stringArray0 = new String[13];
      stringArray0[0] = "{}";
      stringArray0[1] = "";
      String string0 = StringUtils.firstNonBlank(stringArray0);
      assertEquals("{}", string0);
      assertNotNull(string0);
      assertEquals(13, stringArray0.length);
      
      boolean boolean0 = StringUtils.startsWithAny("", stringArray0);
      assertFalse(boolean0);
      assertEquals(13, stringArray0.length);
      
      boolean boolean1 = StringUtils.containsWhitespace("{}");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String string1 = StringUtils.replaceFirst("", "ILg", "w");
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      int[] intArray0 = StringUtils.toCodePoints("");
      assertArrayEquals(new int[] {}, intArray0);
      assertNotNull(intArray0);
      assertEquals(0, intArray0.length);
      
      float[] floatArray0 = new float[0];
      String string2 = StringUtils.join(floatArray0, 'e');
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals(0, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test332()  throws Throwable  {
      String string0 = StringUtils.trimToNull("Minimum abbreviation width with offset is %d");
      assertEquals("Minimum abbreviation width with offset is %d", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.lowerCase("\n");
      assertEquals("\n", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = "R=X\"eH+!97+RVrt&{}";
      stringArray0[1] = "Minimum abbreviation width with offset is %d";
      stringArray0[2] = "\n";
      String[] stringArray1 = StringUtils.stripAll(stringArray0, "Minimum abbreviation width with offset is %d");
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(3, stringArray0.length);
      assertEquals(3, stringArray1.length);
      
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "\n", "Locale must not be null");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test333()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "_";
      stringArray0[1] = "wO";
      stringArray0[3] = "wO";
      stringArray0[6] = "_";
      stringArray0[7] = "_";
      String string0 = StringUtils.replaceEachRepeatedly("Object varargs must not be null", stringArray0, stringArray0);
      assertEquals("Object varargs must not be null", string0);
      assertNotNull(string0);
      assertEquals(8, stringArray0.length);
      
      String string1 = StringUtils.substringBefore("_", stringArray0[5]);
      assertEquals("_", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(8, stringArray0.length);
      
      int int0 = StringUtils.lastIndexOfAny("wO", stringArray0);
      assertEquals(0, int0);
      assertEquals(8, stringArray0.length);
      
      boolean boolean0 = StringUtils.isAlphanumericSpace(stringArray0[5]);
      assertFalse(boolean0);
      assertEquals(8, stringArray0.length);
      
      boolean boolean1 = StringUtils.isAllLowerCase("_");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test334()  throws Throwable  {
      String string0 = StringUtils.upperCase("Strings must not be null");
      assertEquals("STRINGS MUST NOT BE NULL", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.toRootLowerCase("Dh<PG9l");
      assertEquals("dh<pg9l", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.isAllUpperCase("dh<pg9l");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isNotEmpty("dh<pg9l");
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      String string2 = StringUtils.wrap("Dh<PG9l", (String) null);
      assertEquals("Dh<PG9l", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      CharSequence[] charSequenceArray0 = new CharSequence[9];
      charSequenceArray0[0] = (CharSequence) "Dh<PG9l";
      String string3 = StringUtils.trimToNull("Strings must not be null");
      assertEquals("Strings must not be null", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      
      charSequenceArray0[1] = (CharSequence) "Strings must not be null";
      boolean boolean2 = StringUtils.isEmpty("Strings must not be null");
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      
      String string4 = StringUtils.abbreviate((String) null, "", (-3580));
      assertNull(string4);
      
      String string5 = StringUtils.remove("The Array must not be null", "Strings must not be null");
      assertEquals("The Array must not be null", string5);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertNotNull(string5);
      
      String[] stringArray0 = StringUtils.substringsBetween("The Array must not be null", "The Array must not be null", "dh<pg9l");
      assertNull(stringArray0);
      
      int int0 = StringUtils.lastIndexOfAny((CharSequence) null, (CharSequence[]) null);
      assertEquals((-1), int0);
      
      String string6 = StringUtils.substring("|", 57, 764);
      assertEquals("", string6);
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string3));
      assertNotNull(string6);
  }

  @Test(timeout = 4000)
  public void test335()  throws Throwable  {
      String string0 = StringUtils.removeEnd("0\"j9+)Nv%kXU2q\"z/", "clone");
      assertEquals("0\"j9+)Nv%kXU2q\"z/", string0);
      assertNotNull(string0);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) '';
      doubleArray0[1] = (double) 101;
      String string1 = StringUtils.join(doubleArray0, '', 540, (-1360));
      assertArrayEquals(new double[] {127.0, 101.0, 0.0}, doubleArray0, 0.01);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(3, doubleArray0.length);
      
      String string2 = StringUtils.defaultString("?D9t8:75Jpg5MG+", "-Is@DJi!FuCt$b");
      assertEquals("?D9t8:75Jpg5MG+", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      String string3 = StringUtils.capitalize("?D9t8:75Jpg5MG+");
      assertEquals("?D9t8:75Jpg5MG+", string3);
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      
      boolean boolean0 = StringUtils.isNumericSpace("");
      assertTrue(boolean0);
      
      boolean boolean1 = StringUtils.isNumericSpace("0\"j9+)Nv%kXU2q\"z/");
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test336()  throws Throwable  {
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) ':';
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("Aborting to protect against StackOverflowError - output of one loop is the input of another", "Aborting to protect against StackOverflowError - output of one loop is the input of another");
      assertNotNull(stringArray0);
      assertEquals(2, stringArray0.length);
      
      String string0 = StringUtils.wrapIfMissing("VbdG", (String) null);
      assertEquals("VbdG", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.removeFirst("Z%-,C0YE~r{YgC}m", "Search and Replace array lengths don't match: ");
      assertEquals("Z%-,C0YE~r{YgC}m", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      int int0 = StringUtils.lastIndexOfAny("Aborting to protect against StackOverflowError - output of one loop is the input of another", stringArray0);
      assertEquals(91, int0);
      assertEquals(2, stringArray0.length);
      
      String string2 = StringUtils.trimToNull("w{>bJ\"W}#f&");
      assertEquals("w{>bJ\"W}#f&", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test337()  throws Throwable  {
      String string0 = StringUtils.unwrap("t)mzG1WCD1k#4d(PK\"#", 's');
      assertEquals("t)mzG1WCD1k#4d(PK\"#", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.abbreviate((String) null, "t)mzG1WCD1k#4d(PK\"#", 31, (-3142));
      assertNull(string1);
      
      CharSequence charSequence0 = StringUtils.defaultIfEmpty((CharSequence) null, (CharSequence) "t)mzG1WCD1k#4d(PK\"#");
      assertEquals("t)mzG1WCD1k#4d(PK\"#", charSequence0);
      assertTrue(charSequence0.equals((Object)string0));
      assertNotNull(charSequence0);
      
      boolean boolean0 = StringUtils.isNumericSpace("t)mzG1WCD1k#4d(PK\"#");
      assertFalse(boolean0);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "t)mzG1WCD1k#4d(PK\"#", (CharSequence) "t)mzG1WCD1k#4d(PK\"#", 1362);
      assertEquals(0, int0);
      
      char[] charArray0 = new char[5];
      charArray0[0] = 'J';
      charArray0[1] = 's';
      charArray0[2] = 's';
      charArray0[3] = 's';
      charArray0[4] = 's';
      int int1 = StringUtils.indexOfAny((CharSequence) "t)mzG1WCD1k#4d(PK\"#", charArray0);
      assertArrayEquals(new char[] {'J', 's', 's', 's', 's'}, charArray0);
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      assertEquals(5, charArray0.length);
      
      String[] stringArray0 = new String[7];
      stringArray0[0] = null;
      stringArray0[1] = "Minimum abbreviation width is %d";
      stringArray0[2] = null;
      stringArray0[3] = "t)mzG1WCD1k#4d(PK\"#";
      stringArray0[4] = null;
      stringArray0[5] = null;
      stringArray0[6] = "Locale must not be null";
      String string2 = StringUtils.getCommonPrefix(stringArray0);
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)charSequence0));
      assertNotNull(string2);
      assertEquals(7, stringArray0.length);
      
      int int2 = StringUtils.lastIndexOfAny("t)mzG1WCD1k#4d(PK\"#", stringArray0);
      assertEquals(0, int2);
      assertTrue(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(7, stringArray0.length);
      
      // Undeclared exception!
      try { 
        StringUtils.replaceEachRepeatedly("t)mzG1WCD1k#4d(PK\"#", stringArray0, stringArray0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Aborting to protect against StackOverflowError - output of one loop is the input of another
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test338()  throws Throwable  {
      String string0 = StringUtils.unwrap("t)mzG1WCD1k#4d(PK\"#", 's');
      assertEquals("t)mzG1WCD1k#4d(PK\"#", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.abbreviate((String) null, "t)mzG1WCD1k#4d(PK\"#", 31, (-3148));
      assertNull(string1);
      
      CharSequence charSequence0 = StringUtils.defaultIfEmpty((CharSequence) null, (CharSequence) "t)mzG1WCD1k#4d(PK\"#");
      assertEquals("t)mzG1WCD1k#4d(PK\"#", charSequence0);
      assertTrue(charSequence0.equals((Object)string0));
      assertNotNull(charSequence0);
      
      boolean boolean0 = StringUtils.isNumericSpace("t)mzG1WCD1k#4d(PK\"#");
      assertFalse(boolean0);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "t)mzG1WCD1k#4d(PK\"#", (CharSequence) "t)mzG1WCD1k#4d(PK\"#", 1362);
      assertEquals(0, int0);
      
      char[] charArray0 = new char[5];
      charArray0[1] = 's';
      charArray0[2] = 's';
      charArray0[3] = 's';
      charArray0[4] = 's';
      int int1 = StringUtils.indexOfAny((CharSequence) "t)mzG1WCD1k#4d(PK\"#", charArray0);
      assertArrayEquals(new char[] {'\u0000', 's', 's', 's', 's'}, charArray0);
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      assertEquals(5, charArray0.length);
      
      String[] stringArray0 = new String[7];
      stringArray0[0] = null;
      stringArray0[1] = null;
      stringArray0[2] = null;
      stringArray0[3] = "t)mzG1WCD1k#4d(PK\"#";
      stringArray0[4] = null;
      stringArray0[5] = null;
      stringArray0[6] = "Locale must not be null";
      String string2 = StringUtils.getCommonPrefix(stringArray0);
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)charSequence0));
      assertNotNull(string2);
      assertEquals(7, stringArray0.length);
      
      int int2 = StringUtils.lastIndexOfAny("t)mzG1WCD1k#4d(PK\"#", stringArray0);
      assertEquals(0, int2);
      assertTrue(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(7, stringArray0.length);
      
      // Undeclared exception!
      try { 
        StringUtils.replaceEachRepeatedly("t)mzG1WCD1k#4d(PK\"#", stringArray0, stringArray0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Aborting to protect against StackOverflowError - output of one loop is the input of another
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test339()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) null;
      String string0 = StringUtils.normalizeSpace((String) null);
      assertNull(string0);
      
      String string1 = StringUtils.substring((String) null, 0, 0);
      assertNull(string1);
      
      long[] longArray0 = new long[7];
      longArray0[0] = (long) 0;
      longArray0[1] = (long) 0;
      longArray0[2] = (long) 0;
      longArray0[3] = (long) 0;
      longArray0[4] = (long) 0;
      longArray0[5] = (long) 0;
      String string2 = StringUtils.rightPad((String) null, 0);
      assertNull(string2);
      
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      charSequenceArray0[0] = (CharSequence) null;
      charSequenceArray0[1] = (CharSequence) null;
      charSequenceArray0[2] = (CharSequence) null;
      charSequenceArray0[3] = (CharSequence) null;
      int int0 = StringUtils.indexOfDifference(charSequenceArray0);
      assertEquals((-1), int0);
      assertEquals(4, charSequenceArray0.length);
  }

  @Test(timeout = 4000)
  public void test340()  throws Throwable  {
      String string0 = StringUtils.substringBeforeLast("", "Minimum abbreviation width is %d");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.uncapitalize(" ");
      assertEquals(" ", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) " ";
      objectArray0[1] = (Object) "";
      String string2 = StringUtils.join(objectArray0);
      assertEquals(" ", string2);
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals(2, objectArray0.length);
      
      int int0 = StringUtils.lastOrdinalIndexOf("Minimum abbreviation width is %d", "Minimum abbreviation width is %d", 0);
      assertEquals((-1), int0);
      
      String string3 = StringUtils.join(objectArray0, '|', 0, 0);
      assertEquals("", string3);
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      assertEquals(2, objectArray0.length);
      
      String string4 = StringUtils.replaceAll("", "", " ");
      assertEquals(" ", string4);
      assertTrue(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertNotNull(string4);
      
      String string5 = StringUtils.leftPad("Minimum abbreviation width is %d", (-1), 'B');
      assertEquals("Minimum abbreviation width is %d", string5);
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertNotNull(string5);
      
      String string6 = StringUtils.substringAfter(";c|JP(&3", 99);
      assertEquals("|JP(&3", string6);
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string3));
      assertNotNull(string6);
      
      int int1 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      
      String string7 = StringUtils.firstNonEmpty((String[]) null);
      assertNull(string7);
      
      String string8 = StringUtils.repeat('B', (-1));
      assertEquals("", string8);
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string2));
      assertTrue(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string6));
      assertNotNull(string8);
  }

  @Test(timeout = 4000)
  public void test341()  throws Throwable  {
      String string0 = StringUtils.uncapitalize("s-D4{8$Mo,|,xZ");
      assertEquals("s-D4{8$Mo,|,xZ", string0);
      assertNotNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      boolean boolean0 = StringUtils.isAllBlank(charSequenceArray0);
      assertTrue(boolean0);
      assertEquals(0, charSequenceArray0.length);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      String string1 = StringUtils.join(booleanArray0, 'A', 556, 87);
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray0));
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(2, booleanArray0.length);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)2456;
      shortArray0[1] = (short)101;
      // Undeclared exception!
      try { 
        StringUtils.join(shortArray0, '!', 272, 1406);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 272
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test342()  throws Throwable  {
      String string0 = StringUtils.CR;
      assertEquals("\r", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isNotBlank("\r");
      assertFalse(boolean0);
      
      Charset charset0 = Charset.defaultCharset();
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.name());
      assertNotNull(charset0);
      
      String string1 = StringUtils.normalizeSpace("...");
      assertEquals("...", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.join((boolean[]) null, '@');
      assertNull(string2);
      
      boolean boolean1 = StringUtils.endsWith("...", "\r");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      boolean boolean2 = StringUtils.equalsIgnoreCase("\r", "...");
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("{r*d4", "{r*d4", 1527);
      assertNotNull(stringArray0);
      assertEquals(6, stringArray0.length);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) '@';
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (double) '@';
      doubleArray0[3] = 132.7973549;
      doubleArray0[4] = 309.895544;
      doubleArray0[5] = (double) 1527;
      String string3 = StringUtils.join(doubleArray0, '/', 1527, 1527);
      assertArrayEquals(new double[] {64.0, 0.0, 64.0, 132.7973549, 309.895544, 1527.0}, doubleArray0, 0.01);
      assertEquals("", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      assertEquals(6, doubleArray0.length);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "", (CharSequence) "\r");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test343()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      String string0 = StringUtils.prependIfMissingIgnoreCase("qD/.5Q]{&GZM2vH<]", "qD/.5Q]{&GZM2vH<]", charSequenceArray0);
      assertEquals("qD/.5Q]{&GZM2vH<]", string0);
      assertNotNull(string0);
      assertEquals(1, charSequenceArray0.length);
      
      String string1 = StringUtils.substringAfterLast("qD/.5Q]{&GZM2vH<]", "");
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.startsWithIgnoreCase("qD/.5Q]{&GZM2vH<]", (CharSequence) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test344()  throws Throwable  {
      String string0 = StringUtils.lowerCase((String) null, (Locale) null);
      assertNull(string0);
      
      String string1 = StringUtils.getDigits("Invalid ");
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.removeStartIgnoreCase("-CfE&", (String) null);
      assertEquals("-CfE&", string2);
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      String string3 = StringUtils.substringBetween("*1mR].mvcp(@ '", (String) null);
      assertNull(string3);
      
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = true;
      booleanArray0[6] = false;
      booleanArray0[7] = true;
      booleanArray0[8] = true;
      String string4 = StringUtils.join(booleanArray0, '[');
      assertTrue(Arrays.equals(new boolean[] {false, true, false, false, false, true, false, true, true}, booleanArray0));
      assertEquals("false[true[false[false[false[true[false[true[true", string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertNotNull(string4);
      assertEquals(9, booleanArray0.length);
      
      boolean boolean0 = StringUtils.endsWith("*1mR].mvcp(@ '", (CharSequence) null);
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.equalsIgnoreCase((CharSequence) null, "false[true[false[false[false[true[false[true[true");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("", "Ut/~-A_C}3KGh$", 1527);
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test345()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[4] = false;
      booleanArray0[5] = true;
      booleanArray0[6] = true;
      booleanArray0[7] = false;
      String string0 = StringUtils.join(booleanArray0, '[');
      assertTrue(Arrays.equals(new boolean[] {false, true, false, false, false, true, true, false}, booleanArray0));
      assertEquals("false[true[false[false[false[true[true[false", string0);
      assertNotNull(string0);
      assertEquals(8, booleanArray0.length);
      
      String string1 = StringUtils.wrap(" is not in the range '0' - '9'", "!");
      assertEquals("! is not in the range '0' - '9'!", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      Locale locale0 = Locale.CANADA_FRENCH;
      assertEquals("", locale0.getVariant());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr_CA", locale0.toString());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("CA", locale0.getCountry());
      assertNotNull(locale0);
      
      Locale locale1 = new Locale("Arra");
      assertEquals("", locale1.getCountry());
      assertEquals("", locale1.getISO3Country());
      assertEquals("", locale1.getVariant());
      assertEquals("arra", locale1.toString());
      assertEquals("arra", locale1.getLanguage());
      assertFalse(locale1.equals((Object)locale0));
      assertNotNull(locale1);
      
      int int0 = StringUtils.getFuzzyDistance("", "false[true[false[false[false[true[true[false", locale1);
      assertEquals(0, int0);
      assertEquals("", locale1.getCountry());
      assertEquals("", locale1.getISO3Country());
      assertEquals("", locale1.getVariant());
      assertEquals("arra", locale1.toString());
      assertEquals("arra", locale1.getLanguage());
      assertFalse(locale1.equals((Object)locale0));
      assertNotSame(locale1, locale0);
      
      // Undeclared exception!
      try { 
        StringUtils.join(booleanArray0, '[', 0, 22);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 8
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test346()  throws Throwable  {
      String string0 = StringUtils.rightPad("#", 0, "F1~Sp}mS5");
      assertEquals("#", string0);
      assertNotNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[8];
      charSequenceArray0[0] = (CharSequence) "#";
      charSequenceArray0[1] = (CharSequence) "F1~Sp}mS5";
      char[] charArray0 = new char[0];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charBuffer0.length());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(0, charBuffer0.remaining());
      assertTrue(charBuffer0.hasArray());
      assertEquals(0, charBuffer0.limit());
      assertFalse(charBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.position());
      assertEquals(0, charBuffer0.capacity());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals("", charBuffer0.toString());
      assertNotNull(charBuffer0);
      assertEquals(0, charArray0.length);
      
      charSequenceArray0[2] = (CharSequence) charBuffer0;
      charSequenceArray0[3] = (CharSequence) "";
      charSequenceArray0[4] = (CharSequence) "#";
      charSequenceArray0[5] = (CharSequence) "0FO5}hhQ5YS+G9";
      charSequenceArray0[6] = (CharSequence) "#";
      charSequenceArray0[7] = (CharSequence) "";
      boolean boolean0 = StringUtils.equalsAnyIgnoreCase("#", charSequenceArray0);
      assertTrue(boolean0);
      assertEquals(8, charSequenceArray0.length);
      
      CharBuffer charBuffer1 = CharBuffer.wrap(charArray0, 0, 0);
      assertArrayEquals(new char[] {}, charArray0);
      assertFalse(charBuffer1.isReadOnly());
      assertEquals(0, charBuffer1.remaining());
      assertEquals(0, charBuffer1.capacity());
      assertEquals(0, charBuffer1.length());
      assertFalse(charBuffer1.hasRemaining());
      assertEquals(0, charBuffer1.limit());
      assertEquals("", charBuffer1.toString());
      assertEquals(0, charBuffer1.arrayOffset());
      assertEquals(0, charBuffer1.position());
      assertTrue(charBuffer1.hasArray());
      assertFalse(charBuffer1.isDirect());
      assertTrue(charBuffer1.equals((Object)charBuffer0));
      assertNotNull(charBuffer1);
      assertNotSame(charBuffer1, charBuffer0);
      assertEquals(0, charArray0.length);
      
      IntStream intStream0 = charBuffer1.chars();
      assertArrayEquals(new char[] {}, charArray0);
      assertFalse(charBuffer1.isReadOnly());
      assertEquals(0, charBuffer1.remaining());
      assertEquals(0, charBuffer1.capacity());
      assertEquals(0, charBuffer1.length());
      assertFalse(charBuffer1.hasRemaining());
      assertEquals(0, charBuffer1.limit());
      assertEquals("", charBuffer1.toString());
      assertEquals(0, charBuffer1.arrayOffset());
      assertEquals(0, charBuffer1.position());
      assertTrue(charBuffer1.hasArray());
      assertFalse(charBuffer1.isDirect());
      assertTrue(charBuffer1.equals((Object)charBuffer0));
      assertNotNull(intStream0);
      assertNotSame(charBuffer1, charBuffer0);
      assertEquals(0, charArray0.length);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) '@';
      doubleArray0[1] = (double) '@';
      doubleArray0[2] = (double) '@';
      String string1 = StringUtils.join(doubleArray0, 'u', 321, (-1093));
      assertArrayEquals(new double[] {64.0, 64.0, 64.0}, doubleArray0, 0.01);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(3, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test347()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      String string0 = StringUtils.join((double[]) null, 'R', 32, 32);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test348()  throws Throwable  {
      CharSequence charSequence0 = null;
      boolean boolean0 = StringUtils.endsWithIgnoreCase((CharSequence) null, (CharSequence) null);
      assertTrue(boolean0);
      
      Object[] objectArray0 = new Object[6];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      objectArray0[1] = (Object) null;
      Locale locale0 = Locale.US;
      assertEquals("en", locale0.getLanguage());
      assertEquals("en_US", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("US", locale0.getCountry());
      assertEquals("eng", locale0.getISO3Language());
      assertNotNull(locale0);
      
      Locale locale1 = locale0.stripExtensions();
      assertEquals("en", locale0.getLanguage());
      assertEquals("en_US", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("US", locale0.getCountry());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale1.getVariant());
      assertEquals("US", locale1.getCountry());
      assertEquals("USA", locale1.getISO3Country());
      assertEquals("en_US", locale1.toString());
      assertEquals("en", locale1.getLanguage());
      assertEquals("eng", locale1.getISO3Language());
      assertNotNull(locale1);
      assertSame(locale0, locale1);
      assertSame(locale1, locale0);
      
      String string0 = StringUtils.upperCase("', is neither of type Map.Entry nor an Array", locale1);
      assertEquals("', IS NEITHER OF TYPE MAP.ENTRY NOR AN ARRAY", string0);
      assertEquals("en", locale0.getLanguage());
      assertEquals("en_US", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("US", locale0.getCountry());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale1.getVariant());
      assertEquals("US", locale1.getCountry());
      assertEquals("USA", locale1.getISO3Country());
      assertEquals("en_US", locale1.toString());
      assertEquals("en", locale1.getLanguage());
      assertEquals("eng", locale1.getISO3Language());
      assertNotNull(string0);
      assertSame(locale0, locale1);
      assertSame(locale1, locale0);
      
      char[] charArray0 = new char[1];
      CharSequence[] charSequenceArray0 = new CharSequence[8];
      charSequenceArray0[0] = null;
      charSequenceArray0[1] = (CharSequence) "', is neither of type Map.Entry nor an Array";
      char char0 = 'S';
      int int0 = 3360;
      int int1 = (-2283);
      String string1 = StringUtils.join((double[]) null, 'S', 3360, (-2283));
      assertNull(string1);
      
      charSequenceArray0[2] = (CharSequence) null;
      charSequenceArray0[3] = (CharSequence) "', is neither of type Map.Entry nor an Array";
      // Undeclared exception!
      try { 
        CharBuffer.allocate((-1119));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test349()  throws Throwable  {
      String string0 = StringUtils.reverse("");
      assertEquals("", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isEmpty("");
      assertTrue(boolean0);
      
      char[] charArray0 = new char[8];
      charArray0[0] = '}';
      charArray0[1] = '}';
      charArray0[2] = '}';
      charArray0[3] = '}';
      charArray0[4] = '}';
      charArray0[5] = '}';
      charArray0[7] = '}';
      boolean boolean1 = StringUtils.containsOnly((CharSequence) "", charArray0);
      assertArrayEquals(new char[] {'}', '}', '}', '}', '}', '}', '\u0000', '}'}, charArray0);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals(8, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test350()  throws Throwable  {
      String string0 = StringUtils.swapCase("");
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOfDifference((CharSequence) null, (CharSequence) "");
      assertEquals(0, int0);
      
      double double0 = StringUtils.getJaroWinklerDistance("", " in an array of ");
      assertEquals(0.0, double0, 0.01);
      
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zh_TW", locale0.toString());
      assertNotNull(locale0);
      
      String string1 = locale0.getDisplayScript();
      assertEquals("", string1);
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zh_TW", locale0.toString());
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.lowerCase("2q\"z/", locale0);
      assertEquals("2q\"z/", string2);
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zh_TW", locale0.toString());
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      String string3 = StringUtils.normalizeSpace("");
      assertEquals("", string3);
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string1));
      assertNotNull(string3);
      
      String string4 = StringUtils.substringBeforeLast("2q\"z/", "[");
      assertEquals("2q\"z/", string4);
      assertFalse(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertNotNull(string4);
  }

  @Test(timeout = 4000)
  public void test351()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      String string0 = StringUtils.trimToNull("qD/.5Q]{&GZM2vH<]");
      assertEquals("qD/.5Q]{&GZM2vH<]", string0);
      assertNotNull(string0);
      
      charSequenceArray0[0] = (CharSequence) "qD/.5Q]{&GZM2vH<]";
      String string1 = StringUtils.prependIfMissingIgnoreCase("qD/.5Q]{&GZM2vH<]", "qD/.5Q]{&GZM2vH<]", charSequenceArray0);
      assertEquals("qD/.5Q]{&GZM2vH<]", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(1, charSequenceArray0.length);
      
      String string2 = StringUtils.removeStart("", "qD/.5Q]{&GZM2vH<]");
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      String string3 = StringUtils.substringBeforeLast("U'i{GNK", ")%");
      assertEquals("U'i{GNK", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      
      char[] charArray0 = new char[5];
      charArray0[0] = '5';
      charArray0[1] = 'D';
      String[] stringArray0 = new String[3];
      stringArray0[0] = "";
      stringArray0[1] = ")%";
      stringArray0[2] = "";
      String string4 = StringUtils.firstNonBlank(stringArray0);
      assertEquals(")%", string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertNotNull(string4);
      assertEquals(3, stringArray0.length);
      
      String string5 = StringUtils.removeIgnoreCase("", "u");
      assertEquals("", string5);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertTrue(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertNotNull(string5);
      
      boolean boolean0 = StringUtils.isAlphanumeric("e{v<'8Xw");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isWhitespace("u");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test352()  throws Throwable  {
      String string0 = StringUtils.stripToEmpty("G^7|+zFpb:oK?5");
      assertEquals("G^7|+zFpb:oK?5", string0);
      assertNotNull(string0);
      
      int int0 = (-3810);
      String string1 = StringUtils.substringBefore("G^7|+zFpb:oK?5", (-3810));
      assertEquals("G^7|+zFpb:oK?5", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = "UpDjdzd6M#&MP";
      String[] stringArray0 = new String[2];
      stringArray0[0] = "UpDjdzd6M#&MP";
      stringArray0[1] = "UpDjdzd6M#&MP";
      String string3 = StringUtils.getCommonPrefix(stringArray0);
      assertEquals("UpDjdzd6M#&MP", string3);
      assertTrue(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      assertEquals(2, stringArray0.length);
      
      String[] stringArray1 = StringUtils.splitPreserveAllTokens("GLWZTRHq>099#", '7');
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(1, stringArray1.length);
      
      String string4 = StringUtils.upperCase("G^7|+zFpb:oK?5");
      assertEquals("G^7|+ZFPB:OK?5", string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertNotNull(string4);
      
      short[] shortArray0 = new short[0];
      // Undeclared exception!
      try { 
        StringUtils.join(shortArray0, '3', (-3236), 51);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -3236
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test353()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      charSequenceArray0[0] = (CharSequence) "KX+";
      charSequenceArray0[1] = (CharSequence) "KX+";
      charSequenceArray0[2] = (CharSequence) "KX+";
      charSequenceArray0[3] = (CharSequence) "KX+";
      charSequenceArray0[4] = (CharSequence) "KX+";
      int int0 = StringUtils.indexOfDifference(charSequenceArray0);
      assertEquals((-1), int0);
      assertEquals(5, charSequenceArray0.length);
      
      String string0 = StringUtils.wrap("6ov 0=W<;OhZ0[", '^');
      assertEquals("^6ov 0=W<;OhZ0[^", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test354()  throws Throwable  {
      String[] stringArray0 = StringUtils.split("Wo>i");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      String string0 = StringUtils.upperCase("Wo>i");
      assertEquals("WO>I", string0);
      assertNotNull(string0);
      
      double double0 = StringUtils.getJaroWinklerDistance("WO>I", "Wo>i");
      assertEquals(0.67, double0, 0.01);
      
      String string1 = StringUtils.firstNonEmpty(stringArray0);
      assertEquals("Wo>i", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(1, stringArray0.length);
      
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) "Wo>i";
      objectArray0[1] = (Object) "Wo>i";
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[2] = object0;
      objectArray0[3] = (Object) "Wo>i";
      objectArray0[4] = (Object) "Wo>i";
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      objectArray0[5] = object1;
      String string2 = StringUtils.join(objectArray0, '`');
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals(6, objectArray0.length);
      
      String string3 = StringUtils.substringBetween("Array element }yrRfNpTa/@3(+m", "Wo>i", "Wo>i");
      assertNull(string3);
      
      String string4 = StringUtils.join((char[]) null, '`', 1928, 1928);
      assertNull(string4);
      
      String string5 = StringUtils.strip("Wo>i");
      assertEquals("Wo>i", string5);
      assertFalse(string5.equals((Object)string2));
      assertTrue(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertNotNull(string5);
      
      boolean boolean0 = StringUtils.equalsAnyIgnoreCase("Wo>i", stringArray0);
      assertTrue(boolean0);
      assertEquals(1, stringArray0.length);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "Wo>i", (CharSequence) "Wo>i", (-887));
      assertEquals((-1), int0);
      
      String string6 = StringUtils.remove("org.apache.commons.lang3.CharSequenceUtils", "h0DJ");
      assertEquals("org.apache.commons.lang3.CharSequenceUtils", string6);
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string2));
      assertNotNull(string6);
  }

  @Test(timeout = 4000)
  public void test355()  throws Throwable  {
      String string0 = StringUtils.substringAfter("[D/.5Q]{sGZM2sH<] in an array of ", "!");
      assertEquals("", string0);
      assertNotNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[0] = (CharSequence) "!";
      charSequenceArray0[1] = (CharSequence) "!";
      int int0 = StringUtils.indexOfAny((CharSequence) "", charSequenceArray0);
      assertEquals((-1), int0);
      assertEquals(2, charSequenceArray0.length);
      
      String[] stringArray0 = StringUtils.split("");
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      
      String[] stringArray1 = StringUtils.split("[D/.5Q]{sGZM2sH<] in an array of ", "[D/.5Q]{sGZM2sH<] in an array of ");
      assertNotNull(stringArray1);
      assertSame(stringArray1, stringArray0);
      assertEquals(0, stringArray1.length);
      
      int int1 = StringUtils.countMatches((CharSequence) "!", charSequenceArray0[0]);
      assertEquals(1, int1);
      assertFalse(int1 == int0);
      assertEquals(2, charSequenceArray0.length);
      
      boolean boolean0 = StringUtils.isNumeric("[D/.5Q]{sGZM2sH<] in an array of ");
      assertFalse(boolean0);
      
      String string1 = StringUtils.replaceAll("A", ".vJUO`HXV;lj1-;", "org.apache.commons.lang3.ObjectUtils");
      assertEquals("A", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.substringBetween("{oU+b}m>[]`&C", (String) null);
      assertNull(string2);
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertFalse(linkedList0.contains("!"));
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Iterator<Object> iterator0 = linkedList0.iterator();
      assertFalse(linkedList0.contains("!"));
      assertEquals(0, linkedList0.size());
      assertNotNull(iterator0);
      
      String string3 = StringUtils.join(iterator0, "Threshold must not be negative");
      assertFalse(linkedList0.contains("!"));
      assertEquals("", string3);
      assertEquals(0, linkedList0.size());
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      
      String string4 = StringUtils.repeat("org.apache.commons.lang3.ObjectUtils", "The Stringmus not be empty", 70);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertNotNull(string4);
      
      String[] stringArray2 = StringUtils.splitByWholeSeparatorPreserveAllTokens(", '", "A");
      assertFalse(stringArray2.equals((Object)stringArray1));
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertNotNull(stringArray2);
      assertNotSame(stringArray2, stringArray1);
      assertNotSame(stringArray2, stringArray0);
      assertEquals(1, stringArray2.length);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)90;
      byteArray0[1] = (byte)13;
      byteArray0[2] = (byte)43;
      byteArray0[3] = (byte)1;
      byteArray0[4] = (byte)64;
      byteArray0[5] = (byte)127;
      byteArray0[6] = (byte)2;
      byteArray0[7] = (byte)11;
      // Undeclared exception!
      try { 
        Charset.forName((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null charset name
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test356()  throws Throwable  {
      String string0 = StringUtils.firstNonBlank((String[]) null);
      assertNull(string0);
      
      int int0 = StringUtils.indexOf((CharSequence) null, (CharSequence) null);
      assertEquals((-1), int0);
      
      int int1 = StringUtils.lastIndexOf((CharSequence) null, 1023);
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparator((String) null, "c@T3S/`D+)C3O", (-1));
      assertNull(stringArray0);
      
      String string1 = StringUtils.replaceAll("c@T3S/`D+)C3O", "c@T3S/`D+)C3O", (String) null);
      assertEquals("c@T3S/`D+)C3O", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.rightPad("9A({4", 1351, "c@T3S/`D+)C3O");
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      String string3 = StringUtils.abbreviate((String) null, (String) null, 1114111);
      assertNull(string3);
      
      String string4 = StringUtils.replaceIgnoreCase("c@T3S/`D+)C3O", "Search and Replace array lengths don't match: ", "9A({4", 217);
      assertEquals("c@T3S/`D+)C3O", string4);
      assertTrue(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertNotNull(string4);
      
      String[] stringArray1 = StringUtils.splitPreserveAllTokens("clone");
      assertNotNull(stringArray1);
      assertEquals(1, stringArray1.length);
      
      String string5 = StringUtils.replaceFirst("@/GYt", "=S3Rtn}=", "Ml;5s(9,F4Rku");
      assertEquals("@/GYt", string5);
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertNotNull(string5);
  }

  @Test(timeout = 4000)
  public void test357()  throws Throwable  {
      String string0 = StringUtils.upperCase("Strings must not be null");
      assertEquals("STRINGS MUST NOT BE NULL", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isAllUpperCase("STRINGS MUST NOT BE NULL");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isNotEmpty("STRINGS MUST NOT BE NULL");
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      char[] charArray0 = new char[3];
      charArray0[0] = '$';
      charArray0[1] = 'v';
      charArray0[2] = 'O';
      boolean boolean2 = StringUtils.containsNone((CharSequence) "Dh<PG9l", charArray0);
      assertArrayEquals(new char[] {'$', 'v', 'O'}, charArray0);
      assertTrue(boolean2);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertEquals(3, charArray0.length);
      
      boolean boolean3 = StringUtils.isAlphanumeric("Strings must not be null");
      assertFalse(boolean3);
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3 == boolean2);
      
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      charSequenceArray0[0] = (CharSequence) "STRINGS MUST NOT BE NULL";
      charSequenceArray0[1] = (CharSequence) "STRINGS MUST NOT BE NULL";
      charSequenceArray0[2] = (CharSequence) "Dh<PG9l";
      charSequenceArray0[3] = (CharSequence) "Dh<PG9l";
      String[] stringArray0 = StringUtils.stripAll((String[]) null, "WFHcmqb[,");
      assertNull(stringArray0);
      
      String string1 = StringUtils.remove("STRINGS MUST NOT BE NULL", '|');
      assertEquals("STRINGS MUST NOT BE NULL", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      int[] intArray0 = new int[9];
      intArray0[0] = (int) 'O';
      intArray0[1] = (int) '|';
      intArray0[2] = (int) '$';
      intArray0[3] = (int) '$';
      intArray0[4] = (int) 'v';
      intArray0[5] = (int) 'O';
      intArray0[6] = (int) '$';
      intArray0[7] = (int) 'v';
      intArray0[8] = (int) 'O';
      String string2 = StringUtils.join(intArray0, '$', 803, 64);
      assertArrayEquals(new int[] {79, 124, 36, 36, 118, 79, 36, 118, 79}, intArray0);
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals(9, intArray0.length);
      
      int int0 = StringUtils.indexOf((CharSequence) "Strings must not be null", (CharSequence) "Strings must not be null");
      assertEquals(0, int0);
      
      String string3 = StringUtils.substringAfterLast((String) null, 648);
      assertNull(string3);
  }

  @Test(timeout = 4000)
  public void test358()  throws Throwable  {
      String string0 = StringUtils.rightPad("#", (-41), "F1~Sp}mS5");
      assertEquals("#", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.join((float[]) null, 'E');
      assertNull(string1);
      
      String string2 = StringUtils.swapCase((String) null);
      assertNull(string2);
      
      boolean boolean0 = StringUtils.containsIgnoreCase((CharSequence) null, "#");
      assertFalse(boolean0);
      
      String string3 = StringUtils.swapCase((String) null);
      assertNull(string3);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "F1~Sp}mS5", (CharSequence) "#", 1032);
      assertEquals(9, int0);
      
      String string4 = StringUtils.substringAfter((String) null, "'VE7Gato.F<_");
      assertNull(string4);
      
      String string5 = StringUtils.remove("&MT#GCn!iD", '+');
      assertEquals("&MT#GCn!iD", string5);
      assertFalse(string5.equals((Object)string0));
      assertNotNull(string5);
      
      String string6 = StringUtils.stripToNull("lUX*>FRD3w2#pt");
      assertEquals("lUX*>FRD3w2#pt", string6);
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string5));
      assertNotNull(string6);
  }

  @Test(timeout = 4000)
  public void test359()  throws Throwable  {
      String string0 = StringUtils.right("diF3Wv9sN!", 8);
      assertEquals("F3Wv9sN!", string0);
      assertNotNull(string0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      String string1 = StringUtils.replaceEachRepeatedly("\n\n", (String[]) null, (String[]) null);
      assertEquals("\n\n", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      int int0 = StringUtils.indexOfDifference((CharSequence) "\n\n", (CharSequence) "3Wv9sN!");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test360()  throws Throwable  {
      float[] floatArray0 = new float[3];
      floatArray0[0] = 0.0F;
      floatArray0[1] = 693.284F;
      long[] longArray0 = new long[5];
      longArray0[0] = (long) 'I';
      longArray0[1] = (long) 'I';
      longArray0[2] = (long) 'I';
      longArray0[3] = (long) 'I';
      longArray0[4] = (long) 'I';
      String string0 = StringUtils.rightPad("3^Vg')<ym<3^Vg')<ym<", 73, 'I');
      assertEquals("3^Vg')<ym<3^Vg')<ym<IIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.swapCase("uAYj#~~Xg");
      assertEquals("UayJ#~~xG", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      int int0 = StringUtils.ordinalIndexOf("3^Vg')<ym<3^Vg')<ym<IIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII", "3^Vg')<ym<3^Vg')<ym<", 73);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test361()  throws Throwable  {
      int int0 = StringUtils.compareIgnoreCase("W(zh)XuJin!8g", "", false);
      assertEquals(13, int0);
      
      Object[] objectArray0 = new Object[0];
      String string0 = StringUtils.join(objectArray0, "", (-2092), (-2092));
      assertEquals("", string0);
      assertNotNull(string0);
      assertEquals(0, objectArray0.length);
      
      String string1 = "\\u";
      String string2 = StringUtils.strip("", string1);
      assertEquals("", string2);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertNotNull(string2);
      
      String string3 = StringUtils.trimToEmpty("3WO0h2D;cTb");
      assertEquals("3WO0h2D;cTb", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      
      String string4 = StringUtils.replaceOnce("", "3WO0h2D;cTb", "");
      assertEquals("", string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string0));
      assertNotNull(string4);
      
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      charSequenceArray0[0] = (CharSequence) string1;
      charSequenceArray0[1] = (CharSequence) "3WO0h2D;cTb";
      charSequenceArray0[2] = (CharSequence) "3WO0h2D;cTb";
      boolean boolean0 = StringUtils.startsWithAny("", charSequenceArray0);
      assertFalse(boolean0);
      assertEquals(3, charSequenceArray0.length);
      
      boolean boolean1 = StringUtils.containsWhitespace(charSequenceArray0[2]);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals(3, charSequenceArray0.length);
      
      String string5 = StringUtils.replaceFirst("", "", (String) null);
      assertEquals("", string5);
      assertTrue(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertTrue(string5.equals((Object)string4));
      assertTrue(string5.equals((Object)string2));
      assertNotNull(string5);
      
      int[] intArray0 = StringUtils.toCodePoints("");
      assertArrayEquals(new int[] {}, intArray0);
      assertNotNull(intArray0);
      assertEquals(0, intArray0.length);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) 14;
      floatArray0[1] = (float) (-2092);
      floatArray0[2] = (float) (-2092);
      String string6 = StringUtils.join(objectArray0, "+(", 472, 7);
      assertEquals("", string6);
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string3));
      assertTrue(string6.equals((Object)string4));
      assertTrue(string6.equals((Object)string2));
      assertTrue(string6.equals((Object)string5));
      assertNotNull(string6);
      assertEquals(0, objectArray0.length);
      
      String string7 = StringUtils.substringBeforeLast("i\"esu&4Sjo6Ji)$B`", "W(zh)XuJin!8g");
      assertEquals("i\"esu&4Sjo6Ji)$B`", string7);
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string2));
      assertNotNull(string7);
      
      boolean boolean2 = StringUtils.endsWithIgnoreCase("", "i\"esu&4Sjo6Ji)$B`");
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      int int1 = StringUtils.lastOrdinalIndexOf("", charSequenceArray0[1], 10);
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      assertEquals(3, charSequenceArray0.length);
  }

  @Test(timeout = 4000)
  public void test362()  throws Throwable  {
      String string0 = StringUtils.substringBeforeLast("", "Minimum abbreviation width is %d");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.uncapitalize(" ");
      assertEquals(" ", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.chomp("");
      assertEquals("", string2);
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      String string3 = StringUtils.remove(" vs ", 'r');
      assertEquals(" vs ", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      
      int int0 = StringUtils.lastOrdinalIndexOf(" ", " vs ", 8192);
      assertEquals((-1), int0);
      
      String string4 = StringUtils.substringBeforeLast(" ", "-RlVjaD^f18}Bd`G+z");
      assertEquals(" ", string4);
      assertTrue(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertNotNull(string4);
  }

  @Test(timeout = 4000)
  public void test363()  throws Throwable  {
      String string0 = StringUtils.substringAfter("[D/.5Q]{sGZM2sH<] in an array of ", "!");
      assertEquals("", string0);
      assertNotNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[0] = (CharSequence) "!";
      charSequenceArray0[1] = (CharSequence) "!";
      int int0 = StringUtils.indexOfAny((CharSequence) "", charSequenceArray0);
      assertEquals((-1), int0);
      assertEquals(2, charSequenceArray0.length);
      
      String[] stringArray0 = StringUtils.split("");
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      
      String[] stringArray1 = StringUtils.split("[D/.5Q]{sGZM2sH<] in an array of ", "F.BHclWk~wl!q=U$~");
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(3, stringArray1.length);
      
      int int1 = StringUtils.countMatches((CharSequence) "!", charSequenceArray0[0]);
      assertEquals(1, int1);
      assertFalse(int1 == int0);
      assertEquals(2, charSequenceArray0.length);
      
      boolean boolean0 = StringUtils.isNumeric("[D/.5Q]{sGZM2sH<] in an array of ");
      assertFalse(boolean0);
      
      String string1 = StringUtils.left("org.apache.commons.lang3.ObjectUtils", (-1));
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.substringBetween("{oU+b}m>[]`&C", (String) null);
      assertNull(string2);
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertFalse(linkedList0.contains("F.BHclWk~wl!q=U$~"));
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Iterator<Object> iterator0 = linkedList0.iterator();
      assertFalse(linkedList0.contains("F.BHclWk~wl!q=U$~"));
      assertEquals(0, linkedList0.size());
      assertNotNull(iterator0);
      
      String string3 = StringUtils.join(iterator0, "Threshold must not be negative");
      assertFalse(linkedList0.contains("F.BHclWk~wl!q=U$~"));
      assertEquals("", string3);
      assertEquals(0, linkedList0.size());
      assertNotNull(string3);
      
      String string4 = StringUtils.repeat("org.apache.commons.lang3.ObjectUtils", "The String must not be empty", 70);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertNotNull(string4);
      
      String[] stringArray2 = StringUtils.splitByWholeSeparatorPreserveAllTokens(", '", "");
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertFalse(stringArray2.equals((Object)stringArray1));
      assertNotNull(stringArray2);
      assertNotSame(stringArray2, stringArray0);
      assertNotSame(stringArray2, stringArray1);
      assertEquals(2, stringArray2.length);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)90;
      byteArray0[1] = (byte)13;
      byteArray0[2] = (byte)43;
      byteArray0[3] = (byte)1;
      byteArray0[4] = (byte)64;
      byteArray0[5] = (byte)127;
      byteArray0[6] = (byte)2;
      byteArray0[7] = (byte)11;
      // Undeclared exception!
      try { 
        Charset.forName((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null charset name
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test364()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("?!", 'l');
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      String string0 = StringUtils.abbreviate((String) null, "?!", 108, 322);
      assertNull(string0);
      
      String string1 = StringUtils.abbreviate("?!", (String) null, 322, 322);
      assertEquals("?!", string1);
      assertNotNull(string1);
      
      char[] charArray0 = new char[1];
      charArray0[0] = '7';
      int int0 = StringUtils.indexOfAny((CharSequence) null, charArray0);
      assertArrayEquals(new char[] {'7'}, charArray0);
      assertEquals((-1), int0);
      assertEquals(1, charArray0.length);
      
      String string2 = StringUtils.defaultIfEmpty((String) null, (String) null);
      assertNull(string2);
      
      boolean boolean0 = StringUtils.containsNone((CharSequence) null, "?!");
      assertTrue(boolean0);
      
      String string3 = StringUtils.stripEnd((String) null, "?!");
      assertNull(string3);
      
      String string4 = StringUtils.wrapIfMissing("?!", '7');
      assertEquals("7?!7", string4);
      assertFalse(string4.equals((Object)string1));
      assertNotNull(string4);
      
      String string5 = StringUtils.center((String) null, 322);
      assertNull(string5);
      
      boolean boolean1 = StringUtils.isWhitespace((CharSequence) null);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      String string6 = StringUtils.repeat((String) null, "7?!7", 322);
      assertNull(string6);
      
      String string7 = StringUtils.appendIfMissingIgnoreCase((String) null, (CharSequence) null, stringArray0);
      assertNull(string7);
      assertEquals(1, stringArray0.length);
      
      String string8 = StringUtils.repeat((String) null, 38);
      assertNull(string8);
      
      long[] longArray0 = new long[6];
      longArray0[0] = (long) (-1);
      longArray0[1] = (long) (-1);
      longArray0[2] = (long) '7';
      longArray0[3] = (long) 'l';
      longArray0[4] = (long) 108;
      longArray0[5] = (long) 108;
      String string9 = StringUtils.join(longArray0, 'I', 322, 108);
      assertArrayEquals(new long[] {(-1L), (-1L), 55L, 108L, 108L, 108L}, longArray0);
      assertEquals("", string9);
      assertFalse(string9.equals((Object)string4));
      assertFalse(string9.equals((Object)string1));
      assertNotNull(string9);
      assertEquals(6, longArray0.length);
      
      String string10 = StringUtils.difference(";v%~0rz3%-Hv~u&u", "-[7)_M(9ys?b094");
      assertEquals("-[7)_M(9ys?b094", string10);
      assertFalse(string10.equals((Object)string1));
      assertFalse(string10.equals((Object)string9));
      assertFalse(string10.equals((Object)string4));
      assertNotNull(string10);
      
      String string11 = StringUtils.prependIfMissingIgnoreCase("/p)?<D@d;4g(/O>", "?!", stringArray0);
      assertFalse(string11.equals((Object)string10));
      assertFalse(string11.equals((Object)string9));
      assertFalse(string11.equals((Object)string4));
      assertFalse(string11.equals((Object)string1));
      assertNotNull(string11);
      assertEquals(1, stringArray0.length);
      
      boolean boolean2 = StringUtils.containsAny((CharSequence) null, (CharSequence) null);
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
  }

  @Test(timeout = 4000)
  public void test365()  throws Throwable  {
      String string0 = StringUtils.defaultString("offset cannot be negative");
      assertEquals("offset cannot be negative", string0);
      assertNotNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      charSequenceArray0[0] = (CharSequence) "2";
      boolean boolean0 = StringUtils.startsWithAny("offset cannot be negative", charSequenceArray0);
      assertFalse(boolean0);
      assertEquals(1, charSequenceArray0.length);
      
      boolean boolean1 = StringUtils.isEmpty(charSequenceArray0[0]);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals(1, charSequenceArray0.length);
      
      String string1 = StringUtils.removeStart("2", "2");
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      int[] intArray0 = StringUtils.toCodePoints(charSequenceArray0[0]);
      assertArrayEquals(new int[] {50}, intArray0);
      assertNotNull(intArray0);
      assertEquals(1, charSequenceArray0.length);
      assertEquals(1, intArray0.length);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("offset cannot be negative", "offset cannot be negative");
      assertNotNull(stringArray0);
      assertEquals(2, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test366()  throws Throwable  {
      Object[] objectArray0 = new Object[6];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      String string0 = StringUtils.join(objectArray0, 'p');
      assertNotNull(string0);
      assertEquals(6, objectArray0.length);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "java.lang.Object@4da84b8dppppp", (CharSequence) "java.lang.Object@4da84b8dppppp");
      assertEquals(0, int0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      charSequenceArray0[0] = (CharSequence) "java.lang.Object@4da84b8dppppp";
      boolean boolean0 = StringUtils.endsWithAny("java.lang.Object@4da84b8dppppp", charSequenceArray0);
      assertTrue(boolean0);
      assertEquals(1, charSequenceArray0.length);
      
      int int1 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      
      int int2 = StringUtils.lastIndexOfIgnoreCase(charSequenceArray0[0], (CharSequence) "java.lang.Object@4da84b8dppppp");
      assertEquals(0, int2);
      assertTrue(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(1, charSequenceArray0.length);
      
      String string1 = StringUtils.removeStartIgnoreCase("java.lang.Object@4da84b8dppppp", "java.lang.Object@4da84b8dppppp");
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.strip("");
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertNotNull(string2);
      
      boolean boolean1 = StringUtils.startsWithIgnoreCase("", "");
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String string3 = StringUtils.join(objectArray0);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      assertEquals(6, objectArray0.length);
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'p';
      charArray0[1] = 'p';
      String string4 = StringUtils.join(charArray0, 'p', 5869, 0);
      assertArrayEquals(new char[] {'p', 'p'}, charArray0);
      assertEquals("", string4);
      assertTrue(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string2));
      assertNotNull(string4);
      assertEquals(2, charArray0.length);
      
      boolean boolean2 = StringUtils.equalsAnyIgnoreCase("java.lang.Object@4da84b8dppppp", charSequenceArray0);
      assertTrue(boolean2);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertEquals(1, charSequenceArray0.length);
      
      String string5 = StringUtils.getDigits("");
      assertEquals("", string5);
      assertTrue(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertTrue(string5.equals((Object)string2));
      assertTrue(string5.equals((Object)string1));
      assertNotNull(string5);
      
      int int3 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "", (CharSequence) "java.lang.Object@4da84b8d", (-2426));
      assertEquals((-1), int3);
      assertFalse(int3 == int0);
      assertTrue(int3 == int1);
      assertFalse(int3 == int2);
      
      String string6 = StringUtils.remove("Strings must not be null", "");
      assertEquals("Strings must not be null", string6);
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string2));
      assertNotNull(string6);
      
      String string7 = StringUtils.abbreviate((String) null, (-2426), (-1728));
      assertNull(string7);
  }

  @Test(timeout = 4000)
  public void test367()  throws Throwable  {
      String string0 = StringUtils.defaultString("offset cannot be negative");
      assertEquals("offset cannot be negative", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.repeat("offset cannot be negative", "\r", 5899);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.startsWith((CharSequence) null, (CharSequence) null);
      assertTrue(boolean0);
      
      String string2 = StringUtils.substring("[D/.5Q]{sGZM2sH<]", 21, 5899);
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      boolean boolean1 = StringUtils.isAnyBlank((CharSequence[]) null);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short) (-307);
      shortArray0[1] = (short)23;
      shortArray0[2] = (short)48;
      shortArray0[3] = (short) (-619);
      shortArray0[4] = (short)8;
      shortArray0[5] = (short) (-3485);
      shortArray0[6] = (short)19;
      String string3 = StringUtils.join(shortArray0, ')', 10, (int) (short) (-3485));
      assertArrayEquals(new short[] {(short) (-307), (short)23, (short)48, (short) (-619), (short)8, (short) (-3485), (short)19}, shortArray0);
      assertEquals("", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      assertEquals(7, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test368()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      String string0 = StringUtils.getDigits("");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.abbreviate("offset cannot be negative", "", 760, 760);
      assertEquals("offset cannot be negative", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      charSequenceArray0[0] = (CharSequence) "offset cannot be negative";
      int int0 = StringUtils.indexOfAny((CharSequence) "offset cannot be negative", charSequenceArray0);
      assertEquals(0, int0);
      assertEquals(1, charSequenceArray0.length);
      
      boolean boolean0 = StringUtils.isAlphanumericSpace("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test369()  throws Throwable  {
      String string0 = StringUtils.deleteWhitespace("C1k-7_rbEbjE6eQS8]^");
      assertEquals("C1k-7_rbEbjE6eQS8]^", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isAllUpperCase("C1k-7_rbEbjE6eQS8]^");
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)15;
      byteArray0[1] = (byte)123;
      byteArray0[2] = (byte)67;
      byteArray0[3] = (byte)15;
      byteArray0[4] = (byte)16;
      byteArray0[5] = (byte)67;
      byteArray0[6] = (byte)123;
      String string1 = StringUtils.join(byteArray0, '|', (int) (byte)16, (int) (byte)16);
      assertArrayEquals(new byte[] {(byte)15, (byte)123, (byte)67, (byte)15, (byte)16, (byte)67, (byte)123}, byteArray0);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(7, byteArray0.length);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("", '|');
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      
      boolean boolean1 = StringUtils.isEmpty("C1k-7_rbEbjE6eQS8]^");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test370()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-8);
      byteArray0[1] = (byte)4;
      String string0 = StringUtils.join(byteArray0, 'E', 692, (-619));
      assertArrayEquals(new byte[] {(byte) (-8), (byte)4}, byteArray0);
      assertEquals("", string0);
      assertNotNull(string0);
      assertEquals(2, byteArray0.length);
      
      // Undeclared exception!
      try { 
        StringUtils.truncate("nRGT},27", (-619), (int) (byte) (-8));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // offset cannot be negative
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test371()  throws Throwable  {
      String string0 = ".N[!eI\"p!Z";
      String string1 = StringUtils.replace("&#.hF:Af]d@NQ>{3", "&#.hF:Af]d@NQ>{3", ".N[!eI\"p!Z");
      assertEquals(".N[!eI\"p!Z", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      Object[] objectArray0 = new Object[0];
      String string2 = StringUtils.join(objectArray0, '.', Integer.MAX_VALUE, Integer.MAX_VALUE);
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals(0, objectArray0.length);
      
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[0] = (CharSequence) "&#.hF:Af]d@NQ>{3";
      charSequenceArray0[1] = (CharSequence) "&#.hF:Af]d@NQ>{3";
      String string3 = StringUtils.prependIfMissingIgnoreCase((String) null, ".N[!eI\"p!Z", charSequenceArray0);
      assertNull(string3);
      assertEquals(2, charSequenceArray0.length);
      
      String string4 = StringUtils.difference((String) null, (String) null);
      assertNull(string4);
      
      String string5 = StringUtils.replaceChars(".N[!eI\"p!Z", ".N[!eI\"p!Z", "&#.hF:Af]d@NQ>{3");
      assertEquals("&#.hF:Afhd", string5);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertNotNull(string5);
      
      String string6 = StringUtils.difference("Invalid ", (String) null);
      assertEquals("Invalid ", string6);
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string5));
      assertNotNull(string6);
      
      String string7 = StringUtils.prependIfMissingIgnoreCase("", ".N[!eI\"p!Z", charSequenceArray0);
      assertEquals(".N[!eI\"p!Z", string7);
      assertTrue(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string6));
      assertTrue(string7.equals((Object)string1));
      assertNotNull(string7);
      assertEquals(2, charSequenceArray0.length);
      
      int int0 = 1257;
      // Undeclared exception!
      try { 
        StringUtils.join((Object[]) charSequenceArray0, "...", 1257, Integer.MAX_VALUE);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1257
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test372()  throws Throwable  {
      String string0 = StringUtils.capitalize((String) null);
      assertNull(string0);
      
      int int0 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) "g]=";
      objectArray0[1] = (Object) null;
      objectArray0[2] = (Object) null;
      objectArray0[3] = (Object) "g]=";
      String string1 = StringUtils.wrap("A", "A");
      assertEquals("AAA", string1);
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.equalsIgnoreCase("{", (CharSequence) null);
      assertFalse(boolean0);
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'V';
      charArray0[1] = 'V';
      String string2 = StringUtils.replaceChars("AAA", "Array element ", "HW");
      assertEquals("HHH", string2);
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      String string3 = StringUtils.difference("(FVySd]T", (String) null);
      assertEquals("(FVySd]T", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
  }

  @Test(timeout = 4000)
  public void test373()  throws Throwable  {
      int int0 = StringUtils.lastIndexOf((CharSequence) "{}", 229, (-1208));
      assertEquals((-1), int0);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("GR T;q", "GR T;q", 229);
      assertNotNull(stringArray0);
      assertEquals(7, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test374()  throws Throwable  {
      String string0 = StringUtils.replace(",!fgtP>GBHJ", "H*(MdL@C<_bW", "H*(MdL@C<_bW");
      assertEquals(",!fgtP>GBHJ", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) ",!fgtP>GBHJ", 89, (-64));
      assertEquals((-1), int0);
      
      Object[] objectArray0 = new Object[3];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      objectArray0[1] = object1;
      objectArray0[2] = (Object) "H*(MdL@C<_bW";
      String string1 = StringUtils.join(objectArray0, '.', 97, 89);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(3, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test375()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = '7';
      charArray0[1] = '@';
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "-Z!#0INiy1>W", charArray0);
      assertArrayEquals(new char[] {'7', '@'}, charArray0);
      assertFalse(boolean0);
      assertEquals(2, charArray0.length);
      
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      assertFalse(arrayList0.contains('7'));
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      String string0 = StringUtils.wrapIfMissing("", '@');
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test376()  throws Throwable  {
      String[] stringArray0 = new String[0];
      String[] stringArray1 = StringUtils.stripAll(stringArray0, "");
      assertNotNull(stringArray1);
      assertSame(stringArray0, stringArray1);
      assertSame(stringArray1, stringArray0);
      assertEquals(0, stringArray0.length);
      assertEquals(0, stringArray1.length);
      
      String string0 = StringUtils.mid("", 13, 20);
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.wrap("", "");
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      // Undeclared exception!
      try { 
        StringUtils.abbreviate("F1~SpmS5", "D(7nG$A4+j.", (-308));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum abbreviation width is 12
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test377()  throws Throwable  {
      int int0 = StringUtils.lastIndexOf((CharSequence) "{}", 229, (-1208));
      assertEquals((-1), int0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      String string0 = StringUtils.substring("Search and Replace array lengths don't match: ", (-4170), (-1208));
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.substring("zGTY:)+d6a}ir", (-4170));
      assertEquals("zGTY:)+d6a}ir", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.abbreviate("~!%q{-kC<;JCc", " vs ", 229, 73);
      assertEquals("~!%q{-kC<;JCc", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      int int1 = StringUtils.length(" vs ");
      assertEquals(4, int1);
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test378()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens(".r&K9D");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      String string0 = StringUtils.substring("...", (-3685), (-3685));
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = null;
      String string2 = StringUtils.wrapIfMissing((String) null, 'V');
      assertNull(string2);
      
      String string3 = StringUtils.toRootLowerCase("...");
      assertEquals("...", string3);
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      
      String string4 = StringUtils.substringBetween("", "ND5");
      assertNull(string4);
      
      String string5 = StringUtils.wrap("", "...");
      assertEquals("", string5);
      assertFalse(string5.equals((Object)string3));
      assertTrue(string5.equals((Object)string0));
      assertNotNull(string5);
      
      boolean[] booleanArray0 = new boolean[1];
      boolean boolean0 = true;
      booleanArray0[0] = true;
      // Undeclared exception!
      try { 
        StringUtils.join(booleanArray0, '>', (-3685), 386);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -3685
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test379()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      charSequenceArray0[0] = (CharSequence) "8c>!) u,eei!\"I2yC-U";
      charSequenceArray0[1] = (CharSequence) "8c>!) u,eei!\"I2yC-U";
      int[] intArray0 = new int[2];
      String[] stringArray0 = new String[4];
      stringArray0[0] = "Y)3n1`2_97u G#5v_Y)3n1`2_97u G#5v_Y)3n1`2_97u G#5v_Y)3n1`2_97u G#5v__";
      stringArray0[1] = "Y)3n1`2_97u G#5v_Y)3n1`2_97u G#5v_Y)3n1`2_97u G#5v_Y)3n1`2_97u G#5v__";
      stringArray0[2] = "8c>!) u,eei!\"I2yC-U";
      stringArray0[3] = "8c>!) u,eei!\"I2yC-U";
      String string0 = StringUtils.firstNonEmpty(stringArray0);
      assertEquals("Y)3n1`2_97u G#5v_Y)3n1`2_97u G#5v_Y)3n1`2_97u G#5v_Y)3n1`2_97u G#5v__", string0);
      assertNotNull(string0);
      assertEquals(4, stringArray0.length);
      
      String string1 = StringUtils.upperCase("Y)3n1`2_97u G#5v_Y)3n1`2_97u G#5v_Y)3n1`2_97u G#5v_Y)3n1`2_97u G#5v__");
      assertEquals("Y)3N1`2_97U G#5V_Y)3N1`2_97U G#5V_Y)3N1`2_97U G#5V_Y)3N1`2_97U G#5V__", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.overlay("Y)3n1`2_97u G#5v_Y)3n1`2_97u G#5v_Y)3n1`2_97u G#5v_Y)3n1`2_97u G#5v__", "8c>!) u,eei!\"I2yC-U", (-3957), (-3957));
      assertEquals("8c>!) u,eei!\"I2yC-UY)3n1`2_97u G#5v_Y)3n1`2_97u G#5v_Y)3n1`2_97u G#5v_Y)3n1`2_97u G#5v__", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test380()  throws Throwable  {
      int int0 = StringUtils.indexOfDifference((CharSequence[]) null);
      assertEquals((-1), int0);
      
      String string0 = StringUtils.join((Object[]) null, '0');
      assertNull(string0);
      
      boolean boolean0 = StringUtils.endsWithAny((CharSequence) null, (CharSequence[]) null);
      assertFalse(boolean0);
      
      String string1 = StringUtils.substringAfterLast((String) null, (-1));
      assertNull(string1);
      
      String string2 = StringUtils.replaceOnce("Invalid locale format: ", "Arguments cannot both be null", "Invalid locale format: ");
      assertEquals("Invalid locale format: ", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.removeEndIgnoreCase("Invalid locale format: ", (String) null);
      assertEquals("Invalid locale format: ", string3);
      assertTrue(string3.equals((Object)string2));
      assertNotNull(string3);
      
      String string4 = StringUtils.join((Object[]) null, 'X');
      assertNull(string4);
      
      String string5 = StringUtils.substringBetween("ILg", (String) null, "{^eIgZp<[-X'%%");
      assertNull(string5);
      
      String string6 = StringUtils.replaceChars("The String must not be empty", '0', 'n');
      assertEquals("The String must not be empty", string6);
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string3));
      assertNotNull(string6);
      
      String[] stringArray0 = new String[5];
      stringArray0[0] = "Invalid locale format: ";
      stringArray0[2] = "Invalid locale format: ";
      stringArray0[3] = null;
      stringArray0[4] = "G^7|+zFpb:oK?5";
      String string7 = StringUtils.replaceEach("org.apache.commons.lang3.CharSequenceUtils", stringArray0, stringArray0);
      assertEquals("org.apache.commons.lang3.CharSequenceUtils", string7);
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string3));
      assertNotNull(string7);
      assertEquals(5, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test381()  throws Throwable  {
      String string0 = StringUtils.substringAfterLast("_", 32);
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.reverseDelimited((String) null, '~');
      assertNull(string1);
      
      boolean boolean0 = StringUtils.isNumericSpace((CharSequence) null);
      assertFalse(boolean0);
      
      int int0 = StringUtils.compareIgnoreCase((String) null, (String) null);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test382()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByCharacterType("l(c\"B4`q5AeDf\"5{");
      assertNotNull(stringArray0);
      assertEquals(16, stringArray0.length);
      
      String string0 = StringUtils.stripToNull("_");
      assertEquals("_", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.toRootUpperCase("r(=:1d]1g^)j");
      assertEquals("R(=:1D]1G^)J", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test383()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      String string0 = StringUtils.trimToNull("qD/.5Q]{&GZM2vH<]");
      assertEquals("qD/.5Q]{&GZM2vH<]", string0);
      assertNotNull(string0);
      
      charSequenceArray0[0] = (CharSequence) "qD/.5Q]{&GZM2vH<]";
      String string1 = StringUtils.prependIfMissingIgnoreCase("qD/.5Q]{&GZM2vH<]", "qD/.5Q]{&GZM2vH<]", charSequenceArray0);
      assertEquals("qD/.5Q]{&GZM2vH<]", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(1, charSequenceArray0.length);
      
      String string2 = StringUtils.removeStart("", "qD/.5Q]{&GZM2vH<]");
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      String string3 = StringUtils.substringBeforeLast("U'i{GNK", ")%");
      assertEquals("U'i{GNK", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      
      char[] charArray0 = new char[5];
      charArray0[0] = '5';
      charArray0[1] = 'D';
      charArray0[2] = 'z';
      charArray0[3] = ';';
      String string4 = StringUtils.rightPad("LN)4", 1583, '5');
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertNotNull(string4);
      
      String string5 = StringUtils.unwrap((String) null, "qD/.5Q]{&GZM2vH<]");
      assertNull(string5);
      
      int int0 = StringUtils.indexOfDifference((CharSequence) "", (CharSequence) "U'i{GNK");
      assertEquals(0, int0);
      
      String[] stringArray0 = StringUtils.splitByCharacterType("LN)4");
      assertNotNull(stringArray0);
      assertEquals(3, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test384()  throws Throwable  {
      String string0 = StringUtils.trimToNull("~Vr");
      assertEquals("~Vr", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.truncate("8pR2B:PK5lx\"7", 0, 32);
      assertEquals("8pR2B:PK5lx\"7", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.deleteWhitespace((String) null);
      assertNull(string2);
      
      int int0 = StringUtils.countMatches((CharSequence) "8pR2B:PK5lx\"7", 'v');
      assertEquals(0, int0);
      
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(supplier0).get();
      String string3 = StringUtils.getIfEmpty((String) null, supplier0);
      assertNull(string3);
      
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      charSequenceArray0[0] = (CharSequence) "8pR2B:PK5lx\"7";
      charSequenceArray0[1] = (CharSequence) null;
      charSequenceArray0[2] = (CharSequence) null;
      charSequenceArray0[3] = (CharSequence) "~Vr";
      charSequenceArray0[4] = (CharSequence) null;
      int int1 = StringUtils.indexOfAny((CharSequence) "8pR2B:PK5lx\"7", charSequenceArray0);
      assertEquals(0, int1);
      assertTrue(int1 == int0);
      assertEquals(5, charSequenceArray0.length);
      
      String string4 = StringUtils.overlay("AxieV", "8pR2B:PK5lx\"7", 0, 0);
      assertEquals("8pR2B:PK5lx\"7AxieV", string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertNotNull(string4);
  }

  @Test(timeout = 4000)
  public void test385()  throws Throwable  {
      String string0 = StringUtils.rightPad("0FO5}hhQ5YS+G9", (-95), '_');
      assertEquals("0FO5}hhQ5YS+G9", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.unwrap("0FO5}hhQ5YS+G9", "[ R4Pk;9Invalid locale format: ");
      assertEquals("0FO5}hhQ5YS+G9", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      LinkedList<Locale> linkedList0 = new LinkedList<Locale>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      String string2 = StringUtils.join((Iterable<?>) linkedList0, '_');
      assertEquals("", string2);
      assertEquals(0, linkedList0.size());
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      CharSequence[] charSequenceArray0 = new CharSequence[34];
      charSequenceArray0[0] = (CharSequence) "0FO5}hhQ5YS+G9";
      charSequenceArray0[1] = (CharSequence) "0FO5}hhQ5YS+G9";
      charSequenceArray0[2] = (CharSequence) "F1~Sp}mS5";
      int int0 = StringUtils.indexOfAny((CharSequence) "", charSequenceArray0);
      assertEquals((-1), int0);
      assertEquals(34, charSequenceArray0.length);
      
      boolean boolean0 = StringUtils.isAlphanumericSpace(charSequenceArray0[1]);
      assertFalse(boolean0);
      assertEquals(34, charSequenceArray0.length);
  }

  @Test(timeout = 4000)
  public void test386()  throws Throwable  {
      String string0 = StringUtils.deleteWhitespace("_");
      assertEquals("_", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.countMatches((CharSequence) "_", 'v');
      assertEquals(0, int0);
      
      String string1 = StringUtils.truncate("wO", 12, 0);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "", "");
      assertTrue(boolean0);
      
      String[] stringArray0 = new String[8];
      stringArray0[0] = "_";
      stringArray0[1] = "wO";
      String[] stringArray1 = StringUtils.split("_", "_", (-533));
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(0, stringArray1.length);
      
      String string2 = StringUtils.stripEnd("org.apache.commons.lang3.RegExUtils", "wO");
      assertEquals("org.apache.commons.lang3.RegExUtils", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      int int1 = StringUtils.indexOfDifference((CharSequence[]) stringArray1);
      assertEquals((-1), int1);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertFalse(int1 == int0);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(0, stringArray1.length);
  }

  @Test(timeout = 4000)
  public void test387()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      Object object0 = new Object();
      assertNotNull(object0);
      
      String string0 = StringUtils.join(objectArray0, 'p');
      assertEquals("", string0);
      assertNotNull(string0);
      assertEquals(1, objectArray0.length);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "", (CharSequence) "");
      assertEquals(0, int0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      charSequenceArray0[0] = (CharSequence) "";
      String string1 = StringUtils.removeIgnoreCase("", "");
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.reverse("UY7gz");
      assertEquals("zg7YU", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      boolean boolean0 = StringUtils.isAlphanumeric("zg7YU");
      assertTrue(boolean0);
      
      boolean boolean1 = StringUtils.isWhitespace("");
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String[] stringArray0 = StringUtils.split("UY7gz", "zg7YU", 160);
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test388()  throws Throwable  {
      String string0 = " ";
      String string1 = StringUtils.removeAll(" ", " ");
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.containsAny((CharSequence) "", (char[]) null);
      assertFalse(boolean0);
      
      String string2 = "\r";
      String string3 = StringUtils.deleteWhitespace("\r");
      assertEquals("", string3);
      assertTrue(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      
      String string4 = StringUtils.replaceFirst("u", "\r", (String) null);
      assertEquals("u", string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertNotNull(string4);
      
      String string5 = StringUtils.LF;
      assertEquals("\n", string5);
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertNotNull(string5);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparator(" ", (String) null, 609);
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      
      try { 
        StringUtils.getBytes("u", "\r");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(UnsupportedEncodingException e) {
      }
  }

  @Test(timeout = 4000)
  public void test389()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = '2';
      charArray0[2] = '&';
      String string0 = StringUtils.join(charArray0, '\u0000', 67, 66);
      assertArrayEquals(new char[] {'2', '\u0000', '&'}, charArray0);
      assertEquals("", string0);
      assertNotNull(string0);
      assertEquals(3, charArray0.length);
      
      String string1 = "[0";
      String string2 = StringUtils.replaceChars("", "", "[0");
      assertEquals("", string2);
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      String string3 = "}xk 6mk&yQ`^suYg]";
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "}xk 6mk&yQ`^suYg]";
      String string4 = StringUtils.replaceIgnoreCase("", "", "[0");
      assertEquals("", string4);
      assertTrue(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string0));
      assertNotNull(string4);
      
      CharSequence[] charSequenceArray1 = new CharSequence[6];
      assertFalse(charSequenceArray1.equals((Object)charSequenceArray0));
      
      charSequenceArray1[0] = (CharSequence) "";
      boolean boolean0 = StringUtils.isMixedCase(charSequenceArray0[0]);
      assertFalse(boolean0);
      assertFalse(charSequenceArray0.equals((Object)charSequenceArray1));
      assertNotSame(charSequenceArray0, charSequenceArray1);
      assertEquals(3, charSequenceArray0.length);
      
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparator("\n", "", 67);
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      
      try { 
        StringUtils.getBytes(" ", "E6$5XQ/l-@lOq");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(UnsupportedEncodingException e) {
      }
  }

  @Test(timeout = 4000)
  public void test390()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      String string0 = StringUtils.join(objectArray0, 'p');
      assertNotNull(string0);
      assertEquals(1, objectArray0.length);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "java.lang.Object@6cf5d66a", (CharSequence) "java.lang.Object@6cf5d66a");
      assertEquals(0, int0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      charSequenceArray0[0] = (CharSequence) "java.lang.Object@6cf5d66a";
      boolean boolean0 = StringUtils.endsWithAny("java.lang.Object@6cf5d66a", charSequenceArray0);
      assertTrue(boolean0);
      assertEquals(1, charSequenceArray0.length);
      
      int int1 = StringUtils.countMatches((CharSequence) "java.lang.Object@6cf5d66a", 'p');
      assertEquals(0, int1);
      assertTrue(int1 == int0);
      
      int int2 = StringUtils.lastIndexOfIgnoreCase(charSequenceArray0[0], (CharSequence) "java.lang.Object@6cf5d66a");
      assertEquals(0, int2);
      assertTrue(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals(1, charSequenceArray0.length);
      
      String string1 = StringUtils.removeStartIgnoreCase("java.lang.Object@6cf5d66a", "java.lang.Object@6cf5d66a");
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.substringAfterLast("java.lang.Object@6cf5d66a", "java.lang.Object@6cf5d66a");
      assertEquals("", string2);
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      boolean boolean1 = StringUtils.startsWithIgnoreCase("", "");
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String string3 = StringUtils.join(objectArray0);
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      assertEquals(1, objectArray0.length);
      
      int int3 = StringUtils.indexOfAny(charSequenceArray0[0], "[ R4Pk;9");
      assertEquals((-1), int3);
      assertFalse(int3 == int0);
      assertFalse(int3 == int2);
      assertFalse(int3 == int1);
      assertEquals(1, charSequenceArray0.length);
      
      boolean boolean2 = StringUtils.isNumeric("java.lang.Object@6cf5d66a");
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      
      String string4 = StringUtils.deleteWhitespace("");
      assertEquals("", string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string1));
      assertNotNull(string4);
      
      boolean boolean3 = StringUtils.isAlphanumeric("");
      assertFalse(boolean3);
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3 == boolean0);
      
      String string5 = StringUtils.deleteWhitespace("w{>bJ\"W}#f&");
      assertEquals("w{>bJ\"W}#f&", string5);
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertNotNull(string5);
      
      boolean boolean4 = StringUtils.containsAny(charSequenceArray0[0], charSequenceArray0);
      assertTrue(boolean4);
      assertTrue(boolean4 == boolean1);
      assertFalse(boolean4 == boolean2);
      assertTrue(boolean4 == boolean0);
      assertFalse(boolean4 == boolean3);
      assertEquals(1, charSequenceArray0.length);
      
      String string6 = StringUtils.deleteWhitespace("");
      assertEquals("", string6);
      assertTrue(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string0));
      assertTrue(string6.equals((Object)string1));
      assertTrue(string6.equals((Object)string4));
      assertNotNull(string6);
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "w{>bJ\"W}#f&";
      String string7 = StringUtils.replaceEachRepeatedly("G^7|+zFpb:oK?5", stringArray0, stringArray0);
      assertEquals("G^7|+zFpb:oK?5", string7);
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string6));
      assertNotNull(string7);
      assertEquals(3, stringArray0.length);
      
      String string8 = StringUtils.removePattern(" vs ", (String) null);
      assertEquals(" vs ", string8);
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string1));
      assertNotNull(string8);
      
      boolean boolean5 = StringUtils.equalsAny(" vs ", charSequenceArray0);
      assertFalse(boolean5);
      assertTrue(boolean5 == boolean2);
      assertFalse(boolean5 == boolean1);
      assertTrue(boolean5 == boolean3);
      assertFalse(boolean5 == boolean0);
      assertFalse(boolean5 == boolean4);
      assertEquals(1, charSequenceArray0.length);
      
      String string9 = StringUtils.removeStart("u", "bdG");
      assertEquals("u", string9);
      assertFalse(string9.equals((Object)string7));
      assertFalse(string9.equals((Object)string0));
      assertFalse(string9.equals((Object)string4));
      assertFalse(string9.equals((Object)string2));
      assertFalse(string9.equals((Object)string8));
      assertFalse(string9.equals((Object)string5));
      assertFalse(string9.equals((Object)string3));
      assertFalse(string9.equals((Object)string6));
      assertFalse(string9.equals((Object)string1));
      assertNotNull(string9);
  }

  @Test(timeout = 4000)
  public void test391()  throws Throwable  {
      String string0 = StringUtils.defaultString("offset cannot be negative");
      assertEquals("offset cannot be negative", string0);
      assertNotNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      charSequenceArray0[0] = (CharSequence) "2";
      boolean boolean0 = StringUtils.equalsAny("\r", charSequenceArray0);
      assertFalse(boolean0);
      assertEquals(1, charSequenceArray0.length);
  }

  @Test(timeout = 4000)
  public void test392()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      String string0 = StringUtils.join(objectArray0, 'p');
      assertNotNull(string0);
      assertEquals(1, objectArray0.length);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "java.lang.Object@34f0b19", (CharSequence) "java.lang.Object@34f0b19");
      assertEquals(0, int0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      charSequenceArray0[0] = (CharSequence) "java.lang.Object@34f0b19";
      boolean boolean0 = StringUtils.endsWithAny("java.lang.Object@34f0b19", charSequenceArray0);
      assertTrue(boolean0);
      assertEquals(1, charSequenceArray0.length);
      
      int int1 = StringUtils.countMatches((CharSequence) "java.lang.Object@34f0b19", 'p');
      assertEquals(0, int1);
      assertTrue(int1 == int0);
      
      int int2 = StringUtils.lastIndexOfIgnoreCase(charSequenceArray0[0], (CharSequence) "java.lang.Object@34f0b19");
      assertEquals(0, int2);
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals(1, charSequenceArray0.length);
      
      String string1 = StringUtils.removeStartIgnoreCase("java.lang.Object@34f0b19", "java.lang.Object@34f0b19");
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.substringAfterLast("java.lang.Object@34f0b19", "java.lang.Object@34f0b19");
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertNotNull(string2);
      
      boolean boolean1 = StringUtils.startsWithIgnoreCase("", "");
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String string3 = StringUtils.join(objectArray0);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string0));
      assertNotNull(string3);
      assertEquals(1, objectArray0.length);
      
      int int3 = StringUtils.indexOfAny(charSequenceArray0[0], "[ R4Pk;9");
      assertEquals(18, int3);
      assertFalse(int3 == int2);
      assertFalse(int3 == int0);
      assertFalse(int3 == int1);
      assertEquals(1, charSequenceArray0.length);
      
      boolean boolean2 = StringUtils.isNumeric("java.lang.Object@34f0b19");
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      
      String string4 = StringUtils.lowerCase("java.lang.Object@34f0b19");
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertNotNull(string4);
      
      boolean boolean3 = StringUtils.isAlphanumeric("");
      assertFalse(boolean3);
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      
      String string5 = StringUtils.deleteWhitespace("w{>bJ\"W}#f&");
      assertEquals("w{>bJ\"W}#f&", string5);
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertNotNull(string5);
      
      boolean boolean4 = StringUtils.containsAny(charSequenceArray0[0], charSequenceArray0);
      assertTrue(boolean4);
      assertTrue(boolean4 == boolean0);
      assertFalse(boolean4 == boolean3);
      assertFalse(boolean4 == boolean2);
      assertTrue(boolean4 == boolean1);
      assertEquals(1, charSequenceArray0.length);
      
      String string6 = StringUtils.deleteWhitespace("");
      assertEquals("", string6);
      assertTrue(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string5));
      assertTrue(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string0));
      assertNotNull(string6);
      
      String string7 = StringUtils.replaceFirst("ch", "java.lang.Object@34f0b19", "");
      assertEquals("ch", string7);
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string0));
      assertNotNull(string7);
      
      boolean boolean5 = StringUtils.isNumeric("");
      assertFalse(boolean5);
      assertTrue(boolean5 == boolean3);
      assertFalse(boolean5 == boolean0);
      assertTrue(boolean5 == boolean2);
      assertFalse(boolean5 == boolean1);
      assertFalse(boolean5 == boolean4);
      
      String[] stringArray0 = new String[3];
      String string8 = StringUtils.replaceEachRepeatedly("w{>bJ\"W}#f&", stringArray0, stringArray0);
      assertEquals("w{>bJ\"W}#f&", string8);
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string1));
      assertTrue(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string7));
      assertNotNull(string8);
      assertEquals(3, stringArray0.length);
      
      boolean boolean6 = StringUtils.equalsAny("w{>bJ\"W}#f&", stringArray0);
      assertFalse(boolean6);
      assertFalse(boolean6 == boolean4);
      assertFalse(boolean6 == boolean1);
      assertTrue(boolean6 == boolean3);
      assertTrue(boolean6 == boolean5);
      assertTrue(boolean6 == boolean2);
      assertFalse(boolean6 == boolean0);
      assertEquals(3, stringArray0.length);
      
      String string9 = StringUtils.removeStart("", "java.lang.Object@34f0b19");
      assertEquals("", string9);
      assertFalse(string9.equals((Object)string5));
      assertFalse(string9.equals((Object)string7));
      assertTrue(string9.equals((Object)string2));
      assertTrue(string9.equals((Object)string1));
      assertFalse(string9.equals((Object)string4));
      assertFalse(string9.equals((Object)string3));
      assertTrue(string9.equals((Object)string6));
      assertFalse(string9.equals((Object)string0));
      assertFalse(string9.equals((Object)string8));
      assertNotNull(string9);
      
      String string10 = StringUtils.reverseDelimited("java.lang.Object@34f0b19", 'w');
      assertFalse(string10.equals((Object)string7));
      assertFalse(string10.equals((Object)string5));
      assertFalse(string10.equals((Object)string3));
      assertFalse(string10.equals((Object)string4));
      assertFalse(string10.equals((Object)string1));
      assertFalse(string10.equals((Object)string0));
      assertFalse(string10.equals((Object)string6));
      assertFalse(string10.equals((Object)string8));
      assertFalse(string10.equals((Object)string2));
      assertFalse(string10.equals((Object)string9));
      assertNotNull(string10);
  }

  @Test(timeout = 4000)
  public void test393()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = '2';
      charArray0[1] = 'a';
      charArray0[2] = '&';
      String string0 = StringUtils.removeEndIgnoreCase("ILg", "ILg");
      assertEquals("", string0);
      assertNotNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[8];
      charSequenceArray0[0] = (CharSequence) "ILg";
      String string1 = StringUtils.abbreviate("Minimum abbreviation width with offset is %d", "ILg", 52, 52);
      assertEquals("Minimum abbreviation width with offset is %d", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "", charArray0);
      assertArrayEquals(new char[] {'2', 'a', '&'}, charArray0);
      assertEquals((-1), int0);
      assertEquals(3, charArray0.length);
      
      String string2 = StringUtils.normalizeSpace("");
      assertEquals("", string2);
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      String string3 = StringUtils.join((Object[]) charSequenceArray0, "/p)?<D@d;4g(/O>", (-1), (-1));
      assertEquals("", string3);
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string2));
      assertNotNull(string3);
      assertEquals(8, charSequenceArray0.length);
      
      boolean boolean0 = StringUtils.endsWithIgnoreCase(")QV6mP/+kjIR-", "Minimum abbreviation width with offset is %d");
      assertFalse(boolean0);
      
      String string4 = StringUtils.replaceAll("Vrhr", "A/c62uU %vxre24Ag", "J?I00Kqw\t=");
      assertEquals("Vrhr", string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertNotNull(string4);
      
      String string5 = StringUtils.substringBetween("Vrhr", "b:64B8P)O56tF2-");
      assertNull(string5);
      
      int int1 = StringUtils.lastOrdinalIndexOf("Vrhr", (CharSequence) null, 52);
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test394()  throws Throwable  {
      String string0 = StringUtils.normalizeSpace("");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.trimToNull("");
      assertNull(string1);
      
      String string2 = StringUtils.leftPad("-Z!#0INiy1>W", 2707, (String) null);
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test395()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      Object object0 = new Object();
      assertNotNull(object0);
      
      String string0 = StringUtils.join(objectArray0, 'p');
      assertEquals("", string0);
      assertNotNull(string0);
      assertEquals(1, objectArray0.length);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "", (CharSequence) "");
      assertEquals(0, int0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      charSequenceArray0[0] = (CharSequence) "";
      boolean boolean0 = StringUtils.endsWithAny("", charSequenceArray0);
      assertFalse(boolean0);
      assertEquals(1, charSequenceArray0.length);
      
      int int1 = StringUtils.countMatches((CharSequence) "", 'p');
      assertEquals(0, int1);
      assertTrue(int1 == int0);
      
      int int2 = StringUtils.lastIndexOfIgnoreCase(charSequenceArray0[0], (CharSequence) "");
      assertEquals(0, int2);
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals(1, charSequenceArray0.length);
      
      String string1 = StringUtils.reverse("");
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.lowerCase("The character ");
      assertEquals("the character ", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      // Undeclared exception!
      try { 
        StringUtils.abbreviate("97m]sQx8(,N<HbiAjj}", (-1099));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum abbreviation width is 4
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test396()  throws Throwable  {
      String string0 = StringUtils.toRootUpperCase("D-z&j");
      assertEquals("D-Z&J", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.join((short[]) null, '?');
      assertNull(string1);
      
      String string2 = StringUtils.removeEnd("The character ", "D-Z&J");
      assertEquals("The character ", string2);
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      int int0 = StringUtils.length("D-Z&J");
      assertEquals(5, int0);
      
      // Undeclared exception!
      try { 
        StringUtils.getLevenshteinDistance((CharSequence) null, (CharSequence) "The character ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test397()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "{}";
      stringArray0[1] = "";
      String string0 = StringUtils.firstNonBlank(stringArray0);
      assertEquals("{}", string0);
      assertNotNull(string0);
      assertEquals(2, stringArray0.length);
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = (-1.0F);
      String string1 = StringUtils.removeIgnoreCase("e{<'8Xw", "org.apache.commons.lang3.CharSequenceUtils");
      assertEquals("e{<'8Xw", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.isAlphanumeric("{}");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isWhitespace("");
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      String string2 = StringUtils.replaceIgnoreCase("org.apache.commons.lang3.CharSequenceUtils", (String) null, "k/c=(TSCP[/u", 14);
      assertEquals("org.apache.commons.lang3.CharSequenceUtils", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test398()  throws Throwable  {
      String string0 = StringUtils.substring("bjX'A", 1301);
      assertEquals("", string0);
      assertNotNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[7];
      charSequenceArray0[1] = (CharSequence) "";
      charSequenceArray0[4] = (CharSequence) "bjX'A";
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator0).compare(anyString() , anyString());
      PriorityQueue<String> priorityQueue0 = new PriorityQueue<String>(comparator0);
      assertFalse(priorityQueue0.contains(string0));
      assertEquals(0, priorityQueue0.size());
      assertNotNull(priorityQueue0);
      
      boolean boolean0 = priorityQueue0.add("WoSAV/xf>{FzJdM");
      assertFalse(priorityQueue0.contains(string0));
      assertTrue(priorityQueue0.contains("WoSAV/xf>{FzJdM"));
      assertTrue(boolean0);
      assertEquals(1, priorityQueue0.size());
      
      boolean boolean1 = priorityQueue0.add("d<@38vwUK ~XpQ%8IZ");
      assertFalse(priorityQueue0.contains("bjX'A"));
      assertTrue(priorityQueue0.contains("WoSAV/xf>{FzJdM"));
      assertTrue(boolean1);
      assertEquals(2, priorityQueue0.size());
      assertTrue(boolean1 == boolean0);
      
      Vector<Locale.LanguageRange> vector0 = new Vector<Locale.LanguageRange>();
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertNotNull(vector0);
      
      String string1 = StringUtils.join((Iterable<?>) priorityQueue0, "bjX'A");
      assertFalse(priorityQueue0.contains(string1));
      assertTrue(priorityQueue0.contains("WoSAV/xf>{FzJdM"));
      assertEquals("WoSAV/xf>{FzJdMbjX'Ad<@38vwUK ~XpQ%8IZ", string1);
      assertEquals(2, priorityQueue0.size());
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) 1301;
      floatArray0[1] = (float) 1301;
      floatArray0[2] = (float) 1301;
      floatArray0[3] = (float) 1301;
      floatArray0[4] = (float) 1301;
      floatArray0[5] = (float) 1301;
      floatArray0[6] = (float) 1301;
      floatArray0[7] = (float) 1301;
      floatArray0[8] = (float) 1301;
      String string2 = StringUtils.join(floatArray0, ':', 1301, 1301);
      assertArrayEquals(new float[] {1301.0F, 1301.0F, 1301.0F, 1301.0F, 1301.0F, 1301.0F, 1301.0F, 1301.0F, 1301.0F}, floatArray0, 0.01F);
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals(9, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test399()  throws Throwable  {
      String string0 = StringUtils.stripToEmpty("G^7|+zFpb:oK?5");
      assertEquals("G^7|+zFpb:oK?5", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.abbreviate("Minimum abbreviation width with offset is %d", "G^7|+zFpb:oK?5", 4, 52);
      assertEquals("Minimum abbreviation width with offset is %d", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      char[] charArray0 = new char[2];
      charArray0[0] = '&';
      PriorityQueue<String> priorityQueue0 = new PriorityQueue<String>();
      assertFalse(priorityQueue0.contains(string1));
      assertEquals(0, priorityQueue0.size());
      assertNotNull(priorityQueue0);
      
      boolean boolean0 = priorityQueue0.add("k!DilRqedowPa|Okjcp");
      assertFalse(priorityQueue0.contains(string1));
      assertTrue(priorityQueue0.contains("k!DilRqedowPa|Okjcp"));
      assertTrue(boolean0);
      assertEquals(1, priorityQueue0.size());
      
      boolean boolean1 = priorityQueue0.add("r'KOc6)0,");
      assertFalse(priorityQueue0.contains(string1));
      assertTrue(priorityQueue0.contains("k!DilRqedowPa|Okjcp"));
      assertTrue(boolean1);
      assertEquals(2, priorityQueue0.size());
      assertTrue(boolean1 == boolean0);
      
      boolean boolean2 = priorityQueue0.add("G^7|+zFpb:oK?5");
      assertFalse(priorityQueue0.contains(string1));
      assertTrue(priorityQueue0.contains("k!DilRqedowPa|Okjcp"));
      assertTrue(boolean2);
      assertEquals(3, priorityQueue0.size());
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      Vector<Locale.LanguageRange> vector0 = new Vector<Locale.LanguageRange>();
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertNotNull(vector0);
      
      String string2 = StringUtils.join((Iterable<?>) priorityQueue0, "`p/3)pybuB6y&%-`Ox$");
      assertFalse(priorityQueue0.contains(string1));
      assertTrue(priorityQueue0.contains("k!DilRqedowPa|Okjcp"));
      assertEquals("G^7|+zFpb:oK?5`p/3)pybuB6y&%-`Ox$r'KOc6)0,`p/3)pybuB6y&%-`Ox$k!DilRqedowPa|Okjcp", string2);
      assertEquals(3, priorityQueue0.size());
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      String string3 = StringUtils.repeat("G^7|+zFpb:oK?5", (String) null, 8192);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
  }

  @Test(timeout = 4000)
  public void test400()  throws Throwable  {
      String string0 = StringUtils.rightPad("#", (-25), "F1~Sp}mS5");
      assertEquals("#", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "F1~Sp}mS5", (CharSequence) "#", 1032);
      assertEquals(9, int0);
      
      String string1 = StringUtils.remove("&MT#GCn!iD", '+');
      assertEquals("&MT#GCn!iD", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.stripToNull("lUX*>FRD3w2#pt");
      assertEquals("lUX*>FRD3w2#pt", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      String string3 = StringUtils.getDigits("AT\"X}/};T0-*47");
      assertEquals("047", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      
      boolean boolean0 = StringUtils.isAlphanumericSpace("#");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test401()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      String string0 = StringUtils.getDigits("");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.chomp("");
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.swapCase("7]*9 'NX.");
      assertEquals("7]*9 'nx.", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test402()  throws Throwable  {
      String string0 = StringUtils.upperCase("Wo>i");
      assertEquals("WO>I", string0);
      assertNotNull(string0);
      
      double double0 = StringUtils.getJaroWinklerDistance("WO>I", "Wo>i");
      assertEquals(0.67, double0, 0.01);
      
      String string1 = StringUtils.wrap("comparator", 'f');
      assertEquals("fcomparatorf", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.remove("Object varargs must not be null", "Wo>i");
      assertEquals("Object varargs must not be null", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      String string3 = StringUtils.strip("Object varargs must not be null", "Aborting to protect against StackOverflowError - output of one loop is the input of another");
      assertEquals("ject varargs m", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "ject varargs m", (CharSequence) "WO>I", (int) 'f');
      assertEquals((-1), int0);
      
      String string4 = StringUtils.replace("offset cannot be negative", "Wo>i", " ", (int) 'f');
      assertEquals("offset cannot be negative", string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertNotNull(string4);
      
      String string5 = StringUtils.abbreviate("WO>I", (-1), 5);
      assertEquals("WO>I", string5);
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertTrue(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertNotNull(string5);
  }

  @Test(timeout = 4000)
  public void test403()  throws Throwable  {
      String string0 = StringUtils.removeEndIgnoreCase("g", ";v1\"b1bn|{q4gT");
      assertEquals("g", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isAllUpperCase("g");
      assertFalse(boolean0);
      
      String string1 = StringUtils.defaultString("g");
      assertEquals("g", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      boolean boolean1 = StringUtils.isWhitespace("g");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      int int0 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      char[] charArray0 = new char[3];
      charArray0[0] = '\\';
      charArray0[1] = 'b';
      charArray0[2] = '5';
      int int1 = StringUtils.indexOfAnyBut((CharSequence) "g", charArray0);
      assertArrayEquals(new char[] {'\\', 'b', '5'}, charArray0);
      assertEquals(0, int1);
      assertFalse(int1 == int0);
      assertEquals(3, charArray0.length);
      
      String string2 = StringUtils.replaceChars("g", "org.apache.commons.lang3.ObjectUtils$Null@J(?mTkP%H7vTZ-", (String) null);
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      String string3 = StringUtils.join((Iterator<?>) null, '\\');
      assertNull(string3);
      
      // Undeclared exception!
      try { 
        StringUtils.getLevenshteinDistance((CharSequence) "org.apache.commons.lang3.ObjectUtils$Null@J(?mTkP%H7vTZ-", (CharSequence) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test404()  throws Throwable  {
      String string0 = StringUtils.trimToNull("~c3k'=IBAvw%");
      assertEquals("~c3k'=IBAvw%", string0);
      assertNotNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[11];
      charSequenceArray0[0] = (CharSequence) "Array element ";
      charSequenceArray0[1] = (CharSequence) "~c3k'=IBAvw%";
      String string1 = StringUtils.LF;
      assertEquals("\n", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      charSequenceArray0[2] = (CharSequence) "\n";
      charSequenceArray0[3] = (CharSequence) "~c3k'=IBAvw%";
      charSequenceArray0[4] = (CharSequence) "~c3k'=IBAvw%";
      charSequenceArray0[5] = (CharSequence) "~c3k'=IBAvw%";
      charSequenceArray0[6] = (CharSequence) "~c3k'=IBAvw%";
      String string2 = StringUtils.prependIfMissingIgnoreCase("Array element ", "~c3k'=IBAvw%", charSequenceArray0);
      assertEquals("Array element ", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals(11, charSequenceArray0.length);
      
      String string3 = StringUtils.trimToEmpty("Array element ");
      assertEquals("Array element", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      
      String string4 = StringUtils.substringBeforeLast("Array element ", "xSQN.aT!{z;[78<");
      assertEquals("Array element ", string4);
      assertTrue(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertNotNull(string4);
      
      String string5 = StringUtils.deleteWhitespace("A");
      assertEquals("A", string5);
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertNotNull(string5);
      
      String string6 = StringUtils.replaceFirst("~c3k'=IBAvw%", "Array element ", "en&NfC@3X5OcNO");
      assertEquals("~c3k'=IBAvw%", string6);
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string5));
      assertTrue(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string3));
      assertNotNull(string6);
      
      String string7 = StringUtils.LF;
      assertEquals("\n", string7);
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string4));
      assertNotNull(string7);
      
      String[] stringArray0 = new String[0];
      String[] stringArray1 = StringUtils.stripAll(stringArray0, " is not in the range '0' - '9'");
      assertNotNull(stringArray1);
      assertSame(stringArray0, stringArray1);
      assertSame(stringArray1, stringArray0);
      assertEquals(0, stringArray0.length);
      assertEquals(0, stringArray1.length);
      
      String string8 = StringUtils.stripToEmpty((String) null);
      assertEquals("", string8);
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string3));
      assertNotNull(string8);
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'W';
      charArray0[1] = ')';
      String string9 = StringUtils.valueOf(charArray0);
      assertArrayEquals(new char[] {'W', ')'}, charArray0);
      assertEquals("W)", string9);
      assertFalse(string9.equals((Object)string0));
      assertFalse(string9.equals((Object)string6));
      assertFalse(string9.equals((Object)string1));
      assertFalse(string9.equals((Object)string2));
      assertFalse(string9.equals((Object)string8));
      assertFalse(string9.equals((Object)string4));
      assertFalse(string9.equals((Object)string5));
      assertFalse(string9.equals((Object)string7));
      assertFalse(string9.equals((Object)string3));
      assertNotNull(string9);
      assertEquals(2, charArray0.length);
      
      boolean boolean0 = StringUtils.equalsIgnoreCase("", "W)");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test405()  throws Throwable  {
      String string0 = StringUtils.capitalize((String) null);
      assertNull(string0);
      
      int int0 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      String string1 = StringUtils.replace("g]=", (String) null, "", (-2561));
      assertEquals("g]=", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test406()  throws Throwable  {
      String string0 = StringUtils.capitalize("Exception cloning Cloneable type }5n.$69QS )=/tT|Krl");
      assertEquals("Exception cloning Cloneable type }5n.$69QS )=/tT|Krl", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isNumericSpace("Array element ");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test407()  throws Throwable  {
      String string0 = StringUtils.removeEnd("0\"j9+)Nv%kXU2q\"z/", "clone");
      assertEquals("0\"j9+)Nv%kXU2q\"z/", string0);
      assertNotNull(string0);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) 48;
      floatArray0[1] = (float) (-931);
      floatArray0[2] = (float) (-931);
      floatArray0[3] = (float) (-931);
      floatArray0[4] = (float) 48;
      String string1 = StringUtils.join(floatArray0, ']', (-931), (-931));
      assertArrayEquals(new float[] {48.0F, (-931.0F), (-931.0F), (-931.0F), 48.0F}, floatArray0, 0.01F);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(5, floatArray0.length);
      
      String[] stringArray0 = new String[0];
      String string2 = StringUtils.firstNonEmpty(stringArray0);
      assertNull(string2);
      assertEquals(0, stringArray0.length);
      
      String string3 = StringUtils.stripEnd("2!,{+vAy@Ng", "=brt[~ev2UTo@q2f}");
      assertEquals("2!,{+vAy@Ng", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      
      String string4 = StringUtils.stripToNull("");
      assertNull(string4);
  }

  @Test(timeout = 4000)
  public void test408()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      String string0 = StringUtils.trimToNull("qD/.5Q]{&GZM2vH<]");
      assertEquals("qD/.5Q]{&GZM2vH<]", string0);
      assertNotNull(string0);
      
      charSequenceArray0[0] = (CharSequence) "qD/.5Q]{&GZM2vH<]";
      String string1 = StringUtils.prependIfMissingIgnoreCase("qD/.5Q]{&GZM2vH<]", "qD/.5Q]{&GZM2vH<]", charSequenceArray0);
      assertEquals("qD/.5Q]{&GZM2vH<]", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(1, charSequenceArray0.length);
      
      String string2 = StringUtils.removeStart("", "qD/.5Q]{&GZM2vH<]");
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      String string3 = StringUtils.substringBeforeLast("U'i{GNK", ")%");
      assertEquals("U'i{GNK", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      
      char[] charArray0 = new char[5];
      charArray0[0] = '@';
      charArray0[1] = 'D';
      charArray0[2] = 'z';
      charArray0[3] = ';';
      String string4 = StringUtils.rightPad("LN)4", 1583, '@');
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertNotNull(string4);
      
      String string5 = StringUtils.unwrap((String) null, "qD/.5Q]{&GZM2vH<]");
      assertNull(string5);
      
      int int0 = StringUtils.indexOfDifference((CharSequence) "", (CharSequence) "U'i{GNK");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test409()  throws Throwable  {
      Object[] objectArray0 = new Object[7];
      String string0 = StringUtils.join(objectArray0, "comparator");
      assertEquals("comparatorcomparatorcomparatorcomparatorcomparatorcomparator", string0);
      assertNotNull(string0);
      assertEquals(7, objectArray0.length);
      
      String string1 = StringUtils.rightPad("", 1, '~');
      assertEquals("~", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.unwrap("~", "comparatorcomparatorcomparatorcomparatorcomparatorcomparator");
      assertEquals("~", string2);
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test410()  throws Throwable  {
      String string0 = StringUtils.deleteWhitespace("C1k-7_rbEbjE6eQS8]^");
      assertEquals("C1k-7_rbEbjE6eQS8]^", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isAllUpperCase("C1k-7_rbEbjE6eQS8]^");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isNotEmpty("C1k-7_rbEbjE6eQS8]^");
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      char[] charArray0 = new char[7];
      charArray0[0] = '`';
      charArray0[1] = 'v';
      charArray0[2] = 'B';
      charArray0[3] = 'v';
      charArray0[4] = '$';
      charArray0[5] = 'n';
      charArray0[6] = '<';
      boolean boolean2 = StringUtils.isAlphanumeric("C1k-7_rbEbjE6eQS8]^");
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      charSequenceArray0[0] = (CharSequence) "C1k-7_rbEbjE6eQS8]^";
      charSequenceArray0[1] = (CharSequence) "C1k-7_rbEbjE6eQS8]^";
      int int0 = StringUtils.indexOfAnyBut(charSequenceArray0[1], charArray0);
      assertArrayEquals(new char[] {'`', 'v', 'B', 'v', '$', 'n', '<'}, charArray0);
      assertEquals(0, int0);
      assertEquals(7, charArray0.length);
      assertEquals(3, charSequenceArray0.length);
      
      String string1 = StringUtils.overlay("C1k-7_rbEbjE6eQS8]^", ":", 2226, 2226);
      assertEquals("C1k-7_rbEbjE6eQS8]^:", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.unwrap("C1k-7_rbEbjE6eQS8]^", "C1k-7_rbEbjE6eQS8]^:");
      assertEquals("C1k-7_rbEbjE6eQS8]^", string2);
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      boolean boolean3 = StringUtils.contains(charSequenceArray0[0], (CharSequence) ":");
      assertFalse(boolean3);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertEquals(3, charSequenceArray0.length);
  }

  @Test(timeout = 4000)
  public void test411()  throws Throwable  {
      String string0 = StringUtils.substring("bjX'A", 1301);
      assertEquals("", string0);
      assertNotNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[7];
      charSequenceArray0[1] = (CharSequence) "";
      charSequenceArray0[4] = (CharSequence) "bjX'A";
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      PriorityQueue<String> priorityQueue0 = new PriorityQueue<String>(comparator0);
      assertFalse(priorityQueue0.contains("bjX'A"));
      assertEquals(0, priorityQueue0.size());
      assertNotNull(priorityQueue0);
      
      boolean boolean0 = priorityQueue0.add("d<@38vwUK ~XpQ%8IZ");
      assertTrue(priorityQueue0.contains("d<@38vwUK ~XpQ%8IZ"));
      assertFalse(priorityQueue0.contains("bjX'A"));
      assertTrue(boolean0);
      assertEquals(1, priorityQueue0.size());
      
      Vector<Locale.LanguageRange> vector0 = new Vector<Locale.LanguageRange>();
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertNotNull(vector0);
      
      String string1 = StringUtils.join((Iterable<?>) priorityQueue0, "bjX'A");
      assertTrue(priorityQueue0.contains("d<@38vwUK ~XpQ%8IZ"));
      assertFalse(priorityQueue0.contains(string0));
      assertEquals("d<@38vwUK ~XpQ%8IZ", string1);
      assertEquals(1, priorityQueue0.size());
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) 1301;
      floatArray0[1] = (float) 1301;
      floatArray0[2] = (float) 1301;
      floatArray0[3] = (float) 1301;
      floatArray0[4] = (float) 1301;
      floatArray0[5] = (float) 1301;
      floatArray0[6] = (float) 1301;
      floatArray0[7] = (float) 1301;
      floatArray0[8] = (float) 1301;
      String string2 = StringUtils.join(floatArray0, ':', 1301, 1301);
      assertArrayEquals(new float[] {1301.0F, 1301.0F, 1301.0F, 1301.0F, 1301.0F, 1301.0F, 1301.0F, 1301.0F, 1301.0F}, floatArray0, 0.01F);
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals(9, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test412()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      charSequenceArray0[0] = (CharSequence) "8c>!) u,eei!\"I2yC-U";
      charSequenceArray0[1] = (CharSequence) "8c>!) u,eei!\"I2yC-U";
      TreeSet<String> treeSet0 = new TreeSet<String>();
      assertFalse(treeSet0.contains("8c>!) u,eei!\"I2yC-U"));
      assertNotNull(treeSet0);
      
      ArrayDeque<Object> arrayDeque0 = new ArrayDeque<Object>(treeSet0);
      assertFalse(treeSet0.contains("8c>!) u,eei!\"I2yC-U"));
      assertFalse(arrayDeque0.contains("8c>!) u,eei!\"I2yC-U"));
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      assertNotNull(arrayDeque0);
      
      Locale locale0 = Locale.PRC;
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertNotNull(locale0);
      
      arrayDeque0.push(locale0);
      assertFalse(treeSet0.contains("8c>!) u,eei!\"I2yC-U"));
      assertFalse(arrayDeque0.contains("8c>!) u,eei!\"I2yC-U"));
      assertEquals(1, arrayDeque0.size());
      assertFalse(arrayDeque0.isEmpty());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      
      Iterator<Object> iterator0 = arrayDeque0.descendingIterator();
      assertFalse(treeSet0.contains("8c>!) u,eei!\"I2yC-U"));
      assertFalse(arrayDeque0.contains("8c>!) u,eei!\"I2yC-U"));
      assertEquals(1, arrayDeque0.size());
      assertFalse(arrayDeque0.isEmpty());
      assertNotNull(iterator0);
      
      String string0 = StringUtils.join(iterator0, "KM_perG q/");
      assertFalse(treeSet0.contains("8c>!) u,eei!\"I2yC-U"));
      assertFalse(arrayDeque0.contains("8c>!) u,eei!\"I2yC-U"));
      assertEquals("zh_CN", string0);
      assertEquals(1, arrayDeque0.size());
      assertFalse(arrayDeque0.isEmpty());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test413()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = '2';
      charArray0[1] = 's';
      charArray0[2] = '2';
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("sm]@m4P(6<");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      String string0 = StringUtils.strip("/:", "org.apache.commons.lang3.LocaleUtils");
      assertEquals("/:", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.appendIfMissingIgnoreCase("sm]@m4P(6<", "/:", stringArray0);
      assertEquals("sm]@m4P(6<", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(1, stringArray0.length);
      
      String string2 = StringUtils.removeEnd("VbdG...", "sm]@m4P(6<");
      assertEquals("VbdG...", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      String string3 = StringUtils.abbreviate("BN;t9ei%w/f6t", "VbdG...", 62);
      assertEquals("BN;t9ei%w/f6t", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      
      int int0 = StringUtils.countMatches((CharSequence) "sm]@m4P(6<", '2');
      assertEquals(0, int0);
      
      Vector<Locale.LanguageRange> vector0 = new Vector<Locale.LanguageRange>();
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertNotNull(vector0);
      
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      PriorityQueue<String> priorityQueue0 = new PriorityQueue<String>(comparator0);
      assertFalse(priorityQueue0.contains(string1));
      assertEquals(0, priorityQueue0.size());
      assertNotNull(priorityQueue0);
      
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) vector0, (Collection<String>) priorityQueue0);
      assertFalse(priorityQueue0.contains(string1));
      assertFalse(list0.contains(string1));
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(0, priorityQueue0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
      
      ArrayList<String> arrayList0 = new ArrayList<String>(list0);
      assertFalse(priorityQueue0.contains(string1));
      assertFalse(list0.contains(string1));
      assertFalse(arrayList0.contains(string1));
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(0, priorityQueue0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
  }

  @Test(timeout = 4000)
  public void test414()  throws Throwable  {
      Object[] objectArray0 = new Object[7];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      objectArray0[1] = object1;
      Object object2 = new Object();
      assertFalse(object2.equals((Object)object0));
      assertFalse(object2.equals((Object)object1));
      assertNotNull(object2);
      
      objectArray0[2] = object2;
      Object object3 = new Object();
      assertFalse(object3.equals((Object)object2));
      assertFalse(object3.equals((Object)object1));
      assertFalse(object3.equals((Object)object0));
      assertNotNull(object3);
      
      objectArray0[3] = object3;
      Object object4 = new Object();
      assertFalse(object4.equals((Object)object3));
      assertFalse(object4.equals((Object)object0));
      assertFalse(object4.equals((Object)object1));
      assertFalse(object4.equals((Object)object2));
      assertNotNull(object4);
      
      objectArray0[4] = object4;
      Object object5 = new Object();
      assertFalse(object5.equals((Object)object0));
      assertFalse(object5.equals((Object)object1));
      assertFalse(object5.equals((Object)object2));
      assertFalse(object5.equals((Object)object3));
      assertFalse(object5.equals((Object)object4));
      assertNotNull(object5);
      
      objectArray0[5] = object5;
      Object object6 = new Object();
      assertFalse(object6.equals((Object)object2));
      assertFalse(object6.equals((Object)object4));
      assertFalse(object6.equals((Object)object0));
      assertFalse(object6.equals((Object)object5));
      assertFalse(object6.equals((Object)object3));
      assertFalse(object6.equals((Object)object1));
      assertNotNull(object6);
      
      objectArray0[6] = object6;
      String string0 = StringUtils.replaceChars("}yrRfNpTa/@3(+m", "Array element ", "Ar|l");
      assertEquals("}rRfNpTl/@3(+", string0);
      assertNotNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[0] = (CharSequence) "}yrRfNpTa/@3(+m";
      charSequenceArray0[1] = (CharSequence) "Ar|l";
      String string1 = StringUtils.appendIfMissingIgnoreCase("Array element ", "}yrRfNpTa/@3(+m", charSequenceArray0);
      assertEquals("Array element }yrRfNpTa/@3(+m", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(2, charSequenceArray0.length);
      
      String string2 = StringUtils.removeEnd("VbdG", "Array element }yrRfNpTa/@3(+m");
      assertEquals("VbdG", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      // Undeclared exception!
      try { 
        StringUtils.abbreviate("VbdG", "GLWZTRHq>099#", (-712));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum abbreviation width is 14
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test415()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      String string0 = StringUtils.stripAccents((String) null);
      assertNull(string0);
      
      charSequenceArray0[0] = (CharSequence) null;
      charSequenceArray0[1] = (CharSequence) "\n\n";
      String string1 = StringUtils.appendIfMissing("Array element ", "*{SR\"`K0", charSequenceArray0);
      assertEquals("Array element *{SR\"`K0", string1);
      assertNotNull(string1);
      assertEquals(2, charSequenceArray0.length);
      
      String string2 = StringUtils.unwrap((String) null, '3');
      assertNull(string2);
      
      String string3 = StringUtils.lowerCase("cq*?xb`'R=TBxWn!ea");
      assertEquals("cq*?xb`'r=tbxwn!ea", string3);
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
  }

  @Test(timeout = 4000)
  public void test416()  throws Throwable  {
      String string0 = StringUtils.left("zglsPnt>L1<gncB!+", 641);
      assertEquals("zglsPnt>L1<gncB!+", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.overlay("zglsPnt>L1<gncB!+", "zglsPnt>L1<gncB!+", 9, (-2011));
      assertEquals("zglsPnt>L1<gncB!+1<gncB!+", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      boolean boolean0 = StringUtils.isNoneBlank(charSequenceArray0);
      assertTrue(boolean0);
      assertEquals(0, charSequenceArray0.length);
      
      String string2 = StringUtils.substringBetween("zglsPnt>L1<gncB!+", "Object varargs must not be null", "L,g");
      assertNull(string2);
      
      int[] intArray0 = StringUtils.toCodePoints((CharSequence) null);
      assertNull(intArray0);
      
      String string3 = StringUtils.center((String) null, 2, '%');
      assertNull(string3);
  }

  @Test(timeout = 4000)
  public void test417()  throws Throwable  {
      String string0 = StringUtils.deleteWhitespace("8c>!) u,eei!\"I2yC-U");
      assertEquals("8c>!)u,eei!\"I2yC-U", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.countMatches((CharSequence) "8c>!)u,eei!\"I2yC-U", 'v');
      assertEquals(0, int0);
      
      String string1 = StringUtils.rightPad("org.apache.commons.lang3.ObjectUtils", 0, '+');
      assertEquals("org.apache.commons.lang3.ObjectUtils", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.substringAfter("_U", "org.apache.commons.lang3.ObjectUtils");
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      int int1 = StringUtils.lastIndexOf((CharSequence) "8c>!) u,eei!\"I2yC-U", (CharSequence) "", 0);
      assertEquals(0, int1);
      assertTrue(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test418()  throws Throwable  {
      String string0 = StringUtils.upperCase("Strings must not be null");
      assertEquals("STRINGS MUST NOT BE NULL", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.toRootLowerCase("Dh<PG9l");
      assertEquals("dh<pg9l", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.abbreviate("dh<pg9l", 1686, 1686);
      assertEquals("dh<pg9l", string2);
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test419()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = 'X';
      charArray0[1] = 'X';
      charArray0[2] = 'x';
      boolean boolean0 = StringUtils.containsAny((CharSequence) "s-D4{8$Mo,|,xZ", charArray0);
      assertArrayEquals(new char[] {'X', 'X', 'x'}, charArray0);
      assertTrue(boolean0);
      assertEquals(3, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test420()  throws Throwable  {
      String string0 = StringUtils.substringBeforeLast("5", "]U\"z");
      assertEquals("5", string0);
      assertNotNull(string0);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'X';
      boolean boolean0 = StringUtils.containsAny((CharSequence) "5", charArray0);
      assertArrayEquals(new char[] {'X'}, charArray0);
      assertFalse(boolean0);
      assertEquals(1, charArray0.length);
      
      // Undeclared exception!
      try { 
        StringUtils.replaceAll("5", "I));FyV_V3", "]U\"z");
        fail("Expecting exception: PatternSyntaxException");
      
      } catch(PatternSyntaxException e) {
         //
         // Unmatched closing ')' near index 0
         // I));FyV_V3
         // ^
         //
         verifyException("java.util.regex.Pattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test421()  throws Throwable  {
      String string0 = StringUtils.SPACE;
      assertEquals(" ", string0);
      assertNotNull(string0);
      
      char[] charArray0 = new char[0];
      boolean boolean0 = StringUtils.containsAny((CharSequence) " ", charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertFalse(boolean0);
      assertEquals(0, charArray0.length);
      
      String string1 = StringUtils.uncapitalize("d;O=H/Y.Cu5d'");
      assertEquals("d;O=H/Y.Cu5d'", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test422()  throws Throwable  {
      String string0 = StringUtils.replaceIgnoreCase("", "F1~Sp}mS5", "0FO5}hhQ5YS+G9");
      assertEquals("", string0);
      assertNotNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      charSequenceArray0[0] = (CharSequence) "0FO5}hhQ5YS+G9";
      charSequenceArray0[1] = (CharSequence) "";
      charSequenceArray0[2] = (CharSequence) "0FO5}hhQ5YS+G9";
      charSequenceArray0[3] = (CharSequence) "F1~Sp}mS5";
      boolean boolean0 = StringUtils.containsAnyIgnoreCase("", charSequenceArray0);
      assertFalse(boolean0);
      assertEquals(4, charSequenceArray0.length);
      
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      boolean boolean1 = StringUtils.containsAny(charSequenceArray0[0], (CharSequence) "F1~Sp}mS5");
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      assertEquals(4, charSequenceArray0.length);
      
      String string1 = StringUtils.join((byte[]) null, '5');
      assertNull(string1);
      
      int int0 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      String string2 = StringUtils.replaceChars("Array element ", "", "}yrRfNpTa/@3(+m");
      assertEquals("Array element ", string2);
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      String string3 = StringUtils.difference("0FO5}hhQ5YS+G9", "+=El)_2#k1");
      assertEquals("+=El)_2#k1", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
  }

  @Test(timeout = 4000)
  public void test423()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "@";
      stringArray0[1] = "@";
      stringArray0[2] = "@";
      stringArray0[3] = "Cloneable type Array element VbdG";
      // Undeclared exception!
      try { 
        StringUtils.replaceEachRepeatedly("@", stringArray0, stringArray0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Aborting to protect against StackOverflowError - output of one loop is the input of another
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test424()  throws Throwable  {
      String string0 = StringUtils.defaultString("offset cannot be negative");
      assertEquals("offset cannot be negative", string0);
      assertNotNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      charSequenceArray0[0] = (CharSequence) "2";
      String string1 = StringUtils.joinWith("offset cannot be negative", charSequenceArray0);
      assertEquals("2", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(1, charSequenceArray0.length);
      
      String string2 = StringUtils.substring("offset cannot be negative", (-1178), (-1988));
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      String string3 = StringUtils.rightPad("2", (-1178));
      assertEquals("2", string3);
      assertFalse(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      
      int int0 = StringUtils.indexOfDifference(charSequenceArray0);
      assertEquals((-1), int0);
      assertEquals(1, charSequenceArray0.length);
  }

  @Test(timeout = 4000)
  public void test425()  throws Throwable  {
      String string0 = StringUtils.removeStart("*{SR\"`K0", "}5n.$69QS )=/tT|Krl");
      assertEquals("*{SR\"`K0", string0);
      assertNotNull(string0);
      
      int[] intArray0 = StringUtils.toCodePoints("Array element ");
      assertNotNull(intArray0);
      assertEquals(14, intArray0.length);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("`r\"I<58oyHO@en", "Array element ");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      String string1 = StringUtils.wrapIfMissing("A/P", "A/P");
      assertEquals("A/P", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      int[] intArray1 = StringUtils.toCodePoints("A/P");
      assertArrayEquals(new int[] {65, 47, 80}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(3, intArray1.length);
      
      boolean boolean0 = StringUtils.containsWhitespace("}5n.$69QS )=/tT|Krl");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test426()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      String string0 = StringUtils.join(objectArray0, 'p');
      assertNotNull(string0);
      assertEquals(1, objectArray0.length);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "java.lang.Object@a9937a8", (CharSequence) "java.lang.Object@a9937a8");
      assertEquals(0, int0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      charSequenceArray0[0] = (CharSequence) "java.lang.Object@a9937a8";
      boolean boolean0 = StringUtils.endsWithAny("java.lang.Object@a9937a8", charSequenceArray0);
      assertTrue(boolean0);
      assertEquals(1, charSequenceArray0.length);
      
      int int1 = StringUtils.countMatches((CharSequence) "java.lang.Object@a9937a8", 'p');
      assertEquals(0, int1);
      assertTrue(int1 == int0);
      
      int int2 = StringUtils.lastIndexOfIgnoreCase(charSequenceArray0[0], (CharSequence) "java.lang.Object@a9937a8");
      assertEquals(0, int2);
      assertTrue(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals(1, charSequenceArray0.length);
      
      String string1 = StringUtils.removeStartIgnoreCase("java.lang.Object@a9937a8", "java.lang.Object@a9937a8");
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.substringAfterLast("java.lang.Object@a9937a8", "java.lang.Object@a9937a8");
      assertEquals("", string2);
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      boolean boolean1 = StringUtils.startsWithIgnoreCase("", "");
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String string3 = StringUtils.join(objectArray0);
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      assertEquals(1, objectArray0.length);
      
      String string4 = StringUtils.appendIfMissingIgnoreCase("", charSequenceArray0[0], charSequenceArray0);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertNotNull(string4);
      assertEquals(1, charSequenceArray0.length);
      
      String string5 = StringUtils.repeat("_N", 0);
      assertEquals("", string5);
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertTrue(string5.equals((Object)string1));
      assertNotNull(string5);
      
      long[] longArray0 = new long[5];
      longArray0[0] = (long) 0;
      longArray0[1] = (long) 0;
      longArray0[2] = (long) 38;
      longArray0[3] = (long) 0;
      longArray0[4] = (long) 'I';
      String string6 = StringUtils.join(longArray0, 'I', 1088, (-1623));
      assertArrayEquals(new long[] {0L, 0L, 38L, 0L, 73L}, longArray0);
      assertEquals("", string6);
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string0));
      assertTrue(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string3));
      assertNotNull(string6);
      assertEquals(5, longArray0.length);
      
      String string7 = StringUtils.difference((String) null, "java.lang.Object@a9937a8");
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string2));
      assertTrue(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string6));
      assertNotNull(string7);
      
      String string8 = StringUtils.wrapIfMissing("_N", "");
      assertEquals("_N", string8);
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string2));
      assertNotNull(string8);
  }

  @Test(timeout = 4000)
  public void test427()  throws Throwable  {
      String[] stringArray0 = new String[13];
      stringArray0[1] = "";
      String string0 = StringUtils.firstNonBlank(stringArray0);
      assertNull(string0);
      assertEquals(13, stringArray0.length);
      
      boolean boolean0 = StringUtils.startsWithAny("", stringArray0);
      assertFalse(boolean0);
      assertEquals(13, stringArray0.length);
      
      String string1 = StringUtils.defaultString((String) null);
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.wrapIfMissing("", "");
      assertEquals("", string2);
      assertTrue(string2.equals((Object)string1));
      assertNotNull(string2);
      
      int[] intArray0 = StringUtils.toCodePoints("ILg");
      assertArrayEquals(new int[] {73, 76, 103}, intArray0);
      assertNotNull(intArray0);
      assertEquals(3, intArray0.length);
      
      boolean boolean1 = StringUtils.containsWhitespace("");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test428()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("?!", 'l');
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      String string0 = StringUtils.abbreviate((String) null, "?!", 108, 322);
      assertNull(string0);
      
      String string1 = StringUtils.abbreviate("?!", (String) null, 322, 322);
      assertEquals("?!", string1);
      assertNotNull(string1);
      
      char[] charArray0 = new char[1];
      charArray0[0] = '7';
      int int0 = StringUtils.indexOfAny((CharSequence) null, charArray0);
      assertArrayEquals(new char[] {'7'}, charArray0);
      assertEquals((-1), int0);
      assertEquals(1, charArray0.length);
      
      String string2 = StringUtils.defaultIfEmpty((String) null, (String) null);
      assertNull(string2);
      
      boolean boolean0 = StringUtils.containsNone((CharSequence) null, "?!");
      assertTrue(boolean0);
      
      String string3 = StringUtils.stripEnd((String) null, "?!");
      assertNull(string3);
      
      String string4 = StringUtils.uncapitalize("?!");
      assertEquals("?!", string4);
      assertTrue(string4.equals((Object)string1));
      assertNotNull(string4);
      
      String string5 = StringUtils.center((String) null, 322);
      assertNull(string5);
      
      boolean boolean1 = StringUtils.isWhitespace((CharSequence) null);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      String string6 = StringUtils.repeat((String) null, "?!", 322);
      assertNull(string6);
      
      String string7 = StringUtils.appendIfMissingIgnoreCase((String) null, (CharSequence) null, stringArray0);
      assertNull(string7);
      assertEquals(1, stringArray0.length);
      
      String string8 = StringUtils.repeat((String) null, 38);
      assertNull(string8);
      
      long[] longArray0 = new long[6];
      longArray0[0] = (long) (-1);
      longArray0[1] = (long) (-1);
      longArray0[2] = (long) '7';
      longArray0[3] = (long) 'l';
      longArray0[4] = (long) 108;
      longArray0[5] = (long) 108;
      String string9 = StringUtils.join(longArray0, 'I', 322, 108);
      assertArrayEquals(new long[] {(-1L), (-1L), 55L, 108L, 108L, 108L}, longArray0);
      assertEquals("", string9);
      assertFalse(string9.equals((Object)string1));
      assertFalse(string9.equals((Object)string4));
      assertNotNull(string9);
      assertEquals(6, longArray0.length);
      
      String string10 = StringUtils.difference(";v%~0rz3%-Hv~u&u", "-[7)_M(9ys?b094");
      assertEquals("-[7)_M(9ys?b094", string10);
      assertFalse(string10.equals((Object)string4));
      assertFalse(string10.equals((Object)string9));
      assertFalse(string10.equals((Object)string1));
      assertNotNull(string10);
      
      String string11 = StringUtils.wrapIfMissing((String) null, "0JQQrr?B1-%D33t+SS");
      assertNull(string11);
  }

  @Test(timeout = 4000)
  public void test429()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("?!", 'l');
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      String string0 = StringUtils.abbreviate((String) null, "?!", 108, 322);
      assertNull(string0);
      
      String string1 = StringUtils.abbreviate("?!", (String) null, 322, 322);
      assertEquals("?!", string1);
      assertNotNull(string1);
      
      char[] charArray0 = new char[1];
      charArray0[0] = '7';
      int int0 = StringUtils.indexOfAny((CharSequence) null, charArray0);
      assertArrayEquals(new char[] {'7'}, charArray0);
      assertEquals((-1), int0);
      assertEquals(1, charArray0.length);
      
      String string2 = StringUtils.defaultIfEmpty((String) null, (String) null);
      assertNull(string2);
      
      boolean boolean0 = StringUtils.containsNone((CharSequence) null, "?!");
      assertTrue(boolean0);
      
      String string3 = StringUtils.stripEnd((String) null, "?!");
      assertNull(string3);
      
      String string4 = StringUtils.uncapitalize("?!");
      assertEquals("?!", string4);
      assertTrue(string4.equals((Object)string1));
      assertNotNull(string4);
      
      String string5 = StringUtils.center((String) null, 322);
      assertNull(string5);
      
      boolean boolean1 = StringUtils.isWhitespace((CharSequence) null);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      String string6 = StringUtils.repeat((String) null, "?!", 322);
      assertNull(string6);
      
      String string7 = StringUtils.appendIfMissingIgnoreCase((String) null, (CharSequence) null, stringArray0);
      assertNull(string7);
      assertEquals(1, stringArray0.length);
      
      String string8 = StringUtils.repeat((String) null, 38);
      assertNull(string8);
      
      long[] longArray0 = new long[6];
      longArray0[0] = (long) (-1);
      longArray0[1] = (long) (-1);
      longArray0[2] = (long) '7';
      longArray0[3] = (long) 'l';
      longArray0[4] = (long) 108;
      longArray0[5] = (long) 108;
      String string9 = StringUtils.join(longArray0, 'I', 322, 108);
      assertArrayEquals(new long[] {(-1L), (-1L), 55L, 108L, 108L, 108L}, longArray0);
      assertEquals("", string9);
      assertFalse(string9.equals((Object)string1));
      assertFalse(string9.equals((Object)string4));
      assertNotNull(string9);
      assertEquals(6, longArray0.length);
      
      String string10 = StringUtils.difference(";v%~0rz3%-Hv~u&u", "-[7)_M(9ys?b094");
      assertEquals("-[7)_M(9ys?b094", string10);
      assertFalse(string10.equals((Object)string9));
      assertFalse(string10.equals((Object)string4));
      assertFalse(string10.equals((Object)string1));
      assertNotNull(string10);
      
      String string11 = StringUtils.prependIfMissingIgnoreCase("/p)?<D@d;4g(/O>", "?!", stringArray0);
      assertFalse(string11.equals((Object)string10));
      assertFalse(string11.equals((Object)string1));
      assertFalse(string11.equals((Object)string4));
      assertFalse(string11.equals((Object)string9));
      assertNotNull(string11);
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test430()  throws Throwable  {
      String string0 = StringUtils.abbreviate("s", 13, 13);
      assertEquals("s", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.leftPad("s", 13);
      assertEquals("            s", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "            s", (CharSequence) "s");
      assertEquals(12, int0);
      
      boolean boolean0 = StringUtils.equalsAny("            s", (CharSequence[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test431()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[6];
      charSequenceArray0[0] = null;
      String string0 = StringUtils.rightPad(" ", (-32768), "Minimum abbreviation width is %d");
      assertEquals(" ", string0);
      assertNotNull(string0);
      
      char[] charArray0 = new char[7];
      charArray0[0] = '8';
      charArray0[1] = '[';
      charArray0[2] = 'L';
      charArray0[3] = '`';
      charArray0[4] = '7';
      charArray0[5] = '~';
      charArray0[6] = '$';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      assertArrayEquals(new char[] {'8', '[', 'L', '`', '7', '~', '$'}, charArray0);
      assertEquals(0, charBuffer0.position());
      assertEquals(7, charBuffer0.length());
      assertTrue(charBuffer0.hasArray());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals("8[L`7~$", charBuffer0.toString());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(7, charBuffer0.limit());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(7, charBuffer0.remaining());
      assertEquals(7, charBuffer0.capacity());
      assertFalse(charBuffer0.isDirect());
      assertNotNull(charBuffer0);
      assertEquals(7, charArray0.length);
      
      boolean boolean0 = StringUtils.equalsAnyIgnoreCase("#", charSequenceArray0);
      assertFalse(boolean0);
      assertEquals(6, charSequenceArray0.length);
      
      // Undeclared exception!
      try { 
        CharBuffer.wrap(charArray0, 0, (-32768));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test432()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      String string0 = StringUtils.join((Object[]) charSequenceArray0, 'n');
      assertEquals("", string0);
      assertNotNull(string0);
      assertEquals(1, charSequenceArray0.length);
      
      String string1 = "F:]4oQ_s0\\p=x+y";
      // Undeclared exception!
      try { 
        StringUtils.replacePattern("F:]4oQ_s0p=x+y", ",?j;)2C|:EN5FkD]]", "F:]4oQ_s0p=x+y");
        fail("Expecting exception: PatternSyntaxException");
      
      } catch(PatternSyntaxException e) {
         //
         // Unmatched closing ')' near index 3
         // ,?j;)2C|:EN5FkD]]
         //    ^
         //
         verifyException("java.util.regex.Pattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test433()  throws Throwable  {
      String[] stringArray0 = new String[13];
      stringArray0[0] = "{}";
      stringArray0[1] = "";
      String string0 = StringUtils.remove("{}", (String) null);
      assertEquals("{}", string0);
      assertNotNull(string0);
      
      String[] stringArray1 = StringUtils.splitPreserveAllTokens("{}");
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(1, stringArray1.length);
      
      String string1 = StringUtils.stripAccents("VbdGVbdG");
      assertEquals("VbdGVbdG", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.endsWithAny("VbdG...", stringArray1);
      assertFalse(boolean0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray1, stringArray0);
      assertEquals(1, stringArray1.length);
  }

  @Test(timeout = 4000)
  public void test434()  throws Throwable  {
      boolean boolean0 = StringUtils.endsWithIgnoreCase((CharSequence) null, (CharSequence) null);
      assertTrue(boolean0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Locale locale0 = Locale.US;
      assertEquals("en_US", locale0.toString());
      assertEquals("US", locale0.getCountry());
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale0.getISO3Language());
      assertNotNull(locale0);
      
      String string0 = StringUtils.trimToEmpty("', is neither of type Map.Entry nor an Array");
      assertEquals("', is neither of type Map.Entry nor an Array", string0);
      assertNotNull(string0);
      
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      assertFalse(set0.contains(string0));
      assertEquals("en_US", locale0.toString());
      assertEquals("US", locale0.getCountry());
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertNotNull(set0);
      
      String string1 = StringUtils.stripAccents("', is neither of type Map.Entry nor an Array");
      assertEquals("', is neither of type Map.Entry nor an Array", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      int int0 = StringUtils.getFuzzyDistance("', is neither of type Map.Entry nor an Array", "', is neither of type Map.Entry nor an Array", locale0);
      assertEquals(130, int0);
      assertEquals("en_US", locale0.toString());
      assertEquals("US", locale0.getCountry());
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale0.getISO3Language());
  }

  @Test(timeout = 4000)
  public void test435()  throws Throwable  {
      String string0 = StringUtils.deleteWhitespace("_");
      assertEquals("_", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.countMatches((CharSequence) "_", 'v');
      assertEquals(0, int0);
      
      String string1 = StringUtils.truncate("wO", 12, 0);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "", "");
      assertTrue(boolean0);
      
      int int1 = StringUtils.getLevenshteinDistance((CharSequence) "wO", (CharSequence) "_", 0);
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      
      String string2 = StringUtils.substringAfter("Y?|SbAC1$tq?n|9", "");
      assertEquals("Y?|SbAC1$tq?n|9", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      String string3 = StringUtils.remove("Y?|SbAC1$tq?n|9", 'v');
      assertEquals("Y?|SbAC1$tq?n|9", string3);
      assertFalse(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
  }

  @Test(timeout = 4000)
  public void test436()  throws Throwable  {
      String string0 = StringUtils.substringAfter("[D/.5Q]{sGZM2sH<] in an array of ", "!");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.trimToNull("");
      assertNull(string1);
      
      String[] stringArray0 = StringUtils.splitByCharacterType((String) null);
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test437()  throws Throwable  {
      String string0 = StringUtils.substringAfter("[D/.5Q]{sGZM2sH<] in an array of ", "!");
      assertEquals("", string0);
      assertNotNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[0] = (CharSequence) "!";
      charSequenceArray0[1] = (CharSequence) "!";
      int int0 = StringUtils.indexOfAny((CharSequence) "", charSequenceArray0);
      assertEquals((-1), int0);
      assertEquals(2, charSequenceArray0.length);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("o9*`", "o9*`", 124);
      assertNotNull(stringArray0);
      assertEquals(5, stringArray0.length);
      
      String string1 = StringUtils.stripAccents("bdGu");
      assertEquals("bdGu", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-41);
      byteArray0[1] = (byte)77;
      byteArray0[2] = (byte)37;
      String string2 = StringUtils.join(byteArray0, '6');
      assertArrayEquals(new byte[] {(byte) (-41), (byte)77, (byte)37}, byteArray0);
      assertEquals("-41677637", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals(3, byteArray0.length);
      
      int int1 = StringUtils.getLevenshteinDistance((CharSequence) "bdGu", (CharSequence) "[D/.5Q]{sGZM2sH<] in an array of ");
      assertEquals(32, int1);
      assertFalse(int1 == int0);
      
      String string3 = StringUtils.unwrap("bdGu", '0');
      assertEquals("bdGu", string3);
      assertFalse(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      
      int int2 = StringUtils.indexOfAny((CharSequence) "", (CharSequence[]) stringArray0);
      assertEquals(0, int2);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(5, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test438()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      charSequenceArray0[0] = (CharSequence) "8c>!) u,eei!\"I2yC-U";
      String[] stringArray0 = StringUtils.split("R]?zLV2E:hPtUOQ", "8c>!) u,eei!\"I2yC-U");
      assertNotNull(stringArray0);
      assertEquals(3, stringArray0.length);
      
      int int0 = StringUtils.countMatches(charSequenceArray0[0], (CharSequence) "R]?zLV2E:hPtUOQ");
      assertEquals(0, int0);
      assertEquals(3, charSequenceArray0.length);
      
      String string0 = StringUtils.leftPad("9.0B-1544.8462591634B260.407894913129B1049.0B4.0B-296.12499.0B-1544.8462591634B260.407894913129B1049.0B4.0B-296.1249", 12, "7oj$8l^>,kp!");
      assertEquals("9.0B-1544.8462591634B260.407894913129B1049.0B4.0B-296.12499.0B-1544.8462591634B260.407894913129B1049.0B4.0B-296.1249", string0);
      assertNotNull(string0);
      
      int int1 = StringUtils.indexOf(charSequenceArray0[0], (-2), 0);
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      assertEquals(3, charSequenceArray0.length);
      
      boolean boolean0 = StringUtils.startsWithAny(charSequenceArray0[0], charSequenceArray0);
      assertTrue(boolean0);
      assertEquals(3, charSequenceArray0.length);
      
      String string1 = StringUtils.abbreviate("*{SR\"`K0", "R]?zLV2E:hPtUOQ", 4108);
      assertEquals("*{SR\"`K0", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test439()  throws Throwable  {
      String[] stringArray0 = new String[0];
      String string0 = StringUtils.getCommonPrefix(stringArray0);
      assertEquals("", string0);
      assertNotNull(string0);
      assertEquals(0, stringArray0.length);
      
      boolean[] booleanArray0 = new boolean[16];
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      int int0 = StringUtils.indexOfAny((CharSequence) "", (CharSequence[]) stringArray0);
      assertEquals((-1), int0);
      assertEquals(0, stringArray0.length);
      
      int int1 = StringUtils.countMatches((CharSequence) "", 'A');
      assertEquals(0, int1);
      assertFalse(int1 == int0);
      
      PriorityQueue<String> priorityQueue0 = new PriorityQueue<String>((Comparator<? super String>) null);
      assertFalse(priorityQueue0.contains(""));
      assertEquals(0, priorityQueue0.size());
      assertNotNull(priorityQueue0);
      
      ArrayList<String> arrayList0 = new ArrayList<String>(priorityQueue0);
      assertFalse(priorityQueue0.contains(""));
      assertFalse(arrayList0.contains(""));
      assertEquals(0, priorityQueue0.size());
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
  }

  @Test(timeout = 4000)
  public void test440()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      String string0 = StringUtils.getDigits("");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.strip("", "[ R4Pk;9");
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens((String) null);
      assertNull(stringArray0);
      
      String string2 = StringUtils.substringAfter("[ R4Pk;9", (String) null);
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertNotNull(string2);
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'c';
      charArray0[1] = 'c';
      int int0 = StringUtils.indexOfAny((CharSequence) "", charArray0);
      assertArrayEquals(new char[] {'c', 'c'}, charArray0);
      assertEquals((-1), int0);
      assertEquals(2, charArray0.length);
      
      String[] stringArray1 = StringUtils.substringsBetween((String) null, ":sj5iB", "WnD#jY8@");
      assertNull(stringArray1);
  }

  @Test(timeout = 4000)
  public void test441()  throws Throwable  {
      String string0 = StringUtils.substringAfter("[D/.5Q]{sGZM2sH<] in an array of ", "!");
      assertEquals("", string0);
      assertNotNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[0] = (CharSequence) "!";
      charSequenceArray0[1] = (CharSequence) "!";
      int int0 = StringUtils.indexOfAny((CharSequence) "", charSequenceArray0);
      assertEquals((-1), int0);
      assertEquals(2, charSequenceArray0.length);
      
      String[] stringArray0 = StringUtils.split("");
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      
      String[] stringArray1 = StringUtils.split("[D/.5Q]{sGZM2sH<] in an array of ", "F.BHclWk~wl!q=U$~");
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(3, stringArray1.length);
      
      int int1 = StringUtils.countMatches((CharSequence) "!", charSequenceArray0[0]);
      assertEquals(1, int1);
      assertFalse(int1 == int0);
      assertEquals(2, charSequenceArray0.length);
      
      boolean boolean0 = StringUtils.isNumeric("[D/.5Q]{sGZM2sH<] in an array of ");
      assertFalse(boolean0);
      
      String string1 = StringUtils.replaceAll("A", ".vJUO`HXV;lj1-;", "org.apache.commons.lang3.ObjectUtils");
      assertEquals("A", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.substringBetween("{oU+b}m>[]`&C", (String) null);
      assertNull(string2);
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertFalse(linkedList0.contains("{oU+b}m>[]`&C"));
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Iterator<Object> iterator0 = linkedList0.iterator();
      assertFalse(linkedList0.contains("{oU+b}m>[]`&C"));
      assertEquals(0, linkedList0.size());
      assertNotNull(iterator0);
      
      String string3 = StringUtils.join(iterator0, "Threshold must not be negative");
      assertFalse(linkedList0.contains("Threshold must not be negative"));
      assertEquals("", string3);
      assertEquals(0, linkedList0.size());
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      
      String string4 = StringUtils.repeat("org.apache.commons.lang3.ObjectUtils", "The String must not be empty", 70);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertNotNull(string4);
      
      String[] stringArray2 = StringUtils.splitByWholeSeparatorPreserveAllTokens(", '", "A");
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertFalse(stringArray2.equals((Object)stringArray1));
      assertNotNull(stringArray2);
      assertNotSame(stringArray2, stringArray0);
      assertNotSame(stringArray2, stringArray1);
      assertEquals(1, stringArray2.length);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)90;
      byteArray0[1] = (byte)13;
      byteArray0[2] = (byte)43;
      byteArray0[3] = (byte)1;
      byteArray0[4] = (byte)64;
      byteArray0[5] = (byte)127;
      byteArray0[6] = (byte)2;
      byteArray0[7] = (byte)11;
      // Undeclared exception!
      try { 
        Charset.forName((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null charset name
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test442()  throws Throwable  {
      String string0 = StringUtils.removeAll(" ", " ");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.swapCase("");
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.replaceFirst("u", "D", (String) null);
      assertEquals("u", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("", (String) null, 76);
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      
      String[] stringArray1 = StringUtils.substringsBetween("u/Ts.:", (String) null, "");
      assertNull(stringArray1);
  }

  @Test(timeout = 4000)
  public void test443()  throws Throwable  {
      String string0 = StringUtils.stripToEmpty("G^7|+zFpb:oK?5");
      assertEquals("G^7|+zFpb:oK?5", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.abbreviate("Minimum abbreviation width with offset is %d", "G^7|+zFpb:oK?5", 4, 52);
      assertEquals("Minimum abbreviation width with offset is %d", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      char[] charArray0 = new char[2];
      charArray0[0] = '&';
      charArray0[1] = 'r';
      int int0 = StringUtils.indexOfAny((CharSequence) "Minimum abbreviation width with offset is %d", charArray0);
      assertArrayEquals(new char[] {'&', 'r'}, charArray0);
      assertEquals(11, int0);
      assertEquals(2, charArray0.length);
      
      String string2 = StringUtils.normalizeSpace("G^7|+zFpb:oK?5");
      assertEquals("G^7|+zFpb:oK?5", string2);
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) 'r';
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[1] = object0;
      objectArray0[2] = (Object) '&';
      objectArray0[3] = (Object) "Minimum abbreviation width with offset is %d";
      String string3 = StringUtils.join(objectArray0, ")QV6mP/+kjIR-", 52, 7);
      assertEquals("", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      assertEquals(4, objectArray0.length);
      
      boolean boolean0 = StringUtils.endsWithIgnoreCase("", "G^7|+zFpb:oK?5");
      assertFalse(boolean0);
      
      int int1 = StringUtils.lastOrdinalIndexOf("Minimum abbreviation width with offset is %d", "", 10);
      assertEquals(44, int1);
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test444()  throws Throwable  {
      Object[] objectArray0 = new Object[7];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      objectArray0[1] = object1;
      Object object2 = new Object();
      assertFalse(object2.equals((Object)object0));
      assertFalse(object2.equals((Object)object1));
      assertNotNull(object2);
      
      objectArray0[2] = object2;
      Object object3 = new Object();
      assertFalse(object3.equals((Object)object2));
      assertFalse(object3.equals((Object)object1));
      assertFalse(object3.equals((Object)object0));
      assertNotNull(object3);
      
      objectArray0[3] = object3;
      Object object4 = new Object();
      assertFalse(object4.equals((Object)object3));
      assertFalse(object4.equals((Object)object1));
      assertFalse(object4.equals((Object)object2));
      assertFalse(object4.equals((Object)object0));
      assertNotNull(object4);
      
      objectArray0[4] = object4;
      Object object5 = new Object();
      assertFalse(object5.equals((Object)object1));
      assertFalse(object5.equals((Object)object2));
      assertFalse(object5.equals((Object)object0));
      assertFalse(object5.equals((Object)object4));
      assertFalse(object5.equals((Object)object3));
      assertNotNull(object5);
      
      objectArray0[5] = object5;
      Object object6 = new Object();
      assertFalse(object6.equals((Object)object4));
      assertFalse(object6.equals((Object)object3));
      assertFalse(object6.equals((Object)object0));
      assertFalse(object6.equals((Object)object1));
      assertFalse(object6.equals((Object)object5));
      assertFalse(object6.equals((Object)object2));
      assertNotNull(object6);
      
      objectArray0[6] = object6;
      String string0 = StringUtils.replaceChars("}yrRfNpTa/@3(+m", "Array element ", "Ar|l");
      assertEquals("}rRfNpTl/@3(+", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.difference("A", "Array element ");
      assertEquals("rray element ", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test445()  throws Throwable  {
      String string0 = StringUtils.replaceChars("/,/AwR{8;A_]f;L&", "Y)3n1`2_97u G#5v_Y)3n1`2_97u G#5v_Y)3n1`2_97u G#5v_Y)3n1`2_97u G#5v__", "Minimum abbreviation width with offset is %d");
      assertEquals("/,/AwR{8;A ]f;L&", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.trimToEmpty("^`e88R4hH+E\"&T>m");
      assertEquals("^`e88R4hH+E\"&T>m", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      int[] intArray0 = StringUtils.toCodePoints("/,/AwR{8;A_]f;L&");
      assertNotNull(intArray0);
      assertEquals(16, intArray0.length);
      
      String string2 = StringUtils.left("-$cGKk.", 301);
      assertEquals("-$cGKk.", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      String string3 = StringUtils.trimToEmpty("E;7[$3y5:k");
      assertEquals("E;7[$3y5:k", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      
      String string4 = "hovt~Q+\"Ra7";
      String string5 = StringUtils.join((Iterable<?>) null, "hovt~Q+\"Ra7");
      assertNull(string5);
      
      String string6 = StringUtils.substringAfterLast("clone", "org.apache.commons.lang3.ObjectUtils");
      assertEquals("", string6);
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string0));
      assertNotNull(string6);
      
      String string7 = StringUtils.truncate("clone", 301, 213);
      assertEquals("", string7);
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string2));
      assertNotNull(string7);
      
      CharBuffer[] charBufferArray0 = new CharBuffer[6];
      int int0 = (-1500);
      // Undeclared exception!
      try { 
        CharBuffer.wrap((CharSequence) "org.apache.commons.lang3.ObjectUtils", (-4299), (-1500));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test446()  throws Throwable  {
      String string0 = StringUtils.substring("bjX'A", 1301);
      assertEquals("", string0);
      assertNotNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[7];
      charSequenceArray0[1] = (CharSequence) "";
      charSequenceArray0[4] = (CharSequence) "bjX'A";
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      PriorityQueue<String> priorityQueue0 = new PriorityQueue<String>(comparator0);
      assertFalse(priorityQueue0.contains("bjX'A"));
      assertEquals(0, priorityQueue0.size());
      assertNotNull(priorityQueue0);
      
      Vector<Locale.LanguageRange> vector0 = new Vector<Locale.LanguageRange>();
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertNotNull(vector0);
      
      String string1 = StringUtils.join((Iterable<?>) priorityQueue0, "bjX'A");
      assertFalse(priorityQueue0.contains(string1));
      assertEquals("", string1);
      assertEquals(0, priorityQueue0.size());
      assertNotNull(string1);
      
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) 1301;
      floatArray0[1] = (float) 1301;
      floatArray0[2] = (float) 1301;
      floatArray0[3] = (float) 1301;
      floatArray0[4] = (float) 1301;
      floatArray0[5] = (float) 1301;
      floatArray0[6] = (float) 1301;
      floatArray0[7] = (float) 1301;
      floatArray0[8] = (float) 1301;
      String string2 = StringUtils.join(floatArray0, ':', 1301, 1301);
      assertArrayEquals(new float[] {1301.0F, 1301.0F, 1301.0F, 1301.0F, 1301.0F, 1301.0F, 1301.0F, 1301.0F, 1301.0F}, floatArray0, 0.01F);
      assertEquals("", string2);
      assertNotNull(string2);
      assertEquals(9, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test447()  throws Throwable  {
      boolean boolean0 = StringUtils.isNumeric("F1~Sp}mS5");
      assertFalse(boolean0);
      
      String[] stringArray0 = new String[5];
      stringArray0[0] = "";
      stringArray0[1] = ",ZBZD/YePMWJ[eT0K";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "";
      String[] stringArray1 = StringUtils.stripAll(stringArray0, "AM[om");
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(5, stringArray0.length);
      assertEquals(5, stringArray1.length);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)38;
      byteArray0[1] = (byte)2;
      Charset charset0 = Charset.defaultCharset();
      assertEquals("UTF-8", charset0.toString());
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      assertNotNull(charset0);
      
      Set<String> set0 = charset0.aliases();
      assertFalse(set0.contains(",ZBZD/YePMWJ[eT0K"));
      assertEquals("UTF-8", charset0.toString());
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      assertFalse(set0.isEmpty());
      assertEquals(2, set0.size());
      assertNotNull(set0);
      
      String string0 = StringUtils.toEncodedString(byteArray0, charset0);
      assertArrayEquals(new byte[] {(byte)38, (byte)2}, byteArray0);
      assertEquals("&\u0002", string0);
      assertEquals("UTF-8", charset0.toString());
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      assertNotNull(string0);
      assertEquals(2, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test448()  throws Throwable  {
      String string0 = StringUtils.upperCase("Strings must not be null");
      assertEquals("STRINGS MUST NOT BE NULL", string0);
      assertNotNull(string0);
      
      Charset charset0 = Charset.defaultCharset();
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.displayName());
      assertNotNull(charset0);
      
      Set<String> set0 = charset0.aliases();
      assertFalse(set0.contains("Strings must not be null"));
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.displayName());
      assertFalse(set0.isEmpty());
      assertEquals(2, set0.size());
      assertNotNull(set0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)38;
      byteArray0[1] = (byte)2;
      String string1 = StringUtils.toEncodedString(byteArray0, charset0);
      assertArrayEquals(new byte[] {(byte)38, (byte)2}, byteArray0);
      assertEquals("&\u0002", string1);
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.displayName());
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(2, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test449()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      String string0 = StringUtils.mid("The character ", 0, 0);
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.removeEnd("3^Vg')<ym<", "3^Vg')<ym<");
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.abbreviate("", "org.apache.commons.lang3.ObjectUtils", 98);
      assertEquals("", string2);
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test450()  throws Throwable  {
      String string0 = StringUtils.upperCase("Strings must not be null");
      assertEquals("STRINGS MUST NOT BE NULL", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.mid("", 0, 0);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.stripStart("", "STRINGS MUST NOT BE NULL");
      assertEquals("", string2);
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      // Undeclared exception!
      try { 
        StringUtils.abbreviate("R7til/'L", ".vJUO`HXV;lj1-;", 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum abbreviation width is 16
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test451()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      boolean boolean0 = StringUtils.isWhitespace("@");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test452()  throws Throwable  {
      String string0 = StringUtils.normalizeSpace(">m9.`");
      assertEquals(">m9.`", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOfAny((CharSequence) ">m9.`", ">m9.`");
      assertEquals(0, int0);
      
      String string1 = StringUtils.substringBefore(">m9.`", 16);
      assertEquals(">m9.`", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.removeStartIgnoreCase("Array element ", ">m9.`");
      assertEquals("Array element ", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      String string3 = StringUtils.stripToNull(">m9.`");
      assertEquals(">m9.`", string3);
      assertTrue(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[0] = (CharSequence) "Array element ";
      charSequenceArray0[1] = (CharSequence) ">m9.`";
      boolean boolean0 = StringUtils.isNoneEmpty(charSequenceArray0);
      assertTrue(boolean0);
      assertEquals(2, charSequenceArray0.length);
  }

  @Test(timeout = 4000)
  public void test453()  throws Throwable  {
      String string0 = StringUtils.rightPad("#", 0, "F1~Sp}mS5");
      assertEquals("#", string0);
      assertNotNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[8];
      charSequenceArray0[0] = (CharSequence) "#";
      String string1 = StringUtils.deleteWhitespace("F1~Sp}mS5");
      assertEquals("F1~Sp}mS5", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.isAlphanumeric("F1~Sp}mS5");
      assertFalse(boolean0);
      
      String string2 = StringUtils.deleteWhitespace("#");
      assertEquals("#", string2);
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertNotNull(string2);
      
      boolean boolean1 = StringUtils.containsAny((CharSequence) "w{>bJ\"W}#f&", charSequenceArray0);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      assertEquals(8, charSequenceArray0.length);
      
      String string3 = StringUtils.deleteWhitespace("#");
      assertEquals("#", string3);
      assertTrue(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string0));
      assertNotNull(string3);
      
      String string4 = StringUtils.replaceFirst("#", "F1~Sp}mS5", "");
      assertEquals("#", string4);
      assertFalse(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string3));
      assertNotNull(string4);
      
      boolean boolean2 = StringUtils.isNumeric(charSequenceArray0[0]);
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertEquals(8, charSequenceArray0.length);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "F1~Sp}mS5";
      String[] stringArray1 = StringUtils.stripAll(stringArray0, "Arguments cannot both be null");
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(1, stringArray0.length);
      assertEquals(1, stringArray1.length);
      
      boolean boolean3 = StringUtils.isAlpha(charSequenceArray0[0]);
      assertFalse(boolean3);
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertEquals(8, charSequenceArray0.length);
      
      boolean boolean4 = StringUtils.isNoneEmpty(stringArray0);
      assertTrue(boolean4);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertFalse(boolean4 == boolean2);
      assertFalse(boolean4 == boolean3);
      assertFalse(boolean4 == boolean0);
      assertTrue(boolean4 == boolean1);
      assertNotSame(stringArray0, stringArray1);
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test454()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      int int0 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      charSequenceArray0[0] = (CharSequence) "";
      String string0 = StringUtils.prependIfMissing("g;pXh;Xe2-,=S,otc", "\n", charSequenceArray0);
      assertEquals("g;pXh;Xe2-,=S,otc", string0);
      assertNotNull(string0);
      assertEquals(1, charSequenceArray0.length);
      
      String string1 = StringUtils.repeat((String) null, "org.apache.commons.lang3.ArrayUtils", (-172));
      assertNull(string1);
  }

  @Test(timeout = 4000)
  public void test455()  throws Throwable  {
      String string0 = StringUtils.upperCase("Strings must not be null");
      assertEquals("STRINGS MUST NOT BE NULL", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.deleteWhitespace("Dh<PG9l");
      assertEquals("Dh<PG9l", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.isAllUpperCase("Dh<PG9l");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isNotEmpty("Dh<PG9l");
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      String string2 = StringUtils.wrap("Dh<PG9l", (String) null);
      assertEquals("Dh<PG9l", string2);
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      CharSequence[] charSequenceArray0 = new CharSequence[9];
      charSequenceArray0[0] = (CharSequence) "Dh<PG9l";
      String string3 = StringUtils.trimToEmpty("Dh<PG9l");
      assertEquals("Dh<PG9l", string3);
      assertTrue(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      
      charSequenceArray0[1] = (CharSequence) "Dh<PG9l";
      charSequenceArray0[2] = (CharSequence) "";
      charSequenceArray0[3] = (CharSequence) "STRINGS MUST NOT BE NULL";
      charSequenceArray0[4] = (CharSequence) "Dh<PG9l";
      charSequenceArray0[5] = (CharSequence) "Dh<PG9l";
      charSequenceArray0[6] = (CharSequence) "";
      charSequenceArray0[7] = (CharSequence) "Dh<PG9l";
      charSequenceArray0[8] = (CharSequence) "STRINGS MUST NOT BE NULL";
      String string4 = StringUtils.prependIfMissing("%mx#n}c>kY:l+T;k~", "Strings must not be null", charSequenceArray0);
      assertEquals("%mx#n}c>kY:l+T;k~", string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertNotNull(string4);
      assertEquals(9, charSequenceArray0.length);
  }

  @Test(timeout = 4000)
  public void test456()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      charSequenceArray0[0] = (CharSequence) "0FO5}hhQ5YS+G9";
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      int int0 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      String string0 = StringUtils.prependIfMissing("#ax&EK7nJTA(Oe;l zJ", "\r", charSequenceArray0);
      assertEquals("\r#ax&EK7nJTA(Oe;l zJ", string0);
      assertNotNull(string0);
      assertEquals(3, charSequenceArray0.length);
      
      String string1 = StringUtils.repeat("org.apache.commons.lang3.ArrayUtils", "#ax&EK7nJTA(Oe;l zJ", 0);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test457()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = '}';
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "Array element ", charArray0);
      assertArrayEquals(new char[] {'}'}, charArray0);
      assertFalse(boolean0);
      assertEquals(1, charArray0.length);
      
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      assertFalse(arrayList0.contains("Array element "));
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      String string0 = StringUtils.join((List<?>) arrayList0, '6', 1018, (int) '}');
      assertFalse(arrayList0.contains("Array element "));
      assertEquals("", string0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(string0);
      
      int int0 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      String[] stringArray0 = new String[0];
      String string1 = StringUtils.firstNonEmpty(stringArray0);
      assertNull(string1);
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test458()  throws Throwable  {
      String string0 = StringUtils.deleteWhitespace("8c>!) u,eei!\"I2yC-U");
      assertEquals("8c>!)u,eei!\"I2yC-U", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.countMatches((CharSequence) "8c>!)u,eei!\"I2yC-U", 'v');
      assertEquals(0, int0);
      
      int int1 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      
      boolean boolean0 = StringUtils.isNumeric("8c>!) u,eei!\"I2yC-U");
      assertFalse(boolean0);
      
      String string1 = StringUtils.unwrap("8c>!)u,eei!\"I2yC-U", 'v');
      assertEquals("8c>!)u,eei!\"I2yC-U", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      boolean boolean1 = StringUtils.isAlphanumeric("8c>!)u,eei!\"I2yC-U");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String string2 = StringUtils.deleteWhitespace("Erq5O9?k#;Ye6");
      assertEquals("Erq5O9?k#;Ye6", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      charSequenceArray0[0] = (CharSequence) "8c>!)u,eei!\"I2yC-U";
      boolean boolean2 = StringUtils.startsWith("Erq5O9?k#;Ye6", "Erq5O9?k#;Ye6");
      assertTrue(boolean2);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      
      String[] stringArray0 = new String[0];
      String string3 = StringUtils.firstNonEmpty(stringArray0);
      assertNull(string3);
      assertEquals(0, stringArray0.length);
      
      String string4 = StringUtils.chop("Lk\"K");
      assertEquals("Lk\"", string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertNotNull(string4);
      
      String string5 = StringUtils.replaceIgnoreCase(")n", "bdG", ">f)WoNt-G");
      assertEquals(")n", string5);
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertNotNull(string5);
  }

  @Test(timeout = 4000)
  public void test459()  throws Throwable  {
      String string0 = StringUtils.removeAll("m", "m");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.deleteWhitespace("\r");
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.replaceFirst("u", "\r", (String) null);
      assertEquals("u", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      String string3 = StringUtils.LF;
      assertEquals("\n", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      
      boolean boolean0 = StringUtils.containsAny((CharSequence) "u", (char[]) null);
      assertFalse(boolean0);
      
      String string4 = StringUtils.uncapitalize("");
      assertEquals("", string4);
      assertFalse(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string1));
      assertNotNull(string4);
  }

  @Test(timeout = 4000)
  public void test460()  throws Throwable  {
      boolean boolean0 = StringUtils.endsWithIgnoreCase((CharSequence) null, (CharSequence) null);
      assertTrue(boolean0);
      
      Object[] objectArray0 = new Object[6];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      objectArray0[1] = (Object) null;
      Locale locale0 = Locale.US;
      assertEquals("en", locale0.getLanguage());
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en_US", locale0.toString());
      assertEquals("US", locale0.getCountry());
      assertNotNull(locale0);
      
      Locale locale1 = locale0.stripExtensions();
      assertEquals("en", locale0.getLanguage());
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en_US", locale0.toString());
      assertEquals("US", locale0.getCountry());
      assertEquals("eng", locale1.getISO3Language());
      assertEquals("en_US", locale1.toString());
      assertEquals("USA", locale1.getISO3Country());
      assertEquals("en", locale1.getLanguage());
      assertEquals("", locale1.getVariant());
      assertEquals("US", locale1.getCountry());
      assertNotNull(locale1);
      assertSame(locale0, locale1);
      assertSame(locale1, locale0);
      
      String string0 = StringUtils.upperCase("', is neither of type Map.Entry nor an Array", locale1);
      assertEquals("', IS NEITHER OF TYPE MAP.ENTRY NOR AN ARRAY", string0);
      assertEquals("en", locale0.getLanguage());
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en_US", locale0.toString());
      assertEquals("US", locale0.getCountry());
      assertEquals("eng", locale1.getISO3Language());
      assertEquals("en_US", locale1.toString());
      assertEquals("USA", locale1.getISO3Country());
      assertEquals("en", locale1.getLanguage());
      assertEquals("", locale1.getVariant());
      assertEquals("US", locale1.getCountry());
      assertNotNull(string0);
      assertSame(locale0, locale1);
      assertSame(locale1, locale0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[8];
      charSequenceArray0[0] = null;
      charSequenceArray0[1] = (CharSequence) "', is neither of type Map.Entry nor an Array";
      String string1 = StringUtils.stripToNull("', IS NEITHER OF TYPE MAP.ENTRY NOR AN ARRAY");
      assertEquals("', IS NEITHER OF TYPE MAP.ENTRY NOR AN ARRAY", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      boolean boolean1 = StringUtils.isNumeric("', IS NEITHER OF TYPE MAP.ENTRY NOR AN ARRAY");
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      // Undeclared exception!
      try { 
        StringUtils.getFuzzyDistance(charSequenceArray0[1], (CharSequence) null, locale1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test461()  throws Throwable  {
      String string0 = StringUtils.deleteWhitespace("8c>!) u,eei!\"I2yC-U");
      assertEquals("8c>!)u,eei!\"I2yC-U", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.countMatches((CharSequence) "8c>!)u,eei!\"I2yC-U", 'v');
      assertEquals(0, int0);
      
      int int1 = StringUtils.indexOfAny((CharSequence) "8c>!) u,eei!\"I2yC-U", "");
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      
      boolean boolean0 = StringUtils.isNumeric("8c>!) u,eei!\"I2yC-U");
      assertFalse(boolean0);
      
      String string1 = StringUtils.unwrap("8c>!)u,eei!\"I2yC-U", 'v');
      assertEquals("8c>!)u,eei!\"I2yC-U", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      boolean boolean1 = StringUtils.isAlphanumeric("8c>!)u,eei!\"I2yC-U");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String string2 = StringUtils.deleteWhitespace("Erq5O9?k#;Ye6");
      assertEquals("Erq5O9?k#;Ye6", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      charSequenceArray0[0] = (CharSequence) "8c>!)u,eei!\"I2yC-U";
      boolean boolean2 = StringUtils.startsWith("Erq5O9?k#;Ye6", "Erq5O9?k#;Ye6");
      assertTrue(boolean2);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      
      String string3 = StringUtils.deleteWhitespace("");
      assertEquals("", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      
      String string4 = StringUtils.replaceFirst("", "ndw;N4II}~L.*/.fO70", (String) null);
      assertEquals("", string4);
      assertTrue(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertNotNull(string4);
      
      String string5 = StringUtils.LF;
      assertEquals("\n", string5);
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertNotNull(string5);
      
      boolean boolean3 = StringUtils.isNumeric("\n");
      assertFalse(boolean3);
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      
      String[] stringArray0 = StringUtils.stripAll((String[]) null, (String) null);
      assertNull(stringArray0);
      
      // Undeclared exception!
      try { 
        StringUtils.getFuzzyDistance("8c>!)u,eei!\"I2yC-U", "8c>!)u,eei!\"I2yC-U", (Locale) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Locale must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test462()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      String string0 = StringUtils.join(objectArray0, '_', 49, (-806));
      assertEquals("", string0);
      assertNotNull(string0);
      assertEquals(0, objectArray0.length);
      
      String string1 = StringUtils.capitalize(")fcLfq1");
      assertEquals(")fcLfq1", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      PriorityQueue<Integer> priorityQueue0 = new PriorityQueue<Integer>();
      assertFalse(priorityQueue0.contains(49));
      assertEquals(0, priorityQueue0.size());
      assertNotNull(priorityQueue0);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "", (CharSequence) "", 606);
      assertEquals(0, int0);
      
      String string2 = StringUtils.substringAfter("l(c\"B4`q5AeDf\"5{", "-zx");
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      String string3 = StringUtils.remove("", 'w');
      assertEquals("", string3);
      assertTrue(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      charSequenceArray0[0] = (CharSequence) "...";
      charSequenceArray0[1] = (CharSequence) "";
      charSequenceArray0[2] = (CharSequence) ")fcLfq1";
      boolean boolean0 = StringUtils.isAllEmpty(charSequenceArray0);
      assertFalse(boolean0);
      assertEquals(3, charSequenceArray0.length);
  }

  @Test(timeout = 4000)
  public void test463()  throws Throwable  {
      String string0 = StringUtils.SPACE;
      assertEquals(" ", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.removeStart(" ", " ");
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.substringBeforeLast(")%", " ");
      assertEquals(")%", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      String string3 = StringUtils.rightPad("bdGMinimum abbreviation width is %d", (-141), 'K');
      assertEquals("bdGMinimum abbreviation width is %d", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      
      String string4 = StringUtils.unwrap("bdGMinimum abbreviation width is %d", " ");
      assertEquals("bdGMinimum abbreviation width is %d", string4);
      assertTrue(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertNotNull(string4);
      
      int int0 = StringUtils.indexOfDifference((CharSequence) "U'i{GNK", (CharSequence) "U'i{GNK");
      assertEquals((-1), int0);
      
      String[] stringArray0 = StringUtils.splitByCharacterType("?x/2g~E1qqpt_(>");
      assertNotNull(stringArray0);
      assertEquals(13, stringArray0.length);
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'K';
      charArray0[1] = 'K';
      charArray0[2] = 'K';
      charArray0[3] = 'K';
      boolean boolean0 = StringUtils.containsNone((CharSequence) "U'i{GNK", charArray0);
      assertArrayEquals(new char[] {'K', 'K', 'K', 'K'}, charArray0);
      assertFalse(boolean0);
      assertEquals(4, charArray0.length);
      
      String string5 = StringUtils.EMPTY;
      assertEquals("", string5);
      assertTrue(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertNotNull(string5);
      
      boolean boolean1 = StringUtils.isNumeric("");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String string6 = StringUtils.join((int[]) null, '0', (-1), 2);
      assertNull(string6);
  }

  @Test(timeout = 4000)
  public void test464()  throws Throwable  {
      int[] intArray0 = new int[1];
      String string0 = StringUtils.join(intArray0, '{', 1924, 1924);
      assertArrayEquals(new int[] {0}, intArray0);
      assertEquals("", string0);
      assertNotNull(string0);
      assertEquals(1, intArray0.length);
      
      int int0 = StringUtils.indexOf((CharSequence) "", (CharSequence) "");
      assertEquals(0, int0);
      
      String string1 = StringUtils.substringAfterLast((String) null, 0);
      assertNull(string1);
  }

  @Test(timeout = 4000)
  public void test465()  throws Throwable  {
      String string0 = StringUtils.normalizeSpace(">m9.`");
      assertEquals(">m9.`", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOfAny((CharSequence) ">m9.`", ">m9.`");
      assertEquals(0, int0);
      
      String string1 = StringUtils.substringBefore(">m9.`", 16);
      assertEquals(">m9.`", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.removeStartIgnoreCase("Array element ", "7C_C8],{'+a{I");
      assertEquals("Array element ", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      String string3 = StringUtils.stripToNull(">m9.`");
      assertEquals(">m9.`", string3);
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string1));
      assertNotNull(string3);
      
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[0] = (CharSequence) ">m9.`";
      charSequenceArray0[1] = (CharSequence) ">m9.`";
      boolean boolean0 = StringUtils.containsAny((CharSequence) ">m9.`", charSequenceArray0);
      assertTrue(boolean0);
      assertEquals(2, charSequenceArray0.length);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)62;
      byteArray0[1] = (byte) (-56);
      boolean boolean1 = StringUtils.isNotEmpty(">m9.`");
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String string4 = StringUtils.removeStart("s", "maxWith cannot be negative");
      assertEquals("s", string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertNotNull(string4);
      
      int[] intArray0 = StringUtils.toCodePoints(">m9.`");
      assertArrayEquals(new int[] {62, 109, 57, 46, 96}, intArray0);
      assertNotNull(intArray0);
      assertEquals(5, intArray0.length);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("Array element ", "s");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      String string5 = StringUtils.wrapIfMissing("Array element ", "VbdG");
      assertEquals("VbdGArray element VbdG", string5);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertNotNull(string5);
      
      String string6 = StringUtils.remove("yLda", 'y');
      assertEquals("Lda", string6);
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string5));
      assertNotNull(string6);
      
      int[] intArray1 = StringUtils.toCodePoints(">m9.`");
      assertArrayEquals(new int[] {62, 109, 57, 46, 96}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(5, intArray1.length);
  }

  @Test(timeout = 4000)
  public void test466()  throws Throwable  {
      String string0 = StringUtils.substringAfter("ND5", "ND5");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.remove("org.apache.commons.lang3.CharSequenceUtils", ',');
      assertEquals("org.apache.commons.lang3.CharSequenceUtils", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test467()  throws Throwable  {
      int[] intArray0 = new int[1];
      // Undeclared exception!
      try { 
        StringUtils.join(intArray0, '?', 1, 155);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test468()  throws Throwable  {
      String string0 = StringUtils.upperCase("Strings must not be null");
      assertEquals("STRINGS MUST NOT BE NULL", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.deleteWhitespace("Dh<PG9l");
      assertEquals("Dh<PG9l", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.isAllUpperCase("Dh<PG9l");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isNotEmpty("Dh<PG9l");
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      char[] charArray0 = new char[3];
      charArray0[0] = '$';
      charArray0[1] = 'v';
      charArray0[2] = 'O';
      boolean boolean2 = StringUtils.containsNone((CharSequence) "Dh<PG9l", charArray0);
      assertArrayEquals(new char[] {'$', 'v', 'O'}, charArray0);
      assertTrue(boolean2);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertEquals(3, charArray0.length);
      
      boolean boolean3 = StringUtils.isAlphanumeric("Strings must not be null");
      assertFalse(boolean3);
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      charSequenceArray0[0] = (CharSequence) "Dh<PG9l";
      charSequenceArray0[1] = (CharSequence) "Dh<PG9l";
      charSequenceArray0[2] = (CharSequence) "Dh<PG9l";
      charSequenceArray0[3] = (CharSequence) "Dh<PG9l";
      boolean boolean4 = StringUtils.isNoneBlank(charSequenceArray0);
      assertTrue(boolean4);
      assertFalse(boolean4 == boolean3);
      assertTrue(boolean4 == boolean2);
      assertFalse(boolean4 == boolean0);
      assertTrue(boolean4 == boolean1);
      assertEquals(4, charSequenceArray0.length);
      
      String[] stringArray0 = StringUtils.stripAll((String[]) null, "WFHcmqb[,");
      assertNull(stringArray0);
      
      String string2 = StringUtils.remove("Dh<PG9l", '|');
      assertEquals("Dh<PG9l", string2);
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      int[] intArray0 = new int[9];
      intArray0[0] = (int) 'O';
      intArray0[1] = (int) '|';
      intArray0[2] = (int) '$';
      intArray0[3] = (int) '$';
      intArray0[4] = (int) 'v';
      intArray0[5] = (int) 'O';
      intArray0[6] = (int) '$';
      intArray0[7] = (int) 'v';
      intArray0[8] = (int) 'O';
      String string3 = StringUtils.join(intArray0, '$', 803, 64);
      assertArrayEquals(new int[] {79, 124, 36, 36, 118, 79, 36, 118, 79}, intArray0);
      assertEquals("", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      assertEquals(9, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test469()  throws Throwable  {
      String string0 = StringUtils.upperCase("Strings must not be null");
      assertEquals("STRINGS MUST NOT BE NULL", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.center((String) null, 707);
      assertNull(string1);
      
      String string2 = StringUtils.rotate((String) null, 125);
      assertNull(string2);
      
      CharSequence[] charSequenceArray0 = new CharSequence[9];
      charSequenceArray0[0] = (CharSequence) "STRINGS MUST NOT BE NULL";
      charSequenceArray0[1] = (CharSequence) "org.apache.commons.lang3.ArrayUtils";
      charSequenceArray0[2] = (CharSequence) "Dh<PG9l";
      charSequenceArray0[3] = (CharSequence) null;
      charSequenceArray0[4] = (CharSequence) "Dh<PG9l";
      charSequenceArray0[5] = (CharSequence) "Strings must not be null";
      charSequenceArray0[6] = (CharSequence) "STRINGS MUST NOT BE NULL";
      charSequenceArray0[7] = (CharSequence) null;
      charSequenceArray0[8] = (CharSequence) "STRINGS MUST NOT BE NULL";
      boolean boolean0 = StringUtils.equalsAny((CharSequence) null, charSequenceArray0);
      assertTrue(boolean0);
      assertEquals(9, charSequenceArray0.length);
      
      String string3 = StringUtils.removeStart("Array and element cannot both be nullorg.apache.commons.lang3.exception.CloneFailedException", (String) null);
      assertEquals("Array and element cannot both be nullorg.apache.commons.lang3.exception.CloneFailedException", string3);
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
  }

  @Test(timeout = 4000)
  public void test470()  throws Throwable  {
      String string0 = StringUtils.rightPad("#", 0, "F1~Sp}mS5");
      assertEquals("#", string0);
      assertNotNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[8];
      charSequenceArray0[0] = (CharSequence) "#";
      String string1 = StringUtils.deleteWhitespace("F1~Sp}mS5");
      assertEquals("F1~Sp}mS5", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.isAlphanumeric("F1~Sp}mS5");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.containsAny((CharSequence) "w{>bJ\"W}#f&", charSequenceArray0);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      assertEquals(8, charSequenceArray0.length);
      
      String string2 = StringUtils.deleteWhitespace("#");
      assertEquals("#", string2);
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertNotNull(string2);
      
      String string3 = StringUtils.replaceFirst("F1~Sp}mS5", "F1~Sp}mS5", "");
      assertEquals("", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      
      boolean boolean2 = StringUtils.isNumeric(charSequenceArray0[0]);
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertEquals(8, charSequenceArray0.length);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "F1~Sp}mS5";
      String[] stringArray1 = StringUtils.stripAll(stringArray0, "Arguments cannot both be null");
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(1, stringArray0.length);
      assertEquals(1, stringArray1.length);
      
      boolean boolean3 = StringUtils.isAlpha(charSequenceArray0[0]);
      assertFalse(boolean3);
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertEquals(8, charSequenceArray0.length);
      
      boolean boolean4 = StringUtils.isNoneEmpty(stringArray0);
      assertTrue(boolean4);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertFalse(boolean4 == boolean3);
      assertFalse(boolean4 == boolean2);
      assertFalse(boolean4 == boolean0);
      assertTrue(boolean4 == boolean1);
      assertNotSame(stringArray0, stringArray1);
      assertEquals(1, stringArray0.length);
      
      String[] stringArray2 = StringUtils.stripAll(stringArray1, (String) null);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertFalse(stringArray2.equals((Object)stringArray1));
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertNotNull(stringArray2);
      assertNotSame(stringArray0, stringArray2);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray2);
      assertNotSame(stringArray1, stringArray0);
      assertNotSame(stringArray2, stringArray1);
      assertNotSame(stringArray2, stringArray0);
      assertEquals(1, stringArray0.length);
      assertEquals(1, stringArray1.length);
      assertEquals(1, stringArray2.length);
      
      String string4 = StringUtils.replaceEachRepeatedly("4^=3iu", stringArray0, stringArray0);
      assertEquals("4^=3iu", string4);
      assertFalse(stringArray0.equals((Object)stringArray2));
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertNotNull(string4);
      assertNotSame(stringArray0, stringArray2);
      assertNotSame(stringArray0, stringArray1);
      assertEquals(1, stringArray0.length);
      
      String string5 = StringUtils.rightPad("", (-811));
      assertEquals("", string5);
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertTrue(string5.equals((Object)string3));
      assertNotNull(string5);
  }

  @Test(timeout = 4000)
  public void test471()  throws Throwable  {
      String[] stringArray0 = new String[13];
      String string0 = "{}";
      stringArray0[0] = "{}";
      stringArray0[1] = "{}";
      String string1 = StringUtils.replaceEachRepeatedly(", Length: ", stringArray0, stringArray0);
      assertEquals(", Length: ", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(13, stringArray0.length);
      
      // Undeclared exception!
      try { 
        StringUtils.removePattern(" vs ", "=)PQD");
        fail("Expecting exception: PatternSyntaxException");
      
      } catch(PatternSyntaxException e) {
         //
         // Unmatched closing ')' near index 0
         // =)PQD
         // ^
         //
         verifyException("java.util.regex.Pattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test472()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = 'B';
      charArray0[1] = 'V';
      charArray0[2] = '6';
      charArray0[3] = 'N';
      charArray0[4] = 'B';
      charArray0[5] = 'r';
      int int0 = StringUtils.indexOfAny((CharSequence) "Object varargs must not be null", charArray0);
      assertArrayEquals(new char[] {'B', 'V', '6', 'N', 'B', 'r'}, charArray0);
      assertEquals(9, int0);
      assertEquals(6, charArray0.length);
      
      String string0 = StringUtils.trimToNull("Object varargs must not be null");
      assertEquals("Object varargs must not be null", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test473()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      charSequenceArray0[0] = (CharSequence) "8c>!) u,eei!\"I2yC-U";
      charSequenceArray0[1] = (CharSequence) "8c>!) u,eei!\"I2yC-U";
      String string0 = StringUtils.deleteWhitespace("8c>!) u,eei!\"I2yC-U");
      assertEquals("8c>!)u,eei!\"I2yC-U", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isAlphanumeric((CharSequence) null);
      assertFalse(boolean0);
      
      String string1 = StringUtils.deleteWhitespace("8c>!)u,eei!\"I2yC-U");
      assertEquals("8c>!)u,eei!\"I2yC-U", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      boolean boolean1 = StringUtils.containsAny((CharSequence) "8c>!) u,eei!\"I2yC-U", charSequenceArray0);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      assertEquals(3, charSequenceArray0.length);
      
      String string2 = StringUtils.deleteWhitespace("\"KKePjNUsDa2rJJx");
      assertEquals("\"KKePjNUsDa2rJJx", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      String string3 = StringUtils.replaceEachRepeatedly("8c>!) u,eei!\"I2yC-U", (String[]) null, (String[]) null);
      assertEquals("8c>!) u,eei!\"I2yC-U", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      
      String string4 = StringUtils.removePattern("8c>!)u,eei!\"I2yC-U", "The String must not be empty");
      assertEquals("8c>!)u,eei!\"I2yC-U", string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string0));
      assertNotNull(string4);
      
      boolean boolean2 = StringUtils.equalsAny("8c>!)u,eei!\"I2yC-U", (CharSequence[]) null);
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      String string5 = StringUtils.removeStart("Minimum abbreviation width is %d", "bdG");
      assertEquals("Minimum abbreviation width is %d", string5);
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertNotNull(string5);
  }

  @Test(timeout = 4000)
  public void test474()  throws Throwable  {
      String string0 = StringUtils.removeAll(" ", " ");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.swapCase("");
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.replaceFirst("u", "D", (String) null);
      assertEquals("u", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      String string3 = StringUtils.LF;
      assertEquals("\n", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      
      String[] stringArray0 = new String[12];
      stringArray0[0] = " ";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "u";
      String[] stringArray1 = StringUtils.stripAll(stringArray0, (String) null);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(12, stringArray0.length);
      assertEquals(12, stringArray1.length);
  }

  @Test(timeout = 4000)
  public void test475()  throws Throwable  {
      String string0 = StringUtils.substring("bjX'A", 1301);
      assertEquals("", string0);
      assertNotNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[7];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "bjX'A";
      charSequenceArray0[2] = (CharSequence) "bjX'A";
      boolean boolean0 = StringUtils.isAllEmpty(charSequenceArray0);
      assertFalse(boolean0);
      assertEquals(7, charSequenceArray0.length);
      
      char[] charArray0 = new char[5];
      charArray0[0] = 'E';
      charArray0[1] = 'E';
      charArray0[2] = '8';
      charArray0[3] = 'E';
      charArray0[4] = 'E';
      String string1 = StringUtils.join(charArray0, 'E', 2662, 1301);
      assertArrayEquals(new char[] {'E', 'E', '8', 'E', 'E'}, charArray0);
      assertEquals("", string1);
      assertNotNull(string1);
      assertEquals(5, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test476()  throws Throwable  {
      String string0 = StringUtils.reverse("");
      assertEquals("", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isEmpty("");
      assertTrue(boolean0);
      
      boolean boolean1 = StringUtils.endsWithAny("", (CharSequence[]) null);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      String string1 = StringUtils.remove("", (String) null);
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.wrap("", 'B');
      assertEquals("", string2);
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertNotNull(string2);
      
      int int0 = StringUtils.length("");
      assertEquals(0, int0);
      
      String string3 = "^Bm<?O+Fq";
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("Minimum abbreviation width is %d", "^Bm<?O+Fq", 0);
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      // Undeclared exception!
      try { 
        Charset.forName("Minimum abbreviation width is %d");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // Minimum abbreviation width is %d
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test477()  throws Throwable  {
      int int0 = StringUtils.lastIndexOf((CharSequence) null, (CharSequence) null);
      assertEquals((-1), int0);
      
      Object[] objectArray0 = new Object[9];
      objectArray0[1] = (Object) null;
      objectArray0[2] = (Object) null;
      objectArray0[4] = (Object) "W0Egq";
      objectArray0[5] = (Object) "W0Egq";
      objectArray0[6] = (Object) "W0Egq";
      objectArray0[7] = (Object) null;
      objectArray0[8] = (Object) "W0Egq";
      String string0 = StringUtils.substringBefore((String) null, 95);
      assertNull(string0);
      
      String string1 = StringUtils.chop("[D/.5Q]{sGZM2sH<]");
      assertEquals("[D/.5Q]{sGZM2sH<", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test478()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = '2';
      charArray0[1] = '2';
      String string0 = StringUtils.join(charArray0, 'S', 67, 66);
      assertArrayEquals(new char[] {'2', '2', '\u0000'}, charArray0);
      assertEquals("", string0);
      assertNotNull(string0);
      assertEquals(3, charArray0.length);
      
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      int int0 = StringUtils.lastIndexOf((CharSequence) "", (CharSequence) "");
      assertEquals(0, int0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      String string1 = StringUtils.defaultString("[0");
      assertEquals("[0", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.equalsAny("2", charSequenceArray0);
      assertFalse(boolean0);
      assertEquals(3, charSequenceArray0.length);
  }

  @Test(timeout = 4000)
  public void test479()  throws Throwable  {
      String string0 = StringUtils.substringBeforeLast("", "Minimum abbreviation width is %d");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.uncapitalize(" ");
      assertEquals(" ", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      booleanArray0[4] = false;
      String string2 = StringUtils.join(booleanArray0, 'x', 0, (-164));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, true, false}, booleanArray0));
      assertEquals("", string2);
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals(5, booleanArray0.length);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) " ", (CharSequence) "");
      assertEquals(1, int0);
      
      Object[] objectArray0 = new Object[4];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      objectArray0[1] = (Object) false;
      objectArray0[2] = (Object) false;
      objectArray0[3] = (Object) false;
      String string3 = StringUtils.joinWith("ch", objectArray0);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      assertEquals(4, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test480()  throws Throwable  {
      boolean boolean0 = StringUtils.endsWithIgnoreCase((CharSequence) null, (CharSequence) null);
      assertTrue(boolean0);
      
      Object[] objectArray0 = new Object[6];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      String string0 = StringUtils.rightPad("maxWith cannot be negative", (-105), 'M');
      assertEquals("maxWith cannot be negative", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test481()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = '2';
      charArray0[1] = 'a';
      charArray0[2] = '&';
      String string0 = StringUtils.join(charArray0, 'S', 67, 66);
      assertArrayEquals(new char[] {'2', 'a', '&'}, charArray0);
      assertEquals("", string0);
      assertNotNull(string0);
      assertEquals(3, charArray0.length);
      
      String string1 = "[0";
      String string2 = StringUtils.replaceChars("", "", "[0");
      assertEquals("", string2);
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      String string3 = "}xk 6mk&yQ`^suYg]";
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "}xk 6mk&yQ`^suYg]";
      String string4 = StringUtils.replaceIgnoreCase("/p)?<D@d;4g(/O>", "", "[0");
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertNotNull(string4);
      
      CharSequence[] charSequenceArray1 = new CharSequence[6];
      assertFalse(charSequenceArray1.equals((Object)charSequenceArray0));
      
      charSequenceArray1[0] = (CharSequence) "";
      boolean boolean0 = StringUtils.isMixedCase(charSequenceArray0[0]);
      assertFalse(boolean0);
      assertFalse(charSequenceArray0.equals((Object)charSequenceArray1));
      assertNotSame(charSequenceArray0, charSequenceArray1);
      assertEquals(3, charSequenceArray0.length);
      
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparator("\n", "/p)?<D@d;4g(/O>", 67);
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      try { 
        StringUtils.getBytes(" ", "E6$5XQ/l-@lOq");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(UnsupportedEncodingException e) {
      }
  }

  @Test(timeout = 4000)
  public void test482()  throws Throwable  {
      String string0 = StringUtils.substringAfter("[D/.5Q]{sGZM2sH<] in an array of ", "!");
      assertEquals("", string0);
      assertNotNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[0] = (CharSequence) "!";
      charSequenceArray0[1] = (CharSequence) "!";
      char[] charArray0 = new char[0];
      String string1 = StringUtils.replaceChars("", (String) null, "");
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = "Array element }yrRfNpTa/@3(+m";
      boolean boolean0 = StringUtils.isMixedCase(charSequenceArray0[0]);
      assertFalse(boolean0);
      assertEquals(2, charSequenceArray0.length);
      
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparator("\rArray element ", "[0", 322);
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      try { 
        StringUtils.getBytes("4Oqze", "E6$5XQ/l-@lOq");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(UnsupportedEncodingException e) {
      }
  }

  @Test(timeout = 4000)
  public void test483()  throws Throwable  {
      String[] stringArray0 = new String[16];
      stringArray0[1] = "";
      String string0 = StringUtils.firstNonBlank(stringArray0);
      assertNull(string0);
      assertEquals(16, stringArray0.length);
      
      float[] floatArray0 = new float[7];
      String string1 = StringUtils.join(floatArray0, 'v');
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals("0.0v0.0v0.0v0.0v0.0v0.0v0.0", string1);
      assertNotNull(string1);
      assertEquals(7, floatArray0.length);
      
      boolean boolean0 = StringUtils.isMixedCase("");
      assertFalse(boolean0);
      
      String string2 = StringUtils.truncate("", 49);
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test484()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "{}";
      stringArray0[1] = "";
      String string0 = StringUtils.firstNonBlank(stringArray0);
      assertEquals("{}", string0);
      assertNotNull(string0);
      assertEquals(2, stringArray0.length);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)1718;
      String string1 = StringUtils.join(shortArray0, 'X', (int) (short)1718, (int) (short)1718);
      assertArrayEquals(new short[] {(short)1718}, shortArray0);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(1, shortArray0.length);
      
      String string2 = StringUtils.join((Object[]) stringArray0, "{}");
      assertEquals("{}{}", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals(2, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test485()  throws Throwable  {
      String string0 = StringUtils.removeStart("\r", "Array element ");
      assertEquals("\r", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.startsWith((CharSequence) null, (CharSequence) null);
      assertTrue(boolean0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[6];
      charSequenceArray0[0] = (CharSequence) "Array element ";
      charSequenceArray0[2] = (CharSequence) "Array element ";
      String string1 = StringUtils.substring("\r", 31, (-2011));
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      charSequenceArray0[3] = (CharSequence) "";
      charSequenceArray0[4] = null;
      charSequenceArray0[5] = (CharSequence) "\r";
      boolean boolean1 = StringUtils.isAnyBlank(charSequenceArray0);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals(6, charSequenceArray0.length);
  }

  @Test(timeout = 4000)
  public void test486()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      String string0 = StringUtils.substring("e8WB-!T)bQas0NZWw", 5736, (-4170));
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.stripStart("org.apache.commons.lang3.ObjectUtils", "");
      assertEquals("org.apache.commons.lang3.ObjectUtils", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.toRootLowerCase("org.apache.commons.lang3.ObjectUtils");
      assertEquals("org.apache.commons.lang3.objectutils", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      int int0 = StringUtils.length("");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test487()  throws Throwable  {
      String[] stringArray0 = new String[13];
      stringArray0[0] = "{}";
      stringArray0[1] = "{}";
      String string0 = StringUtils.firstNonBlank(stringArray0);
      assertEquals("{}", string0);
      assertNotNull(string0);
      assertEquals(13, stringArray0.length);
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = (-1.0F);
      floatArray0[2] = 1383.2F;
      floatArray0[3] = (-2836.3674F);
      boolean boolean0 = StringUtils.isAllUpperCase("{}");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isNotEmpty("{}");
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      char[] charArray0 = new char[1];
      boolean boolean2 = StringUtils.containsNone((CharSequence) "{}", charArray0);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertTrue(boolean2);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertEquals(1, charArray0.length);
      
      boolean boolean3 = StringUtils.isAlphanumeric("{}");
      assertFalse(boolean3);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3 == boolean1);
      
      boolean boolean4 = StringUtils.isNoneBlank(stringArray0);
      assertFalse(boolean4);
      assertFalse(boolean4 == boolean1);
      assertTrue(boolean4 == boolean3);
      assertTrue(boolean4 == boolean0);
      assertFalse(boolean4 == boolean2);
      assertEquals(13, stringArray0.length);
      
      String string1 = StringUtils.substringBetween("{}", ".vJUO`HXV;lj1-;", "{}");
      assertNull(string1);
      
      String string2 = StringUtils.valueOf(charArray0);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertEquals("\u0000", string2);
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals(1, charArray0.length);
      
      int[] intArray0 = StringUtils.toCodePoints("\u0000");
      assertArrayEquals(new int[] {0}, intArray0);
      assertNotNull(intArray0);
      assertEquals(1, intArray0.length);
      
      String string3 = StringUtils.center(".vJUO`HXV;lj1-;", 4, 'G');
      assertEquals(".vJUO`HXV;lj1-;", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      
      String string4 = StringUtils.center(".vJUO`HXV;lj1-;", 4, "Array element ");
      assertEquals(".vJUO`HXV;lj1-;", string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string3));
      assertNotNull(string4);
  }

  @Test(timeout = 4000)
  public void test488()  throws Throwable  {
      String string0 = StringUtils.center((String) null, (-1073741822), 'p');
      assertNull(string0);
      
      String string1 = StringUtils.center("5?t4fmMj@FW8T]!^N", 185, "l(c\"B4`q5AeDf\"5{");
      assertEquals("l(c\"B4`q5AeDf\"5{l(c\"B4`q5AeDf\"5{l(c\"B4`q5AeDf\"5{l(c\"B4`q5AeDf\"5{l(c\"B4`q5AeDf\"5{l(c5?t4fmMj@FW8T]!^Nl(c\"B4`q5AeDf\"5{l(c\"B4`q5AeDf\"5{l(c\"B4`q5AeDf\"5{l(c\"B4`q5AeDf\"5{l(c\"B4`q5AeDf\"5{l(c\"", string1);
      assertNotNull(string1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[0] = (CharSequence) "l(c\"B4`q5AeDf\"5{l(c\"B4`q5AeDf\"5{l(c\"B4`q5AeDf\"5{l(c\"B4`q5AeDf\"5{l(c\"B4`q5AeDf\"5{l(c5?t4fmMj@FW8T]!^Nl(c\"B4`q5AeDf\"5{l(c\"B4`q5AeDf\"5{l(c\"B4`q5AeDf\"5{l(c\"B4`q5AeDf\"5{l(c\"B4`q5AeDf\"5{l(c\"";
      charSequenceArray0[1] = (CharSequence) "l(c\"B4`q5AeDf\"5{l(c\"B4`q5AeDf\"5{l(c\"B4`q5AeDf\"5{l(c\"B4`q5AeDf\"5{l(c\"B4`q5AeDf\"5{l(c5?t4fmMj@FW8T]!^Nl(c\"B4`q5AeDf\"5{l(c\"B4`q5AeDf\"5{l(c\"B4`q5AeDf\"5{l(c\"B4`q5AeDf\"5{l(c\"B4`q5AeDf\"5{l(c\"";
      int int0 = StringUtils.indexOfDifference(charSequenceArray0);
      assertEquals((-1), int0);
      assertEquals(2, charSequenceArray0.length);
      
      String string2 = StringUtils.deleteWhitespace("l(c\"B4`q5AeDf\"5{");
      assertEquals("l(c\"B4`q5AeDf\"5{", string2);
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      int int1 = StringUtils.ordinalIndexOf("l(c\"B4`q5AeDf\"5{", (CharSequence) null, (-1073741822));
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      
      String string3 = StringUtils.right("null/empty items", (-1));
      assertEquals("", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
  }

  @Test(timeout = 4000)
  public void test489()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      charSequenceArray0[0] = (CharSequence) "8c>!) u,eei!\"I2yC-U";
      String string0 = StringUtils.center("V'hQ#,p19hD-#uASq", (-1579), "4");
      assertEquals("V'hQ#,p19hD-#uASq", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test490()  throws Throwable  {
      String[] stringArray0 = new String[13];
      stringArray0[0] = "{}";
      stringArray0[1] = "";
      String string0 = StringUtils.firstNonBlank(stringArray0);
      assertEquals("{}", string0);
      assertNotNull(string0);
      assertEquals(13, stringArray0.length);
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = (-1.0F);
      floatArray0[2] = 1383.2F;
      floatArray0[3] = (-2836.3674F);
      boolean boolean0 = StringUtils.isAllUpperCase("{}");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isNotEmpty("{}");
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      char[] charArray0 = new char[1];
      boolean boolean2 = StringUtils.containsNone((CharSequence) "{}", charArray0);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertTrue(boolean2);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertEquals(1, charArray0.length);
      
      boolean boolean3 = StringUtils.isAlphanumeric("{}");
      assertFalse(boolean3);
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      
      boolean boolean4 = StringUtils.isNoneBlank(stringArray0);
      assertFalse(boolean4);
      assertFalse(boolean4 == boolean2);
      assertFalse(boolean4 == boolean1);
      assertTrue(boolean4 == boolean3);
      assertTrue(boolean4 == boolean0);
      assertEquals(13, stringArray0.length);
      
      String string1 = StringUtils.substringBetween("", ".vJUO`HXV;lj1-;", "{}");
      assertNull(string1);
      
      String string2 = StringUtils.valueOf(charArray0);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertEquals("\u0000", string2);
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals(1, charArray0.length);
      
      int[] intArray0 = StringUtils.toCodePoints("\u0000");
      assertArrayEquals(new int[] {0}, intArray0);
      assertNotNull(intArray0);
      assertEquals(1, intArray0.length);
      
      String string3 = StringUtils.center(".vJUO`HXV;lj1-;", 4, 'G');
      assertEquals(".vJUO`HXV;lj1-;", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      
      String string4 = StringUtils.center(".vJUO`HXV;lj1-;", 4, "Array element ");
      assertEquals(".vJUO`HXV;lj1-;", string4);
      assertTrue(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertNotNull(string4);
  }

  @Test(timeout = 4000)
  public void test491()  throws Throwable  {
      float[] floatArray0 = new float[0];
      // Undeclared exception!
      try { 
        StringUtils.join(floatArray0, 'n', (-2253), 32);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2253
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test492()  throws Throwable  {
      char char0 = 'j';
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) 'j';
      floatArray0[1] = 1.0F;
      floatArray0[2] = (-2530.9985F);
      floatArray0[3] = (-2530.9985F);
      floatArray0[4] = 1740.2F;
      floatArray0[5] = (float) 'j';
      floatArray0[6] = (float) 'a';
      floatArray0[7] = (-2530.9985F);
      // Undeclared exception!
      try { 
        StringUtils.join(floatArray0, '?', 76, (int) 'j');
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 76
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test493()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = '2';
      charArray0[1] = 'a';
      charArray0[2] = '&';
      String string0 = StringUtils.removeEndIgnoreCase("ILg", "ILg");
      assertEquals("", string0);
      assertNotNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[8];
      charSequenceArray0[0] = (CharSequence) "ILg";
      String string1 = StringUtils.join((Object[]) charSequenceArray0, 'n');
      assertEquals("ILgnnnnnnn", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(8, charSequenceArray0.length);
      
      charSequenceArray0[1] = (CharSequence) "ILgnnnnnnn";
      charSequenceArray0[2] = (CharSequence) "ILg";
      charSequenceArray0[3] = (CharSequence) "";
      String string2 = StringUtils.substringBetween("org.apache.commons.lang3.CharSequenceUtils", "ILg", "");
      assertNull(string2);
      
      charSequenceArray0[4] = (CharSequence) null;
      charSequenceArray0[5] = (CharSequence) "ILg";
      String string3 = StringUtils.replaceChars("}&/{2$vp@Xvlb(C", '&', 'a');
      assertEquals("}a/{2$vp@Xvlb(C", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      
      String[] stringArray0 = new String[0];
      String string4 = StringUtils.replaceEach((String) null, stringArray0, stringArray0);
      assertNull(string4);
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test494()  throws Throwable  {
      Vector<CharBuffer> vector0 = new Vector<CharBuffer>();
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertNotNull(vector0);
      
      Stream<CharBuffer> stream0 = vector0.stream();
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertNotNull(stream0);
      
      String string0 = StringUtils.replaceChars("org.apache.commons.lang3.ObjectUtils$Null", 'g', 'g');
      assertEquals("org.apache.commons.lang3.ObjectUtils$Null", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.trimToNull("G^7|+zFpb:oK?5");
      assertEquals("G^7|+zFpb:oK?5", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.leftPad("org.apache.commons.lang3.ObjectUtils$Null", 4, "G^7|+zFpb:oK?5");
      assertEquals("org.apache.commons.lang3.ObjectUtils$Null", string2);
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test495()  throws Throwable  {
      String string0 = StringUtils.stripToEmpty("G^7|+zFpb:oK?5");
      assertEquals("G^7|+zFpb:oK?5", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.removeFirst("}pi>>^e0#lj", (String) null);
      assertEquals("}pi>>^e0#lj", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.capitalize("0Npv,2#B=x)h!");
      assertEquals("0Npv,2#B=x)h!", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      boolean boolean0 = StringUtils.isNumericSpace((CharSequence) null);
      assertFalse(boolean0);
      
      String string3 = StringUtils.repeat("}pi>>^e0#lj", (String) null, 3924);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      
      int int0 = StringUtils.indexOf((CharSequence) "}pi>>^e0#lj", (CharSequence) string3, (-820));
      assertEquals((-1), int0);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      
      String string4 = StringUtils.join((long[]) null, 'z', (-820), (-1));
      assertNull(string4);
  }

  @Test(timeout = 4000)
  public void test496()  throws Throwable  {
      String string0 = StringUtils.deleteWhitespace("8c>!) u,eei!\"I2yC-U");
      assertEquals("8c>!)u,eei!\"I2yC-U", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.countMatches((CharSequence) "8c>!)u,eei!\"I2yC-U", 'v');
      assertEquals(0, int0);
      
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      Locale locale0 = new Locale("OY", "8c>!) u,eei!\"I2yC-U");
      assertEquals("oy_8C>!) U,EEI!\"I2YC-U", locale0.toString());
      assertEquals("8C>!) U,EEI!\"I2YC-U", locale0.getCountry());
      assertEquals("oy", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertNotNull(locale0);
      
      String string1 = locale0.getDisplayLanguage();
      assertEquals("oy", string1);
      assertEquals("oy_8C>!) U,EEI!\"I2YC-U", locale0.toString());
      assertEquals("8C>!) U,EEI!\"I2YC-U", locale0.getCountry());
      assertEquals("oy", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = locale0.getDisplayName();
      assertEquals("oy (8C>!) U,EEI!\"I2YC-U)", string2);
      assertEquals("oy_8C>!) U,EEI!\"I2YC-U", locale0.toString());
      assertEquals("8C>!) U,EEI!\"I2YC-U", locale0.getCountry());
      assertEquals("oy", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      String string3 = StringUtils.upperCase("4%fw", locale0);
      assertEquals("4%FW", string3);
      assertEquals("oy_8C>!) U,EEI!\"I2YC-U", locale0.toString());
      assertEquals("8C>!) U,EEI!\"I2YC-U", locale0.getCountry());
      assertEquals("oy", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      
      String string4 = StringUtils.defaultString("mSCmKs{1Su7x`hGGA");
      assertEquals("mSCmKs{1Su7x`hGGA", string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertNotNull(string4);
      
      int int1 = StringUtils.indexOfIgnoreCase((CharSequence) "8c>!)u,eei!\"I2yC-U", (CharSequence) "oy (8C>!) U,EEI!\"I2YC-U)", 1);
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test497()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      charSequenceArray0[0] = (CharSequence) "8c>!) u,eei!\"I2yC-U";
      charSequenceArray0[1] = (CharSequence) "8c>!) u,eei!\"I2yC-U";
      String string0 = StringUtils.abbreviate("Y)3n1`2_97u G#5v_Y)3n1`2_97u G#5v_Y)3n1`2_97u G#5v_Y)3n1`2_97u G#5v__", "Y)3n1`2_97u G#5v_Y)3n1`2_97u G#5v_Y)3n1`2_97u G#5v_Y)3n1`2_97u G#5v__", 3497);
      assertEquals("Y)3n1`2_97u G#5v_Y)3n1`2_97u G#5v_Y)3n1`2_97u G#5v_Y)3n1`2_97u G#5v__", string0);
      assertNotNull(string0);
      
      int[] intArray0 = new int[2];
      intArray0[0] = 3497;
      intArray0[1] = 3497;
      String string1 = StringUtils.join(intArray0, 'P', 3497, 3497);
      assertArrayEquals(new int[] {3497, 3497}, intArray0);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(2, intArray0.length);
      
      String string2 = StringUtils.rotate("", 3497);
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test498()  throws Throwable  {
      String string0 = StringUtils.trimToNull("tF2]5y 6~");
      assertEquals("tF2]5y 6~", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.containsIgnoreCase("tF2]5y 6~", "tF2]5y 6~");
      assertTrue(boolean0);
      
      String string1 = StringUtils.rotate("tF2]5y 6~", 13);
      assertEquals("6~tF2]5y ", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      CharBuffer[] charBufferArray0 = new CharBuffer[2];
      CharBuffer charBuffer0 = CharBuffer.allocate(13);
      assertTrue(charBuffer0.hasArray());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", charBuffer0.toString());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(13, charBuffer0.remaining());
      assertEquals(0, charBuffer0.arrayOffset());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(13, charBuffer0.length());
      assertEquals(13, charBuffer0.capacity());
      assertEquals(0, charBuffer0.position());
      assertEquals(13, charBuffer0.limit());
      assertFalse(charBuffer0.isDirect());
      assertNotNull(charBuffer0);
      
      charBufferArray0[0] = charBuffer0;
      int int0 = (-1);
      Buffer buffer0 = charBuffer0.rewind();
      assertTrue(charBuffer0.hasArray());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", charBuffer0.toString());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(13, charBuffer0.remaining());
      assertEquals(0, charBuffer0.arrayOffset());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(13, charBuffer0.length());
      assertEquals(13, charBuffer0.capacity());
      assertEquals(0, charBuffer0.position());
      assertEquals(13, charBuffer0.limit());
      assertFalse(charBuffer0.isDirect());
      assertEquals(13, buffer0.remaining());
      assertEquals(0, buffer0.arrayOffset());
      assertTrue(buffer0.hasRemaining());
      assertFalse(buffer0.isDirect());
      assertEquals(0, buffer0.position());
      assertTrue(buffer0.hasArray());
      assertEquals(13, buffer0.limit());
      assertFalse(buffer0.isReadOnly());
      assertEquals(13, buffer0.capacity());
      assertNotNull(buffer0);
      
      // Undeclared exception!
      try { 
        CharBuffer.wrap((CharSequence) charBuffer0, (-841), (-1));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test499()  throws Throwable  {
      String string0 = StringUtils.join((List<?>) null, "EmC", 516, 516);
      assertNull(string0);
      
      String string1 = StringUtils.remove("QMgAY/5ig/y:H013*", 'v');
      assertEquals("QMgAY/5ig/y:H013*", string1);
      assertNotNull(string1);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("Search and Replace array lengths don't match: ", "9", 261);
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      boolean[] booleanArray0 = new boolean[0];
      String string2 = StringUtils.join(booleanArray0, 'v');
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals(0, booleanArray0.length);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)12;
      byteArray0[1] = (byte)20;
      byteArray0[2] = (byte)105;
      byteArray0[3] = (byte)16;
      byteArray0[4] = (byte)36;
      byteArray0[5] = (byte) (-59);
      byteArray0[6] = (byte)76;
      // Undeclared exception!
      try { 
        StringUtils.join(byteArray0, '%', 3425, 65536);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3425
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test500()  throws Throwable  {
      Vector<CharBuffer> vector0 = new Vector<CharBuffer>();
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertNotNull(vector0);
      
      String string0 = "org.apache.commons.lang3.ObjectUtils$Null";
      String string1 = StringUtils.wrap("org.apache.commons.lang3.ObjectUtils$Null", 'g');
      assertEquals("gorg.apache.commons.lang3.ObjectUtils$Nullg", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "gorg.apache.commons.lang3.ObjectUtils$Nullg");
      assertFalse(charBuffer0.hasArray());
      assertEquals(43, charBuffer0.remaining());
      assertEquals(43, charBuffer0.length());
      assertTrue(charBuffer0.isReadOnly());
      assertFalse(charBuffer0.isDirect());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(43, charBuffer0.capacity());
      assertEquals(0, charBuffer0.position());
      assertEquals(43, charBuffer0.limit());
      assertEquals("gorg.apache.commons.lang3.ObjectUtils$Nullg", charBuffer0.toString());
      assertNotNull(charBuffer0);
      
      boolean boolean0 = vector0.add(charBuffer0);
      assertTrue(vector0.contains(charBuffer0));
      assertTrue(boolean0);
      assertEquals(10, vector0.capacity());
      assertFalse(vector0.isEmpty());
      assertEquals(1, vector0.size());
      assertEquals("[gorg.apache.commons.lang3.ObjectUtils$Nullg]", vector0.toString());
      assertFalse(charBuffer0.hasArray());
      assertEquals(43, charBuffer0.remaining());
      assertEquals(43, charBuffer0.length());
      assertTrue(charBuffer0.isReadOnly());
      assertFalse(charBuffer0.isDirect());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(43, charBuffer0.capacity());
      assertEquals(0, charBuffer0.position());
      assertEquals(43, charBuffer0.limit());
      assertEquals("gorg.apache.commons.lang3.ObjectUtils$Nullg", charBuffer0.toString());
      
      int int0 = 65536;
      // Undeclared exception!
      try { 
        StringUtils.join((List<?>) vector0, (String) null, 1657, 65536);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // toIndex = 65536
         //
         verifyException("java.util.SubList", e);
      }
  }

  @Test(timeout = 4000)
  public void test501()  throws Throwable  {
      String string0 = StringUtils.normalizeSpace("aab");
      assertEquals("aab", string0);
      assertNotNull(string0);
      
      Vector<CharBuffer> vector0 = new Vector<CharBuffer>();
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.isEmpty());
      assertNotNull(vector0);
      
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "aab");
      assertEquals(0, charBuffer0.position());
      assertTrue(charBuffer0.isReadOnly());
      assertEquals("aab", charBuffer0.toString());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(3, charBuffer0.remaining());
      assertEquals(3, charBuffer0.capacity());
      assertEquals(3, charBuffer0.limit());
      assertFalse(charBuffer0.hasArray());
      assertEquals(3, charBuffer0.length());
      assertFalse(charBuffer0.isDirect());
      assertNotNull(charBuffer0);
      
      boolean boolean0 = vector0.add(charBuffer0);
      assertTrue(vector0.contains(charBuffer0));
      assertTrue(boolean0);
      assertEquals(1, vector0.size());
      assertFalse(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals("[aab]", vector0.toString());
      assertEquals(0, charBuffer0.position());
      assertTrue(charBuffer0.isReadOnly());
      assertEquals("aab", charBuffer0.toString());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(3, charBuffer0.remaining());
      assertEquals(3, charBuffer0.capacity());
      assertEquals(3, charBuffer0.limit());
      assertFalse(charBuffer0.hasArray());
      assertEquals(3, charBuffer0.length());
      assertFalse(charBuffer0.isDirect());
      
      Stack<Locale.LanguageRange> stack0 = new Stack<Locale.LanguageRange>();
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertNotNull(stack0);
      
      Vector<Locale> vector1 = new Vector<Locale>();
      assertEquals("[]", vector1.toString());
      assertEquals(10, vector1.capacity());
      assertEquals(0, vector1.size());
      assertTrue(vector1.isEmpty());
      assertNotNull(vector1);
      
      List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) stack0, (Collection<Locale>) vector1);
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", vector1.toString());
      assertEquals(10, vector1.capacity());
      assertEquals(0, vector1.size());
      assertTrue(vector1.isEmpty());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
      
      String string1 = StringUtils.join(list0, "Invalid locale format: ", 65536, 65536);
      assertEquals("", string1);
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", vector1.toString());
      assertEquals(10, vector1.capacity());
      assertEquals(0, vector1.size());
      assertTrue(vector1.isEmpty());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = "g?ykv@z$zY@2E";
      // Undeclared exception!
      StringUtils.repeat("g?ykv@z$zY@2E", "", 65536);
  }

  @Test(timeout = 4000)
  public void test502()  throws Throwable  {
      Object[] objectArray0 = new Object[7];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      objectArray0[1] = object1;
      Object object2 = new Object();
      assertFalse(object2.equals((Object)object1));
      assertFalse(object2.equals((Object)object0));
      assertNotNull(object2);
      
      objectArray0[2] = object2;
      Object object3 = new Object();
      assertFalse(object3.equals((Object)object2));
      assertFalse(object3.equals((Object)object1));
      assertFalse(object3.equals((Object)object0));
      assertNotNull(object3);
      
      objectArray0[3] = object3;
      ArrayList<String> arrayList0 = new ArrayList<String>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      String string0 = StringUtils.join((List<?>) arrayList0, "u1yRx4nnK}", 61, (-3344));
      assertFalse(arrayList0.contains("u1yRx4nnK}"));
      assertEquals("", string0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(string0);
      
      String[] stringArray0 = new String[0];
      String string1 = StringUtils.replaceEach("org.apache.commons.lang3.ObjectUtils$Null", stringArray0, stringArray0);
      assertEquals("org.apache.commons.lang3.ObjectUtils$Null", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(0, stringArray0.length);
      
      boolean boolean0 = StringUtils.isNumeric("org.apache.commons.lang3.ObjectUtils$Null");
      assertFalse(boolean0);
      
      String string2 = StringUtils.join(objectArray0, "org.apache.commons.lang3.ObjectUtils$Null", 10, (-3344));
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals(7, objectArray0.length);
      
      String string3 = StringUtils.join(objectArray0, "org.apache.commons.lang3.ObjectUtils$Null");
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      assertEquals(7, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test503()  throws Throwable  {
      String string0 = StringUtils.normalizeSpace("");
      assertEquals("", string0);
      assertNotNull(string0);
      
      Vector<CharBuffer> vector0 = new Vector<CharBuffer>();
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.isEmpty());
      assertNotNull(vector0);
      
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "");
      assertEquals(0, charBuffer0.length());
      assertEquals("", charBuffer0.toString());
      assertEquals(0, charBuffer0.remaining());
      assertTrue(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.limit());
      assertFalse(charBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.capacity());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.hasArray());
      assertFalse(charBuffer0.isDirect());
      assertNotNull(charBuffer0);
      
      boolean boolean0 = vector0.add(charBuffer0);
      assertTrue(vector0.contains(charBuffer0));
      assertTrue(boolean0);
      assertEquals("[]", vector0.toString());
      assertFalse(vector0.isEmpty());
      assertEquals(1, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals(0, charBuffer0.length());
      assertEquals("", charBuffer0.toString());
      assertEquals(0, charBuffer0.remaining());
      assertTrue(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.limit());
      assertFalse(charBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.capacity());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.hasArray());
      assertFalse(charBuffer0.isDirect());
      
      int int0 = 1657;
      // Undeclared exception!
      try { 
        StringUtils.join((List<?>) vector0, (String) null, 1657, 65536);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // toIndex = 65536
         //
         verifyException("java.util.SubList", e);
      }
  }

  @Test(timeout = 4000)
  public void test504()  throws Throwable  {
      String string0 = StringUtils.unwrap("Search and Replace array lengths don't match: ", "Search and Replace array lengths don't match: ");
      assertEquals("Search and Replace array lengths don't match: ", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = new String[7];
      stringArray0[0] = "Search and Replace array lengths don't match: ";
      stringArray0[1] = null;
      stringArray0[2] = "Search and Replace array lengths don't match: ";
      stringArray0[3] = "Search and Replace array lengths don't match: ";
      stringArray0[4] = "null/empty items";
      stringArray0[5] = "Search and Replace array lengths don't match: ";
      stringArray0[6] = "Search and Replace array lengths don't match: ";
      String string1 = StringUtils.replaceEachRepeatedly((String) null, stringArray0, stringArray0);
      assertNull(string1);
      assertEquals(7, stringArray0.length);
      
      boolean boolean0 = StringUtils.equalsAny("null/empty items", stringArray0);
      assertTrue(boolean0);
      assertEquals(7, stringArray0.length);
      
      String string2 = StringUtils.removeStart("Search and Replace array lengths don't match: ", "xM\"kaCGP:ux,Hsq<Ead");
      assertEquals("Search and Replace array lengths don't match: ", string2);
      assertTrue(string2.equals((Object)string0));
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test505()  throws Throwable  {
      String string0 = StringUtils.replace("&#.hF:Af]d@NQ>{3", "&#.hF:Af]d@NQ>{3", ".N[!eI\"p!Z");
      assertEquals(".N[!eI\"p!Z", string0);
      assertNotNull(string0);
      
      Object[] objectArray0 = new Object[0];
      String string1 = StringUtils.join(objectArray0, '.', Integer.MAX_VALUE, Integer.MAX_VALUE);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(0, objectArray0.length);
      
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[0] = (CharSequence) "&#.hF:Af]d@NQ>{3";
      charSequenceArray0[1] = (CharSequence) "&#.hF:Af]d@NQ>{3";
      String string2 = StringUtils.prependIfMissingIgnoreCase((String) null, ".N[!eI\"p!Z", charSequenceArray0);
      assertNull(string2);
      assertEquals(2, charSequenceArray0.length);
      
      String string3 = StringUtils.difference((String) null, (String) null);
      assertNull(string3);
      
      boolean boolean0 = StringUtils.isBlank((CharSequence) null);
      assertTrue(boolean0);
      
      int int0 = StringUtils.compare("8w`bDx*!", ".N[!eI\"p!Z");
      assertEquals(10, int0);
      
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      assertFalse(linkedList0.contains(Integer.MAX_VALUE));
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      linkedList0.forEach(consumer0);
      assertFalse(linkedList0.contains(Integer.MAX_VALUE));
      assertEquals(0, linkedList0.size());
      
      String string4 = StringUtils.join((List<?>) linkedList0, "Minimum abbreviation width with offset is %d", Integer.MAX_VALUE, 101);
      assertFalse(linkedList0.contains(Integer.MAX_VALUE));
      assertEquals("", string4);
      assertEquals(0, linkedList0.size());
      assertFalse(string4.equals((Object)string0));
      assertNotNull(string4);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "Minimum abbreviation width with offset is %d";
      stringArray0[1] = "";
      String string5 = StringUtils.replaceEach((String) null, stringArray0, stringArray0);
      assertNull(string5);
      assertEquals(2, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test506()  throws Throwable  {
      String string0 = StringUtils.abbreviateMiddle("s-D4{8$Mo,|,xZ", "xeR=", 16);
      assertEquals("s-D4{8$Mo,|,xZ", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.uncapitalize("xeR=");
      assertEquals("xeR=", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test507()  throws Throwable  {
      String string0 = StringUtils.abbreviateMiddle("s-D4{8$Mo,|,xZ", "xeR=", 16);
      assertEquals("s-D4{8$Mo,|,xZ", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isAlpha("s-D4{8$Mo,|,xZ");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test508()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = 'd';
      charArray0[1] = 'I';
      charArray0[2] = 'I';
      charArray0[3] = 'I';
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[0] = null;
      charSequenceArray0[1] = (CharSequence) "org.apache.commons.lang3.CharSequenceUtils";
      String string0 = StringUtils.appendIfMissing("org.apache.commons.lang3.CharSequenceUtils", (CharSequence) null, charSequenceArray0);
      assertEquals("org.apache.commons.lang3.CharSequenceUtils", string0);
      assertNotNull(string0);
      assertEquals(2, charSequenceArray0.length);
      
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) " ", charSequenceArray0[1], (-1));
      assertEquals((-1), int0);
      assertEquals(2, charSequenceArray0.length);
      
      int int1 = StringUtils.indexOf((CharSequence) "\r", 12);
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      
      String string1 = StringUtils.replaceAll("\r", (String) null, "org.apache.commons.lang3.CharSequenceUtils");
      assertEquals("\r", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.containsNone((CharSequence) "\r", charArray0);
      assertArrayEquals(new char[] {'d', 'I', 'I', 'I'}, charArray0);
      assertTrue(boolean0);
      assertEquals(4, charArray0.length);
      
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase(" ");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test509()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase(":lGnqLeX*");
      assertNotNull(stringArray0);
      assertEquals(6, stringArray0.length);
      
      String string0 = StringUtils.abbreviate("2[gA`$hsTM^KPO:q<", 1376, 3349);
      assertEquals("2[gA`$hsTM^KPO:q<", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test510()  throws Throwable  {
      String string0 = StringUtils.replaceAll("Object varargs must not be null", (String) null, "A6");
      assertEquals("Object varargs must not be null", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.overlay("/_:ui&5Wh", (String) null, 2, (-2541));
      assertEquals(":ui&5Wh", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test511()  throws Throwable  {
      String string0 = StringUtils.reverse("");
      assertEquals("", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isEmpty("");
      assertTrue(boolean0);
      
      String string1 = StringUtils.abbreviate((String) null, (String) null, (-3580));
      assertNull(string1);
      
      String string2 = StringUtils.remove("org.apache.commons.lang3.StringUtils", "org.apache.commons.lang3.RegExUtils");
      assertEquals("org.apache.commons.lang3.StringUtils", string2);
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("VRg!pjVT,{5_*4<D");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      String string3 = StringUtils.overlay("VbdG...", "The Array must not be null", (-2073), 2446);
      assertEquals("The Array must not be null", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      
      boolean boolean1 = StringUtils.isNoneBlank(stringArray0);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals(1, stringArray0.length);
      
      String string4 = StringUtils.substringBetween("\"fO3YH=y4J!JM= $", (String) null, "The Array must not be null");
      assertNull(string4);
      
      String string5 = StringUtils.left("org.apache.commons.lang3.StringUtils", (-3580));
      assertEquals("", string5);
      assertTrue(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertNotNull(string5);
      
      int[] intArray0 = StringUtils.toCodePoints("");
      assertArrayEquals(new int[] {}, intArray0);
      assertNotNull(intArray0);
      assertEquals(0, intArray0.length);
      
      String string6 = StringUtils.center("S[ig,`d)IhWMw", 98, 'N');
      assertEquals("NNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNS[ig,`d)IhWMwNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN", string6);
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string3));
      assertNotNull(string6);
  }

  @Test(timeout = 4000)
  public void test512()  throws Throwable  {
      String string0 = StringUtils.overlay("`f#f6HHM0Gl\"po;>8", "`f#f6HHM0Gl\"po;>8", 2046, 2107);
      assertEquals("`f#f6HHM0Gl\"po;>8`f#f6HHM0Gl\"po;>8", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.wrapIfMissing("@J(?VumTkP%H7vTZ", "`f#f6HHM0Gl\"po;>8");
      assertEquals("`f#f6HHM0Gl\"po;>8@J(?VumTkP%H7vTZ`f#f6HHM0Gl\"po;>8", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "`f#f6HHM0Gl\"po;>8`f#f6HHM0Gl\"po;>8";
      String string2 = StringUtils.join(objectArray0);
      assertEquals("`f#f6HHM0Gl\"po;>8`f#f6HHM0Gl\"po;>8", string2);
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals(1, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test513()  throws Throwable  {
      String string0 = StringUtils.stripToEmpty("G^7|+zFpb:oK?5");
      assertEquals("G^7|+zFpb:oK?5", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.substringBefore("G^7|+zFpb:oK?5", "G^7|+zFpb:oK?5");
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "gJ'2`^I>7>1=?w4kd#m", (CharSequence) "gJ'2`^I>7>1=?w4kd#m");
      assertEquals(0, int0);
      
      String string2 = StringUtils.overlay("iF,DK#Ur\"3UMmW", "G^7|+zFpb:oK?5", 0, 31);
      assertEquals("G^7|+zFpb:oK?5", string2);
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test514()  throws Throwable  {
      String string0 = StringUtils.deleteWhitespace("C1k-7_rbEbjE6eQS8]^");
      assertEquals("C1k-7_rbEbjE6eQS8]^", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isAllUpperCase("C1k-7_rbEbjE6eQS8]^");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isNotEmpty("C1k-7_rbEbjE6eQS8]^");
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      char[] charArray0 = new char[7];
      charArray0[0] = '`';
      charArray0[1] = 'v';
      charArray0[2] = 'B';
      charArray0[3] = 'v';
      charArray0[4] = '$';
      charArray0[5] = 'n';
      charArray0[6] = '<';
      boolean boolean2 = StringUtils.containsNone((CharSequence) "C1k-7_rbEbjE6eQS8]^", charArray0);
      assertArrayEquals(new char[] {'`', 'v', 'B', 'v', '$', 'n', '<'}, charArray0);
      assertTrue(boolean2);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertEquals(7, charArray0.length);
      
      boolean boolean3 = StringUtils.isAlphanumeric("C1k-7_rbEbjE6eQS8]^");
      assertFalse(boolean3);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3 == boolean1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      charSequenceArray0[0] = (CharSequence) "C1k-7_rbEbjE6eQS8]^";
      charSequenceArray0[1] = (CharSequence) "C1k-7_rbEbjE6eQS8]^";
      int int0 = StringUtils.indexOfAnyBut(charSequenceArray0[1], charArray0);
      assertArrayEquals(new char[] {'`', 'v', 'B', 'v', '$', 'n', '<'}, charArray0);
      assertEquals(0, int0);
      assertEquals(7, charArray0.length);
      assertEquals(3, charSequenceArray0.length);
      
      String string1 = StringUtils.overlay("C1k-7_rbEbjE6eQS8]^", ":", 2226, 2226);
      assertEquals("C1k-7_rbEbjE6eQS8]^:", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test515()  throws Throwable  {
      String string0 = StringUtils.difference("Cloneable type ", "Cloneable type ");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.deleteWhitespace("< pY-&(Z$DB'Bv");
      assertEquals("<pY-&(Z$DB'Bv", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.isAlphanumeric("<pY-&(Z$DB'Bv");
      assertFalse(boolean0);
      
      String string2 = StringUtils.deleteWhitespace("[D/.5Q]{sGZM2sH<]");
      assertEquals("[D/.5Q]{sGZM2sH<]", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      CharSequence[] charSequenceArray0 = new CharSequence[7];
      String string3 = StringUtils.repeat('r', 100);
      assertEquals("rrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrr", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      
      charSequenceArray0[0] = (CharSequence) "rrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrr";
      charSequenceArray0[1] = (CharSequence) "";
      charSequenceArray0[2] = (CharSequence) "Cloneable type ";
      charSequenceArray0[3] = (CharSequence) "<pY-&(Z$DB'Bv";
      charSequenceArray0[4] = (CharSequence) "w{>bJ\"W}#f&";
      charSequenceArray0[5] = (CharSequence) "";
      charSequenceArray0[6] = (CharSequence) "< pY-&(Z$DB'Bv";
      boolean boolean1 = StringUtils.containsAny((CharSequence) "<pY-&(Z$DB'Bv", charSequenceArray0);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      assertEquals(7, charSequenceArray0.length);
      
      String string4 = StringUtils.deleteWhitespace("[D/.5Q]{sGZM2sH<]");
      assertEquals("[D/.5Q]{sGZM2sH<]", string4);
      assertTrue(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertNotNull(string4);
      
      String string5 = StringUtils.replaceFirst("[D/.5Q]{sGZM2sH<]", (String) null, "[D/.5Q]{sGZM2sH<]");
      assertEquals("[D/.5Q]{sGZM2sH<]", string5);
      assertTrue(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertTrue(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertNotNull(string5);
      
      boolean boolean2 = StringUtils.isNumeric("<pY-&(Z$DB'Bv");
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "...";
      stringArray0[1] = "< pY-&(Z$DB'Bv";
      String[] stringArray1 = StringUtils.stripAll(stringArray0, "Cloneable type ");
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(2, stringArray0.length);
      assertEquals(2, stringArray1.length);
  }

  @Test(timeout = 4000)
  public void test516()  throws Throwable  {
      float[] floatArray0 = new float[3];
      floatArray0[0] = 0.0F;
      floatArray0[1] = 0.0F;
      floatArray0[2] = 0.0F;
      String string0 = StringUtils.join(floatArray0, '*');
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals("0.0*0.0*0.0", string0);
      assertNotNull(string0);
      assertEquals(3, floatArray0.length);
      
      String string1 = StringUtils.unwrap("", '5');
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "", (CharSequence[]) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test517()  throws Throwable  {
      String string0 = StringUtils.chomp("-yMQ ");
      assertEquals("-yMQ ", string0);
      assertNotNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      String string1 = StringUtils.replaceOnceIgnoreCase(" P vs ", "The type must not be null", "The type must not be null");
      assertEquals(" P vs ", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      charSequenceArray0[0] = (CharSequence) " P vs ";
      charSequenceArray0[1] = (CharSequence) "-yMQ ";
      int int0 = StringUtils.indexOfAny((CharSequence) "-yMQ ", charSequenceArray0);
      assertEquals(0, int0);
      assertEquals(2, charSequenceArray0.length);
  }

  @Test(timeout = 4000)
  public void test518()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      String string0 = StringUtils.join(objectArray0, 'p');
      assertNotNull(string0);
      assertEquals(1, objectArray0.length);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "java.lang.Object@592d1208", (CharSequence) "java.lang.Object@592d1208");
      assertEquals(0, int0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      charSequenceArray0[0] = (CharSequence) "java.lang.Object@592d1208";
      boolean boolean0 = StringUtils.endsWithAny("java.lang.Object@592d1208", charSequenceArray0);
      assertTrue(boolean0);
      assertEquals(1, charSequenceArray0.length);
      
      int int1 = StringUtils.countMatches((CharSequence) "java.lang.Object@592d1208", 'p');
      assertEquals(0, int1);
      assertTrue(int1 == int0);
      
      int int2 = StringUtils.lastIndexOfIgnoreCase(charSequenceArray0[0], (CharSequence) "java.lang.Object@592d1208");
      assertEquals(0, int2);
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals(1, charSequenceArray0.length);
      
      String string1 = StringUtils.removeStartIgnoreCase("java.lang.Object@592d1208", "java.lang.Object@592d1208");
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.strip("");
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertNotNull(string2);
      
      boolean boolean1 = StringUtils.startsWithIgnoreCase("", "");
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String string3 = StringUtils.join(objectArray0);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string0));
      assertNotNull(string3);
      assertEquals(1, objectArray0.length);
      
      int int3 = StringUtils.indexOfAny(charSequenceArray0[0], "[ R4Pk;9");
      assertEquals(18, int3);
      assertFalse(int3 == int1);
      assertFalse(int3 == int2);
      assertFalse(int3 == int0);
      assertEquals(1, charSequenceArray0.length);
      
      boolean boolean2 = StringUtils.isNumeric("java.lang.Object@592d1208");
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      
      boolean boolean3 = StringUtils.isAlphanumeric("");
      assertFalse(boolean3);
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3 == boolean0);
      
      int int4 = StringUtils.indexOfAny((CharSequence) "java.lang.Object@592d1208", charSequenceArray0);
      assertEquals(0, int4);
      assertTrue(int4 == int0);
      assertTrue(int4 == int2);
      assertFalse(int4 == int3);
      assertTrue(int4 == int1);
      assertEquals(1, charSequenceArray0.length);
  }

  @Test(timeout = 4000)
  public void test519()  throws Throwable  {
      String string0 = "m^Wgl;AY7 }<axB|I";
      String string1 = ">WWUt`";
      String string2 = StringUtils.overlay("m^Wgl;AY7 }<axB|I", ">WWUt`", 0, 0);
      assertEquals(">WWUt`m^Wgl;AY7 }<axB|I", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      String string3 = StringUtils.replaceAll("a,?Gx :$?y|", ">WWUt`m^Wgl;AY7 }<axB|I", "zEu4");
      assertEquals("a,?Gx :$?y|", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      
      String string4 = StringUtils.left((String) null, (-2842));
      assertNull(string4);
      
      String string5 = "Arguments cannot both be null";
      // Undeclared exception!
      try { 
        Charset.forName("Arguments cannot both be null");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // Arguments cannot both be null
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test520()  throws Throwable  {
      String[] stringArray0 = new String[13];
      stringArray0[0] = "{}";
      stringArray0[1] = "";
      String string0 = StringUtils.firstNonBlank(stringArray0);
      assertEquals("{}", string0);
      assertNotNull(string0);
      assertEquals(13, stringArray0.length);
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = (-1.0F);
      floatArray0[2] = 1383.2F;
      floatArray0[3] = (-2836.3674F);
      floatArray0[4] = (-2530.9985F);
      floatArray0[5] = 601.31F;
      floatArray0[6] = 1383.2F;
      char[] charArray0 = new char[4];
      charArray0[0] = 'j';
      String string1 = StringUtils.join(floatArray0, 'a', 428, 428);
      assertArrayEquals(new float[] {(-1.0F), 0.0F, 1383.2F, (-2836.3674F), (-2530.9985F), 601.31F, 1383.2F}, floatArray0, 0.01F);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(7, floatArray0.length);
      
      String string2 = StringUtils.rightPad("Locale must not be null", 24, 'j');
      assertEquals("Locale must not be nullj", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test521()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      charSequenceArray0[0] = (CharSequence) "8c>!) u,eei!\"I2yC-U";
      charSequenceArray0[1] = (CharSequence) "8c>!) u,eei!\"I2yC-U";
      String string0 = StringUtils.rightPad((String) null, 23, 'r');
      assertNull(string0);
      
      charSequenceArray0[2] = (CharSequence) null;
      boolean boolean0 = StringUtils.startsWithAny("8c>!) u,eei!\"I2yC-U", charSequenceArray0);
      assertTrue(boolean0);
      assertEquals(3, charSequenceArray0.length);
      
      String string1 = StringUtils.unwrap("\rArray element ", "JY@o8b");
      assertEquals("\rArray element ", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.center("\rArray element ", 23, 'r');
      assertEquals("rrrr\rArray element rrrr", string2);
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "rrrr\rArray element rrrr", (CharSequence) "\rArray element ");
      assertEquals((-1), int0);
      
      // Undeclared exception!
      try { 
        StringUtils.replacePattern("[D/.5Q]{sGZM2sH<]", "p{InCombiningDiacriticalMarks}+", "\n");
        fail("Expecting exception: PatternSyntaxException");
      
      } catch(PatternSyntaxException e) {
         //
         // Illegal repetition near index 0
         // p{InCombiningDiacriticalMarks}+
         // ^
         //
         verifyException("java.util.regex.Pattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test522()  throws Throwable  {
      Vector<CharBuffer> vector0 = new Vector<CharBuffer>();
      assertTrue(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertNotNull(vector0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      Object object2 = new Object();
      assertFalse(object2.equals((Object)object0));
      assertFalse(object2.equals((Object)object1));
      assertNotNull(object2);
      
      String string0 = StringUtils.difference((String) null, "*8x($");
      assertEquals("*8x($", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.defaultString("The type must not be null", "}yrRfNpTa/@3(+m");
      assertEquals("The type must not be null", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test523()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = '2';
      charArray0[1] = 'a';
      charArray0[2] = '&';
      String string0 = StringUtils.join(charArray0, 'S', 67, 66);
      assertArrayEquals(new char[] {'2', 'a', '&'}, charArray0);
      assertEquals("", string0);
      assertNotNull(string0);
      assertEquals(3, charArray0.length);
      
      String string1 = StringUtils.replaceChars("", "", "[0");
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "}xk 6mk&yQ`^suYg]";
      String string2 = StringUtils.replaceIgnoreCase("/p)?<D@d;4g(/O>", "", "[0");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      CharSequence[] charSequenceArray1 = new CharSequence[6];
      assertFalse(charSequenceArray1.equals((Object)charSequenceArray0));
      
      charSequenceArray1[0] = (CharSequence) "";
      boolean boolean0 = StringUtils.isMixedCase(charSequenceArray0[0]);
      assertFalse(boolean0);
      assertFalse(charSequenceArray0.equals((Object)charSequenceArray1));
      assertNotSame(charSequenceArray0, charSequenceArray1);
      assertEquals(3, charSequenceArray0.length);
      
      int int0 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      String string3 = StringUtils.replaceChars("Cannot store ", "The String must not be empty", (String) null);
      assertEquals("Ca", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      
      String string4 = StringUtils.difference("}xk 6mk&yQ`^suYg]", "d,=_5E{]xG2");
      assertEquals("d,=_5E{]xG2", string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertNotNull(string4);
      
      String string5 = StringUtils.repeat("[0", 5);
      assertEquals("[0[0[0[0[0", string5);
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertNotNull(string5);
  }

  @Test(timeout = 4000)
  public void test524()  throws Throwable  {
      double double0 = StringUtils.getJaroWinklerDistance("l(c\"B4`q5AeDf\"5{", "{}");
      assertEquals(0.0, double0, 0.01);
      
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      assertEquals("TW", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertNotNull(locale0);
      
      Locale locale1 = Locale.FRENCH;
      assertEquals("", locale1.getVariant());
      assertEquals("", locale1.getISO3Country());
      assertEquals("fr", locale1.getLanguage());
      assertEquals("", locale1.getCountry());
      assertEquals("fra", locale1.getISO3Language());
      assertEquals("fr", locale1.toString());
      assertFalse(locale1.equals((Object)locale0));
      assertNotNull(locale1);
      assertNotSame(locale1, locale0);
      
      String string0 = locale0.toLanguageTag();
      assertEquals("zh-TW", string0);
      assertEquals("TW", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertFalse(locale0.equals((Object)locale1));
      assertNotNull(string0);
      assertNotSame(locale0, locale1);
      
      String string1 = locale0.getDisplayScript();
      assertEquals("", string1);
      assertEquals("TW", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertNotSame(locale0, locale1);
      
      String[] stringArray0 = StringUtils.substringsBetween("", "uRD(<qr H?R=g", "l(c\"B4`q5AeDf\"5{");
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      
      String string2 = StringUtils.replaceChars("ch", "Object varargs must not be null", "");
      assertEquals("h", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test525()  throws Throwable  {
      String string0 = StringUtils.rightPad("#", 0, "F1~Sp}mS5");
      assertEquals("#", string0);
      assertNotNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[8];
      charSequenceArray0[0] = (CharSequence) "#";
      charSequenceArray0[1] = (CharSequence) "F1~Sp}mS5";
      char[] charArray0 = new char[0];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals("", charBuffer0.toString());
      assertTrue(charBuffer0.hasArray());
      assertEquals(0, charBuffer0.remaining());
      assertEquals(0, charBuffer0.position());
      assertEquals(0, charBuffer0.limit());
      assertFalse(charBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.capacity());
      assertFalse(charBuffer0.isReadOnly());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.length());
      assertNotNull(charBuffer0);
      assertEquals(0, charArray0.length);
      
      charSequenceArray0[2] = (CharSequence) charBuffer0;
      charSequenceArray0[3] = (CharSequence) "";
      charSequenceArray0[4] = (CharSequence) "#";
      charSequenceArray0[5] = (CharSequence) "0FO5}hhQ5YS+G9";
      charSequenceArray0[6] = (CharSequence) "#";
      charSequenceArray0[7] = (CharSequence) "";
      boolean boolean0 = StringUtils.equalsAnyIgnoreCase("#", charSequenceArray0);
      assertTrue(boolean0);
      assertEquals(8, charSequenceArray0.length);
      
      CharBuffer charBuffer1 = CharBuffer.wrap(charArray0, 0, 0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charBuffer1.capacity());
      assertEquals(0, charBuffer1.remaining());
      assertEquals(0, charBuffer1.limit());
      assertFalse(charBuffer1.hasRemaining());
      assertEquals(0, charBuffer1.arrayOffset());
      assertTrue(charBuffer1.hasArray());
      assertEquals("", charBuffer1.toString());
      assertEquals(0, charBuffer1.position());
      assertEquals(0, charBuffer1.length());
      assertFalse(charBuffer1.isDirect());
      assertFalse(charBuffer1.isReadOnly());
      assertTrue(charBuffer1.equals((Object)charBuffer0));
      assertNotNull(charBuffer1);
      assertNotSame(charBuffer1, charBuffer0);
      assertEquals(0, charArray0.length);
      
      IntStream intStream0 = charBuffer1.chars();
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charBuffer1.capacity());
      assertEquals(0, charBuffer1.remaining());
      assertEquals(0, charBuffer1.limit());
      assertFalse(charBuffer1.hasRemaining());
      assertEquals(0, charBuffer1.arrayOffset());
      assertTrue(charBuffer1.hasArray());
      assertEquals("", charBuffer1.toString());
      assertEquals(0, charBuffer1.position());
      assertEquals(0, charBuffer1.length());
      assertFalse(charBuffer1.isDirect());
      assertFalse(charBuffer1.isReadOnly());
      assertTrue(charBuffer1.equals((Object)charBuffer0));
      assertNotNull(intStream0);
      assertNotSame(charBuffer1, charBuffer0);
      assertEquals(0, charArray0.length);
      
      CharBuffer charBuffer2 = StringUtils.defaultIfBlank(charBuffer1, charBuffer1);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charBuffer1.capacity());
      assertEquals(0, charBuffer1.remaining());
      assertEquals(0, charBuffer1.limit());
      assertFalse(charBuffer1.hasRemaining());
      assertEquals(0, charBuffer1.arrayOffset());
      assertTrue(charBuffer1.hasArray());
      assertEquals("", charBuffer1.toString());
      assertEquals(0, charBuffer1.position());
      assertEquals(0, charBuffer1.length());
      assertFalse(charBuffer1.isDirect());
      assertFalse(charBuffer1.isReadOnly());
      assertEquals("", charBuffer2.toString());
      assertFalse(charBuffer2.isDirect());
      assertEquals(0, charBuffer2.length());
      assertTrue(charBuffer2.hasArray());
      assertEquals(0, charBuffer2.position());
      assertFalse(charBuffer2.isReadOnly());
      assertEquals(0, charBuffer2.remaining());
      assertEquals(0, charBuffer2.limit());
      assertFalse(charBuffer2.hasRemaining());
      assertEquals(0, charBuffer2.capacity());
      assertEquals(0, charBuffer2.arrayOffset());
      assertTrue(charBuffer1.equals((Object)charBuffer0));
      assertTrue(charBuffer2.equals((Object)charBuffer0));
      assertNotNull(charBuffer2);
      assertSame(charBuffer1, charBuffer2);
      assertNotSame(charBuffer1, charBuffer0);
      assertSame(charBuffer2, charBuffer1);
      assertNotSame(charBuffer2, charBuffer0);
      assertEquals(0, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test526()  throws Throwable  {
      long[] longArray0 = new long[2];
      longArray0[0] = 8L;
      longArray0[1] = 0L;
      Object[] objectArray0 = new Object[0];
      String string0 = StringUtils.join(objectArray0, "", 679, 679);
      assertEquals("", string0);
      assertNotNull(string0);
      assertEquals(0, objectArray0.length);
      
      CharSequence charSequence0 = StringUtils.defaultIfBlank((CharSequence) "", (CharSequence) "");
      assertEquals("", charSequence0);
      assertTrue(charSequence0.equals((Object)string0));
      assertNotNull(charSequence0);
      
      boolean boolean0 = StringUtils.isEmpty("");
      assertTrue(boolean0);
      
      String string1 = StringUtils.removeStart("", "");
      assertEquals("", string1);
      assertTrue(string1.equals((Object)charSequence0));
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      int[] intArray0 = StringUtils.toCodePoints("");
      assertArrayEquals(new int[] {}, intArray0);
      assertNotNull(intArray0);
      assertEquals(0, intArray0.length);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("Y#xu6O?;37G/", "Threshold must not be negative");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test527()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparator("_", "_", 1908);
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      String string0 = StringUtils.join(booleanArray0, 's', 1908, 0);
      assertTrue(Arrays.equals(new boolean[] {true, true, false, true, true}, booleanArray0));
      assertEquals("", string0);
      assertNotNull(string0);
      assertEquals(5, booleanArray0.length);
      
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) null, locale_FilteringMode0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
      
      String string1 = StringUtils.join((Iterable<?>) list0, 's');
      assertEquals("", string1);
      assertEquals(0, linkedList0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test528()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = '2';
      charArray0[1] = 'a';
      charArray0[2] = '&';
      String string0 = StringUtils.join(charArray0, 'S', 90, 61);
      assertArrayEquals(new char[] {'2', 'a', '&'}, charArray0);
      assertEquals("", string0);
      assertNotNull(string0);
      assertEquals(3, charArray0.length);
      
      String string1 = "[0";
      String string2 = StringUtils.replaceChars("", "", "[0");
      assertEquals("", string2);
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      String string3 = "}xk 6mk&yQ`^suYg]";
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "}xk 6mk&yQ`^suYg]";
      String string4 = StringUtils.replaceIgnoreCase("/p)?<D@d;4g(/O>", "", "[0");
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertNotNull(string4);
      
      CharSequence[] charSequenceArray1 = new CharSequence[1];
      assertFalse(charSequenceArray1.equals((Object)charSequenceArray0));
      
      charSequenceArray1[0] = (CharSequence) "";
      boolean boolean0 = StringUtils.containsAnyIgnoreCase("", charSequenceArray1);
      assertFalse(boolean0);
      assertFalse(charSequenceArray1.equals((Object)charSequenceArray0));
      assertNotSame(charSequenceArray1, charSequenceArray0);
      assertEquals(1, charSequenceArray1.length);
      
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparator("\n", "/p)?<D@d;4g(/O>", 90);
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      try { 
        StringUtils.getBytes(" ", "E6$5XQ/l-@lOq");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(UnsupportedEncodingException e) {
      }
  }

  @Test(timeout = 4000)
  public void test529()  throws Throwable  {
      String string0 = StringUtils.chomp("-yMQ ");
      assertEquals("-yMQ ", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.replaceOnceIgnoreCase(" P vs ", "The type must not be null", "The type must not be null");
      assertEquals(" P vs ", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test530()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      String string0 = StringUtils.join(objectArray0, 'p');
      assertNotNull(string0);
      assertEquals(1, objectArray0.length);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "java.lang.Object@32aa197b", (CharSequence) "java.lang.Object@32aa197b");
      assertEquals(0, int0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      charSequenceArray0[0] = (CharSequence) "java.lang.Object@32aa197b";
      boolean boolean0 = StringUtils.endsWithAny("java.lang.Object@32aa197b", charSequenceArray0);
      assertTrue(boolean0);
      assertEquals(1, charSequenceArray0.length);
      
      int int1 = StringUtils.countMatches((CharSequence) "java.lang.Object@32aa197b", 'p');
      assertEquals(0, int1);
      assertTrue(int1 == int0);
      
      int int2 = StringUtils.lastIndexOfIgnoreCase(charSequenceArray0[0], (CharSequence) "java.lang.Object@32aa197b");
      assertEquals(0, int2);
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals(1, charSequenceArray0.length);
      
      String string1 = StringUtils.removeStartIgnoreCase("java.lang.Object@32aa197b", "java.lang.Object@32aa197b");
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.substringAfterLast("java.lang.Object@32aa197b", "java.lang.Object@32aa197b");
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertNotNull(string2);
      
      boolean boolean1 = StringUtils.startsWithIgnoreCase("", "");
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String string3 = StringUtils.join(objectArray0);
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      assertEquals(1, objectArray0.length);
      
      int int3 = StringUtils.indexOfAny(charSequenceArray0[0], "[ R4Pk;9");
      assertEquals(22, int3);
      assertFalse(int3 == int1);
      assertFalse(int3 == int0);
      assertFalse(int3 == int2);
      assertEquals(1, charSequenceArray0.length);
      
      boolean boolean2 = StringUtils.isNumeric("java.lang.Object@32aa197b");
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      
      String string4 = StringUtils.deleteWhitespace("");
      assertEquals("", string4);
      assertTrue(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertNotNull(string4);
      
      boolean boolean3 = StringUtils.isAlphanumeric("");
      assertFalse(boolean3);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3 == boolean1);
      
      String string5 = StringUtils.deleteWhitespace("w{>bJ\"W}#f&");
      assertEquals("w{>bJ\"W}#f&", string5);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertNotNull(string5);
      
      boolean boolean4 = StringUtils.containsAny(charSequenceArray0[0], charSequenceArray0);
      assertTrue(boolean4);
      assertTrue(boolean4 == boolean0);
      assertFalse(boolean4 == boolean3);
      assertTrue(boolean4 == boolean1);
      assertFalse(boolean4 == boolean2);
      assertEquals(1, charSequenceArray0.length);
      
      String string6 = StringUtils.deleteWhitespace("");
      assertEquals("", string6);
      assertTrue(string6.equals((Object)string1));
      assertTrue(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string3));
      assertTrue(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string0));
      assertNotNull(string6);
      
      String string7 = StringUtils.replaceFirst("ch", "java.lang.Object@32aa197b", "");
      assertEquals("ch", string7);
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string6));
      assertNotNull(string7);
      
      boolean boolean5 = StringUtils.isNumeric("");
      assertFalse(boolean5);
      assertTrue(boolean5 == boolean3);
      assertFalse(boolean5 == boolean4);
      assertFalse(boolean5 == boolean0);
      assertTrue(boolean5 == boolean2);
      assertFalse(boolean5 == boolean1);
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = "...";
      stringArray0[1] = "";
      stringArray0[2] = "java.lang.Object@32aa197b";
      String[] stringArray1 = StringUtils.stripAll(stringArray0, "od&s310)%'s");
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(3, stringArray0.length);
      assertEquals(3, stringArray1.length);
      
      boolean boolean6 = StringUtils.containsOnly((CharSequence) "", "");
      assertTrue(boolean6);
      assertFalse(boolean6 == boolean5);
      assertTrue(boolean6 == boolean0);
      assertFalse(boolean6 == boolean2);
      assertTrue(boolean6 == boolean1);
      assertTrue(boolean6 == boolean4);
      assertFalse(boolean6 == boolean3);
  }

  @Test(timeout = 4000)
  public void test531()  throws Throwable  {
      String string0 = "2";
      int int0 = 5899;
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      charSequenceArray0[0] = (CharSequence) "2";
      boolean boolean0 = StringUtils.containsWhitespace("\r");
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        StringUtils.replaceFirst("\r", "G^7|+zFpb:oK?5", "\r");
        fail("Expecting exception: PatternSyntaxException");
      
      } catch(PatternSyntaxException e) {
         //
         // Dangling meta character '+' near index 4
         // G^7|+zFpb:oK?5
         //     ^
         //
         verifyException("java.util.regex.Pattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test532()  throws Throwable  {
      String string0 = StringUtils.deleteWhitespace("8c>!) u,eei!\"I2yC-U");
      assertEquals("8c>!)u,eei!\"I2yC-U", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.countMatches((CharSequence) "8c>!)u,eei!\"I2yC-U", 'v');
      assertEquals(0, int0);
      
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      String string1 = "OY";
      Locale locale0 = new Locale("OY", "8c>!) u,eei!\"I2yC-U");
      assertEquals("oy_8C>!) U,EEI!\"I2YC-U", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("oy", locale0.getLanguage());
      assertEquals("8C>!) U,EEI!\"I2YC-U", locale0.getCountry());
      assertNotNull(locale0);
      
      String string2 = locale0.getDisplayLanguage();
      assertEquals("oy", string2);
      assertEquals("oy_8C>!) U,EEI!\"I2YC-U", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("oy", locale0.getLanguage());
      assertEquals("8C>!) U,EEI!\"I2YC-U", locale0.getCountry());
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      String string3 = locale0.getDisplayName();
      assertEquals("oy (8C>!) U,EEI!\"I2YC-U)", string3);
      assertEquals("oy_8C>!) U,EEI!\"I2YC-U", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("oy", locale0.getLanguage());
      assertEquals("8C>!) U,EEI!\"I2YC-U", locale0.getCountry());
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      
      CharSequence[] charSequenceArray0 = new CharSequence[7];
      charSequenceArray0[0] = (CharSequence) "OY";
      charSequenceArray0[1] = (CharSequence) "8c>!) u,eei!\"I2yC-U";
      charSequenceArray0[2] = (CharSequence) "8c>!)u,eei!\"I2yC-U";
      charSequenceArray0[3] = (CharSequence) "oy";
      charSequenceArray0[4] = (CharSequence) "oy (8C>!) U,EEI!\"I2YC-U)";
      charSequenceArray0[5] = (CharSequence) "8c>!)u,eei!\"I2yC-U";
      charSequenceArray0[6] = (CharSequence) "8c>!)u,eei!\"I2yC-U";
      boolean boolean0 = StringUtils.containsAny((CharSequence) "oy (8C>!) U,EEI!\"I2YC-U)", charSequenceArray0);
      assertTrue(boolean0);
      assertEquals(7, charSequenceArray0.length);
      
      String string4 = "gG?Vy|HJ0";
      String string5 = StringUtils.deleteWhitespace("gG?Vy|HJ0");
      assertEquals("gG?Vy|HJ0", string5);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertTrue(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertNotNull(string5);
      
      // Undeclared exception!
      try { 
        StringUtils.replaceFirst("gG?Vy|HJ0", "8c>!) u,eei!\"I2yC-U", "OY");
        fail("Expecting exception: PatternSyntaxException");
      
      } catch(PatternSyntaxException e) {
         //
         // Unmatched closing ')' near index 3
         // 8c>!) u,eei!\"I2yC-U
         //    ^
         //
         verifyException("java.util.regex.Pattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test533()  throws Throwable  {
      boolean boolean0 = StringUtils.isNumeric("F1~Sp}mS5");
      assertFalse(boolean0);
      
      String string0 = StringUtils.overlay("", "[ R4Pk;9", 4448, 4448);
      assertEquals("[ R4Pk;9", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.unwrap("Array element }yrRfNpTa/@3(+m", "The character ");
      assertEquals("Array element }yrRfNpTa/@3(+m", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      boolean boolean1 = StringUtils.contains((CharSequence) "[ R4Pk;9", (CharSequence) "The character ");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test534()  throws Throwable  {
      String string0 = StringUtils.substringBeforeLast("", "Minimum abbreviation width is %d");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.uncapitalize(" ");
      assertEquals(" ", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) " ";
      objectArray0[1] = (Object) "";
      String string2 = StringUtils.join(objectArray0);
      assertEquals(" ", string2);
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals(2, objectArray0.length);
      
      int int0 = StringUtils.lastOrdinalIndexOf("Minimum abbreviation width is %d", "Minimum abbreviation width is %d", 0);
      assertEquals((-1), int0);
      
      String string3 = StringUtils.substringBetween((String) null, " ");
      assertNull(string3);
      
      boolean boolean0 = StringUtils.containsWhitespace("");
      assertFalse(boolean0);
      
      String string4 = StringUtils.rightPad((String) null, 1042, '`');
      assertNull(string4);
      
      String string5 = StringUtils.replaceAll("", "The Array must not be null", " ");
      assertEquals("", string5);
      assertTrue(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertNotNull(string5);
      
      String string6 = StringUtils.replaceChars((String) null, "", "The Array must not be null");
      assertNull(string6);
      
      int int1 = StringUtils.indexOf((CharSequence) " ", (int) '`');
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test535()  throws Throwable  {
      String string0 = StringUtils.join((byte[]) null, 'T');
      assertNull(string0);
      
      String string1 = StringUtils.replaceOnceIgnoreCase("X<<", (String) null, "X<<");
      assertEquals("X<<", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.substringAfterLast("X<<", 1120);
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test536()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      charSequenceArray0[0] = (CharSequence) "0FO5}hhQ5YS+G9";
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      int int0 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)95;
      byteArray0[1] = (byte) (-11);
      String string0 = StringUtils.join(byteArray0, '(');
      assertArrayEquals(new byte[] {(byte)95, (byte) (-11)}, byteArray0);
      assertEquals("95(-11", string0);
      assertNotNull(string0);
      assertEquals(2, byteArray0.length);
      
      String string1 = StringUtils.repeat("\r", 37);
      assertEquals("\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.isAnyEmpty(charSequenceArray0);
      assertTrue(boolean0);
      assertEquals(4, charSequenceArray0.length);
  }

  @Test(timeout = 4000)
  public void test537()  throws Throwable  {
      String string0 = StringUtils.upperCase("Strings must not be null");
      assertEquals("STRINGS MUST NOT BE NULL", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.deleteWhitespace("Dh<PG9l");
      assertEquals("Dh<PG9l", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.isAllUpperCase("Dh<PG9l");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isNotEmpty("Dh<PG9l");
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      char[] charArray0 = new char[3];
      charArray0[0] = '$';
      charArray0[1] = 'v';
      charArray0[2] = 'O';
      boolean boolean2 = StringUtils.containsNone((CharSequence) "Dh<PG9l", charArray0);
      assertArrayEquals(new char[] {'$', 'v', 'O'}, charArray0);
      assertTrue(boolean2);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertEquals(3, charArray0.length);
      
      boolean boolean3 = StringUtils.isAlphanumeric("Strings must not be null");
      assertFalse(boolean3);
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3 == boolean2);
      
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      charSequenceArray0[0] = (CharSequence) "Dh<PG9l";
      charSequenceArray0[1] = (CharSequence) "Dh<PG9l";
      charSequenceArray0[2] = (CharSequence) "Dh<PG9l";
      charSequenceArray0[3] = (CharSequence) "Dh<PG9l";
      boolean boolean4 = StringUtils.isNoneBlank(charSequenceArray0);
      assertTrue(boolean4);
      assertTrue(boolean4 == boolean1);
      assertTrue(boolean4 == boolean2);
      assertFalse(boolean4 == boolean0);
      assertFalse(boolean4 == boolean3);
      assertEquals(4, charSequenceArray0.length);
      
      String string2 = StringUtils.substringBetween("Minimum abbreviation width with offset is %d", "\rArray element ", "org.apache.commons.lang3.StringUtils");
      assertNull(string2);
      
      int[] intArray0 = StringUtils.toCodePoints(charSequenceArray0[1]);
      assertArrayEquals(new int[] {68, 104, 60, 80, 71, 57, 108}, intArray0);
      assertNotNull(intArray0);
      assertEquals(7, intArray0.length);
      assertEquals(4, charSequenceArray0.length);
      
      String string3 = StringUtils.center("Dh<PG9l", (-1), '3');
      assertEquals("Dh<PG9l", string3);
      assertFalse(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string1));
      assertNotNull(string3);
      
      String string4 = StringUtils.chomp("Minimum abbreviation width with offset is %d");
      assertEquals("Minimum abbreviation width with offset is %d", string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertNotNull(string4);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("Minimum abbreviation width with offset is %d", "[D/.5Q]{sGZM2sH<]");
      assertNotNull(stringArray0);
      assertEquals(4, stringArray0.length);
      
      boolean boolean5 = StringUtils.isAlphanumericSpace("STRINGS MUST NOT BE NULL");
      assertTrue(boolean5);
      assertFalse(boolean5 == boolean0);
      assertTrue(boolean5 == boolean4);
      assertFalse(boolean5 == boolean3);
      assertTrue(boolean5 == boolean2);
      assertTrue(boolean5 == boolean1);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)98;
      byteArray0[1] = (byte)56;
      byteArray0[2] = (byte) (-98);
      byteArray0[3] = (byte) (-67);
      byteArray0[4] = (byte)39;
      byteArray0[5] = (byte)32;
      byteArray0[6] = (byte) (-9);
      byteArray0[7] = (byte)25;
      String string5 = StringUtils.join(byteArray0, 'v');
      assertArrayEquals(new byte[] {(byte)98, (byte)56, (byte) (-98), (byte) (-67), (byte)39, (byte)32, (byte) (-9), (byte)25}, byteArray0);
      assertEquals("98v56v-98v-67v39v32v-9v25", string5);
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertNotNull(string5);
      assertEquals(8, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test538()  throws Throwable  {
      String string0 = "l(c\"B4`q5AeDf\"5{";
      String[] stringArray0 = StringUtils.splitByCharacterType("l(c\"B4`q5AeDf\"5{");
      assertNotNull(stringArray0);
      assertEquals(16, stringArray0.length);
      
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "_", "_");
      assertTrue(boolean0);
      
      String string1 = "Object varargs must not be null";
      // Undeclared exception!
      try { 
        StringUtils.replaceEachRepeatedly("l(c\"B4`q5AeDf\"5{", stringArray0, stringArray0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Aborting to protect against StackOverflowError - output of one loop is the input of another
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test539()  throws Throwable  {
      Object[] objectArray0 = new Object[7];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      objectArray0[1] = object1;
      Object object2 = new Object();
      assertFalse(object2.equals((Object)object1));
      assertFalse(object2.equals((Object)object0));
      assertNotNull(object2);
      
      objectArray0[2] = object2;
      Object object3 = new Object();
      assertFalse(object3.equals((Object)object2));
      assertFalse(object3.equals((Object)object0));
      assertFalse(object3.equals((Object)object1));
      assertNotNull(object3);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "\n\n";
      // Undeclared exception!
      try { 
        StringUtils.replaceEachRepeatedly("\n\n", stringArray0, stringArray0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Aborting to protect against StackOverflowError - output of one loop is the input of another
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test540()  throws Throwable  {
      String string0 = StringUtils.normalizeSpace("");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "-Z!#0INiy1>W";
      stringArray0[1] = "";
      // Undeclared exception!
      try { 
        StringUtils.replaceEachRepeatedly("-Z!#0INiy1>W", stringArray0, stringArray0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Aborting to protect against StackOverflowError - output of one loop is the input of another
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test541()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "";
      String string0 = "";
      String string1 = "TX,]vxV Zlf'RVj3?Y";
      String string2 = StringUtils.replaceIgnoreCase("TX,]vxV Zlf'RVj3?Y", "", "");
      assertEquals("TX,]vxV Zlf'RVj3?Y", string2);
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertNotNull(string2);
      
      boolean boolean0 = StringUtils.containsAnyIgnoreCase("TX,]vxV Zlf'RVj3?Y", stringArray0);
      assertTrue(boolean0);
      assertEquals(8, stringArray0.length);
      
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)55;
      byteArray0[1] = (byte) (-67);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)79;
      byteArray0[4] = (byte)108;
      byteArray0[5] = (byte)42;
      // Undeclared exception!
      try { 
        StringUtils.toString(byteArray0, "TX,]vxV Zlf'RVj3?Y");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // TX,]vxV Zlf'RVj3?Y
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test542()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = '2';
      charArray0[1] = '2';
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)107;
      byteArray0[1] = (byte)36;
      byteArray0[2] = (byte)87;
      // Undeclared exception!
      try { 
        StringUtils.toString(byteArray0, "pHw4*K");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // pHw4*K
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test543()  throws Throwable  {
      String string0 = StringUtils.rightPad("Object varargs must not be null", 48, "/T1[");
      assertEquals("Object varargs must not be null/T1[/T1[/T1[/T1[/", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOf((CharSequence) null, (CharSequence) null);
      assertEquals((-1), int0);
      
      String string1 = StringUtils.defaultString("jK,YQ");
      assertEquals("jK,YQ", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      boolean boolean0 = StringUtils.equalsAny("Object varargs must not be null", charSequenceArray0);
      assertFalse(boolean0);
      assertEquals(0, charSequenceArray0.length);
      
      String string2 = StringUtils.replaceFirst("fTafQ:saQ}D8[+", "Object varargs must not be null", "offset cannot be negative");
      assertEquals("fTafQ:saQ}D8[+", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      boolean boolean1 = StringUtils.containsIgnoreCase("/T1[", "Object varargs must not be null");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test544()  throws Throwable  {
      String string0 = StringUtils.rightPad("#", 0, "F1~Sp}mS5");
      assertEquals("#", string0);
      assertNotNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[8];
      String string1 = StringUtils.deleteWhitespace("F1~Sp}mS5");
      assertEquals("F1~Sp}mS5", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.isAlphanumeric("F1~Sp}mS5");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.containsAny((CharSequence) "#", charSequenceArray0);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals(8, charSequenceArray0.length);
      
      String string2 = StringUtils.replaceFirst("F1~Sp}mS5", "F1~Sp}mS5", "");
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      boolean boolean2 = StringUtils.isNumeric(charSequenceArray0[0]);
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertEquals(8, charSequenceArray0.length);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "F1~Sp}mS5";
      String[] stringArray1 = StringUtils.stripAll(stringArray0, "Arguments cannot both be null");
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(1, stringArray0.length);
      assertEquals(1, stringArray1.length);
      
      boolean boolean3 = StringUtils.isAlphanumeric(charSequenceArray0[0]);
      assertFalse(boolean3);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertEquals(8, charSequenceArray0.length);
  }

  @Test(timeout = 4000)
  public void test545()  throws Throwable  {
      String string0 = StringUtils.upperCase("Strings must not be null");
      assertEquals("STRINGS MUST NOT BE NULL", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.deleteWhitespace("Dh<PG9l");
      assertEquals("Dh<PG9l", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.isAllUpperCase("Dh<PG9l");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isNotEmpty("Dh<PG9l");
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      char[] charArray0 = new char[3];
      charArray0[0] = '$';
      charArray0[1] = 'v';
      charArray0[2] = 'O';
      boolean boolean2 = StringUtils.containsNone((CharSequence) "Dh<PG9l", charArray0);
      assertArrayEquals(new char[] {'$', 'v', 'O'}, charArray0);
      assertTrue(boolean2);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertEquals(3, charArray0.length);
      
      boolean boolean3 = StringUtils.isAlphanumeric("Strings must not be null");
      assertFalse(boolean3);
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3 == boolean2);
      
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      Object object0 = new Object();
      assertNotNull(object0);
      
      String string2 = StringUtils.join((Object[]) charSequenceArray0, "STRINGS MUST NOT BE NULL", 10, 10);
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals(4, charSequenceArray0.length);
      
      String string3 = StringUtils.wrap("{", ", '");
      assertEquals(", '{, '", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      
      boolean boolean4 = StringUtils.equalsIgnoreCase("{", ", '");
      assertFalse(boolean4);
      assertTrue(boolean4 == boolean0);
      assertTrue(boolean4 == boolean3);
      assertFalse(boolean4 == boolean1);
      assertFalse(boolean4 == boolean2);
      
      Locale locale0 = new Locale("{Vq~{^r:;dPMcDC7", "The String must not be empty");
      assertEquals("{vq~{^r:;dpmcdc7", locale0.getLanguage());
      assertEquals("THE STRING MUST NOT BE EMPTY", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("{vq~{^r:;dpmcdc7_THE STRING MUST NOT BE EMPTY", locale0.toString());
      assertNotNull(locale0);
      
      String string4 = locale0.getDisplayLanguage();
      assertEquals("{vq~{^r:;dpmcdc7", string4);
      assertEquals("{vq~{^r:;dpmcdc7", locale0.getLanguage());
      assertEquals("THE STRING MUST NOT BE EMPTY", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("{vq~{^r:;dpmcdc7_THE STRING MUST NOT BE EMPTY", locale0.toString());
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertNotNull(string4);
      
      String string5 = StringUtils.upperCase("A", locale0);
      assertEquals("A", string5);
      assertEquals("{vq~{^r:;dpmcdc7", locale0.getLanguage());
      assertEquals("THE STRING MUST NOT BE EMPTY", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("{vq~{^r:;dpmcdc7_THE STRING MUST NOT BE EMPTY", locale0.toString());
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertNotNull(string5);
      
      String string6 = StringUtils.defaultString("Dh<PG9l");
      assertEquals("Dh<PG9l", string6);
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string2));
      assertTrue(string6.equals((Object)string1));
      assertNotNull(string6);
      
      String string7 = StringUtils.repeat("{", (-696));
      assertEquals("", string7);
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string1));
      assertNotNull(string7);
  }

  @Test(timeout = 4000)
  public void test546()  throws Throwable  {
      String[] stringArray0 = new String[0];
      String string0 = StringUtils.getCommonPrefix(stringArray0);
      assertEquals("", string0);
      assertNotNull(string0);
      assertEquals(0, stringArray0.length);
      
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      // Undeclared exception!
      try { 
        StringUtils.join(booleanArray0, 'A', 4, 35);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test547()  throws Throwable  {
      String[] stringArray0 = new String[0];
      String string0 = StringUtils.getCommonPrefix(stringArray0);
      assertEquals("", string0);
      assertNotNull(string0);
      assertEquals(0, stringArray0.length);
      
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      // Undeclared exception!
      try { 
        StringUtils.join(booleanArray0, 'A', 4, 13);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test548()  throws Throwable  {
      String string0 = StringUtils.repeat("", "", 0);
      assertEquals("", string0);
      assertNotNull(string0);
      
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = true;
      booleanArray0[5] = false;
      String string1 = StringUtils.wrapIfMissing(" ", 'b');
      assertEquals("b b", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test549()  throws Throwable  {
      String[] stringArray0 = new String[13];
      stringArray0[1] = "";
      String string0 = StringUtils.firstNonBlank(stringArray0);
      assertNull(string0);
      assertEquals(13, stringArray0.length);
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = 1383.2F;
      floatArray0[3] = (-2836.3674F);
      boolean boolean0 = StringUtils.startsWith("", "");
      assertTrue(boolean0);
      
      String string1 = StringUtils.firstNonEmpty(stringArray0);
      assertNull(string1);
      assertEquals(13, stringArray0.length);
      
      String string2 = StringUtils.replaceIgnoreCase("", ")n", "org.apache.commons.lang3.LocaleUtils");
      assertEquals("", string2);
      assertNotNull(string2);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "", (CharSequence) null, (-214));
      assertEquals((-1), int0);
      
      char[] charArray0 = new char[0];
      int int1 = StringUtils.indexOfAnyBut((CharSequence) null, charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      assertEquals(0, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test550()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      String string0 = StringUtils.getDigits("");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.strip("", "[ R4Pk;9");
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "", (CharSequence) "", 2304);
      assertEquals(0, int0);
      
      String string2 = StringUtils.remove("", (String) null);
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertNotNull(string2);
      
      String string3 = StringUtils.abbreviate("bdGMinimum abbreviation width is %d", 0, 1376);
      assertEquals("bdGMinimum abbreviation width is %d", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
  }

  @Test(timeout = 4000)
  public void test551()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = '2';
      charArray0[1] = 'a';
      charArray0[2] = '&';
      String string0 = StringUtils.removeEndIgnoreCase("ILg", "ILg");
      assertEquals("", string0);
      assertNotNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[8];
      charSequenceArray0[0] = (CharSequence) "ILg";
      String string1 = StringUtils.join((Object[]) charSequenceArray0, 'n');
      assertEquals("ILgnnnnnnn", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(8, charSequenceArray0.length);
      
      charSequenceArray0[1] = (CharSequence) "ILgnnnnnnn";
      charSequenceArray0[2] = (CharSequence) "ILg";
      charSequenceArray0[3] = (CharSequence) "";
      String string2 = StringUtils.substringBetween("org.apache.commons.lang3.CharSequenceUtils", "ILg", "");
      assertNull(string2);
      
      charSequenceArray0[4] = (CharSequence) null;
      charSequenceArray0[5] = (CharSequence) "ILg";
      char[] charArray1 = new char[9];
      assertFalse(charArray1.equals((Object)charArray0));
      
      charArray1[0] = '&';
      charArray1[1] = 'n';
      charArray1[2] = 'S';
      charArray1[3] = 'a';
      charArray1[4] = 'S';
      charArray1[5] = '&';
      charArray1[6] = 'a';
      charArray1[7] = 'n';
      charArray1[8] = 'n';
      String string3 = StringUtils.join(charArray1, 'w', 3810, 3810);
      assertArrayEquals(new char[] {'&', 'n', 'S', 'a', 'S', '&', 'a', 'n', 'n'}, charArray1);
      assertEquals("", string3);
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string0));
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(string3);
      assertNotSame(charArray1, charArray0);
      assertEquals(9, charArray1.length);
      
      charSequenceArray0[6] = (CharSequence) "";
      charSequenceArray0[7] = (CharSequence) "ILg";
      boolean boolean0 = StringUtils.equalsAnyIgnoreCase("", charSequenceArray0);
      assertTrue(boolean0);
      assertEquals(8, charSequenceArray0.length);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "", (CharSequence) "ILg", 256);
      assertEquals((-1), int0);
      
      String string4 = StringUtils.remove((String) null, "[D/.5Q]{sGZM2sH<]");
      assertNull(string4);
  }

  @Test(timeout = 4000)
  public void test552()  throws Throwable  {
      String string0 = StringUtils.reverse("");
      assertEquals("", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isEmpty("");
      assertTrue(boolean0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "";
      boolean boolean1 = StringUtils.isAllEmpty((CharSequence[]) null);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      char[] charArray0 = new char[0];
      String string1 = StringUtils.join(charArray0, 'E', 0, 0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(0, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test553()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "";
      charSequenceArray0[2] = (CharSequence) "";
      String string0 = StringUtils.appendIfMissingIgnoreCase("", "", charSequenceArray0);
      assertEquals("", string0);
      assertNotNull(string0);
      assertEquals(3, charSequenceArray0.length);
      
      String string1 = "VbdG";
      String string2 = StringUtils.removeEnd("VbdG", "...");
      assertEquals("VbdG", string2);
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      // Undeclared exception!
      try { 
        StringUtils.abbreviate(" in an array of ", "tF2]5y 6~", (-712));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum abbreviation width is 11
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test554()  throws Throwable  {
      String string0 = "";
      boolean boolean0 = StringUtils.isAlphanumeric("");
      assertFalse(boolean0);
      
      Stack<Locale.Category> stack0 = new Stack<Locale.Category>();
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertNotNull(stack0);
      
      // Undeclared exception!
      try { 
        StringUtils.truncate(", Length: 0", (-52), (-3332));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // offset cannot be negative
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test555()  throws Throwable  {
      String string0 = StringUtils.reverse("");
      assertEquals("", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isEmpty("");
      assertTrue(boolean0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[0] = (CharSequence) "";
      Charset charset0 = Charset.defaultCharset();
      assertEquals("UTF-8", charset0.toString());
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.name());
      assertTrue(charset0.isRegistered());
      assertNotNull(charset0);
      
      byte[] byteArray0 = StringUtils.getBytes("<", charset0);
      assertArrayEquals(new byte[] {(byte)60}, byteArray0);
      assertEquals("UTF-8", charset0.toString());
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.name());
      assertTrue(charset0.isRegistered());
      assertNotNull(byteArray0);
      assertEquals(1, byteArray0.length);
      
      String string1 = StringUtils.repeat("<", "", (-2125));
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      CharBuffer charBuffer0 = CharBuffer.wrap(charSequenceArray0[0]);
      assertEquals(0, charBuffer0.position());
      assertTrue(charBuffer0.isReadOnly());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.limit());
      assertEquals(0, charBuffer0.length());
      assertFalse(charBuffer0.hasRemaining());
      assertEquals("", charBuffer0.toString());
      assertEquals(0, charBuffer0.remaining());
      assertEquals(0, charBuffer0.capacity());
      assertFalse(charBuffer0.hasArray());
      assertNotNull(charBuffer0);
      assertEquals(2, charSequenceArray0.length);
      
      CharBuffer charBuffer1 = StringUtils.firstNonEmpty((CharBuffer[]) null);
      assertNull(charBuffer1);
  }

  @Test(timeout = 4000)
  public void test556()  throws Throwable  {
      String string0 = StringUtils.firstNonEmpty((String[]) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test557()  throws Throwable  {
      String string0 = StringUtils.CR;
      assertEquals("\r", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isNotBlank("\r");
      assertFalse(boolean0);
      
      String string1 = StringUtils.substringBefore("", (-2053));
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      boolean boolean1 = StringUtils.endsWith("", "\r");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      Charset charset0 = Charset.defaultCharset();
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.toString());
      assertNotNull(charset0);
      
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(2951);
      assertEquals(2951, byteBuffer0.limit());
      assertEquals(2951, byteBuffer0.capacity());
      assertTrue(byteBuffer0.hasRemaining());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertEquals(0, byteBuffer0.position());
      assertFalse(byteBuffer0.isDirect());
      assertEquals(2951, byteBuffer0.remaining());
      assertEquals("java.nio.HeapByteBuffer[pos=0 lim=2951 cap=2951]", byteBuffer0.toString());
      assertFalse(byteBuffer0.isReadOnly());
      assertTrue(byteBuffer0.hasArray());
      assertNotNull(byteBuffer0);
      
      CharBuffer charBuffer0 = charset0.decode(byteBuffer0);
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.toString());
      assertEquals(2951, byteBuffer0.position());
      assertEquals(2951, byteBuffer0.limit());
      assertEquals(0, byteBuffer0.remaining());
      assertEquals(2951, byteBuffer0.capacity());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertEquals("java.nio.HeapByteBuffer[pos=2951 lim=2951 cap=2951]", byteBuffer0.toString());
      assertFalse(byteBuffer0.isDirect());
      assertFalse(byteBuffer0.isReadOnly());
      assertFalse(byteBuffer0.hasRemaining());
      assertTrue(byteBuffer0.hasArray());
      assertEquals(2951, charBuffer0.limit());
      assertTrue(charBuffer0.hasRemaining());
      assertFalse(charBuffer0.isDirect());
      assertEquals(2951, charBuffer0.remaining());
      assertEquals(2951, charBuffer0.capacity());
      assertEquals(0, charBuffer0.arrayOffset());
      assertTrue(charBuffer0.hasArray());
      assertEquals(2951, charBuffer0.length());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.position());
      assertNotNull(charBuffer0);
      
      ByteBuffer byteBuffer1 = charset0.encode(charBuffer0);
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.toString());
      assertEquals(2951, byteBuffer0.position());
      assertEquals(2951, byteBuffer0.limit());
      assertEquals(0, byteBuffer0.remaining());
      assertEquals(2951, byteBuffer0.capacity());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertEquals("java.nio.HeapByteBuffer[pos=2951 lim=2951 cap=2951]", byteBuffer0.toString());
      assertFalse(byteBuffer0.isDirect());
      assertFalse(byteBuffer0.isReadOnly());
      assertFalse(byteBuffer0.hasRemaining());
      assertTrue(byteBuffer0.hasArray());
      assertEquals("", charBuffer0.toString());
      assertEquals(2951, charBuffer0.limit());
      assertFalse(charBuffer0.isDirect());
      assertEquals(2951, charBuffer0.capacity());
      assertEquals(2951, charBuffer0.position());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(0, charBuffer0.remaining());
      assertTrue(charBuffer0.hasArray());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.length());
      assertFalse(charBuffer0.hasRemaining());
      assertTrue(byteBuffer1.hasRemaining());
      assertEquals(2951, byteBuffer1.remaining());
      assertEquals(2951, byteBuffer1.limit());
      assertEquals(0, byteBuffer1.arrayOffset());
      assertFalse(byteBuffer1.isDirect());
      assertEquals(3246, byteBuffer1.capacity());
      assertFalse(byteBuffer1.isReadOnly());
      assertEquals(0, byteBuffer1.position());
      assertEquals("java.nio.HeapByteBuffer[pos=0 lim=2951 cap=3246]", byteBuffer1.toString());
      assertTrue(byteBuffer1.hasArray());
      assertFalse(byteBuffer1.equals((Object)byteBuffer0));
      assertNotNull(byteBuffer1);
      assertNotSame(byteBuffer0, byteBuffer1);
      assertNotSame(byteBuffer1, byteBuffer0);
      
      byte[] byteArray0 = StringUtils.getBytes((String) null, charset0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.toString());
      assertNotNull(byteArray0);
      assertEquals(0, byteArray0.length);
      
      String string2 = StringUtils.repeat("", "", (-2053));
      assertEquals("", string2);
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      CharBuffer charBuffer1 = CharBuffer.wrap((CharSequence) "U*P&(iDWS 'U");
      assertTrue(charBuffer1.isReadOnly());
      assertEquals(0, charBuffer1.position());
      assertEquals(12, charBuffer1.remaining());
      assertEquals(12, charBuffer1.capacity());
      assertEquals(12, charBuffer1.limit());
      assertTrue(charBuffer1.hasRemaining());
      assertEquals(12, charBuffer1.length());
      assertEquals("U*P&(iDWS 'U", charBuffer1.toString());
      assertFalse(charBuffer1.hasArray());
      assertFalse(charBuffer1.isDirect());
      assertFalse(charBuffer1.equals((Object)charBuffer0));
      assertNotNull(charBuffer1);
      
      CharBuffer charBuffer2 = StringUtils.firstNonEmpty((CharBuffer[]) null);
      assertNull(charBuffer2);
      
      // Undeclared exception!
      try { 
        StringUtils.truncate("", 2951, (-2053));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // maxWith cannot be negative
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test558()  throws Throwable  {
      String string0 = StringUtils.SPACE;
      assertEquals(" ", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.removeStart(" ", " ");
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.deleteWhitespace("Aborting to protect against StackOverflowError - output of one loop is the input of another");
      assertEquals("AbortingtoprotectagainstStackOverflowError-outputofoneloopistheinputofanother", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      charSequenceArray0[0] = (CharSequence) ")%";
      charSequenceArray0[1] = (CharSequence) "LN)4";
      charSequenceArray0[2] = (CharSequence) "";
      boolean boolean0 = StringUtils.equalsAnyIgnoreCase("Aborting to protect against StackOverflowError - output of one loop is the input of another", charSequenceArray0);
      assertFalse(boolean0);
      assertEquals(4, charSequenceArray0.length);
  }

  @Test(timeout = 4000)
  public void test559()  throws Throwable  {
      String string0 = StringUtils.rightPad("", 2986, "");
      assertNotNull(string0);
      
      String string1 = StringUtils.normalizeSpace("");
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      charSequenceArray0[1] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "org.apache.commons.lang3.exception.CloneFailedException";
      charSequenceArray0[2] = (CharSequence) "org.apache.commons.lang3.exception.CloneFailedException";
      boolean boolean0 = StringUtils.isNoneBlank(charSequenceArray0);
      assertFalse(boolean0);
      assertEquals(3, charSequenceArray0.length);
      
      String string2 = StringUtils.normalizeSpace(string0);
      assertEquals("", string2);
      assertFalse(string0.equals((Object)string1));
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      String string3 = StringUtils.chop("Array and element cannot both be nullorg.apache.commons.lang3.exception.CloneFailedException");
      assertEquals("Array and element cannot both be nullorg.apache.commons.lang3.exception.CloneFailedExceptio", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
  }

  @Test(timeout = 4000)
  public void test560()  throws Throwable  {
      Vector<CharBuffer> vector0 = new Vector<CharBuffer>();
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertNotNull(vector0);
      
      String string0 = StringUtils.normalizeSpace("s;t");
      assertEquals("s;t", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test561()  throws Throwable  {
      String string0 = StringUtils.removePattern("Array element ", "");
      assertEquals("Array element ", string0);
      assertNotNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      charSequenceArray0[1] = (CharSequence) "";
      boolean boolean0 = StringUtils.isNoneBlank(charSequenceArray0);
      assertFalse(boolean0);
      assertEquals(5, charSequenceArray0.length);
      
      String string1 = StringUtils.normalizeSpace("+");
      assertEquals("+", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.chop("+");
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test562()  throws Throwable  {
      String string0 = StringUtils.substringBeforeLast("", "Minimum abbreviation width is %d");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.uncapitalize(" ");
      assertEquals(" ", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) " ";
      objectArray0[1] = (Object) "";
      String string2 = StringUtils.join(objectArray0);
      assertEquals(" ", string2);
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals(2, objectArray0.length);
      
      int int0 = StringUtils.lastOrdinalIndexOf("Minimum abbreviation width is %d", "Minimum abbreviation width is %d", 0);
      assertEquals((-1), int0);
      
      String string3 = StringUtils.substringBetween((String) null, " ");
      assertNull(string3);
      
      boolean boolean0 = StringUtils.containsWhitespace("");
      assertFalse(boolean0);
      
      String string4 = StringUtils.rightPad((String) null, 1042, '`');
      assertNull(string4);
      
      String string5 = StringUtils.replaceAll("", "The Array must not be null", " ");
      assertEquals("", string5);
      assertFalse(string5.equals((Object)string1));
      assertTrue(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertNotNull(string5);
      
      String string6 = StringUtils.lowerCase((String) null, (Locale) null);
      assertNull(string6);
      
      String string7 = StringUtils.chomp(" ");
      assertEquals(" ", string7);
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string0));
      assertTrue(string7.equals((Object)string1));
      assertTrue(string7.equals((Object)string2));
      assertNotNull(string7);
      
      String string8 = StringUtils.substringBeforeLast((String) null, " ");
      assertNull(string8);
  }

  @Test(timeout = 4000)
  public void test563()  throws Throwable  {
      String string0 = StringUtils.lowerCase((String) null, (Locale) null);
      assertNull(string0);
      
      String string1 = StringUtils.getDigits("Invalid ");
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.removeStartIgnoreCase("-CfE&", (String) null);
      assertEquals("-CfE&", string2);
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      String string3 = StringUtils.substringBetween("", (String) null);
      assertNull(string3);
      
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "Invalid ", (CharSequence) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test564()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "{}";
      stringArray0[1] = "";
      String string0 = StringUtils.firstNonBlank(stringArray0);
      assertEquals("{}", string0);
      assertNotNull(string0);
      assertEquals(2, stringArray0.length);
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = (-1.0F);
      String string1 = StringUtils.removeIgnoreCase("e{v<'8Xw", "org.apache.commons.lang3.CharSequenceUtils");
      assertEquals("e{v<'8Xw", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.isAlphanumeric("{}");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isWhitespace("");
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test565()  throws Throwable  {
      boolean boolean0 = StringUtils.containsWhitespace("{}");
      assertFalse(boolean0);
      
      String string0 = StringUtils.strip("{}", "FMU|^(<%y~2nhyC55");
      assertEquals("{}", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("4@B=#;P&:.]o>1zT~l");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      String string1 = StringUtils.stripAccents("4@B=#;P&:.]o>1zT~l");
      assertEquals("4@B=#;P&:.]o>1zT~l", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.substringAfterLast("37xdhwPLc^[pXn#^", "Minimum abbreviation width with offset is %d");
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      char[] charArray0 = new char[6];
      charArray0[0] = 'c';
      charArray0[1] = 'c';
      charArray0[2] = 'c';
      charArray0[3] = 'c';
      charArray0[4] = 'c';
      charArray0[5] = 'c';
      int int0 = StringUtils.indexOfAny((CharSequence) "", charArray0);
      assertArrayEquals(new char[] {'c', 'c', 'c', 'c', 'c', 'c'}, charArray0);
      assertEquals((-1), int0);
      assertEquals(6, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test566()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[6];
      charSequenceArray0[0] = null;
      boolean boolean0 = StringUtils.isWhitespace((CharSequence) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test567()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("?!", 'l');
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      String string0 = StringUtils.abbreviate((String) null, "?!", 108, 322);
      assertNull(string0);
      
      String string1 = StringUtils.abbreviate("?!", (String) null, 322, 322);
      assertEquals("?!", string1);
      assertNotNull(string1);
      
      char[] charArray0 = new char[1];
      charArray0[0] = '7';
      int int0 = StringUtils.indexOfAny((CharSequence) null, charArray0);
      assertArrayEquals(new char[] {'7'}, charArray0);
      assertEquals((-1), int0);
      assertEquals(1, charArray0.length);
      
      String string2 = StringUtils.defaultIfEmpty((String) null, (String) null);
      assertNull(string2);
      
      boolean boolean0 = StringUtils.containsNone((CharSequence) null, "?!");
      assertTrue(boolean0);
      
      String string3 = StringUtils.stripEnd((String) null, "?!");
      assertNull(string3);
      
      String string4 = StringUtils.uncapitalize("?!");
      assertEquals("?!", string4);
      assertTrue(string4.equals((Object)string1));
      assertNotNull(string4);
      
      String string5 = StringUtils.center((String) null, 322);
      assertNull(string5);
      
      boolean boolean1 = StringUtils.isWhitespace((CharSequence) null);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      String string6 = StringUtils.repeat((String) null, "?!", 322);
      assertNull(string6);
      
      String string7 = StringUtils.appendIfMissingIgnoreCase((String) null, (CharSequence) null, stringArray0);
      assertNull(string7);
      assertEquals(1, stringArray0.length);
      
      int int1 = StringUtils.indexOfIgnoreCase((CharSequence) null, (CharSequence) "?!", (-1944));
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test568()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = '^';
      charArray0[1] = '\\';
      charArray0[2] = '$';
      charArray0[3] = '|';
      charArray0[4] = 'j';
      charArray0[5] = 'O';
      charArray0[6] = '@';
      charArray0[7] = '\'';
      charArray0[8] = '_';
      int int0 = StringUtils.indexOfAnyBut((CharSequence) null, charArray0);
      assertArrayEquals(new char[] {'^', '\\', '$', '|', 'j', 'O', '@', '\'', '_'}, charArray0);
      assertEquals((-1), int0);
      assertEquals(9, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test569()  throws Throwable  {
      String string0 = StringUtils.LF;
      assertEquals("\n", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.countMatches((CharSequence) null, '$');
      assertEquals(0, int0);
      
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      String string1 = StringUtils.getIfEmpty("[ R4Pk;9Invalid locale format: ", supplier0);
      assertEquals("[ R4Pk;9Invalid locale format: ", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[6];
      charSequenceArray0[4] = (CharSequence) "[ R4Pk;9Invalid locale format: ";
      charSequenceArray0[5] = (CharSequence) "\n";
      int int1 = StringUtils.indexOfAny((CharSequence) "", charSequenceArray0);
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      assertEquals(6, charSequenceArray0.length);
  }

  @Test(timeout = 4000)
  public void test570()  throws Throwable  {
      String string0 = StringUtils.strip("Index: ");
      assertEquals("Index:", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.contains((CharSequence) "Index:", 3);
      assertFalse(boolean0);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("VbdGArray element ", "Index:", 51);
      assertNotNull(stringArray0);
      assertEquals(6, stringArray0.length);
      
      String[] stringArray1 = StringUtils.substringsBetween("7#pdP&C6=5[#|,K1!", "", "7#pdP&C6=5[#|,K1!");
      assertNull(stringArray1);
  }

  @Test(timeout = 4000)
  public void test571()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("\rArray element ", "\rArray element ", 13);
      assertNotNull(stringArray0);
      assertEquals(13, stringArray0.length);
      
      boolean boolean0 = StringUtils.containsNone((CharSequence) "\rArray element ", "a|8K7Kel03%e,");
      assertFalse(boolean0);
      
      int int0 = StringUtils.indexOf((CharSequence) "\rArray element ", (CharSequence) "\rArray element ");
      assertEquals(0, int0);
      
      String string0 = StringUtils.replaceEachRepeatedly("org.apache.commons.lang3.LocaleUtils", stringArray0, stringArray0);
      assertEquals("org.apache.commons.lang3.LocaleUtils", string0);
      assertNotNull(string0);
      assertEquals(13, stringArray0.length);
      
      String string1 = StringUtils.defaultString("", "Aborting to protect against StackOverflowError - output of one loop is the input of another");
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.uncapitalize("org.apache.commons.lang3.LocaleUtils");
      assertEquals("org.apache.commons.lang3.LocaleUtils", string2);
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertNotNull(string2);
      
      String string3 = StringUtils.capitalize("SUbh@ks#)[");
      assertEquals("SUbh@ks#)[", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      
      boolean boolean1 = StringUtils.contains((CharSequence) "org.apache.commons.lang3.LocaleUtils", 127);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 13;
      doubleArray0[1] = (double) 127;
      doubleArray0[2] = (double) 127;
      doubleArray0[3] = (double) 127;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = 1.0;
      doubleArray0[6] = 1046.299543063222;
      // Undeclared exception!
      try { 
        StringUtils.join(doubleArray0, '@', 13, 127);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 13
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test572()  throws Throwable  {
      String string0 = StringUtils.rightPad("#", (-41), "F1~Sp}mS5");
      assertEquals("#", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens(" vs ", "ch", (-41));
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      String[] stringArray1 = StringUtils.substringsBetween("@J(?mTkP%H7vTZ-", "F1~Sp}mS5", "@J(?mTkP%H7vTZ-");
      assertNull(stringArray1);
  }

  @Test(timeout = 4000)
  public void test573()  throws Throwable  {
      String string0 = StringUtils.rightPad("0FO5}hhQ5YS+G9", (-95), '_');
      assertEquals("0FO5}hhQ5YS+G9", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.unwrap("0FO5}hhQ5YS+G9", "[ R4Pk;9Invalid locale format: ");
      assertEquals("0FO5}hhQ5YS+G9", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      LinkedList<Locale> linkedList0 = new LinkedList<Locale>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      String string2 = StringUtils.join((Iterable<?>) linkedList0, '_');
      assertEquals("", string2);
      assertEquals(0, linkedList0.size());
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      CharSequence[] charSequenceArray0 = new CharSequence[20];
      charSequenceArray0[0] = (CharSequence) "0FO5}hhQ5YS+G9";
      charSequenceArray0[1] = (CharSequence) "0FO5}hhQ5YS+G9";
      charSequenceArray0[2] = (CharSequence) "F1~Sp}mS5";
      int int0 = StringUtils.indexOfAny((CharSequence) "", charSequenceArray0);
      assertEquals((-1), int0);
      assertEquals(20, charSequenceArray0.length);
      
      boolean boolean0 = StringUtils.isAlphanumericSpace(charSequenceArray0[1]);
      assertFalse(boolean0);
      assertEquals(20, charSequenceArray0.length);
  }

  @Test(timeout = 4000)
  public void test574()  throws Throwable  {
      String string0 = StringUtils.CR;
      assertEquals("\r", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isNotBlank("\r");
      assertFalse(boolean0);
      
      Charset charset0 = Charset.defaultCharset();
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.name());
      assertTrue(charset0.canEncode());
      assertNotNull(charset0);
      
      String[] stringArray0 = StringUtils.substringsBetween("\r", "\r", "\r");
      assertNull(stringArray0);
      
      String string1 = StringUtils.abbreviate("maxWith cannot be negativ:", 63);
      assertEquals("maxWith cannot be negativ:", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.substringBetween("maxWith cannot be negativ:", "\"+wX\")epw4U(U.e=V\"+wX\")epw4U(U.e=V");
      assertNull(string2);
  }

  @Test(timeout = 4000)
  public void test575()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      char[] charArray0 = new char[9];
      charArray0[0] = 'e';
      charArray0[1] = 'e';
      charArray0[2] = 'e';
      charArray0[3] = 'e';
      charArray0[4] = 'e';
      charArray0[5] = 'e';
      charArray0[6] = 'e';
      charArray0[7] = 'e';
      charArray0[8] = 'e';
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "@", charArray0);
      assertArrayEquals(new char[] {'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e', 'e'}, charArray0);
      assertEquals(0, int0);
      assertEquals(9, charArray0.length);
      
      String string0 = StringUtils.center("@", (-1), 'e');
      assertEquals("@", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.center((String) null, (-146), "@");
      assertNull(string1);
  }

  @Test(timeout = 4000)
  public void test576()  throws Throwable  {
      String string0 = StringUtils.defaultString("offset cannot be negative");
      assertEquals("offset cannot be negative", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.removePattern("offset cannot be negative", "\r");
      assertEquals("offset cannot be negative", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.isAlphanumericSpace("offset cannot be negative");
      assertTrue(boolean0);
      
      boolean boolean1 = StringUtils.isAllLowerCase("\r");
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test577()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = 'X';
      charArray0[1] = 'X';
      String string0 = StringUtils.repeat("s-D4{8$Mo,|,xZ", "s-D4{8$Mo,|,xZ", 4);
      assertEquals("s-D4{8$Mo,|,xZs-D4{8$Mo,|,xZs-D4{8$Mo,|,xZs-D4{8$Mo,|,xZs-D4{8$Mo,|,xZs-D4{8$Mo,|,xZs-D4{8$Mo,|,xZ", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test578()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      String string0 = StringUtils.join((Object[]) charSequenceArray0, 'n');
      assertEquals("", string0);
      assertNotNull(string0);
      assertEquals(1, charSequenceArray0.length);
      
      ArrayList<String> arrayList0 = new ArrayList<String>();
      assertFalse(arrayList0.contains(string0));
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      String string1 = StringUtils.join((List<?>) arrayList0, 'v', (int) 'n', (int) 'n');
      assertFalse(arrayList0.contains(string1));
      assertEquals("", string1);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.lowerCase("", (Locale) null);
      assertEquals("", string2);
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertNotNull(string2);
      
      String string3 = StringUtils.chomp("#");
      assertEquals("#", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
  }

  @Test(timeout = 4000)
  public void test579()  throws Throwable  {
      String string0 = StringUtils.rightPad("...", 1642, "...");
      assertNotNull(string0);
      
      String string1 = StringUtils.substringAfterLast("1bMTy=}", 1642);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      int int0 = StringUtils.countMatches((CharSequence) string0, (CharSequence) string0);
      assertEquals(1, int0);
      assertFalse(string0.equals((Object)string1));
      
      boolean boolean0 = StringUtils.equals((CharSequence) "A", (CharSequence) " has no clone method");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test580()  throws Throwable  {
      String string0 = StringUtils.removeEnd("@", "...");
      assertEquals("@", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test581()  throws Throwable  {
      String string0 = StringUtils.upperCase(", Length: ");
      assertEquals(", LENGTH: ", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isAsciiPrintable((CharSequence) null);
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        CharBuffer.wrap((char[]) null, 0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.HeapCharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test582()  throws Throwable  {
      int[] intArray0 = StringUtils.toCodePoints((CharSequence) null);
      assertNull(intArray0);
      
      boolean boolean0 = StringUtils.isAsciiPrintable((CharSequence) null);
      assertFalse(boolean0);
      
      String string0 = StringUtils.capitalize((String) null);
      assertNull(string0);
      
      int int0 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test583()  throws Throwable  {
      String[] stringArray0 = new String[13];
      stringArray0[1] = "";
      String string0 = StringUtils.firstNonBlank(stringArray0);
      assertNull(string0);
      assertEquals(13, stringArray0.length);
      
      boolean boolean0 = StringUtils.startsWithAny("", stringArray0);
      assertFalse(boolean0);
      assertEquals(13, stringArray0.length);
      
      String string1 = StringUtils.defaultString((String) null);
      assertEquals("", string1);
      assertNotNull(string1);
      
      int[] intArray0 = StringUtils.toCodePoints("");
      assertArrayEquals(new int[] {}, intArray0);
      assertNotNull(intArray0);
      assertEquals(0, intArray0.length);
      
      boolean boolean1 = StringUtils.startsWith("w", "ILg");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String string2 = StringUtils.firstNonEmpty(stringArray0);
      assertNull(string2);
      assertEquals(13, stringArray0.length);
      
      String string3 = StringUtils.replaceIgnoreCase("object", "", "w");
      assertEquals("object", string3);
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) ")n", (CharSequence) "object", 321);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test584()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      String string0 = StringUtils.trimToNull("qD/.5Q]{&GZM2vH<]");
      assertEquals("qD/.5Q]{&GZM2vH<]", string0);
      assertNotNull(string0);
      
      charSequenceArray0[0] = (CharSequence) "qD/.5Q]{&GZM2vH<]";
      String string1 = StringUtils.prependIfMissingIgnoreCase("qD/.5Q]{&GZM2vH<]", "qD/.5Q]{&GZM2vH<]", charSequenceArray0);
      assertEquals("qD/.5Q]{&GZM2vH<]", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(1, charSequenceArray0.length);
      
      String string2 = StringUtils.removeStart("", "qD/.5Q]{&GZM2vH<]");
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      String string3 = StringUtils.substringBeforeLast("U'i{GNK", ")%");
      assertEquals("U'i{GNK", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      
      char[] charArray0 = new char[5];
      charArray0[0] = '@';
      charArray0[1] = 'D';
      charArray0[2] = 'z';
      charArray0[3] = ';';
      String[] stringArray0 = new String[4];
      stringArray0[0] = "";
      stringArray0[1] = ")%";
      stringArray0[2] = "U'i{GNK";
      stringArray0[3] = "Lk\"K";
      String string4 = StringUtils.firstNonEmpty(stringArray0);
      assertEquals(")%", string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertNotNull(string4);
      assertEquals(4, stringArray0.length);
      
      String string5 = StringUtils.chop(")n");
      assertEquals(")", string5);
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertNotNull(string5);
      
      String string6 = StringUtils.replaceIgnoreCase("Mgd*G4H2?f!k%", "Locale must not be null", "qD/.5Q]{&GZM2vH<]");
      assertEquals("Mgd*G4H2?f!k%", string6);
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string1));
      assertNotNull(string6);
  }

  @Test(timeout = 4000)
  public void test585()  throws Throwable  {
      String string0 = StringUtils.leftPad((String) null, (-2646), '?');
      assertNull(string0);
      
      String string1 = StringUtils.substringAfter((String) null, 1);
      assertNull(string1);
      
      String string2 = StringUtils.uncapitalize("Array element VbdG");
      assertEquals("array element VbdG", string2);
      assertNotNull(string2);
      
      Object[] objectArray0 = new Object[0];
      String string3 = StringUtils.joinWith(" has no clone method", objectArray0);
      assertEquals("", string3);
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      assertEquals(0, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test586()  throws Throwable  {
      String string0 = StringUtils.defaultString("Search and Replace array lengths don't match: ");
      assertEquals("Search and Replace array lengths don't match: ", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.containsWhitespace("Search and Replace array lengths don't match: ");
      assertTrue(boolean0);
      
      String string1 = StringUtils.substringAfter("Search and Replace array lengths don't match: ", 2770);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test587()  throws Throwable  {
      String string0 = StringUtils.leftPad("5", 32, '5');
      assertEquals("55555555555555555555555555555555", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.substringAfter("Aborting to protect against StackOverflowError - output of one loop is the input of another", 32);
      assertEquals("to protect against StackOverflowError - output of one loop is the input of another", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      int int0 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test588()  throws Throwable  {
      Object[] objectArray0 = new Object[7];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      objectArray0[1] = object1;
      Object object2 = new Object();
      assertFalse(object2.equals((Object)object0));
      assertFalse(object2.equals((Object)object1));
      assertNotNull(object2);
      
      objectArray0[2] = object2;
      Object object3 = new Object();
      assertFalse(object3.equals((Object)object2));
      assertFalse(object3.equals((Object)object1));
      assertFalse(object3.equals((Object)object0));
      assertNotNull(object3);
      
      objectArray0[3] = object3;
      Object object4 = new Object();
      assertFalse(object4.equals((Object)object2));
      assertFalse(object4.equals((Object)object3));
      assertFalse(object4.equals((Object)object1));
      assertFalse(object4.equals((Object)object0));
      assertNotNull(object4);
      
      objectArray0[4] = object4;
      Object object5 = new Object();
      assertFalse(object5.equals((Object)object1));
      assertFalse(object5.equals((Object)object2));
      assertFalse(object5.equals((Object)object4));
      assertFalse(object5.equals((Object)object0));
      assertFalse(object5.equals((Object)object3));
      assertNotNull(object5);
      
      objectArray0[5] = object5;
      Object object6 = new Object();
      assertFalse(object6.equals((Object)object2));
      assertFalse(object6.equals((Object)object5));
      assertFalse(object6.equals((Object)object4));
      assertFalse(object6.equals((Object)object1));
      assertFalse(object6.equals((Object)object0));
      assertFalse(object6.equals((Object)object3));
      assertNotNull(object6);
      
      objectArray0[6] = object6;
      String string0 = StringUtils.join(objectArray0, 'e', 127, 127);
      assertEquals("", string0);
      assertNotNull(string0);
      assertEquals(7, objectArray0.length);
      
      String string1 = StringUtils.replaceAll("offset cannot be negative", "offset cannot be negative", "Arguments cannot both be null");
      assertEquals("Arguments cannot both be null", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.leftPad("[D/.5Q]{sGZM2sH<] in an array of ", 3094, ';');
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      String string3 = StringUtils.substringAfter("/<:Woi7=B", 3094);
      assertEquals("", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      
      String string4 = StringUtils.uncapitalize("/<:Woi7=B");
      assertEquals("/<:Woi7=B", string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertNotNull(string4);
      
      String string5 = StringUtils.joinWith("t`i>=%!o'3.e&3\"LPhj", objectArray0);
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertNotNull(string5);
      assertEquals(7, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test589()  throws Throwable  {
      String string0 = StringUtils.trimToNull("~Vr");
      assertEquals("~Vr", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.truncate("8pR2B:PK5lx\"7", 0, 32);
      assertEquals("8pR2B:PK5lx\"7", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.deleteWhitespace((String) null);
      assertNull(string2);
      
      int int0 = StringUtils.countMatches((CharSequence) "8pR2B:PK5lx\"7", 'v');
      assertEquals(0, int0);
      
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier0).get();
      String string3 = StringUtils.getIfEmpty((String) null, supplier0);
      assertNull(string3);
  }

  @Test(timeout = 4000)
  public void test590()  throws Throwable  {
      boolean boolean0 = StringUtils.isNotEmpty("");
      assertFalse(boolean0);
      
      String string0 = StringUtils.removeStart("m0G)U4Df(5(R", "m0G)U4Df(5(R");
      assertEquals("", string0);
      assertNotNull(string0);
      
      int[] intArray0 = StringUtils.toCodePoints("");
      assertArrayEquals(new int[] {}, intArray0);
      assertNotNull(intArray0);
      assertEquals(0, intArray0.length);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("", "maxWith cannot be negativeoffset cannot be negative");
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      
      String string1 = StringUtils.wrapIfMissing("66OV26Th<EV5?eU(l>", "m0G)U4Df(5(R");
      assertEquals("m0G)U4Df(5(R66OV26Th<EV5?eU(l>m0G)U4Df(5(R", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "m0G)U4Df(5(R", (CharSequence) "m0G)U4Df(5(R");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test591()  throws Throwable  {
      String string0 = StringUtils.SPACE;
      assertEquals(" ", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.removeStart(" ", " ");
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.replacePattern("", " ", " is not in the range '0' - '9'");
      assertEquals("", string2);
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      String string3 = StringUtils.join((float[]) null, 'G', 110, 428);
      assertNull(string3);
      
      boolean boolean0 = StringUtils.isBlank(" ");
      assertTrue(boolean0);
      
      String string4 = StringUtils.capitalize(" ");
      assertEquals(" ", string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string0));
      assertNotNull(string4);
  }

  @Test(timeout = 4000)
  public void test592()  throws Throwable  {
      String[] stringArray0 = new String[0];
      String string0 = StringUtils.getCommonPrefix(stringArray0);
      assertEquals("", string0);
      assertNotNull(string0);
      assertEquals(0, stringArray0.length);
      
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[1] = true;
      String string1 = StringUtils.repeat((String) null, 111);
      assertNull(string1);
      
      boolean boolean0 = StringUtils.containsNone((CharSequence) null, "");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test593()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      short[] shortArray0 = new short[7];
      shortArray0[1] = (short)94;
      shortArray0[2] = (short)94;
      shortArray0[3] = (short)49;
      shortArray0[4] = (short)94;
      shortArray0[5] = (short)94;
      shortArray0[6] = (short)94;
      String string0 = StringUtils.join(shortArray0, '=');
      assertArrayEquals(new short[] {(short)0, (short)94, (short)94, (short)49, (short)94, (short)94, (short)94}, shortArray0);
      assertEquals("0=94=94=49=94=94=94", string0);
      assertNotNull(string0);
      assertEquals(7, shortArray0.length);
      
      int int0 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      String[] stringArray0 = StringUtils.split("Array element ", '=');
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      String string1 = StringUtils.getCommonPrefix(stringArray0);
      assertEquals("Array element ", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test594()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "{}";
      stringArray0[1] = "{}";
      short[] shortArray0 = new short[0];
      String string0 = StringUtils.join(shortArray0, 's', 3076, (int) (short)437);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals("", string0);
      assertNotNull(string0);
      assertEquals(0, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test595()  throws Throwable  {
      String string0 = StringUtils.reverse("");
      assertEquals("", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isEmpty("");
      assertTrue(boolean0);
      
      char[] charArray0 = new char[8];
      charArray0[0] = '}';
      charArray0[1] = '}';
      charArray0[2] = '}';
      charArray0[5] = '}';
      charArray0[7] = '}';
      boolean boolean1 = StringUtils.containsOnly((CharSequence) "", charArray0);
      assertArrayEquals(new char[] {'}', '}', '}', '\u0000', '\u0000', '}', '\u0000', '}'}, charArray0);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals(8, charArray0.length);
      
      String string1 = StringUtils.substringBefore("[~B4m{N_y", "[~B4m{N_y");
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "", (CharSequence) "");
      assertEquals(0, int0);
      
      String string2 = StringUtils.unwrap("", '0');
      assertEquals("", string2);
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test596()  throws Throwable  {
      String string0 = StringUtils.replaceAll("Object varargs must not be null", (String) null, "A6");
      assertEquals("Object varargs must not be null", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.unwrap("Supplied value must be a valid byte literal between -32768 and 32767: [", 'H');
      assertEquals("Supplied value must be a valid byte literal between -32768 and 32767: [", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test597()  throws Throwable  {
      boolean boolean0 = StringUtils.isNumeric("8pR2B:PK5lx\"7");
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        StringUtils.getFuzzyDistance("8pR2B:PK5lx\"7", "8pR2B:PK5lx\"7", (Locale) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Locale must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test598()  throws Throwable  {
      String string0 = StringUtils.deleteWhitespace("C1k-7_rbEbjE6eQS8]^");
      assertEquals("C1k-7_rbEbjE6eQS8]^", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isAllUpperCase("C1k-7_rbEbjE6eQS8]^");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isNotEmpty("C1k-7_rbEbjE6eQS8]^");
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      char[] charArray0 = new char[2];
      boolean boolean2 = StringUtils.containsOnly((CharSequence) "C1k-7_rbEbjE6eQS8]^", charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000'}, charArray0);
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertEquals(2, charArray0.length);
      
      String string1 = StringUtils.substringBefore("[~B4m{N_y", "C1k-7_rbEbjE6eQS8]^");
      assertEquals("[~B4m{N_y", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.replaceChars("[~B4m{N_y", 'Y', '<');
      assertEquals("[~B4m{N_y", string2);
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "C1k-7_rbEbjE6eQS8]^", (CharSequence) "[~B4m{N_y");
      assertEquals(19, int0);
      
      String string3 = StringUtils.unwrap("C1k-7_rbEbjE6eQS8]^", '\u0000');
      assertEquals("C1k-7_rbEbjE6eQS8]^", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string0));
      assertNotNull(string3);
      
      String string4 = StringUtils.lowerCase("[~B4m{N_y");
      assertEquals("[~b4m{n_y", string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertNotNull(string4);
      
      int int1 = StringUtils.compare("]L8`:_)l3", "]L8`:_)l3", true);
      assertEquals(0, int1);
      assertFalse(int1 == int0);
      
      String string5 = StringUtils.trimToNull("m:dw,:[G;E7G1fRB6");
      assertEquals("m:dw,:[G;E7G1fRB6", string5);
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertNotNull(string5);
      
      int int2 = StringUtils.getLevenshteinDistance((CharSequence) "[~B4m{N_y", (CharSequence) "m:dw,:[G;E7G1fRB6");
      assertEquals(16, int2);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      
      boolean boolean3 = StringUtils.isBlank("m:dw,:[G;E7G1fRB6");
      assertFalse(boolean3);
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
  }

  @Test(timeout = 4000)
  public void test599()  throws Throwable  {
      String string0 = StringUtils.removePattern("Array element ", "ts");
      assertEquals("Array element ", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isMixedCase("ts");
      assertFalse(boolean0);
      
      int int0 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      String string1 = StringUtils.replaceChars("oJ2D&u?\r ~F]c,Fr,4", (String) null, "Array element ");
      assertEquals("oJ2D&u?\r ~F]c,Fr,4", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.difference("Strings must not be null", "Strings must not be null");
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      String string3 = StringUtils.repeat("h-{e", (-1533));
      assertEquals("", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      
      String string4 = StringUtils.defaultIfEmpty("` Y_ahG#rn6-R8`", "Array element ");
      assertEquals("` Y_ahG#rn6-R8`", string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertNotNull(string4);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "oJ2D&u?\r ~F]c,Fr,4";
      stringArray0[1] = "` Y_ahG#rn6-R8`";
      String string5 = StringUtils.replaceEachRepeatedly("0>> }uD_oiE", stringArray0, stringArray0);
      assertEquals("0>> }uD_oiE", string5);
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertNotNull(string5);
      assertEquals(2, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test600()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      String string0 = StringUtils.join(objectArray0, 'p');
      assertNotNull(string0);
      assertEquals(1, objectArray0.length);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "java.lang.Object@2ebd2fca", (CharSequence) "java.lang.Object@2ebd2fca");
      assertEquals(0, int0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      charSequenceArray0[0] = (CharSequence) "java.lang.Object@2ebd2fca";
      boolean boolean0 = StringUtils.endsWithAny("java.lang.Object@2ebd2fca", charSequenceArray0);
      assertTrue(boolean0);
      assertEquals(1, charSequenceArray0.length);
      
      int int1 = StringUtils.countMatches((CharSequence) "java.lang.Object@2ebd2fca", 'p');
      assertEquals(0, int1);
      assertTrue(int1 == int0);
      
      int int2 = StringUtils.lastIndexOfIgnoreCase(charSequenceArray0[0], (CharSequence) "java.lang.Object@2ebd2fca");
      assertEquals(0, int2);
      assertTrue(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals(1, charSequenceArray0.length);
      
      String string1 = StringUtils.removeStartIgnoreCase("java.lang.Object@2ebd2fca", "java.lang.Object@2ebd2fca");
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.substringAfterLast("java.lang.Object@2ebd2fca", "java.lang.Object@2ebd2fca");
      assertEquals("", string2);
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      boolean boolean1 = StringUtils.startsWithIgnoreCase("", "");
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String string3 = StringUtils.join(objectArray0);
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      assertEquals(1, objectArray0.length);
      
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier0).get();
      String string4 = StringUtils.getIfEmpty("", supplier0);
      assertNull(string4);
      
      int int3 = StringUtils.indexOf((CharSequence) "", 0);
      assertEquals((-1), int3);
      assertFalse(int3 == int2);
      assertFalse(int3 == int1);
      assertFalse(int3 == int0);
      
      boolean boolean2 = StringUtils.isMixedCase("java.lang.Object@2ebd2fca");
      assertTrue(boolean2);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
  }

  @Test(timeout = 4000)
  public void test601()  throws Throwable  {
      String string0 = StringUtils.defaultString("offset cannot be negative");
      assertEquals("offset cannot be negative", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.join((int[]) null, 'P', (int) 'P', (-238));
      assertNull(string1);
      
      String string2 = StringUtils.rotate("Search and Replace array lengths don't match: ", 'P');
      assertEquals("eplace array lengths don't match: Search and R", string2);
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      boolean boolean0 = StringUtils.isMixedCase("eplace array lengths don't match: Search and R");
      assertTrue(boolean0);
      
      boolean boolean1 = StringUtils.isAllUpperCase("eplace array lengths don't match: Search and R");
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      String string3 = StringUtils.substringBeforeLast("w*9u_p$eC/W\"/Xf:", "0E+[Hn8*J/CllO\"");
      assertEquals("w*9u_p$eC/W\"/Xf:", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
  }

  @Test(timeout = 4000)
  public void test602()  throws Throwable  {
      Object[] objectArray0 = new Object[7];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      objectArray0[1] = object1;
      Object object2 = new Object();
      assertFalse(object2.equals((Object)object0));
      assertFalse(object2.equals((Object)object1));
      assertNotNull(object2);
      
      objectArray0[2] = object2;
      String string0 = StringUtils.removeStart((String) null, (String) null);
      assertNull(string0);
      
      String string1 = StringUtils.reverseDelimited((String) null, '{');
      assertNull(string1);
  }

  @Test(timeout = 4000)
  public void test603()  throws Throwable  {
      String string0 = StringUtils.substringAfter("[D/.5Q]{sGZM2sH<] in an array of ", "!");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.trimToNull("");
      assertNull(string1);
      
      String string2 = StringUtils.substringAfterLast(" is not in the range '0' - '9'", 53);
      assertEquals("", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.reverseDelimited("~!%q{-kC<;JCc", '~');
      assertEquals("!%q{-kC<;JCc", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      
      boolean boolean0 = StringUtils.isNumericSpace("~!%q{-kC<;JCc");
      assertFalse(boolean0);
      
      int int0 = StringUtils.compareIgnoreCase("E", (String) null);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test604()  throws Throwable  {
      String string0 = StringUtils.removeEndIgnoreCase("f/w08g/veL6", "f/w08g/veL6");
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOf((CharSequence) "", (-3848));
      assertEquals((-1), int0);
      
      String string1 = StringUtils.lowerCase("");
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      boolean boolean0 = StringUtils.endsWithAny("f/w08g/veL6", charSequenceArray0);
      assertFalse(boolean0);
      assertEquals(0, charSequenceArray0.length);
      
      char[] charArray0 = new char[8];
      charArray0[0] = 'V';
      charArray0[1] = 's';
      charArray0[2] = 'H';
      String string2 = StringUtils.join(charArray0, 'y', 322, 322);
      assertArrayEquals(new char[] {'V', 's', 'H', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals("", string2);
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals(8, charArray0.length);
      
      String string3 = StringUtils.repeat((String) null, 322);
      assertNull(string3);
      
      String string4 = StringUtils.reverseDelimited("Locale must not be null", 'U');
      assertEquals("Locale must not be null", string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertNotNull(string4);
  }

  @Test(timeout = 4000)
  public void test605()  throws Throwable  {
      String string0 = StringUtils.abbreviateMiddle("", "}V", 16);
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.uncapitalize("");
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test606()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("jj4tSm&\"l}{[*1");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test607()  throws Throwable  {
      Object[] objectArray0 = new Object[7];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      objectArray0[1] = object1;
      Object object2 = new Object();
      assertFalse(object2.equals((Object)object0));
      assertFalse(object2.equals((Object)object1));
      assertNotNull(object2);
      
      String string0 = StringUtils.uncapitalize("Invalid locale format: ");
      assertEquals("invalid locale format: ", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.containsIgnoreCase("Invalid locale format: ", "invalid locale format: ");
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        StringUtils.join(objectArray0, 'V', (-1373), 6);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1373
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test608()  throws Throwable  {
      String string0 = StringUtils.substringBeforeLast("", "Minimum abbreviation width is %d");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.uncapitalize(" ");
      assertEquals(" ", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) " ";
      objectArray0[1] = (Object) "";
      String string2 = StringUtils.join(objectArray0);
      assertEquals(" ", string2);
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals(2, objectArray0.length);
      
      int int0 = StringUtils.lastOrdinalIndexOf("Minimum abbreviation width is %d", "Minimum abbreviation width is %d", 0);
      assertEquals((-1), int0);
      
      String string3 = StringUtils.substringBetween((String) null, " ");
      assertNull(string3);
      
      boolean boolean0 = StringUtils.containsWhitespace("");
      assertFalse(boolean0);
      
      String string4 = StringUtils.rightPad((String) null, 1042, '`');
      assertNull(string4);
      
      String string5 = StringUtils.replaceAll("", "The Array must not be null", " ");
      assertEquals("", string5);
      assertTrue(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertNotNull(string5);
      
      String string6 = StringUtils.lowerCase((String) null, (Locale) null);
      assertNull(string6);
      
      char[] charArray0 = new char[8];
      charArray0[0] = '`';
      charArray0[1] = '`';
      charArray0[2] = '`';
      charArray0[3] = '';
      charArray0[4] = '`';
      charArray0[5] = '`';
      charArray0[6] = '`';
      charArray0[7] = '`';
      String string7 = StringUtils.valueOf(charArray0);
      assertArrayEquals(new char[] {'`', '`', '`', '', '`', '`', '`', '`'}, charArray0);
      assertEquals("```````", string7);
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string5));
      assertNotNull(string7);
      assertEquals(8, charArray0.length);
      
      // Undeclared exception!
      try { 
        StringUtils.join(objectArray0, '`', (-1), 1686);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test609()  throws Throwable  {
      String string0 = StringUtils.reverse("");
      assertEquals("", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isEmpty("");
      assertTrue(boolean0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "";
      boolean boolean1 = StringUtils.isAllEmpty(charSequenceArray0);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals(2, charSequenceArray0.length);
      
      String string1 = StringUtils.right("\n", 866);
      assertEquals("\n", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test610()  throws Throwable  {
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      boolean boolean0 = StringUtils.isEmpty("l(c\"B4`q5AeDf\"5{");
      assertFalse(boolean0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      charSequenceArray0[0] = (CharSequence) "l(c\"B4`q5AeDf\"5{";
      charSequenceArray0[1] = (CharSequence) "l(c\"B4`q5AeDf\"5{";
      charSequenceArray0[2] = null;
      boolean boolean1 = StringUtils.isAllEmpty(charSequenceArray0);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals(3, charSequenceArray0.length);
      
      boolean boolean2 = StringUtils.isAnyEmpty(charSequenceArray0);
      assertTrue(boolean2);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertEquals(3, charSequenceArray0.length);
  }

  @Test(timeout = 4000)
  public void test611()  throws Throwable  {
      String string0 = StringUtils.rotate("KX+", (-3770));
      assertEquals("+KX", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.abbreviate((String) null, 69, (-765));
      assertNull(string1);
  }

  @Test(timeout = 4000)
  public void test612()  throws Throwable  {
      String string0 = StringUtils.removePattern("Array element ", "ts");
      assertEquals("Array element ", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isMixedCase("ts");
      assertFalse(boolean0);
      
      int int0 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      String string1 = StringUtils.replaceChars("oJ2D&u?\r ~F]c,Fr,4", (String) null, "Array element ");
      assertEquals("oJ2D&u?\r ~F]c,Fr,4", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.repeat("h-{e", (-1));
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      String string3 = StringUtils.defaultIfEmpty("` Y_ahG#rn6-R8`", "Array element ");
      assertEquals("` Y_ahG#rn6-R8`", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "oJ2D&u?\r ~F]c,Fr,4";
      stringArray0[1] = "` Y_ahG#rn6-R8`";
  }

  @Test(timeout = 4000)
  public void test613()  throws Throwable  {
      String string0 = StringUtils.replaceIgnoreCase("", "F1~Sp}mS5", "0FO5}hhQ5YS+G9");
      assertEquals("", string0);
      assertNotNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      charSequenceArray0[0] = (CharSequence) "0FO5}hhQ5YS+G9";
      charSequenceArray0[1] = (CharSequence) "";
      charSequenceArray0[2] = (CharSequence) "0FO5}hhQ5YS+G9";
      charSequenceArray0[3] = (CharSequence) "F1~Sp}mS5";
      boolean boolean0 = StringUtils.containsAnyIgnoreCase("", charSequenceArray0);
      assertFalse(boolean0);
      assertEquals(4, charSequenceArray0.length);
      
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      int int0 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      String string1 = StringUtils.replaceChars("Array element ", "", "}yrRfNpTa/@3(+m");
      assertEquals("Array element ", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.difference("0FO5}hhQ5YS+G9", "+=El0)UT_2#k1");
      assertEquals("+=El0)UT_2#k1", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test614()  throws Throwable  {
      String string0 = StringUtils.reverse(" ");
      assertEquals(" ", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.difference(" ", "Cannot clone Cloneable type ");
      assertEquals("Cannot clone Cloneable type ", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test615()  throws Throwable  {
      String string0 = StringUtils.toRootUpperCase("");
      assertEquals("", string0);
      assertNotNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[8];
      char[] charArray0 = new char[0];
      boolean boolean0 = StringUtils.containsNone((CharSequence) "", charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertTrue(boolean0);
      assertEquals(0, charArray0.length);
      
      boolean boolean1 = StringUtils.isAlphanumeric("");
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      // Undeclared exception!
      try { 
        StringUtils.join((Object[]) charSequenceArray0, "", 10, 104);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 10
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test616()  throws Throwable  {
      String string0 = StringUtils.leftPad("The String must not be empty", 12, 'I');
      assertEquals("The String must not be empty", string0);
      assertNotNull(string0);
      
      char[] charArray0 = new char[6];
      charArray0[0] = 'd';
      charArray0[1] = 'I';
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) "L^hK@";
      objectArray0[1] = (Object) 'd';
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[2] = object0;
      objectArray0[3] = (Object) "L^hK@";
      // Undeclared exception!
      try { 
        StringUtils.join(objectArray0, "L^hK@", (-1494), 51);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1494
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test617()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[7];
      charSequenceArray0[1] = (CharSequence) "F1~Sp}mS5";
      char[] charArray0 = new char[0];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(0, charBuffer0.length());
      assertFalse(charBuffer0.isDirect());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.remaining());
      assertTrue(charBuffer0.hasArray());
      assertEquals(0, charBuffer0.position());
      assertEquals(0, charBuffer0.capacity());
      assertEquals("", charBuffer0.toString());
      assertEquals(0, charBuffer0.limit());
      assertFalse(charBuffer0.hasRemaining());
      assertNotNull(charBuffer0);
      assertEquals(0, charArray0.length);
      
      charSequenceArray0[2] = (CharSequence) charBuffer0;
      CharBuffer charBuffer1 = charBuffer0.duplicate();
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(0, charBuffer0.length());
      assertFalse(charBuffer0.isDirect());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.remaining());
      assertTrue(charBuffer0.hasArray());
      assertEquals(0, charBuffer0.position());
      assertEquals(0, charBuffer0.capacity());
      assertEquals("", charBuffer0.toString());
      assertEquals(0, charBuffer0.limit());
      assertFalse(charBuffer0.hasRemaining());
      assertEquals("", charBuffer1.toString());
      assertFalse(charBuffer1.isDirect());
      assertEquals(0, charBuffer1.length());
      assertTrue(charBuffer1.hasArray());
      assertEquals(0, charBuffer1.arrayOffset());
      assertEquals(0, charBuffer1.remaining());
      assertEquals(0, charBuffer1.capacity());
      assertEquals(0, charBuffer1.limit());
      assertFalse(charBuffer1.hasRemaining());
      assertEquals(0, charBuffer1.position());
      assertFalse(charBuffer1.isReadOnly());
      assertTrue(charBuffer1.equals((Object)charBuffer0));
      assertNotNull(charBuffer1);
      assertNotSame(charBuffer0, charBuffer1);
      assertNotSame(charBuffer1, charBuffer0);
      assertEquals(0, charArray0.length);
      
      boolean boolean0 = StringUtils.equalsAny(charSequenceArray0[2], charSequenceArray0);
      assertTrue(boolean0);
      assertEquals(7, charSequenceArray0.length);
      
      Buffer buffer0 = charBuffer0.rewind();
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(0, charBuffer0.length());
      assertFalse(charBuffer0.isDirect());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.remaining());
      assertTrue(charBuffer0.hasArray());
      assertEquals(0, charBuffer0.position());
      assertEquals(0, charBuffer0.capacity());
      assertEquals("", charBuffer0.toString());
      assertEquals(0, charBuffer0.limit());
      assertFalse(charBuffer0.hasRemaining());
      assertEquals(0, buffer0.remaining());
      assertEquals(0, buffer0.capacity());
      assertFalse(buffer0.isReadOnly());
      assertEquals(0, buffer0.position());
      assertTrue(buffer0.hasArray());
      assertEquals(0, buffer0.limit());
      assertFalse(buffer0.hasRemaining());
      assertFalse(buffer0.isDirect());
      assertEquals(0, buffer0.arrayOffset());
      assertTrue(charBuffer0.equals((Object)charBuffer1));
      assertNotNull(buffer0);
      assertNotSame(charBuffer0, charBuffer1);
      assertEquals(0, charArray0.length);
      
      String string0 = StringUtils.abbreviateMiddle("org.apache.commons.lang3.ArrayUtils", "0FO5}hhQ5YS+G9", 48);
      assertEquals("org.apache.commons.lang3.ArrayUtils", string0);
      assertNotNull(string0);
      
      boolean boolean1 = StringUtils.isAlpha(charSequenceArray0[0]);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      assertEquals(7, charSequenceArray0.length);
  }

  @Test(timeout = 4000)
  public void test618()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = '2';
      charArray0[1] = 'a';
      charArray0[2] = '&';
      String string0 = StringUtils.join(charArray0, 'S', 90, 61);
      assertArrayEquals(new char[] {'2', 'a', '&'}, charArray0);
      assertEquals("", string0);
      assertNotNull(string0);
      assertEquals(3, charArray0.length);
      
      String string1 = StringUtils.replaceChars("", "", "[0");
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "}xk 6mk&yQ`^suYg]";
      charSequenceArray0[2] = (CharSequence) "";
      boolean boolean0 = StringUtils.equalsAnyIgnoreCase("", charSequenceArray0);
      assertTrue(boolean0);
      assertEquals(3, charSequenceArray0.length);
      
      boolean boolean1 = StringUtils.isAlpha(charSequenceArray0[2]);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      assertEquals(3, charSequenceArray0.length);
      
      // Undeclared exception!
      try { 
        CharBuffer.wrap(charArray0, 61, 61);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test619()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "{}";
      stringArray0[1] = "";
      String string0 = StringUtils.firstNonBlank(stringArray0);
      assertEquals("{}", string0);
      assertNotNull(string0);
      assertEquals(2, stringArray0.length);
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = (-1.0F);
      floatArray0[2] = 1383.2F;
      floatArray0[3] = (-2836.3674F);
      floatArray0[4] = (-2530.9985F);
      floatArray0[5] = 601.31F;
      floatArray0[6] = 1383.2F;
      char[] charArray0 = new char[3];
      charArray0[0] = 'j';
      charArray0[1] = '_';
      charArray0[2] = 'j';
      // Undeclared exception!
      try { 
        StringUtils.join(charArray0, 'j', (-619), 108);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -619
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test620()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = 'b';
      charArray0[1] = '!';
      charArray0[2] = '?';
      charArray0[3] = '|';
      charArray0[4] = 'e';
      charArray0[5] = 'u';
      charArray0[6] = '.';
      charArray0[7] = 'N';
      charArray0[8] = '-';
      String string0 = StringUtils.join(charArray0, 'V');
      assertArrayEquals(new char[] {'b', '!', '?', '|', 'e', 'u', '.', 'N', '-'}, charArray0);
      assertEquals("bV!V?V|VeVuV.VNV-", string0);
      assertNotNull(string0);
      assertEquals(9, charArray0.length);
      
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn("bV!V?V|VeVuV.VNV-").when(supplier0).get();
      String string1 = StringUtils.getIfBlank("", supplier0);
      assertEquals("bV!V?V|VeVuV.VNV-", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test621()  throws Throwable  {
      String string0 = StringUtils.overlay("m^Wgl;AY7 }<axB|I", ">WWUt`", 0, 0);
      assertEquals(">WWUt`m^Wgl;AY7 }<axB|I", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.strip(">WWUt`m^Wgl;AY7 }<axB|I", "bepH1&EXh");
      assertEquals(">WWUt`m^Wgl;AY7 }<axB|I", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test622()  throws Throwable  {
      boolean boolean0 = StringUtils.isNumeric("F1~Sp}mS5");
      assertFalse(boolean0);
      
      String string0 = StringUtils.mid(",ZBZD/YePMWJ[eT0K", 157, (-3749));
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.stripStart("F1~Sp}mS5", "");
      assertEquals("F1~Sp}mS5", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.abbreviate("", "F1~Sp}mS5", 947);
      assertEquals("", string2);
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      String string3 = StringUtils.join((byte[]) null, 'q', 10, (-3118));
      assertNull(string3);
  }

  @Test(timeout = 4000)
  public void test623()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)109;
      // Undeclared exception!
      try { 
        StringUtils.join(byteArray0, 'e', (int) (byte)109, 1513);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 109
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test624()  throws Throwable  {
      String string0 = "Arguments cannot both be null";
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("Arguments cannot both be null", "Arguments cannot both be null", (-688));
      assertNotNull(stringArray0);
      assertEquals(2, stringArray0.length);
      
      CharSequence[] charSequenceArray0 = new CharSequence[6];
      charSequenceArray0[0] = (CharSequence) "Arguments cannot both be null";
      charSequenceArray0[1] = (CharSequence) "Arguments cannot both be null";
      charSequenceArray0[2] = (CharSequence) "Arguments cannot both be null";
      charSequenceArray0[3] = (CharSequence) "Arguments cannot both be null";
      charSequenceArray0[4] = (CharSequence) "Arguments cannot both be null";
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byte byte0 = (byte)51;
      byteArray0[2] = (byte)51;
      byteArray0[3] = (byte)45;
      char char0 = 'b';
      // Undeclared exception!
      try { 
        StringUtils.join(byteArray0, 'b', 0, 1550);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test625()  throws Throwable  {
      char[] charArray0 = new char[10];
      charArray0[1] = 'a';
      charArray0[2] = 'a';
      String string0 = StringUtils.join(charArray0, 'S', 90, 61);
      assertArrayEquals(new char[] {'\u0000', 'a', 'a', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals("", string0);
      assertNotNull(string0);
      assertEquals(10, charArray0.length);
      
      String string1 = StringUtils.replaceChars("", "", "[0");
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      charSequenceArray0[1] = (CharSequence) "}xk 6mk&yQ`^suYg]";
      charSequenceArray0[2] = (CharSequence) "";
      boolean boolean0 = StringUtils.equalsAnyIgnoreCase("", charSequenceArray0);
      assertTrue(boolean0);
      assertEquals(3, charSequenceArray0.length);
      
      boolean boolean1 = StringUtils.isAlpha(charSequenceArray0[2]);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      assertEquals(3, charSequenceArray0.length);
      
      // Undeclared exception!
      try { 
        CharBuffer.wrap(charArray0, 61, 61);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test626()  throws Throwable  {
      String string0 = StringUtils.substringBeforeLast("...", "-Z!#0INiy1>W");
      assertEquals("...", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.normalizeSpace("* $}i!#c(q<dht&");
      assertEquals("* $}i!#c(q<dht&", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      int[] intArray0 = new int[9];
      intArray0[0] = 18;
      intArray0[1] = 18;
      intArray0[2] = 18;
      intArray0[3] = 18;
      boolean boolean0 = StringUtils.equalsIgnoreCase("* $}i!#c(q<dht&", "* $}i!#c(q<dht&");
      assertTrue(boolean0);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("The type must not be null", (String) null, 3638);
      assertNotNull(stringArray0);
      assertEquals(6, stringArray0.length);
      
      char[] charArray0 = new char[0];
      boolean boolean1 = StringUtils.containsNone((CharSequence) null, charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals(0, charArray0.length);
      
      String string2 = StringUtils.substring("* $}i!#c(q<dht&", 18, 18);
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      boolean boolean2 = StringUtils.containsIgnoreCase("", "");
      assertTrue(boolean2);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
  }

  @Test(timeout = 4000)
  public void test627()  throws Throwable  {
      String[] stringArray0 = new String[1];
      String string0 = StringUtils.getCommonPrefix(stringArray0);
      assertEquals("", string0);
      assertNotNull(string0);
      assertEquals(1, stringArray0.length);
      
      String string1 = StringUtils.repeat((String) null, "", 1114111);
      assertNull(string1);
      
      String string2 = StringUtils.left((String) null, 1114111);
      assertNull(string2);
  }

  @Test(timeout = 4000)
  public void test628()  throws Throwable  {
      String string0 = StringUtils.removePattern("Array element ", "");
      assertEquals("Array element ", string0);
      assertNotNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      charSequenceArray0[1] = (CharSequence) "";
      Locale locale0 = Locale.ENGLISH;
      assertEquals("", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("en", locale0.toString());
      assertNotNull(locale0);
      
      String string1 = StringUtils.upperCase("", locale0);
      assertEquals("", string1);
      assertEquals("", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("en", locale0.toString());
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test629()  throws Throwable  {
      boolean boolean0 = StringUtils.endsWithIgnoreCase((CharSequence) null, (CharSequence) null);
      assertTrue(boolean0);
      
      Object[] objectArray0 = new Object[6];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      objectArray0[1] = (Object) null;
      objectArray0[2] = (Object) null;
      objectArray0[3] = (Object) null;
      objectArray0[4] = (Object) null;
      objectArray0[5] = (Object) null;
      String string0 = StringUtils.join(objectArray0, "L^hK@", 51, (-1494));
      assertEquals("", string0);
      assertNotNull(string0);
      assertEquals(6, objectArray0.length);
      
      String string1 = StringUtils.wrap("L^hK@", "");
      assertEquals("L^hK@", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      boolean boolean1 = StringUtils.equalsIgnoreCase((CharSequence) null, "L^hK@");
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      Locale locale0 = new Locale("", "4t\"Wzc]>Zt:w0T8R}");
      assertEquals("_4T\"WZC]>ZT:W0T8R}", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Language());
      assertEquals("4T\"WZC]>ZT:W0T8R}", locale0.getCountry());
      assertEquals("", locale0.getLanguage());
      assertNotNull(locale0);
      
      String string2 = locale0.getDisplayLanguage();
      assertEquals("", string2);
      assertEquals("_4T\"WZC]>ZT:W0T8R}", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Language());
      assertEquals("4T\"WZC]>ZT:W0T8R}", locale0.getCountry());
      assertEquals("", locale0.getLanguage());
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      String string3 = locale0.getDisplayName();
      assertEquals("4T\"WZC]>ZT:W0T8R}", string3);
      assertEquals("_4T\"WZC]>ZT:W0T8R}", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Language());
      assertEquals("4T\"WZC]>ZT:W0T8R}", locale0.getCountry());
      assertEquals("", locale0.getLanguage());
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      
      String string4 = StringUtils.upperCase("Array element ", locale0);
      assertEquals("ARRAY ELEMENT ", string4);
      assertEquals("_4T\"WZC]>ZT:W0T8R}", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Language());
      assertEquals("4T\"WZC]>ZT:W0T8R}", locale0.getCountry());
      assertEquals("", locale0.getLanguage());
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertNotNull(string4);
      
      String string5 = StringUtils.defaultString("The character ");
      assertEquals("The character ", string5);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertNotNull(string5);
      
      String string6 = StringUtils.repeat((String) null, (-1494));
      assertNull(string6);
  }

  @Test(timeout = 4000)
  public void test630()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = '2';
      charArray0[1] = 'a';
      charArray0[2] = '&';
      String string0 = StringUtils.join(charArray0, 'S', 90, 61);
      assertArrayEquals(new char[] {'2', 'a', '&'}, charArray0);
      assertEquals("", string0);
      assertNotNull(string0);
      assertEquals(3, charArray0.length);
      
      String string1 = StringUtils.substringAfterLast("", 61);
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test631()  throws Throwable  {
      String string0 = StringUtils.substringBeforeLast("maxWith cannot be negative", "G^7|+zFpb:oK?5");
      assertEquals("maxWith cannot be negative", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.substringAfterLast("G^7|+zFpb:oK?5", (-2663));
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test632()  throws Throwable  {
      String string0 = StringUtils.replaceIgnoreCase("", "F1~Sp}mS5", "0FO5}hhQ5YS+G9");
      assertEquals("", string0);
      assertNotNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      charSequenceArray0[0] = (CharSequence) "0FO5}hhQ5YS+G9";
      charSequenceArray0[1] = (CharSequence) "";
      charSequenceArray0[2] = (CharSequence) "0FO5}hhQ5YS+G9";
      charSequenceArray0[3] = (CharSequence) "F1~Sp}mS5";
      boolean boolean0 = StringUtils.containsAnyIgnoreCase("", charSequenceArray0);
      assertFalse(boolean0);
      assertEquals(4, charSequenceArray0.length);
      
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "", (CharSequence) " ", (-1));
      assertEquals((-1), int0);
      
      String string1 = StringUtils.substringAfterLast(",pM t", (-718));
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test633()  throws Throwable  {
      String string0 = StringUtils.defaultString("offset cannot be negative");
      assertEquals("offset cannot be negative", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.containsAny((CharSequence) null, (CharSequence[]) null);
      assertFalse(boolean0);
      
      String string1 = StringUtils.deleteWhitespace("2");
      assertEquals("2", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.replaceFirst("offset cannot be negative", "", "ch");
      assertEquals("choffset cannot be negative", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      boolean boolean1 = StringUtils.isNumeric((CharSequence) null);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String string3 = StringUtils.reverseDelimited("2", '^');
      assertEquals("2", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string1));
      assertNotNull(string3);
  }

  @Test(timeout = 4000)
  public void test634()  throws Throwable  {
      String string0 = "qD/.5Q]{&GZM2vH<]";
      boolean boolean0 = StringUtils.isAllUpperCase("qD/.5Q]{&GZM2vH<]");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isNotEmpty("qD/.5Q]{&GZM2vH<]");
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      char[] charArray0 = new char[2];
      charArray0[0] = '=';
      charArray0[1] = 'g';
      boolean boolean2 = StringUtils.containsNone((CharSequence) "qD/.5Q]{&GZM2vH<]", charArray0);
      assertArrayEquals(new char[] {'=', 'g'}, charArray0);
      assertTrue(boolean2);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertEquals(2, charArray0.length);
      
      boolean boolean3 = StringUtils.isAlphanumeric("qD/.5Q]{&GZM2vH<]");
      assertFalse(boolean3);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3 == boolean2);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)49;
      // Undeclared exception!
      try { 
        StringUtils.join(shortArray0, '=', 12, 1528);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 12
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test635()  throws Throwable  {
      String string0 = StringUtils.replace("Array element \r", "Array element \r", "Array element \r", (-255));
      assertEquals("Array element \r", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.stripEnd("Array element \r", "Array element \r");
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "Array element \r", (CharSequence) "Array element \r");
      assertEquals(0, int0);
      
      String string2 = StringUtils.reverseDelimited("", 'F');
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertNotNull(string2);
      
      int int1 = StringUtils.length("Array element \r");
      assertEquals(15, int1);
      assertFalse(int1 == int0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      String[] stringArray0 = StringUtils.stripAll((String[]) null, "od&s310)%'s");
      assertNull(stringArray0);
      
      boolean boolean0 = StringUtils.containsOnly((CharSequence) null, "");
      assertFalse(boolean0);
      
      String string3 = StringUtils.removeFirst("k4W@>DSW]p.!~", "Array element \r");
      assertEquals("k4W@>DSW]p.!~", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      
      String[] stringArray1 = StringUtils.splitByWholeSeparator("'Fb", "");
      assertNotNull(stringArray1);
      assertEquals(1, stringArray1.length);
  }

  @Test(timeout = 4000)
  public void test636()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      Object object2 = new Object();
      assertFalse(object2.equals((Object)object0));
      assertFalse(object2.equals((Object)object1));
      assertNotNull(object2);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)94;
      String string0 = StringUtils.join(shortArray0, '{');
      assertArrayEquals(new short[] {(short)94}, shortArray0);
      assertEquals("94", string0);
      assertNotNull(string0);
      assertEquals(1, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test637()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = ",2fN==cJdv,hxr";
      stringArray0[3] = ", Length: 0";
      stringArray0[4] = "1?Zk~";
      stringArray0[5] = "{)Vo$";
      stringArray0[6] = "";
      stringArray0[7] = "UpDjdzd6M#&MP";
      String string0 = StringUtils.getCommonPrefix(stringArray0);
      assertEquals("", string0);
      assertNotNull(string0);
      assertEquals(8, stringArray0.length);
      
      String[] stringArray1 = StringUtils.splitPreserveAllTokens("", '\"');
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(0, stringArray1.length);
      
      String string1 = StringUtils.upperCase("");
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short)8192;
      shortArray0[1] = (short)13;
      shortArray0[2] = (short)0;
      shortArray0[3] = (short)437;
      shortArray0[4] = (short)1718;
      // Undeclared exception!
      try { 
        StringUtils.join(shortArray0, 's', 51, 3076);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 51
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test638()  throws Throwable  {
      String[] stringArray0 = new String[13];
      stringArray0[0] = "{}";
      stringArray0[1] = "";
      String string0 = StringUtils.firstNonBlank(stringArray0);
      assertEquals("{}", string0);
      assertNotNull(string0);
      assertEquals(13, stringArray0.length);
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = (-1.0F);
      floatArray0[2] = 1383.2F;
      String string1 = StringUtils.lowerCase("OT2\"Rhc");
      assertEquals("ot2\"rhc", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.endsWithAny("{}", stringArray0);
      assertTrue(boolean0);
      assertEquals(13, stringArray0.length);
      
      String string2 = StringUtils.join((char[]) null, 'w');
      assertNull(string2);
      
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier0).get();
      String string3 = StringUtils.getIfBlank("  ", supplier0);
      assertNull(string3);
  }

  @Test(timeout = 4000)
  public void test639()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = '*';
      charArray0[1] = 'H';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      assertArrayEquals(new char[] {'*', 'H'}, charArray0);
      assertTrue(charBuffer0.hasRemaining());
      assertTrue(charBuffer0.hasArray());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(2, charBuffer0.remaining());
      assertEquals(2, charBuffer0.capacity());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(2, charBuffer0.limit());
      assertEquals("*H", charBuffer0.toString());
      assertFalse(charBuffer0.isDirect());
      assertEquals(2, charBuffer0.length());
      assertEquals(0, charBuffer0.position());
      assertNotNull(charBuffer0);
      assertEquals(2, charArray0.length);
      
      String string0 = StringUtils.wrapIfMissing("', has a length less than 2", '*');
      assertEquals("*', has a length less than 2*", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.join(charArray0, '*');
      assertArrayEquals(new char[] {'*', 'H'}, charArray0);
      assertEquals("**H", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(2, charArray0.length);
      
      String string2 = StringUtils.join(charArray0, 'H');
      assertArrayEquals(new char[] {'*', 'H'}, charArray0);
      assertEquals("*HH", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals(2, charArray0.length);
      
      String string3 = StringUtils.left("s", 4144);
      assertEquals("s", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
  }

  @Test(timeout = 4000)
  public void test640()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = 'j';
      charArray0[1] = 'j';
      // Undeclared exception!
      try { 
        StringUtils.join(charArray0, 'j', 1178, 2437);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1178
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test641()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = 'b';
      charArray0[1] = '!';
      charArray0[2] = '?';
      charArray0[3] = '|';
      charArray0[4] = 'e';
      charArray0[5] = 'u';
      charArray0[6] = '.';
      charArray0[7] = 'N';
      charArray0[8] = '-';
      String string0 = StringUtils.join(charArray0, 'V');
      assertArrayEquals(new char[] {'b', '!', '?', '|', 'e', 'u', '.', 'N', '-'}, charArray0);
      assertEquals("bV!V?V|VeVuV.VNV-", string0);
      assertNotNull(string0);
      assertEquals(9, charArray0.length);
      
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier0).get();
      String string1 = StringUtils.getIfBlank("", supplier0);
      assertNull(string1);
  }

  @Test(timeout = 4000)
  public void test642()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[1] = "{}";
      stringArray0[1] = "";
      String string0 = StringUtils.firstNonBlank(stringArray0);
      assertNull(string0);
      assertEquals(2, stringArray0.length);
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = (-1.0F);
      String string1 = StringUtils.removeIgnoreCase("e{v<'8Xw", "org.apache.commons.lang3.CharSequenceUtils");
      assertEquals("e{v<'8Xw", string1);
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.isAlphanumeric(string0);
      assertFalse(boolean0);
      assertEquals(2, stringArray0.length);
      
      boolean boolean1 = StringUtils.isWhitespace("");
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test643()  throws Throwable  {
      String[] stringArray0 = new String[0];
      String string0 = StringUtils.firstNonBlank(stringArray0);
      assertNull(string0);
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test644()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "{}";
      stringArray0[1] = "";
      String string0 = StringUtils.firstNonBlank(stringArray0);
      assertEquals("{}", string0);
      assertNotNull(string0);
      assertEquals(2, stringArray0.length);
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = (-1.0F);
      floatArray0[1] = (-1.0F);
      floatArray0[2] = 1383.2F;
      floatArray0[3] = (-2836.3674F);
      floatArray0[4] = (-2530.9985F);
      floatArray0[5] = 601.31F;
      floatArray0[6] = 1.0F;
      String string1 = StringUtils.join(floatArray0, 'j', 2581, 1889);
      assertArrayEquals(new float[] {(-1.0F), (-1.0F), 1383.2F, (-2836.3674F), (-2530.9985F), 601.31F, 1.0F}, floatArray0, 0.01F);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(7, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test645()  throws Throwable  {
      String[] stringArray0 = new String[0];
      String string0 = StringUtils.getCommonPrefix(stringArray0);
      assertEquals("", string0);
      assertNotNull(string0);
      assertEquals(0, stringArray0.length);
      
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[1] = true;
      // Undeclared exception!
      try { 
        StringUtils.getLevenshteinDistance((CharSequence) null, (CharSequence) "q5 fqSjG0/~", 10);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test646()  throws Throwable  {
      String string0 = StringUtils.join((long[]) null, '*');
      assertNull(string0);
      
      boolean boolean0 = StringUtils.contains((CharSequence) null, (CharSequence) null);
      assertFalse(boolean0);
      
      String string1 = null;
      String string2 = "";
      String string3 = StringUtils.replacePattern((String) null, (String) null, "");
      assertNull(string3);
      
      // Undeclared exception!
      try { 
        StringUtils.getLevenshteinDistance((CharSequence) "", (CharSequence) "", (-2425));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Threshold must not be negative
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test647()  throws Throwable  {
      String string0 = StringUtils.join((long[]) null, '*');
      assertNull(string0);
      
      boolean boolean0 = StringUtils.contains((CharSequence) null, (CharSequence) null);
      assertFalse(boolean0);
      
      String string1 = StringUtils.replacePattern((String) null, (String) null, "");
      assertNull(string1);
      
      String string2 = StringUtils.strip((String) null, "u");
      assertNull(string2);
  }

  @Test(timeout = 4000)
  public void test648()  throws Throwable  {
      char char0 = '*';
      String string0 = StringUtils.join((long[]) null, '*');
      assertNull(string0);
      
      boolean boolean0 = StringUtils.contains((CharSequence) null, (CharSequence) null);
      assertFalse(boolean0);
      
      String string1 = StringUtils.replacePattern((String) null, (String) null, "");
      assertNull(string1);
      
      // Undeclared exception!
      try { 
        StringUtils.getLevenshteinDistance((CharSequence) "", (CharSequence) "", (-2425));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Threshold must not be negative
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test649()  throws Throwable  {
      String string0 = StringUtils.strip("Index: ");
      assertEquals("Index:", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "Index: ", (CharSequence) "Index:", 123);
      assertEquals(1, int0);
      
      String string1 = StringUtils.remove("'VE7Gato.F<_", '+');
      assertEquals("'VE7Gato.F<_", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.stripToNull("m0G)U4Df(5(R");
      assertEquals("m0G)U4Df(5(R", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test650()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringUtils.abbreviate("org.apache.commons.lang3.ObjectUtils$Null", 243, (-1052));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum abbreviation width is 4
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test651()  throws Throwable  {
      String string0 = StringUtils.mid("", 0, 0);
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.deleteWhitespace("...");
      assertEquals("...", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      boolean boolean0 = StringUtils.equalsAnyIgnoreCase("", charSequenceArray0);
      assertFalse(boolean0);
      assertEquals(1, charSequenceArray0.length);
  }

  @Test(timeout = 4000)
  public void test652()  throws Throwable  {
      String string0 = StringUtils.upperCase("Strings must not be null");
      assertEquals("STRINGS MUST NOT BE NULL", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.mid("", 0, 0);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.removeEnd("", "...");
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertNotNull(string2);
      
      // Undeclared exception!
      try { 
        StringUtils.abbreviate("R7til/'L", ".vJUO`HXV;lj1-;", 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum abbreviation width is 16
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test653()  throws Throwable  {
      String string0 = StringUtils.wrapIfMissing("org.apache.commons.lang3.LocaleUtils", '%');
      assertEquals("%org.apache.commons.lang3.LocaleUtils%", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.lowerCase("org.apache.commons.lang3.LocaleUtils");
      assertEquals("org.apache.commons.lang3.localeutils", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      // Undeclared exception!
      try { 
        StringUtils.abbreviate("Array element ", (-613));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum abbreviation width is 4
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test654()  throws Throwable  {
      String string0 = StringUtils.abbreviateMiddle("s-D4{8$Mo,|,xZ", "s-D4{8$Mo,|,xZ", (-357));
      assertEquals("s-D4{8$Mo,|,xZ", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = new String[0];
      String string1 = StringUtils.getCommonPrefix(stringArray0);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test655()  throws Throwable  {
      String string0 = StringUtils.abbreviateMiddle("s-D4{8$Mo,|,xZ", "xeR=", 16);
      assertEquals("s-D4{8$Mo,|,xZ", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.truncate("s-D4{8$Mo,|,xZ", 16);
      assertEquals("s-D4{8$Mo,|,xZ", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      Locale locale0 = Locale.UK;
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("GB", locale0.getCountry());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals("en_GB", locale0.toString());
      assertNotNull(locale0);
      
      int int0 = StringUtils.getFuzzyDistance("s-D4{8$Mo,|,xZ", "s-D4{8$Mo,|,xZ", locale0);
      assertEquals(40, int0);
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("GB", locale0.getCountry());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals("en_GB", locale0.toString());
  }

  @Test(timeout = 4000)
  public void test656()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "{}";
      String string0 = StringUtils.rightPad("{}", 1586, ';');
      assertNotNull(string0);
      
      String string1 = StringUtils.unwrap("{}", (String) null);
      assertEquals("{}", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      int int0 = StringUtils.indexOfDifference((CharSequence) null, (CharSequence) "{}");
      assertEquals(0, int0);
      
      String[] stringArray1 = StringUtils.splitByCharacterType("Uj\"r!b*&rq:");
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(9, stringArray1.length);
      
      boolean boolean0 = StringUtils.equalsIgnoreCase("Uj\"r!b*&rq:", "{}");
      assertFalse(boolean0);
      
      String string2 = StringUtils.toRootLowerCase("CRfDL?ET8GE5");
      assertEquals("crfdl?et8ge5", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test657()  throws Throwable  {
      String string0 = StringUtils.deleteWhitespace("_");
      assertEquals("_", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.countMatches((CharSequence) "_", 'v');
      assertEquals(0, int0);
      
      String string1 = StringUtils.truncate("wO", 12, 0);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "", "");
      assertTrue(boolean0);
      
      String string2 = StringUtils.substringAfterLast("_", 12);
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      String string3 = StringUtils.deleteWhitespace("u");
      assertEquals("u", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
  }

  @Test(timeout = 4000)
  public void test658()  throws Throwable  {
      String string0 = StringUtils.abbreviateMiddle("s-D4{8$Mo,|,xZ", "s-D4{8$Mo,|,xZ", 4);
      assertEquals("s-D4{8$Mo,|,xZ", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.truncate("s-D4{8$Mo,|,xZ", 4);
      assertEquals("s-D4", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      Locale locale0 = Locale.UK;
      assertEquals("", locale0.getVariant());
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals("GB", locale0.getCountry());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en_GB", locale0.toString());
      assertEquals("en", locale0.getLanguage());
      assertNotNull(locale0);
      
      int int0 = StringUtils.getFuzzyDistance("s-D4", "s-D4{8$Mo,|,xZ", locale0);
      assertEquals(10, int0);
      assertEquals("", locale0.getVariant());
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals("GB", locale0.getCountry());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en_GB", locale0.toString());
      assertEquals("en", locale0.getLanguage());
  }

  @Test(timeout = 4000)
  public void test659()  throws Throwable  {
      String string0 = StringUtils.removePattern("\r", "eaZDc1hy");
      assertEquals("\r", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isNumeric("\r");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isBlank("\r");
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[0] = (CharSequence) "eaZDc1hy";
      charSequenceArray0[1] = (CharSequence) "\r";
      boolean boolean2 = StringUtils.startsWithAny("\r", charSequenceArray0);
      assertTrue(boolean2);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertEquals(2, charSequenceArray0.length);
  }

  @Test(timeout = 4000)
  public void test660()  throws Throwable  {
      String string0 = "Strings must not be null";
      String string1 = StringUtils.upperCase("Strings must not be null");
      assertEquals("STRINGS MUST NOT BE NULL", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      int int0 = 0;
      String string2 = StringUtils.mid("", 0, 0);
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      String string3 = "...";
      String string4 = "The character ";
      String string5 = StringUtils.unwrap("", "...");
      assertEquals("", string5);
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertTrue(string5.equals((Object)string2));
      assertNotNull(string5);
      
      String string6 = StringUtils.chomp("STRINGS MUST NOT BE NULL");
      assertEquals("STRINGS MUST NOT BE NULL", string6);
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string4));
      assertTrue(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string5));
      assertNotNull(string6);
      
      // Undeclared exception!
      try { 
        CharBuffer.wrap((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test661()  throws Throwable  {
      boolean boolean0 = StringUtils.startsWithAny("s-D4{8$Mo,|,xZ", (CharSequence[]) null);
      assertFalse(boolean0);
      
      String string0 = StringUtils.removeAll("s-D4{8$Mo,|,xZ", "xeR=");
      assertEquals("s-D4{8$Mo,|,xZ", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("s-D4{8$Mo,|,xZ", "s-D4{8$Mo,|,xZ");
      assertNotNull(stringArray0);
      assertEquals(2, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test662()  throws Throwable  {
      String string0 = StringUtils.replaceAll("The type must not b null", "Array element ", "H");
      assertEquals("The type must not b null", string0);
      assertNotNull(string0);
      
      // Undeclared exception!
      try { 
        StringUtils.truncate("H", (-1411));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // maxWith cannot be negative
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test663()  throws Throwable  {
      String string0 = StringUtils.trimToNull("~Vr");
      assertEquals("~Vr", string0);
      assertNotNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      String string1 = StringUtils.truncate("8pR2B:PK5lx\"7", 0, 32);
      assertEquals("8pR2B:PK5lx\"7", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      charSequenceArray0[0] = (CharSequence) "8pR2B:PK5lx\"7";
      charSequenceArray0[1] = (CharSequence) "~Vr";
      charSequenceArray0[2] = (CharSequence) "~Vr";
      charSequenceArray0[3] = (CharSequence) "~Vr";
      boolean boolean0 = StringUtils.startsWithAny("~Vr", charSequenceArray0);
      assertTrue(boolean0);
      assertEquals(4, charSequenceArray0.length);
      
      String string2 = StringUtils.unwrap("", "JY@o8b");
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "8pR2B:PK5lx\"7", charSequenceArray0[3]);
      assertEquals(0, int0);
      assertEquals(4, charSequenceArray0.length);
      
      String string3 = StringUtils.replacePattern("", "", ", Length: ");
      assertEquals(", Length: ", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) 0;
      floatArray0[1] = (float) 0;
      floatArray0[2] = (float) 0;
      floatArray0[3] = (float) 0;
      floatArray0[4] = (-2491.225F);
      floatArray0[5] = (float) 0;
      floatArray0[6] = (float) 32;
      floatArray0[7] = (float) 32;
      String string4 = StringUtils.join(floatArray0, 'j', 0, 0);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, (-2491.225F), 0.0F, 32.0F, 32.0F}, floatArray0, 0.01F);
      assertEquals("", string4);
      assertFalse(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertNotNull(string4);
      assertEquals(8, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test664()  throws Throwable  {
      String string0 = StringUtils.replacePattern("&?qu g]3*=", "&?qu g]3*=", "&?qu g]3*=");
      assertEquals("&?qu g]3*=", string0);
      assertNotNull(string0);
      
      Object[] objectArray0 = new Object[6];
      objectArray0[1] = (Object) "&?qu g]3*=";
      objectArray0[2] = (Object) "&?qu g]3*=";
      objectArray0[3] = (Object) "&?qu g]3*=";
      objectArray0[4] = (Object) "&?qu g]3*=";
      String string1 = StringUtils.join(objectArray0, ')');
      assertEquals(")&?qu g]3*=)&?qu g]3*=)&?qu g]3*=)&?qu g]3*=)", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(6, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test665()  throws Throwable  {
      String string0 = StringUtils.removePattern("Array element ", "");
      assertEquals("Array element ", string0);
      assertNotNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      String string1 = StringUtils.SPACE;
      assertEquals(" ", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      charSequenceArray0[2] = (CharSequence) " ";
      charSequenceArray0[3] = (CharSequence) "Array element ";
      String string2 = StringUtils.stripAccents("Minimum abbreviation width is %d");
      assertEquals("Minimum abbreviation width is %d", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      String string3 = StringUtils.wrapIfMissing("#", '1');
      assertEquals("1#1", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      
      String string4 = StringUtils.strip("#");
      assertEquals("#", string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertNotNull(string4);
      
      boolean boolean0 = StringUtils.endsWithAny("#", charSequenceArray0);
      assertFalse(boolean0);
      assertEquals(5, charSequenceArray0.length);
      
      char[] charArray0 = new char[4];
      charArray0[0] = '1';
      charArray0[1] = '1';
      charArray0[2] = '1';
      charArray0[3] = '1';
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "Array element ", charArray0);
      assertArrayEquals(new char[] {'1', '1', '1', '1'}, charArray0);
      assertEquals(0, int0);
      assertEquals(4, charArray0.length);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("", 'z');
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      
      boolean boolean1 = StringUtils.startsWithAny("Minimum abbreviation width is %d", stringArray0);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test666()  throws Throwable  {
      boolean boolean0 = StringUtils.endsWithIgnoreCase((CharSequence) null, (CharSequence) null);
      assertTrue(boolean0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Locale locale0 = Locale.US;
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en_US", locale0.toString());
      assertEquals("en", locale0.getLanguage());
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("US", locale0.getCountry());
      assertNotNull(locale0);
      
      char[] charArray0 = new char[6];
      charArray0[0] = '_';
      charArray0[1] = '4';
      charArray0[2] = 'l';
      charArray0[3] = 'z';
      charArray0[4] = '$';
      charArray0[5] = 'B';
      boolean boolean1 = StringUtils.containsNone((CharSequence) "', is neither of type Map.Entry nor an Array", charArray0);
      assertArrayEquals(new char[] {'_', '4', 'l', 'z', '$', 'B'}, charArray0);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals(6, charArray0.length);
      
      boolean boolean2 = StringUtils.isAlphanumeric((CharSequence) null);
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      String string0 = StringUtils.join((Object[]) null, "', is neither of type Map.Entry nor an Array", 10, 2029);
      assertNull(string0);
      
      Locale locale1 = Locale.GERMAN;
      assertEquals("", locale1.getCountry());
      assertEquals("deu", locale1.getISO3Language());
      assertEquals("de", locale1.getLanguage());
      assertEquals("de", locale1.toString());
      assertEquals("", locale1.getVariant());
      assertEquals("", locale1.getISO3Country());
      assertFalse(locale1.equals((Object)locale0));
      assertNotNull(locale1);
      assertNotSame(locale1, locale0);
      
      Locale locale2 = locale1.stripExtensions();
      assertEquals("", locale1.getCountry());
      assertEquals("deu", locale1.getISO3Language());
      assertEquals("de", locale1.getLanguage());
      assertEquals("de", locale1.toString());
      assertEquals("", locale1.getVariant());
      assertEquals("", locale1.getISO3Country());
      assertEquals("", locale2.getVariant());
      assertEquals("deu", locale2.getISO3Language());
      assertEquals("", locale2.getCountry());
      assertEquals("de", locale2.toString());
      assertEquals("", locale2.getISO3Country());
      assertEquals("de", locale2.getLanguage());
      assertFalse(locale1.equals((Object)locale0));
      assertFalse(locale2.equals((Object)locale0));
      assertNotNull(locale2);
      assertSame(locale1, locale2);
      assertNotSame(locale1, locale0);
      assertSame(locale2, locale1);
      assertNotSame(locale2, locale0);
      
      String string1 = StringUtils.upperCase((String) null, locale0);
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en_US", locale0.toString());
      assertEquals("en", locale0.getLanguage());
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("US", locale0.getCountry());
      assertFalse(locale0.equals((Object)locale2));
      assertFalse(locale0.equals((Object)locale1));
      assertNull(string1);
      assertNotSame(locale0, locale2);
      assertNotSame(locale0, locale1);
      
      boolean boolean3 = StringUtils.containsOnly((CharSequence) null, charArray0);
      assertArrayEquals(new char[] {'_', '4', 'l', 'z', '$', 'B'}, charArray0);
      assertFalse(boolean3);
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertEquals(6, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test667()  throws Throwable  {
      Stack<Object> stack0 = new Stack<Object>();
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertNotNull(stack0);
      
      ListIterator<Object> listIterator0 = stack0.listIterator();
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertFalse(listIterator0.hasNext());
      assertFalse(listIterator0.hasPrevious());
      assertNotNull(listIterator0);
      
      String string0 = StringUtils.join((Iterator<?>) listIterator0, 'H');
      assertFalse(stack0.contains('H'));
      assertEquals("", string0);
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertFalse(listIterator0.hasNext());
      assertFalse(listIterator0.hasPrevious());
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isEmpty("");
      assertTrue(boolean0);
      
      String string1 = StringUtils.removeStart("", "ent ");
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      int[] intArray0 = StringUtils.toCodePoints("");
      assertArrayEquals(new int[] {}, intArray0);
      assertNotNull(intArray0);
      assertEquals(0, intArray0.length);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("", "ent ");
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test668()  throws Throwable  {
      boolean boolean0 = StringUtils.containsWhitespace("{}");
      assertFalse(boolean0);
      
      String string0 = StringUtils.chomp("ObjectUtils$Null");
      assertEquals("ObjectUtils$Null", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.swapCase("{}");
      assertEquals("{}", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test669()  throws Throwable  {
      String string0 = "2";
      String string1 = StringUtils.defaultString("offset cannot be negative");
      assertEquals("offset cannot be negative", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      int int0 = 5899;
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      charSequenceArray0[0] = (CharSequence) "2";
      boolean boolean0 = StringUtils.startsWithAny("offset cannot be negative", charSequenceArray0);
      assertFalse(boolean0);
      assertEquals(1, charSequenceArray0.length);
      
      boolean boolean1 = StringUtils.containsWhitespace("\r");
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      // Undeclared exception!
      try { 
        StringUtils.replaceFirst("\r", "G^7|+zFpb:oK?5", "\r");
        fail("Expecting exception: PatternSyntaxException");
      
      } catch(PatternSyntaxException e) {
         //
         // Dangling meta character '+' near index 4
         // G^7|+zFpb:oK?5
         //     ^
         //
         verifyException("java.util.regex.Pattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test670()  throws Throwable  {
      String string0 = StringUtils.reverseDelimited("{}", 'G');
      assertEquals("{}", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isNumericSpace("{}");
      assertFalse(boolean0);
      
      int int0 = StringUtils.compareIgnoreCase("Aa+_Y5=*7kiCRp", "R_,8^PA|~l'8{");
      assertEquals((-17), int0);
  }

  @Test(timeout = 4000)
  public void test671()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("?!", 'l');
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      Locale locale0 = Locale.KOREA;
      assertEquals("ko_KR", locale0.toString());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("KR", locale0.getCountry());
      assertEquals("KOR", locale0.getISO3Country());
      assertNotNull(locale0);
      
      String string0 = StringUtils.lowerCase("?!", locale0);
      assertEquals("?!", string0);
      assertEquals("ko_KR", locale0.toString());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("KR", locale0.getCountry());
      assertEquals("KOR", locale0.getISO3Country());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test672()  throws Throwable  {
      String string0 = StringUtils.join((char[]) null, ')', 16, 2304);
      assertNull(string0);
      
      String string1 = StringUtils.replaceChars((String) null, "Exception cloning Cloneable type }5n.$69QS )=/tT|Krl", "Exception cloning Cloneable type }5n.$69QS )=/tT|Krl");
      assertNull(string1);
      
      String string2 = StringUtils.removeIgnoreCase("d#B5y<.g'_6", "Array element }yrRfNpTa/@3(+m");
      assertEquals("d#B5y<.g'_6", string2);
      assertNotNull(string2);
      
      boolean boolean0 = StringUtils.isAlphanumeric("Object varargs must not be null");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isWhitespace((CharSequence) null);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test673()  throws Throwable  {
      int int0 = StringUtils.compareIgnoreCase("a1<$Zz$0dPwVw", "", false);
      assertEquals(13, int0);
      
      String string0 = StringUtils.replaceChars("", "*)r$['V!4R", "");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.LF;
      assertEquals("\n", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.endsWithIgnoreCase("\n", "");
      assertTrue(boolean0);
      
      Locale locale0 = Locale.JAPAN;
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja_JP", locale0.toString());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("JP", locale0.getCountry());
      assertEquals("ja", locale0.getLanguage());
      assertNotNull(locale0);
      
      Locale locale1 = locale0.stripExtensions();
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja_JP", locale0.toString());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("JP", locale0.getCountry());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale1.getVariant());
      assertEquals("JP", locale1.getCountry());
      assertEquals("jpn", locale1.getISO3Language());
      assertEquals("ja", locale1.getLanguage());
      assertEquals("ja_JP", locale1.toString());
      assertEquals("JPN", locale1.getISO3Country());
      assertNotNull(locale1);
      assertSame(locale0, locale1);
      assertSame(locale1, locale0);
      
      Locale locale2 = Locale.forLanguageTag("gM]h,c!");
      assertEquals("", locale2.toString());
      assertEquals("", locale2.getLanguage());
      assertEquals("", locale2.getCountry());
      assertEquals("", locale2.getVariant());
      assertEquals("", locale2.getISO3Country());
      assertEquals("", locale2.getISO3Language());
      assertFalse(locale2.equals((Object)locale1));
      assertFalse(locale2.equals((Object)locale0));
      assertNotNull(locale2);
      assertNotSame(locale2, locale1);
      assertNotSame(locale2, locale0);
      
      String string2 = StringUtils.lowerCase("e%&F1@i?405`)7", locale0);
      assertEquals("e%&f1@i?405`)7", string2);
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja_JP", locale0.toString());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("JP", locale0.getCountry());
      assertEquals("ja", locale0.getLanguage());
      assertFalse(locale0.equals((Object)locale2));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertSame(locale0, locale1);
      assertNotSame(locale0, locale2);
      
      String string3 = StringUtils.join((char[]) null, 'H', 0, 0);
      assertNull(string3);
  }

  @Test(timeout = 4000)
  public void test674()  throws Throwable  {
      Object[] objectArray0 = new Object[7];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      objectArray0[1] = object1;
      Object object2 = new Object();
      assertFalse(object2.equals((Object)object1));
      assertFalse(object2.equals((Object)object0));
      assertNotNull(object2);
      
      objectArray0[2] = object2;
      Object object3 = new Object();
      assertFalse(object3.equals((Object)object2));
      assertFalse(object3.equals((Object)object0));
      assertFalse(object3.equals((Object)object1));
      assertNotNull(object3);
      
      objectArray0[3] = object3;
      boolean boolean0 = StringUtils.isEmpty((CharSequence) null);
      assertTrue(boolean0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      charSequenceArray0[0] = null;
      charSequenceArray0[1] = null;
      Object object4 = new Object();
      assertFalse(object4.equals((Object)object1));
      assertFalse(object4.equals((Object)object2));
      assertFalse(object4.equals((Object)object0));
      assertFalse(object4.equals((Object)object3));
      assertNotNull(object4);
      
      String string0 = StringUtils.join((Object[]) charSequenceArray0, ")QV6mP/+kjIR-", 264, 7);
      assertEquals("", string0);
      assertNotNull(string0);
      assertEquals(3, charSequenceArray0.length);
      
      boolean boolean1 = StringUtils.endsWithIgnoreCase((CharSequence) null, "");
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      int int0 = StringUtils.lastOrdinalIndexOf((CharSequence) null, charSequenceArray0[0], 122);
      assertEquals((-1), int0);
      assertEquals(3, charSequenceArray0.length);
  }

  @Test(timeout = 4000)
  public void test675()  throws Throwable  {
      String string0 = StringUtils.repeat("", "", 0);
      assertEquals("", string0);
      assertNotNull(string0);
      
      Object[] objectArray0 = new Object[3];
      objectArray0[1] = (Object) "";
      String string1 = StringUtils.join(objectArray0);
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(3, objectArray0.length);
      
      int int0 = 0;
      int int1 = StringUtils.lastOrdinalIndexOf("", "", 0);
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      
      String string2 = StringUtils.substringBetween("...", "zI?W @czoJisB$yV-");
      assertNull(string2);
      
      boolean boolean0 = StringUtils.containsWhitespace("");
      assertFalse(boolean0);
      
      String string3 = StringUtils.rightPad("*X)", (-1), 'a');
      assertEquals("*X)", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      
      // Undeclared exception!
      try { 
        StringUtils.replaceAll("", "*X)", "");
        fail("Expecting exception: PatternSyntaxException");
      
      } catch(PatternSyntaxException e) {
         //
         // Dangling meta character '*' near index 0
         // *X)
         // ^
         //
         verifyException("java.util.regex.Pattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test676()  throws Throwable  {
      String[] stringArray0 = new String[1];
      String[] stringArray1 = StringUtils.stripAll(stringArray0, "\r");
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(1, stringArray0.length);
      assertEquals(1, stringArray1.length);
      
      String string0 = StringUtils.uncapitalize((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test677()  throws Throwable  {
      char[] charArray0 = new char[10];
      charArray0[1] = 'a';
      charArray0[2] = 'a';
      String string0 = StringUtils.join(charArray0, 'S', 71, 61);
      assertArrayEquals(new char[] {'\u0000', 'a', 'a', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals("", string0);
      assertNotNull(string0);
      assertEquals(10, charArray0.length);
      
      String string1 = StringUtils.replaceChars("", "", "[0");
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = "}xk 6mk&yQ`^suYg]";
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      charSequenceArray0[1] = (CharSequence) "}xk 6mk&yQ`^suYg]";
      charSequenceArray0[2] = (CharSequence) "";
      boolean boolean0 = StringUtils.containsWhitespace("}xk 6mk&yQ`^suYg]");
      assertTrue(boolean0);
      
      boolean boolean1 = StringUtils.isAlpha(charSequenceArray0[2]);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      assertEquals(3, charSequenceArray0.length);
      
      // Undeclared exception!
      try { 
        CharBuffer.wrap(charArray0, 61, 61);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test678()  throws Throwable  {
      int int0 = StringUtils.compareIgnoreCase("W(zh)XuJin!8g", "", false);
      assertEquals(13, int0);
      
      Object[] objectArray0 = new Object[0];
      String string0 = StringUtils.join(objectArray0, "", (-2098), (-2098));
      assertEquals("", string0);
      assertNotNull(string0);
      assertEquals(0, objectArray0.length);
      
      String string1 = "\\u";
      String string2 = StringUtils.strip("", string1);
      assertEquals("", string2);
      assertFalse(string1.equals((Object)string0));
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      String string3 = StringUtils.trimToEmpty("3WO0h2D;cTb");
      assertEquals("3WO0h2D;cTb", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      
      String string4 = StringUtils.replaceOnce("", "3WO0h2D;cTb", "");
      assertEquals("", string4);
      assertFalse(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertNotNull(string4);
      
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      charSequenceArray0[0] = (CharSequence) string1;
      charSequenceArray0[1] = (CharSequence) "3WO0h2D;cTb";
      charSequenceArray0[2] = (CharSequence) "3WO0h2D;cTb";
      boolean boolean0 = StringUtils.startsWithAny("", charSequenceArray0);
      assertFalse(boolean0);
      assertEquals(3, charSequenceArray0.length);
      
      boolean boolean1 = StringUtils.containsWhitespace(charSequenceArray0[2]);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals(3, charSequenceArray0.length);
      
      String string5 = StringUtils.replaceFirst("", "", (String) null);
      assertEquals("", string5);
      assertTrue(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertTrue(string5.equals((Object)string0));
      assertTrue(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertNotNull(string5);
      
      int[] intArray0 = StringUtils.toCodePoints("");
      assertArrayEquals(new int[] {}, intArray0);
      assertNotNull(intArray0);
      assertEquals(0, intArray0.length);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) (-2098);
      floatArray0[1] = (float) (-2098);
      floatArray0[2] = (float) (-2098);
      String string6 = StringUtils.join(floatArray0, 'd');
      assertArrayEquals(new float[] {(-2098.0F), (-2098.0F), (-2098.0F)}, floatArray0, 0.01F);
      assertEquals("-2098.0d-2098.0d-2098.0", string6);
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string3));
      assertNotNull(string6);
      assertEquals(3, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test679()  throws Throwable  {
      boolean boolean0 = StringUtils.isNumeric("F1~Sp}mS5");
      assertFalse(boolean0);
      
      String string0 = StringUtils.overlay("", "[ R4Pk;9", 4448, 4448);
      assertEquals("[ R4Pk;9", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.unwrap("Array element }yrRfNpTa/@3(+m", "The character ");
      assertEquals("Array element }yrRfNpTa/@3(+m", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.chomp("");
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      int int0 = StringUtils.lastOrdinalIndexOf("", "", 4448);
      assertEquals(0, int0);
      
      String string3 = StringUtils.substringBeforeLast((String) null, "Array element }yrRfNpTa/@3(+m");
      assertNull(string3);
  }

  @Test(timeout = 4000)
  public void test680()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      charSequenceArray0[0] = (CharSequence) "8c>!) u,eei!\"I2yC-U";
      charSequenceArray0[1] = (CharSequence) "8c>!) u,eei!\"I2yC-U";
      String string0 = StringUtils.rightPad((String) null, 23, 'r');
      assertNull(string0);
      
      charSequenceArray0[2] = (CharSequence) null;
      boolean boolean0 = StringUtils.startsWithAny("8c>!) u,eei!\"I2yC-U", charSequenceArray0);
      assertTrue(boolean0);
      assertEquals(3, charSequenceArray0.length);
      
      String string1 = StringUtils.unwrap("\rArray element ", "JY@o8b");
      assertEquals("\rArray element ", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.center("\rArray element ", 23, 'r');
      assertEquals("rrrr\rArray element rrrr", string2);
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "rrrr\rArray element rrrr", (CharSequence) "\rArray element ");
      assertEquals((-1), int0);
      
      String string3 = StringUtils.substringBeforeLast("\rArray element ", "\rArray element ");
      assertEquals("", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      
      String[] stringArray0 = new String[6];
      stringArray0[0] = null;
      stringArray0[1] = "";
      stringArray0[2] = ")%";
      stringArray0[3] = "JY@o8b";
      stringArray0[4] = "rrrr\rArray element rrrr";
      stringArray0[5] = "";
      String string4 = StringUtils.firstNonBlank(stringArray0);
      assertEquals(")%", string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertNotNull(string4);
      assertEquals(6, stringArray0.length);
      
      String string5 = StringUtils.removeIgnoreCase((String) null, "");
      assertNull(string5);
      
      boolean boolean1 = StringUtils.isAlphanumeric((CharSequence) null);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      boolean boolean2 = StringUtils.isWhitespace((CharSequence) null);
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
  }

  @Test(timeout = 4000)
  public void test681()  throws Throwable  {
      String string0 = StringUtils.uncapitalize("xeR=");
      assertEquals("xeR=", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test682()  throws Throwable  {
      String string0 = StringUtils.upperCase("Strings must not be null");
      assertEquals("STRINGS MUST NOT BE NULL", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.mid("", 0, 0);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.deleteWhitespace("...");
      assertEquals("...", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      boolean boolean0 = StringUtils.containsWhitespace("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test683()  throws Throwable  {
      String string0 = StringUtils.substringBeforeLast("", "Minimum abbreviation width is %d");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.uncapitalize(" ");
      assertEquals(" ", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.rotate("273,myG#+3a1Smw", 201);
      assertEquals("3a1Smw273,myG#+", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      String string3 = StringUtils.removePattern(" in an array of ", " ");
      assertEquals("inanarrayof", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
  }

  @Test(timeout = 4000)
  public void test684()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      charSequenceArray0[0] = (CharSequence) "KX+";
      charSequenceArray0[3] = (CharSequence) "KX+";
      charSequenceArray0[4] = (CharSequence) "KX+";
      int int0 = StringUtils.indexOfDifference(charSequenceArray0);
      assertEquals(0, int0);
      assertEquals(5, charSequenceArray0.length);
      
      String string0 = StringUtils.replaceIgnoreCase("KX+", "6ov 0=W<;OhZ0[", "6ov 0=W<;OhZ0[", (int) '^');
      assertEquals("KX+", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test685()  throws Throwable  {
      String string0 = StringUtils.replaceFirst("", "`r\"I<58oyHO@en", "{}");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.LF;
      assertEquals("\n", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String[] stringArray0 = new String[8];
      stringArray0[1] = "\n";
      stringArray0[2] = "";
      stringArray0[3] = "`r\"I<58oyHO@en";
      stringArray0[4] = "\n";
      stringArray0[5] = "`r\"I<58oyHO@en";
      stringArray0[6] = "R=X\"eH+!97+RVrt&{}";
      stringArray0[7] = "R=X\"eH+!97+RVrt&{}";
      String[] stringArray1 = StringUtils.stripAll(stringArray0, "[J");
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(8, stringArray0.length);
      assertEquals(8, stringArray1.length);
      
      String string2 = StringUtils.substringAfter("18s+eV!zs7JMRnZkY", 29);
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertNotNull(string2);
      
      boolean boolean0 = StringUtils.isAllBlank(stringArray0);
      assertFalse(boolean0);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertNotSame(stringArray0, stringArray1);
      assertEquals(8, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test686()  throws Throwable  {
      String string0 = StringUtils.upperCase("Strings must not be null");
      assertEquals("STRINGS MUST NOT BE NULL", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.toRootLowerCase("Dh<PG9l");
      assertEquals("dh<pg9l", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.isAllUpperCase("dh<pg9l");
      assertFalse(boolean0);
      
      String[] stringArray0 = new String[7];
      stringArray0[0] = "STRINGS MUST NOT BE NULL";
      stringArray0[1] = "STRINGS MUST NOT BE NULL";
      stringArray0[2] = "Strings must not be null";
      stringArray0[3] = "dh<pg9l";
      stringArray0[4] = "Strings must not be null";
      stringArray0[5] = "Dh<PG9l";
      stringArray0[6] = "Strings must not be null";
      String string2 = StringUtils.getCommonPrefix(stringArray0);
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals(7, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test687()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("ND5", "ND5", 83);
      assertNotNull(stringArray0);
      assertEquals(2, stringArray0.length);
      
      String string0 = StringUtils.removeIgnoreCase((String) null, "M'2o/I");
      assertNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[6];
      charSequenceArray0[0] = (CharSequence) null;
      charSequenceArray0[1] = (CharSequence) null;
      charSequenceArray0[2] = (CharSequence) "ND5";
      charSequenceArray0[3] = (CharSequence) "ND5";
      String string1 = StringUtils.rightPad((String) null, 65);
      assertNull(string1);
      
      charSequenceArray0[4] = (CharSequence) null;
      charSequenceArray0[5] = (CharSequence) "ND5";
      int int0 = StringUtils.indexOfDifference(charSequenceArray0);
      assertEquals(0, int0);
      assertEquals(6, charSequenceArray0.length);
  }

  @Test(timeout = 4000)
  public void test688()  throws Throwable  {
      String string0 = StringUtils.trimToNull("Minimum abbreviation width with offset is %d");
      assertEquals("Minimum abbreviation width with offset is %d", string0);
      assertNotNull(string0);
      
      String string1 = "\n";
      String string2 = StringUtils.lowerCase("\n");
      assertEquals("\n", string2);
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      String string3 = "|N";
      String string4 = "Cloneable type Array element VbdG";
      String string5 = StringUtils.replaceChars("|N", "Minimum abbreviation width with offset is %d", "Cloneable type Array element VbdG");
      assertEquals("|N", string5);
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertTrue(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertNotNull(string5);
      
      boolean boolean0 = StringUtils.isAlphaSpace("Minimum abbreviation width with offset is %d");
      assertFalse(boolean0);
      
      Stack<String> stack0 = new Stack<String>();
      assertFalse(stack0.contains(string2));
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertNotNull(stack0);
      
      boolean boolean1 = stack0.remove((Object) "\n");
      assertFalse(stack0.contains("\n"));
      assertFalse(boolean1);
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertTrue(boolean1 == boolean0);
      
      ListIterator<String> listIterator0 = stack0.listIterator();
      assertFalse(stack0.contains("\n"));
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertFalse(listIterator0.hasNext());
      assertFalse(listIterator0.hasPrevious());
      assertNotNull(listIterator0);
      
      stack0.ensureCapacity(3551);
      assertFalse(stack0.contains("\n"));
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals(3551, stack0.capacity());
      
      boolean boolean2 = stack0.add("}@Mv|b~E#;PUx3O^5");
      assertTrue(stack0.contains("}@Mv|b~E#;PUx3O^5"));
      assertFalse(stack0.contains("\n"));
      assertTrue(boolean2);
      assertEquals(1, stack0.size());
      assertFalse(stack0.isEmpty());
      assertFalse(stack0.empty());
      assertEquals(3551, stack0.capacity());
      assertEquals("[}@Mv|b~E#;PUx3O^5]", stack0.toString());
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      
      String string6 = stack0.push("hmk*PBH_m=^t{|>FB-X");
      assertTrue(stack0.contains(string6));
      assertFalse(stack0.contains("\n"));
      assertEquals("hmk*PBH_m=^t{|>FB-X", string6);
      assertEquals("[}@Mv|b~E#;PUx3O^5, hmk*PBH_m=^t{|>FB-X]", stack0.toString());
      assertFalse(stack0.isEmpty());
      assertEquals(2, stack0.size());
      assertFalse(stack0.empty());
      assertEquals(3551, stack0.capacity());
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string0));
      assertNotNull(string6);
      
      // Undeclared exception!
      try { 
        StringUtils.join((Iterator<?>) listIterator0, "Locale must not be null");
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Vector$Itr", e);
      }
  }

  @Test(timeout = 4000)
  public void test689()  throws Throwable  {
      String string0 = StringUtils.unwrap("yK", 'b');
      assertEquals("yK", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.lowerCase("yK");
      assertEquals("yk", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.isAlphaSpace("yK");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test690()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "";
      stringArray0[1] = "fa;DNS,I=**@aeP2wA";
      stringArray0[2] = "$Zg4vz'<*";
      stringArray0[5] = "";
      stringArray0[6] = "";
      stringArray0[7] = "";
      String string0 = StringUtils.getCommonPrefix(stringArray0);
      assertEquals("", string0);
      assertNotNull(string0);
      assertEquals(8, stringArray0.length);
      
      boolean boolean0 = StringUtils.isAlphaSpace("");
      assertTrue(boolean0);
      
      String string1 = StringUtils.defaultString("");
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      charSequenceArray0[0] = (CharSequence) "";
      boolean boolean1 = StringUtils.isAllBlank(charSequenceArray0);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals(1, charSequenceArray0.length);
      
      String string2 = StringUtils.defaultIfEmpty("", "i5Bx]88.7ITWgP;D");
      assertEquals("i5Bx]88.7ITWgP;D", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test691()  throws Throwable  {
      String string0 = StringUtils.capitalize((String) null);
      assertNull(string0);
      
      int[] intArray0 = StringUtils.toCodePoints((CharSequence) null);
      assertNull(intArray0);
      
      String string1 = StringUtils.rotate("Q", (-449));
      assertEquals("Q", string1);
      assertNotNull(string1);
      
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(supplier0).get();
      String string2 = StringUtils.getIfBlank((String) null, supplier0);
      assertNull(string2);
      
      String string3 = StringUtils.remove("h3cF0:J#IK>Rju7", 'm');
      assertEquals("h3cF0:J#IK>Rju7", string3);
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
  }

  @Test(timeout = 4000)
  public void test692()  throws Throwable  {
      String string0 = StringUtils.rightPad("#", 0, "F1~Sp}mS5");
      assertEquals("#", string0);
      assertNotNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[8];
      charSequenceArray0[0] = (CharSequence) "#";
      charSequenceArray0[1] = (CharSequence) "F1~Sp}mS5";
      char[] charArray0 = new char[0];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charBuffer0.limit());
      assertFalse(charBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.capacity());
      assertEquals(0, charBuffer0.length());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals("", charBuffer0.toString());
      assertTrue(charBuffer0.hasArray());
      assertEquals(0, charBuffer0.remaining());
      assertNotNull(charBuffer0);
      assertEquals(0, charArray0.length);
      
      charSequenceArray0[2] = (CharSequence) charBuffer0;
      charSequenceArray0[3] = (CharSequence) "";
      charSequenceArray0[4] = (CharSequence) "#";
      charSequenceArray0[5] = (CharSequence) "0FO5}hhQ5YS+G9";
      CharBuffer charBuffer1 = CharBuffer.wrap(charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charBuffer1.position());
      assertEquals(0, charBuffer1.limit());
      assertFalse(charBuffer1.hasRemaining());
      assertTrue(charBuffer1.hasArray());
      assertFalse(charBuffer1.isReadOnly());
      assertFalse(charBuffer1.isDirect());
      assertEquals(0, charBuffer1.remaining());
      assertEquals(0, charBuffer1.capacity());
      assertEquals(0, charBuffer1.length());
      assertEquals("", charBuffer1.toString());
      assertEquals(0, charBuffer1.arrayOffset());
      assertTrue(charBuffer1.equals((Object)charBuffer0));
      assertNotNull(charBuffer1);
      assertNotSame(charBuffer1, charBuffer0);
      assertEquals(0, charArray0.length);
      
      charSequenceArray0[6] = (CharSequence) "#";
      charSequenceArray0[7] = (CharSequence) "";
      boolean boolean0 = StringUtils.equalsAnyIgnoreCase("#", charSequenceArray0);
      assertTrue(boolean0);
      assertEquals(8, charSequenceArray0.length);
      
      CharBuffer charBuffer2 = CharBuffer.wrap(charArray0, 0, 0);
      assertArrayEquals(new char[] {}, charArray0);
      assertFalse(charBuffer2.isReadOnly());
      assertEquals(0, charBuffer2.remaining());
      assertEquals(0, charBuffer2.capacity());
      assertEquals(0, charBuffer2.length());
      assertFalse(charBuffer2.hasRemaining());
      assertEquals(0, charBuffer2.limit());
      assertEquals("", charBuffer2.toString());
      assertEquals(0, charBuffer2.arrayOffset());
      assertEquals(0, charBuffer2.position());
      assertTrue(charBuffer2.hasArray());
      assertFalse(charBuffer2.isDirect());
      assertTrue(charBuffer2.equals((Object)charBuffer0));
      assertTrue(charBuffer2.equals((Object)charBuffer1));
      assertNotNull(charBuffer2);
      assertNotSame(charBuffer2, charBuffer0);
      assertNotSame(charBuffer2, charBuffer1);
      assertEquals(0, charArray0.length);
      
      IntStream intStream0 = charBuffer2.chars();
      assertArrayEquals(new char[] {}, charArray0);
      assertFalse(charBuffer2.isReadOnly());
      assertEquals(0, charBuffer2.remaining());
      assertEquals(0, charBuffer2.capacity());
      assertEquals(0, charBuffer2.length());
      assertFalse(charBuffer2.hasRemaining());
      assertEquals(0, charBuffer2.limit());
      assertEquals("", charBuffer2.toString());
      assertEquals(0, charBuffer2.arrayOffset());
      assertEquals(0, charBuffer2.position());
      assertTrue(charBuffer2.hasArray());
      assertFalse(charBuffer2.isDirect());
      assertTrue(charBuffer2.equals((Object)charBuffer0));
      assertTrue(charBuffer2.equals((Object)charBuffer1));
      assertNotNull(intStream0);
      assertNotSame(charBuffer2, charBuffer0);
      assertNotSame(charBuffer2, charBuffer1);
      assertEquals(0, charArray0.length);
      
      CharBuffer charBuffer3 = StringUtils.defaultIfBlank(charBuffer2, charBuffer2);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charBuffer3.limit());
      assertFalse(charBuffer3.hasRemaining());
      assertEquals(0, charBuffer3.capacity());
      assertEquals(0, charBuffer3.position());
      assertEquals(0, charBuffer3.remaining());
      assertFalse(charBuffer3.isReadOnly());
      assertFalse(charBuffer3.isDirect());
      assertEquals("", charBuffer3.toString());
      assertTrue(charBuffer3.hasArray());
      assertEquals(0, charBuffer3.length());
      assertEquals(0, charBuffer3.arrayOffset());
      assertFalse(charBuffer2.isReadOnly());
      assertEquals(0, charBuffer2.remaining());
      assertEquals(0, charBuffer2.capacity());
      assertEquals(0, charBuffer2.length());
      assertFalse(charBuffer2.hasRemaining());
      assertEquals(0, charBuffer2.limit());
      assertEquals("", charBuffer2.toString());
      assertEquals(0, charBuffer2.arrayOffset());
      assertEquals(0, charBuffer2.position());
      assertTrue(charBuffer2.hasArray());
      assertFalse(charBuffer2.isDirect());
      assertTrue(charBuffer3.equals((Object)charBuffer1));
      assertTrue(charBuffer3.equals((Object)charBuffer0));
      assertTrue(charBuffer2.equals((Object)charBuffer0));
      assertTrue(charBuffer2.equals((Object)charBuffer1));
      assertNotNull(charBuffer3);
      assertNotSame(charBuffer3, charBuffer1);
      assertNotSame(charBuffer3, charBuffer0);
      assertSame(charBuffer3, charBuffer2);
      assertNotSame(charBuffer2, charBuffer0);
      assertNotSame(charBuffer2, charBuffer1);
      assertSame(charBuffer2, charBuffer3);
      assertEquals(0, charArray0.length);
      
      int int0 = StringUtils.countMatches(charSequenceArray0[4], charSequenceArray0[2]);
      assertEquals(0, int0);
      assertEquals(8, charSequenceArray0.length);
  }

  @Test(timeout = 4000)
  public void test693()  throws Throwable  {
      String[] stringArray0 = new String[0];
      String string0 = StringUtils.getCommonPrefix(stringArray0);
      assertEquals("", string0);
      assertNotNull(string0);
      assertEquals(0, stringArray0.length);
      
      int int0 = StringUtils.indexOf((CharSequence) "", 90);
      assertEquals((-1), int0);
      
      String string1 = StringUtils.defaultString("q5 fqSjG0/~", (String) null);
      assertEquals("q5 fqSjG0/~", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.wrapIfMissing("`q+e`Lkt92+z8", 'E');
      assertEquals("E`q+e`Lkt92+z8E", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test694()  throws Throwable  {
      String[] stringArray0 = new String[4];
      String string0 = StringUtils.getCommonPrefix(stringArray0);
      assertEquals("", string0);
      assertNotNull(string0);
      assertEquals(4, stringArray0.length);
      
      String string1 = StringUtils.join((Object[]) stringArray0, "org.apache.commons.lang3.StringUtils", 228, 228);
      assertEquals("", string1);
      assertNotNull(string1);
      assertEquals(4, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test695()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      charSequenceArray0[0] = (CharSequence) "0FO5}hhQ5YS+G9";
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      int int0 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      String string0 = StringUtils.prependIfMissing("#ax&EK7nJTA(Oe;l zJ", "\r", charSequenceArray0);
      assertEquals("\r#ax&EK7nJTA(Oe;l zJ", string0);
      assertNotNull(string0);
      assertEquals(3, charSequenceArray0.length);
      
      String string1 = StringUtils.defaultString("uzTt(", "7GZbxB~b%1~hDW|CFT");
      assertEquals("uzTt(", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      int[] intArray0 = StringUtils.toCodePoints("uzTt(");
      assertArrayEquals(new int[] {117, 122, 84, 116, 40}, intArray0);
      assertNotNull(intArray0);
      assertEquals(5, intArray0.length);
      
      CharSequence charSequence0 = StringUtils.defaultIfEmpty((CharSequence) "", (CharSequence) "");
      assertEquals("", charSequence0);
      assertFalse(charSequence0.equals((Object)string1));
      assertFalse(charSequence0.equals((Object)string0));
      assertNotNull(charSequence0);
      
      boolean boolean0 = StringUtils.containsWhitespace("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test696()  throws Throwable  {
      String string0 = StringUtils.substringAfterLast("s", 999);
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.countMatches((CharSequence) "", (CharSequence) "s");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test697()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)762;
      String string0 = StringUtils.join(shortArray0, 'M');
      assertArrayEquals(new short[] {(short)762}, shortArray0);
      assertEquals("762", string0);
      assertNotNull(string0);
      assertEquals(1, shortArray0.length);
      
      int[] intArray0 = StringUtils.toCodePoints("762");
      assertArrayEquals(new int[] {55, 54, 50}, intArray0);
      assertNotNull(intArray0);
      assertEquals(3, intArray0.length);
      
      boolean boolean0 = StringUtils.isAllLowerCase("762");
      assertFalse(boolean0);
      
      String string1 = StringUtils.trimToEmpty("v0GR]r9fIy");
      assertEquals("v0GR]r9fIy", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      charSequenceArray0[0] = (CharSequence) "v0GR]r9fIy";
      boolean boolean1 = StringUtils.isAllBlank(charSequenceArray0);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals(1, charSequenceArray0.length);
      
      String string2 = StringUtils.remove("A", 'M');
      assertEquals("A", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test698()  throws Throwable  {
      String string0 = StringUtils.defaultString(" ");
      assertEquals(" ", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test699()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "";
      stringArray0[1] = "fa;DNS,I=**@aeP2wA";
      stringArray0[2] = "$Zg4vz'<*";
      stringArray0[3] = "Array and element cannot both be null";
      stringArray0[4] = "";
      stringArray0[5] = "";
      stringArray0[6] = "";
      stringArray0[7] = "";
      String string0 = StringUtils.getCommonPrefix(stringArray0);
      assertEquals("", string0);
      assertNotNull(string0);
      assertEquals(8, stringArray0.length);
      
      boolean boolean0 = StringUtils.isAlphaSpace("");
      assertTrue(boolean0);
      
      String string1 = StringUtils.defaultString("");
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier0).get();
      String string2 = StringUtils.getIfBlank("", supplier0);
      assertNull(string2);
      
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      charSequenceArray0[0] = (CharSequence) "";
      boolean boolean1 = StringUtils.isAllBlank(charSequenceArray0);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals(1, charSequenceArray0.length);
      
      String string3 = StringUtils.defaultIfEmpty("", "i5Bx]88.7ITWgP;D");
      assertEquals("i5Bx]88.7ITWgP;D", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      
      boolean boolean2 = StringUtils.endsWith("", "\r");
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      
      String string4 = StringUtils.defaultString("");
      assertEquals("", string4);
      assertTrue(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertNotNull(string4);
      
      int int0 = StringUtils.countMatches((CharSequence) "", (CharSequence) "\r");
      assertEquals(0, int0);
      
      String string5 = StringUtils.defaultString("");
      assertEquals("", string5);
      assertTrue(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertTrue(string5.equals((Object)string4));
      assertTrue(string5.equals((Object)string0));
      assertNotNull(string5);
      
      String string6 = StringUtils.substring("", 0);
      assertEquals("", string6);
      assertTrue(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string3));
      assertTrue(string6.equals((Object)string4));
      assertTrue(string6.equals((Object)string5));
      assertTrue(string6.equals((Object)string0));
      assertNotNull(string6);
      
      String string7 = StringUtils.appendIfMissing("Locale must not be null", "", stringArray0);
      assertEquals("Locale must not be null", string7);
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string4));
      assertNotNull(string7);
      assertEquals(8, stringArray0.length);
      
      String string8 = StringUtils.replace("", "^P%j9Z<?^4>)R3x", "$.oi^#6Yamk?F");
      assertEquals("", string8);
      assertTrue(string8.equals((Object)string4));
      assertTrue(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string3));
      assertTrue(string8.equals((Object)string0));
      assertTrue(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string7));
      assertTrue(string8.equals((Object)string6));
      assertNotNull(string8);
  }

  @Test(timeout = 4000)
  public void test700()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("BIRD\"s", "BIRD\"s");
      assertNotNull(stringArray0);
      assertEquals(2, stringArray0.length);
      
      int int0 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      boolean boolean0 = StringUtils.isAnyBlank(stringArray0);
      assertTrue(boolean0);
      assertEquals(2, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test701()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase((String) null);
      assertNull(stringArray0);
      
      String string0 = StringUtils.repeat('T', (-1623));
      assertEquals("", string0);
      assertNotNull(string0);
      
      char[] charArray0 = new char[7];
      charArray0[0] = 'T';
      charArray0[1] = 'T';
      charArray0[2] = 'T';
      charArray0[3] = 'T';
      charArray0[4] = 'T';
      charArray0[5] = 'T';
      charArray0[6] = 'T';
      boolean boolean0 = StringUtils.containsAny((CharSequence) "", charArray0);
      assertArrayEquals(new char[] {'T', 'T', 'T', 'T', 'T', 'T', 'T'}, charArray0);
      assertFalse(boolean0);
      assertEquals(7, charArray0.length);
      
      String string1 = StringUtils.replaceFirst(" ", (String) null, (String) null);
      assertEquals(" ", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      int int0 = StringUtils.length((CharSequence) null);
      assertEquals(0, int0);
      
      String string2 = StringUtils.removeEnd("J;", (String) null);
      assertEquals("J;", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      String string3 = StringUtils.substringBefore("Array element ", 2445);
      assertEquals("Array element ", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      
      boolean boolean1 = StringUtils.isAllBlank((CharSequence[]) null);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      String string4 = StringUtils.substring((String) null, 0, 64);
      assertNull(string4);
      
      String string5 = StringUtils.abbreviateMiddle("%yn$eY4m", "", 3261);
      assertEquals("%yn$eY4m", string5);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertNotNull(string5);
      
      String string6 = StringUtils.center("KH/M.k5|0", 64);
      assertEquals("                           KH/M.k5|0                            ", string6);
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string1));
      assertNotNull(string6);
  }

  @Test(timeout = 4000)
  public void test702()  throws Throwable  {
      String string0 = StringUtils.removeEndIgnoreCase("g", ";v1\"b1bn|{q4gT");
      assertEquals("g", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.repeat("offset cannot be negative", 13);
      assertEquals("offset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negative", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      charSequenceArray0[0] = (CharSequence) "offset cannot be negative";
      charSequenceArray0[1] = (CharSequence) ";v1\"b1bn|{q4gT";
      charSequenceArray0[2] = (CharSequence) "offset cannot be negative";
      boolean boolean0 = StringUtils.isAnyEmpty(charSequenceArray0);
      assertFalse(boolean0);
      assertEquals(3, charSequenceArray0.length);
  }

  @Test(timeout = 4000)
  public void test703()  throws Throwable  {
      String string0 = StringUtils.SPACE;
      assertEquals(" ", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isNotBlank(" ");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test704()  throws Throwable  {
      String string0 = StringUtils.CR;
      assertEquals("\r", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isNotBlank("\r");
      assertFalse(boolean0);
      
      String string1 = StringUtils.substringBefore("", (-2053));
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      boolean boolean1 = StringUtils.endsWith("", "\r");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      charSequenceArray0[0] = (CharSequence) "";
      String string2 = StringUtils.appendIfMissing("ch", "ch", charSequenceArray0);
      assertEquals("ch", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals(1, charSequenceArray0.length);
      
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "ch", (CharSequence) "ch", (-1));
      assertEquals((-1), int0);
      
      int int1 = StringUtils.indexOf((CharSequence) "ch", (-1));
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test705()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      String string0 = StringUtils.join((Iterable<?>) linkedList0, ">Qvi864");
      assertFalse(linkedList0.contains(">Qvi864"));
      assertEquals("", string0);
      assertEquals(0, linkedList0.size());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test706()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Iterator<Object> iterator0 = linkedList0.iterator();
      assertEquals(0, linkedList0.size());
      assertNotNull(iterator0);
      
      String string0 = StringUtils.join(iterator0, "p{InCombiningDiacriticalMarks}+");
      assertFalse(linkedList0.contains("p{InCombiningDiacriticalMarks}+"));
      assertEquals("", string0);
      assertEquals(0, linkedList0.size());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test707()  throws Throwable  {
      int int0 = 641;
      String string0 = StringUtils.left("zglsPnt>L1<gncB!+", 641);
      assertEquals("zglsPnt>L1<gncB!+", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.replaceAll("Object varargs must not be null", "'RXJ", "Array element ");
      assertEquals("Object varargs must not be null", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = null;
      Locale locale0 = Locale.TAIWAN;
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertNotNull(locale0);
      
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      ArrayList<Locale> arrayList1 = new ArrayList<Locale>();
      assertFalse(arrayList1.contains(locale0));
      assertEquals(0, arrayList1.size());
      assertTrue(arrayList1.isEmpty());
      assertNotNull(arrayList1);
      
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) arrayList0, (Collection<Locale>) arrayList1, locale_FilteringMode0);
      assertFalse(arrayList1.contains(locale0));
      assertFalse(list0.contains(locale0));
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList1.size());
      assertTrue(arrayList1.isEmpty());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
      
      Locale.LanguageRange locale_LanguageRange0 = null;
      try {
        locale_LanguageRange0 = new Locale.LanguageRange("maxWith cannot be negative", 641);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // weight=641.0
         //
         verifyException("java.util.Locale$LanguageRange", e);
      }
  }

  @Test(timeout = 4000)
  public void test708()  throws Throwable  {
      String[] stringArray0 = new String[1];
      String string0 = StringUtils.getCommonPrefix(stringArray0);
      assertEquals("", string0);
      assertNotNull(string0);
      assertEquals(1, stringArray0.length);
      
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      String string1 = StringUtils.repeat("P", "", 4);
      assertEquals("PPPP", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test709()  throws Throwable  {
      String string0 = StringUtils.repeat("2", (String) null, (-5));
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test710()  throws Throwable  {
      String string0 = StringUtils.rightPad("mr", 3003, 'v');
      assertNotNull(string0);
      
      String string1 = StringUtils.center(string0, 3003, 'v');
      assertNotNull(string1);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      String string2 = StringUtils.join(booleanArray0, 'v', 3003, 3003);
      assertTrue(Arrays.equals(new boolean[] {false, true}, booleanArray0));
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals(2, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test711()  throws Throwable  {
      String string0 = StringUtils.repeat("", "", 0);
      assertEquals("", string0);
      assertNotNull(string0);
      
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = true;
      booleanArray0[5] = false;
      String string1 = StringUtils.join(booleanArray0, 'x', 0, 0);
      assertTrue(Arrays.equals(new boolean[] {false, true, false, false, true, false}, booleanArray0));
      assertEquals("", string1);
      assertNotNull(string1);
      assertEquals(6, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test712()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      String string0 = StringUtils.prependIfMissingIgnoreCase("qD/.5Q]{&GZM2vH<]", "qD/.5Q]{&GZM2vH<]", charSequenceArray0);
      assertEquals("qD/.5Q]{&GZM2vH<]", string0);
      assertNotNull(string0);
      assertEquals(1, charSequenceArray0.length);
      
      String string1 = StringUtils.substringAfterLast("qD/.5Q]{&GZM2vH<]", "");
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.repeat("", (String) null, 4);
      assertEquals("", string2);
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      String string3 = StringUtils.removeEndIgnoreCase("{vJPe-A}{9*.p5", "qD/.5Q]{&GZM2vH<]");
      assertEquals("{vJPe-A}{9*.p5", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
  }

  @Test(timeout = 4000)
  public void test713()  throws Throwable  {
      String string0 = StringUtils.deleteWhitespace("8c>!) u,eei!\"I2yC-U");
      assertEquals("8c>!)u,eei!\"I2yC-U", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.countMatches((CharSequence) "8c>!)u,eei!\"I2yC-U", 'v');
      assertEquals(0, int0);
      
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier0).get();
      String string1 = StringUtils.getIfEmpty("", supplier0);
      assertNull(string1);
  }

  @Test(timeout = 4000)
  public void test714()  throws Throwable  {
      String string0 = StringUtils.overlay("object", "7N", 53, 1);
      assertEquals("o7N", string0);
      assertNotNull(string0);
      
      Locale locale0 = Locale.ROOT;
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertNotNull(locale0);
      
      String[] stringArray0 = Locale.getISOLanguages();
      assertNotNull(stringArray0);
      assertEquals(188, stringArray0.length);
      
      String string1 = locale0.getDisplayLanguage();
      assertEquals("", string1);
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      int int0 = StringUtils.getFuzzyDistance("o7N", "o7N", locale0);
      assertEquals(7, int0);
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      
      char[] charArray0 = new char[3];
      charArray0[0] = '~';
      charArray0[1] = 'P';
      charArray0[2] = 'm';
      boolean boolean0 = StringUtils.containsNone((CharSequence) "object", charArray0);
      assertArrayEquals(new char[] {'~', 'P', 'm'}, charArray0);
      assertTrue(boolean0);
      assertEquals(3, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test715()  throws Throwable  {
      String[] stringArray0 = StringUtils.split("Wo>i");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      String string0 = StringUtils.upperCase("Wo>i");
      assertEquals("WO>I", string0);
      assertNotNull(string0);
      
      double double0 = StringUtils.getJaroWinklerDistance("WO>I", "Wo>i");
      assertEquals(0.67, double0, 0.01);
      
      String string1 = StringUtils.firstNonEmpty(stringArray0);
      assertEquals("Wo>i", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(1, stringArray0.length);
      
      String string2 = StringUtils.substringBefore("Wo>i", 1928);
      assertEquals("Wo>i", string2);
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertNotNull(string2);
      
      String string3 = StringUtils.getCommonPrefix(stringArray0);
      assertEquals("Wo>i", string3);
      assertFalse(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string2));
      assertNotNull(string3);
      assertEquals(1, stringArray0.length);
      
      String[] stringArray1 = StringUtils.splitPreserveAllTokens("p{InCombiningDiacriticalMarks}+", '3');
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(1, stringArray1.length);
      
      String string4 = StringUtils.upperCase("UpDjdzd6M#&MP");
      assertEquals("UPDJDZD6M#&MP", string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertNotNull(string4);
      
      short[] shortArray0 = new short[0];
      String string5 = StringUtils.join(shortArray0, '\"', 573, 51);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals("", string5);
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertNotNull(string5);
      assertEquals(0, shortArray0.length);
      
      boolean boolean0 = StringUtils.containsNone((CharSequence) "Wo>i", "p{InCombiningDiacriticalMarks}+");
      assertFalse(boolean0);
      
      String string6 = StringUtils.abbreviate("qg@`'r%c!d", 51);
      assertEquals("qg@`'r%c!d", string6);
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string5));
      assertNotNull(string6);
  }

  @Test(timeout = 4000)
  public void test716()  throws Throwable  {
      String string0 = StringUtils.deleteWhitespace(", Length: 0%!)");
      assertEquals(",Length:0%!)", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.substringBefore("Search and Replace aLray lengths don#g match: ", 115);
      assertEquals("Search and Replace aLray length", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.containsNone((CharSequence) ",Length:0%!)", ",Length:0%!)");
      assertFalse(boolean0);
      
      String string2 = StringUtils.replaceIgnoreCase("FTiYw", "Search and Replace aLray length", (String) null, 115);
      assertEquals("FTiYw", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      String string3 = StringUtils.chop("FTiYw");
      assertEquals("FTiY", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      
      boolean boolean1 = StringUtils.isAllLowerCase("Search and Replace aLray lengths don#g match: ");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test717()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = '^';
      charArray0[1] = '\\';
      charArray0[2] = '$';
      CharSequence[] charSequenceArray0 = new CharSequence[7];
      charSequenceArray0[0] = null;
      charSequenceArray0[1] = null;
      charSequenceArray0[2] = null;
      charSequenceArray0[3] = null;
      String string0 = StringUtils.overlay("Index: ", "org.apache.commons.lang3.RegExUtils", 98, 2);
      assertEquals("Inorg.apache.commons.lang3.RegExUtils", string0);
      assertNotNull(string0);
      
      charSequenceArray0[4] = (CharSequence) "Inorg.apache.commons.lang3.RegExUtils";
      charSequenceArray0[5] = null;
      charSequenceArray0[6] = null;
      boolean boolean0 = StringUtils.isNoneBlank(charSequenceArray0);
      assertFalse(boolean0);
      assertEquals(7, charSequenceArray0.length);
      
      String string1 = StringUtils.substringBetween("Inorg.apache.commons.lang3.RegExUtils", "Locale must not be null", "[D/.5Q]{sGZM2sH<] in an array of ");
      assertNull(string1);
      
      int[] intArray0 = StringUtils.toCodePoints(charSequenceArray0[0]);
      assertNull(intArray0);
      assertEquals(7, charSequenceArray0.length);
      
      String string2 = StringUtils.center("[D/.5Q]{sGZM2sH<] in an array of ", 2, '^');
      assertEquals("[D/.5Q]{sGZM2sH<] in an array of ", string2);
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test718()  throws Throwable  {
      boolean boolean0 = StringUtils.endsWithIgnoreCase((CharSequence) null, (CharSequence) null);
      assertTrue(boolean0);
      
      Object[] objectArray0 = new Object[6];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      objectArray0[1] = (Object) null;
      String string0 = StringUtils.rightPad("", 2986, "");
      assertNotNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      String string1 = StringUtils.normalizeSpace("org.apache.commons.lang3.exception.CloneFailedException");
      assertEquals("org.apache.commons.lang3.exception.CloneFailedException", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      charSequenceArray0[0] = (CharSequence) "org.apache.commons.lang3.exception.CloneFailedException";
      charSequenceArray0[1] = (CharSequence) string0;
      charSequenceArray0[2] = (CharSequence) "";
      boolean boolean1 = StringUtils.isNoneBlank(charSequenceArray0);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      assertEquals(3, charSequenceArray0.length);
  }

  @Test(timeout = 4000)
  public void test719()  throws Throwable  {
      String string0 = StringUtils.uncapitalize("Strings must not be null");
      assertEquals("strings must not be null", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.substringBetween("Strings must not be null", "Strings must not be null", "gQ'*>c#mWi");
      assertNull(string1);
      
      boolean boolean0 = StringUtils.isAllUpperCase((CharSequence) null);
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isNotEmpty((CharSequence) null);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String string2 = StringUtils.wrap("strings must not be null", 'v');
      assertEquals("vstrings must not be nullv", string2);
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test720()  throws Throwable  {
      String string0 = StringUtils.stripToEmpty("G^7|+zFpb:oK?5");
      assertEquals("G^7|+zFpb:oK?5", string0);
      assertNotNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      charSequenceArray0[0] = (CharSequence) "G^7|+zFpb:oK?5";
      charSequenceArray0[1] = (CharSequence) "G^7|+zFpb:oK?5";
      charSequenceArray0[2] = (CharSequence) "G^7|+zFpb:oK?5";
      boolean boolean0 = StringUtils.isNoneBlank(charSequenceArray0);
      assertTrue(boolean0);
      assertEquals(3, charSequenceArray0.length);
  }

  @Test(timeout = 4000)
  public void test721()  throws Throwable  {
      char[] charArray0 = new char[0];
      boolean boolean0 = StringUtils.containsAny((CharSequence) "", charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertFalse(boolean0);
      assertEquals(0, charArray0.length);
      
      boolean boolean1 = StringUtils.containsNone((CharSequence) "", charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      assertEquals(0, charArray0.length);
      
      String string0 = StringUtils.stripStart("", "");
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test722()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlphanumeric("Cloneable type ");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test723()  throws Throwable  {
      String string0 = StringUtils.trimToNull("Minimum abbreviation width with offset is %d");
      assertEquals("Minimum abbreviation width with offset is %d", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "Minimum abbreviation width with offset is %d", (CharSequence) "Minimum abbreviation width with offset is %d", 1279);
      assertEquals(0, int0);
      
      String string1 = StringUtils.stripToEmpty("The character ");
      assertEquals("The character", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      int int1 = StringUtils.indexOf((CharSequence) "The character", 690);
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      
      String string2 = StringUtils.replaceAll(" ", "The character", "The character ");
      assertEquals(" ", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      boolean boolean0 = StringUtils.containsNone((CharSequence) "The character", (char[]) null);
      assertTrue(boolean0);
      
      String string3 = StringUtils.center((String) null, (-4055), "nM3$Ar?<x>");
      assertNull(string3);
  }

  @Test(timeout = 4000)
  public void test724()  throws Throwable  {
      String string0 = StringUtils.toRootUpperCase("");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.trimToEmpty("D!_0zjZ*M{X");
      assertEquals("D!_0zjZ*M{X", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.isAllUpperCase("D!_0zjZ*M{X");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test725()  throws Throwable  {
      String[] stringArray0 = new String[13];
      stringArray0[1] = "";
      String string0 = StringUtils.firstNonBlank(stringArray0);
      assertNull(string0);
      assertEquals(13, stringArray0.length);
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = (-1.0F);
      floatArray0[2] = 1383.2F;
      floatArray0[3] = (-2836.3674F);
      floatArray0[4] = (-2530.9985F);
      floatArray0[5] = 601.31F;
      floatArray0[6] = 1383.2F;
      char[] charArray0 = new char[4];
      charArray0[0] = 'j';
      String string1 = StringUtils.join(floatArray0, 'a', 428, 428);
      assertArrayEquals(new float[] {(-1.0F), 0.0F, 1383.2F, (-2836.3674F), (-2530.9985F), 601.31F, 1383.2F}, floatArray0, 0.01F);
      assertEquals("", string1);
      assertNotNull(string1);
      assertEquals(7, floatArray0.length);
      
      String string2 = StringUtils.rightPad("Locale must not be null", 24, 'j');
      assertEquals("Locale must not be nullj", string2);
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      boolean boolean0 = StringUtils.isAllUpperCase("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test726()  throws Throwable  {
      boolean boolean0 = StringUtils.isNoneBlank((CharSequence[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test727()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      charSequenceArray0[1] = (CharSequence) "8c>!) u,eei!\"I2yC-U";
      String string0 = StringUtils.abbreviate("8c>!) u,eei!\"I2yC-U", "8c>!) u,eei!\"I2yC-U", 3497);
      assertEquals("8c>!) u,eei!\"I2yC-U", string0);
      assertNotNull(string0);
      
      int[] intArray0 = new int[2];
      intArray0[1] = 3497;
      boolean boolean0 = StringUtils.equalsAny(charSequenceArray0[1], charSequenceArray0);
      assertTrue(boolean0);
      assertEquals(3, charSequenceArray0.length);
      
      String string1 = StringUtils.chop("8c>!) u,eei!\"I2yC-U");
      assertEquals("8c>!) u,eei!\"I2yC-", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test728()  throws Throwable  {
      String string0 = StringUtils.chomp("-yMQ ");
      assertEquals("-yMQ ", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.left("-yMQ ", (-3429));
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.removeAll("\r", "-yMQ ");
      assertEquals("\r", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      int int0 = StringUtils.lastOrdinalIndexOf("\r", "\r", (-3429));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test729()  throws Throwable  {
      boolean boolean0 = StringUtils.equalsAny("0FO5}hhQ5YS+G9", (CharSequence[]) null);
      assertFalse(boolean0);
      
      String string0 = StringUtils.abbreviateMiddle("\"=)<F}J@?", "@ }L~`r{\"{Wos?", 65);
      assertEquals("\"=)<F}J@?", string0);
      assertNotNull(string0);
      
      boolean boolean1 = StringUtils.isAlpha("\"=)<F}J@?");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test730()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "";
      int int0 = StringUtils.indexOf(charSequenceArray0[0], 256, (-732));
      assertEquals((-1), int0);
      assertEquals(3, charSequenceArray0.length);
      
      String string0 = StringUtils.left("", 361);
      assertEquals("", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.equalsAny("", charSequenceArray0);
      assertTrue(boolean0);
      assertEquals(3, charSequenceArray0.length);
      
      String string1 = StringUtils.removeStart("", "");
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test731()  throws Throwable  {
      String string0 = StringUtils.left("zglsPnt>L1<gncB!+", 641);
      assertEquals("zglsPnt>L1<gncB!+", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.replaceAll("Object varargs must not be null", "'RXJ", "Array element ");
      assertEquals("Object varargs must not be null", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      Locale locale0 = Locale.ITALY;
      assertEquals("it_IT", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.getLanguage());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("IT", locale0.getCountry());
      assertEquals("ITA", locale0.getISO3Country());
      assertNotNull(locale0);
      
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      ArrayList<Locale> arrayList1 = new ArrayList<Locale>();
      assertFalse(arrayList1.contains(locale0));
      assertTrue(arrayList1.isEmpty());
      assertEquals(0, arrayList1.size());
      assertNotNull(arrayList1);
      
      String string2 = StringUtils.strip("zglsPnt>L1<gncB!+", "Array element ");
      assertEquals("zglsPnt>L1<gncB!+", string2);
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test732()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      boolean boolean0 = StringUtils.equalsAny("W5(H4tAi|:5ZUo", charSequenceArray0);
      assertFalse(boolean0);
      assertEquals(1, charSequenceArray0.length);
  }

  @Test(timeout = 4000)
  public void test733()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      String string0 = StringUtils.removePattern("e8WB-!T)bQas0NZWw", "g2ez /k8ZhRG,3PF");
      assertEquals("e8WB-!T)bQas0NZWw", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isAllLowerCase("e8WB-!T)bQas0NZWw");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test734()  throws Throwable  {
      boolean boolean0 = StringUtils.endsWithIgnoreCase((CharSequence) null, (CharSequence) null);
      assertTrue(boolean0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      String string0 = StringUtils.rightPad("cl@4/OFHd,qE", 1831, "cl@4/OFHd,qE");
      assertNotNull(string0);
      
      int int0 = StringUtils.countMatches((CharSequence) null, (CharSequence) null);
      assertEquals(0, int0);
      
      boolean boolean1 = StringUtils.equals((CharSequence) null, (CharSequence) null);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test735()  throws Throwable  {
      String string0 = StringUtils.removeStart("'VE7Gato.F<_\";0q^t", "|1nJAo*eME'");
      assertEquals("'VE7Gato.F<_\";0q^t", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test736()  throws Throwable  {
      String string0 = StringUtils.removePattern("Array element ", "");
      assertEquals("Array element ", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOf((CharSequence) "", 3606, 0);
      assertEquals((-1), int0);
      
      String string1 = StringUtils.left("ZLXvs.[HA", 3606);
      assertEquals("ZLXvs.[HA", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[7];
      charSequenceArray0[0] = (CharSequence) "ZLXvs.[HA";
      charSequenceArray0[1] = (CharSequence) "ZLXvs.[HA";
      charSequenceArray0[2] = (CharSequence) "ZLXvs.[HA";
      charSequenceArray0[3] = (CharSequence) "Array element ";
      charSequenceArray0[4] = (CharSequence) "Array element ";
      charSequenceArray0[5] = (CharSequence) "ZLXvs.[HA";
      charSequenceArray0[6] = (CharSequence) "ZLXvs.[HA";
      boolean boolean0 = StringUtils.equalsAny("ZLXvs.[HA", charSequenceArray0);
      assertTrue(boolean0);
      assertEquals(7, charSequenceArray0.length);
      
      String string2 = StringUtils.removeStart("Array element ", "\r");
      assertEquals("Array element ", string2);
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test737()  throws Throwable  {
      boolean boolean0 = StringUtils.endsWithIgnoreCase((CharSequence) null, (CharSequence) null);
      assertTrue(boolean0);
      
      boolean boolean1 = StringUtils.containsOnly((CharSequence) null, "_y<3>_00@yl eJ'Cs");
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test738()  throws Throwable  {
      String string0 = StringUtils.lowerCase("org.apache.commons.lang3.exception.CloneFailedException");
      assertEquals("org.apache.commons.lang3.exception.clonefailedexception", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test739()  throws Throwable  {
      String string0 = StringUtils.removeEndIgnoreCase("f/w08g/veL6", "f/w08g/veL6");
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOf((CharSequence) "", (-3848));
      assertEquals((-1), int0);
      
      String string1 = StringUtils.lowerCase("");
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      boolean boolean0 = StringUtils.endsWithAny("f/w08g/veL6", charSequenceArray0);
      assertFalse(boolean0);
      assertEquals(0, charSequenceArray0.length);
      
      char[] charArray0 = new char[8];
      charArray0[0] = 'V';
      charArray0[1] = 's';
      charArray0[2] = 'H';
      charArray0[3] = 'N';
      charArray0[4] = 'g';
      charArray0[5] = 'N';
      charArray0[6] = 'a';
      charArray0[7] = '}';
      String string2 = StringUtils.valueOf(charArray0);
      assertArrayEquals(new char[] {'V', 's', 'H', 'N', 'g', 'N', 'a', '}'}, charArray0);
      assertEquals("VsHNgNa}", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals(8, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test740()  throws Throwable  {
      String string0 = StringUtils.right("diF3Wv9sN!", 8);
      assertEquals("F3Wv9sN!", string0);
      assertNotNull(string0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      String string1 = StringUtils.replaceEachRepeatedly("\n\n", (String[]) null, (String[]) null);
      assertEquals("\n\n", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[7];
      charSequenceArray0[0] = (CharSequence) "diF3Wv9sN!";
      String string2 = StringUtils.mid("\n\n", 8, 8);
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      CharSequence charSequence0 = StringUtils.defaultIfBlank((CharSequence) "", charSequenceArray0[0]);
      assertEquals("diF3Wv9sN!", charSequence0);
      assertFalse(charSequence0.equals((Object)string2));
      assertFalse(charSequence0.equals((Object)string0));
      assertFalse(charSequence0.equals((Object)string1));
      assertNotNull(charSequence0);
      assertEquals(7, charSequenceArray0.length);
      
      CharSequence charSequence1 = StringUtils.defaultIfEmpty((CharSequence) "\n\n", (CharSequence) "diF3Wv9sN!");
      assertEquals("\n\n", charSequence1);
      assertFalse(charSequence1.equals((Object)charSequence0));
      assertTrue(charSequence1.equals((Object)string1));
      assertFalse(charSequence1.equals((Object)string0));
      assertFalse(charSequence1.equals((Object)string2));
      assertNotNull(charSequence1);
      
      boolean boolean0 = StringUtils.endsWithAny("\n\n", (CharSequence[]) null);
      assertFalse(boolean0);
      
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "\n\n", (char[]) null);
      assertEquals((-1), int0);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("diF3Wv9sN!", 'V');
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test741()  throws Throwable  {
      String string0 = "5R#G$I";
      String string1 = null;
      String string2 = StringUtils.removeAll("5R#G$I", (String) null);
      assertEquals("5R#G$I", string2);
      assertTrue(string2.equals((Object)string0));
      assertNotNull(string2);
      
      String string3 = StringUtils.upperCase("5R#G$I");
      assertEquals("5R#G$I", string3);
      assertTrue(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string2));
      assertNotNull(string3);
      
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      boolean boolean0 = arrayList0.add((Locale.LanguageRange) null);
      assertTrue(boolean0);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      
      int int0 = 256;
      // Undeclared exception!
      try { 
        arrayList0.listIterator(256);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 256
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test742()  throws Throwable  {
      String string0 = StringUtils.removeAll(" ", " ");
      assertEquals("", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.containsAny((CharSequence) "", (char[]) null);
      assertFalse(boolean0);
      
      String string1 = StringUtils.center("", (-146), "Z_ai=p;(C|*]");
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test743()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = '2';
      charArray0[2] = '&';
      String string0 = StringUtils.join(charArray0, '\u0000', 67, 66);
      assertArrayEquals(new char[] {'2', '\u0000', '&'}, charArray0);
      assertEquals("", string0);
      assertNotNull(string0);
      assertEquals(3, charArray0.length);
      
      String string1 = StringUtils.replaceChars("", "", "");
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = "}xk 6mk&yQ`^suYg]";
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "}xk 6mk&yQ`^suYg]";
      String string3 = StringUtils.replaceIgnoreCase("", "", "");
      assertEquals("", string3);
      assertTrue(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      
      CharSequence[] charSequenceArray1 = new CharSequence[6];
      assertFalse(charSequenceArray1.equals((Object)charSequenceArray0));
      
      charSequenceArray1[0] = (CharSequence) "";
      boolean boolean0 = StringUtils.isMixedCase(charSequenceArray0[0]);
      assertFalse(boolean0);
      assertFalse(charSequenceArray0.equals((Object)charSequenceArray1));
      assertNotSame(charSequenceArray0, charSequenceArray1);
      assertEquals(3, charSequenceArray0.length);
      
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      String string4 = StringUtils.join((float[]) null, '7');
      assertNull(string4);
      
      try { 
        StringUtils.getBytes(" ", "E6$5XQ/l-@lOq");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(UnsupportedEncodingException e) {
      }
  }

  @Test(timeout = 4000)
  public void test744()  throws Throwable  {
      Object[] objectArray0 = new Object[7];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[1] = object0;
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      objectArray0[2] = object1;
      Object object2 = new Object();
      assertFalse(object2.equals((Object)object0));
      assertFalse(object2.equals((Object)object1));
      assertNotNull(object2);
      
      String[] stringArray0 = new String[8];
      stringArray0[0] = "od&s310)%'s";
      stringArray0[1] = "...";
      stringArray0[2] = "...";
      stringArray0[3] = "od&s310)%'s";
      stringArray0[4] = "\n\n";
      stringArray0[5] = "od&s310)%'s";
      stringArray0[6] = "`$Q5o'S#9:q`|d";
      String[] stringArray1 = StringUtils.stripAll(stringArray0, stringArray0[7]);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(8, stringArray0.length);
      assertEquals(8, stringArray1.length);
      
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "od&s310)%'s", (String) null);
      assertFalse(boolean0);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "od&s310)%'s", 22, 2);
      assertEquals((-1), int0);
      
      boolean boolean1 = StringUtils.containsIgnoreCase("`$Q5o'S#9:q`|d", "od&s310)%'s");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test745()  throws Throwable  {
      String[] stringArray0 = new String[0];
      String string0 = StringUtils.getCommonPrefix(stringArray0);
      assertEquals("", string0);
      assertNotNull(string0);
      assertEquals(0, stringArray0.length);
      
      String string1 = StringUtils.uncapitalize("VhCYY");
      assertEquals("vhCYY", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.containsIgnoreCase("vhCYY", "vhCYY");
      assertTrue(boolean0);
      
      String string2 = StringUtils.join((Object[]) stringArray0, '-', (-479), (-479));
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test746()  throws Throwable  {
      String[] stringArray0 = new String[1];
      String string0 = StringUtils.getCommonPrefix(stringArray0);
      assertEquals("", string0);
      assertNotNull(string0);
      assertEquals(1, stringArray0.length);
      
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      String string1 = StringUtils.replaceAll("", "", "_");
      assertEquals("_", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test747()  throws Throwable  {
      String string0 = StringUtils.wrap("Y)3n1`2_97u G#5v_Y)3n1`2_97u G#5v_Y)3n1`2_97u G#5v_Y)3n1`2_97u G#5v__", '-');
      assertEquals("-Y)3n1`2_97u G#5v_Y)3n1`2_97u G#5v_Y)3n1`2_97u G#5v_Y)3n1`2_97u G#5v__-", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test748()  throws Throwable  {
      float[] floatArray0 = new float[3];
      float float0 = 0.0F;
      floatArray0[0] = 0.0F;
      float float1 = 693.284F;
      floatArray0[1] = 693.284F;
      float float2 = 0.0F;
      floatArray0[2] = 0.0F;
      char char0 = '*';
      String string0 = StringUtils.join(floatArray0, '*');
      assertArrayEquals(new float[] {0.0F, 693.284F, 0.0F}, floatArray0, 0.01F);
      assertEquals("0.0*693.284*0.0", string0);
      assertNotNull(string0);
      assertEquals(3, floatArray0.length);
      
      boolean boolean0 = StringUtils.containsIgnoreCase("0.0*693.284*0.0", "0.0*693.284*0.0");
      assertTrue(boolean0);
      
      String string1 = StringUtils.wrap("0.0*693.284*0.0", '*');
      assertEquals("*0.0*693.284*0.0*", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = "c=`)jP5W%*gr";
      // Undeclared exception!
      try { 
        StringUtils.replaceAll("", "c=`)jP5W%*gr", "*0.0*693.284*0.0*");
        fail("Expecting exception: PatternSyntaxException");
      
      } catch(PatternSyntaxException e) {
         //
         // Unmatched closing ')' near index 2
         // c=`)jP5W%*gr
         //   ^
         //
         verifyException("java.util.regex.Pattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test749()  throws Throwable  {
      Locale locale0 = new Locale("Search and Replace array lengths don't match: ", ")1|", "p{InCombiningDiacriticalMarks}+");
      assertEquals("p{InCombiningDiacriticalMarks}+", locale0.getVariant());
      assertEquals(")1|", locale0.getCountry());
      assertEquals("search and replace array lengths don't match: _)1|_p{InCombiningDiacriticalMarks}+", locale0.toString());
      assertEquals("search and replace array lengths don't match: ", locale0.getLanguage());
      assertNotNull(locale0);
      
      String string0 = StringUtils.lowerCase("Search and Replace array lengths don't match: ", locale0);
      assertEquals("search and replace array lengths don't match: ", string0);
      assertEquals("p{InCombiningDiacriticalMarks}+", locale0.getVariant());
      assertEquals(")1|", locale0.getCountry());
      assertEquals("search and replace array lengths don't match: _)1|_p{InCombiningDiacriticalMarks}+", locale0.toString());
      assertEquals("search and replace array lengths don't match: ", locale0.getLanguage());
      assertNotNull(string0);
      
      String string1 = StringUtils.valueOf((char[]) null);
      assertNull(string1);
      
      Object[] objectArray0 = new Object[8];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      objectArray0[1] = (Object) "search and replace array lengths don't match: ";
      objectArray0[2] = (Object) ")1|";
      Locale locale1 = (Locale)locale0.clone();
      assertEquals("p{InCombiningDiacriticalMarks}+", locale0.getVariant());
      assertEquals(")1|", locale0.getCountry());
      assertEquals("search and replace array lengths don't match: _)1|_p{InCombiningDiacriticalMarks}+", locale0.toString());
      assertEquals("search and replace array lengths don't match: ", locale0.getLanguage());
      assertEquals("search and replace array lengths don't match: ", locale1.getLanguage());
      assertEquals(")1|", locale1.getCountry());
      assertEquals("p{InCombiningDiacriticalMarks}+", locale1.getVariant());
      assertEquals("search and replace array lengths don't match: _)1|_p{InCombiningDiacriticalMarks}+", locale1.toString());
      assertTrue(locale1.equals((Object)locale0));
      assertNotNull(locale1);
      assertNotSame(locale0, locale1);
      assertNotSame(locale1, locale0);
      
      objectArray0[3] = (Object) "search and replace array lengths don't match: ";
      objectArray0[4] = (Object) locale0;
      objectArray0[5] = (Object) locale0;
      objectArray0[6] = (Object) ")1|";
      objectArray0[7] = (Object) locale0;
      String string2 = StringUtils.join(objectArray0, '&', 10, (-870));
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals(8, objectArray0.length);
      
      boolean boolean0 = StringUtils.endsWithAny("Search and Replace array lengths don't match: ", (CharSequence[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test750()  throws Throwable  {
      String string0 = StringUtils.leftPad("The String must not be empty", 12, 'I');
      assertEquals("The String must not be empty", string0);
      assertNotNull(string0);
      
      char[] charArray0 = new char[6];
      charArray0[0] = 'd';
      charArray0[2] = 'I';
      String string1 = StringUtils.mid("", 0, 0);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.removeEnd("The String must not be empty", "");
      assertEquals("The String must not be empty", string2);
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      String string3 = StringUtils.abbreviate("The String must not be empty", "The String must not be empty", 128);
      assertEquals("The String must not be empty", string3);
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string2));
      assertNotNull(string3);
      
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      assertArrayEquals(new char[] {'d', '\u0000', 'I', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals("d\u0000I\u0000\u0000\u0000", charBuffer0.toString());
      assertEquals(6, charBuffer0.limit());
      assertEquals(6, charBuffer0.length());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(6, charBuffer0.remaining());
      assertEquals(6, charBuffer0.capacity());
      assertTrue(charBuffer0.hasArray());
      assertTrue(charBuffer0.hasRemaining());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.isDirect());
      assertNotNull(charBuffer0);
      assertEquals(6, charArray0.length);
      
      int int0 = StringUtils.countMatches((CharSequence) charBuffer0, (CharSequence) charBuffer0);
      assertArrayEquals(new char[] {'d', '\u0000', 'I', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(1, int0);
      assertEquals("d\u0000I\u0000\u0000\u0000", charBuffer0.toString());
      assertEquals(6, charBuffer0.limit());
      assertEquals(6, charBuffer0.length());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(6, charBuffer0.remaining());
      assertEquals(6, charBuffer0.capacity());
      assertTrue(charBuffer0.hasArray());
      assertTrue(charBuffer0.hasRemaining());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.isDirect());
      assertEquals(6, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test751()  throws Throwable  {
      String string0 = StringUtils.unwrap("Search and Replace array lengths don't match: ", "#");
      assertEquals("Search and Replace array lengths don't match: ", string0);
      assertNotNull(string0);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-1.0);
      doubleArray0[1] = 1.0;
      doubleArray0[2] = 1.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (-1202.7774749406442);
      int int0 = StringUtils.indexOfDifference((CharSequence) "Search and Replace array lengths don't match: ", (CharSequence) "#");
      assertEquals(0, int0);
      
      int int1 = StringUtils.compare("', is neither of type Map.Entry nor an Array", "...");
      assertEquals((-7), int1);
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test752()  throws Throwable  {
      String string0 = StringUtils.mid("F/@Lu2J", (-9), (-9));
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.removeEnd("\n", "\n");
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      // Undeclared exception!
      try { 
        StringUtils.abbreviate("org.apache.commons.lang3.ObjectUtils$Null", "...", (-712));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum abbreviation width is 4
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test753()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      Object object0 = new Object();
      assertNotNull(object0);
      
      String string0 = StringUtils.join(objectArray0, 'p');
      assertEquals("", string0);
      assertNotNull(string0);
      assertEquals(1, objectArray0.length);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "", (CharSequence) "");
      assertEquals(0, int0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      charSequenceArray0[0] = (CharSequence) "";
      boolean boolean0 = StringUtils.endsWithAny("", charSequenceArray0);
      assertFalse(boolean0);
      assertEquals(1, charSequenceArray0.length);
      
      int int1 = StringUtils.countMatches((CharSequence) "", 'p');
      assertEquals(0, int1);
      assertTrue(int1 == int0);
      
      int int2 = StringUtils.lastIndexOfIgnoreCase(charSequenceArray0[0], (CharSequence) "");
      assertEquals(0, int2);
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals(1, charSequenceArray0.length);
      
      String string1 = StringUtils.removeStartIgnoreCase("", "");
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.substringAfterLast("", "");
      assertEquals("", string2);
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertNotNull(string2);
      
      boolean boolean1 = StringUtils.startsWithIgnoreCase("", "");
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      // Undeclared exception!
      try { 
        StringUtils.truncate("HOpXBhJ24YIOpY(0+}XrQF1Gf", (-269), 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // offset cannot be negative
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test754()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = '';
      charArray0[1] = '';
      charArray0[2] = '';
      charArray0[3] = '';
      charArray0[4] = '';
      charArray0[5] = '';
      String string0 = StringUtils.valueOf(charArray0);
      assertArrayEquals(new char[] {'', '', '', '', '', ''}, charArray0);
      assertEquals("", string0);
      assertNotNull(string0);
      assertEquals(6, charArray0.length);
      
      CharSequence[] charSequenceArray0 = new CharSequence[6];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "";
      charSequenceArray0[2] = (CharSequence) "";
      charSequenceArray0[3] = (CharSequence) "";
      charSequenceArray0[4] = (CharSequence) "";
      String string1 = StringUtils.removeIgnoreCase("", "[D/.5Q]{sGZM2sH<] in an array of ");
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      charSequenceArray0[5] = (CharSequence) "";
      boolean boolean0 = StringUtils.isAllBlank(charSequenceArray0);
      assertFalse(boolean0);
      assertEquals(6, charSequenceArray0.length);
  }

  @Test(timeout = 4000)
  public void test755()  throws Throwable  {
      String string0 = StringUtils.center((String) null, 1163, '@');
      assertNull(string0);
      
      String string1 = StringUtils.replaceOnceIgnoreCase((String) null, (String) null, "#");
      assertNull(string1);
  }

  @Test(timeout = 4000)
  public void test756()  throws Throwable  {
      String string0 = StringUtils.upperCase("Strings must not be null");
      assertEquals("STRINGS MUST NOT BE NULL", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.mid("", 0, 0);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.removeEnd("", "...");
      assertEquals("", string2);
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      boolean boolean0 = StringUtils.equalsAnyIgnoreCase("", charSequenceArray0);
      assertFalse(boolean0);
      assertEquals(0, charSequenceArray0.length);
  }

  @Test(timeout = 4000)
  public void test757()  throws Throwable  {
      Object[] objectArray0 = new Object[7];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      String string0 = StringUtils.abbreviateMiddle(".vJUO`HXV;lj1-;", ".vJUO`HXV;lj1-;", 3261);
      assertEquals(".vJUO`HXV;lj1-;", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.center("mS'z9&TML?u19", 3261);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test758()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("?!", 'l');
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      int int0 = StringUtils.compare("^Bm<?O+Fq", "", false);
      assertEquals(9, int0);
      
      String string0 = StringUtils.chop("^Bm<?O+Fq");
      assertEquals("^Bm<?O+F", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test759()  throws Throwable  {
      String[] stringArray0 = new String[0];
      String[] stringArray1 = StringUtils.stripAll(stringArray0, "Cloneable type ");
      assertNotNull(stringArray1);
      assertSame(stringArray0, stringArray1);
      assertSame(stringArray1, stringArray0);
      assertEquals(0, stringArray0.length);
      assertEquals(0, stringArray1.length);
      
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "Cloneable type ", (String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test760()  throws Throwable  {
      String string0 = null;
      String string1 = StringUtils.substringAfterLast((String) null, (String) null);
      assertNull(string1);
      
      String string2 = "&BmhPs1^!9L3\"1A.";
      int int0 = StringUtils.compare("", "&BmhPs1^!9L3\"1A.");
      assertEquals((-16), int0);
      
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) "&BmhPs1^!9L3\"1A.";
      objectArray0[1] = (Object) "";
      String string3 = StringUtils.join(objectArray0);
      assertEquals("&BmhPs1^!9L3\"1A.", string3);
      assertTrue(string3.equals((Object)string2));
      assertNotNull(string3);
      assertEquals(2, objectArray0.length);
      
      int int1 = 0;
      String string4 = StringUtils.center((String) null, 0);
      assertNull(string4);
      
      String[] stringArray0 = StringUtils.stripAll((String[]) null, "IasW");
      assertNull(stringArray0);
      
      char[] charArray0 = new char[0];
      String string5 = StringUtils.valueOf(charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals("", string5);
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertNotNull(string5);
      assertEquals(0, charArray0.length);
      
      String string6 = StringUtils.removeEnd("", ", Length: ");
      assertEquals("", string6);
      assertFalse(string6.equals((Object)string3));
      assertTrue(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string2));
      assertNotNull(string6);
      
      Charset charset0 = Charset.defaultCharset();
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      assertNotNull(charset0);
      
      // Undeclared exception!
      try { 
        CharBuffer.allocate((-16));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test761()  throws Throwable  {
      Object[] objectArray0 = new Object[3];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      objectArray0[1] = object1;
      Object object2 = new Object();
      assertFalse(object2.equals((Object)object1));
      assertFalse(object2.equals((Object)object0));
      assertNotNull(object2);
      
      objectArray0[2] = object2;
      String string0 = StringUtils.join(objectArray0, '?', 625, 12);
      assertEquals("", string0);
      assertNotNull(string0);
      assertEquals(3, objectArray0.length);
      
      int int0 = StringUtils.indexOf((CharSequence) "", (CharSequence) "", 0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test762()  throws Throwable  {
      String string0 = StringUtils.removeStart("dLeWnQL\"\"M%", "");
      assertEquals("dLeWnQL\"\"M%", string0);
      assertNotNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[2] = (CharSequence) "dLeWnQL\"\"M%";
      charSequenceArray0[3] = (CharSequence) "dLeWnQL\"\"M%";
      boolean boolean0 = StringUtils.equalsAnyIgnoreCase(charSequenceArray0[4], charSequenceArray0);
      assertTrue(boolean0);
      assertEquals(5, charSequenceArray0.length);
  }

  @Test(timeout = 4000)
  public void test763()  throws Throwable  {
      String string0 = StringUtils.trimToNull((String) null);
      assertNull(string0);
      
      String string1 = StringUtils.SPACE;
      assertEquals(" ", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.replaceOnceIgnoreCase("Invalid locale format: ", "Minimum abbreviation width is %d", "Invalid locale format: ");
      assertEquals("Invalid locale format: ", string2);
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      String string3 = StringUtils.substringAfterLast("Minimum abbreviation width is %d", (-1));
      assertEquals("", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      
      int[] intArray0 = new int[1];
      intArray0[0] = (-1);
      String string4 = StringUtils.join(intArray0, 'n', 8192, 3911);
      assertArrayEquals(new int[] {(-1)}, intArray0);
      assertEquals("", string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertNotNull(string4);
      assertEquals(1, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test764()  throws Throwable  {
      String string0 = StringUtils.reverse("");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.removeStart("", "");
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      int[] intArray0 = StringUtils.toCodePoints("R=X\"eH+!97+RVrt&");
      assertNotNull(intArray0);
      assertEquals(16, intArray0.length);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("Threshold must not be negative", "");
      assertNotNull(stringArray0);
      assertEquals(5, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test765()  throws Throwable  {
      String string0 = StringUtils.SPACE;
      assertEquals(" ", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.removeStart(" ", " ");
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.substringBeforeLast(")%", " ");
      assertEquals(")%", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      String string3 = StringUtils.rightPad("bdGMinimum abbreviation width is %d", (-141), 'K');
      assertEquals("bdGMinimum abbreviation width is %d", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      
      String string4 = StringUtils.unwrap("bdGMinimum abbreviation width is %d", " ");
      assertEquals("bdGMinimum abbreviation width is %d", string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string3));
      assertNotNull(string4);
      
      int int0 = StringUtils.indexOfDifference((CharSequence) "LN)4", (CharSequence) "U'i{GNK");
      assertEquals(0, int0);
      
      String[] stringArray0 = StringUtils.splitByCharacterType("?x/2g~E1qqpt_(>");
      assertNotNull(stringArray0);
      assertEquals(13, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test766()  throws Throwable  {
      String string0 = StringUtils.upperCase("Strings must not be null");
      assertEquals("STRINGS MUST NOT BE NULL", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.toRootLowerCase("Dh<PG9l");
      assertEquals("dh<pg9l", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.isAllUpperCase("dh<pg9l");
      assertFalse(boolean0);
      
      String string2 = StringUtils.unwrap((String) null, "STRINGS MUST NOT BE NULL");
      assertNull(string2);
      
      String string3 = StringUtils.center("Dh<PG9l", 9, 'k');
      assertEquals("kDh<PG9lk", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "kDh<PG9lk", (CharSequence) "dh<pg9l");
      assertEquals(0, int0);
      
      String string4 = StringUtils.substringBeforeLast("!6@s!uSf]NL", "");
      assertEquals("!6@s!uSf]NL", string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertNotNull(string4);
      
      String string5 = StringUtils.difference("Threshold must not be negative", "Object varargs must not be null");
      assertEquals("Object varargs must not be null", string5);
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertNotNull(string5);
      
      String string6 = StringUtils.unwrap("Threshold must not be negative", "*_3IcLR4-chy.~q");
      assertEquals("Threshold must not be negative", string6);
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string5));
      assertNotNull(string6);
      
      int int1 = StringUtils.indexOfDifference((CharSequence) "G^7|+zFpb:oK?5", (CharSequence) "Threshold must not be negative");
      assertEquals(0, int1);
      assertTrue(int1 == int0);
      
      String[] stringArray0 = StringUtils.splitByCharacterType("Q2q=]l");
      assertNotNull(stringArray0);
      assertEquals(6, stringArray0.length);
      
      String string7 = StringUtils.stripToNull("_");
      assertEquals("_", string7);
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string6));
      assertNotNull(string7);
      
      String string8 = StringUtils.toRootUpperCase("e^SvXwE,OmGAt`:Ii");
      assertEquals("E^SVXWE,OMGAT`:II", string8);
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string0));
      assertNotNull(string8);
  }

  @Test(timeout = 4000)
  public void test767()  throws Throwable  {
      String string0 = StringUtils.trimToNull("qD/.5Q]{&GZM2vH<]");
      assertEquals("qD/.5Q]{&GZM2vH<]", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.startsWith("qD/.5Q]{&GZM2vH<]", "qD/.5Q]{&GZM2vH<]");
      assertTrue(boolean0);
      
      String string1 = StringUtils.removeStart("\r", "\r");
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test768()  throws Throwable  {
      String string0 = StringUtils.SPACE;
      assertEquals(" ", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.removeStart(" ", " ");
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.substringBeforeLast(")%", " ");
      assertEquals(")%", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      String string3 = StringUtils.uncapitalize("");
      assertEquals("", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string1));
      assertNotNull(string3);
  }

  @Test(timeout = 4000)
  public void test769()  throws Throwable  {
      String string0 = "qD/.5Q]{&GZM2vH<]";
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      String string1 = StringUtils.trimToNull("qD/.5Q]{&GZM2vH<]");
      assertEquals("qD/.5Q]{&GZM2vH<]", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      charSequenceArray0[0] = (CharSequence) "qD/.5Q]{&GZM2vH<]";
      String string2 = StringUtils.prependIfMissingIgnoreCase("qD/.5Q]{&GZM2vH<]", "qD/.5Q]{&GZM2vH<]", charSequenceArray0);
      assertEquals("qD/.5Q]{&GZM2vH<]", string2);
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals(1, charSequenceArray0.length);
      
      String string3 = "";
      String string4 = StringUtils.removeStart("", "qD/.5Q]{&GZM2vH<]");
      assertEquals("", string4);
      assertTrue(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertNotNull(string4);
      
      String string5 = StringUtils.substringBeforeLast("U'i{GNK", ")%");
      assertEquals("U'i{GNK", string5);
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertNotNull(string5);
      
      char[] charArray0 = new char[5];
      charArray0[0] = '@';
      charArray0[1] = 'D';
      charArray0[2] = 'z';
      charArray0[3] = ';';
      charArray0[4] = 'S';
      int int0 = 0;
      // Undeclared exception!
      try { 
        CharBuffer.wrap(charArray0, 311, 0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test770()  throws Throwable  {
      String string0 = StringUtils.upperCase("Strings must not be null");
      assertEquals("STRINGS MUST NOT BE NULL", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.toRootLowerCase("Dh<PG9l");
      assertEquals("dh<pg9l", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.isAllUpperCase("dh<pg9l");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isNotEmpty("dh<pg9l");
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      String string2 = StringUtils.wrap("Dh<PG9l", (String) null);
      assertEquals("Dh<PG9l", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      CharSequence[] charSequenceArray0 = new CharSequence[9];
      charSequenceArray0[0] = (CharSequence) "Dh<PG9l";
      String string3 = StringUtils.trimToEmpty("Dh<PG9l");
      assertEquals("Dh<PG9l", string3);
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      
      charSequenceArray0[1] = (CharSequence) "Dh<PG9l";
      boolean boolean2 = StringUtils.isEmpty("Dh<PG9l");
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      
      String string4 = StringUtils.abbreviate((String) null, "", (-3580));
      assertNull(string4);
      
      String string5 = StringUtils.remove("The Array must not be null", "Strings must not be null");
      assertEquals("The Array must not be null", string5);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertNotNull(string5);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens(" {FhY;w");
      assertNotNull(stringArray0);
      assertEquals(2, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test771()  throws Throwable  {
      Object[] objectArray0 = new Object[7];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      objectArray0[1] = object1;
      Object object2 = new Object();
      assertFalse(object2.equals((Object)object1));
      assertFalse(object2.equals((Object)object0));
      assertNotNull(object2);
      
      char[] charArray0 = new char[6];
      charArray0[0] = 'd';
      charArray0[1] = 'Z';
      charArray0[2] = 'K';
      charArray0[3] = 'Z';
      charArray0[4] = '+';
      charArray0[5] = '+';
      int int0 = StringUtils.indexOfAny((CharSequence) "[ R4Pk;9Invalid locale format: ", charArray0);
      assertArrayEquals(new char[] {'d', 'Z', 'K', 'Z', '+', '+'}, charArray0);
      assertEquals(14, int0);
      assertEquals(6, charArray0.length);
      
      String string0 = StringUtils.strip(" `r\"I<58oyHO@en", "dm#");
      assertNotNull(string0);
      
      double double0 = StringUtils.getJaroWinklerDistance(" `r\"I<58oyHO@en", "[ R4Pk;9Invalid locale format: ");
      assertEquals(0.43, double0, 0.01);
      
      String string1 = StringUtils.substringBefore("RnO><9.c!{", 72);
      assertEquals("RnO><9.c!{", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      int int1 = StringUtils.getLevenshteinDistance((CharSequence) "RnO><9.c!{", (CharSequence) "dm#");
      assertEquals(10, int1);
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test772()  throws Throwable  {
      String string0 = StringUtils.CR;
      assertEquals("\r", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isNotBlank("\r");
      assertFalse(boolean0);
      
      int int0 = (-2053);
      String string1 = StringUtils.substringBefore("", (-2053));
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      boolean boolean1 = StringUtils.endsWith("", "\r");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      charSequenceArray0[0] = (CharSequence) "";
      String string2 = StringUtils.appendIfMissing("ch", "ch", charSequenceArray0);
      assertEquals("ch", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals(1, charSequenceArray0.length);
      
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      boolean[] booleanArray0 = new boolean[0];
      char char0 = 'm';
      int int1 = StringUtils.lastIndexOf((CharSequence) "ch", (CharSequence) "ch", (-1));
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      
      int int2 = 0;
      Stack<CharBuffer> stack0 = new Stack<CharBuffer>();
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertNotNull(stack0);
      
      // Undeclared exception!
      try { 
        stack0.removeElementAt((-2053));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Array index out of range: -2053
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test773()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = '2';
      charArray0[1] = 'a';
      charArray0[2] = '&';
      String string0 = StringUtils.removeEndIgnoreCase("ILg", "ILg");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.trimToNull("y ?[");
      assertEquals("y ?[", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      charSequenceArray0[0] = (CharSequence) "y ?[";
      charSequenceArray0[1] = (CharSequence) "ILg";
      charSequenceArray0[2] = (CharSequence) "bdG";
      charSequenceArray0[3] = (CharSequence) "";
      String string2 = StringUtils.prependIfMissingIgnoreCase("bdG", "", charSequenceArray0);
      assertEquals("bdG", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals(4, charSequenceArray0.length);
      
      String string3 = StringUtils.removeStart("Strings must not be null", "");
      assertEquals("Strings must not be null", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      
      String string4 = StringUtils.substringBeforeLast((String) null, "y ?[");
      assertNull(string4);
      
      String string5 = StringUtils.rightPad("y ?[", 0, '@');
      assertEquals("y ?[", string5);
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertTrue(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertNotNull(string5);
      
      String string6 = StringUtils.unwrap((String) null, "ILg");
      assertNull(string6);
      
      int int0 = StringUtils.indexOfDifference((CharSequence) "Strings must not be null", (CharSequence) "Strings must not be null");
      assertEquals((-1), int0);
      
      String string7 = StringUtils.toRootUpperCase("org.apache.commons.lang3.StringUtils");
      assertEquals("ORG.APACHE.COMMONS.LANG3.STRINGUTILS", string7);
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string1));
      assertNotNull(string7);
      
      double double0 = StringUtils.getJaroWinklerDistance("bdG", "bdG");
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test774()  throws Throwable  {
      String[] stringArray0 = StringUtils.split((String) null);
      assertNull(stringArray0);
      
      String string0 = StringUtils.wrapIfMissing(",jC8lCRA", (String) null);
      assertEquals(",jC8lCRA", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "66OV26Th<EV5?eU(l>", (CharSequence) ",jC8lCRA");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test775()  throws Throwable  {
      String string0 = StringUtils.substringBefore("Array and element cannot both be null", 2516);
      assertEquals("Array and element cannot both be null", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOf((CharSequence) "Array and element cannot both be null", (CharSequence) null, 228);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test776()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("{}");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test777()  throws Throwable  {
      String[] stringArray0 = StringUtils.split("Wo>i");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      String string0 = StringUtils.upperCase("Wo>i");
      assertEquals("WO>I", string0);
      assertNotNull(string0);
      
      double double0 = StringUtils.getJaroWinklerDistance("WO>I", "Wo>i");
      assertEquals(0.67, double0, 0.01);
      
      String string1 = StringUtils.firstNonEmpty(stringArray0);
      assertEquals("Wo>i", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(1, stringArray0.length);
      
      String string2 = StringUtils.substringBefore("Wo>i", 1928);
      assertEquals("Wo>i", string2);
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertNotNull(string2);
      
      char[] charArray0 = new char[9];
      charArray0[0] = '~';
      charArray0[1] = 'q';
      charArray0[2] = '^';
      charArray0[3] = 'b';
      charArray0[4] = 'm';
      charArray0[5] = 'w';
      charArray0[6] = 'E';
      charArray0[7] = 'w';
      charArray0[8] = 'g';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      assertArrayEquals(new char[] {'~', 'q', '^', 'b', 'm', 'w', 'E', 'w', 'g'}, charArray0);
      assertEquals(0, charBuffer0.arrayOffset());
      assertFalse(charBuffer0.isReadOnly());
      assertFalse(charBuffer0.isDirect());
      assertEquals(9, charBuffer0.remaining());
      assertEquals(9, charBuffer0.capacity());
      assertEquals(0, charBuffer0.position());
      assertEquals(9, charBuffer0.length());
      assertTrue(charBuffer0.hasArray());
      assertEquals("~q^bmwEwg", charBuffer0.toString());
      assertEquals(9, charBuffer0.limit());
      assertTrue(charBuffer0.hasRemaining());
      assertNotNull(charBuffer0);
      assertEquals(9, charArray0.length);
      
      Supplier<CharBuffer> supplier0 = (Supplier<CharBuffer>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      CharBuffer charBuffer1 = StringUtils.getIfBlank(charBuffer0, supplier0);
      assertArrayEquals(new char[] {'~', 'q', '^', 'b', 'm', 'w', 'E', 'w', 'g'}, charArray0);
      assertEquals(0, charBuffer1.arrayOffset());
      assertFalse(charBuffer1.isReadOnly());
      assertFalse(charBuffer1.isDirect());
      assertEquals(9, charBuffer1.remaining());
      assertEquals(0, charBuffer1.position());
      assertEquals(9, charBuffer1.limit());
      assertEquals(9, charBuffer1.length());
      assertEquals("~q^bmwEwg", charBuffer1.toString());
      assertTrue(charBuffer1.hasRemaining());
      assertTrue(charBuffer1.hasArray());
      assertEquals(9, charBuffer1.capacity());
      assertEquals(0, charBuffer0.arrayOffset());
      assertFalse(charBuffer0.isReadOnly());
      assertFalse(charBuffer0.isDirect());
      assertEquals(9, charBuffer0.remaining());
      assertEquals(9, charBuffer0.capacity());
      assertEquals(0, charBuffer0.position());
      assertEquals(9, charBuffer0.length());
      assertTrue(charBuffer0.hasArray());
      assertEquals("~q^bmwEwg", charBuffer0.toString());
      assertEquals(9, charBuffer0.limit());
      assertTrue(charBuffer0.hasRemaining());
      assertNotNull(charBuffer1);
      assertSame(charBuffer1, charBuffer0);
      assertSame(charBuffer0, charBuffer1);
      assertEquals(9, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test778()  throws Throwable  {
      String string0 = StringUtils.upperCase("Wo>i");
      assertEquals("WO>I", string0);
      assertNotNull(string0);
      
      double double0 = StringUtils.getJaroWinklerDistance("WO>I", "Wo>i");
      assertEquals(0.67, double0, 0.01);
      
      String string1 = StringUtils.wrap("comparator", 'f');
      assertEquals("fcomparatorf", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.strip("Object varargs must not be null", "~6(<\"o/4<h;K");
      assertEquals("Object varargs must not be null", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test779()  throws Throwable  {
      String string0 = StringUtils.deleteWhitespace(", Length: 0%!)");
      assertEquals(",Length:0%!)", string0);
      assertNotNull(string0);
      
      int int0 = 115;
      String string1 = StringUtils.substringBefore("Search and Replace array lengths don't match: ", 115);
      assertEquals("Search and Replace array length", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = "}";
      String string3 = StringUtils.wrapIfMissing("}", "DR{D7RXKBu:0fKQ2");
      assertEquals("DR{D7RXKBu:0fKQ2}DR{D7RXKBu:0fKQ2", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      
      boolean boolean0 = StringUtils.containsNone((CharSequence) ",Length:0%!)", "$k};(EO");
      assertTrue(boolean0);
      
      String string4 = StringUtils.replaceIgnoreCase("FTiYw", "Search and Replace array length", (String) null, 115);
      assertEquals("FTiYw", string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertNotNull(string4);
      
      String string5 = StringUtils.chop("FTiYw");
      assertEquals("FTiY", string5);
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertNotNull(string5);
      
      CharSequence[] charSequenceArray0 = null;
      String string6 = StringUtils.appendIfMissing("FTiYw", "FTiY", (CharSequence[]) null);
      assertEquals("FTiYwFTiY", string6);
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string1));
      assertNotNull(string6);
      
      int int1 = (-483);
      // Undeclared exception!
      try { 
        StringUtils.abbreviate("}", "s", 661, (-483));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum abbreviation width is 2
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test780()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      String string0 = StringUtils.getDigits("");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.strip("", "[ R4Pk;9");
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "", (CharSequence) "", 2304);
      assertEquals(0, int0);
      
      String string2 = StringUtils.replace("", "", "[ R4Pk;9", 0);
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertNotNull(string2);
      
      String string3 = StringUtils.abbreviate("bdGMinimum abbreviation width is %d", 0, 1376);
      assertEquals("bdGMinimum abbreviation width is %d", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
  }

  @Test(timeout = 4000)
  public void test781()  throws Throwable  {
      String string0 = StringUtils.capitalize((String) null);
      assertNull(string0);
      
      int int0 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      String string1 = StringUtils.replace("g]=", (String) null, "Y7G)_+0QiCr.O", (-1));
      assertEquals("g]=", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test782()  throws Throwable  {
      String string0 = StringUtils.abbreviate("5z(\"4Oj.gde", 48);
      assertEquals("5z(\"4Oj.gde", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test783()  throws Throwable  {
      String string0 = StringUtils.upperCase("Strings must not be null");
      assertEquals("STRINGS MUST NOT BE NULL", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.getIfBlank("STRINGS MUST NOT BE NULL", (Supplier<String>) null);
      assertEquals("STRINGS MUST NOT BE NULL", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test784()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "2!,{+vAy@Ng";
      stringArray0[1] = "@";
      stringArray0[2] = "@";
      String string0 = StringUtils.firstNonEmpty(stringArray0);
      assertEquals("2!,{+vAy@Ng", string0);
      assertNotNull(string0);
      assertEquals(3, stringArray0.length);
      
      String string1 = StringUtils.stripEnd("@J(?VumTkP%H7vTZ`f#f6HHM0Gl\"po;>8", "@J(?VumTkP%H7vTZ`f#f6HHM0Gl\"po;>8");
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test785()  throws Throwable  {
      String string0 = StringUtils.upperCase(", Length: ");
      assertEquals(", LENGTH: ", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isAsciiPrintable(", LENGTH: ");
      assertTrue(boolean0);
      
      String[] stringArray0 = new String[9];
      stringArray0[0] = ", LENGTH: ";
      stringArray0[1] = ", LENGTH: ";
      stringArray0[2] = ", LENGTH: ";
      stringArray0[3] = ", LENGTH: ";
      stringArray0[4] = ", LENGTH: ";
      stringArray0[5] = ", LENGTH: ";
      stringArray0[6] = ", Length: ";
      stringArray0[7] = ", Length: ";
      stringArray0[8] = ", LENGTH: ";
      String string1 = StringUtils.firstNonEmpty(stringArray0);
      assertEquals(", LENGTH: ", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(9, stringArray0.length);
      
      String string2 = StringUtils.chop("GmG");
      assertEquals("Gm", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      String string3 = StringUtils.replaceIgnoreCase(", LENGTH: ", "", ", LENGTH: ");
      assertEquals(", LENGTH: ", string3);
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string0));
      assertNotNull(string3);
  }

  @Test(timeout = 4000)
  public void test786()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase(":lGnqLeX*");
      assertNotNull(stringArray0);
      assertEquals(6, stringArray0.length);
      
      String string0 = StringUtils.rightPad("tlK[aH5", 16, ":lGnqLeX*");
      assertEquals("tlK[aH5:lGnqLeX*", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isAsciiPrintable("tlK[aH5:lGnqLeX*");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test787()  throws Throwable  {
      String string0 = StringUtils.replaceIgnoreCase((String) null, (String) null, (String) null);
      assertNull(string0);
      
      String string1 = StringUtils.substringBetween("", (String) null);
      assertNull(string1);
  }

  @Test(timeout = 4000)
  public void test788()  throws Throwable  {
      String string0 = StringUtils.substringAfter("[D/.5Q]{sGZM2sH<] in an array of ", "P");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.trimToNull("");
      assertNull(string1);
      
      String string2 = StringUtils.substringAfterLast(" is not in the range '0' - '9'", 53);
      assertEquals("", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.reverseDelimited("~!%q{-kC<;JCc", '~');
      assertEquals("!%q{-kC<;JCc", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      
      String[] stringArray0 = StringUtils.splitByCharacterType((String) null);
      assertNull(stringArray0);
      
      String string4 = StringUtils.stripToNull("[D/.5Q]{sGZM2sH<] in an array of ");
      assertEquals("[D/.5Q]{sGZM2sH<] in an array of", string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertNotNull(string4);
      
      String string5 = StringUtils.toRootUpperCase((String) null);
      assertNull(string5);
  }

  @Test(timeout = 4000)
  public void test789()  throws Throwable  {
      String string0 = StringUtils.wrap("BK]SJ6ENdgJN-", "BK]SJ6ENdgJN-");
      assertEquals("BK]SJ6ENdgJN-BK]SJ6ENdgJN-BK]SJ6ENdgJN-", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isNotBlank("BK]SJ6ENdgJN-BK]SJ6ENdgJN-BK]SJ6ENdgJN-");
      assertTrue(boolean0);
      
      Charset charset0 = Charset.defaultCharset();
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.displayName());
      assertNotNull(charset0);
      
      String string1 = StringUtils.normalizeSpace("?!");
      assertEquals("?!", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) null, (CharSequence) "?!");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test790()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      String string0 = StringUtils.prependIfMissingIgnoreCase("qD/.5Q]{&GZM2vH<]", "qD/.5Q]{&GZM2vH<]", charSequenceArray0);
      assertEquals("qD/.5Q]{&GZM2vH<]", string0);
      assertNotNull(string0);
      assertEquals(1, charSequenceArray0.length);
      
      String string1 = StringUtils.deleteWhitespace("Arguments cannot both be null");
      assertEquals("Argumentscannotbothbenull", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.right("M`?tF3qo/W$#g#", 49);
      assertEquals("M`?tF3qo/W$#g#", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test791()  throws Throwable  {
      String[] stringArray0 = StringUtils.stripAll((String[]) null, (String) null);
      assertNull(stringArray0);
      
      String string0 = StringUtils.prependIfMissing((String) null, (CharSequence) null, (CharSequence[]) null);
      assertNull(string0);
      
      String string1 = StringUtils.replaceEach("tF2]5y 6~", (String[]) null, (String[]) null);
      assertEquals("tF2]5y 6~", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test792()  throws Throwable  {
      String string0 = StringUtils.stripToNull("P]\"qsSJ");
      assertEquals("P]\"qsSJ", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.toRootUpperCase("*gy]{f'df+v");
      assertEquals("*GY]{F'DF+V", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test793()  throws Throwable  {
      String string0 = StringUtils.toRootUpperCase("");
      assertEquals("", string0);
      assertNotNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[8];
      String string1 = StringUtils.wrap("Hw", "");
      assertEquals("Hw", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      charSequenceArray0[0] = (CharSequence) "Hw";
      charSequenceArray0[1] = (CharSequence) "";
      charSequenceArray0[2] = (CharSequence) "";
      charSequenceArray0[3] = (CharSequence) "";
      charSequenceArray0[4] = (CharSequence) "";
      charSequenceArray0[5] = (CharSequence) "";
      charSequenceArray0[6] = (CharSequence) "";
      charSequenceArray0[7] = (CharSequence) "";
      String string2 = StringUtils.prependIfMissing("", "", charSequenceArray0);
      assertEquals("", string2);
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals(8, charSequenceArray0.length);
  }

  @Test(timeout = 4000)
  public void test794()  throws Throwable  {
      String string0 = StringUtils.SPACE;
      assertEquals(" ", string0);
      assertNotNull(string0);
      
      char[] charArray0 = new char[0];
      boolean boolean0 = StringUtils.containsAny((CharSequence) " ", charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertFalse(boolean0);
      assertEquals(0, charArray0.length);
      
      String string1 = StringUtils.removeIgnoreCase(" ", "d;O=H/Y.Cu5d'");
      assertEquals(" ", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test795()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      charSequenceArray0[0] = (CharSequence) "e";
      boolean boolean0 = StringUtils.containsAny((CharSequence) "e", charSequenceArray0);
      assertTrue(boolean0);
      assertEquals(1, charSequenceArray0.length);
      
      boolean boolean1 = StringUtils.isNotEmpty("e");
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String string0 = StringUtils.removeStart("offset cannot be negative", "maxWith cannot be negative");
      assertEquals("offset cannot be negative", string0);
      assertNotNull(string0);
      
      int[] intArray0 = StringUtils.toCodePoints("offset cannot be negative");
      assertNotNull(intArray0);
      assertEquals(25, intArray0.length);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("maxWith cannot be negative", "e");
      assertNotNull(stringArray0);
      assertEquals(4, stringArray0.length);
      
      String string1 = StringUtils.wrapIfMissing("VbdG", "offset cannot be negative");
      assertEquals("offset cannot be negativeVbdGoffset cannot be negative", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.removeFirst("Search and Replace array lengths don't match: ", "maxWith cannot be negative");
      assertEquals("Search and Replace array lengths don't match: ", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      int int0 = StringUtils.lastIndexOfAny("Search and Replace array lengths don't match: ", charSequenceArray0);
      assertEquals(26, int0);
      assertEquals(1, charSequenceArray0.length);
  }

  @Test(timeout = 4000)
  public void test796()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      String string0 = StringUtils.substring("e8WB-!T)bQas0NZWw", 5736, (-4170));
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.substring("org.apache.commons.lang3.ObjectUtils", 73);
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.abbreviate("e8WB-!T)bQas0NZWw", "", 1502, 5736);
      assertEquals("e8WB-!T)bQas0NZWw", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      int int0 = StringUtils.length("");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test797()  throws Throwable  {
      int[] intArray0 = StringUtils.toCodePoints("~`#!1A^0|PHyiy");
      assertNotNull(intArray0);
      assertEquals(14, intArray0.length);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("~`#!1A^0|PHyiy", "}/i:&y");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test798()  throws Throwable  {
      String string0 = StringUtils.toRootUpperCase("");
      assertEquals("", string0);
      assertNotNull(string0);
      
      float[] floatArray0 = new float[0];
      String string1 = StringUtils.join(floatArray0, '*');
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(0, floatArray0.length);
      
      boolean boolean0 = StringUtils.containsIgnoreCase("", "");
      assertTrue(boolean0);
      
      String string2 = StringUtils.wrap("", 'V');
      assertEquals("", string2);
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertNotNull(string2);
      
      String string3 = StringUtils.strip("", "?)XFZl$ez0525.");
      assertEquals("", string3);
      assertTrue(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string0));
      assertNotNull(string3);
  }

  @Test(timeout = 4000)
  public void test799()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("ND5", "ND5", 83);
      assertNotNull(stringArray0);
      assertEquals(2, stringArray0.length);
      
      int[] intArray0 = new int[6];
      intArray0[0] = 83;
      intArray0[1] = (int) 'D';
      intArray0[2] = (int) 'D';
      intArray0[3] = 83;
      intArray0[4] = 83;
      intArray0[5] = (int) 'D';
      String string0 = StringUtils.join(intArray0, '#');
      assertArrayEquals(new int[] {83, 68, 68, 83, 83, 68}, intArray0);
      assertEquals("83#68#68#83#83#68", string0);
      assertNotNull(string0);
      assertEquals(6, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test800()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("...", (String) null);
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test801()  throws Throwable  {
      String string0 = StringUtils.replace("C1k-7_rbEbjE6eQS8]^", "C1k-7_rbEbjE6eQS8]^", "C1k-7_rbEbjE6eQS8]^");
      assertEquals("C1k-7_rbEbjE6eQS8]^", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("C1k-7_rbEbjE6eQS8]^", "C1k-7_rbEbjE6eQS8]^");
      assertNotNull(stringArray0);
      assertEquals(20, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test802()  throws Throwable  {
      String string0 = StringUtils.substring("bjX'A", 1301);
      assertEquals("", string0);
      assertNotNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[7];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "bjX'A";
      charSequenceArray0[2] = (CharSequence) "bjX'A";
      charSequenceArray0[3] = (CharSequence) "bjX'A";
      charSequenceArray0[4] = (CharSequence) "bjX'A";
      charSequenceArray0[5] = (CharSequence) "";
      charSequenceArray0[6] = (CharSequence) "";
      boolean boolean0 = StringUtils.endsWithAny("", charSequenceArray0);
      assertFalse(boolean0);
      assertEquals(7, charSequenceArray0.length);
      
      String string1 = StringUtils.remove("bjX'A", "zOvnsbO?c=Zx]'fF8");
      assertEquals("bjX'A", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.wrap("", 'B');
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertNotNull(string2);
      
      int int0 = StringUtils.length(charSequenceArray0[1]);
      assertEquals(5, int0);
      assertEquals(7, charSequenceArray0.length);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("^Bm<?O+Fq", "Array element ", 5);
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test803()  throws Throwable  {
      String string0 = StringUtils.replaceChars("Search and Replace array lengths don't match: ", "Search and Replace array lengths don't match: ", "Minimum abbreviation width is %d");
      assertEquals("Minimumnabmrivinmimniindmiias udmba mn mum", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOf((CharSequence) "Minimumnabmrivinmimniindmiias udmba mn mum", 0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test804()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      String string0 = StringUtils.replaceChars((String) null, "R=X\"eH+!97+RVrt&3^Vg')<ym<3^Vg')<ym<", (String) null);
      assertNull(string0);
      
      String string1 = StringUtils.difference("GET9bU>", "}FuAEUb=]'j@TT5");
      assertEquals("}FuAEUb=]'j@TT5", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.repeat("'$T7JMMsJw`6cQ", (-2106));
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test805()  throws Throwable  {
      String string0 = StringUtils.reverse("");
      assertEquals("", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isEmpty("");
      assertTrue(boolean0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "";
      boolean boolean1 = StringUtils.isAllEmpty(charSequenceArray0);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals(2, charSequenceArray0.length);
      
      char[] charArray0 = new char[0];
      String string1 = StringUtils.join(charArray0, 'E', 0, 0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(0, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test806()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = '2';
      charArray0[1] = 'a';
      charArray0[2] = '&';
      String string0 = StringUtils.join(charArray0, 'S', 90, 61);
      assertArrayEquals(new char[] {'2', 'a', '&'}, charArray0);
      assertEquals("", string0);
      assertNotNull(string0);
      assertEquals(3, charArray0.length);
      
      String string1 = StringUtils.replaceChars("", "", "[0");
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.difference("}xk 6mk&yQ`^suYg]", "}xk 6mk&yQ`^suYg]");
      assertEquals("", string2);
      assertTrue(string2.equals((Object)string1));
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test807()  throws Throwable  {
      String string0 = StringUtils.reverse("");
      assertEquals("", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isEmpty("");
      assertTrue(boolean0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "";
      boolean boolean1 = StringUtils.equalsAnyIgnoreCase("", charSequenceArray0);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals(2, charSequenceArray0.length);
  }

  @Test(timeout = 4000)
  public void test808()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      int int0 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      String string0 = StringUtils.join((Object[]) null, 'D', 10, (-1));
      assertNull(string0);
      
      String string1 = StringUtils.replaceAll("org.apache.commons.lang3.Charsets", " is not in the range '0' - '9'", "deGohwvcJ,BLe!;@v4");
      assertEquals("org.apache.commons.lang3.Charsets", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.leftPad("&WW*", 3094, 'D');
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      String string3 = StringUtils.substringAfter("\n", (-1));
      assertEquals("", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      
      String string4 = StringUtils.uncapitalize("\n");
      assertEquals("\n", string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertNotNull(string4);
      
      // Undeclared exception!
      try { 
        StringUtils.joinWith("org.apache.commons.lang3.Charsets", (Object[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object varargs must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test809()  throws Throwable  {
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) "Rvj`qoJ~b";
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[1] = object0;
      objectArray0[2] = (Object) "Rvj`qoJ~b";
      objectArray0[3] = (Object) "Rvj`qoJ~b";
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      objectArray0[4] = object1;
      objectArray0[5] = (Object) "Rvj`qoJ~b";
      objectArray0[6] = (Object) "Rvj`qoJ~b";
      objectArray0[7] = (Object) "Rvj`qoJ~b";
      objectArray0[8] = (Object) "Rvj`qoJ~b";
      String string0 = StringUtils.joinWith("Rvj`qoJ~b", objectArray0);
      assertNotNull(string0);
      assertEquals(9, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test810()  throws Throwable  {
      String string0 = StringUtils.mid("F/@Lu2J", (-9), (-9));
      assertEquals("", string0);
      assertNotNull(string0);
      
      double double0 = StringUtils.getJaroWinklerDistance("\n", "");
      assertEquals(0.0, double0, 0.01);
      
      Locale locale0 = Locale.ITALIAN;
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("it", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertNotNull(locale0);
      
      String string1 = StringUtils.lowerCase("org.apache.commons.lang3.ObjectUtils$Null", locale0);
      assertEquals("org.apache.commons.lang3.objectutils$null", string1);
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("it", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test811()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      String string0 = StringUtils.join((byte[]) null, '2', (-1111), (-1111));
      assertNull(string0);
      
      // Undeclared exception!
      try { 
        StringUtils.getJaroWinklerDistance((CharSequence) null, "[ R4Pk;9");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test812()  throws Throwable  {
      String string0 = StringUtils.wrap("#r PV$3SuxeX_f]'", 'L');
      assertEquals("L#r PV$3SuxeX_f]'L", string0);
      assertNotNull(string0);
      
      double double0 = StringUtils.getJaroWinklerDistance("L#r PV$3SuxeX_f]'L", "#r PV$3SuxeX_f]'");
      assertEquals(0.96, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test813()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) null;
      Locale locale0 = Locale.FRENCH;
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr", locale0.toString());
      assertNotNull(locale0);
      
      String string0 = StringUtils.lowerCase((String) null, locale0);
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr", locale0.toString());
      assertNull(string0);
      
      String string1 = StringUtils.normalizeSpace("CC*>DCS*3YDj:");
      assertEquals("CC*>DCS*3YDj:", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test814()  throws Throwable  {
      String string0 = StringUtils.upperCase("@");
      assertEquals("@", string0);
      assertNotNull(string0);
      
      double double0 = StringUtils.getJaroWinklerDistance("@", "@");
      assertEquals(1.0, double0, 0.01);
      
      String string1 = StringUtils.wrap("@", 'f');
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.strip("@", (String) null);
      assertEquals("@", string2);
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test815()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      charSequenceArray0[0] = (CharSequence) "ND5";
      String string0 = StringUtils.appendIfMissing("ND5", "ND5", charSequenceArray0);
      assertEquals("ND5", string0);
      assertNotNull(string0);
      assertEquals(1, charSequenceArray0.length);
      
      // Undeclared exception!
      try { 
        StringUtils.abbreviate("PX*GvQ", "s", (-483), (-483));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum abbreviation width is 2
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test816()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "";
      charSequenceArray0[2] = (CharSequence) "";
      String string0 = StringUtils.appendIfMissingIgnoreCase("", "", charSequenceArray0);
      assertEquals("", string0);
      assertNotNull(string0);
      assertEquals(3, charSequenceArray0.length);
      
      double double0 = StringUtils.getJaroWinklerDistance(charSequenceArray0[2], charSequenceArray0[0]);
      assertEquals(0.0, double0, 0.01);
      assertEquals(3, charSequenceArray0.length);
      
      Locale locale0 = Locale.ITALIAN;
      assertEquals("it", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertNotNull(locale0);
      
      String string1 = StringUtils.lowerCase((String) null, locale0);
      assertEquals("it", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertNull(string1);
  }

  @Test(timeout = 4000)
  public void test817()  throws Throwable  {
      String string0 = StringUtils.upperCase("U0Djk`7:WOLdCtho_4");
      assertEquals("U0DJK`7:WOLDCTHO_4", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.defaultIfEmpty("L", "E(Bs%W!\"k_'d-");
      assertEquals("L", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      Locale locale0 = Locale.UK;
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals("en_GB", locale0.toString());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("GB", locale0.getCountry());
      assertNotNull(locale0);
      
      int int0 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test818()  throws Throwable  {
      String string0 = "0FO5}hhQ5YS+G9";
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      charSequenceArray0[0] = (CharSequence) "0FO5}hhQ5YS+G9";
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      int int0 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      String string1 = StringUtils.appendIfMissing("0FO5}hhQ5YS+G9", "\n", charSequenceArray0);
      assertEquals("0FO5}hhQ5YS+G9", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(4, charSequenceArray0.length);
      
      // Undeclared exception!
      try { 
        StringUtils.abbreviate(" ", "0FO5}hhQ5YS+G9", (-1), (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum abbreviation width is 15
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test819()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      charSequenceArray0[0] = (CharSequence) "E\"RV&o";
      charSequenceArray0[1] = (CharSequence) "E\"RV&o";
      charSequenceArray0[2] = (CharSequence) "E\"RV&o";
      charSequenceArray0[3] = (CharSequence) "E\"RV&o";
      charSequenceArray0[4] = (CharSequence) "E\"RV&o";
      String string0 = StringUtils.appendIfMissingIgnoreCase("E\"RV&o", "E\"RV&o", charSequenceArray0);
      assertEquals("E\"RV&o", string0);
      assertNotNull(string0);
      assertEquals(5, charSequenceArray0.length);
      
      char char0 = '8';
      int int0 = StringUtils.countMatches((CharSequence) "E\"RV&o", '8');
      assertEquals(0, int0);
      
      String string1 = "U";
      String string2 = StringUtils.defaultIfEmpty("E\"RV&o", "U");
      assertEquals("E\"RV&o", string2);
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      String string3 = "', is neither of type Map.Entry nor an Array";
      try { 
        StringUtils.getBytes("E\"RV&o", "', is neither of type Map.Entry nor an Array");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(UnsupportedEncodingException e) {
      }
  }

  @Test(timeout = 4000)
  public void test820()  throws Throwable  {
      String string0 = StringUtils.replacePattern("&?qu g]3*=", "&?qu g]3*=", "&?qu g]3*=");
      assertEquals("&?qu g]3*=", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "&?qu g]3*=", "&?qu g]3*=");
      assertTrue(boolean0);
      
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) "&?qu g]3*=";
      objectArray0[1] = (Object) "&?qu g]3*=";
      objectArray0[2] = (Object) "&?qu g]3*=";
      objectArray0[3] = (Object) "&?qu g]3*=";
      objectArray0[4] = (Object) "&?qu g]3*=";
      objectArray0[5] = (Object) "&?qu g]3*=";
      String string1 = StringUtils.join(objectArray0, ')');
      assertEquals("&?qu g]3*=)&?qu g]3*=)&?qu g]3*=)&?qu g]3*=)&?qu g]3*=)&?qu g]3*=", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(6, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test821()  throws Throwable  {
      String string0 = StringUtils.defaultString("offset cannot be negative");
      assertEquals("offset cannot be negative", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.repeat("\r", 5899);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String[] stringArray0 = StringUtils.stripAll((String[]) null, "\r");
      assertNull(stringArray0);
      
      String string2 = StringUtils.uncapitalize("VhCYY");
      assertEquals("vhCYY", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      String string3 = StringUtils.leftPad((String) null, 5899, 'm');
      assertNull(string3);
  }

  @Test(timeout = 4000)
  public void test822()  throws Throwable  {
      String[] stringArray0 = new String[13];
      stringArray0[0] = "{}";
      String string0 = StringUtils.firstNonBlank(stringArray0);
      assertEquals("{}", string0);
      assertNotNull(string0);
      assertEquals(13, stringArray0.length);
      
      boolean boolean0 = StringUtils.startsWithAny(stringArray0[1], stringArray0);
      assertFalse(boolean0);
      assertEquals(13, stringArray0.length);
      
      boolean boolean1 = StringUtils.containsWhitespace("{}");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String string1 = StringUtils.chomp("ObjectUtils$Null");
      assertEquals("ObjectUtils$Null", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.leftPad("rS#cYO{nnVQ}r+ayy9", (-2721));
      assertEquals("rS#cYO{nnVQ}r+ayy9", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test823()  throws Throwable  {
      boolean boolean0 = StringUtils.containsOnly((CharSequence) ">m9.`", (char[]) null);
      assertFalse(boolean0);
      
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      assertFalse(arrayList0.contains(">m9.`"));
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      boolean boolean1 = arrayList0.add((Object) "\"Ug>.y hb#");
      assertFalse(arrayList0.contains(">m9.`"));
      assertTrue(arrayList0.contains("\"Ug>.y hb#"));
      assertTrue(boolean1);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertFalse(boolean1 == boolean0);
      
      String string0 = StringUtils.join((List<?>) arrayList0, '{', 2655, (-921));
      assertFalse(arrayList0.contains(2655));
      assertTrue(arrayList0.contains("\"Ug>.y hb#"));
      assertEquals("", string0);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertNotNull(string0);
      
      int int0 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test824()  throws Throwable  {
      String string0 = StringUtils.center("PZ\"*IPhi", 964, '?');
      assertEquals("??????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????PZ\"*IPhi??????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test825()  throws Throwable  {
      String string0 = StringUtils.leftPad("The String must not be empty", 12, 'I');
      assertNotNull(string0);
      assertEquals("The String must not be empty", string0);
      
      char[] charArray0 = new char[6];
      charArray0[0] = 'd';
      charArray0[1] = 'I';
      charArray0[2] = 'I';
      charArray0[3] = 'I';
      charArray0[4] = 'I';
      charArray0[5] = 'I';
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "The String must not be empty", charArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test826()  throws Throwable  {
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "&?qu g]3*=", "&?qu g]3*=");
      assertTrue(boolean0);
      
      StringUtils.indexOf((CharSequence) "&?qu g]3*=", 127, (-978));
      String string0 = StringUtils.defaultString("&?qu g]3*=");
      assertEquals("&?qu g]3*=", string0);
  }

  @Test(timeout = 4000)
  public void test827()  throws Throwable  {
      String string0 = "";
      String string1 = "";
      try { 
        StringUtils.getBytes("", "");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(UnsupportedEncodingException e) {
      }
  }

  @Test(timeout = 4000)
  public void test828()  throws Throwable  {
      try { 
        StringUtils.getBytes("{}", "l(c\"B4`q5AeDf\"5{");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(UnsupportedEncodingException e) {
      }
  }

  @Test(timeout = 4000)
  public void test829()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      Object object0 = new Object();
      objectArray0[0] = object0;
      StringUtils.join(objectArray0, 'p');
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "java.lang.Object@eb3651a", (CharSequence) "java.lang.Object@eb3651a");
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      charSequenceArray0[0] = (CharSequence) "java.lang.Object@eb3651a";
      boolean boolean0 = StringUtils.endsWithAny("java.lang.Object@eb3651a", charSequenceArray0);
      StringUtils.countMatches((CharSequence) "java.lang.Object@eb3651a", 'p');
      int int1 = StringUtils.lastIndexOfIgnoreCase(charSequenceArray0[0], (CharSequence) "java.lang.Object@eb3651a");
      assertEquals(0, int1);
      
      String string0 = StringUtils.removeStartIgnoreCase("java.lang.Object@eb3651a", "java.lang.Object@eb3651a");
      String string1 = StringUtils.substringAfterLast("java.lang.Object@eb3651a", "java.lang.Object@eb3651a");
      StringUtils.startsWithIgnoreCase("", "");
      String string2 = StringUtils.join(objectArray0);
      int int2 = StringUtils.indexOfAny(charSequenceArray0[0], "[ R4Pk;9");
      assertFalse(int2 == int0);
      
      StringUtils.isNumeric("java.lang.Object@eb3651a");
      StringUtils.deleteWhitespace("");
      StringUtils.isAlphanumeric("");
      String string3 = StringUtils.deleteWhitespace("w{>bJ\"W}#f&");
      assertEquals("w{>bJ\"W}#f&", string3);
      
      boolean boolean1 = StringUtils.containsAny(charSequenceArray0[0], charSequenceArray0);
      StringUtils.deleteWhitespace("");
      StringUtils.replaceFirst("ch", "java.lang.Object@eb3651a", "");
      boolean boolean2 = StringUtils.isNumeric("");
      assertFalse(boolean2 == boolean1);
      
      String[] stringArray0 = new String[3];
      StringUtils.replaceEachRepeatedly("w{>bJ\"W}#f&", stringArray0, stringArray0);
      boolean boolean3 = StringUtils.equalsAny("w{>bJ\"W}#f&", stringArray0);
      assertFalse(boolean3 == boolean0);
      
      String string4 = StringUtils.removeStart("", "java.lang.Object@eb3651a");
      assertFalse(string4.equals((Object)string2));
      
      String string5 = StringUtils.reverseDelimited("java.lang.Object@eb3651a", 'w');
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test830()  throws Throwable  {
      String string0 = StringUtils.SPACE;
      String string1 = StringUtils.replaceOnceIgnoreCase("X<<", " ", "X<<");
      assertEquals("X<<", string1);
      
      String string2 = StringUtils.substringAfterLast("X<<", (int) 'T');
      assertEquals("", string2);
  }

  @Test(timeout = 4000)
  public void test831()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      StringUtils.join((Object[]) charSequenceArray0, 'n');
      StringUtils.substringBetween("F:]4oQ_s0p=x+y", "\n\n", ",?j;)2C|:EN5FkD]]");
      char[] charArray0 = new char[3];
      charArray0[0] = 'w';
      charArray0[1] = 'F';
      charArray0[2] = '|';
      StringUtils.join(charArray0, '@', 2347, 5);
      StringUtils.equalsAnyIgnoreCase("org.apache.commons.lang3.CharSequenceUtils", charSequenceArray0);
      StringUtils.getDigits("qD/.5Q]{&GZM2vH<]");
      StringUtils.lastIndexOfIgnoreCase((CharSequence) "\n\n", (CharSequence) "52", 256);
      StringUtils.remove("[D/.5Q]{sGZM2sH<]", (String) null);
      String string0 = StringUtils.abbreviate((String) null, 2347, 106);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test832()  throws Throwable  {
      String string0 = StringUtils.removePattern("Array element ", "");
      assertEquals("Array element ", string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      charSequenceArray0[1] = (CharSequence) "";
      String string1 = StringUtils.SPACE;
      charSequenceArray0[2] = (CharSequence) " ";
      charSequenceArray0[3] = (CharSequence) "Array element ";
      charSequenceArray0[4] = (CharSequence) "Array element ";
      String string2 = StringUtils.substringAfterLast("VbdGVbdG", "The Array must not be null");
      assertEquals("", string2);
      
      String string3 = StringUtils.repeat("Search and Replace array lengths don't match: ", "l' ~Wohr[dG3\"ig.l' ~Wohr[dG3\"ig.", 4);
      assertEquals("Search and Replace array lengths don't match: l' ~Wohr[dG3\"ig.l' ~Wohr[dG3\"ig.Search and Replace array lengths don't match: l' ~Wohr[dG3\"ig.l' ~Wohr[dG3\"ig.Search and Replace array lengths don't match: l' ~Wohr[dG3\"ig.l' ~Wohr[dG3\"ig.Search and Replace array lengths don't match: ", string3);
      
      String string4 = StringUtils.unwrap("jhb3ibO*jp*Hjhb3ibO*jp*H", 'H');
      assertEquals("jhb3ibO*jp*Hjhb3ibO*jp*H", string4);
      
      boolean boolean0 = StringUtils.contains((CharSequence) "Array element ", (CharSequence) "VbdGVbdG");
      boolean boolean1 = StringUtils.isWhitespace("Search and Replace array lengths don't match: ");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test833()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = ",2GN==cJdv,hx#";
      stringArray0[3] = ", Length: 0";
      stringArray0[4] = "1?Zk~";
      stringArray0[5] = "{)Vo$";
      stringArray0[6] = "";
      stringArray0[7] = "UpDjdzd6M#&MP";
      StringUtils.getCommonPrefix(stringArray0);
      String[] stringArray1 = StringUtils.splitPreserveAllTokens("", '\"');
      assertEquals(0, stringArray1.length);
      assertNotNull(stringArray1);
      
      Locale locale0 = new Locale("+_A7euD[9", "UpDjdzd6M#&MP");
      Locale locale1 = Locale.SIMPLIFIED_CHINESE;
      locale1.getDisplayLanguage();
      locale0.getDisplayName();
      String string0 = StringUtils.upperCase("ND5", locale0);
      assertEquals("ND5", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.defaultString("");
      assertEquals("", string1);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "", (CharSequence) "", (-131));
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test834()  throws Throwable  {
      boolean boolean0 = StringUtils.endsWithIgnoreCase((CharSequence) null, (CharSequence) null);
      assertTrue(boolean0);
      
      Object[] objectArray0 = new Object[6];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) null;
      String string0 = StringUtils.rightPad("", 2986, "");
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      String string1 = StringUtils.normalizeSpace("org.apache.commons.lang3.exception.CloneFailedException");
      assertEquals("org.apache.commons.lang3.exception.CloneFailedException", string1);
      
      charSequenceArray0[0] = (CharSequence) "org.apache.commons.lang3.exception.CloneFailedException";
      charSequenceArray0[1] = (CharSequence) string0;
      charSequenceArray0[2] = (CharSequence) "";
      StringUtils.removeIgnoreCase("", "(.q>HL");
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) string0, (CharSequence) "");
      assertEquals(2986, int0);
      
      int int1 = StringUtils.indexOfDifference((CharSequence) "", (CharSequence) "");
      assertEquals((-1), int1);
      
      String string2 = StringUtils.replaceChars("3^Vg')<ym<3^Vg')<ym<", 'E', 'E');
      assertEquals("3^Vg')<ym<3^Vg')<ym<", string2);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "";
      stringArray0[1] = "org.apache.commons.lang3.exception.CloneFailedException";
      String string3 = StringUtils.replaceEach(" vs ", stringArray0, stringArray0);
      assertEquals(" vs ", string3);
  }

  @Test(timeout = 4000)
  public void test835()  throws Throwable  {
      Object object0 = new Object();
      StringUtils.getDigits("");
      StringUtils.strip("", "[ R4Pk;9");
      StringUtils.splitPreserveAllTokens((String) null);
      StringUtils.stripAccents("z(J%<bsFA8m45_[hu");
      char[] charArray0 = new char[2];
      charArray0[0] = 'c';
      charArray0[1] = 'c';
      int int0 = StringUtils.indexOfAny((CharSequence) "", charArray0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test836()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      StringUtils.join((Object[]) charSequenceArray0, 'n');
      StringUtils.substringBetween("F:]4oQ_s0p=x+y", "\n\n", ",?j;)2C|:EN5FkD]]");
      char[] charArray0 = new char[3];
      charArray0[0] = 'w';
      charArray0[1] = 'F';
      charArray0[2] = '|';
      String string0 = StringUtils.join(charArray0, '@', 2347, 5);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.equalsAnyIgnoreCase("org.apache.commons.lang3.CharSequenceUtils", charSequenceArray0);
      Object object0 = new Object();
      Object object1 = new Object();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "`$Q5o'S#9:q`|d";
      stringArray0[1] = "\n\n";
      stringArray0[2] = null;
      stringArray0[3] = "org.apache.commons.lang3.CharSequenceUtils";
      StringUtils.stripAll(stringArray0, "`$Q5o'S#9:q`|d");
      boolean boolean1 = StringUtils.containsOnly((CharSequence) ",?j;)2C|:EN5FkD]]", "\r");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test837()  throws Throwable  {
      StringUtils.replace("Array element \r", "Array element \r", "Array element \r", (-255));
      StringUtils.stripEnd("Array element \r", "Array element \r");
      StringUtils.lastIndexOfIgnoreCase((CharSequence) "Array element \r", (CharSequence) "Array element \r");
      StringUtils.reverseDelimited("", 'F');
      StringUtils.length("Array element \r");
      StringUtils.indexOf((CharSequence) "Array element \r", 4361);
      StringUtils.compareIgnoreCase("]vGsk8#+'", "");
      StringUtils.normalizeSpace("u");
      CharSequence[] charSequenceArray0 = new CharSequence[7];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "u";
      charSequenceArray0[2] = (CharSequence) "Array element \r";
      charSequenceArray0[3] = (CharSequence) "]vGsk8#+'";
      charSequenceArray0[4] = (CharSequence) "";
      charSequenceArray0[5] = (CharSequence) "";
      charSequenceArray0[6] = (CharSequence) "Array element \r";
      boolean boolean0 = StringUtils.containsAny((CharSequence) "Array element \r", charSequenceArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test838()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      Object object0 = new Object();
      objectArray0[0] = object0;
      StringUtils.join(objectArray0, 'p');
      StringUtils.indexOfIgnoreCase((CharSequence) "java.lang.Object@363eb63c", (CharSequence) "java.lang.Object@363eb63c");
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      charSequenceArray0[0] = (CharSequence) "java.lang.Object@363eb63c";
      StringUtils.endsWithAny("java.lang.Object@363eb63c", charSequenceArray0);
      StringUtils.countMatches((CharSequence) "java.lang.Object@363eb63c", 'p');
      StringUtils.lastIndexOfIgnoreCase(charSequenceArray0[0], (CharSequence) "java.lang.Object@363eb63c");
      StringUtils.removeStartIgnoreCase("java.lang.Object@363eb63c", "java.lang.Object@363eb63c");
      StringUtils.substringAfterLast("java.lang.Object@363eb63c", "java.lang.Object@363eb63c");
      StringUtils.startsWithIgnoreCase("", "");
      StringUtils.join(objectArray0);
      StringUtils.indexOfAny(charSequenceArray0[0], "[ R4Pk;9");
      StringUtils.isNumeric("java.lang.Object@363eb63c");
      char[] charArray0 = new char[2];
      charArray0[0] = 'p';
      charArray0[1] = 'p';
      CharBuffer.wrap(charArray0);
      StringUtils.equalsAnyIgnoreCase("java.lang.Object@363eb63c", charSequenceArray0);
      // Undeclared exception!
      try { 
        CharBuffer.wrap(charArray0, 12, (-1));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test839()  throws Throwable  {
      String string0 = StringUtils.replaceIgnoreCase("o", "F1~Sp}mS5", "0FO5}hhQ5YS+G9");
      assertEquals("o", string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      charSequenceArray0[0] = (CharSequence) "F1~Sp}mS5";
      charSequenceArray0[1] = (CharSequence) "o";
      charSequenceArray0[2] = (CharSequence) "0FO5}hhQ5YS+G9";
      charSequenceArray0[3] = (CharSequence) "0FO5}hhQ5YS+G9";
      boolean boolean0 = StringUtils.containsAnyIgnoreCase("o", charSequenceArray0);
      assertTrue(boolean0);
      
      StringUtils stringUtils0 = new StringUtils();
      int int0 = StringUtils.INDEX_NOT_FOUND;
      String string1 = StringUtils.replaceChars("Array element ", "", "}yrRfNpTa/@3(+m");
      assertEquals("Array element ", string1);
      
      String string2 = StringUtils.difference("0FO5}hhQ5YS+G9", "+=El0)UT_2#k1");
      assertEquals("+=El0)UT_2#k1", string2);
  }

  @Test(timeout = 4000)
  public void test840()  throws Throwable  {
      StringUtils.reverse("");
      StringUtils.isEmpty("");
      String string0 = StringUtils.abbreviate((String) null, (String) null, (-3580));
      assertNull(string0);
      
      String string1 = StringUtils.remove("org.apache.commons.lang3.StringUtils", "org.apache.commons.lang3.RegExUtils");
      assertEquals("org.apache.commons.lang3.StringUtils", string1);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("VRg!pjVT,{5_*4<D");
      String string2 = StringUtils.stripAccents("VbdG...");
      assertEquals("VbdG...", string2);
      
      boolean boolean0 = StringUtils.endsWithAny("org.apache.commons.lang3.StringUtils", stringArray0);
      assertFalse(boolean0);
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test841()  throws Throwable  {
      StringUtils.normalizeSpace(">m9.`");
      StringUtils.indexOfAny((CharSequence) ">m9.`", ">m9.`");
      StringUtils.substringBefore(">m9.`", 16);
      StringUtils.removeStartIgnoreCase("Array element ", "7C_C8],{'+a{I");
      StringUtils.stripToNull(">m9.`");
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[0] = (CharSequence) ">m9.`";
      charSequenceArray0[1] = (CharSequence) ">m9.`";
      StringUtils.containsAny((CharSequence) ">m9.`", charSequenceArray0);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)62;
      byteArray0[1] = (byte) (-56);
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte)67;
      byteArray0[4] = (byte)15;
      byteArray0[5] = (byte)123;
      byteArray0[6] = (byte)36;
      // Undeclared exception!
      try { 
        StringUtils.join(byteArray0, '|', (int) (byte) (-1), 65);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test842()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      charSequenceArray0[0] = (CharSequence) "8c>!) u,eei!\"I2yC-U";
      charSequenceArray0[1] = (CharSequence) "8c>!) u,eei!\"I2yC-U";
      String string0 = StringUtils.abbreviate("Y)3n1`2_97u G#5v_Y)3n1`2_97u G#5v_Y)3n1`2_97u G#5v_Y)3n1`2_97u G#5v__", "Y)3n1`2_97u G#5v_Y)3n1`2_97u G#5v_Y)3n1`2_97u G#5v_Y)3n1`2_97u G#5v__", 3497);
      assertEquals("Y)3n1`2_97u G#5v_Y)3n1`2_97u G#5v_Y)3n1`2_97u G#5v_Y)3n1`2_97u G#5v__", string0);
      
      String string1 = StringUtils.removeIgnoreCase(".9 @bnr", "8c>!) u,eei!\"I2yC-U");
      assertEquals(".9 @bnr", string1);
      
      boolean boolean0 = StringUtils.isAlphanumeric("UY7gz");
      assertTrue(boolean0);
      
      StringUtils.isWhitespace("Y)3n1`2_97u G#5v_Y)3n1`2_97u G#5v_Y)3n1`2_97u G#5v_Y)3n1`2_97u G#5v__");
      String[] stringArray0 = StringUtils.split("8c>!) u,eei!\"I2yC-U", ".9 @bnr", 1035);
      assertEquals(2, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test843()  throws Throwable  {
      String[] stringArray0 = new String[13];
      stringArray0[0] = "{}";
      stringArray0[1] = "";
      String string0 = StringUtils.firstNonBlank(stringArray0);
      assertNotNull(string0);
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = (-1.0F);
      Object object0 = new Object();
      String string1 = StringUtils.rightPad("", 25, "{}");
      String string2 = StringUtils.normalizeSpace((String) null);
      assertNull(string2);
      
      String string3 = StringUtils.removeIgnoreCase("K", "");
      assertEquals("K", string3);
      
      StringUtils.lastIndexOfIgnoreCase((CharSequence) null, (CharSequence) "");
      StringUtils.indexOfDifference((CharSequence) null, (CharSequence) "org.apache.commons.lang3.exception.CloneFailedException");
      String string4 = StringUtils.replaceChars("{}{}{}{}{}{}{}{}{}{}{}{}{", 's', 'E');
      assertTrue(string4.equals((Object)string1));
      
      String string5 = StringUtils.replaceEach("", stringArray0, stringArray0);
      assertEquals("", string5);
  }

  @Test(timeout = 4000)
  public void test844()  throws Throwable  {
      String string0 = StringUtils.removeEndIgnoreCase("f/w08g/veL6", "f/w08g/veL6");
      int int0 = StringUtils.indexOf((CharSequence) "", 10);
      String string1 = StringUtils.lowerCase("");
      assertEquals("", string1);
      assertNotNull(string1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      boolean boolean0 = StringUtils.endsWithAny("f/w08g/veL6", charSequenceArray0);
      assertFalse(boolean0);
      
      String string2 = StringUtils.replaceIgnoreCase("", "~BH", "");
      assertTrue(string2.equals((Object)string0));
      
      int int1 = StringUtils.indexOfAny((CharSequence) "", "qtvQ,^bAC1bPM/r</ ");
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test845()  throws Throwable  {
      String string0 = StringUtils.strip("~6(<\"o/4<h;K", "Aborting to protect against StackOverflowError - output of one loop is the input of anotherPB$Ps@D6Z-{(7Pq<");
      assertEquals("~6(<\"o/4<h;K", string0);
      
      boolean boolean0 = StringUtils.isAllLowerCase("~6(<\"o/4<h;K");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test846()  throws Throwable  {
      StringUtils.indexOfDifference((CharSequence[]) null);
      StringUtils.join((Object[]) null, '0');
      StringUtils.endsWithAny((CharSequence) null, (CharSequence[]) null);
      StringUtils.substringAfterLast((String) null, (-1));
      StringUtils.replaceOnce("Invalid locale format: ", "Arguments cannot both be null", "Invalid locale format: ");
      StringUtils.capitalize("G^7|+zFpb:oK?5");
      // Undeclared exception!
      try { 
        StringUtils.getLevenshteinDistance((CharSequence) null, (CharSequence) "G^7|+zFpb:oK?5", (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test847()  throws Throwable  {
      Object[] objectArray0 = new Object[6];
      Object object0 = new Object();
      objectArray0[0] = object0;
      String string0 = StringUtils.join(objectArray0, 'p');
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "java.lang.Object@40602087ppppp", (CharSequence) "java.lang.Object@40602087ppppp");
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      charSequenceArray0[0] = (CharSequence) "java.lang.Object@40602087ppppp";
      StringUtils.endsWithAny("java.lang.Object@40602087ppppp", charSequenceArray0);
      int int1 = StringUtils.countMatches((CharSequence) "java.lang.Object@40602087ppppp", 'p');
      assertEquals(5, int1);
      
      int int2 = StringUtils.lastIndexOfIgnoreCase(charSequenceArray0[0], (CharSequence) "java.lang.Object@40602087ppppp");
      assertEquals(0, int2);
      
      StringUtils.removeStartIgnoreCase("java.lang.Object@40602087ppppp", "java.lang.Object@40602087ppppp");
      String string1 = StringUtils.strip("");
      assertEquals("", string1);
      
      StringUtils.startsWithIgnoreCase("", "");
      String string2 = StringUtils.join(objectArray0);
      int int3 = StringUtils.indexOfAny(charSequenceArray0[0], "[ R4Pk;9");
      assertEquals(17, int3);
      
      boolean boolean0 = StringUtils.isNumeric("java.lang.Object@40602087");
      assertFalse(boolean0);
      
      StringUtils.isAlphanumeric("");
      int int4 = StringUtils.indexOfAny((CharSequence) "java.lang.Object@40602087ppppp", charSequenceArray0);
      assertTrue(int4 == int0);
      
      String string3 = StringUtils.truncate("[ R4Pk;9", 0);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)2;
      shortArray0[1] = (short)5;
      String string4 = StringUtils.join(shortArray0, '%');
      assertEquals("2%5", string4);
  }

  @Test(timeout = 4000)
  public void test848()  throws Throwable  {
      String string0 = StringUtils.defaultString("g>J#");
      assertEquals("g>J#", string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      charSequenceArray0[0] = (CharSequence) "2";
      boolean boolean0 = StringUtils.startsWithIgnoreCase(charSequenceArray0[0], "g>J#");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test849()  throws Throwable  {
      String string0 = StringUtils.removeFirst("-yMQ ", "-yMQ ");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test850()  throws Throwable  {
      StringUtils.join((Integer[]) null);
      StringUtils.isNumeric((CharSequence) null);
      String string0 = "\\u";
      String string1 = StringUtils.repeat(string0, (String) null, 811);
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.isAlphaSpace(string0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test851()  throws Throwable  {
      String string0 = StringUtils.substringAfterLast("JHw4*K", "s-D4{8$Mo,|,xZ");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test852()  throws Throwable  {
      Locale locale0 = new Locale("!", "B!D#l{D*oCCX", "!");
      String string0 = StringUtils.upperCase("B!D#l{D*oCCX", locale0);
      assertNotNull(string0);
      assertEquals("B!D#L{D*OCCX", string0);
      
      String string1 = StringUtils.removeStartIgnoreCase("B!D#L{D*OCCX", "");
      String string2 = StringUtils.leftPad("B!D#L{D*OCCX", 0, "!");
      assertTrue(string2.equals((Object)string1));
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test853()  throws Throwable  {
      String string0 = StringUtils.stripAccents("a|HhwU*= qC");
      assertNotNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      charSequenceArray0[0] = (CharSequence) "a|HhwU*= qC";
      charSequenceArray0[1] = (CharSequence) "a|HhwU*= qC";
      String string1 = StringUtils.substring("a|HhwU*= qC", (-509));
      assertTrue(string1.equals((Object)string0));
      
      charSequenceArray0[2] = (CharSequence) "a|HhwU*= qC";
      charSequenceArray0[3] = (CharSequence) "a|HhwU*= qC";
      boolean boolean0 = StringUtils.endsWithAny("a|HhwU*= qC", charSequenceArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test854()  throws Throwable  {
      String string0 = StringUtils.chomp("K||I$]Z");
      assertEquals("K||I$]Z", string0);
      
      CharBuffer charBuffer0 = CharBuffer.allocate(122);
      boolean boolean0 = StringUtils.isAllLowerCase(charBuffer0);
      assertFalse(boolean0);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) charBuffer0, (CharSequence) charBuffer0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test855()  throws Throwable  {
      Object object0 = new Object();
      Object[] objectArray0 = new Object[3];
      String string0 = StringUtils.join(objectArray0, 'l', (int) 'l', 52);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test856()  throws Throwable  {
      Charset.defaultCharset();
      String string0 = StringUtils.normalizeSpace("n5\">`Z7LZM0");
      assertEquals("n5\">`Z7LZM0", string0);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) null, (CharSequence) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test857()  throws Throwable  {
      String string0 = StringUtils.normalizeSpace(">m9.`");
      assertEquals(">m9.`", string0);
      
      int int0 = StringUtils.indexOfAny((CharSequence) ">m9.`", ">m9.`");
      assertEquals(0, int0);
      
      StringUtils.substringBefore(">m9.`", 16);
      String string1 = StringUtils.removeStartIgnoreCase("Array element ", ">m9.`");
      assertEquals("Array element ", string1);
      
      String string2 = StringUtils.stripToNull(">m9.`");
      assertNotNull(string2);
      
      boolean boolean0 = StringUtils.isAlphanumeric(">m9.`");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test858()  throws Throwable  {
      String string0 = StringUtils.removeIgnoreCase("Cloneable type ", "Cloneable type ");
      assertEquals("", string0);
      
      boolean boolean0 = StringUtils.isAlphanumeric("Cloneable type ");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test859()  throws Throwable  {
      String string0 = StringUtils.deleteWhitespace(", Length: 0%!)");
      assertEquals(",Length:0%!)", string0);
      
      String string1 = StringUtils.chop("nPh-sfuHiy}H");
      assertEquals("nPh-sfuHiy}", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test860()  throws Throwable  {
      String string0 = StringUtils.trimToNull("~Vr");
      assertNotNull(string0);
      
      String string1 = StringUtils.truncate("8pR2B:PK5lx\"7", 0, 32);
      assertNotNull(string1);
      assertEquals("8pR2B:PK5lx\"7", string1);
      
      String string2 = StringUtils.deleteWhitespace((String) null);
      assertNull(string2);
      
      CharSequence[] charSequenceArray0 = new CharSequence[6];
      charSequenceArray0[0] = (CharSequence) "~Vr";
      String string3 = StringUtils.stripStart((String) null, "8pR2B:PK5lx\"7");
      assertNull(string3);
      
      charSequenceArray0[1] = (CharSequence) null;
      charSequenceArray0[2] = (CharSequence) "~Vr";
      charSequenceArray0[3] = (CharSequence) null;
      charSequenceArray0[4] = (CharSequence) "~Vr";
      String string4 = StringUtils.substringAfter("offset cannot be negative", 32);
      assertEquals("cannot be negative", string4);
      
      Object object0 = new Object();
      Object object1 = new Object();
      boolean boolean0 = StringUtils.isAllLowerCase("cannot be negative");
      assertFalse(boolean0);
      
      String string5 = StringUtils.appendIfMissing("~Vr", "~Vr", charSequenceArray0);
      assertTrue(string5.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test861()  throws Throwable  {
      String string0 = StringUtils.replace("0ON~PXFP:^NxNQh", "s)mPb6:@", "nTr+B>6e0Vh");
      assertEquals("0ON~PXFP:^NxNQh", string0);
      
      String string1 = StringUtils.substringAfterLast("#", (String) null);
      assertEquals("", string1);
  }

  @Test(timeout = 4000)
  public void test862()  throws Throwable  {
      String string0 = StringUtils.substringBetween(" P vs ", " P vs ", " P vs ");
      assertNull(string0);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) " P vs ", (CharSequence) " P vs ");
      assertEquals(0, int0);
      
      StringUtils.lastIndexOfIgnoreCase((CharSequence) " P vs ", (CharSequence) null);
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      int int1 = StringUtils.indexOfDifference(charSequenceArray0);
      assertEquals((-1), int1);
      
      StringUtils.lastIndexOf((CharSequence) " P vs ", (CharSequence) " P vs ", 7);
      StringUtils.substringBeforeLast(" P vs ", "Cannot clone Cloneable type ");
      String string1 = StringUtils.substringAfter(" P vs ", 16);
      assertEquals("", string1);
      
      String string2 = StringUtils.uncapitalize("Cannot clone Cloneable type ");
      assertEquals("cannot clone Cloneable type ", string2);
      
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      booleanArray0[6] = true;
      String string3 = StringUtils.join(booleanArray0, '{');
      assertEquals("true{true{true{true{false{false{true", string3);
      
      int int2 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "", (CharSequence) "true{true{true{true{false{false{true", 0);
      assertFalse(int2 == int0);
  }

  @Test(timeout = 4000)
  public void test863()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      StringUtils.trimToNull("qD/.5Q]{&GZM2vH<]");
      charSequenceArray0[0] = (CharSequence) "qD/.5Q]{&GZM2vH<]";
      StringUtils.prependIfMissingIgnoreCase("qD/.5Q]{&GZM2vH<]", "qD/.5Q]{&GZM2vH<]", charSequenceArray0);
      StringUtils.removeStart("", "qD/.5Q]{&GZM2vH<]");
      StringUtils.substringBeforeLast("U'i{Gz>K", ")%");
      char[] charArray0 = new char[5];
      charArray0[0] = '@';
      charArray0[1] = 'D';
      charArray0[2] = 'z';
      StringUtils.deleteWhitespace("\r");
      // Undeclared exception!
      try { 
        StringUtils.replaceFirst("qD/.5Q]{&GZM2vH<]", "U'i{Gz>K", "\n\n");
        fail("Expecting exception: PatternSyntaxException");
      
      } catch(PatternSyntaxException e) {
         //
         // Illegal repetition near index 2
         // U'i{Gz>K
         //   ^
         //
         verifyException("java.util.regex.Pattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test864()  throws Throwable  {
      String string0 = StringUtils.unwrap("Search and Replace array lengths don't match: ", "#");
      assertEquals("Search and Replace array lengths don't match: ", string0);
      
      String string1 = StringUtils.stripEnd("Search and Replace array lengths don't match: ", "Search and Replace array lengths don't match: ");
      assertEquals("", string1);
  }

  @Test(timeout = 4000)
  public void test865()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      charSequenceArray0[0] = (CharSequence) "e";
      boolean boolean0 = StringUtils.containsAny((CharSequence) "e", charSequenceArray0);
      boolean boolean1 = StringUtils.isNotEmpty("e");
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String string0 = StringUtils.removeStart("offset cannot be negative", "maxWith cannot be negative");
      String string1 = StringUtils.abbreviateMiddle("offset cannot be negative", "Array element ", 3457);
      assertTrue(string1.equals((Object)string0));
      
      String string2 = StringUtils.uncapitalize("maxWith cannot be negative");
      assertEquals("maxWith cannot be negative", string2);
  }

  @Test(timeout = 4000)
  public void test866()  throws Throwable  {
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "yK", (CharSequence) "yK", (-2385));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test867()  throws Throwable  {
      int int0 = StringUtils.lastIndexOf((CharSequence) "{}", 229, (-1208));
      Object object0 = new Object();
      Object object1 = new Object();
      StringUtils.contains((CharSequence) "{}", (CharSequence) "{}");
      StringUtils.isWhitespace("{}");
      int int1 = StringUtils.lastIndexOf((CharSequence) "{}", (-1208));
      assertTrue(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test868()  throws Throwable  {
      String string0 = StringUtils.stripToEmpty("Locale must not be null");
      assertEquals("Locale must not be null", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test869()  throws Throwable  {
      String string0 = StringUtils.removeEndIgnoreCase("f/w08g/veL6", "f/w08g/veL6");
      int int0 = StringUtils.indexOf((CharSequence) "", (-3848));
      assertEquals((-1), int0);
      
      String string1 = StringUtils.lowerCase("");
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      
      String string2 = StringUtils.chop("");
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test870()  throws Throwable  {
      StringUtils.deleteWhitespace("C1k-7_rbEbjE6eQS8]^");
      StringUtils.isAllUpperCase("C1k-7_rbEbjE6eQS8]^");
      StringUtils.isNotEmpty("C1k-7_rbEbjE6eQS8]^");
      char[] charArray0 = new char[7];
      charArray0[0] = '`';
      charArray0[1] = 'v';
      charArray0[2] = 'B';
      charArray0[3] = 'v';
      charArray0[4] = '$';
      charArray0[5] = 'n';
      charArray0[6] = 'O';
      StringUtils.containsNone((CharSequence) "C1k-7_rbEbjE6eQS8]^", charArray0);
      StringUtils.isAlphanumeric("C1k-7_rbEbjE6eQS8]^");
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      charSequenceArray0[0] = (CharSequence) "C1k-7_rbEbjE6eQS8]^";
      charSequenceArray0[1] = (CharSequence) "C1k-7_rbEbjE6eQS8]^";
      charSequenceArray0[2] = (CharSequence) "C1k-7_rbEbjE6eQS8]^";
      StringUtils.isNoneBlank(charSequenceArray0);
      StringUtils.substringBetween("C1k-7_rbEbjE6eQS8]^", "C1k-7_rbEbjE6eQS8]^", "C1k-7_rbEbjE6eQS8]^");
      StringUtils.toCodePoints("C1k-7_rbEbjE6eQS8]^");
      String string0 = StringUtils.center((String) null, 1, '|');
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test871()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      Object object0 = new Object();
      objectArray0[0] = object0;
      StringUtils.join(objectArray0, 'p');
      StringUtils.indexOfIgnoreCase((CharSequence) "java.lang.Object@7ee7bfef", (CharSequence) "java.lang.Object@7ee7bfef");
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      charSequenceArray0[0] = (CharSequence) "java.lang.Object@7ee7bfef";
      StringUtils.endsWithAny("java.lang.Object@7ee7bfef", charSequenceArray0);
      StringUtils.countMatches((CharSequence) "java.lang.Object@7ee7bfef", 'p');
      StringUtils.lastIndexOfIgnoreCase(charSequenceArray0[0], (CharSequence) "java.lang.Object@7ee7bfef");
      StringUtils.removeStartIgnoreCase("java.lang.Object@7ee7bfef", "java.lang.Object@7ee7bfef");
      StringUtils.substringAfterLast("java.lang.Object@7ee7bfef", "java.lang.Object@7ee7bfef");
      StringUtils.startsWithIgnoreCase("", "");
      StringUtils.join(objectArray0);
      StringUtils.indexOfAny(charSequenceArray0[0], "[ R4Pk;9");
      StringUtils.isNumeric("java.lang.Object@7ee7bfef");
      StringUtils.deleteWhitespace("");
      StringUtils.isAlphanumeric("");
      StringUtils.deleteWhitespace("w{>bJ\"W}#f&");
      StringUtils.containsAny(charSequenceArray0[0], charSequenceArray0);
      StringUtils.deleteWhitespace("");
      StringUtils.replaceFirst("ch", "java.lang.Object@7ee7bfef", "");
      StringUtils.isNumeric("");
      String[] stringArray0 = new String[3];
      stringArray0[0] = "...";
      stringArray0[1] = "";
      stringArray0[2] = "java.lang.Object@7ee7bfef";
      String[] stringArray1 = StringUtils.stripAll(stringArray0, "od&s310)%'s");
      assertEquals(3, stringArray1.length);
  }

  @Test(timeout = 4000)
  public void test872()  throws Throwable  {
      String string0 = StringUtils.deleteWhitespace("_");
      assertEquals("_", string0);
      
      int int0 = StringUtils.countMatches((CharSequence) "_", 'v');
      assertEquals(0, int0);
      
      boolean boolean0 = StringUtils.isWhitespace("_");
      boolean boolean1 = StringUtils.isAlphaSpace("_");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test873()  throws Throwable  {
      String string0 = StringUtils.repeat("v%6\" *5HS,onc2", (String) null, 8);
      assertEquals("v%6\" *5HS,onc2v%6\" *5HS,onc2v%6\" *5HS,onc2v%6\" *5HS,onc2v%6\" *5HS,onc2v%6\" *5HS,onc2v%6\" *5HS,onc2v%6\" *5HS,onc2", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test874()  throws Throwable  {
      StringUtils.splitByWholeSeparatorPreserveAllTokens("ND5", "ND5", 83);
      StringUtils.removeIgnoreCase((String) null, "M'2o/I");
      long[] longArray0 = new long[5];
      longArray0[0] = (long) 83;
      longArray0[1] = (long) '5';
      longArray0[2] = (long) '5';
      longArray0[3] = (long) 83;
      longArray0[4] = (long) '5';
      StringUtils.join(longArray0, '5');
      StringUtils.lastIndexOf((CharSequence) "83553553583553", (CharSequence) "ND5", 3709);
      String string0 = StringUtils.getDigits("ND5");
      String string1 = StringUtils.repeat("Array and element cannot both be null", 83);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test875()  throws Throwable  {
      long[] longArray0 = new long[2];
      longArray0[1] = 0L;
      // Undeclared exception!
      try { 
        StringUtils.join(longArray0, 'c', 679, 1663);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 679
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test876()  throws Throwable  {
      float[] floatArray0 = new float[3];
      String string0 = StringUtils.join(floatArray0, ')');
      assertEquals("0.0)0.0)0.0", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test877()  throws Throwable  {
      StringUtils.rotate("KX+", (-3770));
      String string0 = StringUtils.join((byte[]) null, '2', (-3770), (-3770));
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test878()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      charSequenceArray0[0] = (CharSequence) "8c>!) u,eei!\"I2yC-U";
      String string0 = StringUtils.rightPad("8c>!) u,eei!\"I2yC-U", (-814), "\r");
      assertEquals("8c>!) u,eei!\"I2yC-U", string0);
      assertNotNull(string0);
      
      long[] longArray0 = new long[0];
      String string1 = StringUtils.join(longArray0, 'L');
      assertNotNull(string1);
      
      int int0 = StringUtils.countMatches((CharSequence) "", (CharSequence) "");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test879()  throws Throwable  {
      StringUtils.deleteWhitespace("Array element VbdG");
      StringUtils.isAllUpperCase("ArrayelementVbdG");
      StringUtils.isNotEmpty("ArrayelementVbdG");
      char[] charArray0 = new char[2];
      StringUtils.containsOnly((CharSequence) "Array element VbdG", charArray0);
      StringUtils.substringBefore("[~B4m{N_y", "ArrayelementVbdG");
      StringUtils.replaceChars("[~B4m{N_y", 'Y', '<');
      StringUtils.indexOfIgnoreCase((CharSequence) "[~B4m{N_y", (CharSequence) "ArrayelementVbdG", 436);
      String string0 = StringUtils.getDigits((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test880()  throws Throwable  {
      String string0 = StringUtils.substringAfterLast("Jo0Hw4*K", "Aborting to protect against StackOverflowError - output of one loop is the input of another");
      assertEquals("", string0);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "Jo0Hw4*K", (CharSequence) "", (-2205));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test881()  throws Throwable  {
      String string0 = StringUtils.repeat("", (String) null, 4);
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test882()  throws Throwable  {
      String string0 = StringUtils.reverse("]L8`:_)l3`Z)V");
      assertNotNull(string0);
      assertEquals("V)Z`3l)_:`8L]", string0);
      
      boolean boolean0 = StringUtils.isEmpty("V)Z`3l)_:`8L]");
      boolean boolean1 = StringUtils.isAlphanumeric((CharSequence) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test883()  throws Throwable  {
      String string0 = StringUtils.removeStart("\r", "Array element ");
      assertEquals("\r", string0);
      
      boolean boolean0 = StringUtils.startsWith((CharSequence) null, (CharSequence) null);
      CharSequence[] charSequenceArray0 = new CharSequence[6];
      charSequenceArray0[0] = (CharSequence) "Array element ";
      charSequenceArray0[1] = null;
      charSequenceArray0[2] = (CharSequence) "Array element ";
      String string1 = StringUtils.substring("\r", 31, (-2011));
      assertNotNull(string1);
      
      charSequenceArray0[3] = (CharSequence) "";
      charSequenceArray0[4] = null;
      charSequenceArray0[5] = (CharSequence) "\r";
      boolean boolean1 = StringUtils.isAnyBlank(charSequenceArray0);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test884()  throws Throwable  {
      String string0 = ":lGnqLeX*";
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase(":lGnqLeX*");
      StringUtils.joinWith("2[gA`$hsTM^KPO:q<", stringArray0);
      // Undeclared exception!
      try { 
        StringUtils.removeAll(":lGnqLeX*", ":2[gA`$hsTM^KPO:q<l2[gA`$hsTM^KPO:q<Gnq2[gA`$hsTM^KPO:q<Le2[gA`$hsTM^KPO:q<X2[gA`$hsTM^KPO:q<*");
        fail("Expecting exception: PatternSyntaxException");
      
      } catch(PatternSyntaxException e) {
         //
         // Unclosed character class near index 93
         // :2[gA`$hsTM^KPO:q<l2[gA`$hsTM^KPO:q<Gnq2[gA`$hsTM^KPO:q<Le2[gA`$hsTM^KPO:q<X2[gA`$hsTM^KPO:q<*
         //                                                                                              ^
         //
         verifyException("java.util.regex.Pattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test885()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) null;
      String string0 = StringUtils.joinWith((String) null, objectArray0);
      assertNotNull(string0);
      
      StringUtils.substring("", 0, 0);
      long[] longArray0 = new long[7];
      longArray0[0] = (long) 0;
      longArray0[1] = (long) 0;
      longArray0[2] = (long) 0;
      longArray0[3] = (long) 0;
      longArray0[4] = (long) 0;
      longArray0[5] = (long) 0;
      longArray0[6] = (long) 0;
      String string1 = StringUtils.join(longArray0, '5');
      assertEquals("0505050505050", string1);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "0505050505050", (CharSequence) "0505050505050", (-919));
      assertEquals((-1), int0);
      
      String string2 = StringUtils.getDigits((String) null);
      assertNull(string2);
      
      String string3 = StringUtils.repeat("#F9U}/Y SCPq{'6", 108);
      assertFalse(string3.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test886()  throws Throwable  {
      String string0 = StringUtils.reverseDelimited("~!%q{-kC<;JCc", '~');
      assertEquals("!%q{-kC<;JCc", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isNumericSpace("~!%q{-kC<;JCc");
      assertFalse(boolean0);
  }
}
