/*
 * This file was automatically generated by EvoSuite
 * Fri Apr 30 15:38:16 GMT 2021
 */

package org.apache.commons.lang3.text;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.PipedReader;
import java.io.StringReader;
import java.io.StringWriter;
import java.io.Writer;
import java.nio.ByteBuffer;
import java.nio.CharBuffer;
import java.nio.charset.Charset;
import java.util.ArrayList;
import java.util.Comparator;
import java.util.HashSet;
import java.util.IllegalFormatConversionException;
import java.util.Iterator;
import java.util.Locale;
import java.util.NoSuchElementException;
import java.util.PriorityQueue;
import java.util.ServiceLoader;
import java.util.TreeSet;
import java.util.Vector;
import java.util.stream.IntStream;
import org.apache.commons.lang3.text.StrBuilder;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFileReader;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class StrBuilder_ESTest extends StrBuilder_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("org.apache.commons.ang3.text.StrMatcher$CharSetMatcher");
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(86, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertEquals(54, strBuilder0.size());
      assertEquals(54, strBuilder0.length());
      assertNotNull(strBuilder0);
      
      String string0 = "";
      StrBuilder strBuilder1 = strBuilder0.setNullText("");
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(86, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertEquals(54, strBuilder0.size());
      assertEquals(54, strBuilder0.length());
      assertEquals(54, strBuilder1.size());
      assertEquals(86, strBuilder1.capacity());
      assertEquals(54, strBuilder1.length());
      assertNull(strBuilder1.getNewLineText());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertTrue(strBuilder1.isNotEmpty());
      assertNotNull(strBuilder1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      
      StrBuilder strBuilder2 = strBuilder1.appendln(true);
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(59, strBuilder0.size());
      assertEquals(86, strBuilder0.capacity());
      assertEquals(59, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(86, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(59, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertTrue(strBuilder1.isNotEmpty());
      assertEquals(59, strBuilder1.size());
      assertNull(strBuilder2.getNullText());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(86, strBuilder2.capacity());
      assertTrue(strBuilder2.isNotEmpty());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(59, strBuilder2.size());
      assertEquals(59, strBuilder2.length());
      assertNotNull(strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      
      char[] charArray0 = new char[0];
      strBuilder1.buffer = charArray0;
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(59, strBuilder0.size());
      assertEquals(59, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(59, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertTrue(strBuilder1.isNotEmpty());
      assertEquals(0, strBuilder1.capacity());
      assertEquals(59, strBuilder1.size());
      
      // Undeclared exception!
      try { 
        strBuilder0.contains("org.apache.commons.ang3.text.StrMatcher$CharSetMatcher");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isNotEmpty());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertNotNull(strBuilder0);
      
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isNotEmpty());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder_StrBuilderReader0.markSupported());
      assertFalse(strBuilder_StrBuilderReader0.ready());
      assertNotNull(strBuilder_StrBuilderReader0);
      
      char[] charArray0 = new char[4];
      StrBuilder strBuilder1 = strBuilder0.reverse();
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isNotEmpty());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertFalse(strBuilder1.isNotEmpty());
      assertTrue(strBuilder1.isEmpty());
      assertEquals(0, strBuilder1.size());
      assertEquals(0, strBuilder1.length());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertNotNull(strBuilder1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      
      StrBuilder strBuilder2 = new StrBuilder("end < start");
      assertNull(strBuilder2.getNewLineText());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(11, strBuilder2.length());
      assertTrue(strBuilder2.isNotEmpty());
      assertEquals(11, strBuilder2.size());
      assertNull(strBuilder2.getNullText());
      assertEquals(43, strBuilder2.capacity());
      assertNotNull(strBuilder2);
      assertFalse(strBuilder2.equals((Object)strBuilder0));
      assertFalse(strBuilder2.equals((Object)strBuilder1));
      
      StrBuilder strBuilder3 = strBuilder0.appendln(strBuilder2);
      assertEquals(12, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(12, strBuilder0.size());
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder2.getNewLineText());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(11, strBuilder2.length());
      assertTrue(strBuilder2.isNotEmpty());
      assertEquals(11, strBuilder2.size());
      assertNull(strBuilder2.getNullText());
      assertEquals(43, strBuilder2.capacity());
      assertEquals(32, strBuilder3.capacity());
      assertEquals(12, strBuilder3.length());
      assertNull(strBuilder3.getNewLineText());
      assertNull(strBuilder3.getNullText());
      assertTrue(strBuilder3.isNotEmpty());
      assertEquals(12, strBuilder3.size());
      assertFalse(strBuilder3.isEmpty());
      assertNotNull(strBuilder3);
      assertFalse(strBuilder0.equals((Object)strBuilder2));
      assertFalse(strBuilder2.equals((Object)strBuilder0));
      assertFalse(strBuilder2.equals((Object)strBuilder1));
      assertFalse(strBuilder3.equals((Object)strBuilder2));
      assertNotSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertNotSame(strBuilder2, strBuilder0);
      assertNotSame(strBuilder2, strBuilder3);
      assertNotSame(strBuilder2, strBuilder1);
      assertNotSame(strBuilder3, strBuilder2);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder0);
      
      charArray0[0] = '1';
      charArray0[1] = '=';
      charArray0[2] = '?';
      charArray0[3] = 'Z';
      // Undeclared exception!
      try { 
        strBuilder_StrBuilderReader0.read(charArray0, (-698), (-3703));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder$StrBuilderReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isEmpty());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.ensureCapacity(34);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(68, strBuilder0.capacity());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isEmpty());
      assertFalse(strBuilder1.isNotEmpty());
      assertNull(strBuilder1.getNullText());
      assertEquals(0, strBuilder1.length());
      assertEquals(68, strBuilder1.capacity());
      assertEquals(0, strBuilder1.size());
      assertTrue(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertNotNull(strBuilder1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      
      String string0 = strBuilder1.build();
      assertNull(strBuilder0.getNewLineText());
      assertEquals(68, strBuilder0.capacity());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isEmpty());
      assertFalse(strBuilder1.isNotEmpty());
      assertNull(strBuilder1.getNullText());
      assertEquals(0, strBuilder1.length());
      assertEquals(68, strBuilder1.capacity());
      assertEquals(0, strBuilder1.size());
      assertTrue(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertNotNull(string0);
      assertEquals("", string0);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      
      StrBuilder strBuilder2 = strBuilder1.append('s');
      assertNull(strBuilder0.getNewLineText());
      assertEquals(68, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(1, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(1, strBuilder0.length());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(1, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertEquals(68, strBuilder1.capacity());
      assertEquals(1, strBuilder1.length());
      assertTrue(strBuilder1.isNotEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(1, strBuilder2.size());
      assertEquals(68, strBuilder2.capacity());
      assertEquals(1, strBuilder2.length());
      assertNull(strBuilder2.getNewLineText());
      assertTrue(strBuilder2.isNotEmpty());
      assertFalse(strBuilder2.isEmpty());
      assertNull(strBuilder2.getNullText());
      assertNotNull(strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      
      String string1 = strBuilder0.leftString(1);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(68, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(1, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(1, strBuilder0.length());
      assertTrue(strBuilder0.isNotEmpty());
      assertNotNull(string1);
      assertEquals("s", string1);
      assertFalse(string1.equals((Object)string0));
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[2] = 'o';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.arrayOffset());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.position());
      assertEquals(7, charBuffer0.remaining());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(7, charBuffer0.length());
      assertEquals("\u0000\u0000o\u0000\u0000\u0000\u0000", charBuffer0.toString());
      assertEquals(7, charBuffer0.capacity());
      assertTrue(charBuffer0.hasArray());
      assertEquals(7, charBuffer0.limit());
      assertNotNull(charBuffer0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', 'o', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(7, charArray0.length);
      
      StrBuilder strBuilder0 = new StrBuilder("b][Kq[0{[*@_%d");
      assertEquals(46, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(14, strBuilder0.length());
      assertEquals(14, strBuilder0.size());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = new StrBuilder(4);
      assertEquals(0, strBuilder1.size());
      assertFalse(strBuilder1.isNotEmpty());
      assertEquals(4, strBuilder1.capacity());
      assertTrue(strBuilder1.isEmpty());
      assertEquals(0, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertNotNull(strBuilder1);
      assertFalse(strBuilder1.equals((Object)strBuilder0));
      
      StrBuilder strBuilder2 = strBuilder0.appendln((Object) charBuffer0);
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.arrayOffset());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.position());
      assertEquals(7, charBuffer0.remaining());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(7, charBuffer0.length());
      assertEquals("\u0000\u0000o\u0000\u0000\u0000\u0000", charBuffer0.toString());
      assertEquals(7, charBuffer0.capacity());
      assertTrue(charBuffer0.hasArray());
      assertEquals(7, charBuffer0.limit());
      assertEquals(22, strBuilder0.length());
      assertEquals(22, strBuilder0.size());
      assertEquals(46, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(22, strBuilder2.length());
      assertEquals(22, strBuilder2.size());
      assertFalse(strBuilder2.isEmpty());
      assertNull(strBuilder2.getNullText());
      assertNull(strBuilder2.getNewLineText());
      assertTrue(strBuilder2.isNotEmpty());
      assertEquals(46, strBuilder2.capacity());
      assertNotNull(strBuilder2);
      assertFalse(strBuilder0.equals((Object)strBuilder1));
      assertFalse(strBuilder2.equals((Object)strBuilder1));
      assertArrayEquals(new char[] {'\u0000', '\u0000', 'o', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(7, charArray0.length);
      assertSame(strBuilder0, strBuilder2);
      assertNotSame(strBuilder0, strBuilder1);
      assertNotSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        strBuilder0.validateIndex(64);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 64
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(".hu");
      assertEquals(3, strBuilder0.length());
      assertEquals(3, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(35, strBuilder0.capacity());
      assertNotNull(strBuilder0);
      
      StringBuffer stringBuffer0 = new StringBuffer();
      assertEquals("", stringBuffer0.toString());
      assertEquals(0, stringBuffer0.length());
      assertNotNull(stringBuffer0);
      
      strBuilder0.appendTo(stringBuffer0);
      assertEquals(3, strBuilder0.length());
      assertEquals(3, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(35, strBuilder0.capacity());
      assertEquals(3, stringBuffer0.length());
      assertEquals(".hu", stringBuffer0.toString());
      
      StrBuilder strBuilder1 = new StrBuilder(8192);
      assertTrue(strBuilder1.isEmpty());
      assertEquals(0, strBuilder1.size());
      assertEquals(0, strBuilder1.length());
      assertFalse(strBuilder1.isNotEmpty());
      assertNull(strBuilder1.getNullText());
      assertEquals(8192, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertNotNull(strBuilder1);
      assertFalse(strBuilder1.equals((Object)strBuilder0));
      
      boolean boolean0 = strBuilder0.equals(strBuilder1);
      assertEquals(3, strBuilder0.length());
      assertEquals(3, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(35, strBuilder0.capacity());
      assertTrue(strBuilder1.isEmpty());
      assertEquals(0, strBuilder1.size());
      assertEquals(0, strBuilder1.length());
      assertFalse(strBuilder1.isNotEmpty());
      assertNull(strBuilder1.getNullText());
      assertEquals(8192, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertFalse(boolean0);
      assertFalse(strBuilder0.equals((Object)strBuilder1));
      assertFalse(strBuilder1.equals((Object)strBuilder0));
      assertNotSame(strBuilder0, strBuilder1);
      assertNotSame(strBuilder1, strBuilder0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.size());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = new StrBuilder();
      assertTrue(strBuilder1.isEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertFalse(strBuilder1.isNotEmpty());
      assertEquals(0, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertEquals(0, strBuilder1.length());
      assertNull(strBuilder1.getNewLineText());
      assertNotNull(strBuilder1);
      assertTrue(strBuilder1.equals((Object)strBuilder0));
      
      StrBuilder strBuilder2 = strBuilder1.appendSeparator('Z', (-1439));
      assertTrue(strBuilder1.isEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertFalse(strBuilder1.isNotEmpty());
      assertEquals(0, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertEquals(0, strBuilder1.length());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(0, strBuilder2.size());
      assertTrue(strBuilder2.isEmpty());
      assertEquals(0, strBuilder2.length());
      assertEquals(32, strBuilder2.capacity());
      assertFalse(strBuilder2.isNotEmpty());
      assertNull(strBuilder2.getNullText());
      assertNotNull(strBuilder2);
      assertTrue(strBuilder1.equals((Object)strBuilder0));
      assertTrue(strBuilder2.equals((Object)strBuilder0));
      assertSame(strBuilder1, strBuilder2);
      assertNotSame(strBuilder1, strBuilder0);
      assertNotSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      
      StrBuilder strBuilder3 = new StrBuilder();
      assertEquals(0, strBuilder3.size());
      assertNull(strBuilder3.getNullText());
      assertEquals(0, strBuilder3.length());
      assertFalse(strBuilder3.isNotEmpty());
      assertTrue(strBuilder3.isEmpty());
      assertEquals(32, strBuilder3.capacity());
      assertNull(strBuilder3.getNewLineText());
      assertNotNull(strBuilder3);
      assertTrue(strBuilder3.equals((Object)strBuilder0));
      assertTrue(strBuilder3.equals((Object)strBuilder2));
      assertTrue(strBuilder3.equals((Object)strBuilder1));
      
      StrBuilder strBuilder4 = strBuilder0.appendSeparator(";-z21)!<%U4j", "");
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(32, strBuilder4.capacity());
      assertNull(strBuilder4.getNewLineText());
      assertFalse(strBuilder4.isNotEmpty());
      assertEquals(0, strBuilder4.size());
      assertEquals(0, strBuilder4.length());
      assertNull(strBuilder4.getNullText());
      assertTrue(strBuilder4.isEmpty());
      assertNotNull(strBuilder4);
      assertTrue(strBuilder0.equals((Object)strBuilder2));
      assertTrue(strBuilder0.equals((Object)strBuilder3));
      assertTrue(strBuilder0.equals((Object)strBuilder1));
      assertTrue(strBuilder4.equals((Object)strBuilder1));
      assertTrue(strBuilder4.equals((Object)strBuilder3));
      assertTrue(strBuilder4.equals((Object)strBuilder2));
      assertNotSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder4);
      assertNotSame(strBuilder0, strBuilder1);
      assertNotSame(strBuilder0, strBuilder2);
      assertNotSame(strBuilder4, strBuilder2);
      assertSame(strBuilder4, strBuilder0);
      assertNotSame(strBuilder4, strBuilder1);
      assertNotSame(strBuilder4, strBuilder3);
      
      StrBuilder strBuilder5 = strBuilder4.trim();
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(32, strBuilder4.capacity());
      assertNull(strBuilder4.getNewLineText());
      assertFalse(strBuilder4.isNotEmpty());
      assertEquals(0, strBuilder4.size());
      assertEquals(0, strBuilder4.length());
      assertNull(strBuilder4.getNullText());
      assertTrue(strBuilder4.isEmpty());
      assertEquals(0, strBuilder5.length());
      assertNull(strBuilder5.getNullText());
      assertEquals(0, strBuilder5.size());
      assertFalse(strBuilder5.isNotEmpty());
      assertEquals(32, strBuilder5.capacity());
      assertTrue(strBuilder5.isEmpty());
      assertNull(strBuilder5.getNewLineText());
      assertNotNull(strBuilder5);
      assertTrue(strBuilder0.equals((Object)strBuilder2));
      assertTrue(strBuilder0.equals((Object)strBuilder3));
      assertTrue(strBuilder0.equals((Object)strBuilder1));
      assertTrue(strBuilder4.equals((Object)strBuilder1));
      assertTrue(strBuilder4.equals((Object)strBuilder3));
      assertTrue(strBuilder4.equals((Object)strBuilder2));
      assertTrue(strBuilder5.equals((Object)strBuilder2));
      assertTrue(strBuilder5.equals((Object)strBuilder3));
      assertTrue(strBuilder5.equals((Object)strBuilder1));
      assertNotSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder4);
      assertNotSame(strBuilder0, strBuilder1);
      assertNotSame(strBuilder0, strBuilder2);
      assertNotSame(strBuilder4, strBuilder2);
      assertSame(strBuilder4, strBuilder0);
      assertNotSame(strBuilder4, strBuilder1);
      assertSame(strBuilder4, strBuilder5);
      assertNotSame(strBuilder4, strBuilder3);
      assertSame(strBuilder5, strBuilder4);
      assertNotSame(strBuilder5, strBuilder2);
      assertNotSame(strBuilder5, strBuilder1);
      assertNotSame(strBuilder5, strBuilder3);
      assertSame(strBuilder5, strBuilder0);
      
      StrBuilder strBuilder6 = new StrBuilder("org.apache.commons.lang3.text.StrBuilder$StrBuilderWriter");
      assertEquals(57, strBuilder6.length());
      assertEquals(57, strBuilder6.size());
      assertTrue(strBuilder6.isNotEmpty());
      assertNull(strBuilder6.getNullText());
      assertFalse(strBuilder6.isEmpty());
      assertNull(strBuilder6.getNewLineText());
      assertEquals(89, strBuilder6.capacity());
      assertNotNull(strBuilder6);
      assertFalse(strBuilder6.equals((Object)strBuilder3));
      assertFalse(strBuilder6.equals((Object)strBuilder4));
      assertFalse(strBuilder6.equals((Object)strBuilder2));
      assertFalse(strBuilder6.equals((Object)strBuilder0));
      assertFalse(strBuilder6.equals((Object)strBuilder1));
      assertFalse(strBuilder6.equals((Object)strBuilder5));
      
      StrBuilder strBuilder7 = strBuilder6.deleteAll("u");
      assertEquals(55, strBuilder6.size());
      assertTrue(strBuilder6.isNotEmpty());
      assertNull(strBuilder6.getNullText());
      assertFalse(strBuilder6.isEmpty());
      assertNull(strBuilder6.getNewLineText());
      assertEquals(89, strBuilder6.capacity());
      assertEquals(55, strBuilder6.length());
      assertEquals(55, strBuilder7.length());
      assertEquals(55, strBuilder7.size());
      assertNull(strBuilder7.getNewLineText());
      assertTrue(strBuilder7.isNotEmpty());
      assertNull(strBuilder7.getNullText());
      assertEquals(89, strBuilder7.capacity());
      assertFalse(strBuilder7.isEmpty());
      assertNotNull(strBuilder7);
      assertFalse(strBuilder6.equals((Object)strBuilder3));
      assertFalse(strBuilder6.equals((Object)strBuilder4));
      assertFalse(strBuilder6.equals((Object)strBuilder2));
      assertFalse(strBuilder6.equals((Object)strBuilder0));
      assertFalse(strBuilder6.equals((Object)strBuilder1));
      assertFalse(strBuilder6.equals((Object)strBuilder5));
      assertFalse(strBuilder7.equals((Object)strBuilder4));
      assertFalse(strBuilder7.equals((Object)strBuilder3));
      assertFalse(strBuilder7.equals((Object)strBuilder0));
      assertFalse(strBuilder7.equals((Object)strBuilder1));
      assertFalse(strBuilder7.equals((Object)strBuilder2));
      assertFalse(strBuilder7.equals((Object)strBuilder5));
      assertNotSame(strBuilder6, strBuilder3);
      assertNotSame(strBuilder6, strBuilder4);
      assertNotSame(strBuilder6, strBuilder2);
      assertNotSame(strBuilder6, strBuilder0);
      assertNotSame(strBuilder6, strBuilder1);
      assertSame(strBuilder6, strBuilder7);
      assertNotSame(strBuilder6, strBuilder5);
      assertNotSame(strBuilder7, strBuilder4);
      assertNotSame(strBuilder7, strBuilder3);
      assertNotSame(strBuilder7, strBuilder0);
      assertSame(strBuilder7, strBuilder6);
      assertNotSame(strBuilder7, strBuilder1);
      assertNotSame(strBuilder7, strBuilder2);
      assertNotSame(strBuilder7, strBuilder5);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("");
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertFalse(strBuilder0.isNotEmpty());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertNotNull(strBuilder0);
      
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertFalse(strBuilder0.isNotEmpty());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder_StrBuilderReader0.ready());
      assertTrue(strBuilder_StrBuilderReader0.markSupported());
      assertNotNull(strBuilder_StrBuilderReader0);
      
      char[] charArray0 = new char[6];
      charArray0[0] = '_';
      char char0 = '&';
      charArray0[1] = '&';
      charArray0[2] = 'v';
      charArray0[3] = 'r';
      charArray0[4] = 'i';
      IntStream intStream0 = strBuilder0.codePoints();
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertFalse(strBuilder0.isNotEmpty());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertNotNull(intStream0);
      
      charArray0[5] = 'T';
      // Undeclared exception!
      try { 
        strBuilder_StrBuilderReader0.read(charArray0, 4, 1241);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder$StrBuilderReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertNotNull(strBuilder0);
      
      // Undeclared exception!
      try { 
        strBuilder0.readFrom((Readable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("");
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.clear();
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertTrue(strBuilder1.isEmpty());
      assertFalse(strBuilder1.isNotEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNullText());
      assertEquals(0, strBuilder1.length());
      assertEquals(0, strBuilder1.size());
      assertNull(strBuilder1.getNewLineText());
      assertNotNull(strBuilder1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      
      StrBuilder strBuilder2 = strBuilder0.appendln(true);
      assertFalse(strBuilder0.isEmpty());
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(5, strBuilder0.size());
      assertEquals(5, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(32, strBuilder2.capacity());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(5, strBuilder2.length());
      assertEquals(5, strBuilder2.size());
      assertNull(strBuilder2.getNullText());
      assertTrue(strBuilder2.isNotEmpty());
      assertNull(strBuilder2.getNewLineText());
      assertNotNull(strBuilder2);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      
      char[] charArray0 = new char[1];
      int int0 = 1384;
      strBuilder1.size = 1384;
      assertFalse(strBuilder0.isEmpty());
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(1384, strBuilder0.length());
      assertEquals(1384, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNullText());
      assertTrue(strBuilder1.isNotEmpty());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(1384, strBuilder1.size());
      assertEquals(1384, strBuilder1.length());
      
      int int1 = 1185;
      // Undeclared exception!
      try { 
        strBuilder0.substring(1185);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("&");
      assertEquals(1, strBuilder0.length());
      assertEquals(1, strBuilder0.size());
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(33, strBuilder0.capacity());
      assertNotNull(strBuilder0);
      
      char[] charArray0 = new char[1];
      charArray0[0] = '!';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.arrayOffset());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals("!", charBuffer0.toString());
      assertEquals(1, charBuffer0.limit());
      assertEquals(1, charBuffer0.capacity());
      assertEquals(1, charBuffer0.length());
      assertEquals(0, charBuffer0.position());
      assertTrue(charBuffer0.hasArray());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(1, charBuffer0.remaining());
      assertNotNull(charBuffer0);
      assertArrayEquals(new char[] {'!'}, charArray0);
      assertEquals(1, charArray0.length);
      
      StrBuilder strBuilder1 = strBuilder0.append(charBuffer0);
      assertEquals(2, strBuilder0.length());
      assertEquals(2, strBuilder0.size());
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(33, strBuilder0.capacity());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.arrayOffset());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals("!", charBuffer0.toString());
      assertEquals(1, charBuffer0.limit());
      assertEquals(1, charBuffer0.capacity());
      assertEquals(1, charBuffer0.length());
      assertEquals(0, charBuffer0.position());
      assertTrue(charBuffer0.hasArray());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(1, charBuffer0.remaining());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(33, strBuilder1.capacity());
      assertTrue(strBuilder1.isNotEmpty());
      assertEquals(2, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(2, strBuilder1.size());
      assertNotNull(strBuilder1);
      assertArrayEquals(new char[] {'!'}, charArray0);
      assertEquals(1, charArray0.length);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      
      StrBuilder strBuilder2 = strBuilder1.appendln('!');
      assertEquals(4, strBuilder0.size());
      assertEquals(4, strBuilder0.length());
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(33, strBuilder0.capacity());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.arrayOffset());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals("!", charBuffer0.toString());
      assertEquals(1, charBuffer0.limit());
      assertEquals(1, charBuffer0.capacity());
      assertEquals(1, charBuffer0.length());
      assertEquals(0, charBuffer0.position());
      assertTrue(charBuffer0.hasArray());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(1, charBuffer0.remaining());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(33, strBuilder1.capacity());
      assertTrue(strBuilder1.isNotEmpty());
      assertNull(strBuilder1.getNullText());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(4, strBuilder1.size());
      assertEquals(4, strBuilder1.length());
      assertNull(strBuilder2.getNullText());
      assertTrue(strBuilder2.isNotEmpty());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(33, strBuilder2.capacity());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(4, strBuilder2.size());
      assertEquals(4, strBuilder2.length());
      assertNotNull(strBuilder2);
      assertArrayEquals(new char[] {'!'}, charArray0);
      assertEquals(1, charArray0.length);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      
      StrBuilder strBuilder3 = strBuilder2.ensureCapacity(0);
      assertEquals(4, strBuilder0.size());
      assertEquals(4, strBuilder0.length());
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(33, strBuilder0.capacity());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.arrayOffset());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals("!", charBuffer0.toString());
      assertEquals(1, charBuffer0.limit());
      assertEquals(1, charBuffer0.capacity());
      assertEquals(1, charBuffer0.length());
      assertEquals(0, charBuffer0.position());
      assertTrue(charBuffer0.hasArray());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(1, charBuffer0.remaining());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(33, strBuilder1.capacity());
      assertTrue(strBuilder1.isNotEmpty());
      assertNull(strBuilder1.getNullText());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(4, strBuilder1.size());
      assertEquals(4, strBuilder1.length());
      assertNull(strBuilder2.getNullText());
      assertTrue(strBuilder2.isNotEmpty());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(33, strBuilder2.capacity());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(4, strBuilder2.size());
      assertEquals(4, strBuilder2.length());
      assertEquals(4, strBuilder3.length());
      assertEquals(4, strBuilder3.size());
      assertTrue(strBuilder3.isNotEmpty());
      assertNull(strBuilder3.getNullText());
      assertNull(strBuilder3.getNewLineText());
      assertFalse(strBuilder3.isEmpty());
      assertEquals(33, strBuilder3.capacity());
      assertNotNull(strBuilder3);
      assertArrayEquals(new char[] {'!'}, charArray0);
      assertEquals(1, charArray0.length);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder3);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder2);
      
      Class<Integer> class0 = Integer.class;
      ServiceLoader<Integer> serviceLoader0 = ServiceLoader.loadInstalled(class0);
      assertEquals("java.util.ServiceLoader[java.lang.Integer]", serviceLoader0.toString());
      assertNotNull(serviceLoader0);
      
      Iterator<Integer> iterator0 = serviceLoader0.iterator();
      assertEquals("java.util.ServiceLoader[java.lang.Integer]", serviceLoader0.toString());
      assertNotNull(iterator0);
      
      StrBuilder strBuilder4 = new StrBuilder();
      assertEquals(0, strBuilder4.size());
      assertFalse(strBuilder4.isNotEmpty());
      assertNull(strBuilder4.getNewLineText());
      assertNull(strBuilder4.getNullText());
      assertEquals(0, strBuilder4.length());
      assertEquals(32, strBuilder4.capacity());
      assertTrue(strBuilder4.isEmpty());
      assertNotNull(strBuilder4);
      assertFalse(strBuilder4.equals((Object)strBuilder1));
      assertFalse(strBuilder4.equals((Object)strBuilder2));
      assertFalse(strBuilder4.equals((Object)strBuilder0));
      assertFalse(strBuilder4.equals((Object)strBuilder3));
      
      StrBuilder strBuilder5 = strBuilder4.appendAll((Iterator<?>) null);
      assertEquals(0, strBuilder4.size());
      assertFalse(strBuilder4.isNotEmpty());
      assertNull(strBuilder4.getNewLineText());
      assertNull(strBuilder4.getNullText());
      assertEquals(0, strBuilder4.length());
      assertEquals(32, strBuilder4.capacity());
      assertTrue(strBuilder4.isEmpty());
      assertNull(strBuilder5.getNullText());
      assertTrue(strBuilder5.isEmpty());
      assertNull(strBuilder5.getNewLineText());
      assertEquals(32, strBuilder5.capacity());
      assertEquals(0, strBuilder5.length());
      assertEquals(0, strBuilder5.size());
      assertFalse(strBuilder5.isNotEmpty());
      assertNotNull(strBuilder5);
      assertFalse(strBuilder4.equals((Object)strBuilder1));
      assertFalse(strBuilder4.equals((Object)strBuilder2));
      assertFalse(strBuilder4.equals((Object)strBuilder0));
      assertFalse(strBuilder4.equals((Object)strBuilder3));
      assertFalse(strBuilder5.equals((Object)strBuilder1));
      assertFalse(strBuilder5.equals((Object)strBuilder3));
      assertFalse(strBuilder5.equals((Object)strBuilder2));
      assertFalse(strBuilder5.equals((Object)strBuilder0));
      assertNotSame(strBuilder4, strBuilder1);
      assertNotSame(strBuilder4, strBuilder2);
      assertNotSame(strBuilder4, strBuilder0);
      assertNotSame(strBuilder4, strBuilder3);
      assertSame(strBuilder4, strBuilder5);
      assertNotSame(strBuilder5, strBuilder1);
      assertNotSame(strBuilder5, strBuilder3);
      assertNotSame(strBuilder5, strBuilder2);
      assertSame(strBuilder5, strBuilder4);
      assertNotSame(strBuilder5, strBuilder0);
      
      StrBuilder strBuilder6 = new StrBuilder("org.apache.commons.lang3.text.StrBuilder$StrBuilderReader");
      assertTrue(strBuilder6.isNotEmpty());
      assertNull(strBuilder6.getNewLineText());
      assertEquals(57, strBuilder6.length());
      assertFalse(strBuilder6.isEmpty());
      assertEquals(57, strBuilder6.size());
      assertNull(strBuilder6.getNullText());
      assertEquals(89, strBuilder6.capacity());
      assertNotNull(strBuilder6);
      assertFalse(strBuilder6.equals((Object)strBuilder4));
      assertFalse(strBuilder6.equals((Object)strBuilder3));
      assertFalse(strBuilder6.equals((Object)strBuilder1));
      assertFalse(strBuilder6.equals((Object)strBuilder0));
      assertFalse(strBuilder6.equals((Object)strBuilder5));
      assertFalse(strBuilder6.equals((Object)strBuilder2));
      
      IntStream intStream0 = strBuilder6.codePoints();
      assertTrue(strBuilder6.isNotEmpty());
      assertNull(strBuilder6.getNewLineText());
      assertEquals(57, strBuilder6.length());
      assertFalse(strBuilder6.isEmpty());
      assertEquals(57, strBuilder6.size());
      assertNull(strBuilder6.getNullText());
      assertEquals(89, strBuilder6.capacity());
      assertNotNull(intStream0);
      assertFalse(strBuilder6.equals((Object)strBuilder4));
      assertFalse(strBuilder6.equals((Object)strBuilder3));
      assertFalse(strBuilder6.equals((Object)strBuilder1));
      assertFalse(strBuilder6.equals((Object)strBuilder0));
      assertFalse(strBuilder6.equals((Object)strBuilder5));
      assertFalse(strBuilder6.equals((Object)strBuilder2));
      assertNotSame(strBuilder6, strBuilder4);
      assertNotSame(strBuilder6, strBuilder3);
      assertNotSame(strBuilder6, strBuilder1);
      assertNotSame(strBuilder6, strBuilder0);
      assertNotSame(strBuilder6, strBuilder5);
      assertNotSame(strBuilder6, strBuilder2);
      
      char[] charArray1 = strBuilder4.getChars(charArray0);
      assertEquals(0, strBuilder4.size());
      assertFalse(strBuilder4.isNotEmpty());
      assertNull(strBuilder4.getNewLineText());
      assertNull(strBuilder4.getNullText());
      assertEquals(0, strBuilder4.length());
      assertEquals(32, strBuilder4.capacity());
      assertTrue(strBuilder4.isEmpty());
      assertNotNull(charArray1);
      assertFalse(strBuilder4.equals((Object)strBuilder1));
      assertFalse(strBuilder4.equals((Object)strBuilder2));
      assertFalse(strBuilder4.equals((Object)strBuilder6));
      assertFalse(strBuilder4.equals((Object)strBuilder0));
      assertFalse(strBuilder4.equals((Object)strBuilder3));
      assertArrayEquals(new char[] {'!'}, charArray0);
      assertArrayEquals(new char[] {'!'}, charArray1);
      assertEquals(1, charArray0.length);
      assertEquals(1, charArray1.length);
      assertSame(charArray0, charArray1);
      assertNotSame(strBuilder4, strBuilder1);
      assertNotSame(strBuilder4, strBuilder2);
      assertNotSame(strBuilder4, strBuilder6);
      assertNotSame(strBuilder4, strBuilder0);
      assertNotSame(strBuilder4, strBuilder3);
      assertSame(strBuilder4, strBuilder5);
      assertSame(charArray1, charArray0);
      
      int int0 = strBuilder0.lastIndexOf("[", 871);
      assertEquals(4, strBuilder0.size());
      assertEquals(4, strBuilder0.length());
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(33, strBuilder0.capacity());
      assertEquals((-1), int0);
      assertFalse(strBuilder0.equals((Object)strBuilder4));
      assertFalse(strBuilder0.equals((Object)strBuilder6));
      assertFalse(strBuilder0.equals((Object)strBuilder5));
      assertNotSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder3);
      assertNotSame(strBuilder0, strBuilder6);
      assertNotSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      
      StrBuilder strBuilder7 = strBuilder1.appendln('!');
      assertTrue(strBuilder7.isNotEmpty());
      assertFalse(strBuilder7.isEmpty());
      assertNull(strBuilder7.getNullText());
      assertNull(strBuilder7.getNewLineText());
      assertEquals(6, strBuilder7.size());
      assertEquals(6, strBuilder7.length());
      assertEquals(33, strBuilder7.capacity());
      assertEquals(6, strBuilder0.length());
      assertEquals(6, strBuilder0.size());
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(33, strBuilder0.capacity());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.arrayOffset());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals("!", charBuffer0.toString());
      assertEquals(1, charBuffer0.limit());
      assertEquals(1, charBuffer0.capacity());
      assertEquals(1, charBuffer0.length());
      assertEquals(0, charBuffer0.position());
      assertTrue(charBuffer0.hasArray());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(1, charBuffer0.remaining());
      assertEquals(6, strBuilder1.size());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(33, strBuilder1.capacity());
      assertTrue(strBuilder1.isNotEmpty());
      assertNull(strBuilder1.getNullText());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(6, strBuilder1.length());
      assertNotNull(strBuilder7);
      assertFalse(strBuilder7.equals((Object)strBuilder4));
      assertFalse(strBuilder7.equals((Object)strBuilder5));
      assertFalse(strBuilder7.equals((Object)strBuilder6));
      assertFalse(strBuilder0.equals((Object)strBuilder4));
      assertFalse(strBuilder0.equals((Object)strBuilder6));
      assertFalse(strBuilder0.equals((Object)strBuilder5));
      assertFalse(strBuilder1.equals((Object)strBuilder6));
      assertFalse(strBuilder1.equals((Object)strBuilder4));
      assertFalse(strBuilder1.equals((Object)strBuilder5));
      assertArrayEquals(new char[] {'!'}, charArray0);
      assertEquals(1, charArray0.length);
      assertSame(strBuilder7, strBuilder1);
      assertNotSame(strBuilder7, strBuilder4);
      assertNotSame(strBuilder7, strBuilder5);
      assertSame(strBuilder7, strBuilder3);
      assertSame(strBuilder7, strBuilder0);
      assertNotSame(strBuilder7, strBuilder6);
      assertSame(strBuilder7, strBuilder2);
      assertNotSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder3);
      assertNotSame(strBuilder0, strBuilder6);
      assertNotSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder7);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(charArray0, charArray1);
      assertSame(strBuilder1, strBuilder3);
      assertNotSame(strBuilder1, strBuilder6);
      assertNotSame(strBuilder1, strBuilder4);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder2);
      assertNotSame(strBuilder1, strBuilder5);
      assertSame(strBuilder1, strBuilder7);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertFalse(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.appendln((-1L));
      assertEquals(3, strBuilder0.length());
      assertEquals(3, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(32, strBuilder1.capacity());
      assertTrue(strBuilder1.isNotEmpty());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(3, strBuilder1.length());
      assertEquals(3, strBuilder1.size());
      assertNotNull(strBuilder1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) "ExTJ\"i%TbqL0];jE";
      objectArray0[1] = (Object) strBuilder1;
      objectArray0[2] = (Object) "ExTJ\"i%TbqL0];jE";
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[3] = object0;
      // Undeclared exception!
      try { 
        strBuilder1.append("ExTJ\"i%TbqL0];jE", objectArray0);
        fail("Expecting exception: IllegalFormatConversionException");
      
      } catch(IllegalFormatConversionException e) {
         //
         // b != java.lang.String
         //
         verifyException("java.util.Formatter$FormatSpecifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("org.apache.commons.ang3.text.StrMatcher$CharSetMatcher");
      assertEquals(54, strBuilder0.length());
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(86, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertEquals(54, strBuilder0.size());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = new StrBuilder(64);
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertTrue(strBuilder1.isEmpty());
      assertEquals(64, strBuilder1.capacity());
      assertFalse(strBuilder1.isNotEmpty());
      assertEquals(0, strBuilder1.length());
      assertEquals(0, strBuilder1.size());
      assertNotNull(strBuilder1);
      assertFalse(strBuilder1.equals((Object)strBuilder0));
      
      StrBuilder strBuilder2 = strBuilder0.deleteAll("org.apache.commons.ang3.text.StrMatcher$CharSetMatcher");
      assertFalse(strBuilder0.isNotEmpty());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(86, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder2.isEmpty());
      assertFalse(strBuilder2.isNotEmpty());
      assertEquals(86, strBuilder2.capacity());
      assertEquals(0, strBuilder2.size());
      assertEquals(0, strBuilder2.length());
      assertNull(strBuilder2.getNewLineText());
      assertNull(strBuilder2.getNullText());
      assertNotNull(strBuilder2);
      assertTrue(strBuilder0.equals((Object)strBuilder1));
      assertTrue(strBuilder2.equals((Object)strBuilder1));
      assertNotSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertNotSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      
      StrBuilder strBuilder3 = strBuilder1.appendln(strBuilder0, 0, 0);
      assertFalse(strBuilder0.isNotEmpty());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(86, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertEquals(1, strBuilder1.size());
      assertTrue(strBuilder1.isNotEmpty());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(64, strBuilder1.capacity());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(1, strBuilder1.length());
      assertNull(strBuilder3.getNullText());
      assertNull(strBuilder3.getNewLineText());
      assertTrue(strBuilder3.isNotEmpty());
      assertEquals(64, strBuilder3.capacity());
      assertFalse(strBuilder3.isEmpty());
      assertEquals(1, strBuilder3.size());
      assertEquals(1, strBuilder3.length());
      assertNotNull(strBuilder3);
      assertFalse(strBuilder0.equals((Object)strBuilder1));
      assertFalse(strBuilder1.equals((Object)strBuilder0));
      assertFalse(strBuilder1.equals((Object)strBuilder2));
      assertFalse(strBuilder3.equals((Object)strBuilder0));
      assertFalse(strBuilder3.equals((Object)strBuilder2));
      assertNotSame(strBuilder0, strBuilder3);
      assertNotSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertNotSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder3);
      assertNotSame(strBuilder1, strBuilder2);
      assertSame(strBuilder3, strBuilder1);
      assertNotSame(strBuilder3, strBuilder0);
      assertNotSame(strBuilder3, strBuilder2);
      
      StrBuilder strBuilder4 = strBuilder0.appendln((Object) "org.apache.commons.ang3.text.StrMatcher$CharSetMatcher");
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(86, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertEquals(55, strBuilder0.size());
      assertEquals(55, strBuilder0.length());
      assertNull(strBuilder4.getNewLineText());
      assertTrue(strBuilder4.isNotEmpty());
      assertFalse(strBuilder4.isEmpty());
      assertEquals(86, strBuilder4.capacity());
      assertNull(strBuilder4.getNullText());
      assertEquals(55, strBuilder4.size());
      assertEquals(55, strBuilder4.length());
      assertNotNull(strBuilder4);
      assertFalse(strBuilder0.equals((Object)strBuilder3));
      assertFalse(strBuilder0.equals((Object)strBuilder1));
      assertFalse(strBuilder4.equals((Object)strBuilder1));
      assertFalse(strBuilder4.equals((Object)strBuilder3));
      assertNotSame(strBuilder0, strBuilder3);
      assertNotSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder4);
      assertNotSame(strBuilder4, strBuilder1);
      assertSame(strBuilder4, strBuilder2);
      assertSame(strBuilder4, strBuilder0);
      assertNotSame(strBuilder4, strBuilder3);
      
      strBuilder0.validateIndex(0);
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(86, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertEquals(55, strBuilder0.size());
      assertEquals(55, strBuilder0.length());
      assertFalse(strBuilder0.equals((Object)strBuilder3));
      assertFalse(strBuilder0.equals((Object)strBuilder1));
      assertNotSame(strBuilder0, strBuilder3);
      assertNotSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder4);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertTrue(strBuilder0.isEmpty());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.appendFixedWidthPadLeft(202, 202, 'j');
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(404, strBuilder0.capacity());
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(202, strBuilder0.length());
      assertEquals(202, strBuilder0.size());
      assertNull(strBuilder1.getNullText());
      assertEquals(404, strBuilder1.capacity());
      assertTrue(strBuilder1.isNotEmpty());
      assertEquals(202, strBuilder1.length());
      assertEquals(202, strBuilder1.size());
      assertNull(strBuilder1.getNewLineText());
      assertFalse(strBuilder1.isEmpty());
      assertNotNull(strBuilder1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      
      IntStream intStream0 = strBuilder1.codePoints();
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(404, strBuilder0.capacity());
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(202, strBuilder0.length());
      assertEquals(202, strBuilder0.size());
      assertNull(strBuilder1.getNullText());
      assertEquals(404, strBuilder1.capacity());
      assertTrue(strBuilder1.isNotEmpty());
      assertEquals(202, strBuilder1.length());
      assertEquals(202, strBuilder1.size());
      assertNull(strBuilder1.getNewLineText());
      assertFalse(strBuilder1.isEmpty());
      assertNotNull(intStream0);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      
      char char0 = strBuilder1.charAt(55);
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(404, strBuilder0.capacity());
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(202, strBuilder0.length());
      assertEquals(202, strBuilder0.size());
      assertNull(strBuilder1.getNullText());
      assertEquals(404, strBuilder1.capacity());
      assertTrue(strBuilder1.isNotEmpty());
      assertEquals(202, strBuilder1.length());
      assertEquals(202, strBuilder1.size());
      assertNull(strBuilder1.getNewLineText());
      assertFalse(strBuilder1.isEmpty());
      assertEquals('j', char0);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      
      StrBuilder strBuilder2 = strBuilder1.append('j');
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(404, strBuilder0.capacity());
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(203, strBuilder0.size());
      assertEquals(203, strBuilder0.length());
      assertNull(strBuilder1.getNullText());
      assertEquals(404, strBuilder1.capacity());
      assertTrue(strBuilder1.isNotEmpty());
      assertEquals(203, strBuilder1.size());
      assertEquals(203, strBuilder1.length());
      assertNull(strBuilder1.getNewLineText());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(203, strBuilder2.length());
      assertNull(strBuilder2.getNewLineText());
      assertNull(strBuilder2.getNullText());
      assertEquals(404, strBuilder2.capacity());
      assertFalse(strBuilder2.isEmpty());
      assertTrue(strBuilder2.isNotEmpty());
      assertEquals(203, strBuilder2.size());
      assertNotNull(strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("^idxVa9J(IJ6fm");
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(46, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertEquals(14, strBuilder0.length());
      assertEquals(14, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = new StrBuilder("^idxVa9J(IJ6fm");
      assertEquals(46, strBuilder1.capacity());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(14, strBuilder1.length());
      assertEquals(14, strBuilder1.size());
      assertTrue(strBuilder1.isNotEmpty());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertNotNull(strBuilder1);
      assertTrue(strBuilder1.equals((Object)strBuilder0));
      
      int int0 = strBuilder0.lastIndexOf("^idxVa9J(IJ6fm");
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(46, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertEquals(14, strBuilder0.length());
      assertEquals(14, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(0, int0);
      assertTrue(strBuilder0.equals((Object)strBuilder1));
      assertNotSame(strBuilder0, strBuilder1);
      
      StrBuilder strBuilder2 = strBuilder1.appendSeparator("Invalid offset: ", "qs%A@t!%k}N*,$Yl`a");
      assertEquals(46, strBuilder1.capacity());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(30, strBuilder1.length());
      assertEquals(30, strBuilder1.size());
      assertTrue(strBuilder1.isNotEmpty());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(30, strBuilder2.length());
      assertEquals(30, strBuilder2.size());
      assertFalse(strBuilder2.isEmpty());
      assertTrue(strBuilder2.isNotEmpty());
      assertNull(strBuilder2.getNullText());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(46, strBuilder2.capacity());
      assertNotNull(strBuilder2);
      assertFalse(strBuilder1.equals((Object)strBuilder0));
      assertFalse(strBuilder2.equals((Object)strBuilder0));
      assertSame(strBuilder1, strBuilder2);
      assertNotSame(strBuilder1, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertNotSame(strBuilder2, strBuilder0);
      
      StringBuilder stringBuilder0 = new StringBuilder(0);
      assertEquals("", stringBuilder0.toString());
      assertNotNull(stringBuilder0);
      
      StrBuilder strBuilder3 = strBuilder0.appendln(stringBuilder0, 0, 0);
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(46, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertEquals(15, strBuilder0.length());
      assertEquals(15, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertEquals("", stringBuilder0.toString());
      assertEquals(46, strBuilder3.capacity());
      assertTrue(strBuilder3.isNotEmpty());
      assertNull(strBuilder3.getNullText());
      assertNull(strBuilder3.getNewLineText());
      assertFalse(strBuilder3.isEmpty());
      assertEquals(15, strBuilder3.length());
      assertEquals(15, strBuilder3.size());
      assertNotNull(strBuilder3);
      assertFalse(strBuilder0.equals((Object)strBuilder2));
      assertFalse(strBuilder0.equals((Object)strBuilder1));
      assertFalse(strBuilder3.equals((Object)strBuilder2));
      assertFalse(strBuilder3.equals((Object)strBuilder1));
      assertSame(strBuilder0, strBuilder3);
      assertNotSame(strBuilder0, strBuilder2);
      assertNotSame(strBuilder0, strBuilder1);
      assertNotSame(strBuilder3, strBuilder2);
      assertSame(strBuilder3, strBuilder0);
      assertNotSame(strBuilder3, strBuilder1);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.trim();
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder1.size());
      assertFalse(strBuilder1.isNotEmpty());
      assertTrue(strBuilder1.isEmpty());
      assertEquals(0, strBuilder1.length());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertNotNull(strBuilder1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      
      char[] charArray0 = strBuilder0.toCharArray();
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertNotNull(charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      assertSame(strBuilder0, strBuilder1);
      
      StrBuilder strBuilder2 = strBuilder0.appendln((-1875L));
      assertEquals(6, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(6, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(6, strBuilder2.size());
      assertEquals(6, strBuilder2.length());
      assertFalse(strBuilder2.isEmpty());
      assertTrue(strBuilder2.isNotEmpty());
      assertNull(strBuilder2.getNullText());
      assertEquals(32, strBuilder2.capacity());
      assertNull(strBuilder2.getNewLineText());
      assertNotNull(strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder2.new StrBuilderReader();
      assertEquals(6, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(6, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(6, strBuilder2.size());
      assertEquals(6, strBuilder2.length());
      assertFalse(strBuilder2.isEmpty());
      assertTrue(strBuilder2.isNotEmpty());
      assertNull(strBuilder2.getNullText());
      assertEquals(32, strBuilder2.capacity());
      assertNull(strBuilder2.getNewLineText());
      assertTrue(strBuilder_StrBuilderReader0.markSupported());
      assertTrue(strBuilder_StrBuilderReader0.ready());
      assertNotNull(strBuilder_StrBuilderReader0);
      
      StrBuilder strBuilder3 = new StrBuilder("*-");
      assertTrue(strBuilder3.isNotEmpty());
      assertFalse(strBuilder3.isEmpty());
      assertNull(strBuilder3.getNewLineText());
      assertNull(strBuilder3.getNullText());
      assertEquals(34, strBuilder3.capacity());
      assertEquals(2, strBuilder3.length());
      assertEquals(2, strBuilder3.size());
      assertNotNull(strBuilder3);
      assertFalse(strBuilder3.equals((Object)strBuilder1));
      assertFalse(strBuilder3.equals((Object)strBuilder0));
      assertFalse(strBuilder3.equals((Object)strBuilder2));
      
      StrBuilder strBuilder4 = new StrBuilder(">ho[+Y");
      assertNull(strBuilder4.getNewLineText());
      assertTrue(strBuilder4.isNotEmpty());
      assertFalse(strBuilder4.isEmpty());
      assertEquals(38, strBuilder4.capacity());
      assertNull(strBuilder4.getNullText());
      assertEquals(6, strBuilder4.length());
      assertEquals(6, strBuilder4.size());
      assertNotNull(strBuilder4);
      assertFalse(strBuilder4.equals((Object)strBuilder1));
      assertFalse(strBuilder4.equals((Object)strBuilder2));
      assertFalse(strBuilder4.equals((Object)strBuilder3));
      assertFalse(strBuilder4.equals((Object)strBuilder0));
      
      int int0 = strBuilder4.lastIndexOf(">ho[+Y");
      assertNull(strBuilder4.getNewLineText());
      assertTrue(strBuilder4.isNotEmpty());
      assertFalse(strBuilder4.isEmpty());
      assertEquals(38, strBuilder4.capacity());
      assertNull(strBuilder4.getNullText());
      assertEquals(6, strBuilder4.length());
      assertEquals(6, strBuilder4.size());
      assertEquals(0, int0);
      assertFalse(strBuilder4.equals((Object)strBuilder1));
      assertFalse(strBuilder4.equals((Object)strBuilder2));
      assertFalse(strBuilder4.equals((Object)strBuilder3));
      assertFalse(strBuilder4.equals((Object)strBuilder0));
      assertNotSame(strBuilder4, strBuilder1);
      assertNotSame(strBuilder4, strBuilder2);
      assertNotSame(strBuilder4, strBuilder3);
      assertNotSame(strBuilder4, strBuilder0);
      
      int int1 = strBuilder3.readFrom(strBuilder_StrBuilderReader0);
      assertEquals(6, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(6, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(6, strBuilder2.size());
      assertEquals(6, strBuilder2.length());
      assertFalse(strBuilder2.isEmpty());
      assertTrue(strBuilder2.isNotEmpty());
      assertNull(strBuilder2.getNullText());
      assertEquals(32, strBuilder2.capacity());
      assertNull(strBuilder2.getNewLineText());
      assertTrue(strBuilder_StrBuilderReader0.markSupported());
      assertFalse(strBuilder_StrBuilderReader0.ready());
      assertTrue(strBuilder3.isNotEmpty());
      assertFalse(strBuilder3.isEmpty());
      assertNull(strBuilder3.getNewLineText());
      assertNull(strBuilder3.getNullText());
      assertEquals(34, strBuilder3.capacity());
      assertEquals(8, strBuilder3.size());
      assertEquals(8, strBuilder3.length());
      assertEquals(6, int1);
      assertFalse(strBuilder0.equals((Object)strBuilder3));
      assertFalse(strBuilder0.equals((Object)strBuilder4));
      assertFalse(strBuilder2.equals((Object)strBuilder3));
      assertFalse(strBuilder2.equals((Object)strBuilder4));
      assertFalse(strBuilder3.equals((Object)strBuilder4));
      assertFalse(strBuilder3.equals((Object)strBuilder1));
      assertFalse(strBuilder3.equals((Object)strBuilder0));
      assertFalse(strBuilder3.equals((Object)strBuilder2));
      assertFalse(int1 == int0);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertNotSame(strBuilder0, strBuilder3);
      assertNotSame(strBuilder0, strBuilder4);
      assertSame(strBuilder2, strBuilder1);
      assertNotSame(strBuilder2, strBuilder3);
      assertSame(strBuilder2, strBuilder0);
      assertNotSame(strBuilder2, strBuilder4);
      assertNotSame(strBuilder3, strBuilder4);
      assertNotSame(strBuilder3, strBuilder1);
      assertNotSame(strBuilder3, strBuilder0);
      assertNotSame(strBuilder3, strBuilder2);
      
      StrBuilder strBuilder5 = strBuilder3.delete(6, 117);
      assertTrue(strBuilder3.isNotEmpty());
      assertFalse(strBuilder3.isEmpty());
      assertNull(strBuilder3.getNewLineText());
      assertNull(strBuilder3.getNullText());
      assertEquals(34, strBuilder3.capacity());
      assertEquals(6, strBuilder3.length());
      assertEquals(6, strBuilder3.size());
      assertFalse(strBuilder5.isEmpty());
      assertEquals(6, strBuilder5.length());
      assertEquals(6, strBuilder5.size());
      assertNull(strBuilder5.getNullText());
      assertNull(strBuilder5.getNewLineText());
      assertTrue(strBuilder5.isNotEmpty());
      assertEquals(34, strBuilder5.capacity());
      assertNotNull(strBuilder5);
      assertFalse(strBuilder3.equals((Object)strBuilder4));
      assertFalse(strBuilder3.equals((Object)strBuilder1));
      assertFalse(strBuilder3.equals((Object)strBuilder0));
      assertFalse(strBuilder3.equals((Object)strBuilder2));
      assertFalse(strBuilder5.equals((Object)strBuilder1));
      assertFalse(strBuilder5.equals((Object)strBuilder2));
      assertFalse(strBuilder5.equals((Object)strBuilder0));
      assertFalse(strBuilder5.equals((Object)strBuilder4));
      assertSame(strBuilder3, strBuilder5);
      assertNotSame(strBuilder3, strBuilder4);
      assertNotSame(strBuilder3, strBuilder1);
      assertNotSame(strBuilder3, strBuilder0);
      assertNotSame(strBuilder3, strBuilder2);
      assertNotSame(strBuilder5, strBuilder1);
      assertNotSame(strBuilder5, strBuilder2);
      assertNotSame(strBuilder5, strBuilder0);
      assertNotSame(strBuilder5, strBuilder4);
      assertSame(strBuilder5, strBuilder3);
      
      Integer integer0 = new Integer(102);
      assertNotNull(integer0);
      assertEquals(102, (int)integer0);
      assertFalse(integer0.equals((Object)int1));
      assertFalse(integer0.equals((Object)int0));
      
      StrBuilder strBuilder6 = new StrBuilder();
      assertNull(strBuilder6.getNullText());
      assertEquals(0, strBuilder6.size());
      assertFalse(strBuilder6.isNotEmpty());
      assertEquals(32, strBuilder6.capacity());
      assertEquals(0, strBuilder6.length());
      assertTrue(strBuilder6.isEmpty());
      assertNull(strBuilder6.getNewLineText());
      assertNotNull(strBuilder6);
      assertFalse(strBuilder6.equals((Object)strBuilder4));
      assertFalse(strBuilder6.equals((Object)strBuilder1));
      assertFalse(strBuilder6.equals((Object)strBuilder2));
      assertFalse(strBuilder6.equals((Object)strBuilder0));
      assertFalse(strBuilder6.equals((Object)strBuilder5));
      assertFalse(strBuilder6.equals((Object)strBuilder3));
      
      StrBuilder strBuilder7 = strBuilder2.append((CharSequence) strBuilder1);
      assertEquals(32, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(12, strBuilder0.size());
      assertEquals(12, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder1.isNotEmpty());
      assertEquals(12, strBuilder1.size());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(12, strBuilder1.length());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertFalse(strBuilder2.isEmpty());
      assertTrue(strBuilder2.isNotEmpty());
      assertNull(strBuilder2.getNullText());
      assertEquals(12, strBuilder2.size());
      assertEquals(32, strBuilder2.capacity());
      assertEquals(12, strBuilder2.length());
      assertNull(strBuilder2.getNewLineText());
      assertTrue(strBuilder7.isNotEmpty());
      assertNull(strBuilder7.getNewLineText());
      assertFalse(strBuilder7.isEmpty());
      assertEquals(12, strBuilder7.length());
      assertEquals(32, strBuilder7.capacity());
      assertEquals(12, strBuilder7.size());
      assertNull(strBuilder7.getNullText());
      assertNotNull(strBuilder7);
      assertFalse(strBuilder0.equals((Object)strBuilder3));
      assertFalse(strBuilder0.equals((Object)strBuilder5));
      assertFalse(strBuilder0.equals((Object)strBuilder4));
      assertFalse(strBuilder0.equals((Object)strBuilder6));
      assertFalse(strBuilder1.equals((Object)strBuilder5));
      assertFalse(strBuilder1.equals((Object)strBuilder4));
      assertFalse(strBuilder1.equals((Object)strBuilder3));
      assertFalse(strBuilder1.equals((Object)strBuilder6));
      assertFalse(strBuilder2.equals((Object)strBuilder3));
      assertFalse(strBuilder2.equals((Object)strBuilder5));
      assertFalse(strBuilder2.equals((Object)strBuilder4));
      assertFalse(strBuilder2.equals((Object)strBuilder6));
      assertFalse(strBuilder7.equals((Object)strBuilder3));
      assertFalse(strBuilder7.equals((Object)strBuilder4));
      assertFalse(strBuilder7.equals((Object)strBuilder5));
      assertFalse(strBuilder7.equals((Object)strBuilder6));
      assertSame(strBuilder0, strBuilder7);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertNotSame(strBuilder0, strBuilder3);
      assertNotSame(strBuilder0, strBuilder5);
      assertNotSame(strBuilder0, strBuilder4);
      assertNotSame(strBuilder0, strBuilder6);
      assertSame(strBuilder1, strBuilder0);
      assertNotSame(strBuilder1, strBuilder5);
      assertSame(strBuilder1, strBuilder2);
      assertNotSame(strBuilder1, strBuilder4);
      assertNotSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder7);
      assertNotSame(strBuilder1, strBuilder6);
      assertSame(strBuilder2, strBuilder7);
      assertSame(strBuilder2, strBuilder1);
      assertNotSame(strBuilder2, strBuilder3);
      assertSame(strBuilder2, strBuilder0);
      assertNotSame(strBuilder2, strBuilder5);
      assertNotSame(strBuilder2, strBuilder4);
      assertNotSame(strBuilder2, strBuilder6);
      assertNotSame(strBuilder7, strBuilder3);
      assertNotSame(strBuilder7, strBuilder4);
      assertSame(strBuilder7, strBuilder0);
      assertNotSame(strBuilder7, strBuilder5);
      assertNotSame(strBuilder7, strBuilder6);
      assertSame(strBuilder7, strBuilder1);
      assertSame(strBuilder7, strBuilder2);
      
      StrBuilder strBuilder8 = new StrBuilder();
      assertEquals(32, strBuilder8.capacity());
      assertNull(strBuilder8.getNullText());
      assertNull(strBuilder8.getNewLineText());
      assertFalse(strBuilder8.isNotEmpty());
      assertTrue(strBuilder8.isEmpty());
      assertEquals(0, strBuilder8.size());
      assertEquals(0, strBuilder8.length());
      assertNotNull(strBuilder8);
      assertFalse(strBuilder8.equals((Object)strBuilder3));
      assertFalse(strBuilder8.equals((Object)strBuilder7));
      assertFalse(strBuilder8.equals((Object)strBuilder1));
      assertFalse(strBuilder8.equals((Object)strBuilder2));
      assertFalse(strBuilder8.equals((Object)strBuilder0));
      assertFalse(strBuilder8.equals((Object)strBuilder5));
      assertFalse(strBuilder8.equals((Object)strBuilder4));
      assertTrue(strBuilder8.equals((Object)strBuilder6));
      
      boolean boolean0 = strBuilder8.isNotEmpty();
      assertEquals(32, strBuilder8.capacity());
      assertNull(strBuilder8.getNullText());
      assertNull(strBuilder8.getNewLineText());
      assertFalse(strBuilder8.isNotEmpty());
      assertTrue(strBuilder8.isEmpty());
      assertEquals(0, strBuilder8.size());
      assertEquals(0, strBuilder8.length());
      assertFalse(boolean0);
      assertFalse(strBuilder8.equals((Object)strBuilder3));
      assertFalse(strBuilder8.equals((Object)strBuilder7));
      assertFalse(strBuilder8.equals((Object)strBuilder1));
      assertFalse(strBuilder8.equals((Object)strBuilder2));
      assertFalse(strBuilder8.equals((Object)strBuilder0));
      assertFalse(strBuilder8.equals((Object)strBuilder5));
      assertFalse(strBuilder8.equals((Object)strBuilder4));
      assertTrue(strBuilder8.equals((Object)strBuilder6));
      assertNotSame(strBuilder8, strBuilder3);
      assertNotSame(strBuilder8, strBuilder7);
      assertNotSame(strBuilder8, strBuilder1);
      assertNotSame(strBuilder8, strBuilder2);
      assertNotSame(strBuilder8, strBuilder0);
      assertNotSame(strBuilder8, strBuilder6);
      assertNotSame(strBuilder8, strBuilder5);
      assertNotSame(strBuilder8, strBuilder4);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertFalse(strBuilder0.isNotEmpty());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.append((Object) null);
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder1.size());
      assertEquals(0, strBuilder1.length());
      assertFalse(strBuilder1.isNotEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNullText());
      assertTrue(strBuilder1.isEmpty());
      assertNotNull(strBuilder1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      
      StrBuilder strBuilder2 = strBuilder0.append("remov()is unsupported");
      assertEquals(21, strBuilder0.length());
      assertEquals(21, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(32, strBuilder2.capacity());
      assertTrue(strBuilder2.isNotEmpty());
      assertFalse(strBuilder2.isEmpty());
      assertNull(strBuilder2.getNullText());
      assertEquals(21, strBuilder2.size());
      assertEquals(21, strBuilder2.length());
      assertNotNull(strBuilder2);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder1.new StrBuilderReader();
      assertEquals(21, strBuilder0.length());
      assertEquals(21, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(21, strBuilder1.length());
      assertEquals(21, strBuilder1.size());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertTrue(strBuilder1.isNotEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNullText());
      assertTrue(strBuilder_StrBuilderReader0.ready());
      assertTrue(strBuilder_StrBuilderReader0.markSupported());
      assertNotNull(strBuilder_StrBuilderReader0);
      
      char[] charArray0 = new char[18];
      charArray0[0] = 'D';
      charArray0[1] = 'v';
      charArray0[2] = '8';
      int int0 = strBuilder_StrBuilderReader0.read(charArray0);
      assertEquals(21, strBuilder0.length());
      assertEquals(21, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(21, strBuilder1.length());
      assertEquals(21, strBuilder1.size());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertTrue(strBuilder1.isNotEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNullText());
      assertTrue(strBuilder_StrBuilderReader0.ready());
      assertTrue(strBuilder_StrBuilderReader0.markSupported());
      assertEquals(18, int0);
      assertEquals(18, charArray0.length);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      
      int int1 = strBuilder_StrBuilderReader0.read(charArray0);
      assertEquals(21, strBuilder0.length());
      assertEquals(21, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(21, strBuilder1.length());
      assertEquals(21, strBuilder1.size());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertTrue(strBuilder1.isNotEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNullText());
      assertFalse(strBuilder_StrBuilderReader0.ready());
      assertTrue(strBuilder_StrBuilderReader0.markSupported());
      assertEquals(3, int1);
      assertFalse(int1 == int0);
      assertEquals(18, charArray0.length);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      
      StringWriter stringWriter0 = new StringWriter();
      assertEquals("", stringWriter0.toString());
      assertNotNull(stringWriter0);
      
      StrBuilder strBuilder3 = new StrBuilder();
      assertTrue(strBuilder3.isEmpty());
      assertEquals(32, strBuilder3.capacity());
      assertNull(strBuilder3.getNullText());
      assertNull(strBuilder3.getNewLineText());
      assertFalse(strBuilder3.isNotEmpty());
      assertEquals(0, strBuilder3.length());
      assertEquals(0, strBuilder3.size());
      assertNotNull(strBuilder3);
      assertFalse(strBuilder3.equals((Object)strBuilder2));
      assertFalse(strBuilder3.equals((Object)strBuilder1));
      assertFalse(strBuilder3.equals((Object)strBuilder0));
      
      StrBuilder strBuilder4 = strBuilder2.deleteAll('d');
      assertEquals(20, strBuilder0.length());
      assertEquals(20, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(32, strBuilder2.capacity());
      assertTrue(strBuilder2.isNotEmpty());
      assertFalse(strBuilder2.isEmpty());
      assertNull(strBuilder2.getNullText());
      assertEquals(20, strBuilder2.length());
      assertEquals(20, strBuilder2.size());
      assertNull(strBuilder4.getNewLineText());
      assertFalse(strBuilder4.isEmpty());
      assertNull(strBuilder4.getNullText());
      assertEquals(32, strBuilder4.capacity());
      assertTrue(strBuilder4.isNotEmpty());
      assertEquals(20, strBuilder4.size());
      assertEquals(20, strBuilder4.length());
      assertNotNull(strBuilder4);
      assertFalse(strBuilder0.equals((Object)strBuilder3));
      assertFalse(strBuilder2.equals((Object)strBuilder3));
      assertFalse(strBuilder4.equals((Object)strBuilder3));
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder4);
      assertNotSame(strBuilder0, strBuilder3);
      assertSame(strBuilder2, strBuilder4);
      assertSame(strBuilder2, strBuilder0);
      assertNotSame(strBuilder2, strBuilder3);
      assertSame(strBuilder2, strBuilder1);
      assertNotSame(strBuilder4, strBuilder3);
      assertSame(strBuilder4, strBuilder0);
      assertSame(strBuilder4, strBuilder2);
      assertSame(strBuilder4, strBuilder1);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isNotEmpty());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.append((Object) null);
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isNotEmpty());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder1.length());
      assertEquals(0, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertFalse(strBuilder1.isNotEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertTrue(strBuilder1.isEmpty());
      assertNotNull(strBuilder1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      
      StrBuilder strBuilder2 = strBuilder0.append("remov()is unsupported");
      assertNull(strBuilder0.getNullText());
      assertEquals(21, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(21, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(21, strBuilder2.length());
      assertEquals(21, strBuilder2.size());
      assertFalse(strBuilder2.isEmpty());
      assertNull(strBuilder2.getNewLineText());
      assertTrue(strBuilder2.isNotEmpty());
      assertEquals(32, strBuilder2.capacity());
      assertNull(strBuilder2.getNullText());
      assertNotNull(strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder1.new StrBuilderReader();
      assertNull(strBuilder0.getNullText());
      assertEquals(21, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(21, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isNotEmpty());
      assertTrue(strBuilder1.isNotEmpty());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(21, strBuilder1.length());
      assertEquals(21, strBuilder1.size());
      assertEquals(32, strBuilder1.capacity());
      assertTrue(strBuilder_StrBuilderReader0.markSupported());
      assertTrue(strBuilder_StrBuilderReader0.ready());
      assertNotNull(strBuilder_StrBuilderReader0);
      
      char[] charArray0 = new char[18];
      charArray0[0] = 'D';
      charArray0[1] = 'v';
      charArray0[2] = '8';
      int int0 = strBuilder_StrBuilderReader0.read(charArray0);
      assertNull(strBuilder0.getNullText());
      assertEquals(21, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(21, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isNotEmpty());
      assertTrue(strBuilder1.isNotEmpty());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(21, strBuilder1.length());
      assertEquals(21, strBuilder1.size());
      assertEquals(32, strBuilder1.capacity());
      assertTrue(strBuilder_StrBuilderReader0.markSupported());
      assertTrue(strBuilder_StrBuilderReader0.ready());
      assertEquals(18, int0);
      assertEquals(18, charArray0.length);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder2);
      
      int int1 = strBuilder_StrBuilderReader0.read(charArray0);
      assertNull(strBuilder0.getNullText());
      assertEquals(21, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(21, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isNotEmpty());
      assertTrue(strBuilder1.isNotEmpty());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(21, strBuilder1.length());
      assertEquals(21, strBuilder1.size());
      assertEquals(32, strBuilder1.capacity());
      assertFalse(strBuilder_StrBuilderReader0.ready());
      assertTrue(strBuilder_StrBuilderReader0.markSupported());
      assertEquals(3, int1);
      assertFalse(int1 == int0);
      assertEquals(18, charArray0.length);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder2);
      
      StringWriter stringWriter0 = new StringWriter();
      assertEquals("", stringWriter0.toString());
      assertNotNull(stringWriter0);
      
      StrBuilder strBuilder3 = strBuilder2.deleteAll('d');
      assertNull(strBuilder0.getNullText());
      assertEquals(20, strBuilder0.length());
      assertEquals(20, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(20, strBuilder2.size());
      assertEquals(20, strBuilder2.length());
      assertFalse(strBuilder2.isEmpty());
      assertNull(strBuilder2.getNewLineText());
      assertTrue(strBuilder2.isNotEmpty());
      assertEquals(32, strBuilder2.capacity());
      assertNull(strBuilder2.getNullText());
      assertEquals(20, strBuilder3.length());
      assertEquals(20, strBuilder3.size());
      assertTrue(strBuilder3.isNotEmpty());
      assertNull(strBuilder3.getNullText());
      assertNull(strBuilder3.getNewLineText());
      assertEquals(32, strBuilder3.capacity());
      assertFalse(strBuilder3.isEmpty());
      assertNotNull(strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder2, strBuilder3);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder2);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertTrue(strBuilder0.isEmpty());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.trim();
      assertTrue(strBuilder0.isEmpty());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder1.size());
      assertFalse(strBuilder1.isNotEmpty());
      assertTrue(strBuilder1.isEmpty());
      assertEquals(0, strBuilder1.length());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertNotNull(strBuilder1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      
      char[] charArray0 = strBuilder0.toCharArray();
      assertTrue(strBuilder0.isEmpty());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertNotNull(charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      assertSame(strBuilder0, strBuilder1);
      
      String string0 = "i|SB3]o)nLj";
      int int0 = strBuilder0.lastIndexOf("i|SB3]o)nLj");
      assertTrue(strBuilder0.isEmpty());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals((-1), int0);
      assertSame(strBuilder0, strBuilder1);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-19);
      byteArray0[1] = (byte) (-124);
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte)20;
      byteArray0[4] = (byte)61;
      byteArray0[5] = (byte)39;
      byteArray0[6] = (byte)53;
      byteArray0[7] = (byte)97;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte) (-124), (byte)20);
      assertEquals(20, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte) (-19), (byte) (-124), (byte) (-1), (byte)20, (byte)61, (byte)39, (byte)53, (byte)97}, byteArray0);
      assertEquals(8, byteArray0.length);
      
      Charset charset0 = Charset.defaultCharset();
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.toString());
      assertEquals("UTF-8", charset0.name());
      assertNotNull(charset0);
      
      InputStreamReader inputStreamReader0 = new InputStreamReader(byteArrayInputStream0, charset0);
      assertEquals(20, byteArrayInputStream0.available());
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.toString());
      assertEquals("UTF-8", charset0.name());
      assertNotNull(inputStreamReader0);
      assertArrayEquals(new byte[] {(byte) (-19), (byte) (-124), (byte) (-1), (byte)20, (byte)61, (byte)39, (byte)53, (byte)97}, byteArray0);
      assertEquals(8, byteArray0.length);
      
      // Undeclared exception!
      try { 
        strBuilder0.readFrom(inputStreamReader0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      assertFalse(boolean0);
      
      StrBuilder strBuilder0 = new StrBuilder("");
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertNotNull(strBuilder0);
      
      char[] charArray0 = new char[5];
      charArray0[0] = 'C';
      charArray0[1] = 'O';
      charArray0[2] = 'm';
      charArray0[3] = 'W';
      charArray0[4] = 'E';
      StrBuilder strBuilder1 = strBuilder0.appendln(charArray0);
      assertEquals(6, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(6, strBuilder0.length());
      assertEquals(6, strBuilder1.length());
      assertFalse(strBuilder1.isEmpty());
      assertTrue(strBuilder1.isNotEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNullText());
      assertEquals(6, strBuilder1.size());
      assertNull(strBuilder1.getNewLineText());
      assertNotNull(strBuilder1);
      assertArrayEquals(new char[] {'C', 'O', 'm', 'W', 'E'}, charArray0);
      assertEquals(5, charArray0.length);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      
      int int0 = strBuilder1.indexOf('E');
      assertEquals(6, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(6, strBuilder0.length());
      assertEquals(6, strBuilder1.length());
      assertFalse(strBuilder1.isEmpty());
      assertTrue(strBuilder1.isNotEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNullText());
      assertEquals(6, strBuilder1.size());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(4, int0);
      assertArrayEquals(new char[] {'C', 'O', 'm', 'W', 'E'}, charArray0);
      assertEquals(5, charArray0.length);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      
      // Undeclared exception!
      try { 
        strBuilder1.append("", 3304, 3304);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // startIndex must be valid
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(0);
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.size());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.appendPadding(0, 'F');
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNullText());
      assertTrue(strBuilder1.isEmpty());
      assertEquals(0, strBuilder1.size());
      assertEquals(0, strBuilder1.length());
      assertFalse(strBuilder1.isNotEmpty());
      assertNotNull(strBuilder1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder1.new StrBuilderReader();
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNullText());
      assertTrue(strBuilder1.isEmpty());
      assertEquals(0, strBuilder1.size());
      assertEquals(0, strBuilder1.length());
      assertFalse(strBuilder1.isNotEmpty());
      assertFalse(strBuilder_StrBuilderReader0.ready());
      assertTrue(strBuilder_StrBuilderReader0.markSupported());
      assertNotNull(strBuilder_StrBuilderReader0);
      
      int int0 = strBuilder0.readFrom(strBuilder_StrBuilderReader0);
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNullText());
      assertTrue(strBuilder1.isEmpty());
      assertEquals(0, strBuilder1.size());
      assertEquals(0, strBuilder1.length());
      assertFalse(strBuilder1.isNotEmpty());
      assertFalse(strBuilder_StrBuilderReader0.ready());
      assertTrue(strBuilder_StrBuilderReader0.markSupported());
      assertEquals(0, int0);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      
      StrBuilder strBuilder2 = strBuilder0.insert(0, "");
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(32, strBuilder2.capacity());
      assertTrue(strBuilder2.isEmpty());
      assertNull(strBuilder2.getNullText());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(0, strBuilder2.length());
      assertFalse(strBuilder2.isNotEmpty());
      assertEquals(0, strBuilder2.size());
      assertNotNull(strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      
      StringBuffer stringBuffer0 = new StringBuffer();
      assertEquals("", stringBuffer0.toString());
      assertEquals(0, stringBuffer0.length());
      assertNotNull(stringBuffer0);
      
      StrBuilder strBuilder3 = strBuilder0.appendFixedWidthPadRight(0, 0, 'S');
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.size());
      assertFalse(strBuilder3.isNotEmpty());
      assertEquals(0, strBuilder3.length());
      assertEquals(0, strBuilder3.size());
      assertEquals(32, strBuilder3.capacity());
      assertTrue(strBuilder3.isEmpty());
      assertNull(strBuilder3.getNullText());
      assertNull(strBuilder3.getNewLineText());
      assertNotNull(strBuilder3);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder3, strBuilder2);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder0);
      
      StrBuilder strBuilder4 = new StrBuilder(115);
      assertEquals(0, strBuilder4.size());
      assertFalse(strBuilder4.isNotEmpty());
      assertNull(strBuilder4.getNullText());
      assertNull(strBuilder4.getNewLineText());
      assertEquals(115, strBuilder4.capacity());
      assertTrue(strBuilder4.isEmpty());
      assertEquals(0, strBuilder4.length());
      assertNotNull(strBuilder4);
      assertTrue(strBuilder4.equals((Object)strBuilder2));
      assertTrue(strBuilder4.equals((Object)strBuilder1));
      assertTrue(strBuilder4.equals((Object)strBuilder0));
      assertTrue(strBuilder4.equals((Object)strBuilder3));
      
      StrBuilder strBuilder5 = new StrBuilder(115);
      assertNull(strBuilder5.getNullText());
      assertEquals(0, strBuilder5.size());
      assertEquals(115, strBuilder5.capacity());
      assertEquals(0, strBuilder5.length());
      assertFalse(strBuilder5.isNotEmpty());
      assertTrue(strBuilder5.isEmpty());
      assertNull(strBuilder5.getNewLineText());
      assertNotNull(strBuilder5);
      assertTrue(strBuilder5.equals((Object)strBuilder4));
      assertTrue(strBuilder5.equals((Object)strBuilder2));
      assertTrue(strBuilder5.equals((Object)strBuilder0));
      assertTrue(strBuilder5.equals((Object)strBuilder1));
      assertTrue(strBuilder5.equals((Object)strBuilder3));
      
      StrBuilder strBuilder6 = strBuilder5.appendFixedWidthPadLeft((Object) stringBuffer0, 2820, 'S');
      assertEquals("", stringBuffer0.toString());
      assertEquals(0, stringBuffer0.length());
      assertNull(strBuilder5.getNullText());
      assertEquals(5640, strBuilder5.capacity());
      assertFalse(strBuilder5.isEmpty());
      assertEquals(2820, strBuilder5.length());
      assertEquals(2820, strBuilder5.size());
      assertNull(strBuilder5.getNewLineText());
      assertTrue(strBuilder5.isNotEmpty());
      assertNull(strBuilder6.getNullText());
      assertNull(strBuilder6.getNewLineText());
      assertEquals(5640, strBuilder6.capacity());
      assertFalse(strBuilder6.isEmpty());
      assertEquals(2820, strBuilder6.length());
      assertEquals(2820, strBuilder6.size());
      assertTrue(strBuilder6.isNotEmpty());
      assertNotNull(strBuilder6);
      assertFalse(strBuilder5.equals((Object)strBuilder0));
      assertFalse(strBuilder5.equals((Object)strBuilder1));
      assertFalse(strBuilder5.equals((Object)strBuilder3));
      assertFalse(strBuilder5.equals((Object)strBuilder2));
      assertFalse(strBuilder5.equals((Object)strBuilder4));
      assertFalse(strBuilder6.equals((Object)strBuilder0));
      assertFalse(strBuilder6.equals((Object)strBuilder1));
      assertFalse(strBuilder6.equals((Object)strBuilder3));
      assertFalse(strBuilder6.equals((Object)strBuilder2));
      assertFalse(strBuilder6.equals((Object)strBuilder4));
      assertSame(strBuilder5, strBuilder6);
      assertNotSame(strBuilder5, strBuilder0);
      assertNotSame(strBuilder5, strBuilder1);
      assertNotSame(strBuilder5, strBuilder3);
      assertNotSame(strBuilder5, strBuilder2);
      assertNotSame(strBuilder5, strBuilder4);
      assertNotSame(strBuilder6, strBuilder0);
      assertSame(strBuilder6, strBuilder5);
      assertNotSame(strBuilder6, strBuilder1);
      assertNotSame(strBuilder6, strBuilder3);
      assertNotSame(strBuilder6, strBuilder2);
      assertNotSame(strBuilder6, strBuilder4);
      
      StrBuilder strBuilder7 = strBuilder5.setCharAt(9, 'F');
      assertNull(strBuilder5.getNullText());
      assertEquals(5640, strBuilder5.capacity());
      assertFalse(strBuilder5.isEmpty());
      assertEquals(2820, strBuilder5.length());
      assertEquals(2820, strBuilder5.size());
      assertNull(strBuilder5.getNewLineText());
      assertTrue(strBuilder5.isNotEmpty());
      assertNull(strBuilder7.getNullText());
      assertEquals(5640, strBuilder7.capacity());
      assertFalse(strBuilder7.isEmpty());
      assertEquals(2820, strBuilder7.length());
      assertEquals(2820, strBuilder7.size());
      assertTrue(strBuilder7.isNotEmpty());
      assertNull(strBuilder7.getNewLineText());
      assertNotNull(strBuilder7);
      assertFalse(strBuilder5.equals((Object)strBuilder0));
      assertFalse(strBuilder5.equals((Object)strBuilder1));
      assertFalse(strBuilder5.equals((Object)strBuilder3));
      assertFalse(strBuilder5.equals((Object)strBuilder2));
      assertFalse(strBuilder5.equals((Object)strBuilder4));
      assertFalse(strBuilder7.equals((Object)strBuilder3));
      assertFalse(strBuilder7.equals((Object)strBuilder0));
      assertFalse(strBuilder7.equals((Object)strBuilder1));
      assertFalse(strBuilder7.equals((Object)strBuilder2));
      assertFalse(strBuilder7.equals((Object)strBuilder4));
      assertSame(strBuilder5, strBuilder6);
      assertNotSame(strBuilder5, strBuilder0);
      assertNotSame(strBuilder5, strBuilder1);
      assertNotSame(strBuilder5, strBuilder3);
      assertSame(strBuilder5, strBuilder7);
      assertNotSame(strBuilder5, strBuilder2);
      assertNotSame(strBuilder5, strBuilder4);
      assertSame(strBuilder7, strBuilder5);
      assertNotSame(strBuilder7, strBuilder3);
      assertSame(strBuilder7, strBuilder6);
      assertNotSame(strBuilder7, strBuilder0);
      assertNotSame(strBuilder7, strBuilder1);
      assertNotSame(strBuilder7, strBuilder2);
      assertNotSame(strBuilder7, strBuilder4);
      
      int int1 = strBuilder4.lastIndexOf(")wGLJJYUkWz]T", 115);
      assertEquals(0, strBuilder4.size());
      assertFalse(strBuilder4.isNotEmpty());
      assertNull(strBuilder4.getNullText());
      assertNull(strBuilder4.getNewLineText());
      assertEquals(115, strBuilder4.capacity());
      assertTrue(strBuilder4.isEmpty());
      assertEquals(0, strBuilder4.length());
      assertEquals((-1), int1);
      assertFalse(strBuilder4.equals((Object)strBuilder7));
      assertTrue(strBuilder4.equals((Object)strBuilder2));
      assertTrue(strBuilder4.equals((Object)strBuilder1));
      assertTrue(strBuilder4.equals((Object)strBuilder0));
      assertTrue(strBuilder4.equals((Object)strBuilder3));
      assertFalse(strBuilder4.equals((Object)strBuilder5));
      assertFalse(strBuilder4.equals((Object)strBuilder6));
      assertFalse(int1 == int0);
      assertNotSame(strBuilder4, strBuilder3);
      assertNotSame(strBuilder4, strBuilder7);
      assertNotSame(strBuilder4, strBuilder1);
      assertNotSame(strBuilder4, strBuilder2);
      assertNotSame(strBuilder4, strBuilder5);
      assertNotSame(strBuilder4, strBuilder0);
      assertNotSame(strBuilder4, strBuilder6);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = '^';
      charArray0[3] = 'X';
      StrBuilder strBuilder0 = new StrBuilder("remove() is unsupported");
      assertEquals(23, strBuilder0.length());
      assertEquals(55, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(23, strBuilder0.size());
      assertTrue(strBuilder0.isNotEmpty());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.appendNull();
      assertEquals(23, strBuilder0.length());
      assertEquals(55, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(23, strBuilder0.size());
      assertTrue(strBuilder0.isNotEmpty());
      assertTrue(strBuilder1.isNotEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(55, strBuilder1.capacity());
      assertNull(strBuilder1.getNullText());
      assertEquals(23, strBuilder1.size());
      assertEquals(23, strBuilder1.length());
      assertNotNull(strBuilder1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      
      StrBuilder strBuilder2 = strBuilder0.appendFixedWidthPadRight(32, 32, '^');
      assertEquals(55, strBuilder0.length());
      assertEquals(55, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(55, strBuilder0.size());
      assertTrue(strBuilder0.isNotEmpty());
      assertTrue(strBuilder2.isNotEmpty());
      assertFalse(strBuilder2.isEmpty());
      assertNull(strBuilder2.getNullText());
      assertEquals(55, strBuilder2.size());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(55, strBuilder2.length());
      assertEquals(55, strBuilder2.capacity());
      assertNotNull(strBuilder2);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      
      boolean boolean0 = strBuilder2.equals((Object) strBuilder0);
      assertEquals(55, strBuilder0.length());
      assertEquals(55, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(55, strBuilder0.size());
      assertTrue(strBuilder0.isNotEmpty());
      assertTrue(strBuilder2.isNotEmpty());
      assertFalse(strBuilder2.isEmpty());
      assertNull(strBuilder2.getNullText());
      assertEquals(55, strBuilder2.size());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(55, strBuilder2.length());
      assertEquals(55, strBuilder2.capacity());
      assertTrue(boolean0);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isNotEmpty());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = new StrBuilder("4");
      assertEquals(1, strBuilder1.length());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(1, strBuilder1.size());
      assertEquals(33, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertTrue(strBuilder1.isNotEmpty());
      assertNotNull(strBuilder1);
      assertFalse(strBuilder1.equals((Object)strBuilder0));
      
      StrBuilder strBuilder2 = strBuilder0.appendNull();
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isNotEmpty());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertFalse(strBuilder2.isNotEmpty());
      assertEquals(0, strBuilder2.size());
      assertTrue(strBuilder2.isEmpty());
      assertEquals(0, strBuilder2.length());
      assertEquals(32, strBuilder2.capacity());
      assertNull(strBuilder2.getNullText());
      assertNull(strBuilder2.getNewLineText());
      assertNotNull(strBuilder2);
      assertFalse(strBuilder0.equals((Object)strBuilder1));
      assertFalse(strBuilder2.equals((Object)strBuilder1));
      assertSame(strBuilder0, strBuilder2);
      assertNotSame(strBuilder0, strBuilder1);
      assertNotSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      
      StrBuilder strBuilder3 = new StrBuilder("4");
      assertEquals(1, strBuilder3.length());
      assertFalse(strBuilder3.isEmpty());
      assertEquals(1, strBuilder3.size());
      assertEquals(33, strBuilder3.capacity());
      assertTrue(strBuilder3.isNotEmpty());
      assertNull(strBuilder3.getNullText());
      assertNull(strBuilder3.getNewLineText());
      assertNotNull(strBuilder3);
      assertFalse(strBuilder3.equals((Object)strBuilder0));
      assertFalse(strBuilder3.equals((Object)strBuilder2));
      assertTrue(strBuilder3.equals((Object)strBuilder1));
      
      boolean boolean0 = strBuilder0.equals((Object) strBuilder2);
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isNotEmpty());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertFalse(strBuilder2.isNotEmpty());
      assertEquals(0, strBuilder2.size());
      assertTrue(strBuilder2.isEmpty());
      assertEquals(0, strBuilder2.length());
      assertEquals(32, strBuilder2.capacity());
      assertNull(strBuilder2.getNullText());
      assertNull(strBuilder2.getNewLineText());
      assertTrue(boolean0);
      assertFalse(strBuilder0.equals((Object)strBuilder3));
      assertFalse(strBuilder0.equals((Object)strBuilder1));
      assertFalse(strBuilder2.equals((Object)strBuilder1));
      assertFalse(strBuilder2.equals((Object)strBuilder3));
      assertNotSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder2);
      assertNotSame(strBuilder0, strBuilder1);
      assertNotSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertNotSame(strBuilder2, strBuilder3);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isEmpty());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertNotNull(strBuilder0);
      
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      assertEquals(Locale.FilteringMode.REJECT_EXTENDED_RANGES, locale_FilteringMode0);
      
      StrBuilder strBuilder1 = new StrBuilder((String) null);
      assertTrue(strBuilder1.isEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNullText());
      assertEquals(0, strBuilder1.length());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(0, strBuilder1.size());
      assertFalse(strBuilder1.isNotEmpty());
      assertNotNull(strBuilder1);
      assertTrue(strBuilder1.equals((Object)strBuilder0));
      
      StrBuilder strBuilder2 = new StrBuilder(64);
      assertFalse(strBuilder2.isNotEmpty());
      assertTrue(strBuilder2.isEmpty());
      assertEquals(0, strBuilder2.length());
      assertEquals(0, strBuilder2.size());
      assertEquals(64, strBuilder2.capacity());
      assertNull(strBuilder2.getNullText());
      assertNull(strBuilder2.getNewLineText());
      assertNotNull(strBuilder2);
      assertTrue(strBuilder2.equals((Object)strBuilder0));
      assertTrue(strBuilder2.equals((Object)strBuilder1));
      
      StrBuilder strBuilder3 = strBuilder2.appendln((StrBuilder) null, (-2136), (-2136));
      assertEquals(1, strBuilder2.size());
      assertEquals(1, strBuilder2.length());
      assertFalse(strBuilder2.isEmpty());
      assertTrue(strBuilder2.isNotEmpty());
      assertEquals(64, strBuilder2.capacity());
      assertNull(strBuilder2.getNullText());
      assertNull(strBuilder2.getNewLineText());
      assertTrue(strBuilder3.isNotEmpty());
      assertNull(strBuilder3.getNullText());
      assertNull(strBuilder3.getNewLineText());
      assertEquals(1, strBuilder3.length());
      assertFalse(strBuilder3.isEmpty());
      assertEquals(1, strBuilder3.size());
      assertEquals(64, strBuilder3.capacity());
      assertNotNull(strBuilder3);
      assertFalse(strBuilder2.equals((Object)strBuilder0));
      assertFalse(strBuilder2.equals((Object)strBuilder1));
      assertFalse(strBuilder3.equals((Object)strBuilder0));
      assertFalse(strBuilder3.equals((Object)strBuilder1));
      assertSame(strBuilder2, strBuilder3);
      assertNotSame(strBuilder2, strBuilder0);
      assertNotSame(strBuilder2, strBuilder1);
      assertNotSame(strBuilder3, strBuilder0);
      assertNotSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder2);
      
      StringReader stringReader0 = new StringReader("");
      assertNotNull(stringReader0);
      
      StrBuilder strBuilder4 = strBuilder0.appendln((Object) stringReader0);
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.length());
      assertEquals(32, strBuilder0.size());
      assertEquals(32, strBuilder4.capacity());
      assertTrue(strBuilder4.isNotEmpty());
      assertNull(strBuilder4.getNullText());
      assertNull(strBuilder4.getNewLineText());
      assertFalse(strBuilder4.isEmpty());
      assertEquals(32, strBuilder4.length());
      assertEquals(32, strBuilder4.size());
      assertNotNull(strBuilder4);
      assertFalse(strBuilder0.equals((Object)strBuilder1));
      assertFalse(strBuilder0.equals((Object)strBuilder2));
      assertFalse(strBuilder0.equals((Object)strBuilder3));
      assertFalse(strBuilder4.equals((Object)strBuilder1));
      assertFalse(strBuilder4.equals((Object)strBuilder3));
      assertFalse(strBuilder4.equals((Object)strBuilder2));
      assertNotSame(strBuilder0, strBuilder1);
      assertNotSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder4);
      assertNotSame(strBuilder0, strBuilder3);
      assertNotSame(strBuilder4, strBuilder1);
      assertNotSame(strBuilder4, strBuilder3);
      assertSame(strBuilder4, strBuilder0);
      assertNotSame(strBuilder4, strBuilder2);
      
      // Undeclared exception!
      try { 
        strBuilder1.validateIndex(9);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 9
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      String string0 = "(Q:|";
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "(Q:|");
      assertFalse(boolean0);
      
      int int0 = (-1950);
      StrBuilder strBuilder0 = new StrBuilder((-1950));
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertFalse(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertNotNull(strBuilder0);
      
      StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer0 = strBuilder0.new StrBuilderTokenizer();
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertFalse(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertTrue(strBuilder_StrBuilderTokenizer0.isIgnoreEmptyTokens());
      assertFalse(strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull());
      assertEquals((-1), strBuilder_StrBuilderTokenizer0.previousIndex());
      assertEquals(0, strBuilder_StrBuilderTokenizer0.nextIndex());
      assertNotNull(strBuilder_StrBuilderTokenizer0);
      
      String string1 = strBuilder_StrBuilderTokenizer0.nextToken();
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertFalse(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertTrue(strBuilder_StrBuilderTokenizer0.isIgnoreEmptyTokens());
      assertFalse(strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull());
      assertEquals((-1), strBuilder_StrBuilderTokenizer0.previousIndex());
      assertEquals(0, strBuilder_StrBuilderTokenizer0.nextIndex());
      assertNull(string1);
      
      StrBuilder strBuilder1 = strBuilder0.append((CharSequence) null);
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertFalse(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertTrue(strBuilder1.isEmpty());
      assertFalse(strBuilder1.isNotEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(0, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertEquals(0, strBuilder1.size());
      assertNull(strBuilder1.getNewLineText());
      assertNotNull(strBuilder1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      // Undeclared exception!
      try { 
        strBuilder1.substring((-1950));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -1950
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(32, strBuilder0.capacity());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertNotNull(strBuilder0);
      
      char[] charArray0 = strBuilder0.toCharArray(0, 60);
      assertEquals(32, strBuilder0.capacity());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertNotNull(charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      
      Writer writer0 = strBuilder0.asWriter();
      assertEquals(32, strBuilder0.capacity());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertNotNull(writer0);
      
      char[] charArray1 = new char[0];
      assertFalse(charArray1.equals((Object)charArray0));
      
      StrBuilder strBuilder1 = strBuilder0.append(charArray1, 0, 0);
      assertEquals(32, strBuilder0.capacity());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNullText());
      assertTrue(strBuilder1.isEmpty());
      assertEquals(0, strBuilder1.length());
      assertFalse(strBuilder1.isNotEmpty());
      assertEquals(0, strBuilder1.size());
      assertNotNull(strBuilder1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {}, charArray1);
      assertEquals(0, charArray1.length);
      assertSame(strBuilder0, strBuilder1);
      assertNotSame(charArray1, charArray0);
      assertSame(strBuilder1, strBuilder0);
      
      StringBuilder stringBuilder0 = new StringBuilder();
      assertEquals("", stringBuilder0.toString());
      assertNotNull(stringBuilder0);
      
      StringBuilder stringBuilder1 = stringBuilder0.append('\"');
      assertEquals("\"", stringBuilder0.toString());
      assertEquals("\"", stringBuilder1.toString());
      assertNotNull(stringBuilder1);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder1, stringBuilder0);
      
      StringBuilder stringBuilder2 = stringBuilder1.append((CharSequence) stringBuilder0);
      assertEquals("\"\"", stringBuilder0.toString());
      assertEquals("\"\"", stringBuilder1.toString());
      assertEquals("\"\"", stringBuilder2.toString());
      assertNotNull(stringBuilder2);
      assertSame(stringBuilder0, stringBuilder2);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder1, stringBuilder2);
      assertSame(stringBuilder1, stringBuilder0);
      assertSame(stringBuilder2, stringBuilder0);
      assertSame(stringBuilder2, stringBuilder1);
      
      StringBuilder stringBuilder3 = stringBuilder2.append("Locale must not be null");
      assertEquals("\"\"Locale must not be null", stringBuilder0.toString());
      assertEquals("\"\"Locale must not be null", stringBuilder1.toString());
      assertEquals("\"\"Locale must not be null", stringBuilder2.toString());
      assertEquals("\"\"Locale must not be null", stringBuilder3.toString());
      assertNotNull(stringBuilder3);
      assertSame(stringBuilder0, stringBuilder2);
      assertSame(stringBuilder0, stringBuilder3);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder1, stringBuilder2);
      assertSame(stringBuilder1, stringBuilder0);
      assertSame(stringBuilder1, stringBuilder3);
      assertSame(stringBuilder2, stringBuilder0);
      assertSame(stringBuilder2, stringBuilder1);
      assertSame(stringBuilder2, stringBuilder3);
      assertSame(stringBuilder3, stringBuilder1);
      assertSame(stringBuilder3, stringBuilder2);
      assertSame(stringBuilder3, stringBuilder0);
      
      StrBuilder strBuilder2 = strBuilder1.appendln(stringBuilder3, 0, 0);
      assertFalse(strBuilder0.isEmpty());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(1, strBuilder0.size());
      assertEquals(1, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder1.isNotEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNullText());
      assertEquals(1, strBuilder1.length());
      assertEquals(1, strBuilder1.size());
      assertEquals("\"\"Locale must not be null", stringBuilder0.toString());
      assertEquals("\"\"Locale must not be null", stringBuilder1.toString());
      assertEquals("\"\"Locale must not be null", stringBuilder2.toString());
      assertEquals("\"\"Locale must not be null", stringBuilder3.toString());
      assertNull(strBuilder2.getNullText());
      assertTrue(strBuilder2.isNotEmpty());
      assertEquals(32, strBuilder2.capacity());
      assertNull(strBuilder2.getNewLineText());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(1, strBuilder2.length());
      assertEquals(1, strBuilder2.size());
      assertNotNull(strBuilder2);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {}, charArray1);
      assertEquals(0, charArray1.length);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertNotSame(charArray1, charArray0);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertSame(stringBuilder0, stringBuilder2);
      assertSame(stringBuilder0, stringBuilder3);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder1, stringBuilder2);
      assertSame(stringBuilder1, stringBuilder0);
      assertSame(stringBuilder1, stringBuilder3);
      assertSame(stringBuilder2, stringBuilder0);
      assertSame(stringBuilder2, stringBuilder1);
      assertSame(stringBuilder2, stringBuilder3);
      assertSame(stringBuilder3, stringBuilder1);
      assertSame(stringBuilder3, stringBuilder2);
      assertSame(stringBuilder3, stringBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(59);
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(59, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.appendPadding(256, 'C');
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(256, strBuilder0.length());
      assertEquals(256, strBuilder0.size());
      assertEquals(512, strBuilder0.capacity());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(512, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(256, strBuilder1.size());
      assertTrue(strBuilder1.isNotEmpty());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(256, strBuilder1.length());
      assertNotNull(strBuilder1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      
      StrBuilder strBuilder2 = strBuilder1.append((float) 256);
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(261, strBuilder0.length());
      assertEquals(261, strBuilder0.size());
      assertEquals(512, strBuilder0.capacity());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(512, strBuilder1.capacity());
      assertEquals(261, strBuilder1.size());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(261, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertTrue(strBuilder1.isNotEmpty());
      assertFalse(strBuilder1.isEmpty());
      assertTrue(strBuilder2.isNotEmpty());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(261, strBuilder2.length());
      assertEquals(261, strBuilder2.size());
      assertNull(strBuilder2.getNullText());
      assertEquals(512, strBuilder2.capacity());
      assertFalse(strBuilder2.isEmpty());
      assertNotNull(strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder2.new StrBuilderReader();
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(261, strBuilder0.length());
      assertEquals(261, strBuilder0.size());
      assertEquals(512, strBuilder0.capacity());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(512, strBuilder1.capacity());
      assertEquals(261, strBuilder1.size());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(261, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertTrue(strBuilder1.isNotEmpty());
      assertFalse(strBuilder1.isEmpty());
      assertTrue(strBuilder2.isNotEmpty());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(261, strBuilder2.length());
      assertEquals(261, strBuilder2.size());
      assertNull(strBuilder2.getNullText());
      assertEquals(512, strBuilder2.capacity());
      assertFalse(strBuilder2.isEmpty());
      assertTrue(strBuilder_StrBuilderReader0.markSupported());
      assertTrue(strBuilder_StrBuilderReader0.ready());
      assertNotNull(strBuilder_StrBuilderReader0);
      
      StrBuilder strBuilder3 = new StrBuilder((-1950));
      assertEquals(0, strBuilder3.size());
      assertNull(strBuilder3.getNewLineText());
      assertNull(strBuilder3.getNullText());
      assertEquals(32, strBuilder3.capacity());
      assertTrue(strBuilder3.isEmpty());
      assertFalse(strBuilder3.isNotEmpty());
      assertEquals(0, strBuilder3.length());
      assertNotNull(strBuilder3);
      assertFalse(strBuilder3.equals((Object)strBuilder0));
      assertFalse(strBuilder3.equals((Object)strBuilder1));
      assertFalse(strBuilder3.equals((Object)strBuilder2));
      
      StrBuilder strBuilder4 = new StrBuilder("");
      assertFalse(strBuilder4.isNotEmpty());
      assertEquals(0, strBuilder4.size());
      assertNull(strBuilder4.getNullText());
      assertEquals(0, strBuilder4.length());
      assertTrue(strBuilder4.isEmpty());
      assertEquals(32, strBuilder4.capacity());
      assertNull(strBuilder4.getNewLineText());
      assertNotNull(strBuilder4);
      assertFalse(strBuilder4.equals((Object)strBuilder1));
      assertFalse(strBuilder4.equals((Object)strBuilder0));
      assertTrue(strBuilder4.equals((Object)strBuilder3));
      assertFalse(strBuilder4.equals((Object)strBuilder2));
      
      StrBuilder strBuilder5 = new StrBuilder("");
      assertTrue(strBuilder5.isEmpty());
      assertNull(strBuilder5.getNewLineText());
      assertEquals(32, strBuilder5.capacity());
      assertNull(strBuilder5.getNullText());
      assertEquals(0, strBuilder5.length());
      assertEquals(0, strBuilder5.size());
      assertFalse(strBuilder5.isNotEmpty());
      assertNotNull(strBuilder5);
      assertTrue(strBuilder5.equals((Object)strBuilder4));
      assertTrue(strBuilder5.equals((Object)strBuilder3));
      assertFalse(strBuilder5.equals((Object)strBuilder1));
      assertFalse(strBuilder5.equals((Object)strBuilder2));
      assertFalse(strBuilder5.equals((Object)strBuilder0));
      
      StrBuilder strBuilder6 = strBuilder4.deleteAll("org.apache.commons.lang3.text.StrBuilder$StrBuilderTokenizer");
      assertFalse(strBuilder4.isNotEmpty());
      assertEquals(0, strBuilder4.size());
      assertNull(strBuilder4.getNullText());
      assertEquals(0, strBuilder4.length());
      assertTrue(strBuilder4.isEmpty());
      assertEquals(32, strBuilder4.capacity());
      assertNull(strBuilder4.getNewLineText());
      assertFalse(strBuilder6.isNotEmpty());
      assertTrue(strBuilder6.isEmpty());
      assertEquals(32, strBuilder6.capacity());
      assertEquals(0, strBuilder6.size());
      assertEquals(0, strBuilder6.length());
      assertNull(strBuilder6.getNewLineText());
      assertNull(strBuilder6.getNullText());
      assertNotNull(strBuilder6);
      assertTrue(strBuilder4.equals((Object)strBuilder5));
      assertFalse(strBuilder4.equals((Object)strBuilder1));
      assertFalse(strBuilder4.equals((Object)strBuilder0));
      assertTrue(strBuilder4.equals((Object)strBuilder3));
      assertFalse(strBuilder4.equals((Object)strBuilder2));
      assertFalse(strBuilder6.equals((Object)strBuilder0));
      assertFalse(strBuilder6.equals((Object)strBuilder2));
      assertTrue(strBuilder6.equals((Object)strBuilder3));
      assertFalse(strBuilder6.equals((Object)strBuilder1));
      assertTrue(strBuilder6.equals((Object)strBuilder5));
      assertNotSame(strBuilder4, strBuilder3);
      assertNotSame(strBuilder4, strBuilder1);
      assertNotSame(strBuilder4, strBuilder5);
      assertSame(strBuilder4, strBuilder6);
      assertNotSame(strBuilder4, strBuilder0);
      assertNotSame(strBuilder4, strBuilder2);
      assertNotSame(strBuilder6, strBuilder5);
      assertNotSame(strBuilder6, strBuilder3);
      assertNotSame(strBuilder6, strBuilder0);
      assertNotSame(strBuilder6, strBuilder2);
      assertNotSame(strBuilder6, strBuilder1);
      assertSame(strBuilder6, strBuilder4);
      
      StrBuilder strBuilder7 = strBuilder2.replaceAll("", "");
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(261, strBuilder0.length());
      assertEquals(261, strBuilder0.size());
      assertEquals(512, strBuilder0.capacity());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(512, strBuilder1.capacity());
      assertEquals(261, strBuilder1.size());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(261, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertTrue(strBuilder1.isNotEmpty());
      assertFalse(strBuilder1.isEmpty());
      assertTrue(strBuilder2.isNotEmpty());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(261, strBuilder2.length());
      assertEquals(261, strBuilder2.size());
      assertNull(strBuilder2.getNullText());
      assertEquals(512, strBuilder2.capacity());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(261, strBuilder7.length());
      assertFalse(strBuilder7.isEmpty());
      assertEquals(261, strBuilder7.size());
      assertNull(strBuilder7.getNullText());
      assertNull(strBuilder7.getNewLineText());
      assertEquals(512, strBuilder7.capacity());
      assertTrue(strBuilder7.isNotEmpty());
      assertNotNull(strBuilder7);
      assertFalse(strBuilder0.equals((Object)strBuilder4));
      assertFalse(strBuilder0.equals((Object)strBuilder3));
      assertFalse(strBuilder0.equals((Object)strBuilder6));
      assertFalse(strBuilder0.equals((Object)strBuilder5));
      assertFalse(strBuilder1.equals((Object)strBuilder5));
      assertFalse(strBuilder1.equals((Object)strBuilder3));
      assertFalse(strBuilder1.equals((Object)strBuilder4));
      assertFalse(strBuilder1.equals((Object)strBuilder6));
      assertFalse(strBuilder2.equals((Object)strBuilder5));
      assertFalse(strBuilder2.equals((Object)strBuilder4));
      assertFalse(strBuilder2.equals((Object)strBuilder3));
      assertFalse(strBuilder2.equals((Object)strBuilder6));
      assertFalse(strBuilder7.equals((Object)strBuilder5));
      assertFalse(strBuilder7.equals((Object)strBuilder3));
      assertFalse(strBuilder7.equals((Object)strBuilder6));
      assertFalse(strBuilder7.equals((Object)strBuilder4));
      assertNotSame(strBuilder0, strBuilder4);
      assertNotSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertNotSame(strBuilder0, strBuilder6);
      assertSame(strBuilder0, strBuilder2);
      assertNotSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder7);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder7);
      assertNotSame(strBuilder1, strBuilder5);
      assertNotSame(strBuilder1, strBuilder4);
      assertNotSame(strBuilder1, strBuilder6);
      assertNotSame(strBuilder1, strBuilder3);
      assertSame(strBuilder2, strBuilder7);
      assertSame(strBuilder2, strBuilder1);
      assertNotSame(strBuilder2, strBuilder5);
      assertSame(strBuilder2, strBuilder0);
      assertNotSame(strBuilder2, strBuilder4);
      assertNotSame(strBuilder2, strBuilder6);
      assertNotSame(strBuilder2, strBuilder3);
      assertSame(strBuilder7, strBuilder1);
      assertSame(strBuilder7, strBuilder2);
      assertNotSame(strBuilder7, strBuilder5);
      assertSame(strBuilder7, strBuilder0);
      assertNotSame(strBuilder7, strBuilder6);
      assertNotSame(strBuilder7, strBuilder3);
      assertNotSame(strBuilder7, strBuilder4);
      
      StrBuilder strBuilder8 = strBuilder0.append(strBuilder7, 0, 0);
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(261, strBuilder0.length());
      assertEquals(261, strBuilder0.size());
      assertEquals(512, strBuilder0.capacity());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(512, strBuilder1.capacity());
      assertEquals(261, strBuilder1.size());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(261, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertTrue(strBuilder1.isNotEmpty());
      assertFalse(strBuilder1.isEmpty());
      assertTrue(strBuilder2.isNotEmpty());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(261, strBuilder2.length());
      assertEquals(261, strBuilder2.size());
      assertNull(strBuilder2.getNullText());
      assertEquals(512, strBuilder2.capacity());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(261, strBuilder7.length());
      assertFalse(strBuilder7.isEmpty());
      assertEquals(261, strBuilder7.size());
      assertNull(strBuilder7.getNullText());
      assertNull(strBuilder7.getNewLineText());
      assertEquals(512, strBuilder7.capacity());
      assertTrue(strBuilder7.isNotEmpty());
      assertEquals(261, strBuilder8.size());
      assertNull(strBuilder8.getNullText());
      assertNull(strBuilder8.getNewLineText());
      assertEquals(261, strBuilder8.length());
      assertEquals(512, strBuilder8.capacity());
      assertFalse(strBuilder8.isEmpty());
      assertTrue(strBuilder8.isNotEmpty());
      assertNotNull(strBuilder8);
      assertFalse(strBuilder0.equals((Object)strBuilder4));
      assertFalse(strBuilder0.equals((Object)strBuilder3));
      assertFalse(strBuilder0.equals((Object)strBuilder6));
      assertFalse(strBuilder0.equals((Object)strBuilder5));
      assertFalse(strBuilder1.equals((Object)strBuilder5));
      assertFalse(strBuilder1.equals((Object)strBuilder3));
      assertFalse(strBuilder1.equals((Object)strBuilder4));
      assertFalse(strBuilder1.equals((Object)strBuilder6));
      assertFalse(strBuilder2.equals((Object)strBuilder5));
      assertFalse(strBuilder2.equals((Object)strBuilder4));
      assertFalse(strBuilder2.equals((Object)strBuilder3));
      assertFalse(strBuilder2.equals((Object)strBuilder6));
      assertFalse(strBuilder7.equals((Object)strBuilder5));
      assertFalse(strBuilder7.equals((Object)strBuilder3));
      assertFalse(strBuilder7.equals((Object)strBuilder6));
      assertFalse(strBuilder7.equals((Object)strBuilder4));
      assertFalse(strBuilder8.equals((Object)strBuilder5));
      assertFalse(strBuilder8.equals((Object)strBuilder3));
      assertFalse(strBuilder8.equals((Object)strBuilder4));
      assertFalse(strBuilder8.equals((Object)strBuilder6));
      assertNotSame(strBuilder0, strBuilder4);
      assertNotSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertNotSame(strBuilder0, strBuilder6);
      assertSame(strBuilder0, strBuilder2);
      assertNotSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder8);
      assertSame(strBuilder0, strBuilder7);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder7);
      assertSame(strBuilder1, strBuilder8);
      assertNotSame(strBuilder1, strBuilder5);
      assertNotSame(strBuilder1, strBuilder4);
      assertNotSame(strBuilder1, strBuilder6);
      assertNotSame(strBuilder1, strBuilder3);
      assertSame(strBuilder2, strBuilder7);
      assertSame(strBuilder2, strBuilder1);
      assertNotSame(strBuilder2, strBuilder5);
      assertSame(strBuilder2, strBuilder8);
      assertSame(strBuilder2, strBuilder0);
      assertNotSame(strBuilder2, strBuilder4);
      assertNotSame(strBuilder2, strBuilder6);
      assertNotSame(strBuilder2, strBuilder3);
      assertSame(strBuilder7, strBuilder1);
      assertSame(strBuilder7, strBuilder2);
      assertNotSame(strBuilder7, strBuilder5);
      assertSame(strBuilder7, strBuilder0);
      assertNotSame(strBuilder7, strBuilder6);
      assertNotSame(strBuilder7, strBuilder3);
      assertNotSame(strBuilder7, strBuilder4);
      assertSame(strBuilder7, strBuilder8);
      assertSame(strBuilder8, strBuilder7);
      assertSame(strBuilder8, strBuilder0);
      assertSame(strBuilder8, strBuilder1);
      assertSame(strBuilder8, strBuilder2);
      assertNotSame(strBuilder8, strBuilder5);
      assertNotSame(strBuilder8, strBuilder4);
      assertNotSame(strBuilder8, strBuilder6);
      assertNotSame(strBuilder8, strBuilder3);
      
      Vector<Object> vector0 = new Vector<Object>();
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertNotNull(vector0);
      assertFalse(vector0.contains(59));
      
      StrBuilder strBuilder9 = strBuilder4.appendAll((Iterable<?>) vector0);
      assertFalse(strBuilder4.isNotEmpty());
      assertEquals(0, strBuilder4.size());
      assertNull(strBuilder4.getNullText());
      assertEquals(0, strBuilder4.length());
      assertTrue(strBuilder4.isEmpty());
      assertEquals(32, strBuilder4.capacity());
      assertNull(strBuilder4.getNewLineText());
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertNull(strBuilder9.getNullText());
      assertEquals(0, strBuilder9.length());
      assertEquals(32, strBuilder9.capacity());
      assertNull(strBuilder9.getNewLineText());
      assertTrue(strBuilder9.isEmpty());
      assertEquals(0, strBuilder9.size());
      assertFalse(strBuilder9.isNotEmpty());
      assertNotNull(strBuilder9);
      assertFalse(vector0.contains(59));
      assertTrue(strBuilder4.equals((Object)strBuilder5));
      assertFalse(strBuilder4.equals((Object)strBuilder1));
      assertFalse(strBuilder4.equals((Object)strBuilder0));
      assertFalse(strBuilder4.equals((Object)strBuilder7));
      assertTrue(strBuilder4.equals((Object)strBuilder3));
      assertFalse(strBuilder4.equals((Object)strBuilder2));
      assertFalse(strBuilder4.equals((Object)strBuilder8));
      assertFalse(strBuilder9.equals((Object)strBuilder2));
      assertFalse(strBuilder9.equals((Object)strBuilder1));
      assertTrue(strBuilder9.equals((Object)strBuilder5));
      assertTrue(strBuilder9.equals((Object)strBuilder3));
      assertFalse(strBuilder9.equals((Object)strBuilder0));
      assertFalse(strBuilder9.equals((Object)strBuilder7));
      assertFalse(strBuilder9.equals((Object)strBuilder8));
      assertNotSame(strBuilder4, strBuilder3);
      assertNotSame(strBuilder4, strBuilder1);
      assertNotSame(strBuilder4, strBuilder5);
      assertSame(strBuilder4, strBuilder6);
      assertNotSame(strBuilder4, strBuilder0);
      assertNotSame(strBuilder4, strBuilder7);
      assertSame(strBuilder4, strBuilder9);
      assertNotSame(strBuilder4, strBuilder2);
      assertNotSame(strBuilder4, strBuilder8);
      assertNotSame(strBuilder9, strBuilder2);
      assertNotSame(strBuilder9, strBuilder3);
      assertNotSame(strBuilder9, strBuilder1);
      assertSame(strBuilder9, strBuilder6);
      assertNotSame(strBuilder9, strBuilder0);
      assertSame(strBuilder9, strBuilder4);
      assertNotSame(strBuilder9, strBuilder5);
      assertNotSame(strBuilder9, strBuilder7);
      assertNotSame(strBuilder9, strBuilder8);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNotNull(strBuilder0);
      
      boolean boolean0 = strBuilder0.contains('(');
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertFalse(boolean0);
      
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertFalse(strBuilder_StrBuilderReader0.ready());
      assertTrue(strBuilder_StrBuilderReader0.markSupported());
      assertNotNull(strBuilder_StrBuilderReader0);
      
      boolean boolean1 = strBuilder0.contains('(');
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      StrBuilder strBuilder1 = new StrBuilder((String) null);
      assertEquals(0, strBuilder1.size());
      assertFalse(strBuilder1.isNotEmpty());
      assertTrue(strBuilder1.isEmpty());
      assertEquals(0, strBuilder1.length());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertNotNull(strBuilder1);
      assertTrue(strBuilder1.equals((Object)strBuilder0));
      
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader1 = strBuilder1.new StrBuilderReader();
      assertEquals(0, strBuilder1.size());
      assertFalse(strBuilder1.isNotEmpty());
      assertTrue(strBuilder1.isEmpty());
      assertEquals(0, strBuilder1.length());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertFalse(strBuilder_StrBuilderReader1.ready());
      assertTrue(strBuilder_StrBuilderReader1.markSupported());
      assertNotNull(strBuilder_StrBuilderReader1);
      assertTrue(strBuilder1.equals((Object)strBuilder0));
      assertFalse(strBuilder_StrBuilderReader1.equals((Object)strBuilder_StrBuilderReader0));
      
      StrBuilder strBuilder2 = strBuilder1.append((String) null, 1914, 3101);
      assertEquals(0, strBuilder1.size());
      assertFalse(strBuilder1.isNotEmpty());
      assertTrue(strBuilder1.isEmpty());
      assertEquals(0, strBuilder1.length());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(0, strBuilder2.length());
      assertNull(strBuilder2.getNullText());
      assertNull(strBuilder2.getNewLineText());
      assertTrue(strBuilder2.isEmpty());
      assertEquals(32, strBuilder2.capacity());
      assertFalse(strBuilder2.isNotEmpty());
      assertEquals(0, strBuilder2.size());
      assertNotNull(strBuilder2);
      assertTrue(strBuilder1.equals((Object)strBuilder0));
      assertTrue(strBuilder2.equals((Object)strBuilder0));
      assertSame(strBuilder1, strBuilder2);
      assertNotSame(strBuilder1, strBuilder0);
      assertNotSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertFalse(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.trim();
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertFalse(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder1.isNotEmpty());
      assertEquals(0, strBuilder1.size());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(0, strBuilder1.length());
      assertEquals(32, strBuilder1.capacity());
      assertTrue(strBuilder1.isEmpty());
      assertNotNull(strBuilder1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      
      char[] charArray0 = strBuilder0.toCharArray();
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertFalse(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertNotNull(charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      assertSame(strBuilder0, strBuilder1);
      
      StrBuilder strBuilder2 = strBuilder0.appendln((-1875L));
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(6, strBuilder0.size());
      assertEquals(6, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder2.isNotEmpty());
      assertFalse(strBuilder2.isEmpty());
      assertNull(strBuilder2.getNullText());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(32, strBuilder2.capacity());
      assertEquals(6, strBuilder2.size());
      assertEquals(6, strBuilder2.length());
      assertNotNull(strBuilder2);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder2.new StrBuilderReader();
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(6, strBuilder0.size());
      assertEquals(6, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder2.isNotEmpty());
      assertFalse(strBuilder2.isEmpty());
      assertNull(strBuilder2.getNullText());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(32, strBuilder2.capacity());
      assertEquals(6, strBuilder2.size());
      assertEquals(6, strBuilder2.length());
      assertTrue(strBuilder_StrBuilderReader0.markSupported());
      assertTrue(strBuilder_StrBuilderReader0.ready());
      assertNotNull(strBuilder_StrBuilderReader0);
      
      int int0 = strBuilder_StrBuilderReader0.read(charArray0);
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(6, strBuilder0.size());
      assertEquals(6, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder2.isNotEmpty());
      assertFalse(strBuilder2.isEmpty());
      assertNull(strBuilder2.getNullText());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(32, strBuilder2.capacity());
      assertEquals(6, strBuilder2.size());
      assertEquals(6, strBuilder2.length());
      assertTrue(strBuilder_StrBuilderReader0.markSupported());
      assertTrue(strBuilder_StrBuilderReader0.ready());
      assertEquals(0, int0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      
      int int1 = strBuilder0.indexOf("3)7l6!ePLBqDx", 0);
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(6, strBuilder0.size());
      assertEquals(6, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      
      StrBuilder strBuilder3 = strBuilder2.appendSeparator("3)7l6!ePLBqDx", (-1));
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(6, strBuilder0.size());
      assertEquals(6, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder2.isNotEmpty());
      assertFalse(strBuilder2.isEmpty());
      assertNull(strBuilder2.getNullText());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(32, strBuilder2.capacity());
      assertEquals(6, strBuilder2.size());
      assertEquals(6, strBuilder2.length());
      assertEquals(32, strBuilder3.capacity());
      assertEquals(6, strBuilder3.length());
      assertFalse(strBuilder3.isEmpty());
      assertTrue(strBuilder3.isNotEmpty());
      assertNull(strBuilder3.getNewLineText());
      assertEquals(6, strBuilder3.size());
      assertNull(strBuilder3.getNullText());
      assertNotNull(strBuilder3);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder3);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder2);
      assertSame(strBuilder3, strBuilder1);
      
      boolean boolean0 = strBuilder2.endsWith("3)7l6!ePLBqDx");
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(6, strBuilder0.size());
      assertEquals(6, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder2.isNotEmpty());
      assertFalse(strBuilder2.isEmpty());
      assertNull(strBuilder2.getNullText());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(32, strBuilder2.capacity());
      assertEquals(6, strBuilder2.size());
      assertEquals(6, strBuilder2.length());
      assertFalse(boolean0);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder3);
      assertSame(strBuilder2, strBuilder0);
      
      StrBuilder strBuilder4 = strBuilder2.deleteFirst("");
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(6, strBuilder0.size());
      assertEquals(6, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder2.isNotEmpty());
      assertFalse(strBuilder2.isEmpty());
      assertNull(strBuilder2.getNullText());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(32, strBuilder2.capacity());
      assertEquals(6, strBuilder2.size());
      assertEquals(6, strBuilder2.length());
      assertTrue(strBuilder4.isNotEmpty());
      assertEquals(6, strBuilder4.size());
      assertNull(strBuilder4.getNullText());
      assertNull(strBuilder4.getNewLineText());
      assertEquals(32, strBuilder4.capacity());
      assertEquals(6, strBuilder4.length());
      assertFalse(strBuilder4.isEmpty());
      assertNotNull(strBuilder4);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder3);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder4);
      assertSame(strBuilder4, strBuilder2);
      assertSame(strBuilder4, strBuilder0);
      assertSame(strBuilder4, strBuilder1);
      assertSame(strBuilder4, strBuilder3);
      
      Object[] objectArray0 = new Object[2];
      StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer0 = strBuilder3.new StrBuilderTokenizer();
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(6, strBuilder0.size());
      assertEquals(6, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder2.isNotEmpty());
      assertFalse(strBuilder2.isEmpty());
      assertNull(strBuilder2.getNullText());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(32, strBuilder2.capacity());
      assertEquals(6, strBuilder2.size());
      assertEquals(6, strBuilder2.length());
      assertEquals(32, strBuilder3.capacity());
      assertEquals(6, strBuilder3.length());
      assertFalse(strBuilder3.isEmpty());
      assertTrue(strBuilder3.isNotEmpty());
      assertNull(strBuilder3.getNewLineText());
      assertEquals(6, strBuilder3.size());
      assertNull(strBuilder3.getNullText());
      assertTrue(strBuilder_StrBuilderTokenizer0.isIgnoreEmptyTokens());
      assertEquals((-1), strBuilder_StrBuilderTokenizer0.previousIndex());
      assertEquals(0, strBuilder_StrBuilderTokenizer0.nextIndex());
      assertFalse(strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull());
      assertNotNull(strBuilder_StrBuilderTokenizer0);
      
      StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer1 = (StrBuilder.StrBuilderTokenizer)strBuilder_StrBuilderTokenizer0.cloneReset();
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(6, strBuilder0.size());
      assertEquals(6, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder2.isNotEmpty());
      assertFalse(strBuilder2.isEmpty());
      assertNull(strBuilder2.getNullText());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(32, strBuilder2.capacity());
      assertEquals(6, strBuilder2.size());
      assertEquals(6, strBuilder2.length());
      assertEquals(32, strBuilder3.capacity());
      assertEquals(6, strBuilder3.length());
      assertFalse(strBuilder3.isEmpty());
      assertTrue(strBuilder3.isNotEmpty());
      assertNull(strBuilder3.getNewLineText());
      assertEquals(6, strBuilder3.size());
      assertNull(strBuilder3.getNullText());
      assertTrue(strBuilder_StrBuilderTokenizer0.isIgnoreEmptyTokens());
      assertEquals((-1), strBuilder_StrBuilderTokenizer0.previousIndex());
      assertEquals(0, strBuilder_StrBuilderTokenizer0.nextIndex());
      assertFalse(strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull());
      assertFalse(strBuilder_StrBuilderTokenizer1.isEmptyTokenAsNull());
      assertTrue(strBuilder_StrBuilderTokenizer1.isIgnoreEmptyTokens());
      assertEquals(0, strBuilder_StrBuilderTokenizer1.nextIndex());
      assertEquals((-1), strBuilder_StrBuilderTokenizer1.previousIndex());
      assertNotNull(strBuilder_StrBuilderTokenizer1);
      assertFalse(strBuilder_StrBuilderTokenizer1.equals((Object)strBuilder_StrBuilderTokenizer0));
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder3);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder4);
      assertSame(strBuilder3, strBuilder4);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder2);
      assertSame(strBuilder3, strBuilder1);
      assertNotSame(strBuilder_StrBuilderTokenizer0, strBuilder_StrBuilderTokenizer1);
      assertNotSame(strBuilder_StrBuilderTokenizer1, strBuilder_StrBuilderTokenizer0);
      
      objectArray0[0] = (Object) strBuilder_StrBuilderTokenizer1;
      objectArray0[1] = (Object) strBuilder3;
      StrBuilder strBuilder5 = strBuilder1.appendln("", objectArray0);
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(7, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(7, strBuilder0.size());
      assertEquals(7, strBuilder1.length());
      assertEquals(7, strBuilder1.size());
      assertNull(strBuilder1.getNewLineText());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertEquals(32, strBuilder1.capacity());
      assertTrue(strBuilder1.isNotEmpty());
      assertTrue(strBuilder5.isNotEmpty());
      assertNull(strBuilder5.getNullText());
      assertNull(strBuilder5.getNewLineText());
      assertFalse(strBuilder5.isEmpty());
      assertEquals(32, strBuilder5.capacity());
      assertEquals(7, strBuilder5.length());
      assertEquals(7, strBuilder5.size());
      assertNotNull(strBuilder5);
      assertEquals(2, objectArray0.length);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder5);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder4);
      assertSame(strBuilder5, strBuilder2);
      assertSame(strBuilder5, strBuilder0);
      assertSame(strBuilder5, strBuilder3);
      assertSame(strBuilder5, strBuilder4);
      assertSame(strBuilder5, strBuilder1);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("");
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.replaceAll('r', 'r');
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(0, strBuilder1.length());
      assertEquals(0, strBuilder1.size());
      assertFalse(strBuilder1.isNotEmpty());
      assertNull(strBuilder1.getNullText());
      assertTrue(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertNotNull(strBuilder1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      
      StrBuilder strBuilder2 = strBuilder1.appendln('r');
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(2, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(2, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder1.isNotEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(2, strBuilder1.length());
      assertEquals(2, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(32, strBuilder2.capacity());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(2, strBuilder2.length());
      assertEquals(2, strBuilder2.size());
      assertTrue(strBuilder2.isNotEmpty());
      assertNull(strBuilder2.getNullText());
      assertNull(strBuilder2.getNewLineText());
      assertNotNull(strBuilder2);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      
      StrBuilder strBuilder3 = strBuilder0.appendWithSeparators((Object[]) null, "](Z>EFoNy?V]MFB.");
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(2, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(2, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(2, strBuilder3.size());
      assertEquals(2, strBuilder3.length());
      assertNull(strBuilder3.getNullText());
      assertEquals(32, strBuilder3.capacity());
      assertNull(strBuilder3.getNewLineText());
      assertFalse(strBuilder3.isEmpty());
      assertTrue(strBuilder3.isNotEmpty());
      assertNotNull(strBuilder3);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder3, strBuilder2);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder0);
      
      StrBuilder strBuilder4 = strBuilder2.deleteFirst("");
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(2, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(2, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder1.isNotEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(2, strBuilder1.length());
      assertEquals(2, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(32, strBuilder2.capacity());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(2, strBuilder2.length());
      assertEquals(2, strBuilder2.size());
      assertTrue(strBuilder2.isNotEmpty());
      assertNull(strBuilder2.getNullText());
      assertNull(strBuilder2.getNewLineText());
      assertNull(strBuilder4.getNullText());
      assertFalse(strBuilder4.isEmpty());
      assertTrue(strBuilder4.isNotEmpty());
      assertNull(strBuilder4.getNewLineText());
      assertEquals(32, strBuilder4.capacity());
      assertEquals(2, strBuilder4.size());
      assertEquals(2, strBuilder4.length());
      assertNotNull(strBuilder4);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder4);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder3);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder4);
      assertSame(strBuilder4, strBuilder0);
      assertSame(strBuilder4, strBuilder3);
      assertSame(strBuilder4, strBuilder1);
      assertSame(strBuilder4, strBuilder2);
      
      StrBuilder strBuilder5 = strBuilder3.setNullText("Search and Replace array lengths don't match: ");
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(2, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(2, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertEquals("Search and Replace array lengths don't match: ", strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(2, strBuilder3.size());
      assertEquals("Search and Replace array lengths don't match: ", strBuilder3.getNullText());
      assertEquals(2, strBuilder3.length());
      assertEquals(32, strBuilder3.capacity());
      assertNull(strBuilder3.getNewLineText());
      assertFalse(strBuilder3.isEmpty());
      assertTrue(strBuilder3.isNotEmpty());
      assertTrue(strBuilder5.isNotEmpty());
      assertNull(strBuilder5.getNewLineText());
      assertFalse(strBuilder5.isEmpty());
      assertEquals(2, strBuilder5.length());
      assertEquals(2, strBuilder5.size());
      assertEquals("Search and Replace array lengths don't match: ", strBuilder5.getNullText());
      assertEquals(32, strBuilder5.capacity());
      assertNotNull(strBuilder5);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder3, strBuilder2);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder4);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder5);
      assertSame(strBuilder5, strBuilder0);
      assertSame(strBuilder5, strBuilder4);
      assertSame(strBuilder5, strBuilder3);
      assertSame(strBuilder5, strBuilder1);
      assertSame(strBuilder5, strBuilder2);
      
      boolean boolean0 = strBuilder4.contains("");
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(2, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(2, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertEquals("Search and Replace array lengths don't match: ", strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder1.isNotEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(2, strBuilder1.length());
      assertEquals(2, strBuilder1.size());
      assertEquals("Search and Replace array lengths don't match: ", strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(32, strBuilder2.capacity());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(2, strBuilder2.length());
      assertEquals(2, strBuilder2.size());
      assertTrue(strBuilder2.isNotEmpty());
      assertNull(strBuilder2.getNewLineText());
      assertEquals("Search and Replace array lengths don't match: ", strBuilder2.getNullText());
      assertFalse(strBuilder4.isEmpty());
      assertTrue(strBuilder4.isNotEmpty());
      assertNull(strBuilder4.getNewLineText());
      assertEquals("Search and Replace array lengths don't match: ", strBuilder4.getNullText());
      assertEquals(32, strBuilder4.capacity());
      assertEquals(2, strBuilder4.size());
      assertEquals(2, strBuilder4.length());
      assertTrue(boolean0);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder1, strBuilder5);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder4);
      assertSame(strBuilder2, strBuilder5);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder3);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder4);
      assertSame(strBuilder4, strBuilder0);
      assertSame(strBuilder4, strBuilder3);
      assertSame(strBuilder4, strBuilder1);
      assertSame(strBuilder4, strBuilder2);
      assertSame(strBuilder4, strBuilder5);
      
      StrBuilder strBuilder6 = new StrBuilder();
      assertNull(strBuilder6.getNewLineText());
      assertEquals(32, strBuilder6.capacity());
      assertEquals(0, strBuilder6.size());
      assertEquals(0, strBuilder6.length());
      assertFalse(strBuilder6.isNotEmpty());
      assertNull(strBuilder6.getNullText());
      assertTrue(strBuilder6.isEmpty());
      assertNotNull(strBuilder6);
      assertFalse(strBuilder6.equals((Object)strBuilder2));
      assertFalse(strBuilder6.equals((Object)strBuilder5));
      assertFalse(strBuilder6.equals((Object)strBuilder0));
      assertFalse(strBuilder6.equals((Object)strBuilder4));
      assertFalse(strBuilder6.equals((Object)strBuilder1));
      assertFalse(strBuilder6.equals((Object)strBuilder3));
      
      StrBuilder strBuilder7 = strBuilder0.appendln((-2577.357112));
      assertEquals(15, strBuilder0.length());
      assertEquals(15, strBuilder0.size());
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertEquals("Search and Replace array lengths don't match: ", strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(15, strBuilder7.length());
      assertTrue(strBuilder7.isNotEmpty());
      assertEquals("Search and Replace array lengths don't match: ", strBuilder7.getNullText());
      assertNull(strBuilder7.getNewLineText());
      assertEquals(32, strBuilder7.capacity());
      assertEquals(15, strBuilder7.size());
      assertFalse(strBuilder7.isEmpty());
      assertNotNull(strBuilder7);
      assertFalse(strBuilder0.equals((Object)strBuilder6));
      assertFalse(strBuilder7.equals((Object)strBuilder6));
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder7);
      assertNotSame(strBuilder0, strBuilder6);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder7, strBuilder0);
      assertSame(strBuilder7, strBuilder4);
      assertSame(strBuilder7, strBuilder1);
      assertSame(strBuilder7, strBuilder5);
      assertSame(strBuilder7, strBuilder2);
      assertNotSame(strBuilder7, strBuilder6);
      assertSame(strBuilder7, strBuilder3);
      
      StrBuilder strBuilder8 = strBuilder7.appendNull();
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(61, strBuilder0.length());
      assertEquals(61, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(122, strBuilder0.capacity());
      assertEquals("Search and Replace array lengths don't match: ", strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(122, strBuilder7.capacity());
      assertTrue(strBuilder7.isNotEmpty());
      assertEquals("Search and Replace array lengths don't match: ", strBuilder7.getNullText());
      assertEquals(61, strBuilder7.length());
      assertNull(strBuilder7.getNewLineText());
      assertEquals(61, strBuilder7.size());
      assertFalse(strBuilder7.isEmpty());
      assertEquals("Search and Replace array lengths don't match: ", strBuilder8.getNullText());
      assertEquals(122, strBuilder8.capacity());
      assertTrue(strBuilder8.isNotEmpty());
      assertFalse(strBuilder8.isEmpty());
      assertEquals(61, strBuilder8.size());
      assertNull(strBuilder8.getNewLineText());
      assertEquals(61, strBuilder8.length());
      assertNotNull(strBuilder8);
      assertFalse(strBuilder0.equals((Object)strBuilder6));
      assertFalse(strBuilder7.equals((Object)strBuilder6));
      assertFalse(strBuilder8.equals((Object)strBuilder6));
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder7);
      assertNotSame(strBuilder0, strBuilder6);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder8);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder7, strBuilder0);
      assertSame(strBuilder7, strBuilder8);
      assertSame(strBuilder7, strBuilder4);
      assertSame(strBuilder7, strBuilder1);
      assertSame(strBuilder7, strBuilder5);
      assertSame(strBuilder7, strBuilder2);
      assertNotSame(strBuilder7, strBuilder6);
      assertSame(strBuilder7, strBuilder3);
      assertSame(strBuilder8, strBuilder2);
      assertSame(strBuilder8, strBuilder5);
      assertSame(strBuilder8, strBuilder1);
      assertNotSame(strBuilder8, strBuilder6);
      assertSame(strBuilder8, strBuilder3);
      assertSame(strBuilder8, strBuilder0);
      assertSame(strBuilder8, strBuilder4);
      assertSame(strBuilder8, strBuilder7);
      
      int int0 = strBuilder1.lastIndexOf("12AN\"\"-|cUO");
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(61, strBuilder0.length());
      assertEquals(61, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(122, strBuilder0.capacity());
      assertEquals("Search and Replace array lengths don't match: ", strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder1.isNotEmpty());
      assertEquals(61, strBuilder1.length());
      assertEquals(61, strBuilder1.size());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(122, strBuilder1.capacity());
      assertEquals("Search and Replace array lengths don't match: ", strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals((-1), int0);
      assertFalse(strBuilder0.equals((Object)strBuilder6));
      assertFalse(strBuilder1.equals((Object)strBuilder6));
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder7);
      assertNotSame(strBuilder0, strBuilder6);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder8);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder1, strBuilder5);
      assertNotSame(strBuilder1, strBuilder6);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder7);
      assertSame(strBuilder1, strBuilder8);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder4);
      
      StrBuilder strBuilder9 = strBuilder3.trim();
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(60, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(122, strBuilder0.capacity());
      assertEquals(60, strBuilder0.length());
      assertEquals("Search and Replace array lengths don't match: ", strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals("Search and Replace array lengths don't match: ", strBuilder3.getNullText());
      assertEquals(122, strBuilder3.capacity());
      assertEquals(60, strBuilder3.length());
      assertNull(strBuilder3.getNewLineText());
      assertFalse(strBuilder3.isEmpty());
      assertTrue(strBuilder3.isNotEmpty());
      assertEquals(60, strBuilder3.size());
      assertEquals(122, strBuilder9.capacity());
      assertFalse(strBuilder9.isEmpty());
      assertEquals(60, strBuilder9.length());
      assertNull(strBuilder9.getNewLineText());
      assertEquals(60, strBuilder9.size());
      assertTrue(strBuilder9.isNotEmpty());
      assertEquals("Search and Replace array lengths don't match: ", strBuilder9.getNullText());
      assertNotNull(strBuilder9);
      assertFalse(strBuilder0.equals((Object)strBuilder6));
      assertFalse(strBuilder3.equals((Object)strBuilder6));
      assertFalse(strBuilder9.equals((Object)strBuilder6));
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder9);
      assertSame(strBuilder0, strBuilder7);
      assertNotSame(strBuilder0, strBuilder6);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder8);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder3, strBuilder9);
      assertSame(strBuilder3, strBuilder2);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder4);
      assertSame(strBuilder3, strBuilder7);
      assertNotSame(strBuilder3, strBuilder6);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder8);
      assertSame(strBuilder3, strBuilder5);
      assertNotSame(strBuilder9, strBuilder6);
      assertSame(strBuilder9, strBuilder2);
      assertSame(strBuilder9, strBuilder8);
      assertSame(strBuilder9, strBuilder1);
      assertSame(strBuilder9, strBuilder5);
      assertSame(strBuilder9, strBuilder7);
      assertSame(strBuilder9, strBuilder3);
      assertSame(strBuilder9, strBuilder0);
      assertSame(strBuilder9, strBuilder4);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertFalse(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = new StrBuilder((String) null);
      assertFalse(strBuilder1.isNotEmpty());
      assertEquals(0, strBuilder1.length());
      assertEquals(0, strBuilder1.size());
      assertTrue(strBuilder1.isEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertNotNull(strBuilder1);
      assertTrue(strBuilder1.equals((Object)strBuilder0));
      
      StrBuilder strBuilder2 = strBuilder0.append((Object) strBuilder1);
      assertFalse(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertFalse(strBuilder1.isNotEmpty());
      assertEquals(0, strBuilder1.length());
      assertEquals(0, strBuilder1.size());
      assertTrue(strBuilder1.isEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(32, strBuilder2.capacity());
      assertTrue(strBuilder2.isEmpty());
      assertEquals(0, strBuilder2.length());
      assertEquals(0, strBuilder2.size());
      assertFalse(strBuilder2.isNotEmpty());
      assertNull(strBuilder2.getNullText());
      assertNotNull(strBuilder2);
      assertTrue(strBuilder0.equals((Object)strBuilder1));
      assertTrue(strBuilder1.equals((Object)strBuilder0));
      assertTrue(strBuilder2.equals((Object)strBuilder1));
      assertNotSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertNotSame(strBuilder1, strBuilder2);
      assertNotSame(strBuilder1, strBuilder0);
      assertNotSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      
      String string0 = strBuilder0.build();
      assertFalse(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNotNull(string0);
      assertEquals("", string0);
      assertTrue(strBuilder0.equals((Object)strBuilder1));
      assertNotSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      
      char char0 = ')';
      // Undeclared exception!
      try { 
        strBuilder0.appendPadding(Integer.MAX_VALUE, ')');
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder((-1872));
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = new StrBuilder((String) null);
      assertNull(strBuilder1.getNewLineText());
      assertTrue(strBuilder1.isEmpty());
      assertEquals(0, strBuilder1.length());
      assertEquals(32, strBuilder1.capacity());
      assertFalse(strBuilder1.isNotEmpty());
      assertEquals(0, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertNotNull(strBuilder1);
      assertTrue(strBuilder1.equals((Object)strBuilder0));
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      int int0 = strBuilder1.indexOf("kz!");
      assertNull(strBuilder1.getNewLineText());
      assertTrue(strBuilder1.isEmpty());
      assertEquals(0, strBuilder1.length());
      assertEquals(32, strBuilder1.capacity());
      assertFalse(strBuilder1.isNotEmpty());
      assertEquals(0, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertEquals((-1), int0);
      assertTrue(strBuilder1.equals((Object)strBuilder0));
      assertNotSame(strBuilder1, strBuilder0);
      
      StrBuilder strBuilder2 = strBuilder1.reverse();
      assertNull(strBuilder1.getNewLineText());
      assertTrue(strBuilder1.isEmpty());
      assertEquals(0, strBuilder1.length());
      assertEquals(32, strBuilder1.capacity());
      assertFalse(strBuilder1.isNotEmpty());
      assertEquals(0, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertEquals(0, strBuilder2.length());
      assertFalse(strBuilder2.isNotEmpty());
      assertNull(strBuilder2.getNullText());
      assertEquals(0, strBuilder2.size());
      assertEquals(32, strBuilder2.capacity());
      assertTrue(strBuilder2.isEmpty());
      assertNull(strBuilder2.getNewLineText());
      assertNotNull(strBuilder2);
      assertTrue(strBuilder1.equals((Object)strBuilder0));
      assertTrue(strBuilder2.equals((Object)strBuilder0));
      assertNotSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder2);
      assertNotSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      
      StrBuilder strBuilder3 = strBuilder1.insert(0, (String) null);
      assertNull(strBuilder1.getNewLineText());
      assertTrue(strBuilder1.isEmpty());
      assertEquals(0, strBuilder1.length());
      assertEquals(32, strBuilder1.capacity());
      assertFalse(strBuilder1.isNotEmpty());
      assertEquals(0, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertEquals(32, strBuilder3.capacity());
      assertNull(strBuilder3.getNullText());
      assertNull(strBuilder3.getNewLineText());
      assertTrue(strBuilder3.isEmpty());
      assertFalse(strBuilder3.isNotEmpty());
      assertEquals(0, strBuilder3.length());
      assertEquals(0, strBuilder3.size());
      assertNotNull(strBuilder3);
      assertTrue(strBuilder1.equals((Object)strBuilder0));
      assertTrue(strBuilder3.equals((Object)strBuilder0));
      assertNotSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder3, strBuilder2);
      assertNotSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder1);
      
      char[] charArray0 = new char[3];
      charArray0[0] = '3';
      charArray0[1] = '~';
      charArray0[2] = '3';
      StrBuilder strBuilder4 = strBuilder0.appendln(charArray0);
      assertEquals(4, strBuilder0.length());
      assertEquals(4, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(4, strBuilder4.length());
      assertEquals(4, strBuilder4.size());
      assertNull(strBuilder4.getNewLineText());
      assertEquals(32, strBuilder4.capacity());
      assertTrue(strBuilder4.isNotEmpty());
      assertFalse(strBuilder4.isEmpty());
      assertNull(strBuilder4.getNullText());
      assertNotNull(strBuilder4);
      assertFalse(strBuilder0.equals((Object)strBuilder1));
      assertFalse(strBuilder0.equals((Object)strBuilder2));
      assertFalse(strBuilder0.equals((Object)strBuilder3));
      assertFalse(strBuilder4.equals((Object)strBuilder2));
      assertFalse(strBuilder4.equals((Object)strBuilder1));
      assertFalse(strBuilder4.equals((Object)strBuilder3));
      assertArrayEquals(new char[] {'3', '~', '3'}, charArray0);
      assertEquals(3, charArray0.length);
      assertNotSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder4);
      assertNotSame(strBuilder0, strBuilder2);
      assertNotSame(strBuilder0, strBuilder3);
      assertNotSame(strBuilder4, strBuilder2);
      assertNotSame(strBuilder4, strBuilder1);
      assertSame(strBuilder4, strBuilder0);
      assertNotSame(strBuilder4, strBuilder3);
      
      StrBuilder strBuilder5 = new StrBuilder("kz!");
      assertNull(strBuilder5.getNewLineText());
      assertEquals(35, strBuilder5.capacity());
      assertNull(strBuilder5.getNullText());
      assertTrue(strBuilder5.isNotEmpty());
      assertEquals(3, strBuilder5.size());
      assertFalse(strBuilder5.isEmpty());
      assertEquals(3, strBuilder5.length());
      assertNotNull(strBuilder5);
      assertFalse(strBuilder5.equals((Object)strBuilder2));
      assertFalse(strBuilder5.equals((Object)strBuilder4));
      assertFalse(strBuilder5.equals((Object)strBuilder3));
      assertFalse(strBuilder5.equals((Object)strBuilder0));
      assertFalse(strBuilder5.equals((Object)strBuilder1));
      
      IntStream intStream0 = strBuilder5.codePoints();
      assertNull(strBuilder5.getNewLineText());
      assertEquals(35, strBuilder5.capacity());
      assertNull(strBuilder5.getNullText());
      assertTrue(strBuilder5.isNotEmpty());
      assertEquals(3, strBuilder5.size());
      assertFalse(strBuilder5.isEmpty());
      assertEquals(3, strBuilder5.length());
      assertNotNull(intStream0);
      assertFalse(strBuilder5.equals((Object)strBuilder2));
      assertFalse(strBuilder5.equals((Object)strBuilder4));
      assertFalse(strBuilder5.equals((Object)strBuilder3));
      assertFalse(strBuilder5.equals((Object)strBuilder0));
      assertFalse(strBuilder5.equals((Object)strBuilder1));
      assertNotSame(strBuilder5, strBuilder2);
      assertNotSame(strBuilder5, strBuilder4);
      assertNotSame(strBuilder5, strBuilder3);
      assertNotSame(strBuilder5, strBuilder0);
      assertNotSame(strBuilder5, strBuilder1);
      
      char[] charArray1 = strBuilder2.getChars(charArray0);
      assertNull(strBuilder1.getNewLineText());
      assertTrue(strBuilder1.isEmpty());
      assertEquals(0, strBuilder1.length());
      assertEquals(32, strBuilder1.capacity());
      assertFalse(strBuilder1.isNotEmpty());
      assertEquals(0, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertEquals(0, strBuilder2.length());
      assertFalse(strBuilder2.isNotEmpty());
      assertNull(strBuilder2.getNullText());
      assertEquals(0, strBuilder2.size());
      assertEquals(32, strBuilder2.capacity());
      assertTrue(strBuilder2.isEmpty());
      assertNull(strBuilder2.getNewLineText());
      assertNotNull(charArray1);
      assertFalse(strBuilder1.equals((Object)strBuilder0));
      assertFalse(strBuilder1.equals((Object)strBuilder4));
      assertFalse(strBuilder1.equals((Object)strBuilder5));
      assertFalse(strBuilder2.equals((Object)strBuilder0));
      assertFalse(strBuilder2.equals((Object)strBuilder4));
      assertFalse(strBuilder2.equals((Object)strBuilder5));
      assertArrayEquals(new char[] {'3', '~', '3'}, charArray0);
      assertArrayEquals(new char[] {'3', '~', '3'}, charArray1);
      assertEquals(3, charArray0.length);
      assertEquals(3, charArray1.length);
      assertNotSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder3);
      assertNotSame(strBuilder1, strBuilder4);
      assertNotSame(strBuilder1, strBuilder5);
      assertSame(strBuilder2, strBuilder3);
      assertNotSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertNotSame(strBuilder2, strBuilder4);
      assertNotSame(strBuilder2, strBuilder5);
      assertSame(charArray0, charArray1);
      assertSame(charArray1, charArray0);
      
      // Undeclared exception!
      try { 
        strBuilder2.subSequence((-1), 0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -1
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.append("rU^qEvrU}'`nsy$szRAe", 0, 7);
      assertEquals(7, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertEquals(7, strBuilder0.size());
      assertEquals(7, strBuilder1.length());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(7, strBuilder1.size());
      assertTrue(strBuilder1.isNotEmpty());
      assertNotNull(strBuilder1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      
      StrBuilder strBuilder2 = new StrBuilder("9P:-W@mmzR2L?I");
      assertNull(strBuilder2.getNewLineText());
      assertTrue(strBuilder2.isNotEmpty());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(46, strBuilder2.capacity());
      assertNull(strBuilder2.getNullText());
      assertEquals(14, strBuilder2.length());
      assertEquals(14, strBuilder2.size());
      assertNotNull(strBuilder2);
      assertFalse(strBuilder2.equals((Object)strBuilder1));
      assertFalse(strBuilder2.equals((Object)strBuilder0));
      
      char[] charArray0 = new char[0];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.length());
      assertEquals("", charBuffer0.toString());
      assertTrue(charBuffer0.hasArray());
      assertEquals(0, charBuffer0.remaining());
      assertEquals(0, charBuffer0.arrayOffset());
      assertFalse(charBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.limit());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.capacity());
      assertEquals(0, charBuffer0.position());
      assertNotNull(charBuffer0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      
      // Undeclared exception!
      try { 
        strBuilder2.append(charBuffer0, 0, 32);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // length must be valid
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder((-1872));
      assertEquals(0, strBuilder0.size());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertNotNull(strBuilder0);
      
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
      assertEquals(0, strBuilder0.size());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder_StrBuilderReader0.markSupported());
      assertFalse(strBuilder_StrBuilderReader0.ready());
      assertNotNull(strBuilder_StrBuilderReader0);
      
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) strBuilder0;
      objectArray0[1] = (Object) "";
      StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer0 = strBuilder0.new StrBuilderTokenizer();
      assertEquals(0, strBuilder0.size());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder_StrBuilderTokenizer0.isIgnoreEmptyTokens());
      assertEquals((-1), strBuilder_StrBuilderTokenizer0.previousIndex());
      assertEquals(0, strBuilder_StrBuilderTokenizer0.nextIndex());
      assertFalse(strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull());
      assertNotNull(strBuilder_StrBuilderTokenizer0);
      
      StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer1 = (StrBuilder.StrBuilderTokenizer)strBuilder_StrBuilderTokenizer0.clone();
      assertEquals(0, strBuilder0.size());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder_StrBuilderTokenizer0.isIgnoreEmptyTokens());
      assertEquals((-1), strBuilder_StrBuilderTokenizer0.previousIndex());
      assertEquals(0, strBuilder_StrBuilderTokenizer0.nextIndex());
      assertFalse(strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull());
      assertFalse(strBuilder_StrBuilderTokenizer1.isEmptyTokenAsNull());
      assertEquals((-1), strBuilder_StrBuilderTokenizer1.previousIndex());
      assertTrue(strBuilder_StrBuilderTokenizer1.isIgnoreEmptyTokens());
      assertEquals(0, strBuilder_StrBuilderTokenizer1.nextIndex());
      assertNotNull(strBuilder_StrBuilderTokenizer1);
      assertFalse(strBuilder_StrBuilderTokenizer1.equals((Object)strBuilder_StrBuilderTokenizer0));
      assertNotSame(strBuilder_StrBuilderTokenizer0, strBuilder_StrBuilderTokenizer1);
      assertNotSame(strBuilder_StrBuilderTokenizer1, strBuilder_StrBuilderTokenizer0);
      
      objectArray0[2] = (Object) strBuilder_StrBuilderTokenizer1;
      objectArray0[3] = (Object) "'\"";
      StrBuilder strBuilder1 = strBuilder0.append("'\"", objectArray0);
      assertEquals(2, strBuilder0.length());
      assertEquals(2, strBuilder0.size());
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(2, strBuilder1.size());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(2, strBuilder1.length());
      assertNull(strBuilder1.getNewLineText());
      assertTrue(strBuilder1.isNotEmpty());
      assertNull(strBuilder1.getNullText());
      assertNotNull(strBuilder1);
      assertEquals(4, objectArray0.length);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      
      StrBuilder strBuilder2 = new StrBuilder((-1872));
      assertTrue(strBuilder2.isEmpty());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(0, strBuilder2.length());
      assertNull(strBuilder2.getNullText());
      assertEquals(0, strBuilder2.size());
      assertFalse(strBuilder2.isNotEmpty());
      assertEquals(32, strBuilder2.capacity());
      assertNotNull(strBuilder2);
      assertFalse(strBuilder2.equals((Object)strBuilder1));
      assertFalse(strBuilder2.equals((Object)strBuilder0));
      
      StrBuilder strBuilder3 = new StrBuilder(2);
      assertNull(strBuilder3.getNewLineText());
      assertNull(strBuilder3.getNullText());
      assertEquals(0, strBuilder3.length());
      assertEquals(2, strBuilder3.capacity());
      assertEquals(0, strBuilder3.size());
      assertFalse(strBuilder3.isNotEmpty());
      assertTrue(strBuilder3.isEmpty());
      assertNotNull(strBuilder3);
      assertFalse(strBuilder3.equals((Object)strBuilder1));
      assertTrue(strBuilder3.equals((Object)strBuilder2));
      assertFalse(strBuilder3.equals((Object)strBuilder0));
      
      StrBuilder strBuilder4 = strBuilder2.appendln(0L);
      assertNull(strBuilder2.getNewLineText());
      assertNull(strBuilder2.getNullText());
      assertTrue(strBuilder2.isNotEmpty());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(2, strBuilder2.length());
      assertEquals(2, strBuilder2.size());
      assertEquals(32, strBuilder2.capacity());
      assertEquals(2, strBuilder4.size());
      assertFalse(strBuilder4.isEmpty());
      assertEquals(2, strBuilder4.length());
      assertTrue(strBuilder4.isNotEmpty());
      assertEquals(32, strBuilder4.capacity());
      assertNull(strBuilder4.getNullText());
      assertNull(strBuilder4.getNewLineText());
      assertNotNull(strBuilder4);
      assertFalse(strBuilder2.equals((Object)strBuilder1));
      assertFalse(strBuilder2.equals((Object)strBuilder3));
      assertFalse(strBuilder2.equals((Object)strBuilder0));
      assertFalse(strBuilder4.equals((Object)strBuilder3));
      assertFalse(strBuilder4.equals((Object)strBuilder0));
      assertFalse(strBuilder4.equals((Object)strBuilder1));
      assertNotSame(strBuilder2, strBuilder1);
      assertNotSame(strBuilder2, strBuilder3);
      assertSame(strBuilder2, strBuilder4);
      assertNotSame(strBuilder2, strBuilder0);
      assertNotSame(strBuilder4, strBuilder3);
      assertNotSame(strBuilder4, strBuilder0);
      assertSame(strBuilder4, strBuilder2);
      assertNotSame(strBuilder4, strBuilder1);
      
      StrBuilder strBuilder5 = new StrBuilder();
      assertFalse(strBuilder5.isNotEmpty());
      assertEquals(0, strBuilder5.size());
      assertNull(strBuilder5.getNullText());
      assertEquals(0, strBuilder5.length());
      assertNull(strBuilder5.getNewLineText());
      assertEquals(32, strBuilder5.capacity());
      assertTrue(strBuilder5.isEmpty());
      assertNotNull(strBuilder5);
      assertFalse(strBuilder5.equals((Object)strBuilder0));
      assertFalse(strBuilder5.equals((Object)strBuilder2));
      assertFalse(strBuilder5.equals((Object)strBuilder4));
      assertFalse(strBuilder5.equals((Object)strBuilder1));
      assertTrue(strBuilder5.equals((Object)strBuilder3));
      
      int int0 = (-1791);
      String string0 = strBuilder2.midString((-1791), 2);
      assertNull(strBuilder2.getNewLineText());
      assertNull(strBuilder2.getNullText());
      assertTrue(strBuilder2.isNotEmpty());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(2, strBuilder2.length());
      assertEquals(2, strBuilder2.size());
      assertEquals(32, strBuilder2.capacity());
      assertNotNull(string0);
      assertEquals("0\n", string0);
      assertFalse(strBuilder2.equals((Object)strBuilder1));
      assertFalse(strBuilder2.equals((Object)strBuilder3));
      assertFalse(strBuilder2.equals((Object)strBuilder5));
      assertFalse(strBuilder2.equals((Object)strBuilder0));
      assertNotSame(strBuilder2, strBuilder1);
      assertNotSame(strBuilder2, strBuilder3);
      assertNotSame(strBuilder2, strBuilder5);
      assertSame(strBuilder2, strBuilder4);
      assertNotSame(strBuilder2, strBuilder0);
      
      // Undeclared exception!
      try { 
        strBuilder5.replace((-2610), 32, "");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -2610
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("$8tMis&#;");
      assertEquals(9, strBuilder0.size());
      assertEquals(9, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(41, strBuilder0.capacity());
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNotNull(strBuilder0);
      
      Object[] objectArray0 = new Object[8];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      objectArray0[1] = (Object) "$8tMis&#;";
      objectArray0[2] = (Object) strBuilder0;
      objectArray0[3] = (Object) strBuilder0;
      objectArray0[4] = (Object) "$8tMis&#;";
      objectArray0[5] = (Object) strBuilder0;
      objectArray0[6] = (Object) strBuilder0;
      objectArray0[7] = (Object) "$8tMis&#;";
      StrBuilder strBuilder1 = strBuilder0.appendWithSeparators(objectArray0, "$8tMis&#;");
      assertEquals(1224, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(2412, strBuilder0.capacity());
      assertEquals(1224, strBuilder0.length());
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(2412, strBuilder1.capacity());
      assertEquals(1224, strBuilder1.size());
      assertEquals(1224, strBuilder1.length());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertTrue(strBuilder1.isNotEmpty());
      assertNotNull(strBuilder1);
      assertEquals(8, objectArray0.length);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      
      StrBuilder strBuilder2 = strBuilder0.appendSeparator("$8tMis&#;", Integer.MAX_VALUE);
      assertNull(strBuilder0.getNullText());
      assertEquals(2412, strBuilder0.capacity());
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(1233, strBuilder0.length());
      assertEquals(1233, strBuilder0.size());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(2412, strBuilder2.capacity());
      assertTrue(strBuilder2.isNotEmpty());
      assertEquals(1233, strBuilder2.size());
      assertNull(strBuilder2.getNullText());
      assertEquals(1233, strBuilder2.length());
      assertFalse(strBuilder2.isEmpty());
      assertNotNull(strBuilder2);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      
      StrBuilder strBuilder3 = new StrBuilder("$8tMis&#;");
      assertEquals(41, strBuilder3.capacity());
      assertEquals(9, strBuilder3.length());
      assertNull(strBuilder3.getNewLineText());
      assertEquals(9, strBuilder3.size());
      assertTrue(strBuilder3.isNotEmpty());
      assertNull(strBuilder3.getNullText());
      assertFalse(strBuilder3.isEmpty());
      assertNotNull(strBuilder3);
      assertFalse(strBuilder3.equals((Object)strBuilder2));
      assertFalse(strBuilder3.equals((Object)strBuilder1));
      assertFalse(strBuilder3.equals((Object)strBuilder0));
      
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder3.new StrBuilderReader();
      assertEquals(41, strBuilder3.capacity());
      assertEquals(9, strBuilder3.length());
      assertNull(strBuilder3.getNewLineText());
      assertEquals(9, strBuilder3.size());
      assertTrue(strBuilder3.isNotEmpty());
      assertNull(strBuilder3.getNullText());
      assertFalse(strBuilder3.isEmpty());
      assertTrue(strBuilder_StrBuilderReader0.markSupported());
      assertTrue(strBuilder_StrBuilderReader0.ready());
      assertNotNull(strBuilder_StrBuilderReader0);
      assertFalse(strBuilder3.equals((Object)strBuilder2));
      assertFalse(strBuilder3.equals((Object)strBuilder1));
      assertFalse(strBuilder3.equals((Object)strBuilder0));
      
      StrBuilder strBuilder4 = new StrBuilder("&\"@0t47E~");
      assertNull(strBuilder4.getNullText());
      assertTrue(strBuilder4.isNotEmpty());
      assertFalse(strBuilder4.isEmpty());
      assertEquals(9, strBuilder4.length());
      assertEquals(9, strBuilder4.size());
      assertEquals(41, strBuilder4.capacity());
      assertNull(strBuilder4.getNewLineText());
      assertNotNull(strBuilder4);
      assertFalse(strBuilder4.equals((Object)strBuilder3));
      assertFalse(strBuilder4.equals((Object)strBuilder0));
      assertFalse(strBuilder4.equals((Object)strBuilder1));
      assertFalse(strBuilder4.equals((Object)strBuilder2));
      
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader1 = strBuilder4.new StrBuilderReader();
      assertTrue(strBuilder_StrBuilderReader1.markSupported());
      assertTrue(strBuilder_StrBuilderReader1.ready());
      assertNull(strBuilder4.getNullText());
      assertTrue(strBuilder4.isNotEmpty());
      assertFalse(strBuilder4.isEmpty());
      assertEquals(9, strBuilder4.length());
      assertEquals(9, strBuilder4.size());
      assertEquals(41, strBuilder4.capacity());
      assertNull(strBuilder4.getNewLineText());
      assertNotNull(strBuilder_StrBuilderReader1);
      assertFalse(strBuilder_StrBuilderReader1.equals((Object)strBuilder_StrBuilderReader0));
      assertFalse(strBuilder4.equals((Object)strBuilder3));
      assertFalse(strBuilder4.equals((Object)strBuilder0));
      assertFalse(strBuilder4.equals((Object)strBuilder1));
      assertFalse(strBuilder4.equals((Object)strBuilder2));
      
      int int0 = strBuilder_StrBuilderReader1.read();
      assertTrue(strBuilder_StrBuilderReader1.markSupported());
      assertTrue(strBuilder_StrBuilderReader1.ready());
      assertNull(strBuilder4.getNullText());
      assertTrue(strBuilder4.isNotEmpty());
      assertFalse(strBuilder4.isEmpty());
      assertEquals(9, strBuilder4.length());
      assertEquals(9, strBuilder4.size());
      assertEquals(41, strBuilder4.capacity());
      assertNull(strBuilder4.getNewLineText());
      assertEquals(38, int0);
      assertFalse(strBuilder_StrBuilderReader1.equals((Object)strBuilder_StrBuilderReader0));
      assertFalse(strBuilder4.equals((Object)strBuilder3));
      assertFalse(strBuilder4.equals((Object)strBuilder0));
      assertFalse(strBuilder4.equals((Object)strBuilder1));
      assertFalse(strBuilder4.equals((Object)strBuilder2));
      assertNotSame(strBuilder_StrBuilderReader1, strBuilder_StrBuilderReader0);
      assertNotSame(strBuilder4, strBuilder3);
      assertNotSame(strBuilder4, strBuilder0);
      assertNotSame(strBuilder4, strBuilder1);
      assertNotSame(strBuilder4, strBuilder2);
      
      boolean boolean0 = strBuilder2.startsWith("nPllYi.?UZOS:<5K");
      assertNull(strBuilder0.getNullText());
      assertEquals(2412, strBuilder0.capacity());
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(1233, strBuilder0.length());
      assertEquals(1233, strBuilder0.size());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(2412, strBuilder2.capacity());
      assertTrue(strBuilder2.isNotEmpty());
      assertEquals(1233, strBuilder2.size());
      assertNull(strBuilder2.getNullText());
      assertEquals(1233, strBuilder2.length());
      assertFalse(strBuilder2.isEmpty());
      assertFalse(boolean0);
      assertFalse(strBuilder0.equals((Object)strBuilder4));
      assertFalse(strBuilder0.equals((Object)strBuilder3));
      assertFalse(strBuilder2.equals((Object)strBuilder3));
      assertFalse(strBuilder2.equals((Object)strBuilder4));
      assertNotSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertNotSame(strBuilder0, strBuilder3);
      assertNotSame(strBuilder2, strBuilder3);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertNotSame(strBuilder2, strBuilder4);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(0);
      assertTrue(strBuilder0.isEmpty());
      assertFalse(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.append((float) (-42));
      assertEquals(5, strBuilder0.size());
      assertEquals(5, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(32, strBuilder1.capacity());
      assertTrue(strBuilder1.isNotEmpty());
      assertEquals(5, strBuilder1.size());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(5, strBuilder1.length());
      assertNotNull(strBuilder1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      
      boolean boolean0 = strBuilder0.contains('Q');
      assertEquals(5, strBuilder0.size());
      assertEquals(5, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertFalse(boolean0);
      assertSame(strBuilder0, strBuilder1);
      
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
      assertEquals(5, strBuilder0.size());
      assertEquals(5, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder_StrBuilderReader0.ready());
      assertTrue(strBuilder_StrBuilderReader0.markSupported());
      assertNotNull(strBuilder_StrBuilderReader0);
      
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) strBuilder_StrBuilderReader0;
      objectArray0[2] = (Object) strBuilder0;
      StrBuilder strBuilder2 = strBuilder1.append("', has a length less than 2", objectArray0);
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.size());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(32, strBuilder1.size());
      assertEquals(32, strBuilder1.length());
      assertEquals(32, strBuilder1.capacity());
      assertTrue(strBuilder1.isNotEmpty());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(32, strBuilder2.length());
      assertEquals(32, strBuilder2.size());
      assertNull(strBuilder2.getNullText());
      assertFalse(strBuilder2.isEmpty());
      assertNull(strBuilder2.getNewLineText());
      assertTrue(strBuilder2.isNotEmpty());
      assertEquals(32, strBuilder2.capacity());
      assertNotNull(strBuilder2);
      assertEquals(3, objectArray0.length);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      
      StrBuilder strBuilder3 = new StrBuilder((-42));
      assertNull(strBuilder3.getNewLineText());
      assertEquals(32, strBuilder3.capacity());
      assertTrue(strBuilder3.isEmpty());
      assertEquals(0, strBuilder3.length());
      assertFalse(strBuilder3.isNotEmpty());
      assertNull(strBuilder3.getNullText());
      assertEquals(0, strBuilder3.size());
      assertNotNull(strBuilder3);
      assertFalse(strBuilder3.equals((Object)strBuilder1));
      assertFalse(strBuilder3.equals((Object)strBuilder0));
      assertFalse(strBuilder3.equals((Object)strBuilder2));
      
      StrBuilder strBuilder4 = strBuilder1.append("*.jk=y?G8[");
      assertEquals(42, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(84, strBuilder0.capacity());
      assertEquals(42, strBuilder0.size());
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder1.getNullText());
      assertEquals(84, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(42, strBuilder1.size());
      assertEquals(42, strBuilder1.length());
      assertTrue(strBuilder1.isNotEmpty());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(42, strBuilder4.size());
      assertNull(strBuilder4.getNewLineText());
      assertEquals(42, strBuilder4.length());
      assertNull(strBuilder4.getNullText());
      assertEquals(84, strBuilder4.capacity());
      assertTrue(strBuilder4.isNotEmpty());
      assertFalse(strBuilder4.isEmpty());
      assertNotNull(strBuilder4);
      assertFalse(strBuilder0.equals((Object)strBuilder3));
      assertFalse(strBuilder1.equals((Object)strBuilder3));
      assertFalse(strBuilder4.equals((Object)strBuilder3));
      assertSame(strBuilder0, strBuilder2);
      assertNotSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder1, strBuilder4);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertNotSame(strBuilder1, strBuilder3);
      assertSame(strBuilder4, strBuilder2);
      assertSame(strBuilder4, strBuilder1);
      assertNotSame(strBuilder4, strBuilder3);
      assertSame(strBuilder4, strBuilder0);
      
      StrBuilder strBuilder5 = strBuilder0.replaceFirst('n', 'Q');
      assertEquals(42, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(84, strBuilder0.capacity());
      assertEquals(42, strBuilder0.size());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(42, strBuilder5.size());
      assertNull(strBuilder5.getNewLineText());
      assertEquals(42, strBuilder5.length());
      assertEquals(84, strBuilder5.capacity());
      assertTrue(strBuilder5.isNotEmpty());
      assertNull(strBuilder5.getNullText());
      assertFalse(strBuilder5.isEmpty());
      assertNotNull(strBuilder5);
      assertFalse(strBuilder0.equals((Object)strBuilder3));
      assertFalse(strBuilder5.equals((Object)strBuilder3));
      assertSame(strBuilder0, strBuilder2);
      assertNotSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder5, strBuilder2);
      assertSame(strBuilder5, strBuilder1);
      assertNotSame(strBuilder5, strBuilder3);
      assertSame(strBuilder5, strBuilder0);
      assertSame(strBuilder5, strBuilder4);
      
      String string0 = strBuilder0.leftString(0);
      assertEquals(42, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(84, strBuilder0.capacity());
      assertEquals(42, strBuilder0.size());
      assertTrue(strBuilder0.isNotEmpty());
      assertNotNull(string0);
      assertEquals("", string0);
      assertFalse(strBuilder0.equals((Object)strBuilder3));
      assertSame(strBuilder0, strBuilder2);
      assertNotSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder4);
      
      StrBuilder strBuilder6 = new StrBuilder(0);
      assertEquals(0, strBuilder6.length());
      assertEquals(0, strBuilder6.size());
      assertNull(strBuilder6.getNullText());
      assertNull(strBuilder6.getNewLineText());
      assertEquals(32, strBuilder6.capacity());
      assertTrue(strBuilder6.isEmpty());
      assertFalse(strBuilder6.isNotEmpty());
      assertNotNull(strBuilder6);
      assertFalse(strBuilder6.equals((Object)strBuilder5));
      assertFalse(strBuilder6.equals((Object)strBuilder0));
      assertFalse(strBuilder6.equals((Object)strBuilder2));
      assertFalse(strBuilder6.equals((Object)strBuilder4));
      assertFalse(strBuilder6.equals((Object)strBuilder1));
      assertTrue(strBuilder6.equals((Object)strBuilder3));
      
      String string1 = strBuilder0.build();
      assertEquals(42, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(84, strBuilder0.capacity());
      assertEquals(42, strBuilder0.size());
      assertTrue(strBuilder0.isNotEmpty());
      assertNotNull(string1);
      assertEquals("-42.0', has a leQgth less than 2*.jk=y?G8[", string1);
      assertFalse(strBuilder0.equals((Object)strBuilder3));
      assertFalse(strBuilder0.equals((Object)strBuilder6));
      assertFalse(string1.equals((Object)string0));
      assertSame(strBuilder0, strBuilder2);
      assertNotSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder5);
      assertNotSame(strBuilder0, strBuilder6);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder4);
      
      StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer0 = strBuilder1.new StrBuilderTokenizer();
      assertEquals(42, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(84, strBuilder0.capacity());
      assertEquals(42, strBuilder0.size());
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder1.getNullText());
      assertEquals(84, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(42, strBuilder1.size());
      assertEquals(42, strBuilder1.length());
      assertTrue(strBuilder1.isNotEmpty());
      assertFalse(strBuilder1.isEmpty());
      assertEquals((-1), strBuilder_StrBuilderTokenizer0.previousIndex());
      assertTrue(strBuilder_StrBuilderTokenizer0.isIgnoreEmptyTokens());
      assertFalse(strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull());
      assertEquals(0, strBuilder_StrBuilderTokenizer0.nextIndex());
      assertNotNull(strBuilder_StrBuilderTokenizer0);
      assertFalse(strBuilder0.equals((Object)strBuilder3));
      assertFalse(strBuilder0.equals((Object)strBuilder6));
      assertFalse(strBuilder1.equals((Object)strBuilder6));
      assertFalse(strBuilder1.equals((Object)strBuilder3));
      
      String string2 = strBuilder_StrBuilderTokenizer0.getContent();
      assertEquals(42, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(84, strBuilder0.capacity());
      assertEquals(42, strBuilder0.size());
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder1.getNullText());
      assertEquals(84, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(42, strBuilder1.size());
      assertEquals(42, strBuilder1.length());
      assertTrue(strBuilder1.isNotEmpty());
      assertFalse(strBuilder1.isEmpty());
      assertEquals((-1), strBuilder_StrBuilderTokenizer0.previousIndex());
      assertTrue(strBuilder_StrBuilderTokenizer0.isIgnoreEmptyTokens());
      assertFalse(strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull());
      assertEquals(0, strBuilder_StrBuilderTokenizer0.nextIndex());
      assertNotNull(string2);
      assertEquals("-42.0', has a leQgth less than 2*.jk=y?G8[", string2);
      assertFalse(strBuilder0.equals((Object)strBuilder3));
      assertFalse(strBuilder0.equals((Object)strBuilder6));
      assertFalse(strBuilder1.equals((Object)strBuilder6));
      assertFalse(strBuilder1.equals((Object)strBuilder3));
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertSame(strBuilder0, strBuilder2);
      assertNotSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder5);
      assertNotSame(strBuilder0, strBuilder6);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder4);
      assertNotSame(strBuilder1, strBuilder6);
      assertSame(strBuilder1, strBuilder4);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertNotSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder5);
      
      StrBuilder strBuilder7 = new StrBuilder(127);
      assertEquals(127, strBuilder7.capacity());
      assertTrue(strBuilder7.isEmpty());
      assertNull(strBuilder7.getNewLineText());
      assertNull(strBuilder7.getNullText());
      assertEquals(0, strBuilder7.length());
      assertEquals(0, strBuilder7.size());
      assertFalse(strBuilder7.isNotEmpty());
      assertNotNull(strBuilder7);
      assertFalse(strBuilder7.equals((Object)strBuilder5));
      assertTrue(strBuilder7.equals((Object)strBuilder6));
      assertFalse(strBuilder7.equals((Object)strBuilder2));
      assertFalse(strBuilder7.equals((Object)strBuilder0));
      assertFalse(strBuilder7.equals((Object)strBuilder1));
      assertFalse(strBuilder7.equals((Object)strBuilder4));
      assertTrue(strBuilder7.equals((Object)strBuilder3));
      
      StrBuilder strBuilder8 = strBuilder1.appendln((double) (-42));
      assertNull(strBuilder0.getNullText());
      assertEquals(48, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(84, strBuilder0.capacity());
      assertEquals(48, strBuilder0.size());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(48, strBuilder8.size());
      assertEquals(48, strBuilder8.length());
      assertEquals(84, strBuilder8.capacity());
      assertFalse(strBuilder8.isEmpty());
      assertNull(strBuilder8.getNewLineText());
      assertTrue(strBuilder8.isNotEmpty());
      assertNull(strBuilder8.getNullText());
      assertNull(strBuilder1.getNullText());
      assertEquals(84, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(48, strBuilder1.size());
      assertEquals(48, strBuilder1.length());
      assertTrue(strBuilder1.isNotEmpty());
      assertFalse(strBuilder1.isEmpty());
      assertNotNull(strBuilder8);
      assertFalse(strBuilder0.equals((Object)strBuilder7));
      assertFalse(strBuilder0.equals((Object)strBuilder3));
      assertFalse(strBuilder0.equals((Object)strBuilder6));
      assertFalse(strBuilder8.equals((Object)strBuilder7));
      assertFalse(strBuilder8.equals((Object)strBuilder6));
      assertFalse(strBuilder8.equals((Object)strBuilder3));
      assertFalse(strBuilder1.equals((Object)strBuilder6));
      assertFalse(strBuilder1.equals((Object)strBuilder3));
      assertFalse(strBuilder1.equals((Object)strBuilder7));
      assertSame(strBuilder0, strBuilder2);
      assertNotSame(strBuilder0, strBuilder7);
      assertNotSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder8);
      assertNotSame(strBuilder0, strBuilder6);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder8, strBuilder5);
      assertSame(strBuilder8, strBuilder2);
      assertSame(strBuilder8, strBuilder1);
      assertNotSame(strBuilder8, strBuilder7);
      assertNotSame(strBuilder8, strBuilder6);
      assertSame(strBuilder8, strBuilder4);
      assertNotSame(strBuilder8, strBuilder3);
      assertSame(strBuilder8, strBuilder0);
      assertNotSame(strBuilder1, strBuilder6);
      assertSame(strBuilder1, strBuilder4);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertNotSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder5);
      assertSame(strBuilder1, strBuilder8);
      assertNotSame(strBuilder1, strBuilder7);
      
      String string3 = strBuilder3.build();
      assertNull(strBuilder3.getNewLineText());
      assertEquals(32, strBuilder3.capacity());
      assertTrue(strBuilder3.isEmpty());
      assertEquals(0, strBuilder3.length());
      assertFalse(strBuilder3.isNotEmpty());
      assertNull(strBuilder3.getNullText());
      assertEquals(0, strBuilder3.size());
      assertNotNull(string3);
      assertEquals("", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string0));
      assertFalse(strBuilder3.equals((Object)strBuilder5));
      assertFalse(strBuilder3.equals((Object)strBuilder1));
      assertTrue(strBuilder3.equals((Object)strBuilder6));
      assertFalse(strBuilder3.equals((Object)strBuilder8));
      assertFalse(strBuilder3.equals((Object)strBuilder0));
      assertTrue(strBuilder3.equals((Object)strBuilder7));
      assertFalse(strBuilder3.equals((Object)strBuilder4));
      assertFalse(strBuilder3.equals((Object)strBuilder2));
      assertNotSame(strBuilder3, strBuilder5);
      assertNotSame(strBuilder3, strBuilder1);
      assertNotSame(strBuilder3, strBuilder6);
      assertNotSame(strBuilder3, strBuilder8);
      assertNotSame(strBuilder3, strBuilder0);
      assertNotSame(strBuilder3, strBuilder7);
      assertNotSame(strBuilder3, strBuilder4);
      assertNotSame(strBuilder3, strBuilder2);
      
      StrBuilder strBuilder9 = strBuilder4.setLength(17);
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(17, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(84, strBuilder0.capacity());
      assertEquals(17, strBuilder0.length());
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder1.getNullText());
      assertEquals(84, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(17, strBuilder1.length());
      assertTrue(strBuilder1.isNotEmpty());
      assertEquals(17, strBuilder1.size());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(17, strBuilder9.size());
      assertEquals(17, strBuilder9.length());
      assertNull(strBuilder9.getNullText());
      assertTrue(strBuilder9.isNotEmpty());
      assertNull(strBuilder9.getNewLineText());
      assertFalse(strBuilder9.isEmpty());
      assertEquals(84, strBuilder9.capacity());
      assertNull(strBuilder4.getNewLineText());
      assertNull(strBuilder4.getNullText());
      assertEquals(84, strBuilder4.capacity());
      assertTrue(strBuilder4.isNotEmpty());
      assertFalse(strBuilder4.isEmpty());
      assertEquals(17, strBuilder4.length());
      assertEquals(17, strBuilder4.size());
      assertNotNull(strBuilder9);
      assertFalse(strBuilder0.equals((Object)strBuilder7));
      assertFalse(strBuilder0.equals((Object)strBuilder3));
      assertFalse(strBuilder0.equals((Object)strBuilder6));
      assertFalse(strBuilder1.equals((Object)strBuilder6));
      assertFalse(strBuilder1.equals((Object)strBuilder3));
      assertFalse(strBuilder1.equals((Object)strBuilder7));
      assertFalse(strBuilder9.equals((Object)strBuilder3));
      assertFalse(strBuilder9.equals((Object)strBuilder7));
      assertFalse(strBuilder9.equals((Object)strBuilder6));
      assertFalse(strBuilder4.equals((Object)strBuilder3));
      assertFalse(strBuilder4.equals((Object)strBuilder7));
      assertFalse(strBuilder4.equals((Object)strBuilder6));
      assertSame(strBuilder0, strBuilder2);
      assertNotSame(strBuilder0, strBuilder7);
      assertNotSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder8);
      assertSame(strBuilder0, strBuilder9);
      assertNotSame(strBuilder0, strBuilder6);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder4);
      assertNotSame(strBuilder1, strBuilder6);
      assertSame(strBuilder1, strBuilder4);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertNotSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder5);
      assertSame(strBuilder1, strBuilder9);
      assertSame(strBuilder1, strBuilder8);
      assertNotSame(strBuilder1, strBuilder7);
      assertSame(strBuilder9, strBuilder8);
      assertSame(strBuilder9, strBuilder1);
      assertSame(strBuilder9, strBuilder5);
      assertSame(strBuilder9, strBuilder0);
      assertSame(strBuilder9, strBuilder4);
      assertNotSame(strBuilder9, strBuilder3);
      assertSame(strBuilder9, strBuilder2);
      assertNotSame(strBuilder9, strBuilder7);
      assertNotSame(strBuilder9, strBuilder6);
      assertSame(strBuilder4, strBuilder2);
      assertSame(strBuilder4, strBuilder1);
      assertSame(strBuilder4, strBuilder5);
      assertNotSame(strBuilder4, strBuilder3);
      assertSame(strBuilder4, strBuilder0);
      assertSame(strBuilder4, strBuilder8);
      assertSame(strBuilder4, strBuilder9);
      assertNotSame(strBuilder4, strBuilder7);
      assertNotSame(strBuilder4, strBuilder6);
      
      char[] charArray0 = strBuilder4.toCharArray(0, 321);
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(17, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(84, strBuilder0.capacity());
      assertEquals(17, strBuilder0.length());
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder1.getNullText());
      assertEquals(84, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(17, strBuilder1.length());
      assertTrue(strBuilder1.isNotEmpty());
      assertEquals(17, strBuilder1.size());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder4.getNewLineText());
      assertNull(strBuilder4.getNullText());
      assertEquals(84, strBuilder4.capacity());
      assertTrue(strBuilder4.isNotEmpty());
      assertFalse(strBuilder4.isEmpty());
      assertEquals(17, strBuilder4.length());
      assertEquals(17, strBuilder4.size());
      assertNotNull(charArray0);
      assertFalse(strBuilder0.equals((Object)strBuilder7));
      assertFalse(strBuilder0.equals((Object)strBuilder3));
      assertFalse(strBuilder0.equals((Object)strBuilder6));
      assertFalse(strBuilder1.equals((Object)strBuilder6));
      assertFalse(strBuilder1.equals((Object)strBuilder3));
      assertFalse(strBuilder1.equals((Object)strBuilder7));
      assertFalse(strBuilder4.equals((Object)strBuilder3));
      assertFalse(strBuilder4.equals((Object)strBuilder7));
      assertFalse(strBuilder4.equals((Object)strBuilder6));
      assertEquals(17, charArray0.length);
      assertSame(strBuilder0, strBuilder2);
      assertNotSame(strBuilder0, strBuilder7);
      assertNotSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder8);
      assertSame(strBuilder0, strBuilder9);
      assertNotSame(strBuilder0, strBuilder6);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder4);
      assertNotSame(strBuilder1, strBuilder6);
      assertSame(strBuilder1, strBuilder4);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertNotSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder5);
      assertSame(strBuilder1, strBuilder9);
      assertSame(strBuilder1, strBuilder8);
      assertNotSame(strBuilder1, strBuilder7);
      assertSame(strBuilder4, strBuilder2);
      assertSame(strBuilder4, strBuilder1);
      assertSame(strBuilder4, strBuilder5);
      assertNotSame(strBuilder4, strBuilder3);
      assertSame(strBuilder4, strBuilder0);
      assertSame(strBuilder4, strBuilder8);
      assertSame(strBuilder4, strBuilder9);
      assertNotSame(strBuilder4, strBuilder7);
      assertNotSame(strBuilder4, strBuilder6);
      
      int int0 = strBuilder0.indexOf("*.jk=y?G8[", 5);
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(17, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(84, strBuilder0.capacity());
      assertEquals(17, strBuilder0.length());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals((-1), int0);
      assertFalse(strBuilder0.equals((Object)strBuilder7));
      assertFalse(strBuilder0.equals((Object)strBuilder3));
      assertFalse(strBuilder0.equals((Object)strBuilder6));
      assertSame(strBuilder0, strBuilder2);
      assertNotSame(strBuilder0, strBuilder7);
      assertNotSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder8);
      assertSame(strBuilder0, strBuilder9);
      assertNotSame(strBuilder0, strBuilder6);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder4);
      
      StrBuilder strBuilder10 = strBuilder3.appendSeparator("", 321);
      assertEquals(32, strBuilder10.capacity());
      assertTrue(strBuilder10.isEmpty());
      assertEquals(0, strBuilder10.size());
      assertEquals(0, strBuilder10.length());
      assertFalse(strBuilder10.isNotEmpty());
      assertNull(strBuilder10.getNullText());
      assertNull(strBuilder10.getNewLineText());
      assertNull(strBuilder3.getNewLineText());
      assertEquals(32, strBuilder3.capacity());
      assertTrue(strBuilder3.isEmpty());
      assertEquals(0, strBuilder3.length());
      assertFalse(strBuilder3.isNotEmpty());
      assertNull(strBuilder3.getNullText());
      assertEquals(0, strBuilder3.size());
      assertNotNull(strBuilder10);
      assertFalse(strBuilder10.equals((Object)strBuilder5));
      assertFalse(strBuilder10.equals((Object)strBuilder2));
      assertFalse(strBuilder10.equals((Object)strBuilder1));
      assertFalse(strBuilder10.equals((Object)strBuilder0));
      assertFalse(strBuilder10.equals((Object)strBuilder9));
      assertTrue(strBuilder10.equals((Object)strBuilder7));
      assertFalse(strBuilder10.equals((Object)strBuilder4));
      assertFalse(strBuilder10.equals((Object)strBuilder8));
      assertTrue(strBuilder10.equals((Object)strBuilder6));
      assertFalse(strBuilder3.equals((Object)strBuilder5));
      assertFalse(strBuilder3.equals((Object)strBuilder1));
      assertTrue(strBuilder3.equals((Object)strBuilder6));
      assertFalse(strBuilder3.equals((Object)strBuilder8));
      assertFalse(strBuilder3.equals((Object)strBuilder0));
      assertTrue(strBuilder3.equals((Object)strBuilder7));
      assertFalse(strBuilder3.equals((Object)strBuilder9));
      assertFalse(strBuilder3.equals((Object)strBuilder4));
      assertFalse(strBuilder3.equals((Object)strBuilder2));
      assertNotSame(strBuilder10, strBuilder5);
      assertNotSame(strBuilder10, strBuilder2);
      assertNotSame(strBuilder10, strBuilder1);
      assertNotSame(strBuilder10, strBuilder7);
      assertNotSame(strBuilder10, strBuilder6);
      assertNotSame(strBuilder10, strBuilder0);
      assertSame(strBuilder10, strBuilder3);
      assertNotSame(strBuilder10, strBuilder9);
      assertNotSame(strBuilder10, strBuilder4);
      assertNotSame(strBuilder10, strBuilder8);
      assertNotSame(strBuilder3, strBuilder5);
      assertNotSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder10);
      assertNotSame(strBuilder3, strBuilder6);
      assertNotSame(strBuilder3, strBuilder8);
      assertNotSame(strBuilder3, strBuilder0);
      assertNotSame(strBuilder3, strBuilder9);
      assertNotSame(strBuilder3, strBuilder7);
      assertNotSame(strBuilder3, strBuilder4);
      assertNotSame(strBuilder3, strBuilder2);
      
      boolean boolean1 = strBuilder0.endsWith("");
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(17, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(84, strBuilder0.capacity());
      assertEquals(17, strBuilder0.length());
      assertTrue(strBuilder0.isNotEmpty());
      assertTrue(boolean1);
      assertFalse(strBuilder0.equals((Object)strBuilder7));
      assertFalse(strBuilder0.equals((Object)strBuilder3));
      assertFalse(strBuilder0.equals((Object)strBuilder10));
      assertFalse(strBuilder0.equals((Object)strBuilder6));
      assertFalse(boolean1 == boolean0);
      assertSame(strBuilder0, strBuilder2);
      assertNotSame(strBuilder0, strBuilder7);
      assertNotSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder5);
      assertNotSame(strBuilder0, strBuilder10);
      assertSame(strBuilder0, strBuilder8);
      assertSame(strBuilder0, strBuilder9);
      assertNotSame(strBuilder0, strBuilder6);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder4);
      
      StrBuilder strBuilder11 = strBuilder2.deleteFirst("");
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(17, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(84, strBuilder0.capacity());
      assertEquals(17, strBuilder0.length());
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder1.getNullText());
      assertEquals(84, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(17, strBuilder1.length());
      assertTrue(strBuilder1.isNotEmpty());
      assertEquals(17, strBuilder1.size());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(17, strBuilder2.size());
      assertNull(strBuilder2.getNullText());
      assertEquals(84, strBuilder2.capacity());
      assertEquals(17, strBuilder2.length());
      assertFalse(strBuilder2.isEmpty());
      assertNull(strBuilder2.getNewLineText());
      assertTrue(strBuilder2.isNotEmpty());
      assertNull(strBuilder11.getNewLineText());
      assertFalse(strBuilder11.isEmpty());
      assertEquals(17, strBuilder11.size());
      assertNull(strBuilder11.getNullText());
      assertEquals(84, strBuilder11.capacity());
      assertEquals(17, strBuilder11.length());
      assertTrue(strBuilder11.isNotEmpty());
      assertNotNull(strBuilder11);
      assertFalse(strBuilder0.equals((Object)strBuilder7));
      assertFalse(strBuilder0.equals((Object)strBuilder3));
      assertFalse(strBuilder0.equals((Object)strBuilder10));
      assertFalse(strBuilder0.equals((Object)strBuilder6));
      assertFalse(strBuilder1.equals((Object)strBuilder6));
      assertFalse(strBuilder1.equals((Object)strBuilder3));
      assertFalse(strBuilder1.equals((Object)strBuilder10));
      assertFalse(strBuilder1.equals((Object)strBuilder7));
      assertFalse(strBuilder2.equals((Object)strBuilder7));
      assertFalse(strBuilder2.equals((Object)strBuilder10));
      assertFalse(strBuilder2.equals((Object)strBuilder3));
      assertFalse(strBuilder2.equals((Object)strBuilder6));
      assertFalse(strBuilder11.equals((Object)strBuilder10));
      assertFalse(strBuilder11.equals((Object)strBuilder3));
      assertFalse(strBuilder11.equals((Object)strBuilder6));
      assertFalse(strBuilder11.equals((Object)strBuilder7));
      assertEquals(3, objectArray0.length);
      assertSame(strBuilder0, strBuilder11);
      assertSame(strBuilder0, strBuilder2);
      assertNotSame(strBuilder0, strBuilder7);
      assertNotSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder5);
      assertNotSame(strBuilder0, strBuilder10);
      assertSame(strBuilder0, strBuilder8);
      assertSame(strBuilder0, strBuilder9);
      assertNotSame(strBuilder0, strBuilder6);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder4);
      assertNotSame(strBuilder1, strBuilder6);
      assertSame(strBuilder1, strBuilder4);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder11);
      assertNotSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder5);
      assertNotSame(strBuilder1, strBuilder10);
      assertSame(strBuilder1, strBuilder9);
      assertSame(strBuilder1, strBuilder8);
      assertNotSame(strBuilder1, strBuilder7);
      assertSame(strBuilder2, strBuilder5);
      assertNotSame(strBuilder2, strBuilder7);
      assertSame(strBuilder2, strBuilder8);
      assertSame(strBuilder2, strBuilder11);
      assertSame(strBuilder2, strBuilder9);
      assertNotSame(strBuilder2, strBuilder10);
      assertNotSame(strBuilder2, strBuilder3);
      assertNotSame(strBuilder2, strBuilder6);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder4);
      assertSame(strBuilder2, strBuilder1);
      assertNotSame(strBuilder11, strBuilder10);
      assertNotSame(strBuilder11, strBuilder3);
      assertSame(strBuilder11, strBuilder0);
      assertNotSame(strBuilder11, strBuilder6);
      assertNotSame(strBuilder11, strBuilder7);
      assertSame(strBuilder11, strBuilder8);
      assertSame(strBuilder11, strBuilder9);
      assertSame(strBuilder11, strBuilder5);
      assertSame(strBuilder11, strBuilder4);
      assertSame(strBuilder11, strBuilder2);
      assertSame(strBuilder11, strBuilder1);
      
      // Undeclared exception!
      try { 
        strBuilder3.appendln((String) null, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder((-1));
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.replaceFirst('^', 'R');
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertFalse(strBuilder1.isNotEmpty());
      assertTrue(strBuilder1.isEmpty());
      assertEquals(0, strBuilder1.length());
      assertEquals(0, strBuilder1.size());
      assertNotNull(strBuilder1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      
      StringBuffer stringBuffer0 = new StringBuffer("-i!");
      assertEquals(3, stringBuffer0.length());
      assertEquals("-i!", stringBuffer0.toString());
      assertNotNull(stringBuffer0);
      
      StrBuilder strBuilder2 = strBuilder1.deleteAll((String) null);
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertFalse(strBuilder1.isNotEmpty());
      assertTrue(strBuilder1.isEmpty());
      assertEquals(0, strBuilder1.length());
      assertEquals(0, strBuilder1.size());
      assertEquals(32, strBuilder2.capacity());
      assertEquals(0, strBuilder2.length());
      assertEquals(0, strBuilder2.size());
      assertFalse(strBuilder2.isNotEmpty());
      assertTrue(strBuilder2.isEmpty());
      assertNull(strBuilder2.getNullText());
      assertNull(strBuilder2.getNewLineText());
      assertNotNull(strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      
      StrBuilder strBuilder3 = strBuilder2.append((float) (-1));
      assertFalse(strBuilder0.isEmpty());
      assertEquals(4, strBuilder0.size());
      assertEquals(4, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertFalse(strBuilder1.isEmpty());
      assertTrue(strBuilder1.isNotEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(4, strBuilder1.length());
      assertEquals(4, strBuilder1.size());
      assertFalse(strBuilder2.isEmpty());
      assertTrue(strBuilder2.isNotEmpty());
      assertEquals(32, strBuilder2.capacity());
      assertEquals(4, strBuilder2.length());
      assertEquals(4, strBuilder2.size());
      assertNull(strBuilder2.getNullText());
      assertNull(strBuilder2.getNewLineText());
      assertTrue(strBuilder3.isNotEmpty());
      assertFalse(strBuilder3.isEmpty());
      assertEquals(32, strBuilder3.capacity());
      assertEquals(4, strBuilder3.length());
      assertEquals(4, strBuilder3.size());
      assertNull(strBuilder3.getNullText());
      assertNull(strBuilder3.getNewLineText());
      assertNotNull(strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder3);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder2);
      assertSame(strBuilder3, strBuilder0);
      
      StrBuilder strBuilder4 = strBuilder1.replaceAll((String) null, ", Length: 0");
      assertFalse(strBuilder0.isEmpty());
      assertEquals(4, strBuilder0.size());
      assertEquals(4, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertFalse(strBuilder1.isEmpty());
      assertTrue(strBuilder1.isNotEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(4, strBuilder1.length());
      assertEquals(4, strBuilder1.size());
      assertFalse(strBuilder4.isEmpty());
      assertEquals(4, strBuilder4.size());
      assertEquals(4, strBuilder4.length());
      assertNull(strBuilder4.getNullText());
      assertNull(strBuilder4.getNewLineText());
      assertEquals(32, strBuilder4.capacity());
      assertTrue(strBuilder4.isNotEmpty());
      assertNotNull(strBuilder4);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder1, strBuilder4);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder4, strBuilder1);
      assertSame(strBuilder4, strBuilder2);
      assertSame(strBuilder4, strBuilder0);
      assertSame(strBuilder4, strBuilder3);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(3909);
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(3909, strBuilder0.capacity());
      assertFalse(strBuilder0.isNotEmpty());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.deleteAll((String) null);
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(3909, strBuilder0.capacity());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(3909, strBuilder1.capacity());
      assertEquals(0, strBuilder1.length());
      assertEquals(0, strBuilder1.size());
      assertFalse(strBuilder1.isNotEmpty());
      assertNull(strBuilder1.getNullText());
      assertTrue(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertNotNull(strBuilder1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("");
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertFalse(strBuilder0.isNotEmpty());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.replaceAll('r', 'r');
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(0, strBuilder1.length());
      assertEquals(0, strBuilder1.size());
      assertFalse(strBuilder1.isNotEmpty());
      assertNull(strBuilder1.getNullText());
      assertTrue(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertNotNull(strBuilder1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      
      StrBuilder strBuilder2 = strBuilder1.appendln('r');
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(2, strBuilder0.length());
      assertEquals(2, strBuilder0.size());
      assertTrue(strBuilder1.isNotEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(2, strBuilder1.length());
      assertEquals(2, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(32, strBuilder2.capacity());
      assertNull(strBuilder2.getNewLineText());
      assertFalse(strBuilder2.isEmpty());
      assertNull(strBuilder2.getNullText());
      assertEquals(2, strBuilder2.size());
      assertEquals(2, strBuilder2.length());
      assertTrue(strBuilder2.isNotEmpty());
      assertNotNull(strBuilder2);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      
      StrBuilder strBuilder3 = strBuilder0.appendWithSeparators((Object[]) null, "](Z>EFoNy?V]MFB.");
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(2, strBuilder0.length());
      assertEquals(2, strBuilder0.size());
      assertNull(strBuilder3.getNullText());
      assertEquals(2, strBuilder3.size());
      assertFalse(strBuilder3.isEmpty());
      assertEquals(2, strBuilder3.length());
      assertEquals(32, strBuilder3.capacity());
      assertNull(strBuilder3.getNewLineText());
      assertTrue(strBuilder3.isNotEmpty());
      assertNotNull(strBuilder3);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder3, strBuilder2);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder1);
      
      StrBuilder strBuilder4 = strBuilder3.appendln(strBuilder2);
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(5, strBuilder0.size());
      assertEquals(5, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertTrue(strBuilder1.isNotEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(5, strBuilder1.size());
      assertEquals(5, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(32, strBuilder2.capacity());
      assertNull(strBuilder2.getNewLineText());
      assertFalse(strBuilder2.isEmpty());
      assertNull(strBuilder2.getNullText());
      assertEquals(5, strBuilder2.length());
      assertEquals(5, strBuilder2.size());
      assertTrue(strBuilder2.isNotEmpty());
      assertNull(strBuilder3.getNullText());
      assertEquals(5, strBuilder3.length());
      assertFalse(strBuilder3.isEmpty());
      assertEquals(32, strBuilder3.capacity());
      assertEquals(5, strBuilder3.size());
      assertNull(strBuilder3.getNewLineText());
      assertTrue(strBuilder3.isNotEmpty());
      assertTrue(strBuilder4.isNotEmpty());
      assertFalse(strBuilder4.isEmpty());
      assertEquals(5, strBuilder4.size());
      assertEquals(32, strBuilder4.capacity());
      assertEquals(5, strBuilder4.length());
      assertNull(strBuilder4.getNullText());
      assertNull(strBuilder4.getNewLineText());
      assertNotNull(strBuilder4);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder4);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder2, strBuilder3);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder4);
      assertSame(strBuilder3, strBuilder2);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder4);
      assertSame(strBuilder4, strBuilder3);
      assertSame(strBuilder4, strBuilder2);
      assertSame(strBuilder4, strBuilder1);
      assertSame(strBuilder4, strBuilder0);
      
      StrBuilder strBuilder5 = strBuilder2.deleteFirst("");
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(5, strBuilder0.size());
      assertEquals(5, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertTrue(strBuilder1.isNotEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(5, strBuilder1.size());
      assertEquals(5, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(32, strBuilder2.capacity());
      assertNull(strBuilder2.getNewLineText());
      assertFalse(strBuilder2.isEmpty());
      assertNull(strBuilder2.getNullText());
      assertEquals(5, strBuilder2.length());
      assertEquals(5, strBuilder2.size());
      assertTrue(strBuilder2.isNotEmpty());
      assertEquals(32, strBuilder5.capacity());
      assertTrue(strBuilder5.isNotEmpty());
      assertFalse(strBuilder5.isEmpty());
      assertEquals(5, strBuilder5.size());
      assertNull(strBuilder5.getNewLineText());
      assertEquals(5, strBuilder5.length());
      assertNull(strBuilder5.getNullText());
      assertNotNull(strBuilder5);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder5);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder4);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder2, strBuilder3);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder5);
      assertSame(strBuilder2, strBuilder4);
      assertSame(strBuilder5, strBuilder0);
      assertSame(strBuilder5, strBuilder1);
      assertSame(strBuilder5, strBuilder3);
      assertSame(strBuilder5, strBuilder2);
      assertSame(strBuilder5, strBuilder4);
      
      StrBuilder strBuilder6 = strBuilder0.appendFixedWidthPadLeft((-339), (-339), 'r');
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(5, strBuilder0.size());
      assertEquals(5, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder6.getNewLineText());
      assertEquals(32, strBuilder6.capacity());
      assertFalse(strBuilder6.isEmpty());
      assertEquals(5, strBuilder6.length());
      assertEquals(5, strBuilder6.size());
      assertNull(strBuilder6.getNullText());
      assertTrue(strBuilder6.isNotEmpty());
      assertNotNull(strBuilder6);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder6);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder6, strBuilder1);
      assertSame(strBuilder6, strBuilder0);
      assertSame(strBuilder6, strBuilder5);
      assertSame(strBuilder6, strBuilder3);
      assertSame(strBuilder6, strBuilder2);
      assertSame(strBuilder6, strBuilder4);
      
      StrBuilder strBuilder7 = strBuilder5.deleteCharAt(0);
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(4, strBuilder0.length());
      assertEquals(4, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertTrue(strBuilder1.isNotEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(4, strBuilder1.length());
      assertEquals(4, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(32, strBuilder2.capacity());
      assertNull(strBuilder2.getNewLineText());
      assertFalse(strBuilder2.isEmpty());
      assertNull(strBuilder2.getNullText());
      assertEquals(4, strBuilder2.size());
      assertEquals(4, strBuilder2.length());
      assertTrue(strBuilder2.isNotEmpty());
      assertEquals(32, strBuilder5.capacity());
      assertTrue(strBuilder5.isNotEmpty());
      assertFalse(strBuilder5.isEmpty());
      assertEquals(4, strBuilder5.length());
      assertNull(strBuilder5.getNewLineText());
      assertEquals(4, strBuilder5.size());
      assertNull(strBuilder5.getNullText());
      assertNull(strBuilder7.getNewLineText());
      assertFalse(strBuilder7.isEmpty());
      assertEquals(4, strBuilder7.size());
      assertEquals(4, strBuilder7.length());
      assertNull(strBuilder7.getNullText());
      assertTrue(strBuilder7.isNotEmpty());
      assertEquals(32, strBuilder7.capacity());
      assertNotNull(strBuilder7);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder6);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder7);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder5);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder6);
      assertSame(strBuilder1, strBuilder4);
      assertSame(strBuilder1, strBuilder7);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder2, strBuilder3);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder5);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder7);
      assertSame(strBuilder2, strBuilder4);
      assertSame(strBuilder2, strBuilder6);
      assertSame(strBuilder5, strBuilder0);
      assertSame(strBuilder5, strBuilder1);
      assertSame(strBuilder5, strBuilder3);
      assertSame(strBuilder5, strBuilder6);
      assertSame(strBuilder5, strBuilder2);
      assertSame(strBuilder5, strBuilder4);
      assertSame(strBuilder5, strBuilder7);
      assertSame(strBuilder7, strBuilder0);
      assertSame(strBuilder7, strBuilder5);
      assertSame(strBuilder7, strBuilder1);
      assertSame(strBuilder7, strBuilder4);
      assertSame(strBuilder7, strBuilder2);
      assertSame(strBuilder7, strBuilder6);
      assertSame(strBuilder7, strBuilder3);
      
      StrBuilder.StrBuilderWriter strBuilder_StrBuilderWriter0 = strBuilder2.new StrBuilderWriter();
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(4, strBuilder0.length());
      assertEquals(4, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertTrue(strBuilder1.isNotEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(4, strBuilder1.length());
      assertEquals(4, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(32, strBuilder2.capacity());
      assertNull(strBuilder2.getNewLineText());
      assertFalse(strBuilder2.isEmpty());
      assertNull(strBuilder2.getNullText());
      assertEquals(4, strBuilder2.size());
      assertEquals(4, strBuilder2.length());
      assertTrue(strBuilder2.isNotEmpty());
      assertNotNull(strBuilder_StrBuilderWriter0);
      
      strBuilder_StrBuilderWriter0.write(0);
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(5, strBuilder0.size());
      assertEquals(5, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertTrue(strBuilder1.isNotEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(5, strBuilder1.size());
      assertEquals(5, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(32, strBuilder2.capacity());
      assertNull(strBuilder2.getNewLineText());
      assertFalse(strBuilder2.isEmpty());
      assertNull(strBuilder2.getNullText());
      assertEquals(5, strBuilder2.length());
      assertEquals(5, strBuilder2.size());
      assertTrue(strBuilder2.isNotEmpty());
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder6);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder7);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder5);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder6);
      assertSame(strBuilder1, strBuilder4);
      assertSame(strBuilder1, strBuilder7);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder2, strBuilder3);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder5);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder7);
      assertSame(strBuilder2, strBuilder4);
      assertSame(strBuilder2, strBuilder6);
      
      IntStream intStream0 = strBuilder1.chars();
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(5, strBuilder0.size());
      assertEquals(5, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertTrue(strBuilder1.isNotEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(5, strBuilder1.size());
      assertEquals(5, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertNotNull(intStream0);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder6);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder7);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder5);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder6);
      assertSame(strBuilder1, strBuilder4);
      assertSame(strBuilder1, strBuilder7);
      assertSame(strBuilder1, strBuilder0);
      
      char[] charArray0 = new char[6];
      charArray0[0] = 'r';
      charArray0[1] = 'r';
      charArray0[2] = 'R';
      charArray0[3] = 'r';
      charArray0[4] = 'r';
      charArray0[5] = 'r';
      strBuilder0.buffer = charArray0;
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(5, strBuilder0.size());
      assertEquals(5, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(6, strBuilder0.capacity());
      
      strBuilder_StrBuilderWriter0.write("");
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(5, strBuilder0.size());
      assertEquals(5, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(6, strBuilder0.capacity());
      assertTrue(strBuilder1.isNotEmpty());
      assertEquals(6, strBuilder1.capacity());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(5, strBuilder1.size());
      assertEquals(5, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder2.getNewLineText());
      assertFalse(strBuilder2.isEmpty());
      assertNull(strBuilder2.getNullText());
      assertEquals(5, strBuilder2.length());
      assertEquals(5, strBuilder2.size());
      assertEquals(6, strBuilder2.capacity());
      assertTrue(strBuilder2.isNotEmpty());
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder6);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder7);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder5);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder6);
      assertSame(strBuilder1, strBuilder4);
      assertSame(strBuilder1, strBuilder7);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder2, strBuilder3);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder5);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder7);
      assertSame(strBuilder2, strBuilder4);
      assertSame(strBuilder2, strBuilder6);
      
      StrBuilder strBuilder8 = new StrBuilder("](Z>EFoNy?V]MFB.");
      assertEquals(16, strBuilder8.size());
      assertFalse(strBuilder8.isEmpty());
      assertTrue(strBuilder8.isNotEmpty());
      assertNull(strBuilder8.getNullText());
      assertEquals(16, strBuilder8.length());
      assertEquals(48, strBuilder8.capacity());
      assertNull(strBuilder8.getNewLineText());
      assertNotNull(strBuilder8);
      assertFalse(strBuilder8.equals((Object)strBuilder6));
      assertFalse(strBuilder8.equals((Object)strBuilder2));
      assertFalse(strBuilder8.equals((Object)strBuilder7));
      assertFalse(strBuilder8.equals((Object)strBuilder3));
      assertFalse(strBuilder8.equals((Object)strBuilder0));
      assertFalse(strBuilder8.equals((Object)strBuilder5));
      assertFalse(strBuilder8.equals((Object)strBuilder4));
      assertFalse(strBuilder8.equals((Object)strBuilder1));
      
      StrBuilder strBuilder9 = strBuilder5.replaceFirst("](Z>EFoNy?V]MFB.", "](Z>EFoNy?V]MFB.");
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(5, strBuilder0.size());
      assertEquals(5, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(6, strBuilder0.capacity());
      assertTrue(strBuilder1.isNotEmpty());
      assertEquals(6, strBuilder1.capacity());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(5, strBuilder1.size());
      assertEquals(5, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder2.getNewLineText());
      assertFalse(strBuilder2.isEmpty());
      assertNull(strBuilder2.getNullText());
      assertEquals(5, strBuilder2.length());
      assertEquals(5, strBuilder2.size());
      assertEquals(6, strBuilder2.capacity());
      assertTrue(strBuilder2.isNotEmpty());
      assertEquals(5, strBuilder9.size());
      assertEquals(5, strBuilder9.length());
      assertNull(strBuilder9.getNullText());
      assertFalse(strBuilder9.isEmpty());
      assertEquals(6, strBuilder9.capacity());
      assertTrue(strBuilder9.isNotEmpty());
      assertNull(strBuilder9.getNewLineText());
      assertTrue(strBuilder5.isNotEmpty());
      assertFalse(strBuilder5.isEmpty());
      assertEquals(6, strBuilder5.capacity());
      assertEquals(5, strBuilder5.size());
      assertNull(strBuilder5.getNewLineText());
      assertEquals(5, strBuilder5.length());
      assertNull(strBuilder5.getNullText());
      assertNotNull(strBuilder9);
      assertFalse(strBuilder0.equals((Object)strBuilder8));
      assertFalse(strBuilder1.equals((Object)strBuilder8));
      assertFalse(strBuilder2.equals((Object)strBuilder8));
      assertFalse(strBuilder9.equals((Object)strBuilder8));
      assertFalse(strBuilder5.equals((Object)strBuilder8));
      assertNotSame(strBuilder0, strBuilder8);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder6);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder9);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder7);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder5);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder2);
      assertNotSame(strBuilder1, strBuilder8);
      assertSame(strBuilder1, strBuilder6);
      assertSame(strBuilder1, strBuilder4);
      assertSame(strBuilder1, strBuilder7);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder9);
      assertSame(strBuilder2, strBuilder3);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder5);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder9);
      assertSame(strBuilder2, strBuilder7);
      assertSame(strBuilder2, strBuilder4);
      assertSame(strBuilder2, strBuilder6);
      assertNotSame(strBuilder2, strBuilder8);
      assertSame(strBuilder9, strBuilder7);
      assertSame(strBuilder9, strBuilder4);
      assertSame(strBuilder9, strBuilder3);
      assertSame(strBuilder9, strBuilder2);
      assertNotSame(strBuilder9, strBuilder8);
      assertSame(strBuilder9, strBuilder6);
      assertSame(strBuilder9, strBuilder1);
      assertSame(strBuilder9, strBuilder5);
      assertSame(strBuilder9, strBuilder0);
      assertSame(strBuilder5, strBuilder0);
      assertSame(strBuilder5, strBuilder1);
      assertNotSame(strBuilder5, strBuilder8);
      assertSame(strBuilder5, strBuilder3);
      assertSame(strBuilder5, strBuilder6);
      assertSame(strBuilder5, strBuilder2);
      assertSame(strBuilder5, strBuilder4);
      assertSame(strBuilder5, strBuilder9);
      assertSame(strBuilder5, strBuilder7);
      
      StrBuilder strBuilder10 = strBuilder6.appendln((double) 0);
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(16, strBuilder0.capacity());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(9, strBuilder0.size());
      assertEquals(9, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder10.getNewLineText());
      assertFalse(strBuilder10.isEmpty());
      assertEquals(16, strBuilder10.capacity());
      assertTrue(strBuilder10.isNotEmpty());
      assertEquals(9, strBuilder10.length());
      assertEquals(9, strBuilder10.size());
      assertNull(strBuilder10.getNullText());
      assertNull(strBuilder6.getNewLineText());
      assertEquals(16, strBuilder6.capacity());
      assertFalse(strBuilder6.isEmpty());
      assertNull(strBuilder6.getNullText());
      assertEquals(9, strBuilder6.length());
      assertTrue(strBuilder6.isNotEmpty());
      assertEquals(9, strBuilder6.size());
      assertNotNull(strBuilder10);
      assertFalse(strBuilder0.equals((Object)strBuilder8));
      assertFalse(strBuilder10.equals((Object)strBuilder8));
      assertFalse(strBuilder6.equals((Object)strBuilder8));
      assertNotSame(strBuilder0, strBuilder8);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder6);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder9);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder7);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder10);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder10, strBuilder5);
      assertSame(strBuilder10, strBuilder9);
      assertSame(strBuilder10, strBuilder2);
      assertSame(strBuilder10, strBuilder3);
      assertSame(strBuilder10, strBuilder1);
      assertSame(strBuilder10, strBuilder7);
      assertSame(strBuilder10, strBuilder0);
      assertSame(strBuilder10, strBuilder4);
      assertSame(strBuilder10, strBuilder6);
      assertNotSame(strBuilder10, strBuilder8);
      assertSame(strBuilder6, strBuilder9);
      assertSame(strBuilder6, strBuilder1);
      assertSame(strBuilder6, strBuilder0);
      assertSame(strBuilder6, strBuilder5);
      assertSame(strBuilder6, strBuilder3);
      assertSame(strBuilder6, strBuilder2);
      assertNotSame(strBuilder6, strBuilder8);
      assertSame(strBuilder6, strBuilder4);
      assertSame(strBuilder6, strBuilder10);
      assertSame(strBuilder6, strBuilder7);
      
      StrBuilder strBuilder11 = strBuilder5.setNullText("");
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(16, strBuilder0.capacity());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(9, strBuilder0.size());
      assertEquals(9, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertTrue(strBuilder1.isNotEmpty());
      assertEquals(16, strBuilder1.capacity());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertEquals(9, strBuilder1.size());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(9, strBuilder1.length());
      assertEquals(16, strBuilder2.capacity());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(9, strBuilder2.length());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(9, strBuilder2.size());
      assertNull(strBuilder2.getNullText());
      assertTrue(strBuilder2.isNotEmpty());
      assertEquals(9, strBuilder5.size());
      assertEquals(16, strBuilder5.capacity());
      assertEquals(9, strBuilder5.length());
      assertTrue(strBuilder5.isNotEmpty());
      assertFalse(strBuilder5.isEmpty());
      assertNull(strBuilder5.getNewLineText());
      assertNull(strBuilder5.getNullText());
      assertEquals(16, strBuilder11.capacity());
      assertNull(strBuilder11.getNewLineText());
      assertEquals(9, strBuilder11.length());
      assertFalse(strBuilder11.isEmpty());
      assertEquals(9, strBuilder11.size());
      assertTrue(strBuilder11.isNotEmpty());
      assertNull(strBuilder11.getNullText());
      assertNotNull(strBuilder11);
      assertFalse(strBuilder0.equals((Object)strBuilder8));
      assertFalse(strBuilder1.equals((Object)strBuilder8));
      assertFalse(strBuilder2.equals((Object)strBuilder8));
      assertFalse(strBuilder5.equals((Object)strBuilder8));
      assertFalse(strBuilder11.equals((Object)strBuilder8));
      assertNotSame(strBuilder0, strBuilder8);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder11);
      assertSame(strBuilder0, strBuilder6);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder9);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder7);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder10);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder5);
      assertSame(strBuilder1, strBuilder11);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder2);
      assertNotSame(strBuilder1, strBuilder8);
      assertSame(strBuilder1, strBuilder6);
      assertSame(strBuilder1, strBuilder10);
      assertSame(strBuilder1, strBuilder4);
      assertSame(strBuilder1, strBuilder7);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder9);
      assertSame(strBuilder2, strBuilder3);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder5);
      assertSame(strBuilder2, strBuilder11);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder9);
      assertSame(strBuilder2, strBuilder7);
      assertSame(strBuilder2, strBuilder10);
      assertSame(strBuilder2, strBuilder4);
      assertSame(strBuilder2, strBuilder6);
      assertNotSame(strBuilder2, strBuilder8);
      assertSame(strBuilder5, strBuilder0);
      assertSame(strBuilder5, strBuilder1);
      assertNotSame(strBuilder5, strBuilder8);
      assertSame(strBuilder5, strBuilder3);
      assertSame(strBuilder5, strBuilder6);
      assertSame(strBuilder5, strBuilder2);
      assertSame(strBuilder5, strBuilder10);
      assertSame(strBuilder5, strBuilder4);
      assertSame(strBuilder5, strBuilder9);
      assertSame(strBuilder5, strBuilder11);
      assertSame(strBuilder5, strBuilder7);
      assertSame(strBuilder11, strBuilder3);
      assertSame(strBuilder11, strBuilder1);
      assertSame(strBuilder11, strBuilder0);
      assertSame(strBuilder11, strBuilder9);
      assertSame(strBuilder11, strBuilder6);
      assertNotSame(strBuilder11, strBuilder8);
      assertSame(strBuilder11, strBuilder2);
      assertSame(strBuilder11, strBuilder10);
      assertSame(strBuilder11, strBuilder4);
      assertSame(strBuilder11, strBuilder7);
      assertSame(strBuilder11, strBuilder5);
      
      boolean boolean0 = strBuilder6.contains("");
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(16, strBuilder0.capacity());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(9, strBuilder0.size());
      assertEquals(9, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder6.getNewLineText());
      assertEquals(16, strBuilder6.capacity());
      assertFalse(strBuilder6.isEmpty());
      assertNull(strBuilder6.getNullText());
      assertEquals(9, strBuilder6.length());
      assertTrue(strBuilder6.isNotEmpty());
      assertEquals(9, strBuilder6.size());
      assertTrue(boolean0);
      assertFalse(strBuilder0.equals((Object)strBuilder8));
      assertFalse(strBuilder6.equals((Object)strBuilder8));
      assertNotSame(strBuilder0, strBuilder8);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder11);
      assertSame(strBuilder0, strBuilder6);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder9);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder7);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder10);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder6, strBuilder9);
      assertSame(strBuilder6, strBuilder1);
      assertSame(strBuilder6, strBuilder0);
      assertSame(strBuilder6, strBuilder5);
      assertSame(strBuilder6, strBuilder11);
      assertSame(strBuilder6, strBuilder3);
      assertSame(strBuilder6, strBuilder2);
      assertNotSame(strBuilder6, strBuilder8);
      assertSame(strBuilder6, strBuilder4);
      assertSame(strBuilder6, strBuilder10);
      assertSame(strBuilder6, strBuilder7);
      
      StrBuilder strBuilder12 = new StrBuilder();
      assertEquals(32, strBuilder12.capacity());
      assertNull(strBuilder12.getNewLineText());
      assertFalse(strBuilder12.isNotEmpty());
      assertEquals(0, strBuilder12.size());
      assertNull(strBuilder12.getNullText());
      assertEquals(0, strBuilder12.length());
      assertTrue(strBuilder12.isEmpty());
      assertNotNull(strBuilder12);
      assertFalse(strBuilder12.equals((Object)strBuilder3));
      assertFalse(strBuilder12.equals((Object)strBuilder6));
      assertFalse(strBuilder12.equals((Object)strBuilder5));
      assertFalse(strBuilder12.equals((Object)strBuilder9));
      assertFalse(strBuilder12.equals((Object)strBuilder2));
      assertFalse(strBuilder12.equals((Object)strBuilder11));
      assertFalse(strBuilder12.equals((Object)strBuilder8));
      assertFalse(strBuilder12.equals((Object)strBuilder0));
      assertFalse(strBuilder12.equals((Object)strBuilder1));
      assertFalse(strBuilder12.equals((Object)strBuilder10));
      assertFalse(strBuilder12.equals((Object)strBuilder4));
      assertFalse(strBuilder12.equals((Object)strBuilder7));
      
      StrBuilder strBuilder13 = strBuilder12.append('N');
      assertEquals(32, strBuilder12.capacity());
      assertNull(strBuilder12.getNewLineText());
      assertFalse(strBuilder12.isEmpty());
      assertEquals(1, strBuilder12.size());
      assertEquals(1, strBuilder12.length());
      assertNull(strBuilder12.getNullText());
      assertTrue(strBuilder12.isNotEmpty());
      assertEquals(32, strBuilder13.capacity());
      assertTrue(strBuilder13.isNotEmpty());
      assertNull(strBuilder13.getNewLineText());
      assertNull(strBuilder13.getNullText());
      assertEquals(1, strBuilder13.size());
      assertFalse(strBuilder13.isEmpty());
      assertEquals(1, strBuilder13.length());
      assertNotNull(strBuilder13);
      assertFalse(strBuilder12.equals((Object)strBuilder3));
      assertFalse(strBuilder12.equals((Object)strBuilder6));
      assertFalse(strBuilder12.equals((Object)strBuilder5));
      assertFalse(strBuilder12.equals((Object)strBuilder9));
      assertFalse(strBuilder12.equals((Object)strBuilder2));
      assertFalse(strBuilder12.equals((Object)strBuilder11));
      assertFalse(strBuilder12.equals((Object)strBuilder8));
      assertFalse(strBuilder12.equals((Object)strBuilder0));
      assertFalse(strBuilder12.equals((Object)strBuilder1));
      assertFalse(strBuilder12.equals((Object)strBuilder10));
      assertFalse(strBuilder12.equals((Object)strBuilder4));
      assertFalse(strBuilder12.equals((Object)strBuilder7));
      assertFalse(strBuilder13.equals((Object)strBuilder10));
      assertFalse(strBuilder13.equals((Object)strBuilder4));
      assertFalse(strBuilder13.equals((Object)strBuilder7));
      assertFalse(strBuilder13.equals((Object)strBuilder5));
      assertFalse(strBuilder13.equals((Object)strBuilder9));
      assertFalse(strBuilder13.equals((Object)strBuilder11));
      assertFalse(strBuilder13.equals((Object)strBuilder1));
      assertFalse(strBuilder13.equals((Object)strBuilder6));
      assertFalse(strBuilder13.equals((Object)strBuilder3));
      assertFalse(strBuilder13.equals((Object)strBuilder2));
      assertFalse(strBuilder13.equals((Object)strBuilder0));
      assertFalse(strBuilder13.equals((Object)strBuilder8));
      assertSame(strBuilder12, strBuilder13);
      assertNotSame(strBuilder12, strBuilder3);
      assertNotSame(strBuilder12, strBuilder6);
      assertNotSame(strBuilder12, strBuilder0);
      assertNotSame(strBuilder12, strBuilder4);
      assertNotSame(strBuilder12, strBuilder5);
      assertNotSame(strBuilder12, strBuilder9);
      assertNotSame(strBuilder12, strBuilder2);
      assertNotSame(strBuilder12, strBuilder11);
      assertNotSame(strBuilder12, strBuilder8);
      assertNotSame(strBuilder12, strBuilder1);
      assertNotSame(strBuilder12, strBuilder10);
      assertNotSame(strBuilder12, strBuilder7);
      assertSame(strBuilder13, strBuilder12);
      assertNotSame(strBuilder13, strBuilder10);
      assertNotSame(strBuilder13, strBuilder4);
      assertNotSame(strBuilder13, strBuilder7);
      assertNotSame(strBuilder13, strBuilder5);
      assertNotSame(strBuilder13, strBuilder9);
      assertNotSame(strBuilder13, strBuilder11);
      assertNotSame(strBuilder13, strBuilder1);
      assertNotSame(strBuilder13, strBuilder8);
      assertNotSame(strBuilder13, strBuilder6);
      assertNotSame(strBuilder13, strBuilder3);
      assertNotSame(strBuilder13, strBuilder2);
      assertNotSame(strBuilder13, strBuilder0);
      
      int int0 = strBuilder10.length();
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(16, strBuilder0.capacity());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(9, strBuilder0.size());
      assertEquals(9, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder10.getNewLineText());
      assertFalse(strBuilder10.isEmpty());
      assertEquals(16, strBuilder10.capacity());
      assertTrue(strBuilder10.isNotEmpty());
      assertEquals(9, strBuilder10.length());
      assertEquals(9, strBuilder10.size());
      assertNull(strBuilder10.getNullText());
      assertNull(strBuilder6.getNewLineText());
      assertEquals(16, strBuilder6.capacity());
      assertFalse(strBuilder6.isEmpty());
      assertNull(strBuilder6.getNullText());
      assertEquals(9, strBuilder6.length());
      assertTrue(strBuilder6.isNotEmpty());
      assertEquals(9, strBuilder6.size());
      assertEquals(9, int0);
      assertFalse(strBuilder0.equals((Object)strBuilder8));
      assertFalse(strBuilder0.equals((Object)strBuilder13));
      assertFalse(strBuilder0.equals((Object)strBuilder12));
      assertFalse(strBuilder10.equals((Object)strBuilder13));
      assertFalse(strBuilder10.equals((Object)strBuilder12));
      assertFalse(strBuilder10.equals((Object)strBuilder8));
      assertFalse(strBuilder6.equals((Object)strBuilder8));
      assertFalse(strBuilder6.equals((Object)strBuilder13));
      assertFalse(strBuilder6.equals((Object)strBuilder12));
      assertNotSame(strBuilder0, strBuilder8);
      assertNotSame(strBuilder0, strBuilder12);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder6);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder9);
      assertSame(strBuilder0, strBuilder4);
      assertNotSame(strBuilder0, strBuilder13);
      assertSame(strBuilder0, strBuilder11);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder7);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder10);
      assertSame(strBuilder10, strBuilder5);
      assertSame(strBuilder10, strBuilder9);
      assertSame(strBuilder10, strBuilder2);
      assertSame(strBuilder10, strBuilder7);
      assertNotSame(strBuilder10, strBuilder12);
      assertSame(strBuilder10, strBuilder6);
      assertSame(strBuilder10, strBuilder11);
      assertSame(strBuilder10, strBuilder3);
      assertSame(strBuilder10, strBuilder1);
      assertNotSame(strBuilder10, strBuilder13);
      assertSame(strBuilder10, strBuilder0);
      assertSame(strBuilder10, strBuilder4);
      assertNotSame(strBuilder10, strBuilder8);
      assertSame(strBuilder6, strBuilder9);
      assertSame(strBuilder6, strBuilder5);
      assertSame(strBuilder6, strBuilder2);
      assertNotSame(strBuilder6, strBuilder8);
      assertSame(strBuilder6, strBuilder4);
      assertNotSame(strBuilder6, strBuilder12);
      assertSame(strBuilder6, strBuilder1);
      assertSame(strBuilder6, strBuilder0);
      assertSame(strBuilder6, strBuilder3);
      assertSame(strBuilder6, strBuilder11);
      assertNotSame(strBuilder6, strBuilder13);
      assertSame(strBuilder6, strBuilder10);
      assertSame(strBuilder6, strBuilder7);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      StringBuffer stringBuffer0 = new StringBuffer("org.apache.commons.lang3.text.StrBuilder$StrBuilderTokenizer");
      assertEquals("org.apache.commons.lang3.text.StrBuilder$StrBuilderTokenizer", stringBuffer0.toString());
      assertEquals(60, stringBuffer0.length());
      assertNotNull(stringBuffer0);
      
      CharBuffer charBuffer0 = CharBuffer.allocate(62);
      assertEquals(62, charBuffer0.remaining());
      assertEquals(62, charBuffer0.capacity());
      assertEquals(62, charBuffer0.length());
      assertEquals(0, charBuffer0.arrayOffset());
      assertFalse(charBuffer0.isReadOnly());
      assertFalse(charBuffer0.isDirect());
      assertEquals(62, charBuffer0.limit());
      assertEquals(0, charBuffer0.position());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", charBuffer0.toString());
      assertTrue(charBuffer0.hasArray());
      assertTrue(charBuffer0.hasRemaining());
      assertNotNull(charBuffer0);
      
      StrBuilder strBuilder0 = new StrBuilder();
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertFalse(strBuilder0.isNotEmpty());
      assertNotNull(strBuilder0);
      
      strBuilder0.appendTo(charBuffer0);
      assertEquals(62, charBuffer0.remaining());
      assertEquals(62, charBuffer0.capacity());
      assertEquals(62, charBuffer0.length());
      assertEquals(0, charBuffer0.arrayOffset());
      assertFalse(charBuffer0.isReadOnly());
      assertFalse(charBuffer0.isDirect());
      assertEquals(62, charBuffer0.limit());
      assertEquals(0, charBuffer0.position());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", charBuffer0.toString());
      assertTrue(charBuffer0.hasArray());
      assertTrue(charBuffer0.hasRemaining());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertFalse(strBuilder0.isNotEmpty());
      
      StrBuilder strBuilder1 = new StrBuilder("org.apache.commons.lang3.text.StrBuilder$StrBuilderTokenizer");
      assertNull(strBuilder1.getNullText());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(92, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(60, strBuilder1.size());
      assertTrue(strBuilder1.isNotEmpty());
      assertEquals(60, strBuilder1.length());
      assertNotNull(strBuilder1);
      assertFalse(strBuilder1.equals((Object)strBuilder0));
      
      StrBuilder strBuilder2 = strBuilder1.deleteAll("zLFw3_=GAG:~R");
      assertNull(strBuilder1.getNullText());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(92, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(60, strBuilder1.size());
      assertTrue(strBuilder1.isNotEmpty());
      assertEquals(60, strBuilder1.length());
      assertNull(strBuilder2.getNullText());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(60, strBuilder2.size());
      assertTrue(strBuilder2.isNotEmpty());
      assertEquals(60, strBuilder2.length());
      assertEquals(92, strBuilder2.capacity());
      assertNull(strBuilder2.getNewLineText());
      assertNotNull(strBuilder2);
      assertFalse(strBuilder1.equals((Object)strBuilder0));
      assertFalse(strBuilder2.equals((Object)strBuilder0));
      assertNotSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder2);
      assertNotSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      
      StrBuilder strBuilder3 = strBuilder2.appendSeparator("", "");
      assertNull(strBuilder1.getNullText());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(92, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(60, strBuilder1.size());
      assertTrue(strBuilder1.isNotEmpty());
      assertEquals(60, strBuilder1.length());
      assertNull(strBuilder2.getNullText());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(60, strBuilder2.size());
      assertTrue(strBuilder2.isNotEmpty());
      assertEquals(60, strBuilder2.length());
      assertEquals(92, strBuilder2.capacity());
      assertNull(strBuilder2.getNewLineText());
      assertTrue(strBuilder3.isNotEmpty());
      assertFalse(strBuilder3.isEmpty());
      assertNull(strBuilder3.getNewLineText());
      assertEquals(60, strBuilder3.size());
      assertEquals(60, strBuilder3.length());
      assertNull(strBuilder3.getNullText());
      assertEquals(92, strBuilder3.capacity());
      assertNotNull(strBuilder3);
      assertFalse(strBuilder1.equals((Object)strBuilder0));
      assertFalse(strBuilder2.equals((Object)strBuilder0));
      assertFalse(strBuilder3.equals((Object)strBuilder0));
      assertNotSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder3);
      assertNotSame(strBuilder2, strBuilder0);
      assertNotSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder2);
      assertSame(strBuilder3, strBuilder1);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertFalse(strBuilder0.isNotEmpty());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = new StrBuilder();
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertFalse(strBuilder1.isNotEmpty());
      assertEquals(0, strBuilder1.length());
      assertEquals(0, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertTrue(strBuilder1.isEmpty());
      assertNotNull(strBuilder1);
      assertTrue(strBuilder1.equals((Object)strBuilder0));
      
      StringWriter stringWriter0 = new StringWriter();
      assertEquals("", stringWriter0.toString());
      assertNotNull(stringWriter0);
      
      // Undeclared exception!
      try { 
        stringWriter0.append((CharSequence) strBuilder1, 0, (-2435));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -2435
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("^idxVa9J(IJ6fm");
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(46, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(14, strBuilder0.length());
      assertEquals(14, strBuilder0.size());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = new StrBuilder("^idxVa9J(IJ6fm");
      assertEquals(14, strBuilder1.size());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(14, strBuilder1.length());
      assertTrue(strBuilder1.isNotEmpty());
      assertEquals(46, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertNotNull(strBuilder1);
      assertTrue(strBuilder1.equals((Object)strBuilder0));
      
      int int0 = strBuilder0.lastIndexOf("^idxVa9J(IJ6fm");
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(46, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(14, strBuilder0.length());
      assertEquals(14, strBuilder0.size());
      assertEquals(0, int0);
      assertTrue(strBuilder0.equals((Object)strBuilder1));
      assertNotSame(strBuilder0, strBuilder1);
      
      StrBuilder strBuilder2 = strBuilder1.appendSeparator("Invalid offset: ", "qs%A@t!%k}N*,$Yl`a");
      assertEquals(30, strBuilder1.size());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(30, strBuilder1.length());
      assertTrue(strBuilder1.isNotEmpty());
      assertEquals(46, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(30, strBuilder2.size());
      assertNull(strBuilder2.getNullText());
      assertEquals(30, strBuilder2.length());
      assertTrue(strBuilder2.isNotEmpty());
      assertEquals(46, strBuilder2.capacity());
      assertFalse(strBuilder2.isEmpty());
      assertNotNull(strBuilder2);
      assertFalse(strBuilder1.equals((Object)strBuilder0));
      assertFalse(strBuilder2.equals((Object)strBuilder0));
      assertSame(strBuilder1, strBuilder2);
      assertNotSame(strBuilder1, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertNotSame(strBuilder2, strBuilder0);
      
      String string0 = strBuilder2.substring(0);
      assertEquals(30, strBuilder1.size());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(30, strBuilder1.length());
      assertTrue(strBuilder1.isNotEmpty());
      assertEquals(46, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(30, strBuilder2.size());
      assertNull(strBuilder2.getNullText());
      assertEquals(30, strBuilder2.length());
      assertTrue(strBuilder2.isNotEmpty());
      assertEquals(46, strBuilder2.capacity());
      assertFalse(strBuilder2.isEmpty());
      assertNotNull(string0);
      assertEquals("^idxVa9J(IJ6fmInvalid offset: ", string0);
      assertFalse(strBuilder1.equals((Object)strBuilder0));
      assertFalse(strBuilder2.equals((Object)strBuilder0));
      assertSame(strBuilder1, strBuilder2);
      assertNotSame(strBuilder1, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertNotSame(strBuilder2, strBuilder0);
      
      StringBuilder stringBuilder0 = new StringBuilder(0);
      assertEquals("", stringBuilder0.toString());
      assertNotNull(stringBuilder0);
      
      StrBuilder strBuilder3 = strBuilder0.appendln(stringBuilder0, 0, 0);
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(46, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(15, strBuilder0.length());
      assertEquals(15, strBuilder0.size());
      assertEquals("", stringBuilder0.toString());
      assertNull(strBuilder3.getNewLineText());
      assertTrue(strBuilder3.isNotEmpty());
      assertEquals(15, strBuilder3.length());
      assertEquals(46, strBuilder3.capacity());
      assertNull(strBuilder3.getNullText());
      assertEquals(15, strBuilder3.size());
      assertFalse(strBuilder3.isEmpty());
      assertNotNull(strBuilder3);
      assertFalse(strBuilder0.equals((Object)strBuilder1));
      assertFalse(strBuilder0.equals((Object)strBuilder2));
      assertFalse(strBuilder3.equals((Object)strBuilder2));
      assertFalse(strBuilder3.equals((Object)strBuilder1));
      assertNotSame(strBuilder0, strBuilder1);
      assertNotSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder3);
      assertNotSame(strBuilder3, strBuilder2);
      assertSame(strBuilder3, strBuilder0);
      assertNotSame(strBuilder3, strBuilder1);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(0);
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.appendSeparator("', has a length less than 2", "', has a length less than 2");
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(27, strBuilder0.size());
      assertEquals(27, strBuilder0.length());
      assertTrue(strBuilder1.isNotEmpty());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(27, strBuilder1.length());
      assertEquals(27, strBuilder1.size());
      assertNotNull(strBuilder1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      
      StrBuilder strBuilder2 = strBuilder0.appendPadding(0, 'Q');
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(27, strBuilder0.size());
      assertEquals(27, strBuilder0.length());
      assertNull(strBuilder2.getNewLineText());
      assertFalse(strBuilder2.isEmpty());
      assertNull(strBuilder2.getNullText());
      assertEquals(32, strBuilder2.capacity());
      assertEquals(27, strBuilder2.length());
      assertTrue(strBuilder2.isNotEmpty());
      assertEquals(27, strBuilder2.size());
      assertNotNull(strBuilder2);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      
      StrBuilder strBuilder3 = strBuilder2.append((float) 1);
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(30, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(30, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder2.getNewLineText());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(30, strBuilder2.length());
      assertEquals(30, strBuilder2.size());
      assertNull(strBuilder2.getNullText());
      assertEquals(32, strBuilder2.capacity());
      assertTrue(strBuilder2.isNotEmpty());
      assertNull(strBuilder3.getNewLineText());
      assertNull(strBuilder3.getNullText());
      assertEquals(32, strBuilder3.capacity());
      assertTrue(strBuilder3.isNotEmpty());
      assertEquals(30, strBuilder3.size());
      assertFalse(strBuilder3.isEmpty());
      assertEquals(30, strBuilder3.length());
      assertNotNull(strBuilder3);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder3);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder2);
      assertSame(strBuilder3, strBuilder0);
      
      boolean boolean0 = strBuilder0.contains(';');
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(30, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(30, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertFalse(boolean0);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder3);
      
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder1.new StrBuilderReader();
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(30, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(30, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder1.isNotEmpty());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(30, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertEquals(30, strBuilder1.size());
      assertEquals(32, strBuilder1.capacity());
      assertTrue(strBuilder_StrBuilderReader0.markSupported());
      assertTrue(strBuilder_StrBuilderReader0.ready());
      assertNotNull(strBuilder_StrBuilderReader0);
      
      StrBuilder strBuilder4 = strBuilder0.appendSeparator("", 1);
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(30, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(30, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder4.getNewLineText());
      assertFalse(strBuilder4.isEmpty());
      assertTrue(strBuilder4.isNotEmpty());
      assertEquals(32, strBuilder4.capacity());
      assertEquals(30, strBuilder4.size());
      assertEquals(30, strBuilder4.length());
      assertNull(strBuilder4.getNullText());
      assertNotNull(strBuilder4);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder4, strBuilder2);
      assertSame(strBuilder4, strBuilder3);
      assertSame(strBuilder4, strBuilder0);
      assertSame(strBuilder4, strBuilder1);
      
      StringBuilder stringBuilder0 = new StringBuilder();
      assertEquals("", stringBuilder0.toString());
      assertNotNull(stringBuilder0);
      
      StringBuilder stringBuilder1 = stringBuilder0.append(false);
      assertEquals("false", stringBuilder0.toString());
      assertEquals("false", stringBuilder1.toString());
      assertNotNull(stringBuilder1);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder1, stringBuilder0);
      
      StrBuilder strBuilder5 = strBuilder4.append(stringBuilder1, 1, 0);
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(30, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(30, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder4.getNewLineText());
      assertFalse(strBuilder4.isEmpty());
      assertTrue(strBuilder4.isNotEmpty());
      assertEquals(32, strBuilder4.capacity());
      assertEquals(30, strBuilder4.size());
      assertEquals(30, strBuilder4.length());
      assertNull(strBuilder4.getNullText());
      assertEquals("false", stringBuilder0.toString());
      assertEquals("false", stringBuilder1.toString());
      assertNull(strBuilder5.getNewLineText());
      assertEquals(32, strBuilder5.capacity());
      assertEquals(30, strBuilder5.length());
      assertEquals(30, strBuilder5.size());
      assertNull(strBuilder5.getNullText());
      assertTrue(strBuilder5.isNotEmpty());
      assertFalse(strBuilder5.isEmpty());
      assertNotNull(strBuilder5);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder4, strBuilder2);
      assertSame(strBuilder4, strBuilder3);
      assertSame(strBuilder4, strBuilder0);
      assertSame(strBuilder4, strBuilder1);
      assertSame(strBuilder4, strBuilder5);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder1, stringBuilder0);
      assertSame(strBuilder5, strBuilder2);
      assertSame(strBuilder5, strBuilder4);
      assertSame(strBuilder5, strBuilder3);
      assertSame(strBuilder5, strBuilder0);
      assertSame(strBuilder5, strBuilder1);
      
      StrBuilder strBuilder6 = strBuilder1.reverse();
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(30, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(30, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder1.isNotEmpty());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(30, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertEquals(30, strBuilder1.size());
      assertEquals(32, strBuilder1.capacity());
      assertFalse(strBuilder6.isEmpty());
      assertNull(strBuilder6.getNewLineText());
      assertEquals(32, strBuilder6.capacity());
      assertEquals(30, strBuilder6.size());
      assertNull(strBuilder6.getNullText());
      assertEquals(30, strBuilder6.length());
      assertTrue(strBuilder6.isNotEmpty());
      assertNotNull(strBuilder6);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder6);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder4);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder5);
      assertSame(strBuilder1, strBuilder6);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder6, strBuilder0);
      assertSame(strBuilder6, strBuilder1);
      assertSame(strBuilder6, strBuilder5);
      assertSame(strBuilder6, strBuilder2);
      assertSame(strBuilder6, strBuilder3);
      assertSame(strBuilder6, strBuilder4);
      
      StrBuilder strBuilder7 = strBuilder3.append((CharSequence) strBuilder2);
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(60, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(120, strBuilder0.capacity());
      assertEquals(60, strBuilder0.length());
      assertEquals(120, strBuilder2.capacity());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(60, strBuilder2.size());
      assertFalse(strBuilder2.isEmpty());
      assertNull(strBuilder2.getNullText());
      assertTrue(strBuilder2.isNotEmpty());
      assertEquals(60, strBuilder2.length());
      assertEquals(120, strBuilder3.capacity());
      assertNull(strBuilder3.getNewLineText());
      assertNull(strBuilder3.getNullText());
      assertEquals(60, strBuilder3.size());
      assertTrue(strBuilder3.isNotEmpty());
      assertEquals(60, strBuilder3.length());
      assertFalse(strBuilder3.isEmpty());
      assertEquals(120, strBuilder7.capacity());
      assertFalse(strBuilder7.isEmpty());
      assertEquals(60, strBuilder7.size());
      assertTrue(strBuilder7.isNotEmpty());
      assertEquals(60, strBuilder7.length());
      assertNull(strBuilder7.getNullText());
      assertNull(strBuilder7.getNewLineText());
      assertNotNull(strBuilder7);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder7);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder6);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder2, strBuilder5);
      assertSame(strBuilder2, strBuilder6);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder7);
      assertSame(strBuilder2, strBuilder4);
      assertSame(strBuilder2, strBuilder3);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder4);
      assertSame(strBuilder3, strBuilder2);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder7);
      assertSame(strBuilder3, strBuilder5);
      assertSame(strBuilder3, strBuilder6);
      assertSame(strBuilder7, strBuilder1);
      assertSame(strBuilder7, strBuilder5);
      assertSame(strBuilder7, strBuilder6);
      assertSame(strBuilder7, strBuilder4);
      assertSame(strBuilder7, strBuilder2);
      assertSame(strBuilder7, strBuilder0);
      assertSame(strBuilder7, strBuilder3);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(0);
      assertFalse(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertNotNull(strBuilder0);
      
      CharBuffer charBuffer0 = CharBuffer.allocate(34);
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(34, charBuffer0.length());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", charBuffer0.toString());
      assertFalse(charBuffer0.isDirect());
      assertTrue(charBuffer0.hasArray());
      assertEquals(34, charBuffer0.remaining());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(34, charBuffer0.limit());
      assertEquals(34, charBuffer0.capacity());
      assertEquals(0, charBuffer0.arrayOffset());
      assertNotNull(charBuffer0);
      
      StrBuilder strBuilder1 = strBuilder0.append(charBuffer0, 34, 0);
      assertFalse(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(34, charBuffer0.length());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", charBuffer0.toString());
      assertFalse(charBuffer0.isDirect());
      assertTrue(charBuffer0.hasArray());
      assertEquals(34, charBuffer0.remaining());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(34, charBuffer0.limit());
      assertEquals(34, charBuffer0.capacity());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(0, strBuilder1.length());
      assertEquals(0, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertFalse(strBuilder1.isNotEmpty());
      assertTrue(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(32, strBuilder1.capacity());
      assertNotNull(strBuilder1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      
      StrBuilder strBuilder2 = new StrBuilder();
      assertEquals(32, strBuilder2.capacity());
      assertNull(strBuilder2.getNewLineText());
      assertTrue(strBuilder2.isEmpty());
      assertEquals(0, strBuilder2.size());
      assertNull(strBuilder2.getNullText());
      assertEquals(0, strBuilder2.length());
      assertFalse(strBuilder2.isNotEmpty());
      assertNotNull(strBuilder2);
      assertTrue(strBuilder2.equals((Object)strBuilder1));
      assertTrue(strBuilder2.equals((Object)strBuilder0));
      
      StrBuilder strBuilder3 = new StrBuilder(0);
      assertNull(strBuilder3.getNewLineText());
      assertEquals(32, strBuilder3.capacity());
      assertTrue(strBuilder3.isEmpty());
      assertEquals(0, strBuilder3.length());
      assertEquals(0, strBuilder3.size());
      assertNull(strBuilder3.getNullText());
      assertFalse(strBuilder3.isNotEmpty());
      assertNotNull(strBuilder3);
      assertTrue(strBuilder3.equals((Object)strBuilder1));
      assertTrue(strBuilder3.equals((Object)strBuilder2));
      assertTrue(strBuilder3.equals((Object)strBuilder0));
      
      StrBuilder strBuilder4 = strBuilder1.append((char[]) null, 155, 0);
      assertFalse(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(34, charBuffer0.length());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", charBuffer0.toString());
      assertFalse(charBuffer0.isDirect());
      assertTrue(charBuffer0.hasArray());
      assertEquals(34, charBuffer0.remaining());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(34, charBuffer0.limit());
      assertEquals(34, charBuffer0.capacity());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(0, strBuilder1.length());
      assertEquals(0, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertFalse(strBuilder1.isNotEmpty());
      assertTrue(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(0, strBuilder4.size());
      assertFalse(strBuilder4.isNotEmpty());
      assertNull(strBuilder4.getNewLineText());
      assertNull(strBuilder4.getNullText());
      assertEquals(0, strBuilder4.length());
      assertEquals(32, strBuilder4.capacity());
      assertTrue(strBuilder4.isEmpty());
      assertNotNull(strBuilder4);
      assertTrue(strBuilder0.equals((Object)strBuilder3));
      assertTrue(strBuilder0.equals((Object)strBuilder2));
      assertTrue(strBuilder1.equals((Object)strBuilder2));
      assertTrue(strBuilder1.equals((Object)strBuilder3));
      assertTrue(strBuilder4.equals((Object)strBuilder3));
      assertTrue(strBuilder4.equals((Object)strBuilder2));
      assertNotSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder4);
      assertNotSame(strBuilder0, strBuilder3);
      assertSame(strBuilder1, strBuilder4);
      assertSame(strBuilder1, strBuilder0);
      assertNotSame(strBuilder1, strBuilder2);
      assertNotSame(strBuilder1, strBuilder3);
      assertSame(strBuilder4, strBuilder0);
      assertNotSame(strBuilder4, strBuilder3);
      assertNotSame(strBuilder4, strBuilder2);
      assertSame(strBuilder4, strBuilder1);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("org.apache.commons.ang3.text.StrMatcher$CharSetMatcher");
      assertEquals(54, strBuilder0.size());
      assertEquals(54, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(86, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isNotEmpty());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.setNullText("");
      assertEquals(54, strBuilder0.size());
      assertEquals(54, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(86, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isNotEmpty());
      assertTrue(strBuilder1.isNotEmpty());
      assertEquals(86, strBuilder1.capacity());
      assertNull(strBuilder1.getNullText());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(54, strBuilder1.length());
      assertEquals(54, strBuilder1.size());
      assertNotNull(strBuilder1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      
      boolean boolean0 = strBuilder0.contains("org.apache.commons.ang3.text.StrMatcher$CharSetMatcher");
      assertEquals(54, strBuilder0.size());
      assertEquals(54, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(86, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isNotEmpty());
      assertTrue(boolean0);
      assertSame(strBuilder0, strBuilder1);
      
      StrBuilder strBuilder2 = new StrBuilder();
      assertEquals(0, strBuilder2.size());
      assertNull(strBuilder2.getNullText());
      assertEquals(0, strBuilder2.length());
      assertFalse(strBuilder2.isNotEmpty());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(32, strBuilder2.capacity());
      assertTrue(strBuilder2.isEmpty());
      assertNotNull(strBuilder2);
      assertFalse(strBuilder2.equals((Object)strBuilder1));
      assertFalse(strBuilder2.equals((Object)strBuilder0));
      
      StrBuilder strBuilder3 = new StrBuilder("");
      assertFalse(strBuilder3.isNotEmpty());
      assertTrue(strBuilder3.isEmpty());
      assertNull(strBuilder3.getNullText());
      assertNull(strBuilder3.getNewLineText());
      assertEquals(32, strBuilder3.capacity());
      assertEquals(0, strBuilder3.length());
      assertEquals(0, strBuilder3.size());
      assertNotNull(strBuilder3);
      assertFalse(strBuilder3.equals((Object)strBuilder0));
      assertTrue(strBuilder3.equals((Object)strBuilder2));
      assertFalse(strBuilder3.equals((Object)strBuilder1));
      
      // Undeclared exception!
      try { 
        strBuilder0.insert((int) 'g', (long) 'g');
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 103
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("");
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isEmpty());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.replaceAll('r', 'r');
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isEmpty());
      assertFalse(strBuilder1.isNotEmpty());
      assertEquals(0, strBuilder1.length());
      assertEquals(0, strBuilder1.size());
      assertTrue(strBuilder1.isEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertNotNull(strBuilder1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      
      StrBuilder strBuilder2 = strBuilder1.appendln('r');
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(2, strBuilder0.length());
      assertEquals(2, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(2, strBuilder1.length());
      assertEquals(2, strBuilder1.size());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertTrue(strBuilder1.isNotEmpty());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertEquals(32, strBuilder2.capacity());
      assertTrue(strBuilder2.isNotEmpty());
      assertNull(strBuilder2.getNullText());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(2, strBuilder2.length());
      assertEquals(2, strBuilder2.size());
      assertFalse(strBuilder2.isEmpty());
      assertNotNull(strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      
      StrBuilder strBuilder3 = strBuilder0.appendWithSeparators((Object[]) null, "](Z>EFoNy?V]MFB.");
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(2, strBuilder0.length());
      assertEquals(2, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(2, strBuilder3.length());
      assertEquals(2, strBuilder3.size());
      assertNull(strBuilder3.getNullText());
      assertNull(strBuilder3.getNewLineText());
      assertEquals(32, strBuilder3.capacity());
      assertTrue(strBuilder3.isNotEmpty());
      assertFalse(strBuilder3.isEmpty());
      assertNotNull(strBuilder3);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder3, strBuilder2);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder1);
      
      StrBuilder strBuilder4 = strBuilder2.deleteFirst("");
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(2, strBuilder0.length());
      assertEquals(2, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(2, strBuilder1.length());
      assertEquals(2, strBuilder1.size());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertTrue(strBuilder1.isNotEmpty());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertEquals(32, strBuilder2.capacity());
      assertTrue(strBuilder2.isNotEmpty());
      assertNull(strBuilder2.getNullText());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(2, strBuilder2.length());
      assertEquals(2, strBuilder2.size());
      assertFalse(strBuilder2.isEmpty());
      assertTrue(strBuilder4.isNotEmpty());
      assertNull(strBuilder4.getNullText());
      assertNull(strBuilder4.getNewLineText());
      assertFalse(strBuilder4.isEmpty());
      assertEquals(32, strBuilder4.capacity());
      assertEquals(2, strBuilder4.length());
      assertEquals(2, strBuilder4.size());
      assertNotNull(strBuilder4);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder4);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder2, strBuilder3);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder4);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder4, strBuilder2);
      assertSame(strBuilder4, strBuilder1);
      assertSame(strBuilder4, strBuilder0);
      assertSame(strBuilder4, strBuilder3);
      
      StrBuilder strBuilder5 = strBuilder0.appendFixedWidthPadLeft((-339), (-339), 'r');
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(2, strBuilder0.length());
      assertEquals(2, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder5.getNullText());
      assertFalse(strBuilder5.isEmpty());
      assertEquals(2, strBuilder5.length());
      assertNull(strBuilder5.getNewLineText());
      assertEquals(2, strBuilder5.size());
      assertTrue(strBuilder5.isNotEmpty());
      assertEquals(32, strBuilder5.capacity());
      assertNotNull(strBuilder5);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder5, strBuilder2);
      assertSame(strBuilder5, strBuilder3);
      assertSame(strBuilder5, strBuilder1);
      assertSame(strBuilder5, strBuilder0);
      assertSame(strBuilder5, strBuilder4);
      
      StrBuilder strBuilder6 = strBuilder4.deleteCharAt(0);
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(1, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(1, strBuilder0.length());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(1, strBuilder1.size());
      assertEquals(1, strBuilder1.length());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertTrue(strBuilder1.isNotEmpty());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertEquals(32, strBuilder2.capacity());
      assertTrue(strBuilder2.isNotEmpty());
      assertNull(strBuilder2.getNullText());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(1, strBuilder2.length());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(1, strBuilder2.size());
      assertTrue(strBuilder4.isNotEmpty());
      assertNull(strBuilder4.getNullText());
      assertNull(strBuilder4.getNewLineText());
      assertFalse(strBuilder4.isEmpty());
      assertEquals(1, strBuilder4.size());
      assertEquals(32, strBuilder4.capacity());
      assertEquals(1, strBuilder4.length());
      assertEquals(32, strBuilder6.capacity());
      assertNull(strBuilder6.getNewLineText());
      assertTrue(strBuilder6.isNotEmpty());
      assertNull(strBuilder6.getNullText());
      assertEquals(1, strBuilder6.length());
      assertFalse(strBuilder6.isEmpty());
      assertEquals(1, strBuilder6.size());
      assertNotNull(strBuilder6);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder6);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder5);
      assertSame(strBuilder1, strBuilder4);
      assertSame(strBuilder1, strBuilder6);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder2, strBuilder5);
      assertSame(strBuilder2, strBuilder3);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder6);
      assertSame(strBuilder2, strBuilder4);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder4, strBuilder2);
      assertSame(strBuilder4, strBuilder5);
      assertSame(strBuilder4, strBuilder1);
      assertSame(strBuilder4, strBuilder6);
      assertSame(strBuilder4, strBuilder0);
      assertSame(strBuilder4, strBuilder3);
      assertSame(strBuilder6, strBuilder3);
      assertSame(strBuilder6, strBuilder1);
      assertSame(strBuilder6, strBuilder5);
      assertSame(strBuilder6, strBuilder0);
      assertSame(strBuilder6, strBuilder2);
      assertSame(strBuilder6, strBuilder4);
      
      StrBuilder.StrBuilderWriter strBuilder_StrBuilderWriter0 = strBuilder2.new StrBuilderWriter();
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(1, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(1, strBuilder0.length());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(1, strBuilder1.size());
      assertEquals(1, strBuilder1.length());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertTrue(strBuilder1.isNotEmpty());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertEquals(32, strBuilder2.capacity());
      assertTrue(strBuilder2.isNotEmpty());
      assertNull(strBuilder2.getNullText());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(1, strBuilder2.length());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(1, strBuilder2.size());
      assertNotNull(strBuilder_StrBuilderWriter0);
      
      strBuilder_StrBuilderWriter0.write(0);
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(2, strBuilder0.length());
      assertEquals(2, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(2, strBuilder1.length());
      assertEquals(2, strBuilder1.size());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertTrue(strBuilder1.isNotEmpty());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertEquals(32, strBuilder2.capacity());
      assertTrue(strBuilder2.isNotEmpty());
      assertNull(strBuilder2.getNullText());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(2, strBuilder2.length());
      assertEquals(2, strBuilder2.size());
      assertFalse(strBuilder2.isEmpty());
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder6);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder5);
      assertSame(strBuilder1, strBuilder4);
      assertSame(strBuilder1, strBuilder6);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder2, strBuilder5);
      assertSame(strBuilder2, strBuilder3);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder6);
      assertSame(strBuilder2, strBuilder4);
      assertSame(strBuilder2, strBuilder1);
      
      IntStream intStream0 = strBuilder1.chars();
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(2, strBuilder0.length());
      assertEquals(2, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(2, strBuilder1.length());
      assertEquals(2, strBuilder1.size());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertTrue(strBuilder1.isNotEmpty());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertNotNull(intStream0);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder6);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder5);
      assertSame(strBuilder1, strBuilder4);
      assertSame(strBuilder1, strBuilder6);
      assertSame(strBuilder1, strBuilder3);
      
      strBuilder_StrBuilderWriter0.write("");
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(2, strBuilder0.length());
      assertEquals(2, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(2, strBuilder1.length());
      assertEquals(2, strBuilder1.size());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertTrue(strBuilder1.isNotEmpty());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertEquals(32, strBuilder2.capacity());
      assertTrue(strBuilder2.isNotEmpty());
      assertNull(strBuilder2.getNullText());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(2, strBuilder2.length());
      assertEquals(2, strBuilder2.size());
      assertFalse(strBuilder2.isEmpty());
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder6);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder5);
      assertSame(strBuilder1, strBuilder4);
      assertSame(strBuilder1, strBuilder6);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder2, strBuilder5);
      assertSame(strBuilder2, strBuilder3);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder6);
      assertSame(strBuilder2, strBuilder4);
      assertSame(strBuilder2, strBuilder1);
      
      StrBuilder strBuilder7 = new StrBuilder("](Z>EFoNy?V]MFB.");
      assertFalse(strBuilder7.isEmpty());
      assertTrue(strBuilder7.isNotEmpty());
      assertEquals(48, strBuilder7.capacity());
      assertEquals(16, strBuilder7.size());
      assertEquals(16, strBuilder7.length());
      assertNull(strBuilder7.getNewLineText());
      assertNull(strBuilder7.getNullText());
      assertNotNull(strBuilder7);
      assertFalse(strBuilder7.equals((Object)strBuilder3));
      assertFalse(strBuilder7.equals((Object)strBuilder1));
      assertFalse(strBuilder7.equals((Object)strBuilder5));
      assertFalse(strBuilder7.equals((Object)strBuilder6));
      assertFalse(strBuilder7.equals((Object)strBuilder2));
      assertFalse(strBuilder7.equals((Object)strBuilder0));
      assertFalse(strBuilder7.equals((Object)strBuilder4));
      
      StrBuilder strBuilder8 = strBuilder5.appendln((double) 0);
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(6, strBuilder0.length());
      assertEquals(6, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder5.getNullText());
      assertFalse(strBuilder5.isEmpty());
      assertNull(strBuilder5.getNewLineText());
      assertEquals(6, strBuilder5.length());
      assertEquals(6, strBuilder5.size());
      assertTrue(strBuilder5.isNotEmpty());
      assertEquals(32, strBuilder5.capacity());
      assertEquals(6, strBuilder8.size());
      assertEquals(6, strBuilder8.length());
      assertTrue(strBuilder8.isNotEmpty());
      assertNull(strBuilder8.getNullText());
      assertNull(strBuilder8.getNewLineText());
      assertFalse(strBuilder8.isEmpty());
      assertEquals(32, strBuilder8.capacity());
      assertNotNull(strBuilder8);
      assertFalse(strBuilder0.equals((Object)strBuilder7));
      assertFalse(strBuilder5.equals((Object)strBuilder7));
      assertFalse(strBuilder8.equals((Object)strBuilder7));
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder8);
      assertNotSame(strBuilder0, strBuilder7);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder6);
      assertSame(strBuilder5, strBuilder2);
      assertSame(strBuilder5, strBuilder8);
      assertSame(strBuilder5, strBuilder3);
      assertSame(strBuilder5, strBuilder1);
      assertSame(strBuilder5, strBuilder0);
      assertSame(strBuilder5, strBuilder6);
      assertNotSame(strBuilder5, strBuilder7);
      assertSame(strBuilder5, strBuilder4);
      assertSame(strBuilder8, strBuilder0);
      assertSame(strBuilder8, strBuilder3);
      assertSame(strBuilder8, strBuilder2);
      assertNotSame(strBuilder8, strBuilder7);
      assertSame(strBuilder8, strBuilder1);
      assertSame(strBuilder8, strBuilder4);
      assertSame(strBuilder8, strBuilder5);
      assertSame(strBuilder8, strBuilder6);
      
      StrBuilder strBuilder9 = strBuilder4.setNullText("");
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(6, strBuilder0.length());
      assertEquals(6, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertTrue(strBuilder1.isNotEmpty());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertEquals(6, strBuilder1.length());
      assertEquals(6, strBuilder1.size());
      assertEquals(6, strBuilder2.length());
      assertEquals(6, strBuilder2.size());
      assertEquals(32, strBuilder2.capacity());
      assertTrue(strBuilder2.isNotEmpty());
      assertNull(strBuilder2.getNullText());
      assertNull(strBuilder2.getNewLineText());
      assertFalse(strBuilder2.isEmpty());
      assertTrue(strBuilder4.isNotEmpty());
      assertNull(strBuilder4.getNullText());
      assertNull(strBuilder4.getNewLineText());
      assertFalse(strBuilder4.isEmpty());
      assertEquals(32, strBuilder4.capacity());
      assertEquals(6, strBuilder4.length());
      assertEquals(6, strBuilder4.size());
      assertEquals(6, strBuilder9.length());
      assertEquals(6, strBuilder9.size());
      assertNull(strBuilder9.getNewLineText());
      assertEquals(32, strBuilder9.capacity());
      assertTrue(strBuilder9.isNotEmpty());
      assertNull(strBuilder9.getNullText());
      assertFalse(strBuilder9.isEmpty());
      assertNotNull(strBuilder9);
      assertFalse(strBuilder0.equals((Object)strBuilder7));
      assertFalse(strBuilder1.equals((Object)strBuilder7));
      assertFalse(strBuilder2.equals((Object)strBuilder7));
      assertFalse(strBuilder4.equals((Object)strBuilder7));
      assertFalse(strBuilder9.equals((Object)strBuilder7));
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder8);
      assertNotSame(strBuilder0, strBuilder7);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder9);
      assertSame(strBuilder0, strBuilder6);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder5);
      assertSame(strBuilder1, strBuilder4);
      assertNotSame(strBuilder1, strBuilder7);
      assertSame(strBuilder1, strBuilder6);
      assertSame(strBuilder1, strBuilder9);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder8);
      assertSame(strBuilder2, strBuilder5);
      assertSame(strBuilder2, strBuilder3);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder9);
      assertSame(strBuilder2, strBuilder6);
      assertSame(strBuilder2, strBuilder4);
      assertNotSame(strBuilder2, strBuilder7);
      assertSame(strBuilder2, strBuilder8);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder4, strBuilder2);
      assertSame(strBuilder4, strBuilder9);
      assertNotSame(strBuilder4, strBuilder7);
      assertSame(strBuilder4, strBuilder5);
      assertSame(strBuilder4, strBuilder1);
      assertSame(strBuilder4, strBuilder6);
      assertSame(strBuilder4, strBuilder0);
      assertSame(strBuilder4, strBuilder8);
      assertSame(strBuilder4, strBuilder3);
      assertSame(strBuilder9, strBuilder3);
      assertSame(strBuilder9, strBuilder5);
      assertSame(strBuilder9, strBuilder1);
      assertNotSame(strBuilder9, strBuilder7);
      assertSame(strBuilder9, strBuilder0);
      assertSame(strBuilder9, strBuilder6);
      assertSame(strBuilder9, strBuilder2);
      assertSame(strBuilder9, strBuilder4);
      assertSame(strBuilder9, strBuilder8);
      
      boolean boolean0 = strBuilder5.contains("");
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(6, strBuilder0.length());
      assertEquals(6, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder5.getNullText());
      assertFalse(strBuilder5.isEmpty());
      assertNull(strBuilder5.getNewLineText());
      assertEquals(6, strBuilder5.length());
      assertEquals(6, strBuilder5.size());
      assertTrue(strBuilder5.isNotEmpty());
      assertEquals(32, strBuilder5.capacity());
      assertTrue(boolean0);
      assertFalse(strBuilder0.equals((Object)strBuilder7));
      assertFalse(strBuilder5.equals((Object)strBuilder7));
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder8);
      assertNotSame(strBuilder0, strBuilder7);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder9);
      assertSame(strBuilder0, strBuilder6);
      assertSame(strBuilder5, strBuilder9);
      assertSame(strBuilder5, strBuilder2);
      assertSame(strBuilder5, strBuilder8);
      assertSame(strBuilder5, strBuilder3);
      assertSame(strBuilder5, strBuilder1);
      assertSame(strBuilder5, strBuilder0);
      assertSame(strBuilder5, strBuilder6);
      assertNotSame(strBuilder5, strBuilder7);
      assertSame(strBuilder5, strBuilder4);
      
      StrBuilder strBuilder10 = new StrBuilder();
      assertFalse(strBuilder10.isNotEmpty());
      assertNull(strBuilder10.getNewLineText());
      assertNull(strBuilder10.getNullText());
      assertEquals(32, strBuilder10.capacity());
      assertTrue(strBuilder10.isEmpty());
      assertEquals(0, strBuilder10.size());
      assertEquals(0, strBuilder10.length());
      assertNotNull(strBuilder10);
      assertFalse(strBuilder10.equals((Object)strBuilder8));
      assertFalse(strBuilder10.equals((Object)strBuilder5));
      assertFalse(strBuilder10.equals((Object)strBuilder6));
      assertFalse(strBuilder10.equals((Object)strBuilder1));
      assertFalse(strBuilder10.equals((Object)strBuilder7));
      assertFalse(strBuilder10.equals((Object)strBuilder4));
      assertFalse(strBuilder10.equals((Object)strBuilder3));
      assertFalse(strBuilder10.equals((Object)strBuilder2));
      assertFalse(strBuilder10.equals((Object)strBuilder0));
      assertFalse(strBuilder10.equals((Object)strBuilder9));
      
      StrBuilder strBuilder11 = strBuilder10.append('N');
      assertEquals(1, strBuilder11.length());
      assertFalse(strBuilder11.isEmpty());
      assertEquals(1, strBuilder11.size());
      assertNull(strBuilder11.getNewLineText());
      assertTrue(strBuilder11.isNotEmpty());
      assertEquals(32, strBuilder11.capacity());
      assertNull(strBuilder11.getNullText());
      assertEquals(1, strBuilder10.size());
      assertNull(strBuilder10.getNewLineText());
      assertNull(strBuilder10.getNullText());
      assertEquals(32, strBuilder10.capacity());
      assertTrue(strBuilder10.isNotEmpty());
      assertFalse(strBuilder10.isEmpty());
      assertEquals(1, strBuilder10.length());
      assertNotNull(strBuilder11);
      assertFalse(strBuilder11.equals((Object)strBuilder9));
      assertFalse(strBuilder11.equals((Object)strBuilder2));
      assertFalse(strBuilder11.equals((Object)strBuilder4));
      assertFalse(strBuilder11.equals((Object)strBuilder0));
      assertFalse(strBuilder11.equals((Object)strBuilder5));
      assertFalse(strBuilder11.equals((Object)strBuilder6));
      assertFalse(strBuilder11.equals((Object)strBuilder7));
      assertFalse(strBuilder11.equals((Object)strBuilder3));
      assertFalse(strBuilder11.equals((Object)strBuilder1));
      assertFalse(strBuilder11.equals((Object)strBuilder8));
      assertFalse(strBuilder10.equals((Object)strBuilder8));
      assertFalse(strBuilder10.equals((Object)strBuilder5));
      assertFalse(strBuilder10.equals((Object)strBuilder6));
      assertFalse(strBuilder10.equals((Object)strBuilder1));
      assertFalse(strBuilder10.equals((Object)strBuilder7));
      assertFalse(strBuilder10.equals((Object)strBuilder4));
      assertFalse(strBuilder10.equals((Object)strBuilder3));
      assertFalse(strBuilder10.equals((Object)strBuilder2));
      assertFalse(strBuilder10.equals((Object)strBuilder0));
      assertFalse(strBuilder10.equals((Object)strBuilder9));
      assertNotSame(strBuilder11, strBuilder9);
      assertSame(strBuilder11, strBuilder10);
      assertNotSame(strBuilder11, strBuilder2);
      assertNotSame(strBuilder11, strBuilder4);
      assertNotSame(strBuilder11, strBuilder0);
      assertNotSame(strBuilder11, strBuilder5);
      assertNotSame(strBuilder11, strBuilder6);
      assertNotSame(strBuilder11, strBuilder7);
      assertNotSame(strBuilder11, strBuilder3);
      assertNotSame(strBuilder11, strBuilder1);
      assertNotSame(strBuilder11, strBuilder8);
      assertNotSame(strBuilder10, strBuilder8);
      assertNotSame(strBuilder10, strBuilder5);
      assertNotSame(strBuilder10, strBuilder6);
      assertNotSame(strBuilder10, strBuilder1);
      assertNotSame(strBuilder10, strBuilder7);
      assertSame(strBuilder10, strBuilder11);
      assertNotSame(strBuilder10, strBuilder4);
      assertNotSame(strBuilder10, strBuilder3);
      assertNotSame(strBuilder10, strBuilder2);
      assertNotSame(strBuilder10, strBuilder0);
      assertNotSame(strBuilder10, strBuilder9);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertFalse(strBuilder0.isNotEmpty());
      assertNotNull(strBuilder0);
      
      boolean boolean0 = strBuilder0.contains("Invalid length: ");
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertFalse(strBuilder0.isNotEmpty());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(0, strBuilder0.size());
      assertFalse(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.trim();
      assertEquals(0, strBuilder0.size());
      assertFalse(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertTrue(strBuilder1.isEmpty());
      assertFalse(strBuilder1.isNotEmpty());
      assertEquals(0, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertEquals(0, strBuilder1.length());
      assertNotNull(strBuilder1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      
      char[] charArray0 = strBuilder0.toCharArray();
      assertEquals(0, strBuilder0.size());
      assertFalse(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertNotNull(charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      assertSame(strBuilder0, strBuilder1);
      
      StrBuilder strBuilder2 = strBuilder0.appendln((-1875L));
      assertEquals(6, strBuilder0.length());
      assertEquals(6, strBuilder0.size());
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder2.isNotEmpty());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(6, strBuilder2.size());
      assertNull(strBuilder2.getNullText());
      assertEquals(6, strBuilder2.length());
      assertEquals(32, strBuilder2.capacity());
      assertFalse(strBuilder2.isEmpty());
      assertNotNull(strBuilder2);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder2.new StrBuilderReader();
      assertEquals(6, strBuilder0.length());
      assertEquals(6, strBuilder0.size());
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder2.isNotEmpty());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(6, strBuilder2.size());
      assertNull(strBuilder2.getNullText());
      assertEquals(6, strBuilder2.length());
      assertEquals(32, strBuilder2.capacity());
      assertFalse(strBuilder2.isEmpty());
      assertTrue(strBuilder_StrBuilderReader0.markSupported());
      assertTrue(strBuilder_StrBuilderReader0.ready());
      assertNotNull(strBuilder_StrBuilderReader0);
      
      int int0 = strBuilder_StrBuilderReader0.read(charArray0);
      assertEquals(6, strBuilder0.length());
      assertEquals(6, strBuilder0.size());
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder2.isNotEmpty());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(6, strBuilder2.size());
      assertNull(strBuilder2.getNullText());
      assertEquals(6, strBuilder2.length());
      assertEquals(32, strBuilder2.capacity());
      assertFalse(strBuilder2.isEmpty());
      assertTrue(strBuilder_StrBuilderReader0.markSupported());
      assertTrue(strBuilder_StrBuilderReader0.ready());
      assertEquals(0, int0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      
      StringWriter stringWriter0 = new StringWriter();
      assertEquals("", stringWriter0.toString());
      assertNotNull(stringWriter0);
      
      Writer writer0 = strBuilder1.asWriter();
      assertEquals(6, strBuilder0.length());
      assertEquals(6, strBuilder0.size());
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertTrue(strBuilder1.isNotEmpty());
      assertNull(strBuilder1.getNullText());
      assertEquals(6, strBuilder1.size());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(6, strBuilder1.length());
      assertNotNull(writer0);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder2);
      
      Integer integer0 = new Integer(5);
      assertNotNull(integer0);
      assertEquals(5, (int)integer0);
      assertFalse(integer0.equals((Object)int0));
      
      StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer0 = strBuilder1.new StrBuilderTokenizer();
      assertEquals(6, strBuilder0.length());
      assertEquals(6, strBuilder0.size());
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertTrue(strBuilder1.isNotEmpty());
      assertNull(strBuilder1.getNullText());
      assertEquals(6, strBuilder1.size());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(6, strBuilder1.length());
      assertEquals((-1), strBuilder_StrBuilderTokenizer0.previousIndex());
      assertFalse(strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull());
      assertTrue(strBuilder_StrBuilderTokenizer0.isIgnoreEmptyTokens());
      assertEquals(0, strBuilder_StrBuilderTokenizer0.nextIndex());
      assertNotNull(strBuilder_StrBuilderTokenizer0);
      
      StrBuilder strBuilder3 = new StrBuilder(2275);
      assertTrue(strBuilder3.isEmpty());
      assertFalse(strBuilder3.isNotEmpty());
      assertNull(strBuilder3.getNullText());
      assertEquals(0, strBuilder3.length());
      assertEquals(2275, strBuilder3.capacity());
      assertNull(strBuilder3.getNewLineText());
      assertEquals(0, strBuilder3.size());
      assertNotNull(strBuilder3);
      assertFalse(strBuilder3.equals((Object)strBuilder2));
      assertFalse(strBuilder3.equals((Object)strBuilder1));
      assertFalse(strBuilder3.equals((Object)strBuilder0));
      
      StrBuilder strBuilder4 = strBuilder3.appendln((-1643.39));
      assertEquals(9, strBuilder3.size());
      assertEquals(9, strBuilder3.length());
      assertNull(strBuilder3.getNullText());
      assertEquals(2275, strBuilder3.capacity());
      assertFalse(strBuilder3.isEmpty());
      assertNull(strBuilder3.getNewLineText());
      assertTrue(strBuilder3.isNotEmpty());
      assertNull(strBuilder4.getNewLineText());
      assertFalse(strBuilder4.isEmpty());
      assertEquals(2275, strBuilder4.capacity());
      assertNull(strBuilder4.getNullText());
      assertEquals(9, strBuilder4.length());
      assertEquals(9, strBuilder4.size());
      assertTrue(strBuilder4.isNotEmpty());
      assertNotNull(strBuilder4);
      assertFalse(strBuilder3.equals((Object)strBuilder2));
      assertFalse(strBuilder3.equals((Object)strBuilder1));
      assertFalse(strBuilder3.equals((Object)strBuilder0));
      assertFalse(strBuilder4.equals((Object)strBuilder2));
      assertFalse(strBuilder4.equals((Object)strBuilder1));
      assertFalse(strBuilder4.equals((Object)strBuilder0));
      assertSame(strBuilder3, strBuilder4);
      assertNotSame(strBuilder3, strBuilder2);
      assertNotSame(strBuilder3, strBuilder1);
      assertNotSame(strBuilder3, strBuilder0);
      assertNotSame(strBuilder4, strBuilder2);
      assertNotSame(strBuilder4, strBuilder1);
      assertSame(strBuilder4, strBuilder3);
      assertNotSame(strBuilder4, strBuilder0);
      
      StrBuilder strBuilder5 = strBuilder3.setNullText(",%");
      assertEquals(",%", strBuilder3.getNullText());
      assertEquals(9, strBuilder3.size());
      assertEquals(9, strBuilder3.length());
      assertEquals(2275, strBuilder3.capacity());
      assertFalse(strBuilder3.isEmpty());
      assertNull(strBuilder3.getNewLineText());
      assertTrue(strBuilder3.isNotEmpty());
      assertEquals(",%", strBuilder5.getNullText());
      assertNull(strBuilder5.getNewLineText());
      assertEquals(9, strBuilder5.length());
      assertFalse(strBuilder5.isEmpty());
      assertEquals(9, strBuilder5.size());
      assertEquals(2275, strBuilder5.capacity());
      assertTrue(strBuilder5.isNotEmpty());
      assertNotNull(strBuilder5);
      assertFalse(strBuilder3.equals((Object)strBuilder2));
      assertFalse(strBuilder3.equals((Object)strBuilder1));
      assertFalse(strBuilder3.equals((Object)strBuilder0));
      assertFalse(strBuilder5.equals((Object)strBuilder1));
      assertFalse(strBuilder5.equals((Object)strBuilder0));
      assertFalse(strBuilder5.equals((Object)strBuilder2));
      assertSame(strBuilder3, strBuilder4);
      assertSame(strBuilder3, strBuilder5);
      assertNotSame(strBuilder3, strBuilder2);
      assertNotSame(strBuilder3, strBuilder1);
      assertNotSame(strBuilder3, strBuilder0);
      assertSame(strBuilder5, strBuilder4);
      assertSame(strBuilder5, strBuilder3);
      assertNotSame(strBuilder5, strBuilder1);
      assertNotSame(strBuilder5, strBuilder0);
      assertNotSame(strBuilder5, strBuilder2);
      
      boolean boolean0 = strBuilder1.contains(",%");
      assertEquals(6, strBuilder0.length());
      assertEquals(6, strBuilder0.size());
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertTrue(strBuilder1.isNotEmpty());
      assertNull(strBuilder1.getNullText());
      assertEquals(6, strBuilder1.size());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(6, strBuilder1.length());
      assertFalse(boolean0);
      assertFalse(strBuilder0.equals((Object)strBuilder3));
      assertFalse(strBuilder0.equals((Object)strBuilder4));
      assertFalse(strBuilder0.equals((Object)strBuilder5));
      assertFalse(strBuilder1.equals((Object)strBuilder5));
      assertFalse(strBuilder1.equals((Object)strBuilder4));
      assertFalse(strBuilder1.equals((Object)strBuilder3));
      assertNotSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertNotSame(strBuilder0, strBuilder4);
      assertNotSame(strBuilder0, strBuilder5);
      assertSame(strBuilder1, strBuilder0);
      assertNotSame(strBuilder1, strBuilder5);
      assertNotSame(strBuilder1, strBuilder4);
      assertSame(strBuilder1, strBuilder2);
      assertNotSame(strBuilder1, strBuilder3);
      
      StrBuilder strBuilder6 = strBuilder5.append('*');
      assertEquals(",%", strBuilder3.getNullText());
      assertEquals(10, strBuilder3.length());
      assertEquals(2275, strBuilder3.capacity());
      assertFalse(strBuilder3.isEmpty());
      assertNull(strBuilder3.getNewLineText());
      assertEquals(10, strBuilder3.size());
      assertTrue(strBuilder3.isNotEmpty());
      assertEquals(10, strBuilder5.size());
      assertEquals(",%", strBuilder5.getNullText());
      assertNull(strBuilder5.getNewLineText());
      assertFalse(strBuilder5.isEmpty());
      assertEquals(10, strBuilder5.length());
      assertEquals(2275, strBuilder5.capacity());
      assertTrue(strBuilder5.isNotEmpty());
      assertTrue(strBuilder6.isNotEmpty());
      assertEquals(2275, strBuilder6.capacity());
      assertEquals(",%", strBuilder6.getNullText());
      assertEquals(10, strBuilder6.size());
      assertNull(strBuilder6.getNewLineText());
      assertEquals(10, strBuilder6.length());
      assertFalse(strBuilder6.isEmpty());
      assertNotNull(strBuilder6);
      assertFalse(strBuilder3.equals((Object)strBuilder2));
      assertFalse(strBuilder3.equals((Object)strBuilder1));
      assertFalse(strBuilder3.equals((Object)strBuilder0));
      assertFalse(strBuilder5.equals((Object)strBuilder1));
      assertFalse(strBuilder5.equals((Object)strBuilder0));
      assertFalse(strBuilder5.equals((Object)strBuilder2));
      assertFalse(strBuilder6.equals((Object)strBuilder2));
      assertFalse(strBuilder6.equals((Object)strBuilder0));
      assertFalse(strBuilder6.equals((Object)strBuilder1));
      assertSame(strBuilder3, strBuilder4);
      assertSame(strBuilder3, strBuilder5);
      assertSame(strBuilder3, strBuilder6);
      assertNotSame(strBuilder3, strBuilder2);
      assertNotSame(strBuilder3, strBuilder1);
      assertNotSame(strBuilder3, strBuilder0);
      assertSame(strBuilder5, strBuilder4);
      assertSame(strBuilder5, strBuilder6);
      assertSame(strBuilder5, strBuilder3);
      assertNotSame(strBuilder5, strBuilder1);
      assertNotSame(strBuilder5, strBuilder0);
      assertNotSame(strBuilder5, strBuilder2);
      assertSame(strBuilder6, strBuilder3);
      assertNotSame(strBuilder6, strBuilder2);
      assertNotSame(strBuilder6, strBuilder0);
      assertNotSame(strBuilder6, strBuilder1);
      assertSame(strBuilder6, strBuilder4);
      assertSame(strBuilder6, strBuilder5);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = '^';
      charArray0[3] = 'X';
      StrBuilder strBuilder0 = new StrBuilder("remove() is unsupported");
      assertEquals(23, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(55, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(23, strBuilder0.length());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.appendFixedWidthPadRight(32, 32, '^');
      assertEquals(55, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(55, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(55, strBuilder0.length());
      assertEquals(55, strBuilder1.capacity());
      assertNull(strBuilder1.getNullText());
      assertEquals(55, strBuilder1.length());
      assertEquals(55, strBuilder1.size());
      assertNull(strBuilder1.getNewLineText());
      assertFalse(strBuilder1.isEmpty());
      assertTrue(strBuilder1.isNotEmpty());
      assertNotNull(strBuilder1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      
      StrBuilder strBuilder2 = new StrBuilder("remove() is unsupported");
      assertNull(strBuilder2.getNullText());
      assertEquals(55, strBuilder2.capacity());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(23, strBuilder2.size());
      assertEquals(23, strBuilder2.length());
      assertNull(strBuilder2.getNewLineText());
      assertTrue(strBuilder2.isNotEmpty());
      assertNotNull(strBuilder2);
      assertFalse(strBuilder2.equals((Object)strBuilder0));
      assertFalse(strBuilder2.equals((Object)strBuilder1));
      
      CharSequence charSequence0 = strBuilder1.subSequence(36, 36);
      assertEquals(55, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(55, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(55, strBuilder0.length());
      assertEquals(55, strBuilder1.capacity());
      assertNull(strBuilder1.getNullText());
      assertEquals(55, strBuilder1.length());
      assertEquals(55, strBuilder1.size());
      assertNull(strBuilder1.getNewLineText());
      assertFalse(strBuilder1.isEmpty());
      assertTrue(strBuilder1.isNotEmpty());
      assertNotNull(charSequence0);
      assertEquals("", charSequence0);
      assertFalse(strBuilder0.equals((Object)strBuilder2));
      assertFalse(strBuilder1.equals((Object)strBuilder2));
      assertNotSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotSame(strBuilder1, strBuilder2);
      
      int int0 = strBuilder2.size();
      assertNull(strBuilder2.getNullText());
      assertEquals(55, strBuilder2.capacity());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(23, strBuilder2.size());
      assertEquals(23, strBuilder2.length());
      assertNull(strBuilder2.getNewLineText());
      assertTrue(strBuilder2.isNotEmpty());
      assertEquals(23, int0);
      assertFalse(strBuilder2.equals((Object)strBuilder0));
      assertFalse(strBuilder2.equals((Object)strBuilder1));
      assertNotSame(strBuilder2, strBuilder0);
      assertNotSame(strBuilder2, strBuilder1);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("remove() is unsupported");
      assertEquals(23, strBuilder0.length());
      assertEquals(23, strBuilder0.size());
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(55, strBuilder0.capacity());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.appendFixedWidthPadRight(32, 32, 'M');
      assertEquals(55, strBuilder0.length());
      assertEquals(55, strBuilder0.size());
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(55, strBuilder0.capacity());
      assertEquals(55, strBuilder1.capacity());
      assertTrue(strBuilder1.isNotEmpty());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(55, strBuilder1.size());
      assertEquals(55, strBuilder1.length());
      assertNotNull(strBuilder1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      
      CharSequence charSequence0 = strBuilder1.subSequence(36, 36);
      assertEquals(55, strBuilder0.length());
      assertEquals(55, strBuilder0.size());
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(55, strBuilder0.capacity());
      assertEquals(55, strBuilder1.capacity());
      assertTrue(strBuilder1.isNotEmpty());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(55, strBuilder1.size());
      assertEquals(55, strBuilder1.length());
      assertNotNull(charSequence0);
      assertEquals("", charSequence0);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      
      int int0 = strBuilder1.size();
      assertEquals(55, strBuilder0.length());
      assertEquals(55, strBuilder0.size());
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(55, strBuilder0.capacity());
      assertEquals(55, strBuilder1.capacity());
      assertTrue(strBuilder1.isNotEmpty());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(55, strBuilder1.size());
      assertEquals(55, strBuilder1.length());
      assertEquals(55, int0);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("dN");
      assertEquals(2, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(2, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(34, strBuilder0.capacity());
      assertTrue(strBuilder0.isNotEmpty());
      assertNotNull(strBuilder0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      int int0 = strBuilder0.indexOf("dN");
      assertEquals(2, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(2, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(34, strBuilder0.capacity());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(0, int0);
      
      StrBuilder strBuilder1 = strBuilder0.reverse();
      assertEquals(2, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(2, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(34, strBuilder0.capacity());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(2, strBuilder1.length());
      assertEquals(2, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertTrue(strBuilder1.isNotEmpty());
      assertEquals(34, strBuilder1.capacity());
      assertNotNull(strBuilder1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      
      StrBuilder strBuilder2 = strBuilder1.insert(0, "dN");
      assertNull(strBuilder0.getNullText());
      assertEquals(4, strBuilder0.length());
      assertEquals(4, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(34, strBuilder0.capacity());
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder1.getNullText());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(4, strBuilder1.length());
      assertEquals(4, strBuilder1.size());
      assertNull(strBuilder1.getNewLineText());
      assertTrue(strBuilder1.isNotEmpty());
      assertEquals(34, strBuilder1.capacity());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(34, strBuilder2.capacity());
      assertTrue(strBuilder2.isNotEmpty());
      assertNull(strBuilder2.getNullText());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(4, strBuilder2.size());
      assertEquals(4, strBuilder2.length());
      assertNotNull(strBuilder2);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      
      Integer integer0 = new Integer(128);
      assertNotNull(integer0);
      assertEquals(128, (int)integer0);
      assertFalse(integer0.equals((Object)int0));
      
      char[] charArray0 = new char[1];
      charArray0[0] = '#';
      StrBuilder strBuilder3 = strBuilder2.append(charArray0);
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(5, strBuilder0.size());
      assertEquals(5, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(34, strBuilder0.capacity());
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder1.getNullText());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(5, strBuilder1.size());
      assertEquals(5, strBuilder1.length());
      assertNull(strBuilder1.getNewLineText());
      assertTrue(strBuilder1.isNotEmpty());
      assertEquals(34, strBuilder1.capacity());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(34, strBuilder2.capacity());
      assertTrue(strBuilder2.isNotEmpty());
      assertNull(strBuilder2.getNullText());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(5, strBuilder2.length());
      assertEquals(5, strBuilder2.size());
      assertEquals(5, strBuilder3.length());
      assertEquals(5, strBuilder3.size());
      assertFalse(strBuilder3.isEmpty());
      assertNull(strBuilder3.getNewLineText());
      assertTrue(strBuilder3.isNotEmpty());
      assertEquals(34, strBuilder3.capacity());
      assertNull(strBuilder3.getNullText());
      assertNotNull(strBuilder3);
      assertArrayEquals(new char[] {'#'}, charArray0);
      assertEquals(1, charArray0.length);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder3);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder2);
      assertSame(strBuilder3, strBuilder1);
      
      int int1 = StrBuilder.CAPACITY;
      assertEquals(32, int1);
      assertFalse(int1 == int0);
      
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder2.new StrBuilderReader();
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(5, strBuilder0.size());
      assertEquals(5, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(34, strBuilder0.capacity());
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder1.getNullText());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(5, strBuilder1.size());
      assertEquals(5, strBuilder1.length());
      assertNull(strBuilder1.getNewLineText());
      assertTrue(strBuilder1.isNotEmpty());
      assertEquals(34, strBuilder1.capacity());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(34, strBuilder2.capacity());
      assertTrue(strBuilder2.isNotEmpty());
      assertNull(strBuilder2.getNullText());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(5, strBuilder2.length());
      assertEquals(5, strBuilder2.size());
      assertTrue(strBuilder_StrBuilderReader0.ready());
      assertTrue(strBuilder_StrBuilderReader0.markSupported());
      assertNotNull(strBuilder_StrBuilderReader0);
      
      StrBuilder strBuilder4 = strBuilder0.append("dN");
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(7, strBuilder0.length());
      assertEquals(7, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(34, strBuilder0.capacity());
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder4.getNullText());
      assertEquals(34, strBuilder4.capacity());
      assertFalse(strBuilder4.isEmpty());
      assertEquals(7, strBuilder4.size());
      assertEquals(7, strBuilder4.length());
      assertTrue(strBuilder4.isNotEmpty());
      assertNull(strBuilder4.getNewLineText());
      assertNotNull(strBuilder4);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder4, strBuilder2);
      assertSame(strBuilder4, strBuilder0);
      assertSame(strBuilder4, strBuilder3);
      assertSame(strBuilder4, strBuilder1);
      
      StrBuilder strBuilder5 = strBuilder2.replaceFirst('i', '+');
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(7, strBuilder0.length());
      assertEquals(7, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(34, strBuilder0.capacity());
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder1.getNullText());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(7, strBuilder1.length());
      assertEquals(7, strBuilder1.size());
      assertNull(strBuilder1.getNewLineText());
      assertTrue(strBuilder1.isNotEmpty());
      assertEquals(34, strBuilder1.capacity());
      assertEquals(7, strBuilder2.length());
      assertEquals(7, strBuilder2.size());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(34, strBuilder2.capacity());
      assertTrue(strBuilder2.isNotEmpty());
      assertNull(strBuilder2.getNullText());
      assertFalse(strBuilder2.isEmpty());
      assertFalse(strBuilder5.isEmpty());
      assertTrue(strBuilder5.isNotEmpty());
      assertNull(strBuilder5.getNewLineText());
      assertNull(strBuilder5.getNullText());
      assertEquals(7, strBuilder5.size());
      assertEquals(7, strBuilder5.length());
      assertEquals(34, strBuilder5.capacity());
      assertNotNull(strBuilder5);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder4);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder5);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder5);
      assertSame(strBuilder2, strBuilder4);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder3);
      assertSame(strBuilder5, strBuilder3);
      assertSame(strBuilder5, strBuilder1);
      assertSame(strBuilder5, strBuilder2);
      assertSame(strBuilder5, strBuilder4);
      assertSame(strBuilder5, strBuilder0);
      
      String string0 = strBuilder5.leftString((-1039));
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(7, strBuilder0.length());
      assertEquals(7, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(34, strBuilder0.capacity());
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder1.getNullText());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(7, strBuilder1.length());
      assertEquals(7, strBuilder1.size());
      assertNull(strBuilder1.getNewLineText());
      assertTrue(strBuilder1.isNotEmpty());
      assertEquals(34, strBuilder1.capacity());
      assertEquals(7, strBuilder2.length());
      assertEquals(7, strBuilder2.size());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(34, strBuilder2.capacity());
      assertTrue(strBuilder2.isNotEmpty());
      assertNull(strBuilder2.getNullText());
      assertFalse(strBuilder2.isEmpty());
      assertFalse(strBuilder5.isEmpty());
      assertTrue(strBuilder5.isNotEmpty());
      assertNull(strBuilder5.getNewLineText());
      assertNull(strBuilder5.getNullText());
      assertEquals(7, strBuilder5.size());
      assertEquals(7, strBuilder5.length());
      assertEquals(34, strBuilder5.capacity());
      assertNotNull(string0);
      assertEquals("", string0);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder4);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder5);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder5);
      assertSame(strBuilder2, strBuilder4);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder3);
      assertSame(strBuilder5, strBuilder3);
      assertSame(strBuilder5, strBuilder1);
      assertSame(strBuilder5, strBuilder2);
      assertSame(strBuilder5, strBuilder4);
      assertSame(strBuilder5, strBuilder0);
      
      StrBuilder strBuilder6 = new StrBuilder(981);
      assertNull(strBuilder6.getNewLineText());
      assertNull(strBuilder6.getNullText());
      assertEquals(981, strBuilder6.capacity());
      assertEquals(0, strBuilder6.size());
      assertFalse(strBuilder6.isNotEmpty());
      assertTrue(strBuilder6.isEmpty());
      assertEquals(0, strBuilder6.length());
      assertNotNull(strBuilder6);
      assertFalse(strBuilder6.equals((Object)strBuilder0));
      assertFalse(strBuilder6.equals((Object)strBuilder4));
      assertFalse(strBuilder6.equals((Object)strBuilder2));
      assertFalse(strBuilder6.equals((Object)strBuilder3));
      assertFalse(strBuilder6.equals((Object)strBuilder1));
      assertFalse(strBuilder6.equals((Object)strBuilder5));
      
      StrBuilder strBuilder7 = new StrBuilder(12);
      assertFalse(strBuilder7.isNotEmpty());
      assertEquals(12, strBuilder7.capacity());
      assertNull(strBuilder7.getNullText());
      assertEquals(0, strBuilder7.length());
      assertNull(strBuilder7.getNewLineText());
      assertEquals(0, strBuilder7.size());
      assertTrue(strBuilder7.isEmpty());
      assertNotNull(strBuilder7);
      assertFalse(strBuilder7.equals((Object)strBuilder5));
      assertFalse(strBuilder7.equals((Object)strBuilder3));
      assertTrue(strBuilder7.equals((Object)strBuilder6));
      assertFalse(strBuilder7.equals((Object)strBuilder1));
      assertFalse(strBuilder7.equals((Object)strBuilder0));
      assertFalse(strBuilder7.equals((Object)strBuilder4));
      assertFalse(strBuilder7.equals((Object)strBuilder2));
      
      StrBuilder strBuilder8 = strBuilder7.reverse();
      assertEquals(12, strBuilder8.capacity());
      assertFalse(strBuilder8.isNotEmpty());
      assertEquals(0, strBuilder8.size());
      assertNull(strBuilder8.getNullText());
      assertEquals(0, strBuilder8.length());
      assertNull(strBuilder8.getNewLineText());
      assertTrue(strBuilder8.isEmpty());
      assertFalse(strBuilder7.isNotEmpty());
      assertEquals(12, strBuilder7.capacity());
      assertNull(strBuilder7.getNullText());
      assertEquals(0, strBuilder7.length());
      assertNull(strBuilder7.getNewLineText());
      assertEquals(0, strBuilder7.size());
      assertTrue(strBuilder7.isEmpty());
      assertNotNull(strBuilder8);
      assertFalse(strBuilder8.equals((Object)strBuilder3));
      assertFalse(strBuilder8.equals((Object)strBuilder0));
      assertTrue(strBuilder8.equals((Object)strBuilder6));
      assertFalse(strBuilder8.equals((Object)strBuilder1));
      assertFalse(strBuilder8.equals((Object)strBuilder5));
      assertFalse(strBuilder8.equals((Object)strBuilder2));
      assertFalse(strBuilder8.equals((Object)strBuilder4));
      assertFalse(strBuilder7.equals((Object)strBuilder5));
      assertFalse(strBuilder7.equals((Object)strBuilder3));
      assertTrue(strBuilder7.equals((Object)strBuilder6));
      assertFalse(strBuilder7.equals((Object)strBuilder1));
      assertFalse(strBuilder7.equals((Object)strBuilder0));
      assertFalse(strBuilder7.equals((Object)strBuilder4));
      assertFalse(strBuilder7.equals((Object)strBuilder2));
      assertNotSame(strBuilder8, strBuilder3);
      assertNotSame(strBuilder8, strBuilder0);
      assertNotSame(strBuilder8, strBuilder1);
      assertSame(strBuilder8, strBuilder7);
      assertNotSame(strBuilder8, strBuilder6);
      assertNotSame(strBuilder8, strBuilder5);
      assertNotSame(strBuilder8, strBuilder2);
      assertNotSame(strBuilder8, strBuilder4);
      assertSame(strBuilder7, strBuilder8);
      assertNotSame(strBuilder7, strBuilder5);
      assertNotSame(strBuilder7, strBuilder3);
      assertNotSame(strBuilder7, strBuilder6);
      assertNotSame(strBuilder7, strBuilder1);
      assertNotSame(strBuilder7, strBuilder0);
      assertNotSame(strBuilder7, strBuilder4);
      assertNotSame(strBuilder7, strBuilder2);
      
      int int2 = strBuilder7.readFrom(strBuilder_StrBuilderReader0);
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(7, strBuilder0.length());
      assertEquals(7, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(34, strBuilder0.capacity());
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder1.getNullText());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(7, strBuilder1.length());
      assertEquals(7, strBuilder1.size());
      assertNull(strBuilder1.getNewLineText());
      assertTrue(strBuilder1.isNotEmpty());
      assertEquals(34, strBuilder1.capacity());
      assertEquals(7, strBuilder2.length());
      assertEquals(7, strBuilder2.size());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(34, strBuilder2.capacity());
      assertTrue(strBuilder2.isNotEmpty());
      assertNull(strBuilder2.getNullText());
      assertFalse(strBuilder2.isEmpty());
      assertTrue(strBuilder_StrBuilderReader0.markSupported());
      assertFalse(strBuilder_StrBuilderReader0.ready());
      assertEquals(7, strBuilder7.length());
      assertEquals(7, strBuilder7.size());
      assertEquals(12, strBuilder7.capacity());
      assertTrue(strBuilder7.isNotEmpty());
      assertFalse(strBuilder7.isEmpty());
      assertNull(strBuilder7.getNullText());
      assertNull(strBuilder7.getNewLineText());
      assertEquals(7, int2);
      assertTrue(strBuilder0.equals((Object)strBuilder7));
      assertFalse(strBuilder0.equals((Object)strBuilder6));
      assertTrue(strBuilder0.equals((Object)strBuilder8));
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertTrue(strBuilder1.equals((Object)strBuilder7));
      assertFalse(strBuilder1.equals((Object)strBuilder6));
      assertTrue(strBuilder1.equals((Object)strBuilder8));
      assertFalse(strBuilder2.equals((Object)strBuilder6));
      assertTrue(strBuilder2.equals((Object)strBuilder8));
      assertTrue(strBuilder2.equals((Object)strBuilder7));
      assertTrue(strBuilder7.equals((Object)strBuilder0));
      assertTrue(strBuilder7.equals((Object)strBuilder3));
      assertTrue(strBuilder7.equals((Object)strBuilder4));
      assertTrue(strBuilder7.equals((Object)strBuilder2));
      assertTrue(strBuilder7.equals((Object)strBuilder5));
      assertFalse(strBuilder7.equals((Object)strBuilder6));
      assertTrue(strBuilder7.equals((Object)strBuilder1));
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder3);
      assertNotSame(strBuilder0, strBuilder7);
      assertNotSame(strBuilder0, strBuilder8);
      assertNotSame(strBuilder0, strBuilder6);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder4);
      assertSame(strBuilder1, strBuilder0);
      assertNotSame(strBuilder1, strBuilder7);
      assertSame(strBuilder1, strBuilder5);
      assertNotSame(strBuilder1, strBuilder8);
      assertNotSame(strBuilder1, strBuilder6);
      assertNotSame(strBuilder2, strBuilder7);
      assertNotSame(strBuilder2, strBuilder8);
      assertNotSame(strBuilder2, strBuilder6);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder5);
      assertSame(strBuilder2, strBuilder4);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder3);
      assertSame(strBuilder7, strBuilder8);
      assertNotSame(strBuilder7, strBuilder5);
      assertNotSame(strBuilder7, strBuilder3);
      assertNotSame(strBuilder7, strBuilder6);
      assertNotSame(strBuilder7, strBuilder1);
      assertNotSame(strBuilder7, strBuilder0);
      assertNotSame(strBuilder7, strBuilder4);
      assertNotSame(strBuilder7, strBuilder2);
      
      StrBuilder strBuilder9 = strBuilder3.minimizeCapacity();
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(7, strBuilder0.capacity());
      assertEquals(7, strBuilder0.length());
      assertEquals(7, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder9.isEmpty());
      assertNull(strBuilder9.getNewLineText());
      assertTrue(strBuilder9.isNotEmpty());
      assertNull(strBuilder9.getNullText());
      assertEquals(7, strBuilder9.size());
      assertEquals(7, strBuilder9.length());
      assertEquals(7, strBuilder9.capacity());
      assertEquals(7, strBuilder1.capacity());
      assertNull(strBuilder1.getNullText());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(7, strBuilder1.length());
      assertEquals(7, strBuilder1.size());
      assertNull(strBuilder1.getNewLineText());
      assertTrue(strBuilder1.isNotEmpty());
      assertEquals(7, strBuilder2.length());
      assertEquals(7, strBuilder2.size());
      assertNull(strBuilder2.getNewLineText());
      assertTrue(strBuilder2.isNotEmpty());
      assertNull(strBuilder2.getNullText());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(7, strBuilder2.capacity());
      assertEquals(7, strBuilder3.length());
      assertEquals(7, strBuilder3.capacity());
      assertFalse(strBuilder3.isEmpty());
      assertNull(strBuilder3.getNewLineText());
      assertTrue(strBuilder3.isNotEmpty());
      assertNull(strBuilder3.getNullText());
      assertEquals(7, strBuilder3.size());
      assertNotNull(strBuilder9);
      assertTrue(strBuilder0.equals((Object)strBuilder7));
      assertFalse(strBuilder0.equals((Object)strBuilder6));
      assertTrue(strBuilder0.equals((Object)strBuilder8));
      assertFalse(strBuilder9.equals((Object)strBuilder6));
      assertTrue(strBuilder9.equals((Object)strBuilder7));
      assertTrue(strBuilder9.equals((Object)strBuilder8));
      assertTrue(strBuilder1.equals((Object)strBuilder7));
      assertFalse(strBuilder1.equals((Object)strBuilder6));
      assertTrue(strBuilder1.equals((Object)strBuilder8));
      assertFalse(strBuilder2.equals((Object)strBuilder6));
      assertTrue(strBuilder2.equals((Object)strBuilder8));
      assertTrue(strBuilder2.equals((Object)strBuilder7));
      assertTrue(strBuilder3.equals((Object)strBuilder7));
      assertTrue(strBuilder3.equals((Object)strBuilder8));
      assertFalse(strBuilder3.equals((Object)strBuilder6));
      assertArrayEquals(new char[] {'#'}, charArray0);
      assertEquals(1, charArray0.length);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder3);
      assertNotSame(strBuilder0, strBuilder7);
      assertNotSame(strBuilder0, strBuilder8);
      assertSame(strBuilder0, strBuilder9);
      assertNotSame(strBuilder0, strBuilder6);
      assertSame(strBuilder0, strBuilder1);
      assertNotSame(strBuilder9, strBuilder8);
      assertSame(strBuilder9, strBuilder1);
      assertNotSame(strBuilder9, strBuilder6);
      assertSame(strBuilder9, strBuilder4);
      assertSame(strBuilder9, strBuilder0);
      assertSame(strBuilder9, strBuilder5);
      assertSame(strBuilder9, strBuilder2);
      assertSame(strBuilder9, strBuilder3);
      assertNotSame(strBuilder9, strBuilder7);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder4);
      assertSame(strBuilder1, strBuilder9);
      assertSame(strBuilder1, strBuilder0);
      assertNotSame(strBuilder1, strBuilder7);
      assertSame(strBuilder1, strBuilder5);
      assertNotSame(strBuilder1, strBuilder8);
      assertNotSame(strBuilder1, strBuilder6);
      assertNotSame(strBuilder2, strBuilder7);
      assertNotSame(strBuilder2, strBuilder8);
      assertNotSame(strBuilder2, strBuilder6);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder5);
      assertSame(strBuilder2, strBuilder4);
      assertSame(strBuilder2, strBuilder9);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder3);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder9);
      assertSame(strBuilder3, strBuilder2);
      assertSame(strBuilder3, strBuilder4);
      assertNotSame(strBuilder3, strBuilder7);
      assertSame(strBuilder3, strBuilder5);
      assertNotSame(strBuilder3, strBuilder8);
      assertSame(strBuilder3, strBuilder1);
      assertNotSame(strBuilder3, strBuilder6);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("^idxVa9J(IJ6fm");
      assertEquals(46, strBuilder0.capacity());
      assertEquals(14, strBuilder0.size());
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(14, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.replaceFirst('B', 'B');
      assertEquals(46, strBuilder0.capacity());
      assertEquals(14, strBuilder0.size());
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(14, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder1.isNotEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(14, strBuilder1.size());
      assertEquals(14, strBuilder1.length());
      assertEquals(46, strBuilder1.capacity());
      assertNull(strBuilder1.getNullText());
      assertNotNull(strBuilder1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      int int0 = 4;
      StrBuilder strBuilder0 = new StrBuilder(4);
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(4, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = new StrBuilder();
      assertEquals(0, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(0, strBuilder1.size());
      assertEquals(32, strBuilder1.capacity());
      assertTrue(strBuilder1.isEmpty());
      assertFalse(strBuilder1.isNotEmpty());
      assertNotNull(strBuilder1);
      assertTrue(strBuilder1.equals((Object)strBuilder0));
      
      StrBuilder strBuilder2 = new StrBuilder(4);
      assertTrue(strBuilder2.isEmpty());
      assertEquals(0, strBuilder2.size());
      assertFalse(strBuilder2.isNotEmpty());
      assertNull(strBuilder2.getNullText());
      assertEquals(4, strBuilder2.capacity());
      assertEquals(0, strBuilder2.length());
      assertNull(strBuilder2.getNewLineText());
      assertNotNull(strBuilder2);
      assertTrue(strBuilder2.equals((Object)strBuilder0));
      assertTrue(strBuilder2.equals((Object)strBuilder1));
      
      StrBuilder strBuilder3 = strBuilder1.append("6)futpsE78#RHa");
      assertEquals(14, strBuilder1.size());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertTrue(strBuilder1.isNotEmpty());
      assertEquals(14, strBuilder1.length());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder3.getNewLineText());
      assertNull(strBuilder3.getNullText());
      assertEquals(32, strBuilder3.capacity());
      assertTrue(strBuilder3.isNotEmpty());
      assertEquals(14, strBuilder3.length());
      assertEquals(14, strBuilder3.size());
      assertFalse(strBuilder3.isEmpty());
      assertNotNull(strBuilder3);
      assertFalse(strBuilder1.equals((Object)strBuilder0));
      assertFalse(strBuilder1.equals((Object)strBuilder2));
      assertFalse(strBuilder3.equals((Object)strBuilder2));
      assertFalse(strBuilder3.equals((Object)strBuilder0));
      assertSame(strBuilder1, strBuilder3);
      assertNotSame(strBuilder1, strBuilder0);
      assertNotSame(strBuilder1, strBuilder2);
      assertNotSame(strBuilder3, strBuilder2);
      assertNotSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder1);
      
      StrBuilder strBuilder4 = strBuilder0.replaceFirst('n', 'n');
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(4, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder4.length());
      assertNull(strBuilder4.getNullText());
      assertNull(strBuilder4.getNewLineText());
      assertTrue(strBuilder4.isEmpty());
      assertFalse(strBuilder4.isNotEmpty());
      assertEquals(4, strBuilder4.capacity());
      assertEquals(0, strBuilder4.size());
      assertNotNull(strBuilder4);
      assertFalse(strBuilder0.equals((Object)strBuilder1));
      assertTrue(strBuilder0.equals((Object)strBuilder2));
      assertFalse(strBuilder0.equals((Object)strBuilder3));
      assertTrue(strBuilder4.equals((Object)strBuilder2));
      assertFalse(strBuilder4.equals((Object)strBuilder1));
      assertFalse(strBuilder4.equals((Object)strBuilder3));
      assertNotSame(strBuilder0, strBuilder1);
      assertNotSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder4);
      assertNotSame(strBuilder0, strBuilder2);
      assertNotSame(strBuilder4, strBuilder1);
      assertNotSame(strBuilder4, strBuilder2);
      assertNotSame(strBuilder4, strBuilder3);
      assertSame(strBuilder4, strBuilder0);
      
      StrBuilder strBuilder5 = new StrBuilder();
      assertEquals(0, strBuilder5.size());
      assertFalse(strBuilder5.isNotEmpty());
      assertEquals(0, strBuilder5.length());
      assertEquals(32, strBuilder5.capacity());
      assertTrue(strBuilder5.isEmpty());
      assertNull(strBuilder5.getNewLineText());
      assertNull(strBuilder5.getNullText());
      assertNotNull(strBuilder5);
      assertTrue(strBuilder5.equals((Object)strBuilder0));
      assertTrue(strBuilder5.equals((Object)strBuilder2));
      assertFalse(strBuilder5.equals((Object)strBuilder3));
      assertTrue(strBuilder5.equals((Object)strBuilder4));
      assertFalse(strBuilder5.equals((Object)strBuilder1));
      
      String string0 = strBuilder5.leftString(4);
      assertEquals(0, strBuilder5.size());
      assertFalse(strBuilder5.isNotEmpty());
      assertEquals(0, strBuilder5.length());
      assertEquals(32, strBuilder5.capacity());
      assertTrue(strBuilder5.isEmpty());
      assertNull(strBuilder5.getNewLineText());
      assertNull(strBuilder5.getNullText());
      assertNotNull(string0);
      assertEquals("", string0);
      assertTrue(strBuilder5.equals((Object)strBuilder0));
      assertTrue(strBuilder5.equals((Object)strBuilder2));
      assertFalse(strBuilder5.equals((Object)strBuilder3));
      assertTrue(strBuilder5.equals((Object)strBuilder4));
      assertFalse(strBuilder5.equals((Object)strBuilder1));
      assertNotSame(strBuilder5, strBuilder4);
      assertNotSame(strBuilder5, strBuilder0);
      assertNotSame(strBuilder5, strBuilder3);
      assertNotSame(strBuilder5, strBuilder1);
      assertNotSame(strBuilder5, strBuilder2);
      
      StrBuilder strBuilder6 = new StrBuilder(4);
      assertFalse(strBuilder6.isNotEmpty());
      assertTrue(strBuilder6.isEmpty());
      assertNull(strBuilder6.getNullText());
      assertNull(strBuilder6.getNewLineText());
      assertEquals(4, strBuilder6.capacity());
      assertEquals(0, strBuilder6.size());
      assertEquals(0, strBuilder6.length());
      assertNotNull(strBuilder6);
      assertTrue(strBuilder6.equals((Object)strBuilder0));
      assertTrue(strBuilder6.equals((Object)strBuilder4));
      assertFalse(strBuilder6.equals((Object)strBuilder3));
      assertFalse(strBuilder6.equals((Object)strBuilder1));
      assertTrue(strBuilder6.equals((Object)strBuilder2));
      assertTrue(strBuilder6.equals((Object)strBuilder5));
      
      String string1 = strBuilder3.build();
      assertEquals(14, strBuilder1.size());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertTrue(strBuilder1.isNotEmpty());
      assertEquals(14, strBuilder1.length());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder3.getNewLineText());
      assertNull(strBuilder3.getNullText());
      assertEquals(32, strBuilder3.capacity());
      assertTrue(strBuilder3.isNotEmpty());
      assertEquals(14, strBuilder3.length());
      assertEquals(14, strBuilder3.size());
      assertFalse(strBuilder3.isEmpty());
      assertNotNull(string1);
      assertEquals("6)futpsE78#RHa", string1);
      assertFalse(strBuilder1.equals((Object)strBuilder4));
      assertFalse(strBuilder1.equals((Object)strBuilder0));
      assertFalse(strBuilder1.equals((Object)strBuilder2));
      assertFalse(strBuilder1.equals((Object)strBuilder5));
      assertFalse(strBuilder1.equals((Object)strBuilder6));
      assertFalse(strBuilder3.equals((Object)strBuilder2));
      assertFalse(strBuilder3.equals((Object)strBuilder6));
      assertFalse(strBuilder3.equals((Object)strBuilder0));
      assertFalse(strBuilder3.equals((Object)strBuilder5));
      assertFalse(strBuilder3.equals((Object)strBuilder4));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(strBuilder1, strBuilder4);
      assertSame(strBuilder1, strBuilder3);
      assertNotSame(strBuilder1, strBuilder0);
      assertNotSame(strBuilder1, strBuilder2);
      assertNotSame(strBuilder1, strBuilder5);
      assertNotSame(strBuilder1, strBuilder6);
      assertNotSame(strBuilder3, strBuilder2);
      assertNotSame(strBuilder3, strBuilder6);
      assertNotSame(strBuilder3, strBuilder0);
      assertNotSame(strBuilder3, strBuilder5);
      assertNotSame(strBuilder3, strBuilder4);
      assertSame(strBuilder3, strBuilder1);
      
      StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer0 = strBuilder6.new StrBuilderTokenizer();
      assertFalse(strBuilder6.isNotEmpty());
      assertTrue(strBuilder6.isEmpty());
      assertNull(strBuilder6.getNullText());
      assertNull(strBuilder6.getNewLineText());
      assertEquals(4, strBuilder6.capacity());
      assertEquals(0, strBuilder6.size());
      assertEquals(0, strBuilder6.length());
      assertEquals(0, strBuilder_StrBuilderTokenizer0.nextIndex());
      assertEquals((-1), strBuilder_StrBuilderTokenizer0.previousIndex());
      assertTrue(strBuilder_StrBuilderTokenizer0.isIgnoreEmptyTokens());
      assertFalse(strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull());
      assertNotNull(strBuilder_StrBuilderTokenizer0);
      assertTrue(strBuilder6.equals((Object)strBuilder0));
      assertTrue(strBuilder6.equals((Object)strBuilder4));
      assertFalse(strBuilder6.equals((Object)strBuilder3));
      assertFalse(strBuilder6.equals((Object)strBuilder1));
      assertTrue(strBuilder6.equals((Object)strBuilder2));
      assertTrue(strBuilder6.equals((Object)strBuilder5));
      
      String string2 = strBuilder_StrBuilderTokenizer0.getContent();
      assertFalse(strBuilder6.isNotEmpty());
      assertTrue(strBuilder6.isEmpty());
      assertNull(strBuilder6.getNullText());
      assertNull(strBuilder6.getNewLineText());
      assertEquals(4, strBuilder6.capacity());
      assertEquals(0, strBuilder6.size());
      assertEquals(0, strBuilder6.length());
      assertEquals(0, strBuilder_StrBuilderTokenizer0.nextIndex());
      assertEquals((-1), strBuilder_StrBuilderTokenizer0.previousIndex());
      assertTrue(strBuilder_StrBuilderTokenizer0.isIgnoreEmptyTokens());
      assertFalse(strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull());
      assertNotNull(string2);
      assertEquals("", string2);
      assertTrue(strBuilder6.equals((Object)strBuilder0));
      assertTrue(strBuilder6.equals((Object)strBuilder4));
      assertFalse(strBuilder6.equals((Object)strBuilder3));
      assertFalse(strBuilder6.equals((Object)strBuilder1));
      assertTrue(strBuilder6.equals((Object)strBuilder2));
      assertTrue(strBuilder6.equals((Object)strBuilder5));
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotSame(strBuilder6, strBuilder2);
      assertNotSame(strBuilder6, strBuilder5);
      assertNotSame(strBuilder6, strBuilder0);
      assertNotSame(strBuilder6, strBuilder3);
      assertNotSame(strBuilder6, strBuilder1);
      assertNotSame(strBuilder6, strBuilder4);
      
      int int1 = (-3582);
      StrBuilder strBuilder7 = new StrBuilder((-3582));
      assertEquals(0, strBuilder7.length());
      assertNull(strBuilder7.getNullText());
      assertNull(strBuilder7.getNewLineText());
      assertEquals(0, strBuilder7.size());
      assertFalse(strBuilder7.isNotEmpty());
      assertTrue(strBuilder7.isEmpty());
      assertEquals(32, strBuilder7.capacity());
      assertNotNull(strBuilder7);
      assertTrue(strBuilder7.equals((Object)strBuilder2));
      assertTrue(strBuilder7.equals((Object)strBuilder5));
      assertTrue(strBuilder7.equals((Object)strBuilder6));
      assertTrue(strBuilder7.equals((Object)strBuilder0));
      assertFalse(strBuilder7.equals((Object)strBuilder1));
      assertFalse(strBuilder7.equals((Object)strBuilder3));
      assertTrue(strBuilder7.equals((Object)strBuilder4));
      
      StrBuilder strBuilder8 = new StrBuilder();
      assertTrue(strBuilder8.isEmpty());
      assertNull(strBuilder8.getNewLineText());
      assertNull(strBuilder8.getNullText());
      assertEquals(32, strBuilder8.capacity());
      assertFalse(strBuilder8.isNotEmpty());
      assertEquals(0, strBuilder8.size());
      assertEquals(0, strBuilder8.length());
      assertNotNull(strBuilder8);
      assertTrue(strBuilder8.equals((Object)strBuilder7));
      assertFalse(strBuilder8.equals((Object)strBuilder1));
      assertTrue(strBuilder8.equals((Object)strBuilder4));
      assertTrue(strBuilder8.equals((Object)strBuilder0));
      assertTrue(strBuilder8.equals((Object)strBuilder5));
      assertTrue(strBuilder8.equals((Object)strBuilder2));
      assertFalse(strBuilder8.equals((Object)strBuilder3));
      assertTrue(strBuilder8.equals((Object)strBuilder6));
      
      StrBuilder strBuilder9 = strBuilder8.appendln((double) (-3582));
      assertNull(strBuilder8.getNewLineText());
      assertEquals(8, strBuilder8.size());
      assertNull(strBuilder8.getNullText());
      assertEquals(8, strBuilder8.length());
      assertFalse(strBuilder8.isEmpty());
      assertTrue(strBuilder8.isNotEmpty());
      assertEquals(32, strBuilder8.capacity());
      assertFalse(strBuilder9.isEmpty());
      assertNull(strBuilder9.getNewLineText());
      assertNull(strBuilder9.getNullText());
      assertEquals(32, strBuilder9.capacity());
      assertTrue(strBuilder9.isNotEmpty());
      assertEquals(8, strBuilder9.size());
      assertEquals(8, strBuilder9.length());
      assertNotNull(strBuilder9);
      assertFalse(strBuilder8.equals((Object)strBuilder5));
      assertFalse(strBuilder8.equals((Object)strBuilder2));
      assertFalse(strBuilder8.equals((Object)strBuilder1));
      assertFalse(strBuilder8.equals((Object)strBuilder6));
      assertFalse(strBuilder8.equals((Object)strBuilder0));
      assertFalse(strBuilder8.equals((Object)strBuilder7));
      assertFalse(strBuilder8.equals((Object)strBuilder4));
      assertFalse(strBuilder8.equals((Object)strBuilder3));
      assertFalse(strBuilder9.equals((Object)strBuilder4));
      assertFalse(strBuilder9.equals((Object)strBuilder7));
      assertFalse(strBuilder9.equals((Object)strBuilder0));
      assertFalse(strBuilder9.equals((Object)strBuilder5));
      assertFalse(strBuilder9.equals((Object)strBuilder2));
      assertFalse(strBuilder9.equals((Object)strBuilder6));
      assertFalse(strBuilder9.equals((Object)strBuilder1));
      assertFalse(strBuilder9.equals((Object)strBuilder3));
      assertNotSame(strBuilder8, strBuilder5);
      assertNotSame(strBuilder8, strBuilder2);
      assertNotSame(strBuilder8, strBuilder1);
      assertNotSame(strBuilder8, strBuilder6);
      assertNotSame(strBuilder8, strBuilder0);
      assertNotSame(strBuilder8, strBuilder7);
      assertNotSame(strBuilder8, strBuilder4);
      assertSame(strBuilder8, strBuilder9);
      assertNotSame(strBuilder8, strBuilder3);
      assertNotSame(strBuilder9, strBuilder4);
      assertNotSame(strBuilder9, strBuilder7);
      assertNotSame(strBuilder9, strBuilder0);
      assertNotSame(strBuilder9, strBuilder5);
      assertNotSame(strBuilder9, strBuilder2);
      assertSame(strBuilder9, strBuilder8);
      assertNotSame(strBuilder9, strBuilder6);
      assertNotSame(strBuilder9, strBuilder1);
      assertNotSame(strBuilder9, strBuilder3);
      
      boolean boolean0 = strBuilder5.startsWith("");
      assertEquals(0, strBuilder5.size());
      assertFalse(strBuilder5.isNotEmpty());
      assertEquals(0, strBuilder5.length());
      assertEquals(32, strBuilder5.capacity());
      assertTrue(strBuilder5.isEmpty());
      assertNull(strBuilder5.getNewLineText());
      assertNull(strBuilder5.getNullText());
      assertTrue(boolean0);
      assertTrue(strBuilder5.equals((Object)strBuilder0));
      assertFalse(strBuilder5.equals((Object)strBuilder9));
      assertTrue(strBuilder5.equals((Object)strBuilder2));
      assertTrue(strBuilder5.equals((Object)strBuilder7));
      assertFalse(strBuilder5.equals((Object)strBuilder8));
      assertTrue(strBuilder5.equals((Object)strBuilder6));
      assertFalse(strBuilder5.equals((Object)strBuilder3));
      assertTrue(strBuilder5.equals((Object)strBuilder4));
      assertFalse(strBuilder5.equals((Object)strBuilder1));
      assertNotSame(strBuilder5, strBuilder9);
      assertNotSame(strBuilder5, strBuilder8);
      assertNotSame(strBuilder5, strBuilder4);
      assertNotSame(strBuilder5, strBuilder0);
      assertNotSame(strBuilder5, strBuilder3);
      assertNotSame(strBuilder5, strBuilder1);
      assertNotSame(strBuilder5, strBuilder6);
      assertNotSame(strBuilder5, strBuilder2);
      assertNotSame(strBuilder5, strBuilder7);
      
      StrBuilder strBuilder10 = new StrBuilder("Q/Gw+VJ?0tT7S<(");
      assertEquals(48, strBuilder10.capacity());
      assertNull(strBuilder10.getNewLineText());
      assertNull(strBuilder10.getNullText());
      assertEquals(16, strBuilder10.size());
      assertTrue(strBuilder10.isNotEmpty());
      assertFalse(strBuilder10.isEmpty());
      assertEquals(16, strBuilder10.length());
      assertNotNull(strBuilder10);
      assertFalse(strBuilder10.equals((Object)strBuilder0));
      assertFalse(strBuilder10.equals((Object)strBuilder3));
      assertFalse(strBuilder10.equals((Object)strBuilder1));
      assertFalse(strBuilder10.equals((Object)strBuilder6));
      assertFalse(strBuilder10.equals((Object)strBuilder2));
      assertFalse(strBuilder10.equals((Object)strBuilder7));
      assertFalse(strBuilder10.equals((Object)strBuilder9));
      assertFalse(strBuilder10.equals((Object)strBuilder5));
      assertFalse(strBuilder10.equals((Object)strBuilder8));
      assertFalse(strBuilder10.equals((Object)strBuilder4));
      
      StrBuilder strBuilder11 = strBuilder10.setNullText((String) null);
      assertEquals(48, strBuilder10.capacity());
      assertNull(strBuilder10.getNewLineText());
      assertNull(strBuilder10.getNullText());
      assertEquals(16, strBuilder10.size());
      assertTrue(strBuilder10.isNotEmpty());
      assertFalse(strBuilder10.isEmpty());
      assertEquals(16, strBuilder10.length());
      assertNull(strBuilder11.getNullText());
      assertNull(strBuilder11.getNewLineText());
      assertFalse(strBuilder11.isEmpty());
      assertEquals(48, strBuilder11.capacity());
      assertTrue(strBuilder11.isNotEmpty());
      assertEquals(16, strBuilder11.size());
      assertEquals(16, strBuilder11.length());
      assertNotNull(strBuilder11);
      assertFalse(strBuilder10.equals((Object)strBuilder0));
      assertFalse(strBuilder10.equals((Object)strBuilder3));
      assertFalse(strBuilder10.equals((Object)strBuilder1));
      assertFalse(strBuilder10.equals((Object)strBuilder6));
      assertFalse(strBuilder10.equals((Object)strBuilder2));
      assertFalse(strBuilder10.equals((Object)strBuilder7));
      assertFalse(strBuilder10.equals((Object)strBuilder9));
      assertFalse(strBuilder10.equals((Object)strBuilder5));
      assertFalse(strBuilder10.equals((Object)strBuilder8));
      assertFalse(strBuilder10.equals((Object)strBuilder4));
      assertFalse(strBuilder11.equals((Object)strBuilder1));
      assertFalse(strBuilder11.equals((Object)strBuilder6));
      assertFalse(strBuilder11.equals((Object)strBuilder9));
      assertFalse(strBuilder11.equals((Object)strBuilder0));
      assertFalse(strBuilder11.equals((Object)strBuilder2));
      assertFalse(strBuilder11.equals((Object)strBuilder7));
      assertFalse(strBuilder11.equals((Object)strBuilder8));
      assertFalse(strBuilder11.equals((Object)strBuilder3));
      assertFalse(strBuilder11.equals((Object)strBuilder5));
      assertFalse(strBuilder11.equals((Object)strBuilder4));
      assertNotSame(strBuilder10, strBuilder0);
      assertNotSame(strBuilder10, strBuilder3);
      assertNotSame(strBuilder10, strBuilder1);
      assertNotSame(strBuilder10, strBuilder6);
      assertNotSame(strBuilder10, strBuilder2);
      assertNotSame(strBuilder10, strBuilder7);
      assertNotSame(strBuilder10, strBuilder9);
      assertNotSame(strBuilder10, strBuilder5);
      assertNotSame(strBuilder10, strBuilder8);
      assertNotSame(strBuilder10, strBuilder4);
      assertSame(strBuilder10, strBuilder11);
      assertNotSame(strBuilder11, strBuilder1);
      assertNotSame(strBuilder11, strBuilder6);
      assertNotSame(strBuilder11, strBuilder9);
      assertNotSame(strBuilder11, strBuilder0);
      assertNotSame(strBuilder11, strBuilder2);
      assertNotSame(strBuilder11, strBuilder7);
      assertNotSame(strBuilder11, strBuilder8);
      assertNotSame(strBuilder11, strBuilder3);
      assertSame(strBuilder11, strBuilder10);
      assertNotSame(strBuilder11, strBuilder5);
      assertNotSame(strBuilder11, strBuilder4);
      
      StrBuilder strBuilder12 = strBuilder6.appendln((StringBuffer) null);
      assertNull(strBuilder12.getNewLineText());
      assertFalse(strBuilder12.isEmpty());
      assertNull(strBuilder12.getNullText());
      assertEquals(4, strBuilder12.capacity());
      assertTrue(strBuilder12.isNotEmpty());
      assertEquals(1, strBuilder12.length());
      assertEquals(1, strBuilder12.size());
      assertTrue(strBuilder6.isNotEmpty());
      assertFalse(strBuilder6.isEmpty());
      assertNull(strBuilder6.getNullText());
      assertNull(strBuilder6.getNewLineText());
      assertEquals(4, strBuilder6.capacity());
      assertEquals(1, strBuilder6.size());
      assertEquals(1, strBuilder6.length());
      assertNotNull(strBuilder12);
      assertFalse(strBuilder12.equals((Object)strBuilder8));
      assertFalse(strBuilder12.equals((Object)strBuilder0));
      assertFalse(strBuilder12.equals((Object)strBuilder4));
      assertFalse(strBuilder12.equals((Object)strBuilder7));
      assertFalse(strBuilder12.equals((Object)strBuilder10));
      assertFalse(strBuilder12.equals((Object)strBuilder9));
      assertFalse(strBuilder12.equals((Object)strBuilder1));
      assertFalse(strBuilder12.equals((Object)strBuilder5));
      assertFalse(strBuilder12.equals((Object)strBuilder2));
      assertFalse(strBuilder12.equals((Object)strBuilder3));
      assertFalse(strBuilder12.equals((Object)strBuilder11));
      assertFalse(strBuilder6.equals((Object)strBuilder2));
      assertFalse(strBuilder6.equals((Object)strBuilder10));
      assertFalse(strBuilder6.equals((Object)strBuilder11));
      assertFalse(strBuilder6.equals((Object)strBuilder5));
      assertFalse(strBuilder6.equals((Object)strBuilder9));
      assertFalse(strBuilder6.equals((Object)strBuilder0));
      assertFalse(strBuilder6.equals((Object)strBuilder3));
      assertFalse(strBuilder6.equals((Object)strBuilder7));
      assertFalse(strBuilder6.equals((Object)strBuilder1));
      assertFalse(strBuilder6.equals((Object)strBuilder4));
      assertFalse(strBuilder6.equals((Object)strBuilder8));
      assertNotSame(strBuilder12, strBuilder8);
      assertNotSame(strBuilder12, strBuilder4);
      assertNotSame(strBuilder12, strBuilder0);
      assertNotSame(strBuilder12, strBuilder7);
      assertSame(strBuilder12, strBuilder6);
      assertNotSame(strBuilder12, strBuilder10);
      assertNotSame(strBuilder12, strBuilder9);
      assertNotSame(strBuilder12, strBuilder1);
      assertNotSame(strBuilder12, strBuilder2);
      assertNotSame(strBuilder12, strBuilder5);
      assertNotSame(strBuilder12, strBuilder3);
      assertNotSame(strBuilder12, strBuilder11);
      assertNotSame(strBuilder6, strBuilder2);
      assertNotSame(strBuilder6, strBuilder10);
      assertNotSame(strBuilder6, strBuilder11);
      assertNotSame(strBuilder6, strBuilder5);
      assertSame(strBuilder6, strBuilder12);
      assertNotSame(strBuilder6, strBuilder9);
      assertNotSame(strBuilder6, strBuilder3);
      assertNotSame(strBuilder6, strBuilder0);
      assertNotSame(strBuilder6, strBuilder7);
      assertNotSame(strBuilder6, strBuilder1);
      assertNotSame(strBuilder6, strBuilder4);
      assertNotSame(strBuilder6, strBuilder8);
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'n';
      charArray0[1] = 'a';
      // Undeclared exception!
      try { 
        strBuilder5.insert(4, charArray0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 4
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(0);
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isEmpty());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.appendPadding(0, 'Q');
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertFalse(strBuilder1.isNotEmpty());
      assertEquals(0, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertEquals(0, strBuilder1.length());
      assertNull(strBuilder1.getNewLineText());
      assertTrue(strBuilder1.isEmpty());
      assertNotNull(strBuilder1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      
      StrBuilder strBuilder2 = strBuilder1.append((float) 1);
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(3, strBuilder0.length());
      assertEquals(3, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(3, strBuilder1.size());
      assertEquals(3, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertTrue(strBuilder1.isNotEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder2.getNewLineText());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(32, strBuilder2.capacity());
      assertTrue(strBuilder2.isNotEmpty());
      assertEquals(3, strBuilder2.length());
      assertEquals(3, strBuilder2.size());
      assertNull(strBuilder2.getNullText());
      assertNotNull(strBuilder2);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      
      boolean boolean0 = strBuilder0.contains('Q');
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(3, strBuilder0.length());
      assertEquals(3, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(boolean0);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(3, strBuilder0.length());
      assertEquals(3, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isNotEmpty());
      assertTrue(strBuilder_StrBuilderReader0.ready());
      assertTrue(strBuilder_StrBuilderReader0.markSupported());
      assertNotNull(strBuilder_StrBuilderReader0);
      
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) strBuilder_StrBuilderReader0;
      objectArray0[1] = (Object) strBuilder1;
      objectArray0[2] = (Object) strBuilder0;
      StrBuilder strBuilder3 = strBuilder2.append("', has a length less than 2", objectArray0);
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(30, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(30, strBuilder0.length());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertEquals(30, strBuilder1.size());
      assertTrue(strBuilder1.isNotEmpty());
      assertEquals(30, strBuilder1.length());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder2.getNewLineText());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(30, strBuilder2.length());
      assertEquals(32, strBuilder2.capacity());
      assertTrue(strBuilder2.isNotEmpty());
      assertEquals(30, strBuilder2.size());
      assertNull(strBuilder2.getNullText());
      assertEquals(30, strBuilder3.size());
      assertFalse(strBuilder3.isEmpty());
      assertTrue(strBuilder3.isNotEmpty());
      assertEquals(30, strBuilder3.length());
      assertEquals(32, strBuilder3.capacity());
      assertNull(strBuilder3.getNullText());
      assertNull(strBuilder3.getNewLineText());
      assertNotNull(strBuilder3);
      assertEquals(3, objectArray0.length);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder3);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder2);
      assertSame(strBuilder3, strBuilder1);
      
      StrBuilder strBuilder4 = new StrBuilder(1);
      assertTrue(strBuilder4.isEmpty());
      assertEquals(1, strBuilder4.capacity());
      assertFalse(strBuilder4.isNotEmpty());
      assertEquals(0, strBuilder4.length());
      assertEquals(0, strBuilder4.size());
      assertNull(strBuilder4.getNullText());
      assertNull(strBuilder4.getNewLineText());
      assertNotNull(strBuilder4);
      assertFalse(strBuilder4.equals((Object)strBuilder3));
      assertFalse(strBuilder4.equals((Object)strBuilder1));
      assertFalse(strBuilder4.equals((Object)strBuilder2));
      assertFalse(strBuilder4.equals((Object)strBuilder0));
      
      StrBuilder strBuilder5 = strBuilder2.append("r.tk=y?G8[");
      assertEquals(80, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(40, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(40, strBuilder0.size());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(80, strBuilder1.capacity());
      assertEquals(40, strBuilder1.size());
      assertEquals(40, strBuilder1.length());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertTrue(strBuilder1.isNotEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder2.getNewLineText());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(80, strBuilder2.capacity());
      assertTrue(strBuilder2.isNotEmpty());
      assertEquals(40, strBuilder2.size());
      assertNull(strBuilder2.getNullText());
      assertEquals(40, strBuilder2.length());
      assertNull(strBuilder5.getNewLineText());
      assertEquals(80, strBuilder5.capacity());
      assertEquals(40, strBuilder5.length());
      assertNull(strBuilder5.getNullText());
      assertEquals(40, strBuilder5.size());
      assertTrue(strBuilder5.isNotEmpty());
      assertFalse(strBuilder5.isEmpty());
      assertNotNull(strBuilder5);
      assertFalse(strBuilder0.equals((Object)strBuilder4));
      assertFalse(strBuilder1.equals((Object)strBuilder4));
      assertFalse(strBuilder2.equals((Object)strBuilder4));
      assertFalse(strBuilder5.equals((Object)strBuilder4));
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder3);
      assertNotSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertNotSame(strBuilder1, strBuilder4);
      assertSame(strBuilder1, strBuilder5);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder2, strBuilder0);
      assertNotSame(strBuilder2, strBuilder4);
      assertSame(strBuilder2, strBuilder3);
      assertSame(strBuilder2, strBuilder5);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder5, strBuilder0);
      assertSame(strBuilder5, strBuilder2);
      assertSame(strBuilder5, strBuilder1);
      assertSame(strBuilder5, strBuilder3);
      assertNotSame(strBuilder5, strBuilder4);
      
      StrBuilder strBuilder6 = strBuilder0.replaceFirst('n', 'Q');
      assertEquals(80, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(40, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(40, strBuilder0.size());
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder6.getNullText());
      assertFalse(strBuilder6.isEmpty());
      assertNull(strBuilder6.getNewLineText());
      assertEquals(40, strBuilder6.length());
      assertEquals(40, strBuilder6.size());
      assertTrue(strBuilder6.isNotEmpty());
      assertEquals(80, strBuilder6.capacity());
      assertNotNull(strBuilder6);
      assertFalse(strBuilder0.equals((Object)strBuilder4));
      assertFalse(strBuilder6.equals((Object)strBuilder4));
      assertSame(strBuilder0, strBuilder6);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder3);
      assertNotSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder6, strBuilder0);
      assertSame(strBuilder6, strBuilder5);
      assertSame(strBuilder6, strBuilder3);
      assertSame(strBuilder6, strBuilder2);
      assertSame(strBuilder6, strBuilder1);
      assertNotSame(strBuilder6, strBuilder4);
      
      String string0 = strBuilder0.leftString(0);
      assertEquals(80, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(40, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(40, strBuilder0.size());
      assertTrue(strBuilder0.isNotEmpty());
      assertNotNull(string0);
      assertEquals("", string0);
      assertFalse(strBuilder0.equals((Object)strBuilder4));
      assertSame(strBuilder0, strBuilder6);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder3);
      assertNotSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder1);
      
      StrBuilder strBuilder7 = new StrBuilder(0);
      assertFalse(strBuilder7.isNotEmpty());
      assertTrue(strBuilder7.isEmpty());
      assertNull(strBuilder7.getNullText());
      assertNull(strBuilder7.getNewLineText());
      assertEquals(32, strBuilder7.capacity());
      assertEquals(0, strBuilder7.size());
      assertEquals(0, strBuilder7.length());
      assertNotNull(strBuilder7);
      assertFalse(strBuilder7.equals((Object)strBuilder5));
      assertFalse(strBuilder7.equals((Object)strBuilder3));
      assertFalse(strBuilder7.equals((Object)strBuilder0));
      assertTrue(strBuilder7.equals((Object)strBuilder4));
      assertFalse(strBuilder7.equals((Object)strBuilder2));
      assertFalse(strBuilder7.equals((Object)strBuilder6));
      assertFalse(strBuilder7.equals((Object)strBuilder1));
      
      StrBuilder strBuilder8 = new StrBuilder(0);
      assertNull(strBuilder8.getNullText());
      assertNull(strBuilder8.getNewLineText());
      assertTrue(strBuilder8.isEmpty());
      assertEquals(32, strBuilder8.capacity());
      assertFalse(strBuilder8.isNotEmpty());
      assertEquals(0, strBuilder8.length());
      assertEquals(0, strBuilder8.size());
      assertNotNull(strBuilder8);
      assertTrue(strBuilder8.equals((Object)strBuilder7));
      assertFalse(strBuilder8.equals((Object)strBuilder0));
      assertFalse(strBuilder8.equals((Object)strBuilder6));
      assertFalse(strBuilder8.equals((Object)strBuilder5));
      assertTrue(strBuilder8.equals((Object)strBuilder4));
      assertFalse(strBuilder8.equals((Object)strBuilder3));
      assertFalse(strBuilder8.equals((Object)strBuilder2));
      assertFalse(strBuilder8.equals((Object)strBuilder1));
      
      StrBuilder strBuilder9 = strBuilder4.reverse();
      assertNull(strBuilder9.getNullText());
      assertEquals(0, strBuilder9.length());
      assertEquals(1, strBuilder9.capacity());
      assertEquals(0, strBuilder9.size());
      assertFalse(strBuilder9.isNotEmpty());
      assertTrue(strBuilder9.isEmpty());
      assertNull(strBuilder9.getNewLineText());
      assertTrue(strBuilder4.isEmpty());
      assertEquals(1, strBuilder4.capacity());
      assertFalse(strBuilder4.isNotEmpty());
      assertEquals(0, strBuilder4.length());
      assertEquals(0, strBuilder4.size());
      assertNull(strBuilder4.getNullText());
      assertNull(strBuilder4.getNewLineText());
      assertNotNull(strBuilder9);
      assertFalse(strBuilder9.equals((Object)strBuilder2));
      assertTrue(strBuilder9.equals((Object)strBuilder8));
      assertFalse(strBuilder9.equals((Object)strBuilder1));
      assertTrue(strBuilder9.equals((Object)strBuilder7));
      assertFalse(strBuilder9.equals((Object)strBuilder6));
      assertFalse(strBuilder9.equals((Object)strBuilder5));
      assertFalse(strBuilder9.equals((Object)strBuilder0));
      assertFalse(strBuilder9.equals((Object)strBuilder3));
      assertFalse(strBuilder4.equals((Object)strBuilder3));
      assertFalse(strBuilder4.equals((Object)strBuilder5));
      assertFalse(strBuilder4.equals((Object)strBuilder1));
      assertTrue(strBuilder4.equals((Object)strBuilder7));
      assertFalse(strBuilder4.equals((Object)strBuilder6));
      assertFalse(strBuilder4.equals((Object)strBuilder2));
      assertTrue(strBuilder4.equals((Object)strBuilder8));
      assertFalse(strBuilder4.equals((Object)strBuilder0));
      assertNotSame(strBuilder9, strBuilder2);
      assertNotSame(strBuilder9, strBuilder1);
      assertNotSame(strBuilder9, strBuilder6);
      assertNotSame(strBuilder9, strBuilder5);
      assertNotSame(strBuilder9, strBuilder7);
      assertSame(strBuilder9, strBuilder4);
      assertNotSame(strBuilder9, strBuilder0);
      assertNotSame(strBuilder9, strBuilder3);
      assertNotSame(strBuilder9, strBuilder8);
      assertNotSame(strBuilder4, strBuilder3);
      assertNotSame(strBuilder4, strBuilder5);
      assertNotSame(strBuilder4, strBuilder7);
      assertNotSame(strBuilder4, strBuilder1);
      assertNotSame(strBuilder4, strBuilder6);
      assertNotSame(strBuilder4, strBuilder2);
      assertSame(strBuilder4, strBuilder9);
      assertNotSame(strBuilder4, strBuilder8);
      assertNotSame(strBuilder4, strBuilder0);
      
      StrBuilder strBuilder10 = new StrBuilder();
      assertFalse(strBuilder10.isNotEmpty());
      assertEquals(0, strBuilder10.size());
      assertNull(strBuilder10.getNewLineText());
      assertNull(strBuilder10.getNullText());
      assertEquals(0, strBuilder10.length());
      assertEquals(32, strBuilder10.capacity());
      assertTrue(strBuilder10.isEmpty());
      assertNotNull(strBuilder10);
      assertTrue(strBuilder10.equals((Object)strBuilder9));
      assertFalse(strBuilder10.equals((Object)strBuilder0));
      assertFalse(strBuilder10.equals((Object)strBuilder6));
      assertTrue(strBuilder10.equals((Object)strBuilder8));
      assertFalse(strBuilder10.equals((Object)strBuilder1));
      assertFalse(strBuilder10.equals((Object)strBuilder2));
      assertTrue(strBuilder10.equals((Object)strBuilder4));
      assertFalse(strBuilder10.equals((Object)strBuilder3));
      assertTrue(strBuilder10.equals((Object)strBuilder7));
      assertFalse(strBuilder10.equals((Object)strBuilder5));
      
      StrBuilder strBuilder11 = strBuilder10.append((CharSequence) strBuilder3);
      assertEquals(80, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(40, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(40, strBuilder0.size());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(40, strBuilder10.length());
      assertNull(strBuilder10.getNewLineText());
      assertFalse(strBuilder10.isEmpty());
      assertNull(strBuilder10.getNullText());
      assertEquals(40, strBuilder10.size());
      assertEquals(80, strBuilder10.capacity());
      assertTrue(strBuilder10.isNotEmpty());
      assertEquals(80, strBuilder1.capacity());
      assertEquals(40, strBuilder1.size());
      assertEquals(40, strBuilder1.length());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertTrue(strBuilder1.isNotEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder11.getNullText());
      assertFalse(strBuilder11.isEmpty());
      assertTrue(strBuilder11.isNotEmpty());
      assertNull(strBuilder11.getNewLineText());
      assertEquals(40, strBuilder11.size());
      assertEquals(40, strBuilder11.length());
      assertEquals(80, strBuilder11.capacity());
      assertNull(strBuilder2.getNewLineText());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(80, strBuilder2.capacity());
      assertTrue(strBuilder2.isNotEmpty());
      assertEquals(40, strBuilder2.size());
      assertNull(strBuilder2.getNullText());
      assertEquals(40, strBuilder2.length());
      assertFalse(strBuilder3.isEmpty());
      assertTrue(strBuilder3.isNotEmpty());
      assertEquals(80, strBuilder3.capacity());
      assertEquals(40, strBuilder3.length());
      assertNull(strBuilder3.getNullText());
      assertNull(strBuilder3.getNewLineText());
      assertEquals(40, strBuilder3.size());
      assertNotNull(strBuilder11);
      assertTrue(strBuilder0.equals((Object)strBuilder10));
      assertFalse(strBuilder0.equals((Object)strBuilder9));
      assertFalse(strBuilder0.equals((Object)strBuilder7));
      assertFalse(strBuilder0.equals((Object)strBuilder8));
      assertFalse(strBuilder0.equals((Object)strBuilder4));
      assertFalse(strBuilder10.equals((Object)strBuilder8));
      assertTrue(strBuilder10.equals((Object)strBuilder1));
      assertTrue(strBuilder10.equals((Object)strBuilder2));
      assertTrue(strBuilder10.equals((Object)strBuilder5));
      assertTrue(strBuilder10.equals((Object)strBuilder3));
      assertFalse(strBuilder10.equals((Object)strBuilder7));
      assertTrue(strBuilder10.equals((Object)strBuilder0));
      assertFalse(strBuilder10.equals((Object)strBuilder4));
      assertFalse(strBuilder10.equals((Object)strBuilder9));
      assertTrue(strBuilder10.equals((Object)strBuilder6));
      assertFalse(strBuilder1.equals((Object)strBuilder9));
      assertTrue(strBuilder1.equals((Object)strBuilder10));
      assertFalse(strBuilder1.equals((Object)strBuilder7));
      assertFalse(strBuilder1.equals((Object)strBuilder4));
      assertFalse(strBuilder1.equals((Object)strBuilder8));
      assertTrue(strBuilder11.equals((Object)strBuilder5));
      assertTrue(strBuilder11.equals((Object)strBuilder3));
      assertFalse(strBuilder11.equals((Object)strBuilder8));
      assertTrue(strBuilder11.equals((Object)strBuilder2));
      assertFalse(strBuilder11.equals((Object)strBuilder7));
      assertTrue(strBuilder11.equals((Object)strBuilder1));
      assertFalse(strBuilder11.equals((Object)strBuilder9));
      assertTrue(strBuilder11.equals((Object)strBuilder0));
      assertTrue(strBuilder11.equals((Object)strBuilder6));
      assertFalse(strBuilder11.equals((Object)strBuilder4));
      assertFalse(strBuilder2.equals((Object)strBuilder9));
      assertFalse(strBuilder2.equals((Object)strBuilder4));
      assertFalse(strBuilder2.equals((Object)strBuilder8));
      assertFalse(strBuilder2.equals((Object)strBuilder7));
      assertTrue(strBuilder2.equals((Object)strBuilder10));
      assertFalse(strBuilder3.equals((Object)strBuilder8));
      assertFalse(strBuilder3.equals((Object)strBuilder7));
      assertFalse(strBuilder3.equals((Object)strBuilder4));
      assertFalse(strBuilder3.equals((Object)strBuilder9));
      assertTrue(strBuilder3.equals((Object)strBuilder10));
      assertEquals(3, objectArray0.length);
      assertSame(strBuilder0, strBuilder6);
      assertNotSame(strBuilder0, strBuilder9);
      assertSame(strBuilder0, strBuilder2);
      assertNotSame(strBuilder0, strBuilder7);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder3);
      assertNotSame(strBuilder0, strBuilder8);
      assertNotSame(strBuilder0, strBuilder4);
      assertNotSame(strBuilder0, strBuilder10);
      assertSame(strBuilder0, strBuilder1);
      assertNotSame(strBuilder0, strBuilder11);
      assertNotSame(strBuilder10, strBuilder8);
      assertNotSame(strBuilder10, strBuilder0);
      assertSame(strBuilder10, strBuilder11);
      assertNotSame(strBuilder10, strBuilder6);
      assertNotSame(strBuilder10, strBuilder7);
      assertNotSame(strBuilder10, strBuilder1);
      assertNotSame(strBuilder10, strBuilder2);
      assertNotSame(strBuilder10, strBuilder3);
      assertNotSame(strBuilder10, strBuilder4);
      assertNotSame(strBuilder10, strBuilder5);
      assertNotSame(strBuilder10, strBuilder9);
      assertNotSame(strBuilder1, strBuilder9);
      assertSame(strBuilder1, strBuilder2);
      assertNotSame(strBuilder1, strBuilder7);
      assertSame(strBuilder1, strBuilder0);
      assertNotSame(strBuilder1, strBuilder4);
      assertNotSame(strBuilder1, strBuilder10);
      assertSame(strBuilder1, strBuilder5);
      assertSame(strBuilder1, strBuilder3);
      assertNotSame(strBuilder1, strBuilder8);
      assertSame(strBuilder1, strBuilder6);
      assertNotSame(strBuilder1, strBuilder11);
      assertNotSame(strBuilder11, strBuilder2);
      assertNotSame(strBuilder11, strBuilder6);
      assertSame(strBuilder11, strBuilder10);
      assertNotSame(strBuilder11, strBuilder8);
      assertNotSame(strBuilder11, strBuilder0);
      assertNotSame(strBuilder11, strBuilder7);
      assertNotSame(strBuilder11, strBuilder3);
      assertNotSame(strBuilder11, strBuilder5);
      assertNotSame(strBuilder11, strBuilder9);
      assertNotSame(strBuilder11, strBuilder4);
      assertNotSame(strBuilder11, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertNotSame(strBuilder2, strBuilder9);
      assertSame(strBuilder2, strBuilder6);
      assertNotSame(strBuilder2, strBuilder4);
      assertNotSame(strBuilder2, strBuilder10);
      assertNotSame(strBuilder2, strBuilder8);
      assertSame(strBuilder2, strBuilder3);
      assertNotSame(strBuilder2, strBuilder11);
      assertNotSame(strBuilder2, strBuilder7);
      assertSame(strBuilder2, strBuilder5);
      assertSame(strBuilder2, strBuilder1);
      assertNotSame(strBuilder3, strBuilder8);
      assertNotSame(strBuilder3, strBuilder7);
      assertNotSame(strBuilder3, strBuilder4);
      assertNotSame(strBuilder3, strBuilder10);
      assertSame(strBuilder3, strBuilder0);
      assertNotSame(strBuilder3, strBuilder9);
      assertSame(strBuilder3, strBuilder6);
      assertSame(strBuilder3, strBuilder5);
      assertSame(strBuilder3, strBuilder2);
      assertNotSame(strBuilder3, strBuilder11);
      assertSame(strBuilder3, strBuilder1);
      
      // Undeclared exception!
      strBuilder2.readFrom(strBuilder_StrBuilderReader0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(0);
      assertEquals(0, strBuilder0.size());
      assertFalse(strBuilder0.isNotEmpty());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.append((float) 1);
      assertEquals(3, strBuilder0.length());
      assertEquals(3, strBuilder0.size());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertTrue(strBuilder1.isNotEmpty());
      assertEquals(3, strBuilder1.length());
      assertEquals(3, strBuilder1.size());
      assertFalse(strBuilder1.isEmpty());
      assertNotNull(strBuilder1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      
      boolean boolean0 = strBuilder0.contains('Q');
      assertEquals(3, strBuilder0.length());
      assertEquals(3, strBuilder0.size());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertFalse(boolean0);
      assertSame(strBuilder0, strBuilder1);
      
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
      assertEquals(3, strBuilder0.length());
      assertEquals(3, strBuilder0.size());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder_StrBuilderReader0.markSupported());
      assertTrue(strBuilder_StrBuilderReader0.ready());
      assertNotNull(strBuilder_StrBuilderReader0);
      
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) strBuilder_StrBuilderReader0;
      objectArray0[2] = (Object) strBuilder0;
      StrBuilder strBuilder2 = strBuilder1.append("', has a length less than 2", objectArray0);
      assertEquals(30, strBuilder0.size());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(30, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(30, strBuilder1.size());
      assertTrue(strBuilder1.isNotEmpty());
      assertEquals(30, strBuilder1.length());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(32, strBuilder2.capacity());
      assertNull(strBuilder2.getNewLineText());
      assertNull(strBuilder2.getNullText());
      assertTrue(strBuilder2.isNotEmpty());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(30, strBuilder2.length());
      assertEquals(30, strBuilder2.size());
      assertNotNull(strBuilder2);
      assertEquals(3, objectArray0.length);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      
      StrBuilder strBuilder3 = new StrBuilder(1);
      assertEquals(1, strBuilder3.capacity());
      assertNull(strBuilder3.getNewLineText());
      assertTrue(strBuilder3.isEmpty());
      assertFalse(strBuilder3.isNotEmpty());
      assertEquals(0, strBuilder3.size());
      assertNull(strBuilder3.getNullText());
      assertEquals(0, strBuilder3.length());
      assertNotNull(strBuilder3);
      assertFalse(strBuilder3.equals((Object)strBuilder0));
      assertFalse(strBuilder3.equals((Object)strBuilder1));
      assertFalse(strBuilder3.equals((Object)strBuilder2));
      
      StrBuilder strBuilder4 = strBuilder1.append("r.tk=y?G8[");
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(80, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(40, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(40, strBuilder0.length());
      assertEquals(40, strBuilder1.length());
      assertEquals(80, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(40, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertTrue(strBuilder1.isNotEmpty());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder4.getNullText());
      assertNull(strBuilder4.getNewLineText());
      assertFalse(strBuilder4.isEmpty());
      assertEquals(40, strBuilder4.size());
      assertEquals(40, strBuilder4.length());
      assertEquals(80, strBuilder4.capacity());
      assertTrue(strBuilder4.isNotEmpty());
      assertNotNull(strBuilder4);
      assertFalse(strBuilder0.equals((Object)strBuilder3));
      assertFalse(strBuilder1.equals((Object)strBuilder3));
      assertFalse(strBuilder4.equals((Object)strBuilder3));
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder2);
      assertNotSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder4);
      assertNotSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder4, strBuilder2);
      assertSame(strBuilder4, strBuilder1);
      assertNotSame(strBuilder4, strBuilder3);
      assertSame(strBuilder4, strBuilder0);
      
      StrBuilder strBuilder5 = strBuilder0.replaceFirst('n', 'Q');
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(80, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(40, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(40, strBuilder0.length());
      assertEquals(40, strBuilder5.size());
      assertEquals(40, strBuilder5.length());
      assertEquals(80, strBuilder5.capacity());
      assertTrue(strBuilder5.isNotEmpty());
      assertNull(strBuilder5.getNullText());
      assertFalse(strBuilder5.isEmpty());
      assertNull(strBuilder5.getNewLineText());
      assertNotNull(strBuilder5);
      assertFalse(strBuilder0.equals((Object)strBuilder3));
      assertFalse(strBuilder5.equals((Object)strBuilder3));
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder2);
      assertNotSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder5);
      assertNotSame(strBuilder5, strBuilder3);
      assertSame(strBuilder5, strBuilder0);
      assertSame(strBuilder5, strBuilder4);
      assertSame(strBuilder5, strBuilder1);
      assertSame(strBuilder5, strBuilder2);
      
      String string0 = strBuilder0.leftString(0);
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(80, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(40, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(40, strBuilder0.length());
      assertNotNull(string0);
      assertEquals("", string0);
      assertFalse(strBuilder0.equals((Object)strBuilder3));
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder2);
      assertNotSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder5);
      
      StrBuilder strBuilder6 = new StrBuilder(0);
      assertNull(strBuilder6.getNullText());
      assertEquals(0, strBuilder6.length());
      assertEquals(32, strBuilder6.capacity());
      assertNull(strBuilder6.getNewLineText());
      assertTrue(strBuilder6.isEmpty());
      assertEquals(0, strBuilder6.size());
      assertFalse(strBuilder6.isNotEmpty());
      assertNotNull(strBuilder6);
      assertFalse(strBuilder6.equals((Object)strBuilder1));
      assertFalse(strBuilder6.equals((Object)strBuilder2));
      assertFalse(strBuilder6.equals((Object)strBuilder5));
      assertFalse(strBuilder6.equals((Object)strBuilder4));
      assertFalse(strBuilder6.equals((Object)strBuilder0));
      assertTrue(strBuilder6.equals((Object)strBuilder3));
      
      String string1 = strBuilder0.build();
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(80, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(40, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(40, strBuilder0.length());
      assertNotNull(string1);
      assertEquals("1.0', has a leQgth less than 2r.tk=y?G8[", string1);
      assertFalse(strBuilder0.equals((Object)strBuilder3));
      assertFalse(strBuilder0.equals((Object)strBuilder6));
      assertFalse(string1.equals((Object)string0));
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder2);
      assertNotSame(strBuilder0, strBuilder3);
      assertNotSame(strBuilder0, strBuilder6);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder5);
      
      StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer0 = strBuilder1.new StrBuilderTokenizer();
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(80, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(40, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(40, strBuilder0.length());
      assertEquals(40, strBuilder1.length());
      assertEquals(80, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(40, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertTrue(strBuilder1.isNotEmpty());
      assertFalse(strBuilder1.isEmpty());
      assertEquals((-1), strBuilder_StrBuilderTokenizer0.previousIndex());
      assertEquals(0, strBuilder_StrBuilderTokenizer0.nextIndex());
      assertTrue(strBuilder_StrBuilderTokenizer0.isIgnoreEmptyTokens());
      assertFalse(strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull());
      assertNotNull(strBuilder_StrBuilderTokenizer0);
      assertFalse(strBuilder0.equals((Object)strBuilder3));
      assertFalse(strBuilder0.equals((Object)strBuilder6));
      assertFalse(strBuilder1.equals((Object)strBuilder3));
      assertFalse(strBuilder1.equals((Object)strBuilder6));
      
      String string2 = strBuilder_StrBuilderTokenizer0.getContent();
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(80, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(40, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(40, strBuilder0.length());
      assertEquals(40, strBuilder1.length());
      assertEquals(80, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(40, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertTrue(strBuilder1.isNotEmpty());
      assertFalse(strBuilder1.isEmpty());
      assertEquals((-1), strBuilder_StrBuilderTokenizer0.previousIndex());
      assertEquals(0, strBuilder_StrBuilderTokenizer0.nextIndex());
      assertTrue(strBuilder_StrBuilderTokenizer0.isIgnoreEmptyTokens());
      assertFalse(strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull());
      assertNotNull(string2);
      assertEquals("1.0', has a leQgth less than 2r.tk=y?G8[", string2);
      assertFalse(strBuilder0.equals((Object)strBuilder3));
      assertFalse(strBuilder0.equals((Object)strBuilder6));
      assertFalse(strBuilder1.equals((Object)strBuilder3));
      assertFalse(strBuilder1.equals((Object)strBuilder6));
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder2);
      assertNotSame(strBuilder0, strBuilder3);
      assertNotSame(strBuilder0, strBuilder6);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder1, strBuilder5);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder4);
      assertNotSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder2);
      assertNotSame(strBuilder1, strBuilder6);
      
      StrBuilder strBuilder7 = new StrBuilder(127);
      assertEquals(0, strBuilder7.size());
      assertFalse(strBuilder7.isNotEmpty());
      assertNull(strBuilder7.getNullText());
      assertEquals(127, strBuilder7.capacity());
      assertNull(strBuilder7.getNewLineText());
      assertTrue(strBuilder7.isEmpty());
      assertEquals(0, strBuilder7.length());
      assertNotNull(strBuilder7);
      assertTrue(strBuilder7.equals((Object)strBuilder3));
      assertFalse(strBuilder7.equals((Object)strBuilder1));
      assertFalse(strBuilder7.equals((Object)strBuilder2));
      assertFalse(strBuilder7.equals((Object)strBuilder5));
      assertTrue(strBuilder7.equals((Object)strBuilder6));
      assertFalse(strBuilder7.equals((Object)strBuilder4));
      assertFalse(strBuilder7.equals((Object)strBuilder0));
      
      StrBuilder strBuilder8 = strBuilder1.appendln((double) 1);
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(44, strBuilder0.size());
      assertEquals(80, strBuilder0.capacity());
      assertEquals(44, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder8.isNotEmpty());
      assertFalse(strBuilder8.isEmpty());
      assertEquals(44, strBuilder8.size());
      assertEquals(80, strBuilder8.capacity());
      assertEquals(44, strBuilder8.length());
      assertNull(strBuilder8.getNewLineText());
      assertNull(strBuilder8.getNullText());
      assertEquals(80, strBuilder1.capacity());
      assertEquals(44, strBuilder1.length());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertTrue(strBuilder1.isNotEmpty());
      assertEquals(44, strBuilder1.size());
      assertFalse(strBuilder1.isEmpty());
      assertNotNull(strBuilder8);
      assertFalse(strBuilder0.equals((Object)strBuilder7));
      assertFalse(strBuilder0.equals((Object)strBuilder3));
      assertFalse(strBuilder0.equals((Object)strBuilder6));
      assertFalse(strBuilder8.equals((Object)strBuilder6));
      assertFalse(strBuilder8.equals((Object)strBuilder7));
      assertFalse(strBuilder8.equals((Object)strBuilder3));
      assertFalse(strBuilder1.equals((Object)strBuilder3));
      assertFalse(strBuilder1.equals((Object)strBuilder7));
      assertFalse(strBuilder1.equals((Object)strBuilder6));
      assertSame(strBuilder0, strBuilder4);
      assertNotSame(strBuilder0, strBuilder7);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder8);
      assertNotSame(strBuilder0, strBuilder3);
      assertNotSame(strBuilder0, strBuilder6);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder5);
      assertNotSame(strBuilder8, strBuilder6);
      assertNotSame(strBuilder8, strBuilder7);
      assertSame(strBuilder8, strBuilder2);
      assertNotSame(strBuilder8, strBuilder3);
      assertSame(strBuilder8, strBuilder1);
      assertSame(strBuilder8, strBuilder5);
      assertSame(strBuilder8, strBuilder0);
      assertSame(strBuilder8, strBuilder4);
      assertSame(strBuilder1, strBuilder5);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder4);
      assertNotSame(strBuilder1, strBuilder3);
      assertNotSame(strBuilder1, strBuilder7);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder8);
      assertNotSame(strBuilder1, strBuilder6);
      
      String string3 = strBuilder3.build();
      assertEquals(1, strBuilder3.capacity());
      assertNull(strBuilder3.getNewLineText());
      assertTrue(strBuilder3.isEmpty());
      assertFalse(strBuilder3.isNotEmpty());
      assertEquals(0, strBuilder3.size());
      assertNull(strBuilder3.getNullText());
      assertEquals(0, strBuilder3.length());
      assertNotNull(string3);
      assertEquals("", string3);
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(strBuilder3.equals((Object)strBuilder5));
      assertFalse(strBuilder3.equals((Object)strBuilder0));
      assertTrue(strBuilder3.equals((Object)strBuilder7));
      assertFalse(strBuilder3.equals((Object)strBuilder4));
      assertTrue(strBuilder3.equals((Object)strBuilder6));
      assertFalse(strBuilder3.equals((Object)strBuilder8));
      assertFalse(strBuilder3.equals((Object)strBuilder1));
      assertFalse(strBuilder3.equals((Object)strBuilder2));
      assertNotSame(strBuilder3, strBuilder5);
      assertNotSame(strBuilder3, strBuilder0);
      assertNotSame(strBuilder3, strBuilder4);
      assertNotSame(strBuilder3, strBuilder8);
      assertNotSame(strBuilder3, strBuilder1);
      assertNotSame(strBuilder3, strBuilder2);
      assertNotSame(strBuilder3, strBuilder7);
      assertNotSame(strBuilder3, strBuilder6);
      
      char[] charArray0 = strBuilder4.toCharArray(0, 321);
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(44, strBuilder0.size());
      assertEquals(80, strBuilder0.capacity());
      assertEquals(44, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(80, strBuilder1.capacity());
      assertEquals(44, strBuilder1.length());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertTrue(strBuilder1.isNotEmpty());
      assertEquals(44, strBuilder1.size());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder4.getNullText());
      assertNull(strBuilder4.getNewLineText());
      assertFalse(strBuilder4.isEmpty());
      assertEquals(80, strBuilder4.capacity());
      assertEquals(44, strBuilder4.size());
      assertTrue(strBuilder4.isNotEmpty());
      assertEquals(44, strBuilder4.length());
      assertNotNull(charArray0);
      assertFalse(strBuilder0.equals((Object)strBuilder7));
      assertFalse(strBuilder0.equals((Object)strBuilder3));
      assertFalse(strBuilder0.equals((Object)strBuilder6));
      assertFalse(strBuilder1.equals((Object)strBuilder3));
      assertFalse(strBuilder1.equals((Object)strBuilder7));
      assertFalse(strBuilder1.equals((Object)strBuilder6));
      assertFalse(strBuilder4.equals((Object)strBuilder7));
      assertFalse(strBuilder4.equals((Object)strBuilder6));
      assertFalse(strBuilder4.equals((Object)strBuilder3));
      assertEquals(44, charArray0.length);
      assertSame(strBuilder0, strBuilder4);
      assertNotSame(strBuilder0, strBuilder7);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder8);
      assertNotSame(strBuilder0, strBuilder3);
      assertNotSame(strBuilder0, strBuilder6);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder1, strBuilder5);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder4);
      assertNotSame(strBuilder1, strBuilder3);
      assertNotSame(strBuilder1, strBuilder7);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder8);
      assertNotSame(strBuilder1, strBuilder6);
      assertNotSame(strBuilder4, strBuilder7);
      assertSame(strBuilder4, strBuilder2);
      assertSame(strBuilder4, strBuilder8);
      assertSame(strBuilder4, strBuilder1);
      assertSame(strBuilder4, strBuilder5);
      assertNotSame(strBuilder4, strBuilder6);
      assertNotSame(strBuilder4, strBuilder3);
      assertSame(strBuilder4, strBuilder0);
      
      int int0 = strBuilder0.indexOf("r.tk=y?G8[", 5);
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(44, strBuilder0.size());
      assertEquals(80, strBuilder0.capacity());
      assertEquals(44, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(30, int0);
      assertFalse(strBuilder0.equals((Object)strBuilder7));
      assertFalse(strBuilder0.equals((Object)strBuilder3));
      assertFalse(strBuilder0.equals((Object)strBuilder6));
      assertSame(strBuilder0, strBuilder4);
      assertNotSame(strBuilder0, strBuilder7);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder8);
      assertNotSame(strBuilder0, strBuilder3);
      assertNotSame(strBuilder0, strBuilder6);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder5);
      
      StrBuilder strBuilder9 = strBuilder3.appendSeparator("", 321);
      assertNull(strBuilder9.getNewLineText());
      assertNull(strBuilder9.getNullText());
      assertEquals(1, strBuilder9.capacity());
      assertEquals(0, strBuilder9.length());
      assertEquals(0, strBuilder9.size());
      assertFalse(strBuilder9.isNotEmpty());
      assertTrue(strBuilder9.isEmpty());
      assertEquals(1, strBuilder3.capacity());
      assertNull(strBuilder3.getNewLineText());
      assertTrue(strBuilder3.isEmpty());
      assertFalse(strBuilder3.isNotEmpty());
      assertEquals(0, strBuilder3.size());
      assertNull(strBuilder3.getNullText());
      assertEquals(0, strBuilder3.length());
      assertNotNull(strBuilder9);
      assertFalse(strBuilder9.equals((Object)strBuilder1));
      assertFalse(strBuilder9.equals((Object)strBuilder2));
      assertFalse(strBuilder9.equals((Object)strBuilder8));
      assertFalse(strBuilder9.equals((Object)strBuilder0));
      assertTrue(strBuilder9.equals((Object)strBuilder7));
      assertFalse(strBuilder9.equals((Object)strBuilder4));
      assertTrue(strBuilder9.equals((Object)strBuilder6));
      assertFalse(strBuilder9.equals((Object)strBuilder5));
      assertFalse(strBuilder3.equals((Object)strBuilder5));
      assertFalse(strBuilder3.equals((Object)strBuilder0));
      assertTrue(strBuilder3.equals((Object)strBuilder7));
      assertFalse(strBuilder3.equals((Object)strBuilder4));
      assertTrue(strBuilder3.equals((Object)strBuilder6));
      assertFalse(strBuilder3.equals((Object)strBuilder8));
      assertFalse(strBuilder3.equals((Object)strBuilder1));
      assertFalse(strBuilder3.equals((Object)strBuilder2));
      assertNotSame(strBuilder9, strBuilder6);
      assertNotSame(strBuilder9, strBuilder7);
      assertNotSame(strBuilder9, strBuilder1);
      assertNotSame(strBuilder9, strBuilder2);
      assertNotSame(strBuilder9, strBuilder8);
      assertSame(strBuilder9, strBuilder3);
      assertNotSame(strBuilder9, strBuilder0);
      assertNotSame(strBuilder9, strBuilder4);
      assertNotSame(strBuilder9, strBuilder5);
      assertNotSame(strBuilder3, strBuilder5);
      assertNotSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder9);
      assertNotSame(strBuilder3, strBuilder4);
      assertNotSame(strBuilder3, strBuilder8);
      assertNotSame(strBuilder3, strBuilder1);
      assertNotSame(strBuilder3, strBuilder2);
      assertNotSame(strBuilder3, strBuilder7);
      assertNotSame(strBuilder3, strBuilder6);
      
      boolean boolean1 = strBuilder0.endsWith("");
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(44, strBuilder0.size());
      assertEquals(80, strBuilder0.capacity());
      assertEquals(44, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertTrue(boolean1);
      assertFalse(strBuilder0.equals((Object)strBuilder9));
      assertFalse(strBuilder0.equals((Object)strBuilder7));
      assertFalse(strBuilder0.equals((Object)strBuilder3));
      assertFalse(strBuilder0.equals((Object)strBuilder6));
      assertFalse(boolean1 == boolean0);
      assertSame(strBuilder0, strBuilder4);
      assertNotSame(strBuilder0, strBuilder9);
      assertNotSame(strBuilder0, strBuilder7);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder8);
      assertNotSame(strBuilder0, strBuilder3);
      assertNotSame(strBuilder0, strBuilder6);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder5);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertFalse(strBuilder0.isNotEmpty());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.setNullText((String) null);
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertTrue(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertFalse(strBuilder1.isNotEmpty());
      assertEquals(0, strBuilder1.length());
      assertEquals(0, strBuilder1.size());
      assertNotNull(strBuilder1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertFalse(strBuilder0.isNotEmpty());
      assertFalse(strBuilder_StrBuilderReader0.ready());
      assertTrue(strBuilder_StrBuilderReader0.markSupported());
      assertNotNull(strBuilder_StrBuilderReader0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("`");
      assertEquals(1, strBuilder0.length());
      assertEquals(1, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(33, strBuilder0.capacity());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.appendSeparator("`", "`");
      assertEquals(2, strBuilder0.length());
      assertEquals(2, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(33, strBuilder0.capacity());
      assertNull(strBuilder1.getNullText());
      assertTrue(strBuilder1.isNotEmpty());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(2, strBuilder1.length());
      assertEquals(2, strBuilder1.size());
      assertEquals(33, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertNotNull(strBuilder1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      
      StrBuilder strBuilder2 = strBuilder0.replaceAll("`", "`");
      assertEquals(2, strBuilder0.length());
      assertEquals(2, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(33, strBuilder0.capacity());
      assertNull(strBuilder2.getNewLineText());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(2, strBuilder2.length());
      assertEquals(2, strBuilder2.size());
      assertNull(strBuilder2.getNullText());
      assertTrue(strBuilder2.isNotEmpty());
      assertEquals(33, strBuilder2.capacity());
      assertNotNull(strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      
      StringBuilder stringBuilder0 = new StringBuilder(strBuilder2);
      assertEquals(2, strBuilder0.length());
      assertEquals(2, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(33, strBuilder0.capacity());
      assertNull(strBuilder2.getNewLineText());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(2, strBuilder2.length());
      assertEquals(2, strBuilder2.size());
      assertNull(strBuilder2.getNullText());
      assertTrue(strBuilder2.isNotEmpty());
      assertEquals(33, strBuilder2.capacity());
      assertEquals("``", stringBuilder0.toString());
      assertNotNull(stringBuilder0);
      
      int int0 = 97;
      // Undeclared exception!
      try { 
        stringBuilder0.insert(97, (CharSequence) strBuilder2, 36, 36);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // dstOffset 97
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.appendln(2053L);
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(5, strBuilder0.length());
      assertEquals(5, strBuilder0.size());
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder1.getNullText());
      assertTrue(strBuilder1.isNotEmpty());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(5, strBuilder1.length());
      assertEquals(5, strBuilder1.size());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertNotNull(strBuilder1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      
      StrBuilder strBuilder2 = new StrBuilder();
      assertEquals(32, strBuilder2.capacity());
      assertTrue(strBuilder2.isEmpty());
      assertFalse(strBuilder2.isNotEmpty());
      assertEquals(0, strBuilder2.size());
      assertEquals(0, strBuilder2.length());
      assertNull(strBuilder2.getNewLineText());
      assertNull(strBuilder2.getNullText());
      assertNotNull(strBuilder2);
      assertFalse(strBuilder2.equals((Object)strBuilder0));
      assertFalse(strBuilder2.equals((Object)strBuilder1));
      
      String string0 = strBuilder2.midString((-752), 0);
      assertEquals(32, strBuilder2.capacity());
      assertTrue(strBuilder2.isEmpty());
      assertFalse(strBuilder2.isNotEmpty());
      assertEquals(0, strBuilder2.size());
      assertEquals(0, strBuilder2.length());
      assertNull(strBuilder2.getNewLineText());
      assertNull(strBuilder2.getNullText());
      assertNotNull(string0);
      assertEquals("", string0);
      assertFalse(strBuilder2.equals((Object)strBuilder0));
      assertFalse(strBuilder2.equals((Object)strBuilder1));
      assertNotSame(strBuilder2, strBuilder0);
      assertNotSame(strBuilder2, strBuilder1);
      
      StrBuilder strBuilder3 = strBuilder1.replace(0, 115, "");
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder1.getNullText());
      assertEquals(0, strBuilder1.length());
      assertEquals(0, strBuilder1.size());
      assertFalse(strBuilder1.isNotEmpty());
      assertTrue(strBuilder1.isEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder3.getNullText());
      assertEquals(0, strBuilder3.length());
      assertNull(strBuilder3.getNewLineText());
      assertEquals(0, strBuilder3.size());
      assertEquals(32, strBuilder3.capacity());
      assertTrue(strBuilder3.isEmpty());
      assertFalse(strBuilder3.isNotEmpty());
      assertNotNull(strBuilder3);
      assertTrue(strBuilder0.equals((Object)strBuilder2));
      assertTrue(strBuilder1.equals((Object)strBuilder2));
      assertTrue(strBuilder3.equals((Object)strBuilder2));
      assertSame(strBuilder0, strBuilder1);
      assertNotSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder1, strBuilder0);
      assertNotSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder1);
      assertNotSame(strBuilder3, strBuilder2);
      
      StrBuilder strBuilder4 = new StrBuilder((-752));
      assertFalse(strBuilder4.isNotEmpty());
      assertEquals(0, strBuilder4.size());
      assertTrue(strBuilder4.isEmpty());
      assertEquals(0, strBuilder4.length());
      assertEquals(32, strBuilder4.capacity());
      assertNull(strBuilder4.getNewLineText());
      assertNull(strBuilder4.getNullText());
      assertNotNull(strBuilder4);
      assertTrue(strBuilder4.equals((Object)strBuilder3));
      assertTrue(strBuilder4.equals((Object)strBuilder0));
      assertTrue(strBuilder4.equals((Object)strBuilder2));
      assertTrue(strBuilder4.equals((Object)strBuilder1));
      
      StrBuilder strBuilder5 = new StrBuilder();
      assertEquals(0, strBuilder5.length());
      assertNull(strBuilder5.getNullText());
      assertNull(strBuilder5.getNewLineText());
      assertTrue(strBuilder5.isEmpty());
      assertEquals(32, strBuilder5.capacity());
      assertFalse(strBuilder5.isNotEmpty());
      assertEquals(0, strBuilder5.size());
      assertNotNull(strBuilder5);
      assertTrue(strBuilder5.equals((Object)strBuilder4));
      assertTrue(strBuilder5.equals((Object)strBuilder3));
      assertTrue(strBuilder5.equals((Object)strBuilder0));
      assertTrue(strBuilder5.equals((Object)strBuilder1));
      assertTrue(strBuilder5.equals((Object)strBuilder2));
      
      StrBuilder strBuilder6 = strBuilder4.setLength(160);
      assertEquals(160, strBuilder4.size());
      assertEquals(160, strBuilder4.length());
      assertEquals(320, strBuilder4.capacity());
      assertNull(strBuilder4.getNewLineText());
      assertTrue(strBuilder4.isNotEmpty());
      assertFalse(strBuilder4.isEmpty());
      assertNull(strBuilder4.getNullText());
      assertNull(strBuilder6.getNewLineText());
      assertNull(strBuilder6.getNullText());
      assertFalse(strBuilder6.isEmpty());
      assertTrue(strBuilder6.isNotEmpty());
      assertEquals(320, strBuilder6.capacity());
      assertEquals(160, strBuilder6.size());
      assertEquals(160, strBuilder6.length());
      assertNotNull(strBuilder6);
      assertFalse(strBuilder4.equals((Object)strBuilder0));
      assertFalse(strBuilder4.equals((Object)strBuilder2));
      assertFalse(strBuilder4.equals((Object)strBuilder3));
      assertFalse(strBuilder4.equals((Object)strBuilder5));
      assertFalse(strBuilder4.equals((Object)strBuilder1));
      assertFalse(strBuilder6.equals((Object)strBuilder0));
      assertFalse(strBuilder6.equals((Object)strBuilder2));
      assertFalse(strBuilder6.equals((Object)strBuilder1));
      assertFalse(strBuilder6.equals((Object)strBuilder5));
      assertFalse(strBuilder6.equals((Object)strBuilder3));
      assertNotSame(strBuilder4, strBuilder0);
      assertNotSame(strBuilder4, strBuilder2);
      assertSame(strBuilder4, strBuilder6);
      assertNotSame(strBuilder4, strBuilder3);
      assertNotSame(strBuilder4, strBuilder5);
      assertNotSame(strBuilder4, strBuilder1);
      assertNotSame(strBuilder6, strBuilder0);
      assertSame(strBuilder6, strBuilder4);
      assertNotSame(strBuilder6, strBuilder2);
      assertNotSame(strBuilder6, strBuilder1);
      assertNotSame(strBuilder6, strBuilder5);
      assertNotSame(strBuilder6, strBuilder3);
      
      StrBuilder strBuilder7 = strBuilder1.appendSeparator('!', 1);
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(1, strBuilder0.length());
      assertEquals(1, strBuilder0.size());
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder1.getNullText());
      assertTrue(strBuilder1.isNotEmpty());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(1, strBuilder1.length());
      assertEquals(1, strBuilder1.size());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder7.getNewLineText());
      assertFalse(strBuilder7.isEmpty());
      assertNull(strBuilder7.getNullText());
      assertEquals(1, strBuilder7.length());
      assertEquals(1, strBuilder7.size());
      assertEquals(32, strBuilder7.capacity());
      assertTrue(strBuilder7.isNotEmpty());
      assertNotNull(strBuilder7);
      assertFalse(strBuilder0.equals((Object)strBuilder5));
      assertFalse(strBuilder0.equals((Object)strBuilder4));
      assertFalse(strBuilder0.equals((Object)strBuilder6));
      assertFalse(strBuilder0.equals((Object)strBuilder2));
      assertFalse(strBuilder1.equals((Object)strBuilder5));
      assertFalse(strBuilder1.equals((Object)strBuilder6));
      assertFalse(strBuilder1.equals((Object)strBuilder2));
      assertFalse(strBuilder1.equals((Object)strBuilder4));
      assertFalse(strBuilder7.equals((Object)strBuilder5));
      assertFalse(strBuilder7.equals((Object)strBuilder6));
      assertFalse(strBuilder7.equals((Object)strBuilder2));
      assertFalse(strBuilder7.equals((Object)strBuilder4));
      assertNotSame(strBuilder0, strBuilder5);
      assertNotSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder1);
      assertNotSame(strBuilder0, strBuilder6);
      assertNotSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder7);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder1, strBuilder0);
      assertNotSame(strBuilder1, strBuilder5);
      assertNotSame(strBuilder1, strBuilder6);
      assertNotSame(strBuilder1, strBuilder2);
      assertNotSame(strBuilder1, strBuilder4);
      assertSame(strBuilder1, strBuilder7);
      assertSame(strBuilder1, strBuilder3);
      assertNotSame(strBuilder7, strBuilder5);
      assertSame(strBuilder7, strBuilder1);
      assertNotSame(strBuilder7, strBuilder6);
      assertSame(strBuilder7, strBuilder3);
      assertNotSame(strBuilder7, strBuilder2);
      assertSame(strBuilder7, strBuilder0);
      assertNotSame(strBuilder7, strBuilder4);
      
      StrBuilder strBuilder8 = new StrBuilder();
      assertFalse(strBuilder8.isNotEmpty());
      assertNull(strBuilder8.getNullText());
      assertNull(strBuilder8.getNewLineText());
      assertEquals(32, strBuilder8.capacity());
      assertTrue(strBuilder8.isEmpty());
      assertEquals(0, strBuilder8.size());
      assertEquals(0, strBuilder8.length());
      assertNotNull(strBuilder8);
      assertFalse(strBuilder8.equals((Object)strBuilder0));
      assertTrue(strBuilder8.equals((Object)strBuilder5));
      assertFalse(strBuilder8.equals((Object)strBuilder6));
      assertFalse(strBuilder8.equals((Object)strBuilder1));
      assertTrue(strBuilder8.equals((Object)strBuilder2));
      assertFalse(strBuilder8.equals((Object)strBuilder4));
      assertFalse(strBuilder8.equals((Object)strBuilder7));
      assertFalse(strBuilder8.equals((Object)strBuilder3));
      
      StrBuilder strBuilder9 = strBuilder2.appendSeparator("", ";-z21)!<%U4j");
      assertEquals(32, strBuilder2.capacity());
      assertFalse(strBuilder2.isEmpty());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(12, strBuilder2.size());
      assertTrue(strBuilder2.isNotEmpty());
      assertEquals(12, strBuilder2.length());
      assertNull(strBuilder2.getNullText());
      assertNull(strBuilder9.getNewLineText());
      assertFalse(strBuilder9.isEmpty());
      assertEquals(12, strBuilder9.size());
      assertTrue(strBuilder9.isNotEmpty());
      assertEquals(12, strBuilder9.length());
      assertEquals(32, strBuilder9.capacity());
      assertNull(strBuilder9.getNullText());
      assertNotNull(strBuilder9);
      assertFalse(strBuilder2.equals((Object)strBuilder4));
      assertFalse(strBuilder2.equals((Object)strBuilder8));
      assertFalse(strBuilder2.equals((Object)strBuilder6));
      assertFalse(strBuilder2.equals((Object)strBuilder3));
      assertFalse(strBuilder2.equals((Object)strBuilder7));
      assertFalse(strBuilder2.equals((Object)strBuilder5));
      assertFalse(strBuilder2.equals((Object)strBuilder0));
      assertFalse(strBuilder2.equals((Object)strBuilder1));
      assertFalse(strBuilder9.equals((Object)strBuilder3));
      assertFalse(strBuilder9.equals((Object)strBuilder4));
      assertFalse(strBuilder9.equals((Object)strBuilder1));
      assertFalse(strBuilder9.equals((Object)strBuilder6));
      assertFalse(strBuilder9.equals((Object)strBuilder8));
      assertFalse(strBuilder9.equals((Object)strBuilder7));
      assertFalse(strBuilder9.equals((Object)strBuilder5));
      assertFalse(strBuilder9.equals((Object)strBuilder0));
      assertNotSame(strBuilder2, strBuilder4);
      assertNotSame(strBuilder2, strBuilder8);
      assertNotSame(strBuilder2, strBuilder6);
      assertNotSame(strBuilder2, strBuilder3);
      assertNotSame(strBuilder2, strBuilder7);
      assertNotSame(strBuilder2, strBuilder5);
      assertNotSame(strBuilder2, strBuilder0);
      assertNotSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder9);
      assertSame(strBuilder9, strBuilder2);
      assertNotSame(strBuilder9, strBuilder3);
      assertNotSame(strBuilder9, strBuilder4);
      assertNotSame(strBuilder9, strBuilder1);
      assertNotSame(strBuilder9, strBuilder6);
      assertNotSame(strBuilder9, strBuilder8);
      assertNotSame(strBuilder9, strBuilder7);
      assertNotSame(strBuilder9, strBuilder5);
      assertNotSame(strBuilder9, strBuilder0);
      
      int int0 = StrBuilder.CAPACITY;
      assertEquals(32, int0);
      
      StrBuilder strBuilder10 = strBuilder8.trim();
      assertFalse(strBuilder8.isNotEmpty());
      assertNull(strBuilder8.getNullText());
      assertNull(strBuilder8.getNewLineText());
      assertEquals(32, strBuilder8.capacity());
      assertTrue(strBuilder8.isEmpty());
      assertEquals(0, strBuilder8.size());
      assertEquals(0, strBuilder8.length());
      assertFalse(strBuilder10.isNotEmpty());
      assertEquals(0, strBuilder10.length());
      assertEquals(0, strBuilder10.size());
      assertNull(strBuilder10.getNewLineText());
      assertEquals(32, strBuilder10.capacity());
      assertTrue(strBuilder10.isEmpty());
      assertNull(strBuilder10.getNullText());
      assertNotNull(strBuilder10);
      assertFalse(strBuilder8.equals((Object)strBuilder2));
      assertFalse(strBuilder8.equals((Object)strBuilder9));
      assertFalse(strBuilder8.equals((Object)strBuilder0));
      assertTrue(strBuilder8.equals((Object)strBuilder5));
      assertFalse(strBuilder8.equals((Object)strBuilder6));
      assertFalse(strBuilder8.equals((Object)strBuilder1));
      assertFalse(strBuilder8.equals((Object)strBuilder4));
      assertFalse(strBuilder8.equals((Object)strBuilder7));
      assertFalse(strBuilder8.equals((Object)strBuilder3));
      assertFalse(strBuilder10.equals((Object)strBuilder9));
      assertFalse(strBuilder10.equals((Object)strBuilder6));
      assertFalse(strBuilder10.equals((Object)strBuilder7));
      assertFalse(strBuilder10.equals((Object)strBuilder0));
      assertFalse(strBuilder10.equals((Object)strBuilder3));
      assertFalse(strBuilder10.equals((Object)strBuilder1));
      assertFalse(strBuilder10.equals((Object)strBuilder4));
      assertTrue(strBuilder10.equals((Object)strBuilder5));
      assertFalse(strBuilder10.equals((Object)strBuilder2));
      assertNotSame(strBuilder8, strBuilder2);
      assertNotSame(strBuilder8, strBuilder9);
      assertNotSame(strBuilder8, strBuilder0);
      assertNotSame(strBuilder8, strBuilder6);
      assertNotSame(strBuilder8, strBuilder1);
      assertNotSame(strBuilder8, strBuilder5);
      assertNotSame(strBuilder8, strBuilder4);
      assertSame(strBuilder8, strBuilder10);
      assertNotSame(strBuilder8, strBuilder7);
      assertNotSame(strBuilder8, strBuilder3);
      assertSame(strBuilder10, strBuilder8);
      assertNotSame(strBuilder10, strBuilder9);
      assertNotSame(strBuilder10, strBuilder6);
      assertNotSame(strBuilder10, strBuilder7);
      assertNotSame(strBuilder10, strBuilder0);
      assertNotSame(strBuilder10, strBuilder3);
      assertNotSame(strBuilder10, strBuilder5);
      assertNotSame(strBuilder10, strBuilder1);
      assertNotSame(strBuilder10, strBuilder4);
      assertNotSame(strBuilder10, strBuilder2);
      
      StrBuilder strBuilder11 = strBuilder10.appendln(strBuilder2);
      assertEquals(32, strBuilder2.capacity());
      assertFalse(strBuilder2.isEmpty());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(12, strBuilder2.size());
      assertTrue(strBuilder2.isNotEmpty());
      assertEquals(12, strBuilder2.length());
      assertNull(strBuilder2.getNullText());
      assertNull(strBuilder8.getNullText());
      assertNull(strBuilder8.getNewLineText());
      assertEquals(32, strBuilder8.capacity());
      assertTrue(strBuilder8.isNotEmpty());
      assertFalse(strBuilder8.isEmpty());
      assertEquals(13, strBuilder8.length());
      assertEquals(13, strBuilder8.size());
      assertFalse(strBuilder10.isEmpty());
      assertNull(strBuilder10.getNewLineText());
      assertEquals(32, strBuilder10.capacity());
      assertEquals(13, strBuilder10.length());
      assertEquals(13, strBuilder10.size());
      assertNull(strBuilder10.getNullText());
      assertTrue(strBuilder10.isNotEmpty());
      assertTrue(strBuilder11.isNotEmpty());
      assertFalse(strBuilder11.isEmpty());
      assertEquals(13, strBuilder11.length());
      assertEquals(13, strBuilder11.size());
      assertNull(strBuilder11.getNewLineText());
      assertNull(strBuilder11.getNullText());
      assertEquals(32, strBuilder11.capacity());
      assertNotNull(strBuilder11);
      assertFalse(strBuilder2.equals((Object)strBuilder4));
      assertFalse(strBuilder2.equals((Object)strBuilder8));
      assertFalse(strBuilder2.equals((Object)strBuilder6));
      assertFalse(strBuilder2.equals((Object)strBuilder3));
      assertFalse(strBuilder2.equals((Object)strBuilder7));
      assertFalse(strBuilder2.equals((Object)strBuilder5));
      assertFalse(strBuilder2.equals((Object)strBuilder0));
      assertFalse(strBuilder2.equals((Object)strBuilder10));
      assertFalse(strBuilder2.equals((Object)strBuilder1));
      assertFalse(strBuilder8.equals((Object)strBuilder2));
      assertFalse(strBuilder8.equals((Object)strBuilder9));
      assertFalse(strBuilder8.equals((Object)strBuilder0));
      assertFalse(strBuilder8.equals((Object)strBuilder6));
      assertFalse(strBuilder8.equals((Object)strBuilder1));
      assertFalse(strBuilder8.equals((Object)strBuilder5));
      assertFalse(strBuilder8.equals((Object)strBuilder4));
      assertFalse(strBuilder8.equals((Object)strBuilder7));
      assertFalse(strBuilder8.equals((Object)strBuilder3));
      assertFalse(strBuilder10.equals((Object)strBuilder9));
      assertFalse(strBuilder10.equals((Object)strBuilder6));
      assertFalse(strBuilder10.equals((Object)strBuilder7));
      assertFalse(strBuilder10.equals((Object)strBuilder0));
      assertFalse(strBuilder10.equals((Object)strBuilder3));
      assertFalse(strBuilder10.equals((Object)strBuilder5));
      assertFalse(strBuilder10.equals((Object)strBuilder1));
      assertFalse(strBuilder10.equals((Object)strBuilder4));
      assertFalse(strBuilder10.equals((Object)strBuilder2));
      assertFalse(strBuilder11.equals((Object)strBuilder5));
      assertFalse(strBuilder11.equals((Object)strBuilder3));
      assertFalse(strBuilder11.equals((Object)strBuilder1));
      assertFalse(strBuilder11.equals((Object)strBuilder0));
      assertFalse(strBuilder11.equals((Object)strBuilder6));
      assertFalse(strBuilder11.equals((Object)strBuilder9));
      assertFalse(strBuilder11.equals((Object)strBuilder7));
      assertFalse(strBuilder11.equals((Object)strBuilder2));
      assertFalse(strBuilder11.equals((Object)strBuilder4));
      assertNotSame(strBuilder2, strBuilder4);
      assertNotSame(strBuilder2, strBuilder8);
      assertNotSame(strBuilder2, strBuilder6);
      assertNotSame(strBuilder2, strBuilder3);
      assertNotSame(strBuilder2, strBuilder7);
      assertNotSame(strBuilder2, strBuilder5);
      assertNotSame(strBuilder2, strBuilder0);
      assertNotSame(strBuilder2, strBuilder10);
      assertNotSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder9);
      assertNotSame(strBuilder2, strBuilder11);
      assertNotSame(strBuilder8, strBuilder2);
      assertNotSame(strBuilder8, strBuilder9);
      assertNotSame(strBuilder8, strBuilder0);
      assertNotSame(strBuilder8, strBuilder6);
      assertNotSame(strBuilder8, strBuilder1);
      assertNotSame(strBuilder8, strBuilder5);
      assertNotSame(strBuilder8, strBuilder4);
      assertSame(strBuilder8, strBuilder10);
      assertSame(strBuilder8, strBuilder11);
      assertNotSame(strBuilder8, strBuilder7);
      assertNotSame(strBuilder8, strBuilder3);
      assertSame(strBuilder10, strBuilder8);
      assertNotSame(strBuilder10, strBuilder9);
      assertNotSame(strBuilder10, strBuilder6);
      assertNotSame(strBuilder10, strBuilder7);
      assertNotSame(strBuilder10, strBuilder0);
      assertSame(strBuilder10, strBuilder11);
      assertNotSame(strBuilder10, strBuilder3);
      assertNotSame(strBuilder10, strBuilder5);
      assertNotSame(strBuilder10, strBuilder1);
      assertNotSame(strBuilder10, strBuilder4);
      assertNotSame(strBuilder10, strBuilder2);
      assertNotSame(strBuilder11, strBuilder5);
      assertNotSame(strBuilder11, strBuilder3);
      assertNotSame(strBuilder11, strBuilder1);
      assertNotSame(strBuilder11, strBuilder0);
      assertNotSame(strBuilder11, strBuilder6);
      assertSame(strBuilder11, strBuilder8);
      assertNotSame(strBuilder11, strBuilder9);
      assertNotSame(strBuilder11, strBuilder7);
      assertNotSame(strBuilder11, strBuilder2);
      assertNotSame(strBuilder11, strBuilder4);
      assertSame(strBuilder11, strBuilder10);
      
      String string1 = strBuilder9.rightString(115);
      assertEquals(32, strBuilder2.capacity());
      assertFalse(strBuilder2.isEmpty());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(12, strBuilder2.size());
      assertTrue(strBuilder2.isNotEmpty());
      assertEquals(12, strBuilder2.length());
      assertNull(strBuilder2.getNullText());
      assertNull(strBuilder9.getNewLineText());
      assertFalse(strBuilder9.isEmpty());
      assertEquals(12, strBuilder9.size());
      assertTrue(strBuilder9.isNotEmpty());
      assertEquals(12, strBuilder9.length());
      assertEquals(32, strBuilder9.capacity());
      assertNull(strBuilder9.getNullText());
      assertNotNull(string1);
      assertEquals(";-z21)!<%U4j", string1);
      assertFalse(strBuilder2.equals((Object)strBuilder4));
      assertFalse(strBuilder2.equals((Object)strBuilder8));
      assertFalse(strBuilder2.equals((Object)strBuilder6));
      assertFalse(strBuilder2.equals((Object)strBuilder3));
      assertFalse(strBuilder2.equals((Object)strBuilder7));
      assertFalse(strBuilder2.equals((Object)strBuilder5));
      assertFalse(strBuilder2.equals((Object)strBuilder0));
      assertFalse(strBuilder2.equals((Object)strBuilder10));
      assertFalse(strBuilder2.equals((Object)strBuilder1));
      assertFalse(strBuilder2.equals((Object)strBuilder11));
      assertFalse(strBuilder9.equals((Object)strBuilder3));
      assertFalse(strBuilder9.equals((Object)strBuilder4));
      assertFalse(strBuilder9.equals((Object)strBuilder1));
      assertFalse(strBuilder9.equals((Object)strBuilder11));
      assertFalse(strBuilder9.equals((Object)strBuilder6));
      assertFalse(strBuilder9.equals((Object)strBuilder10));
      assertFalse(strBuilder9.equals((Object)strBuilder8));
      assertFalse(strBuilder9.equals((Object)strBuilder7));
      assertFalse(strBuilder9.equals((Object)strBuilder5));
      assertFalse(strBuilder9.equals((Object)strBuilder0));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(strBuilder2, strBuilder4);
      assertNotSame(strBuilder2, strBuilder8);
      assertNotSame(strBuilder2, strBuilder6);
      assertNotSame(strBuilder2, strBuilder3);
      assertNotSame(strBuilder2, strBuilder7);
      assertNotSame(strBuilder2, strBuilder5);
      assertNotSame(strBuilder2, strBuilder0);
      assertNotSame(strBuilder2, strBuilder10);
      assertNotSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder9);
      assertNotSame(strBuilder2, strBuilder11);
      assertSame(strBuilder9, strBuilder2);
      assertNotSame(strBuilder9, strBuilder3);
      assertNotSame(strBuilder9, strBuilder4);
      assertNotSame(strBuilder9, strBuilder1);
      assertNotSame(strBuilder9, strBuilder11);
      assertNotSame(strBuilder9, strBuilder6);
      assertNotSame(strBuilder9, strBuilder10);
      assertNotSame(strBuilder9, strBuilder8);
      assertNotSame(strBuilder9, strBuilder7);
      assertNotSame(strBuilder9, strBuilder5);
      assertNotSame(strBuilder9, strBuilder0);
      
      int int1 = StrBuilder.CAPACITY;
      assertEquals(32, int1);
      assertTrue(int1 == int0);
      
      StrBuilder strBuilder12 = strBuilder3.appendSeparator("", 0);
      assertEquals(32, strBuilder12.capacity());
      assertFalse(strBuilder12.isEmpty());
      assertEquals(1, strBuilder12.length());
      assertEquals(1, strBuilder12.size());
      assertTrue(strBuilder12.isNotEmpty());
      assertNull(strBuilder12.getNullText());
      assertNull(strBuilder12.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(1, strBuilder0.length());
      assertEquals(1, strBuilder0.size());
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder1.getNullText());
      assertTrue(strBuilder1.isNotEmpty());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(1, strBuilder1.length());
      assertEquals(1, strBuilder1.size());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertTrue(strBuilder3.isNotEmpty());
      assertNull(strBuilder3.getNullText());
      assertNull(strBuilder3.getNewLineText());
      assertEquals(1, strBuilder3.length());
      assertFalse(strBuilder3.isEmpty());
      assertEquals(1, strBuilder3.size());
      assertEquals(32, strBuilder3.capacity());
      assertNotNull(strBuilder12);
      assertFalse(strBuilder12.equals((Object)strBuilder4));
      assertFalse(strBuilder12.equals((Object)strBuilder8));
      assertFalse(strBuilder12.equals((Object)strBuilder6));
      assertFalse(strBuilder12.equals((Object)strBuilder5));
      assertFalse(strBuilder12.equals((Object)strBuilder10));
      assertFalse(strBuilder12.equals((Object)strBuilder9));
      assertFalse(strBuilder12.equals((Object)strBuilder2));
      assertFalse(strBuilder12.equals((Object)strBuilder11));
      assertFalse(strBuilder0.equals((Object)strBuilder5));
      assertFalse(strBuilder0.equals((Object)strBuilder4));
      assertFalse(strBuilder0.equals((Object)strBuilder8));
      assertFalse(strBuilder0.equals((Object)strBuilder11));
      assertFalse(strBuilder0.equals((Object)strBuilder6));
      assertFalse(strBuilder0.equals((Object)strBuilder2));
      assertFalse(strBuilder0.equals((Object)strBuilder10));
      assertFalse(strBuilder0.equals((Object)strBuilder9));
      assertFalse(strBuilder1.equals((Object)strBuilder11));
      assertFalse(strBuilder1.equals((Object)strBuilder5));
      assertFalse(strBuilder1.equals((Object)strBuilder8));
      assertFalse(strBuilder1.equals((Object)strBuilder10));
      assertFalse(strBuilder1.equals((Object)strBuilder6));
      assertFalse(strBuilder1.equals((Object)strBuilder9));
      assertFalse(strBuilder1.equals((Object)strBuilder2));
      assertFalse(strBuilder1.equals((Object)strBuilder4));
      assertFalse(strBuilder3.equals((Object)strBuilder11));
      assertFalse(strBuilder3.equals((Object)strBuilder10));
      assertFalse(strBuilder3.equals((Object)strBuilder5));
      assertFalse(strBuilder3.equals((Object)strBuilder2));
      assertFalse(strBuilder3.equals((Object)strBuilder4));
      assertFalse(strBuilder3.equals((Object)strBuilder9));
      assertFalse(strBuilder3.equals((Object)strBuilder8));
      assertFalse(strBuilder3.equals((Object)strBuilder6));
      assertNotSame(strBuilder12, strBuilder4);
      assertNotSame(strBuilder12, strBuilder8);
      assertNotSame(strBuilder12, strBuilder6);
      assertNotSame(strBuilder12, strBuilder5);
      assertSame(strBuilder12, strBuilder1);
      assertNotSame(strBuilder12, strBuilder10);
      assertSame(strBuilder12, strBuilder7);
      assertSame(strBuilder12, strBuilder0);
      assertNotSame(strBuilder12, strBuilder9);
      assertNotSame(strBuilder12, strBuilder2);
      assertSame(strBuilder12, strBuilder3);
      assertNotSame(strBuilder12, strBuilder11);
      assertNotSame(strBuilder0, strBuilder5);
      assertNotSame(strBuilder0, strBuilder4);
      assertNotSame(strBuilder0, strBuilder8);
      assertSame(strBuilder0, strBuilder12);
      assertSame(strBuilder0, strBuilder1);
      assertNotSame(strBuilder0, strBuilder11);
      assertNotSame(strBuilder0, strBuilder6);
      assertNotSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder7);
      assertSame(strBuilder0, strBuilder3);
      assertNotSame(strBuilder0, strBuilder10);
      assertNotSame(strBuilder0, strBuilder9);
      assertNotSame(strBuilder1, strBuilder11);
      assertSame(strBuilder1, strBuilder0);
      assertNotSame(strBuilder1, strBuilder5);
      assertNotSame(strBuilder1, strBuilder8);
      assertNotSame(strBuilder1, strBuilder10);
      assertNotSame(strBuilder1, strBuilder6);
      assertNotSame(strBuilder1, strBuilder9);
      assertNotSame(strBuilder1, strBuilder2);
      assertNotSame(strBuilder1, strBuilder4);
      assertSame(strBuilder1, strBuilder12);
      assertSame(strBuilder1, strBuilder7);
      assertSame(strBuilder1, strBuilder3);
      assertNotSame(strBuilder3, strBuilder11);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder7);
      assertNotSame(strBuilder3, strBuilder10);
      assertNotSame(strBuilder3, strBuilder5);
      assertSame(strBuilder3, strBuilder1);
      assertNotSame(strBuilder3, strBuilder2);
      assertNotSame(strBuilder3, strBuilder4);
      assertNotSame(strBuilder3, strBuilder9);
      assertSame(strBuilder3, strBuilder12);
      assertNotSame(strBuilder3, strBuilder8);
      assertNotSame(strBuilder3, strBuilder6);
      
      StrBuilder strBuilder13 = strBuilder7.appendln((char[]) null);
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(2, strBuilder0.size());
      assertEquals(2, strBuilder0.length());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(2, strBuilder13.length());
      assertEquals(2, strBuilder13.size());
      assertEquals(32, strBuilder13.capacity());
      assertTrue(strBuilder13.isNotEmpty());
      assertFalse(strBuilder13.isEmpty());
      assertNull(strBuilder13.getNullText());
      assertNull(strBuilder13.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertTrue(strBuilder1.isNotEmpty());
      assertEquals(2, strBuilder1.size());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(2, strBuilder1.length());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder7.getNewLineText());
      assertFalse(strBuilder7.isEmpty());
      assertNull(strBuilder7.getNullText());
      assertEquals(2, strBuilder7.length());
      assertEquals(2, strBuilder7.size());
      assertEquals(32, strBuilder7.capacity());
      assertTrue(strBuilder7.isNotEmpty());
      assertNotNull(strBuilder13);
      assertFalse(strBuilder0.equals((Object)strBuilder5));
      assertFalse(strBuilder0.equals((Object)strBuilder4));
      assertFalse(strBuilder0.equals((Object)strBuilder8));
      assertFalse(strBuilder0.equals((Object)strBuilder11));
      assertFalse(strBuilder0.equals((Object)strBuilder6));
      assertFalse(strBuilder0.equals((Object)strBuilder2));
      assertFalse(strBuilder0.equals((Object)strBuilder10));
      assertFalse(strBuilder0.equals((Object)strBuilder9));
      assertFalse(strBuilder13.equals((Object)strBuilder2));
      assertFalse(strBuilder13.equals((Object)strBuilder9));
      assertFalse(strBuilder13.equals((Object)strBuilder6));
      assertFalse(strBuilder13.equals((Object)strBuilder10));
      assertFalse(strBuilder13.equals((Object)strBuilder5));
      assertFalse(strBuilder13.equals((Object)strBuilder4));
      assertFalse(strBuilder13.equals((Object)strBuilder8));
      assertFalse(strBuilder13.equals((Object)strBuilder11));
      assertFalse(strBuilder1.equals((Object)strBuilder11));
      assertFalse(strBuilder1.equals((Object)strBuilder5));
      assertFalse(strBuilder1.equals((Object)strBuilder8));
      assertFalse(strBuilder1.equals((Object)strBuilder10));
      assertFalse(strBuilder1.equals((Object)strBuilder6));
      assertFalse(strBuilder1.equals((Object)strBuilder9));
      assertFalse(strBuilder1.equals((Object)strBuilder2));
      assertFalse(strBuilder1.equals((Object)strBuilder4));
      assertFalse(strBuilder7.equals((Object)strBuilder5));
      assertFalse(strBuilder7.equals((Object)strBuilder11));
      assertFalse(strBuilder7.equals((Object)strBuilder10));
      assertFalse(strBuilder7.equals((Object)strBuilder8));
      assertFalse(strBuilder7.equals((Object)strBuilder9));
      assertFalse(strBuilder7.equals((Object)strBuilder6));
      assertFalse(strBuilder7.equals((Object)strBuilder2));
      assertFalse(strBuilder7.equals((Object)strBuilder4));
      assertNotSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder12);
      assertNotSame(strBuilder0, strBuilder11);
      assertNotSame(strBuilder0, strBuilder10);
      assertNotSame(strBuilder0, strBuilder9);
      assertNotSame(strBuilder0, strBuilder4);
      assertNotSame(strBuilder0, strBuilder8);
      assertSame(strBuilder0, strBuilder1);
      assertNotSame(strBuilder0, strBuilder6);
      assertSame(strBuilder0, strBuilder13);
      assertNotSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder7);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder13, strBuilder0);
      assertNotSame(strBuilder13, strBuilder10);
      assertSame(strBuilder13, strBuilder1);
      assertNotSame(strBuilder13, strBuilder8);
      assertSame(strBuilder13, strBuilder3);
      assertNotSame(strBuilder13, strBuilder11);
      assertNotSame(strBuilder13, strBuilder2);
      assertNotSame(strBuilder13, strBuilder9);
      assertNotSame(strBuilder13, strBuilder6);
      assertSame(strBuilder13, strBuilder7);
      assertNotSame(strBuilder13, strBuilder5);
      assertNotSame(strBuilder13, strBuilder4);
      assertSame(strBuilder13, strBuilder12);
      assertSame(strBuilder1, strBuilder0);
      assertNotSame(strBuilder1, strBuilder8);
      assertNotSame(strBuilder1, strBuilder10);
      assertNotSame(strBuilder1, strBuilder6);
      assertSame(strBuilder1, strBuilder13);
      assertNotSame(strBuilder1, strBuilder9);
      assertNotSame(strBuilder1, strBuilder4);
      assertSame(strBuilder1, strBuilder12);
      assertNotSame(strBuilder1, strBuilder11);
      assertNotSame(strBuilder1, strBuilder5);
      assertNotSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder7);
      assertSame(strBuilder1, strBuilder3);
      assertNotSame(strBuilder7, strBuilder5);
      assertNotSame(strBuilder7, strBuilder11);
      assertSame(strBuilder7, strBuilder3);
      assertNotSame(strBuilder7, strBuilder2);
      assertSame(strBuilder7, strBuilder0);
      assertSame(strBuilder7, strBuilder1);
      assertNotSame(strBuilder7, strBuilder10);
      assertNotSame(strBuilder7, strBuilder8);
      assertNotSame(strBuilder7, strBuilder6);
      assertNotSame(strBuilder7, strBuilder9);
      assertSame(strBuilder7, strBuilder13);
      assertSame(strBuilder7, strBuilder12);
      assertNotSame(strBuilder7, strBuilder4);
      
      IntStream intStream0 = strBuilder3.codePoints();
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(2, strBuilder0.size());
      assertEquals(2, strBuilder0.length());
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder1.getNullText());
      assertTrue(strBuilder1.isNotEmpty());
      assertEquals(2, strBuilder1.size());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(2, strBuilder1.length());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertTrue(strBuilder3.isNotEmpty());
      assertNull(strBuilder3.getNullText());
      assertNull(strBuilder3.getNewLineText());
      assertFalse(strBuilder3.isEmpty());
      assertEquals(2, strBuilder3.length());
      assertEquals(32, strBuilder3.capacity());
      assertEquals(2, strBuilder3.size());
      assertNotNull(intStream0);
      assertFalse(strBuilder0.equals((Object)strBuilder5));
      assertFalse(strBuilder0.equals((Object)strBuilder4));
      assertFalse(strBuilder0.equals((Object)strBuilder8));
      assertFalse(strBuilder0.equals((Object)strBuilder11));
      assertFalse(strBuilder0.equals((Object)strBuilder6));
      assertFalse(strBuilder0.equals((Object)strBuilder2));
      assertFalse(strBuilder0.equals((Object)strBuilder10));
      assertFalse(strBuilder0.equals((Object)strBuilder9));
      assertFalse(strBuilder1.equals((Object)strBuilder11));
      assertFalse(strBuilder1.equals((Object)strBuilder5));
      assertFalse(strBuilder1.equals((Object)strBuilder8));
      assertFalse(strBuilder1.equals((Object)strBuilder10));
      assertFalse(strBuilder1.equals((Object)strBuilder6));
      assertFalse(strBuilder1.equals((Object)strBuilder9));
      assertFalse(strBuilder1.equals((Object)strBuilder2));
      assertFalse(strBuilder1.equals((Object)strBuilder4));
      assertFalse(strBuilder3.equals((Object)strBuilder11));
      assertFalse(strBuilder3.equals((Object)strBuilder10));
      assertFalse(strBuilder3.equals((Object)strBuilder5));
      assertFalse(strBuilder3.equals((Object)strBuilder2));
      assertFalse(strBuilder3.equals((Object)strBuilder4));
      assertFalse(strBuilder3.equals((Object)strBuilder9));
      assertFalse(strBuilder3.equals((Object)strBuilder8));
      assertFalse(strBuilder3.equals((Object)strBuilder6));
      assertNotSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder12);
      assertNotSame(strBuilder0, strBuilder11);
      assertNotSame(strBuilder0, strBuilder10);
      assertNotSame(strBuilder0, strBuilder9);
      assertNotSame(strBuilder0, strBuilder4);
      assertNotSame(strBuilder0, strBuilder8);
      assertSame(strBuilder0, strBuilder1);
      assertNotSame(strBuilder0, strBuilder6);
      assertSame(strBuilder0, strBuilder13);
      assertNotSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder7);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder1, strBuilder0);
      assertNotSame(strBuilder1, strBuilder8);
      assertNotSame(strBuilder1, strBuilder10);
      assertNotSame(strBuilder1, strBuilder6);
      assertSame(strBuilder1, strBuilder13);
      assertNotSame(strBuilder1, strBuilder9);
      assertNotSame(strBuilder1, strBuilder4);
      assertSame(strBuilder1, strBuilder12);
      assertNotSame(strBuilder1, strBuilder11);
      assertNotSame(strBuilder1, strBuilder5);
      assertNotSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder7);
      assertSame(strBuilder1, strBuilder3);
      assertNotSame(strBuilder3, strBuilder11);
      assertSame(strBuilder3, strBuilder7);
      assertNotSame(strBuilder3, strBuilder5);
      assertNotSame(strBuilder3, strBuilder2);
      assertNotSame(strBuilder3, strBuilder9);
      assertSame(strBuilder3, strBuilder12);
      assertNotSame(strBuilder3, strBuilder6);
      assertSame(strBuilder3, strBuilder13);
      assertSame(strBuilder3, strBuilder0);
      assertNotSame(strBuilder3, strBuilder10);
      assertSame(strBuilder3, strBuilder1);
      assertNotSame(strBuilder3, strBuilder4);
      assertNotSame(strBuilder3, strBuilder8);
      
      StrBuilder strBuilder14 = new StrBuilder(";-z21)!<%U4j");
      assertEquals(44, strBuilder14.capacity());
      assertNull(strBuilder14.getNewLineText());
      assertNull(strBuilder14.getNullText());
      assertTrue(strBuilder14.isNotEmpty());
      assertFalse(strBuilder14.isEmpty());
      assertEquals(12, strBuilder14.length());
      assertEquals(12, strBuilder14.size());
      assertNotNull(strBuilder14);
      assertFalse(strBuilder14.equals((Object)strBuilder7));
      assertFalse(strBuilder14.equals((Object)strBuilder4));
      assertFalse(strBuilder14.equals((Object)strBuilder13));
      assertFalse(strBuilder14.equals((Object)strBuilder8));
      assertFalse(strBuilder14.equals((Object)strBuilder6));
      assertFalse(strBuilder14.equals((Object)strBuilder10));
      assertTrue(strBuilder14.equals((Object)strBuilder2));
      assertFalse(strBuilder14.equals((Object)strBuilder12));
      assertFalse(strBuilder14.equals((Object)strBuilder0));
      assertTrue(strBuilder14.equals((Object)strBuilder9));
      assertFalse(strBuilder14.equals((Object)strBuilder1));
      assertFalse(strBuilder14.equals((Object)strBuilder11));
      assertFalse(strBuilder14.equals((Object)strBuilder3));
      assertFalse(strBuilder14.equals((Object)strBuilder5));
      
      char[] charArray0 = strBuilder14.getChars((char[]) null);
      assertEquals(44, strBuilder14.capacity());
      assertNull(strBuilder14.getNewLineText());
      assertNull(strBuilder14.getNullText());
      assertTrue(strBuilder14.isNotEmpty());
      assertFalse(strBuilder14.isEmpty());
      assertEquals(12, strBuilder14.length());
      assertEquals(12, strBuilder14.size());
      assertNotNull(charArray0);
      assertFalse(strBuilder14.equals((Object)strBuilder7));
      assertFalse(strBuilder14.equals((Object)strBuilder4));
      assertFalse(strBuilder14.equals((Object)strBuilder13));
      assertFalse(strBuilder14.equals((Object)strBuilder8));
      assertFalse(strBuilder14.equals((Object)strBuilder6));
      assertFalse(strBuilder14.equals((Object)strBuilder10));
      assertTrue(strBuilder14.equals((Object)strBuilder2));
      assertFalse(strBuilder14.equals((Object)strBuilder12));
      assertFalse(strBuilder14.equals((Object)strBuilder0));
      assertTrue(strBuilder14.equals((Object)strBuilder9));
      assertFalse(strBuilder14.equals((Object)strBuilder1));
      assertFalse(strBuilder14.equals((Object)strBuilder11));
      assertFalse(strBuilder14.equals((Object)strBuilder3));
      assertFalse(strBuilder14.equals((Object)strBuilder5));
      assertEquals(12, charArray0.length);
      assertNotSame(strBuilder14, strBuilder7);
      assertNotSame(strBuilder14, strBuilder4);
      assertNotSame(strBuilder14, strBuilder13);
      assertNotSame(strBuilder14, strBuilder8);
      assertNotSame(strBuilder14, strBuilder2);
      assertNotSame(strBuilder14, strBuilder6);
      assertNotSame(strBuilder14, strBuilder10);
      assertNotSame(strBuilder14, strBuilder9);
      assertNotSame(strBuilder14, strBuilder12);
      assertNotSame(strBuilder14, strBuilder0);
      assertNotSame(strBuilder14, strBuilder1);
      assertNotSame(strBuilder14, strBuilder11);
      assertNotSame(strBuilder14, strBuilder3);
      assertNotSame(strBuilder14, strBuilder5);
      
      MockFileReader mockFileReader0 = null;
      try {
        mockFileReader0 = new MockFileReader(";-z21)!<%U4j");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertFalse(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isEmpty());
      assertNotNull(strBuilder0);
      
      boolean boolean0 = strBuilder0.contains('O');
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertFalse(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isEmpty());
      assertFalse(boolean0);
      
      StrBuilder strBuilder1 = strBuilder0.appendSeparator("", 492);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertFalse(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isEmpty());
      assertTrue(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(0, strBuilder1.length());
      assertEquals(0, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertFalse(strBuilder1.isNotEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertNotNull(strBuilder1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      
      StringBuilder stringBuilder0 = new StringBuilder();
      assertEquals("", stringBuilder0.toString());
      assertNotNull(stringBuilder0);
      
      StringBuilder stringBuilder1 = stringBuilder0.append(false);
      assertEquals("false", stringBuilder0.toString());
      assertEquals("false", stringBuilder1.toString());
      assertNotNull(stringBuilder1);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder1, stringBuilder0);
      
      StrBuilder strBuilder2 = new StrBuilder("");
      assertNull(strBuilder2.getNewLineText());
      assertNull(strBuilder2.getNullText());
      assertFalse(strBuilder2.isNotEmpty());
      assertEquals(0, strBuilder2.size());
      assertTrue(strBuilder2.isEmpty());
      assertEquals(0, strBuilder2.length());
      assertEquals(32, strBuilder2.capacity());
      assertNotNull(strBuilder2);
      assertTrue(strBuilder2.equals((Object)strBuilder0));
      assertTrue(strBuilder2.equals((Object)strBuilder1));
      
      StrBuilder strBuilder3 = strBuilder0.reverse();
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertFalse(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isEmpty());
      assertFalse(strBuilder3.isNotEmpty());
      assertEquals(0, strBuilder3.length());
      assertEquals(0, strBuilder3.size());
      assertNull(strBuilder3.getNewLineText());
      assertEquals(32, strBuilder3.capacity());
      assertNull(strBuilder3.getNullText());
      assertTrue(strBuilder3.isEmpty());
      assertNotNull(strBuilder3);
      assertTrue(strBuilder0.equals((Object)strBuilder2));
      assertTrue(strBuilder3.equals((Object)strBuilder2));
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder3);
      assertNotSame(strBuilder0, strBuilder2);
      assertNotSame(strBuilder3, strBuilder2);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder0);
      
      StrBuilder strBuilder4 = strBuilder0.append((CharSequence) stringBuilder1);
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(5, strBuilder0.length());
      assertEquals(5, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals("false", stringBuilder0.toString());
      assertEquals("false", stringBuilder1.toString());
      assertEquals(5, strBuilder4.size());
      assertNull(strBuilder4.getNullText());
      assertNull(strBuilder4.getNewLineText());
      assertEquals(5, strBuilder4.length());
      assertEquals(32, strBuilder4.capacity());
      assertFalse(strBuilder4.isEmpty());
      assertTrue(strBuilder4.isNotEmpty());
      assertNotNull(strBuilder4);
      assertFalse(strBuilder0.equals((Object)strBuilder2));
      assertFalse(strBuilder4.equals((Object)strBuilder2));
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder3);
      assertNotSame(strBuilder0, strBuilder2);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder1, stringBuilder0);
      assertSame(strBuilder4, strBuilder3);
      assertNotSame(strBuilder4, strBuilder2);
      assertSame(strBuilder4, strBuilder1);
      assertSame(strBuilder4, strBuilder0);
      
      StrBuilder strBuilder5 = strBuilder4.appendSeparator("", 844);
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(5, strBuilder0.length());
      assertEquals(5, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals("false", stringBuilder0.toString());
      assertEquals("false", stringBuilder1.toString());
      assertEquals(5, strBuilder4.size());
      assertNull(strBuilder4.getNullText());
      assertNull(strBuilder4.getNewLineText());
      assertEquals(5, strBuilder4.length());
      assertEquals(32, strBuilder4.capacity());
      assertFalse(strBuilder4.isEmpty());
      assertTrue(strBuilder4.isNotEmpty());
      assertEquals(5, strBuilder5.length());
      assertEquals(5, strBuilder5.size());
      assertFalse(strBuilder5.isEmpty());
      assertNull(strBuilder5.getNewLineText());
      assertEquals(32, strBuilder5.capacity());
      assertNull(strBuilder5.getNullText());
      assertTrue(strBuilder5.isNotEmpty());
      assertNotNull(strBuilder5);
      assertFalse(strBuilder0.equals((Object)strBuilder2));
      assertFalse(strBuilder4.equals((Object)strBuilder2));
      assertFalse(strBuilder5.equals((Object)strBuilder2));
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder3);
      assertNotSame(strBuilder0, strBuilder2);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder1, stringBuilder0);
      assertSame(strBuilder4, strBuilder5);
      assertSame(strBuilder4, strBuilder3);
      assertNotSame(strBuilder4, strBuilder2);
      assertSame(strBuilder4, strBuilder1);
      assertSame(strBuilder4, strBuilder0);
      assertSame(strBuilder5, strBuilder3);
      assertNotSame(strBuilder5, strBuilder2);
      assertSame(strBuilder5, strBuilder1);
      assertSame(strBuilder5, strBuilder0);
      assertSame(strBuilder5, strBuilder4);
      
      StringBuilder stringBuilder2 = stringBuilder1.reverse();
      assertEquals("eslaf", stringBuilder0.toString());
      assertEquals("eslaf", stringBuilder1.toString());
      assertEquals("eslaf", stringBuilder2.toString());
      assertNotNull(stringBuilder2);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder0, stringBuilder2);
      assertSame(stringBuilder1, stringBuilder2);
      assertSame(stringBuilder1, stringBuilder0);
      assertSame(stringBuilder2, stringBuilder0);
      assertSame(stringBuilder2, stringBuilder1);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      StrBuilder strBuilder6 = strBuilder5.appendln(stringBuilder2, 2, 2);
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(8, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(8, strBuilder0.length());
      assertEquals("eslaf", stringBuilder0.toString());
      assertEquals("eslaf", stringBuilder1.toString());
      assertNull(strBuilder4.getNullText());
      assertNull(strBuilder4.getNewLineText());
      assertEquals(8, strBuilder4.length());
      assertEquals(32, strBuilder4.capacity());
      assertEquals(8, strBuilder4.size());
      assertFalse(strBuilder4.isEmpty());
      assertTrue(strBuilder4.isNotEmpty());
      assertFalse(strBuilder5.isEmpty());
      assertNull(strBuilder5.getNewLineText());
      assertEquals(32, strBuilder5.capacity());
      assertEquals(8, strBuilder5.length());
      assertNull(strBuilder5.getNullText());
      assertEquals(8, strBuilder5.size());
      assertTrue(strBuilder5.isNotEmpty());
      assertEquals("eslaf", stringBuilder2.toString());
      assertTrue(strBuilder6.isNotEmpty());
      assertFalse(strBuilder6.isEmpty());
      assertEquals(32, strBuilder6.capacity());
      assertNull(strBuilder6.getNullText());
      assertEquals(8, strBuilder6.length());
      assertNull(strBuilder6.getNewLineText());
      assertEquals(8, strBuilder6.size());
      assertNotNull(strBuilder6);
      assertFalse(strBuilder0.equals((Object)strBuilder2));
      assertFalse(strBuilder4.equals((Object)strBuilder2));
      assertFalse(strBuilder5.equals((Object)strBuilder2));
      assertFalse(strBuilder6.equals((Object)strBuilder2));
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder6);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder3);
      assertNotSame(strBuilder0, strBuilder2);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder0, stringBuilder2);
      assertSame(stringBuilder1, stringBuilder2);
      assertSame(stringBuilder1, stringBuilder0);
      assertSame(strBuilder4, strBuilder5);
      assertSame(strBuilder4, strBuilder3);
      assertNotSame(strBuilder4, strBuilder2);
      assertSame(strBuilder4, strBuilder1);
      assertSame(strBuilder4, strBuilder6);
      assertSame(strBuilder4, strBuilder0);
      assertSame(strBuilder5, strBuilder3);
      assertNotSame(strBuilder5, strBuilder2);
      assertSame(strBuilder5, strBuilder1);
      assertSame(strBuilder5, strBuilder6);
      assertSame(strBuilder5, strBuilder0);
      assertSame(strBuilder5, strBuilder4);
      assertSame(stringBuilder2, stringBuilder0);
      assertSame(stringBuilder2, stringBuilder1);
      assertSame(strBuilder6, strBuilder0);
      assertSame(strBuilder6, strBuilder4);
      assertSame(strBuilder6, strBuilder5);
      assertSame(strBuilder6, strBuilder3);
      assertSame(strBuilder6, strBuilder1);
      assertNotSame(strBuilder6, strBuilder2);
      
      int int0 = strBuilder2.lastIndexOf('?');
      assertNull(strBuilder2.getNewLineText());
      assertNull(strBuilder2.getNullText());
      assertFalse(strBuilder2.isNotEmpty());
      assertEquals(0, strBuilder2.size());
      assertTrue(strBuilder2.isEmpty());
      assertEquals(0, strBuilder2.length());
      assertEquals(32, strBuilder2.capacity());
      assertEquals((-1), int0);
      assertFalse(strBuilder2.equals((Object)strBuilder3));
      assertFalse(strBuilder2.equals((Object)strBuilder0));
      assertFalse(strBuilder2.equals((Object)strBuilder1));
      assertFalse(strBuilder2.equals((Object)strBuilder6));
      assertFalse(strBuilder2.equals((Object)strBuilder5));
      assertFalse(strBuilder2.equals((Object)strBuilder4));
      assertNotSame(strBuilder2, strBuilder3);
      assertNotSame(strBuilder2, strBuilder0);
      assertNotSame(strBuilder2, strBuilder1);
      assertNotSame(strBuilder2, strBuilder6);
      assertNotSame(strBuilder2, strBuilder5);
      assertNotSame(strBuilder2, strBuilder4);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertFalse(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertNotNull(strBuilder0);
      
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
      assertFalse(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertFalse(strBuilder_StrBuilderReader0.ready());
      assertTrue(strBuilder_StrBuilderReader0.markSupported());
      assertNotNull(strBuilder_StrBuilderReader0);
      
      StrBuilder strBuilder1 = new StrBuilder(1);
      assertEquals(0, strBuilder1.length());
      assertEquals(0, strBuilder1.size());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertTrue(strBuilder1.isEmpty());
      assertFalse(strBuilder1.isNotEmpty());
      assertEquals(1, strBuilder1.capacity());
      assertNotNull(strBuilder1);
      assertTrue(strBuilder1.equals((Object)strBuilder0));
      
      StringBuilder stringBuilder0 = new StringBuilder(1);
      assertEquals("", stringBuilder0.toString());
      assertNotNull(stringBuilder0);
      
      StringBuffer stringBuffer0 = new StringBuffer();
      assertEquals(0, stringBuffer0.length());
      assertEquals("", stringBuffer0.toString());
      assertNotNull(stringBuffer0);
      
      StringBuilder stringBuilder1 = stringBuilder0.append(stringBuffer0);
      assertEquals("", stringBuilder0.toString());
      assertEquals(0, stringBuffer0.length());
      assertEquals("", stringBuffer0.toString());
      assertEquals("", stringBuilder1.toString());
      assertNotNull(stringBuilder1);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder1, stringBuilder0);
      
      char char0 = 'j';
      strBuilder1.size = (-1860);
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals((-1860), strBuilder1.length());
      assertFalse(strBuilder1.isNotEmpty());
      assertEquals(1, strBuilder1.capacity());
      assertFalse(strBuilder1.isEmpty());
      assertEquals((-1860), strBuilder1.size());
      
      // Undeclared exception!
      try { 
        strBuilder1.appendFixedWidthPadLeft(3194, 164, '#');
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1860
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertNotNull(strBuilder0);
      
      char[] charArray0 = strBuilder0.toCharArray();
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertNotNull(charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      
      StrBuilder strBuilder1 = strBuilder0.appendln((-1875L));
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertEquals(6, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(6, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertTrue(strBuilder1.isNotEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNullText());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(6, strBuilder1.length());
      assertEquals(6, strBuilder1.size());
      assertNotNull(strBuilder1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      
      StrBuilder strBuilder2 = new StrBuilder();
      assertEquals(0, strBuilder2.size());
      assertFalse(strBuilder2.isNotEmpty());
      assertNull(strBuilder2.getNewLineText());
      assertNull(strBuilder2.getNullText());
      assertEquals(32, strBuilder2.capacity());
      assertTrue(strBuilder2.isEmpty());
      assertEquals(0, strBuilder2.length());
      assertNotNull(strBuilder2);
      assertFalse(strBuilder2.equals((Object)strBuilder0));
      assertFalse(strBuilder2.equals((Object)strBuilder1));
      
      StrBuilder strBuilder3 = strBuilder0.appendSeparator("org.apache.commons.lang3.text.StrBuilder$StrBuilderReader", 1474);
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(126, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(63, strBuilder0.length());
      assertEquals(63, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(126, strBuilder3.capacity());
      assertTrue(strBuilder3.isNotEmpty());
      assertNull(strBuilder3.getNullText());
      assertEquals(63, strBuilder3.size());
      assertEquals(63, strBuilder3.length());
      assertFalse(strBuilder3.isEmpty());
      assertNull(strBuilder3.getNewLineText());
      assertNotNull(strBuilder3);
      assertFalse(strBuilder0.equals((Object)strBuilder2));
      assertFalse(strBuilder3.equals((Object)strBuilder2));
      assertNotSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder0);
      assertNotSame(strBuilder3, strBuilder2);
      
      String string0 = strBuilder0.toString();
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(126, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(63, strBuilder0.length());
      assertEquals(63, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertNotNull(string0);
      assertEquals("-1875\norg.apache.commons.lang3.text.StrBuilder$StrBuilderReader", string0);
      assertFalse(strBuilder0.equals((Object)strBuilder2));
      assertNotSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      
      StrBuilder strBuilder4 = strBuilder1.delete(63, 102);
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(126, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(63, strBuilder0.length());
      assertEquals(63, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(126, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertTrue(strBuilder1.isNotEmpty());
      assertEquals(63, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertEquals(63, strBuilder1.size());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(126, strBuilder4.capacity());
      assertTrue(strBuilder4.isNotEmpty());
      assertFalse(strBuilder4.isEmpty());
      assertNull(strBuilder4.getNewLineText());
      assertNull(strBuilder4.getNullText());
      assertEquals(63, strBuilder4.size());
      assertEquals(63, strBuilder4.length());
      assertNotNull(strBuilder4);
      assertFalse(strBuilder0.equals((Object)strBuilder2));
      assertFalse(strBuilder1.equals((Object)strBuilder2));
      assertFalse(strBuilder4.equals((Object)strBuilder2));
      assertNotSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertNotSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder4);
      assertSame(strBuilder4, strBuilder1);
      assertSame(strBuilder4, strBuilder3);
      assertSame(strBuilder4, strBuilder0);
      assertNotSame(strBuilder4, strBuilder2);
      
      StrBuilder strBuilder5 = strBuilder4.appendSeparator('!', 63);
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(126, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(64, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(64, strBuilder0.size());
      assertEquals(126, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertTrue(strBuilder1.isNotEmpty());
      assertEquals(64, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertEquals(64, strBuilder1.size());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(126, strBuilder4.capacity());
      assertTrue(strBuilder4.isNotEmpty());
      assertFalse(strBuilder4.isEmpty());
      assertNull(strBuilder4.getNewLineText());
      assertNull(strBuilder4.getNullText());
      assertEquals(64, strBuilder4.length());
      assertEquals(64, strBuilder4.size());
      assertEquals(126, strBuilder5.capacity());
      assertFalse(strBuilder5.isEmpty());
      assertEquals(64, strBuilder5.length());
      assertEquals(64, strBuilder5.size());
      assertNull(strBuilder5.getNullText());
      assertNull(strBuilder5.getNewLineText());
      assertTrue(strBuilder5.isNotEmpty());
      assertNotNull(strBuilder5);
      assertFalse(strBuilder0.equals((Object)strBuilder2));
      assertFalse(strBuilder1.equals((Object)strBuilder2));
      assertFalse(strBuilder4.equals((Object)strBuilder2));
      assertFalse(strBuilder5.equals((Object)strBuilder2));
      assertNotSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder1);
      assertNotSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder4);
      assertSame(strBuilder1, strBuilder5);
      assertSame(strBuilder4, strBuilder1);
      assertSame(strBuilder4, strBuilder3);
      assertSame(strBuilder4, strBuilder0);
      assertSame(strBuilder4, strBuilder5);
      assertNotSame(strBuilder4, strBuilder2);
      assertNotSame(strBuilder5, strBuilder2);
      assertSame(strBuilder5, strBuilder3);
      assertSame(strBuilder5, strBuilder1);
      assertSame(strBuilder5, strBuilder4);
      assertSame(strBuilder5, strBuilder0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      String string0 = "$8tMis&#;";
      StrBuilder strBuilder0 = new StrBuilder("$8tMis&#;");
      assertEquals(41, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(9, strBuilder0.length());
      assertEquals(9, strBuilder0.size());
      assertNotNull(strBuilder0);
      
      int int0 = Integer.MAX_VALUE;
      Object[] objectArray0 = new Object[8];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      objectArray0[1] = (Object) "$8tMis&#;";
      objectArray0[2] = (Object) strBuilder0;
      objectArray0[3] = (Object) strBuilder0;
      objectArray0[4] = (Object) "$8tMis&#;";
      objectArray0[5] = (Object) strBuilder0;
      objectArray0[6] = (Object) strBuilder0;
      objectArray0[7] = (Object) "$8tMis&#;";
      StrBuilder strBuilder1 = strBuilder0.appendWithSeparators(objectArray0, "$8tMis&#;");
      assertEquals(2412, strBuilder0.capacity());
      assertEquals(1224, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(1224, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder1.isNotEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(2412, strBuilder1.capacity());
      assertEquals(1224, strBuilder1.length());
      assertEquals(1224, strBuilder1.size());
      assertFalse(strBuilder1.isEmpty());
      assertNotNull(strBuilder1);
      assertEquals(8, objectArray0.length);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      
      StrBuilder strBuilder2 = strBuilder0.appendSeparator("$8tMis&#;", Integer.MAX_VALUE);
      assertEquals(2412, strBuilder0.capacity());
      assertEquals(1233, strBuilder0.size());
      assertEquals(1233, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder2.isNotEmpty());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(1233, strBuilder2.length());
      assertEquals(1233, strBuilder2.size());
      assertNull(strBuilder2.getNullText());
      assertEquals(2412, strBuilder2.capacity());
      assertNull(strBuilder2.getNewLineText());
      assertNotNull(strBuilder2);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      
      String string1 = strBuilder0.toString();
      assertEquals(2412, strBuilder0.capacity());
      assertEquals(1233, strBuilder0.size());
      assertEquals(1233, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      
      StrBuilder strBuilder3 = strBuilder0.delete(63, 63);
      assertNull(strBuilder3.getNullText());
      assertEquals(1233, strBuilder3.length());
      assertEquals(1233, strBuilder3.size());
      assertFalse(strBuilder3.isEmpty());
      assertEquals(2412, strBuilder3.capacity());
      assertNull(strBuilder3.getNewLineText());
      assertTrue(strBuilder3.isNotEmpty());
      assertEquals(2412, strBuilder0.capacity());
      assertEquals(1233, strBuilder0.size());
      assertEquals(1233, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertNotNull(strBuilder3);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder2);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder3);
      
      Integer integer0 = new Integer(256);
      assertNotNull(integer0);
      assertEquals(256, (int)integer0);
      assertFalse(integer0.equals((Object)int0));
      
      StrBuilder strBuilder4 = strBuilder3.appendFixedWidthPadLeft((Object) integer0, 112, '/');
      assertNull(strBuilder3.getNullText());
      assertEquals(1345, strBuilder3.length());
      assertEquals(1345, strBuilder3.size());
      assertFalse(strBuilder3.isEmpty());
      assertEquals(2412, strBuilder3.capacity());
      assertNull(strBuilder3.getNewLineText());
      assertTrue(strBuilder3.isNotEmpty());
      assertEquals(2412, strBuilder0.capacity());
      assertEquals(1345, strBuilder0.size());
      assertEquals(1345, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(1345, strBuilder4.size());
      assertFalse(strBuilder4.isEmpty());
      assertEquals(1345, strBuilder4.length());
      assertTrue(strBuilder4.isNotEmpty());
      assertNull(strBuilder4.getNewLineText());
      assertNull(strBuilder4.getNullText());
      assertEquals(2412, strBuilder4.capacity());
      assertNotNull(strBuilder4);
      assertFalse(integer0.equals((Object)int0));
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder2);
      assertSame(strBuilder3, strBuilder4);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder4, strBuilder1);
      assertSame(strBuilder4, strBuilder3);
      assertSame(strBuilder4, strBuilder2);
      assertSame(strBuilder4, strBuilder0);
      
      StrBuilder strBuilder5 = strBuilder0.append((CharSequence) string1);
      assertEquals(2578, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(2578, strBuilder0.size());
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(5156, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(2578, strBuilder5.size());
      assertNull(strBuilder5.getNullText());
      assertNull(strBuilder5.getNewLineText());
      assertFalse(strBuilder5.isEmpty());
      assertTrue(strBuilder5.isNotEmpty());
      assertEquals(5156, strBuilder5.capacity());
      assertEquals(2578, strBuilder5.length());
      assertNotNull(strBuilder5);
      assertFalse(string1.equals((Object)string0));
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder5, strBuilder2);
      assertSame(strBuilder5, strBuilder3);
      assertSame(strBuilder5, strBuilder0);
      assertSame(strBuilder5, strBuilder4);
      assertSame(strBuilder5, strBuilder1);
      
      StrBuilder strBuilder6 = strBuilder4.append(112);
      assertNull(strBuilder3.getNullText());
      assertEquals(5156, strBuilder3.capacity());
      assertEquals(2581, strBuilder3.length());
      assertFalse(strBuilder3.isEmpty());
      assertEquals(2581, strBuilder3.size());
      assertNull(strBuilder3.getNewLineText());
      assertTrue(strBuilder3.isNotEmpty());
      assertEquals(2581, strBuilder0.length());
      assertEquals(2581, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(5156, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(5156, strBuilder4.capacity());
      assertEquals(2581, strBuilder4.length());
      assertFalse(strBuilder4.isEmpty());
      assertTrue(strBuilder4.isNotEmpty());
      assertEquals(2581, strBuilder4.size());
      assertNull(strBuilder4.getNewLineText());
      assertNull(strBuilder4.getNullText());
      assertEquals(5156, strBuilder6.capacity());
      assertEquals(2581, strBuilder6.size());
      assertFalse(strBuilder6.isEmpty());
      assertEquals(2581, strBuilder6.length());
      assertNull(strBuilder6.getNewLineText());
      assertNull(strBuilder6.getNullText());
      assertTrue(strBuilder6.isNotEmpty());
      assertNotNull(strBuilder6);
      assertFalse(integer0.equals((Object)int0));
      assertSame(strBuilder3, strBuilder5);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder2);
      assertSame(strBuilder3, strBuilder4);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder6);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder6);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder4, strBuilder5);
      assertSame(strBuilder4, strBuilder6);
      assertSame(strBuilder4, strBuilder1);
      assertSame(strBuilder4, strBuilder3);
      assertSame(strBuilder4, strBuilder2);
      assertSame(strBuilder4, strBuilder0);
      assertSame(strBuilder6, strBuilder5);
      assertSame(strBuilder6, strBuilder3);
      assertSame(strBuilder6, strBuilder1);
      assertSame(strBuilder6, strBuilder0);
      assertSame(strBuilder6, strBuilder4);
      assertSame(strBuilder6, strBuilder2);
      
      char char0 = '\\';
      // Undeclared exception!
      try { 
        strBuilder1.appendFixedWidthPadLeft(63, Integer.MAX_VALUE, '\\');
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5156
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertNotNull(strBuilder0);
      
      int int0 = 44;
      StrBuilder strBuilder1 = new StrBuilder(44);
      assertEquals(44, strBuilder1.capacity());
      assertEquals(0, strBuilder1.size());
      assertFalse(strBuilder1.isNotEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(0, strBuilder1.length());
      assertTrue(strBuilder1.isEmpty());
      assertNotNull(strBuilder1);
      assertTrue(strBuilder1.equals((Object)strBuilder0));
      
      int int1 = 483;
      StrBuilder strBuilder2 = strBuilder0.appendFixedWidthPadRight(44, 483, 'I');
      assertEquals(483, strBuilder0.size());
      assertEquals(483, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(966, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder2.isNotEmpty());
      assertFalse(strBuilder2.isEmpty());
      assertNull(strBuilder2.getNullText());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(483, strBuilder2.size());
      assertEquals(966, strBuilder2.capacity());
      assertEquals(483, strBuilder2.length());
      assertNotNull(strBuilder2);
      assertFalse(strBuilder0.equals((Object)strBuilder1));
      assertFalse(strBuilder2.equals((Object)strBuilder1));
      assertSame(strBuilder0, strBuilder2);
      assertNotSame(strBuilder0, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertNotSame(strBuilder2, strBuilder1);
      
      StrBuilder strBuilder3 = new StrBuilder();
      assertTrue(strBuilder3.isEmpty());
      assertFalse(strBuilder3.isNotEmpty());
      assertEquals(32, strBuilder3.capacity());
      assertEquals(0, strBuilder3.length());
      assertNull(strBuilder3.getNullText());
      assertEquals(0, strBuilder3.size());
      assertNull(strBuilder3.getNewLineText());
      assertNotNull(strBuilder3);
      assertFalse(strBuilder3.equals((Object)strBuilder2));
      assertTrue(strBuilder3.equals((Object)strBuilder1));
      assertFalse(strBuilder3.equals((Object)strBuilder0));
      
      StrBuilder strBuilder4 = strBuilder3.deleteFirst("");
      assertTrue(strBuilder3.isEmpty());
      assertFalse(strBuilder3.isNotEmpty());
      assertEquals(32, strBuilder3.capacity());
      assertEquals(0, strBuilder3.length());
      assertNull(strBuilder3.getNullText());
      assertEquals(0, strBuilder3.size());
      assertNull(strBuilder3.getNewLineText());
      assertFalse(strBuilder4.isNotEmpty());
      assertNull(strBuilder4.getNullText());
      assertTrue(strBuilder4.isEmpty());
      assertNull(strBuilder4.getNewLineText());
      assertEquals(32, strBuilder4.capacity());
      assertEquals(0, strBuilder4.length());
      assertEquals(0, strBuilder4.size());
      assertNotNull(strBuilder4);
      assertFalse(strBuilder3.equals((Object)strBuilder2));
      assertTrue(strBuilder3.equals((Object)strBuilder1));
      assertFalse(strBuilder3.equals((Object)strBuilder0));
      assertTrue(strBuilder4.equals((Object)strBuilder1));
      assertFalse(strBuilder4.equals((Object)strBuilder2));
      assertFalse(strBuilder4.equals((Object)strBuilder0));
      assertNotSame(strBuilder3, strBuilder2);
      assertNotSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder4);
      assertNotSame(strBuilder3, strBuilder1);
      assertNotSame(strBuilder4, strBuilder1);
      assertSame(strBuilder4, strBuilder3);
      assertNotSame(strBuilder4, strBuilder2);
      assertNotSame(strBuilder4, strBuilder0);
      
      // Undeclared exception!
      try { 
        strBuilder0.charAt(483);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 483
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("dN");
      assertNull(strBuilder0.getNewLineText());
      assertEquals(34, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(2, strBuilder0.length());
      assertEquals(2, strBuilder0.size());
      assertNotNull(strBuilder0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      StrBuilder strBuilder1 = new StrBuilder("dN");
      assertTrue(strBuilder1.isNotEmpty());
      assertEquals(34, strBuilder1.capacity());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(2, strBuilder1.length());
      assertEquals(2, strBuilder1.size());
      assertNotNull(strBuilder1);
      assertTrue(strBuilder1.equals((Object)strBuilder0));
      
      StrBuilder strBuilder2 = new StrBuilder();
      assertNull(strBuilder2.getNewLineText());
      assertEquals(0, strBuilder2.size());
      assertTrue(strBuilder2.isEmpty());
      assertEquals(0, strBuilder2.length());
      assertEquals(32, strBuilder2.capacity());
      assertFalse(strBuilder2.isNotEmpty());
      assertNull(strBuilder2.getNullText());
      assertNotNull(strBuilder2);
      assertFalse(strBuilder2.equals((Object)strBuilder1));
      assertFalse(strBuilder2.equals((Object)strBuilder0));
      
      StringBuilder stringBuilder0 = new StringBuilder("dN");
      assertEquals("dN", stringBuilder0.toString());
      assertNotNull(stringBuilder0);
      
      StringBuffer stringBuffer0 = new StringBuffer(strBuilder0);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(34, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(2, strBuilder0.length());
      assertEquals(2, strBuilder0.size());
      assertEquals("dN", stringBuffer0.toString());
      assertEquals(2, stringBuffer0.length());
      assertNotNull(stringBuffer0);
      assertFalse(strBuilder0.equals((Object)strBuilder2));
      assertTrue(strBuilder0.equals((Object)strBuilder1));
      
      StrBuilder strBuilder3 = strBuilder0.appendFixedWidthPadLeft((Object) stringBuffer0, 32, '\'');
      assertNull(strBuilder0.getNewLineText());
      assertEquals(34, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(34, strBuilder0.length());
      assertEquals(34, strBuilder0.size());
      assertEquals("dN", stringBuffer0.toString());
      assertEquals(2, stringBuffer0.length());
      assertEquals(34, strBuilder3.capacity());
      assertTrue(strBuilder3.isNotEmpty());
      assertFalse(strBuilder3.isEmpty());
      assertEquals(34, strBuilder3.length());
      assertEquals(34, strBuilder3.size());
      assertNull(strBuilder3.getNullText());
      assertNull(strBuilder3.getNewLineText());
      assertNotNull(strBuilder3);
      assertFalse(strBuilder0.equals((Object)strBuilder1));
      assertFalse(strBuilder0.equals((Object)strBuilder2));
      assertFalse(strBuilder3.equals((Object)strBuilder1));
      assertFalse(strBuilder3.equals((Object)strBuilder2));
      assertNotSame(strBuilder0, strBuilder1);
      assertNotSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder3);
      assertNotSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder0);
      assertNotSame(strBuilder3, strBuilder2);
      
      StrBuilder strBuilder4 = strBuilder1.appendln(0.0);
      assertTrue(strBuilder1.isNotEmpty());
      assertEquals(34, strBuilder1.capacity());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(6, strBuilder1.length());
      assertEquals(6, strBuilder1.size());
      assertEquals(6, strBuilder4.size());
      assertEquals(6, strBuilder4.length());
      assertEquals(34, strBuilder4.capacity());
      assertFalse(strBuilder4.isEmpty());
      assertNull(strBuilder4.getNullText());
      assertTrue(strBuilder4.isNotEmpty());
      assertNull(strBuilder4.getNewLineText());
      assertNotNull(strBuilder4);
      assertFalse(strBuilder1.equals((Object)strBuilder2));
      assertFalse(strBuilder1.equals((Object)strBuilder0));
      assertFalse(strBuilder1.equals((Object)strBuilder3));
      assertFalse(strBuilder4.equals((Object)strBuilder0));
      assertFalse(strBuilder4.equals((Object)strBuilder2));
      assertFalse(strBuilder4.equals((Object)strBuilder3));
      assertSame(strBuilder1, strBuilder4);
      assertNotSame(strBuilder1, strBuilder2);
      assertNotSame(strBuilder1, strBuilder0);
      assertNotSame(strBuilder1, strBuilder3);
      assertNotSame(strBuilder4, strBuilder0);
      assertNotSame(strBuilder4, strBuilder2);
      assertSame(strBuilder4, strBuilder1);
      assertNotSame(strBuilder4, strBuilder3);
      
      StrBuilder strBuilder5 = new StrBuilder();
      assertFalse(strBuilder5.isNotEmpty());
      assertEquals(32, strBuilder5.capacity());
      assertTrue(strBuilder5.isEmpty());
      assertNull(strBuilder5.getNewLineText());
      assertNull(strBuilder5.getNullText());
      assertEquals(0, strBuilder5.length());
      assertEquals(0, strBuilder5.size());
      assertNotNull(strBuilder5);
      assertFalse(strBuilder5.equals((Object)strBuilder0));
      assertFalse(strBuilder5.equals((Object)strBuilder4));
      assertFalse(strBuilder5.equals((Object)strBuilder3));
      assertFalse(strBuilder5.equals((Object)strBuilder1));
      assertTrue(strBuilder5.equals((Object)strBuilder2));
      
      StrBuilder strBuilder6 = strBuilder5.replaceAll('N', 'N');
      assertFalse(strBuilder5.isNotEmpty());
      assertEquals(32, strBuilder5.capacity());
      assertTrue(strBuilder5.isEmpty());
      assertNull(strBuilder5.getNewLineText());
      assertNull(strBuilder5.getNullText());
      assertEquals(0, strBuilder5.length());
      assertEquals(0, strBuilder5.size());
      assertNull(strBuilder6.getNullText());
      assertEquals(0, strBuilder6.length());
      assertNull(strBuilder6.getNewLineText());
      assertEquals(0, strBuilder6.size());
      assertFalse(strBuilder6.isNotEmpty());
      assertTrue(strBuilder6.isEmpty());
      assertEquals(32, strBuilder6.capacity());
      assertNotNull(strBuilder6);
      assertFalse(strBuilder5.equals((Object)strBuilder0));
      assertFalse(strBuilder5.equals((Object)strBuilder4));
      assertFalse(strBuilder5.equals((Object)strBuilder3));
      assertFalse(strBuilder5.equals((Object)strBuilder1));
      assertTrue(strBuilder5.equals((Object)strBuilder2));
      assertFalse(strBuilder6.equals((Object)strBuilder3));
      assertTrue(strBuilder6.equals((Object)strBuilder2));
      assertFalse(strBuilder6.equals((Object)strBuilder0));
      assertFalse(strBuilder6.equals((Object)strBuilder4));
      assertFalse(strBuilder6.equals((Object)strBuilder1));
      assertNotSame(strBuilder5, strBuilder0);
      assertNotSame(strBuilder5, strBuilder2);
      assertNotSame(strBuilder5, strBuilder4);
      assertNotSame(strBuilder5, strBuilder3);
      assertNotSame(strBuilder5, strBuilder1);
      assertSame(strBuilder5, strBuilder6);
      assertNotSame(strBuilder6, strBuilder3);
      assertNotSame(strBuilder6, strBuilder0);
      assertNotSame(strBuilder6, strBuilder2);
      assertNotSame(strBuilder6, strBuilder4);
      assertSame(strBuilder6, strBuilder5);
      assertNotSame(strBuilder6, strBuilder1);
      
      StrBuilder strBuilder7 = strBuilder0.insert(32, 144);
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(74, strBuilder0.capacity());
      assertEquals(37, strBuilder0.size());
      assertEquals(37, strBuilder0.length());
      assertTrue(strBuilder7.isNotEmpty());
      assertFalse(strBuilder7.isEmpty());
      assertNull(strBuilder7.getNullText());
      assertNull(strBuilder7.getNewLineText());
      assertEquals(37, strBuilder7.size());
      assertEquals(74, strBuilder7.capacity());
      assertEquals(37, strBuilder7.length());
      assertNotNull(strBuilder7);
      assertFalse(strBuilder0.equals((Object)strBuilder1));
      assertFalse(strBuilder0.equals((Object)strBuilder6));
      assertFalse(strBuilder0.equals((Object)strBuilder4));
      assertFalse(strBuilder0.equals((Object)strBuilder5));
      assertFalse(strBuilder0.equals((Object)strBuilder2));
      assertFalse(strBuilder7.equals((Object)strBuilder5));
      assertFalse(strBuilder7.equals((Object)strBuilder1));
      assertFalse(strBuilder7.equals((Object)strBuilder4));
      assertFalse(strBuilder7.equals((Object)strBuilder6));
      assertFalse(strBuilder7.equals((Object)strBuilder2));
      assertNotSame(strBuilder0, strBuilder1);
      assertNotSame(strBuilder0, strBuilder6);
      assertSame(strBuilder0, strBuilder7);
      assertNotSame(strBuilder0, strBuilder4);
      assertNotSame(strBuilder0, strBuilder5);
      assertNotSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder7, strBuilder3);
      assertNotSame(strBuilder7, strBuilder1);
      assertNotSame(strBuilder7, strBuilder5);
      assertNotSame(strBuilder7, strBuilder4);
      assertNotSame(strBuilder7, strBuilder6);
      assertNotSame(strBuilder7, strBuilder2);
      assertSame(strBuilder7, strBuilder0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertFalse(strBuilder0.isNotEmpty());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = new StrBuilder(" W");
      assertTrue(strBuilder1.isNotEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(34, strBuilder1.capacity());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertEquals(2, strBuilder1.length());
      assertEquals(2, strBuilder1.size());
      assertNotNull(strBuilder1);
      assertFalse(strBuilder1.equals((Object)strBuilder0));
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      boolean boolean0 = strBuilder1.startsWith("9");
      assertTrue(strBuilder1.isNotEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(34, strBuilder1.capacity());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertEquals(2, strBuilder1.length());
      assertEquals(2, strBuilder1.size());
      assertFalse(boolean0);
      assertFalse(strBuilder1.equals((Object)strBuilder0));
      assertNotSame(strBuilder1, strBuilder0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(32);
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertFalse(strBuilder0.isNotEmpty());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNotNull(strBuilder0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte) (-66);
      byteArray0[2] = (byte) (-114);
      byteArray0[3] = (byte)117;
      byteArray0[4] = (byte)2;
      byteArray0[5] = (byte) (-113);
      byteArray0[6] = (byte)41;
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {(byte)1, (byte) (-66), (byte) (-114), (byte)117, (byte)2, (byte) (-113), (byte)41}, byteArray0);
      assertEquals(7, byteArray0.length);
      
      boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      StrBuilder strBuilder1 = strBuilder0.setNullText("");
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertFalse(strBuilder0.isNotEmpty());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertTrue(strBuilder1.isEmpty());
      assertEquals(0, strBuilder1.length());
      assertEquals(0, strBuilder1.size());
      assertFalse(strBuilder1.isNotEmpty());
      assertNull(strBuilder1.getNullText());
      assertNotNull(strBuilder1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      
      int int0 = strBuilder0.lastIndexOf('E', 32);
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertFalse(strBuilder0.isNotEmpty());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertEquals((-1), int0);
      assertSame(strBuilder0, strBuilder1);
      
      StrBuilder strBuilder2 = strBuilder0.append('$');
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(1, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(1, strBuilder0.length());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(32, strBuilder2.capacity());
      assertEquals(1, strBuilder2.length());
      assertEquals(1, strBuilder2.size());
      assertFalse(strBuilder2.isEmpty());
      assertNull(strBuilder2.getNullText());
      assertTrue(strBuilder2.isNotEmpty());
      assertNotNull(strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      
      StrBuilder strBuilder3 = strBuilder0.deleteFirst("Invalid startIndex: ");
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(1, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(1, strBuilder0.length());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder3.isNotEmpty());
      assertFalse(strBuilder3.isEmpty());
      assertNull(strBuilder3.getNewLineText());
      assertNull(strBuilder3.getNullText());
      assertEquals(32, strBuilder3.capacity());
      assertEquals(1, strBuilder3.size());
      assertEquals(1, strBuilder3.length());
      assertNotNull(strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder3, strBuilder2);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder0);
      
      int int1 = strBuilder3.indexOf('$');
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(1, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(1, strBuilder0.length());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder3.isNotEmpty());
      assertFalse(strBuilder3.isEmpty());
      assertNull(strBuilder3.getNewLineText());
      assertNull(strBuilder3.getNullText());
      assertEquals(32, strBuilder3.capacity());
      assertEquals(1, strBuilder3.size());
      assertEquals(1, strBuilder3.length());
      assertEquals(0, int1);
      assertFalse(int1 == int0);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder3, strBuilder2);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(0);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertFalse(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNullText());
      assertNotNull(strBuilder0);
      
      String string0 = " rU^qEvrU}'`nsy$sAe";
      StrBuilder strBuilder1 = strBuilder0.append(" rU^qEvrU}'`nsy$sAe", 0, 0);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertFalse(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder1.capacity());
      assertTrue(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(0, strBuilder1.size());
      assertFalse(strBuilder1.isNotEmpty());
      assertEquals(0, strBuilder1.length());
      assertNotNull(strBuilder1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      
      StrBuilder strBuilder2 = new StrBuilder();
      assertTrue(strBuilder2.isEmpty());
      assertFalse(strBuilder2.isNotEmpty());
      assertNull(strBuilder2.getNullText());
      assertEquals(0, strBuilder2.length());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(0, strBuilder2.size());
      assertEquals(32, strBuilder2.capacity());
      assertNotNull(strBuilder2);
      assertTrue(strBuilder2.equals((Object)strBuilder1));
      assertTrue(strBuilder2.equals((Object)strBuilder0));
      
      int int0 = 6;
      boolean boolean0 = strBuilder2.isNotEmpty();
      assertTrue(strBuilder2.isEmpty());
      assertFalse(strBuilder2.isNotEmpty());
      assertNull(strBuilder2.getNullText());
      assertEquals(0, strBuilder2.length());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(0, strBuilder2.size());
      assertEquals(32, strBuilder2.capacity());
      assertFalse(boolean0);
      assertTrue(strBuilder2.equals((Object)strBuilder1));
      assertTrue(strBuilder2.equals((Object)strBuilder0));
      assertNotSame(strBuilder2, strBuilder1);
      assertNotSame(strBuilder2, strBuilder0);
      
      StrBuilder strBuilder3 = strBuilder2.appendSeparator(" rU^qEvrU}'`nsy$sAe", 6);
      assertEquals(19, strBuilder2.length());
      assertEquals(19, strBuilder2.size());
      assertNull(strBuilder2.getNullText());
      assertFalse(strBuilder2.isEmpty());
      assertNull(strBuilder2.getNewLineText());
      assertTrue(strBuilder2.isNotEmpty());
      assertEquals(32, strBuilder2.capacity());
      assertEquals(32, strBuilder3.capacity());
      assertFalse(strBuilder3.isEmpty());
      assertEquals(19, strBuilder3.length());
      assertEquals(19, strBuilder3.size());
      assertTrue(strBuilder3.isNotEmpty());
      assertNull(strBuilder3.getNewLineText());
      assertNull(strBuilder3.getNullText());
      assertNotNull(strBuilder3);
      assertFalse(strBuilder2.equals((Object)strBuilder1));
      assertFalse(strBuilder2.equals((Object)strBuilder0));
      assertFalse(strBuilder3.equals((Object)strBuilder0));
      assertFalse(strBuilder3.equals((Object)strBuilder1));
      assertNotSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder3);
      assertNotSame(strBuilder2, strBuilder0);
      assertSame(strBuilder3, strBuilder2);
      assertNotSame(strBuilder3, strBuilder0);
      assertNotSame(strBuilder3, strBuilder1);
      
      int int1 = 778;
      StrBuilder strBuilder4 = strBuilder1.appendFixedWidthPadLeft(6, (-1747), '}');
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertFalse(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder1.capacity());
      assertTrue(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(0, strBuilder1.size());
      assertFalse(strBuilder1.isNotEmpty());
      assertEquals(0, strBuilder1.length());
      assertNull(strBuilder4.getNewLineText());
      assertNull(strBuilder4.getNullText());
      assertTrue(strBuilder4.isEmpty());
      assertEquals(32, strBuilder4.capacity());
      assertFalse(strBuilder4.isNotEmpty());
      assertEquals(0, strBuilder4.size());
      assertEquals(0, strBuilder4.length());
      assertNotNull(strBuilder4);
      assertFalse(strBuilder0.equals((Object)strBuilder2));
      assertFalse(strBuilder0.equals((Object)strBuilder3));
      assertFalse(strBuilder1.equals((Object)strBuilder2));
      assertFalse(strBuilder1.equals((Object)strBuilder3));
      assertFalse(strBuilder4.equals((Object)strBuilder3));
      assertFalse(strBuilder4.equals((Object)strBuilder2));
      assertNotSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder4);
      assertNotSame(strBuilder0, strBuilder3);
      assertNotSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder4);
      assertNotSame(strBuilder1, strBuilder3);
      assertSame(strBuilder4, strBuilder0);
      assertSame(strBuilder4, strBuilder1);
      assertNotSame(strBuilder4, strBuilder3);
      assertNotSame(strBuilder4, strBuilder2);
      
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      TreeSet<Integer> treeSet0 = new TreeSet<Integer>(comparator0);
      assertNotNull(treeSet0);
      assertFalse(treeSet0.contains(int0));
      
      StrBuilder strBuilder5 = strBuilder1.appendWithSeparators((Iterable<?>) treeSet0, "HG");
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertFalse(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder1.capacity());
      assertTrue(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(0, strBuilder1.size());
      assertFalse(strBuilder1.isNotEmpty());
      assertEquals(0, strBuilder1.length());
      assertTrue(strBuilder5.isEmpty());
      assertFalse(strBuilder5.isNotEmpty());
      assertEquals(32, strBuilder5.capacity());
      assertNull(strBuilder5.getNullText());
      assertEquals(0, strBuilder5.length());
      assertEquals(0, strBuilder5.size());
      assertNull(strBuilder5.getNewLineText());
      assertNotNull(strBuilder5);
      assertFalse(treeSet0.contains(int0));
      assertFalse(strBuilder0.equals((Object)strBuilder2));
      assertFalse(strBuilder0.equals((Object)strBuilder3));
      assertFalse(strBuilder1.equals((Object)strBuilder2));
      assertFalse(strBuilder1.equals((Object)strBuilder3));
      assertFalse(strBuilder5.equals((Object)strBuilder2));
      assertFalse(strBuilder5.equals((Object)strBuilder3));
      assertNotSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder4);
      assertNotSame(strBuilder0, strBuilder3);
      assertNotSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder4);
      assertNotSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder5);
      assertNotSame(strBuilder5, strBuilder2);
      assertNotSame(strBuilder5, strBuilder3);
      assertSame(strBuilder5, strBuilder1);
      assertSame(strBuilder5, strBuilder4);
      assertSame(strBuilder5, strBuilder0);
      
      String string1 = strBuilder0.build();
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertFalse(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNullText());
      assertNotNull(string1);
      assertEquals("", string1);
      assertFalse(strBuilder0.equals((Object)strBuilder2));
      assertFalse(strBuilder0.equals((Object)strBuilder3));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder4);
      assertNotSame(strBuilder0, strBuilder3);
      
      StrBuilder strBuilder6 = strBuilder5.appendln((double) (-1747));
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(8, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(8, strBuilder0.size());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(8, strBuilder1.size());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(8, strBuilder1.length());
      assertTrue(strBuilder1.isNotEmpty());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(8, strBuilder5.length());
      assertEquals(8, strBuilder5.size());
      assertEquals(32, strBuilder5.capacity());
      assertNull(strBuilder5.getNullText());
      assertTrue(strBuilder5.isNotEmpty());
      assertFalse(strBuilder5.isEmpty());
      assertNull(strBuilder5.getNewLineText());
      assertEquals(8, strBuilder6.length());
      assertEquals(8, strBuilder6.size());
      assertFalse(strBuilder6.isEmpty());
      assertNull(strBuilder6.getNullText());
      assertNull(strBuilder6.getNewLineText());
      assertEquals(32, strBuilder6.capacity());
      assertTrue(strBuilder6.isNotEmpty());
      assertNotNull(strBuilder6);
      assertFalse(treeSet0.contains(int0));
      assertFalse(strBuilder0.equals((Object)strBuilder2));
      assertFalse(strBuilder0.equals((Object)strBuilder3));
      assertFalse(strBuilder1.equals((Object)strBuilder2));
      assertFalse(strBuilder1.equals((Object)strBuilder3));
      assertFalse(strBuilder5.equals((Object)strBuilder2));
      assertFalse(strBuilder5.equals((Object)strBuilder3));
      assertFalse(strBuilder6.equals((Object)strBuilder2));
      assertFalse(strBuilder6.equals((Object)strBuilder3));
      assertNotSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder6);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder4);
      assertNotSame(strBuilder0, strBuilder3);
      assertNotSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder6);
      assertSame(strBuilder1, strBuilder4);
      assertSame(strBuilder1, strBuilder0);
      assertNotSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder5);
      assertNotSame(strBuilder5, strBuilder2);
      assertSame(strBuilder5, strBuilder6);
      assertNotSame(strBuilder5, strBuilder3);
      assertSame(strBuilder5, strBuilder1);
      assertSame(strBuilder5, strBuilder4);
      assertSame(strBuilder5, strBuilder0);
      assertNotSame(strBuilder6, strBuilder2);
      assertSame(strBuilder6, strBuilder1);
      assertSame(strBuilder6, strBuilder0);
      assertNotSame(strBuilder6, strBuilder3);
      assertSame(strBuilder6, strBuilder5);
      assertSame(strBuilder6, strBuilder4);
      
      int int2 = 61;
      // Undeclared exception!
      try { 
        strBuilder1.toCharArray(61, 72);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // end < start
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("bSM8)9c#9W&0y");
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(13, strBuilder0.length());
      assertEquals(13, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(45, strBuilder0.capacity());
      assertNotNull(strBuilder0);
      
      char char0 = '*';
      StrBuilder strBuilder1 = strBuilder0.appendFixedWidthPadLeft((Object) "bSM8)9c#9W&0y", 28, '*');
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(41, strBuilder0.length());
      assertEquals(45, strBuilder0.capacity());
      assertEquals(41, strBuilder0.size());
      assertTrue(strBuilder1.isNotEmpty());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(41, strBuilder1.length());
      assertEquals(45, strBuilder1.capacity());
      assertEquals(41, strBuilder1.size());
      assertNotNull(strBuilder1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      
      String string0 = strBuilder0.getNewLineText();
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(41, strBuilder0.length());
      assertEquals(45, strBuilder0.capacity());
      assertEquals(41, strBuilder0.size());
      assertNull(string0);
      assertSame(strBuilder0, strBuilder1);
      
      // Undeclared exception!
      try { 
        strBuilder1.equalsIgnoreCase((StrBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.size());
      assertNotNull(strBuilder0);
      
      StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer0 = strBuilder0.new StrBuilderTokenizer();
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder_StrBuilderTokenizer0.isIgnoreEmptyTokens());
      assertFalse(strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull());
      assertEquals((-1), strBuilder_StrBuilderTokenizer0.previousIndex());
      assertEquals(0, strBuilder_StrBuilderTokenizer0.nextIndex());
      assertNotNull(strBuilder_StrBuilderTokenizer0);
      
      StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer1 = (StrBuilder.StrBuilderTokenizer)strBuilder_StrBuilderTokenizer0.cloneReset();
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder_StrBuilderTokenizer0.isIgnoreEmptyTokens());
      assertFalse(strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull());
      assertEquals((-1), strBuilder_StrBuilderTokenizer0.previousIndex());
      assertEquals(0, strBuilder_StrBuilderTokenizer0.nextIndex());
      assertFalse(strBuilder_StrBuilderTokenizer1.isEmptyTokenAsNull());
      assertEquals((-1), strBuilder_StrBuilderTokenizer1.previousIndex());
      assertEquals(0, strBuilder_StrBuilderTokenizer1.nextIndex());
      assertTrue(strBuilder_StrBuilderTokenizer1.isIgnoreEmptyTokens());
      assertNotNull(strBuilder_StrBuilderTokenizer1);
      assertFalse(strBuilder_StrBuilderTokenizer1.equals((Object)strBuilder_StrBuilderTokenizer0));
      assertNotSame(strBuilder_StrBuilderTokenizer0, strBuilder_StrBuilderTokenizer1);
      assertNotSame(strBuilder_StrBuilderTokenizer1, strBuilder_StrBuilderTokenizer0);
      
      char[] charArray0 = new char[5];
      charArray0[0] = '^';
      charArray0[1] = 'X';
      charArray0[3] = '@';
      StringWriter stringWriter0 = new StringWriter(0);
      assertEquals("", stringWriter0.toString());
      assertNotNull(stringWriter0);
      
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      assertEquals("", stringWriter0.toString());
      assertEquals(0, stringBuffer0.length());
      assertEquals("", stringBuffer0.toString());
      assertNotNull(stringBuffer0);
      
      StrBuilder strBuilder1 = strBuilder0.append(stringBuffer0, 0, 0);
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals("", stringWriter0.toString());
      assertEquals(0, stringBuffer0.length());
      assertEquals("", stringBuffer0.toString());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertTrue(strBuilder1.isEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertFalse(strBuilder1.isNotEmpty());
      assertEquals(0, strBuilder1.size());
      assertEquals(0, strBuilder1.length());
      assertNotNull(strBuilder1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      
      StrBuilder strBuilder2 = new StrBuilder();
      assertFalse(strBuilder2.isNotEmpty());
      assertNull(strBuilder2.getNullText());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(32, strBuilder2.capacity());
      assertTrue(strBuilder2.isEmpty());
      assertEquals(0, strBuilder2.size());
      assertEquals(0, strBuilder2.length());
      assertNotNull(strBuilder2);
      assertTrue(strBuilder2.equals((Object)strBuilder0));
      assertTrue(strBuilder2.equals((Object)strBuilder1));
      
      StrBuilder strBuilder3 = strBuilder2.setNewLineText("N1Q}50yw4s*");
      assertFalse(strBuilder2.isNotEmpty());
      assertNull(strBuilder2.getNullText());
      assertEquals("N1Q}50yw4s*", strBuilder2.getNewLineText());
      assertEquals(32, strBuilder2.capacity());
      assertTrue(strBuilder2.isEmpty());
      assertEquals(0, strBuilder2.size());
      assertEquals(0, strBuilder2.length());
      assertFalse(strBuilder3.isNotEmpty());
      assertEquals(0, strBuilder3.size());
      assertNull(strBuilder3.getNullText());
      assertTrue(strBuilder3.isEmpty());
      assertEquals(0, strBuilder3.length());
      assertEquals("N1Q}50yw4s*", strBuilder3.getNewLineText());
      assertEquals(32, strBuilder3.capacity());
      assertNotNull(strBuilder3);
      assertTrue(strBuilder2.equals((Object)strBuilder0));
      assertTrue(strBuilder2.equals((Object)strBuilder1));
      assertTrue(strBuilder3.equals((Object)strBuilder1));
      assertTrue(strBuilder3.equals((Object)strBuilder0));
      assertNotSame(strBuilder2, strBuilder0);
      assertNotSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder3);
      assertNotSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder2);
      assertNotSame(strBuilder3, strBuilder0);
      
      StrBuilder strBuilder4 = strBuilder2.deleteAll('^');
      assertFalse(strBuilder2.isNotEmpty());
      assertNull(strBuilder2.getNullText());
      assertEquals("N1Q}50yw4s*", strBuilder2.getNewLineText());
      assertEquals(32, strBuilder2.capacity());
      assertTrue(strBuilder2.isEmpty());
      assertEquals(0, strBuilder2.size());
      assertEquals(0, strBuilder2.length());
      assertEquals("N1Q}50yw4s*", strBuilder4.getNewLineText());
      assertTrue(strBuilder4.isEmpty());
      assertNull(strBuilder4.getNullText());
      assertEquals(32, strBuilder4.capacity());
      assertFalse(strBuilder4.isNotEmpty());
      assertEquals(0, strBuilder4.length());
      assertEquals(0, strBuilder4.size());
      assertNotNull(strBuilder4);
      assertTrue(strBuilder2.equals((Object)strBuilder0));
      assertTrue(strBuilder2.equals((Object)strBuilder1));
      assertTrue(strBuilder4.equals((Object)strBuilder0));
      assertTrue(strBuilder4.equals((Object)strBuilder1));
      assertNotSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder4);
      assertNotSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder3);
      assertSame(strBuilder4, strBuilder3);
      assertNotSame(strBuilder4, strBuilder1);
      assertSame(strBuilder4, strBuilder2);
      assertNotSame(strBuilder4, strBuilder0);
      
      int int0 = strBuilder1.length();
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals("", stringWriter0.toString());
      assertEquals(0, stringBuffer0.length());
      assertEquals("", stringBuffer0.toString());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertTrue(strBuilder1.isEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertFalse(strBuilder1.isNotEmpty());
      assertEquals(0, strBuilder1.size());
      assertEquals(0, strBuilder1.length());
      assertEquals(0, int0);
      assertTrue(strBuilder0.equals((Object)strBuilder2));
      assertTrue(strBuilder0.equals((Object)strBuilder4));
      assertTrue(strBuilder0.equals((Object)strBuilder3));
      assertTrue(strBuilder1.equals((Object)strBuilder2));
      assertTrue(strBuilder1.equals((Object)strBuilder4));
      assertTrue(strBuilder1.equals((Object)strBuilder3));
      assertNotSame(strBuilder0, strBuilder4);
      assertNotSame(strBuilder0, strBuilder3);
      assertNotSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertNotSame(strBuilder1, strBuilder2);
      assertNotSame(strBuilder1, strBuilder4);
      assertNotSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder0);
      
      Integer integer0 = new Integer(47);
      assertNotNull(integer0);
      assertEquals(47, (int)integer0);
      assertFalse(integer0.equals((Object)int0));
      
      StrBuilder strBuilder5 = strBuilder0.appendFixedWidthPadRight((Object) integer0, 0, '^');
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder5.length());
      assertEquals(0, strBuilder5.size());
      assertFalse(strBuilder5.isNotEmpty());
      assertEquals(32, strBuilder5.capacity());
      assertNull(strBuilder5.getNullText());
      assertTrue(strBuilder5.isEmpty());
      assertNull(strBuilder5.getNewLineText());
      assertNotNull(strBuilder5);
      assertTrue(strBuilder0.equals((Object)strBuilder2));
      assertTrue(strBuilder0.equals((Object)strBuilder4));
      assertTrue(strBuilder0.equals((Object)strBuilder3));
      assertFalse(integer0.equals((Object)int0));
      assertTrue(strBuilder5.equals((Object)strBuilder3));
      assertTrue(strBuilder5.equals((Object)strBuilder4));
      assertTrue(strBuilder5.equals((Object)strBuilder2));
      assertSame(strBuilder0, strBuilder5);
      assertNotSame(strBuilder0, strBuilder4);
      assertNotSame(strBuilder0, strBuilder3);
      assertNotSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertNotSame(strBuilder5, strBuilder2);
      assertSame(strBuilder5, strBuilder1);
      assertNotSame(strBuilder5, strBuilder3);
      assertSame(strBuilder5, strBuilder0);
      assertNotSame(strBuilder5, strBuilder4);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertFalse(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNotNull(strBuilder0);
      
      StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer0 = strBuilder0.new StrBuilderTokenizer();
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertFalse(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals((-1), strBuilder_StrBuilderTokenizer0.previousIndex());
      assertFalse(strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull());
      assertEquals(0, strBuilder_StrBuilderTokenizer0.nextIndex());
      assertTrue(strBuilder_StrBuilderTokenizer0.isIgnoreEmptyTokens());
      assertNotNull(strBuilder_StrBuilderTokenizer0);
      
      StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer1 = (StrBuilder.StrBuilderTokenizer)strBuilder_StrBuilderTokenizer0.cloneReset();
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertFalse(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals((-1), strBuilder_StrBuilderTokenizer0.previousIndex());
      assertFalse(strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull());
      assertEquals(0, strBuilder_StrBuilderTokenizer0.nextIndex());
      assertTrue(strBuilder_StrBuilderTokenizer0.isIgnoreEmptyTokens());
      assertEquals(0, strBuilder_StrBuilderTokenizer1.nextIndex());
      assertTrue(strBuilder_StrBuilderTokenizer1.isIgnoreEmptyTokens());
      assertFalse(strBuilder_StrBuilderTokenizer1.isEmptyTokenAsNull());
      assertEquals((-1), strBuilder_StrBuilderTokenizer1.previousIndex());
      assertNotNull(strBuilder_StrBuilderTokenizer1);
      assertFalse(strBuilder_StrBuilderTokenizer1.equals((Object)strBuilder_StrBuilderTokenizer0));
      assertNotSame(strBuilder_StrBuilderTokenizer0, strBuilder_StrBuilderTokenizer1);
      assertNotSame(strBuilder_StrBuilderTokenizer1, strBuilder_StrBuilderTokenizer0);
      
      char[] charArray0 = new char[5];
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      int int0 = strBuilder_StrBuilderTokenizer0.nextIndex();
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertFalse(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals((-1), strBuilder_StrBuilderTokenizer0.previousIndex());
      assertFalse(strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull());
      assertEquals(0, strBuilder_StrBuilderTokenizer0.nextIndex());
      assertTrue(strBuilder_StrBuilderTokenizer0.isIgnoreEmptyTokens());
      assertEquals(0, int0);
      assertFalse(strBuilder_StrBuilderTokenizer0.equals((Object)strBuilder_StrBuilderTokenizer1));
      assertNotSame(strBuilder_StrBuilderTokenizer0, strBuilder_StrBuilderTokenizer1);
      
      StrBuilder strBuilder1 = strBuilder0.reverse();
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertFalse(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(0, strBuilder1.length());
      assertEquals(0, strBuilder1.size());
      assertTrue(strBuilder1.isEmpty());
      assertFalse(strBuilder1.isNotEmpty());
      assertNull(strBuilder1.getNullText());
      assertNotNull(strBuilder1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      
      StrBuilder strBuilder2 = strBuilder0.insert(0, "");
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertFalse(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder2.capacity());
      assertTrue(strBuilder2.isEmpty());
      assertEquals(0, strBuilder2.length());
      assertEquals(0, strBuilder2.size());
      assertFalse(strBuilder2.isNotEmpty());
      assertNull(strBuilder2.getNewLineText());
      assertNull(strBuilder2.getNullText());
      assertNotNull(strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      
      Integer integer0 = new Integer(115);
      assertNotNull(integer0);
      assertEquals(115, (int)integer0);
      assertFalse(integer0.equals((Object)int0));
      
      StrBuilder strBuilder3 = strBuilder2.append(charArray0);
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(5, strBuilder0.length());
      assertEquals(5, strBuilder0.size());
      assertEquals(32, strBuilder2.capacity());
      assertTrue(strBuilder2.isNotEmpty());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(5, strBuilder2.length());
      assertEquals(5, strBuilder2.size());
      assertNull(strBuilder2.getNewLineText());
      assertNull(strBuilder2.getNullText());
      assertEquals(5, strBuilder3.size());
      assertNull(strBuilder3.getNullText());
      assertTrue(strBuilder3.isNotEmpty());
      assertEquals(32, strBuilder3.capacity());
      assertNull(strBuilder3.getNewLineText());
      assertFalse(strBuilder3.isEmpty());
      assertEquals(5, strBuilder3.length());
      assertNotNull(strBuilder3);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(5, charArray0.length);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder3);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder2);
      
      int int1 = StrBuilder.CAPACITY;
      assertEquals(32, int1);
      assertFalse(int1 == int0);
      
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder3.new StrBuilderReader();
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(5, strBuilder0.length());
      assertEquals(5, strBuilder0.size());
      assertEquals(32, strBuilder2.capacity());
      assertTrue(strBuilder2.isNotEmpty());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(5, strBuilder2.length());
      assertEquals(5, strBuilder2.size());
      assertNull(strBuilder2.getNewLineText());
      assertNull(strBuilder2.getNullText());
      assertEquals(5, strBuilder3.size());
      assertNull(strBuilder3.getNullText());
      assertTrue(strBuilder3.isNotEmpty());
      assertEquals(32, strBuilder3.capacity());
      assertNull(strBuilder3.getNewLineText());
      assertFalse(strBuilder3.isEmpty());
      assertEquals(5, strBuilder3.length());
      assertTrue(strBuilder_StrBuilderReader0.ready());
      assertTrue(strBuilder_StrBuilderReader0.markSupported());
      assertNotNull(strBuilder_StrBuilderReader0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(5, charArray0.length);
      
      StrBuilder strBuilder4 = strBuilder2.replaceFirst("[ mNpyT*Q", ", Length: 0");
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(5, strBuilder0.length());
      assertEquals(5, strBuilder0.size());
      assertEquals(32, strBuilder2.capacity());
      assertTrue(strBuilder2.isNotEmpty());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(5, strBuilder2.length());
      assertEquals(5, strBuilder2.size());
      assertNull(strBuilder2.getNewLineText());
      assertNull(strBuilder2.getNullText());
      assertNull(strBuilder4.getNullText());
      assertFalse(strBuilder4.isEmpty());
      assertNull(strBuilder4.getNewLineText());
      assertEquals(5, strBuilder4.size());
      assertEquals(5, strBuilder4.length());
      assertTrue(strBuilder4.isNotEmpty());
      assertEquals(32, strBuilder4.capacity());
      assertNotNull(strBuilder4);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder3);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder4);
      assertSame(strBuilder4, strBuilder2);
      assertSame(strBuilder4, strBuilder3);
      assertSame(strBuilder4, strBuilder1);
      assertSame(strBuilder4, strBuilder0);
      
      StrBuilder strBuilder5 = strBuilder4.appendFixedWidthPadRight(146, (-474), '#');
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(5, strBuilder0.length());
      assertEquals(5, strBuilder0.size());
      assertEquals(32, strBuilder2.capacity());
      assertTrue(strBuilder2.isNotEmpty());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(5, strBuilder2.length());
      assertEquals(5, strBuilder2.size());
      assertNull(strBuilder2.getNewLineText());
      assertNull(strBuilder2.getNullText());
      assertNull(strBuilder4.getNullText());
      assertFalse(strBuilder4.isEmpty());
      assertNull(strBuilder4.getNewLineText());
      assertEquals(5, strBuilder4.size());
      assertEquals(5, strBuilder4.length());
      assertTrue(strBuilder4.isNotEmpty());
      assertEquals(32, strBuilder4.capacity());
      assertNull(strBuilder5.getNewLineText());
      assertTrue(strBuilder5.isNotEmpty());
      assertFalse(strBuilder5.isEmpty());
      assertNull(strBuilder5.getNullText());
      assertEquals(5, strBuilder5.size());
      assertEquals(5, strBuilder5.length());
      assertEquals(32, strBuilder5.capacity());
      assertNotNull(strBuilder5);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder3);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder5);
      assertSame(strBuilder2, strBuilder4);
      assertSame(strBuilder4, strBuilder2);
      assertSame(strBuilder4, strBuilder3);
      assertSame(strBuilder4, strBuilder5);
      assertSame(strBuilder4, strBuilder1);
      assertSame(strBuilder4, strBuilder0);
      assertSame(strBuilder5, strBuilder3);
      assertSame(strBuilder5, strBuilder1);
      assertSame(strBuilder5, strBuilder2);
      assertSame(strBuilder5, strBuilder0);
      assertSame(strBuilder5, strBuilder4);
      
      StrBuilder strBuilder6 = new StrBuilder(0);
      assertFalse(strBuilder6.isNotEmpty());
      assertEquals(0, strBuilder6.length());
      assertEquals(0, strBuilder6.size());
      assertNull(strBuilder6.getNullText());
      assertNull(strBuilder6.getNewLineText());
      assertEquals(32, strBuilder6.capacity());
      assertTrue(strBuilder6.isEmpty());
      assertNotNull(strBuilder6);
      assertFalse(strBuilder6.equals((Object)strBuilder4));
      assertFalse(strBuilder6.equals((Object)strBuilder0));
      assertFalse(strBuilder6.equals((Object)strBuilder1));
      assertFalse(strBuilder6.equals((Object)strBuilder5));
      assertFalse(strBuilder6.equals((Object)strBuilder2));
      assertFalse(strBuilder6.equals((Object)strBuilder3));
      
      StrBuilder strBuilder7 = strBuilder6.appendFixedWidthPadLeft((Object) strBuilder_StrBuilderReader0, 108, 'B');
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(5, strBuilder0.length());
      assertEquals(5, strBuilder0.size());
      assertEquals(32, strBuilder2.capacity());
      assertTrue(strBuilder2.isNotEmpty());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(5, strBuilder2.length());
      assertEquals(5, strBuilder2.size());
      assertNull(strBuilder2.getNewLineText());
      assertNull(strBuilder2.getNullText());
      assertEquals(5, strBuilder3.size());
      assertNull(strBuilder3.getNullText());
      assertTrue(strBuilder3.isNotEmpty());
      assertEquals(32, strBuilder3.capacity());
      assertNull(strBuilder3.getNewLineText());
      assertFalse(strBuilder3.isEmpty());
      assertEquals(5, strBuilder3.length());
      assertTrue(strBuilder_StrBuilderReader0.ready());
      assertTrue(strBuilder_StrBuilderReader0.markSupported());
      assertFalse(strBuilder6.isEmpty());
      assertEquals(216, strBuilder6.capacity());
      assertNull(strBuilder6.getNullText());
      assertNull(strBuilder6.getNewLineText());
      assertEquals(108, strBuilder6.length());
      assertEquals(108, strBuilder6.size());
      assertTrue(strBuilder6.isNotEmpty());
      assertNull(strBuilder7.getNewLineText());
      assertFalse(strBuilder7.isEmpty());
      assertEquals(108, strBuilder7.size());
      assertTrue(strBuilder7.isNotEmpty());
      assertEquals(108, strBuilder7.length());
      assertNull(strBuilder7.getNullText());
      assertEquals(216, strBuilder7.capacity());
      assertNotNull(strBuilder7);
      assertFalse(strBuilder0.equals((Object)strBuilder6));
      assertFalse(strBuilder2.equals((Object)strBuilder6));
      assertFalse(strBuilder3.equals((Object)strBuilder6));
      assertFalse(strBuilder6.equals((Object)strBuilder4));
      assertFalse(strBuilder6.equals((Object)strBuilder0));
      assertFalse(strBuilder6.equals((Object)strBuilder1));
      assertFalse(strBuilder6.equals((Object)strBuilder5));
      assertFalse(strBuilder6.equals((Object)strBuilder2));
      assertFalse(strBuilder6.equals((Object)strBuilder3));
      assertFalse(strBuilder7.equals((Object)strBuilder0));
      assertFalse(strBuilder7.equals((Object)strBuilder3));
      assertFalse(strBuilder7.equals((Object)strBuilder5));
      assertFalse(strBuilder7.equals((Object)strBuilder4));
      assertFalse(strBuilder7.equals((Object)strBuilder2));
      assertFalse(strBuilder7.equals((Object)strBuilder1));
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(5, charArray0.length);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder4);
      assertNotSame(strBuilder0, strBuilder7);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder2);
      assertNotSame(strBuilder0, strBuilder6);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder3);
      assertSame(strBuilder2, strBuilder5);
      assertNotSame(strBuilder2, strBuilder7);
      assertSame(strBuilder2, strBuilder4);
      assertNotSame(strBuilder2, strBuilder6);
      assertNotSame(strBuilder3, strBuilder7);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder4);
      assertSame(strBuilder3, strBuilder2);
      assertNotSame(strBuilder3, strBuilder6);
      assertSame(strBuilder3, strBuilder5);
      assertNotSame(strBuilder6, strBuilder4);
      assertNotSame(strBuilder6, strBuilder0);
      assertNotSame(strBuilder6, strBuilder1);
      assertSame(strBuilder6, strBuilder7);
      assertNotSame(strBuilder6, strBuilder5);
      assertNotSame(strBuilder6, strBuilder2);
      assertNotSame(strBuilder6, strBuilder3);
      assertNotSame(strBuilder7, strBuilder0);
      assertNotSame(strBuilder7, strBuilder3);
      assertNotSame(strBuilder7, strBuilder5);
      assertNotSame(strBuilder7, strBuilder4);
      assertNotSame(strBuilder7, strBuilder2);
      assertSame(strBuilder7, strBuilder6);
      assertNotSame(strBuilder7, strBuilder1);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      StrBuilder strBuilder0 = new StrBuilder("");
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertFalse(strBuilder0.isNotEmpty());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNotNull(strBuilder0);
      
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "-i!");
      assertFalse(boolean0);
      
      StrBuilder strBuilder1 = new StrBuilder(12);
      assertEquals(12, strBuilder1.capacity());
      assertFalse(strBuilder1.isNotEmpty());
      assertEquals(0, strBuilder1.length());
      assertEquals(0, strBuilder1.size());
      assertTrue(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertNotNull(strBuilder1);
      assertTrue(strBuilder1.equals((Object)strBuilder0));
      
      StrBuilder strBuilder2 = strBuilder1.replaceFirst('^', 'X');
      assertEquals(12, strBuilder1.capacity());
      assertFalse(strBuilder1.isNotEmpty());
      assertEquals(0, strBuilder1.length());
      assertEquals(0, strBuilder1.size());
      assertTrue(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertFalse(strBuilder2.isNotEmpty());
      assertEquals(0, strBuilder2.size());
      assertEquals(0, strBuilder2.length());
      assertNull(strBuilder2.getNullText());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(12, strBuilder2.capacity());
      assertTrue(strBuilder2.isEmpty());
      assertNotNull(strBuilder2);
      assertTrue(strBuilder1.equals((Object)strBuilder0));
      assertTrue(strBuilder2.equals((Object)strBuilder0));
      assertSame(strBuilder1, strBuilder2);
      assertNotSame(strBuilder1, strBuilder0);
      assertNotSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      
      StringBuffer stringBuffer0 = new StringBuffer("");
      assertEquals(0, stringBuffer0.length());
      assertEquals("", stringBuffer0.toString());
      assertNotNull(stringBuffer0);
      
      CharBuffer charBuffer0 = CharBuffer.allocate(12);
      assertEquals(12, charBuffer0.limit());
      assertTrue(charBuffer0.hasArray());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", charBuffer0.toString());
      assertEquals(12, charBuffer0.remaining());
      assertEquals(0, charBuffer0.arrayOffset());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(12, charBuffer0.length());
      assertEquals(12, charBuffer0.capacity());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.position());
      assertNotNull(charBuffer0);
      
      StrBuilder strBuilder3 = new StrBuilder();
      assertFalse(strBuilder3.isNotEmpty());
      assertEquals(0, strBuilder3.length());
      assertEquals(0, strBuilder3.size());
      assertEquals(32, strBuilder3.capacity());
      assertNull(strBuilder3.getNullText());
      assertTrue(strBuilder3.isEmpty());
      assertNull(strBuilder3.getNewLineText());
      assertNotNull(strBuilder3);
      assertTrue(strBuilder3.equals((Object)strBuilder2));
      assertTrue(strBuilder3.equals((Object)strBuilder0));
      assertTrue(strBuilder3.equals((Object)strBuilder1));
      
      CharBuffer charBuffer1 = CharBuffer.allocate(26);
      assertEquals(0, charBuffer1.position());
      assertEquals(26, charBuffer1.remaining());
      assertEquals(26, charBuffer1.capacity());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", charBuffer1.toString());
      assertEquals(0, charBuffer1.arrayOffset());
      assertFalse(charBuffer1.isDirect());
      assertTrue(charBuffer1.hasRemaining());
      assertTrue(charBuffer1.hasArray());
      assertFalse(charBuffer1.isReadOnly());
      assertEquals(26, charBuffer1.length());
      assertEquals(26, charBuffer1.limit());
      assertNotNull(charBuffer1);
      assertFalse(charBuffer1.equals((Object)charBuffer0));
      assertNotSame(charBuffer1, charBuffer0);
      
      int int0 = 2;
      // Undeclared exception!
      try { 
        strBuilder3.append(charBuffer1, 2, 1258);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // length must be valid
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertFalse(strBuilder0.isNotEmpty());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.appendFixedWidthPadLeft(202, 202, 'j');
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(404, strBuilder0.capacity());
      assertEquals(202, strBuilder0.length());
      assertEquals(202, strBuilder0.size());
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertTrue(strBuilder1.isNotEmpty());
      assertNull(strBuilder1.getNullText());
      assertEquals(202, strBuilder1.size());
      assertEquals(202, strBuilder1.length());
      assertEquals(404, strBuilder1.capacity());
      assertFalse(strBuilder1.isEmpty());
      assertNotNull(strBuilder1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      
      StrBuilder strBuilder2 = strBuilder1.append('j');
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(404, strBuilder0.capacity());
      assertEquals(203, strBuilder0.length());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(203, strBuilder0.size());
      assertNull(strBuilder1.getNewLineText());
      assertTrue(strBuilder1.isNotEmpty());
      assertEquals(203, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertEquals(203, strBuilder1.length());
      assertEquals(404, strBuilder1.capacity());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(203, strBuilder2.length());
      assertEquals(203, strBuilder2.size());
      assertNull(strBuilder2.getNewLineText());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(404, strBuilder2.capacity());
      assertTrue(strBuilder2.isNotEmpty());
      assertNull(strBuilder2.getNullText());
      assertNotNull(strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      
      StringBuilder stringBuilder0 = new StringBuilder();
      assertEquals("", stringBuilder0.toString());
      assertNotNull(stringBuilder0);
      
      StringBuilder stringBuilder1 = stringBuilder0.append("fGU* C!3;CHr:");
      assertEquals("fGU* C!3;CHr:", stringBuilder0.toString());
      assertEquals("fGU* C!3;CHr:", stringBuilder1.toString());
      assertNotNull(stringBuilder1);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder1, stringBuilder0);
      
      StringBuilder stringBuilder2 = stringBuilder1.deleteCharAt(1);
      assertEquals("fU* C!3;CHr:", stringBuilder0.toString());
      assertEquals("fU* C!3;CHr:", stringBuilder1.toString());
      assertEquals("fU* C!3;CHr:", stringBuilder2.toString());
      assertNotNull(stringBuilder2);
      assertSame(stringBuilder0, stringBuilder2);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder1, stringBuilder0);
      assertSame(stringBuilder1, stringBuilder2);
      assertSame(stringBuilder2, stringBuilder1);
      assertSame(stringBuilder2, stringBuilder0);
      
      StringBuilder stringBuilder3 = stringBuilder2.reverse();
      assertEquals(":rHC;3!C *Uf", stringBuilder0.toString());
      assertEquals(":rHC;3!C *Uf", stringBuilder1.toString());
      assertEquals(":rHC;3!C *Uf", stringBuilder2.toString());
      assertEquals(":rHC;3!C *Uf", stringBuilder3.toString());
      assertNotNull(stringBuilder3);
      assertSame(stringBuilder0, stringBuilder2);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder0, stringBuilder3);
      assertSame(stringBuilder1, stringBuilder3);
      assertSame(stringBuilder1, stringBuilder0);
      assertSame(stringBuilder1, stringBuilder2);
      assertSame(stringBuilder2, stringBuilder1);
      assertSame(stringBuilder2, stringBuilder3);
      assertSame(stringBuilder2, stringBuilder0);
      assertSame(stringBuilder3, stringBuilder2);
      assertSame(stringBuilder3, stringBuilder1);
      assertSame(stringBuilder3, stringBuilder0);
      
      StringBuilder stringBuilder4 = stringBuilder3.append((CharSequence) strBuilder0);
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(404, strBuilder0.capacity());
      assertEquals(203, strBuilder0.length());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(203, strBuilder0.size());
      assertNotNull(stringBuilder4);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(stringBuilder0, stringBuilder2);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder0, stringBuilder4);
      assertSame(stringBuilder0, stringBuilder3);
      assertSame(stringBuilder1, stringBuilder4);
      assertSame(stringBuilder1, stringBuilder3);
      assertSame(stringBuilder1, stringBuilder0);
      assertSame(stringBuilder1, stringBuilder2);
      assertSame(stringBuilder2, stringBuilder1);
      assertSame(stringBuilder2, stringBuilder3);
      assertSame(stringBuilder2, stringBuilder4);
      assertSame(stringBuilder2, stringBuilder0);
      assertSame(stringBuilder3, stringBuilder4);
      assertSame(stringBuilder3, stringBuilder2);
      assertSame(stringBuilder3, stringBuilder1);
      assertSame(stringBuilder3, stringBuilder0);
      assertSame(stringBuilder4, stringBuilder0);
      assertSame(stringBuilder4, stringBuilder1);
      assertSame(stringBuilder4, stringBuilder3);
      assertSame(stringBuilder4, stringBuilder2);
      
      // Undeclared exception!
      try { 
        strBuilder1.append(stringBuilder4, 202, 202);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // length must be valid
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(4);
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(4, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder0.isEmpty());
      assertFalse(strBuilder0.isNotEmpty());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = new StrBuilder();
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertTrue(strBuilder1.isEmpty());
      assertEquals(0, strBuilder1.length());
      assertEquals(0, strBuilder1.size());
      assertFalse(strBuilder1.isNotEmpty());
      assertNull(strBuilder1.getNullText());
      assertNotNull(strBuilder1);
      assertTrue(strBuilder1.equals((Object)strBuilder0));
      
      StrBuilder strBuilder2 = new StrBuilder();
      assertNull(strBuilder2.getNullText());
      assertEquals(0, strBuilder2.length());
      assertEquals(0, strBuilder2.size());
      assertFalse(strBuilder2.isNotEmpty());
      assertTrue(strBuilder2.isEmpty());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(32, strBuilder2.capacity());
      assertNotNull(strBuilder2);
      assertTrue(strBuilder2.equals((Object)strBuilder0));
      assertTrue(strBuilder2.equals((Object)strBuilder1));
      
      StrBuilder strBuilder3 = new StrBuilder();
      assertEquals(0, strBuilder3.length());
      assertEquals(0, strBuilder3.size());
      assertNull(strBuilder3.getNullText());
      assertFalse(strBuilder3.isNotEmpty());
      assertNull(strBuilder3.getNewLineText());
      assertEquals(32, strBuilder3.capacity());
      assertTrue(strBuilder3.isEmpty());
      assertNotNull(strBuilder3);
      assertTrue(strBuilder3.equals((Object)strBuilder0));
      assertTrue(strBuilder3.equals((Object)strBuilder2));
      assertTrue(strBuilder3.equals((Object)strBuilder1));
      
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "<[O:TmT0");
      assertFalse(boolean0);
      
      StrBuilder strBuilder4 = strBuilder2.replaceFirst('X', '7');
      assertNull(strBuilder2.getNullText());
      assertEquals(0, strBuilder2.length());
      assertEquals(0, strBuilder2.size());
      assertFalse(strBuilder2.isNotEmpty());
      assertTrue(strBuilder2.isEmpty());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(32, strBuilder2.capacity());
      assertEquals(0, strBuilder4.size());
      assertEquals(0, strBuilder4.length());
      assertNull(strBuilder4.getNullText());
      assertFalse(strBuilder4.isNotEmpty());
      assertEquals(32, strBuilder4.capacity());
      assertTrue(strBuilder4.isEmpty());
      assertNull(strBuilder4.getNewLineText());
      assertNotNull(strBuilder4);
      assertTrue(strBuilder2.equals((Object)strBuilder3));
      assertTrue(strBuilder2.equals((Object)strBuilder0));
      assertTrue(strBuilder2.equals((Object)strBuilder1));
      assertTrue(strBuilder4.equals((Object)strBuilder3));
      assertTrue(strBuilder4.equals((Object)strBuilder0));
      assertTrue(strBuilder4.equals((Object)strBuilder1));
      assertSame(strBuilder2, strBuilder4);
      assertNotSame(strBuilder2, strBuilder1);
      assertNotSame(strBuilder2, strBuilder3);
      assertNotSame(strBuilder2, strBuilder0);
      assertNotSame(strBuilder4, strBuilder3);
      assertNotSame(strBuilder4, strBuilder0);
      assertSame(strBuilder4, strBuilder2);
      assertNotSame(strBuilder4, strBuilder1);
      
      StringBuffer stringBuffer0 = new StringBuffer("zkJ5R{");
      assertEquals(6, stringBuffer0.length());
      assertEquals("zkJ5R{", stringBuffer0.toString());
      assertNotNull(stringBuffer0);
      
      CharBuffer charBuffer0 = CharBuffer.allocate(4);
      assertEquals(4, charBuffer0.length());
      assertEquals(0, charBuffer0.position());
      assertEquals("\u0000\u0000\u0000\u0000", charBuffer0.toString());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(4, charBuffer0.capacity());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(4, charBuffer0.limit());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(4, charBuffer0.remaining());
      assertTrue(charBuffer0.hasArray());
      assertNotNull(charBuffer0);
      
      StrBuilder strBuilder5 = new StrBuilder("-i!");
      assertTrue(strBuilder5.isNotEmpty());
      assertNull(strBuilder5.getNullText());
      assertNull(strBuilder5.getNewLineText());
      assertEquals(3, strBuilder5.size());
      assertFalse(strBuilder5.isEmpty());
      assertEquals(3, strBuilder5.length());
      assertEquals(35, strBuilder5.capacity());
      assertNotNull(strBuilder5);
      assertFalse(strBuilder5.equals((Object)strBuilder0));
      assertFalse(strBuilder5.equals((Object)strBuilder2));
      assertFalse(strBuilder5.equals((Object)strBuilder4));
      assertFalse(strBuilder5.equals((Object)strBuilder1));
      assertFalse(strBuilder5.equals((Object)strBuilder3));
      
      char[] charArray0 = new char[2];
      charArray0[0] = '7';
      charArray0[1] = '7';
      CharBuffer charBuffer1 = CharBuffer.wrap(charArray0);
      assertFalse(charBuffer1.isDirect());
      assertEquals(2, charBuffer1.length());
      assertEquals("77", charBuffer1.toString());
      assertTrue(charBuffer1.hasArray());
      assertFalse(charBuffer1.isReadOnly());
      assertEquals(2, charBuffer1.remaining());
      assertTrue(charBuffer1.hasRemaining());
      assertEquals(0, charBuffer1.position());
      assertEquals(2, charBuffer1.capacity());
      assertEquals(0, charBuffer1.arrayOffset());
      assertEquals(2, charBuffer1.limit());
      assertNotNull(charBuffer1);
      assertFalse(charBuffer1.equals((Object)charBuffer0));
      assertArrayEquals(new char[] {'7', '7'}, charArray0);
      assertEquals(2, charArray0.length);
      assertNotSame(charBuffer1, charBuffer0);
      
      // Undeclared exception!
      try { 
        strBuilder5.append(charBuffer1, 62, (-1));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // startIndex must be valid
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertTrue(strBuilder0.isEmpty());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.replaceFirst('V', 'F');
      assertTrue(strBuilder0.isEmpty());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertEquals(0, strBuilder1.length());
      assertFalse(strBuilder1.isNotEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertTrue(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertNotNull(strBuilder1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      
      StringBuffer stringBuffer0 = new StringBuffer("rmou<QIp");
      assertEquals("rmou<QIp", stringBuffer0.toString());
      assertEquals(8, stringBuffer0.length());
      assertNotNull(stringBuffer0);
      
      CharBuffer charBuffer0 = CharBuffer.allocate(62);
      assertTrue(charBuffer0.hasRemaining());
      assertTrue(charBuffer0.hasArray());
      assertFalse(charBuffer0.isDirect());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(62, charBuffer0.remaining());
      assertEquals(62, charBuffer0.capacity());
      assertEquals(62, charBuffer0.length());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(0, charBuffer0.position());
      assertEquals(62, charBuffer0.limit());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", charBuffer0.toString());
      assertNotNull(charBuffer0);
      
      // Undeclared exception!
      try { 
        strBuilder1.append(charBuffer0, (int) 'V', 116);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // startIndex must be valid
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNotNull(strBuilder0);
      
      StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer0 = strBuilder0.new StrBuilderTokenizer();
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull());
      assertTrue(strBuilder_StrBuilderTokenizer0.isIgnoreEmptyTokens());
      assertEquals(0, strBuilder_StrBuilderTokenizer0.nextIndex());
      assertEquals((-1), strBuilder_StrBuilderTokenizer0.previousIndex());
      assertNotNull(strBuilder_StrBuilderTokenizer0);
      
      StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer1 = (StrBuilder.StrBuilderTokenizer)strBuilder_StrBuilderTokenizer0.cloneReset();
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull());
      assertTrue(strBuilder_StrBuilderTokenizer0.isIgnoreEmptyTokens());
      assertEquals(0, strBuilder_StrBuilderTokenizer0.nextIndex());
      assertEquals((-1), strBuilder_StrBuilderTokenizer0.previousIndex());
      assertEquals((-1), strBuilder_StrBuilderTokenizer1.previousIndex());
      assertEquals(0, strBuilder_StrBuilderTokenizer1.nextIndex());
      assertFalse(strBuilder_StrBuilderTokenizer1.isEmptyTokenAsNull());
      assertTrue(strBuilder_StrBuilderTokenizer1.isIgnoreEmptyTokens());
      assertNotNull(strBuilder_StrBuilderTokenizer1);
      assertFalse(strBuilder_StrBuilderTokenizer1.equals((Object)strBuilder_StrBuilderTokenizer0));
      assertNotSame(strBuilder_StrBuilderTokenizer0, strBuilder_StrBuilderTokenizer1);
      assertNotSame(strBuilder_StrBuilderTokenizer1, strBuilder_StrBuilderTokenizer0);
      
      char[] charArray0 = new char[5];
      charArray0[0] = '^';
      charArray0[1] = 'X';
      StrBuilder strBuilder1 = new StrBuilder();
      assertEquals(32, strBuilder1.capacity());
      assertTrue(strBuilder1.isEmpty());
      assertEquals(0, strBuilder1.length());
      assertEquals(0, strBuilder1.size());
      assertFalse(strBuilder1.isNotEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertNotNull(strBuilder1);
      assertTrue(strBuilder1.equals((Object)strBuilder0));
      
      boolean boolean0 = strBuilder1.equalsIgnoreCase(strBuilder0);
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder1.capacity());
      assertTrue(strBuilder1.isEmpty());
      assertEquals(0, strBuilder1.length());
      assertEquals(0, strBuilder1.size());
      assertFalse(strBuilder1.isNotEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertTrue(boolean0);
      assertTrue(strBuilder0.equals((Object)strBuilder1));
      assertTrue(strBuilder1.equals((Object)strBuilder0));
      assertNotSame(strBuilder0, strBuilder1);
      assertNotSame(strBuilder1, strBuilder0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertFalse(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.appendSeparator("', has a length less than 2", "', has a length less than 2");
      assertFalse(strBuilder0.isEmpty());
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(27, strBuilder0.length());
      assertEquals(27, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(27, strBuilder1.length());
      assertEquals(27, strBuilder1.size());
      assertTrue(strBuilder1.isNotEmpty());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertFalse(strBuilder1.isEmpty());
      assertNotNull(strBuilder1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      
      StrBuilder strBuilder2 = strBuilder0.appendPadding(0, 'Q');
      assertFalse(strBuilder0.isEmpty());
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(27, strBuilder0.length());
      assertEquals(27, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder2.isNotEmpty());
      assertNull(strBuilder2.getNewLineText());
      assertNull(strBuilder2.getNullText());
      assertEquals(32, strBuilder2.capacity());
      assertEquals(27, strBuilder2.length());
      assertEquals(27, strBuilder2.size());
      assertFalse(strBuilder2.isEmpty());
      assertNotNull(strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      
      int int0 = StrBuilder.CAPACITY;
      assertEquals(32, int0);
      
      StrBuilder strBuilder3 = strBuilder1.trim();
      assertFalse(strBuilder0.isEmpty());
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(27, strBuilder0.length());
      assertEquals(27, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(27, strBuilder1.length());
      assertEquals(27, strBuilder1.size());
      assertTrue(strBuilder1.isNotEmpty());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(32, strBuilder3.capacity());
      assertEquals(27, strBuilder3.length());
      assertEquals(27, strBuilder3.size());
      assertFalse(strBuilder3.isEmpty());
      assertTrue(strBuilder3.isNotEmpty());
      assertNull(strBuilder3.getNullText());
      assertNull(strBuilder3.getNewLineText());
      assertNotNull(strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder2);
      assertSame(strBuilder3, strBuilder1);
      
      String string0 = strBuilder2.rightString((-3106));
      assertFalse(strBuilder0.isEmpty());
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(27, strBuilder0.length());
      assertEquals(27, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder2.isNotEmpty());
      assertNull(strBuilder2.getNewLineText());
      assertNull(strBuilder2.getNullText());
      assertEquals(32, strBuilder2.capacity());
      assertEquals(27, strBuilder2.length());
      assertEquals(27, strBuilder2.size());
      assertFalse(strBuilder2.isEmpty());
      assertNotNull(string0);
      assertEquals("", string0);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder3);
      assertSame(strBuilder2, strBuilder1);
      
      int int1 = StrBuilder.CAPACITY;
      assertEquals(32, int1);
      assertTrue(int1 == int0);
      
      StrBuilder strBuilder4 = strBuilder1.appendSeparator("", 32);
      assertFalse(strBuilder0.isEmpty());
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(27, strBuilder0.length());
      assertEquals(27, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(27, strBuilder1.length());
      assertEquals(27, strBuilder1.size());
      assertTrue(strBuilder1.isNotEmpty());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(32, strBuilder4.capacity());
      assertFalse(strBuilder4.isEmpty());
      assertNull(strBuilder4.getNullText());
      assertTrue(strBuilder4.isNotEmpty());
      assertNull(strBuilder4.getNewLineText());
      assertEquals(27, strBuilder4.size());
      assertEquals(27, strBuilder4.length());
      assertNotNull(strBuilder4);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder4);
      assertSame(strBuilder4, strBuilder1);
      assertSame(strBuilder4, strBuilder3);
      assertSame(strBuilder4, strBuilder0);
      assertSame(strBuilder4, strBuilder2);
      
      boolean boolean0 = strBuilder4.endsWith("");
      assertFalse(strBuilder0.isEmpty());
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(27, strBuilder0.length());
      assertEquals(27, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(27, strBuilder1.length());
      assertEquals(27, strBuilder1.size());
      assertTrue(strBuilder1.isNotEmpty());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(32, strBuilder4.capacity());
      assertFalse(strBuilder4.isEmpty());
      assertNull(strBuilder4.getNullText());
      assertTrue(strBuilder4.isNotEmpty());
      assertNull(strBuilder4.getNewLineText());
      assertEquals(27, strBuilder4.size());
      assertEquals(27, strBuilder4.length());
      assertTrue(boolean0);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder4);
      assertSame(strBuilder4, strBuilder1);
      assertSame(strBuilder4, strBuilder3);
      assertSame(strBuilder4, strBuilder0);
      assertSame(strBuilder4, strBuilder2);
      
      CharBuffer charBuffer0 = CharBuffer.allocate(115);
      assertTrue(charBuffer0.hasArray());
      assertEquals(115, charBuffer0.length());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", charBuffer0.toString());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(115, charBuffer0.capacity());
      assertEquals(115, charBuffer0.limit());
      assertEquals(115, charBuffer0.remaining());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.isDirect());
      assertFalse(charBuffer0.isReadOnly());
      assertNotNull(charBuffer0);
      
      char[] charArray0 = new char[8];
      charArray0[0] = 'Q';
      charArray0[1] = 'Q';
      charArray0[2] = ',';
      charArray0[3] = 'Q';
      charArray0[4] = 'Q';
      charArray0[5] = 'Q';
      charArray0[6] = 'Q';
      charArray0[7] = 'Q';
      CharBuffer charBuffer1 = CharBuffer.wrap(charArray0);
      assertEquals(0, charBuffer1.position());
      assertFalse(charBuffer1.isReadOnly());
      assertFalse(charBuffer1.isDirect());
      assertTrue(charBuffer1.hasRemaining());
      assertTrue(charBuffer1.hasArray());
      assertEquals(8, charBuffer1.remaining());
      assertEquals(8, charBuffer1.capacity());
      assertEquals(8, charBuffer1.limit());
      assertEquals("QQ,QQQQQ", charBuffer1.toString());
      assertEquals(0, charBuffer1.arrayOffset());
      assertEquals(8, charBuffer1.length());
      assertNotNull(charBuffer1);
      assertFalse(charBuffer1.equals((Object)charBuffer0));
      assertArrayEquals(new char[] {'Q', 'Q', ',', 'Q', 'Q', 'Q', 'Q', 'Q'}, charArray0);
      assertEquals(8, charArray0.length);
      assertNotSame(charBuffer1, charBuffer0);
      
      int int2 = charBuffer1.read(charBuffer0);
      assertEquals(0, charBuffer1.remaining());
      assertFalse(charBuffer1.hasRemaining());
      assertEquals(0, charBuffer1.length());
      assertFalse(charBuffer1.isReadOnly());
      assertFalse(charBuffer1.isDirect());
      assertTrue(charBuffer1.hasArray());
      assertEquals(8, charBuffer1.capacity());
      assertEquals(8, charBuffer1.limit());
      assertEquals("", charBuffer1.toString());
      assertEquals(8, charBuffer1.position());
      assertEquals(0, charBuffer1.arrayOffset());
      assertTrue(charBuffer0.hasArray());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", charBuffer0.toString());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(107, charBuffer0.remaining());
      assertEquals(8, charBuffer0.position());
      assertEquals(115, charBuffer0.capacity());
      assertEquals(115, charBuffer0.limit());
      assertEquals(107, charBuffer0.length());
      assertFalse(charBuffer0.isDirect());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(8, int2);
      assertFalse(charBuffer1.equals((Object)charBuffer0));
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertFalse(charBuffer0.equals((Object)charBuffer1));
      assertArrayEquals(new char[] {'Q', 'Q', ',', 'Q', 'Q', 'Q', 'Q', 'Q'}, charArray0);
      assertEquals(8, charArray0.length);
      assertNotSame(charBuffer1, charBuffer0);
      assertNotSame(charBuffer0, charBuffer1);
      
      StrBuilder strBuilder5 = strBuilder4.append(charBuffer1);
      assertFalse(strBuilder0.isEmpty());
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(27, strBuilder0.length());
      assertEquals(27, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(27, strBuilder1.length());
      assertEquals(27, strBuilder1.size());
      assertTrue(strBuilder1.isNotEmpty());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(0, charBuffer1.remaining());
      assertFalse(charBuffer1.hasRemaining());
      assertEquals(0, charBuffer1.length());
      assertFalse(charBuffer1.isReadOnly());
      assertFalse(charBuffer1.isDirect());
      assertTrue(charBuffer1.hasArray());
      assertEquals(8, charBuffer1.capacity());
      assertEquals(8, charBuffer1.limit());
      assertEquals("", charBuffer1.toString());
      assertEquals(8, charBuffer1.position());
      assertEquals(0, charBuffer1.arrayOffset());
      assertTrue(strBuilder5.isNotEmpty());
      assertNull(strBuilder5.getNullText());
      assertEquals(27, strBuilder5.length());
      assertNull(strBuilder5.getNewLineText());
      assertEquals(32, strBuilder5.capacity());
      assertEquals(27, strBuilder5.size());
      assertFalse(strBuilder5.isEmpty());
      assertEquals(32, strBuilder4.capacity());
      assertFalse(strBuilder4.isEmpty());
      assertNull(strBuilder4.getNullText());
      assertTrue(strBuilder4.isNotEmpty());
      assertNull(strBuilder4.getNewLineText());
      assertEquals(27, strBuilder4.size());
      assertEquals(27, strBuilder4.length());
      assertNotNull(strBuilder5);
      assertFalse(charBuffer1.equals((Object)charBuffer0));
      assertArrayEquals(new char[] {'Q', 'Q', ',', 'Q', 'Q', 'Q', 'Q', 'Q'}, charArray0);
      assertEquals(8, charArray0.length);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder1, strBuilder5);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder4);
      assertNotSame(charBuffer1, charBuffer0);
      assertSame(strBuilder5, strBuilder4);
      assertSame(strBuilder5, strBuilder0);
      assertSame(strBuilder5, strBuilder2);
      assertSame(strBuilder5, strBuilder3);
      assertSame(strBuilder5, strBuilder1);
      assertSame(strBuilder4, strBuilder5);
      assertSame(strBuilder4, strBuilder1);
      assertSame(strBuilder4, strBuilder3);
      assertSame(strBuilder4, strBuilder0);
      assertSame(strBuilder4, strBuilder2);
      
      StringReader stringReader0 = new StringReader("");
      assertNotNull(stringReader0);
      
      StrBuilder strBuilder6 = new StrBuilder();
      assertTrue(strBuilder6.isEmpty());
      assertNull(strBuilder6.getNullText());
      assertNull(strBuilder6.getNewLineText());
      assertEquals(32, strBuilder6.capacity());
      assertFalse(strBuilder6.isNotEmpty());
      assertEquals(0, strBuilder6.length());
      assertEquals(0, strBuilder6.size());
      assertNotNull(strBuilder6);
      assertFalse(strBuilder6.equals((Object)strBuilder4));
      assertFalse(strBuilder6.equals((Object)strBuilder0));
      assertFalse(strBuilder6.equals((Object)strBuilder2));
      assertFalse(strBuilder6.equals((Object)strBuilder5));
      assertFalse(strBuilder6.equals((Object)strBuilder1));
      assertFalse(strBuilder6.equals((Object)strBuilder3));
      
      // Undeclared exception!
      try { 
        strBuilder6.insert(1366, (Object) null);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 1366
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      int int0 = (-264);
      StrBuilder strBuilder0 = new StrBuilder((-264));
      assertTrue(strBuilder0.isEmpty());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNotNull(strBuilder0);
      
      // Undeclared exception!
      try { 
        strBuilder0.insert((-264), (Object) null);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -264
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(0);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertFalse(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNullText());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.appendSeparator("', has a length less than 2", "', has a length less than 2");
      assertEquals(27, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(27, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder1.getNullText());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertTrue(strBuilder1.isNotEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(27, strBuilder1.size());
      assertEquals(27, strBuilder1.length());
      assertNotNull(strBuilder1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      
      StrBuilder strBuilder2 = strBuilder0.appendPadding(0, 'Q');
      assertEquals(27, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(27, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder2.getNullText());
      assertFalse(strBuilder2.isEmpty());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(27, strBuilder2.size());
      assertEquals(27, strBuilder2.length());
      assertTrue(strBuilder2.isNotEmpty());
      assertEquals(32, strBuilder2.capacity());
      assertNotNull(strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      
      StrBuilder strBuilder3 = strBuilder2.append((float) 1);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(30, strBuilder0.length());
      assertEquals(30, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder2.getNullText());
      assertEquals(30, strBuilder2.size());
      assertFalse(strBuilder2.isEmpty());
      assertNull(strBuilder2.getNewLineText());
      assertTrue(strBuilder2.isNotEmpty());
      assertEquals(30, strBuilder2.length());
      assertEquals(32, strBuilder2.capacity());
      assertEquals(30, strBuilder3.size());
      assertEquals(30, strBuilder3.length());
      assertFalse(strBuilder3.isEmpty());
      assertEquals(32, strBuilder3.capacity());
      assertNull(strBuilder3.getNewLineText());
      assertTrue(strBuilder3.isNotEmpty());
      assertNull(strBuilder3.getNullText());
      assertNotNull(strBuilder3);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder3);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder2);
      
      boolean boolean0 = strBuilder0.contains(';');
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(30, strBuilder0.length());
      assertEquals(30, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertFalse(boolean0);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      StrBuilder strBuilder4 = new StrBuilder("org.apache.commons.lang3.text.StrBuilder$StrBuilderReader");
      assertEquals(57, strBuilder4.size());
      assertTrue(strBuilder4.isNotEmpty());
      assertNull(strBuilder4.getNewLineText());
      assertEquals(57, strBuilder4.length());
      assertNull(strBuilder4.getNullText());
      assertEquals(89, strBuilder4.capacity());
      assertFalse(strBuilder4.isEmpty());
      assertNotNull(strBuilder4);
      assertFalse(strBuilder4.equals((Object)strBuilder0));
      assertFalse(strBuilder4.equals((Object)strBuilder2));
      assertFalse(strBuilder4.equals((Object)strBuilder3));
      assertFalse(strBuilder4.equals((Object)strBuilder1));
      
      StrBuilder strBuilder5 = new StrBuilder();
      assertNull(strBuilder5.getNewLineText());
      assertNull(strBuilder5.getNullText());
      assertFalse(strBuilder5.isNotEmpty());
      assertTrue(strBuilder5.isEmpty());
      assertEquals(32, strBuilder5.capacity());
      assertEquals(0, strBuilder5.size());
      assertEquals(0, strBuilder5.length());
      assertNotNull(strBuilder5);
      assertFalse(strBuilder5.equals((Object)strBuilder3));
      assertFalse(strBuilder5.equals((Object)strBuilder0));
      assertFalse(strBuilder5.equals((Object)strBuilder1));
      assertFalse(strBuilder5.equals((Object)strBuilder4));
      assertFalse(strBuilder5.equals((Object)strBuilder2));
      
      StringBuilder stringBuilder0 = new StringBuilder("nL#Oq%JeZ |dV");
      assertEquals("nL#Oq%JeZ |dV", stringBuilder0.toString());
      assertNotNull(stringBuilder0);
      
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "org.apache.commons.lang3.text.StrBuilder$StrBuilderReader");
      assertEquals("org.apache.commons.lang3.text.StrBuilder$StrBuilderReader", stringBuffer0.toString());
      assertEquals(57, stringBuffer0.length());
      assertNotNull(stringBuffer0);
      
      StrBuilder strBuilder6 = strBuilder0.appendFixedWidthPadLeft((Object) null, 1, '*');
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(31, strBuilder0.size());
      assertEquals(31, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder6.capacity());
      assertEquals(31, strBuilder6.length());
      assertNull(strBuilder6.getNullText());
      assertEquals(31, strBuilder6.size());
      assertTrue(strBuilder6.isNotEmpty());
      assertFalse(strBuilder6.isEmpty());
      assertNull(strBuilder6.getNewLineText());
      assertNotNull(strBuilder6);
      assertFalse(strBuilder0.equals((Object)strBuilder5));
      assertFalse(strBuilder0.equals((Object)strBuilder4));
      assertFalse(strBuilder6.equals((Object)strBuilder4));
      assertFalse(strBuilder6.equals((Object)strBuilder5));
      assertNotSame(strBuilder0, strBuilder5);
      assertNotSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder6);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertNotSame(strBuilder6, strBuilder4);
      assertNotSame(strBuilder6, strBuilder5);
      assertSame(strBuilder6, strBuilder3);
      assertSame(strBuilder6, strBuilder1);
      assertSame(strBuilder6, strBuilder2);
      assertSame(strBuilder6, strBuilder0);
      
      StrBuilder strBuilder7 = strBuilder1.appendln(0.0);
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(68, strBuilder0.capacity());
      assertEquals(35, strBuilder0.size());
      assertEquals(35, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder1.getNullText());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(68, strBuilder1.capacity());
      assertEquals(35, strBuilder1.size());
      assertEquals(35, strBuilder1.length());
      assertTrue(strBuilder1.isNotEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertTrue(strBuilder7.isNotEmpty());
      assertFalse(strBuilder7.isEmpty());
      assertNull(strBuilder7.getNewLineText());
      assertEquals(68, strBuilder7.capacity());
      assertNull(strBuilder7.getNullText());
      assertEquals(35, strBuilder7.size());
      assertEquals(35, strBuilder7.length());
      assertNotNull(strBuilder7);
      assertFalse(strBuilder0.equals((Object)strBuilder5));
      assertFalse(strBuilder0.equals((Object)strBuilder4));
      assertFalse(strBuilder1.equals((Object)strBuilder5));
      assertFalse(strBuilder1.equals((Object)strBuilder4));
      assertFalse(strBuilder7.equals((Object)strBuilder5));
      assertFalse(strBuilder7.equals((Object)strBuilder4));
      assertNotSame(strBuilder0, strBuilder5);
      assertNotSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder6);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder7);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder7);
      assertNotSame(strBuilder1, strBuilder5);
      assertNotSame(strBuilder1, strBuilder4);
      assertSame(strBuilder1, strBuilder6);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder2);
      assertNotSame(strBuilder7, strBuilder5);
      assertSame(strBuilder7, strBuilder3);
      assertSame(strBuilder7, strBuilder1);
      assertSame(strBuilder7, strBuilder0);
      assertSame(strBuilder7, strBuilder2);
      assertNotSame(strBuilder7, strBuilder4);
      assertSame(strBuilder7, strBuilder6);
      
      StrBuilder strBuilder8 = new StrBuilder();
      assertNull(strBuilder8.getNullText());
      assertNull(strBuilder8.getNewLineText());
      assertEquals(32, strBuilder8.capacity());
      assertEquals(0, strBuilder8.size());
      assertEquals(0, strBuilder8.length());
      assertTrue(strBuilder8.isEmpty());
      assertFalse(strBuilder8.isNotEmpty());
      assertNotNull(strBuilder8);
      assertFalse(strBuilder8.equals((Object)strBuilder0));
      assertFalse(strBuilder8.equals((Object)strBuilder3));
      assertFalse(strBuilder8.equals((Object)strBuilder4));
      assertFalse(strBuilder8.equals((Object)strBuilder2));
      assertTrue(strBuilder8.equals((Object)strBuilder5));
      assertFalse(strBuilder8.equals((Object)strBuilder7));
      assertFalse(strBuilder8.equals((Object)strBuilder1));
      assertFalse(strBuilder8.equals((Object)strBuilder6));
      
      StrBuilder strBuilder9 = strBuilder0.appendFixedWidthPadRight(0, 813, '/');
      assertEquals(1696, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(848, strBuilder0.size());
      assertEquals(848, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(1696, strBuilder9.capacity());
      assertTrue(strBuilder9.isNotEmpty());
      assertNull(strBuilder9.getNewLineText());
      assertFalse(strBuilder9.isEmpty());
      assertNull(strBuilder9.getNullText());
      assertEquals(848, strBuilder9.length());
      assertEquals(848, strBuilder9.size());
      assertNotNull(strBuilder9);
      assertFalse(strBuilder0.equals((Object)strBuilder5));
      assertFalse(strBuilder0.equals((Object)strBuilder4));
      assertFalse(strBuilder0.equals((Object)strBuilder8));
      assertFalse(strBuilder9.equals((Object)strBuilder8));
      assertFalse(strBuilder9.equals((Object)strBuilder4));
      assertFalse(strBuilder9.equals((Object)strBuilder5));
      assertNotSame(strBuilder0, strBuilder5);
      assertNotSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder6);
      assertNotSame(strBuilder0, strBuilder8);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder7);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder9);
      assertSame(strBuilder9, strBuilder0);
      assertSame(strBuilder9, strBuilder3);
      assertSame(strBuilder9, strBuilder2);
      assertSame(strBuilder9, strBuilder1);
      assertNotSame(strBuilder9, strBuilder8);
      assertSame(strBuilder9, strBuilder6);
      assertNotSame(strBuilder9, strBuilder4);
      assertNotSame(strBuilder9, strBuilder5);
      assertSame(strBuilder9, strBuilder7);
      
      StrBuilder strBuilder10 = strBuilder9.deleteCharAt(1);
      assertEquals(1696, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(847, strBuilder0.length());
      assertEquals(847, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(1696, strBuilder9.capacity());
      assertTrue(strBuilder9.isNotEmpty());
      assertNull(strBuilder9.getNewLineText());
      assertFalse(strBuilder9.isEmpty());
      assertNull(strBuilder9.getNullText());
      assertEquals(847, strBuilder9.length());
      assertEquals(847, strBuilder9.size());
      assertEquals(1696, strBuilder10.capacity());
      assertEquals(847, strBuilder10.size());
      assertNull(strBuilder10.getNullText());
      assertEquals(847, strBuilder10.length());
      assertTrue(strBuilder10.isNotEmpty());
      assertFalse(strBuilder10.isEmpty());
      assertNull(strBuilder10.getNewLineText());
      assertNotNull(strBuilder10);
      assertFalse(strBuilder0.equals((Object)strBuilder5));
      assertFalse(strBuilder0.equals((Object)strBuilder4));
      assertFalse(strBuilder0.equals((Object)strBuilder8));
      assertFalse(strBuilder9.equals((Object)strBuilder8));
      assertFalse(strBuilder9.equals((Object)strBuilder4));
      assertFalse(strBuilder9.equals((Object)strBuilder5));
      assertFalse(strBuilder10.equals((Object)strBuilder4));
      assertFalse(strBuilder10.equals((Object)strBuilder8));
      assertFalse(strBuilder10.equals((Object)strBuilder5));
      assertNotSame(strBuilder0, strBuilder5);
      assertNotSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder6);
      assertSame(strBuilder0, strBuilder10);
      assertNotSame(strBuilder0, strBuilder8);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder7);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder9);
      assertSame(strBuilder9, strBuilder0);
      assertSame(strBuilder9, strBuilder3);
      assertSame(strBuilder9, strBuilder2);
      assertSame(strBuilder9, strBuilder1);
      assertNotSame(strBuilder9, strBuilder8);
      assertSame(strBuilder9, strBuilder6);
      assertNotSame(strBuilder9, strBuilder4);
      assertNotSame(strBuilder9, strBuilder5);
      assertSame(strBuilder9, strBuilder10);
      assertSame(strBuilder9, strBuilder7);
      assertSame(strBuilder10, strBuilder9);
      assertNotSame(strBuilder10, strBuilder4);
      assertSame(strBuilder10, strBuilder1);
      assertSame(strBuilder10, strBuilder3);
      assertSame(strBuilder10, strBuilder7);
      assertSame(strBuilder10, strBuilder2);
      assertSame(strBuilder10, strBuilder0);
      assertSame(strBuilder10, strBuilder6);
      assertNotSame(strBuilder10, strBuilder8);
      assertNotSame(strBuilder10, strBuilder5);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertFalse(strBuilder0.isNotEmpty());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.append((Object) null);
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertFalse(strBuilder0.isNotEmpty());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder1.size());
      assertFalse(strBuilder1.isNotEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(0, strBuilder1.length());
      assertEquals(32, strBuilder1.capacity());
      assertTrue(strBuilder1.isEmpty());
      assertNotNull(strBuilder1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      
      StrBuilder strBuilder2 = strBuilder0.append("remove() is unsupported");
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(23, strBuilder0.length());
      assertEquals(23, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(23, strBuilder2.size());
      assertNull(strBuilder2.getNewLineText());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(23, strBuilder2.length());
      assertNull(strBuilder2.getNullText());
      assertTrue(strBuilder2.isNotEmpty());
      assertEquals(32, strBuilder2.capacity());
      assertNotNull(strBuilder2);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder1.new StrBuilderReader();
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(23, strBuilder0.length());
      assertEquals(23, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(23, strBuilder1.size());
      assertEquals(23, strBuilder1.length());
      assertTrue(strBuilder1.isNotEmpty());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(32, strBuilder1.capacity());
      assertTrue(strBuilder_StrBuilderReader0.markSupported());
      assertTrue(strBuilder_StrBuilderReader0.ready());
      assertNotNull(strBuilder_StrBuilderReader0);
      
      char[] charArray0 = new char[3];
      charArray0[0] = 'D';
      charArray0[1] = 'v';
      charArray0[2] = '8';
      int int0 = strBuilder_StrBuilderReader0.read(charArray0);
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(23, strBuilder0.length());
      assertEquals(23, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(23, strBuilder1.size());
      assertEquals(23, strBuilder1.length());
      assertTrue(strBuilder1.isNotEmpty());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(32, strBuilder1.capacity());
      assertTrue(strBuilder_StrBuilderReader0.markSupported());
      assertTrue(strBuilder_StrBuilderReader0.ready());
      assertEquals(3, int0);
      assertArrayEquals(new char[] {'r', 'e', 'm'}, charArray0);
      assertEquals(3, charArray0.length);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      
      int int1 = strBuilder_StrBuilderReader0.read(charArray0);
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(23, strBuilder0.length());
      assertEquals(23, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(23, strBuilder1.size());
      assertEquals(23, strBuilder1.length());
      assertTrue(strBuilder1.isNotEmpty());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(32, strBuilder1.capacity());
      assertTrue(strBuilder_StrBuilderReader0.markSupported());
      assertTrue(strBuilder_StrBuilderReader0.ready());
      assertEquals(3, int1);
      assertTrue(int1 == int0);
      assertArrayEquals(new char[] {'o', 'v', 'e'}, charArray0);
      assertEquals(3, charArray0.length);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      
      Integer integer0 = new Integer((-5572));
      assertNotNull(integer0);
      assertEquals((-5572), (int)integer0);
      assertFalse(integer0.equals((Object)int0));
      assertFalse(integer0.equals((Object)int1));
      
      StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer0 = strBuilder1.new StrBuilderTokenizer();
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(23, strBuilder0.length());
      assertEquals(23, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(23, strBuilder1.size());
      assertEquals(23, strBuilder1.length());
      assertTrue(strBuilder1.isNotEmpty());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(32, strBuilder1.capacity());
      assertTrue(strBuilder_StrBuilderTokenizer0.isIgnoreEmptyTokens());
      assertEquals((-1), strBuilder_StrBuilderTokenizer0.previousIndex());
      assertFalse(strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull());
      assertEquals(0, strBuilder_StrBuilderTokenizer0.nextIndex());
      assertNotNull(strBuilder_StrBuilderTokenizer0);
      
      String string0 = strBuilder_StrBuilderTokenizer0.getContent();
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(23, strBuilder0.length());
      assertEquals(23, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(23, strBuilder1.size());
      assertEquals(23, strBuilder1.length());
      assertTrue(strBuilder1.isNotEmpty());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(32, strBuilder1.capacity());
      assertTrue(strBuilder_StrBuilderTokenizer0.isIgnoreEmptyTokens());
      assertEquals((-1), strBuilder_StrBuilderTokenizer0.previousIndex());
      assertFalse(strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull());
      assertEquals(0, strBuilder_StrBuilderTokenizer0.nextIndex());
      assertNotNull(string0);
      assertEquals("remove() is unsupported", string0);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      
      StrBuilder strBuilder3 = new StrBuilder((-3397));
      assertNull(strBuilder3.getNewLineText());
      assertEquals(32, strBuilder3.capacity());
      assertEquals(0, strBuilder3.size());
      assertEquals(0, strBuilder3.length());
      assertFalse(strBuilder3.isNotEmpty());
      assertTrue(strBuilder3.isEmpty());
      assertNull(strBuilder3.getNullText());
      assertNotNull(strBuilder3);
      assertFalse(strBuilder3.equals((Object)strBuilder0));
      assertFalse(strBuilder3.equals((Object)strBuilder2));
      assertFalse(strBuilder3.equals((Object)strBuilder1));
      
      StrBuilder strBuilder4 = strBuilder3.appendln((double) (-5572));
      assertTrue(strBuilder3.isNotEmpty());
      assertFalse(strBuilder3.isEmpty());
      assertNull(strBuilder3.getNewLineText());
      assertEquals(32, strBuilder3.capacity());
      assertEquals(8, strBuilder3.size());
      assertNull(strBuilder3.getNullText());
      assertEquals(8, strBuilder3.length());
      assertNull(strBuilder4.getNewLineText());
      assertFalse(strBuilder4.isEmpty());
      assertEquals(32, strBuilder4.capacity());
      assertTrue(strBuilder4.isNotEmpty());
      assertEquals(8, strBuilder4.size());
      assertNull(strBuilder4.getNullText());
      assertEquals(8, strBuilder4.length());
      assertNotNull(strBuilder4);
      assertFalse(strBuilder3.equals((Object)strBuilder0));
      assertFalse(strBuilder3.equals((Object)strBuilder2));
      assertFalse(strBuilder3.equals((Object)strBuilder1));
      assertFalse(strBuilder4.equals((Object)strBuilder2));
      assertFalse(strBuilder4.equals((Object)strBuilder1));
      assertFalse(strBuilder4.equals((Object)strBuilder0));
      assertNotSame(strBuilder3, strBuilder0);
      assertNotSame(strBuilder3, strBuilder2);
      assertSame(strBuilder3, strBuilder4);
      assertNotSame(strBuilder3, strBuilder1);
      assertNotSame(strBuilder4, strBuilder2);
      assertNotSame(strBuilder4, strBuilder1);
      assertNotSame(strBuilder4, strBuilder0);
      assertSame(strBuilder4, strBuilder3);
      
      boolean boolean0 = strBuilder2.startsWith("G3$jJL%]~uAR,:@[m0");
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(23, strBuilder0.length());
      assertEquals(23, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(23, strBuilder2.size());
      assertNull(strBuilder2.getNewLineText());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(23, strBuilder2.length());
      assertNull(strBuilder2.getNullText());
      assertTrue(strBuilder2.isNotEmpty());
      assertEquals(32, strBuilder2.capacity());
      assertFalse(boolean0);
      assertFalse(strBuilder0.equals((Object)strBuilder3));
      assertFalse(strBuilder0.equals((Object)strBuilder4));
      assertFalse(strBuilder2.equals((Object)strBuilder4));
      assertFalse(strBuilder2.equals((Object)strBuilder3));
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertNotSame(strBuilder0, strBuilder3);
      assertNotSame(strBuilder0, strBuilder4);
      assertNotSame(strBuilder2, strBuilder4);
      assertSame(strBuilder2, strBuilder0);
      assertNotSame(strBuilder2, strBuilder3);
      assertSame(strBuilder2, strBuilder1);
      
      StrBuilder strBuilder5 = strBuilder1.setNullText("BbGR![lWB#)n;e1");
      assertFalse(strBuilder5.isEmpty());
      assertNull(strBuilder5.getNewLineText());
      assertEquals(23, strBuilder5.length());
      assertEquals(23, strBuilder5.size());
      assertEquals(32, strBuilder5.capacity());
      assertTrue(strBuilder5.isNotEmpty());
      assertEquals("BbGR![lWB#)n;e1", strBuilder5.getNullText());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals("BbGR![lWB#)n;e1", strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(23, strBuilder0.length());
      assertEquals(23, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(23, strBuilder1.size());
      assertEquals(23, strBuilder1.length());
      assertTrue(strBuilder1.isNotEmpty());
      assertEquals("BbGR![lWB#)n;e1", strBuilder1.getNullText());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(32, strBuilder1.capacity());
      assertNotNull(strBuilder5);
      assertFalse(strBuilder5.equals((Object)strBuilder3));
      assertFalse(strBuilder5.equals((Object)strBuilder4));
      assertFalse(strBuilder0.equals((Object)strBuilder3));
      assertFalse(strBuilder0.equals((Object)strBuilder4));
      assertFalse(strBuilder1.equals((Object)strBuilder3));
      assertFalse(strBuilder1.equals((Object)strBuilder4));
      assertSame(strBuilder5, strBuilder2);
      assertSame(strBuilder5, strBuilder0);
      assertNotSame(strBuilder5, strBuilder3);
      assertSame(strBuilder5, strBuilder1);
      assertNotSame(strBuilder5, strBuilder4);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertNotSame(strBuilder0, strBuilder3);
      assertNotSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder1, strBuilder2);
      assertNotSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder5);
      assertNotSame(strBuilder1, strBuilder4);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder((-1142));
      assertTrue(strBuilder0.isEmpty());
      assertFalse(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertNotNull(strBuilder0);
      
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      assertFalse(boolean0);
      
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.EXTENDED_FILTERING;
      assertEquals(Locale.FilteringMode.EXTENDED_FILTERING, locale_FilteringMode0);
      
      StrBuilder strBuilder1 = strBuilder0.append((Object) locale_FilteringMode0);
      assertEquals(41, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(82, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(41, strBuilder0.size());
      assertEquals(41, strBuilder1.size());
      assertFalse(strBuilder1.isEmpty());
      assertTrue(strBuilder1.isNotEmpty());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(41, strBuilder1.length());
      assertEquals(82, strBuilder1.capacity());
      assertNotNull(strBuilder1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      
      StrBuilder strBuilder2 = strBuilder0.replaceFirst('a', '|');
      assertEquals(41, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(82, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(41, strBuilder0.size());
      assertEquals(82, strBuilder2.capacity());
      assertTrue(strBuilder2.isNotEmpty());
      assertNull(strBuilder2.getNullText());
      assertEquals(41, strBuilder2.length());
      assertEquals(41, strBuilder2.size());
      assertNull(strBuilder2.getNewLineText());
      assertFalse(strBuilder2.isEmpty());
      assertNotNull(strBuilder2);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      
      // Undeclared exception!
      try { 
        strBuilder2.appendln(strBuilder1, (-1142), (-1142));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // startIndex must be valid
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(0);
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isEmpty());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.appendPadding(0, 'Q');
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isEmpty());
      assertFalse(strBuilder1.isNotEmpty());
      assertTrue(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(0, strBuilder1.length());
      assertEquals(0, strBuilder1.size());
      assertNotNull(strBuilder1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      
      StrBuilder strBuilder2 = strBuilder1.append((float) 1);
      assertEquals(3, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(3, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(3, strBuilder1.length());
      assertEquals(3, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertTrue(strBuilder1.isNotEmpty());
      assertEquals(3, strBuilder2.size());
      assertEquals(3, strBuilder2.length());
      assertTrue(strBuilder2.isNotEmpty());
      assertFalse(strBuilder2.isEmpty());
      assertNull(strBuilder2.getNewLineText());
      assertNull(strBuilder2.getNullText());
      assertEquals(32, strBuilder2.capacity());
      assertNotNull(strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      
      boolean boolean0 = strBuilder0.contains('Q');
      assertEquals(3, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(3, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(boolean0);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
      assertEquals(3, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(3, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isNotEmpty());
      assertTrue(strBuilder_StrBuilderReader0.markSupported());
      assertTrue(strBuilder_StrBuilderReader0.ready());
      assertNotNull(strBuilder_StrBuilderReader0);
      
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) strBuilder_StrBuilderReader0;
      objectArray0[1] = (Object) strBuilder1;
      objectArray0[2] = (Object) strBuilder0;
      StrBuilder strBuilder3 = strBuilder2.append("', has a length less than 2", objectArray0);
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(30, strBuilder0.length());
      assertEquals(30, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(30, strBuilder1.length());
      assertTrue(strBuilder1.isNotEmpty());
      assertEquals(30, strBuilder1.size());
      assertTrue(strBuilder2.isNotEmpty());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(30, strBuilder2.length());
      assertNull(strBuilder2.getNewLineText());
      assertNull(strBuilder2.getNullText());
      assertEquals(30, strBuilder2.size());
      assertEquals(32, strBuilder2.capacity());
      assertEquals(30, strBuilder3.size());
      assertTrue(strBuilder3.isNotEmpty());
      assertEquals(30, strBuilder3.length());
      assertFalse(strBuilder3.isEmpty());
      assertEquals(32, strBuilder3.capacity());
      assertNull(strBuilder3.getNullText());
      assertNull(strBuilder3.getNewLineText());
      assertNotNull(strBuilder3);
      assertEquals(3, objectArray0.length);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder3);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder2);
      
      StrBuilder strBuilder4 = new StrBuilder(1);
      assertEquals(1, strBuilder4.capacity());
      assertTrue(strBuilder4.isEmpty());
      assertNull(strBuilder4.getNullText());
      assertNull(strBuilder4.getNewLineText());
      assertFalse(strBuilder4.isNotEmpty());
      assertEquals(0, strBuilder4.length());
      assertEquals(0, strBuilder4.size());
      assertNotNull(strBuilder4);
      assertFalse(strBuilder4.equals((Object)strBuilder0));
      assertFalse(strBuilder4.equals((Object)strBuilder1));
      assertFalse(strBuilder4.equals((Object)strBuilder2));
      assertFalse(strBuilder4.equals((Object)strBuilder3));
      
      StrBuilder strBuilder5 = strBuilder2.append("r.tk=y?G8[");
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(80, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertEquals(40, strBuilder0.length());
      assertEquals(40, strBuilder0.size());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(40, strBuilder1.length());
      assertEquals(40, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(80, strBuilder1.capacity());
      assertTrue(strBuilder1.isNotEmpty());
      assertEquals(40, strBuilder2.length());
      assertTrue(strBuilder2.isNotEmpty());
      assertFalse(strBuilder2.isEmpty());
      assertNull(strBuilder2.getNewLineText());
      assertNull(strBuilder2.getNullText());
      assertEquals(80, strBuilder2.capacity());
      assertEquals(40, strBuilder2.size());
      assertEquals(40, strBuilder5.length());
      assertEquals(40, strBuilder5.size());
      assertTrue(strBuilder5.isNotEmpty());
      assertEquals(80, strBuilder5.capacity());
      assertNull(strBuilder5.getNullText());
      assertFalse(strBuilder5.isEmpty());
      assertNull(strBuilder5.getNewLineText());
      assertNotNull(strBuilder5);
      assertFalse(strBuilder0.equals((Object)strBuilder4));
      assertFalse(strBuilder1.equals((Object)strBuilder4));
      assertFalse(strBuilder2.equals((Object)strBuilder4));
      assertFalse(strBuilder5.equals((Object)strBuilder4));
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertNotSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder2);
      assertNotSame(strBuilder1, strBuilder4);
      assertSame(strBuilder1, strBuilder5);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder3);
      assertNotSame(strBuilder2, strBuilder4);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder5);
      assertSame(strBuilder5, strBuilder3);
      assertSame(strBuilder5, strBuilder0);
      assertSame(strBuilder5, strBuilder2);
      assertSame(strBuilder5, strBuilder1);
      assertNotSame(strBuilder5, strBuilder4);
      
      StrBuilder strBuilder6 = strBuilder0.replaceFirst('n', 'Q');
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(80, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertEquals(40, strBuilder0.length());
      assertEquals(40, strBuilder0.size());
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder6.getNullText());
      assertTrue(strBuilder6.isNotEmpty());
      assertNull(strBuilder6.getNewLineText());
      assertEquals(80, strBuilder6.capacity());
      assertEquals(40, strBuilder6.size());
      assertEquals(40, strBuilder6.length());
      assertFalse(strBuilder6.isEmpty());
      assertNotNull(strBuilder6);
      assertFalse(strBuilder0.equals((Object)strBuilder4));
      assertFalse(strBuilder6.equals((Object)strBuilder4));
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertNotSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder6);
      assertNotSame(strBuilder6, strBuilder4);
      assertSame(strBuilder6, strBuilder1);
      assertSame(strBuilder6, strBuilder2);
      assertSame(strBuilder6, strBuilder3);
      assertSame(strBuilder6, strBuilder5);
      assertSame(strBuilder6, strBuilder0);
      
      String string0 = strBuilder0.leftString(0);
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(80, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertEquals(40, strBuilder0.length());
      assertEquals(40, strBuilder0.size());
      assertTrue(strBuilder0.isNotEmpty());
      assertNotNull(string0);
      assertEquals("", string0);
      assertFalse(strBuilder0.equals((Object)strBuilder4));
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertNotSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder6);
      
      StrBuilder strBuilder7 = new StrBuilder(0);
      assertFalse(strBuilder7.isNotEmpty());
      assertEquals(0, strBuilder7.size());
      assertNull(strBuilder7.getNullText());
      assertEquals(0, strBuilder7.length());
      assertTrue(strBuilder7.isEmpty());
      assertEquals(32, strBuilder7.capacity());
      assertNull(strBuilder7.getNewLineText());
      assertNotNull(strBuilder7);
      assertFalse(strBuilder7.equals((Object)strBuilder5));
      assertFalse(strBuilder7.equals((Object)strBuilder3));
      assertFalse(strBuilder7.equals((Object)strBuilder0));
      assertFalse(strBuilder7.equals((Object)strBuilder2));
      assertFalse(strBuilder7.equals((Object)strBuilder6));
      assertTrue(strBuilder7.equals((Object)strBuilder4));
      assertFalse(strBuilder7.equals((Object)strBuilder1));
      
      String string1 = strBuilder0.build();
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(80, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertEquals(40, strBuilder0.length());
      assertEquals(40, strBuilder0.size());
      assertTrue(strBuilder0.isNotEmpty());
      assertNotNull(string1);
      assertEquals("1.0', has a leQgth less than 2r.tk=y?G8[", string1);
      assertFalse(strBuilder0.equals((Object)strBuilder7));
      assertFalse(strBuilder0.equals((Object)strBuilder4));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(strBuilder0, strBuilder7);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertNotSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder6);
      
      StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer0 = strBuilder2.new StrBuilderTokenizer();
      assertEquals(0, strBuilder_StrBuilderTokenizer0.nextIndex());
      assertTrue(strBuilder_StrBuilderTokenizer0.isIgnoreEmptyTokens());
      assertEquals((-1), strBuilder_StrBuilderTokenizer0.previousIndex());
      assertFalse(strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(80, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertEquals(40, strBuilder0.length());
      assertEquals(40, strBuilder0.size());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(40, strBuilder1.length());
      assertEquals(40, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(80, strBuilder1.capacity());
      assertTrue(strBuilder1.isNotEmpty());
      assertEquals(40, strBuilder2.length());
      assertTrue(strBuilder2.isNotEmpty());
      assertFalse(strBuilder2.isEmpty());
      assertNull(strBuilder2.getNewLineText());
      assertNull(strBuilder2.getNullText());
      assertEquals(80, strBuilder2.capacity());
      assertEquals(40, strBuilder2.size());
      assertNotNull(strBuilder_StrBuilderTokenizer0);
      assertFalse(strBuilder0.equals((Object)strBuilder7));
      assertFalse(strBuilder0.equals((Object)strBuilder4));
      assertFalse(strBuilder1.equals((Object)strBuilder7));
      assertFalse(strBuilder1.equals((Object)strBuilder4));
      assertFalse(strBuilder2.equals((Object)strBuilder7));
      assertFalse(strBuilder2.equals((Object)strBuilder4));
      
      String string2 = strBuilder_StrBuilderTokenizer0.getContent();
      assertEquals(0, strBuilder_StrBuilderTokenizer0.nextIndex());
      assertTrue(strBuilder_StrBuilderTokenizer0.isIgnoreEmptyTokens());
      assertEquals((-1), strBuilder_StrBuilderTokenizer0.previousIndex());
      assertFalse(strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(80, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertEquals(40, strBuilder0.length());
      assertEquals(40, strBuilder0.size());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(40, strBuilder1.length());
      assertEquals(40, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(80, strBuilder1.capacity());
      assertTrue(strBuilder1.isNotEmpty());
      assertEquals(40, strBuilder2.length());
      assertTrue(strBuilder2.isNotEmpty());
      assertFalse(strBuilder2.isEmpty());
      assertNull(strBuilder2.getNewLineText());
      assertNull(strBuilder2.getNullText());
      assertEquals(80, strBuilder2.capacity());
      assertEquals(40, strBuilder2.size());
      assertNotNull(string2);
      assertEquals("1.0', has a leQgth less than 2r.tk=y?G8[", string2);
      assertFalse(strBuilder0.equals((Object)strBuilder7));
      assertFalse(strBuilder0.equals((Object)strBuilder4));
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(strBuilder1.equals((Object)strBuilder7));
      assertFalse(strBuilder1.equals((Object)strBuilder4));
      assertFalse(strBuilder2.equals((Object)strBuilder7));
      assertFalse(strBuilder2.equals((Object)strBuilder4));
      assertNotSame(strBuilder0, strBuilder7);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertNotSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder6);
      assertNotSame(strBuilder1, strBuilder7);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder2);
      assertNotSame(strBuilder1, strBuilder4);
      assertSame(strBuilder1, strBuilder6);
      assertSame(strBuilder1, strBuilder5);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder2, strBuilder6);
      assertNotSame(strBuilder2, strBuilder7);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder3);
      assertNotSame(strBuilder2, strBuilder4);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder5);
      
      StrBuilder strBuilder8 = new StrBuilder(127);
      assertEquals(127, strBuilder8.capacity());
      assertTrue(strBuilder8.isEmpty());
      assertEquals(0, strBuilder8.length());
      assertEquals(0, strBuilder8.size());
      assertNull(strBuilder8.getNullText());
      assertNull(strBuilder8.getNewLineText());
      assertFalse(strBuilder8.isNotEmpty());
      assertNotNull(strBuilder8);
      assertTrue(strBuilder8.equals((Object)strBuilder4));
      assertTrue(strBuilder8.equals((Object)strBuilder7));
      assertFalse(strBuilder8.equals((Object)strBuilder6));
      assertFalse(strBuilder8.equals((Object)strBuilder3));
      assertFalse(strBuilder8.equals((Object)strBuilder0));
      assertFalse(strBuilder8.equals((Object)strBuilder2));
      assertFalse(strBuilder8.equals((Object)strBuilder5));
      assertFalse(strBuilder8.equals((Object)strBuilder1));
      
      StrBuilder strBuilder9 = strBuilder2.appendln(0.0);
      assertFalse(strBuilder0.isEmpty());
      assertEquals(44, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(80, strBuilder0.capacity());
      assertEquals(44, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(44, strBuilder1.length());
      assertEquals(44, strBuilder1.size());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(80, strBuilder1.capacity());
      assertTrue(strBuilder1.isNotEmpty());
      assertTrue(strBuilder2.isNotEmpty());
      assertFalse(strBuilder2.isEmpty());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(44, strBuilder2.size());
      assertNull(strBuilder2.getNullText());
      assertEquals(80, strBuilder2.capacity());
      assertEquals(44, strBuilder2.length());
      assertEquals(80, strBuilder9.capacity());
      assertEquals(44, strBuilder9.size());
      assertNull(strBuilder9.getNullText());
      assertTrue(strBuilder9.isNotEmpty());
      assertFalse(strBuilder9.isEmpty());
      assertEquals(44, strBuilder9.length());
      assertNull(strBuilder9.getNewLineText());
      assertNotNull(strBuilder9);
      assertFalse(strBuilder0.equals((Object)strBuilder7));
      assertFalse(strBuilder0.equals((Object)strBuilder4));
      assertFalse(strBuilder0.equals((Object)strBuilder8));
      assertFalse(strBuilder1.equals((Object)strBuilder7));
      assertFalse(strBuilder1.equals((Object)strBuilder4));
      assertFalse(strBuilder1.equals((Object)strBuilder8));
      assertFalse(strBuilder2.equals((Object)strBuilder7));
      assertFalse(strBuilder2.equals((Object)strBuilder4));
      assertFalse(strBuilder2.equals((Object)strBuilder8));
      assertFalse(strBuilder9.equals((Object)strBuilder4));
      assertFalse(strBuilder9.equals((Object)strBuilder8));
      assertFalse(strBuilder9.equals((Object)strBuilder7));
      assertNotSame(strBuilder0, strBuilder7);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertNotSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder9);
      assertSame(strBuilder0, strBuilder5);
      assertNotSame(strBuilder0, strBuilder8);
      assertSame(strBuilder0, strBuilder6);
      assertNotSame(strBuilder1, strBuilder7);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder9);
      assertNotSame(strBuilder1, strBuilder4);
      assertSame(strBuilder1, strBuilder6);
      assertNotSame(strBuilder1, strBuilder8);
      assertSame(strBuilder1, strBuilder5);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder2, strBuilder6);
      assertNotSame(strBuilder2, strBuilder7);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder3);
      assertSame(strBuilder2, strBuilder9);
      assertNotSame(strBuilder2, strBuilder4);
      assertNotSame(strBuilder2, strBuilder8);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder5);
      assertSame(strBuilder9, strBuilder6);
      assertSame(strBuilder9, strBuilder3);
      assertSame(strBuilder9, strBuilder5);
      assertSame(strBuilder9, strBuilder0);
      assertSame(strBuilder9, strBuilder1);
      assertSame(strBuilder9, strBuilder2);
      assertNotSame(strBuilder9, strBuilder4);
      assertNotSame(strBuilder9, strBuilder8);
      assertNotSame(strBuilder9, strBuilder7);
      
      boolean boolean1 = strBuilder3.startsWith("1.0', has a leQgth less than 2r.tk=y?G8[");
      assertFalse(strBuilder0.isEmpty());
      assertEquals(44, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(80, strBuilder0.capacity());
      assertEquals(44, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(44, strBuilder1.length());
      assertEquals(44, strBuilder1.size());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(80, strBuilder1.capacity());
      assertTrue(strBuilder1.isNotEmpty());
      assertTrue(strBuilder2.isNotEmpty());
      assertFalse(strBuilder2.isEmpty());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(44, strBuilder2.size());
      assertNull(strBuilder2.getNullText());
      assertEquals(80, strBuilder2.capacity());
      assertEquals(44, strBuilder2.length());
      assertTrue(strBuilder3.isNotEmpty());
      assertEquals(44, strBuilder3.size());
      assertFalse(strBuilder3.isEmpty());
      assertEquals(80, strBuilder3.capacity());
      assertEquals(44, strBuilder3.length());
      assertNull(strBuilder3.getNullText());
      assertNull(strBuilder3.getNewLineText());
      assertTrue(boolean1);
      assertFalse(strBuilder0.equals((Object)strBuilder7));
      assertFalse(strBuilder0.equals((Object)strBuilder4));
      assertFalse(strBuilder0.equals((Object)strBuilder8));
      assertFalse(strBuilder1.equals((Object)strBuilder7));
      assertFalse(strBuilder1.equals((Object)strBuilder4));
      assertFalse(strBuilder1.equals((Object)strBuilder8));
      assertFalse(strBuilder2.equals((Object)strBuilder7));
      assertFalse(strBuilder2.equals((Object)strBuilder4));
      assertFalse(strBuilder2.equals((Object)strBuilder8));
      assertFalse(boolean1 == boolean0);
      assertFalse(strBuilder3.equals((Object)strBuilder4));
      assertFalse(strBuilder3.equals((Object)strBuilder8));
      assertFalse(strBuilder3.equals((Object)strBuilder7));
      assertEquals(3, objectArray0.length);
      assertNotSame(strBuilder0, strBuilder7);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertNotSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder9);
      assertSame(strBuilder0, strBuilder5);
      assertNotSame(strBuilder0, strBuilder8);
      assertSame(strBuilder0, strBuilder6);
      assertNotSame(strBuilder1, strBuilder7);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder9);
      assertNotSame(strBuilder1, strBuilder4);
      assertSame(strBuilder1, strBuilder6);
      assertNotSame(strBuilder1, strBuilder8);
      assertSame(strBuilder1, strBuilder5);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder2, strBuilder6);
      assertNotSame(strBuilder2, strBuilder7);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder3);
      assertSame(strBuilder2, strBuilder9);
      assertNotSame(strBuilder2, strBuilder4);
      assertNotSame(strBuilder2, strBuilder8);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder5);
      assertNotSame(strBuilder3, strBuilder4);
      assertSame(strBuilder3, strBuilder1);
      assertNotSame(strBuilder3, strBuilder8);
      assertSame(strBuilder3, strBuilder9);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder2);
      assertSame(strBuilder3, strBuilder5);
      assertNotSame(strBuilder3, strBuilder7);
      assertSame(strBuilder3, strBuilder6);
      
      StrBuilder strBuilder10 = strBuilder4.setNullText("1.0', has a leQgth less than 2r.tk=y?G8[");
      assertFalse(strBuilder10.isNotEmpty());
      assertEquals(0, strBuilder10.size());
      assertEquals(1, strBuilder10.capacity());
      assertNull(strBuilder10.getNewLineText());
      assertEquals(0, strBuilder10.length());
      assertEquals("1.0', has a leQgth less than 2r.tk=y?G8[", strBuilder10.getNullText());
      assertTrue(strBuilder10.isEmpty());
      assertEquals(1, strBuilder4.capacity());
      assertTrue(strBuilder4.isEmpty());
      assertNull(strBuilder4.getNewLineText());
      assertEquals("1.0', has a leQgth less than 2r.tk=y?G8[", strBuilder4.getNullText());
      assertFalse(strBuilder4.isNotEmpty());
      assertEquals(0, strBuilder4.length());
      assertEquals(0, strBuilder4.size());
      assertNotNull(strBuilder10);
      assertFalse(strBuilder10.equals((Object)strBuilder5));
      assertFalse(strBuilder10.equals((Object)strBuilder2));
      assertFalse(strBuilder10.equals((Object)strBuilder1));
      assertFalse(strBuilder10.equals((Object)strBuilder6));
      assertTrue(strBuilder10.equals((Object)strBuilder7));
      assertFalse(strBuilder10.equals((Object)strBuilder0));
      assertFalse(strBuilder10.equals((Object)strBuilder3));
      assertTrue(strBuilder10.equals((Object)strBuilder8));
      assertFalse(strBuilder10.equals((Object)strBuilder9));
      assertFalse(strBuilder4.equals((Object)strBuilder0));
      assertFalse(strBuilder4.equals((Object)strBuilder1));
      assertFalse(strBuilder4.equals((Object)strBuilder2));
      assertFalse(strBuilder4.equals((Object)strBuilder9));
      assertFalse(strBuilder4.equals((Object)strBuilder3));
      assertFalse(strBuilder4.equals((Object)strBuilder5));
      assertFalse(strBuilder4.equals((Object)strBuilder6));
      assertTrue(strBuilder4.equals((Object)strBuilder7));
      assertTrue(strBuilder4.equals((Object)strBuilder8));
      assertNotSame(strBuilder10, strBuilder7);
      assertNotSame(strBuilder10, strBuilder5);
      assertNotSame(strBuilder10, strBuilder8);
      assertNotSame(strBuilder10, strBuilder2);
      assertNotSame(strBuilder10, strBuilder1);
      assertNotSame(strBuilder10, strBuilder6);
      assertNotSame(strBuilder10, strBuilder0);
      assertNotSame(strBuilder10, strBuilder3);
      assertSame(strBuilder10, strBuilder4);
      assertNotSame(strBuilder10, strBuilder9);
      assertNotSame(strBuilder4, strBuilder0);
      assertNotSame(strBuilder4, strBuilder1);
      assertNotSame(strBuilder4, strBuilder2);
      assertNotSame(strBuilder4, strBuilder8);
      assertNotSame(strBuilder4, strBuilder9);
      assertNotSame(strBuilder4, strBuilder3);
      assertNotSame(strBuilder4, strBuilder5);
      assertSame(strBuilder4, strBuilder10);
      assertNotSame(strBuilder4, strBuilder7);
      assertNotSame(strBuilder4, strBuilder6);
      
      StrBuilder strBuilder11 = strBuilder1.appendln((StringBuffer) null);
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(80, strBuilder0.capacity());
      assertEquals(45, strBuilder0.length());
      assertEquals(45, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(45, strBuilder1.size());
      assertEquals(80, strBuilder1.capacity());
      assertTrue(strBuilder1.isNotEmpty());
      assertEquals(45, strBuilder1.length());
      assertNull(strBuilder11.getNewLineText());
      assertEquals(80, strBuilder11.capacity());
      assertEquals(45, strBuilder11.length());
      assertEquals(45, strBuilder11.size());
      assertNull(strBuilder11.getNullText());
      assertTrue(strBuilder11.isNotEmpty());
      assertFalse(strBuilder11.isEmpty());
      assertNotNull(strBuilder11);
      assertFalse(strBuilder0.equals((Object)strBuilder7));
      assertFalse(strBuilder0.equals((Object)strBuilder4));
      assertFalse(strBuilder0.equals((Object)strBuilder8));
      assertFalse(strBuilder0.equals((Object)strBuilder10));
      assertFalse(strBuilder1.equals((Object)strBuilder7));
      assertFalse(strBuilder1.equals((Object)strBuilder4));
      assertFalse(strBuilder1.equals((Object)strBuilder10));
      assertFalse(strBuilder1.equals((Object)strBuilder8));
      assertFalse(strBuilder11.equals((Object)strBuilder8));
      assertFalse(strBuilder11.equals((Object)strBuilder10));
      assertFalse(strBuilder11.equals((Object)strBuilder7));
      assertFalse(strBuilder11.equals((Object)strBuilder4));
      assertNotSame(strBuilder0, strBuilder7);
      assertSame(strBuilder0, strBuilder11);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertNotSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder9);
      assertSame(strBuilder0, strBuilder5);
      assertNotSame(strBuilder0, strBuilder8);
      assertNotSame(strBuilder0, strBuilder10);
      assertSame(strBuilder0, strBuilder6);
      assertNotSame(strBuilder1, strBuilder7);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder9);
      assertNotSame(strBuilder1, strBuilder4);
      assertNotSame(strBuilder1, strBuilder10);
      assertSame(strBuilder1, strBuilder6);
      assertNotSame(strBuilder1, strBuilder8);
      assertSame(strBuilder1, strBuilder5);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder11);
      assertSame(strBuilder11, strBuilder5);
      assertNotSame(strBuilder11, strBuilder8);
      assertNotSame(strBuilder11, strBuilder10);
      assertSame(strBuilder11, strBuilder6);
      assertNotSame(strBuilder11, strBuilder7);
      assertSame(strBuilder11, strBuilder0);
      assertSame(strBuilder11, strBuilder1);
      assertSame(strBuilder11, strBuilder2);
      assertNotSame(strBuilder11, strBuilder4);
      assertSame(strBuilder11, strBuilder3);
      assertSame(strBuilder11, strBuilder9);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      StrBuilder strBuilder0 = new StrBuilder("?p");
      assertEquals(34, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(2, strBuilder0.size());
      assertEquals(2, strBuilder0.length());
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertNotNull(strBuilder0);
      
      boolean boolean1 = strBuilder0.startsWith("?p");
      assertEquals(34, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(2, strBuilder0.size());
      assertEquals(2, strBuilder0.length());
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(76);
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(76, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.appendSeparator('\u0019', '-');
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(76, strBuilder0.capacity());
      assertEquals(1, strBuilder0.size());
      assertEquals(1, strBuilder0.length());
      assertEquals(1, strBuilder1.length());
      assertEquals(1, strBuilder1.size());
      assertTrue(strBuilder1.isNotEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(76, strBuilder1.capacity());
      assertNull(strBuilder1.getNullText());
      assertFalse(strBuilder1.isEmpty());
      assertNotNull(strBuilder1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      
      StrBuilder strBuilder2 = strBuilder0.append("Invalid length: ");
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(76, strBuilder0.capacity());
      assertEquals(17, strBuilder0.size());
      assertEquals(17, strBuilder0.length());
      assertNull(strBuilder2.getNewLineText());
      assertFalse(strBuilder2.isEmpty());
      assertTrue(strBuilder2.isNotEmpty());
      assertNull(strBuilder2.getNullText());
      assertEquals(76, strBuilder2.capacity());
      assertEquals(17, strBuilder2.size());
      assertEquals(17, strBuilder2.length());
      assertNotNull(strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      
      StrBuilder strBuilder3 = strBuilder0.replaceFirst('\u0019', 'p');
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(76, strBuilder0.capacity());
      assertEquals(17, strBuilder0.size());
      assertEquals(17, strBuilder0.length());
      assertTrue(strBuilder3.isNotEmpty());
      assertFalse(strBuilder3.isEmpty());
      assertNull(strBuilder3.getNullText());
      assertNull(strBuilder3.getNewLineText());
      assertEquals(17, strBuilder3.size());
      assertEquals(76, strBuilder3.capacity());
      assertEquals(17, strBuilder3.length());
      assertNotNull(strBuilder3);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder2);
      assertSame(strBuilder3, strBuilder1);
      
      String string0 = strBuilder3.leftString(76);
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(76, strBuilder0.capacity());
      assertEquals(17, strBuilder0.size());
      assertEquals(17, strBuilder0.length());
      assertTrue(strBuilder3.isNotEmpty());
      assertFalse(strBuilder3.isEmpty());
      assertNull(strBuilder3.getNullText());
      assertNull(strBuilder3.getNewLineText());
      assertEquals(17, strBuilder3.size());
      assertEquals(76, strBuilder3.capacity());
      assertEquals(17, strBuilder3.length());
      assertNotNull(string0);
      assertEquals("-Invalid length: ", string0);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder2);
      assertSame(strBuilder3, strBuilder1);
      
      StrBuilder strBuilder4 = new StrBuilder('\u0019');
      assertTrue(strBuilder4.isEmpty());
      assertNull(strBuilder4.getNullText());
      assertEquals(0, strBuilder4.length());
      assertNull(strBuilder4.getNewLineText());
      assertEquals(0, strBuilder4.size());
      assertFalse(strBuilder4.isNotEmpty());
      assertEquals(25, strBuilder4.capacity());
      assertNotNull(strBuilder4);
      assertFalse(strBuilder4.equals((Object)strBuilder3));
      assertFalse(strBuilder4.equals((Object)strBuilder0));
      assertFalse(strBuilder4.equals((Object)strBuilder1));
      assertFalse(strBuilder4.equals((Object)strBuilder2));
      
      String string1 = strBuilder3.build();
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(76, strBuilder0.capacity());
      assertEquals(17, strBuilder0.size());
      assertEquals(17, strBuilder0.length());
      assertTrue(strBuilder3.isNotEmpty());
      assertFalse(strBuilder3.isEmpty());
      assertNull(strBuilder3.getNullText());
      assertNull(strBuilder3.getNewLineText());
      assertEquals(17, strBuilder3.size());
      assertEquals(76, strBuilder3.capacity());
      assertEquals(17, strBuilder3.length());
      assertNotNull(string1);
      assertEquals("-Invalid length: ", string1);
      assertFalse(strBuilder0.equals((Object)strBuilder4));
      assertFalse(strBuilder3.equals((Object)strBuilder4));
      assertTrue(string1.equals((Object)string0));
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertNotSame(strBuilder0, strBuilder4);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder2);
      assertNotSame(strBuilder3, strBuilder4);
      assertSame(strBuilder3, strBuilder1);
      
      StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer0 = strBuilder4.new StrBuilderTokenizer();
      assertTrue(strBuilder4.isEmpty());
      assertNull(strBuilder4.getNullText());
      assertEquals(0, strBuilder4.length());
      assertNull(strBuilder4.getNewLineText());
      assertEquals(0, strBuilder4.size());
      assertFalse(strBuilder4.isNotEmpty());
      assertEquals(25, strBuilder4.capacity());
      assertEquals(0, strBuilder_StrBuilderTokenizer0.nextIndex());
      assertTrue(strBuilder_StrBuilderTokenizer0.isIgnoreEmptyTokens());
      assertFalse(strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull());
      assertEquals((-1), strBuilder_StrBuilderTokenizer0.previousIndex());
      assertNotNull(strBuilder_StrBuilderTokenizer0);
      assertFalse(strBuilder4.equals((Object)strBuilder3));
      assertFalse(strBuilder4.equals((Object)strBuilder0));
      assertFalse(strBuilder4.equals((Object)strBuilder1));
      assertFalse(strBuilder4.equals((Object)strBuilder2));
      
      String string2 = strBuilder_StrBuilderTokenizer0.getContent();
      assertTrue(strBuilder4.isEmpty());
      assertNull(strBuilder4.getNullText());
      assertEquals(0, strBuilder4.length());
      assertNull(strBuilder4.getNewLineText());
      assertEquals(0, strBuilder4.size());
      assertFalse(strBuilder4.isNotEmpty());
      assertEquals(25, strBuilder4.capacity());
      assertEquals(0, strBuilder_StrBuilderTokenizer0.nextIndex());
      assertTrue(strBuilder_StrBuilderTokenizer0.isIgnoreEmptyTokens());
      assertFalse(strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull());
      assertEquals((-1), strBuilder_StrBuilderTokenizer0.previousIndex());
      assertNotNull(string2);
      assertEquals("", string2);
      assertFalse(strBuilder4.equals((Object)strBuilder3));
      assertFalse(strBuilder4.equals((Object)strBuilder0));
      assertFalse(strBuilder4.equals((Object)strBuilder1));
      assertFalse(strBuilder4.equals((Object)strBuilder2));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotSame(strBuilder4, strBuilder3);
      assertNotSame(strBuilder4, strBuilder0);
      assertNotSame(strBuilder4, strBuilder1);
      assertNotSame(strBuilder4, strBuilder2);
      
      StrBuilder strBuilder5 = new StrBuilder('-');
      assertTrue(strBuilder5.isEmpty());
      assertEquals(0, strBuilder5.size());
      assertFalse(strBuilder5.isNotEmpty());
      assertNull(strBuilder5.getNullText());
      assertEquals(0, strBuilder5.length());
      assertNull(strBuilder5.getNewLineText());
      assertEquals(45, strBuilder5.capacity());
      assertNotNull(strBuilder5);
      assertFalse(strBuilder5.equals((Object)strBuilder0));
      assertFalse(strBuilder5.equals((Object)strBuilder3));
      assertFalse(strBuilder5.equals((Object)strBuilder1));
      assertFalse(strBuilder5.equals((Object)strBuilder2));
      assertTrue(strBuilder5.equals((Object)strBuilder4));
      
      StrBuilder strBuilder6 = strBuilder5.appendln((double) 76);
      assertEquals(5, strBuilder5.length());
      assertEquals(5, strBuilder5.size());
      assertFalse(strBuilder5.isEmpty());
      assertTrue(strBuilder5.isNotEmpty());
      assertNull(strBuilder5.getNullText());
      assertNull(strBuilder5.getNewLineText());
      assertEquals(45, strBuilder5.capacity());
      assertEquals(5, strBuilder6.size());
      assertEquals(5, strBuilder6.length());
      assertFalse(strBuilder6.isEmpty());
      assertTrue(strBuilder6.isNotEmpty());
      assertNull(strBuilder6.getNullText());
      assertNull(strBuilder6.getNewLineText());
      assertEquals(45, strBuilder6.capacity());
      assertNotNull(strBuilder6);
      assertFalse(strBuilder5.equals((Object)strBuilder0));
      assertFalse(strBuilder5.equals((Object)strBuilder3));
      assertFalse(strBuilder5.equals((Object)strBuilder4));
      assertFalse(strBuilder5.equals((Object)strBuilder1));
      assertFalse(strBuilder5.equals((Object)strBuilder2));
      assertFalse(strBuilder6.equals((Object)strBuilder0));
      assertFalse(strBuilder6.equals((Object)strBuilder3));
      assertFalse(strBuilder6.equals((Object)strBuilder4));
      assertFalse(strBuilder6.equals((Object)strBuilder1));
      assertFalse(strBuilder6.equals((Object)strBuilder2));
      assertNotSame(strBuilder5, strBuilder0);
      assertNotSame(strBuilder5, strBuilder3);
      assertNotSame(strBuilder5, strBuilder4);
      assertNotSame(strBuilder5, strBuilder1);
      assertNotSame(strBuilder5, strBuilder2);
      assertSame(strBuilder5, strBuilder6);
      assertNotSame(strBuilder6, strBuilder0);
      assertNotSame(strBuilder6, strBuilder3);
      assertNotSame(strBuilder6, strBuilder4);
      assertNotSame(strBuilder6, strBuilder1);
      assertNotSame(strBuilder6, strBuilder2);
      assertSame(strBuilder6, strBuilder5);
      
      boolean boolean0 = strBuilder6.startsWith("Invalid length: ");
      assertEquals(5, strBuilder5.length());
      assertEquals(5, strBuilder5.size());
      assertFalse(strBuilder5.isEmpty());
      assertTrue(strBuilder5.isNotEmpty());
      assertNull(strBuilder5.getNullText());
      assertNull(strBuilder5.getNewLineText());
      assertEquals(45, strBuilder5.capacity());
      assertEquals(5, strBuilder6.size());
      assertEquals(5, strBuilder6.length());
      assertFalse(strBuilder6.isEmpty());
      assertTrue(strBuilder6.isNotEmpty());
      assertNull(strBuilder6.getNullText());
      assertNull(strBuilder6.getNewLineText());
      assertEquals(45, strBuilder6.capacity());
      assertFalse(boolean0);
      assertFalse(strBuilder5.equals((Object)strBuilder0));
      assertFalse(strBuilder5.equals((Object)strBuilder3));
      assertFalse(strBuilder5.equals((Object)strBuilder4));
      assertFalse(strBuilder5.equals((Object)strBuilder1));
      assertFalse(strBuilder5.equals((Object)strBuilder2));
      assertFalse(strBuilder6.equals((Object)strBuilder0));
      assertFalse(strBuilder6.equals((Object)strBuilder3));
      assertFalse(strBuilder6.equals((Object)strBuilder4));
      assertFalse(strBuilder6.equals((Object)strBuilder1));
      assertFalse(strBuilder6.equals((Object)strBuilder2));
      assertNotSame(strBuilder5, strBuilder0);
      assertNotSame(strBuilder5, strBuilder3);
      assertNotSame(strBuilder5, strBuilder4);
      assertNotSame(strBuilder5, strBuilder1);
      assertNotSame(strBuilder5, strBuilder2);
      assertSame(strBuilder5, strBuilder6);
      assertNotSame(strBuilder6, strBuilder0);
      assertNotSame(strBuilder6, strBuilder3);
      assertNotSame(strBuilder6, strBuilder4);
      assertNotSame(strBuilder6, strBuilder1);
      assertNotSame(strBuilder6, strBuilder2);
      assertSame(strBuilder6, strBuilder5);
      
      StrBuilder strBuilder7 = strBuilder5.setNullText("");
      assertEquals(5, strBuilder5.length());
      assertEquals(5, strBuilder5.size());
      assertFalse(strBuilder5.isEmpty());
      assertTrue(strBuilder5.isNotEmpty());
      assertNull(strBuilder5.getNullText());
      assertNull(strBuilder5.getNewLineText());
      assertEquals(45, strBuilder5.capacity());
      assertTrue(strBuilder7.isNotEmpty());
      assertNull(strBuilder7.getNullText());
      assertEquals(45, strBuilder7.capacity());
      assertNull(strBuilder7.getNewLineText());
      assertEquals(5, strBuilder7.size());
      assertEquals(5, strBuilder7.length());
      assertFalse(strBuilder7.isEmpty());
      assertNotNull(strBuilder7);
      assertFalse(strBuilder5.equals((Object)strBuilder0));
      assertFalse(strBuilder5.equals((Object)strBuilder3));
      assertFalse(strBuilder5.equals((Object)strBuilder4));
      assertFalse(strBuilder5.equals((Object)strBuilder1));
      assertFalse(strBuilder5.equals((Object)strBuilder2));
      assertFalse(strBuilder7.equals((Object)strBuilder2));
      assertFalse(strBuilder7.equals((Object)strBuilder0));
      assertFalse(strBuilder7.equals((Object)strBuilder3));
      assertFalse(strBuilder7.equals((Object)strBuilder1));
      assertFalse(strBuilder7.equals((Object)strBuilder4));
      assertSame(strBuilder5, strBuilder7);
      assertNotSame(strBuilder5, strBuilder0);
      assertNotSame(strBuilder5, strBuilder3);
      assertNotSame(strBuilder5, strBuilder4);
      assertNotSame(strBuilder5, strBuilder1);
      assertNotSame(strBuilder5, strBuilder2);
      assertSame(strBuilder5, strBuilder6);
      assertSame(strBuilder7, strBuilder5);
      assertNotSame(strBuilder7, strBuilder2);
      assertSame(strBuilder7, strBuilder6);
      assertNotSame(strBuilder7, strBuilder0);
      assertNotSame(strBuilder7, strBuilder3);
      assertNotSame(strBuilder7, strBuilder1);
      assertNotSame(strBuilder7, strBuilder4);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.size());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.appendln(1);
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(2, strBuilder0.length());
      assertEquals(2, strBuilder0.size());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(2, strBuilder1.size());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(2, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertTrue(strBuilder1.isNotEmpty());
      assertNotNull(strBuilder1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      
      StrBuilder strBuilder2 = strBuilder1.appendNull();
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(2, strBuilder0.length());
      assertEquals(2, strBuilder0.size());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(2, strBuilder1.size());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(2, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertTrue(strBuilder1.isNotEmpty());
      assertNull(strBuilder2.getNewLineText());
      assertFalse(strBuilder2.isEmpty());
      assertTrue(strBuilder2.isNotEmpty());
      assertNull(strBuilder2.getNullText());
      assertEquals(32, strBuilder2.capacity());
      assertEquals(2, strBuilder2.length());
      assertEquals(2, strBuilder2.size());
      assertNotNull(strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      
      StrBuilder strBuilder3 = strBuilder0.replaceFirst("", "");
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(2, strBuilder0.length());
      assertEquals(2, strBuilder0.size());
      assertEquals(32, strBuilder3.capacity());
      assertTrue(strBuilder3.isNotEmpty());
      assertNull(strBuilder3.getNewLineText());
      assertFalse(strBuilder3.isEmpty());
      assertNull(strBuilder3.getNullText());
      assertEquals(2, strBuilder3.length());
      assertEquals(2, strBuilder3.size());
      assertNotNull(strBuilder3);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder2);
      
      int int0 = StrBuilder.CAPACITY;
      assertEquals(32, int0);
      
      StrBuilder strBuilder4 = strBuilder0.appendSeparator("p2vtx[:.");
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(10, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(10, strBuilder0.size());
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder4.isEmpty());
      assertNull(strBuilder4.getNullText());
      assertNull(strBuilder4.getNewLineText());
      assertEquals(10, strBuilder4.length());
      assertEquals(10, strBuilder4.size());
      assertTrue(strBuilder4.isNotEmpty());
      assertEquals(32, strBuilder4.capacity());
      assertNotNull(strBuilder4);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder4, strBuilder2);
      assertSame(strBuilder4, strBuilder1);
      assertSame(strBuilder4, strBuilder3);
      assertSame(strBuilder4, strBuilder0);
      
      char[] charArray0 = new char[3];
      charArray0[0] = '<';
      charArray0[1] = 'W';
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder2.new StrBuilderReader();
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(10, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(10, strBuilder0.size());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertTrue(strBuilder1.isNotEmpty());
      assertEquals(10, strBuilder1.size());
      assertEquals(10, strBuilder1.length());
      assertNull(strBuilder2.getNewLineText());
      assertFalse(strBuilder2.isEmpty());
      assertTrue(strBuilder2.isNotEmpty());
      assertNull(strBuilder2.getNullText());
      assertEquals(10, strBuilder2.length());
      assertEquals(10, strBuilder2.size());
      assertEquals(32, strBuilder2.capacity());
      assertTrue(strBuilder_StrBuilderReader0.ready());
      assertTrue(strBuilder_StrBuilderReader0.markSupported());
      assertNotNull(strBuilder_StrBuilderReader0);
      
      long long0 = strBuilder_StrBuilderReader0.skip(32);
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(10, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(10, strBuilder0.size());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertTrue(strBuilder1.isNotEmpty());
      assertEquals(10, strBuilder1.size());
      assertEquals(10, strBuilder1.length());
      assertNull(strBuilder2.getNewLineText());
      assertFalse(strBuilder2.isEmpty());
      assertTrue(strBuilder2.isNotEmpty());
      assertNull(strBuilder2.getNullText());
      assertEquals(10, strBuilder2.length());
      assertEquals(10, strBuilder2.size());
      assertEquals(32, strBuilder2.capacity());
      assertTrue(strBuilder_StrBuilderReader0.markSupported());
      assertFalse(strBuilder_StrBuilderReader0.ready());
      assertEquals(10L, long0);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder4);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder2, strBuilder4);
      assertSame(strBuilder2, strBuilder3);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      
      int int1 = StrBuilder.CAPACITY;
      assertEquals(32, int1);
      assertTrue(int1 == int0);
      
      int int2 = strBuilder_StrBuilderReader0.read(charArray0);
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(10, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(10, strBuilder0.size());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertTrue(strBuilder1.isNotEmpty());
      assertEquals(10, strBuilder1.size());
      assertEquals(10, strBuilder1.length());
      assertNull(strBuilder2.getNewLineText());
      assertFalse(strBuilder2.isEmpty());
      assertTrue(strBuilder2.isNotEmpty());
      assertNull(strBuilder2.getNullText());
      assertEquals(10, strBuilder2.length());
      assertEquals(10, strBuilder2.size());
      assertEquals(32, strBuilder2.capacity());
      assertTrue(strBuilder_StrBuilderReader0.markSupported());
      assertFalse(strBuilder_StrBuilderReader0.ready());
      assertEquals((-1), int2);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertArrayEquals(new char[] {'<', 'W', '\u0000'}, charArray0);
      assertEquals(3, charArray0.length);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder4);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder2, strBuilder4);
      assertSame(strBuilder2, strBuilder3);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      
      StringWriter stringWriter0 = new StringWriter();
      assertEquals("", stringWriter0.toString());
      assertNotNull(stringWriter0);
      
      StrBuilder strBuilder5 = new StrBuilder();
      assertTrue(strBuilder5.isEmpty());
      assertEquals(32, strBuilder5.capacity());
      assertFalse(strBuilder5.isNotEmpty());
      assertEquals(0, strBuilder5.size());
      assertEquals(0, strBuilder5.length());
      assertNull(strBuilder5.getNewLineText());
      assertNull(strBuilder5.getNullText());
      assertNotNull(strBuilder5);
      assertFalse(strBuilder5.equals((Object)strBuilder3));
      assertFalse(strBuilder5.equals((Object)strBuilder0));
      assertFalse(strBuilder5.equals((Object)strBuilder1));
      assertFalse(strBuilder5.equals((Object)strBuilder4));
      assertFalse(strBuilder5.equals((Object)strBuilder2));
      
      StrBuilder strBuilder6 = strBuilder4.deleteAll('<');
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(10, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(10, strBuilder0.size());
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder4.isEmpty());
      assertNull(strBuilder4.getNullText());
      assertNull(strBuilder4.getNewLineText());
      assertEquals(10, strBuilder4.length());
      assertEquals(10, strBuilder4.size());
      assertTrue(strBuilder4.isNotEmpty());
      assertEquals(32, strBuilder4.capacity());
      assertNull(strBuilder6.getNullText());
      assertTrue(strBuilder6.isNotEmpty());
      assertFalse(strBuilder6.isEmpty());
      assertEquals(32, strBuilder6.capacity());
      assertEquals(10, strBuilder6.length());
      assertEquals(10, strBuilder6.size());
      assertNull(strBuilder6.getNewLineText());
      assertNotNull(strBuilder6);
      assertFalse(strBuilder0.equals((Object)strBuilder5));
      assertFalse(strBuilder4.equals((Object)strBuilder5));
      assertFalse(strBuilder6.equals((Object)strBuilder5));
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertNotSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder6);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder4, strBuilder2);
      assertSame(strBuilder4, strBuilder6);
      assertSame(strBuilder4, strBuilder1);
      assertSame(strBuilder4, strBuilder3);
      assertNotSame(strBuilder4, strBuilder5);
      assertSame(strBuilder4, strBuilder0);
      assertSame(strBuilder6, strBuilder3);
      assertSame(strBuilder6, strBuilder2);
      assertNotSame(strBuilder6, strBuilder5);
      assertSame(strBuilder6, strBuilder4);
      assertSame(strBuilder6, strBuilder1);
      assertSame(strBuilder6, strBuilder0);
      
      // Undeclared exception!
      try { 
        strBuilder1.setLength(Integer.MAX_VALUE);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertFalse(strBuilder0.isNotEmpty());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = new StrBuilder("oE~pwB4xG!&xi()");
      assertEquals(48, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertEquals(16, strBuilder1.size());
      assertTrue(strBuilder1.isNotEmpty());
      assertEquals(16, strBuilder1.length());
      assertNotNull(strBuilder1);
      assertFalse(strBuilder1.equals((Object)strBuilder0));
      
      StrBuilder strBuilder2 = strBuilder0.appendFixedWidthPadRight((Object) strBuilder1, 5, 'q');
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(5, strBuilder0.length());
      assertEquals(5, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(48, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertEquals(16, strBuilder1.size());
      assertTrue(strBuilder1.isNotEmpty());
      assertEquals(16, strBuilder1.length());
      assertFalse(strBuilder2.isEmpty());
      assertTrue(strBuilder2.isNotEmpty());
      assertEquals(32, strBuilder2.capacity());
      assertNull(strBuilder2.getNullText());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(5, strBuilder2.size());
      assertEquals(5, strBuilder2.length());
      assertNotNull(strBuilder2);
      assertFalse(strBuilder0.equals((Object)strBuilder1));
      assertFalse(strBuilder1.equals((Object)strBuilder0));
      assertFalse(strBuilder2.equals((Object)strBuilder1));
      assertNotSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertNotSame(strBuilder1, strBuilder2);
      assertNotSame(strBuilder1, strBuilder0);
      assertSame(strBuilder2, strBuilder0);
      assertNotSame(strBuilder2, strBuilder1);
      
      int int0 = (-731);
      StrBuilder strBuilder3 = new StrBuilder((-731));
      assertTrue(strBuilder3.isEmpty());
      assertEquals(32, strBuilder3.capacity());
      assertNull(strBuilder3.getNullText());
      assertNull(strBuilder3.getNewLineText());
      assertEquals(0, strBuilder3.length());
      assertFalse(strBuilder3.isNotEmpty());
      assertEquals(0, strBuilder3.size());
      assertNotNull(strBuilder3);
      assertFalse(strBuilder3.equals((Object)strBuilder1));
      assertFalse(strBuilder3.equals((Object)strBuilder2));
      assertFalse(strBuilder3.equals((Object)strBuilder0));
      
      StrBuilder strBuilder4 = strBuilder3.trim();
      assertTrue(strBuilder3.isEmpty());
      assertEquals(32, strBuilder3.capacity());
      assertNull(strBuilder3.getNullText());
      assertNull(strBuilder3.getNewLineText());
      assertEquals(0, strBuilder3.length());
      assertFalse(strBuilder3.isNotEmpty());
      assertEquals(0, strBuilder3.size());
      assertEquals(0, strBuilder4.length());
      assertNull(strBuilder4.getNullText());
      assertNull(strBuilder4.getNewLineText());
      assertEquals(32, strBuilder4.capacity());
      assertTrue(strBuilder4.isEmpty());
      assertFalse(strBuilder4.isNotEmpty());
      assertEquals(0, strBuilder4.size());
      assertNotNull(strBuilder4);
      assertFalse(strBuilder3.equals((Object)strBuilder1));
      assertFalse(strBuilder3.equals((Object)strBuilder2));
      assertFalse(strBuilder3.equals((Object)strBuilder0));
      assertFalse(strBuilder4.equals((Object)strBuilder0));
      assertFalse(strBuilder4.equals((Object)strBuilder1));
      assertFalse(strBuilder4.equals((Object)strBuilder2));
      assertNotSame(strBuilder3, strBuilder1);
      assertNotSame(strBuilder3, strBuilder2);
      assertNotSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder4);
      assertNotSame(strBuilder4, strBuilder0);
      assertNotSame(strBuilder4, strBuilder1);
      assertNotSame(strBuilder4, strBuilder2);
      assertSame(strBuilder4, strBuilder3);
      
      // Undeclared exception!
      try { 
        strBuilder1.appendln(strBuilder4, 848, 64);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // startIndex must be valid
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(0);
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertFalse(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.appendPadding(0, 'Q');
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertFalse(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder1.isEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(0, strBuilder1.size());
      assertEquals(0, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertFalse(strBuilder1.isNotEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertNotNull(strBuilder1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      
      StrBuilder strBuilder2 = strBuilder1.append((float) 1);
      assertEquals(32, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(3, strBuilder0.length());
      assertEquals(3, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder1.isNotEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNullText());
      assertEquals(3, strBuilder1.length());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(3, strBuilder1.size());
      assertEquals(3, strBuilder2.size());
      assertEquals(3, strBuilder2.length());
      assertNull(strBuilder2.getNullText());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(32, strBuilder2.capacity());
      assertTrue(strBuilder2.isNotEmpty());
      assertFalse(strBuilder2.isEmpty());
      assertNotNull(strBuilder2);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      
      boolean boolean0 = strBuilder0.contains('Q');
      assertEquals(32, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(3, strBuilder0.length());
      assertEquals(3, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(boolean0);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
      assertEquals(32, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(3, strBuilder0.length());
      assertEquals(3, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder_StrBuilderReader0.ready());
      assertTrue(strBuilder_StrBuilderReader0.markSupported());
      assertNotNull(strBuilder_StrBuilderReader0);
      
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) strBuilder_StrBuilderReader0;
      objectArray0[1] = (Object) strBuilder1;
      objectArray0[2] = (Object) strBuilder0;
      StrBuilder strBuilder3 = strBuilder2.append("', has a length less than 2", objectArray0);
      assertEquals(32, strBuilder0.capacity());
      assertEquals(30, strBuilder0.length());
      assertEquals(30, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder1.isNotEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(30, strBuilder1.size());
      assertEquals(30, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder2.getNullText());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(32, strBuilder2.capacity());
      assertTrue(strBuilder2.isNotEmpty());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(30, strBuilder2.length());
      assertEquals(30, strBuilder2.size());
      assertNull(strBuilder3.getNewLineText());
      assertEquals(32, strBuilder3.capacity());
      assertTrue(strBuilder3.isNotEmpty());
      assertNull(strBuilder3.getNullText());
      assertEquals(30, strBuilder3.length());
      assertEquals(30, strBuilder3.size());
      assertFalse(strBuilder3.isEmpty());
      assertNotNull(strBuilder3);
      assertEquals(3, objectArray0.length);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder3);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder2);
      
      StrBuilder strBuilder4 = new StrBuilder(1);
      assertNull(strBuilder4.getNewLineText());
      assertNull(strBuilder4.getNullText());
      assertFalse(strBuilder4.isNotEmpty());
      assertEquals(0, strBuilder4.size());
      assertTrue(strBuilder4.isEmpty());
      assertEquals(0, strBuilder4.length());
      assertEquals(1, strBuilder4.capacity());
      assertNotNull(strBuilder4);
      assertFalse(strBuilder4.equals((Object)strBuilder2));
      assertFalse(strBuilder4.equals((Object)strBuilder0));
      assertFalse(strBuilder4.equals((Object)strBuilder3));
      assertFalse(strBuilder4.equals((Object)strBuilder1));
      
      char[] charArray0 = new char[3];
      charArray0[0] = '2';
      objectArray0[1] = (Object) 'q';
      StrBuilder strBuilder5 = strBuilder4.append(charArray0);
      assertNull(strBuilder4.getNewLineText());
      assertTrue(strBuilder4.isNotEmpty());
      assertFalse(strBuilder4.isEmpty());
      assertEquals(6, strBuilder4.capacity());
      assertNull(strBuilder4.getNullText());
      assertEquals(3, strBuilder4.size());
      assertEquals(3, strBuilder4.length());
      assertEquals(3, strBuilder5.size());
      assertEquals(3, strBuilder5.length());
      assertFalse(strBuilder5.isEmpty());
      assertEquals(6, strBuilder5.capacity());
      assertTrue(strBuilder5.isNotEmpty());
      assertNull(strBuilder5.getNullText());
      assertNull(strBuilder5.getNewLineText());
      assertNotNull(strBuilder5);
      assertFalse(strBuilder4.equals((Object)strBuilder2));
      assertFalse(strBuilder4.equals((Object)strBuilder0));
      assertFalse(strBuilder4.equals((Object)strBuilder3));
      assertFalse(strBuilder4.equals((Object)strBuilder1));
      assertFalse(strBuilder5.equals((Object)strBuilder0));
      assertFalse(strBuilder5.equals((Object)strBuilder2));
      assertFalse(strBuilder5.equals((Object)strBuilder1));
      assertFalse(strBuilder5.equals((Object)strBuilder3));
      assertArrayEquals(new char[] {'2', '\u0000', '\u0000'}, charArray0);
      assertEquals(3, charArray0.length);
      assertNotSame(strBuilder4, strBuilder2);
      assertNotSame(strBuilder4, strBuilder0);
      assertNotSame(strBuilder4, strBuilder3);
      assertNotSame(strBuilder4, strBuilder1);
      assertSame(strBuilder4, strBuilder5);
      assertSame(strBuilder5, strBuilder4);
      assertNotSame(strBuilder5, strBuilder0);
      assertNotSame(strBuilder5, strBuilder2);
      assertNotSame(strBuilder5, strBuilder1);
      assertNotSame(strBuilder5, strBuilder3);
      
      int int0 = StrBuilder.CAPACITY;
      assertEquals(32, int0);
      
      StrBuilder strBuilder6 = new StrBuilder(114);
      assertNull(strBuilder6.getNewLineText());
      assertEquals(114, strBuilder6.capacity());
      assertEquals(0, strBuilder6.size());
      assertFalse(strBuilder6.isNotEmpty());
      assertEquals(0, strBuilder6.length());
      assertNull(strBuilder6.getNullText());
      assertTrue(strBuilder6.isEmpty());
      assertNotNull(strBuilder6);
      assertFalse(strBuilder6.equals((Object)strBuilder0));
      assertFalse(strBuilder6.equals((Object)strBuilder5));
      assertFalse(strBuilder6.equals((Object)strBuilder2));
      assertFalse(strBuilder6.equals((Object)strBuilder3));
      assertFalse(strBuilder6.equals((Object)strBuilder4));
      assertFalse(strBuilder6.equals((Object)strBuilder1));
      
      strBuilder_StrBuilderReader0.reset();
      assertEquals(32, strBuilder0.capacity());
      assertEquals(30, strBuilder0.length());
      assertEquals(30, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder_StrBuilderReader0.ready());
      assertTrue(strBuilder_StrBuilderReader0.markSupported());
      assertFalse(strBuilder0.equals((Object)strBuilder5));
      assertFalse(strBuilder0.equals((Object)strBuilder4));
      assertFalse(strBuilder0.equals((Object)strBuilder6));
      assertSame(strBuilder0, strBuilder3);
      assertNotSame(strBuilder0, strBuilder5);
      assertNotSame(strBuilder0, strBuilder4);
      assertNotSame(strBuilder0, strBuilder6);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader1 = strBuilder6.new StrBuilderReader();
      assertNull(strBuilder6.getNewLineText());
      assertEquals(114, strBuilder6.capacity());
      assertEquals(0, strBuilder6.size());
      assertFalse(strBuilder6.isNotEmpty());
      assertEquals(0, strBuilder6.length());
      assertNull(strBuilder6.getNullText());
      assertTrue(strBuilder6.isEmpty());
      assertTrue(strBuilder_StrBuilderReader1.markSupported());
      assertFalse(strBuilder_StrBuilderReader1.ready());
      assertNotNull(strBuilder_StrBuilderReader1);
      assertFalse(strBuilder6.equals((Object)strBuilder0));
      assertFalse(strBuilder6.equals((Object)strBuilder5));
      assertFalse(strBuilder6.equals((Object)strBuilder2));
      assertFalse(strBuilder6.equals((Object)strBuilder3));
      assertFalse(strBuilder6.equals((Object)strBuilder4));
      assertFalse(strBuilder6.equals((Object)strBuilder1));
      assertFalse(strBuilder_StrBuilderReader1.equals((Object)strBuilder_StrBuilderReader0));
      
      StrBuilder strBuilder7 = strBuilder1.replaceFirst("', has a length less than 2", "OSN!O?|v");
      assertEquals(32, strBuilder0.capacity());
      assertEquals(11, strBuilder0.length());
      assertEquals(11, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(11, strBuilder1.length());
      assertTrue(strBuilder1.isNotEmpty());
      assertEquals(11, strBuilder1.size());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNullText());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(32, strBuilder7.capacity());
      assertNull(strBuilder7.getNewLineText());
      assertTrue(strBuilder7.isNotEmpty());
      assertEquals(11, strBuilder7.size());
      assertEquals(11, strBuilder7.length());
      assertNull(strBuilder7.getNullText());
      assertFalse(strBuilder7.isEmpty());
      assertNotNull(strBuilder7);
      assertFalse(strBuilder0.equals((Object)strBuilder5));
      assertFalse(strBuilder0.equals((Object)strBuilder4));
      assertFalse(strBuilder0.equals((Object)strBuilder6));
      assertFalse(strBuilder1.equals((Object)strBuilder4));
      assertFalse(strBuilder1.equals((Object)strBuilder5));
      assertFalse(strBuilder1.equals((Object)strBuilder6));
      assertFalse(strBuilder7.equals((Object)strBuilder4));
      assertFalse(strBuilder7.equals((Object)strBuilder6));
      assertFalse(strBuilder7.equals((Object)strBuilder5));
      assertSame(strBuilder0, strBuilder3);
      assertNotSame(strBuilder0, strBuilder5);
      assertNotSame(strBuilder0, strBuilder4);
      assertNotSame(strBuilder0, strBuilder6);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder7);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder7);
      assertNotSame(strBuilder1, strBuilder4);
      assertNotSame(strBuilder1, strBuilder5);
      assertNotSame(strBuilder1, strBuilder6);
      assertSame(strBuilder7, strBuilder3);
      assertSame(strBuilder7, strBuilder1);
      assertSame(strBuilder7, strBuilder2);
      assertSame(strBuilder7, strBuilder0);
      assertNotSame(strBuilder7, strBuilder4);
      assertNotSame(strBuilder7, strBuilder6);
      assertNotSame(strBuilder7, strBuilder5);
      
      StrBuilder strBuilder8 = strBuilder6.appendFixedWidthPadRight((-459), 32, '2');
      assertNull(strBuilder6.getNewLineText());
      assertEquals(114, strBuilder6.capacity());
      assertEquals(32, strBuilder6.size());
      assertFalse(strBuilder6.isEmpty());
      assertEquals(32, strBuilder6.length());
      assertNull(strBuilder6.getNullText());
      assertTrue(strBuilder6.isNotEmpty());
      assertEquals(32, strBuilder8.size());
      assertNull(strBuilder8.getNullText());
      assertEquals(32, strBuilder8.length());
      assertTrue(strBuilder8.isNotEmpty());
      assertNull(strBuilder8.getNewLineText());
      assertEquals(114, strBuilder8.capacity());
      assertFalse(strBuilder8.isEmpty());
      assertNotNull(strBuilder8);
      assertFalse(strBuilder6.equals((Object)strBuilder0));
      assertFalse(strBuilder6.equals((Object)strBuilder5));
      assertFalse(strBuilder6.equals((Object)strBuilder2));
      assertFalse(strBuilder6.equals((Object)strBuilder3));
      assertFalse(strBuilder6.equals((Object)strBuilder4));
      assertFalse(strBuilder6.equals((Object)strBuilder1));
      assertFalse(strBuilder6.equals((Object)strBuilder7));
      assertFalse(strBuilder8.equals((Object)strBuilder4));
      assertFalse(strBuilder8.equals((Object)strBuilder3));
      assertFalse(strBuilder8.equals((Object)strBuilder1));
      assertFalse(strBuilder8.equals((Object)strBuilder0));
      assertFalse(strBuilder8.equals((Object)strBuilder7));
      assertFalse(strBuilder8.equals((Object)strBuilder2));
      assertFalse(strBuilder8.equals((Object)strBuilder5));
      assertNotSame(strBuilder6, strBuilder0);
      assertNotSame(strBuilder6, strBuilder5);
      assertNotSame(strBuilder6, strBuilder2);
      assertNotSame(strBuilder6, strBuilder3);
      assertNotSame(strBuilder6, strBuilder4);
      assertSame(strBuilder6, strBuilder8);
      assertNotSame(strBuilder6, strBuilder1);
      assertNotSame(strBuilder6, strBuilder7);
      assertNotSame(strBuilder8, strBuilder4);
      assertNotSame(strBuilder8, strBuilder3);
      assertNotSame(strBuilder8, strBuilder1);
      assertNotSame(strBuilder8, strBuilder0);
      assertNotSame(strBuilder8, strBuilder7);
      assertNotSame(strBuilder8, strBuilder2);
      assertSame(strBuilder8, strBuilder6);
      assertNotSame(strBuilder8, strBuilder5);
      
      StrBuilder strBuilder9 = strBuilder3.appendFixedWidthPadLeft((Object) strBuilder_StrBuilderReader0, 1, 'p');
      assertEquals(32, strBuilder0.capacity());
      assertEquals(12, strBuilder0.length());
      assertEquals(12, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(12, strBuilder1.size());
      assertTrue(strBuilder1.isNotEmpty());
      assertEquals(12, strBuilder1.length());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNullText());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder2.getNullText());
      assertEquals(12, strBuilder2.length());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(32, strBuilder2.capacity());
      assertEquals(12, strBuilder2.size());
      assertTrue(strBuilder2.isNotEmpty());
      assertFalse(strBuilder2.isEmpty());
      assertTrue(strBuilder_StrBuilderReader0.ready());
      assertTrue(strBuilder_StrBuilderReader0.markSupported());
      assertTrue(strBuilder9.isNotEmpty());
      assertNull(strBuilder9.getNullText());
      assertNull(strBuilder9.getNewLineText());
      assertEquals(12, strBuilder9.length());
      assertEquals(32, strBuilder9.capacity());
      assertEquals(12, strBuilder9.size());
      assertFalse(strBuilder9.isEmpty());
      assertEquals(12, strBuilder3.length());
      assertNull(strBuilder3.getNewLineText());
      assertEquals(32, strBuilder3.capacity());
      assertEquals(12, strBuilder3.size());
      assertTrue(strBuilder3.isNotEmpty());
      assertNull(strBuilder3.getNullText());
      assertFalse(strBuilder3.isEmpty());
      assertNotNull(strBuilder9);
      assertFalse(strBuilder0.equals((Object)strBuilder5));
      assertFalse(strBuilder0.equals((Object)strBuilder8));
      assertFalse(strBuilder0.equals((Object)strBuilder4));
      assertFalse(strBuilder0.equals((Object)strBuilder6));
      assertFalse(strBuilder1.equals((Object)strBuilder4));
      assertFalse(strBuilder1.equals((Object)strBuilder8));
      assertFalse(strBuilder1.equals((Object)strBuilder5));
      assertFalse(strBuilder1.equals((Object)strBuilder6));
      assertFalse(strBuilder2.equals((Object)strBuilder8));
      assertFalse(strBuilder2.equals((Object)strBuilder4));
      assertFalse(strBuilder2.equals((Object)strBuilder6));
      assertFalse(strBuilder2.equals((Object)strBuilder5));
      assertFalse(strBuilder_StrBuilderReader0.equals((Object)strBuilder_StrBuilderReader1));
      assertFalse(strBuilder9.equals((Object)strBuilder4));
      assertFalse(strBuilder9.equals((Object)strBuilder8));
      assertFalse(strBuilder9.equals((Object)strBuilder6));
      assertFalse(strBuilder9.equals((Object)strBuilder5));
      assertFalse(strBuilder3.equals((Object)strBuilder8));
      assertFalse(strBuilder3.equals((Object)strBuilder6));
      assertFalse(strBuilder3.equals((Object)strBuilder5));
      assertFalse(strBuilder3.equals((Object)strBuilder4));
      assertEquals(3, objectArray0.length);
      assertSame(strBuilder0, strBuilder3);
      assertNotSame(strBuilder0, strBuilder5);
      assertNotSame(strBuilder0, strBuilder8);
      assertNotSame(strBuilder0, strBuilder4);
      assertNotSame(strBuilder0, strBuilder6);
      assertSame(strBuilder0, strBuilder9);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder7);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder9);
      assertSame(strBuilder1, strBuilder7);
      assertNotSame(strBuilder1, strBuilder4);
      assertNotSame(strBuilder1, strBuilder8);
      assertNotSame(strBuilder1, strBuilder5);
      assertNotSame(strBuilder1, strBuilder6);
      assertNotSame(strBuilder2, strBuilder8);
      assertSame(strBuilder2, strBuilder0);
      assertNotSame(strBuilder2, strBuilder4);
      assertSame(strBuilder2, strBuilder7);
      assertNotSame(strBuilder2, strBuilder6);
      assertNotSame(strBuilder2, strBuilder5);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder9);
      assertSame(strBuilder2, strBuilder3);
      assertNotSame(strBuilder_StrBuilderReader0, strBuilder_StrBuilderReader1);
      assertNotSame(strBuilder9, strBuilder4);
      assertNotSame(strBuilder9, strBuilder8);
      assertNotSame(strBuilder9, strBuilder6);
      assertSame(strBuilder9, strBuilder7);
      assertSame(strBuilder9, strBuilder2);
      assertSame(strBuilder9, strBuilder1);
      assertSame(strBuilder9, strBuilder0);
      assertSame(strBuilder9, strBuilder3);
      assertNotSame(strBuilder9, strBuilder5);
      assertSame(strBuilder3, strBuilder1);
      assertNotSame(strBuilder3, strBuilder8);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder2);
      assertSame(strBuilder3, strBuilder7);
      assertSame(strBuilder3, strBuilder9);
      assertNotSame(strBuilder3, strBuilder6);
      assertNotSame(strBuilder3, strBuilder5);
      assertNotSame(strBuilder3, strBuilder4);
      
      StrBuilder strBuilder10 = strBuilder0.appendln("");
      assertEquals(32, strBuilder0.capacity());
      assertEquals(13, strBuilder0.length());
      assertEquals(13, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder10.getNewLineText());
      assertEquals(13, strBuilder10.length());
      assertTrue(strBuilder10.isNotEmpty());
      assertEquals(32, strBuilder10.capacity());
      assertEquals(13, strBuilder10.size());
      assertNull(strBuilder10.getNullText());
      assertFalse(strBuilder10.isEmpty());
      assertNotNull(strBuilder10);
      assertFalse(strBuilder0.equals((Object)strBuilder5));
      assertFalse(strBuilder0.equals((Object)strBuilder8));
      assertFalse(strBuilder0.equals((Object)strBuilder4));
      assertFalse(strBuilder0.equals((Object)strBuilder6));
      assertFalse(strBuilder10.equals((Object)strBuilder5));
      assertFalse(strBuilder10.equals((Object)strBuilder8));
      assertFalse(strBuilder10.equals((Object)strBuilder6));
      assertFalse(strBuilder10.equals((Object)strBuilder4));
      assertSame(strBuilder0, strBuilder3);
      assertNotSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder10);
      assertNotSame(strBuilder0, strBuilder8);
      assertNotSame(strBuilder0, strBuilder4);
      assertNotSame(strBuilder0, strBuilder6);
      assertSame(strBuilder0, strBuilder9);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder7);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder10, strBuilder1);
      assertNotSame(strBuilder10, strBuilder5);
      assertSame(strBuilder10, strBuilder3);
      assertSame(strBuilder10, strBuilder7);
      assertNotSame(strBuilder10, strBuilder8);
      assertSame(strBuilder10, strBuilder0);
      assertSame(strBuilder10, strBuilder2);
      assertNotSame(strBuilder10, strBuilder6);
      assertSame(strBuilder10, strBuilder9);
      assertNotSame(strBuilder10, strBuilder4);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("_UhFz!hqQ.g");
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(43, strBuilder0.capacity());
      assertEquals(11, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(11, strBuilder0.length());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.appendln((String) null, 3, 738);
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(12, strBuilder0.size());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(43, strBuilder0.capacity());
      assertEquals(12, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(43, strBuilder1.capacity());
      assertNull(strBuilder1.getNullText());
      assertTrue(strBuilder1.isNotEmpty());
      assertEquals(12, strBuilder1.length());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(12, strBuilder1.size());
      assertFalse(strBuilder1.isEmpty());
      assertNotNull(strBuilder1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("dN");
      assertEquals(2, strBuilder0.length());
      assertEquals(2, strBuilder0.size());
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(34, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertNotNull(strBuilder0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      int int0 = strBuilder0.indexOf("dN");
      assertEquals(2, strBuilder0.length());
      assertEquals(2, strBuilder0.size());
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(34, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, int0);
      
      StrBuilder strBuilder1 = strBuilder0.insert(0, "dN");
      assertEquals(4, strBuilder0.length());
      assertEquals(4, strBuilder0.size());
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(34, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder1.isNotEmpty());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(34, strBuilder1.capacity());
      assertEquals(4, strBuilder1.length());
      assertEquals(4, strBuilder1.size());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertNotNull(strBuilder1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      
      Integer integer0 = new Integer(99);
      assertNotNull(integer0);
      assertEquals(99, (int)integer0);
      assertFalse(integer0.equals((Object)int0));
      
      char[] charArray0 = new char[1];
      charArray0[0] = '#';
      StrBuilder strBuilder2 = strBuilder1.append(charArray0);
      assertEquals(5, strBuilder0.size());
      assertEquals(5, strBuilder0.length());
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(34, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder1.isNotEmpty());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(34, strBuilder1.capacity());
      assertEquals(5, strBuilder1.length());
      assertEquals(5, strBuilder1.size());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(34, strBuilder2.capacity());
      assertTrue(strBuilder2.isNotEmpty());
      assertNull(strBuilder2.getNullText());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(5, strBuilder2.size());
      assertEquals(5, strBuilder2.length());
      assertFalse(strBuilder2.isEmpty());
      assertNotNull(strBuilder2);
      assertArrayEquals(new char[] {'#'}, charArray0);
      assertEquals(1, charArray0.length);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      
      int int1 = StrBuilder.CAPACITY;
      assertEquals(32, int1);
      assertFalse(int1 == int0);
      
      StrBuilder strBuilder3 = new StrBuilder(0);
      assertTrue(strBuilder3.isEmpty());
      assertFalse(strBuilder3.isNotEmpty());
      assertEquals(0, strBuilder3.size());
      assertNull(strBuilder3.getNullText());
      assertNull(strBuilder3.getNewLineText());
      assertEquals(0, strBuilder3.length());
      assertEquals(32, strBuilder3.capacity());
      assertNotNull(strBuilder3);
      assertFalse(strBuilder3.equals((Object)strBuilder1));
      assertFalse(strBuilder3.equals((Object)strBuilder2));
      assertFalse(strBuilder3.equals((Object)strBuilder0));
      
      StrBuilder.StrBuilderWriter strBuilder_StrBuilderWriter0 = strBuilder2.new StrBuilderWriter();
      assertEquals(5, strBuilder0.size());
      assertEquals(5, strBuilder0.length());
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(34, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder1.isNotEmpty());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(34, strBuilder1.capacity());
      assertEquals(5, strBuilder1.length());
      assertEquals(5, strBuilder1.size());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(34, strBuilder2.capacity());
      assertTrue(strBuilder2.isNotEmpty());
      assertNull(strBuilder2.getNullText());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(5, strBuilder2.size());
      assertEquals(5, strBuilder2.length());
      assertFalse(strBuilder2.isEmpty());
      assertNotNull(strBuilder_StrBuilderWriter0);
      assertFalse(strBuilder0.equals((Object)strBuilder3));
      assertFalse(strBuilder1.equals((Object)strBuilder3));
      assertFalse(strBuilder2.equals((Object)strBuilder3));
      assertArrayEquals(new char[] {'#'}, charArray0);
      assertEquals(1, charArray0.length);
      
      strBuilder_StrBuilderWriter0.write((String) null, 32, 99);
      assertEquals(5, strBuilder0.size());
      assertEquals(5, strBuilder0.length());
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(34, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder1.isNotEmpty());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(34, strBuilder1.capacity());
      assertEquals(5, strBuilder1.length());
      assertEquals(5, strBuilder1.size());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(34, strBuilder2.capacity());
      assertTrue(strBuilder2.isNotEmpty());
      assertNull(strBuilder2.getNullText());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(5, strBuilder2.size());
      assertEquals(5, strBuilder2.length());
      assertFalse(strBuilder2.isEmpty());
      assertFalse(strBuilder0.equals((Object)strBuilder3));
      assertFalse(strBuilder1.equals((Object)strBuilder3));
      assertFalse(strBuilder2.equals((Object)strBuilder3));
      assertArrayEquals(new char[] {'#'}, charArray0);
      assertEquals(1, charArray0.length);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertNotSame(strBuilder0, strBuilder3);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder2);
      assertNotSame(strBuilder1, strBuilder3);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertNotSame(strBuilder2, strBuilder3);
      
      StrBuilder strBuilder4 = new StrBuilder();
      assertEquals(0, strBuilder4.length());
      assertEquals(0, strBuilder4.size());
      assertFalse(strBuilder4.isNotEmpty());
      assertEquals(32, strBuilder4.capacity());
      assertTrue(strBuilder4.isEmpty());
      assertNull(strBuilder4.getNewLineText());
      assertNull(strBuilder4.getNullText());
      assertNotNull(strBuilder4);
      assertFalse(strBuilder4.equals((Object)strBuilder1));
      assertFalse(strBuilder4.equals((Object)strBuilder0));
      assertFalse(strBuilder4.equals((Object)strBuilder2));
      assertTrue(strBuilder4.equals((Object)strBuilder3));
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      StrBuilder strBuilder0 = new StrBuilder((-42));
      assertEquals(0, strBuilder0.size());
      assertFalse(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = new StrBuilder(0);
      assertFalse(strBuilder1.isNotEmpty());
      assertTrue(strBuilder1.isEmpty());
      assertEquals(0, strBuilder1.size());
      assertEquals(0, strBuilder1.length());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNullText());
      assertNotNull(strBuilder1);
      assertTrue(strBuilder1.equals((Object)strBuilder0));
      
      StrBuilder strBuilder2 = new StrBuilder(127);
      assertEquals(0, strBuilder2.size());
      assertFalse(strBuilder2.isNotEmpty());
      assertNull(strBuilder2.getNullText());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(127, strBuilder2.capacity());
      assertTrue(strBuilder2.isEmpty());
      assertEquals(0, strBuilder2.length());
      assertNotNull(strBuilder2);
      assertTrue(strBuilder2.equals((Object)strBuilder1));
      assertTrue(strBuilder2.equals((Object)strBuilder0));
      
      String string0 = strBuilder0.build();
      assertEquals(0, strBuilder0.size());
      assertFalse(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertNotNull(string0);
      assertEquals("", string0);
      assertTrue(strBuilder0.equals((Object)strBuilder2));
      assertTrue(strBuilder0.equals((Object)strBuilder1));
      assertNotSame(strBuilder0, strBuilder2);
      assertNotSame(strBuilder0, strBuilder1);
      
      StrBuilder strBuilder3 = strBuilder0.appendSeparator("", 5);
      assertEquals(0, strBuilder0.size());
      assertFalse(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder3.getNewLineText());
      assertNull(strBuilder3.getNullText());
      assertEquals(0, strBuilder3.length());
      assertEquals(0, strBuilder3.size());
      assertFalse(strBuilder3.isNotEmpty());
      assertEquals(32, strBuilder3.capacity());
      assertTrue(strBuilder3.isEmpty());
      assertNotNull(strBuilder3);
      assertTrue(strBuilder0.equals((Object)strBuilder2));
      assertTrue(strBuilder0.equals((Object)strBuilder1));
      assertTrue(strBuilder3.equals((Object)strBuilder1));
      assertTrue(strBuilder3.equals((Object)strBuilder2));
      assertNotSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder3);
      assertNotSame(strBuilder0, strBuilder1);
      assertNotSame(strBuilder3, strBuilder2);
      assertNotSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder0);
      
      // Undeclared exception!
      try { 
        strBuilder0.appendln((String) null, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("dN");
      assertEquals(2, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(2, strBuilder0.size());
      assertEquals(34, strBuilder0.capacity());
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertNotNull(strBuilder0);
      
      String string0 = strBuilder0.rightString(180);
      assertEquals(2, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(2, strBuilder0.size());
      assertEquals(34, strBuilder0.capacity());
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertNotNull(string0);
      assertEquals("dN", string0);
      
      StrBuilder strBuilder1 = strBuilder0.insert(1, (char[]) null);
      assertEquals(2, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(2, strBuilder0.size());
      assertEquals(34, strBuilder0.capacity());
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder1.isNotEmpty());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(34, strBuilder1.capacity());
      assertEquals(2, strBuilder1.length());
      assertEquals(2, strBuilder1.size());
      assertNotNull(strBuilder1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      
      StringBuffer stringBuffer0 = new StringBuffer(180);
      assertEquals("", stringBuffer0.toString());
      assertEquals(0, stringBuffer0.length());
      assertNotNull(stringBuffer0);
      
      // Undeclared exception!
      try { 
        strBuilder0.appendln(stringBuffer0, 2264, (-463));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // startIndex must be valid
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertFalse(strBuilder0.isNotEmpty());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = new StrBuilder();
      assertNull(strBuilder1.getNewLineText());
      assertEquals(0, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertEquals(0, strBuilder1.length());
      assertFalse(strBuilder1.isNotEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertTrue(strBuilder1.isEmpty());
      assertNotNull(strBuilder1);
      assertTrue(strBuilder1.equals((Object)strBuilder0));
      
      boolean boolean0 = strBuilder1.startsWith((String) null);
      assertNull(strBuilder1.getNewLineText());
      assertEquals(0, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertEquals(0, strBuilder1.length());
      assertFalse(strBuilder1.isNotEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertTrue(strBuilder1.isEmpty());
      assertFalse(boolean0);
      assertTrue(strBuilder1.equals((Object)strBuilder0));
      assertNotSame(strBuilder1, strBuilder0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertFalse(strBuilder0.isNotEmpty());
      assertNotNull(strBuilder0);
      
      boolean boolean0 = strBuilder0.startsWith("");
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertFalse(strBuilder0.isNotEmpty());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertTrue(strBuilder0.isEmpty());
      assertFalse(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertNotNull(strBuilder0);
      
      boolean boolean0 = strBuilder0.startsWith("rU");
      assertTrue(strBuilder0.isEmpty());
      assertFalse(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      StrBuilder strBuilder0 = new StrBuilder();
      assertTrue(strBuilder0.isEmpty());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertNotNull(strBuilder0);
      
      char[] charArray0 = new char[0];
      StrBuilder strBuilder1 = new StrBuilder(47);
      assertEquals(0, strBuilder1.size());
      assertFalse(strBuilder1.isNotEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(0, strBuilder1.length());
      assertTrue(strBuilder1.isEmpty());
      assertEquals(47, strBuilder1.capacity());
      assertNotNull(strBuilder1);
      assertTrue(strBuilder1.equals((Object)strBuilder0));
      
      StrBuilder strBuilder2 = strBuilder1.append((CharSequence) strBuilder0);
      assertTrue(strBuilder0.isEmpty());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder1.size());
      assertFalse(strBuilder1.isNotEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(0, strBuilder1.length());
      assertTrue(strBuilder1.isEmpty());
      assertEquals(47, strBuilder1.capacity());
      assertEquals(0, strBuilder2.size());
      assertNull(strBuilder2.getNullText());
      assertEquals(0, strBuilder2.length());
      assertNull(strBuilder2.getNewLineText());
      assertTrue(strBuilder2.isEmpty());
      assertEquals(47, strBuilder2.capacity());
      assertFalse(strBuilder2.isNotEmpty());
      assertNotNull(strBuilder2);
      assertTrue(strBuilder0.equals((Object)strBuilder1));
      assertTrue(strBuilder1.equals((Object)strBuilder0));
      assertTrue(strBuilder2.equals((Object)strBuilder0));
      assertNotSame(strBuilder0, strBuilder1);
      assertNotSame(strBuilder0, strBuilder2);
      assertSame(strBuilder1, strBuilder2);
      assertNotSame(strBuilder1, strBuilder0);
      assertNotSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      
      boolean boolean0 = strBuilder0.startsWith("");
      assertTrue(strBuilder0.isEmpty());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertTrue(boolean0);
      assertTrue(strBuilder0.equals((Object)strBuilder2));
      assertTrue(strBuilder0.equals((Object)strBuilder1));
      assertNotSame(strBuilder0, strBuilder1);
      assertNotSame(strBuilder0, strBuilder2);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("L>1&L]!");
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(39, strBuilder0.capacity());
      assertEquals(7, strBuilder0.size());
      assertEquals(7, strBuilder0.length());
      assertNotNull(strBuilder0);
      
      Object[] objectArray0 = new Object[6];
      objectArray0[1] = (Object) "L>1&L]!";
      objectArray0[1] = (Object) "L>1&L]!";
      objectArray0[0] = (Object) "org.apache.commons.ang3.text.StrMatcher$CharSetMatcher";
      objectArray0[3] = (Object) "L>1&L]!";
      objectArray0[4] = (Object) strBuilder0;
      StrBuilder strBuilder1 = new StrBuilder(64);
      assertNull(strBuilder1.getNullText());
      assertEquals(0, strBuilder1.length());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(0, strBuilder1.size());
      assertTrue(strBuilder1.isEmpty());
      assertEquals(64, strBuilder1.capacity());
      assertFalse(strBuilder1.isNotEmpty());
      assertNotNull(strBuilder1);
      assertFalse(strBuilder1.equals((Object)strBuilder0));
      
      StrBuilder strBuilder2 = strBuilder1.appendln(strBuilder0, 0, 0);
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(39, strBuilder0.capacity());
      assertEquals(7, strBuilder0.size());
      assertEquals(7, strBuilder0.length());
      assertTrue(strBuilder1.isNotEmpty());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(1, strBuilder1.length());
      assertEquals(64, strBuilder1.capacity());
      assertEquals(1, strBuilder1.size());
      assertEquals(64, strBuilder2.capacity());
      assertNull(strBuilder2.getNewLineText());
      assertTrue(strBuilder2.isNotEmpty());
      assertNull(strBuilder2.getNullText());
      assertEquals(1, strBuilder2.length());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(1, strBuilder2.size());
      assertNotNull(strBuilder2);
      assertFalse(strBuilder0.equals((Object)strBuilder1));
      assertFalse(strBuilder1.equals((Object)strBuilder0));
      assertFalse(strBuilder2.equals((Object)strBuilder0));
      assertNotSame(strBuilder0, strBuilder1);
      assertNotSame(strBuilder0, strBuilder2);
      assertNotSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder2, strBuilder1);
      assertNotSame(strBuilder2, strBuilder0);
      
      char[] charArray0 = new char[13];
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder2.new StrBuilderReader();
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(39, strBuilder0.capacity());
      assertEquals(7, strBuilder0.size());
      assertEquals(7, strBuilder0.length());
      assertTrue(strBuilder1.isNotEmpty());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(1, strBuilder1.length());
      assertEquals(64, strBuilder1.capacity());
      assertEquals(1, strBuilder1.size());
      assertEquals(64, strBuilder2.capacity());
      assertNull(strBuilder2.getNewLineText());
      assertTrue(strBuilder2.isNotEmpty());
      assertNull(strBuilder2.getNullText());
      assertEquals(1, strBuilder2.length());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(1, strBuilder2.size());
      assertTrue(strBuilder_StrBuilderReader0.ready());
      assertTrue(strBuilder_StrBuilderReader0.markSupported());
      assertNotNull(strBuilder_StrBuilderReader0);
      assertFalse(strBuilder0.equals((Object)strBuilder1));
      assertFalse(strBuilder0.equals((Object)strBuilder2));
      assertFalse(strBuilder1.equals((Object)strBuilder0));
      assertFalse(strBuilder2.equals((Object)strBuilder0));
      
      int int0 = strBuilder_StrBuilderReader0.read(charArray0);
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(39, strBuilder0.capacity());
      assertEquals(7, strBuilder0.size());
      assertEquals(7, strBuilder0.length());
      assertTrue(strBuilder1.isNotEmpty());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(1, strBuilder1.length());
      assertEquals(64, strBuilder1.capacity());
      assertEquals(1, strBuilder1.size());
      assertEquals(64, strBuilder2.capacity());
      assertNull(strBuilder2.getNewLineText());
      assertTrue(strBuilder2.isNotEmpty());
      assertNull(strBuilder2.getNullText());
      assertEquals(1, strBuilder2.length());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(1, strBuilder2.size());
      assertFalse(strBuilder_StrBuilderReader0.ready());
      assertTrue(strBuilder_StrBuilderReader0.markSupported());
      assertEquals(1, int0);
      assertFalse(strBuilder0.equals((Object)strBuilder1));
      assertFalse(strBuilder0.equals((Object)strBuilder2));
      assertFalse(strBuilder1.equals((Object)strBuilder0));
      assertFalse(strBuilder2.equals((Object)strBuilder0));
      assertEquals(13, charArray0.length);
      assertNotSame(strBuilder0, strBuilder1);
      assertNotSame(strBuilder0, strBuilder2);
      assertNotSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder2, strBuilder1);
      assertNotSame(strBuilder2, strBuilder0);
      
      StringWriter stringWriter0 = new StringWriter();
      assertEquals("", stringWriter0.toString());
      assertNotNull(stringWriter0);
      
      StrBuilder strBuilder3 = new StrBuilder();
      assertTrue(strBuilder3.isEmpty());
      assertEquals(32, strBuilder3.capacity());
      assertNull(strBuilder3.getNewLineText());
      assertNull(strBuilder3.getNullText());
      assertEquals(0, strBuilder3.length());
      assertFalse(strBuilder3.isNotEmpty());
      assertEquals(0, strBuilder3.size());
      assertNotNull(strBuilder3);
      assertFalse(strBuilder3.equals((Object)strBuilder2));
      assertFalse(strBuilder3.equals((Object)strBuilder1));
      assertFalse(strBuilder3.equals((Object)strBuilder0));
      
      StrBuilder strBuilder4 = strBuilder2.deleteAll('k');
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(39, strBuilder0.capacity());
      assertEquals(7, strBuilder0.size());
      assertEquals(7, strBuilder0.length());
      assertTrue(strBuilder1.isNotEmpty());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(1, strBuilder1.length());
      assertEquals(64, strBuilder1.capacity());
      assertEquals(1, strBuilder1.size());
      assertEquals(64, strBuilder2.capacity());
      assertNull(strBuilder2.getNewLineText());
      assertTrue(strBuilder2.isNotEmpty());
      assertNull(strBuilder2.getNullText());
      assertEquals(1, strBuilder2.length());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(1, strBuilder2.size());
      assertFalse(strBuilder4.isEmpty());
      assertEquals(1, strBuilder4.length());
      assertEquals(1, strBuilder4.size());
      assertNull(strBuilder4.getNullText());
      assertTrue(strBuilder4.isNotEmpty());
      assertNull(strBuilder4.getNewLineText());
      assertEquals(64, strBuilder4.capacity());
      assertNotNull(strBuilder4);
      assertFalse(strBuilder0.equals((Object)strBuilder1));
      assertFalse(strBuilder0.equals((Object)strBuilder3));
      assertFalse(strBuilder0.equals((Object)strBuilder2));
      assertFalse(strBuilder1.equals((Object)strBuilder0));
      assertFalse(strBuilder1.equals((Object)strBuilder3));
      assertFalse(strBuilder2.equals((Object)strBuilder3));
      assertFalse(strBuilder2.equals((Object)strBuilder0));
      assertFalse(strBuilder4.equals((Object)strBuilder0));
      assertFalse(strBuilder4.equals((Object)strBuilder3));
      assertNotSame(strBuilder0, strBuilder1);
      assertNotSame(strBuilder0, strBuilder3);
      assertNotSame(strBuilder0, strBuilder4);
      assertNotSame(strBuilder0, strBuilder2);
      assertNotSame(strBuilder1, strBuilder0);
      assertNotSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder4);
      assertSame(strBuilder2, strBuilder4);
      assertSame(strBuilder2, strBuilder1);
      assertNotSame(strBuilder2, strBuilder3);
      assertNotSame(strBuilder2, strBuilder0);
      assertNotSame(strBuilder4, strBuilder0);
      assertNotSame(strBuilder4, strBuilder3);
      assertSame(strBuilder4, strBuilder2);
      assertSame(strBuilder4, strBuilder1);
      
      StrBuilder strBuilder5 = new StrBuilder("org.apache.commons.ang3.text.StrMatcher$CharSetMatcher");
      assertEquals(54, strBuilder5.length());
      assertEquals(54, strBuilder5.size());
      assertTrue(strBuilder5.isNotEmpty());
      assertFalse(strBuilder5.isEmpty());
      assertNull(strBuilder5.getNullText());
      assertNull(strBuilder5.getNewLineText());
      assertEquals(86, strBuilder5.capacity());
      assertNotNull(strBuilder5);
      assertFalse(strBuilder5.equals((Object)strBuilder0));
      assertFalse(strBuilder5.equals((Object)strBuilder3));
      assertFalse(strBuilder5.equals((Object)strBuilder4));
      assertFalse(strBuilder5.equals((Object)strBuilder2));
      assertFalse(strBuilder5.equals((Object)strBuilder1));
      
      boolean boolean0 = strBuilder0.equalsIgnoreCase(strBuilder5);
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(39, strBuilder0.capacity());
      assertEquals(7, strBuilder0.size());
      assertEquals(7, strBuilder0.length());
      assertEquals(54, strBuilder5.length());
      assertEquals(54, strBuilder5.size());
      assertTrue(strBuilder5.isNotEmpty());
      assertFalse(strBuilder5.isEmpty());
      assertNull(strBuilder5.getNullText());
      assertNull(strBuilder5.getNewLineText());
      assertEquals(86, strBuilder5.capacity());
      assertFalse(boolean0);
      assertFalse(strBuilder0.equals((Object)strBuilder1));
      assertFalse(strBuilder0.equals((Object)strBuilder5));
      assertFalse(strBuilder0.equals((Object)strBuilder3));
      assertFalse(strBuilder0.equals((Object)strBuilder4));
      assertFalse(strBuilder0.equals((Object)strBuilder2));
      assertFalse(strBuilder5.equals((Object)strBuilder0));
      assertFalse(strBuilder5.equals((Object)strBuilder3));
      assertFalse(strBuilder5.equals((Object)strBuilder4));
      assertFalse(strBuilder5.equals((Object)strBuilder2));
      assertFalse(strBuilder5.equals((Object)strBuilder1));
      assertNotSame(strBuilder0, strBuilder1);
      assertNotSame(strBuilder0, strBuilder5);
      assertNotSame(strBuilder0, strBuilder3);
      assertNotSame(strBuilder0, strBuilder4);
      assertNotSame(strBuilder0, strBuilder2);
      assertNotSame(strBuilder5, strBuilder0);
      assertNotSame(strBuilder5, strBuilder3);
      assertNotSame(strBuilder5, strBuilder4);
      assertNotSame(strBuilder5, strBuilder2);
      assertNotSame(strBuilder5, strBuilder1);
      
      StrBuilder strBuilder6 = strBuilder4.appendNewLine();
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(39, strBuilder0.capacity());
      assertEquals(7, strBuilder0.size());
      assertEquals(7, strBuilder0.length());
      assertNull(strBuilder6.getNewLineText());
      assertFalse(strBuilder6.isEmpty());
      assertNull(strBuilder6.getNullText());
      assertEquals(2, strBuilder6.size());
      assertEquals(2, strBuilder6.length());
      assertTrue(strBuilder6.isNotEmpty());
      assertEquals(64, strBuilder6.capacity());
      assertTrue(strBuilder1.isNotEmpty());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(64, strBuilder1.capacity());
      assertEquals(2, strBuilder1.length());
      assertEquals(2, strBuilder1.size());
      assertEquals(64, strBuilder2.capacity());
      assertNull(strBuilder2.getNewLineText());
      assertTrue(strBuilder2.isNotEmpty());
      assertNull(strBuilder2.getNullText());
      assertEquals(2, strBuilder2.size());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(2, strBuilder2.length());
      assertFalse(strBuilder4.isEmpty());
      assertEquals(2, strBuilder4.size());
      assertEquals(2, strBuilder4.length());
      assertNull(strBuilder4.getNullText());
      assertTrue(strBuilder4.isNotEmpty());
      assertNull(strBuilder4.getNewLineText());
      assertEquals(64, strBuilder4.capacity());
      assertNotNull(strBuilder6);
      assertFalse(strBuilder0.equals((Object)strBuilder1));
      assertFalse(strBuilder0.equals((Object)strBuilder5));
      assertFalse(strBuilder0.equals((Object)strBuilder3));
      assertFalse(strBuilder0.equals((Object)strBuilder4));
      assertFalse(strBuilder0.equals((Object)strBuilder2));
      assertFalse(strBuilder6.equals((Object)strBuilder5));
      assertFalse(strBuilder6.equals((Object)strBuilder3));
      assertFalse(strBuilder6.equals((Object)strBuilder0));
      assertFalse(strBuilder1.equals((Object)strBuilder0));
      assertFalse(strBuilder1.equals((Object)strBuilder3));
      assertFalse(strBuilder1.equals((Object)strBuilder5));
      assertFalse(strBuilder2.equals((Object)strBuilder5));
      assertFalse(strBuilder2.equals((Object)strBuilder3));
      assertFalse(strBuilder2.equals((Object)strBuilder0));
      assertFalse(strBuilder4.equals((Object)strBuilder0));
      assertFalse(strBuilder4.equals((Object)strBuilder5));
      assertFalse(strBuilder4.equals((Object)strBuilder3));
      assertNotSame(strBuilder0, strBuilder1);
      assertNotSame(strBuilder0, strBuilder5);
      assertNotSame(strBuilder0, strBuilder3);
      assertNotSame(strBuilder0, strBuilder6);
      assertNotSame(strBuilder0, strBuilder4);
      assertNotSame(strBuilder0, strBuilder2);
      assertSame(strBuilder6, strBuilder4);
      assertNotSame(strBuilder6, strBuilder5);
      assertNotSame(strBuilder6, strBuilder3);
      assertNotSame(strBuilder6, strBuilder0);
      assertSame(strBuilder6, strBuilder2);
      assertSame(strBuilder6, strBuilder1);
      assertSame(strBuilder1, strBuilder6);
      assertNotSame(strBuilder1, strBuilder0);
      assertNotSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder2);
      assertNotSame(strBuilder1, strBuilder5);
      assertSame(strBuilder1, strBuilder4);
      assertSame(strBuilder2, strBuilder4);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder6);
      assertNotSame(strBuilder2, strBuilder5);
      assertNotSame(strBuilder2, strBuilder0);
      assertNotSame(strBuilder2, strBuilder3);
      assertNotSame(strBuilder4, strBuilder0);
      assertNotSame(strBuilder4, strBuilder5);
      assertNotSame(strBuilder4, strBuilder3);
      assertSame(strBuilder4, strBuilder2);
      assertSame(strBuilder4, strBuilder1);
      assertSame(strBuilder4, strBuilder6);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      int int0 = 0;
      StringBuffer stringBuffer0 = new StringBuffer("org.apache.commons.lang3.text.StrBuilder$StrBuilderTokenizer");
      assertEquals(60, stringBuffer0.length());
      assertEquals("org.apache.commons.lang3.text.StrBuilder$StrBuilderTokenizer", stringBuffer0.toString());
      assertNotNull(stringBuffer0);
      
      int int1 = 62;
      CharBuffer charBuffer0 = CharBuffer.allocate(62);
      assertEquals(0, charBuffer0.position());
      assertEquals(62, charBuffer0.remaining());
      assertEquals(62, charBuffer0.capacity());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", charBuffer0.toString());
      assertEquals(62, charBuffer0.limit());
      assertFalse(charBuffer0.isDirect());
      assertEquals(62, charBuffer0.length());
      assertEquals(0, charBuffer0.arrayOffset());
      assertFalse(charBuffer0.isReadOnly());
      assertTrue(charBuffer0.hasArray());
      assertTrue(charBuffer0.hasRemaining());
      assertNotNull(charBuffer0);
      
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertFalse(strBuilder0.isNotEmpty());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertNotNull(strBuilder0);
      
      char[] charArray0 = new char[3];
      charArray0[0] = '\\';
      charArray0[1] = 'L';
      charArray0[2] = 'L';
      CharBuffer charBuffer1 = CharBuffer.wrap(charArray0);
      assertTrue(charBuffer1.hasArray());
      assertEquals(3, charBuffer1.length());
      assertFalse(charBuffer1.isDirect());
      assertEquals(0, charBuffer1.arrayOffset());
      assertEquals("\\LL", charBuffer1.toString());
      assertEquals(3, charBuffer1.capacity());
      assertEquals(3, charBuffer1.limit());
      assertFalse(charBuffer1.isReadOnly());
      assertEquals(0, charBuffer1.position());
      assertTrue(charBuffer1.hasRemaining());
      assertEquals(3, charBuffer1.remaining());
      assertNotNull(charBuffer1);
      assertFalse(charBuffer1.equals((Object)charBuffer0));
      assertArrayEquals(new char[] {'\\', 'L', 'L'}, charArray0);
      assertEquals(3, charArray0.length);
      assertNotSame(charBuffer1, charBuffer0);
      
      StrBuilder strBuilder1 = strBuilder0.append(charBuffer1, 0, 0);
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertFalse(strBuilder0.isNotEmpty());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(charBuffer1.hasArray());
      assertEquals(3, charBuffer1.length());
      assertFalse(charBuffer1.isDirect());
      assertEquals(0, charBuffer1.arrayOffset());
      assertEquals("\\LL", charBuffer1.toString());
      assertEquals(3, charBuffer1.capacity());
      assertEquals(3, charBuffer1.limit());
      assertFalse(charBuffer1.isReadOnly());
      assertEquals(0, charBuffer1.position());
      assertTrue(charBuffer1.hasRemaining());
      assertEquals(3, charBuffer1.remaining());
      assertEquals(0, strBuilder1.size());
      assertFalse(strBuilder1.isNotEmpty());
      assertNull(strBuilder1.getNullText());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertTrue(strBuilder1.isEmpty());
      assertEquals(0, strBuilder1.length());
      assertNotNull(strBuilder1);
      assertFalse(charBuffer1.equals((Object)charBuffer0));
      assertArrayEquals(new char[] {'\\', 'L', 'L'}, charArray0);
      assertEquals(3, charArray0.length);
      assertSame(strBuilder0, strBuilder1);
      assertNotSame(charBuffer1, charBuffer0);
      assertSame(strBuilder1, strBuilder0);
      
      StrBuilder strBuilder2 = new StrBuilder();
      assertNull(strBuilder2.getNullText());
      assertEquals(0, strBuilder2.length());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(0, strBuilder2.size());
      assertFalse(strBuilder2.isNotEmpty());
      assertTrue(strBuilder2.isEmpty());
      assertEquals(32, strBuilder2.capacity());
      assertNotNull(strBuilder2);
      assertTrue(strBuilder2.equals((Object)strBuilder1));
      assertTrue(strBuilder2.equals((Object)strBuilder0));
      
      // Undeclared exception!
      try { 
        strBuilder2.appendTo((Appendable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(0);
      assertEquals(32, strBuilder0.capacity());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.appendPadding(0, 'Q');
      assertEquals(32, strBuilder0.capacity());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(32, strBuilder1.capacity());
      assertTrue(strBuilder1.isEmpty());
      assertEquals(0, strBuilder1.length());
      assertEquals(0, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertFalse(strBuilder1.isNotEmpty());
      assertNotNull(strBuilder1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      
      StrBuilder strBuilder2 = strBuilder1.append((float) 1);
      assertFalse(strBuilder0.isEmpty());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(3, strBuilder0.length());
      assertEquals(3, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertTrue(strBuilder1.isNotEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNullText());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(3, strBuilder1.length());
      assertEquals(3, strBuilder1.size());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(32, strBuilder2.capacity());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(3, strBuilder2.length());
      assertEquals(3, strBuilder2.size());
      assertNull(strBuilder2.getNullText());
      assertTrue(strBuilder2.isNotEmpty());
      assertNotNull(strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      
      boolean boolean0 = strBuilder0.contains('Q');
      assertFalse(strBuilder0.isEmpty());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(3, strBuilder0.length());
      assertEquals(3, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertFalse(boolean0);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
      assertFalse(strBuilder0.isEmpty());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(3, strBuilder0.length());
      assertEquals(3, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder_StrBuilderReader0.markSupported());
      assertTrue(strBuilder_StrBuilderReader0.ready());
      assertNotNull(strBuilder_StrBuilderReader0);
      
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) strBuilder_StrBuilderReader0;
      objectArray0[1] = (Object) strBuilder1;
      objectArray0[2] = (Object) strBuilder0;
      StrBuilder strBuilder3 = strBuilder2.append("', has a length less than 2", objectArray0);
      assertEquals(30, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(30, strBuilder0.length());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(30, strBuilder1.length());
      assertTrue(strBuilder1.isNotEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(30, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(32, strBuilder2.capacity());
      assertEquals(30, strBuilder2.size());
      assertFalse(strBuilder2.isEmpty());
      assertNull(strBuilder2.getNullText());
      assertEquals(30, strBuilder2.length());
      assertTrue(strBuilder2.isNotEmpty());
      assertEquals(32, strBuilder3.capacity());
      assertNull(strBuilder3.getNewLineText());
      assertFalse(strBuilder3.isEmpty());
      assertNull(strBuilder3.getNullText());
      assertEquals(30, strBuilder3.size());
      assertTrue(strBuilder3.isNotEmpty());
      assertEquals(30, strBuilder3.length());
      assertNotNull(strBuilder3);
      assertEquals(3, objectArray0.length);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder3);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder2);
      assertSame(strBuilder3, strBuilder0);
      
      StrBuilder strBuilder4 = new StrBuilder(1);
      assertNull(strBuilder4.getNewLineText());
      assertEquals(1, strBuilder4.capacity());
      assertTrue(strBuilder4.isEmpty());
      assertFalse(strBuilder4.isNotEmpty());
      assertNull(strBuilder4.getNullText());
      assertEquals(0, strBuilder4.length());
      assertEquals(0, strBuilder4.size());
      assertNotNull(strBuilder4);
      assertFalse(strBuilder4.equals((Object)strBuilder0));
      assertFalse(strBuilder4.equals((Object)strBuilder3));
      assertFalse(strBuilder4.equals((Object)strBuilder1));
      assertFalse(strBuilder4.equals((Object)strBuilder2));
      
      char[] charArray0 = new char[3];
      int int0 = strBuilder3.validateRange(9, 9);
      assertEquals(30, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(30, strBuilder0.length());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(30, strBuilder1.length());
      assertTrue(strBuilder1.isNotEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(30, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(32, strBuilder2.capacity());
      assertEquals(30, strBuilder2.size());
      assertFalse(strBuilder2.isEmpty());
      assertNull(strBuilder2.getNullText());
      assertEquals(30, strBuilder2.length());
      assertTrue(strBuilder2.isNotEmpty());
      assertEquals(32, strBuilder3.capacity());
      assertNull(strBuilder3.getNewLineText());
      assertFalse(strBuilder3.isEmpty());
      assertNull(strBuilder3.getNullText());
      assertEquals(30, strBuilder3.size());
      assertTrue(strBuilder3.isNotEmpty());
      assertEquals(30, strBuilder3.length());
      assertEquals(9, int0);
      assertFalse(strBuilder0.equals((Object)strBuilder4));
      assertFalse(strBuilder1.equals((Object)strBuilder4));
      assertFalse(strBuilder2.equals((Object)strBuilder4));
      assertFalse(strBuilder3.equals((Object)strBuilder4));
      assertEquals(3, objectArray0.length);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder3);
      assertNotSame(strBuilder0, strBuilder4);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder2);
      assertNotSame(strBuilder1, strBuilder4);
      assertSame(strBuilder1, strBuilder3);
      assertNotSame(strBuilder2, strBuilder4);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder3);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder2);
      assertNotSame(strBuilder3, strBuilder4);
      assertSame(strBuilder3, strBuilder0);
      
      charArray0[0] = '2';
      objectArray0[1] = (Object) 'q';
      StrBuilder strBuilder5 = strBuilder3.appendln(charArray0);
      assertFalse(strBuilder0.isEmpty());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(34, strBuilder0.size());
      assertEquals(34, strBuilder0.length());
      assertEquals(66, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(66, strBuilder1.capacity());
      assertTrue(strBuilder1.isNotEmpty());
      assertEquals(34, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(34, strBuilder1.size());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(66, strBuilder2.capacity());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(34, strBuilder2.size());
      assertEquals(34, strBuilder2.length());
      assertNull(strBuilder2.getNullText());
      assertTrue(strBuilder2.isNotEmpty());
      assertNull(strBuilder3.getNewLineText());
      assertFalse(strBuilder3.isEmpty());
      assertNull(strBuilder3.getNullText());
      assertEquals(34, strBuilder3.size());
      assertEquals(34, strBuilder3.length());
      assertTrue(strBuilder3.isNotEmpty());
      assertEquals(66, strBuilder3.capacity());
      assertEquals(34, strBuilder5.length());
      assertEquals(34, strBuilder5.size());
      assertEquals(66, strBuilder5.capacity());
      assertFalse(strBuilder5.isEmpty());
      assertTrue(strBuilder5.isNotEmpty());
      assertNull(strBuilder5.getNullText());
      assertNull(strBuilder5.getNewLineText());
      assertNotNull(strBuilder5);
      assertFalse(strBuilder0.equals((Object)strBuilder4));
      assertFalse(strBuilder1.equals((Object)strBuilder4));
      assertFalse(strBuilder2.equals((Object)strBuilder4));
      assertFalse(strBuilder3.equals((Object)strBuilder4));
      assertFalse(strBuilder5.equals((Object)strBuilder4));
      assertArrayEquals(new char[] {'2', '\u0000', '\u0000'}, charArray0);
      assertEquals(3, objectArray0.length);
      assertEquals(3, charArray0.length);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder3);
      assertNotSame(strBuilder0, strBuilder4);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder5);
      assertSame(strBuilder1, strBuilder2);
      assertNotSame(strBuilder1, strBuilder4);
      assertSame(strBuilder1, strBuilder3);
      assertNotSame(strBuilder2, strBuilder4);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder3);
      assertSame(strBuilder2, strBuilder5);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder2);
      assertNotSame(strBuilder3, strBuilder4);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder5);
      assertSame(strBuilder5, strBuilder0);
      assertSame(strBuilder5, strBuilder2);
      assertSame(strBuilder5, strBuilder1);
      assertNotSame(strBuilder5, strBuilder4);
      assertSame(strBuilder5, strBuilder3);
      
      StrBuilder strBuilder6 = strBuilder5.append((CharBuffer) null, 32, 0);
      assertEquals(34, strBuilder6.length());
      assertEquals(34, strBuilder6.size());
      assertTrue(strBuilder6.isNotEmpty());
      assertFalse(strBuilder6.isEmpty());
      assertNull(strBuilder6.getNewLineText());
      assertNull(strBuilder6.getNullText());
      assertEquals(66, strBuilder6.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(34, strBuilder0.size());
      assertEquals(34, strBuilder0.length());
      assertEquals(66, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(66, strBuilder1.capacity());
      assertTrue(strBuilder1.isNotEmpty());
      assertEquals(34, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(34, strBuilder1.size());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(66, strBuilder2.capacity());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(34, strBuilder2.size());
      assertEquals(34, strBuilder2.length());
      assertNull(strBuilder2.getNullText());
      assertTrue(strBuilder2.isNotEmpty());
      assertNull(strBuilder3.getNewLineText());
      assertFalse(strBuilder3.isEmpty());
      assertNull(strBuilder3.getNullText());
      assertEquals(34, strBuilder3.size());
      assertEquals(34, strBuilder3.length());
      assertTrue(strBuilder3.isNotEmpty());
      assertEquals(66, strBuilder3.capacity());
      assertEquals(34, strBuilder5.length());
      assertEquals(34, strBuilder5.size());
      assertEquals(66, strBuilder5.capacity());
      assertFalse(strBuilder5.isEmpty());
      assertTrue(strBuilder5.isNotEmpty());
      assertNull(strBuilder5.getNullText());
      assertNull(strBuilder5.getNewLineText());
      assertNotNull(strBuilder6);
      assertFalse(strBuilder6.equals((Object)strBuilder4));
      assertFalse(strBuilder0.equals((Object)strBuilder4));
      assertFalse(strBuilder1.equals((Object)strBuilder4));
      assertFalse(strBuilder2.equals((Object)strBuilder4));
      assertFalse(strBuilder3.equals((Object)strBuilder4));
      assertFalse(strBuilder5.equals((Object)strBuilder4));
      assertArrayEquals(new char[] {'2', '\u0000', '\u0000'}, charArray0);
      assertEquals(3, objectArray0.length);
      assertEquals(3, charArray0.length);
      assertSame(strBuilder6, strBuilder3);
      assertSame(strBuilder6, strBuilder5);
      assertSame(strBuilder6, strBuilder2);
      assertNotSame(strBuilder6, strBuilder4);
      assertSame(strBuilder6, strBuilder1);
      assertSame(strBuilder6, strBuilder0);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder6);
      assertNotSame(strBuilder0, strBuilder4);
      assertSame(strBuilder1, strBuilder6);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder5);
      assertSame(strBuilder1, strBuilder2);
      assertNotSame(strBuilder1, strBuilder4);
      assertSame(strBuilder1, strBuilder3);
      assertNotSame(strBuilder2, strBuilder4);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder3);
      assertSame(strBuilder2, strBuilder6);
      assertSame(strBuilder2, strBuilder5);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder2);
      assertNotSame(strBuilder3, strBuilder4);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder5);
      assertSame(strBuilder3, strBuilder6);
      assertSame(strBuilder5, strBuilder0);
      assertSame(strBuilder5, strBuilder6);
      assertSame(strBuilder5, strBuilder2);
      assertSame(strBuilder5, strBuilder1);
      assertNotSame(strBuilder5, strBuilder4);
      assertSame(strBuilder5, strBuilder3);
      
      IntStream intStream0 = strBuilder0.codePoints();
      assertFalse(strBuilder0.isEmpty());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(34, strBuilder0.size());
      assertEquals(34, strBuilder0.length());
      assertEquals(66, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertNotNull(intStream0);
      assertFalse(strBuilder0.equals((Object)strBuilder4));
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder6);
      assertNotSame(strBuilder0, strBuilder4);
      
      char[] charArray1 = strBuilder2.getChars(charArray0);
      assertFalse(strBuilder0.isEmpty());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(34, strBuilder0.size());
      assertEquals(34, strBuilder0.length());
      assertEquals(66, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(66, strBuilder1.capacity());
      assertTrue(strBuilder1.isNotEmpty());
      assertEquals(34, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(34, strBuilder1.size());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(66, strBuilder2.capacity());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(34, strBuilder2.size());
      assertEquals(34, strBuilder2.length());
      assertNull(strBuilder2.getNullText());
      assertTrue(strBuilder2.isNotEmpty());
      assertNotNull(charArray1);
      assertFalse(strBuilder0.equals((Object)strBuilder4));
      assertFalse(strBuilder1.equals((Object)strBuilder4));
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(strBuilder2.equals((Object)strBuilder4));
      assertArrayEquals(new char[] {'2', '\u0000', '\u0000'}, charArray0);
      assertEquals(34, charArray1.length);
      assertEquals(3, charArray0.length);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder6);
      assertNotSame(strBuilder0, strBuilder4);
      assertSame(strBuilder1, strBuilder6);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder5);
      assertSame(strBuilder1, strBuilder2);
      assertNotSame(strBuilder1, strBuilder4);
      assertSame(strBuilder1, strBuilder3);
      assertNotSame(charArray1, charArray0);
      assertNotSame(strBuilder2, strBuilder4);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder3);
      assertSame(strBuilder2, strBuilder6);
      assertSame(strBuilder2, strBuilder5);
      assertSame(strBuilder2, strBuilder0);
      assertNotSame(charArray0, charArray1);
      
      StringBuilder stringBuilder0 = new StringBuilder(strBuilder2);
      assertFalse(strBuilder0.isEmpty());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(34, strBuilder0.size());
      assertEquals(34, strBuilder0.length());
      assertEquals(66, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(66, strBuilder1.capacity());
      assertTrue(strBuilder1.isNotEmpty());
      assertEquals(34, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(34, strBuilder1.size());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(66, strBuilder2.capacity());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(34, strBuilder2.size());
      assertEquals(34, strBuilder2.length());
      assertNull(strBuilder2.getNullText());
      assertTrue(strBuilder2.isNotEmpty());
      assertEquals("1.0', has a length less than 22\u0000\u0000\n", stringBuilder0.toString());
      assertNotNull(stringBuilder0);
      assertFalse(strBuilder0.equals((Object)strBuilder4));
      assertFalse(strBuilder1.equals((Object)strBuilder4));
      assertFalse(strBuilder2.equals((Object)strBuilder4));
      
      StringBuilder stringBuilder1 = stringBuilder0.insert(0, "MF3$e*+KvlT5vrSRoPp");
      assertFalse(strBuilder0.isEmpty());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(34, strBuilder0.size());
      assertEquals(34, strBuilder0.length());
      assertEquals(66, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(66, strBuilder1.capacity());
      assertTrue(strBuilder1.isNotEmpty());
      assertEquals(34, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(34, strBuilder1.size());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(66, strBuilder2.capacity());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(34, strBuilder2.size());
      assertEquals(34, strBuilder2.length());
      assertNull(strBuilder2.getNullText());
      assertTrue(strBuilder2.isNotEmpty());
      assertEquals("MF3$e*+KvlT5vrSRoPp1.0', has a length less than 22\u0000\u0000\n", stringBuilder0.toString());
      assertEquals("MF3$e*+KvlT5vrSRoPp1.0', has a length less than 22\u0000\u0000\n", stringBuilder1.toString());
      assertNotNull(stringBuilder1);
      assertFalse(strBuilder0.equals((Object)strBuilder4));
      assertFalse(strBuilder1.equals((Object)strBuilder4));
      assertFalse(strBuilder2.equals((Object)strBuilder4));
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder6);
      assertNotSame(strBuilder0, strBuilder4);
      assertSame(strBuilder1, strBuilder6);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder5);
      assertSame(strBuilder1, strBuilder2);
      assertNotSame(strBuilder1, strBuilder4);
      assertSame(strBuilder1, strBuilder3);
      assertNotSame(strBuilder2, strBuilder4);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder3);
      assertSame(strBuilder2, strBuilder6);
      assertSame(strBuilder2, strBuilder5);
      assertSame(strBuilder2, strBuilder0);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder1, stringBuilder0);
      
      StringBuilder stringBuilder2 = stringBuilder1.append((CharSequence) strBuilder4);
      assertFalse(strBuilder0.isEmpty());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(34, strBuilder0.size());
      assertEquals(34, strBuilder0.length());
      assertEquals(66, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(66, strBuilder1.capacity());
      assertTrue(strBuilder1.isNotEmpty());
      assertEquals(34, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(34, strBuilder1.size());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(66, strBuilder2.capacity());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(34, strBuilder2.size());
      assertEquals(34, strBuilder2.length());
      assertNull(strBuilder2.getNullText());
      assertTrue(strBuilder2.isNotEmpty());
      assertEquals("MF3$e*+KvlT5vrSRoPp1.0', has a length less than 22\u0000\u0000\n", stringBuilder0.toString());
      assertEquals("MF3$e*+KvlT5vrSRoPp1.0', has a length less than 22\u0000\u0000\n", stringBuilder1.toString());
      assertEquals("MF3$e*+KvlT5vrSRoPp1.0', has a length less than 22\u0000\u0000\n", stringBuilder2.toString());
      assertNull(strBuilder4.getNewLineText());
      assertEquals(1, strBuilder4.capacity());
      assertTrue(strBuilder4.isEmpty());
      assertFalse(strBuilder4.isNotEmpty());
      assertNull(strBuilder4.getNullText());
      assertEquals(0, strBuilder4.length());
      assertEquals(0, strBuilder4.size());
      assertNotNull(stringBuilder2);
      assertFalse(strBuilder0.equals((Object)strBuilder4));
      assertFalse(strBuilder1.equals((Object)strBuilder4));
      assertFalse(strBuilder2.equals((Object)strBuilder4));
      assertFalse(strBuilder4.equals((Object)strBuilder0));
      assertFalse(strBuilder4.equals((Object)strBuilder3));
      assertFalse(strBuilder4.equals((Object)strBuilder1));
      assertFalse(strBuilder4.equals((Object)strBuilder2));
      assertFalse(strBuilder4.equals((Object)strBuilder5));
      assertFalse(strBuilder4.equals((Object)strBuilder6));
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder6);
      assertNotSame(strBuilder0, strBuilder4);
      assertSame(strBuilder1, strBuilder6);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder5);
      assertSame(strBuilder1, strBuilder2);
      assertNotSame(strBuilder1, strBuilder4);
      assertSame(strBuilder1, strBuilder3);
      assertNotSame(strBuilder2, strBuilder4);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder3);
      assertSame(strBuilder2, strBuilder6);
      assertSame(strBuilder2, strBuilder5);
      assertSame(strBuilder2, strBuilder0);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder0, stringBuilder2);
      assertSame(stringBuilder1, stringBuilder0);
      assertSame(stringBuilder1, stringBuilder2);
      assertSame(stringBuilder2, stringBuilder0);
      assertSame(stringBuilder2, stringBuilder1);
      assertNotSame(strBuilder4, strBuilder0);
      assertNotSame(strBuilder4, strBuilder3);
      assertNotSame(strBuilder4, strBuilder1);
      assertNotSame(strBuilder4, strBuilder2);
      assertNotSame(strBuilder4, strBuilder5);
      assertNotSame(strBuilder4, strBuilder6);
      
      StringBuilder stringBuilder3 = stringBuilder2.append((float) 0);
      assertFalse(strBuilder0.isEmpty());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(34, strBuilder0.size());
      assertEquals(34, strBuilder0.length());
      assertEquals(66, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(66, strBuilder1.capacity());
      assertTrue(strBuilder1.isNotEmpty());
      assertEquals(34, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(34, strBuilder1.size());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(66, strBuilder2.capacity());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(34, strBuilder2.size());
      assertEquals(34, strBuilder2.length());
      assertNull(strBuilder2.getNullText());
      assertTrue(strBuilder2.isNotEmpty());
      assertEquals("MF3$e*+KvlT5vrSRoPp1.0', has a length less than 22\u0000\u0000\n0.0", stringBuilder0.toString());
      assertEquals("MF3$e*+KvlT5vrSRoPp1.0', has a length less than 22\u0000\u0000\n0.0", stringBuilder1.toString());
      assertEquals("MF3$e*+KvlT5vrSRoPp1.0', has a length less than 22\u0000\u0000\n0.0", stringBuilder2.toString());
      assertEquals("MF3$e*+KvlT5vrSRoPp1.0', has a length less than 22\u0000\u0000\n0.0", stringBuilder3.toString());
      assertNull(strBuilder4.getNewLineText());
      assertEquals(1, strBuilder4.capacity());
      assertTrue(strBuilder4.isEmpty());
      assertFalse(strBuilder4.isNotEmpty());
      assertNull(strBuilder4.getNullText());
      assertEquals(0, strBuilder4.length());
      assertEquals(0, strBuilder4.size());
      assertNotNull(stringBuilder3);
      assertFalse(strBuilder0.equals((Object)strBuilder4));
      assertFalse(strBuilder1.equals((Object)strBuilder4));
      assertFalse(strBuilder2.equals((Object)strBuilder4));
      assertFalse(strBuilder4.equals((Object)strBuilder0));
      assertFalse(strBuilder4.equals((Object)strBuilder3));
      assertFalse(strBuilder4.equals((Object)strBuilder1));
      assertFalse(strBuilder4.equals((Object)strBuilder2));
      assertFalse(strBuilder4.equals((Object)strBuilder5));
      assertFalse(strBuilder4.equals((Object)strBuilder6));
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder6);
      assertNotSame(strBuilder0, strBuilder4);
      assertSame(strBuilder1, strBuilder6);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder5);
      assertSame(strBuilder1, strBuilder2);
      assertNotSame(strBuilder1, strBuilder4);
      assertSame(strBuilder1, strBuilder3);
      assertNotSame(strBuilder2, strBuilder4);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder3);
      assertSame(strBuilder2, strBuilder6);
      assertSame(strBuilder2, strBuilder5);
      assertSame(strBuilder2, strBuilder0);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder0, stringBuilder2);
      assertSame(stringBuilder0, stringBuilder3);
      assertSame(stringBuilder1, stringBuilder3);
      assertSame(stringBuilder1, stringBuilder0);
      assertSame(stringBuilder1, stringBuilder2);
      assertSame(stringBuilder2, stringBuilder0);
      assertSame(stringBuilder2, stringBuilder1);
      assertSame(stringBuilder2, stringBuilder3);
      assertSame(stringBuilder3, stringBuilder1);
      assertSame(stringBuilder3, stringBuilder2);
      assertSame(stringBuilder3, stringBuilder0);
      assertNotSame(strBuilder4, strBuilder0);
      assertNotSame(strBuilder4, strBuilder3);
      assertNotSame(strBuilder4, strBuilder1);
      assertNotSame(strBuilder4, strBuilder2);
      assertNotSame(strBuilder4, strBuilder5);
      assertNotSame(strBuilder4, strBuilder6);
      
      StringWriter stringWriter0 = new StringWriter(0);
      assertEquals("", stringWriter0.toString());
      assertNotNull(stringWriter0);
      
      StrBuilder strBuilder7 = strBuilder4.appendFixedWidthPadLeft(1, 1, 'Q');
      assertFalse(strBuilder7.isEmpty());
      assertEquals(1, strBuilder7.length());
      assertEquals(1, strBuilder7.size());
      assertEquals(1, strBuilder7.capacity());
      assertTrue(strBuilder7.isNotEmpty());
      assertNull(strBuilder7.getNullText());
      assertNull(strBuilder7.getNewLineText());
      assertNull(strBuilder4.getNewLineText());
      assertTrue(strBuilder4.isNotEmpty());
      assertEquals(1, strBuilder4.capacity());
      assertEquals(1, strBuilder4.size());
      assertNull(strBuilder4.getNullText());
      assertEquals(1, strBuilder4.length());
      assertFalse(strBuilder4.isEmpty());
      assertNotNull(strBuilder7);
      assertFalse(strBuilder7.equals((Object)strBuilder5));
      assertFalse(strBuilder7.equals((Object)strBuilder2));
      assertFalse(strBuilder7.equals((Object)strBuilder1));
      assertFalse(strBuilder7.equals((Object)strBuilder0));
      assertFalse(strBuilder7.equals((Object)strBuilder6));
      assertFalse(strBuilder7.equals((Object)strBuilder3));
      assertFalse(strBuilder4.equals((Object)strBuilder0));
      assertFalse(strBuilder4.equals((Object)strBuilder3));
      assertFalse(strBuilder4.equals((Object)strBuilder1));
      assertFalse(strBuilder4.equals((Object)strBuilder2));
      assertFalse(strBuilder4.equals((Object)strBuilder5));
      assertFalse(strBuilder4.equals((Object)strBuilder6));
      assertNotSame(strBuilder7, strBuilder5);
      assertNotSame(strBuilder7, strBuilder2);
      assertNotSame(strBuilder7, strBuilder1);
      assertSame(strBuilder7, strBuilder4);
      assertNotSame(strBuilder7, strBuilder0);
      assertNotSame(strBuilder7, strBuilder6);
      assertNotSame(strBuilder7, strBuilder3);
      assertNotSame(strBuilder4, strBuilder0);
      assertNotSame(strBuilder4, strBuilder3);
      assertNotSame(strBuilder4, strBuilder1);
      assertNotSame(strBuilder4, strBuilder2);
      assertNotSame(strBuilder4, strBuilder5);
      assertNotSame(strBuilder4, strBuilder6);
      assertSame(strBuilder4, strBuilder7);
      
      StrBuilder strBuilder8 = strBuilder2.append('2');
      assertFalse(strBuilder0.isEmpty());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(35, strBuilder0.length());
      assertEquals(66, strBuilder0.capacity());
      assertEquals(35, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(66, strBuilder1.capacity());
      assertTrue(strBuilder1.isNotEmpty());
      assertNull(strBuilder1.getNullText());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(35, strBuilder1.length());
      assertEquals(35, strBuilder1.size());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(66, strBuilder2.capacity());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(35, strBuilder2.length());
      assertEquals(35, strBuilder2.size());
      assertNull(strBuilder2.getNullText());
      assertTrue(strBuilder2.isNotEmpty());
      assertEquals(35, strBuilder8.length());
      assertEquals(35, strBuilder8.size());
      assertFalse(strBuilder8.isEmpty());
      assertTrue(strBuilder8.isNotEmpty());
      assertNull(strBuilder8.getNullText());
      assertEquals(66, strBuilder8.capacity());
      assertNull(strBuilder8.getNewLineText());
      assertNotNull(strBuilder8);
      assertFalse(strBuilder0.equals((Object)strBuilder7));
      assertFalse(strBuilder0.equals((Object)strBuilder4));
      assertFalse(strBuilder1.equals((Object)strBuilder7));
      assertFalse(strBuilder1.equals((Object)strBuilder4));
      assertFalse(strBuilder2.equals((Object)strBuilder4));
      assertFalse(strBuilder2.equals((Object)strBuilder7));
      assertFalse(strBuilder8.equals((Object)strBuilder4));
      assertFalse(strBuilder8.equals((Object)strBuilder7));
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder8);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder6);
      assertNotSame(strBuilder0, strBuilder7);
      assertNotSame(strBuilder0, strBuilder4);
      assertNotSame(strBuilder1, strBuilder7);
      assertSame(strBuilder1, strBuilder6);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder5);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder8);
      assertNotSame(strBuilder1, strBuilder4);
      assertSame(strBuilder1, strBuilder3);
      assertNotSame(strBuilder2, strBuilder4);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder3);
      assertSame(strBuilder2, strBuilder8);
      assertSame(strBuilder2, strBuilder6);
      assertSame(strBuilder2, strBuilder5);
      assertSame(strBuilder2, strBuilder0);
      assertNotSame(strBuilder2, strBuilder7);
      assertSame(strBuilder8, strBuilder3);
      assertSame(strBuilder8, strBuilder6);
      assertSame(strBuilder8, strBuilder2);
      assertSame(strBuilder8, strBuilder5);
      assertNotSame(strBuilder8, strBuilder4);
      assertSame(strBuilder8, strBuilder0);
      assertSame(strBuilder8, strBuilder1);
      assertNotSame(strBuilder8, strBuilder7);
      
      StrBuilder strBuilder9 = strBuilder7.minimizeCapacity();
      assertFalse(strBuilder7.isEmpty());
      assertEquals(1, strBuilder7.length());
      assertEquals(1, strBuilder7.size());
      assertEquals(1, strBuilder7.capacity());
      assertTrue(strBuilder7.isNotEmpty());
      assertNull(strBuilder7.getNullText());
      assertNull(strBuilder7.getNewLineText());
      assertTrue(strBuilder9.isNotEmpty());
      assertNull(strBuilder9.getNullText());
      assertNull(strBuilder9.getNewLineText());
      assertEquals(1, strBuilder9.length());
      assertFalse(strBuilder9.isEmpty());
      assertEquals(1, strBuilder9.size());
      assertEquals(1, strBuilder9.capacity());
      assertNull(strBuilder4.getNewLineText());
      assertTrue(strBuilder4.isNotEmpty());
      assertEquals(1, strBuilder4.capacity());
      assertEquals(1, strBuilder4.size());
      assertNull(strBuilder4.getNullText());
      assertEquals(1, strBuilder4.length());
      assertFalse(strBuilder4.isEmpty());
      assertNotNull(strBuilder9);
      assertFalse(strBuilder7.equals((Object)strBuilder5));
      assertFalse(strBuilder7.equals((Object)strBuilder2));
      assertFalse(strBuilder7.equals((Object)strBuilder1));
      assertFalse(strBuilder7.equals((Object)strBuilder0));
      assertFalse(strBuilder7.equals((Object)strBuilder6));
      assertFalse(strBuilder7.equals((Object)strBuilder3));
      assertFalse(strBuilder7.equals((Object)strBuilder8));
      assertFalse(strBuilder9.equals((Object)strBuilder3));
      assertFalse(strBuilder9.equals((Object)strBuilder1));
      assertFalse(strBuilder9.equals((Object)strBuilder2));
      assertFalse(strBuilder9.equals((Object)strBuilder6));
      assertFalse(strBuilder9.equals((Object)strBuilder8));
      assertFalse(strBuilder9.equals((Object)strBuilder0));
      assertFalse(strBuilder9.equals((Object)strBuilder5));
      assertFalse(strBuilder4.equals((Object)strBuilder8));
      assertFalse(strBuilder4.equals((Object)strBuilder0));
      assertFalse(strBuilder4.equals((Object)strBuilder3));
      assertFalse(strBuilder4.equals((Object)strBuilder1));
      assertFalse(strBuilder4.equals((Object)strBuilder2));
      assertFalse(strBuilder4.equals((Object)strBuilder5));
      assertFalse(strBuilder4.equals((Object)strBuilder6));
      assertNotSame(strBuilder7, strBuilder5);
      assertNotSame(strBuilder7, strBuilder2);
      assertNotSame(strBuilder7, strBuilder1);
      assertSame(strBuilder7, strBuilder4);
      assertNotSame(strBuilder7, strBuilder0);
      assertNotSame(strBuilder7, strBuilder6);
      assertNotSame(strBuilder7, strBuilder3);
      assertSame(strBuilder7, strBuilder9);
      assertNotSame(strBuilder7, strBuilder8);
      assertNotSame(strBuilder9, strBuilder3);
      assertNotSame(strBuilder9, strBuilder1);
      assertSame(strBuilder9, strBuilder7);
      assertNotSame(strBuilder9, strBuilder2);
      assertNotSame(strBuilder9, strBuilder6);
      assertNotSame(strBuilder9, strBuilder8);
      assertSame(strBuilder9, strBuilder4);
      assertNotSame(strBuilder9, strBuilder0);
      assertNotSame(strBuilder9, strBuilder5);
      assertNotSame(strBuilder4, strBuilder8);
      assertNotSame(strBuilder4, strBuilder0);
      assertNotSame(strBuilder4, strBuilder3);
      assertSame(strBuilder4, strBuilder9);
      assertNotSame(strBuilder4, strBuilder1);
      assertNotSame(strBuilder4, strBuilder2);
      assertNotSame(strBuilder4, strBuilder5);
      assertNotSame(strBuilder4, strBuilder6);
      assertSame(strBuilder4, strBuilder7);
      
      boolean boolean1 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      StrBuilder strBuilder10 = strBuilder3.setNewLineText("', has a length less than 2");
      assertFalse(strBuilder0.isEmpty());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(35, strBuilder0.length());
      assertEquals(66, strBuilder0.capacity());
      assertEquals("', has a length less than 2", strBuilder0.getNewLineText());
      assertEquals(35, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(66, strBuilder1.capacity());
      assertTrue(strBuilder1.isNotEmpty());
      assertEquals("', has a length less than 2", strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(35, strBuilder1.length());
      assertEquals(35, strBuilder1.size());
      assertEquals(66, strBuilder2.capacity());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(35, strBuilder2.length());
      assertEquals(35, strBuilder2.size());
      assertNull(strBuilder2.getNullText());
      assertTrue(strBuilder2.isNotEmpty());
      assertEquals("', has a length less than 2", strBuilder2.getNewLineText());
      assertEquals("', has a length less than 2", strBuilder3.getNewLineText());
      assertFalse(strBuilder3.isEmpty());
      assertNull(strBuilder3.getNullText());
      assertEquals(35, strBuilder3.length());
      assertEquals(35, strBuilder3.size());
      assertTrue(strBuilder3.isNotEmpty());
      assertEquals(66, strBuilder3.capacity());
      assertTrue(strBuilder10.isNotEmpty());
      assertEquals(66, strBuilder10.capacity());
      assertFalse(strBuilder10.isEmpty());
      assertNull(strBuilder10.getNullText());
      assertEquals(35, strBuilder10.length());
      assertEquals(35, strBuilder10.size());
      assertEquals("', has a length less than 2", strBuilder10.getNewLineText());
      assertNotNull(strBuilder10);
      assertFalse(strBuilder0.equals((Object)strBuilder9));
      assertFalse(strBuilder0.equals((Object)strBuilder7));
      assertFalse(strBuilder0.equals((Object)strBuilder4));
      assertFalse(strBuilder1.equals((Object)strBuilder7));
      assertFalse(strBuilder1.equals((Object)strBuilder9));
      assertFalse(strBuilder1.equals((Object)strBuilder4));
      assertFalse(strBuilder2.equals((Object)strBuilder4));
      assertFalse(strBuilder2.equals((Object)strBuilder9));
      assertFalse(strBuilder2.equals((Object)strBuilder7));
      assertFalse(strBuilder3.equals((Object)strBuilder7));
      assertFalse(strBuilder3.equals((Object)strBuilder4));
      assertFalse(strBuilder3.equals((Object)strBuilder9));
      assertFalse(strBuilder10.equals((Object)strBuilder9));
      assertFalse(strBuilder10.equals((Object)strBuilder4));
      assertFalse(strBuilder10.equals((Object)strBuilder7));
      assertEquals(3, objectArray0.length);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder8);
      assertNotSame(strBuilder0, strBuilder9);
      assertSame(strBuilder0, strBuilder10);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder6);
      assertNotSame(strBuilder0, strBuilder7);
      assertNotSame(strBuilder0, strBuilder4);
      assertNotSame(strBuilder1, strBuilder7);
      assertSame(strBuilder1, strBuilder10);
      assertSame(strBuilder1, strBuilder6);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder5);
      assertNotSame(strBuilder1, strBuilder9);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder8);
      assertNotSame(strBuilder1, strBuilder4);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder2, strBuilder10);
      assertNotSame(strBuilder2, strBuilder4);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder3);
      assertSame(strBuilder2, strBuilder8);
      assertNotSame(strBuilder2, strBuilder9);
      assertSame(strBuilder2, strBuilder6);
      assertSame(strBuilder2, strBuilder5);
      assertSame(strBuilder2, strBuilder0);
      assertNotSame(strBuilder2, strBuilder7);
      assertSame(strBuilder3, strBuilder1);
      assertNotSame(strBuilder3, strBuilder7);
      assertSame(strBuilder3, strBuilder2);
      assertNotSame(strBuilder3, strBuilder4);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder8);
      assertNotSame(strBuilder3, strBuilder9);
      assertSame(strBuilder3, strBuilder5);
      assertSame(strBuilder3, strBuilder10);
      assertSame(strBuilder3, strBuilder6);
      assertSame(strBuilder10, strBuilder5);
      assertSame(strBuilder10, strBuilder2);
      assertNotSame(strBuilder10, strBuilder9);
      assertNotSame(strBuilder10, strBuilder4);
      assertSame(strBuilder10, strBuilder3);
      assertSame(strBuilder10, strBuilder6);
      assertSame(strBuilder10, strBuilder8);
      assertSame(strBuilder10, strBuilder0);
      assertNotSame(strBuilder10, strBuilder7);
      assertSame(strBuilder10, strBuilder1);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder((String) null);
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertTrue(strBuilder0.isEmpty());
      assertFalse(strBuilder0.isNotEmpty());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = new StrBuilder(962);
      assertNull(strBuilder1.getNewLineText());
      assertEquals(962, strBuilder1.capacity());
      assertNull(strBuilder1.getNullText());
      assertFalse(strBuilder1.isNotEmpty());
      assertTrue(strBuilder1.isEmpty());
      assertEquals(0, strBuilder1.size());
      assertEquals(0, strBuilder1.length());
      assertNotNull(strBuilder1);
      assertTrue(strBuilder1.equals((Object)strBuilder0));
      
      StrBuilder strBuilder2 = strBuilder0.appendln((Object) strBuilder1);
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(1, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(1, strBuilder0.length());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(962, strBuilder1.capacity());
      assertNull(strBuilder1.getNullText());
      assertFalse(strBuilder1.isNotEmpty());
      assertTrue(strBuilder1.isEmpty());
      assertEquals(0, strBuilder1.size());
      assertEquals(0, strBuilder1.length());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(1, strBuilder2.length());
      assertEquals(1, strBuilder2.size());
      assertNull(strBuilder2.getNullText());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(32, strBuilder2.capacity());
      assertTrue(strBuilder2.isNotEmpty());
      assertNotNull(strBuilder2);
      assertFalse(strBuilder0.equals((Object)strBuilder1));
      assertFalse(strBuilder1.equals((Object)strBuilder0));
      assertFalse(strBuilder2.equals((Object)strBuilder1));
      assertSame(strBuilder0, strBuilder2);
      assertNotSame(strBuilder0, strBuilder1);
      assertNotSame(strBuilder1, strBuilder2);
      assertNotSame(strBuilder1, strBuilder0);
      assertNotSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      
      strBuilder0.validateIndex(0);
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(1, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(1, strBuilder0.length());
      assertFalse(strBuilder0.equals((Object)strBuilder1));
      assertSame(strBuilder0, strBuilder2);
      assertNotSame(strBuilder0, strBuilder1);
      
      StrBuilder strBuilder3 = strBuilder1.append((CharBuffer) null, 5, 114);
      assertNull(strBuilder1.getNewLineText());
      assertEquals(962, strBuilder1.capacity());
      assertNull(strBuilder1.getNullText());
      assertFalse(strBuilder1.isNotEmpty());
      assertTrue(strBuilder1.isEmpty());
      assertEquals(0, strBuilder1.size());
      assertEquals(0, strBuilder1.length());
      assertNull(strBuilder3.getNewLineText());
      assertEquals(962, strBuilder3.capacity());
      assertEquals(0, strBuilder3.length());
      assertEquals(0, strBuilder3.size());
      assertFalse(strBuilder3.isNotEmpty());
      assertNull(strBuilder3.getNullText());
      assertTrue(strBuilder3.isEmpty());
      assertNotNull(strBuilder3);
      assertFalse(strBuilder1.equals((Object)strBuilder2));
      assertFalse(strBuilder1.equals((Object)strBuilder0));
      assertFalse(strBuilder3.equals((Object)strBuilder0));
      assertFalse(strBuilder3.equals((Object)strBuilder2));
      assertNotSame(strBuilder1, strBuilder2);
      assertNotSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder3);
      assertNotSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder1);
      assertNotSame(strBuilder3, strBuilder2);
      
      StrBuilder strBuilder4 = strBuilder0.append((String) null, 114, (-2753));
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(1, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(1, strBuilder0.length());
      assertEquals(1, strBuilder4.length());
      assertEquals(1, strBuilder4.size());
      assertNull(strBuilder4.getNullText());
      assertFalse(strBuilder4.isEmpty());
      assertNull(strBuilder4.getNewLineText());
      assertEquals(32, strBuilder4.capacity());
      assertTrue(strBuilder4.isNotEmpty());
      assertNotNull(strBuilder4);
      assertFalse(strBuilder0.equals((Object)strBuilder3));
      assertFalse(strBuilder0.equals((Object)strBuilder1));
      assertFalse(strBuilder4.equals((Object)strBuilder3));
      assertFalse(strBuilder4.equals((Object)strBuilder1));
      assertSame(strBuilder0, strBuilder2);
      assertNotSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder4);
      assertNotSame(strBuilder0, strBuilder1);
      assertSame(strBuilder4, strBuilder0);
      assertSame(strBuilder4, strBuilder2);
      assertNotSame(strBuilder4, strBuilder3);
      assertNotSame(strBuilder4, strBuilder1);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(2225);
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(2225, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertFalse(strBuilder0.isNotEmpty());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.append((CharSequence) "end < start");
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(2225, strBuilder0.capacity());
      assertEquals(11, strBuilder0.size());
      assertEquals(11, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(11, strBuilder1.size());
      assertTrue(strBuilder1.isNotEmpty());
      assertNull(strBuilder1.getNullText());
      assertEquals(2225, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(11, strBuilder1.length());
      assertNotNull(strBuilder1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      
      StrBuilder strBuilder2 = strBuilder1.replaceFirst('5', 'L');
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(2225, strBuilder0.capacity());
      assertEquals(11, strBuilder0.size());
      assertEquals(11, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(11, strBuilder1.size());
      assertTrue(strBuilder1.isNotEmpty());
      assertNull(strBuilder1.getNullText());
      assertEquals(2225, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(11, strBuilder1.length());
      assertNull(strBuilder2.getNewLineText());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(11, strBuilder2.length());
      assertTrue(strBuilder2.isNotEmpty());
      assertEquals(2225, strBuilder2.capacity());
      assertEquals(11, strBuilder2.size());
      assertNull(strBuilder2.getNullText());
      assertNotNull(strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertFalse(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNotNull(strBuilder0);
      
      StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer0 = strBuilder0.new StrBuilderTokenizer();
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertFalse(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder_StrBuilderTokenizer0.nextIndex());
      assertTrue(strBuilder_StrBuilderTokenizer0.isIgnoreEmptyTokens());
      assertEquals((-1), strBuilder_StrBuilderTokenizer0.previousIndex());
      assertFalse(strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull());
      assertNotNull(strBuilder_StrBuilderTokenizer0);
      
      String string0 = strBuilder_StrBuilderTokenizer0.toString();
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertFalse(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder_StrBuilderTokenizer0.nextIndex());
      assertTrue(strBuilder_StrBuilderTokenizer0.isIgnoreEmptyTokens());
      assertEquals((-1), strBuilder_StrBuilderTokenizer0.previousIndex());
      assertFalse(strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull());
      assertNotNull(string0);
      assertEquals("StrTokenizer[not tokenized yet]", string0);
      
      StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer1 = (StrBuilder.StrBuilderTokenizer)strBuilder_StrBuilderTokenizer0.cloneReset();
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertFalse(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder_StrBuilderTokenizer0.nextIndex());
      assertTrue(strBuilder_StrBuilderTokenizer0.isIgnoreEmptyTokens());
      assertEquals((-1), strBuilder_StrBuilderTokenizer0.previousIndex());
      assertFalse(strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull());
      assertTrue(strBuilder_StrBuilderTokenizer1.isIgnoreEmptyTokens());
      assertFalse(strBuilder_StrBuilderTokenizer1.isEmptyTokenAsNull());
      assertEquals((-1), strBuilder_StrBuilderTokenizer1.previousIndex());
      assertEquals(0, strBuilder_StrBuilderTokenizer1.nextIndex());
      assertNotNull(strBuilder_StrBuilderTokenizer1);
      assertFalse(strBuilder_StrBuilderTokenizer1.equals((Object)strBuilder_StrBuilderTokenizer0));
      assertNotSame(strBuilder_StrBuilderTokenizer0, strBuilder_StrBuilderTokenizer1);
      assertNotSame(strBuilder_StrBuilderTokenizer1, strBuilder_StrBuilderTokenizer0);
      
      char[] charArray0 = new char[5];
      charArray0[0] = '^';
      charArray0[1] = 'X';
      StrBuilder strBuilder1 = new StrBuilder("NX+6vQAt");
      assertEquals(8, strBuilder1.length());
      assertEquals(8, strBuilder1.size());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(40, strBuilder1.capacity());
      assertTrue(strBuilder1.isNotEmpty());
      assertFalse(strBuilder1.isEmpty());
      assertNotNull(strBuilder1);
      assertFalse(strBuilder1.equals((Object)strBuilder0));
      
      // Undeclared exception!
      try { 
        strBuilder1.append(charArray0, 0, 108);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // Invalid length: 108
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertNotNull(strBuilder0);
      
      StringWriter stringWriter0 = new StringWriter(0);
      assertEquals("", stringWriter0.toString());
      assertNotNull(stringWriter0);
      
      strBuilder0.appendTo(stringWriter0);
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertEquals("", stringWriter0.toString());
      
      StrBuilder strBuilder1 = strBuilder0.replaceFirst("", "");
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertFalse(strBuilder1.isNotEmpty());
      assertEquals(0, strBuilder1.length());
      assertEquals(32, strBuilder1.capacity());
      assertTrue(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(0, strBuilder1.size());
      assertNotNull(strBuilder1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertFalse(strBuilder0.isNotEmpty());
      assertNotNull(strBuilder0);
      
      // Undeclared exception!
      try { 
        strBuilder0.appendTo((Appendable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      StrBuilder strBuilder0 = new StrBuilder(101);
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(101, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertFalse(strBuilder0.isNotEmpty());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.appendSeparator('`', '`');
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(101, strBuilder0.capacity());
      assertEquals(1, strBuilder0.length());
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(1, strBuilder0.size());
      assertNull(strBuilder1.getNewLineText());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(1, strBuilder1.size());
      assertEquals(101, strBuilder1.capacity());
      assertNull(strBuilder1.getNullText());
      assertEquals(1, strBuilder1.length());
      assertTrue(strBuilder1.isNotEmpty());
      assertNotNull(strBuilder1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      TreeSet<Integer> treeSet0 = new TreeSet<Integer>(comparator0);
      assertNotNull(treeSet0);
      assertFalse(treeSet0.contains(101));
      
      String string0 = "HG";
      StrBuilder strBuilder2 = strBuilder0.appendWithSeparators((Iterable<?>) treeSet0, "HG");
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(101, strBuilder0.capacity());
      assertEquals(1, strBuilder0.length());
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(1, strBuilder0.size());
      assertEquals(1, strBuilder2.length());
      assertEquals(101, strBuilder2.capacity());
      assertEquals(1, strBuilder2.size());
      assertTrue(strBuilder2.isNotEmpty());
      assertFalse(strBuilder2.isEmpty());
      assertNull(strBuilder2.getNewLineText());
      assertNull(strBuilder2.getNullText());
      assertNotNull(strBuilder2);
      assertFalse(treeSet0.contains(101));
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      
      StrBuilder strBuilder3 = strBuilder2.appendAll((Iterable<?>) treeSet0);
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(101, strBuilder0.capacity());
      assertEquals(1, strBuilder0.length());
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(1, strBuilder0.size());
      assertEquals(1, strBuilder2.length());
      assertEquals(101, strBuilder2.capacity());
      assertEquals(1, strBuilder2.size());
      assertTrue(strBuilder2.isNotEmpty());
      assertFalse(strBuilder2.isEmpty());
      assertNull(strBuilder2.getNewLineText());
      assertNull(strBuilder2.getNullText());
      assertEquals(101, strBuilder3.capacity());
      assertEquals(1, strBuilder3.size());
      assertTrue(strBuilder3.isNotEmpty());
      assertNull(strBuilder3.getNullText());
      assertNull(strBuilder3.getNewLineText());
      assertFalse(strBuilder3.isEmpty());
      assertEquals(1, strBuilder3.length());
      assertNotNull(strBuilder3);
      assertFalse(treeSet0.contains(101));
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder3);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder2);
      assertSame(strBuilder3, strBuilder0);
      
      char char0 = 'q';
      StrBuilder strBuilder4 = strBuilder0.appendSeparator('q', 'Z');
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(101, strBuilder0.capacity());
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(2, strBuilder0.length());
      assertEquals(2, strBuilder0.size());
      assertNull(strBuilder4.getNewLineText());
      assertFalse(strBuilder4.isEmpty());
      assertTrue(strBuilder4.isNotEmpty());
      assertEquals(2, strBuilder4.length());
      assertEquals(2, strBuilder4.size());
      assertEquals(101, strBuilder4.capacity());
      assertNull(strBuilder4.getNullText());
      assertNotNull(strBuilder4);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder4, strBuilder0);
      assertSame(strBuilder4, strBuilder1);
      assertSame(strBuilder4, strBuilder2);
      assertSame(strBuilder4, strBuilder3);
      
      int int0 = strBuilder0.indexOf('Z', 101);
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(101, strBuilder0.capacity());
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(2, strBuilder0.length());
      assertEquals(2, strBuilder0.size());
      assertEquals((-1), int0);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder4);
      
      strBuilder1.appendTo(strBuilder2);
      assertEquals(4, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(4, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(101, strBuilder0.capacity());
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(4, strBuilder1.length());
      assertEquals(4, strBuilder1.size());
      assertEquals(101, strBuilder1.capacity());
      assertNull(strBuilder1.getNullText());
      assertTrue(strBuilder1.isNotEmpty());
      assertEquals(101, strBuilder2.capacity());
      assertTrue(strBuilder2.isNotEmpty());
      assertEquals(4, strBuilder2.length());
      assertFalse(strBuilder2.isEmpty());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(4, strBuilder2.size());
      assertNull(strBuilder2.getNullText());
      assertFalse(treeSet0.contains(int0));
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder4);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder4);
      assertSame(strBuilder2, strBuilder3);
      assertSame(strBuilder2, strBuilder1);
      
      // Undeclared exception!
      try { 
        strBuilder0.insert(1163, "HG");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 1163
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertFalse(strBuilder0.isNotEmpty());
      assertNotNull(strBuilder0);
      
      StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer0 = strBuilder0.new StrBuilderTokenizer();
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertFalse(strBuilder0.isNotEmpty());
      assertTrue(strBuilder_StrBuilderTokenizer0.isIgnoreEmptyTokens());
      assertFalse(strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull());
      assertEquals((-1), strBuilder_StrBuilderTokenizer0.previousIndex());
      assertEquals(0, strBuilder_StrBuilderTokenizer0.nextIndex());
      assertNotNull(strBuilder_StrBuilderTokenizer0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      StrBuilder strBuilder1 = strBuilder0.appendFixedWidthPadLeft(object0, 1611, 't');
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(1611, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(1611, strBuilder0.length());
      assertEquals(3222, strBuilder0.capacity());
      assertNull(strBuilder1.getNullText());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(3222, strBuilder1.capacity());
      assertEquals(1611, strBuilder1.length());
      assertEquals(1611, strBuilder1.size());
      assertTrue(strBuilder1.isNotEmpty());
      assertNotNull(strBuilder1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      
      String string0 = strBuilder_StrBuilderTokenizer0.toString();
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(1611, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(1611, strBuilder0.length());
      assertEquals(3222, strBuilder0.capacity());
      assertTrue(strBuilder_StrBuilderTokenizer0.isIgnoreEmptyTokens());
      assertFalse(strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull());
      assertEquals((-1), strBuilder_StrBuilderTokenizer0.previousIndex());
      assertEquals(0, strBuilder_StrBuilderTokenizer0.nextIndex());
      assertNotNull(string0);
      assertEquals("StrTokenizer[not tokenized yet]", string0);
      assertSame(strBuilder0, strBuilder1);
      
      StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer1 = (StrBuilder.StrBuilderTokenizer)strBuilder_StrBuilderTokenizer0.cloneReset();
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(1611, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(1611, strBuilder0.length());
      assertEquals(3222, strBuilder0.capacity());
      assertTrue(strBuilder_StrBuilderTokenizer0.isIgnoreEmptyTokens());
      assertFalse(strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull());
      assertEquals((-1), strBuilder_StrBuilderTokenizer0.previousIndex());
      assertEquals(0, strBuilder_StrBuilderTokenizer0.nextIndex());
      assertTrue(strBuilder_StrBuilderTokenizer1.isIgnoreEmptyTokens());
      assertFalse(strBuilder_StrBuilderTokenizer1.isEmptyTokenAsNull());
      assertEquals(0, strBuilder_StrBuilderTokenizer1.nextIndex());
      assertEquals((-1), strBuilder_StrBuilderTokenizer1.previousIndex());
      assertNotNull(strBuilder_StrBuilderTokenizer1);
      assertFalse(strBuilder_StrBuilderTokenizer1.equals((Object)strBuilder_StrBuilderTokenizer0));
      assertSame(strBuilder0, strBuilder1);
      assertNotSame(strBuilder_StrBuilderTokenizer0, strBuilder_StrBuilderTokenizer1);
      assertNotSame(strBuilder_StrBuilderTokenizer1, strBuilder_StrBuilderTokenizer0);
      
      StrBuilder strBuilder2 = strBuilder0.append("StrTokenizer[not tokenized yet]");
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(1642, strBuilder0.size());
      assertEquals(3222, strBuilder0.capacity());
      assertEquals(1642, strBuilder0.length());
      assertEquals(3222, strBuilder2.capacity());
      assertNull(strBuilder2.getNewLineText());
      assertTrue(strBuilder2.isNotEmpty());
      assertEquals(1642, strBuilder2.length());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(1642, strBuilder2.size());
      assertNull(strBuilder2.getNullText());
      assertNotNull(strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      
      boolean boolean0 = strBuilder0.endsWith("remove() is unsupported");
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(1642, strBuilder0.size());
      assertEquals(3222, strBuilder0.capacity());
      assertEquals(1642, strBuilder0.length());
      assertFalse(boolean0);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      
      StrBuilder strBuilder3 = strBuilder2.appendSeparator('\'', 1634);
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(1643, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(1643, strBuilder0.length());
      assertEquals(3222, strBuilder0.capacity());
      assertEquals(3222, strBuilder2.capacity());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(1643, strBuilder2.size());
      assertTrue(strBuilder2.isNotEmpty());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(1643, strBuilder2.length());
      assertNull(strBuilder2.getNullText());
      assertEquals(1643, strBuilder3.length());
      assertEquals(1643, strBuilder3.size());
      assertTrue(strBuilder3.isNotEmpty());
      assertFalse(strBuilder3.isEmpty());
      assertNull(strBuilder3.getNewLineText());
      assertNull(strBuilder3.getNullText());
      assertEquals(3222, strBuilder3.capacity());
      assertNotNull(strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder3);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder2);
      
      boolean boolean1 = strBuilder3.isEmpty();
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(1643, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(1643, strBuilder0.length());
      assertEquals(3222, strBuilder0.capacity());
      assertEquals(3222, strBuilder2.capacity());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(1643, strBuilder2.size());
      assertTrue(strBuilder2.isNotEmpty());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(1643, strBuilder2.length());
      assertNull(strBuilder2.getNullText());
      assertEquals(1643, strBuilder3.length());
      assertEquals(1643, strBuilder3.size());
      assertTrue(strBuilder3.isNotEmpty());
      assertFalse(strBuilder3.isEmpty());
      assertNull(strBuilder3.getNewLineText());
      assertNull(strBuilder3.getNullText());
      assertEquals(3222, strBuilder3.capacity());
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder3);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder2);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertFalse(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNullText());
      assertNotNull(strBuilder0);
      
      char[] charArray0 = new char[0];
      StrBuilder strBuilder1 = strBuilder0.append(charArray0, 0, 0);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertFalse(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder1.isEmpty());
      assertFalse(strBuilder1.isNotEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(0, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(0, strBuilder1.size());
      assertNotNull(strBuilder1);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("");
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = new StrBuilder("Z}7");
      assertNull(strBuilder1.getNullText());
      assertTrue(strBuilder1.isNotEmpty());
      assertEquals(35, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(3, strBuilder1.length());
      assertEquals(3, strBuilder1.size());
      assertNotNull(strBuilder1);
      assertFalse(strBuilder1.equals((Object)strBuilder0));
      
      StrBuilder strBuilder2 = new StrBuilder();
      assertEquals(32, strBuilder2.capacity());
      assertNull(strBuilder2.getNewLineText());
      assertNull(strBuilder2.getNullText());
      assertEquals(0, strBuilder2.size());
      assertFalse(strBuilder2.isNotEmpty());
      assertTrue(strBuilder2.isEmpty());
      assertEquals(0, strBuilder2.length());
      assertNotNull(strBuilder2);
      assertTrue(strBuilder2.equals((Object)strBuilder0));
      assertFalse(strBuilder2.equals((Object)strBuilder1));
      
      StringBuilder stringBuilder0 = new StringBuilder("maxWith cannot be negative");
      assertEquals("maxWith cannot be negative", stringBuilder0.toString());
      assertNotNull(stringBuilder0);
      
      StrBuilder strBuilder3 = strBuilder1.appendFixedWidthPadLeft((Object) stringBuilder0, 32, 't');
      assertNull(strBuilder1.getNullText());
      assertTrue(strBuilder1.isNotEmpty());
      assertEquals(35, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(35, strBuilder1.length());
      assertEquals(35, strBuilder1.size());
      assertEquals("maxWith cannot be negative", stringBuilder0.toString());
      assertTrue(strBuilder3.isNotEmpty());
      assertEquals(35, strBuilder3.size());
      assertEquals(35, strBuilder3.length());
      assertEquals(35, strBuilder3.capacity());
      assertFalse(strBuilder3.isEmpty());
      assertNull(strBuilder3.getNullText());
      assertNull(strBuilder3.getNewLineText());
      assertNotNull(strBuilder3);
      assertFalse(strBuilder1.equals((Object)strBuilder2));
      assertFalse(strBuilder1.equals((Object)strBuilder0));
      assertFalse(strBuilder3.equals((Object)strBuilder0));
      assertFalse(strBuilder3.equals((Object)strBuilder2));
      assertNotSame(strBuilder1, strBuilder2);
      assertNotSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder3, strBuilder1);
      assertNotSame(strBuilder3, strBuilder0);
      assertNotSame(strBuilder3, strBuilder2);
      
      StrBuilder strBuilder4 = strBuilder2.appendln((-1.0));
      assertEquals(32, strBuilder2.capacity());
      assertNull(strBuilder2.getNewLineText());
      assertFalse(strBuilder2.isEmpty());
      assertNull(strBuilder2.getNullText());
      assertEquals(5, strBuilder2.length());
      assertEquals(5, strBuilder2.size());
      assertTrue(strBuilder2.isNotEmpty());
      assertEquals(32, strBuilder4.capacity());
      assertTrue(strBuilder4.isNotEmpty());
      assertFalse(strBuilder4.isEmpty());
      assertEquals(5, strBuilder4.length());
      assertNull(strBuilder4.getNullText());
      assertEquals(5, strBuilder4.size());
      assertNull(strBuilder4.getNewLineText());
      assertNotNull(strBuilder4);
      assertFalse(strBuilder2.equals((Object)strBuilder3));
      assertFalse(strBuilder2.equals((Object)strBuilder1));
      assertFalse(strBuilder2.equals((Object)strBuilder0));
      assertFalse(strBuilder4.equals((Object)strBuilder0));
      assertFalse(strBuilder4.equals((Object)strBuilder1));
      assertFalse(strBuilder4.equals((Object)strBuilder3));
      assertNotSame(strBuilder2, strBuilder3);
      assertNotSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder4);
      assertNotSame(strBuilder2, strBuilder0);
      assertNotSame(strBuilder4, strBuilder0);
      assertNotSame(strBuilder4, strBuilder1);
      assertSame(strBuilder4, strBuilder2);
      assertNotSame(strBuilder4, strBuilder3);
      
      StrBuilder strBuilder5 = new StrBuilder();
      assertNull(strBuilder5.getNullText());
      assertNull(strBuilder5.getNewLineText());
      assertFalse(strBuilder5.isNotEmpty());
      assertEquals(0, strBuilder5.size());
      assertEquals(0, strBuilder5.length());
      assertEquals(32, strBuilder5.capacity());
      assertTrue(strBuilder5.isEmpty());
      assertNotNull(strBuilder5);
      assertFalse(strBuilder5.equals((Object)strBuilder2));
      assertFalse(strBuilder5.equals((Object)strBuilder4));
      assertFalse(strBuilder5.equals((Object)strBuilder3));
      assertTrue(strBuilder5.equals((Object)strBuilder0));
      assertFalse(strBuilder5.equals((Object)strBuilder1));
      
      char[] charArray0 = new char[0];
      StrBuilder strBuilder6 = strBuilder3.append(charArray0);
      assertNull(strBuilder1.getNullText());
      assertTrue(strBuilder1.isNotEmpty());
      assertEquals(35, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(35, strBuilder1.length());
      assertEquals(35, strBuilder1.size());
      assertEquals("maxWith cannot be negative", stringBuilder0.toString());
      assertTrue(strBuilder3.isNotEmpty());
      assertEquals(35, strBuilder3.size());
      assertEquals(35, strBuilder3.length());
      assertEquals(35, strBuilder3.capacity());
      assertFalse(strBuilder3.isEmpty());
      assertNull(strBuilder3.getNullText());
      assertNull(strBuilder3.getNewLineText());
      assertFalse(strBuilder6.isEmpty());
      assertNull(strBuilder6.getNewLineText());
      assertNull(strBuilder6.getNullText());
      assertEquals(35, strBuilder6.capacity());
      assertTrue(strBuilder6.isNotEmpty());
      assertEquals(35, strBuilder6.length());
      assertEquals(35, strBuilder6.size());
      assertNotNull(strBuilder6);
      assertFalse(strBuilder1.equals((Object)strBuilder4));
      assertFalse(strBuilder1.equals((Object)strBuilder2));
      assertFalse(strBuilder1.equals((Object)strBuilder5));
      assertFalse(strBuilder1.equals((Object)strBuilder0));
      assertFalse(strBuilder3.equals((Object)strBuilder4));
      assertFalse(strBuilder3.equals((Object)strBuilder0));
      assertFalse(strBuilder3.equals((Object)strBuilder5));
      assertFalse(strBuilder3.equals((Object)strBuilder2));
      assertFalse(strBuilder6.equals((Object)strBuilder4));
      assertFalse(strBuilder6.equals((Object)strBuilder2));
      assertFalse(strBuilder6.equals((Object)strBuilder5));
      assertFalse(strBuilder6.equals((Object)strBuilder0));
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      assertNotSame(strBuilder1, strBuilder4);
      assertNotSame(strBuilder1, strBuilder2);
      assertNotSame(strBuilder1, strBuilder5);
      assertNotSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder6);
      assertSame(strBuilder3, strBuilder1);
      assertNotSame(strBuilder3, strBuilder4);
      assertNotSame(strBuilder3, strBuilder0);
      assertNotSame(strBuilder3, strBuilder5);
      assertNotSame(strBuilder3, strBuilder2);
      assertSame(strBuilder3, strBuilder6);
      assertNotSame(strBuilder6, strBuilder4);
      assertNotSame(strBuilder6, strBuilder2);
      assertNotSame(strBuilder6, strBuilder5);
      assertNotSame(strBuilder6, strBuilder0);
      assertSame(strBuilder6, strBuilder3);
      assertSame(strBuilder6, strBuilder1);
      
      int int0 = StrBuilder.CAPACITY;
      assertEquals(32, int0);
      
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder3.new StrBuilderReader();
      assertNull(strBuilder1.getNullText());
      assertTrue(strBuilder1.isNotEmpty());
      assertEquals(35, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(35, strBuilder1.length());
      assertEquals(35, strBuilder1.size());
      assertEquals("maxWith cannot be negative", stringBuilder0.toString());
      assertTrue(strBuilder3.isNotEmpty());
      assertEquals(35, strBuilder3.size());
      assertEquals(35, strBuilder3.length());
      assertEquals(35, strBuilder3.capacity());
      assertFalse(strBuilder3.isEmpty());
      assertNull(strBuilder3.getNullText());
      assertNull(strBuilder3.getNewLineText());
      assertTrue(strBuilder_StrBuilderReader0.markSupported());
      assertTrue(strBuilder_StrBuilderReader0.ready());
      assertNotNull(strBuilder_StrBuilderReader0);
      assertFalse(strBuilder1.equals((Object)strBuilder4));
      assertFalse(strBuilder1.equals((Object)strBuilder2));
      assertFalse(strBuilder1.equals((Object)strBuilder5));
      assertFalse(strBuilder1.equals((Object)strBuilder0));
      assertFalse(strBuilder3.equals((Object)strBuilder4));
      assertFalse(strBuilder3.equals((Object)strBuilder0));
      assertFalse(strBuilder3.equals((Object)strBuilder5));
      assertFalse(strBuilder3.equals((Object)strBuilder2));
      
      StrBuilder strBuilder7 = new StrBuilder();
      assertEquals(32, strBuilder7.capacity());
      assertEquals(0, strBuilder7.length());
      assertEquals(0, strBuilder7.size());
      assertFalse(strBuilder7.isNotEmpty());
      assertNull(strBuilder7.getNullText());
      assertTrue(strBuilder7.isEmpty());
      assertNull(strBuilder7.getNewLineText());
      assertNotNull(strBuilder7);
      assertFalse(strBuilder7.equals((Object)strBuilder4));
      assertTrue(strBuilder7.equals((Object)strBuilder5));
      assertFalse(strBuilder7.equals((Object)strBuilder6));
      assertTrue(strBuilder7.equals((Object)strBuilder0));
      assertFalse(strBuilder7.equals((Object)strBuilder3));
      assertFalse(strBuilder7.equals((Object)strBuilder2));
      assertFalse(strBuilder7.equals((Object)strBuilder1));
      
      StrBuilder strBuilder8 = strBuilder6.replaceAll("<95oc\u0005{2z=c+DM;4F", "<95oc\u0005{2z=c+DM;4F");
      assertNull(strBuilder1.getNullText());
      assertTrue(strBuilder1.isNotEmpty());
      assertEquals(35, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(35, strBuilder1.length());
      assertEquals(35, strBuilder1.size());
      assertEquals("maxWith cannot be negative", stringBuilder0.toString());
      assertTrue(strBuilder3.isNotEmpty());
      assertEquals(35, strBuilder3.size());
      assertEquals(35, strBuilder3.length());
      assertEquals(35, strBuilder3.capacity());
      assertFalse(strBuilder3.isEmpty());
      assertNull(strBuilder3.getNullText());
      assertNull(strBuilder3.getNewLineText());
      assertFalse(strBuilder6.isEmpty());
      assertNull(strBuilder6.getNewLineText());
      assertNull(strBuilder6.getNullText());
      assertEquals(35, strBuilder6.capacity());
      assertTrue(strBuilder6.isNotEmpty());
      assertEquals(35, strBuilder6.length());
      assertEquals(35, strBuilder6.size());
      assertNull(strBuilder8.getNullText());
      assertTrue(strBuilder8.isNotEmpty());
      assertEquals(35, strBuilder8.length());
      assertEquals(35, strBuilder8.size());
      assertEquals(35, strBuilder8.capacity());
      assertFalse(strBuilder8.isEmpty());
      assertNull(strBuilder8.getNewLineText());
      assertNotNull(strBuilder8);
      assertFalse(strBuilder1.equals((Object)strBuilder4));
      assertFalse(strBuilder1.equals((Object)strBuilder2));
      assertFalse(strBuilder1.equals((Object)strBuilder5));
      assertFalse(strBuilder1.equals((Object)strBuilder7));
      assertFalse(strBuilder1.equals((Object)strBuilder0));
      assertFalse(strBuilder3.equals((Object)strBuilder7));
      assertFalse(strBuilder3.equals((Object)strBuilder4));
      assertFalse(strBuilder3.equals((Object)strBuilder0));
      assertFalse(strBuilder3.equals((Object)strBuilder5));
      assertFalse(strBuilder3.equals((Object)strBuilder2));
      assertFalse(strBuilder6.equals((Object)strBuilder4));
      assertFalse(strBuilder6.equals((Object)strBuilder7));
      assertFalse(strBuilder6.equals((Object)strBuilder2));
      assertFalse(strBuilder6.equals((Object)strBuilder5));
      assertFalse(strBuilder6.equals((Object)strBuilder0));
      assertFalse(strBuilder8.equals((Object)strBuilder7));
      assertFalse(strBuilder8.equals((Object)strBuilder4));
      assertFalse(strBuilder8.equals((Object)strBuilder0));
      assertFalse(strBuilder8.equals((Object)strBuilder2));
      assertFalse(strBuilder8.equals((Object)strBuilder5));
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      assertNotSame(strBuilder1, strBuilder4);
      assertNotSame(strBuilder1, strBuilder2);
      assertNotSame(strBuilder1, strBuilder5);
      assertNotSame(strBuilder1, strBuilder7);
      assertNotSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder8);
      assertSame(strBuilder1, strBuilder6);
      assertSame(strBuilder3, strBuilder1);
      assertNotSame(strBuilder3, strBuilder7);
      assertSame(strBuilder3, strBuilder8);
      assertNotSame(strBuilder3, strBuilder4);
      assertNotSame(strBuilder3, strBuilder0);
      assertNotSame(strBuilder3, strBuilder5);
      assertNotSame(strBuilder3, strBuilder2);
      assertSame(strBuilder3, strBuilder6);
      assertNotSame(strBuilder6, strBuilder4);
      assertNotSame(strBuilder6, strBuilder7);
      assertNotSame(strBuilder6, strBuilder2);
      assertNotSame(strBuilder6, strBuilder5);
      assertNotSame(strBuilder6, strBuilder0);
      assertSame(strBuilder6, strBuilder3);
      assertSame(strBuilder6, strBuilder8);
      assertSame(strBuilder6, strBuilder1);
      assertNotSame(strBuilder8, strBuilder7);
      assertSame(strBuilder8, strBuilder1);
      assertSame(strBuilder8, strBuilder3);
      assertNotSame(strBuilder8, strBuilder4);
      assertNotSame(strBuilder8, strBuilder0);
      assertNotSame(strBuilder8, strBuilder2);
      assertNotSame(strBuilder8, strBuilder5);
      assertSame(strBuilder8, strBuilder6);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("^idxVa9J(IJ6fm");
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(46, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(14, strBuilder0.length());
      assertEquals(14, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.appendSeparator('B', 32);
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(46, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(15, strBuilder0.length());
      assertEquals(15, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(46, strBuilder1.capacity());
      assertTrue(strBuilder1.isNotEmpty());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(15, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(15, strBuilder1.size());
      assertNotNull(strBuilder1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      
      String string0 = strBuilder0.build();
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(46, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(15, strBuilder0.length());
      assertEquals(15, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertNotNull(string0);
      assertEquals("^idxVa9J(IJ6fmB", string0);
      assertSame(strBuilder0, strBuilder1);
      
      StrBuilder strBuilder2 = new StrBuilder(13);
      assertEquals(13, strBuilder2.capacity());
      assertNull(strBuilder2.getNewLineText());
      assertTrue(strBuilder2.isEmpty());
      assertEquals(0, strBuilder2.size());
      assertNull(strBuilder2.getNullText());
      assertEquals(0, strBuilder2.length());
      assertFalse(strBuilder2.isNotEmpty());
      assertNotNull(strBuilder2);
      assertFalse(strBuilder2.equals((Object)strBuilder1));
      assertFalse(strBuilder2.equals((Object)strBuilder0));
      
      char char0 = '_';
      StrBuilder strBuilder3 = strBuilder2.append('f');
      assertEquals(13, strBuilder2.capacity());
      assertNull(strBuilder2.getNewLineText());
      assertTrue(strBuilder2.isNotEmpty());
      assertEquals(1, strBuilder2.length());
      assertEquals(1, strBuilder2.size());
      assertNull(strBuilder2.getNullText());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(1, strBuilder3.size());
      assertEquals(1, strBuilder3.length());
      assertNull(strBuilder3.getNullText());
      assertEquals(13, strBuilder3.capacity());
      assertTrue(strBuilder3.isNotEmpty());
      assertNull(strBuilder3.getNewLineText());
      assertFalse(strBuilder3.isEmpty());
      assertNotNull(strBuilder3);
      assertFalse(strBuilder2.equals((Object)strBuilder1));
      assertFalse(strBuilder2.equals((Object)strBuilder0));
      assertFalse(strBuilder3.equals((Object)strBuilder0));
      assertFalse(strBuilder3.equals((Object)strBuilder1));
      assertSame(strBuilder2, strBuilder3);
      assertNotSame(strBuilder2, strBuilder1);
      assertNotSame(strBuilder2, strBuilder0);
      assertNotSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder2);
      assertNotSame(strBuilder3, strBuilder1);
      
      // Undeclared exception!
      try { 
        strBuilder3.append(strBuilder1, 13, 32);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // length must be valid
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.appendNewLine();
      assertEquals(1, strBuilder0.size());
      assertEquals(1, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder1.isNotEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(1, strBuilder1.size());
      assertEquals(1, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertNotNull(strBuilder1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      
      StrBuilder strBuilder2 = strBuilder0.minimizeCapacity();
      assertEquals(1, strBuilder0.size());
      assertEquals(1, strBuilder0.length());
      assertEquals(1, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder2.isNotEmpty());
      assertEquals(1, strBuilder2.capacity());
      assertNull(strBuilder2.getNullText());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(1, strBuilder2.length());
      assertEquals(1, strBuilder2.size());
      assertNull(strBuilder2.getNewLineText());
      assertNotNull(strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      
      StrBuilder strBuilder3 = strBuilder0.minimizeCapacity();
      assertEquals(1, strBuilder0.size());
      assertEquals(1, strBuilder0.length());
      assertEquals(1, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(1, strBuilder3.size());
      assertNull(strBuilder3.getNullText());
      assertEquals(1, strBuilder3.length());
      assertFalse(strBuilder3.isEmpty());
      assertNull(strBuilder3.getNewLineText());
      assertTrue(strBuilder3.isNotEmpty());
      assertEquals(1, strBuilder3.capacity());
      assertNotNull(strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder2);
      
      int int0 = 2477;
      // Undeclared exception!
      try { 
        strBuilder1.insert(2477, (float) 2477);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 2477
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(0);
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.appendPadding(0, 'Q');
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder1.length());
      assertEquals(0, strBuilder1.size());
      assertFalse(strBuilder1.isNotEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNullText());
      assertTrue(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertNotNull(strBuilder1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      
      StrBuilder strBuilder2 = strBuilder1.append((float) 1);
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(3, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(3, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(3, strBuilder1.size());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(3, strBuilder1.length());
      assertEquals(32, strBuilder1.capacity());
      assertTrue(strBuilder1.isNotEmpty());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(32, strBuilder2.capacity());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(3, strBuilder2.length());
      assertEquals(3, strBuilder2.size());
      assertTrue(strBuilder2.isNotEmpty());
      assertNull(strBuilder2.getNullText());
      assertNull(strBuilder2.getNewLineText());
      assertNotNull(strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      
      boolean boolean0 = strBuilder0.contains('Q');
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(3, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(3, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(boolean0);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(3, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(3, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder_StrBuilderReader0.markSupported());
      assertTrue(strBuilder_StrBuilderReader0.ready());
      assertNotNull(strBuilder_StrBuilderReader0);
      
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) strBuilder_StrBuilderReader0;
      objectArray0[1] = (Object) strBuilder1;
      objectArray0[2] = (Object) strBuilder0;
      StrBuilder strBuilder3 = strBuilder2.append("', has a length less than 2", objectArray0);
      assertEquals(30, strBuilder0.length());
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(30, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(30, strBuilder1.size());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(30, strBuilder1.length());
      assertTrue(strBuilder1.isNotEmpty());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(32, strBuilder2.capacity());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(30, strBuilder2.size());
      assertEquals(30, strBuilder2.length());
      assertTrue(strBuilder2.isNotEmpty());
      assertNull(strBuilder2.getNullText());
      assertNull(strBuilder2.getNewLineText());
      assertNull(strBuilder3.getNewLineText());
      assertFalse(strBuilder3.isEmpty());
      assertNull(strBuilder3.getNullText());
      assertTrue(strBuilder3.isNotEmpty());
      assertEquals(30, strBuilder3.size());
      assertEquals(32, strBuilder3.capacity());
      assertEquals(30, strBuilder3.length());
      assertNotNull(strBuilder3);
      assertEquals(3, objectArray0.length);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder3);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder3, strBuilder2);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder1);
      
      StrBuilder strBuilder4 = new StrBuilder(1);
      assertEquals(1, strBuilder4.capacity());
      assertEquals(0, strBuilder4.length());
      assertEquals(0, strBuilder4.size());
      assertFalse(strBuilder4.isNotEmpty());
      assertNull(strBuilder4.getNullText());
      assertTrue(strBuilder4.isEmpty());
      assertNull(strBuilder4.getNewLineText());
      assertNotNull(strBuilder4);
      assertFalse(strBuilder4.equals((Object)strBuilder3));
      assertFalse(strBuilder4.equals((Object)strBuilder0));
      assertFalse(strBuilder4.equals((Object)strBuilder1));
      assertFalse(strBuilder4.equals((Object)strBuilder2));
      
      char[] charArray0 = new char[3];
      charArray0[0] = '2';
      objectArray0[1] = (Object) 'q';
      StrBuilder strBuilder5 = strBuilder3.appendln(charArray0);
      assertEquals(34, strBuilder0.size());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(66, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(34, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(34, strBuilder1.length());
      assertEquals(34, strBuilder1.size());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(66, strBuilder1.capacity());
      assertTrue(strBuilder1.isNotEmpty());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(66, strBuilder2.capacity());
      assertEquals(34, strBuilder2.length());
      assertEquals(34, strBuilder2.size());
      assertTrue(strBuilder2.isNotEmpty());
      assertNull(strBuilder2.getNullText());
      assertNull(strBuilder2.getNewLineText());
      assertNull(strBuilder3.getNewLineText());
      assertFalse(strBuilder3.isEmpty());
      assertEquals(34, strBuilder3.size());
      assertNull(strBuilder3.getNullText());
      assertEquals(34, strBuilder3.length());
      assertTrue(strBuilder3.isNotEmpty());
      assertEquals(66, strBuilder3.capacity());
      assertEquals(66, strBuilder5.capacity());
      assertFalse(strBuilder5.isEmpty());
      assertEquals(34, strBuilder5.size());
      assertEquals(34, strBuilder5.length());
      assertTrue(strBuilder5.isNotEmpty());
      assertNull(strBuilder5.getNullText());
      assertNull(strBuilder5.getNewLineText());
      assertNotNull(strBuilder5);
      assertFalse(strBuilder0.equals((Object)strBuilder4));
      assertFalse(strBuilder1.equals((Object)strBuilder4));
      assertFalse(strBuilder2.equals((Object)strBuilder4));
      assertFalse(strBuilder3.equals((Object)strBuilder4));
      assertFalse(strBuilder5.equals((Object)strBuilder4));
      assertArrayEquals(new char[] {'2', '\u0000', '\u0000'}, charArray0);
      assertEquals(3, objectArray0.length);
      assertEquals(3, charArray0.length);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertNotSame(strBuilder0, strBuilder4);
      assertSame(strBuilder1, strBuilder0);
      assertNotSame(strBuilder1, strBuilder4);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder5);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder5);
      assertSame(strBuilder2, strBuilder3);
      assertSame(strBuilder2, strBuilder0);
      assertNotSame(strBuilder2, strBuilder4);
      assertSame(strBuilder3, strBuilder2);
      assertSame(strBuilder3, strBuilder5);
      assertSame(strBuilder3, strBuilder0);
      assertNotSame(strBuilder3, strBuilder4);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder5, strBuilder1);
      assertSame(strBuilder5, strBuilder3);
      assertSame(strBuilder5, strBuilder2);
      assertSame(strBuilder5, strBuilder0);
      assertNotSame(strBuilder5, strBuilder4);
      
      IntStream intStream0 = strBuilder0.codePoints();
      assertEquals(34, strBuilder0.size());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(66, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(34, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertNotNull(intStream0);
      assertFalse(strBuilder0.equals((Object)strBuilder4));
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertNotSame(strBuilder0, strBuilder4);
      
      char[] charArray1 = strBuilder2.getChars(charArray0);
      assertEquals(34, strBuilder0.size());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(66, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(34, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(34, strBuilder1.length());
      assertEquals(34, strBuilder1.size());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(66, strBuilder1.capacity());
      assertTrue(strBuilder1.isNotEmpty());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(66, strBuilder2.capacity());
      assertEquals(34, strBuilder2.length());
      assertEquals(34, strBuilder2.size());
      assertTrue(strBuilder2.isNotEmpty());
      assertNull(strBuilder2.getNullText());
      assertNull(strBuilder2.getNewLineText());
      assertNotNull(charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(strBuilder0.equals((Object)strBuilder4));
      assertFalse(strBuilder1.equals((Object)strBuilder4));
      assertFalse(strBuilder2.equals((Object)strBuilder4));
      assertArrayEquals(new char[] {'2', '\u0000', '\u0000'}, charArray0);
      assertEquals(34, charArray1.length);
      assertEquals(3, charArray0.length);
      assertNotSame(charArray1, charArray0);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertNotSame(strBuilder0, strBuilder4);
      assertSame(strBuilder1, strBuilder0);
      assertNotSame(strBuilder1, strBuilder4);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder5);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder5);
      assertSame(strBuilder2, strBuilder3);
      assertSame(strBuilder2, strBuilder0);
      assertNotSame(strBuilder2, strBuilder4);
      assertNotSame(charArray0, charArray1);
      
      StringBuilder stringBuilder0 = new StringBuilder(strBuilder2);
      assertEquals(34, strBuilder0.size());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(66, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(34, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals("1.0', has a length less than 22\u0000\u0000\n", stringBuilder0.toString());
      assertEquals(34, strBuilder1.length());
      assertEquals(34, strBuilder1.size());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(66, strBuilder1.capacity());
      assertTrue(strBuilder1.isNotEmpty());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(66, strBuilder2.capacity());
      assertEquals(34, strBuilder2.length());
      assertEquals(34, strBuilder2.size());
      assertTrue(strBuilder2.isNotEmpty());
      assertNull(strBuilder2.getNullText());
      assertNull(strBuilder2.getNewLineText());
      assertNotNull(stringBuilder0);
      assertFalse(strBuilder0.equals((Object)strBuilder4));
      assertFalse(strBuilder1.equals((Object)strBuilder4));
      assertFalse(strBuilder2.equals((Object)strBuilder4));
      
      StringBuilder stringBuilder1 = stringBuilder0.insert(0, "MF3$e*+KvlT5vrSRoPp");
      assertEquals(34, strBuilder0.size());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(66, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(34, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals("MF3$e*+KvlT5vrSRoPp1.0', has a length less than 22\u0000\u0000\n", stringBuilder0.toString());
      assertEquals(34, strBuilder1.length());
      assertEquals(34, strBuilder1.size());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(66, strBuilder1.capacity());
      assertTrue(strBuilder1.isNotEmpty());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals("MF3$e*+KvlT5vrSRoPp1.0', has a length less than 22\u0000\u0000\n", stringBuilder1.toString());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(66, strBuilder2.capacity());
      assertEquals(34, strBuilder2.length());
      assertEquals(34, strBuilder2.size());
      assertTrue(strBuilder2.isNotEmpty());
      assertNull(strBuilder2.getNullText());
      assertNull(strBuilder2.getNewLineText());
      assertNotNull(stringBuilder1);
      assertFalse(strBuilder0.equals((Object)strBuilder4));
      assertFalse(strBuilder1.equals((Object)strBuilder4));
      assertFalse(strBuilder2.equals((Object)strBuilder4));
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertNotSame(strBuilder0, strBuilder4);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotSame(strBuilder1, strBuilder4);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder5);
      assertSame(strBuilder1, strBuilder2);
      assertSame(stringBuilder1, stringBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder5);
      assertSame(strBuilder2, strBuilder3);
      assertSame(strBuilder2, strBuilder0);
      assertNotSame(strBuilder2, strBuilder4);
      
      StringBuilder stringBuilder2 = stringBuilder1.append((CharSequence) strBuilder4);
      assertEquals(34, strBuilder0.size());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(66, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(34, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals("MF3$e*+KvlT5vrSRoPp1.0', has a length less than 22\u0000\u0000\n", stringBuilder0.toString());
      assertEquals(34, strBuilder1.length());
      assertEquals(34, strBuilder1.size());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(66, strBuilder1.capacity());
      assertTrue(strBuilder1.isNotEmpty());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals("MF3$e*+KvlT5vrSRoPp1.0', has a length less than 22\u0000\u0000\n", stringBuilder1.toString());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(66, strBuilder2.capacity());
      assertEquals(34, strBuilder2.length());
      assertEquals(34, strBuilder2.size());
      assertTrue(strBuilder2.isNotEmpty());
      assertNull(strBuilder2.getNullText());
      assertNull(strBuilder2.getNewLineText());
      assertEquals("MF3$e*+KvlT5vrSRoPp1.0', has a length less than 22\u0000\u0000\n", stringBuilder2.toString());
      assertEquals(1, strBuilder4.capacity());
      assertEquals(0, strBuilder4.length());
      assertEquals(0, strBuilder4.size());
      assertFalse(strBuilder4.isNotEmpty());
      assertNull(strBuilder4.getNullText());
      assertTrue(strBuilder4.isEmpty());
      assertNull(strBuilder4.getNewLineText());
      assertNotNull(stringBuilder2);
      assertFalse(strBuilder0.equals((Object)strBuilder4));
      assertFalse(strBuilder1.equals((Object)strBuilder4));
      assertFalse(strBuilder2.equals((Object)strBuilder4));
      assertFalse(strBuilder4.equals((Object)strBuilder5));
      assertFalse(strBuilder4.equals((Object)strBuilder3));
      assertFalse(strBuilder4.equals((Object)strBuilder0));
      assertFalse(strBuilder4.equals((Object)strBuilder1));
      assertFalse(strBuilder4.equals((Object)strBuilder2));
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertNotSame(strBuilder0, strBuilder4);
      assertSame(stringBuilder0, stringBuilder2);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotSame(strBuilder1, strBuilder4);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder5);
      assertSame(strBuilder1, strBuilder2);
      assertSame(stringBuilder1, stringBuilder2);
      assertSame(stringBuilder1, stringBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder5);
      assertSame(strBuilder2, strBuilder3);
      assertSame(strBuilder2, strBuilder0);
      assertNotSame(strBuilder2, strBuilder4);
      assertSame(stringBuilder2, stringBuilder1);
      assertSame(stringBuilder2, stringBuilder0);
      assertNotSame(strBuilder4, strBuilder5);
      assertNotSame(strBuilder4, strBuilder3);
      assertNotSame(strBuilder4, strBuilder0);
      assertNotSame(strBuilder4, strBuilder1);
      assertNotSame(strBuilder4, strBuilder2);
      
      StringBuilder stringBuilder3 = stringBuilder2.append((float) 0);
      assertEquals(34, strBuilder0.size());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(66, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(34, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals("MF3$e*+KvlT5vrSRoPp1.0', has a length less than 22\u0000\u0000\n0.0", stringBuilder0.toString());
      assertEquals(34, strBuilder1.length());
      assertEquals(34, strBuilder1.size());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(66, strBuilder1.capacity());
      assertTrue(strBuilder1.isNotEmpty());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals("MF3$e*+KvlT5vrSRoPp1.0', has a length less than 22\u0000\u0000\n0.0", stringBuilder1.toString());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(66, strBuilder2.capacity());
      assertEquals(34, strBuilder2.length());
      assertEquals(34, strBuilder2.size());
      assertTrue(strBuilder2.isNotEmpty());
      assertNull(strBuilder2.getNullText());
      assertNull(strBuilder2.getNewLineText());
      assertEquals("MF3$e*+KvlT5vrSRoPp1.0', has a length less than 22\u0000\u0000\n0.0", stringBuilder2.toString());
      assertEquals("MF3$e*+KvlT5vrSRoPp1.0', has a length less than 22\u0000\u0000\n0.0", stringBuilder3.toString());
      assertEquals(1, strBuilder4.capacity());
      assertEquals(0, strBuilder4.length());
      assertEquals(0, strBuilder4.size());
      assertFalse(strBuilder4.isNotEmpty());
      assertNull(strBuilder4.getNullText());
      assertTrue(strBuilder4.isEmpty());
      assertNull(strBuilder4.getNewLineText());
      assertNotNull(stringBuilder3);
      assertFalse(strBuilder0.equals((Object)strBuilder4));
      assertFalse(strBuilder1.equals((Object)strBuilder4));
      assertFalse(strBuilder2.equals((Object)strBuilder4));
      assertFalse(strBuilder4.equals((Object)strBuilder5));
      assertFalse(strBuilder4.equals((Object)strBuilder3));
      assertFalse(strBuilder4.equals((Object)strBuilder0));
      assertFalse(strBuilder4.equals((Object)strBuilder1));
      assertFalse(strBuilder4.equals((Object)strBuilder2));
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertNotSame(strBuilder0, strBuilder4);
      assertSame(stringBuilder0, stringBuilder3);
      assertSame(stringBuilder0, stringBuilder2);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotSame(strBuilder1, strBuilder4);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder5);
      assertSame(strBuilder1, strBuilder2);
      assertSame(stringBuilder1, stringBuilder2);
      assertSame(stringBuilder1, stringBuilder3);
      assertSame(stringBuilder1, stringBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder5);
      assertSame(strBuilder2, strBuilder3);
      assertSame(strBuilder2, strBuilder0);
      assertNotSame(strBuilder2, strBuilder4);
      assertSame(stringBuilder2, stringBuilder1);
      assertSame(stringBuilder2, stringBuilder3);
      assertSame(stringBuilder2, stringBuilder0);
      assertSame(stringBuilder3, stringBuilder1);
      assertSame(stringBuilder3, stringBuilder0);
      assertSame(stringBuilder3, stringBuilder2);
      assertNotSame(strBuilder4, strBuilder5);
      assertNotSame(strBuilder4, strBuilder3);
      assertNotSame(strBuilder4, strBuilder0);
      assertNotSame(strBuilder4, strBuilder1);
      assertNotSame(strBuilder4, strBuilder2);
      
      StringWriter stringWriter0 = new StringWriter(0);
      assertEquals("", stringWriter0.toString());
      assertNotNull(stringWriter0);
      
      StrBuilder strBuilder6 = strBuilder4.appendFixedWidthPadLeft(1, 1, 'Q');
      assertEquals(1, strBuilder6.capacity());
      assertFalse(strBuilder6.isEmpty());
      assertEquals(1, strBuilder6.length());
      assertEquals(1, strBuilder6.size());
      assertTrue(strBuilder6.isNotEmpty());
      assertNull(strBuilder6.getNullText());
      assertNull(strBuilder6.getNewLineText());
      assertEquals(1, strBuilder4.capacity());
      assertFalse(strBuilder4.isEmpty());
      assertEquals(1, strBuilder4.length());
      assertEquals(1, strBuilder4.size());
      assertNull(strBuilder4.getNullText());
      assertTrue(strBuilder4.isNotEmpty());
      assertNull(strBuilder4.getNewLineText());
      assertNotNull(strBuilder6);
      assertFalse(strBuilder6.equals((Object)strBuilder5));
      assertFalse(strBuilder6.equals((Object)strBuilder0));
      assertFalse(strBuilder6.equals((Object)strBuilder3));
      assertFalse(strBuilder6.equals((Object)strBuilder2));
      assertFalse(strBuilder6.equals((Object)strBuilder1));
      assertFalse(strBuilder4.equals((Object)strBuilder5));
      assertFalse(strBuilder4.equals((Object)strBuilder3));
      assertFalse(strBuilder4.equals((Object)strBuilder0));
      assertFalse(strBuilder4.equals((Object)strBuilder1));
      assertFalse(strBuilder4.equals((Object)strBuilder2));
      assertNotSame(strBuilder6, strBuilder5);
      assertNotSame(strBuilder6, strBuilder0);
      assertSame(strBuilder6, strBuilder4);
      assertNotSame(strBuilder6, strBuilder3);
      assertNotSame(strBuilder6, strBuilder2);
      assertNotSame(strBuilder6, strBuilder1);
      assertSame(strBuilder4, strBuilder6);
      assertNotSame(strBuilder4, strBuilder5);
      assertNotSame(strBuilder4, strBuilder3);
      assertNotSame(strBuilder4, strBuilder0);
      assertNotSame(strBuilder4, strBuilder1);
      assertNotSame(strBuilder4, strBuilder2);
      
      StrBuilder strBuilder7 = new StrBuilder(0);
      assertTrue(strBuilder7.isEmpty());
      assertEquals(32, strBuilder7.capacity());
      assertNull(strBuilder7.getNullText());
      assertNull(strBuilder7.getNewLineText());
      assertEquals(0, strBuilder7.length());
      assertEquals(0, strBuilder7.size());
      assertFalse(strBuilder7.isNotEmpty());
      assertNotNull(strBuilder7);
      assertFalse(strBuilder7.equals((Object)strBuilder0));
      assertFalse(strBuilder7.equals((Object)strBuilder5));
      assertFalse(strBuilder7.equals((Object)strBuilder4));
      assertFalse(strBuilder7.equals((Object)strBuilder2));
      assertFalse(strBuilder7.equals((Object)strBuilder6));
      assertFalse(strBuilder7.equals((Object)strBuilder3));
      assertFalse(strBuilder7.equals((Object)strBuilder1));
      
      StrBuilder strBuilder8 = strBuilder2.append('2');
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(35, strBuilder0.size());
      assertEquals(66, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(35, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(35, strBuilder1.size());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(35, strBuilder1.length());
      assertEquals(66, strBuilder1.capacity());
      assertTrue(strBuilder1.isNotEmpty());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(66, strBuilder2.capacity());
      assertEquals(35, strBuilder2.length());
      assertEquals(35, strBuilder2.size());
      assertTrue(strBuilder2.isNotEmpty());
      assertNull(strBuilder2.getNullText());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(35, strBuilder8.size());
      assertNull(strBuilder8.getNullText());
      assertNull(strBuilder8.getNewLineText());
      assertTrue(strBuilder8.isNotEmpty());
      assertFalse(strBuilder8.isEmpty());
      assertEquals(66, strBuilder8.capacity());
      assertEquals(35, strBuilder8.length());
      assertNotNull(strBuilder8);
      assertFalse(strBuilder0.equals((Object)strBuilder6));
      assertFalse(strBuilder0.equals((Object)strBuilder7));
      assertFalse(strBuilder0.equals((Object)strBuilder4));
      assertFalse(strBuilder1.equals((Object)strBuilder4));
      assertFalse(strBuilder1.equals((Object)strBuilder6));
      assertFalse(strBuilder1.equals((Object)strBuilder7));
      assertFalse(strBuilder2.equals((Object)strBuilder7));
      assertFalse(strBuilder2.equals((Object)strBuilder6));
      assertFalse(strBuilder2.equals((Object)strBuilder4));
      assertFalse(strBuilder8.equals((Object)strBuilder7));
      assertFalse(strBuilder8.equals((Object)strBuilder4));
      assertFalse(strBuilder8.equals((Object)strBuilder6));
      assertSame(strBuilder0, strBuilder3);
      assertNotSame(strBuilder0, strBuilder6);
      assertNotSame(strBuilder0, strBuilder7);
      assertSame(strBuilder0, strBuilder8);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertNotSame(strBuilder0, strBuilder4);
      assertSame(strBuilder1, strBuilder0);
      assertNotSame(strBuilder1, strBuilder4);
      assertSame(strBuilder1, strBuilder3);
      assertNotSame(strBuilder1, strBuilder6);
      assertSame(strBuilder1, strBuilder5);
      assertSame(strBuilder1, strBuilder8);
      assertNotSame(strBuilder1, strBuilder7);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder8);
      assertNotSame(strBuilder2, strBuilder7);
      assertSame(strBuilder2, strBuilder5);
      assertSame(strBuilder2, strBuilder3);
      assertNotSame(strBuilder2, strBuilder6);
      assertSame(strBuilder2, strBuilder0);
      assertNotSame(strBuilder2, strBuilder4);
      assertNotSame(strBuilder8, strBuilder7);
      assertSame(strBuilder8, strBuilder0);
      assertNotSame(strBuilder8, strBuilder4);
      assertSame(strBuilder8, strBuilder2);
      assertSame(strBuilder8, strBuilder3);
      assertNotSame(strBuilder8, strBuilder6);
      assertSame(strBuilder8, strBuilder1);
      assertSame(strBuilder8, strBuilder5);
      
      StrBuilder strBuilder9 = strBuilder6.minimizeCapacity();
      assertEquals(1, strBuilder6.capacity());
      assertFalse(strBuilder6.isEmpty());
      assertEquals(1, strBuilder6.length());
      assertEquals(1, strBuilder6.size());
      assertTrue(strBuilder6.isNotEmpty());
      assertNull(strBuilder6.getNullText());
      assertNull(strBuilder6.getNewLineText());
      assertTrue(strBuilder9.isNotEmpty());
      assertFalse(strBuilder9.isEmpty());
      assertNull(strBuilder9.getNullText());
      assertNull(strBuilder9.getNewLineText());
      assertEquals(1, strBuilder9.length());
      assertEquals(1, strBuilder9.capacity());
      assertEquals(1, strBuilder9.size());
      assertEquals(1, strBuilder4.capacity());
      assertFalse(strBuilder4.isEmpty());
      assertEquals(1, strBuilder4.length());
      assertEquals(1, strBuilder4.size());
      assertNull(strBuilder4.getNullText());
      assertTrue(strBuilder4.isNotEmpty());
      assertNull(strBuilder4.getNewLineText());
      assertNotNull(strBuilder9);
      assertFalse(strBuilder6.equals((Object)strBuilder5));
      assertFalse(strBuilder6.equals((Object)strBuilder0));
      assertFalse(strBuilder6.equals((Object)strBuilder7));
      assertFalse(strBuilder6.equals((Object)strBuilder3));
      assertFalse(strBuilder6.equals((Object)strBuilder2));
      assertFalse(strBuilder6.equals((Object)strBuilder1));
      assertFalse(strBuilder6.equals((Object)strBuilder8));
      assertFalse(strBuilder9.equals((Object)strBuilder2));
      assertFalse(strBuilder9.equals((Object)strBuilder3));
      assertFalse(strBuilder9.equals((Object)strBuilder0));
      assertFalse(strBuilder9.equals((Object)strBuilder1));
      assertFalse(strBuilder9.equals((Object)strBuilder5));
      assertFalse(strBuilder9.equals((Object)strBuilder7));
      assertFalse(strBuilder9.equals((Object)strBuilder8));
      assertFalse(strBuilder4.equals((Object)strBuilder5));
      assertFalse(strBuilder4.equals((Object)strBuilder3));
      assertFalse(strBuilder4.equals((Object)strBuilder0));
      assertFalse(strBuilder4.equals((Object)strBuilder1));
      assertFalse(strBuilder4.equals((Object)strBuilder7));
      assertFalse(strBuilder4.equals((Object)strBuilder2));
      assertFalse(strBuilder4.equals((Object)strBuilder8));
      assertNotSame(strBuilder6, strBuilder5);
      assertNotSame(strBuilder6, strBuilder0);
      assertSame(strBuilder6, strBuilder4);
      assertNotSame(strBuilder6, strBuilder7);
      assertNotSame(strBuilder6, strBuilder3);
      assertNotSame(strBuilder6, strBuilder2);
      assertNotSame(strBuilder6, strBuilder1);
      assertSame(strBuilder6, strBuilder9);
      assertNotSame(strBuilder6, strBuilder8);
      assertNotSame(strBuilder9, strBuilder2);
      assertNotSame(strBuilder9, strBuilder3);
      assertNotSame(strBuilder9, strBuilder0);
      assertSame(strBuilder9, strBuilder6);
      assertNotSame(strBuilder9, strBuilder1);
      assertNotSame(strBuilder9, strBuilder5);
      assertSame(strBuilder9, strBuilder4);
      assertNotSame(strBuilder9, strBuilder7);
      assertNotSame(strBuilder9, strBuilder8);
      assertSame(strBuilder4, strBuilder6);
      assertNotSame(strBuilder4, strBuilder5);
      assertNotSame(strBuilder4, strBuilder3);
      assertNotSame(strBuilder4, strBuilder0);
      assertNotSame(strBuilder4, strBuilder1);
      assertNotSame(strBuilder4, strBuilder7);
      assertSame(strBuilder4, strBuilder9);
      assertNotSame(strBuilder4, strBuilder2);
      assertNotSame(strBuilder4, strBuilder8);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Invalid length: ");
      assertFalse(boolean0);
      
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertFalse(strBuilder0.isNotEmpty());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = new StrBuilder("Invalid length: ");
      assertEquals(16, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertEquals(16, strBuilder1.size());
      assertTrue(strBuilder1.isNotEmpty());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(48, strBuilder1.capacity());
      assertNotNull(strBuilder1);
      assertFalse(strBuilder1.equals((Object)strBuilder0));
      
      int int0 = 16;
      // Undeclared exception!
      try { 
        strBuilder0.appendln(strBuilder1, 16, 16);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // length must be valid
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      int int0 = 57;
      StrBuilder strBuilder0 = new StrBuilder(57);
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(57, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertFalse(strBuilder0.isNotEmpty());
      assertNotNull(strBuilder0);
      
      char char0 = '7';
      PipedReader pipedReader0 = new PipedReader();
      assertNotNull(pipedReader0);
      
      try { 
        strBuilder0.readFrom(pipedReader0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(228);
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(228, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertFalse(strBuilder0.isNotEmpty());
      assertNotNull(strBuilder0);
      
      PipedReader pipedReader0 = new PipedReader();
      assertNotNull(pipedReader0);
      
      try { 
        strBuilder0.readFrom(pipedReader0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isNotEmpty());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.setLength(0);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder1.length());
      assertEquals(0, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertFalse(strBuilder1.isNotEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertTrue(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertNotNull(strBuilder1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      
      char[] charArray0 = strBuilder0.toCharArray();
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isNotEmpty());
      assertNotNull(charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      assertSame(strBuilder0, strBuilder1);
      
      StrBuilder strBuilder2 = strBuilder0.appendln((double) '@');
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(5, strBuilder0.size());
      assertEquals(5, strBuilder0.length());
      assertNull(strBuilder2.getNullText());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(5, strBuilder2.size());
      assertEquals(5, strBuilder2.length());
      assertEquals(32, strBuilder2.capacity());
      assertNull(strBuilder2.getNewLineText());
      assertTrue(strBuilder2.isNotEmpty());
      assertNotNull(strBuilder2);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      
      StrBuilder strBuilder3 = new StrBuilder();
      assertNull(strBuilder3.getNewLineText());
      assertEquals(0, strBuilder3.size());
      assertNull(strBuilder3.getNullText());
      assertEquals(0, strBuilder3.length());
      assertEquals(32, strBuilder3.capacity());
      assertTrue(strBuilder3.isEmpty());
      assertFalse(strBuilder3.isNotEmpty());
      assertNotNull(strBuilder3);
      assertFalse(strBuilder3.equals((Object)strBuilder0));
      assertFalse(strBuilder3.equals((Object)strBuilder1));
      assertFalse(strBuilder3.equals((Object)strBuilder2));
      
      StrBuilder strBuilder4 = strBuilder2.deleteFirst('@');
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(5, strBuilder0.size());
      assertEquals(5, strBuilder0.length());
      assertNull(strBuilder2.getNullText());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(5, strBuilder2.size());
      assertEquals(5, strBuilder2.length());
      assertEquals(32, strBuilder2.capacity());
      assertNull(strBuilder2.getNewLineText());
      assertTrue(strBuilder2.isNotEmpty());
      assertEquals(5, strBuilder4.length());
      assertNull(strBuilder4.getNewLineText());
      assertEquals(32, strBuilder4.capacity());
      assertTrue(strBuilder4.isNotEmpty());
      assertFalse(strBuilder4.isEmpty());
      assertNull(strBuilder4.getNullText());
      assertEquals(5, strBuilder4.size());
      assertNotNull(strBuilder4);
      assertFalse(strBuilder0.equals((Object)strBuilder3));
      assertFalse(strBuilder2.equals((Object)strBuilder3));
      assertFalse(strBuilder4.equals((Object)strBuilder3));
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder1);
      assertNotSame(strBuilder0, strBuilder3);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertNotSame(strBuilder2, strBuilder3);
      assertSame(strBuilder2, strBuilder4);
      assertSame(strBuilder4, strBuilder1);
      assertSame(strBuilder4, strBuilder0);
      assertSame(strBuilder4, strBuilder2);
      assertNotSame(strBuilder4, strBuilder3);
      
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) strBuilder1;
      char char0 = strBuilder0.charAt(0);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(5, strBuilder0.size());
      assertEquals(5, strBuilder0.length());
      assertEquals('6', char0);
      assertFalse(strBuilder0.equals((Object)strBuilder3));
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder1);
      assertNotSame(strBuilder0, strBuilder3);
      
      objectArray0[1] = (Object) strBuilder3;
      objectArray0[2] = (Object) strBuilder0;
      StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer0 = strBuilder3.new StrBuilderTokenizer();
      assertNull(strBuilder3.getNewLineText());
      assertEquals(0, strBuilder3.size());
      assertNull(strBuilder3.getNullText());
      assertEquals(0, strBuilder3.length());
      assertEquals(32, strBuilder3.capacity());
      assertTrue(strBuilder3.isEmpty());
      assertFalse(strBuilder3.isNotEmpty());
      assertTrue(strBuilder_StrBuilderTokenizer0.isIgnoreEmptyTokens());
      assertFalse(strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull());
      assertEquals((-1), strBuilder_StrBuilderTokenizer0.previousIndex());
      assertEquals(0, strBuilder_StrBuilderTokenizer0.nextIndex());
      assertNotNull(strBuilder_StrBuilderTokenizer0);
      assertFalse(strBuilder3.equals((Object)strBuilder4));
      assertFalse(strBuilder3.equals((Object)strBuilder0));
      assertFalse(strBuilder3.equals((Object)strBuilder1));
      assertFalse(strBuilder3.equals((Object)strBuilder2));
      
      StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer1 = (StrBuilder.StrBuilderTokenizer)strBuilder_StrBuilderTokenizer0.clone();
      assertNull(strBuilder3.getNewLineText());
      assertEquals(0, strBuilder3.size());
      assertNull(strBuilder3.getNullText());
      assertEquals(0, strBuilder3.length());
      assertEquals(32, strBuilder3.capacity());
      assertTrue(strBuilder3.isEmpty());
      assertFalse(strBuilder3.isNotEmpty());
      assertTrue(strBuilder_StrBuilderTokenizer0.isIgnoreEmptyTokens());
      assertFalse(strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull());
      assertEquals((-1), strBuilder_StrBuilderTokenizer0.previousIndex());
      assertEquals(0, strBuilder_StrBuilderTokenizer0.nextIndex());
      assertEquals(0, strBuilder_StrBuilderTokenizer1.nextIndex());
      assertEquals((-1), strBuilder_StrBuilderTokenizer1.previousIndex());
      assertFalse(strBuilder_StrBuilderTokenizer1.isEmptyTokenAsNull());
      assertTrue(strBuilder_StrBuilderTokenizer1.isIgnoreEmptyTokens());
      assertNotNull(strBuilder_StrBuilderTokenizer1);
      assertFalse(strBuilder3.equals((Object)strBuilder4));
      assertFalse(strBuilder3.equals((Object)strBuilder0));
      assertFalse(strBuilder3.equals((Object)strBuilder1));
      assertFalse(strBuilder3.equals((Object)strBuilder2));
      assertFalse(strBuilder_StrBuilderTokenizer1.equals((Object)strBuilder_StrBuilderTokenizer0));
      assertNotSame(strBuilder3, strBuilder4);
      assertNotSame(strBuilder3, strBuilder0);
      assertNotSame(strBuilder3, strBuilder1);
      assertNotSame(strBuilder3, strBuilder2);
      assertNotSame(strBuilder_StrBuilderTokenizer0, strBuilder_StrBuilderTokenizer1);
      assertNotSame(strBuilder_StrBuilderTokenizer1, strBuilder_StrBuilderTokenizer0);
      
      objectArray0[3] = (Object) strBuilder_StrBuilderTokenizer1;
      String string0 = strBuilder0.rightString(1593);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(5, strBuilder0.size());
      assertEquals(5, strBuilder0.length());
      assertNotNull(string0);
      assertEquals("64.0\n", string0);
      assertFalse(strBuilder0.equals((Object)strBuilder3));
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder1);
      assertNotSame(strBuilder0, strBuilder3);
      
      StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer2 = strBuilder3.new StrBuilderTokenizer();
      assertNull(strBuilder3.getNewLineText());
      assertEquals(0, strBuilder3.size());
      assertNull(strBuilder3.getNullText());
      assertEquals(0, strBuilder3.length());
      assertEquals(32, strBuilder3.capacity());
      assertTrue(strBuilder3.isEmpty());
      assertFalse(strBuilder3.isNotEmpty());
      assertFalse(strBuilder_StrBuilderTokenizer2.isEmptyTokenAsNull());
      assertTrue(strBuilder_StrBuilderTokenizer2.isIgnoreEmptyTokens());
      assertEquals((-1), strBuilder_StrBuilderTokenizer2.previousIndex());
      assertEquals(0, strBuilder_StrBuilderTokenizer2.nextIndex());
      assertNotNull(strBuilder_StrBuilderTokenizer2);
      assertFalse(strBuilder3.equals((Object)strBuilder4));
      assertFalse(strBuilder3.equals((Object)strBuilder0));
      assertFalse(strBuilder3.equals((Object)strBuilder1));
      assertFalse(strBuilder3.equals((Object)strBuilder2));
      assertFalse(strBuilder_StrBuilderTokenizer2.equals((Object)strBuilder_StrBuilderTokenizer1));
      assertFalse(strBuilder_StrBuilderTokenizer2.equals((Object)strBuilder_StrBuilderTokenizer0));
      
      // Undeclared exception!
      try { 
        strBuilder_StrBuilderTokenizer0.next();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.text.StrTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(0, strBuilder0.size());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertNotNull(strBuilder0);
      
      HashSet<StringBuffer> hashSet0 = new HashSet<StringBuffer>();
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      assertNotNull(hashSet0);
      
      TreeSet<StringBuffer> treeSet0 = new TreeSet<StringBuffer>(hashSet0);
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      assertNotNull(treeSet0);
      
      StrBuilder strBuilder1 = strBuilder0.appendWithSeparators((Iterable<?>) treeSet0, "B~^`W-|e ~e!");
      assertEquals(0, strBuilder0.size());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      assertFalse(strBuilder1.isNotEmpty());
      assertTrue(strBuilder1.isEmpty());
      assertEquals(0, strBuilder1.size());
      assertEquals(0, strBuilder1.length());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNullText());
      assertNotNull(strBuilder1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      StrBuilder strBuilder0 = new StrBuilder(101);
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(101, strBuilder0.capacity());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertTrue(strBuilder0.isEmpty());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.appendSeparator('`', '`');
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(101, strBuilder0.capacity());
      assertEquals(1, strBuilder0.size());
      assertEquals(1, strBuilder0.length());
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder1.getNullText());
      assertTrue(strBuilder1.isNotEmpty());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(101, strBuilder1.capacity());
      assertEquals(1, strBuilder1.size());
      assertEquals(1, strBuilder1.length());
      assertNotNull(strBuilder1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      TreeSet<Integer> treeSet0 = new TreeSet<Integer>(comparator0);
      assertNotNull(treeSet0);
      assertFalse(treeSet0.contains(101));
      
      String string0 = "HG";
      StrBuilder strBuilder2 = strBuilder0.appendWithSeparators((Iterable<?>) treeSet0, "HG");
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(101, strBuilder0.capacity());
      assertEquals(1, strBuilder0.size());
      assertEquals(1, strBuilder0.length());
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder2.getNewLineText());
      assertTrue(strBuilder2.isNotEmpty());
      assertEquals(1, strBuilder2.length());
      assertNull(strBuilder2.getNullText());
      assertEquals(101, strBuilder2.capacity());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(1, strBuilder2.size());
      assertNotNull(strBuilder2);
      assertFalse(treeSet0.contains(101));
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      
      char char0 = 'Z';
      char char1 = 'q';
      StrBuilder strBuilder3 = strBuilder0.appendSeparator('q', 'Z');
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(101, strBuilder0.capacity());
      assertEquals(2, strBuilder0.size());
      assertEquals(2, strBuilder0.length());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(101, strBuilder3.capacity());
      assertFalse(strBuilder3.isEmpty());
      assertNull(strBuilder3.getNewLineText());
      assertNull(strBuilder3.getNullText());
      assertEquals(2, strBuilder3.size());
      assertEquals(2, strBuilder3.length());
      assertTrue(strBuilder3.isNotEmpty());
      assertNotNull(strBuilder3);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder2);
      
      int int0 = strBuilder0.indexOf('Z', 101);
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(101, strBuilder0.capacity());
      assertEquals(2, strBuilder0.size());
      assertEquals(2, strBuilder0.length());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals((-1), int0);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      
      // Undeclared exception!
      try { 
        strBuilder0.insert(1163, "HG");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 1163
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("dN");
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(2, strBuilder0.size());
      assertEquals(2, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(34, strBuilder0.capacity());
      assertNotNull(strBuilder0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      StrBuilder strBuilder1 = new StrBuilder(44);
      assertFalse(strBuilder1.isNotEmpty());
      assertNull(strBuilder1.getNullText());
      assertEquals(44, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertTrue(strBuilder1.isEmpty());
      assertEquals(0, strBuilder1.length());
      assertEquals(0, strBuilder1.size());
      assertNotNull(strBuilder1);
      assertFalse(strBuilder1.equals((Object)strBuilder0));
      
      StrBuilder strBuilder2 = strBuilder1.append('*');
      assertEquals(1, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertEquals(44, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertTrue(strBuilder1.isNotEmpty());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(1, strBuilder1.length());
      assertEquals(44, strBuilder2.capacity());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(1, strBuilder2.size());
      assertNull(strBuilder2.getNullText());
      assertEquals(1, strBuilder2.length());
      assertNull(strBuilder2.getNewLineText());
      assertTrue(strBuilder2.isNotEmpty());
      assertNotNull(strBuilder2);
      assertFalse(strBuilder1.equals((Object)strBuilder0));
      assertFalse(strBuilder2.equals((Object)strBuilder0));
      assertSame(strBuilder1, strBuilder2);
      assertNotSame(strBuilder1, strBuilder0);
      assertNotSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder1.new StrBuilderReader();
      assertEquals(1, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertEquals(44, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertTrue(strBuilder1.isNotEmpty());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(1, strBuilder1.length());
      assertTrue(strBuilder_StrBuilderReader0.markSupported());
      assertTrue(strBuilder_StrBuilderReader0.ready());
      assertNotNull(strBuilder_StrBuilderReader0);
      assertFalse(strBuilder1.equals((Object)strBuilder0));
      
      char[] charArray0 = new char[4];
      charArray0[0] = '*';
      charArray0[1] = '*';
      charArray0[2] = 'z';
      charArray0[3] = '*';
      // Undeclared exception!
      try { 
        strBuilder_StrBuilderReader0.read(charArray0, 44, (-1275));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder$StrBuilderReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Integer integer0 = new Integer(32);
      assertNotNull(integer0);
      assertEquals(32, (int)integer0);
      
      Integer integer1 = new Integer(67);
      assertNotNull(integer1);
      assertEquals(67, (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      
      Integer[] integerArray0 = new Integer[2];
      StrBuilder strBuilder0 = new StrBuilder("3F=Et<VK");
      assertEquals(40, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(8, strBuilder0.length());
      assertEquals(8, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertNotNull(strBuilder0);
      
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
      assertEquals(40, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(8, strBuilder0.length());
      assertEquals(8, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder_StrBuilderReader0.markSupported());
      assertTrue(strBuilder_StrBuilderReader0.ready());
      assertNotNull(strBuilder_StrBuilderReader0);
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'P';
      charArray0[1] = 'A';
      charArray0[2] = '&';
      charArray0[3] = '*';
      // Undeclared exception!
      try { 
        strBuilder_StrBuilderReader0.read(charArray0, 32, 1793);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder$StrBuilderReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(0);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isNotEmpty());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = new StrBuilder(57);
      assertTrue(strBuilder1.isEmpty());
      assertEquals(0, strBuilder1.size());
      assertEquals(0, strBuilder1.length());
      assertFalse(strBuilder1.isNotEmpty());
      assertEquals(57, strBuilder1.capacity());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertNotNull(strBuilder1);
      assertTrue(strBuilder1.equals((Object)strBuilder0));
      
      StrBuilder strBuilder2 = strBuilder0.appendln((-1875L));
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(6, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(6, strBuilder0.length());
      assertEquals(6, strBuilder2.size());
      assertEquals(6, strBuilder2.length());
      assertFalse(strBuilder2.isEmpty());
      assertNull(strBuilder2.getNewLineText());
      assertTrue(strBuilder2.isNotEmpty());
      assertEquals(32, strBuilder2.capacity());
      assertNull(strBuilder2.getNullText());
      assertNotNull(strBuilder2);
      assertFalse(strBuilder0.equals((Object)strBuilder1));
      assertFalse(strBuilder2.equals((Object)strBuilder1));
      assertNotSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertNotSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder2.new StrBuilderReader();
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(6, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(6, strBuilder0.length());
      assertEquals(6, strBuilder2.size());
      assertEquals(6, strBuilder2.length());
      assertFalse(strBuilder2.isEmpty());
      assertNull(strBuilder2.getNewLineText());
      assertTrue(strBuilder2.isNotEmpty());
      assertEquals(32, strBuilder2.capacity());
      assertNull(strBuilder2.getNullText());
      assertTrue(strBuilder_StrBuilderReader0.markSupported());
      assertTrue(strBuilder_StrBuilderReader0.ready());
      assertNotNull(strBuilder_StrBuilderReader0);
      assertFalse(strBuilder0.equals((Object)strBuilder1));
      assertFalse(strBuilder2.equals((Object)strBuilder1));
      
      char[] charArray0 = new char[7];
      charArray0[0] = 'C';
      charArray0[1] = '&';
      charArray0[2] = '#';
      charArray0[3] = '|';
      char char0 = 'i';
      // Undeclared exception!
      try { 
        strBuilder_StrBuilderReader0.read(charArray0, 57, 57);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder$StrBuilderReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "org.apache.commons.lang3.text.StrBuilder");
      assertFalse(boolean0);
      
      StrBuilder strBuilder0 = new StrBuilder();
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertFalse(strBuilder0.isNotEmpty());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.append("remove() is unsupported");
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertEquals(23, strBuilder0.size());
      assertEquals(23, strBuilder0.length());
      assertEquals(23, strBuilder1.length());
      assertEquals(23, strBuilder1.size());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertTrue(strBuilder1.isNotEmpty());
      assertNull(strBuilder1.getNullText());
      assertFalse(strBuilder1.isEmpty());
      assertNotNull(strBuilder1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      
      StrBuilder strBuilder2 = strBuilder0.minimizeCapacity();
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(23, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertEquals(23, strBuilder0.size());
      assertEquals(23, strBuilder0.length());
      assertTrue(strBuilder2.isNotEmpty());
      assertEquals(23, strBuilder2.capacity());
      assertNull(strBuilder2.getNewLineText());
      assertNull(strBuilder2.getNullText());
      assertEquals(23, strBuilder2.length());
      assertEquals(23, strBuilder2.size());
      assertFalse(strBuilder2.isEmpty());
      assertNotNull(strBuilder2);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      
      StringBuffer stringBuffer0 = new StringBuffer("RjL");
      assertEquals(3, stringBuffer0.length());
      assertEquals("RjL", stringBuffer0.toString());
      assertNotNull(stringBuffer0);
      
      StrBuilder strBuilder3 = strBuilder1.append((CharSequence) stringBuffer0);
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(52, strBuilder0.capacity());
      assertEquals(26, strBuilder0.size());
      assertEquals(26, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(26, strBuilder1.size());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(26, strBuilder1.length());
      assertEquals(52, strBuilder1.capacity());
      assertTrue(strBuilder1.isNotEmpty());
      assertNull(strBuilder1.getNullText());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(3, stringBuffer0.length());
      assertEquals("RjL", stringBuffer0.toString());
      assertEquals(26, strBuilder3.size());
      assertNull(strBuilder3.getNullText());
      assertEquals(52, strBuilder3.capacity());
      assertTrue(strBuilder3.isNotEmpty());
      assertFalse(strBuilder3.isEmpty());
      assertNull(strBuilder3.getNewLineText());
      assertEquals(26, strBuilder3.length());
      assertNotNull(strBuilder3);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder2);
      assertSame(strBuilder3, strBuilder0);
      
      String string0 = strBuilder1.leftString(86);
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(52, strBuilder0.capacity());
      assertEquals(26, strBuilder0.size());
      assertEquals(26, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(26, strBuilder1.size());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(26, strBuilder1.length());
      assertEquals(52, strBuilder1.capacity());
      assertTrue(strBuilder1.isNotEmpty());
      assertNull(strBuilder1.getNullText());
      assertFalse(strBuilder1.isEmpty());
      assertNotNull(string0);
      assertEquals("remove() is unsupportedRjL", string0);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder2);
      
      // Undeclared exception!
      try { 
        strBuilder1.append(stringBuffer0, 86, 86);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // startIndex must be valid
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(32, strBuilder0.capacity());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isEmpty());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.append(", Length: ");
      assertEquals(10, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(10, strBuilder0.size());
      assertTrue(strBuilder1.isNotEmpty());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(10, strBuilder1.size());
      assertEquals(10, strBuilder1.length());
      assertNotNull(strBuilder1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      
      boolean boolean0 = strBuilder1.equalsIgnoreCase(strBuilder0);
      assertEquals(10, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(10, strBuilder0.size());
      assertTrue(strBuilder1.isNotEmpty());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(10, strBuilder1.size());
      assertEquals(10, strBuilder1.length());
      assertTrue(boolean0);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(0);
      assertFalse(strBuilder0.isNotEmpty());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.appendSeparator("', has a length less than 2", "', has a length less than 2");
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(27, strBuilder0.length());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(27, strBuilder0.size());
      assertTrue(strBuilder1.isNotEmpty());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(27, strBuilder1.length());
      assertEquals(27, strBuilder1.size());
      assertEquals(32, strBuilder1.capacity());
      assertFalse(strBuilder1.isEmpty());
      assertNotNull(strBuilder1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      
      StrBuilder strBuilder2 = strBuilder0.appendPadding(0, 'Q');
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(27, strBuilder0.length());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(27, strBuilder0.size());
      assertEquals(27, strBuilder2.length());
      assertNull(strBuilder2.getNewLineText());
      assertNull(strBuilder2.getNullText());
      assertFalse(strBuilder2.isEmpty());
      assertTrue(strBuilder2.isNotEmpty());
      assertEquals(27, strBuilder2.size());
      assertEquals(32, strBuilder2.capacity());
      assertNotNull(strBuilder2);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      
      StrBuilder strBuilder3 = strBuilder2.append((float) 1);
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(30, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(30, strBuilder0.size());
      assertNull(strBuilder2.getNewLineText());
      assertNull(strBuilder2.getNullText());
      assertEquals(30, strBuilder2.size());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(30, strBuilder2.length());
      assertTrue(strBuilder2.isNotEmpty());
      assertEquals(32, strBuilder2.capacity());
      assertNull(strBuilder3.getNullText());
      assertNull(strBuilder3.getNewLineText());
      assertEquals(32, strBuilder3.capacity());
      assertFalse(strBuilder3.isEmpty());
      assertTrue(strBuilder3.isNotEmpty());
      assertEquals(30, strBuilder3.length());
      assertEquals(30, strBuilder3.size());
      assertNotNull(strBuilder3);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder2, strBuilder3);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder2);
      
      boolean boolean0 = strBuilder0.contains(';');
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(30, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(30, strBuilder0.size());
      assertFalse(boolean0);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder1.new StrBuilderReader();
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(30, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(30, strBuilder0.size());
      assertTrue(strBuilder1.isNotEmpty());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(32, strBuilder1.capacity());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(30, strBuilder1.length());
      assertEquals(30, strBuilder1.size());
      assertTrue(strBuilder_StrBuilderReader0.ready());
      assertTrue(strBuilder_StrBuilderReader0.markSupported());
      assertNotNull(strBuilder_StrBuilderReader0);
      
      StrBuilder strBuilder4 = strBuilder0.appendSeparator("", 1);
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(30, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(30, strBuilder0.size());
      assertTrue(strBuilder4.isNotEmpty());
      assertEquals(30, strBuilder4.length());
      assertEquals(32, strBuilder4.capacity());
      assertEquals(30, strBuilder4.size());
      assertFalse(strBuilder4.isEmpty());
      assertNull(strBuilder4.getNullText());
      assertNull(strBuilder4.getNewLineText());
      assertNotNull(strBuilder4);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder4, strBuilder3);
      assertSame(strBuilder4, strBuilder0);
      assertSame(strBuilder4, strBuilder1);
      assertSame(strBuilder4, strBuilder2);
      
      StringBuilder stringBuilder0 = new StringBuilder();
      assertEquals("", stringBuilder0.toString());
      assertNotNull(stringBuilder0);
      
      StringBuilder stringBuilder1 = stringBuilder0.append(true);
      assertEquals("true", stringBuilder0.toString());
      assertEquals("true", stringBuilder1.toString());
      assertNotNull(stringBuilder1);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder1, stringBuilder0);
      
      StrBuilder strBuilder5 = strBuilder4.append(stringBuilder1, 1, 1);
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(31, strBuilder0.length());
      assertEquals(31, strBuilder0.size());
      assertTrue(strBuilder4.isNotEmpty());
      assertEquals(32, strBuilder4.capacity());
      assertEquals(31, strBuilder4.size());
      assertEquals(31, strBuilder4.length());
      assertFalse(strBuilder4.isEmpty());
      assertNull(strBuilder4.getNullText());
      assertNull(strBuilder4.getNewLineText());
      assertEquals("true", stringBuilder0.toString());
      assertEquals("true", stringBuilder1.toString());
      assertNull(strBuilder5.getNewLineText());
      assertFalse(strBuilder5.isEmpty());
      assertNull(strBuilder5.getNullText());
      assertEquals(31, strBuilder5.length());
      assertEquals(31, strBuilder5.size());
      assertEquals(32, strBuilder5.capacity());
      assertTrue(strBuilder5.isNotEmpty());
      assertNotNull(strBuilder5);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder4, strBuilder3);
      assertSame(strBuilder4, strBuilder0);
      assertSame(strBuilder4, strBuilder1);
      assertSame(strBuilder4, strBuilder2);
      assertSame(strBuilder4, strBuilder5);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder1, stringBuilder0);
      assertSame(strBuilder5, strBuilder0);
      assertSame(strBuilder5, strBuilder2);
      assertSame(strBuilder5, strBuilder3);
      assertSame(strBuilder5, strBuilder1);
      assertSame(strBuilder5, strBuilder4);
      
      StrBuilder strBuilder6 = strBuilder0.deleteFirst("end < start");
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(31, strBuilder0.length());
      assertEquals(31, strBuilder0.size());
      assertEquals(32, strBuilder6.capacity());
      assertTrue(strBuilder6.isNotEmpty());
      assertNull(strBuilder6.getNewLineText());
      assertNull(strBuilder6.getNullText());
      assertEquals(31, strBuilder6.length());
      assertFalse(strBuilder6.isEmpty());
      assertEquals(31, strBuilder6.size());
      assertNotNull(strBuilder6);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder6);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder6, strBuilder0);
      assertSame(strBuilder6, strBuilder1);
      assertSame(strBuilder6, strBuilder5);
      assertSame(strBuilder6, strBuilder3);
      assertSame(strBuilder6, strBuilder4);
      assertSame(strBuilder6, strBuilder2);
      
      boolean boolean1 = strBuilder1.isNotEmpty();
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(31, strBuilder0.length());
      assertEquals(31, strBuilder0.size());
      assertTrue(strBuilder1.isNotEmpty());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(32, strBuilder1.capacity());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(31, strBuilder1.length());
      assertEquals(31, strBuilder1.size());
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder6);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder1, strBuilder4);
      assertSame(strBuilder1, strBuilder5);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder6);
      
      Integer integer0 = new Integer(115);
      assertNotNull(integer0);
      assertEquals(115, (int)integer0);
      
      StringBuilder stringBuilder2 = new StringBuilder(stringBuilder0);
      assertEquals("true", stringBuilder0.toString());
      assertEquals("true", stringBuilder2.toString());
      assertNotNull(stringBuilder2);
      assertFalse(stringBuilder2.equals((Object)stringBuilder1));
      assertFalse(stringBuilder2.equals((Object)stringBuilder0));
      
      StrBuilder strBuilder7 = new StrBuilder("', has a length less than 2");
      assertNull(strBuilder7.getNullText());
      assertTrue(strBuilder7.isNotEmpty());
      assertEquals(27, strBuilder7.size());
      assertEquals(27, strBuilder7.length());
      assertNull(strBuilder7.getNewLineText());
      assertFalse(strBuilder7.isEmpty());
      assertEquals(59, strBuilder7.capacity());
      assertNotNull(strBuilder7);
      assertFalse(strBuilder7.equals((Object)strBuilder0));
      assertFalse(strBuilder7.equals((Object)strBuilder1));
      assertFalse(strBuilder7.equals((Object)strBuilder5));
      assertFalse(strBuilder7.equals((Object)strBuilder3));
      assertFalse(strBuilder7.equals((Object)strBuilder4));
      assertFalse(strBuilder7.equals((Object)strBuilder6));
      assertFalse(strBuilder7.equals((Object)strBuilder2));
      
      StrBuilder strBuilder8 = strBuilder0.insert(0, false);
      assertEquals(36, strBuilder0.size());
      assertEquals(72, strBuilder0.capacity());
      assertEquals(36, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder8.getNewLineText());
      assertTrue(strBuilder8.isNotEmpty());
      assertEquals(72, strBuilder8.capacity());
      assertNull(strBuilder8.getNullText());
      assertFalse(strBuilder8.isEmpty());
      assertEquals(36, strBuilder8.length());
      assertEquals(36, strBuilder8.size());
      assertNotNull(strBuilder8);
      assertFalse(strBuilder0.equals((Object)strBuilder7));
      assertFalse(strBuilder8.equals((Object)strBuilder7));
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder6);
      assertNotSame(strBuilder0, strBuilder7);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder8);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder8, strBuilder3);
      assertSame(strBuilder8, strBuilder2);
      assertSame(strBuilder8, strBuilder4);
      assertNotSame(strBuilder8, strBuilder7);
      assertSame(strBuilder8, strBuilder1);
      assertSame(strBuilder8, strBuilder5);
      assertSame(strBuilder8, strBuilder6);
      assertSame(strBuilder8, strBuilder0);
      
      StrBuilder strBuilder9 = strBuilder5.setNullText("', has a length less than 2");
      assertEquals("', has a length less than 2", strBuilder9.getNullText());
      assertFalse(strBuilder9.isEmpty());
      assertTrue(strBuilder9.isNotEmpty());
      assertEquals(72, strBuilder9.capacity());
      assertEquals(36, strBuilder9.length());
      assertNull(strBuilder9.getNewLineText());
      assertEquals(36, strBuilder9.size());
      assertEquals(36, strBuilder0.size());
      assertEquals(72, strBuilder0.capacity());
      assertEquals(36, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals("', has a length less than 2", strBuilder0.getNullText());
      assertEquals("', has a length less than 2", strBuilder4.getNullText());
      assertTrue(strBuilder4.isNotEmpty());
      assertFalse(strBuilder4.isEmpty());
      assertEquals(36, strBuilder4.length());
      assertEquals(72, strBuilder4.capacity());
      assertEquals(36, strBuilder4.size());
      assertNull(strBuilder4.getNewLineText());
      assertEquals("true", stringBuilder0.toString());
      assertEquals("true", stringBuilder1.toString());
      assertNull(strBuilder5.getNewLineText());
      assertFalse(strBuilder5.isEmpty());
      assertEquals(72, strBuilder5.capacity());
      assertEquals(36, strBuilder5.length());
      assertEquals(36, strBuilder5.size());
      assertTrue(strBuilder5.isNotEmpty());
      assertEquals("', has a length less than 2", strBuilder5.getNullText());
      assertNotNull(strBuilder9);
      assertFalse(strBuilder9.equals((Object)strBuilder7));
      assertFalse(strBuilder0.equals((Object)strBuilder7));
      assertFalse(strBuilder4.equals((Object)strBuilder7));
      assertFalse(stringBuilder0.equals((Object)stringBuilder2));
      assertFalse(stringBuilder1.equals((Object)stringBuilder2));
      assertFalse(strBuilder5.equals((Object)strBuilder7));
      assertSame(strBuilder9, strBuilder0);
      assertSame(strBuilder9, strBuilder8);
      assertSame(strBuilder9, strBuilder6);
      assertSame(strBuilder9, strBuilder2);
      assertSame(strBuilder9, strBuilder4);
      assertNotSame(strBuilder9, strBuilder7);
      assertSame(strBuilder9, strBuilder1);
      assertSame(strBuilder9, strBuilder3);
      assertSame(strBuilder9, strBuilder5);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder6);
      assertNotSame(strBuilder0, strBuilder7);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder8);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder9);
      assertSame(strBuilder4, strBuilder3);
      assertSame(strBuilder4, strBuilder8);
      assertSame(strBuilder4, strBuilder0);
      assertSame(strBuilder4, strBuilder1);
      assertSame(strBuilder4, strBuilder6);
      assertSame(strBuilder4, strBuilder9);
      assertSame(strBuilder4, strBuilder2);
      assertSame(strBuilder4, strBuilder5);
      assertNotSame(strBuilder4, strBuilder7);
      assertSame(stringBuilder0, stringBuilder1);
      assertNotSame(stringBuilder0, stringBuilder2);
      assertNotSame(stringBuilder1, stringBuilder2);
      assertSame(stringBuilder1, stringBuilder0);
      assertSame(strBuilder5, strBuilder0);
      assertSame(strBuilder5, strBuilder2);
      assertSame(strBuilder5, strBuilder3);
      assertSame(strBuilder5, strBuilder9);
      assertSame(strBuilder5, strBuilder6);
      assertSame(strBuilder5, strBuilder1);
      assertSame(strBuilder5, strBuilder4);
      assertNotSame(strBuilder5, strBuilder7);
      assertSame(strBuilder5, strBuilder8);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder((String) null);
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertNotNull(strBuilder0);
      
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      assertFalse(boolean0);
      
      StrBuilder strBuilder1 = strBuilder0.setLength(0);
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertEquals(32, strBuilder1.capacity());
      assertTrue(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(0, strBuilder1.length());
      assertFalse(strBuilder1.isNotEmpty());
      assertEquals(0, strBuilder1.size());
      assertNotNull(strBuilder1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      
      StrBuilder strBuilder2 = strBuilder0.insert(0, false);
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(5, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(5, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(5, strBuilder2.length());
      assertEquals(32, strBuilder2.capacity());
      assertNull(strBuilder2.getNewLineText());
      assertTrue(strBuilder2.isNotEmpty());
      assertFalse(strBuilder2.isEmpty());
      assertNull(strBuilder2.getNullText());
      assertEquals(5, strBuilder2.size());
      assertNotNull(strBuilder2);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder((-24));
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.appendPadding((-24), 'Q');
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder1.length());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(32, strBuilder1.capacity());
      assertTrue(strBuilder1.isEmpty());
      assertFalse(strBuilder1.isNotEmpty());
      assertEquals(0, strBuilder1.size());
      assertNotNull(strBuilder1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      
      StrBuilder strBuilder2 = new StrBuilder();
      assertEquals(0, strBuilder2.size());
      assertNull(strBuilder2.getNullText());
      assertEquals(0, strBuilder2.length());
      assertFalse(strBuilder2.isNotEmpty());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(32, strBuilder2.capacity());
      assertTrue(strBuilder2.isEmpty());
      assertNotNull(strBuilder2);
      assertTrue(strBuilder2.equals((Object)strBuilder1));
      assertTrue(strBuilder2.equals((Object)strBuilder0));
      
      boolean boolean0 = strBuilder0.contains('Q');
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertFalse(boolean0);
      assertTrue(strBuilder0.equals((Object)strBuilder2));
      assertNotSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertFalse(strBuilder_StrBuilderReader0.ready());
      assertTrue(strBuilder_StrBuilderReader0.markSupported());
      assertNotNull(strBuilder_StrBuilderReader0);
      assertTrue(strBuilder0.equals((Object)strBuilder2));
      
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) strBuilder_StrBuilderReader0;
      objectArray0[1] = (Object) strBuilder1;
      objectArray0[2] = (Object) strBuilder0;
      StrBuilder strBuilder3 = new StrBuilder("', has a length less than 2");
      assertEquals(59, strBuilder3.capacity());
      assertEquals(27, strBuilder3.length());
      assertEquals(27, strBuilder3.size());
      assertNull(strBuilder3.getNewLineText());
      assertTrue(strBuilder3.isNotEmpty());
      assertNull(strBuilder3.getNullText());
      assertFalse(strBuilder3.isEmpty());
      assertNotNull(strBuilder3);
      assertFalse(strBuilder3.equals((Object)strBuilder0));
      assertFalse(strBuilder3.equals((Object)strBuilder1));
      assertFalse(strBuilder3.equals((Object)strBuilder2));
      
      StrBuilder strBuilder4 = strBuilder1.appendSeparator('q', 1);
      assertEquals(1, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(1, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(1, strBuilder1.length());
      assertEquals(1, strBuilder1.size());
      assertNull(strBuilder1.getNewLineText());
      assertTrue(strBuilder1.isNotEmpty());
      assertNull(strBuilder1.getNullText());
      assertEquals(32, strBuilder1.capacity());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(1, strBuilder4.length());
      assertNull(strBuilder4.getNullText());
      assertFalse(strBuilder4.isEmpty());
      assertEquals(1, strBuilder4.size());
      assertEquals(32, strBuilder4.capacity());
      assertNull(strBuilder4.getNewLineText());
      assertTrue(strBuilder4.isNotEmpty());
      assertNotNull(strBuilder4);
      assertFalse(strBuilder0.equals((Object)strBuilder2));
      assertFalse(strBuilder0.equals((Object)strBuilder3));
      assertFalse(strBuilder1.equals((Object)strBuilder3));
      assertFalse(strBuilder1.equals((Object)strBuilder2));
      assertFalse(strBuilder4.equals((Object)strBuilder2));
      assertFalse(strBuilder4.equals((Object)strBuilder3));
      assertNotSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder4);
      assertNotSame(strBuilder0, strBuilder3);
      assertNotSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder4);
      assertSame(strBuilder1, strBuilder0);
      assertNotSame(strBuilder1, strBuilder2);
      assertSame(strBuilder4, strBuilder1);
      assertNotSame(strBuilder4, strBuilder2);
      assertSame(strBuilder4, strBuilder0);
      assertNotSame(strBuilder4, strBuilder3);
      
      StrBuilder strBuilder5 = new StrBuilder();
      assertEquals(32, strBuilder5.capacity());
      assertTrue(strBuilder5.isEmpty());
      assertNull(strBuilder5.getNewLineText());
      assertNull(strBuilder5.getNullText());
      assertFalse(strBuilder5.isNotEmpty());
      assertEquals(0, strBuilder5.size());
      assertEquals(0, strBuilder5.length());
      assertNotNull(strBuilder5);
      assertTrue(strBuilder5.equals((Object)strBuilder2));
      assertFalse(strBuilder5.equals((Object)strBuilder3));
      assertFalse(strBuilder5.equals((Object)strBuilder0));
      assertFalse(strBuilder5.equals((Object)strBuilder1));
      assertFalse(strBuilder5.equals((Object)strBuilder4));
      
      boolean boolean1 = strBuilder5.isEmpty();
      assertEquals(32, strBuilder5.capacity());
      assertTrue(strBuilder5.isEmpty());
      assertNull(strBuilder5.getNewLineText());
      assertNull(strBuilder5.getNullText());
      assertFalse(strBuilder5.isNotEmpty());
      assertEquals(0, strBuilder5.size());
      assertEquals(0, strBuilder5.length());
      assertTrue(boolean1);
      assertTrue(strBuilder5.equals((Object)strBuilder2));
      assertFalse(strBuilder5.equals((Object)strBuilder3));
      assertFalse(strBuilder5.equals((Object)strBuilder0));
      assertFalse(strBuilder5.equals((Object)strBuilder1));
      assertFalse(strBuilder5.equals((Object)strBuilder4));
      assertFalse(boolean1 == boolean0);
      assertNotSame(strBuilder5, strBuilder3);
      assertNotSame(strBuilder5, strBuilder0);
      assertNotSame(strBuilder5, strBuilder1);
      assertNotSame(strBuilder5, strBuilder2);
      assertNotSame(strBuilder5, strBuilder4);
      
      String string0 = strBuilder3.toString();
      assertEquals(59, strBuilder3.capacity());
      assertEquals(27, strBuilder3.length());
      assertEquals(27, strBuilder3.size());
      assertNull(strBuilder3.getNewLineText());
      assertTrue(strBuilder3.isNotEmpty());
      assertNull(strBuilder3.getNullText());
      assertFalse(strBuilder3.isEmpty());
      assertNotNull(string0);
      assertEquals("', has a length less than 2", string0);
      assertFalse(strBuilder3.equals((Object)strBuilder0));
      assertFalse(strBuilder3.equals((Object)strBuilder1));
      assertFalse(strBuilder3.equals((Object)strBuilder5));
      assertFalse(strBuilder3.equals((Object)strBuilder2));
      assertFalse(strBuilder3.equals((Object)strBuilder4));
      assertNotSame(strBuilder3, strBuilder0);
      assertNotSame(strBuilder3, strBuilder1);
      assertNotSame(strBuilder3, strBuilder5);
      assertNotSame(strBuilder3, strBuilder2);
      assertNotSame(strBuilder3, strBuilder4);
      
      int int0 = strBuilder4.lastIndexOf('q', 28);
      assertEquals(1, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(1, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(1, strBuilder1.length());
      assertEquals(1, strBuilder1.size());
      assertNull(strBuilder1.getNewLineText());
      assertTrue(strBuilder1.isNotEmpty());
      assertNull(strBuilder1.getNullText());
      assertEquals(32, strBuilder1.capacity());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(1, strBuilder4.length());
      assertNull(strBuilder4.getNullText());
      assertFalse(strBuilder4.isEmpty());
      assertEquals(1, strBuilder4.size());
      assertEquals(32, strBuilder4.capacity());
      assertNull(strBuilder4.getNewLineText());
      assertTrue(strBuilder4.isNotEmpty());
      assertEquals(0, int0);
      assertFalse(strBuilder0.equals((Object)strBuilder2));
      assertFalse(strBuilder0.equals((Object)strBuilder5));
      assertFalse(strBuilder0.equals((Object)strBuilder3));
      assertFalse(strBuilder1.equals((Object)strBuilder3));
      assertFalse(strBuilder1.equals((Object)strBuilder5));
      assertFalse(strBuilder1.equals((Object)strBuilder2));
      assertFalse(strBuilder4.equals((Object)strBuilder2));
      assertFalse(strBuilder4.equals((Object)strBuilder3));
      assertFalse(strBuilder4.equals((Object)strBuilder5));
      assertNotSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertNotSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder4);
      assertNotSame(strBuilder0, strBuilder3);
      assertNotSame(strBuilder1, strBuilder3);
      assertNotSame(strBuilder1, strBuilder5);
      assertSame(strBuilder1, strBuilder4);
      assertSame(strBuilder1, strBuilder0);
      assertNotSame(strBuilder1, strBuilder2);
      assertSame(strBuilder4, strBuilder1);
      assertNotSame(strBuilder4, strBuilder2);
      assertSame(strBuilder4, strBuilder0);
      assertNotSame(strBuilder4, strBuilder3);
      assertNotSame(strBuilder4, strBuilder5);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(0);
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertFalse(strBuilder0.isNotEmpty());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertNotNull(strBuilder0);
      
      String string0 = strBuilder0.build();
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertFalse(strBuilder0.isNotEmpty());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertNotNull(string0);
      assertEquals("", string0);
      
      StrBuilder strBuilder1 = strBuilder0.appendln("j");
      assertNull(strBuilder0.getNullText());
      assertEquals(2, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(2, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(2, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertTrue(strBuilder1.isNotEmpty());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(2, strBuilder1.length());
      assertEquals(32, strBuilder1.capacity());
      assertNotNull(strBuilder1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      
      StrBuilder strBuilder2 = strBuilder0.appendSeparator('3', '%');
      assertNull(strBuilder0.getNullText());
      assertEquals(3, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(3, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(3, strBuilder2.size());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(3, strBuilder2.length());
      assertEquals(32, strBuilder2.capacity());
      assertTrue(strBuilder2.isNotEmpty());
      assertNull(strBuilder2.getNullText());
      assertNull(strBuilder2.getNewLineText());
      assertNotNull(strBuilder2);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) strBuilder0;
      objectArray0[1] = (Object) "";
      objectArray0[2] = (Object) strBuilder1;
      objectArray0[3] = (Object) "j";
      objectArray0[4] = (Object) strBuilder0;
      objectArray0[5] = (Object) "";
      objectArray0[6] = (Object) strBuilder1;
      StrBuilder strBuilder3 = strBuilder0.append("", objectArray0);
      assertNull(strBuilder0.getNullText());
      assertEquals(3, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(3, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(32, strBuilder3.capacity());
      assertNull(strBuilder3.getNullText());
      assertTrue(strBuilder3.isNotEmpty());
      assertFalse(strBuilder3.isEmpty());
      assertEquals(3, strBuilder3.length());
      assertEquals(3, strBuilder3.size());
      assertNull(strBuilder3.getNewLineText());
      assertNotNull(strBuilder3);
      assertEquals(7, objectArray0.length);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder2);
      assertSame(strBuilder3, strBuilder0);
      
      int int0 = strBuilder3.lastIndexOf("j");
      assertNull(strBuilder0.getNullText());
      assertEquals(3, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(3, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(32, strBuilder3.capacity());
      assertNull(strBuilder3.getNullText());
      assertTrue(strBuilder3.isNotEmpty());
      assertFalse(strBuilder3.isEmpty());
      assertEquals(3, strBuilder3.length());
      assertEquals(3, strBuilder3.size());
      assertNull(strBuilder3.getNewLineText());
      assertEquals(0, int0);
      assertEquals(7, objectArray0.length);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder2);
      assertSame(strBuilder3, strBuilder0);
      
      String string1 = "gpJ#\\uof|gCP%7FQ";
      StrBuilder strBuilder4 = strBuilder2.replaceFirst("", string1);
      assertNull(strBuilder0.getNullText());
      assertEquals(3, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(3, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(3, strBuilder2.size());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(3, strBuilder2.length());
      assertEquals(32, strBuilder2.capacity());
      assertTrue(strBuilder2.isNotEmpty());
      assertNull(strBuilder2.getNullText());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(32, strBuilder4.capacity());
      assertNull(strBuilder4.getNullText());
      assertTrue(strBuilder4.isNotEmpty());
      assertFalse(strBuilder4.isEmpty());
      assertEquals(3, strBuilder4.length());
      assertEquals(3, strBuilder4.size());
      assertNull(strBuilder4.getNewLineText());
      assertNotNull(strBuilder4);
      assertFalse(string1.equals((Object)string0));
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder3);
      assertSame(strBuilder2, strBuilder4);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder4, strBuilder1);
      assertSame(strBuilder4, strBuilder2);
      assertSame(strBuilder4, strBuilder0);
      assertSame(strBuilder4, strBuilder3);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertFalse(strBuilder0.isNotEmpty());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.appendNull();
      assertFalse(strBuilder0.isNotEmpty());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder1.length());
      assertEquals(0, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertFalse(strBuilder1.isNotEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertTrue(strBuilder1.isEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertNotNull(strBuilder1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      
      StrBuilder strBuilder2 = strBuilder0.replaceFirst("", "");
      assertFalse(strBuilder0.isNotEmpty());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(32, strBuilder2.capacity());
      assertEquals(0, strBuilder2.length());
      assertEquals(0, strBuilder2.size());
      assertFalse(strBuilder2.isNotEmpty());
      assertNull(strBuilder2.getNullText());
      assertTrue(strBuilder2.isEmpty());
      assertNotNull(strBuilder2);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      
      int int0 = strBuilder0.size();
      assertFalse(strBuilder0.isNotEmpty());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, int0);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      
      StrBuilder strBuilder3 = strBuilder0.appendSeparator("p2vtx[:.");
      assertFalse(strBuilder0.isNotEmpty());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder3.getNullText());
      assertEquals(0, strBuilder3.length());
      assertEquals(0, strBuilder3.size());
      assertFalse(strBuilder3.isNotEmpty());
      assertEquals(32, strBuilder3.capacity());
      assertTrue(strBuilder3.isEmpty());
      assertNull(strBuilder3.getNewLineText());
      assertNotNull(strBuilder3);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder2);
      
      char[] charArray0 = new char[7];
      charArray0[0] = '<';
      charArray0[1] = 'W';
      charArray0[2] = 'G';
      charArray0[3] = 'j';
      charArray0[4] = '$';
      charArray0[5] = '2';
      StrBuilder strBuilder4 = strBuilder0.append(charArray0, 0, 1);
      assertEquals(1, strBuilder0.length());
      assertEquals(1, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder4.getNullText());
      assertTrue(strBuilder4.isNotEmpty());
      assertNull(strBuilder4.getNewLineText());
      assertFalse(strBuilder4.isEmpty());
      assertEquals(1, strBuilder4.length());
      assertEquals(1, strBuilder4.size());
      assertEquals(32, strBuilder4.capacity());
      assertNotNull(strBuilder4);
      assertArrayEquals(new char[] {'<', 'W', 'G', 'j', '$', '2', '\u0000'}, charArray0);
      assertEquals(7, charArray0.length);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder4, strBuilder1);
      assertSame(strBuilder4, strBuilder2);
      assertSame(strBuilder4, strBuilder3);
      assertSame(strBuilder4, strBuilder0);
      
      StrBuilder strBuilder5 = strBuilder4.replaceAll('c', ' ');
      assertEquals(1, strBuilder0.length());
      assertEquals(1, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder4.getNullText());
      assertTrue(strBuilder4.isNotEmpty());
      assertNull(strBuilder4.getNewLineText());
      assertFalse(strBuilder4.isEmpty());
      assertEquals(1, strBuilder4.length());
      assertEquals(1, strBuilder4.size());
      assertEquals(32, strBuilder4.capacity());
      assertFalse(strBuilder5.isEmpty());
      assertTrue(strBuilder5.isNotEmpty());
      assertNull(strBuilder5.getNewLineText());
      assertNull(strBuilder5.getNullText());
      assertEquals(32, strBuilder5.capacity());
      assertEquals(1, strBuilder5.size());
      assertEquals(1, strBuilder5.length());
      assertNotNull(strBuilder5);
      assertArrayEquals(new char[] {'<', 'W', 'G', 'j', '$', '2', '\u0000'}, charArray0);
      assertEquals(7, charArray0.length);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder4, strBuilder1);
      assertSame(strBuilder4, strBuilder2);
      assertSame(strBuilder4, strBuilder3);
      assertSame(strBuilder4, strBuilder5);
      assertSame(strBuilder4, strBuilder0);
      assertSame(strBuilder5, strBuilder1);
      assertSame(strBuilder5, strBuilder4);
      assertSame(strBuilder5, strBuilder2);
      assertSame(strBuilder5, strBuilder3);
      assertSame(strBuilder5, strBuilder0);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("dN");
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(2, strBuilder0.length());
      assertEquals(2, strBuilder0.size());
      assertEquals(34, strBuilder0.capacity());
      assertNotNull(strBuilder0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      int int0 = strBuilder0.indexOf("dN");
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(2, strBuilder0.length());
      assertEquals(2, strBuilder0.size());
      assertEquals(34, strBuilder0.capacity());
      assertEquals(0, int0);
      
      StrBuilder strBuilder1 = strBuilder0.reverse();
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(2, strBuilder0.length());
      assertEquals(2, strBuilder0.size());
      assertEquals(34, strBuilder0.capacity());
      assertEquals(2, strBuilder1.length());
      assertEquals(2, strBuilder1.size());
      assertEquals(34, strBuilder1.capacity());
      assertFalse(strBuilder1.isEmpty());
      assertTrue(strBuilder1.isNotEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertNotNull(strBuilder1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      
      StrBuilder strBuilder2 = strBuilder1.deleteAll('M');
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(2, strBuilder0.length());
      assertEquals(2, strBuilder0.size());
      assertEquals(34, strBuilder0.capacity());
      assertEquals(2, strBuilder1.length());
      assertEquals(2, strBuilder1.size());
      assertEquals(34, strBuilder1.capacity());
      assertFalse(strBuilder1.isEmpty());
      assertTrue(strBuilder1.isNotEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(2, strBuilder2.size());
      assertEquals(2, strBuilder2.length());
      assertFalse(strBuilder2.isEmpty());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(34, strBuilder2.capacity());
      assertNull(strBuilder2.getNullText());
      assertTrue(strBuilder2.isNotEmpty());
      assertNotNull(strBuilder2);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      
      StrBuilder strBuilder3 = strBuilder1.insert(0, "dN");
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(4, strBuilder0.length());
      assertEquals(4, strBuilder0.size());
      assertEquals(34, strBuilder0.capacity());
      assertEquals(4, strBuilder1.length());
      assertEquals(4, strBuilder1.size());
      assertEquals(34, strBuilder1.capacity());
      assertFalse(strBuilder1.isEmpty());
      assertTrue(strBuilder1.isNotEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(4, strBuilder3.size());
      assertFalse(strBuilder3.isEmpty());
      assertEquals(4, strBuilder3.length());
      assertNull(strBuilder3.getNullText());
      assertNull(strBuilder3.getNewLineText());
      assertEquals(34, strBuilder3.capacity());
      assertTrue(strBuilder3.isNotEmpty());
      assertNotNull(strBuilder3);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder2);
      
      Integer integer0 = new Integer(115);
      assertNotNull(integer0);
      assertEquals(115, (int)integer0);
      assertFalse(integer0.equals((Object)int0));
      
      char[] charArray0 = new char[1];
      charArray0[0] = '#';
      StrBuilder strBuilder4 = strBuilder3.append(charArray0);
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(5, strBuilder0.size());
      assertEquals(5, strBuilder0.length());
      assertEquals(34, strBuilder0.capacity());
      assertEquals(5, strBuilder1.size());
      assertEquals(5, strBuilder1.length());
      assertEquals(34, strBuilder1.capacity());
      assertFalse(strBuilder1.isEmpty());
      assertTrue(strBuilder1.isNotEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(5, strBuilder3.length());
      assertFalse(strBuilder3.isEmpty());
      assertEquals(5, strBuilder3.size());
      assertNull(strBuilder3.getNullText());
      assertNull(strBuilder3.getNewLineText());
      assertEquals(34, strBuilder3.capacity());
      assertTrue(strBuilder3.isNotEmpty());
      assertEquals(5, strBuilder4.length());
      assertEquals(34, strBuilder4.capacity());
      assertFalse(strBuilder4.isEmpty());
      assertTrue(strBuilder4.isNotEmpty());
      assertNull(strBuilder4.getNullText());
      assertNull(strBuilder4.getNewLineText());
      assertEquals(5, strBuilder4.size());
      assertNotNull(strBuilder4);
      assertArrayEquals(new char[] {'#'}, charArray0);
      assertEquals(1, charArray0.length);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder4);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder2);
      assertSame(strBuilder3, strBuilder4);
      assertSame(strBuilder4, strBuilder2);
      assertSame(strBuilder4, strBuilder1);
      assertSame(strBuilder4, strBuilder0);
      assertSame(strBuilder4, strBuilder3);
      
      int int1 = StrBuilder.CAPACITY;
      assertEquals(32, int1);
      assertFalse(int1 == int0);
      
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder3.new StrBuilderReader();
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(5, strBuilder0.size());
      assertEquals(5, strBuilder0.length());
      assertEquals(34, strBuilder0.capacity());
      assertEquals(5, strBuilder1.size());
      assertEquals(5, strBuilder1.length());
      assertEquals(34, strBuilder1.capacity());
      assertFalse(strBuilder1.isEmpty());
      assertTrue(strBuilder1.isNotEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(5, strBuilder3.length());
      assertFalse(strBuilder3.isEmpty());
      assertEquals(5, strBuilder3.size());
      assertNull(strBuilder3.getNullText());
      assertNull(strBuilder3.getNewLineText());
      assertEquals(34, strBuilder3.capacity());
      assertTrue(strBuilder3.isNotEmpty());
      assertTrue(strBuilder_StrBuilderReader0.markSupported());
      assertTrue(strBuilder_StrBuilderReader0.ready());
      assertNotNull(strBuilder_StrBuilderReader0);
      
      StrBuilder strBuilder5 = new StrBuilder();
      assertFalse(strBuilder5.isNotEmpty());
      assertNull(strBuilder5.getNewLineText());
      assertNull(strBuilder5.getNullText());
      assertEquals(32, strBuilder5.capacity());
      assertTrue(strBuilder5.isEmpty());
      assertEquals(0, strBuilder5.size());
      assertEquals(0, strBuilder5.length());
      assertNotNull(strBuilder5);
      assertFalse(strBuilder5.equals((Object)strBuilder3));
      assertFalse(strBuilder5.equals((Object)strBuilder2));
      assertFalse(strBuilder5.equals((Object)strBuilder1));
      assertFalse(strBuilder5.equals((Object)strBuilder0));
      assertFalse(strBuilder5.equals((Object)strBuilder4));
      
      StrBuilder strBuilder6 = strBuilder5.appendFixedWidthPadLeft(32, (-1642), '#');
      assertFalse(strBuilder5.isNotEmpty());
      assertNull(strBuilder5.getNewLineText());
      assertNull(strBuilder5.getNullText());
      assertEquals(32, strBuilder5.capacity());
      assertTrue(strBuilder5.isEmpty());
      assertEquals(0, strBuilder5.size());
      assertEquals(0, strBuilder5.length());
      assertEquals(0, strBuilder6.length());
      assertEquals(0, strBuilder6.size());
      assertFalse(strBuilder6.isNotEmpty());
      assertEquals(32, strBuilder6.capacity());
      assertNull(strBuilder6.getNullText());
      assertNull(strBuilder6.getNewLineText());
      assertTrue(strBuilder6.isEmpty());
      assertNotNull(strBuilder6);
      assertFalse(strBuilder5.equals((Object)strBuilder3));
      assertFalse(strBuilder5.equals((Object)strBuilder2));
      assertFalse(strBuilder5.equals((Object)strBuilder1));
      assertFalse(strBuilder5.equals((Object)strBuilder0));
      assertFalse(strBuilder5.equals((Object)strBuilder4));
      assertFalse(strBuilder6.equals((Object)strBuilder4));
      assertFalse(strBuilder6.equals((Object)strBuilder2));
      assertFalse(strBuilder6.equals((Object)strBuilder0));
      assertFalse(strBuilder6.equals((Object)strBuilder1));
      assertFalse(strBuilder6.equals((Object)strBuilder3));
      assertNotSame(strBuilder5, strBuilder3);
      assertNotSame(strBuilder5, strBuilder2);
      assertSame(strBuilder5, strBuilder6);
      assertNotSame(strBuilder5, strBuilder1);
      assertNotSame(strBuilder5, strBuilder0);
      assertNotSame(strBuilder5, strBuilder4);
      assertSame(strBuilder6, strBuilder5);
      assertNotSame(strBuilder6, strBuilder4);
      assertNotSame(strBuilder6, strBuilder2);
      assertNotSame(strBuilder6, strBuilder0);
      assertNotSame(strBuilder6, strBuilder1);
      assertNotSame(strBuilder6, strBuilder3);
      
      StrBuilder strBuilder7 = strBuilder3.replaceAll("dN", "dN");
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(5, strBuilder0.size());
      assertEquals(5, strBuilder0.length());
      assertEquals(34, strBuilder0.capacity());
      assertEquals(5, strBuilder1.size());
      assertEquals(5, strBuilder1.length());
      assertEquals(34, strBuilder1.capacity());
      assertFalse(strBuilder1.isEmpty());
      assertTrue(strBuilder1.isNotEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(5, strBuilder3.length());
      assertFalse(strBuilder3.isEmpty());
      assertEquals(5, strBuilder3.size());
      assertNull(strBuilder3.getNullText());
      assertNull(strBuilder3.getNewLineText());
      assertEquals(34, strBuilder3.capacity());
      assertTrue(strBuilder3.isNotEmpty());
      assertNull(strBuilder7.getNullText());
      assertTrue(strBuilder7.isNotEmpty());
      assertNull(strBuilder7.getNewLineText());
      assertEquals(5, strBuilder7.size());
      assertEquals(5, strBuilder7.length());
      assertEquals(34, strBuilder7.capacity());
      assertFalse(strBuilder7.isEmpty());
      assertNotNull(strBuilder7);
      assertFalse(strBuilder0.equals((Object)strBuilder5));
      assertFalse(strBuilder0.equals((Object)strBuilder6));
      assertFalse(strBuilder1.equals((Object)strBuilder5));
      assertFalse(strBuilder1.equals((Object)strBuilder6));
      assertFalse(strBuilder3.equals((Object)strBuilder5));
      assertFalse(strBuilder3.equals((Object)strBuilder6));
      assertFalse(strBuilder7.equals((Object)strBuilder5));
      assertFalse(strBuilder7.equals((Object)strBuilder6));
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder7);
      assertSame(strBuilder0, strBuilder4);
      assertNotSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertNotSame(strBuilder0, strBuilder6);
      assertNotSame(strBuilder1, strBuilder5);
      assertNotSame(strBuilder1, strBuilder6);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder4);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder7);
      assertNotSame(strBuilder3, strBuilder5);
      assertSame(strBuilder3, strBuilder7);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder2);
      assertSame(strBuilder3, strBuilder4);
      assertNotSame(strBuilder3, strBuilder6);
      assertSame(strBuilder7, strBuilder4);
      assertSame(strBuilder7, strBuilder1);
      assertSame(strBuilder7, strBuilder2);
      assertNotSame(strBuilder7, strBuilder5);
      assertSame(strBuilder7, strBuilder3);
      assertNotSame(strBuilder7, strBuilder6);
      assertSame(strBuilder7, strBuilder0);
      
      String string0 = strBuilder5.getNewLineText();
      assertFalse(strBuilder5.isNotEmpty());
      assertNull(strBuilder5.getNewLineText());
      assertNull(strBuilder5.getNullText());
      assertEquals(32, strBuilder5.capacity());
      assertTrue(strBuilder5.isEmpty());
      assertEquals(0, strBuilder5.size());
      assertEquals(0, strBuilder5.length());
      assertNull(string0);
      assertFalse(strBuilder5.equals((Object)strBuilder3));
      assertFalse(strBuilder5.equals((Object)strBuilder2));
      assertFalse(strBuilder5.equals((Object)strBuilder1));
      assertFalse(strBuilder5.equals((Object)strBuilder0));
      assertFalse(strBuilder5.equals((Object)strBuilder4));
      assertFalse(strBuilder5.equals((Object)strBuilder7));
      assertNotSame(strBuilder5, strBuilder3);
      assertNotSame(strBuilder5, strBuilder2);
      assertSame(strBuilder5, strBuilder6);
      assertNotSame(strBuilder5, strBuilder1);
      assertNotSame(strBuilder5, strBuilder0);
      assertNotSame(strBuilder5, strBuilder4);
      assertNotSame(strBuilder5, strBuilder7);
      
      // Undeclared exception!
      try { 
        strBuilder5.append((CharSequence) "dN", 2, 115);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // length must be valid
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.trim();
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder1.isEmpty());
      assertFalse(strBuilder1.isNotEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNullText());
      assertEquals(0, strBuilder1.length());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(0, strBuilder1.size());
      assertNotNull(strBuilder1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      
      char[] charArray0 = strBuilder0.toCharArray();
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertNotNull(charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      assertSame(strBuilder0, strBuilder1);
      
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder_StrBuilderReader0.ready());
      assertTrue(strBuilder_StrBuilderReader0.markSupported());
      assertNotNull(strBuilder_StrBuilderReader0);
      
      int int0 = strBuilder_StrBuilderReader0.read();
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder_StrBuilderReader0.ready());
      assertTrue(strBuilder_StrBuilderReader0.markSupported());
      assertEquals((-1), int0);
      assertSame(strBuilder0, strBuilder1);
      
      Writer writer0 = strBuilder1.asWriter();
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder1.isEmpty());
      assertFalse(strBuilder1.isNotEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNullText());
      assertEquals(0, strBuilder1.length());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(0, strBuilder1.size());
      assertNotNull(writer0);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      
      StrBuilder strBuilder2 = new StrBuilder(3037);
      assertEquals(3037, strBuilder2.capacity());
      assertFalse(strBuilder2.isNotEmpty());
      assertEquals(0, strBuilder2.size());
      assertNull(strBuilder2.getNullText());
      assertEquals(0, strBuilder2.length());
      assertNull(strBuilder2.getNewLineText());
      assertTrue(strBuilder2.isEmpty());
      assertNotNull(strBuilder2);
      assertTrue(strBuilder2.equals((Object)strBuilder0));
      assertTrue(strBuilder2.equals((Object)strBuilder1));
      
      boolean boolean0 = strBuilder1.equalsIgnoreCase(strBuilder0);
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder1.isEmpty());
      assertFalse(strBuilder1.isNotEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNullText());
      assertEquals(0, strBuilder1.length());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(0, strBuilder1.size());
      assertTrue(boolean0);
      assertTrue(strBuilder0.equals((Object)strBuilder2));
      assertTrue(strBuilder1.equals((Object)strBuilder2));
      assertNotSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertNotSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      
      StrBuilder strBuilder3 = strBuilder0.append((long) (-1));
      assertEquals(32, strBuilder0.capacity());
      assertEquals(2, strBuilder0.size());
      assertEquals(2, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(2, strBuilder3.length());
      assertEquals(2, strBuilder3.size());
      assertNull(strBuilder3.getNullText());
      assertNull(strBuilder3.getNewLineText());
      assertEquals(32, strBuilder3.capacity());
      assertTrue(strBuilder3.isNotEmpty());
      assertFalse(strBuilder3.isEmpty());
      assertNotNull(strBuilder3);
      assertFalse(strBuilder0.equals((Object)strBuilder2));
      assertFalse(strBuilder3.equals((Object)strBuilder2));
      assertNotSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder3, strBuilder1);
      assertNotSame(strBuilder3, strBuilder2);
      assertSame(strBuilder3, strBuilder0);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.append(", Length: ");
      assertEquals(10, strBuilder0.length());
      assertEquals(10, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(10, strBuilder1.length());
      assertEquals(32, strBuilder1.capacity());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(10, strBuilder1.size());
      assertTrue(strBuilder1.isNotEmpty());
      assertNotNull(strBuilder1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      
      boolean boolean0 = strBuilder0.endsWith(", Length: ");
      assertEquals(10, strBuilder0.length());
      assertEquals(10, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(boolean0);
      assertSame(strBuilder0, strBuilder1);
      
      StrBuilder strBuilder2 = new StrBuilder();
      assertTrue(strBuilder2.isEmpty());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(0, strBuilder2.length());
      assertEquals(0, strBuilder2.size());
      assertNull(strBuilder2.getNullText());
      assertFalse(strBuilder2.isNotEmpty());
      assertEquals(32, strBuilder2.capacity());
      assertNotNull(strBuilder2);
      assertFalse(strBuilder2.equals((Object)strBuilder0));
      assertFalse(strBuilder2.equals((Object)strBuilder1));
      
      boolean boolean1 = strBuilder2.equalsIgnoreCase(strBuilder0);
      assertEquals(10, strBuilder0.length());
      assertEquals(10, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder2.isEmpty());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(0, strBuilder2.length());
      assertEquals(0, strBuilder2.size());
      assertNull(strBuilder2.getNullText());
      assertFalse(strBuilder2.isNotEmpty());
      assertEquals(32, strBuilder2.capacity());
      assertFalse(boolean1);
      assertFalse(strBuilder0.equals((Object)strBuilder2));
      assertFalse(strBuilder2.equals((Object)strBuilder0));
      assertFalse(strBuilder2.equals((Object)strBuilder1));
      assertFalse(boolean1 == boolean0);
      assertNotSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertNotSame(strBuilder2, strBuilder0);
      assertNotSame(strBuilder2, strBuilder1);
      
      // Undeclared exception!
      try { 
        strBuilder2.delete((-1300), (-1300));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -1300
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      StrBuilder strBuilder0 = new StrBuilder();
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = new StrBuilder();
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertTrue(strBuilder1.isEmpty());
      assertEquals(0, strBuilder1.length());
      assertFalse(strBuilder1.isNotEmpty());
      assertEquals(0, strBuilder1.size());
      assertNotNull(strBuilder1);
      assertTrue(strBuilder1.equals((Object)strBuilder0));
      
      StrBuilder strBuilder2 = new StrBuilder();
      assertEquals(0, strBuilder2.size());
      assertFalse(strBuilder2.isNotEmpty());
      assertTrue(strBuilder2.isEmpty());
      assertEquals(0, strBuilder2.length());
      assertEquals(32, strBuilder2.capacity());
      assertNull(strBuilder2.getNewLineText());
      assertNull(strBuilder2.getNullText());
      assertNotNull(strBuilder2);
      assertTrue(strBuilder2.equals((Object)strBuilder0));
      assertTrue(strBuilder2.equals((Object)strBuilder1));
      
      boolean boolean0 = strBuilder1.equalsIgnoreCase(strBuilder0);
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertTrue(strBuilder1.isEmpty());
      assertEquals(0, strBuilder1.length());
      assertFalse(strBuilder1.isNotEmpty());
      assertEquals(0, strBuilder1.size());
      assertTrue(boolean0);
      assertTrue(strBuilder0.equals((Object)strBuilder2));
      assertTrue(strBuilder0.equals((Object)strBuilder1));
      assertTrue(strBuilder1.equals((Object)strBuilder2));
      assertTrue(strBuilder1.equals((Object)strBuilder0));
      assertNotSame(strBuilder0, strBuilder1);
      assertNotSame(strBuilder0, strBuilder2);
      assertNotSame(strBuilder1, strBuilder2);
      assertNotSame(strBuilder1, strBuilder0);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(0);
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.size());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.setLength(0);
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(32, strBuilder1.capacity());
      assertTrue(strBuilder1.isEmpty());
      assertEquals(0, strBuilder1.length());
      assertEquals(0, strBuilder1.size());
      assertFalse(strBuilder1.isNotEmpty());
      assertNull(strBuilder1.getNullText());
      assertNotNull(strBuilder1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      
      char[] charArray0 = strBuilder0.toCharArray();
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.size());
      assertNotNull(charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      assertSame(strBuilder0, strBuilder1);
      
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      assertFalse(boolean0);
      
      StrBuilder strBuilder2 = strBuilder0.appendln((double) 'R');
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(5, strBuilder0.length());
      assertEquals(5, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(5, strBuilder2.length());
      assertEquals(5, strBuilder2.size());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(32, strBuilder2.capacity());
      assertNull(strBuilder2.getNullText());
      assertTrue(strBuilder2.isNotEmpty());
      assertNull(strBuilder2.getNewLineText());
      assertNotNull(strBuilder2);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      
      StrBuilder strBuilder3 = strBuilder2.append("Invalid length: ");
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(21, strBuilder0.length());
      assertEquals(21, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(21, strBuilder2.length());
      assertEquals(21, strBuilder2.size());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(32, strBuilder2.capacity());
      assertNull(strBuilder2.getNullText());
      assertTrue(strBuilder2.isNotEmpty());
      assertNull(strBuilder2.getNewLineText());
      assertNull(strBuilder3.getNullText());
      assertEquals(21, strBuilder3.length());
      assertFalse(strBuilder3.isEmpty());
      assertEquals(21, strBuilder3.size());
      assertNull(strBuilder3.getNewLineText());
      assertEquals(32, strBuilder3.capacity());
      assertTrue(strBuilder3.isNotEmpty());
      assertNotNull(strBuilder3);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder2, strBuilder3);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder3, strBuilder2);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder0);
      
      String string0 = strBuilder0.midString(117, 116);
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(21, strBuilder0.length());
      assertEquals(21, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertNotNull(string0);
      assertEquals("", string0);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      
      StrBuilder strBuilder4 = new StrBuilder(0);
      assertEquals(32, strBuilder4.capacity());
      assertEquals(0, strBuilder4.length());
      assertEquals(0, strBuilder4.size());
      assertFalse(strBuilder4.isNotEmpty());
      assertNull(strBuilder4.getNullText());
      assertTrue(strBuilder4.isEmpty());
      assertNull(strBuilder4.getNewLineText());
      assertNotNull(strBuilder4);
      assertFalse(strBuilder4.equals((Object)strBuilder3));
      assertFalse(strBuilder4.equals((Object)strBuilder0));
      assertFalse(strBuilder4.equals((Object)strBuilder2));
      assertFalse(strBuilder4.equals((Object)strBuilder1));
      
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder4.new StrBuilderReader();
      assertEquals(32, strBuilder4.capacity());
      assertEquals(0, strBuilder4.length());
      assertEquals(0, strBuilder4.size());
      assertFalse(strBuilder4.isNotEmpty());
      assertNull(strBuilder4.getNullText());
      assertTrue(strBuilder4.isEmpty());
      assertNull(strBuilder4.getNewLineText());
      assertTrue(strBuilder_StrBuilderReader0.markSupported());
      assertFalse(strBuilder_StrBuilderReader0.ready());
      assertNotNull(strBuilder_StrBuilderReader0);
      assertFalse(strBuilder4.equals((Object)strBuilder3));
      assertFalse(strBuilder4.equals((Object)strBuilder0));
      assertFalse(strBuilder4.equals((Object)strBuilder2));
      assertFalse(strBuilder4.equals((Object)strBuilder1));
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      int int0 = strBuilder_StrBuilderReader0.read(charArray0);
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(21, strBuilder0.length());
      assertEquals(21, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(32, strBuilder4.capacity());
      assertEquals(0, strBuilder4.length());
      assertEquals(0, strBuilder4.size());
      assertFalse(strBuilder4.isNotEmpty());
      assertNull(strBuilder4.getNullText());
      assertTrue(strBuilder4.isEmpty());
      assertNull(strBuilder4.getNewLineText());
      assertTrue(strBuilder_StrBuilderReader0.markSupported());
      assertFalse(strBuilder_StrBuilderReader0.ready());
      assertEquals(0, int0);
      assertFalse(strBuilder0.equals((Object)strBuilder4));
      assertFalse(strBuilder4.equals((Object)strBuilder3));
      assertFalse(strBuilder4.equals((Object)strBuilder0));
      assertFalse(strBuilder4.equals((Object)strBuilder2));
      assertFalse(strBuilder4.equals((Object)strBuilder1));
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      assertNotSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertNotSame(strBuilder4, strBuilder3);
      assertNotSame(strBuilder4, strBuilder0);
      assertNotSame(strBuilder4, strBuilder2);
      assertNotSame(strBuilder4, strBuilder1);
      
      StringWriter stringWriter0 = new StringWriter();
      assertEquals("", stringWriter0.toString());
      assertNotNull(stringWriter0);
      
      StrBuilder strBuilder5 = new StrBuilder();
      assertNull(strBuilder5.getNullText());
      assertEquals(0, strBuilder5.length());
      assertFalse(strBuilder5.isNotEmpty());
      assertEquals(0, strBuilder5.size());
      assertTrue(strBuilder5.isEmpty());
      assertEquals(32, strBuilder5.capacity());
      assertNull(strBuilder5.getNewLineText());
      assertNotNull(strBuilder5);
      assertFalse(strBuilder5.equals((Object)strBuilder0));
      assertFalse(strBuilder5.equals((Object)strBuilder1));
      assertFalse(strBuilder5.equals((Object)strBuilder3));
      assertFalse(strBuilder5.equals((Object)strBuilder2));
      assertTrue(strBuilder5.equals((Object)strBuilder4));
      
      StrBuilder strBuilder6 = strBuilder2.deleteAll('1');
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(21, strBuilder0.length());
      assertEquals(21, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(21, strBuilder2.length());
      assertEquals(21, strBuilder2.size());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(32, strBuilder2.capacity());
      assertNull(strBuilder2.getNullText());
      assertTrue(strBuilder2.isNotEmpty());
      assertNull(strBuilder2.getNewLineText());
      assertTrue(strBuilder6.isNotEmpty());
      assertNull(strBuilder6.getNullText());
      assertNull(strBuilder6.getNewLineText());
      assertFalse(strBuilder6.isEmpty());
      assertEquals(32, strBuilder6.capacity());
      assertEquals(21, strBuilder6.length());
      assertEquals(21, strBuilder6.size());
      assertNotNull(strBuilder6);
      assertFalse(strBuilder0.equals((Object)strBuilder4));
      assertFalse(strBuilder0.equals((Object)strBuilder5));
      assertFalse(strBuilder2.equals((Object)strBuilder5));
      assertFalse(strBuilder2.equals((Object)strBuilder4));
      assertFalse(strBuilder6.equals((Object)strBuilder4));
      assertFalse(strBuilder6.equals((Object)strBuilder5));
      assertNotSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder6);
      assertSame(strBuilder0, strBuilder2);
      assertNotSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertNotSame(strBuilder2, strBuilder5);
      assertSame(strBuilder2, strBuilder3);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder6);
      assertNotSame(strBuilder2, strBuilder4);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder6, strBuilder1);
      assertSame(strBuilder6, strBuilder0);
      assertNotSame(strBuilder6, strBuilder4);
      assertSame(strBuilder6, strBuilder3);
      assertNotSame(strBuilder6, strBuilder5);
      assertSame(strBuilder6, strBuilder2);
      
      boolean boolean1 = strBuilder3.equalsIgnoreCase(strBuilder5);
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(21, strBuilder0.length());
      assertEquals(21, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(21, strBuilder2.length());
      assertEquals(21, strBuilder2.size());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(32, strBuilder2.capacity());
      assertNull(strBuilder2.getNullText());
      assertTrue(strBuilder2.isNotEmpty());
      assertNull(strBuilder2.getNewLineText());
      assertNull(strBuilder3.getNullText());
      assertEquals(21, strBuilder3.length());
      assertFalse(strBuilder3.isEmpty());
      assertEquals(21, strBuilder3.size());
      assertNull(strBuilder3.getNewLineText());
      assertEquals(32, strBuilder3.capacity());
      assertTrue(strBuilder3.isNotEmpty());
      assertNull(strBuilder5.getNullText());
      assertEquals(0, strBuilder5.length());
      assertFalse(strBuilder5.isNotEmpty());
      assertEquals(0, strBuilder5.size());
      assertTrue(strBuilder5.isEmpty());
      assertEquals(32, strBuilder5.capacity());
      assertNull(strBuilder5.getNewLineText());
      assertFalse(boolean1);
      assertFalse(strBuilder0.equals((Object)strBuilder4));
      assertFalse(strBuilder0.equals((Object)strBuilder5));
      assertFalse(strBuilder2.equals((Object)strBuilder5));
      assertFalse(strBuilder2.equals((Object)strBuilder4));
      assertFalse(strBuilder3.equals((Object)strBuilder4));
      assertFalse(strBuilder3.equals((Object)strBuilder5));
      assertFalse(strBuilder5.equals((Object)strBuilder6));
      assertFalse(strBuilder5.equals((Object)strBuilder0));
      assertFalse(strBuilder5.equals((Object)strBuilder1));
      assertFalse(strBuilder5.equals((Object)strBuilder3));
      assertFalse(strBuilder5.equals((Object)strBuilder2));
      assertTrue(strBuilder5.equals((Object)strBuilder4));
      assertTrue(boolean1 == boolean0);
      assertNotSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder6);
      assertSame(strBuilder0, strBuilder2);
      assertNotSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertNotSame(strBuilder2, strBuilder5);
      assertSame(strBuilder2, strBuilder3);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder6);
      assertNotSame(strBuilder2, strBuilder4);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder3, strBuilder2);
      assertSame(strBuilder3, strBuilder1);
      assertNotSame(strBuilder3, strBuilder4);
      assertSame(strBuilder3, strBuilder6);
      assertNotSame(strBuilder3, strBuilder5);
      assertSame(strBuilder3, strBuilder0);
      assertNotSame(strBuilder5, strBuilder6);
      assertNotSame(strBuilder5, strBuilder0);
      assertNotSame(strBuilder5, strBuilder4);
      assertNotSame(strBuilder5, strBuilder1);
      assertNotSame(strBuilder5, strBuilder3);
      assertNotSame(strBuilder5, strBuilder2);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.append(", Length: ");
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(10, strBuilder0.size());
      assertEquals(10, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(10, strBuilder1.length());
      assertEquals(10, strBuilder1.size());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertFalse(strBuilder1.isEmpty());
      assertTrue(strBuilder1.isNotEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertNotNull(strBuilder1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      
      boolean boolean0 = strBuilder0.endsWith(", Length: ");
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(10, strBuilder0.size());
      assertEquals(10, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(boolean0);
      assertSame(strBuilder0, strBuilder1);
      
      StrBuilder strBuilder2 = strBuilder1.appendSeparator('\'', (-48));
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(10, strBuilder0.size());
      assertEquals(10, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(10, strBuilder1.length());
      assertEquals(10, strBuilder1.size());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertFalse(strBuilder1.isEmpty());
      assertTrue(strBuilder1.isNotEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertTrue(strBuilder2.isNotEmpty());
      assertEquals(10, strBuilder2.size());
      assertEquals(10, strBuilder2.length());
      assertNull(strBuilder2.getNullText());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(32, strBuilder2.capacity());
      assertFalse(strBuilder2.isEmpty());
      assertNotNull(strBuilder2);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      
      StrBuilder strBuilder3 = strBuilder2.ensureCapacity((-48));
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(10, strBuilder0.size());
      assertEquals(10, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(10, strBuilder1.length());
      assertEquals(10, strBuilder1.size());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertFalse(strBuilder1.isEmpty());
      assertTrue(strBuilder1.isNotEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertTrue(strBuilder2.isNotEmpty());
      assertEquals(10, strBuilder2.size());
      assertEquals(10, strBuilder2.length());
      assertNull(strBuilder2.getNullText());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(32, strBuilder2.capacity());
      assertFalse(strBuilder2.isEmpty());
      assertTrue(strBuilder3.isNotEmpty());
      assertFalse(strBuilder3.isEmpty());
      assertNull(strBuilder3.getNewLineText());
      assertEquals(10, strBuilder3.size());
      assertEquals(32, strBuilder3.capacity());
      assertEquals(10, strBuilder3.length());
      assertNull(strBuilder3.getNullText());
      assertNotNull(strBuilder3);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder3);
      assertSame(strBuilder3, strBuilder2);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder0);
      
      StrBuilder strBuilder4 = strBuilder2.appendSeparator(", Length: ");
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(20, strBuilder0.size());
      assertEquals(20, strBuilder0.length());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(20, strBuilder1.length());
      assertEquals(20, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertFalse(strBuilder1.isEmpty());
      assertTrue(strBuilder1.isNotEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertTrue(strBuilder2.isNotEmpty());
      assertNull(strBuilder2.getNullText());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(32, strBuilder2.capacity());
      assertEquals(20, strBuilder2.size());
      assertEquals(20, strBuilder2.length());
      assertFalse(strBuilder2.isEmpty());
      assertTrue(strBuilder4.isNotEmpty());
      assertFalse(strBuilder4.isEmpty());
      assertNull(strBuilder4.getNullText());
      assertNull(strBuilder4.getNewLineText());
      assertEquals(32, strBuilder4.capacity());
      assertEquals(20, strBuilder4.length());
      assertEquals(20, strBuilder4.size());
      assertNotNull(strBuilder4);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder4);
      assertSame(strBuilder2, strBuilder4);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder3);
      assertSame(strBuilder4, strBuilder3);
      assertSame(strBuilder4, strBuilder2);
      assertSame(strBuilder4, strBuilder0);
      assertSame(strBuilder4, strBuilder1);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertTrue(strBuilder0.isEmpty());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.appendln(1);
      assertEquals(2, strBuilder0.size());
      assertEquals(2, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(32, strBuilder1.capacity());
      assertTrue(strBuilder1.isNotEmpty());
      assertEquals(2, strBuilder1.length());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(2, strBuilder1.size());
      assertNotNull(strBuilder1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      
      StrBuilder strBuilder2 = strBuilder1.appendNull();
      assertEquals(2, strBuilder0.size());
      assertEquals(2, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(32, strBuilder1.capacity());
      assertTrue(strBuilder1.isNotEmpty());
      assertEquals(2, strBuilder1.length());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(2, strBuilder1.size());
      assertEquals(2, strBuilder2.length());
      assertEquals(2, strBuilder2.size());
      assertNull(strBuilder2.getNullText());
      assertFalse(strBuilder2.isEmpty());
      assertNull(strBuilder2.getNewLineText());
      assertTrue(strBuilder2.isNotEmpty());
      assertEquals(32, strBuilder2.capacity());
      assertNotNull(strBuilder2);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      
      StrBuilder strBuilder3 = strBuilder0.replaceFirst("", "");
      assertEquals(2, strBuilder0.size());
      assertEquals(2, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(32, strBuilder3.capacity());
      assertTrue(strBuilder3.isNotEmpty());
      assertFalse(strBuilder3.isEmpty());
      assertNull(strBuilder3.getNewLineText());
      assertNull(strBuilder3.getNullText());
      assertEquals(2, strBuilder3.size());
      assertEquals(2, strBuilder3.length());
      assertNotNull(strBuilder3);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder3, strBuilder2);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder1);
      
      int int0 = strBuilder0.size();
      assertEquals(2, strBuilder0.size());
      assertEquals(2, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(2, int0);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder3);
      
      StrBuilder strBuilder4 = strBuilder0.appendSeparator("p2vtx[:.");
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(10, strBuilder0.size());
      assertEquals(10, strBuilder0.length());
      assertTrue(strBuilder4.isNotEmpty());
      assertNull(strBuilder4.getNewLineText());
      assertNull(strBuilder4.getNullText());
      assertEquals(10, strBuilder4.length());
      assertEquals(32, strBuilder4.capacity());
      assertEquals(10, strBuilder4.size());
      assertFalse(strBuilder4.isEmpty());
      assertNotNull(strBuilder4);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder4, strBuilder1);
      assertSame(strBuilder4, strBuilder3);
      assertSame(strBuilder4, strBuilder0);
      assertSame(strBuilder4, strBuilder2);
      
      char[] charArray0 = new char[7];
      charArray0[0] = '<';
      charArray0[1] = 'W';
      charArray0[2] = 'G';
      charArray0[3] = 'j';
      charArray0[4] = '$';
      charArray0[5] = '2';
      charArray0[6] = '5';
      StrBuilder strBuilder5 = strBuilder1.append(charArray0, 2, 1);
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(11, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(11, strBuilder0.length());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(11, strBuilder1.length());
      assertEquals(11, strBuilder1.size());
      assertTrue(strBuilder1.isNotEmpty());
      assertFalse(strBuilder1.isEmpty());
      assertTrue(strBuilder5.isNotEmpty());
      assertFalse(strBuilder5.isEmpty());
      assertNull(strBuilder5.getNewLineText());
      assertNull(strBuilder5.getNullText());
      assertEquals(32, strBuilder5.capacity());
      assertEquals(11, strBuilder5.size());
      assertEquals(11, strBuilder5.length());
      assertNotNull(strBuilder5);
      assertArrayEquals(new char[] {'<', 'W', 'G', 'j', '$', '2', '5'}, charArray0);
      assertEquals(7, charArray0.length);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder1, strBuilder5);
      assertSame(strBuilder1, strBuilder4);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder5, strBuilder0);
      assertSame(strBuilder5, strBuilder4);
      assertSame(strBuilder5, strBuilder3);
      assertSame(strBuilder5, strBuilder2);
      assertSame(strBuilder5, strBuilder1);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(113);
      assertEquals(113, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertFalse(strBuilder0.isNotEmpty());
      assertNotNull(strBuilder0);
      
      ArrayList<StrBuilder> arrayList0 = new ArrayList<StrBuilder>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      assertFalse(arrayList0.contains(strBuilder0));
      
      boolean boolean0 = arrayList0.add(strBuilder0);
      assertEquals(113, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertFalse(strBuilder0.isNotEmpty());
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertTrue(boolean0);
      assertTrue(arrayList0.contains(strBuilder0));
      
      Vector<StrBuilder> vector0 = new Vector<StrBuilder>(arrayList0);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertEquals(1, vector0.capacity());
      assertFalse(vector0.isEmpty());
      assertEquals(1, vector0.size());
      assertEquals("[]", vector0.toString());
      assertNotNull(vector0);
      assertTrue(arrayList0.contains(strBuilder0));
      assertTrue(vector0.contains(strBuilder0));
      
      StrBuilder strBuilder1 = strBuilder0.appendAll((Iterable<?>) vector0);
      assertEquals(113, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertFalse(strBuilder0.isNotEmpty());
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertEquals(1, vector0.capacity());
      assertFalse(vector0.isEmpty());
      assertEquals(1, vector0.size());
      assertEquals("[]", vector0.toString());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(0, strBuilder1.size());
      assertFalse(strBuilder1.isNotEmpty());
      assertTrue(strBuilder1.isEmpty());
      assertEquals(0, strBuilder1.length());
      assertEquals(113, strBuilder1.capacity());
      assertNotNull(strBuilder1);
      assertTrue(arrayList0.contains(strBuilder1));
      assertTrue(vector0.contains(strBuilder1));
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      String string0 = "dN";
      StrBuilder strBuilder0 = new StrBuilder("dN");
      assertNull(strBuilder0.getNewLineText());
      assertEquals(34, strBuilder0.capacity());
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(2, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(2, strBuilder0.length());
      assertNotNull(strBuilder0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      int int0 = strBuilder0.indexOf("dN");
      assertNull(strBuilder0.getNewLineText());
      assertEquals(34, strBuilder0.capacity());
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(2, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(2, strBuilder0.length());
      assertEquals(0, int0);
      
      StrBuilder strBuilder1 = strBuilder0.reverse();
      assertNull(strBuilder0.getNewLineText());
      assertEquals(34, strBuilder0.capacity());
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(2, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(2, strBuilder0.length());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertTrue(strBuilder1.isNotEmpty());
      assertEquals(34, strBuilder1.capacity());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(2, strBuilder1.length());
      assertEquals(2, strBuilder1.size());
      assertNotNull(strBuilder1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      
      Integer integer0 = new Integer(115);
      assertNotNull(integer0);
      assertEquals(115, (int)integer0);
      assertFalse(integer0.equals((Object)int0));
      
      char[] charArray0 = new char[1];
      charArray0[0] = '#';
      StrBuilder strBuilder2 = strBuilder1.append(charArray0);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(34, strBuilder0.capacity());
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(3, strBuilder0.size());
      assertEquals(3, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(3, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertTrue(strBuilder1.isNotEmpty());
      assertEquals(34, strBuilder1.capacity());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(3, strBuilder1.length());
      assertEquals(3, strBuilder2.size());
      assertNull(strBuilder2.getNewLineText());
      assertNull(strBuilder2.getNullText());
      assertFalse(strBuilder2.isEmpty());
      assertTrue(strBuilder2.isNotEmpty());
      assertEquals(3, strBuilder2.length());
      assertEquals(34, strBuilder2.capacity());
      assertNotNull(strBuilder2);
      assertArrayEquals(new char[] {'#'}, charArray0);
      assertEquals(1, charArray0.length);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      
      int int1 = StrBuilder.CAPACITY;
      assertEquals(32, int1);
      assertFalse(int1 == int0);
      
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
      assertNull(strBuilder0.getNewLineText());
      assertEquals(34, strBuilder0.capacity());
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(3, strBuilder0.size());
      assertEquals(3, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertTrue(strBuilder_StrBuilderReader0.ready());
      assertTrue(strBuilder_StrBuilderReader0.markSupported());
      assertNotNull(strBuilder_StrBuilderReader0);
      
      // Undeclared exception!
      try { 
        strBuilder2.append("dN", 0, 744);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // length must be valid
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      int int0 = 0;
      StrBuilder strBuilder0 = new StrBuilder(0);
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertFalse(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNullText());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.setLength(0);
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertFalse(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(0, strBuilder1.length());
      assertEquals(0, strBuilder1.size());
      assertFalse(strBuilder1.isNotEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertTrue(strBuilder1.isEmpty());
      assertNotNull(strBuilder1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      
      char[] charArray0 = strBuilder0.toCharArray();
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertFalse(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNullText());
      assertNotNull(charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      assertSame(strBuilder0, strBuilder1);
      
      char char0 = 'R';
      StrBuilder strBuilder2 = strBuilder0.appendln((double) 'R');
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(5, strBuilder0.length());
      assertEquals(5, strBuilder0.size());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(5, strBuilder2.length());
      assertEquals(5, strBuilder2.size());
      assertNull(strBuilder2.getNullText());
      assertFalse(strBuilder2.isEmpty());
      assertTrue(strBuilder2.isNotEmpty());
      assertEquals(32, strBuilder2.capacity());
      assertNotNull(strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      
      // Undeclared exception!
      try { 
        strBuilder1.insert(0, charArray0, 0, (-151));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // Invalid length: -151
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      int int0 = 0;
      StrBuilder strBuilder0 = new StrBuilder(0);
      assertEquals(32, strBuilder0.capacity());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.setLength(0);
      assertEquals(32, strBuilder0.capacity());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNullText());
      assertFalse(strBuilder1.isNotEmpty());
      assertTrue(strBuilder1.isEmpty());
      assertEquals(0, strBuilder1.length());
      assertEquals(0, strBuilder1.size());
      assertNotNull(strBuilder1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      
      char[] charArray0 = strBuilder0.toCharArray();
      assertEquals(32, strBuilder0.capacity());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertNotNull(charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      assertSame(strBuilder0, strBuilder1);
      
      char char0 = 'R';
      StrBuilder strBuilder2 = strBuilder0.appendln((double) 'R');
      assertFalse(strBuilder0.isEmpty());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(5, strBuilder0.size());
      assertEquals(5, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(5, strBuilder2.length());
      assertEquals(5, strBuilder2.size());
      assertFalse(strBuilder2.isEmpty());
      assertNull(strBuilder2.getNewLineText());
      assertTrue(strBuilder2.isNotEmpty());
      assertEquals(32, strBuilder2.capacity());
      assertNull(strBuilder2.getNullText());
      assertNotNull(strBuilder2);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      
      int int1 = (-151);
      // Undeclared exception!
      try { 
        strBuilder1.insert(0, charArray0, 0, (-151));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // Invalid length: -151
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isEmpty());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.append((Object) null);
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertFalse(strBuilder1.isNotEmpty());
      assertEquals(0, strBuilder1.size());
      assertTrue(strBuilder1.isEmpty());
      assertEquals(0, strBuilder1.length());
      assertEquals(32, strBuilder1.capacity());
      assertNotNull(strBuilder1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      
      StrBuilder strBuilder2 = strBuilder0.append("remove() is unsupported");
      assertEquals(23, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(23, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(23, strBuilder2.size());
      assertEquals(23, strBuilder2.length());
      assertTrue(strBuilder2.isNotEmpty());
      assertNull(strBuilder2.getNullText());
      assertNull(strBuilder2.getNewLineText());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(32, strBuilder2.capacity());
      assertNotNull(strBuilder2);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      
      boolean boolean0 = strBuilder1.endsWith("remove() is unsupported");
      assertEquals(23, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(23, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertTrue(strBuilder1.isNotEmpty());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertEquals(23, strBuilder1.size());
      assertEquals(23, strBuilder1.length());
      assertEquals(32, strBuilder1.capacity());
      assertTrue(boolean0);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder2);
      
      StrBuilder strBuilder3 = strBuilder2.deleteAll('t');
      assertEquals(22, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(22, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(22, strBuilder2.length());
      assertEquals(22, strBuilder2.size());
      assertTrue(strBuilder2.isNotEmpty());
      assertNull(strBuilder2.getNullText());
      assertNull(strBuilder2.getNewLineText());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(32, strBuilder2.capacity());
      assertEquals(32, strBuilder3.capacity());
      assertEquals(22, strBuilder3.length());
      assertFalse(strBuilder3.isEmpty());
      assertTrue(strBuilder3.isNotEmpty());
      assertNull(strBuilder3.getNewLineText());
      assertEquals(22, strBuilder3.size());
      assertNull(strBuilder3.getNullText());
      assertNotNull(strBuilder3);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder3);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder2);
      assertSame(strBuilder3, strBuilder0);
      
      StrBuilder strBuilder4 = strBuilder2.appendFixedWidthPadRight(6080, 1634, '\'');
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(1656, strBuilder0.length());
      assertEquals(1656, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(3312, strBuilder0.capacity());
      assertEquals(1656, strBuilder2.size());
      assertEquals(1656, strBuilder2.length());
      assertTrue(strBuilder2.isNotEmpty());
      assertNull(strBuilder2.getNullText());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(3312, strBuilder2.capacity());
      assertFalse(strBuilder2.isEmpty());
      assertTrue(strBuilder4.isNotEmpty());
      assertEquals(1656, strBuilder4.size());
      assertNull(strBuilder4.getNewLineText());
      assertEquals(3312, strBuilder4.capacity());
      assertFalse(strBuilder4.isEmpty());
      assertNull(strBuilder4.getNullText());
      assertEquals(1656, strBuilder4.length());
      assertNotNull(strBuilder4);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder3);
      assertSame(strBuilder2, strBuilder4);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder4, strBuilder0);
      assertSame(strBuilder4, strBuilder2);
      assertSame(strBuilder4, strBuilder1);
      assertSame(strBuilder4, strBuilder3);
      
      StrBuilder strBuilder5 = new StrBuilder("remove() is unsupported");
      assertNull(strBuilder5.getNullText());
      assertFalse(strBuilder5.isEmpty());
      assertNull(strBuilder5.getNewLineText());
      assertTrue(strBuilder5.isNotEmpty());
      assertEquals(23, strBuilder5.size());
      assertEquals(23, strBuilder5.length());
      assertEquals(55, strBuilder5.capacity());
      assertNotNull(strBuilder5);
      assertFalse(strBuilder5.equals((Object)strBuilder3));
      assertFalse(strBuilder5.equals((Object)strBuilder4));
      assertFalse(strBuilder5.equals((Object)strBuilder0));
      assertFalse(strBuilder5.equals((Object)strBuilder2));
      assertFalse(strBuilder5.equals((Object)strBuilder1));
      
      char[] charArray0 = new char[0];
      StrBuilder strBuilder6 = strBuilder5.appendln(charArray0);
      assertNull(strBuilder5.getNullText());
      assertFalse(strBuilder5.isEmpty());
      assertNull(strBuilder5.getNewLineText());
      assertTrue(strBuilder5.isNotEmpty());
      assertEquals(24, strBuilder5.length());
      assertEquals(24, strBuilder5.size());
      assertEquals(55, strBuilder5.capacity());
      assertEquals(55, strBuilder6.capacity());
      assertTrue(strBuilder6.isNotEmpty());
      assertFalse(strBuilder6.isEmpty());
      assertEquals(24, strBuilder6.length());
      assertNull(strBuilder6.getNullText());
      assertNull(strBuilder6.getNewLineText());
      assertEquals(24, strBuilder6.size());
      assertNotNull(strBuilder6);
      assertFalse(strBuilder5.equals((Object)strBuilder3));
      assertFalse(strBuilder5.equals((Object)strBuilder4));
      assertFalse(strBuilder5.equals((Object)strBuilder0));
      assertFalse(strBuilder5.equals((Object)strBuilder2));
      assertFalse(strBuilder5.equals((Object)strBuilder1));
      assertFalse(strBuilder6.equals((Object)strBuilder2));
      assertFalse(strBuilder6.equals((Object)strBuilder1));
      assertFalse(strBuilder6.equals((Object)strBuilder3));
      assertFalse(strBuilder6.equals((Object)strBuilder4));
      assertFalse(strBuilder6.equals((Object)strBuilder0));
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      assertNotSame(strBuilder5, strBuilder3);
      assertNotSame(strBuilder5, strBuilder4);
      assertNotSame(strBuilder5, strBuilder0);
      assertNotSame(strBuilder5, strBuilder2);
      assertSame(strBuilder5, strBuilder6);
      assertNotSame(strBuilder5, strBuilder1);
      assertNotSame(strBuilder6, strBuilder2);
      assertNotSame(strBuilder6, strBuilder1);
      assertNotSame(strBuilder6, strBuilder3);
      assertSame(strBuilder6, strBuilder5);
      assertNotSame(strBuilder6, strBuilder4);
      assertNotSame(strBuilder6, strBuilder0);
      
      // Undeclared exception!
      try { 
        strBuilder0.subSequence((-211), 32);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -211
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertFalse(strBuilder0.isNotEmpty());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.appendPadding(30, 'Q');
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(30, strBuilder0.length());
      assertEquals(30, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(32, strBuilder1.capacity());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(30, strBuilder1.length());
      assertEquals(30, strBuilder1.size());
      assertTrue(strBuilder1.isNotEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertNotNull(strBuilder1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      
      StrBuilder strBuilder2 = new StrBuilder();
      assertEquals(0, strBuilder2.length());
      assertNull(strBuilder2.getNullText());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(0, strBuilder2.size());
      assertFalse(strBuilder2.isNotEmpty());
      assertEquals(32, strBuilder2.capacity());
      assertTrue(strBuilder2.isEmpty());
      assertNotNull(strBuilder2);
      assertFalse(strBuilder2.equals((Object)strBuilder0));
      assertFalse(strBuilder2.equals((Object)strBuilder1));
      
      boolean boolean0 = strBuilder0.contains('Q');
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(30, strBuilder0.length());
      assertEquals(30, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(boolean0);
      assertFalse(strBuilder0.equals((Object)strBuilder2));
      assertSame(strBuilder0, strBuilder1);
      assertNotSame(strBuilder0, strBuilder2);
      
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(30, strBuilder0.length());
      assertEquals(30, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder_StrBuilderReader0.markSupported());
      assertTrue(strBuilder_StrBuilderReader0.ready());
      assertNotNull(strBuilder_StrBuilderReader0);
      assertFalse(strBuilder0.equals((Object)strBuilder2));
      
      StrBuilder strBuilder3 = new StrBuilder(1);
      assertEquals(0, strBuilder3.length());
      assertNull(strBuilder3.getNullText());
      assertEquals(0, strBuilder3.size());
      assertFalse(strBuilder3.isNotEmpty());
      assertEquals(1, strBuilder3.capacity());
      assertTrue(strBuilder3.isEmpty());
      assertNull(strBuilder3.getNewLineText());
      assertNotNull(strBuilder3);
      assertFalse(strBuilder3.equals((Object)strBuilder0));
      assertFalse(strBuilder3.equals((Object)strBuilder1));
      assertTrue(strBuilder3.equals((Object)strBuilder2));
      
      StrBuilder strBuilder4 = strBuilder1.setNullText("', has a length less than 2");
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(30, strBuilder0.length());
      assertEquals(30, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals("', has a length less than 2", strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(32, strBuilder1.capacity());
      assertEquals("', has a length less than 2", strBuilder1.getNullText());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(30, strBuilder1.length());
      assertEquals(30, strBuilder1.size());
      assertTrue(strBuilder1.isNotEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(30, strBuilder4.length());
      assertTrue(strBuilder4.isNotEmpty());
      assertEquals("', has a length less than 2", strBuilder4.getNullText());
      assertNull(strBuilder4.getNewLineText());
      assertEquals(32, strBuilder4.capacity());
      assertEquals(30, strBuilder4.size());
      assertFalse(strBuilder4.isEmpty());
      assertNotNull(strBuilder4);
      assertFalse(strBuilder0.equals((Object)strBuilder3));
      assertFalse(strBuilder0.equals((Object)strBuilder2));
      assertFalse(strBuilder1.equals((Object)strBuilder2));
      assertFalse(strBuilder1.equals((Object)strBuilder3));
      assertFalse(strBuilder4.equals((Object)strBuilder3));
      assertFalse(strBuilder4.equals((Object)strBuilder2));
      assertSame(strBuilder0, strBuilder1);
      assertNotSame(strBuilder0, strBuilder3);
      assertNotSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder4);
      assertNotSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder4);
      assertNotSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder0);
      assertNotSame(strBuilder4, strBuilder3);
      assertNotSame(strBuilder4, strBuilder2);
      assertSame(strBuilder4, strBuilder0);
      assertSame(strBuilder4, strBuilder1);
      
      StringBuilder stringBuilder0 = new StringBuilder();
      assertEquals("", stringBuilder0.toString());
      assertNotNull(stringBuilder0);
      
      StringBuffer stringBuffer0 = new StringBuffer();
      assertEquals(0, stringBuffer0.length());
      assertEquals("", stringBuffer0.toString());
      assertNotNull(stringBuffer0);
      
      StringBuilder stringBuilder1 = stringBuilder0.append(stringBuffer0);
      assertEquals("", stringBuilder0.toString());
      assertEquals(0, stringBuffer0.length());
      assertEquals("", stringBuffer0.toString());
      assertEquals("", stringBuilder1.toString());
      assertNotNull(stringBuilder1);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder1, stringBuilder0);
      
      StrBuilder strBuilder5 = strBuilder0.setNullText(",%");
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(30, strBuilder0.length());
      assertEquals(30, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(",%", strBuilder0.getNullText());
      assertEquals(32, strBuilder5.capacity());
      assertTrue(strBuilder5.isNotEmpty());
      assertFalse(strBuilder5.isEmpty());
      assertEquals(30, strBuilder5.length());
      assertNull(strBuilder5.getNewLineText());
      assertEquals(30, strBuilder5.size());
      assertEquals(",%", strBuilder5.getNullText());
      assertNotNull(strBuilder5);
      assertFalse(strBuilder0.equals((Object)strBuilder3));
      assertFalse(strBuilder0.equals((Object)strBuilder2));
      assertFalse(strBuilder5.equals((Object)strBuilder2));
      assertFalse(strBuilder5.equals((Object)strBuilder3));
      assertSame(strBuilder0, strBuilder1);
      assertNotSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder5);
      assertNotSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder5, strBuilder0);
      assertNotSame(strBuilder5, strBuilder2);
      assertNotSame(strBuilder5, strBuilder3);
      assertSame(strBuilder5, strBuilder1);
      assertSame(strBuilder5, strBuilder4);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(0);
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertFalse(strBuilder0.isNotEmpty());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.appendSeparator("', has a length less than 2", "', has a length less than 2");
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(27, strBuilder0.length());
      assertEquals(27, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(27, strBuilder1.length());
      assertEquals(27, strBuilder1.size());
      assertTrue(strBuilder1.isNotEmpty());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertNotNull(strBuilder1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "', has a length less than 2");
      assertFalse(boolean0);
      
      String string0 = strBuilder0.rightString(32);
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(27, strBuilder0.length());
      assertEquals(27, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertNotNull(string0);
      assertEquals("', has a length less than 2", string0);
      assertSame(strBuilder0, strBuilder1);
      
      StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer0 = strBuilder0.new StrBuilderTokenizer();
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(27, strBuilder0.length());
      assertEquals(27, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertFalse(strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull());
      assertEquals(0, strBuilder_StrBuilderTokenizer0.nextIndex());
      assertEquals((-1), strBuilder_StrBuilderTokenizer0.previousIndex());
      assertTrue(strBuilder_StrBuilderTokenizer0.isIgnoreEmptyTokens());
      assertNotNull(strBuilder_StrBuilderTokenizer0);
      
      StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer1 = (StrBuilder.StrBuilderTokenizer)strBuilder_StrBuilderTokenizer0.cloneReset();
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(27, strBuilder0.length());
      assertEquals(27, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertFalse(strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull());
      assertEquals(0, strBuilder_StrBuilderTokenizer0.nextIndex());
      assertEquals((-1), strBuilder_StrBuilderTokenizer0.previousIndex());
      assertTrue(strBuilder_StrBuilderTokenizer0.isIgnoreEmptyTokens());
      assertFalse(strBuilder_StrBuilderTokenizer1.isEmptyTokenAsNull());
      assertEquals((-1), strBuilder_StrBuilderTokenizer1.previousIndex());
      assertTrue(strBuilder_StrBuilderTokenizer1.isIgnoreEmptyTokens());
      assertEquals(0, strBuilder_StrBuilderTokenizer1.nextIndex());
      assertNotNull(strBuilder_StrBuilderTokenizer1);
      assertFalse(strBuilder_StrBuilderTokenizer1.equals((Object)strBuilder_StrBuilderTokenizer0));
      assertSame(strBuilder0, strBuilder1);
      assertNotSame(strBuilder_StrBuilderTokenizer0, strBuilder_StrBuilderTokenizer1);
      assertNotSame(strBuilder_StrBuilderTokenizer1, strBuilder_StrBuilderTokenizer0);
      
      Object[] objectArray0 = new Object[17];
      objectArray0[0] = (Object) strBuilder_StrBuilderTokenizer1;
      StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer2 = (StrBuilder.StrBuilderTokenizer)strBuilder_StrBuilderTokenizer0.clone();
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(27, strBuilder0.length());
      assertEquals(27, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertFalse(strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull());
      assertEquals(0, strBuilder_StrBuilderTokenizer0.nextIndex());
      assertEquals((-1), strBuilder_StrBuilderTokenizer0.previousIndex());
      assertTrue(strBuilder_StrBuilderTokenizer0.isIgnoreEmptyTokens());
      assertTrue(strBuilder_StrBuilderTokenizer2.isIgnoreEmptyTokens());
      assertEquals(0, strBuilder_StrBuilderTokenizer2.nextIndex());
      assertFalse(strBuilder_StrBuilderTokenizer2.isEmptyTokenAsNull());
      assertEquals((-1), strBuilder_StrBuilderTokenizer2.previousIndex());
      assertNotNull(strBuilder_StrBuilderTokenizer2);
      assertFalse(strBuilder_StrBuilderTokenizer0.equals((Object)strBuilder_StrBuilderTokenizer1));
      assertFalse(strBuilder_StrBuilderTokenizer2.equals((Object)strBuilder_StrBuilderTokenizer1));
      assertFalse(strBuilder_StrBuilderTokenizer2.equals((Object)strBuilder_StrBuilderTokenizer0));
      assertSame(strBuilder0, strBuilder1);
      assertNotSame(strBuilder_StrBuilderTokenizer0, strBuilder_StrBuilderTokenizer2);
      assertNotSame(strBuilder_StrBuilderTokenizer0, strBuilder_StrBuilderTokenizer1);
      assertNotSame(strBuilder_StrBuilderTokenizer2, strBuilder_StrBuilderTokenizer1);
      assertNotSame(strBuilder_StrBuilderTokenizer2, strBuilder_StrBuilderTokenizer0);
      
      objectArray0[1] = (Object) strBuilder_StrBuilderTokenizer2;
      objectArray0[2] = (Object) "', has a length less than 2";
      objectArray0[3] = (Object) strBuilder_StrBuilderTokenizer0;
      objectArray0[4] = (Object) strBuilder_StrBuilderTokenizer0;
      objectArray0[5] = (Object) strBuilder1;
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder1.new StrBuilderReader();
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(27, strBuilder0.length());
      assertEquals(27, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(27, strBuilder1.length());
      assertEquals(27, strBuilder1.size());
      assertTrue(strBuilder1.isNotEmpty());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertTrue(strBuilder_StrBuilderReader0.markSupported());
      assertTrue(strBuilder_StrBuilderReader0.ready());
      assertNotNull(strBuilder_StrBuilderReader0);
      
      char[] charArray0 = new char[5];
      charArray0[0] = '{';
      charArray0[1] = 'W';
      StrBuilder strBuilder2 = new StrBuilder();
      assertNull(strBuilder2.getNewLineText());
      assertEquals(32, strBuilder2.capacity());
      assertEquals(0, strBuilder2.size());
      assertEquals(0, strBuilder2.length());
      assertFalse(strBuilder2.isNotEmpty());
      assertTrue(strBuilder2.isEmpty());
      assertNull(strBuilder2.getNullText());
      assertNotNull(strBuilder2);
      assertFalse(strBuilder2.equals((Object)strBuilder0));
      assertFalse(strBuilder2.equals((Object)strBuilder1));
      
      StrBuilder strBuilder3 = new StrBuilder(0);
      assertEquals(32, strBuilder3.capacity());
      assertTrue(strBuilder3.isEmpty());
      assertNull(strBuilder3.getNewLineText());
      assertNull(strBuilder3.getNullText());
      assertEquals(0, strBuilder3.size());
      assertFalse(strBuilder3.isNotEmpty());
      assertEquals(0, strBuilder3.length());
      assertNotNull(strBuilder3);
      assertTrue(strBuilder3.equals((Object)strBuilder2));
      assertFalse(strBuilder3.equals((Object)strBuilder0));
      assertFalse(strBuilder3.equals((Object)strBuilder1));
      
      StrBuilder strBuilder4 = new StrBuilder("', has a length less than 2");
      assertEquals(59, strBuilder4.capacity());
      assertNull(strBuilder4.getNullText());
      assertEquals(27, strBuilder4.length());
      assertTrue(strBuilder4.isNotEmpty());
      assertNull(strBuilder4.getNewLineText());
      assertFalse(strBuilder4.isEmpty());
      assertEquals(27, strBuilder4.size());
      assertNotNull(strBuilder4);
      assertTrue(strBuilder4.equals((Object)strBuilder0));
      assertFalse(strBuilder4.equals((Object)strBuilder2));
      assertTrue(strBuilder4.equals((Object)strBuilder1));
      assertFalse(strBuilder4.equals((Object)strBuilder3));
      
      boolean boolean1 = strBuilder3.equals(strBuilder4);
      assertEquals(32, strBuilder3.capacity());
      assertTrue(strBuilder3.isEmpty());
      assertNull(strBuilder3.getNewLineText());
      assertNull(strBuilder3.getNullText());
      assertEquals(0, strBuilder3.size());
      assertFalse(strBuilder3.isNotEmpty());
      assertEquals(0, strBuilder3.length());
      assertEquals(59, strBuilder4.capacity());
      assertNull(strBuilder4.getNullText());
      assertEquals(27, strBuilder4.length());
      assertTrue(strBuilder4.isNotEmpty());
      assertNull(strBuilder4.getNewLineText());
      assertFalse(strBuilder4.isEmpty());
      assertEquals(27, strBuilder4.size());
      assertFalse(boolean1);
      assertTrue(strBuilder3.equals((Object)strBuilder2));
      assertFalse(strBuilder3.equals((Object)strBuilder0));
      assertFalse(strBuilder3.equals((Object)strBuilder4));
      assertFalse(strBuilder3.equals((Object)strBuilder1));
      assertTrue(strBuilder4.equals((Object)strBuilder0));
      assertFalse(strBuilder4.equals((Object)strBuilder2));
      assertTrue(strBuilder4.equals((Object)strBuilder1));
      assertFalse(strBuilder4.equals((Object)strBuilder3));
      assertTrue(boolean1 == boolean0);
      assertNotSame(strBuilder3, strBuilder0);
      assertNotSame(strBuilder3, strBuilder4);
      assertNotSame(strBuilder3, strBuilder1);
      assertNotSame(strBuilder3, strBuilder2);
      assertNotSame(strBuilder4, strBuilder2);
      assertNotSame(strBuilder4, strBuilder0);
      assertNotSame(strBuilder4, strBuilder1);
      assertNotSame(strBuilder4, strBuilder3);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      StrBuilder strBuilder0 = new StrBuilder();
      assertFalse(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNotNull(strBuilder0);
      
      boolean boolean1 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "o<JZaQSzrkSE1W(n;!");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      char[] charArray0 = new char[0];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      assertFalse(charBuffer0.isDirect());
      assertEquals("", charBuffer0.toString());
      assertTrue(charBuffer0.hasArray());
      assertEquals(0, charBuffer0.length());
      assertEquals(0, charBuffer0.arrayOffset());
      assertFalse(charBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.limit());
      assertEquals(0, charBuffer0.position());
      assertEquals(0, charBuffer0.remaining());
      assertEquals(0, charBuffer0.capacity());
      assertFalse(charBuffer0.isReadOnly());
      assertNotNull(charBuffer0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      
      StrBuilder strBuilder1 = strBuilder0.append(charBuffer0);
      assertFalse(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(charBuffer0.isDirect());
      assertEquals("", charBuffer0.toString());
      assertTrue(charBuffer0.hasArray());
      assertEquals(0, charBuffer0.length());
      assertEquals(0, charBuffer0.arrayOffset());
      assertFalse(charBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.limit());
      assertEquals(0, charBuffer0.position());
      assertEquals(0, charBuffer0.remaining());
      assertEquals(0, charBuffer0.capacity());
      assertFalse(charBuffer0.isReadOnly());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNullText());
      assertTrue(strBuilder1.isEmpty());
      assertFalse(strBuilder1.isNotEmpty());
      assertEquals(0, strBuilder1.length());
      assertEquals(0, strBuilder1.size());
      assertNotNull(strBuilder1);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      
      StrBuilder strBuilder2 = strBuilder0.ensureCapacity(0);
      assertFalse(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(32, strBuilder2.capacity());
      assertNull(strBuilder2.getNullText());
      assertFalse(strBuilder2.isNotEmpty());
      assertTrue(strBuilder2.isEmpty());
      assertEquals(0, strBuilder2.size());
      assertEquals(0, strBuilder2.length());
      assertNotNull(strBuilder2);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      
      Class<Integer> class0 = Integer.class;
      ServiceLoader<Integer> serviceLoader0 = ServiceLoader.loadInstalled(class0);
      assertEquals("java.util.ServiceLoader[java.lang.Integer]", serviceLoader0.toString());
      assertNotNull(serviceLoader0);
      
      Iterator<Integer> iterator0 = serviceLoader0.iterator();
      assertEquals("java.util.ServiceLoader[java.lang.Integer]", serviceLoader0.toString());
      assertNotNull(iterator0);
      
      StrBuilder strBuilder3 = strBuilder0.appendAll(iterator0);
      assertFalse(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals("java.util.ServiceLoader[java.lang.Integer]", serviceLoader0.toString());
      assertNull(strBuilder3.getNullText());
      assertEquals(0, strBuilder3.size());
      assertNull(strBuilder3.getNewLineText());
      assertEquals(0, strBuilder3.length());
      assertEquals(32, strBuilder3.capacity());
      assertTrue(strBuilder3.isEmpty());
      assertFalse(strBuilder3.isNotEmpty());
      assertNotNull(strBuilder3);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder3, strBuilder2);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder1);
      
      IntStream intStream0 = strBuilder1.codePoints();
      assertFalse(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(charBuffer0.isDirect());
      assertEquals("", charBuffer0.toString());
      assertTrue(charBuffer0.hasArray());
      assertEquals(0, charBuffer0.length());
      assertEquals(0, charBuffer0.arrayOffset());
      assertFalse(charBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.limit());
      assertEquals(0, charBuffer0.position());
      assertEquals(0, charBuffer0.remaining());
      assertEquals(0, charBuffer0.capacity());
      assertFalse(charBuffer0.isReadOnly());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNullText());
      assertTrue(strBuilder1.isEmpty());
      assertFalse(strBuilder1.isNotEmpty());
      assertEquals(0, strBuilder1.length());
      assertEquals(0, strBuilder1.size());
      assertNotNull(intStream0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder2);
      
      char[] charArray1 = strBuilder2.getChars(charArray0);
      assertFalse(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(32, strBuilder2.capacity());
      assertNull(strBuilder2.getNullText());
      assertFalse(strBuilder2.isNotEmpty());
      assertTrue(strBuilder2.isEmpty());
      assertEquals(0, strBuilder2.size());
      assertEquals(0, strBuilder2.length());
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertSame(charArray0, charArray1);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder3);
      assertSame(strBuilder2, strBuilder0);
      assertSame(charArray1, charArray0);
      
      int int0 = strBuilder2.lastIndexOf("+", 0);
      assertFalse(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(32, strBuilder2.capacity());
      assertNull(strBuilder2.getNullText());
      assertFalse(strBuilder2.isNotEmpty());
      assertTrue(strBuilder2.isEmpty());
      assertEquals(0, strBuilder2.size());
      assertEquals(0, strBuilder2.length());
      assertEquals((-1), int0);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder3);
      assertSame(strBuilder2, strBuilder0);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = '^';
      Integer integer0 = new Integer(916);
      assertNotNull(integer0);
      assertEquals(916, (int)integer0);
      
      Integer integer1 = new Integer(32);
      assertNotNull(integer1);
      assertEquals(32, (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      
      StrBuilder strBuilder0 = new StrBuilder();
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertFalse(strBuilder0.isNotEmpty());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.append((CharBuffer) null);
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertFalse(strBuilder0.isNotEmpty());
      assertFalse(strBuilder1.isNotEmpty());
      assertEquals(0, strBuilder1.length());
      assertEquals(0, strBuilder1.size());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNullText());
      assertTrue(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertNotNull(strBuilder1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      
      StrBuilder strBuilder2 = strBuilder1.appendNull();
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertFalse(strBuilder0.isNotEmpty());
      assertFalse(strBuilder1.isNotEmpty());
      assertEquals(0, strBuilder1.length());
      assertEquals(0, strBuilder1.size());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNullText());
      assertTrue(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(32, strBuilder2.capacity());
      assertTrue(strBuilder2.isEmpty());
      assertEquals(0, strBuilder2.size());
      assertNull(strBuilder2.getNullText());
      assertEquals(0, strBuilder2.length());
      assertFalse(strBuilder2.isNotEmpty());
      assertNotNull(strBuilder2);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      
      Integer[] integerArray0 = new Integer[1];
      StrBuilder strBuilder3 = strBuilder0.appendNewLine();
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(1, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(1, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder3.getNullText());
      assertEquals(1, strBuilder3.length());
      assertNull(strBuilder3.getNewLineText());
      assertEquals(32, strBuilder3.capacity());
      assertTrue(strBuilder3.isNotEmpty());
      assertFalse(strBuilder3.isEmpty());
      assertEquals(1, strBuilder3.size());
      assertNotNull(strBuilder3);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder2);
      assertSame(strBuilder3, strBuilder0);
      
      integerArray0[0] = integer1;
      StrBuilder strBuilder4 = strBuilder0.appendAll(integerArray0);
      assertNull(strBuilder0.getNullText());
      assertEquals(29, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(29, strBuilder0.length());
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder4.getNullText());
      assertFalse(strBuilder4.isEmpty());
      assertTrue(strBuilder4.isNotEmpty());
      assertEquals(29, strBuilder4.length());
      assertEquals(32, strBuilder4.capacity());
      assertEquals(29, strBuilder4.size());
      assertNull(strBuilder4.getNewLineText());
      assertNotNull(strBuilder4);
      assertEquals(1, integerArray0.length);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder4, strBuilder2);
      assertSame(strBuilder4, strBuilder0);
      assertSame(strBuilder4, strBuilder1);
      assertSame(strBuilder4, strBuilder3);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.size());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.trim();
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder1.isEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertFalse(strBuilder1.isNotEmpty());
      assertEquals(0, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertEquals(0, strBuilder1.length());
      assertNull(strBuilder1.getNewLineText());
      assertNotNull(strBuilder1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      
      char[] charArray0 = strBuilder0.toCharArray();
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.size());
      assertNotNull(charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      assertSame(strBuilder0, strBuilder1);
      
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder_StrBuilderReader0.markSupported());
      assertFalse(strBuilder_StrBuilderReader0.ready());
      assertNotNull(strBuilder_StrBuilderReader0);
      
      int int0 = strBuilder_StrBuilderReader0.read();
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder_StrBuilderReader0.markSupported());
      assertFalse(strBuilder_StrBuilderReader0.ready());
      assertEquals((-1), int0);
      assertSame(strBuilder0, strBuilder1);
      
      Writer writer0 = strBuilder1.asWriter();
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder1.isEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertFalse(strBuilder1.isNotEmpty());
      assertEquals(0, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertEquals(0, strBuilder1.length());
      assertNull(strBuilder1.getNewLineText());
      assertNotNull(writer0);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      
      StrBuilder strBuilder2 = new StrBuilder(3037);
      assertFalse(strBuilder2.isNotEmpty());
      assertEquals(0, strBuilder2.length());
      assertTrue(strBuilder2.isEmpty());
      assertEquals(0, strBuilder2.size());
      assertNull(strBuilder2.getNewLineText());
      assertNull(strBuilder2.getNullText());
      assertEquals(3037, strBuilder2.capacity());
      assertNotNull(strBuilder2);
      assertTrue(strBuilder2.equals((Object)strBuilder1));
      assertTrue(strBuilder2.equals((Object)strBuilder0));
      
      boolean boolean0 = strBuilder1.isNotEmpty();
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder1.isEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertFalse(strBuilder1.isNotEmpty());
      assertEquals(0, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertEquals(0, strBuilder1.length());
      assertNull(strBuilder1.getNewLineText());
      assertFalse(boolean0);
      assertTrue(strBuilder0.equals((Object)strBuilder2));
      assertTrue(strBuilder1.equals((Object)strBuilder2));
      assertSame(strBuilder0, strBuilder1);
      assertNotSame(strBuilder0, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertNotSame(strBuilder1, strBuilder2);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(0);
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertFalse(strBuilder0.isNotEmpty());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.appendPadding(0, 'F');
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertFalse(strBuilder0.isNotEmpty());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(0, strBuilder1.length());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(0, strBuilder1.size());
      assertFalse(strBuilder1.isNotEmpty());
      assertTrue(strBuilder1.isEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertNotNull(strBuilder1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      
      StrBuilder strBuilder2 = strBuilder0.insert(0, "");
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertFalse(strBuilder0.isNotEmpty());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder2.capacity());
      assertTrue(strBuilder2.isEmpty());
      assertNull(strBuilder2.getNewLineText());
      assertNull(strBuilder2.getNullText());
      assertEquals(0, strBuilder2.size());
      assertFalse(strBuilder2.isNotEmpty());
      assertEquals(0, strBuilder2.length());
      assertNotNull(strBuilder2);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      
      StringBuffer stringBuffer0 = new StringBuffer();
      assertEquals("", stringBuffer0.toString());
      assertEquals(0, stringBuffer0.length());
      assertNotNull(stringBuffer0);
      
      StringWriter stringWriter0 = new StringWriter();
      assertEquals("", stringWriter0.toString());
      assertNotNull(stringWriter0);
      
      StrBuilder strBuilder3 = new StrBuilder("startIndex must be valid");
      assertEquals(24, strBuilder3.size());
      assertEquals(24, strBuilder3.length());
      assertTrue(strBuilder3.isNotEmpty());
      assertNull(strBuilder3.getNullText());
      assertNull(strBuilder3.getNewLineText());
      assertEquals(56, strBuilder3.capacity());
      assertFalse(strBuilder3.isEmpty());
      assertNotNull(strBuilder3);
      assertFalse(strBuilder3.equals((Object)strBuilder0));
      assertFalse(strBuilder3.equals((Object)strBuilder1));
      assertFalse(strBuilder3.equals((Object)strBuilder2));
      
      StrBuilder strBuilder4 = strBuilder3.deleteAll("");
      assertEquals(24, strBuilder3.size());
      assertEquals(24, strBuilder3.length());
      assertTrue(strBuilder3.isNotEmpty());
      assertNull(strBuilder3.getNullText());
      assertNull(strBuilder3.getNewLineText());
      assertEquals(56, strBuilder3.capacity());
      assertFalse(strBuilder3.isEmpty());
      assertEquals(56, strBuilder4.capacity());
      assertTrue(strBuilder4.isNotEmpty());
      assertFalse(strBuilder4.isEmpty());
      assertNull(strBuilder4.getNullText());
      assertEquals(24, strBuilder4.length());
      assertNull(strBuilder4.getNewLineText());
      assertEquals(24, strBuilder4.size());
      assertNotNull(strBuilder4);
      assertFalse(strBuilder3.equals((Object)strBuilder0));
      assertFalse(strBuilder3.equals((Object)strBuilder1));
      assertFalse(strBuilder3.equals((Object)strBuilder2));
      assertFalse(strBuilder4.equals((Object)strBuilder1));
      assertFalse(strBuilder4.equals((Object)strBuilder2));
      assertFalse(strBuilder4.equals((Object)strBuilder0));
      assertNotSame(strBuilder3, strBuilder0);
      assertNotSame(strBuilder3, strBuilder1);
      assertNotSame(strBuilder3, strBuilder2);
      assertSame(strBuilder3, strBuilder4);
      assertSame(strBuilder4, strBuilder3);
      assertNotSame(strBuilder4, strBuilder1);
      assertNotSame(strBuilder4, strBuilder2);
      assertNotSame(strBuilder4, strBuilder0);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      StrBuilder strBuilder0 = new StrBuilder();
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.size());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.append(0.0F);
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(3, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(3, strBuilder0.length());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNullText());
      assertTrue(strBuilder1.isNotEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(3, strBuilder1.length());
      assertEquals(3, strBuilder1.size());
      assertNotNull(strBuilder1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      
      char[] charArray0 = new char[0];
      StrBuilder strBuilder2 = strBuilder0.insert(1, charArray0);
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(3, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(3, strBuilder0.length());
      assertEquals(32, strBuilder2.capacity());
      assertNull(strBuilder2.getNewLineText());
      assertNull(strBuilder2.getNullText());
      assertTrue(strBuilder2.isNotEmpty());
      assertEquals(3, strBuilder2.size());
      assertEquals(3, strBuilder2.length());
      assertFalse(strBuilder2.isEmpty());
      assertNotNull(strBuilder2);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(0);
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertNotNull(strBuilder0);
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'E';
      charArray0[1] = 'U';
      StrBuilder strBuilder1 = strBuilder0.insert(0, charArray0);
      assertEquals(2, strBuilder0.length());
      assertEquals(2, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertTrue(strBuilder1.isNotEmpty());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertEquals(2, strBuilder1.size());
      assertEquals(2, strBuilder1.length());
      assertEquals(32, strBuilder1.capacity());
      assertNotNull(strBuilder1);
      assertArrayEquals(new char[] {'E', 'U'}, charArray0);
      assertEquals(2, charArray0.length);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(0);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertFalse(strBuilder0.isNotEmpty());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.appendPadding(0, 'Q');
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertFalse(strBuilder0.isNotEmpty());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder1.capacity());
      assertTrue(strBuilder1.isEmpty());
      assertFalse(strBuilder1.isNotEmpty());
      assertEquals(0, strBuilder1.length());
      assertEquals(0, strBuilder1.size());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertNotNull(strBuilder1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      
      StrBuilder strBuilder2 = strBuilder1.append((float) 1);
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(3, strBuilder0.length());
      assertEquals(3, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder1.capacity());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(3, strBuilder1.length());
      assertTrue(strBuilder1.isNotEmpty());
      assertEquals(3, strBuilder1.size());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertTrue(strBuilder2.isNotEmpty());
      assertNull(strBuilder2.getNullText());
      assertEquals(3, strBuilder2.length());
      assertEquals(3, strBuilder2.size());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(32, strBuilder2.capacity());
      assertNull(strBuilder2.getNewLineText());
      assertNotNull(strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'Q';
      charArray0[1] = 'Q';
      StrBuilder strBuilder3 = strBuilder0.insert(1, charArray0);
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(5, strBuilder0.length());
      assertEquals(5, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(5, strBuilder3.size());
      assertEquals(5, strBuilder3.length());
      assertNull(strBuilder3.getNewLineText());
      assertFalse(strBuilder3.isEmpty());
      assertNull(strBuilder3.getNullText());
      assertTrue(strBuilder3.isNotEmpty());
      assertEquals(32, strBuilder3.capacity());
      assertNotNull(strBuilder3);
      assertArrayEquals(new char[] {'Q', 'Q'}, charArray0);
      assertEquals(2, charArray0.length);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder2);
      assertSame(strBuilder3, strBuilder0);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      StrBuilder strBuilder0 = new StrBuilder();
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.append((float) 1);
      assertEquals(3, strBuilder0.length());
      assertEquals(3, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder1.getNewLineText());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertEquals(3, strBuilder1.length());
      assertEquals(3, strBuilder1.size());
      assertEquals(32, strBuilder1.capacity());
      assertTrue(strBuilder1.isNotEmpty());
      assertNotNull(strBuilder1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      
      char[] charArray0 = new char[0];
      StrBuilder strBuilder2 = strBuilder0.insert(1, charArray0);
      assertEquals(3, strBuilder0.length());
      assertEquals(3, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder2.capacity());
      assertEquals(3, strBuilder2.length());
      assertNull(strBuilder2.getNullText());
      assertTrue(strBuilder2.isNotEmpty());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(3, strBuilder2.size());
      assertNull(strBuilder2.getNewLineText());
      assertNotNull(strBuilder2);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("");
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.appendNull();
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertTrue(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(0, strBuilder1.size());
      assertFalse(strBuilder1.isNotEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(0, strBuilder1.length());
      assertNotNull(strBuilder1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      
      StringBuffer stringBuffer0 = new StringBuffer(32);
      assertEquals("", stringBuffer0.toString());
      assertEquals(0, stringBuffer0.length());
      assertNotNull(stringBuffer0);
      
      // Undeclared exception!
      try { 
        strBuilder0.appendln(stringBuffer0, 0, 32);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // length must be valid
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertFalse(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.appendSeparator("', has a length less than 2", "', has a length less than 2");
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(27, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(27, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(27, strBuilder1.length());
      assertEquals(27, strBuilder1.size());
      assertFalse(strBuilder1.isEmpty());
      assertTrue(strBuilder1.isNotEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertNotNull(strBuilder1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      
      StrBuilder strBuilder2 = strBuilder0.appendPadding(0, 'Q');
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(27, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(27, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertTrue(strBuilder2.isNotEmpty());
      assertFalse(strBuilder2.isEmpty());
      assertNull(strBuilder2.getNewLineText());
      assertNull(strBuilder2.getNullText());
      assertEquals(32, strBuilder2.capacity());
      assertEquals(27, strBuilder2.size());
      assertEquals(27, strBuilder2.length());
      assertNotNull(strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      
      StrBuilder strBuilder3 = strBuilder2.append((float) 1);
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(30, strBuilder0.length());
      assertEquals(30, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertTrue(strBuilder2.isNotEmpty());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(30, strBuilder2.length());
      assertNull(strBuilder2.getNewLineText());
      assertNull(strBuilder2.getNullText());
      assertEquals(30, strBuilder2.size());
      assertEquals(32, strBuilder2.capacity());
      assertEquals(32, strBuilder3.capacity());
      assertTrue(strBuilder3.isNotEmpty());
      assertNull(strBuilder3.getNewLineText());
      assertFalse(strBuilder3.isEmpty());
      assertEquals(30, strBuilder3.length());
      assertEquals(30, strBuilder3.size());
      assertNull(strBuilder3.getNullText());
      assertNotNull(strBuilder3);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder2, strBuilder3);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder2);
      
      StrBuilder strBuilder4 = strBuilder3.insert(2, (Object) strBuilder1);
      assertEquals(81, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(81, strBuilder0.length());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(162, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(162, strBuilder1.capacity());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(81, strBuilder1.length());
      assertEquals(81, strBuilder1.size());
      assertTrue(strBuilder1.isNotEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertTrue(strBuilder2.isNotEmpty());
      assertFalse(strBuilder2.isEmpty());
      assertNull(strBuilder2.getNewLineText());
      assertNull(strBuilder2.getNullText());
      assertEquals(162, strBuilder2.capacity());
      assertEquals(81, strBuilder2.size());
      assertEquals(81, strBuilder2.length());
      assertTrue(strBuilder3.isNotEmpty());
      assertNull(strBuilder3.getNewLineText());
      assertEquals(162, strBuilder3.capacity());
      assertFalse(strBuilder3.isEmpty());
      assertNull(strBuilder3.getNullText());
      assertEquals(81, strBuilder3.length());
      assertEquals(81, strBuilder3.size());
      assertTrue(strBuilder4.isNotEmpty());
      assertNull(strBuilder4.getNullText());
      assertNull(strBuilder4.getNewLineText());
      assertFalse(strBuilder4.isEmpty());
      assertEquals(81, strBuilder4.size());
      assertEquals(81, strBuilder4.length());
      assertEquals(162, strBuilder4.capacity());
      assertNotNull(strBuilder4);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder1, strBuilder4);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder2, strBuilder3);
      assertSame(strBuilder2, strBuilder4);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder4);
      assertSame(strBuilder3, strBuilder2);
      assertSame(strBuilder4, strBuilder2);
      assertSame(strBuilder4, strBuilder1);
      assertSame(strBuilder4, strBuilder0);
      assertSame(strBuilder4, strBuilder3);
      
      StrBuilder strBuilder5 = new StrBuilder();
      assertNull(strBuilder5.getNullText());
      assertEquals(0, strBuilder5.length());
      assertFalse(strBuilder5.isNotEmpty());
      assertEquals(0, strBuilder5.size());
      assertTrue(strBuilder5.isEmpty());
      assertEquals(32, strBuilder5.capacity());
      assertNull(strBuilder5.getNewLineText());
      assertNotNull(strBuilder5);
      assertFalse(strBuilder5.equals((Object)strBuilder4));
      assertFalse(strBuilder5.equals((Object)strBuilder0));
      assertFalse(strBuilder5.equals((Object)strBuilder3));
      assertFalse(strBuilder5.equals((Object)strBuilder1));
      assertFalse(strBuilder5.equals((Object)strBuilder2));
      
      StrBuilder strBuilder6 = strBuilder2.insert(6, 'y');
      assertEquals(82, strBuilder0.length());
      assertEquals(82, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(162, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertTrue(strBuilder2.isNotEmpty());
      assertFalse(strBuilder2.isEmpty());
      assertNull(strBuilder2.getNewLineText());
      assertNull(strBuilder2.getNullText());
      assertEquals(162, strBuilder2.capacity());
      assertEquals(82, strBuilder2.length());
      assertEquals(82, strBuilder2.size());
      assertEquals(82, strBuilder6.size());
      assertNull(strBuilder6.getNullText());
      assertEquals(82, strBuilder6.length());
      assertTrue(strBuilder6.isNotEmpty());
      assertEquals(162, strBuilder6.capacity());
      assertNull(strBuilder6.getNewLineText());
      assertFalse(strBuilder6.isEmpty());
      assertNotNull(strBuilder6);
      assertFalse(strBuilder0.equals((Object)strBuilder5));
      assertFalse(strBuilder2.equals((Object)strBuilder5));
      assertFalse(strBuilder6.equals((Object)strBuilder5));
      assertSame(strBuilder0, strBuilder6);
      assertSame(strBuilder0, strBuilder3);
      assertNotSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder2, strBuilder3);
      assertSame(strBuilder2, strBuilder4);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder6);
      assertNotSame(strBuilder2, strBuilder5);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder6, strBuilder3);
      assertNotSame(strBuilder6, strBuilder5);
      assertSame(strBuilder6, strBuilder4);
      assertSame(strBuilder6, strBuilder1);
      assertSame(strBuilder6, strBuilder0);
      assertSame(strBuilder6, strBuilder2);
      
      StrBuilder strBuilder7 = new StrBuilder();
      assertTrue(strBuilder7.isEmpty());
      assertFalse(strBuilder7.isNotEmpty());
      assertEquals(0, strBuilder7.length());
      assertEquals(0, strBuilder7.size());
      assertNull(strBuilder7.getNullText());
      assertNull(strBuilder7.getNewLineText());
      assertEquals(32, strBuilder7.capacity());
      assertNotNull(strBuilder7);
      assertFalse(strBuilder7.equals((Object)strBuilder6));
      assertTrue(strBuilder7.equals((Object)strBuilder5));
      assertFalse(strBuilder7.equals((Object)strBuilder3));
      assertFalse(strBuilder7.equals((Object)strBuilder1));
      assertFalse(strBuilder7.equals((Object)strBuilder4));
      assertFalse(strBuilder7.equals((Object)strBuilder0));
      assertFalse(strBuilder7.equals((Object)strBuilder2));
      
      StrBuilder strBuilder8 = strBuilder7.appendln("', has a length less than 2", 1, 2);
      assertEquals(3, strBuilder7.size());
      assertFalse(strBuilder7.isEmpty());
      assertEquals(3, strBuilder7.length());
      assertNull(strBuilder7.getNullText());
      assertTrue(strBuilder7.isNotEmpty());
      assertNull(strBuilder7.getNewLineText());
      assertEquals(32, strBuilder7.capacity());
      assertEquals(3, strBuilder8.length());
      assertEquals(3, strBuilder8.size());
      assertFalse(strBuilder8.isEmpty());
      assertNull(strBuilder8.getNewLineText());
      assertNull(strBuilder8.getNullText());
      assertEquals(32, strBuilder8.capacity());
      assertTrue(strBuilder8.isNotEmpty());
      assertNotNull(strBuilder8);
      assertFalse(strBuilder7.equals((Object)strBuilder6));
      assertFalse(strBuilder7.equals((Object)strBuilder3));
      assertFalse(strBuilder7.equals((Object)strBuilder1));
      assertFalse(strBuilder7.equals((Object)strBuilder4));
      assertFalse(strBuilder7.equals((Object)strBuilder0));
      assertFalse(strBuilder7.equals((Object)strBuilder5));
      assertFalse(strBuilder7.equals((Object)strBuilder2));
      assertFalse(strBuilder8.equals((Object)strBuilder6));
      assertFalse(strBuilder8.equals((Object)strBuilder3));
      assertFalse(strBuilder8.equals((Object)strBuilder1));
      assertFalse(strBuilder8.equals((Object)strBuilder2));
      assertFalse(strBuilder8.equals((Object)strBuilder0));
      assertFalse(strBuilder8.equals((Object)strBuilder5));
      assertFalse(strBuilder8.equals((Object)strBuilder4));
      assertNotSame(strBuilder7, strBuilder6);
      assertNotSame(strBuilder7, strBuilder3);
      assertNotSame(strBuilder7, strBuilder1);
      assertNotSame(strBuilder7, strBuilder4);
      assertSame(strBuilder7, strBuilder8);
      assertNotSame(strBuilder7, strBuilder0);
      assertNotSame(strBuilder7, strBuilder5);
      assertNotSame(strBuilder7, strBuilder2);
      assertNotSame(strBuilder8, strBuilder6);
      assertSame(strBuilder8, strBuilder7);
      assertNotSame(strBuilder8, strBuilder3);
      assertNotSame(strBuilder8, strBuilder1);
      assertNotSame(strBuilder8, strBuilder2);
      assertNotSame(strBuilder8, strBuilder0);
      assertNotSame(strBuilder8, strBuilder5);
      assertNotSame(strBuilder8, strBuilder4);
      
      StringBuffer stringBuffer0 = strBuilder0.toStringBuffer();
      assertEquals(82, strBuilder0.length());
      assertEquals(82, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(162, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(82, stringBuffer0.length());
      assertNotNull(stringBuffer0);
      assertFalse(strBuilder0.equals((Object)strBuilder7));
      assertFalse(strBuilder0.equals((Object)strBuilder5));
      assertFalse(strBuilder0.equals((Object)strBuilder8));
      assertSame(strBuilder0, strBuilder6);
      assertNotSame(strBuilder0, strBuilder7);
      assertSame(strBuilder0, strBuilder3);
      assertNotSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder4);
      assertNotSame(strBuilder0, strBuilder8);
      assertSame(strBuilder0, strBuilder2);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertFalse(strBuilder0.isNotEmpty());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.append((Object) null);
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertFalse(strBuilder0.isNotEmpty());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertEquals(0, strBuilder1.size());
      assertFalse(strBuilder1.isNotEmpty());
      assertTrue(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(32, strBuilder1.capacity());
      assertNotNull(strBuilder1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      
      StrBuilder strBuilder2 = strBuilder0.append("remove() is unsupported");
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(23, strBuilder0.size());
      assertEquals(23, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(23, strBuilder2.size());
      assertEquals(23, strBuilder2.length());
      assertTrue(strBuilder2.isNotEmpty());
      assertNull(strBuilder2.getNullText());
      assertNull(strBuilder2.getNewLineText());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(32, strBuilder2.capacity());
      assertNotNull(strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      
      StrBuilder strBuilder3 = strBuilder0.minimizeCapacity();
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(23, strBuilder0.capacity());
      assertEquals(23, strBuilder0.size());
      assertEquals(23, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(23, strBuilder3.capacity());
      assertTrue(strBuilder3.isNotEmpty());
      assertFalse(strBuilder3.isEmpty());
      assertNull(strBuilder3.getNewLineText());
      assertNull(strBuilder3.getNullText());
      assertEquals(23, strBuilder3.length());
      assertEquals(23, strBuilder3.size());
      assertNotNull(strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder2);
      
      boolean boolean0 = strBuilder1.endsWith("remove() is unsupported");
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(23, strBuilder0.capacity());
      assertEquals(23, strBuilder0.size());
      assertEquals(23, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(23, strBuilder1.capacity());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(23, strBuilder1.size());
      assertEquals(23, strBuilder1.length());
      assertNull(strBuilder1.getNewLineText());
      assertTrue(strBuilder1.isNotEmpty());
      assertTrue(boolean0);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder2);
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'U';
      charArray0[1] = 'r';
      charArray0[2] = '$';
      charArray0[3] = '$';
      char[] charArray1 = strBuilder2.getChars(charArray0);
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(23, strBuilder0.capacity());
      assertEquals(23, strBuilder0.size());
      assertEquals(23, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(23, strBuilder2.size());
      assertEquals(23, strBuilder2.capacity());
      assertEquals(23, strBuilder2.length());
      assertTrue(strBuilder2.isNotEmpty());
      assertNull(strBuilder2.getNullText());
      assertNull(strBuilder2.getNewLineText());
      assertFalse(strBuilder2.isEmpty());
      assertNotNull(charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {'U', 'r', '$', '$'}, charArray0);
      assertEquals(4, charArray0.length);
      assertEquals(23, charArray1.length);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder2, strBuilder3);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      
      StrBuilder strBuilder4 = new StrBuilder();
      assertEquals(0, strBuilder4.size());
      assertFalse(strBuilder4.isNotEmpty());
      assertNull(strBuilder4.getNullText());
      assertNull(strBuilder4.getNewLineText());
      assertEquals(32, strBuilder4.capacity());
      assertTrue(strBuilder4.isEmpty());
      assertEquals(0, strBuilder4.length());
      assertNotNull(strBuilder4);
      assertFalse(strBuilder4.equals((Object)strBuilder1));
      assertFalse(strBuilder4.equals((Object)strBuilder0));
      assertFalse(strBuilder4.equals((Object)strBuilder3));
      assertFalse(strBuilder4.equals((Object)strBuilder2));
      
      StringBuilder stringBuilder0 = strBuilder4.toStringBuilder();
      assertEquals(0, strBuilder4.size());
      assertFalse(strBuilder4.isNotEmpty());
      assertNull(strBuilder4.getNullText());
      assertNull(strBuilder4.getNewLineText());
      assertEquals(32, strBuilder4.capacity());
      assertTrue(strBuilder4.isEmpty());
      assertEquals(0, strBuilder4.length());
      assertEquals("", stringBuilder0.toString());
      assertNotNull(stringBuilder0);
      assertFalse(strBuilder4.equals((Object)strBuilder1));
      assertFalse(strBuilder4.equals((Object)strBuilder0));
      assertFalse(strBuilder4.equals((Object)strBuilder3));
      assertFalse(strBuilder4.equals((Object)strBuilder2));
      assertNotSame(strBuilder4, strBuilder1);
      assertNotSame(strBuilder4, strBuilder0);
      assertNotSame(strBuilder4, strBuilder3);
      assertNotSame(strBuilder4, strBuilder2);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertFalse(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.deleteAll('s');
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertFalse(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertTrue(strBuilder1.isEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(0, strBuilder1.length());
      assertFalse(strBuilder1.isNotEmpty());
      assertEquals(0, strBuilder1.size());
      assertNotNull(strBuilder1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      
      StringBuffer stringBuffer0 = new StringBuffer(strBuilder0);
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertFalse(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, stringBuffer0.length());
      assertEquals("", stringBuffer0.toString());
      assertNotNull(stringBuffer0);
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      StrBuilder strBuilder2 = strBuilder0.append(stringBuffer0);
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertFalse(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, stringBuffer0.length());
      assertEquals("", stringBuffer0.toString());
      assertFalse(strBuilder2.isNotEmpty());
      assertNull(strBuilder2.getNullText());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(32, strBuilder2.capacity());
      assertTrue(strBuilder2.isEmpty());
      assertEquals(0, strBuilder2.size());
      assertEquals(0, strBuilder2.length());
      assertNotNull(strBuilder2);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      
      String string0 = strBuilder1.toString();
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertFalse(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertTrue(strBuilder1.isEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(0, strBuilder1.length());
      assertFalse(strBuilder1.isNotEmpty());
      assertEquals(0, strBuilder1.size());
      assertNotNull(string0);
      assertEquals("", string0);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      
      boolean boolean1 = strBuilder2.contains('1');
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertFalse(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, stringBuffer0.length());
      assertEquals("", stringBuffer0.toString());
      assertFalse(strBuilder2.isNotEmpty());
      assertNull(strBuilder2.getNullText());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(32, strBuilder2.capacity());
      assertTrue(strBuilder2.isEmpty());
      assertEquals(0, strBuilder2.size());
      assertEquals(0, strBuilder2.length());
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isEmpty());
      assertNotNull(strBuilder0);
      
      Integer integer0 = new Integer(136);
      assertNotNull(integer0);
      assertEquals(136, (int)integer0);
      
      Integer integer1 = new Integer(67);
      assertNotNull(integer1);
      assertEquals(67, (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      
      Integer[] integerArray0 = new Integer[2];
      StrBuilder strBuilder1 = strBuilder0.appendAll(integerArray0);
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder1.size());
      assertEquals(0, strBuilder1.length());
      assertFalse(strBuilder1.isNotEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNullText());
      assertTrue(strBuilder1.isEmpty());
      assertNotNull(strBuilder1);
      assertEquals(2, integerArray0.length);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(0);
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertFalse(strBuilder0.isNotEmpty());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.setLength(0);
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertFalse(strBuilder0.isNotEmpty());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertEquals(0, strBuilder1.length());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(32, strBuilder1.capacity());
      assertTrue(strBuilder1.isEmpty());
      assertFalse(strBuilder1.isNotEmpty());
      assertNotNull(strBuilder1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      
      char[] charArray0 = strBuilder0.toCharArray();
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertFalse(strBuilder0.isNotEmpty());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNotNull(charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      assertSame(strBuilder0, strBuilder1);
      
      StrBuilder strBuilder2 = strBuilder1.appendSeparator('R');
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertFalse(strBuilder0.isNotEmpty());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertEquals(0, strBuilder1.length());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(32, strBuilder1.capacity());
      assertTrue(strBuilder1.isEmpty());
      assertFalse(strBuilder1.isNotEmpty());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(32, strBuilder2.capacity());
      assertTrue(strBuilder2.isEmpty());
      assertEquals(0, strBuilder2.length());
      assertEquals(0, strBuilder2.size());
      assertNull(strBuilder2.getNullText());
      assertFalse(strBuilder2.isNotEmpty());
      assertNotNull(strBuilder2);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      
      StrBuilder strBuilder3 = strBuilder0.appendln((double) 'R');
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(5, strBuilder0.length());
      assertEquals(5, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(32, strBuilder3.capacity());
      assertEquals(5, strBuilder3.length());
      assertEquals(5, strBuilder3.size());
      assertNull(strBuilder3.getNewLineText());
      assertNull(strBuilder3.getNullText());
      assertTrue(strBuilder3.isNotEmpty());
      assertFalse(strBuilder3.isEmpty());
      assertNotNull(strBuilder3);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder2);
      assertSame(strBuilder3, strBuilder1);
      
      Class<Integer> class0 = Integer.class;
      ServiceLoader<Integer> serviceLoader0 = ServiceLoader.loadInstalled(class0);
      assertEquals("java.util.ServiceLoader[java.lang.Integer]", serviceLoader0.toString());
      assertNotNull(serviceLoader0);
      
      IntStream intStream0 = strBuilder2.codePoints();
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(5, strBuilder0.length());
      assertEquals(5, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(32, strBuilder1.capacity());
      assertTrue(strBuilder1.isNotEmpty());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(5, strBuilder1.length());
      assertEquals(5, strBuilder1.size());
      assertNull(strBuilder2.getNewLineText());
      assertTrue(strBuilder2.isNotEmpty());
      assertEquals(32, strBuilder2.capacity());
      assertNull(strBuilder2.getNullText());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(5, strBuilder2.size());
      assertEquals(5, strBuilder2.length());
      assertNotNull(intStream0);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder2, strBuilder3);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      
      char[] charArray1 = strBuilder2.getChars(charArray0);
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(5, strBuilder0.length());
      assertEquals(5, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(32, strBuilder1.capacity());
      assertTrue(strBuilder1.isNotEmpty());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(5, strBuilder1.length());
      assertEquals(5, strBuilder1.size());
      assertNull(strBuilder2.getNewLineText());
      assertTrue(strBuilder2.isNotEmpty());
      assertEquals(32, strBuilder2.capacity());
      assertNull(strBuilder2.getNullText());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(5, strBuilder2.size());
      assertEquals(5, strBuilder2.length());
      assertNotNull(charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {'8', '2', '.', '0', '\n'}, charArray1);
      assertEquals(0, charArray0.length);
      assertEquals(5, charArray1.length);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder0);
      assertNotSame(charArray0, charArray1);
      assertSame(strBuilder2, strBuilder3);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertNotSame(charArray1, charArray0);
      
      StrBuilder strBuilder4 = new StrBuilder("u2v>VjVDFK3D2");
      assertEquals(13, strBuilder4.length());
      assertTrue(strBuilder4.isNotEmpty());
      assertEquals(45, strBuilder4.capacity());
      assertNull(strBuilder4.getNewLineText());
      assertNull(strBuilder4.getNullText());
      assertFalse(strBuilder4.isEmpty());
      assertEquals(13, strBuilder4.size());
      assertNotNull(strBuilder4);
      assertFalse(strBuilder4.equals((Object)strBuilder1));
      assertFalse(strBuilder4.equals((Object)strBuilder0));
      assertFalse(strBuilder4.equals((Object)strBuilder3));
      assertFalse(strBuilder4.equals((Object)strBuilder2));
      
      int int0 = strBuilder4.lastIndexOf("", 4);
      assertEquals(13, strBuilder4.length());
      assertTrue(strBuilder4.isNotEmpty());
      assertEquals(45, strBuilder4.capacity());
      assertNull(strBuilder4.getNewLineText());
      assertNull(strBuilder4.getNullText());
      assertFalse(strBuilder4.isEmpty());
      assertEquals(13, strBuilder4.size());
      assertEquals(4, int0);
      assertFalse(strBuilder4.equals((Object)strBuilder1));
      assertFalse(strBuilder4.equals((Object)strBuilder0));
      assertFalse(strBuilder4.equals((Object)strBuilder3));
      assertFalse(strBuilder4.equals((Object)strBuilder2));
      assertNotSame(strBuilder4, strBuilder1);
      assertNotSame(strBuilder4, strBuilder0);
      assertNotSame(strBuilder4, strBuilder3);
      assertNotSame(strBuilder4, strBuilder2);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertFalse(strBuilder0.isNotEmpty());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.appendln(2053L);
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(5, strBuilder0.length());
      assertEquals(5, strBuilder0.size());
      assertEquals(32, strBuilder1.capacity());
      assertTrue(strBuilder1.isNotEmpty());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(5, strBuilder1.size());
      assertEquals(5, strBuilder1.length());
      assertFalse(strBuilder1.isEmpty());
      assertNotNull(strBuilder1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      
      StrBuilder strBuilder2 = new StrBuilder();
      assertNull(strBuilder2.getNullText());
      assertEquals(0, strBuilder2.length());
      assertEquals(0, strBuilder2.size());
      assertFalse(strBuilder2.isNotEmpty());
      assertEquals(32, strBuilder2.capacity());
      assertTrue(strBuilder2.isEmpty());
      assertNull(strBuilder2.getNewLineText());
      assertNotNull(strBuilder2);
      assertFalse(strBuilder2.equals((Object)strBuilder0));
      assertFalse(strBuilder2.equals((Object)strBuilder1));
      
      String string0 = strBuilder2.midString((-752), 0);
      assertNull(strBuilder2.getNullText());
      assertEquals(0, strBuilder2.length());
      assertEquals(0, strBuilder2.size());
      assertFalse(strBuilder2.isNotEmpty());
      assertEquals(32, strBuilder2.capacity());
      assertTrue(strBuilder2.isEmpty());
      assertNull(strBuilder2.getNewLineText());
      assertNotNull(string0);
      assertEquals("", string0);
      assertFalse(strBuilder2.equals((Object)strBuilder0));
      assertFalse(strBuilder2.equals((Object)strBuilder1));
      assertNotSame(strBuilder2, strBuilder0);
      assertNotSame(strBuilder2, strBuilder1);
      
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "3voZo4V>)BxzW,G");
      assertFalse(boolean0);
      
      StrBuilder strBuilder3 = strBuilder1.replace(0, 115, "");
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNullText());
      assertTrue(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(0, strBuilder1.length());
      assertEquals(0, strBuilder1.size());
      assertFalse(strBuilder1.isNotEmpty());
      assertEquals(0, strBuilder3.size());
      assertNull(strBuilder3.getNullText());
      assertEquals(0, strBuilder3.length());
      assertFalse(strBuilder3.isNotEmpty());
      assertTrue(strBuilder3.isEmpty());
      assertEquals(32, strBuilder3.capacity());
      assertNull(strBuilder3.getNewLineText());
      assertNotNull(strBuilder3);
      assertTrue(strBuilder0.equals((Object)strBuilder2));
      assertTrue(strBuilder1.equals((Object)strBuilder2));
      assertTrue(strBuilder3.equals((Object)strBuilder2));
      assertNotSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertNotSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder3, strBuilder1);
      assertNotSame(strBuilder3, strBuilder2);
      assertSame(strBuilder3, strBuilder0);
      
      StrBuilder strBuilder4 = strBuilder3.setNullText("f1mriB[U#");
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertEquals("f1mriB[U#", strBuilder0.getNullText());
      assertTrue(strBuilder0.isEmpty());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertEquals("f1mriB[U#", strBuilder1.getNullText());
      assertTrue(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(0, strBuilder1.length());
      assertEquals(0, strBuilder1.size());
      assertFalse(strBuilder1.isNotEmpty());
      assertEquals(0, strBuilder3.size());
      assertEquals(0, strBuilder3.length());
      assertFalse(strBuilder3.isNotEmpty());
      assertTrue(strBuilder3.isEmpty());
      assertEquals(32, strBuilder3.capacity());
      assertNull(strBuilder3.getNewLineText());
      assertEquals("f1mriB[U#", strBuilder3.getNullText());
      assertEquals(32, strBuilder4.capacity());
      assertEquals("f1mriB[U#", strBuilder4.getNullText());
      assertTrue(strBuilder4.isEmpty());
      assertEquals(0, strBuilder4.length());
      assertEquals(0, strBuilder4.size());
      assertFalse(strBuilder4.isNotEmpty());
      assertNull(strBuilder4.getNewLineText());
      assertNotNull(strBuilder4);
      assertTrue(strBuilder0.equals((Object)strBuilder2));
      assertTrue(strBuilder1.equals((Object)strBuilder2));
      assertTrue(strBuilder3.equals((Object)strBuilder2));
      assertTrue(strBuilder4.equals((Object)strBuilder2));
      assertSame(strBuilder0, strBuilder4);
      assertNotSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertNotSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder4);
      assertSame(strBuilder3, strBuilder4);
      assertSame(strBuilder3, strBuilder1);
      assertNotSame(strBuilder3, strBuilder2);
      assertSame(strBuilder3, strBuilder0);
      assertNotSame(strBuilder4, strBuilder2);
      assertSame(strBuilder4, strBuilder3);
      assertSame(strBuilder4, strBuilder1);
      assertSame(strBuilder4, strBuilder0);
      
      StrBuilder strBuilder5 = strBuilder2.setLength(108);
      assertNull(strBuilder2.getNullText());
      assertTrue(strBuilder2.isNotEmpty());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(108, strBuilder2.length());
      assertEquals(108, strBuilder2.size());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(216, strBuilder2.capacity());
      assertEquals(108, strBuilder5.length());
      assertTrue(strBuilder5.isNotEmpty());
      assertFalse(strBuilder5.isEmpty());
      assertEquals(108, strBuilder5.size());
      assertEquals(216, strBuilder5.capacity());
      assertNull(strBuilder5.getNewLineText());
      assertNull(strBuilder5.getNullText());
      assertNotNull(strBuilder5);
      assertFalse(strBuilder2.equals((Object)strBuilder3));
      assertFalse(strBuilder2.equals((Object)strBuilder0));
      assertFalse(strBuilder2.equals((Object)strBuilder4));
      assertFalse(strBuilder2.equals((Object)strBuilder1));
      assertFalse(strBuilder5.equals((Object)strBuilder0));
      assertFalse(strBuilder5.equals((Object)strBuilder3));
      assertFalse(strBuilder5.equals((Object)strBuilder4));
      assertFalse(strBuilder5.equals((Object)strBuilder1));
      assertNotSame(strBuilder2, strBuilder3);
      assertNotSame(strBuilder2, strBuilder0);
      assertNotSame(strBuilder2, strBuilder4);
      assertSame(strBuilder2, strBuilder5);
      assertNotSame(strBuilder2, strBuilder1);
      assertNotSame(strBuilder5, strBuilder0);
      assertNotSame(strBuilder5, strBuilder3);
      assertNotSame(strBuilder5, strBuilder4);
      assertSame(strBuilder5, strBuilder2);
      assertNotSame(strBuilder5, strBuilder1);
      
      // Undeclared exception!
      try { 
        strBuilder5.insert((-789), '>');
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -789
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("");
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertFalse(strBuilder0.isNotEmpty());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = new StrBuilder("Z}7");
      assertNull(strBuilder1.getNullText());
      assertEquals(35, strBuilder1.capacity());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(3, strBuilder1.size());
      assertEquals(3, strBuilder1.length());
      assertTrue(strBuilder1.isNotEmpty());
      assertNotNull(strBuilder1);
      assertFalse(strBuilder1.equals((Object)strBuilder0));
      
      StrBuilder strBuilder2 = new StrBuilder();
      assertEquals(0, strBuilder2.length());
      assertEquals(0, strBuilder2.size());
      assertNull(strBuilder2.getNullText());
      assertFalse(strBuilder2.isNotEmpty());
      assertTrue(strBuilder2.isEmpty());
      assertEquals(32, strBuilder2.capacity());
      assertNull(strBuilder2.getNewLineText());
      assertNotNull(strBuilder2);
      assertFalse(strBuilder2.equals((Object)strBuilder1));
      assertTrue(strBuilder2.equals((Object)strBuilder0));
      
      StringBuilder stringBuilder0 = new StringBuilder("maxWith cannot be negative");
      assertEquals("maxWith cannot be negative", stringBuilder0.toString());
      assertNotNull(stringBuilder0);
      
      StrBuilder strBuilder3 = strBuilder1.appendFixedWidthPadLeft((Object) stringBuilder0, 32, 't');
      assertNull(strBuilder1.getNullText());
      assertEquals(35, strBuilder1.capacity());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(35, strBuilder1.size());
      assertEquals(35, strBuilder1.length());
      assertTrue(strBuilder1.isNotEmpty());
      assertEquals("maxWith cannot be negative", stringBuilder0.toString());
      assertNull(strBuilder3.getNewLineText());
      assertEquals(35, strBuilder3.capacity());
      assertNull(strBuilder3.getNullText());
      assertTrue(strBuilder3.isNotEmpty());
      assertEquals(35, strBuilder3.length());
      assertEquals(35, strBuilder3.size());
      assertFalse(strBuilder3.isEmpty());
      assertNotNull(strBuilder3);
      assertFalse(strBuilder1.equals((Object)strBuilder2));
      assertFalse(strBuilder1.equals((Object)strBuilder0));
      assertFalse(strBuilder3.equals((Object)strBuilder0));
      assertFalse(strBuilder3.equals((Object)strBuilder2));
      assertSame(strBuilder1, strBuilder3);
      assertNotSame(strBuilder1, strBuilder2);
      assertNotSame(strBuilder1, strBuilder0);
      assertNotSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder1);
      assertNotSame(strBuilder3, strBuilder2);
      
      StrBuilder strBuilder4 = strBuilder2.appendln((-1.0));
      assertNull(strBuilder2.getNullText());
      assertEquals(5, strBuilder2.length());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(32, strBuilder2.capacity());
      assertEquals(5, strBuilder2.size());
      assertNull(strBuilder2.getNewLineText());
      assertTrue(strBuilder2.isNotEmpty());
      assertEquals(32, strBuilder4.capacity());
      assertNull(strBuilder4.getNullText());
      assertTrue(strBuilder4.isNotEmpty());
      assertFalse(strBuilder4.isEmpty());
      assertNull(strBuilder4.getNewLineText());
      assertEquals(5, strBuilder4.length());
      assertEquals(5, strBuilder4.size());
      assertNotNull(strBuilder4);
      assertFalse(strBuilder2.equals((Object)strBuilder3));
      assertFalse(strBuilder2.equals((Object)strBuilder1));
      assertFalse(strBuilder2.equals((Object)strBuilder0));
      assertFalse(strBuilder4.equals((Object)strBuilder0));
      assertFalse(strBuilder4.equals((Object)strBuilder1));
      assertFalse(strBuilder4.equals((Object)strBuilder3));
      assertNotSame(strBuilder2, strBuilder3);
      assertNotSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder4);
      assertNotSame(strBuilder2, strBuilder0);
      assertSame(strBuilder4, strBuilder2);
      assertNotSame(strBuilder4, strBuilder0);
      assertNotSame(strBuilder4, strBuilder1);
      assertNotSame(strBuilder4, strBuilder3);
      
      StrBuilder strBuilder5 = new StrBuilder();
      assertEquals(0, strBuilder5.size());
      assertNull(strBuilder5.getNullText());
      assertEquals(0, strBuilder5.length());
      assertFalse(strBuilder5.isNotEmpty());
      assertNull(strBuilder5.getNewLineText());
      assertEquals(32, strBuilder5.capacity());
      assertTrue(strBuilder5.isEmpty());
      assertNotNull(strBuilder5);
      assertFalse(strBuilder5.equals((Object)strBuilder1));
      assertFalse(strBuilder5.equals((Object)strBuilder4));
      assertFalse(strBuilder5.equals((Object)strBuilder2));
      assertFalse(strBuilder5.equals((Object)strBuilder3));
      assertTrue(strBuilder5.equals((Object)strBuilder0));
      
      StrBuilder strBuilder6 = strBuilder1.appendFixedWidthPadRight(101, 101, 'k');
      assertNull(strBuilder1.getNullText());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(136, strBuilder1.length());
      assertEquals(136, strBuilder1.size());
      assertTrue(strBuilder1.isNotEmpty());
      assertEquals(272, strBuilder1.capacity());
      assertTrue(strBuilder6.isNotEmpty());
      assertFalse(strBuilder6.isEmpty());
      assertEquals(272, strBuilder6.capacity());
      assertEquals(136, strBuilder6.length());
      assertNull(strBuilder6.getNullText());
      assertNull(strBuilder6.getNewLineText());
      assertEquals(136, strBuilder6.size());
      assertNotNull(strBuilder6);
      assertFalse(strBuilder1.equals((Object)strBuilder2));
      assertFalse(strBuilder1.equals((Object)strBuilder5));
      assertFalse(strBuilder1.equals((Object)strBuilder4));
      assertFalse(strBuilder1.equals((Object)strBuilder0));
      assertFalse(strBuilder6.equals((Object)strBuilder0));
      assertFalse(strBuilder6.equals((Object)strBuilder5));
      assertFalse(strBuilder6.equals((Object)strBuilder2));
      assertFalse(strBuilder6.equals((Object)strBuilder4));
      assertSame(strBuilder1, strBuilder3);
      assertNotSame(strBuilder1, strBuilder2);
      assertNotSame(strBuilder1, strBuilder5);
      assertNotSame(strBuilder1, strBuilder4);
      assertSame(strBuilder1, strBuilder6);
      assertNotSame(strBuilder1, strBuilder0);
      assertNotSame(strBuilder6, strBuilder0);
      assertSame(strBuilder6, strBuilder1);
      assertNotSame(strBuilder6, strBuilder5);
      assertNotSame(strBuilder6, strBuilder2);
      assertSame(strBuilder6, strBuilder3);
      assertNotSame(strBuilder6, strBuilder4);
      
      StrBuilder strBuilder7 = strBuilder1.appendFixedWidthPadLeft(3334, 32, 'k');
      assertNull(strBuilder1.getNullText());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(168, strBuilder1.length());
      assertEquals(168, strBuilder1.size());
      assertTrue(strBuilder1.isNotEmpty());
      assertEquals(272, strBuilder1.capacity());
      assertEquals(168, strBuilder7.length());
      assertEquals(272, strBuilder7.capacity());
      assertFalse(strBuilder7.isEmpty());
      assertTrue(strBuilder7.isNotEmpty());
      assertNull(strBuilder7.getNullText());
      assertNull(strBuilder7.getNewLineText());
      assertEquals(168, strBuilder7.size());
      assertNotNull(strBuilder7);
      assertFalse(strBuilder1.equals((Object)strBuilder2));
      assertFalse(strBuilder1.equals((Object)strBuilder5));
      assertFalse(strBuilder1.equals((Object)strBuilder4));
      assertFalse(strBuilder1.equals((Object)strBuilder0));
      assertFalse(strBuilder7.equals((Object)strBuilder4));
      assertFalse(strBuilder7.equals((Object)strBuilder2));
      assertFalse(strBuilder7.equals((Object)strBuilder0));
      assertFalse(strBuilder7.equals((Object)strBuilder5));
      assertSame(strBuilder1, strBuilder7);
      assertSame(strBuilder1, strBuilder3);
      assertNotSame(strBuilder1, strBuilder2);
      assertNotSame(strBuilder1, strBuilder5);
      assertNotSame(strBuilder1, strBuilder4);
      assertSame(strBuilder1, strBuilder6);
      assertNotSame(strBuilder1, strBuilder0);
      assertSame(strBuilder7, strBuilder3);
      assertSame(strBuilder7, strBuilder6);
      assertNotSame(strBuilder7, strBuilder4);
      assertNotSame(strBuilder7, strBuilder2);
      assertNotSame(strBuilder7, strBuilder0);
      assertSame(strBuilder7, strBuilder1);
      assertNotSame(strBuilder7, strBuilder5);
      
      StrBuilder strBuilder8 = new StrBuilder((-2556));
      assertEquals(0, strBuilder8.size());
      assertNull(strBuilder8.getNullText());
      assertEquals(0, strBuilder8.length());
      assertNull(strBuilder8.getNewLineText());
      assertEquals(32, strBuilder8.capacity());
      assertTrue(strBuilder8.isEmpty());
      assertFalse(strBuilder8.isNotEmpty());
      assertNotNull(strBuilder8);
      assertFalse(strBuilder8.equals((Object)strBuilder6));
      assertFalse(strBuilder8.equals((Object)strBuilder1));
      assertFalse(strBuilder8.equals((Object)strBuilder4));
      assertTrue(strBuilder8.equals((Object)strBuilder0));
      assertFalse(strBuilder8.equals((Object)strBuilder7));
      assertFalse(strBuilder8.equals((Object)strBuilder2));
      assertTrue(strBuilder8.equals((Object)strBuilder5));
      assertFalse(strBuilder8.equals((Object)strBuilder3));
      
      StrBuilder strBuilder9 = strBuilder8.append('~');
      assertEquals(1, strBuilder8.length());
      assertEquals(1, strBuilder8.size());
      assertNull(strBuilder8.getNullText());
      assertNull(strBuilder8.getNewLineText());
      assertEquals(32, strBuilder8.capacity());
      assertTrue(strBuilder8.isNotEmpty());
      assertFalse(strBuilder8.isEmpty());
      assertNull(strBuilder9.getNewLineText());
      assertFalse(strBuilder9.isEmpty());
      assertEquals(1, strBuilder9.length());
      assertEquals(1, strBuilder9.size());
      assertNull(strBuilder9.getNullText());
      assertTrue(strBuilder9.isNotEmpty());
      assertEquals(32, strBuilder9.capacity());
      assertNotNull(strBuilder9);
      assertFalse(strBuilder8.equals((Object)strBuilder6));
      assertFalse(strBuilder8.equals((Object)strBuilder1));
      assertFalse(strBuilder8.equals((Object)strBuilder4));
      assertFalse(strBuilder8.equals((Object)strBuilder0));
      assertFalse(strBuilder8.equals((Object)strBuilder5));
      assertFalse(strBuilder8.equals((Object)strBuilder7));
      assertFalse(strBuilder8.equals((Object)strBuilder2));
      assertFalse(strBuilder8.equals((Object)strBuilder3));
      assertFalse(strBuilder9.equals((Object)strBuilder7));
      assertFalse(strBuilder9.equals((Object)strBuilder5));
      assertFalse(strBuilder9.equals((Object)strBuilder3));
      assertFalse(strBuilder9.equals((Object)strBuilder4));
      assertFalse(strBuilder9.equals((Object)strBuilder6));
      assertFalse(strBuilder9.equals((Object)strBuilder1));
      assertFalse(strBuilder9.equals((Object)strBuilder2));
      assertFalse(strBuilder9.equals((Object)strBuilder0));
      assertNotSame(strBuilder8, strBuilder6);
      assertNotSame(strBuilder8, strBuilder1);
      assertNotSame(strBuilder8, strBuilder4);
      assertNotSame(strBuilder8, strBuilder0);
      assertNotSame(strBuilder8, strBuilder5);
      assertNotSame(strBuilder8, strBuilder7);
      assertNotSame(strBuilder8, strBuilder2);
      assertSame(strBuilder8, strBuilder9);
      assertNotSame(strBuilder8, strBuilder3);
      assertNotSame(strBuilder9, strBuilder7);
      assertNotSame(strBuilder9, strBuilder5);
      assertNotSame(strBuilder9, strBuilder3);
      assertSame(strBuilder9, strBuilder8);
      assertNotSame(strBuilder9, strBuilder4);
      assertNotSame(strBuilder9, strBuilder6);
      assertNotSame(strBuilder9, strBuilder1);
      assertNotSame(strBuilder9, strBuilder2);
      assertNotSame(strBuilder9, strBuilder0);
      
      StrBuilder strBuilder10 = strBuilder9.minimizeCapacity();
      assertEquals(1, strBuilder8.length());
      assertEquals(1, strBuilder8.size());
      assertNull(strBuilder8.getNullText());
      assertNull(strBuilder8.getNewLineText());
      assertEquals(1, strBuilder8.capacity());
      assertTrue(strBuilder8.isNotEmpty());
      assertFalse(strBuilder8.isEmpty());
      assertNull(strBuilder9.getNewLineText());
      assertFalse(strBuilder9.isEmpty());
      assertEquals(1, strBuilder9.length());
      assertEquals(1, strBuilder9.size());
      assertNull(strBuilder9.getNullText());
      assertTrue(strBuilder9.isNotEmpty());
      assertEquals(1, strBuilder9.capacity());
      assertNull(strBuilder10.getNewLineText());
      assertTrue(strBuilder10.isNotEmpty());
      assertNull(strBuilder10.getNullText());
      assertEquals(1, strBuilder10.capacity());
      assertEquals(1, strBuilder10.length());
      assertFalse(strBuilder10.isEmpty());
      assertEquals(1, strBuilder10.size());
      assertNotNull(strBuilder10);
      assertFalse(strBuilder8.equals((Object)strBuilder6));
      assertFalse(strBuilder8.equals((Object)strBuilder1));
      assertFalse(strBuilder8.equals((Object)strBuilder4));
      assertFalse(strBuilder8.equals((Object)strBuilder0));
      assertFalse(strBuilder8.equals((Object)strBuilder5));
      assertFalse(strBuilder8.equals((Object)strBuilder7));
      assertFalse(strBuilder8.equals((Object)strBuilder2));
      assertFalse(strBuilder8.equals((Object)strBuilder3));
      assertFalse(strBuilder9.equals((Object)strBuilder7));
      assertFalse(strBuilder9.equals((Object)strBuilder5));
      assertFalse(strBuilder9.equals((Object)strBuilder3));
      assertFalse(strBuilder9.equals((Object)strBuilder4));
      assertFalse(strBuilder9.equals((Object)strBuilder6));
      assertFalse(strBuilder9.equals((Object)strBuilder1));
      assertFalse(strBuilder9.equals((Object)strBuilder2));
      assertFalse(strBuilder9.equals((Object)strBuilder0));
      assertFalse(strBuilder10.equals((Object)strBuilder7));
      assertFalse(strBuilder10.equals((Object)strBuilder2));
      assertFalse(strBuilder10.equals((Object)strBuilder5));
      assertFalse(strBuilder10.equals((Object)strBuilder0));
      assertFalse(strBuilder10.equals((Object)strBuilder3));
      assertFalse(strBuilder10.equals((Object)strBuilder4));
      assertFalse(strBuilder10.equals((Object)strBuilder6));
      assertFalse(strBuilder10.equals((Object)strBuilder1));
      assertNotSame(strBuilder8, strBuilder6);
      assertNotSame(strBuilder8, strBuilder1);
      assertNotSame(strBuilder8, strBuilder4);
      assertNotSame(strBuilder8, strBuilder0);
      assertNotSame(strBuilder8, strBuilder5);
      assertNotSame(strBuilder8, strBuilder7);
      assertNotSame(strBuilder8, strBuilder2);
      assertSame(strBuilder8, strBuilder9);
      assertSame(strBuilder8, strBuilder10);
      assertNotSame(strBuilder8, strBuilder3);
      assertNotSame(strBuilder9, strBuilder7);
      assertNotSame(strBuilder9, strBuilder5);
      assertNotSame(strBuilder9, strBuilder3);
      assertSame(strBuilder9, strBuilder8);
      assertSame(strBuilder9, strBuilder10);
      assertNotSame(strBuilder9, strBuilder4);
      assertNotSame(strBuilder9, strBuilder6);
      assertNotSame(strBuilder9, strBuilder1);
      assertNotSame(strBuilder9, strBuilder2);
      assertNotSame(strBuilder9, strBuilder0);
      assertNotSame(strBuilder10, strBuilder7);
      assertNotSame(strBuilder10, strBuilder2);
      assertNotSame(strBuilder10, strBuilder5);
      assertNotSame(strBuilder10, strBuilder0);
      assertNotSame(strBuilder10, strBuilder3);
      assertNotSame(strBuilder10, strBuilder4);
      assertSame(strBuilder10, strBuilder8);
      assertNotSame(strBuilder10, strBuilder6);
      assertNotSame(strBuilder10, strBuilder1);
      assertSame(strBuilder10, strBuilder9);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-29);
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)32;
      byteArray0[3] = (byte)63;
      byteArray0[4] = (byte)5;
      byteArray0[5] = (byte)2;
      byteArray0[6] = (byte)58;
      byteArray0[7] = (byte)9;
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {(byte) (-29), (byte) (-1), (byte)32, (byte)63, (byte)5, (byte)2, (byte)58, (byte)9}, byteArray0);
      assertEquals(8, byteArray0.length);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(0, strBuilder0.size());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = new StrBuilder();
      assertEquals(0, strBuilder1.size());
      assertFalse(strBuilder1.isNotEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(0, strBuilder1.length());
      assertEquals(32, strBuilder1.capacity());
      assertTrue(strBuilder1.isEmpty());
      assertNotNull(strBuilder1);
      assertTrue(strBuilder1.equals((Object)strBuilder0));
      
      StrBuilder strBuilder2 = strBuilder0.appendSeparator("pJ=oL+Xx!4g.6@p,$h'", "pJ=oL+Xx!4g.6@p,$h'");
      assertEquals(19, strBuilder0.size());
      assertEquals(19, strBuilder0.length());
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(32, strBuilder2.capacity());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(19, strBuilder2.length());
      assertEquals(19, strBuilder2.size());
      assertNull(strBuilder2.getNullText());
      assertTrue(strBuilder2.isNotEmpty());
      assertNotNull(strBuilder2);
      assertFalse(strBuilder0.equals((Object)strBuilder1));
      assertFalse(strBuilder2.equals((Object)strBuilder1));
      assertNotSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertNotSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      
      StrBuilder strBuilder3 = strBuilder1.appendPadding(669, 'Q');
      assertEquals(1338, strBuilder1.capacity());
      assertTrue(strBuilder1.isNotEmpty());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(669, strBuilder1.length());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(669, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertEquals(669, strBuilder3.size());
      assertNull(strBuilder3.getNewLineText());
      assertTrue(strBuilder3.isNotEmpty());
      assertEquals(669, strBuilder3.length());
      assertFalse(strBuilder3.isEmpty());
      assertNull(strBuilder3.getNullText());
      assertEquals(1338, strBuilder3.capacity());
      assertNotNull(strBuilder3);
      assertFalse(strBuilder1.equals((Object)strBuilder2));
      assertFalse(strBuilder1.equals((Object)strBuilder0));
      assertFalse(strBuilder3.equals((Object)strBuilder2));
      assertFalse(strBuilder3.equals((Object)strBuilder0));
      assertNotSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder3);
      assertNotSame(strBuilder1, strBuilder0);
      assertSame(strBuilder3, strBuilder1);
      assertNotSame(strBuilder3, strBuilder2);
      assertNotSame(strBuilder3, strBuilder0);
      
      StrBuilder strBuilder4 = strBuilder0.append(0.0F);
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(22, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(22, strBuilder0.size());
      assertNull(strBuilder4.getNullText());
      assertTrue(strBuilder4.isNotEmpty());
      assertFalse(strBuilder4.isEmpty());
      assertEquals(32, strBuilder4.capacity());
      assertNull(strBuilder4.getNewLineText());
      assertEquals(22, strBuilder4.length());
      assertEquals(22, strBuilder4.size());
      assertNotNull(strBuilder4);
      assertFalse(strBuilder0.equals((Object)strBuilder3));
      assertFalse(strBuilder0.equals((Object)strBuilder1));
      assertFalse(strBuilder4.equals((Object)strBuilder3));
      assertFalse(strBuilder4.equals((Object)strBuilder1));
      assertNotSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder4);
      assertNotSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertNotSame(strBuilder4, strBuilder3);
      assertNotSame(strBuilder4, strBuilder1);
      assertSame(strBuilder4, strBuilder2);
      assertSame(strBuilder4, strBuilder0);
      
      StrBuilder strBuilder5 = strBuilder3.append((char[]) null);
      assertEquals(1338, strBuilder5.capacity());
      assertNull(strBuilder5.getNewLineText());
      assertNull(strBuilder5.getNullText());
      assertTrue(strBuilder5.isNotEmpty());
      assertEquals(669, strBuilder5.length());
      assertEquals(669, strBuilder5.size());
      assertFalse(strBuilder5.isEmpty());
      assertEquals(1338, strBuilder1.capacity());
      assertTrue(strBuilder1.isNotEmpty());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(669, strBuilder1.length());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(669, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertEquals(669, strBuilder3.size());
      assertNull(strBuilder3.getNewLineText());
      assertTrue(strBuilder3.isNotEmpty());
      assertEquals(669, strBuilder3.length());
      assertFalse(strBuilder3.isEmpty());
      assertNull(strBuilder3.getNullText());
      assertEquals(1338, strBuilder3.capacity());
      assertNotNull(strBuilder5);
      assertFalse(strBuilder5.equals((Object)strBuilder0));
      assertFalse(strBuilder5.equals((Object)strBuilder2));
      assertFalse(strBuilder5.equals((Object)strBuilder4));
      assertFalse(strBuilder1.equals((Object)strBuilder2));
      assertFalse(strBuilder1.equals((Object)strBuilder4));
      assertFalse(strBuilder1.equals((Object)strBuilder0));
      assertFalse(strBuilder3.equals((Object)strBuilder4));
      assertFalse(strBuilder3.equals((Object)strBuilder2));
      assertFalse(strBuilder3.equals((Object)strBuilder0));
      assertSame(strBuilder5, strBuilder1);
      assertNotSame(strBuilder5, strBuilder0);
      assertSame(strBuilder5, strBuilder3);
      assertNotSame(strBuilder5, strBuilder2);
      assertNotSame(strBuilder5, strBuilder4);
      assertNotSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder3);
      assertNotSame(strBuilder1, strBuilder4);
      assertSame(strBuilder1, strBuilder5);
      assertNotSame(strBuilder1, strBuilder0);
      assertNotSame(strBuilder3, strBuilder4);
      assertSame(strBuilder3, strBuilder1);
      assertNotSame(strBuilder3, strBuilder2);
      assertSame(strBuilder3, strBuilder5);
      assertNotSame(strBuilder3, strBuilder0);
      
      StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer0 = strBuilder2.new StrBuilderTokenizer();
      assertTrue(strBuilder_StrBuilderTokenizer0.isIgnoreEmptyTokens());
      assertFalse(strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull());
      assertEquals(0, strBuilder_StrBuilderTokenizer0.nextIndex());
      assertEquals((-1), strBuilder_StrBuilderTokenizer0.previousIndex());
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(22, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(22, strBuilder0.size());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(32, strBuilder2.capacity());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(22, strBuilder2.length());
      assertEquals(22, strBuilder2.size());
      assertNull(strBuilder2.getNullText());
      assertTrue(strBuilder2.isNotEmpty());
      assertNotNull(strBuilder_StrBuilderTokenizer0);
      assertFalse(strBuilder0.equals((Object)strBuilder3));
      assertFalse(strBuilder0.equals((Object)strBuilder5));
      assertFalse(strBuilder0.equals((Object)strBuilder1));
      assertFalse(strBuilder2.equals((Object)strBuilder1));
      assertFalse(strBuilder2.equals((Object)strBuilder3));
      assertFalse(strBuilder2.equals((Object)strBuilder5));
      
      String string0 = strBuilder_StrBuilderTokenizer0.getContent();
      assertTrue(strBuilder_StrBuilderTokenizer0.isIgnoreEmptyTokens());
      assertFalse(strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull());
      assertEquals(0, strBuilder_StrBuilderTokenizer0.nextIndex());
      assertEquals((-1), strBuilder_StrBuilderTokenizer0.previousIndex());
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(22, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(22, strBuilder0.size());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(32, strBuilder2.capacity());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(22, strBuilder2.length());
      assertEquals(22, strBuilder2.size());
      assertNull(strBuilder2.getNullText());
      assertTrue(strBuilder2.isNotEmpty());
      assertNotNull(string0);
      assertEquals("pJ=oL+Xx!4g.6@p,$h'0.0", string0);
      assertFalse(strBuilder0.equals((Object)strBuilder3));
      assertFalse(strBuilder0.equals((Object)strBuilder5));
      assertFalse(strBuilder0.equals((Object)strBuilder1));
      assertFalse(strBuilder2.equals((Object)strBuilder1));
      assertFalse(strBuilder2.equals((Object)strBuilder3));
      assertFalse(strBuilder2.equals((Object)strBuilder5));
      assertNotSame(strBuilder0, strBuilder3);
      assertNotSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder4);
      assertNotSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertNotSame(strBuilder2, strBuilder1);
      assertNotSame(strBuilder2, strBuilder3);
      assertSame(strBuilder2, strBuilder4);
      assertNotSame(strBuilder2, strBuilder5);
      assertSame(strBuilder2, strBuilder0);
      
      StrBuilder strBuilder6 = strBuilder1.appendln((-880.24));
      assertNull(strBuilder6.getNullText());
      assertTrue(strBuilder6.isNotEmpty());
      assertNull(strBuilder6.getNewLineText());
      assertEquals(677, strBuilder6.length());
      assertEquals(1338, strBuilder6.capacity());
      assertEquals(677, strBuilder6.size());
      assertFalse(strBuilder6.isEmpty());
      assertEquals(1338, strBuilder1.capacity());
      assertEquals(677, strBuilder1.length());
      assertEquals(677, strBuilder1.size());
      assertTrue(strBuilder1.isNotEmpty());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertNotNull(strBuilder6);
      assertFalse(strBuilder6.equals((Object)strBuilder2));
      assertFalse(strBuilder6.equals((Object)strBuilder0));
      assertFalse(strBuilder6.equals((Object)strBuilder4));
      assertFalse(strBuilder1.equals((Object)strBuilder2));
      assertFalse(strBuilder1.equals((Object)strBuilder4));
      assertFalse(strBuilder1.equals((Object)strBuilder0));
      assertNotSame(strBuilder6, strBuilder2);
      assertSame(strBuilder6, strBuilder3);
      assertNotSame(strBuilder6, strBuilder0);
      assertSame(strBuilder6, strBuilder1);
      assertNotSame(strBuilder6, strBuilder4);
      assertSame(strBuilder6, strBuilder5);
      assertSame(strBuilder1, strBuilder6);
      assertNotSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder3);
      assertNotSame(strBuilder1, strBuilder4);
      assertSame(strBuilder1, strBuilder5);
      assertNotSame(strBuilder1, strBuilder0);
      
      StringBuffer stringBuffer0 = strBuilder1.toStringBuffer();
      assertEquals(677, stringBuffer0.length());
      assertEqualsn", stringBuffer0.toString());
      assertEquals(1338, strBuilder1.capacity());
      assertEquals(677, strBuilder1.length());
      assertEquals(677, strBuilder1.size());
      assertTrue(strBuilder1.isNotEmpty());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertNotNull(stringBuffer0);
      assertFalse(strBuilder1.equals((Object)strBuilder2));
      assertFalse(strBuilder1.equals((Object)strBuilder4));
      assertFalse(strBuilder1.equals((Object)strBuilder0));
      assertSame(strBuilder1, strBuilder6);
      assertNotSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder3);
      assertNotSame(strBuilder1, strBuilder4);
      assertSame(strBuilder1, strBuilder5);
      assertNotSame(strBuilder1, strBuilder0);
      
      strBuilder2.replaceFirst("pJ=oL+Xx!4g.6@p,$h'", "pJ=oL+Xx!4g.6@p,$h'0.0");
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("^idxVa9J(IJ6fm");
      assertEquals(46, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(14, strBuilder0.length());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(14, strBuilder0.size());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = new StrBuilder("^idxVa9J(IJ6fm");
      assertNull(strBuilder1.getNewLineText());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertEquals(14, strBuilder1.size());
      assertEquals(14, strBuilder1.length());
      assertEquals(46, strBuilder1.capacity());
      assertTrue(strBuilder1.isNotEmpty());
      assertNotNull(strBuilder1);
      assertTrue(strBuilder1.equals((Object)strBuilder0));
      
      StrBuilder strBuilder2 = strBuilder1.replaceFirst("^idxVa9J(IJ6fm", "^idxVa9J(IJ6fm");
      assertNull(strBuilder1.getNewLineText());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertEquals(14, strBuilder1.size());
      assertEquals(14, strBuilder1.length());
      assertEquals(46, strBuilder1.capacity());
      assertTrue(strBuilder1.isNotEmpty());
      assertEquals(14, strBuilder2.size());
      assertNull(strBuilder2.getNewLineText());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(14, strBuilder2.length());
      assertTrue(strBuilder2.isNotEmpty());
      assertEquals(46, strBuilder2.capacity());
      assertNull(strBuilder2.getNullText());
      assertNotNull(strBuilder2);
      assertTrue(strBuilder1.equals((Object)strBuilder0));
      assertTrue(strBuilder2.equals((Object)strBuilder0));
      assertNotSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder2);
      assertNotSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(0);
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertNotNull(strBuilder0);
      
      StringBuffer stringBuffer0 = new StringBuffer();
      assertEquals("", stringBuffer0.toString());
      assertEquals(0, stringBuffer0.length());
      assertNotNull(stringBuffer0);
      
      StrBuilder strBuilder1 = strBuilder0.append(stringBuffer0);
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals("", stringBuffer0.toString());
      assertEquals(0, stringBuffer0.length());
      assertEquals(32, strBuilder1.capacity());
      assertTrue(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertFalse(strBuilder1.isNotEmpty());
      assertEquals(0, strBuilder1.length());
      assertEquals(0, strBuilder1.size());
      assertNotNull(strBuilder1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      
      StrBuilder strBuilder2 = strBuilder0.append((CharSequence) stringBuffer0, 0, 0);
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals("", stringBuffer0.toString());
      assertEquals(0, stringBuffer0.length());
      assertEquals(0, strBuilder2.length());
      assertEquals(0, strBuilder2.size());
      assertNull(strBuilder2.getNullText());
      assertFalse(strBuilder2.isNotEmpty());
      assertNull(strBuilder2.getNewLineText());
      assertTrue(strBuilder2.isEmpty());
      assertEquals(32, strBuilder2.capacity());
      assertNotNull(strBuilder2);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) stringBuffer0;
      objectArray0[1] = (Object) stringBuffer0;
      objectArray0[2] = (Object) strBuilder0;
      objectArray0[3] = (Object) strBuilder1;
      objectArray0[4] = (Object) stringBuffer0;
      objectArray0[5] = (Object) strBuilder2;
      objectArray0[6] = (Object) strBuilder1;
      StrBuilder strBuilder3 = strBuilder2.appendWithSeparators(objectArray0, "Gs\"!a>Bl>7](^?");
      assertEquals(700, strBuilder0.length());
      assertEquals(700, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(1400, strBuilder0.capacity());
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals("", stringBuffer0.toString());
      assertEquals(0, stringBuffer0.length());
      assertNull(strBuilder2.getNullText());
      assertFalse(strBuilder2.isEmpty());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(1400, strBuilder2.capacity());
      assertEquals(700, strBuilder2.length());
      assertTrue(strBuilder2.isNotEmpty());
      assertEquals(700, strBuilder2.size());
      assertTrue(strBuilder3.isNotEmpty());
      assertNull(strBuilder3.getNullText());
      assertEquals(700, strBuilder3.size());
      assertNull(strBuilder3.getNewLineText());
      assertEquals(700, strBuilder3.length());
      assertFalse(strBuilder3.isEmpty());
      assertEquals(1400, strBuilder3.capacity());
      assertNotNull(strBuilder3);
      assertEquals(7, objectArray0.length);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder3);
      assertSame(strBuilder3, strBuilder2);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder0);
      
      StrBuilder strBuilder4 = strBuilder2.append('V');
      assertEquals(701, strBuilder0.length());
      assertEquals(701, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(1400, strBuilder0.capacity());
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals("", stringBuffer0.toString());
      assertEquals(0, stringBuffer0.length());
      assertNull(strBuilder2.getNullText());
      assertFalse(strBuilder2.isEmpty());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(1400, strBuilder2.capacity());
      assertTrue(strBuilder2.isNotEmpty());
      assertEquals(701, strBuilder2.length());
      assertEquals(701, strBuilder2.size());
      assertEquals(701, strBuilder4.size());
      assertFalse(strBuilder4.isEmpty());
      assertEquals(1400, strBuilder4.capacity());
      assertTrue(strBuilder4.isNotEmpty());
      assertNull(strBuilder4.getNullText());
      assertEquals(701, strBuilder4.length());
      assertNull(strBuilder4.getNewLineText());
      assertNotNull(strBuilder4);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder3);
      assertSame(strBuilder2, strBuilder4);
      assertSame(strBuilder4, strBuilder2);
      assertSame(strBuilder4, strBuilder0);
      assertSame(strBuilder4, strBuilder1);
      assertSame(strBuilder4, strBuilder3);
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'V';
      charArray0[2] = 'V';
      boolean boolean0 = strBuilder4.endsWith("(4.VvgJ=\"\"<SK&");
      assertEquals(701, strBuilder0.length());
      assertEquals(701, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(1400, strBuilder0.capacity());
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals("", stringBuffer0.toString());
      assertEquals(0, stringBuffer0.length());
      assertNull(strBuilder2.getNullText());
      assertFalse(strBuilder2.isEmpty());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(1400, strBuilder2.capacity());
      assertTrue(strBuilder2.isNotEmpty());
      assertEquals(701, strBuilder2.length());
      assertEquals(701, strBuilder2.size());
      assertEquals(701, strBuilder4.size());
      assertFalse(strBuilder4.isEmpty());
      assertEquals(1400, strBuilder4.capacity());
      assertTrue(strBuilder4.isNotEmpty());
      assertNull(strBuilder4.getNullText());
      assertEquals(701, strBuilder4.length());
      assertNull(strBuilder4.getNewLineText());
      assertFalse(boolean0);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder3);
      assertSame(strBuilder2, strBuilder4);
      assertSame(strBuilder4, strBuilder2);
      assertSame(strBuilder4, strBuilder0);
      assertSame(strBuilder4, strBuilder1);
      assertSame(strBuilder4, strBuilder3);
      
      char[] charArray1 = strBuilder0.getChars(charArray0);
      assertEquals(701, strBuilder0.length());
      assertEquals(701, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(1400, strBuilder0.capacity());
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertNotNull(charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {'V', '\u0000', 'V', '\u0000'}, charArray0);
      assertEquals(701, charArray1.length);
      assertEquals(4, charArray0.length);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder4);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray0, charArray1);
      
      StringBuilder stringBuilder0 = strBuilder0.toStringBuilder();
      assertEquals(701, strBuilder0.length());
      assertEquals(701, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(1400, strBuilder0.capacity());
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals("Gs\"!a>Bl>7](^?Gs\"!a>Bl>7](^?Gs\"!a>Bl>7](^?Gs\"!a>Bl>7](^?Gs\"!a>Bl>7](^?Gs\"!a>Bl>7](^?Gs\"!a>Bl>7](^?Gs\"!a>Bl>7](^?Gs\"!a>Bl>7](^?Gs\"!a>Bl>7](^?Gs\"!a>Bl>7](^?Gs\"!a>Bl>7](^?Gs\"!a>Bl>7](^?Gs\"!a>Bl>7](^?Gs\"!a>Bl>7](^?Gs\"!a>Bl>7](^?Gs\"!a>Bl>7](^?Gs\"!a>Bl>7](^?Gs\"!a>Bl>7](^?Gs\"!a>Bl>7](^?Gs\"!a>Bl>7](^?Gs\"!a>Bl>7](^?Gs\"!a>Bl>7](^?Gs\"!a>Bl>7](^?Gs\"!a>Bl>7](^?Gs\"!a>Bl>7](^?Gs\"!a>Bl>7](^?Gs\"!a>Bl>7](^?Gs\"!a>Bl>7](^?Gs\"!a>Bl>7](^?Gs\"!a>Bl>7](^?Gs\"!a>Bl>7](^?Gs\"!a>Bl>7](^?Gs\"!a>Bl>7](^?Gs\"!a>Bl>7](^?Gs\"!a>Bl>7](^?Gs\"!a>Bl>7](^?Gs\"!a>Bl>7](^?Gs\"!a>Bl>7](^?Gs\"!a>Bl>7](^?Gs\"!a>Bl>7](^?Gs\"!a>Bl>7](^?Gs\"!a>Bl>7](^?Gs\"!a>Bl>7](^?Gs\"!a>Bl>7](^?Gs\"!a>Bl>7](^?Gs\"!a>Bl>7](^?Gs\"!a>Bl>7](^?Gs\"!a>Bl>7](^?Gs\"!a>Bl>7](^?V", stringBuilder0.toString());
      assertNotNull(stringBuilder0);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder4);
      
      StringBuffer stringBuffer1 = new StringBuffer("(4.VvgJ=\"\"<SK&");
      assertEquals("(4.VvgJ=\"\"<SK&", stringBuffer1.toString());
      assertEquals(14, stringBuffer1.length());
      assertNotNull(stringBuffer1);
      assertFalse(stringBuffer1.equals((Object)stringBuffer0));
      
      StrBuilder strBuilder5 = strBuilder0.appendFixedWidthPadLeft((Object) stringBuffer1, 0, 'o');
      assertEquals(701, strBuilder0.length());
      assertEquals(701, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(1400, strBuilder0.capacity());
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals("(4.VvgJ=\"\"<SK&", stringBuffer1.toString());
      assertEquals(14, stringBuffer1.length());
      assertEquals(1400, strBuilder5.capacity());
      assertFalse(strBuilder5.isEmpty());
      assertNull(strBuilder5.getNullText());
      assertNull(strBuilder5.getNewLineText());
      assertEquals(701, strBuilder5.size());
      assertTrue(strBuilder5.isNotEmpty());
      assertEquals(701, strBuilder5.length());
      assertNotNull(strBuilder5);
      assertFalse(stringBuffer1.equals((Object)stringBuffer0));
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder4);
      assertNotSame(stringBuffer1, stringBuffer0);
      assertSame(strBuilder5, strBuilder4);
      assertSame(strBuilder5, strBuilder2);
      assertSame(strBuilder5, strBuilder1);
      assertSame(strBuilder5, strBuilder3);
      assertSame(strBuilder5, strBuilder0);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(0);
      assertEquals(0, strBuilder0.size());
      assertFalse(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.appendPadding(0, 'Q');
      assertEquals(0, strBuilder0.size());
      assertFalse(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder1.getNullText());
      assertEquals(0, strBuilder1.length());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertTrue(strBuilder1.isEmpty());
      assertEquals(0, strBuilder1.size());
      assertFalse(strBuilder1.isNotEmpty());
      assertNotNull(strBuilder1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      
      StrBuilder strBuilder2 = strBuilder1.append((float) 1);
      assertEquals(3, strBuilder0.size());
      assertEquals(3, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertTrue(strBuilder1.isNotEmpty());
      assertNull(strBuilder1.getNullText());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(3, strBuilder1.length());
      assertEquals(3, strBuilder1.size());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(3, strBuilder2.length());
      assertEquals(3, strBuilder2.size());
      assertTrue(strBuilder2.isNotEmpty());
      assertNull(strBuilder2.getNullText());
      assertNull(strBuilder2.getNewLineText());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(32, strBuilder2.capacity());
      assertNotNull(strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      
      StrBuilder strBuilder3 = strBuilder2.appendln((StringBuffer) null);
      assertEquals(4, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(4, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertTrue(strBuilder1.isNotEmpty());
      assertNull(strBuilder1.getNullText());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(4, strBuilder1.size());
      assertEquals(4, strBuilder1.length());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(4, strBuilder2.length());
      assertEquals(4, strBuilder2.size());
      assertTrue(strBuilder2.isNotEmpty());
      assertNull(strBuilder2.getNullText());
      assertNull(strBuilder2.getNewLineText());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(32, strBuilder2.capacity());
      assertEquals(32, strBuilder3.capacity());
      assertTrue(strBuilder3.isNotEmpty());
      assertNull(strBuilder3.getNullText());
      assertNull(strBuilder3.getNewLineText());
      assertFalse(strBuilder3.isEmpty());
      assertEquals(4, strBuilder3.length());
      assertEquals(4, strBuilder3.size());
      assertNotNull(strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder3);
      assertSame(strBuilder3, strBuilder2);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder0);
      
      boolean boolean0 = strBuilder0.contains('Q');
      assertEquals(4, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(4, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertFalse(boolean0);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder3);
      
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
      assertEquals(4, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(4, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertTrue(strBuilder_StrBuilderReader0.ready());
      assertTrue(strBuilder_StrBuilderReader0.markSupported());
      assertNotNull(strBuilder_StrBuilderReader0);
      
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) strBuilder_StrBuilderReader0;
      objectArray0[2] = (Object) strBuilder0;
      boolean boolean1 = strBuilder0.endsWith((String) null);
      assertEquals(4, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(4, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder3);
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'Q';
      charArray0[1] = 'Q';
      char[] charArray1 = strBuilder1.getChars(charArray0);
      assertEquals(4, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(4, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertTrue(strBuilder1.isNotEmpty());
      assertNull(strBuilder1.getNullText());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(4, strBuilder1.size());
      assertEquals(4, strBuilder1.length());
      assertFalse(strBuilder1.isEmpty());
      assertNotNull(charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {'Q', 'Q'}, charArray0);
      assertArrayEquals(new char[] {'1', '.', '0', '\n'}, charArray1);
      assertEquals(2, charArray0.length);
      assertEquals(4, charArray1.length);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder0);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      
      // Undeclared exception!
      try { 
        CharBuffer.wrap((CharSequence) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.length());
      assertNotNull(strBuilder0);
      
      boolean boolean0 = strBuilder0.endsWith((String) null);
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.length());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(0);
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.length());
      assertNotNull(strBuilder0);
      
      String string0 = strBuilder0.build();
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.length());
      assertNotNull(string0);
      assertEquals("", string0);
      
      StrBuilder strBuilder1 = strBuilder0.appendln("");
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(1, strBuilder0.length());
      assertEquals(1, strBuilder0.size());
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertTrue(strBuilder1.isNotEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(1, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(1, strBuilder1.length());
      assertFalse(strBuilder1.isEmpty());
      assertNotNull(strBuilder1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      
      StrBuilder strBuilder2 = strBuilder1.appendSeparator('%', '3');
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(2, strBuilder0.length());
      assertEquals(2, strBuilder0.size());
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertTrue(strBuilder1.isNotEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(2, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(2, strBuilder1.size());
      assertEquals(2, strBuilder2.size());
      assertEquals(2, strBuilder2.length());
      assertEquals(32, strBuilder2.capacity());
      assertTrue(strBuilder2.isNotEmpty());
      assertFalse(strBuilder2.isEmpty());
      assertNull(strBuilder2.getNewLineText());
      assertNull(strBuilder2.getNullText());
      assertNotNull(strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(2, strBuilder0.length());
      assertEquals(2, strBuilder0.size());
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertTrue(strBuilder_StrBuilderReader0.markSupported());
      assertTrue(strBuilder_StrBuilderReader0.ready());
      assertNotNull(strBuilder_StrBuilderReader0);
      
      char[] charArray0 = new char[4];
      charArray0[0] = '{';
      charArray0[2] = '3';
      charArray0[3] = '%';
      int int0 = strBuilder_StrBuilderReader0.read(charArray0);
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(2, strBuilder0.length());
      assertEquals(2, strBuilder0.size());
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertTrue(strBuilder_StrBuilderReader0.markSupported());
      assertFalse(strBuilder_StrBuilderReader0.ready());
      assertEquals(2, int0);
      assertArrayEquals(new char[] {'\n', '%', '3', '%'}, charArray0);
      assertEquals(4, charArray0.length);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      
      StringWriter stringWriter0 = new StringWriter();
      assertEquals("", stringWriter0.toString());
      assertNotNull(stringWriter0);
      
      StrBuilder strBuilder3 = new StrBuilder();
      assertEquals(0, strBuilder3.size());
      assertFalse(strBuilder3.isNotEmpty());
      assertNull(strBuilder3.getNewLineText());
      assertNull(strBuilder3.getNullText());
      assertEquals(32, strBuilder3.capacity());
      assertTrue(strBuilder3.isEmpty());
      assertEquals(0, strBuilder3.length());
      assertNotNull(strBuilder3);
      assertFalse(strBuilder3.equals((Object)strBuilder0));
      assertFalse(strBuilder3.equals((Object)strBuilder2));
      assertFalse(strBuilder3.equals((Object)strBuilder1));
      
      StrBuilder strBuilder4 = strBuilder3.deleteAll('Q');
      assertEquals(0, strBuilder3.size());
      assertFalse(strBuilder3.isNotEmpty());
      assertNull(strBuilder3.getNewLineText());
      assertNull(strBuilder3.getNullText());
      assertEquals(32, strBuilder3.capacity());
      assertTrue(strBuilder3.isEmpty());
      assertEquals(0, strBuilder3.length());
      assertFalse(strBuilder4.isNotEmpty());
      assertEquals(0, strBuilder4.length());
      assertEquals(0, strBuilder4.size());
      assertNull(strBuilder4.getNullText());
      assertNull(strBuilder4.getNewLineText());
      assertEquals(32, strBuilder4.capacity());
      assertTrue(strBuilder4.isEmpty());
      assertNotNull(strBuilder4);
      assertFalse(strBuilder3.equals((Object)strBuilder0));
      assertFalse(strBuilder3.equals((Object)strBuilder2));
      assertFalse(strBuilder3.equals((Object)strBuilder1));
      assertFalse(strBuilder4.equals((Object)strBuilder1));
      assertFalse(strBuilder4.equals((Object)strBuilder2));
      assertFalse(strBuilder4.equals((Object)strBuilder0));
      assertNotSame(strBuilder3, strBuilder0);
      assertNotSame(strBuilder3, strBuilder2);
      assertNotSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder4);
      assertNotSame(strBuilder4, strBuilder1);
      assertNotSame(strBuilder4, strBuilder2);
      assertNotSame(strBuilder4, strBuilder0);
      assertSame(strBuilder4, strBuilder3);
      
      StrBuilder strBuilder5 = strBuilder4.appendln((Object) "");
      assertEquals(1, strBuilder3.size());
      assertEquals(1, strBuilder3.length());
      assertNull(strBuilder3.getNewLineText());
      assertNull(strBuilder3.getNullText());
      assertEquals(32, strBuilder3.capacity());
      assertTrue(strBuilder3.isNotEmpty());
      assertFalse(strBuilder3.isEmpty());
      assertFalse(strBuilder4.isEmpty());
      assertEquals(1, strBuilder4.size());
      assertNull(strBuilder4.getNullText());
      assertEquals(1, strBuilder4.length());
      assertNull(strBuilder4.getNewLineText());
      assertTrue(strBuilder4.isNotEmpty());
      assertEquals(32, strBuilder4.capacity());
      assertEquals(1, strBuilder5.length());
      assertNull(strBuilder5.getNullText());
      assertEquals(1, strBuilder5.size());
      assertTrue(strBuilder5.isNotEmpty());
      assertEquals(32, strBuilder5.capacity());
      assertNull(strBuilder5.getNewLineText());
      assertFalse(strBuilder5.isEmpty());
      assertNotNull(strBuilder5);
      assertFalse(strBuilder3.equals((Object)strBuilder0));
      assertFalse(strBuilder3.equals((Object)strBuilder2));
      assertFalse(strBuilder3.equals((Object)strBuilder1));
      assertFalse(strBuilder4.equals((Object)strBuilder1));
      assertFalse(strBuilder4.equals((Object)strBuilder2));
      assertFalse(strBuilder4.equals((Object)strBuilder0));
      assertFalse(strBuilder5.equals((Object)strBuilder1));
      assertFalse(strBuilder5.equals((Object)strBuilder2));
      assertFalse(strBuilder5.equals((Object)strBuilder0));
      assertNotSame(strBuilder3, strBuilder0);
      assertNotSame(strBuilder3, strBuilder2);
      assertNotSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder4);
      assertSame(strBuilder3, strBuilder5);
      assertNotSame(strBuilder4, strBuilder1);
      assertNotSame(strBuilder4, strBuilder2);
      assertNotSame(strBuilder4, strBuilder0);
      assertSame(strBuilder4, strBuilder3);
      assertSame(strBuilder4, strBuilder5);
      assertSame(strBuilder5, strBuilder4);
      assertNotSame(strBuilder5, strBuilder1);
      assertNotSame(strBuilder5, strBuilder2);
      assertSame(strBuilder5, strBuilder3);
      assertNotSame(strBuilder5, strBuilder0);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNotNull(strBuilder0);
      
      boolean boolean0 = strBuilder0.isNotEmpty();
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(boolean0);
      
      int int0 = 1970;
      Integer integer0 = new Integer(1970);
      assertNotNull(integer0);
      assertEquals(1970, (int)integer0);
      assertTrue(integer0.equals((Object)int0));
      
      StringWriter stringWriter0 = new StringWriter(1970);
      assertEquals("", stringWriter0.toString());
      assertNotNull(stringWriter0);
      
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      assertEquals("", stringWriter0.toString());
      assertEquals("", stringBuffer0.toString());
      assertEquals(0, stringBuffer0.length());
      assertNotNull(stringBuffer0);
      
      StrBuilder strBuilder1 = new StrBuilder(1970);
      assertFalse(strBuilder1.isNotEmpty());
      assertEquals(0, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertEquals(0, strBuilder1.length());
      assertEquals(1970, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertTrue(strBuilder1.isEmpty());
      assertNotNull(strBuilder1);
      assertTrue(strBuilder1.equals((Object)strBuilder0));
      
      // Undeclared exception!
      try { 
        strBuilder1.append(stringBuffer0, (-4114), 0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // startIndex must be valid
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("dN");
      assertNull(strBuilder0.getNewLineText());
      assertEquals(34, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(2, strBuilder0.length());
      assertEquals(2, strBuilder0.size());
      assertNotNull(strBuilder0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      StrBuilder strBuilder1 = new StrBuilder("dN");
      assertTrue(strBuilder1.isNotEmpty());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(34, strBuilder1.capacity());
      assertEquals(2, strBuilder1.length());
      assertEquals(2, strBuilder1.size());
      assertNotNull(strBuilder1);
      assertTrue(strBuilder1.equals((Object)strBuilder0));
      
      StringBuffer stringBuffer0 = new StringBuffer("dN");
      assertEquals(2, stringBuffer0.length());
      assertEquals("dN", stringBuffer0.toString());
      assertNotNull(stringBuffer0);
      
      StrBuilder strBuilder2 = strBuilder1.deleteFirst("dN");
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(34, strBuilder1.capacity());
      assertEquals(0, strBuilder1.length());
      assertTrue(strBuilder1.isEmpty());
      assertEquals(0, strBuilder1.size());
      assertFalse(strBuilder1.isNotEmpty());
      assertTrue(strBuilder2.isEmpty());
      assertFalse(strBuilder2.isNotEmpty());
      assertNull(strBuilder2.getNullText());
      assertEquals(0, strBuilder2.length());
      assertEquals(0, strBuilder2.size());
      assertEquals(34, strBuilder2.capacity());
      assertNull(strBuilder2.getNewLineText());
      assertNotNull(strBuilder2);
      assertFalse(strBuilder1.equals((Object)strBuilder0));
      assertFalse(strBuilder2.equals((Object)strBuilder0));
      assertNotSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder2, strBuilder1);
      assertNotSame(strBuilder2, strBuilder0);
      
      StrBuilder strBuilder3 = strBuilder1.appendln(368.1250270750549);
      assertTrue(strBuilder1.isNotEmpty());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(34, strBuilder1.capacity());
      assertEquals(18, strBuilder1.length());
      assertEquals(18, strBuilder1.size());
      assertNull(strBuilder3.getNullText());
      assertEquals(18, strBuilder3.size());
      assertFalse(strBuilder3.isEmpty());
      assertEquals(18, strBuilder3.length());
      assertEquals(34, strBuilder3.capacity());
      assertTrue(strBuilder3.isNotEmpty());
      assertNull(strBuilder3.getNewLineText());
      assertNotNull(strBuilder3);
      assertFalse(strBuilder1.equals((Object)strBuilder0));
      assertFalse(strBuilder3.equals((Object)strBuilder0));
      assertNotSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder3, strBuilder2);
      assertSame(strBuilder3, strBuilder1);
      assertNotSame(strBuilder3, strBuilder0);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      int int0 = 0;
      StrBuilder strBuilder0 = new StrBuilder(0);
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.appendSeparator("', has a length less than 2", "', has a length less than 2");
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(27, strBuilder0.length());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(27, strBuilder0.size());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(27, strBuilder1.length());
      assertEquals(27, strBuilder1.size());
      assertTrue(strBuilder1.isNotEmpty());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertFalse(strBuilder1.isEmpty());
      assertNotNull(strBuilder1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      
      char char0 = 'Q';
      char char1 = '%';
      char char2 = '3';
      char char3 = 'O';
      StrBuilder strBuilder2 = strBuilder0.appendSeparator('O', 'O');
      assertNull(strBuilder0.getNewLineText());
      assertEquals(28, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(28, strBuilder0.length());
      assertEquals(32, strBuilder2.capacity());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(28, strBuilder2.length());
      assertEquals(28, strBuilder2.size());
      assertTrue(strBuilder2.isNotEmpty());
      assertNull(strBuilder2.getNullText());
      assertFalse(strBuilder2.isEmpty());
      assertNotNull(strBuilder2);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) "Invalid startIndex: ";
      objectArray0[1] = (Object) strBuilder2;
      objectArray0[2] = (Object) strBuilder2;
      StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer0 = strBuilder2.new StrBuilderTokenizer();
      assertNull(strBuilder0.getNewLineText());
      assertEquals(28, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(28, strBuilder0.length());
      assertEquals(32, strBuilder2.capacity());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(28, strBuilder2.length());
      assertEquals(28, strBuilder2.size());
      assertTrue(strBuilder2.isNotEmpty());
      assertNull(strBuilder2.getNullText());
      assertFalse(strBuilder2.isEmpty());
      assertFalse(strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull());
      assertEquals((-1), strBuilder_StrBuilderTokenizer0.previousIndex());
      assertEquals(0, strBuilder_StrBuilderTokenizer0.nextIndex());
      assertTrue(strBuilder_StrBuilderTokenizer0.isIgnoreEmptyTokens());
      assertNotNull(strBuilder_StrBuilderTokenizer0);
      
      StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer1 = (StrBuilder.StrBuilderTokenizer)strBuilder_StrBuilderTokenizer0.cloneReset();
      assertNull(strBuilder0.getNewLineText());
      assertEquals(28, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(28, strBuilder0.length());
      assertEquals(32, strBuilder2.capacity());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(28, strBuilder2.length());
      assertEquals(28, strBuilder2.size());
      assertTrue(strBuilder2.isNotEmpty());
      assertNull(strBuilder2.getNullText());
      assertFalse(strBuilder2.isEmpty());
      assertFalse(strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull());
      assertEquals((-1), strBuilder_StrBuilderTokenizer0.previousIndex());
      assertEquals(0, strBuilder_StrBuilderTokenizer0.nextIndex());
      assertTrue(strBuilder_StrBuilderTokenizer0.isIgnoreEmptyTokens());
      assertEquals(0, strBuilder_StrBuilderTokenizer1.nextIndex());
      assertTrue(strBuilder_StrBuilderTokenizer1.isIgnoreEmptyTokens());
      assertEquals((-1), strBuilder_StrBuilderTokenizer1.previousIndex());
      assertFalse(strBuilder_StrBuilderTokenizer1.isEmptyTokenAsNull());
      assertNotNull(strBuilder_StrBuilderTokenizer1);
      assertFalse(strBuilder_StrBuilderTokenizer1.equals((Object)strBuilder_StrBuilderTokenizer0));
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertNotSame(strBuilder_StrBuilderTokenizer0, strBuilder_StrBuilderTokenizer1);
      assertNotSame(strBuilder_StrBuilderTokenizer1, strBuilder_StrBuilderTokenizer0);
      
      objectArray0[3] = (Object) strBuilder_StrBuilderTokenizer1;
      StrBuilder strBuilder3 = strBuilder0.append("Invalid startIndex: ", objectArray0);
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(48, strBuilder0.length());
      assertEquals(48, strBuilder0.size());
      assertEquals(96, strBuilder0.capacity());
      assertTrue(strBuilder0.isNotEmpty());
      assertTrue(strBuilder3.isNotEmpty());
      assertFalse(strBuilder3.isEmpty());
      assertNull(strBuilder3.getNewLineText());
      assertNull(strBuilder3.getNullText());
      assertEquals(48, strBuilder3.length());
      assertEquals(48, strBuilder3.size());
      assertEquals(96, strBuilder3.capacity());
      assertNotNull(strBuilder3);
      assertEquals(4, objectArray0.length);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder2);
      assertSame(strBuilder3, strBuilder1);
      
      String string0 = strBuilder3.toString();
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(48, strBuilder0.length());
      assertEquals(48, strBuilder0.size());
      assertEquals(96, strBuilder0.capacity());
      assertTrue(strBuilder0.isNotEmpty());
      assertTrue(strBuilder3.isNotEmpty());
      assertFalse(strBuilder3.isEmpty());
      assertNull(strBuilder3.getNewLineText());
      assertNull(strBuilder3.getNullText());
      assertEquals(48, strBuilder3.length());
      assertEquals(48, strBuilder3.size());
      assertEquals(96, strBuilder3.capacity());
      assertNotNull(string0);
      assertEquals("', has a length less than 2OInvalid startIndex: ", string0);
      assertEquals(4, objectArray0.length);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder2);
      assertSame(strBuilder3, strBuilder1);
      
      String string1 = "";
      char[] charArray0 = new char[2];
      charArray0[0] = 'R';
      charArray0[1] = '6';
      // Undeclared exception!
      try { 
        strBuilder1.insert(101, charArray0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 101
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertFalse(strBuilder0.isNotEmpty());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNotNull(strBuilder0);
      
      int int0 = (-2393);
      char char0 = 'y';
      StrBuilder strBuilder1 = strBuilder0.appendFixedWidthPadRight(15, (-2393), 'y');
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertFalse(strBuilder0.isNotEmpty());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertFalse(strBuilder1.isNotEmpty());
      assertEquals(0, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertEquals(0, strBuilder1.length());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertTrue(strBuilder1.isEmpty());
      assertNotNull(strBuilder1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      
      StrBuilder strBuilder2 = strBuilder1.appendFixedWidthPadLeft(2307, 2307, '+');
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(4614, strBuilder0.capacity());
      assertEquals(2307, strBuilder0.length());
      assertEquals(2307, strBuilder0.size());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(4614, strBuilder1.capacity());
      assertEquals(2307, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(2307, strBuilder1.size());
      assertNull(strBuilder1.getNewLineText());
      assertTrue(strBuilder1.isNotEmpty());
      assertEquals(2307, strBuilder2.length());
      assertEquals(2307, strBuilder2.size());
      assertEquals(4614, strBuilder2.capacity());
      assertNull(strBuilder2.getNullText());
      assertNull(strBuilder2.getNewLineText());
      assertTrue(strBuilder2.isNotEmpty());
      assertFalse(strBuilder2.isEmpty());
      assertNotNull(strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      
      StrBuilder strBuilder3 = new StrBuilder((-2568));
      assertTrue(strBuilder3.isEmpty());
      assertNull(strBuilder3.getNullText());
      assertNull(strBuilder3.getNewLineText());
      assertEquals(32, strBuilder3.capacity());
      assertFalse(strBuilder3.isNotEmpty());
      assertEquals(0, strBuilder3.length());
      assertEquals(0, strBuilder3.size());
      assertNotNull(strBuilder3);
      assertFalse(strBuilder3.equals((Object)strBuilder0));
      assertFalse(strBuilder3.equals((Object)strBuilder1));
      assertFalse(strBuilder3.equals((Object)strBuilder2));
      
      StrBuilder strBuilder4 = strBuilder2.append('_');
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(4614, strBuilder0.capacity());
      assertEquals(2308, strBuilder0.length());
      assertEquals(2308, strBuilder0.size());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(4614, strBuilder1.capacity());
      assertNull(strBuilder1.getNullText());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(2308, strBuilder1.length());
      assertEquals(2308, strBuilder1.size());
      assertNull(strBuilder1.getNewLineText());
      assertTrue(strBuilder1.isNotEmpty());
      assertEquals(4614, strBuilder2.capacity());
      assertEquals(2308, strBuilder2.size());
      assertNull(strBuilder2.getNullText());
      assertNull(strBuilder2.getNewLineText());
      assertTrue(strBuilder2.isNotEmpty());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(2308, strBuilder2.length());
      assertEquals(4614, strBuilder4.capacity());
      assertNull(strBuilder4.getNullText());
      assertFalse(strBuilder4.isEmpty());
      assertEquals(2308, strBuilder4.length());
      assertEquals(2308, strBuilder4.size());
      assertNull(strBuilder4.getNewLineText());
      assertTrue(strBuilder4.isNotEmpty());
      assertNotNull(strBuilder4);
      assertFalse(strBuilder0.equals((Object)strBuilder3));
      assertFalse(strBuilder1.equals((Object)strBuilder3));
      assertFalse(strBuilder2.equals((Object)strBuilder3));
      assertFalse(strBuilder4.equals((Object)strBuilder3));
      assertSame(strBuilder0, strBuilder4);
      assertNotSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder1, strBuilder2);
      assertNotSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder4);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder4);
      assertSame(strBuilder2, strBuilder0);
      assertNotSame(strBuilder2, strBuilder3);
      assertSame(strBuilder4, strBuilder2);
      assertNotSame(strBuilder4, strBuilder3);
      assertSame(strBuilder4, strBuilder0);
      assertSame(strBuilder4, strBuilder1);
      
      StrBuilder strBuilder5 = strBuilder0.append(strBuilder4, 15, 1993);
      assertNull(strBuilder0.getNullText());
      assertEquals(4301, strBuilder0.size());
      assertEquals(4301, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(4614, strBuilder0.capacity());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(4614, strBuilder1.capacity());
      assertNull(strBuilder1.getNullText());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(4301, strBuilder1.length());
      assertTrue(strBuilder1.isNotEmpty());
      assertEquals(4301, strBuilder1.size());
      assertEquals(4614, strBuilder2.capacity());
      assertNull(strBuilder2.getNullText());
      assertEquals(4301, strBuilder2.size());
      assertEquals(4301, strBuilder2.length());
      assertNull(strBuilder2.getNewLineText());
      assertTrue(strBuilder2.isNotEmpty());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(4614, strBuilder4.capacity());
      assertNull(strBuilder4.getNullText());
      assertFalse(strBuilder4.isEmpty());
      assertNull(strBuilder4.getNewLineText());
      assertEquals(4301, strBuilder4.length());
      assertTrue(strBuilder4.isNotEmpty());
      assertEquals(4301, strBuilder4.size());
      assertEquals(4301, strBuilder5.length());
      assertTrue(strBuilder5.isNotEmpty());
      assertEquals(4301, strBuilder5.size());
      assertNull(strBuilder5.getNewLineText());
      assertNull(strBuilder5.getNullText());
      assertFalse(strBuilder5.isEmpty());
      assertEquals(4614, strBuilder5.capacity());
      assertNotNull(strBuilder5);
      assertFalse(strBuilder0.equals((Object)strBuilder3));
      assertFalse(strBuilder1.equals((Object)strBuilder3));
      assertFalse(strBuilder2.equals((Object)strBuilder3));
      assertFalse(strBuilder4.equals((Object)strBuilder3));
      assertFalse(strBuilder5.equals((Object)strBuilder3));
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder5);
      assertNotSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder1, strBuilder2);
      assertNotSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder5);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder4);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder4);
      assertSame(strBuilder2, strBuilder5);
      assertSame(strBuilder2, strBuilder0);
      assertNotSame(strBuilder2, strBuilder3);
      assertSame(strBuilder4, strBuilder2);
      assertNotSame(strBuilder4, strBuilder3);
      assertSame(strBuilder4, strBuilder5);
      assertSame(strBuilder4, strBuilder0);
      assertSame(strBuilder4, strBuilder1);
      assertSame(strBuilder5, strBuilder4);
      assertSame(strBuilder5, strBuilder2);
      assertNotSame(strBuilder5, strBuilder3);
      assertSame(strBuilder5, strBuilder1);
      assertSame(strBuilder5, strBuilder0);
      
      StringBuilder stringBuilder0 = new StringBuilder("c=#s,Nf (H");
      assertEquals("c=#s,Nf (H", stringBuilder0.toString());
      assertNotNull(stringBuilder0);
      
      StringBuilder stringBuilder1 = stringBuilder0.append('c');
      assertEquals("c=#s,Nf (Hc", stringBuilder0.toString());
      assertEquals("c=#s,Nf (Hc", stringBuilder1.toString());
      assertNotNull(stringBuilder1);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder1, stringBuilder0);
      
      char[] charArray0 = null;
      // Undeclared exception!
      try { 
        stringBuilder1.append((char[]) null, (-3470), (-2393));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("h");
      assertEquals(1, strBuilder0.size());
      assertEquals(1, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(33, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNullText());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.appendNull();
      assertEquals(1, strBuilder0.size());
      assertEquals(1, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(33, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(1, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertEquals(1, strBuilder1.length());
      assertTrue(strBuilder1.isNotEmpty());
      assertEquals(33, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertFalse(strBuilder1.isEmpty());
      assertNotNull(strBuilder1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      
      boolean boolean0 = strBuilder0.endsWith("h");
      assertEquals(1, strBuilder0.size());
      assertEquals(1, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(33, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNullText());
      assertTrue(boolean0);
      assertSame(strBuilder0, strBuilder1);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("^idxVa9J(IJ6fm");
      assertEquals(46, strBuilder0.capacity());
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(14, strBuilder0.length());
      assertEquals(14, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertNotNull(strBuilder0);
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'E';
      StrBuilder strBuilder1 = new StrBuilder("^idxVa9J(IJ6fm");
      assertEquals(46, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(14, strBuilder1.length());
      assertTrue(strBuilder1.isNotEmpty());
      assertNull(strBuilder1.getNullText());
      assertEquals(14, strBuilder1.size());
      assertFalse(strBuilder1.isEmpty());
      assertNotNull(strBuilder1);
      assertTrue(strBuilder1.equals((Object)strBuilder0));
      
      char[] charArray1 = strBuilder0.getChars(charArray0);
      assertEquals(46, strBuilder0.capacity());
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(14, strBuilder0.length());
      assertEquals(14, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertNotNull(charArray1);
      assertTrue(strBuilder0.equals((Object)strBuilder1));
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {'E', '\u0000'}, charArray0);
      assertEquals(2, charArray0.length);
      assertEquals(14, charArray1.length);
      assertNotSame(strBuilder0, strBuilder1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      
      StrBuilder strBuilder2 = strBuilder0.appendNewLine();
      assertEquals(46, strBuilder0.capacity());
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(15, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(15, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder2.getNullText());
      assertEquals(15, strBuilder2.length());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(15, strBuilder2.size());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(46, strBuilder2.capacity());
      assertTrue(strBuilder2.isNotEmpty());
      assertNotNull(strBuilder2);
      assertFalse(strBuilder0.equals((Object)strBuilder1));
      assertFalse(strBuilder2.equals((Object)strBuilder1));
      assertNotSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder2, strBuilder0);
      assertNotSame(strBuilder2, strBuilder1);
      
      Integer integer0 = new Integer((-830));
      assertNotNull(integer0);
      assertEquals((-830), (int)integer0);
      
      Integer integer1 = new Integer((-830));
      assertNotNull(integer1);
      assertEquals((-830), (int)integer1);
      assertTrue(integer1.equals((Object)integer0));
      
      boolean boolean0 = strBuilder0.endsWith("if7HBxo");
      assertEquals(46, strBuilder0.capacity());
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(15, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(15, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(boolean0);
      assertFalse(strBuilder0.equals((Object)strBuilder1));
      assertNotSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      
      char[] charArray2 = strBuilder0.getChars(charArray1);
      assertEquals(46, strBuilder0.capacity());
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(15, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(15, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertNotNull(charArray2);
      assertFalse(strBuilder0.equals((Object)strBuilder1));
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray1));
      assertArrayEquals(new char[] {'E', '\u0000'}, charArray0);
      assertEquals(2, charArray0.length);
      assertEquals(14, charArray1.length);
      assertEquals(15, charArray2.length);
      assertNotSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertNotSame(charArray0, charArray2);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray2);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray2, charArray0);
      assertNotSame(charArray2, charArray1);
      
      StringBuilder stringBuilder0 = strBuilder2.toStringBuilder();
      assertEquals(46, strBuilder0.capacity());
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(15, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(15, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder2.getNullText());
      assertEquals(15, strBuilder2.length());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(15, strBuilder2.size());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(46, strBuilder2.capacity());
      assertTrue(strBuilder2.isNotEmpty());
      assertEquals("^idxVa9J(IJ6fm\n", stringBuilder0.toString());
      assertNotNull(stringBuilder0);
      assertFalse(strBuilder0.equals((Object)strBuilder1));
      assertFalse(strBuilder2.equals((Object)strBuilder1));
      assertNotSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder2, strBuilder0);
      assertNotSame(strBuilder2, strBuilder1);
      
      StrBuilder strBuilder3 = strBuilder2.appendFixedWidthPadLeft((Object) stringBuilder0, (-830), 'w');
      assertEquals(46, strBuilder0.capacity());
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(15, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(15, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder2.getNullText());
      assertEquals(15, strBuilder2.length());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(15, strBuilder2.size());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(46, strBuilder2.capacity());
      assertTrue(strBuilder2.isNotEmpty());
      assertEquals("^idxVa9J(IJ6fm\n", stringBuilder0.toString());
      assertEquals(46, strBuilder3.capacity());
      assertNull(strBuilder3.getNewLineText());
      assertNull(strBuilder3.getNullText());
      assertEquals(15, strBuilder3.size());
      assertFalse(strBuilder3.isEmpty());
      assertTrue(strBuilder3.isNotEmpty());
      assertEquals(15, strBuilder3.length());
      assertNotNull(strBuilder3);
      assertFalse(strBuilder0.equals((Object)strBuilder1));
      assertFalse(strBuilder2.equals((Object)strBuilder1));
      assertFalse(strBuilder3.equals((Object)strBuilder1));
      assertNotSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder2, strBuilder0);
      assertNotSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder3);
      assertSame(strBuilder3, strBuilder0);
      assertNotSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder2);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(0);
      assertTrue(strBuilder0.isEmpty());
      assertFalse(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.appendSeparator("', has a length less than 2", "', has a length less than 2");
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(27, strBuilder0.length());
      assertEquals(27, strBuilder0.size());
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(27, strBuilder1.length());
      assertEquals(27, strBuilder1.size());
      assertTrue(strBuilder1.isNotEmpty());
      assertNotNull(strBuilder1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "', has a length less than 2");
      assertFalse(boolean0);
      
      String string0 = strBuilder0.rightString(32);
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(27, strBuilder0.length());
      assertEquals(27, strBuilder0.size());
      assertTrue(strBuilder0.isNotEmpty());
      assertNotNull(string0);
      assertEquals("', has a length less than 2", string0);
      assertSame(strBuilder0, strBuilder1);
      
      StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer0 = strBuilder0.new StrBuilderTokenizer();
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(27, strBuilder0.length());
      assertEquals(27, strBuilder0.size());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder_StrBuilderTokenizer0.nextIndex());
      assertEquals((-1), strBuilder_StrBuilderTokenizer0.previousIndex());
      assertFalse(strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull());
      assertTrue(strBuilder_StrBuilderTokenizer0.isIgnoreEmptyTokens());
      assertNotNull(strBuilder_StrBuilderTokenizer0);
      
      StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer1 = (StrBuilder.StrBuilderTokenizer)strBuilder_StrBuilderTokenizer0.cloneReset();
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(27, strBuilder0.length());
      assertEquals(27, strBuilder0.size());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder_StrBuilderTokenizer0.nextIndex());
      assertEquals((-1), strBuilder_StrBuilderTokenizer0.previousIndex());
      assertFalse(strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull());
      assertTrue(strBuilder_StrBuilderTokenizer0.isIgnoreEmptyTokens());
      assertEquals((-1), strBuilder_StrBuilderTokenizer1.previousIndex());
      assertEquals(0, strBuilder_StrBuilderTokenizer1.nextIndex());
      assertFalse(strBuilder_StrBuilderTokenizer1.isEmptyTokenAsNull());
      assertTrue(strBuilder_StrBuilderTokenizer1.isIgnoreEmptyTokens());
      assertNotNull(strBuilder_StrBuilderTokenizer1);
      assertFalse(strBuilder_StrBuilderTokenizer1.equals((Object)strBuilder_StrBuilderTokenizer0));
      assertSame(strBuilder0, strBuilder1);
      assertNotSame(strBuilder_StrBuilderTokenizer0, strBuilder_StrBuilderTokenizer1);
      assertNotSame(strBuilder_StrBuilderTokenizer1, strBuilder_StrBuilderTokenizer0);
      
      Object[] objectArray0 = new Object[17];
      objectArray0[0] = (Object) strBuilder_StrBuilderTokenizer1;
      StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer2 = (StrBuilder.StrBuilderTokenizer)strBuilder_StrBuilderTokenizer0.clone();
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(27, strBuilder0.length());
      assertEquals(27, strBuilder0.size());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder_StrBuilderTokenizer0.nextIndex());
      assertEquals((-1), strBuilder_StrBuilderTokenizer0.previousIndex());
      assertFalse(strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull());
      assertTrue(strBuilder_StrBuilderTokenizer0.isIgnoreEmptyTokens());
      assertEquals(0, strBuilder_StrBuilderTokenizer2.nextIndex());
      assertTrue(strBuilder_StrBuilderTokenizer2.isIgnoreEmptyTokens());
      assertEquals((-1), strBuilder_StrBuilderTokenizer2.previousIndex());
      assertFalse(strBuilder_StrBuilderTokenizer2.isEmptyTokenAsNull());
      assertNotNull(strBuilder_StrBuilderTokenizer2);
      assertFalse(strBuilder_StrBuilderTokenizer0.equals((Object)strBuilder_StrBuilderTokenizer1));
      assertFalse(strBuilder_StrBuilderTokenizer2.equals((Object)strBuilder_StrBuilderTokenizer1));
      assertFalse(strBuilder_StrBuilderTokenizer2.equals((Object)strBuilder_StrBuilderTokenizer0));
      assertSame(strBuilder0, strBuilder1);
      assertNotSame(strBuilder_StrBuilderTokenizer0, strBuilder_StrBuilderTokenizer1);
      assertNotSame(strBuilder_StrBuilderTokenizer0, strBuilder_StrBuilderTokenizer2);
      assertNotSame(strBuilder_StrBuilderTokenizer2, strBuilder_StrBuilderTokenizer1);
      assertNotSame(strBuilder_StrBuilderTokenizer2, strBuilder_StrBuilderTokenizer0);
      
      objectArray0[1] = (Object) strBuilder_StrBuilderTokenizer2;
      objectArray0[2] = (Object) "', has a length less than 2";
      objectArray0[3] = (Object) strBuilder_StrBuilderTokenizer0;
      objectArray0[4] = (Object) strBuilder_StrBuilderTokenizer0;
      objectArray0[5] = (Object) strBuilder1;
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder1.new StrBuilderReader();
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(27, strBuilder0.length());
      assertEquals(27, strBuilder0.size());
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(27, strBuilder1.length());
      assertEquals(27, strBuilder1.size());
      assertTrue(strBuilder1.isNotEmpty());
      assertTrue(strBuilder_StrBuilderReader0.ready());
      assertTrue(strBuilder_StrBuilderReader0.markSupported());
      assertNotNull(strBuilder_StrBuilderReader0);
      
      char[] charArray0 = new char[5];
      charArray0[0] = '{';
      charArray0[1] = 'W';
      charArray0[2] = '{';
      charArray0[3] = '1';
      charArray0[4] = 'W';
      int int0 = strBuilder_StrBuilderReader0.read(charArray0);
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(27, strBuilder0.length());
      assertEquals(27, strBuilder0.size());
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(27, strBuilder1.length());
      assertEquals(27, strBuilder1.size());
      assertTrue(strBuilder1.isNotEmpty());
      assertTrue(strBuilder_StrBuilderReader0.ready());
      assertTrue(strBuilder_StrBuilderReader0.markSupported());
      assertEquals(5, int0);
      assertArrayEquals(new char[] {'\'', ',', ' ', 'h', 'a'}, charArray0);
      assertEquals(5, charArray0.length);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      
      StringWriter stringWriter0 = new StringWriter();
      assertEquals("", stringWriter0.toString());
      assertNotNull(stringWriter0);
      
      StrBuilder strBuilder2 = new StrBuilder();
      assertEquals(0, strBuilder2.size());
      assertFalse(strBuilder2.isNotEmpty());
      assertEquals(0, strBuilder2.length());
      assertEquals(32, strBuilder2.capacity());
      assertTrue(strBuilder2.isEmpty());
      assertNull(strBuilder2.getNewLineText());
      assertNull(strBuilder2.getNullText());
      assertNotNull(strBuilder2);
      assertFalse(strBuilder2.equals((Object)strBuilder0));
      assertFalse(strBuilder2.equals((Object)strBuilder1));
      
      StrBuilder strBuilder3 = strBuilder1.deleteAll('M');
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(27, strBuilder0.length());
      assertEquals(27, strBuilder0.size());
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(27, strBuilder1.length());
      assertEquals(27, strBuilder1.size());
      assertTrue(strBuilder1.isNotEmpty());
      assertEquals(32, strBuilder3.capacity());
      assertTrue(strBuilder3.isNotEmpty());
      assertFalse(strBuilder3.isEmpty());
      assertNull(strBuilder3.getNewLineText());
      assertEquals(27, strBuilder3.size());
      assertEquals(27, strBuilder3.length());
      assertNull(strBuilder3.getNullText());
      assertNotNull(strBuilder3);
      assertFalse(strBuilder0.equals((Object)strBuilder2));
      assertFalse(strBuilder1.equals((Object)strBuilder2));
      assertFalse(strBuilder3.equals((Object)strBuilder2));
      assertNotSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder3);
      assertNotSame(strBuilder1, strBuilder2);
      assertNotSame(strBuilder3, strBuilder2);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder0);
      
      StrBuilder strBuilder4 = strBuilder2.appendln((Object) stringWriter0);
      assertEquals("", stringWriter0.toString());
      assertEquals(32, strBuilder2.size());
      assertTrue(strBuilder2.isNotEmpty());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(32, strBuilder2.length());
      assertEquals(32, strBuilder2.capacity());
      assertNull(strBuilder2.getNewLineText());
      assertNull(strBuilder2.getNullText());
      assertNull(strBuilder4.getNullText());
      assertNull(strBuilder4.getNewLineText());
      assertTrue(strBuilder4.isNotEmpty());
      assertFalse(strBuilder4.isEmpty());
      assertEquals(32, strBuilder4.capacity());
      assertEquals(32, strBuilder4.length());
      assertEquals(32, strBuilder4.size());
      assertNotNull(strBuilder4);
      assertFalse(strBuilder2.equals((Object)strBuilder0));
      assertFalse(strBuilder2.equals((Object)strBuilder3));
      assertFalse(strBuilder2.equals((Object)strBuilder1));
      assertFalse(strBuilder4.equals((Object)strBuilder3));
      assertFalse(strBuilder4.equals((Object)strBuilder1));
      assertFalse(strBuilder4.equals((Object)strBuilder0));
      assertSame(strBuilder2, strBuilder4);
      assertNotSame(strBuilder2, strBuilder0);
      assertNotSame(strBuilder2, strBuilder3);
      assertNotSame(strBuilder2, strBuilder1);
      assertNotSame(strBuilder4, strBuilder3);
      assertNotSame(strBuilder4, strBuilder1);
      assertNotSame(strBuilder4, strBuilder0);
      assertSame(strBuilder4, strBuilder2);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("&");
      assertEquals(33, strBuilder0.capacity());
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(1, strBuilder0.size());
      assertEquals(1, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = new StrBuilder();
      assertNull(strBuilder1.getNullText());
      assertEquals(0, strBuilder1.length());
      assertEquals(0, strBuilder1.size());
      assertFalse(strBuilder1.isNotEmpty());
      assertTrue(strBuilder1.isEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertNotNull(strBuilder1);
      assertFalse(strBuilder1.equals((Object)strBuilder0));
      
      StrBuilder strBuilder2 = strBuilder1.appendln(0.0F);
      assertTrue(strBuilder1.isNotEmpty());
      assertNull(strBuilder1.getNullText());
      assertEquals(4, strBuilder1.length());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(4, strBuilder1.size());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(4, strBuilder2.length());
      assertEquals(4, strBuilder2.size());
      assertNull(strBuilder2.getNullText());
      assertTrue(strBuilder2.isNotEmpty());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(32, strBuilder2.capacity());
      assertFalse(strBuilder2.isEmpty());
      assertNotNull(strBuilder2);
      assertFalse(strBuilder1.equals((Object)strBuilder0));
      assertFalse(strBuilder2.equals((Object)strBuilder0));
      assertSame(strBuilder1, strBuilder2);
      assertNotSame(strBuilder1, strBuilder0);
      assertNotSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      
      StrBuilder strBuilder3 = strBuilder0.deleteAll('c');
      assertEquals(33, strBuilder0.capacity());
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(1, strBuilder0.size());
      assertEquals(1, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(1, strBuilder3.length());
      assertEquals(1, strBuilder3.size());
      assertNull(strBuilder3.getNullText());
      assertFalse(strBuilder3.isEmpty());
      assertNull(strBuilder3.getNewLineText());
      assertTrue(strBuilder3.isNotEmpty());
      assertEquals(33, strBuilder3.capacity());
      assertNotNull(strBuilder3);
      assertFalse(strBuilder0.equals((Object)strBuilder1));
      assertFalse(strBuilder0.equals((Object)strBuilder2));
      assertFalse(strBuilder3.equals((Object)strBuilder2));
      assertFalse(strBuilder3.equals((Object)strBuilder1));
      assertNotSame(strBuilder0, strBuilder1);
      assertNotSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder3, strBuilder0);
      assertNotSame(strBuilder3, strBuilder2);
      assertNotSame(strBuilder3, strBuilder1);
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder((String) null);
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertFalse(strBuilder0.isNotEmpty());
      assertNotNull(strBuilder0);
      
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      assertFalse(boolean0);
      
      StrBuilder strBuilder1 = strBuilder0.setLength(0);
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertTrue(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(0, strBuilder1.size());
      assertFalse(strBuilder1.isNotEmpty());
      assertEquals(0, strBuilder1.length());
      assertNotNull(strBuilder1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      
      StrBuilder strBuilder2 = strBuilder0.insert(0, true);
      assertEquals(4, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(4, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(4, strBuilder2.length());
      assertEquals(4, strBuilder2.size());
      assertNull(strBuilder2.getNullText());
      assertNull(strBuilder2.getNewLineText());
      assertTrue(strBuilder2.isNotEmpty());
      assertEquals(32, strBuilder2.capacity());
      assertFalse(strBuilder2.isEmpty());
      assertNotNull(strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertFalse(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertNotNull(strBuilder0);
      
      boolean boolean1 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "H`ja|UZ$k)INqyS/");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      StrBuilder strBuilder1 = strBuilder0.ensureCapacity(3752);
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(7504, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder1.isNotEmpty());
      assertTrue(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertEquals(7504, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(0, strBuilder1.length());
      assertEquals(0, strBuilder1.size());
      assertNotNull(strBuilder1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      
      Class<Integer> class0 = Integer.class;
      ServiceLoader<Integer> serviceLoader0 = ServiceLoader.loadInstalled(class0);
      assertEquals("java.util.ServiceLoader[java.lang.Integer]", serviceLoader0.toString());
      assertNotNull(serviceLoader0);
      
      Iterator<Integer> iterator0 = serviceLoader0.iterator();
      assertEquals("java.util.ServiceLoader[java.lang.Integer]", serviceLoader0.toString());
      assertNotNull(iterator0);
      
      StrBuilder strBuilder2 = strBuilder0.insert(0, true);
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(4, strBuilder0.length());
      assertEquals(7504, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(4, strBuilder0.size());
      assertNull(strBuilder2.getNewLineText());
      assertTrue(strBuilder2.isNotEmpty());
      assertEquals(7504, strBuilder2.capacity());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(4, strBuilder2.size());
      assertEquals(4, strBuilder2.length());
      assertNull(strBuilder2.getNullText());
      assertNotNull(strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("L~>|1&L]M.!");
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(11, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(43, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertEquals(11, strBuilder0.length());
      assertNotNull(strBuilder0);
      
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) "L~>|1&L]M.!";
      objectArray0[1] = (Object) "L~>|1&L]M.!";
      objectArray0[2] = (Object) "org.apache.commons.lang3.text.StrMatcher$CharSetMatcher";
      objectArray0[3] = (Object) "L~>|1&L]M.!";
      objectArray0[4] = (Object) strBuilder0;
      objectArray0[5] = (Object) "L~>|1&L]M.!";
      StrBuilder strBuilder1 = strBuilder0.append("L~>|1&L]M.!", objectArray0);
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(43, strBuilder0.capacity());
      assertEquals(22, strBuilder0.size());
      assertEquals(22, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(43, strBuilder1.capacity());
      assertNull(strBuilder1.getNullText());
      assertTrue(strBuilder1.isNotEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(22, strBuilder1.size());
      assertEquals(22, strBuilder1.length());
      assertFalse(strBuilder1.isEmpty());
      assertNotNull(strBuilder1);
      assertEquals(6, objectArray0.length);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      
      // Undeclared exception!
      try { 
        strBuilder1.getChars(0, 0, (char[]) null, (-1303));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertFalse(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNotNull(strBuilder0);
      
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "org.apache.commons.lang3.text.StrBuilder$StrBuilderTokenizer");
      assertFalse(boolean0);
      
      StrBuilder strBuilder1 = new StrBuilder("org.apache.commons.lang3.text.StrBuilder$StrBuilderTokenizer");
      assertNull(strBuilder1.getNewLineText());
      assertEquals(92, strBuilder1.capacity());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertTrue(strBuilder1.isNotEmpty());
      assertEquals(60, strBuilder1.length());
      assertEquals(60, strBuilder1.size());
      assertNotNull(strBuilder1);
      assertFalse(strBuilder1.equals((Object)strBuilder0));
      
      char[] charArray0 = new char[7];
      charArray0[0] = ':';
      charArray0[1] = '';
      charArray0[2] = 'i';
      charArray0[3] = '6';
      charArray0[4] = 'u';
      charArray0[5] = '1';
      charArray0[6] = '1';
      char[] charArray1 = strBuilder0.getChars(charArray0);
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertFalse(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNotNull(charArray1);
      assertFalse(strBuilder0.equals((Object)strBuilder1));
      assertArrayEquals(new char[] {':', '', 'i', '6', 'u', '1', '1'}, charArray0);
      assertArrayEquals(new char[] {':', '', 'i', '6', 'u', '1', '1'}, charArray1);
      assertEquals(7, charArray0.length);
      assertEquals(7, charArray1.length);
      assertNotSame(strBuilder0, strBuilder1);
      assertSame(charArray0, charArray1);
      assertSame(charArray1, charArray0);
      
      int int0 = strBuilder1.lastIndexOf((String) null, 370);
      assertNull(strBuilder1.getNewLineText());
      assertEquals(92, strBuilder1.capacity());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertTrue(strBuilder1.isNotEmpty());
      assertEquals(60, strBuilder1.length());
      assertEquals(60, strBuilder1.size());
      assertEquals((-1), int0);
      assertFalse(strBuilder1.equals((Object)strBuilder0));
      assertNotSame(strBuilder1, strBuilder0);
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertFalse(strBuilder0.isNotEmpty());
      assertNotNull(strBuilder0);
      
      StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer0 = strBuilder0.new StrBuilderTokenizer();
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals((-1), strBuilder_StrBuilderTokenizer0.previousIndex());
      assertFalse(strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull());
      assertEquals(0, strBuilder_StrBuilderTokenizer0.nextIndex());
      assertTrue(strBuilder_StrBuilderTokenizer0.isIgnoreEmptyTokens());
      assertNotNull(strBuilder_StrBuilderTokenizer0);
      
      StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer1 = (StrBuilder.StrBuilderTokenizer)strBuilder_StrBuilderTokenizer0.cloneReset();
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals((-1), strBuilder_StrBuilderTokenizer0.previousIndex());
      assertFalse(strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull());
      assertEquals(0, strBuilder_StrBuilderTokenizer0.nextIndex());
      assertTrue(strBuilder_StrBuilderTokenizer0.isIgnoreEmptyTokens());
      assertEquals((-1), strBuilder_StrBuilderTokenizer1.previousIndex());
      assertEquals(0, strBuilder_StrBuilderTokenizer1.nextIndex());
      assertFalse(strBuilder_StrBuilderTokenizer1.isEmptyTokenAsNull());
      assertTrue(strBuilder_StrBuilderTokenizer1.isIgnoreEmptyTokens());
      assertNotNull(strBuilder_StrBuilderTokenizer1);
      assertFalse(strBuilder_StrBuilderTokenizer1.equals((Object)strBuilder_StrBuilderTokenizer0));
      assertNotSame(strBuilder_StrBuilderTokenizer0, strBuilder_StrBuilderTokenizer1);
      assertNotSame(strBuilder_StrBuilderTokenizer1, strBuilder_StrBuilderTokenizer0);
      
      StrBuilder strBuilder1 = strBuilder0.append((char[]) null);
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertFalse(strBuilder0.isNotEmpty());
      assertTrue(strBuilder1.isEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(0, strBuilder1.length());
      assertEquals(0, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertFalse(strBuilder1.isNotEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertNotNull(strBuilder1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      
      char[] charArray0 = new char[4];
      charArray0[1] = '\\';
      charArray0[3] = '@';
      StringWriter stringWriter0 = new StringWriter();
      assertEquals("", stringWriter0.toString());
      assertNotNull(stringWriter0);
      
      StrBuilder strBuilder2 = new StrBuilder();
      assertEquals(32, strBuilder2.capacity());
      assertTrue(strBuilder2.isEmpty());
      assertEquals(0, strBuilder2.length());
      assertEquals(0, strBuilder2.size());
      assertFalse(strBuilder2.isNotEmpty());
      assertNull(strBuilder2.getNewLineText());
      assertNull(strBuilder2.getNullText());
      assertNotNull(strBuilder2);
      assertTrue(strBuilder2.equals((Object)strBuilder1));
      assertTrue(strBuilder2.equals((Object)strBuilder0));
      
      StrBuilder strBuilder3 = strBuilder2.deleteAll('E');
      assertEquals(32, strBuilder2.capacity());
      assertTrue(strBuilder2.isEmpty());
      assertEquals(0, strBuilder2.length());
      assertEquals(0, strBuilder2.size());
      assertFalse(strBuilder2.isNotEmpty());
      assertNull(strBuilder2.getNewLineText());
      assertNull(strBuilder2.getNullText());
      assertEquals(0, strBuilder3.length());
      assertNull(strBuilder3.getNullText());
      assertEquals(0, strBuilder3.size());
      assertFalse(strBuilder3.isNotEmpty());
      assertTrue(strBuilder3.isEmpty());
      assertNull(strBuilder3.getNewLineText());
      assertEquals(32, strBuilder3.capacity());
      assertNotNull(strBuilder3);
      assertTrue(strBuilder2.equals((Object)strBuilder1));
      assertTrue(strBuilder2.equals((Object)strBuilder0));
      assertTrue(strBuilder3.equals((Object)strBuilder0));
      assertTrue(strBuilder3.equals((Object)strBuilder1));
      assertSame(strBuilder2, strBuilder3);
      assertNotSame(strBuilder2, strBuilder0);
      assertNotSame(strBuilder2, strBuilder1);
      assertSame(strBuilder3, strBuilder2);
      assertNotSame(strBuilder3, strBuilder0);
      assertNotSame(strBuilder3, strBuilder1);
      
      StrBuilder strBuilder4 = strBuilder0.appendln((Object) strBuilder3);
      assertEquals(1, strBuilder0.size());
      assertEquals(1, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(32, strBuilder2.capacity());
      assertTrue(strBuilder2.isEmpty());
      assertEquals(0, strBuilder2.length());
      assertEquals(0, strBuilder2.size());
      assertFalse(strBuilder2.isNotEmpty());
      assertNull(strBuilder2.getNewLineText());
      assertNull(strBuilder2.getNullText());
      assertEquals(0, strBuilder3.length());
      assertNull(strBuilder3.getNullText());
      assertEquals(0, strBuilder3.size());
      assertFalse(strBuilder3.isNotEmpty());
      assertTrue(strBuilder3.isEmpty());
      assertNull(strBuilder3.getNewLineText());
      assertEquals(32, strBuilder3.capacity());
      assertTrue(strBuilder4.isNotEmpty());
      assertEquals(32, strBuilder4.capacity());
      assertNull(strBuilder4.getNullText());
      assertFalse(strBuilder4.isEmpty());
      assertEquals(1, strBuilder4.size());
      assertNull(strBuilder4.getNewLineText());
      assertEquals(1, strBuilder4.length());
      assertNotNull(strBuilder4);
      assertFalse(strBuilder0.equals((Object)strBuilder3));
      assertFalse(strBuilder0.equals((Object)strBuilder2));
      assertFalse(strBuilder2.equals((Object)strBuilder0));
      assertFalse(strBuilder2.equals((Object)strBuilder1));
      assertFalse(strBuilder3.equals((Object)strBuilder0));
      assertFalse(strBuilder3.equals((Object)strBuilder1));
      assertFalse(strBuilder4.equals((Object)strBuilder2));
      assertFalse(strBuilder4.equals((Object)strBuilder3));
      assertNotSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder4);
      assertNotSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder2, strBuilder3);
      assertNotSame(strBuilder2, strBuilder0);
      assertNotSame(strBuilder2, strBuilder4);
      assertNotSame(strBuilder2, strBuilder1);
      assertSame(strBuilder3, strBuilder2);
      assertNotSame(strBuilder3, strBuilder0);
      assertNotSame(strBuilder3, strBuilder4);
      assertNotSame(strBuilder3, strBuilder1);
      assertNotSame(strBuilder4, strBuilder2);
      assertSame(strBuilder4, strBuilder1);
      assertSame(strBuilder4, strBuilder0);
      assertNotSame(strBuilder4, strBuilder3);
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("^idxVa9J(IJ6fm");
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(14, strBuilder0.length());
      assertEquals(14, strBuilder0.size());
      assertEquals(46, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertNotNull(strBuilder0);
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'E';
      charArray0[1] = 'e';
      char[] charArray1 = strBuilder0.getChars(charArray0);
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(14, strBuilder0.length());
      assertEquals(14, strBuilder0.size());
      assertEquals(46, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertNotNull(charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {'E', 'e'}, charArray0);
      assertEquals(2, charArray0.length);
      assertEquals(14, charArray1.length);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      
      StrBuilder strBuilder1 = strBuilder0.appendNewLine();
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(15, strBuilder0.size());
      assertEquals(15, strBuilder0.length());
      assertEquals(46, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(46, strBuilder1.capacity());
      assertFalse(strBuilder1.isEmpty());
      assertTrue(strBuilder1.isNotEmpty());
      assertEquals(15, strBuilder1.size());
      assertEquals(15, strBuilder1.length());
      assertNotNull(strBuilder1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      
      Charset charset0 = Charset.defaultCharset();
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.toString());
      assertNotNull(charset0);
      
      ByteBuffer byteBuffer0 = charset0.encode("l");
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.toString());
      assertEquals("java.nio.HeapByteBuffer[pos=0 lim=1 cap=1]", byteBuffer0.toString());
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals(0, byteBuffer0.position());
      assertEquals(1, byteBuffer0.remaining());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertFalse(byteBuffer0.isDirect());
      assertTrue(byteBuffer0.hasRemaining());
      assertTrue(byteBuffer0.hasArray());
      assertEquals(1, byteBuffer0.capacity());
      assertEquals(1, byteBuffer0.limit());
      assertNotNull(byteBuffer0);
      
      CharBuffer charBuffer0 = charset0.decode(byteBuffer0);
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.toString());
      assertEquals(0, byteBuffer0.remaining());
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals(1, byteBuffer0.position());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertFalse(byteBuffer0.isDirect());
      assertTrue(byteBuffer0.hasArray());
      assertEquals(1, byteBuffer0.capacity());
      assertFalse(byteBuffer0.hasRemaining());
      assertEquals("java.nio.HeapByteBuffer[pos=1 lim=1 cap=1]", byteBuffer0.toString());
      assertEquals(1, byteBuffer0.limit());
      assertFalse(charBuffer0.isDirect());
      assertEquals(1, charBuffer0.length());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals("l", charBuffer0.toString());
      assertEquals(1, charBuffer0.capacity());
      assertEquals(1, charBuffer0.limit());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(1, charBuffer0.remaining());
      assertTrue(charBuffer0.hasArray());
      assertNotNull(charBuffer0);
      
      // Undeclared exception!
      try { 
        strBuilder1.append(charBuffer0, (-227), 32);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // startIndex must be valid
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertFalse(strBuilder0.isNotEmpty());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = new StrBuilder("p2vtx[:.");
      assertTrue(strBuilder1.isNotEmpty());
      assertNull(strBuilder1.getNullText());
      assertEquals(8, strBuilder1.length());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(8, strBuilder1.size());
      assertEquals(40, strBuilder1.capacity());
      assertFalse(strBuilder1.isEmpty());
      assertNotNull(strBuilder1);
      assertFalse(strBuilder1.equals((Object)strBuilder0));
      
      StrBuilder strBuilder2 = strBuilder1.deleteAll("");
      assertTrue(strBuilder1.isNotEmpty());
      assertNull(strBuilder1.getNullText());
      assertEquals(8, strBuilder1.length());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(8, strBuilder1.size());
      assertEquals(40, strBuilder1.capacity());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder2.getNewLineText());
      assertTrue(strBuilder2.isNotEmpty());
      assertEquals(8, strBuilder2.size());
      assertNull(strBuilder2.getNullText());
      assertEquals(8, strBuilder2.length());
      assertEquals(40, strBuilder2.capacity());
      assertFalse(strBuilder2.isEmpty());
      assertNotNull(strBuilder2);
      assertFalse(strBuilder1.equals((Object)strBuilder0));
      assertFalse(strBuilder2.equals((Object)strBuilder0));
      assertSame(strBuilder1, strBuilder2);
      assertNotSame(strBuilder1, strBuilder0);
      assertNotSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      
      CharBuffer charBuffer0 = CharBuffer.allocate(32);
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.isReadOnly());
      assertTrue(charBuffer0.hasArray());
      assertEquals(32, charBuffer0.remaining());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", charBuffer0.toString());
      assertFalse(charBuffer0.isDirect());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(32, charBuffer0.length());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(32, charBuffer0.capacity());
      assertEquals(32, charBuffer0.limit());
      assertNotNull(charBuffer0);
      
      // Undeclared exception!
      try { 
        strBuilder1.append(charBuffer0, (-1168), 32);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // startIndex must be valid
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertFalse(strBuilder0.isNotEmpty());
      assertNotNull(strBuilder0);
      
      StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer0 = strBuilder0.new StrBuilderTokenizer();
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertFalse(strBuilder0.isNotEmpty());
      assertTrue(strBuilder_StrBuilderTokenizer0.isIgnoreEmptyTokens());
      assertFalse(strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull());
      assertEquals((-1), strBuilder_StrBuilderTokenizer0.previousIndex());
      assertEquals(0, strBuilder_StrBuilderTokenizer0.nextIndex());
      assertNotNull(strBuilder_StrBuilderTokenizer0);
      
      StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer1 = (StrBuilder.StrBuilderTokenizer)strBuilder_StrBuilderTokenizer0.cloneReset();
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertFalse(strBuilder0.isNotEmpty());
      assertTrue(strBuilder_StrBuilderTokenizer0.isIgnoreEmptyTokens());
      assertFalse(strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull());
      assertEquals((-1), strBuilder_StrBuilderTokenizer0.previousIndex());
      assertEquals(0, strBuilder_StrBuilderTokenizer0.nextIndex());
      assertEquals(0, strBuilder_StrBuilderTokenizer1.nextIndex());
      assertTrue(strBuilder_StrBuilderTokenizer1.isIgnoreEmptyTokens());
      assertEquals((-1), strBuilder_StrBuilderTokenizer1.previousIndex());
      assertFalse(strBuilder_StrBuilderTokenizer1.isEmptyTokenAsNull());
      assertNotNull(strBuilder_StrBuilderTokenizer1);
      assertFalse(strBuilder_StrBuilderTokenizer1.equals((Object)strBuilder_StrBuilderTokenizer0));
      assertNotSame(strBuilder_StrBuilderTokenizer0, strBuilder_StrBuilderTokenizer1);
      assertNotSame(strBuilder_StrBuilderTokenizer1, strBuilder_StrBuilderTokenizer0);
      
      StrBuilder strBuilder1 = strBuilder0.append((Object) strBuilder_StrBuilderTokenizer1);
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(142, strBuilder0.capacity());
      assertEquals(71, strBuilder0.length());
      assertEquals(71, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertTrue(strBuilder_StrBuilderTokenizer0.isIgnoreEmptyTokens());
      assertFalse(strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull());
      assertEquals((-1), strBuilder_StrBuilderTokenizer0.previousIndex());
      assertEquals(0, strBuilder_StrBuilderTokenizer0.nextIndex());
      assertEquals(0, strBuilder_StrBuilderTokenizer1.nextIndex());
      assertTrue(strBuilder_StrBuilderTokenizer1.isIgnoreEmptyTokens());
      assertEquals((-1), strBuilder_StrBuilderTokenizer1.previousIndex());
      assertFalse(strBuilder_StrBuilderTokenizer1.isEmptyTokenAsNull());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(142, strBuilder1.capacity());
      assertTrue(strBuilder1.isNotEmpty());
      assertEquals(71, strBuilder1.length());
      assertEquals(71, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertNotNull(strBuilder1);
      assertFalse(strBuilder_StrBuilderTokenizer0.equals((Object)strBuilder_StrBuilderTokenizer1));
      assertFalse(strBuilder_StrBuilderTokenizer1.equals((Object)strBuilder_StrBuilderTokenizer0));
      assertSame(strBuilder0, strBuilder1);
      assertNotSame(strBuilder_StrBuilderTokenizer0, strBuilder_StrBuilderTokenizer1);
      assertNotSame(strBuilder_StrBuilderTokenizer1, strBuilder_StrBuilderTokenizer0);
      assertSame(strBuilder1, strBuilder0);
      
      StrBuilder strBuilder2 = strBuilder0.append("remove() is unsupported");
      assertEquals(94, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(94, strBuilder0.length());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(142, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertTrue(strBuilder2.isNotEmpty());
      assertNull(strBuilder2.getNullText());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(142, strBuilder2.capacity());
      assertEquals(94, strBuilder2.length());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(94, strBuilder2.size());
      assertNotNull(strBuilder2);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      
      StrBuilder strBuilder3 = strBuilder0.minimizeCapacity();
      assertEquals(94, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(94, strBuilder0.length());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(94, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(94, strBuilder3.capacity());
      assertNull(strBuilder3.getNewLineText());
      assertFalse(strBuilder3.isEmpty());
      assertNull(strBuilder3.getNullText());
      assertEquals(94, strBuilder3.length());
      assertEquals(94, strBuilder3.size());
      assertTrue(strBuilder3.isNotEmpty());
      assertNotNull(strBuilder3);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder2);
      
      String string0 = strBuilder1.leftString((-895));
      assertEquals(94, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(94, strBuilder0.length());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(94, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertTrue(strBuilder_StrBuilderTokenizer0.isIgnoreEmptyTokens());
      assertFalse(strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull());
      assertEquals((-1), strBuilder_StrBuilderTokenizer0.previousIndex());
      assertEquals(0, strBuilder_StrBuilderTokenizer0.nextIndex());
      assertEquals(0, strBuilder_StrBuilderTokenizer1.nextIndex());
      assertTrue(strBuilder_StrBuilderTokenizer1.isIgnoreEmptyTokens());
      assertEquals((-1), strBuilder_StrBuilderTokenizer1.previousIndex());
      assertFalse(strBuilder_StrBuilderTokenizer1.isEmptyTokenAsNull());
      assertEquals(94, strBuilder1.length());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(94, strBuilder1.size());
      assertEquals(94, strBuilder1.capacity());
      assertTrue(strBuilder1.isNotEmpty());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertNotNull(string0);
      assertEquals("", string0);
      assertFalse(strBuilder_StrBuilderTokenizer0.equals((Object)strBuilder_StrBuilderTokenizer1));
      assertFalse(strBuilder_StrBuilderTokenizer1.equals((Object)strBuilder_StrBuilderTokenizer0));
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertNotSame(strBuilder_StrBuilderTokenizer0, strBuilder_StrBuilderTokenizer1);
      assertNotSame(strBuilder_StrBuilderTokenizer1, strBuilder_StrBuilderTokenizer0);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder0);
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      int int0 = 2957;
      StrBuilder strBuilder0 = new StrBuilder(2957);
      assertEquals(0, strBuilder0.size());
      assertFalse(strBuilder0.isNotEmpty());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(2957, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertNotNull(strBuilder0);
      
      int int1 = 2326;
      StrBuilder strBuilder1 = strBuilder0.replaceFirst("s_Vms`", "s_Vms`");
      assertEquals(0, strBuilder0.size());
      assertFalse(strBuilder0.isNotEmpty());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(2957, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder1.getNullText());
      assertEquals(0, strBuilder1.length());
      assertEquals(0, strBuilder1.size());
      assertFalse(strBuilder1.isNotEmpty());
      assertTrue(strBuilder1.isEmpty());
      assertEquals(2957, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertNotNull(strBuilder1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      
      int int2 = 35;
      int int3 = 50;
      StrBuilder strBuilder2 = strBuilder1.appendln((StringBuffer) null, 35, 50);
      assertEquals(1, strBuilder0.length());
      assertEquals(1, strBuilder0.size());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(2957, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder1.getNullText());
      assertEquals(1, strBuilder1.length());
      assertTrue(strBuilder1.isNotEmpty());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(1, strBuilder1.size());
      assertEquals(2957, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(2957, strBuilder2.capacity());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(1, strBuilder2.length());
      assertEquals(1, strBuilder2.size());
      assertTrue(strBuilder2.isNotEmpty());
      assertNull(strBuilder2.getNewLineText());
      assertNull(strBuilder2.getNullText());
      assertNotNull(strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      
      String string0 = "";
      // Undeclared exception!
      try { 
        strBuilder0.insert(2326, "");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 2326
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("");
      assertFalse(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.appendFixedWidthPadLeft((Object) "", 3742, 'H');
      assertEquals(3742, strBuilder0.size());
      assertEquals(3742, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(7484, strBuilder0.capacity());
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(7484, strBuilder1.capacity());
      assertEquals(3742, strBuilder1.length());
      assertTrue(strBuilder1.isNotEmpty());
      assertEquals(3742, strBuilder1.size());
      assertNotNull(strBuilder1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      
      StrBuilder strBuilder2 = strBuilder0.append((StringBuffer) null, (-85), (-890));
      assertEquals(3742, strBuilder0.size());
      assertEquals(3742, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(7484, strBuilder0.capacity());
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(7484, strBuilder2.capacity());
      assertTrue(strBuilder2.isNotEmpty());
      assertNull(strBuilder2.getNullText());
      assertEquals(3742, strBuilder2.length());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(3742, strBuilder2.size());
      assertFalse(strBuilder2.isEmpty());
      assertNotNull(strBuilder2);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      
      StrBuilder strBuilder3 = strBuilder0.appendln(0.0);
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(7484, strBuilder0.capacity());
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(3746, strBuilder0.size());
      assertEquals(3746, strBuilder0.length());
      assertEquals(3746, strBuilder3.size());
      assertEquals(3746, strBuilder3.length());
      assertTrue(strBuilder3.isNotEmpty());
      assertNull(strBuilder3.getNewLineText());
      assertFalse(strBuilder3.isEmpty());
      assertNull(strBuilder3.getNullText());
      assertEquals(7484, strBuilder3.capacity());
      assertNotNull(strBuilder3);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder2);
      
      int int0 = strBuilder3.length();
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(7484, strBuilder0.capacity());
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(3746, strBuilder0.size());
      assertEquals(3746, strBuilder0.length());
      assertEquals(3746, strBuilder3.size());
      assertEquals(3746, strBuilder3.length());
      assertTrue(strBuilder3.isNotEmpty());
      assertNull(strBuilder3.getNewLineText());
      assertFalse(strBuilder3.isEmpty());
      assertNull(strBuilder3.getNullText());
      assertEquals(7484, strBuilder3.capacity());
      assertEquals(3746, int0);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder2);
      
      StrBuilder strBuilder4 = strBuilder1.append("");
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(7484, strBuilder0.capacity());
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(3746, strBuilder0.size());
      assertEquals(3746, strBuilder0.length());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(7484, strBuilder1.capacity());
      assertEquals(3746, strBuilder1.length());
      assertEquals(3746, strBuilder1.size());
      assertTrue(strBuilder1.isNotEmpty());
      assertNull(strBuilder4.getNewLineText());
      assertFalse(strBuilder4.isEmpty());
      assertNull(strBuilder4.getNullText());
      assertTrue(strBuilder4.isNotEmpty());
      assertEquals(3746, strBuilder4.size());
      assertEquals(3746, strBuilder4.length());
      assertEquals(7484, strBuilder4.capacity());
      assertNotNull(strBuilder4);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder4);
      assertSame(strBuilder4, strBuilder1);
      assertSame(strBuilder4, strBuilder3);
      assertSame(strBuilder4, strBuilder0);
      assertSame(strBuilder4, strBuilder2);
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.appendSeparator('B', 44);
      assertEquals(1, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(1, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertTrue(strBuilder1.isNotEmpty());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertEquals(1, strBuilder1.size());
      assertEquals(1, strBuilder1.length());
      assertNotNull(strBuilder1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      
      StrBuilder strBuilder2 = new StrBuilder();
      assertEquals(32, strBuilder2.capacity());
      assertNull(strBuilder2.getNullText());
      assertTrue(strBuilder2.isEmpty());
      assertNull(strBuilder2.getNewLineText());
      assertFalse(strBuilder2.isNotEmpty());
      assertEquals(0, strBuilder2.length());
      assertEquals(0, strBuilder2.size());
      assertNotNull(strBuilder2);
      assertFalse(strBuilder2.equals((Object)strBuilder1));
      assertFalse(strBuilder2.equals((Object)strBuilder0));
      
      StrBuilder strBuilder3 = strBuilder1.deleteFirst("+XydwU");
      assertEquals(1, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(1, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertTrue(strBuilder1.isNotEmpty());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertEquals(1, strBuilder1.size());
      assertEquals(1, strBuilder1.length());
      assertEquals(32, strBuilder3.capacity());
      assertNull(strBuilder3.getNewLineText());
      assertNull(strBuilder3.getNullText());
      assertEquals(1, strBuilder3.size());
      assertEquals(1, strBuilder3.length());
      assertTrue(strBuilder3.isNotEmpty());
      assertFalse(strBuilder3.isEmpty());
      assertNotNull(strBuilder3);
      assertFalse(strBuilder0.equals((Object)strBuilder2));
      assertFalse(strBuilder1.equals((Object)strBuilder2));
      assertFalse(strBuilder3.equals((Object)strBuilder2));
      assertSame(strBuilder0, strBuilder1);
      assertNotSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder1, strBuilder0);
      assertNotSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder3);
      assertNotSame(strBuilder3, strBuilder2);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder0);
      
      StrBuilder strBuilder4 = strBuilder0.setNewLineText("4+1?u7{");
      assertEquals(1, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(1, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals("4+1?u7{", strBuilder0.getNewLineText());
      assertEquals(1, strBuilder4.size());
      assertNull(strBuilder4.getNullText());
      assertEquals("4+1?u7{", strBuilder4.getNewLineText());
      assertEquals(1, strBuilder4.length());
      assertFalse(strBuilder4.isEmpty());
      assertTrue(strBuilder4.isNotEmpty());
      assertEquals(32, strBuilder4.capacity());
      assertNotNull(strBuilder4);
      assertFalse(strBuilder0.equals((Object)strBuilder2));
      assertFalse(strBuilder4.equals((Object)strBuilder2));
      assertSame(strBuilder0, strBuilder1);
      assertNotSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder4, strBuilder1);
      assertSame(strBuilder4, strBuilder3);
      assertNotSame(strBuilder4, strBuilder2);
      assertSame(strBuilder4, strBuilder0);
      
      StrBuilder strBuilder5 = new StrBuilder();
      assertTrue(strBuilder5.isEmpty());
      assertEquals(0, strBuilder5.size());
      assertFalse(strBuilder5.isNotEmpty());
      assertNull(strBuilder5.getNullText());
      assertEquals(0, strBuilder5.length());
      assertEquals(32, strBuilder5.capacity());
      assertNull(strBuilder5.getNewLineText());
      assertNotNull(strBuilder5);
      assertFalse(strBuilder5.equals((Object)strBuilder4));
      assertTrue(strBuilder5.equals((Object)strBuilder2));
      assertFalse(strBuilder5.equals((Object)strBuilder0));
      assertFalse(strBuilder5.equals((Object)strBuilder1));
      assertFalse(strBuilder5.equals((Object)strBuilder3));
      
      StrBuilder strBuilder6 = strBuilder4.setNullText("/Eb%}e\"c");
      assertEquals(1, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(1, strBuilder0.length());
      assertEquals("/Eb%}e\"c", strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals("4+1?u7{", strBuilder0.getNewLineText());
      assertEquals(1, strBuilder4.size());
      assertEquals("4+1?u7{", strBuilder4.getNewLineText());
      assertEquals(1, strBuilder4.length());
      assertFalse(strBuilder4.isEmpty());
      assertEquals("/Eb%}e\"c", strBuilder4.getNullText());
      assertTrue(strBuilder4.isNotEmpty());
      assertEquals(32, strBuilder4.capacity());
      assertEquals(1, strBuilder6.length());
      assertEquals(1, strBuilder6.size());
      assertFalse(strBuilder6.isEmpty());
      assertEquals("/Eb%}e\"c", strBuilder6.getNullText());
      assertEquals("4+1?u7{", strBuilder6.getNewLineText());
      assertEquals(32, strBuilder6.capacity());
      assertTrue(strBuilder6.isNotEmpty());
      assertNotNull(strBuilder6);
      assertFalse(strBuilder0.equals((Object)strBuilder5));
      assertFalse(strBuilder0.equals((Object)strBuilder2));
      assertFalse(strBuilder4.equals((Object)strBuilder5));
      assertFalse(strBuilder4.equals((Object)strBuilder2));
      assertFalse(strBuilder6.equals((Object)strBuilder5));
      assertFalse(strBuilder6.equals((Object)strBuilder2));
      assertSame(strBuilder0, strBuilder6);
      assertNotSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder1);
      assertNotSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder4, strBuilder6);
      assertNotSame(strBuilder4, strBuilder5);
      assertSame(strBuilder4, strBuilder1);
      assertSame(strBuilder4, strBuilder3);
      assertNotSame(strBuilder4, strBuilder2);
      assertSame(strBuilder4, strBuilder0);
      assertSame(strBuilder6, strBuilder4);
      assertNotSame(strBuilder6, strBuilder5);
      assertSame(strBuilder6, strBuilder3);
      assertSame(strBuilder6, strBuilder1);
      assertSame(strBuilder6, strBuilder0);
      assertNotSame(strBuilder6, strBuilder2);
      
      char[] charArray0 = new char[7];
      charArray0[0] = 'B';
      charArray0[1] = 'B';
      charArray0[2] = '`';
      StrBuilder strBuilder7 = strBuilder5.appendln(charArray0, 5, 2);
      assertEquals(3, strBuilder5.size());
      assertFalse(strBuilder5.isEmpty());
      assertEquals(3, strBuilder5.length());
      assertTrue(strBuilder5.isNotEmpty());
      assertNull(strBuilder5.getNullText());
      assertEquals(32, strBuilder5.capacity());
      assertNull(strBuilder5.getNewLineText());
      assertTrue(strBuilder7.isNotEmpty());
      assertEquals(32, strBuilder7.capacity());
      assertNull(strBuilder7.getNullText());
      assertEquals(3, strBuilder7.length());
      assertNull(strBuilder7.getNewLineText());
      assertFalse(strBuilder7.isEmpty());
      assertEquals(3, strBuilder7.size());
      assertNotNull(strBuilder7);
      assertFalse(strBuilder5.equals((Object)strBuilder4));
      assertFalse(strBuilder5.equals((Object)strBuilder0));
      assertFalse(strBuilder5.equals((Object)strBuilder1));
      assertFalse(strBuilder5.equals((Object)strBuilder2));
      assertFalse(strBuilder5.equals((Object)strBuilder6));
      assertFalse(strBuilder5.equals((Object)strBuilder3));
      assertFalse(strBuilder7.equals((Object)strBuilder2));
      assertFalse(strBuilder7.equals((Object)strBuilder6));
      assertFalse(strBuilder7.equals((Object)strBuilder3));
      assertFalse(strBuilder7.equals((Object)strBuilder4));
      assertFalse(strBuilder7.equals((Object)strBuilder0));
      assertFalse(strBuilder7.equals((Object)strBuilder1));
      assertArrayEquals(new char[] {'B', 'B', '`', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(7, charArray0.length);
      assertNotSame(strBuilder5, strBuilder4);
      assertNotSame(strBuilder5, strBuilder0);
      assertSame(strBuilder5, strBuilder7);
      assertNotSame(strBuilder5, strBuilder1);
      assertNotSame(strBuilder5, strBuilder2);
      assertNotSame(strBuilder5, strBuilder6);
      assertNotSame(strBuilder5, strBuilder3);
      assertNotSame(strBuilder7, strBuilder2);
      assertNotSame(strBuilder7, strBuilder6);
      assertNotSame(strBuilder7, strBuilder3);
      assertSame(strBuilder7, strBuilder5);
      assertNotSame(strBuilder7, strBuilder4);
      assertNotSame(strBuilder7, strBuilder0);
      assertNotSame(strBuilder7, strBuilder1);
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      StrBuilder strBuilder0 = new StrBuilder();
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.append(0.0F);
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(3, strBuilder0.length());
      assertEquals(3, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(3, strBuilder1.size());
      assertEquals(3, strBuilder1.length());
      assertTrue(strBuilder1.isNotEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertNotNull(strBuilder1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      
      StrBuilder strBuilder2 = strBuilder0.setNewLineText("ie:iu*-qhAy>XKa");
      assertEquals("ie:iu*-qhAy>XKa", strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(3, strBuilder0.length());
      assertEquals(3, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertTrue(strBuilder2.isNotEmpty());
      assertEquals(32, strBuilder2.capacity());
      assertNull(strBuilder2.getNullText());
      assertEquals(3, strBuilder2.size());
      assertEquals("ie:iu*-qhAy>XKa", strBuilder2.getNewLineText());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(3, strBuilder2.length());
      assertNotNull(strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      
      StrBuilder strBuilder3 = new StrBuilder();
      assertNull(strBuilder3.getNullText());
      assertEquals(0, strBuilder3.length());
      assertFalse(strBuilder3.isNotEmpty());
      assertEquals(0, strBuilder3.size());
      assertTrue(strBuilder3.isEmpty());
      assertEquals(32, strBuilder3.capacity());
      assertNull(strBuilder3.getNewLineText());
      assertNotNull(strBuilder3);
      assertFalse(strBuilder3.equals((Object)strBuilder1));
      assertFalse(strBuilder3.equals((Object)strBuilder2));
      assertFalse(strBuilder3.equals((Object)strBuilder0));
      
      StrBuilder strBuilder4 = strBuilder3.setNullText("ie:iu*-qhAy>XKa");
      assertEquals(0, strBuilder3.length());
      assertFalse(strBuilder3.isNotEmpty());
      assertEquals("ie:iu*-qhAy>XKa", strBuilder3.getNullText());
      assertEquals(0, strBuilder3.size());
      assertTrue(strBuilder3.isEmpty());
      assertEquals(32, strBuilder3.capacity());
      assertNull(strBuilder3.getNewLineText());
      assertNull(strBuilder4.getNewLineText());
      assertEquals(32, strBuilder4.capacity());
      assertTrue(strBuilder4.isEmpty());
      assertEquals(0, strBuilder4.size());
      assertEquals(0, strBuilder4.length());
      assertFalse(strBuilder4.isNotEmpty());
      assertEquals("ie:iu*-qhAy>XKa", strBuilder4.getNullText());
      assertNotNull(strBuilder4);
      assertFalse(strBuilder3.equals((Object)strBuilder1));
      assertFalse(strBuilder3.equals((Object)strBuilder2));
      assertFalse(strBuilder3.equals((Object)strBuilder0));
      assertFalse(strBuilder4.equals((Object)strBuilder2));
      assertFalse(strBuilder4.equals((Object)strBuilder0));
      assertFalse(strBuilder4.equals((Object)strBuilder1));
      assertNotSame(strBuilder3, strBuilder1);
      assertNotSame(strBuilder3, strBuilder2);
      assertNotSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder4);
      assertSame(strBuilder4, strBuilder3);
      assertNotSame(strBuilder4, strBuilder2);
      assertNotSame(strBuilder4, strBuilder0);
      assertNotSame(strBuilder4, strBuilder1);
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'N';
      charArray0[1] = 'N';
      StrBuilder strBuilder5 = strBuilder3.appendln(charArray0, 1, 1);
      assertTrue(strBuilder3.isNotEmpty());
      assertEquals(2, strBuilder3.size());
      assertEquals("ie:iu*-qhAy>XKa", strBuilder3.getNullText());
      assertFalse(strBuilder3.isEmpty());
      assertEquals(2, strBuilder3.length());
      assertEquals(32, strBuilder3.capacity());
      assertNull(strBuilder3.getNewLineText());
      assertEquals("ie:iu*-qhAy>XKa", strBuilder5.getNullText());
      assertFalse(strBuilder5.isEmpty());
      assertTrue(strBuilder5.isNotEmpty());
      assertEquals(32, strBuilder5.capacity());
      assertEquals(2, strBuilder5.length());
      assertEquals(2, strBuilder5.size());
      assertNull(strBuilder5.getNewLineText());
      assertNotNull(strBuilder5);
      assertFalse(strBuilder3.equals((Object)strBuilder1));
      assertFalse(strBuilder3.equals((Object)strBuilder2));
      assertFalse(strBuilder3.equals((Object)strBuilder0));
      assertFalse(strBuilder5.equals((Object)strBuilder1));
      assertFalse(strBuilder5.equals((Object)strBuilder2));
      assertFalse(strBuilder5.equals((Object)strBuilder0));
      assertArrayEquals(new char[] {'N', 'N'}, charArray0);
      assertEquals(2, charArray0.length);
      assertNotSame(strBuilder3, strBuilder1);
      assertNotSame(strBuilder3, strBuilder2);
      assertSame(strBuilder3, strBuilder5);
      assertNotSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder4);
      assertNotSame(strBuilder5, strBuilder1);
      assertSame(strBuilder5, strBuilder3);
      assertNotSame(strBuilder5, strBuilder2);
      assertNotSame(strBuilder5, strBuilder0);
      assertSame(strBuilder5, strBuilder4);
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("^idxVa9J(IJ6fm");
      assertNull(strBuilder0.getNullText());
      assertEquals(14, strBuilder0.size());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(14, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(46, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.append((Object) "^idxVa9J(IJ6fm");
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(28, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(46, strBuilder0.capacity());
      assertEquals(28, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder1.isNotEmpty());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(28, strBuilder1.size());
      assertEquals(28, strBuilder1.length());
      assertEquals(46, strBuilder1.capacity());
      assertNull(strBuilder1.getNullText());
      assertNotNull(strBuilder1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "^idxVa9J(IJ6fm");
      assertFalse(boolean0);
      
      StrBuilder strBuilder2 = new StrBuilder("^idxVa9J(IJ6fm");
      assertEquals(14, strBuilder2.size());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(14, strBuilder2.length());
      assertTrue(strBuilder2.isNotEmpty());
      assertNull(strBuilder2.getNullText());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(46, strBuilder2.capacity());
      assertNotNull(strBuilder2);
      assertFalse(strBuilder2.equals((Object)strBuilder0));
      assertFalse(strBuilder2.equals((Object)strBuilder1));
      
      StrBuilder strBuilder3 = strBuilder2.appendln((-690.9955657006));
      assertEquals(30, strBuilder2.size());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(30, strBuilder2.length());
      assertTrue(strBuilder2.isNotEmpty());
      assertNull(strBuilder2.getNullText());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(46, strBuilder2.capacity());
      assertNull(strBuilder3.getNullText());
      assertEquals(30, strBuilder3.length());
      assertEquals(30, strBuilder3.size());
      assertFalse(strBuilder3.isEmpty());
      assertEquals(46, strBuilder3.capacity());
      assertNull(strBuilder3.getNewLineText());
      assertTrue(strBuilder3.isNotEmpty());
      assertNotNull(strBuilder3);
      assertFalse(strBuilder2.equals((Object)strBuilder0));
      assertFalse(strBuilder2.equals((Object)strBuilder1));
      assertFalse(strBuilder3.equals((Object)strBuilder1));
      assertFalse(strBuilder3.equals((Object)strBuilder0));
      assertNotSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder3);
      assertNotSame(strBuilder2, strBuilder1);
      assertSame(strBuilder3, strBuilder2);
      assertNotSame(strBuilder3, strBuilder1);
      assertNotSame(strBuilder3, strBuilder0);
      
      // Undeclared exception!
      try { 
        CharBuffer.wrap((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(2246);
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(2246, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder0.isEmpty());
      assertNotNull(strBuilder0);
      
      char[] charArray0 = new char[6];
      charArray0[0] = 's';
      charArray0[1] = 'J';
      charArray0[2] = '5';
      charArray0[3] = 'm';
      charArray0[4] = '&';
      charArray0[5] = 'i';
      char[] charArray1 = strBuilder0.getChars(charArray0);
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(2246, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder0.isEmpty());
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'s', 'J', '5', 'm', '&', 'i'}, charArray0);
      assertArrayEquals(new char[] {'s', 'J', '5', 'm', '&', 'i'}, charArray1);
      assertEquals(6, charArray0.length);
      assertEquals(6, charArray1.length);
      assertSame(charArray0, charArray1);
      assertSame(charArray1, charArray0);
      
      StrBuilder strBuilder1 = strBuilder0.clear();
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(2246, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder1.length());
      assertEquals(2246, strBuilder1.capacity());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(0, strBuilder1.size());
      assertTrue(strBuilder1.isEmpty());
      assertFalse(strBuilder1.isNotEmpty());
      assertNotNull(strBuilder1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      
      StrBuilder strBuilder2 = strBuilder0.appendln((StringBuilder) null);
      assertEquals(2246, strBuilder0.capacity());
      assertEquals(1, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(1, strBuilder0.length());
      assertEquals(2246, strBuilder2.capacity());
      assertEquals(1, strBuilder2.size());
      assertEquals(1, strBuilder2.length());
      assertNull(strBuilder2.getNullText());
      assertTrue(strBuilder2.isNotEmpty());
      assertNull(strBuilder2.getNewLineText());
      assertFalse(strBuilder2.isEmpty());
      assertNotNull(strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder1.new StrBuilderReader();
      assertEquals(2246, strBuilder0.capacity());
      assertEquals(1, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(1, strBuilder0.length());
      assertEquals(2246, strBuilder1.capacity());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(1, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(1, strBuilder1.length());
      assertTrue(strBuilder1.isNotEmpty());
      assertTrue(strBuilder_StrBuilderReader0.markSupported());
      assertTrue(strBuilder_StrBuilderReader0.ready());
      assertNotNull(strBuilder_StrBuilderReader0);
      
      int int0 = strBuilder_StrBuilderReader0.read();
      assertEquals(2246, strBuilder0.capacity());
      assertEquals(1, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(1, strBuilder0.length());
      assertEquals(2246, strBuilder1.capacity());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(1, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(1, strBuilder1.length());
      assertTrue(strBuilder1.isNotEmpty());
      assertTrue(strBuilder_StrBuilderReader0.markSupported());
      assertFalse(strBuilder_StrBuilderReader0.ready());
      assertEquals(10, int0);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder2);
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertFalse(strBuilder0.isNotEmpty());
      assertNotNull(strBuilder0);
      
      char[] charArray0 = new char[0];
      StrBuilder strBuilder1 = strBuilder0.appendln(charArray0);
      assertEquals(1, strBuilder0.size());
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(1, strBuilder0.length());
      assertTrue(strBuilder1.isNotEmpty());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(1, strBuilder1.size());
      assertEquals(1, strBuilder1.length());
      assertNotNull(strBuilder1);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      
      StrBuilder strBuilder2 = new StrBuilder();
      assertNull(strBuilder2.getNullText());
      assertEquals(0, strBuilder2.size());
      assertEquals(0, strBuilder2.length());
      assertFalse(strBuilder2.isNotEmpty());
      assertTrue(strBuilder2.isEmpty());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(32, strBuilder2.capacity());
      assertNotNull(strBuilder2);
      assertFalse(strBuilder2.equals((Object)strBuilder0));
      assertFalse(strBuilder2.equals((Object)strBuilder1));
      
      Vector<Locale.FilteringMode> vector0 = new Vector<Locale.FilteringMode>();
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertNotNull(vector0);
      
      Vector<Object> vector1 = new Vector<Object>();
      assertTrue(vector1.isEmpty());
      assertEquals("[]", vector1.toString());
      assertEquals(10, vector1.capacity());
      assertEquals(0, vector1.size());
      assertNotNull(vector1);
      
      StrBuilder strBuilder3 = strBuilder1.appendAll((Iterable<?>) vector0);
      assertEquals(1, strBuilder0.size());
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(1, strBuilder0.length());
      assertTrue(strBuilder1.isNotEmpty());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(1, strBuilder1.size());
      assertEquals(1, strBuilder1.length());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertEquals(32, strBuilder3.capacity());
      assertTrue(strBuilder3.isNotEmpty());
      assertNull(strBuilder3.getNullText());
      assertNull(strBuilder3.getNewLineText());
      assertEquals(1, strBuilder3.size());
      assertFalse(strBuilder3.isEmpty());
      assertEquals(1, strBuilder3.length());
      assertNotNull(strBuilder3);
      assertFalse(strBuilder0.equals((Object)strBuilder2));
      assertFalse(strBuilder1.equals((Object)strBuilder2));
      assertFalse(strBuilder3.equals((Object)strBuilder2));
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      assertNotSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder0);
      assertNotSame(strBuilder1, strBuilder2);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder0);
      assertNotSame(strBuilder3, strBuilder2);
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertTrue(strBuilder0.isEmpty());
      assertFalse(strBuilder0.isNotEmpty());
      assertNotNull(strBuilder0);
      
      char[] charArray0 = strBuilder0.toCharArray(0, 60);
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertTrue(strBuilder0.isEmpty());
      assertFalse(strBuilder0.isNotEmpty());
      assertNotNull(charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      
      Writer writer0 = strBuilder0.asWriter();
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertTrue(strBuilder0.isEmpty());
      assertFalse(strBuilder0.isNotEmpty());
      assertNotNull(writer0);
      
      char[] charArray1 = new char[0];
      assertFalse(charArray1.equals((Object)charArray0));
      
      StrBuilder strBuilder1 = strBuilder0.append(charArray1, 0, 0);
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertTrue(strBuilder0.isEmpty());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder1.length());
      assertEquals(0, strBuilder1.size());
      assertFalse(strBuilder1.isNotEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertTrue(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertNotNull(strBuilder1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {}, charArray1);
      assertEquals(0, charArray1.length);
      assertSame(strBuilder0, strBuilder1);
      assertNotSame(charArray1, charArray0);
      assertSame(strBuilder1, strBuilder0);
      
      StringBuilder stringBuilder0 = new StringBuilder();
      assertEquals("", stringBuilder0.toString());
      assertNotNull(stringBuilder0);
      
      StringBuilder stringBuilder1 = stringBuilder0.append('\"');
      assertEquals("\"", stringBuilder0.toString());
      assertEquals("\"", stringBuilder1.toString());
      assertNotNull(stringBuilder1);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder1, stringBuilder0);
      
      StrBuilder strBuilder2 = strBuilder0.deleteFirst('\"');
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertTrue(strBuilder0.isEmpty());
      assertFalse(strBuilder0.isNotEmpty());
      assertFalse(strBuilder2.isNotEmpty());
      assertEquals(0, strBuilder2.size());
      assertNull(strBuilder2.getNullText());
      assertEquals(0, strBuilder2.length());
      assertTrue(strBuilder2.isEmpty());
      assertEquals(32, strBuilder2.capacity());
      assertNull(strBuilder2.getNewLineText());
      assertNotNull(strBuilder2);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      
      StrBuilder strBuilder3 = strBuilder1.appendSeparator("p2vtx[:.", 26);
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(8, strBuilder0.size());
      assertEquals(8, strBuilder0.length());
      assertTrue(strBuilder1.isNotEmpty());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(8, strBuilder1.length());
      assertEquals(8, strBuilder1.size());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertFalse(strBuilder3.isEmpty());
      assertEquals(32, strBuilder3.capacity());
      assertTrue(strBuilder3.isNotEmpty());
      assertNull(strBuilder3.getNullText());
      assertEquals(8, strBuilder3.length());
      assertNull(strBuilder3.getNewLineText());
      assertEquals(8, strBuilder3.size());
      assertNotNull(strBuilder3);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {}, charArray1);
      assertEquals(0, charArray1.length);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder3);
      assertNotSame(charArray1, charArray0);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder3, strBuilder2);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder0);
      
      // Undeclared exception!
      try { 
        strBuilder0.insert(0, charArray1, 26, 60);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // Invalid offset: 26
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(0);
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertFalse(strBuilder0.isNotEmpty());
      assertNotNull(strBuilder0);
      
      char[] charArray0 = strBuilder0.toCharArray();
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertFalse(strBuilder0.isNotEmpty());
      assertNotNull(charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      
      char char0 = 'R';
      StrBuilder strBuilder1 = strBuilder0.appendSeparator('R');
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertFalse(strBuilder0.isNotEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(0, strBuilder1.length());
      assertEquals(0, strBuilder1.size());
      assertFalse(strBuilder1.isNotEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertTrue(strBuilder1.isEmpty());
      assertNotNull(strBuilder1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      
      StrBuilder strBuilder2 = strBuilder0.appendln((double) 'R');
      assertEquals(5, strBuilder0.length());
      assertEquals(5, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertTrue(strBuilder2.isNotEmpty());
      assertEquals(5, strBuilder2.size());
      assertNull(strBuilder2.getNullText());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(32, strBuilder2.capacity());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(5, strBuilder2.length());
      assertNotNull(strBuilder2);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      
      // Undeclared exception!
      try { 
        strBuilder0.insert(0, charArray0, (-772), (-151));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // Invalid offset: -772
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(0);
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.setLength(0);
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder1.isNotEmpty());
      assertEquals(0, strBuilder1.length());
      assertEquals(0, strBuilder1.size());
      assertEquals(32, strBuilder1.capacity());
      assertTrue(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertNotNull(strBuilder1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      
      char[] charArray0 = strBuilder0.toCharArray();
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertNotNull(charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      assertSame(strBuilder0, strBuilder1);
      
      char char0 = 'R';
      StrBuilder strBuilder2 = strBuilder1.appendSeparator('R');
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder1.isNotEmpty());
      assertEquals(0, strBuilder1.length());
      assertEquals(0, strBuilder1.size());
      assertEquals(32, strBuilder1.capacity());
      assertTrue(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertTrue(strBuilder2.isEmpty());
      assertFalse(strBuilder2.isNotEmpty());
      assertEquals(32, strBuilder2.capacity());
      assertNull(strBuilder2.getNullText());
      assertEquals(0, strBuilder2.length());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(0, strBuilder2.size());
      assertNotNull(strBuilder2);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      
      StrBuilder strBuilder3 = strBuilder0.appendln(0.7);
      assertEquals(4, strBuilder0.size());
      assertEquals(4, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder3.capacity());
      assertEquals(4, strBuilder3.length());
      assertFalse(strBuilder3.isEmpty());
      assertTrue(strBuilder3.isNotEmpty());
      assertNull(strBuilder3.getNewLineText());
      assertEquals(4, strBuilder3.size());
      assertNull(strBuilder3.getNullText());
      assertNotNull(strBuilder3);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder2);
      
      int int0 = (-772);
      // Undeclared exception!
      try { 
        strBuilder1.insert(0, charArray0, (-772), (-151));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // Invalid offset: -772
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(1759);
      assertTrue(strBuilder0.isEmpty());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertEquals(1759, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.appendSeparator("', has a length less than 2", "', has a length less than 2");
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(27, strBuilder0.length());
      assertEquals(27, strBuilder0.size());
      assertEquals(1759, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(1759, strBuilder1.capacity());
      assertEquals(27, strBuilder1.length());
      assertEquals(27, strBuilder1.size());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertTrue(strBuilder1.isNotEmpty());
      assertFalse(strBuilder1.isEmpty());
      assertNotNull(strBuilder1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      
      StrBuilder strBuilder2 = strBuilder0.appendPadding(1759, 'Q');
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(3572, strBuilder0.capacity());
      assertEquals(1786, strBuilder0.length());
      assertEquals(1786, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(1786, strBuilder2.length());
      assertFalse(strBuilder2.isEmpty());
      assertNull(strBuilder2.getNullText());
      assertEquals(3572, strBuilder2.capacity());
      assertTrue(strBuilder2.isNotEmpty());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(1786, strBuilder2.size());
      assertNotNull(strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      
      StrBuilder strBuilder3 = strBuilder2.append((float) 1);
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(3572, strBuilder0.capacity());
      assertEquals(1789, strBuilder0.length());
      assertEquals(1789, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder2.isEmpty());
      assertNull(strBuilder2.getNullText());
      assertEquals(3572, strBuilder2.capacity());
      assertTrue(strBuilder2.isNotEmpty());
      assertEquals(1789, strBuilder2.length());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(1789, strBuilder2.size());
      assertNull(strBuilder3.getNewLineText());
      assertFalse(strBuilder3.isEmpty());
      assertNull(strBuilder3.getNullText());
      assertEquals(1789, strBuilder3.size());
      assertTrue(strBuilder3.isNotEmpty());
      assertEquals(1789, strBuilder3.length());
      assertEquals(3572, strBuilder3.capacity());
      assertNotNull(strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder3);
      assertSame(strBuilder3, strBuilder2);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder0);
      
      boolean boolean0 = strBuilder0.contains(';');
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(3572, strBuilder0.capacity());
      assertEquals(1789, strBuilder0.length());
      assertEquals(1789, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(boolean0);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder3);
      
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder1.new StrBuilderReader();
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(3572, strBuilder0.capacity());
      assertEquals(1789, strBuilder0.length());
      assertEquals(1789, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(3572, strBuilder1.capacity());
      assertEquals(1789, strBuilder1.size());
      assertTrue(strBuilder1.isNotEmpty());
      assertEquals(1789, strBuilder1.length());
      assertFalse(strBuilder1.isEmpty());
      assertTrue(strBuilder_StrBuilderReader0.markSupported());
      assertTrue(strBuilder_StrBuilderReader0.ready());
      assertNotNull(strBuilder_StrBuilderReader0);
      
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) strBuilder_StrBuilderReader0;
      objectArray0[1] = (Object) strBuilder2;
      StrBuilder strBuilder4 = new StrBuilder();
      assertTrue(strBuilder4.isEmpty());
      assertEquals(0, strBuilder4.length());
      assertFalse(strBuilder4.isNotEmpty());
      assertEquals(0, strBuilder4.size());
      assertEquals(32, strBuilder4.capacity());
      assertNull(strBuilder4.getNullText());
      assertNull(strBuilder4.getNewLineText());
      assertNotNull(strBuilder4);
      assertFalse(strBuilder4.equals((Object)strBuilder3));
      assertFalse(strBuilder4.equals((Object)strBuilder0));
      assertFalse(strBuilder4.equals((Object)strBuilder1));
      assertFalse(strBuilder4.equals((Object)strBuilder2));
      
      StrBuilder strBuilder5 = new StrBuilder(1);
      assertFalse(strBuilder5.isNotEmpty());
      assertEquals(0, strBuilder5.size());
      assertEquals(0, strBuilder5.length());
      assertEquals(1, strBuilder5.capacity());
      assertTrue(strBuilder5.isEmpty());
      assertNull(strBuilder5.getNullText());
      assertNull(strBuilder5.getNewLineText());
      assertNotNull(strBuilder5);
      assertFalse(strBuilder5.equals((Object)strBuilder2));
      assertFalse(strBuilder5.equals((Object)strBuilder3));
      assertFalse(strBuilder5.equals((Object)strBuilder0));
      assertFalse(strBuilder5.equals((Object)strBuilder1));
      assertTrue(strBuilder5.equals((Object)strBuilder4));
      
      StrBuilder strBuilder6 = strBuilder4.appendln(0L);
      assertEquals(2, strBuilder4.size());
      assertEquals(2, strBuilder4.length());
      assertTrue(strBuilder4.isNotEmpty());
      assertFalse(strBuilder4.isEmpty());
      assertEquals(32, strBuilder4.capacity());
      assertNull(strBuilder4.getNullText());
      assertNull(strBuilder4.getNewLineText());
      assertEquals(2, strBuilder6.size());
      assertNull(strBuilder6.getNewLineText());
      assertTrue(strBuilder6.isNotEmpty());
      assertNull(strBuilder6.getNullText());
      assertEquals(32, strBuilder6.capacity());
      assertFalse(strBuilder6.isEmpty());
      assertEquals(2, strBuilder6.length());
      assertNotNull(strBuilder6);
      assertFalse(strBuilder4.equals((Object)strBuilder5));
      assertFalse(strBuilder4.equals((Object)strBuilder3));
      assertFalse(strBuilder4.equals((Object)strBuilder0));
      assertFalse(strBuilder4.equals((Object)strBuilder1));
      assertFalse(strBuilder4.equals((Object)strBuilder2));
      assertFalse(strBuilder6.equals((Object)strBuilder1));
      assertFalse(strBuilder6.equals((Object)strBuilder2));
      assertFalse(strBuilder6.equals((Object)strBuilder5));
      assertFalse(strBuilder6.equals((Object)strBuilder0));
      assertFalse(strBuilder6.equals((Object)strBuilder3));
      assertNotSame(strBuilder4, strBuilder5);
      assertNotSame(strBuilder4, strBuilder3);
      assertNotSame(strBuilder4, strBuilder0);
      assertSame(strBuilder4, strBuilder6);
      assertNotSame(strBuilder4, strBuilder1);
      assertNotSame(strBuilder4, strBuilder2);
      assertSame(strBuilder6, strBuilder4);
      assertNotSame(strBuilder6, strBuilder1);
      assertNotSame(strBuilder6, strBuilder2);
      assertNotSame(strBuilder6, strBuilder5);
      assertNotSame(strBuilder6, strBuilder0);
      assertNotSame(strBuilder6, strBuilder3);
      
      StrBuilder strBuilder7 = new StrBuilder();
      assertNull(strBuilder7.getNewLineText());
      assertEquals(32, strBuilder7.capacity());
      assertEquals(0, strBuilder7.size());
      assertEquals(0, strBuilder7.length());
      assertFalse(strBuilder7.isNotEmpty());
      assertNull(strBuilder7.getNullText());
      assertTrue(strBuilder7.isEmpty());
      assertNotNull(strBuilder7);
      assertFalse(strBuilder7.equals((Object)strBuilder3));
      assertFalse(strBuilder7.equals((Object)strBuilder0));
      assertFalse(strBuilder7.equals((Object)strBuilder4));
      assertFalse(strBuilder7.equals((Object)strBuilder6));
      assertTrue(strBuilder7.equals((Object)strBuilder5));
      assertFalse(strBuilder7.equals((Object)strBuilder1));
      assertFalse(strBuilder7.equals((Object)strBuilder2));
      
      String string0 = strBuilder4.midString((-3056), (-18));
      assertEquals(2, strBuilder4.size());
      assertEquals(2, strBuilder4.length());
      assertTrue(strBuilder4.isNotEmpty());
      assertFalse(strBuilder4.isEmpty());
      assertEquals(32, strBuilder4.capacity());
      assertNull(strBuilder4.getNullText());
      assertNull(strBuilder4.getNewLineText());
      assertNotNull(string0);
      assertEquals("", string0);
      assertFalse(strBuilder4.equals((Object)strBuilder7));
      assertFalse(strBuilder4.equals((Object)strBuilder5));
      assertFalse(strBuilder4.equals((Object)strBuilder3));
      assertFalse(strBuilder4.equals((Object)strBuilder0));
      assertFalse(strBuilder4.equals((Object)strBuilder1));
      assertFalse(strBuilder4.equals((Object)strBuilder2));
      assertNotSame(strBuilder4, strBuilder7);
      assertNotSame(strBuilder4, strBuilder5);
      assertNotSame(strBuilder4, strBuilder3);
      assertNotSame(strBuilder4, strBuilder0);
      assertSame(strBuilder4, strBuilder6);
      assertNotSame(strBuilder4, strBuilder1);
      assertNotSame(strBuilder4, strBuilder2);
      
      StrBuilder strBuilder8 = new StrBuilder(29);
      assertEquals(29, strBuilder8.capacity());
      assertTrue(strBuilder8.isEmpty());
      assertNull(strBuilder8.getNullText());
      assertNull(strBuilder8.getNewLineText());
      assertEquals(0, strBuilder8.size());
      assertEquals(0, strBuilder8.length());
      assertFalse(strBuilder8.isNotEmpty());
      assertNotNull(strBuilder8);
      assertFalse(strBuilder8.equals((Object)strBuilder3));
      assertFalse(strBuilder8.equals((Object)strBuilder2));
      assertFalse(strBuilder8.equals((Object)strBuilder4));
      assertFalse(strBuilder8.equals((Object)strBuilder6));
      assertFalse(strBuilder8.equals((Object)strBuilder1));
      assertTrue(strBuilder8.equals((Object)strBuilder7));
      assertTrue(strBuilder8.equals((Object)strBuilder5));
      assertFalse(strBuilder8.equals((Object)strBuilder0));
      
      boolean boolean1 = strBuilder4.isNotEmpty();
      assertEquals(2, strBuilder4.size());
      assertEquals(2, strBuilder4.length());
      assertTrue(strBuilder4.isNotEmpty());
      assertFalse(strBuilder4.isEmpty());
      assertEquals(32, strBuilder4.capacity());
      assertNull(strBuilder4.getNullText());
      assertNull(strBuilder4.getNewLineText());
      assertTrue(boolean1);
      assertFalse(strBuilder4.equals((Object)strBuilder7));
      assertFalse(strBuilder4.equals((Object)strBuilder5));
      assertFalse(strBuilder4.equals((Object)strBuilder3));
      assertFalse(strBuilder4.equals((Object)strBuilder0));
      assertFalse(strBuilder4.equals((Object)strBuilder8));
      assertFalse(strBuilder4.equals((Object)strBuilder1));
      assertFalse(strBuilder4.equals((Object)strBuilder2));
      assertFalse(boolean1 == boolean0);
      assertNotSame(strBuilder4, strBuilder7);
      assertNotSame(strBuilder4, strBuilder5);
      assertNotSame(strBuilder4, strBuilder3);
      assertNotSame(strBuilder4, strBuilder0);
      assertSame(strBuilder4, strBuilder6);
      assertNotSame(strBuilder4, strBuilder8);
      assertNotSame(strBuilder4, strBuilder1);
      assertNotSame(strBuilder4, strBuilder2);
      
      strBuilder3.hashCode();
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(3572, strBuilder0.capacity());
      assertEquals(1789, strBuilder0.length());
      assertEquals(1789, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder2.isEmpty());
      assertNull(strBuilder2.getNullText());
      assertEquals(3572, strBuilder2.capacity());
      assertTrue(strBuilder2.isNotEmpty());
      assertEquals(1789, strBuilder2.length());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(1789, strBuilder2.size());
      assertNull(strBuilder3.getNewLineText());
      assertFalse(strBuilder3.isEmpty());
      assertNull(strBuilder3.getNullText());
      assertEquals(1789, strBuilder3.size());
      assertTrue(strBuilder3.isNotEmpty());
      assertEquals(1789, strBuilder3.length());
      assertEquals(3572, strBuilder3.capacity());
      assertFalse(strBuilder0.equals((Object)strBuilder7));
      assertFalse(strBuilder0.equals((Object)strBuilder5));
      assertFalse(strBuilder0.equals((Object)strBuilder4));
      assertFalse(strBuilder0.equals((Object)strBuilder8));
      assertFalse(strBuilder0.equals((Object)strBuilder6));
      assertFalse(strBuilder2.equals((Object)strBuilder5));
      assertFalse(strBuilder2.equals((Object)strBuilder7));
      assertFalse(strBuilder2.equals((Object)strBuilder8));
      assertFalse(strBuilder2.equals((Object)strBuilder4));
      assertFalse(strBuilder2.equals((Object)strBuilder6));
      assertFalse(strBuilder3.equals((Object)strBuilder7));
      assertFalse(strBuilder3.equals((Object)strBuilder8));
      assertFalse(strBuilder3.equals((Object)strBuilder6));
      assertFalse(strBuilder3.equals((Object)strBuilder5));
      assertFalse(strBuilder3.equals((Object)strBuilder4));
      assertNotSame(strBuilder0, strBuilder7);
      assertNotSame(strBuilder0, strBuilder5);
      assertNotSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertNotSame(strBuilder0, strBuilder8);
      assertSame(strBuilder0, strBuilder3);
      assertNotSame(strBuilder0, strBuilder6);
      assertSame(strBuilder2, strBuilder1);
      assertNotSame(strBuilder2, strBuilder5);
      assertNotSame(strBuilder2, strBuilder7);
      assertNotSame(strBuilder2, strBuilder8);
      assertNotSame(strBuilder2, strBuilder4);
      assertNotSame(strBuilder2, strBuilder6);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder3);
      assertSame(strBuilder3, strBuilder2);
      assertSame(strBuilder3, strBuilder1);
      assertNotSame(strBuilder3, strBuilder7);
      assertNotSame(strBuilder3, strBuilder8);
      assertNotSame(strBuilder3, strBuilder6);
      assertSame(strBuilder3, strBuilder0);
      assertNotSame(strBuilder3, strBuilder5);
      assertNotSame(strBuilder3, strBuilder4);
      
      StrBuilder strBuilder9 = strBuilder3.append(1.0F);
      assertFalse(strBuilder0.isEmpty());
      assertEquals(1792, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(3572, strBuilder0.capacity());
      assertEquals(1792, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(1792, strBuilder9.length());
      assertEquals(3572, strBuilder9.capacity());
      assertEquals(1792, strBuilder9.size());
      assertFalse(strBuilder9.isEmpty());
      assertNull(strBuilder9.getNewLineText());
      assertNull(strBuilder9.getNullText());
      assertTrue(strBuilder9.isNotEmpty());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(1792, strBuilder2.size());
      assertNull(strBuilder2.getNullText());
      assertEquals(3572, strBuilder2.capacity());
      assertEquals(1792, strBuilder2.length());
      assertTrue(strBuilder2.isNotEmpty());
      assertNull(strBuilder2.getNewLineText());
      assertNull(strBuilder3.getNewLineText());
      assertFalse(strBuilder3.isEmpty());
      assertNull(strBuilder3.getNullText());
      assertEquals(1792, strBuilder3.size());
      assertTrue(strBuilder3.isNotEmpty());
      assertEquals(3572, strBuilder3.capacity());
      assertEquals(1792, strBuilder3.length());
      assertNotNull(strBuilder9);
      assertFalse(strBuilder0.equals((Object)strBuilder7));
      assertFalse(strBuilder0.equals((Object)strBuilder5));
      assertFalse(strBuilder0.equals((Object)strBuilder4));
      assertFalse(strBuilder0.equals((Object)strBuilder8));
      assertFalse(strBuilder0.equals((Object)strBuilder6));
      assertFalse(strBuilder9.equals((Object)strBuilder4));
      assertFalse(strBuilder9.equals((Object)strBuilder6));
      assertFalse(strBuilder9.equals((Object)strBuilder7));
      assertFalse(strBuilder9.equals((Object)strBuilder8));
      assertFalse(strBuilder9.equals((Object)strBuilder5));
      assertFalse(strBuilder2.equals((Object)strBuilder5));
      assertFalse(strBuilder2.equals((Object)strBuilder7));
      assertFalse(strBuilder2.equals((Object)strBuilder8));
      assertFalse(strBuilder2.equals((Object)strBuilder4));
      assertFalse(strBuilder2.equals((Object)strBuilder6));
      assertFalse(strBuilder3.equals((Object)strBuilder7));
      assertFalse(strBuilder3.equals((Object)strBuilder8));
      assertFalse(strBuilder3.equals((Object)strBuilder6));
      assertFalse(strBuilder3.equals((Object)strBuilder5));
      assertFalse(strBuilder3.equals((Object)strBuilder4));
      assertNotSame(strBuilder0, strBuilder7);
      assertNotSame(strBuilder0, strBuilder5);
      assertNotSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder9);
      assertNotSame(strBuilder0, strBuilder8);
      assertSame(strBuilder0, strBuilder3);
      assertNotSame(strBuilder0, strBuilder6);
      assertNotSame(strBuilder9, strBuilder4);
      assertNotSame(strBuilder9, strBuilder6);
      assertNotSame(strBuilder9, strBuilder7);
      assertSame(strBuilder9, strBuilder1);
      assertSame(strBuilder9, strBuilder2);
      assertNotSame(strBuilder9, strBuilder8);
      assertNotSame(strBuilder9, strBuilder5);
      assertSame(strBuilder9, strBuilder0);
      assertSame(strBuilder9, strBuilder3);
      assertSame(strBuilder2, strBuilder1);
      assertNotSame(strBuilder2, strBuilder5);
      assertNotSame(strBuilder2, strBuilder7);
      assertSame(strBuilder2, strBuilder9);
      assertNotSame(strBuilder2, strBuilder8);
      assertNotSame(strBuilder2, strBuilder4);
      assertNotSame(strBuilder2, strBuilder6);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder3);
      assertSame(strBuilder3, strBuilder2);
      assertSame(strBuilder3, strBuilder1);
      assertNotSame(strBuilder3, strBuilder7);
      assertNotSame(strBuilder3, strBuilder8);
      assertNotSame(strBuilder3, strBuilder6);
      assertSame(strBuilder3, strBuilder9);
      assertSame(strBuilder3, strBuilder0);
      assertNotSame(strBuilder3, strBuilder5);
      assertNotSame(strBuilder3, strBuilder4);
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(0);
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.appendPadding(0, 'F');
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNullText());
      assertFalse(strBuilder1.isNotEmpty());
      assertTrue(strBuilder1.isEmpty());
      assertEquals(0, strBuilder1.length());
      assertEquals(0, strBuilder1.size());
      assertNotNull(strBuilder1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      
      StrBuilder strBuilder2 = strBuilder0.appendSeparator('F', (-773));
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertFalse(strBuilder2.isNotEmpty());
      assertEquals(0, strBuilder2.length());
      assertEquals(0, strBuilder2.size());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(32, strBuilder2.capacity());
      assertTrue(strBuilder2.isEmpty());
      assertNull(strBuilder2.getNullText());
      assertNotNull(strBuilder2);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      
      StrBuilder strBuilder3 = strBuilder2.appendFixedWidthPadRight((Object) strBuilder0, 0, 'F');
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertFalse(strBuilder2.isNotEmpty());
      assertEquals(0, strBuilder2.length());
      assertEquals(0, strBuilder2.size());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(32, strBuilder2.capacity());
      assertTrue(strBuilder2.isEmpty());
      assertNull(strBuilder2.getNullText());
      assertEquals(0, strBuilder3.size());
      assertFalse(strBuilder3.isNotEmpty());
      assertNull(strBuilder3.getNullText());
      assertNull(strBuilder3.getNewLineText());
      assertEquals(32, strBuilder3.capacity());
      assertTrue(strBuilder3.isEmpty());
      assertEquals(0, strBuilder3.length());
      assertNotNull(strBuilder3);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder3);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder3, strBuilder2);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder1);
      
      StrBuilder strBuilder4 = strBuilder0.appendSeparator((String) null);
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertFalse(strBuilder4.isNotEmpty());
      assertEquals(0, strBuilder4.size());
      assertNull(strBuilder4.getNullText());
      assertEquals(0, strBuilder4.length());
      assertEquals(32, strBuilder4.capacity());
      assertNull(strBuilder4.getNewLineText());
      assertTrue(strBuilder4.isEmpty());
      assertNotNull(strBuilder4);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder4, strBuilder3);
      assertSame(strBuilder4, strBuilder0);
      assertSame(strBuilder4, strBuilder1);
      assertSame(strBuilder4, strBuilder2);
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isEmpty());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = new StrBuilder("Search and Replace array lengths don't match: ");
      assertTrue(strBuilder1.isNotEmpty());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(46, strBuilder1.length());
      assertEquals(46, strBuilder1.size());
      assertEquals(78, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertNotNull(strBuilder1);
      assertFalse(strBuilder1.equals((Object)strBuilder0));
      
      StrBuilder strBuilder2 = strBuilder1.replaceAll("Search and Replace array lengths don't match: ", "");
      assertEquals(0, strBuilder1.size());
      assertFalse(strBuilder1.isNotEmpty());
      assertEquals(0, strBuilder1.length());
      assertTrue(strBuilder1.isEmpty());
      assertEquals(78, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(78, strBuilder2.capacity());
      assertFalse(strBuilder2.isNotEmpty());
      assertEquals(0, strBuilder2.size());
      assertNull(strBuilder2.getNullText());
      assertEquals(0, strBuilder2.length());
      assertNull(strBuilder2.getNewLineText());
      assertTrue(strBuilder2.isEmpty());
      assertNotNull(strBuilder2);
      assertTrue(strBuilder1.equals((Object)strBuilder0));
      assertTrue(strBuilder2.equals((Object)strBuilder0));
      assertNotSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder2, strBuilder1);
      assertNotSame(strBuilder2, strBuilder0);
      
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) strBuilder2;
      objectArray0[1] = (Object) strBuilder0;
      objectArray0[2] = (Object) strBuilder2;
      objectArray0[3] = (Object) strBuilder1;
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[4] = object0;
      objectArray0[5] = (Object) strBuilder2;
      objectArray0[6] = (Object) strBuilder0;
      objectArray0[7] = (Object) "";
      objectArray0[8] = (Object) "Search and Replace array lengths don't match: ";
      StrBuilder strBuilder3 = strBuilder2.appendln("", objectArray0);
      assertEquals(1, strBuilder1.size());
      assertEquals(1, strBuilder1.length());
      assertTrue(strBuilder1.isNotEmpty());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(78, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(78, strBuilder2.capacity());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(1, strBuilder2.length());
      assertEquals(1, strBuilder2.size());
      assertNull(strBuilder2.getNullText());
      assertTrue(strBuilder2.isNotEmpty());
      assertNull(strBuilder2.getNewLineText());
      assertTrue(strBuilder3.isNotEmpty());
      assertNull(strBuilder3.getNewLineText());
      assertEquals(78, strBuilder3.capacity());
      assertNull(strBuilder3.getNullText());
      assertEquals(1, strBuilder3.length());
      assertFalse(strBuilder3.isEmpty());
      assertEquals(1, strBuilder3.size());
      assertNotNull(strBuilder3);
      assertFalse(strBuilder1.equals((Object)strBuilder0));
      assertFalse(strBuilder2.equals((Object)strBuilder0));
      assertFalse(strBuilder3.equals((Object)strBuilder0));
      assertEquals(9, objectArray0.length);
      assertNotSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder2, strBuilder1);
      assertNotSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder3);
      assertNotSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder2);
      
      int int0 = strBuilder1.lastIndexOf('$');
      assertEquals(1, strBuilder1.size());
      assertEquals(1, strBuilder1.length());
      assertTrue(strBuilder1.isNotEmpty());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(78, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals((-1), int0);
      assertFalse(strBuilder1.equals((Object)strBuilder0));
      assertNotSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder3);
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertFalse(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.trim();
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertFalse(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertTrue(strBuilder1.isEmpty());
      assertFalse(strBuilder1.isNotEmpty());
      assertEquals(0, strBuilder1.size());
      assertEquals(0, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertNotNull(strBuilder1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      
      char[] charArray0 = strBuilder0.toCharArray();
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertFalse(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertNotNull(charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      assertSame(strBuilder0, strBuilder1);
      
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertFalse(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertFalse(strBuilder_StrBuilderReader0.ready());
      assertTrue(strBuilder_StrBuilderReader0.markSupported());
      assertNotNull(strBuilder_StrBuilderReader0);
      
      strBuilder_StrBuilderReader0.reset();
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertFalse(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertFalse(strBuilder_StrBuilderReader0.ready());
      assertTrue(strBuilder_StrBuilderReader0.markSupported());
      assertSame(strBuilder0, strBuilder1);
      
      int int0 = 433;
      long long0 = strBuilder_StrBuilderReader0.skip((-1180L));
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertFalse(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertFalse(strBuilder_StrBuilderReader0.ready());
      assertTrue(strBuilder_StrBuilderReader0.markSupported());
      assertEquals(0L, long0);
      assertSame(strBuilder0, strBuilder1);
      
      strBuilder_StrBuilderReader0.mark(433);
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertFalse(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertFalse(strBuilder_StrBuilderReader0.ready());
      assertTrue(strBuilder_StrBuilderReader0.markSupported());
      assertSame(strBuilder0, strBuilder1);
      
      int int1 = strBuilder_StrBuilderReader0.read();
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertFalse(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertFalse(strBuilder_StrBuilderReader0.ready());
      assertTrue(strBuilder_StrBuilderReader0.markSupported());
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      assertSame(strBuilder0, strBuilder1);
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      long long1 = strBuilder_StrBuilderReader0.skip(0L);
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertFalse(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertFalse(strBuilder_StrBuilderReader0.ready());
      assertTrue(strBuilder_StrBuilderReader0.markSupported());
      assertEquals(0L, long1);
      assertTrue(long1 == long0);
      assertSame(strBuilder0, strBuilder1);
      
      int int2 = 3549;
      // Undeclared exception!
      try { 
        strBuilder0.insert(3549, true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 3549
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isEmpty());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertNotNull(strBuilder0);
      
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isEmpty());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder_StrBuilderReader0.markSupported());
      assertFalse(strBuilder_StrBuilderReader0.ready());
      assertNotNull(strBuilder_StrBuilderReader0);
      
      int int0 = strBuilder_StrBuilderReader0.read();
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isEmpty());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder_StrBuilderReader0.markSupported());
      assertFalse(strBuilder_StrBuilderReader0.ready());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(0);
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertFalse(strBuilder0.isNotEmpty());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNotNull(strBuilder0);
      
      StringBuffer stringBuffer0 = new StringBuffer();
      assertEquals("", stringBuffer0.toString());
      assertEquals(0, stringBuffer0.length());
      assertNotNull(stringBuffer0);
      
      StrBuilder strBuilder1 = strBuilder0.append(stringBuffer0);
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertFalse(strBuilder0.isNotEmpty());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertEquals("", stringBuffer0.toString());
      assertEquals(0, stringBuffer0.length());
      assertNull(strBuilder1.getNullText());
      assertEquals(0, strBuilder1.length());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(0, strBuilder1.size());
      assertFalse(strBuilder1.isNotEmpty());
      assertTrue(strBuilder1.isEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertNotNull(strBuilder1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      
      StrBuilder strBuilder2 = strBuilder0.append((CharSequence) stringBuffer0, 0, 0);
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertFalse(strBuilder0.isNotEmpty());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertEquals("", stringBuffer0.toString());
      assertEquals(0, stringBuffer0.length());
      assertFalse(strBuilder2.isNotEmpty());
      assertEquals(0, strBuilder2.length());
      assertEquals(0, strBuilder2.size());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(32, strBuilder2.capacity());
      assertNull(strBuilder2.getNullText());
      assertTrue(strBuilder2.isEmpty());
      assertNotNull(strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      
      boolean boolean0 = strBuilder2.contains('l');
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertFalse(strBuilder0.isNotEmpty());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertEquals("", stringBuffer0.toString());
      assertEquals(0, stringBuffer0.length());
      assertFalse(strBuilder2.isNotEmpty());
      assertEquals(0, strBuilder2.length());
      assertEquals(0, strBuilder2.size());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(32, strBuilder2.capacity());
      assertNull(strBuilder2.getNullText());
      assertTrue(strBuilder2.isEmpty());
      assertFalse(boolean0);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder1.new StrBuilderReader();
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertFalse(strBuilder0.isNotEmpty());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertEquals("", stringBuffer0.toString());
      assertEquals(0, stringBuffer0.length());
      assertNull(strBuilder1.getNullText());
      assertEquals(0, strBuilder1.length());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(0, strBuilder1.size());
      assertFalse(strBuilder1.isNotEmpty());
      assertTrue(strBuilder1.isEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertFalse(strBuilder_StrBuilderReader0.ready());
      assertTrue(strBuilder_StrBuilderReader0.markSupported());
      assertNotNull(strBuilder_StrBuilderReader0);
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) strBuilder1;
      StrBuilder strBuilder3 = strBuilder2.append("K:n6QYKT/", objectArray0);
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(9, strBuilder0.length());
      assertEquals(9, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertEquals("", stringBuffer0.toString());
      assertEquals(0, stringBuffer0.length());
      assertFalse(strBuilder2.isEmpty());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(32, strBuilder2.capacity());
      assertNull(strBuilder2.getNullText());
      assertEquals(9, strBuilder2.length());
      assertTrue(strBuilder2.isNotEmpty());
      assertEquals(9, strBuilder2.size());
      assertEquals(9, strBuilder3.size());
      assertNull(strBuilder3.getNullText());
      assertNull(strBuilder3.getNewLineText());
      assertEquals(9, strBuilder3.length());
      assertTrue(strBuilder3.isNotEmpty());
      assertFalse(strBuilder3.isEmpty());
      assertEquals(32, strBuilder3.capacity());
      assertNotNull(strBuilder3);
      assertEquals(1, objectArray0.length);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder2, strBuilder3);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder2);
      
      boolean boolean1 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "K:n6QYKT/");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      StrBuilder strBuilder4 = new StrBuilder(0);
      assertNull(strBuilder4.getNewLineText());
      assertEquals(32, strBuilder4.capacity());
      assertTrue(strBuilder4.isEmpty());
      assertEquals(0, strBuilder4.size());
      assertNull(strBuilder4.getNullText());
      assertEquals(0, strBuilder4.length());
      assertFalse(strBuilder4.isNotEmpty());
      assertNotNull(strBuilder4);
      assertFalse(strBuilder4.equals((Object)strBuilder3));
      assertFalse(strBuilder4.equals((Object)strBuilder2));
      assertFalse(strBuilder4.equals((Object)strBuilder1));
      assertFalse(strBuilder4.equals((Object)strBuilder0));
      
      StrBuilder strBuilder5 = new StrBuilder((-402));
      assertEquals(0, strBuilder5.size());
      assertEquals(0, strBuilder5.length());
      assertNull(strBuilder5.getNullText());
      assertFalse(strBuilder5.isNotEmpty());
      assertEquals(32, strBuilder5.capacity());
      assertTrue(strBuilder5.isEmpty());
      assertNull(strBuilder5.getNewLineText());
      assertNotNull(strBuilder5);
      assertFalse(strBuilder5.equals((Object)strBuilder0));
      assertFalse(strBuilder5.equals((Object)strBuilder2));
      assertFalse(strBuilder5.equals((Object)strBuilder1));
      assertTrue(strBuilder5.equals((Object)strBuilder4));
      assertFalse(strBuilder5.equals((Object)strBuilder3));
      
      StrBuilder strBuilder6 = strBuilder0.appendln(0L);
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(11, strBuilder0.length());
      assertEquals(11, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder6.getNullText());
      assertTrue(strBuilder6.isNotEmpty());
      assertEquals(11, strBuilder6.size());
      assertEquals(32, strBuilder6.capacity());
      assertEquals(11, strBuilder6.length());
      assertNull(strBuilder6.getNewLineText());
      assertFalse(strBuilder6.isEmpty());
      assertNotNull(strBuilder6);
      assertFalse(strBuilder0.equals((Object)strBuilder4));
      assertFalse(strBuilder0.equals((Object)strBuilder5));
      assertFalse(strBuilder6.equals((Object)strBuilder4));
      assertFalse(strBuilder6.equals((Object)strBuilder5));
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder6);
      assertNotSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder2);
      assertNotSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder3);
      assertNotSame(strBuilder6, strBuilder4);
      assertSame(strBuilder6, strBuilder3);
      assertSame(strBuilder6, strBuilder1);
      assertSame(strBuilder6, strBuilder0);
      assertNotSame(strBuilder6, strBuilder5);
      assertSame(strBuilder6, strBuilder2);
      
      StrBuilder strBuilder7 = new StrBuilder();
      assertTrue(strBuilder7.isEmpty());
      assertFalse(strBuilder7.isNotEmpty());
      assertNull(strBuilder7.getNullText());
      assertEquals(0, strBuilder7.length());
      assertNull(strBuilder7.getNewLineText());
      assertEquals(0, strBuilder7.size());
      assertEquals(32, strBuilder7.capacity());
      assertNotNull(strBuilder7);
      assertFalse(strBuilder7.equals((Object)strBuilder2));
      assertFalse(strBuilder7.equals((Object)strBuilder0));
      assertFalse(strBuilder7.equals((Object)strBuilder6));
      assertFalse(strBuilder7.equals((Object)strBuilder3));
      assertFalse(strBuilder7.equals((Object)strBuilder1));
      assertTrue(strBuilder7.equals((Object)strBuilder4));
      assertTrue(strBuilder7.equals((Object)strBuilder5));
      
      String string0 = strBuilder4.midString(0, 4);
      assertNull(strBuilder4.getNewLineText());
      assertEquals(32, strBuilder4.capacity());
      assertTrue(strBuilder4.isEmpty());
      assertEquals(0, strBuilder4.size());
      assertNull(strBuilder4.getNullText());
      assertEquals(0, strBuilder4.length());
      assertFalse(strBuilder4.isNotEmpty());
      assertNotNull(string0);
      assertEquals("", string0);
      assertTrue(strBuilder4.equals((Object)strBuilder7));
      assertFalse(strBuilder4.equals((Object)strBuilder3));
      assertFalse(strBuilder4.equals((Object)strBuilder2));
      assertFalse(strBuilder4.equals((Object)strBuilder6));
      assertTrue(strBuilder4.equals((Object)strBuilder5));
      assertFalse(strBuilder4.equals((Object)strBuilder1));
      assertFalse(strBuilder4.equals((Object)strBuilder0));
      assertNotSame(strBuilder4, strBuilder3);
      assertNotSame(strBuilder4, strBuilder2);
      assertNotSame(strBuilder4, strBuilder7);
      assertNotSame(strBuilder4, strBuilder6);
      assertNotSame(strBuilder4, strBuilder1);
      assertNotSame(strBuilder4, strBuilder0);
      assertNotSame(strBuilder4, strBuilder5);
      
      // Undeclared exception!
      try { 
        strBuilder2.replace(4, (-120), "");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // end < start
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isEmpty());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNotNull(strBuilder0);
      
      char[] charArray0 = new char[7];
      charArray0[0] = 'n';
      charArray0[1] = 'X';
      StrBuilder strBuilder1 = strBuilder0.deleteFirst((String) null);
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isEmpty());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder1.getNullText());
      assertEquals(0, strBuilder1.length());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(0, strBuilder1.size());
      assertTrue(strBuilder1.isEmpty());
      assertFalse(strBuilder1.isNotEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertNotNull(strBuilder1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      
      charArray0[2] = 'n';
      charArray0[3] = 'W';
      charArray0[4] = 'x';
      charArray0[5] = '.';
      charArray0[6] = 'u';
      char[] charArray1 = strBuilder0.getChars(charArray0);
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isEmpty());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'n', 'X', 'n', 'W', 'x', '.', 'u'}, charArray0);
      assertArrayEquals(new char[] {'n', 'X', 'n', 'W', 'x', '.', 'u'}, charArray1);
      assertEquals(7, charArray0.length);
      assertEquals(7, charArray1.length);
      assertSame(strBuilder0, strBuilder1);
      assertSame(charArray0, charArray1);
      assertSame(charArray1, charArray0);
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder((-1872));
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertFalse(strBuilder0.isNotEmpty());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertNotNull(strBuilder0);
      
      boolean boolean0 = strBuilder0.contains('[');
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertFalse(strBuilder0.isNotEmpty());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertFalse(boolean0);
      
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertFalse(strBuilder0.isNotEmpty());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertFalse(strBuilder_StrBuilderReader0.ready());
      assertTrue(strBuilder_StrBuilderReader0.markSupported());
      assertNotNull(strBuilder_StrBuilderReader0);
      
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) strBuilder0;
      objectArray0[1] = (Object) "";
      StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer0 = strBuilder0.new StrBuilderTokenizer();
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertFalse(strBuilder0.isNotEmpty());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder_StrBuilderTokenizer0.isIgnoreEmptyTokens());
      assertFalse(strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull());
      assertEquals(0, strBuilder_StrBuilderTokenizer0.nextIndex());
      assertEquals((-1), strBuilder_StrBuilderTokenizer0.previousIndex());
      assertNotNull(strBuilder_StrBuilderTokenizer0);
      
      StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer1 = (StrBuilder.StrBuilderTokenizer)strBuilder_StrBuilderTokenizer0.clone();
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertFalse(strBuilder0.isNotEmpty());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder_StrBuilderTokenizer0.isIgnoreEmptyTokens());
      assertFalse(strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull());
      assertEquals(0, strBuilder_StrBuilderTokenizer0.nextIndex());
      assertEquals((-1), strBuilder_StrBuilderTokenizer0.previousIndex());
      assertFalse(strBuilder_StrBuilderTokenizer1.isEmptyTokenAsNull());
      assertTrue(strBuilder_StrBuilderTokenizer1.isIgnoreEmptyTokens());
      assertEquals((-1), strBuilder_StrBuilderTokenizer1.previousIndex());
      assertEquals(0, strBuilder_StrBuilderTokenizer1.nextIndex());
      assertNotNull(strBuilder_StrBuilderTokenizer1);
      assertFalse(strBuilder_StrBuilderTokenizer1.equals((Object)strBuilder_StrBuilderTokenizer0));
      assertNotSame(strBuilder_StrBuilderTokenizer0, strBuilder_StrBuilderTokenizer1);
      assertNotSame(strBuilder_StrBuilderTokenizer1, strBuilder_StrBuilderTokenizer0);
      
      objectArray0[2] = (Object) strBuilder_StrBuilderTokenizer1;
      objectArray0[3] = (Object) "'\"";
      StrBuilder strBuilder1 = strBuilder0.append("'\"", objectArray0);
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(2, strBuilder0.length());
      assertEquals(2, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertTrue(strBuilder1.isNotEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(2, strBuilder1.length());
      assertEquals(2, strBuilder1.size());
      assertFalse(strBuilder1.isEmpty());
      assertNotNull(strBuilder1);
      assertEquals(4, objectArray0.length);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      
      StrBuilder strBuilder2 = new StrBuilder((-1872));
      assertNull(strBuilder2.getNullText());
      assertEquals(0, strBuilder2.length());
      assertEquals(0, strBuilder2.size());
      assertNull(strBuilder2.getNewLineText());
      assertTrue(strBuilder2.isEmpty());
      assertFalse(strBuilder2.isNotEmpty());
      assertEquals(32, strBuilder2.capacity());
      assertNotNull(strBuilder2);
      assertFalse(strBuilder2.equals((Object)strBuilder1));
      assertFalse(strBuilder2.equals((Object)strBuilder0));
      
      StrBuilder strBuilder3 = new StrBuilder(2);
      assertEquals(2, strBuilder3.capacity());
      assertTrue(strBuilder3.isEmpty());
      assertEquals(0, strBuilder3.length());
      assertFalse(strBuilder3.isNotEmpty());
      assertNull(strBuilder3.getNullText());
      assertEquals(0, strBuilder3.size());
      assertNull(strBuilder3.getNewLineText());
      assertNotNull(strBuilder3);
      assertFalse(strBuilder3.equals((Object)strBuilder0));
      assertFalse(strBuilder3.equals((Object)strBuilder1));
      assertTrue(strBuilder3.equals((Object)strBuilder2));
      
      StrBuilder strBuilder4 = strBuilder2.appendln(0L);
      assertNull(strBuilder2.getNullText());
      assertTrue(strBuilder2.isNotEmpty());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(2, strBuilder2.length());
      assertEquals(2, strBuilder2.size());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(32, strBuilder2.capacity());
      assertEquals(32, strBuilder4.capacity());
      assertTrue(strBuilder4.isNotEmpty());
      assertNull(strBuilder4.getNullText());
      assertNull(strBuilder4.getNewLineText());
      assertFalse(strBuilder4.isEmpty());
      assertEquals(2, strBuilder4.length());
      assertEquals(2, strBuilder4.size());
      assertNotNull(strBuilder4);
      assertFalse(strBuilder2.equals((Object)strBuilder3));
      assertFalse(strBuilder2.equals((Object)strBuilder1));
      assertFalse(strBuilder2.equals((Object)strBuilder0));
      assertFalse(strBuilder4.equals((Object)strBuilder0));
      assertFalse(strBuilder4.equals((Object)strBuilder1));
      assertFalse(strBuilder4.equals((Object)strBuilder3));
      assertSame(strBuilder2, strBuilder4);
      assertNotSame(strBuilder2, strBuilder3);
      assertNotSame(strBuilder2, strBuilder1);
      assertNotSame(strBuilder2, strBuilder0);
      assertNotSame(strBuilder4, strBuilder0);
      assertNotSame(strBuilder4, strBuilder1);
      assertNotSame(strBuilder4, strBuilder3);
      assertSame(strBuilder4, strBuilder2);
      
      StrBuilder strBuilder5 = new StrBuilder();
      assertEquals(32, strBuilder5.capacity());
      assertNull(strBuilder5.getNullText());
      assertTrue(strBuilder5.isEmpty());
      assertNull(strBuilder5.getNewLineText());
      assertEquals(0, strBuilder5.length());
      assertEquals(0, strBuilder5.size());
      assertFalse(strBuilder5.isNotEmpty());
      assertNotNull(strBuilder5);
      assertFalse(strBuilder5.equals((Object)strBuilder0));
      assertFalse(strBuilder5.equals((Object)strBuilder1));
      assertFalse(strBuilder5.equals((Object)strBuilder2));
      assertFalse(strBuilder5.equals((Object)strBuilder4));
      assertTrue(strBuilder5.equals((Object)strBuilder3));
      
      int int0 = (-1791);
      String string0 = strBuilder2.midString((-1791), 903);
      assertNull(strBuilder2.getNullText());
      assertTrue(strBuilder2.isNotEmpty());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(2, strBuilder2.length());
      assertEquals(2, strBuilder2.size());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(32, strBuilder2.capacity());
      assertNotNull(string0);
      assertEquals("0\n", string0);
      assertFalse(strBuilder2.equals((Object)strBuilder3));
      assertFalse(strBuilder2.equals((Object)strBuilder1));
      assertFalse(strBuilder2.equals((Object)strBuilder5));
      assertFalse(strBuilder2.equals((Object)strBuilder0));
      assertSame(strBuilder2, strBuilder4);
      assertNotSame(strBuilder2, strBuilder3);
      assertNotSame(strBuilder2, strBuilder1);
      assertNotSame(strBuilder2, strBuilder5);
      assertNotSame(strBuilder2, strBuilder0);
      
      // Undeclared exception!
      try { 
        strBuilder5.replace((-2610), 32, "");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -2610
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("^idxVa9J(IJ6fm");
      assertEquals(46, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(14, strBuilder0.length());
      assertEquals(14, strBuilder0.size());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.appendSeparator('B', 32);
      assertEquals(46, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(15, strBuilder0.size());
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(15, strBuilder0.length());
      assertNull(strBuilder1.getNullText());
      assertEquals(46, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertTrue(strBuilder1.isNotEmpty());
      assertEquals(15, strBuilder1.size());
      assertEquals(15, strBuilder1.length());
      assertFalse(strBuilder1.isEmpty());
      assertNotNull(strBuilder1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      
      String string0 = strBuilder0.build();
      assertEquals(46, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(15, strBuilder0.size());
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(15, strBuilder0.length());
      assertNotNull(string0);
      assertEquals("^idxVa9J(IJ6fmB", string0);
      assertSame(strBuilder0, strBuilder1);
      
      char[] charArray0 = strBuilder1.toCharArray(1, 1);
      assertEquals(46, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(15, strBuilder0.size());
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(15, strBuilder0.length());
      assertNull(strBuilder1.getNullText());
      assertEquals(46, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertTrue(strBuilder1.isNotEmpty());
      assertEquals(15, strBuilder1.size());
      assertEquals(15, strBuilder1.length());
      assertFalse(strBuilder1.isEmpty());
      assertNotNull(charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      
      int int0 = strBuilder0.indexOf("", (-2243));
      assertEquals(46, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(15, strBuilder0.size());
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(15, strBuilder0.length());
      assertEquals(0, int0);
      assertSame(strBuilder0, strBuilder1);
      
      StrBuilder strBuilder2 = strBuilder1.deleteFirst('B');
      assertEquals(46, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(14, strBuilder0.length());
      assertEquals(14, strBuilder0.size());
      assertNull(strBuilder1.getNullText());
      assertEquals(46, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertTrue(strBuilder1.isNotEmpty());
      assertEquals(14, strBuilder1.length());
      assertEquals(14, strBuilder1.size());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(46, strBuilder2.capacity());
      assertEquals(14, strBuilder2.length());
      assertEquals(14, strBuilder2.size());
      assertTrue(strBuilder2.isNotEmpty());
      assertNull(strBuilder2.getNullText());
      assertNull(strBuilder2.getNewLineText());
      assertFalse(strBuilder2.isEmpty());
      assertNotNull(strBuilder2);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      
      StrBuilder strBuilder3 = strBuilder1.appendSeparator("^idxVa9J(IJ6fm", 286);
      assertEquals(46, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(28, strBuilder0.length());
      assertEquals(28, strBuilder0.size());
      assertNull(strBuilder1.getNullText());
      assertEquals(46, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(28, strBuilder1.length());
      assertTrue(strBuilder1.isNotEmpty());
      assertEquals(28, strBuilder1.size());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(46, strBuilder3.capacity());
      assertEquals(28, strBuilder3.size());
      assertTrue(strBuilder3.isNotEmpty());
      assertEquals(28, strBuilder3.length());
      assertFalse(strBuilder3.isEmpty());
      assertNull(strBuilder3.getNewLineText());
      assertNull(strBuilder3.getNullText());
      assertNotNull(strBuilder3);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder2);
      assertSame(strBuilder3, strBuilder0);
      
      StrBuilder strBuilder4 = strBuilder3.appendFixedWidthPadLeft((Object) strBuilder2, 286, 'D');
      assertEquals(314, strBuilder0.length());
      assertEquals(314, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(628, strBuilder0.capacity());
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertEquals(314, strBuilder1.length());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(314, strBuilder1.size());
      assertTrue(strBuilder1.isNotEmpty());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(628, strBuilder1.capacity());
      assertEquals(314, strBuilder2.length());
      assertEquals(314, strBuilder2.size());
      assertEquals(628, strBuilder2.capacity());
      assertTrue(strBuilder2.isNotEmpty());
      assertNull(strBuilder2.getNullText());
      assertNull(strBuilder2.getNewLineText());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(314, strBuilder3.length());
      assertEquals(314, strBuilder3.size());
      assertTrue(strBuilder3.isNotEmpty());
      assertFalse(strBuilder3.isEmpty());
      assertEquals(628, strBuilder3.capacity());
      assertNull(strBuilder3.getNewLineText());
      assertNull(strBuilder3.getNullText());
      assertNull(strBuilder4.getNullText());
      assertEquals(628, strBuilder4.capacity());
      assertTrue(strBuilder4.isNotEmpty());
      assertFalse(strBuilder4.isEmpty());
      assertNull(strBuilder4.getNewLineText());
      assertEquals(314, strBuilder4.length());
      assertEquals(314, strBuilder4.size());
      assertNotNull(strBuilder4);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder1, strBuilder4);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder3);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder4);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder4);
      assertSame(strBuilder3, strBuilder2);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder4, strBuilder0);
      assertSame(strBuilder4, strBuilder1);
      assertSame(strBuilder4, strBuilder3);
      assertSame(strBuilder4, strBuilder2);
      
      StrBuilder strBuilder5 = strBuilder2.appendln("^idxVa9J(IJ6fmB");
      assertEquals(330, strBuilder0.length());
      assertEquals(330, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(628, strBuilder0.capacity());
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertEquals(330, strBuilder1.length());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(330, strBuilder1.size());
      assertTrue(strBuilder1.isNotEmpty());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(628, strBuilder1.capacity());
      assertEquals(330, strBuilder2.length());
      assertEquals(330, strBuilder2.size());
      assertEquals(628, strBuilder2.capacity());
      assertTrue(strBuilder2.isNotEmpty());
      assertNull(strBuilder2.getNullText());
      assertNull(strBuilder2.getNewLineText());
      assertFalse(strBuilder2.isEmpty());
      assertNull(strBuilder5.getNullText());
      assertEquals(628, strBuilder5.capacity());
      assertFalse(strBuilder5.isEmpty());
      assertNull(strBuilder5.getNewLineText());
      assertTrue(strBuilder5.isNotEmpty());
      assertEquals(330, strBuilder5.length());
      assertEquals(330, strBuilder5.size());
      assertNotNull(strBuilder5);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder1, strBuilder4);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder5);
      assertSame(strBuilder2, strBuilder5);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder3);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder4);
      assertSame(strBuilder5, strBuilder0);
      assertSame(strBuilder5, strBuilder2);
      assertSame(strBuilder5, strBuilder1);
      assertSame(strBuilder5, strBuilder4);
      assertSame(strBuilder5, strBuilder3);
      
      StrBuilder.StrBuilderWriter strBuilder_StrBuilderWriter0 = strBuilder3.new StrBuilderWriter();
      assertEquals(330, strBuilder0.length());
      assertEquals(330, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(628, strBuilder0.capacity());
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertEquals(330, strBuilder1.length());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(330, strBuilder1.size());
      assertTrue(strBuilder1.isNotEmpty());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(628, strBuilder1.capacity());
      assertEquals(330, strBuilder3.length());
      assertEquals(330, strBuilder3.size());
      assertTrue(strBuilder3.isNotEmpty());
      assertFalse(strBuilder3.isEmpty());
      assertEquals(628, strBuilder3.capacity());
      assertNull(strBuilder3.getNewLineText());
      assertNull(strBuilder3.getNullText());
      assertNotNull(strBuilder_StrBuilderWriter0);
      
      strBuilder_StrBuilderWriter0.close();
      assertEquals(330, strBuilder0.length());
      assertEquals(330, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(628, strBuilder0.capacity());
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertEquals(330, strBuilder1.length());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(330, strBuilder1.size());
      assertTrue(strBuilder1.isNotEmpty());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(628, strBuilder1.capacity());
      assertEquals(330, strBuilder3.length());
      assertEquals(330, strBuilder3.size());
      assertTrue(strBuilder3.isNotEmpty());
      assertFalse(strBuilder3.isEmpty());
      assertEquals(628, strBuilder3.capacity());
      assertNull(strBuilder3.getNewLineText());
      assertNull(strBuilder3.getNullText());
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder1, strBuilder4);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder5);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder5);
      assertSame(strBuilder3, strBuilder4);
      assertSame(strBuilder3, strBuilder2);
      assertSame(strBuilder3, strBuilder0);
      
      StrBuilder strBuilder6 = strBuilder0.deleteFirst('S');
      assertEquals(329, strBuilder0.length());
      assertEquals(329, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(628, strBuilder0.capacity());
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder6.getNullText());
      assertNull(strBuilder6.getNewLineText());
      assertEquals(329, strBuilder6.length());
      assertFalse(strBuilder6.isEmpty());
      assertEquals(329, strBuilder6.size());
      assertEquals(628, strBuilder6.capacity());
      assertTrue(strBuilder6.isNotEmpty());
      assertNotNull(strBuilder6);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder6);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder6, strBuilder4);
      assertSame(strBuilder6, strBuilder2);
      assertSame(strBuilder6, strBuilder3);
      assertSame(strBuilder6, strBuilder5);
      assertSame(strBuilder6, strBuilder1);
      assertSame(strBuilder6, strBuilder0);
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("^idxVa9J(IJ6fm");
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(14, strBuilder0.length());
      assertEquals(14, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(46, strBuilder0.capacity());
      assertTrue(strBuilder0.isNotEmpty());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.appendSeparator('B', 32);
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(15, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(15, strBuilder0.size());
      assertEquals(46, strBuilder0.capacity());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(15, strBuilder1.length());
      assertEquals(15, strBuilder1.size());
      assertFalse(strBuilder1.isEmpty());
      assertTrue(strBuilder1.isNotEmpty());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(46, strBuilder1.capacity());
      assertNotNull(strBuilder1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      
      char[] charArray0 = strBuilder1.toCharArray(1, 1);
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(15, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(15, strBuilder0.size());
      assertEquals(46, strBuilder0.capacity());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(15, strBuilder1.length());
      assertEquals(15, strBuilder1.size());
      assertFalse(strBuilder1.isEmpty());
      assertTrue(strBuilder1.isNotEmpty());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(46, strBuilder1.capacity());
      assertNotNull(charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      
      int int0 = strBuilder0.indexOf("", (-2243));
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(15, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(15, strBuilder0.size());
      assertEquals(46, strBuilder0.capacity());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(0, int0);
      assertSame(strBuilder0, strBuilder1);
      
      StrBuilder strBuilder2 = strBuilder1.deleteFirst('B');
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(14, strBuilder0.length());
      assertEquals(14, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(46, strBuilder0.capacity());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(14, strBuilder1.size());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(14, strBuilder1.length());
      assertTrue(strBuilder1.isNotEmpty());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(46, strBuilder1.capacity());
      assertTrue(strBuilder2.isNotEmpty());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(14, strBuilder2.size());
      assertEquals(14, strBuilder2.length());
      assertEquals(46, strBuilder2.capacity());
      assertNull(strBuilder2.getNullText());
      assertNull(strBuilder2.getNewLineText());
      assertNotNull(strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      
      StrBuilder strBuilder3 = strBuilder1.appendSeparator("^idxVa9J(IJ6fm", 286);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(28, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(46, strBuilder0.capacity());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(28, strBuilder0.length());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(28, strBuilder1.length());
      assertEquals(28, strBuilder1.size());
      assertTrue(strBuilder1.isNotEmpty());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(46, strBuilder1.capacity());
      assertEquals(46, strBuilder3.capacity());
      assertNull(strBuilder3.getNullText());
      assertFalse(strBuilder3.isEmpty());
      assertNull(strBuilder3.getNewLineText());
      assertEquals(28, strBuilder3.length());
      assertTrue(strBuilder3.isNotEmpty());
      assertEquals(28, strBuilder3.size());
      assertNotNull(strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder2);
      assertSame(strBuilder3, strBuilder1);
      
      StrBuilder strBuilder4 = strBuilder3.appendFixedWidthPadLeft((Object) strBuilder2, 286, 'D');
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(628, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertEquals(314, strBuilder0.length());
      assertEquals(314, strBuilder0.size());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(628, strBuilder1.capacity());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(314, strBuilder1.size());
      assertTrue(strBuilder1.isNotEmpty());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(314, strBuilder1.length());
      assertEquals(628, strBuilder2.capacity());
      assertTrue(strBuilder2.isNotEmpty());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(314, strBuilder2.size());
      assertNull(strBuilder2.getNullText());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(314, strBuilder2.length());
      assertEquals(314, strBuilder3.length());
      assertNull(strBuilder3.getNullText());
      assertEquals(628, strBuilder3.capacity());
      assertFalse(strBuilder3.isEmpty());
      assertNull(strBuilder3.getNewLineText());
      assertEquals(314, strBuilder3.size());
      assertTrue(strBuilder3.isNotEmpty());
      assertNull(strBuilder4.getNullText());
      assertNull(strBuilder4.getNewLineText());
      assertEquals(314, strBuilder4.size());
      assertEquals(314, strBuilder4.length());
      assertFalse(strBuilder4.isEmpty());
      assertTrue(strBuilder4.isNotEmpty());
      assertEquals(628, strBuilder4.capacity());
      assertNotNull(strBuilder4);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder4);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder2, strBuilder4);
      assertSame(strBuilder2, strBuilder3);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder2);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder4);
      assertSame(strBuilder4, strBuilder2);
      assertSame(strBuilder4, strBuilder0);
      assertSame(strBuilder4, strBuilder1);
      assertSame(strBuilder4, strBuilder3);
      
      StrBuilder.StrBuilderWriter strBuilder_StrBuilderWriter0 = strBuilder3.new StrBuilderWriter();
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(628, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertEquals(314, strBuilder0.length());
      assertEquals(314, strBuilder0.size());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(628, strBuilder1.capacity());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(314, strBuilder1.size());
      assertTrue(strBuilder1.isNotEmpty());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(314, strBuilder1.length());
      assertEquals(314, strBuilder3.length());
      assertNull(strBuilder3.getNullText());
      assertEquals(628, strBuilder3.capacity());
      assertFalse(strBuilder3.isEmpty());
      assertNull(strBuilder3.getNewLineText());
      assertEquals(314, strBuilder3.size());
      assertTrue(strBuilder3.isNotEmpty());
      assertNotNull(strBuilder_StrBuilderWriter0);
      
      strBuilder_StrBuilderWriter0.close();
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(628, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertEquals(314, strBuilder0.length());
      assertEquals(314, strBuilder0.size());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(628, strBuilder1.capacity());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(314, strBuilder1.size());
      assertTrue(strBuilder1.isNotEmpty());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(314, strBuilder1.length());
      assertEquals(314, strBuilder3.length());
      assertNull(strBuilder3.getNullText());
      assertEquals(628, strBuilder3.capacity());
      assertFalse(strBuilder3.isEmpty());
      assertNull(strBuilder3.getNewLineText());
      assertEquals(314, strBuilder3.size());
      assertTrue(strBuilder3.isNotEmpty());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder4);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder2);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder4);
      
      StrBuilder strBuilder5 = strBuilder0.deleteFirst('S');
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(628, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertEquals(313, strBuilder0.length());
      assertEquals(313, strBuilder0.size());
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder5.getNewLineText());
      assertTrue(strBuilder5.isNotEmpty());
      assertEquals(628, strBuilder5.capacity());
      assertFalse(strBuilder5.isEmpty());
      assertEquals(313, strBuilder5.size());
      assertEquals(313, strBuilder5.length());
      assertNull(strBuilder5.getNullText());
      assertNotNull(strBuilder5);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder5, strBuilder4);
      assertSame(strBuilder5, strBuilder3);
      assertSame(strBuilder5, strBuilder1);
      assertSame(strBuilder5, strBuilder0);
      assertSame(strBuilder5, strBuilder2);
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(0);
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isNotEmpty());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.appendSeparator("', has a length less than 2", "', has a length less than 2");
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(27, strBuilder0.size());
      assertEquals(27, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(27, strBuilder1.length());
      assertNull(strBuilder1.getNewLineText());
      assertTrue(strBuilder1.isNotEmpty());
      assertEquals(27, strBuilder1.size());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNullText());
      assertFalse(strBuilder1.isEmpty());
      assertNotNull(strBuilder1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      
      StrBuilder strBuilder2 = strBuilder0.appendPadding(0, 'Q');
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(27, strBuilder0.size());
      assertEquals(27, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(32, strBuilder2.capacity());
      assertFalse(strBuilder2.isEmpty());
      assertNull(strBuilder2.getNullText());
      assertNull(strBuilder2.getNewLineText());
      assertTrue(strBuilder2.isNotEmpty());
      assertEquals(27, strBuilder2.size());
      assertEquals(27, strBuilder2.length());
      assertNotNull(strBuilder2);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      
      StrBuilder strBuilder3 = strBuilder2.append((float) 1);
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(30, strBuilder0.length());
      assertEquals(30, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(32, strBuilder2.capacity());
      assertFalse(strBuilder2.isEmpty());
      assertNull(strBuilder2.getNullText());
      assertEquals(30, strBuilder2.size());
      assertEquals(30, strBuilder2.length());
      assertNull(strBuilder2.getNewLineText());
      assertTrue(strBuilder2.isNotEmpty());
      assertEquals(30, strBuilder3.size());
      assertTrue(strBuilder3.isNotEmpty());
      assertEquals(30, strBuilder3.length());
      assertEquals(32, strBuilder3.capacity());
      assertNull(strBuilder3.getNewLineText());
      assertFalse(strBuilder3.isEmpty());
      assertNull(strBuilder3.getNullText());
      assertNotNull(strBuilder3);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder3);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder2);
      
      char[] charArray0 = new char[7];
      charArray0[0] = 'Q';
      charArray0[1] = 'Q';
      charArray0[2] = 'Q';
      charArray0[3] = 'Q';
      charArray0[4] = 'Q';
      charArray0[5] = 'Q';
      charArray0[6] = 'Q';
      StrBuilder strBuilder4 = strBuilder2.append(charArray0);
      assertEquals(37, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(74, strBuilder0.capacity());
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(37, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(37, strBuilder2.size());
      assertEquals(37, strBuilder2.length());
      assertFalse(strBuilder2.isEmpty());
      assertNull(strBuilder2.getNullText());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(74, strBuilder2.capacity());
      assertTrue(strBuilder2.isNotEmpty());
      assertNull(strBuilder4.getNewLineText());
      assertTrue(strBuilder4.isNotEmpty());
      assertFalse(strBuilder4.isEmpty());
      assertNull(strBuilder4.getNullText());
      assertEquals(37, strBuilder4.size());
      assertEquals(74, strBuilder4.capacity());
      assertEquals(37, strBuilder4.length());
      assertNotNull(strBuilder4);
      assertArrayEquals(new char[] {'Q', 'Q', 'Q', 'Q', 'Q', 'Q', 'Q'}, charArray0);
      assertEquals(7, charArray0.length);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder2, strBuilder4);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder3);
      assertSame(strBuilder4, strBuilder1);
      assertSame(strBuilder4, strBuilder2);
      assertSame(strBuilder4, strBuilder3);
      assertSame(strBuilder4, strBuilder0);
      
      StrBuilder strBuilder5 = strBuilder0.append((char[]) null);
      assertEquals(37, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(74, strBuilder0.capacity());
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(37, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(37, strBuilder5.size());
      assertNull(strBuilder5.getNewLineText());
      assertEquals(74, strBuilder5.capacity());
      assertTrue(strBuilder5.isNotEmpty());
      assertNull(strBuilder5.getNullText());
      assertEquals(37, strBuilder5.length());
      assertFalse(strBuilder5.isEmpty());
      assertNotNull(strBuilder5);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder5, strBuilder4);
      assertSame(strBuilder5, strBuilder2);
      assertSame(strBuilder5, strBuilder0);
      assertSame(strBuilder5, strBuilder1);
      assertSame(strBuilder5, strBuilder3);
      
      String string0 = strBuilder5.leftString(1);
      assertEquals(37, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(74, strBuilder0.capacity());
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(37, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(37, strBuilder5.size());
      assertNull(strBuilder5.getNewLineText());
      assertEquals(74, strBuilder5.capacity());
      assertTrue(strBuilder5.isNotEmpty());
      assertNull(strBuilder5.getNullText());
      assertEquals(37, strBuilder5.length());
      assertFalse(strBuilder5.isEmpty());
      assertNotNull(string0);
      assertEquals("'", string0);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder5, strBuilder4);
      assertSame(strBuilder5, strBuilder2);
      assertSame(strBuilder5, strBuilder0);
      assertSame(strBuilder5, strBuilder1);
      assertSame(strBuilder5, strBuilder3);
      
      StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer0 = strBuilder3.new StrBuilderTokenizer();
      assertEquals(37, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(74, strBuilder0.capacity());
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(37, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(37, strBuilder2.size());
      assertEquals(37, strBuilder2.length());
      assertFalse(strBuilder2.isEmpty());
      assertNull(strBuilder2.getNullText());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(74, strBuilder2.capacity());
      assertTrue(strBuilder2.isNotEmpty());
      assertTrue(strBuilder3.isNotEmpty());
      assertNull(strBuilder3.getNewLineText());
      assertFalse(strBuilder3.isEmpty());
      assertNull(strBuilder3.getNullText());
      assertEquals(74, strBuilder3.capacity());
      assertEquals(37, strBuilder3.length());
      assertEquals(37, strBuilder3.size());
      assertEquals(0, strBuilder_StrBuilderTokenizer0.nextIndex());
      assertEquals((-1), strBuilder_StrBuilderTokenizer0.previousIndex());
      assertFalse(strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull());
      assertTrue(strBuilder_StrBuilderTokenizer0.isIgnoreEmptyTokens());
      assertNotNull(strBuilder_StrBuilderTokenizer0);
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      StrBuilder strBuilder6 = new StrBuilder();
      assertNull(strBuilder6.getNewLineText());
      assertNull(strBuilder6.getNullText());
      assertFalse(strBuilder6.isNotEmpty());
      assertTrue(strBuilder6.isEmpty());
      assertEquals(32, strBuilder6.capacity());
      assertEquals(0, strBuilder6.size());
      assertEquals(0, strBuilder6.length());
      assertNotNull(strBuilder6);
      assertFalse(strBuilder6.equals((Object)strBuilder0));
      assertFalse(strBuilder6.equals((Object)strBuilder4));
      assertFalse(strBuilder6.equals((Object)strBuilder5));
      assertFalse(strBuilder6.equals((Object)strBuilder1));
      assertFalse(strBuilder6.equals((Object)strBuilder2));
      assertFalse(strBuilder6.equals((Object)strBuilder3));
      
      StrBuilder strBuilder7 = new StrBuilder();
      assertFalse(strBuilder7.isNotEmpty());
      assertNull(strBuilder7.getNullText());
      assertTrue(strBuilder7.isEmpty());
      assertNull(strBuilder7.getNewLineText());
      assertEquals(32, strBuilder7.capacity());
      assertEquals(0, strBuilder7.length());
      assertEquals(0, strBuilder7.size());
      assertNotNull(strBuilder7);
      assertFalse(strBuilder7.equals((Object)strBuilder1));
      assertTrue(strBuilder7.equals((Object)strBuilder6));
      assertFalse(strBuilder7.equals((Object)strBuilder0));
      assertFalse(strBuilder7.equals((Object)strBuilder4));
      assertFalse(strBuilder7.equals((Object)strBuilder5));
      assertFalse(strBuilder7.equals((Object)strBuilder3));
      assertFalse(strBuilder7.equals((Object)strBuilder2));
      
      StrBuilder strBuilder8 = strBuilder7.appendSeparator('B', 0);
      assertFalse(strBuilder7.isNotEmpty());
      assertNull(strBuilder7.getNullText());
      assertTrue(strBuilder7.isEmpty());
      assertNull(strBuilder7.getNewLineText());
      assertEquals(32, strBuilder7.capacity());
      assertEquals(0, strBuilder7.length());
      assertEquals(0, strBuilder7.size());
      assertTrue(strBuilder8.isEmpty());
      assertEquals(32, strBuilder8.capacity());
      assertNull(strBuilder8.getNullText());
      assertNull(strBuilder8.getNewLineText());
      assertFalse(strBuilder8.isNotEmpty());
      assertEquals(0, strBuilder8.length());
      assertEquals(0, strBuilder8.size());
      assertNotNull(strBuilder8);
      assertFalse(strBuilder7.equals((Object)strBuilder1));
      assertTrue(strBuilder7.equals((Object)strBuilder6));
      assertFalse(strBuilder7.equals((Object)strBuilder0));
      assertFalse(strBuilder7.equals((Object)strBuilder4));
      assertFalse(strBuilder7.equals((Object)strBuilder5));
      assertFalse(strBuilder7.equals((Object)strBuilder3));
      assertFalse(strBuilder7.equals((Object)strBuilder2));
      assertFalse(strBuilder8.equals((Object)strBuilder5));
      assertFalse(strBuilder8.equals((Object)strBuilder4));
      assertTrue(strBuilder8.equals((Object)strBuilder6));
      assertFalse(strBuilder8.equals((Object)strBuilder0));
      assertFalse(strBuilder8.equals((Object)strBuilder1));
      assertFalse(strBuilder8.equals((Object)strBuilder2));
      assertFalse(strBuilder8.equals((Object)strBuilder3));
      assertNotSame(strBuilder7, strBuilder1);
      assertNotSame(strBuilder7, strBuilder0);
      assertNotSame(strBuilder7, strBuilder6);
      assertNotSame(strBuilder7, strBuilder4);
      assertSame(strBuilder7, strBuilder8);
      assertNotSame(strBuilder7, strBuilder5);
      assertNotSame(strBuilder7, strBuilder3);
      assertNotSame(strBuilder7, strBuilder2);
      assertNotSame(strBuilder8, strBuilder6);
      assertNotSame(strBuilder8, strBuilder5);
      assertNotSame(strBuilder8, strBuilder4);
      assertNotSame(strBuilder8, strBuilder0);
      assertNotSame(strBuilder8, strBuilder1);
      assertNotSame(strBuilder8, strBuilder2);
      assertNotSame(strBuilder8, strBuilder3);
      assertSame(strBuilder8, strBuilder7);
      
      StrBuilder strBuilder9 = new StrBuilder();
      assertEquals(0, strBuilder9.size());
      assertNull(strBuilder9.getNullText());
      assertEquals(0, strBuilder9.length());
      assertNull(strBuilder9.getNewLineText());
      assertTrue(strBuilder9.isEmpty());
      assertEquals(32, strBuilder9.capacity());
      assertFalse(strBuilder9.isNotEmpty());
      assertNotNull(strBuilder9);
      assertTrue(strBuilder9.equals((Object)strBuilder7));
      assertTrue(strBuilder9.equals((Object)strBuilder8));
      assertFalse(strBuilder9.equals((Object)strBuilder0));
      assertFalse(strBuilder9.equals((Object)strBuilder4));
      assertTrue(strBuilder9.equals((Object)strBuilder6));
      assertFalse(strBuilder9.equals((Object)strBuilder1));
      assertFalse(strBuilder9.equals((Object)strBuilder2));
      assertFalse(strBuilder9.equals((Object)strBuilder5));
      assertFalse(strBuilder9.equals((Object)strBuilder3));
      
      StrBuilder strBuilder10 = strBuilder0.deleteFirst("53EZ D,Cqa^2^c");
      assertEquals(37, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(74, strBuilder0.capacity());
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(37, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(37, strBuilder10.size());
      assertEquals(74, strBuilder10.capacity());
      assertEquals(37, strBuilder10.length());
      assertTrue(strBuilder10.isNotEmpty());
      assertFalse(strBuilder10.isEmpty());
      assertNull(strBuilder10.getNullText());
      assertNull(strBuilder10.getNewLineText());
      assertNotNull(strBuilder10);
      assertFalse(strBuilder0.equals((Object)strBuilder8));
      assertFalse(strBuilder0.equals((Object)strBuilder6));
      assertFalse(strBuilder0.equals((Object)strBuilder7));
      assertFalse(strBuilder0.equals((Object)strBuilder9));
      assertFalse(strBuilder10.equals((Object)strBuilder6));
      assertFalse(strBuilder10.equals((Object)strBuilder8));
      assertFalse(strBuilder10.equals((Object)strBuilder7));
      assertFalse(strBuilder10.equals((Object)strBuilder9));
      assertNotSame(strBuilder0, strBuilder8);
      assertSame(strBuilder0, strBuilder4);
      assertNotSame(strBuilder0, strBuilder6);
      assertSame(strBuilder0, strBuilder2);
      assertNotSame(strBuilder0, strBuilder7);
      assertSame(strBuilder0, strBuilder10);
      assertSame(strBuilder0, strBuilder1);
      assertNotSame(strBuilder0, strBuilder9);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder5);
      assertNotSame(strBuilder10, strBuilder6);
      assertSame(strBuilder10, strBuilder5);
      assertNotSame(strBuilder10, strBuilder8);
      assertNotSame(strBuilder10, strBuilder7);
      assertSame(strBuilder10, strBuilder4);
      assertSame(strBuilder10, strBuilder1);
      assertSame(strBuilder10, strBuilder0);
      assertSame(strBuilder10, strBuilder3);
      assertSame(strBuilder10, strBuilder2);
      assertNotSame(strBuilder10, strBuilder9);
      
      StrBuilder strBuilder11 = strBuilder0.setNewLineText("Invalid startIndex: ");
      assertEquals("Invalid startIndex: ", strBuilder0.getNewLineText());
      assertEquals(37, strBuilder0.size());
      assertEquals(74, strBuilder0.capacity());
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(37, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder11.getNullText());
      assertEquals(74, strBuilder11.capacity());
      assertFalse(strBuilder11.isEmpty());
      assertEquals(37, strBuilder11.length());
      assertEquals(37, strBuilder11.size());
      assertTrue(strBuilder11.isNotEmpty());
      assertEquals("Invalid startIndex: ", strBuilder11.getNewLineText());
      assertNotNull(strBuilder11);
      assertFalse(strBuilder0.equals((Object)strBuilder8));
      assertFalse(strBuilder0.equals((Object)strBuilder6));
      assertFalse(strBuilder0.equals((Object)strBuilder7));
      assertFalse(strBuilder0.equals((Object)strBuilder9));
      assertFalse(strBuilder11.equals((Object)strBuilder7));
      assertFalse(strBuilder11.equals((Object)strBuilder8));
      assertFalse(strBuilder11.equals((Object)strBuilder6));
      assertFalse(strBuilder11.equals((Object)strBuilder9));
      assertNotSame(strBuilder0, strBuilder8);
      assertSame(strBuilder0, strBuilder4);
      assertNotSame(strBuilder0, strBuilder6);
      assertSame(strBuilder0, strBuilder2);
      assertNotSame(strBuilder0, strBuilder7);
      assertSame(strBuilder0, strBuilder10);
      assertSame(strBuilder0, strBuilder11);
      assertSame(strBuilder0, strBuilder1);
      assertNotSame(strBuilder0, strBuilder9);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder11, strBuilder3);
      assertSame(strBuilder11, strBuilder5);
      assertNotSame(strBuilder11, strBuilder7);
      assertSame(strBuilder11, strBuilder2);
      assertNotSame(strBuilder11, strBuilder8);
      assertSame(strBuilder11, strBuilder4);
      assertSame(strBuilder11, strBuilder0);
      assertSame(strBuilder11, strBuilder1);
      assertSame(strBuilder11, strBuilder10);
      assertNotSame(strBuilder11, strBuilder6);
      assertNotSame(strBuilder11, strBuilder9);
      
      StrBuilder strBuilder12 = new StrBuilder();
      assertTrue(strBuilder12.isEmpty());
      assertEquals(32, strBuilder12.capacity());
      assertNull(strBuilder12.getNewLineText());
      assertNull(strBuilder12.getNullText());
      assertEquals(0, strBuilder12.length());
      assertEquals(0, strBuilder12.size());
      assertFalse(strBuilder12.isNotEmpty());
      assertNotNull(strBuilder12);
      assertFalse(strBuilder12.equals((Object)strBuilder3));
      assertFalse(strBuilder12.equals((Object)strBuilder5));
      assertTrue(strBuilder12.equals((Object)strBuilder8));
      assertFalse(strBuilder12.equals((Object)strBuilder2));
      assertTrue(strBuilder12.equals((Object)strBuilder7));
      assertFalse(strBuilder12.equals((Object)strBuilder4));
      assertTrue(strBuilder12.equals((Object)strBuilder9));
      assertTrue(strBuilder12.equals((Object)strBuilder6));
      assertFalse(strBuilder12.equals((Object)strBuilder1));
      assertFalse(strBuilder12.equals((Object)strBuilder10));
      assertFalse(strBuilder12.equals((Object)strBuilder0));
      assertFalse(strBuilder12.equals((Object)strBuilder11));
      
      StrBuilder strBuilder13 = strBuilder0.setNullText("Invalid startIndex: ");
      assertEquals("Invalid startIndex: ", strBuilder0.getNewLineText());
      assertEquals(37, strBuilder0.size());
      assertEquals(74, strBuilder0.capacity());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals("Invalid startIndex: ", strBuilder0.getNullText());
      assertEquals(37, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(37, strBuilder13.length());
      assertEquals(37, strBuilder13.size());
      assertEquals(74, strBuilder13.capacity());
      assertTrue(strBuilder13.isNotEmpty());
      assertFalse(strBuilder13.isEmpty());
      assertEquals("Invalid startIndex: ", strBuilder13.getNullText());
      assertEquals("Invalid startIndex: ", strBuilder13.getNewLineText());
      assertNotNull(strBuilder13);
      assertFalse(strBuilder0.equals((Object)strBuilder8));
      assertFalse(strBuilder0.equals((Object)strBuilder6));
      assertFalse(strBuilder0.equals((Object)strBuilder7));
      assertFalse(strBuilder0.equals((Object)strBuilder12));
      assertFalse(strBuilder0.equals((Object)strBuilder9));
      assertFalse(strBuilder13.equals((Object)strBuilder9));
      assertFalse(strBuilder13.equals((Object)strBuilder7));
      assertFalse(strBuilder13.equals((Object)strBuilder6));
      assertFalse(strBuilder13.equals((Object)strBuilder8));
      assertFalse(strBuilder13.equals((Object)strBuilder12));
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder2);
      assertNotSame(strBuilder0, strBuilder7);
      assertNotSame(strBuilder0, strBuilder12);
      assertSame(strBuilder0, strBuilder13);
      assertSame(strBuilder0, strBuilder10);
      assertSame(strBuilder0, strBuilder11);
      assertNotSame(strBuilder0, strBuilder9);
      assertNotSame(strBuilder0, strBuilder8);
      assertNotSame(strBuilder0, strBuilder6);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder5);
      assertNotSame(strBuilder13, strBuilder9);
      assertNotSame(strBuilder13, strBuilder7);
      assertSame(strBuilder13, strBuilder1);
      assertSame(strBuilder13, strBuilder2);
      assertSame(strBuilder13, strBuilder5);
      assertSame(strBuilder13, strBuilder0);
      assertSame(strBuilder13, strBuilder11);
      assertNotSame(strBuilder13, strBuilder6);
      assertNotSame(strBuilder13, strBuilder8);
      assertSame(strBuilder13, strBuilder4);
      assertSame(strBuilder13, strBuilder3);
      assertSame(strBuilder13, strBuilder10);
      assertNotSame(strBuilder13, strBuilder12);
      
      StrBuilder strBuilder14 = strBuilder5.appendln((char[]) null, 5, 5);
      assertEquals("Invalid startIndex: ", strBuilder0.getNewLineText());
      assertEquals(154, strBuilder0.capacity());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(77, strBuilder0.length());
      assertEquals("Invalid startIndex: ", strBuilder0.getNullText());
      assertEquals(77, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertTrue(strBuilder14.isNotEmpty());
      assertEquals(77, strBuilder14.size());
      assertFalse(strBuilder14.isEmpty());
      assertEquals(154, strBuilder14.capacity());
      assertEquals("Invalid startIndex: ", strBuilder14.getNullText());
      assertEquals("Invalid startIndex: ", strBuilder14.getNewLineText());
      assertEquals(77, strBuilder14.length());
      assertEquals("Invalid startIndex: ", strBuilder5.getNewLineText());
      assertEquals(154, strBuilder5.capacity());
      assertTrue(strBuilder5.isNotEmpty());
      assertEquals(77, strBuilder5.length());
      assertEquals("Invalid startIndex: ", strBuilder5.getNullText());
      assertEquals(77, strBuilder5.size());
      assertFalse(strBuilder5.isEmpty());
      assertNotNull(strBuilder14);
      assertFalse(strBuilder0.equals((Object)strBuilder8));
      assertFalse(strBuilder0.equals((Object)strBuilder6));
      assertFalse(strBuilder0.equals((Object)strBuilder7));
      assertFalse(strBuilder0.equals((Object)strBuilder12));
      assertFalse(strBuilder0.equals((Object)strBuilder9));
      assertFalse(strBuilder14.equals((Object)strBuilder7));
      assertFalse(strBuilder14.equals((Object)strBuilder9));
      assertFalse(strBuilder14.equals((Object)strBuilder12));
      assertFalse(strBuilder14.equals((Object)strBuilder6));
      assertFalse(strBuilder14.equals((Object)strBuilder8));
      assertFalse(strBuilder5.equals((Object)strBuilder8));
      assertFalse(strBuilder5.equals((Object)strBuilder6));
      assertFalse(strBuilder5.equals((Object)strBuilder7));
      assertFalse(strBuilder5.equals((Object)strBuilder12));
      assertFalse(strBuilder5.equals((Object)strBuilder9));
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder2);
      assertNotSame(strBuilder0, strBuilder7);
      assertNotSame(strBuilder0, strBuilder12);
      assertSame(strBuilder0, strBuilder13);
      assertSame(strBuilder0, strBuilder10);
      assertSame(strBuilder0, strBuilder11);
      assertSame(strBuilder0, strBuilder14);
      assertNotSame(strBuilder0, strBuilder9);
      assertNotSame(strBuilder0, strBuilder8);
      assertNotSame(strBuilder0, strBuilder6);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder14, strBuilder1);
      assertSame(strBuilder14, strBuilder5);
      assertSame(strBuilder14, strBuilder2);
      assertSame(strBuilder14, strBuilder3);
      assertNotSame(strBuilder14, strBuilder12);
      assertSame(strBuilder14, strBuilder13);
      assertSame(strBuilder14, strBuilder10);
      assertNotSame(strBuilder14, strBuilder7);
      assertSame(strBuilder14, strBuilder4);
      assertNotSame(strBuilder14, strBuilder9);
      assertNotSame(strBuilder14, strBuilder6);
      assertNotSame(strBuilder14, strBuilder8);
      assertSame(strBuilder14, strBuilder0);
      assertSame(strBuilder14, strBuilder11);
      assertSame(strBuilder5, strBuilder4);
      assertSame(strBuilder5, strBuilder2);
      assertNotSame(strBuilder5, strBuilder7);
      assertNotSame(strBuilder5, strBuilder12);
      assertSame(strBuilder5, strBuilder0);
      assertSame(strBuilder5, strBuilder13);
      assertSame(strBuilder5, strBuilder10);
      assertSame(strBuilder5, strBuilder11);
      assertSame(strBuilder5, strBuilder14);
      assertNotSame(strBuilder5, strBuilder9);
      assertNotSame(strBuilder5, strBuilder8);
      assertNotSame(strBuilder5, strBuilder6);
      assertSame(strBuilder5, strBuilder1);
      assertSame(strBuilder5, strBuilder3);
      
      // Undeclared exception!
      try { 
        strBuilder1.replace((-2983), (-2983), "org.apache.commons.lang3.text.StrMatcher$NoMatcher");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -2983
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(0);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isNotEmpty());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.appendPadding(0, 'Q');
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isNotEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(0, strBuilder1.length());
      assertEquals(0, strBuilder1.size());
      assertTrue(strBuilder1.isEmpty());
      assertFalse(strBuilder1.isNotEmpty());
      assertNull(strBuilder1.getNullText());
      assertNotNull(strBuilder1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      
      StrBuilder strBuilder2 = strBuilder1.append((float) 1);
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(3, strBuilder0.length());
      assertEquals(3, strBuilder0.size());
      assertTrue(strBuilder1.isNotEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(32, strBuilder1.capacity());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(3, strBuilder1.size());
      assertEquals(3, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertEquals(3, strBuilder2.length());
      assertTrue(strBuilder2.isNotEmpty());
      assertEquals(3, strBuilder2.size());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(32, strBuilder2.capacity());
      assertNull(strBuilder2.getNewLineText());
      assertNull(strBuilder2.getNullText());
      assertNotNull(strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(3, strBuilder0.length());
      assertEquals(3, strBuilder0.size());
      assertTrue(strBuilder_StrBuilderReader0.ready());
      assertTrue(strBuilder_StrBuilderReader0.markSupported());
      assertNotNull(strBuilder_StrBuilderReader0);
      
      StrBuilder strBuilder3 = new StrBuilder(1);
      assertNull(strBuilder3.getNullText());
      assertEquals(0, strBuilder3.size());
      assertNull(strBuilder3.getNewLineText());
      assertTrue(strBuilder3.isEmpty());
      assertFalse(strBuilder3.isNotEmpty());
      assertEquals(1, strBuilder3.capacity());
      assertEquals(0, strBuilder3.length());
      assertNotNull(strBuilder3);
      assertFalse(strBuilder3.equals((Object)strBuilder0));
      assertFalse(strBuilder3.equals((Object)strBuilder2));
      assertFalse(strBuilder3.equals((Object)strBuilder1));
      
      StrBuilder strBuilder4 = new StrBuilder();
      assertFalse(strBuilder4.isNotEmpty());
      assertEquals(0, strBuilder4.length());
      assertEquals(32, strBuilder4.capacity());
      assertTrue(strBuilder4.isEmpty());
      assertNull(strBuilder4.getNullText());
      assertNull(strBuilder4.getNewLineText());
      assertEquals(0, strBuilder4.size());
      assertNotNull(strBuilder4);
      assertFalse(strBuilder4.equals((Object)strBuilder2));
      assertFalse(strBuilder4.equals((Object)strBuilder0));
      assertTrue(strBuilder4.equals((Object)strBuilder3));
      assertFalse(strBuilder4.equals((Object)strBuilder1));
      
      StrBuilder strBuilder5 = strBuilder3.setNullText("v-3ZB>+_.p%<");
      assertEquals(0, strBuilder3.size());
      assertNull(strBuilder3.getNewLineText());
      assertTrue(strBuilder3.isEmpty());
      assertEquals("v-3ZB>+_.p%<", strBuilder3.getNullText());
      assertFalse(strBuilder3.isNotEmpty());
      assertEquals(1, strBuilder3.capacity());
      assertEquals(0, strBuilder3.length());
      assertEquals(0, strBuilder5.size());
      assertNull(strBuilder5.getNewLineText());
      assertEquals(0, strBuilder5.length());
      assertFalse(strBuilder5.isNotEmpty());
      assertTrue(strBuilder5.isEmpty());
      assertEquals("v-3ZB>+_.p%<", strBuilder5.getNullText());
      assertEquals(1, strBuilder5.capacity());
      assertNotNull(strBuilder5);
      assertFalse(strBuilder3.equals((Object)strBuilder0));
      assertTrue(strBuilder3.equals((Object)strBuilder4));
      assertFalse(strBuilder3.equals((Object)strBuilder2));
      assertFalse(strBuilder3.equals((Object)strBuilder1));
      assertFalse(strBuilder5.equals((Object)strBuilder1));
      assertFalse(strBuilder5.equals((Object)strBuilder2));
      assertTrue(strBuilder5.equals((Object)strBuilder4));
      assertFalse(strBuilder5.equals((Object)strBuilder0));
      assertSame(strBuilder3, strBuilder5);
      assertNotSame(strBuilder3, strBuilder0);
      assertNotSame(strBuilder3, strBuilder2);
      assertNotSame(strBuilder3, strBuilder1);
      assertNotSame(strBuilder3, strBuilder4);
      assertSame(strBuilder5, strBuilder3);
      assertNotSame(strBuilder5, strBuilder1);
      assertNotSame(strBuilder5, strBuilder2);
      assertNotSame(strBuilder5, strBuilder4);
      assertNotSame(strBuilder5, strBuilder0);
      
      StrBuilder strBuilder6 = strBuilder5.append((StringBuilder) null);
      assertTrue(strBuilder3.isNotEmpty());
      assertFalse(strBuilder3.isEmpty());
      assertEquals(12, strBuilder3.length());
      assertEquals(24, strBuilder3.capacity());
      assertNull(strBuilder3.getNewLineText());
      assertEquals("v-3ZB>+_.p%<", strBuilder3.getNullText());
      assertEquals(12, strBuilder3.size());
      assertNull(strBuilder5.getNewLineText());
      assertEquals(24, strBuilder5.capacity());
      assertFalse(strBuilder5.isEmpty());
      assertEquals("v-3ZB>+_.p%<", strBuilder5.getNullText());
      assertEquals(12, strBuilder5.size());
      assertTrue(strBuilder5.isNotEmpty());
      assertEquals(12, strBuilder5.length());
      assertTrue(strBuilder6.isNotEmpty());
      assertFalse(strBuilder6.isEmpty());
      assertNull(strBuilder6.getNewLineText());
      assertEquals(12, strBuilder6.length());
      assertEquals("v-3ZB>+_.p%<", strBuilder6.getNullText());
      assertEquals(12, strBuilder6.size());
      assertEquals(24, strBuilder6.capacity());
      assertNotNull(strBuilder6);
      assertFalse(strBuilder3.equals((Object)strBuilder0));
      assertFalse(strBuilder3.equals((Object)strBuilder2));
      assertFalse(strBuilder3.equals((Object)strBuilder1));
      assertFalse(strBuilder3.equals((Object)strBuilder4));
      assertFalse(strBuilder5.equals((Object)strBuilder1));
      assertFalse(strBuilder5.equals((Object)strBuilder2));
      assertFalse(strBuilder5.equals((Object)strBuilder4));
      assertFalse(strBuilder5.equals((Object)strBuilder0));
      assertFalse(strBuilder6.equals((Object)strBuilder0));
      assertFalse(strBuilder6.equals((Object)strBuilder4));
      assertFalse(strBuilder6.equals((Object)strBuilder2));
      assertFalse(strBuilder6.equals((Object)strBuilder1));
      assertSame(strBuilder3, strBuilder5);
      assertNotSame(strBuilder3, strBuilder0);
      assertNotSame(strBuilder3, strBuilder2);
      assertNotSame(strBuilder3, strBuilder1);
      assertNotSame(strBuilder3, strBuilder4);
      assertSame(strBuilder3, strBuilder6);
      assertSame(strBuilder5, strBuilder3);
      assertSame(strBuilder5, strBuilder6);
      assertNotSame(strBuilder5, strBuilder1);
      assertNotSame(strBuilder5, strBuilder2);
      assertNotSame(strBuilder5, strBuilder4);
      assertNotSame(strBuilder5, strBuilder0);
      assertNotSame(strBuilder6, strBuilder0);
      assertNotSame(strBuilder6, strBuilder4);
      assertNotSame(strBuilder6, strBuilder2);
      assertNotSame(strBuilder6, strBuilder1);
      assertSame(strBuilder6, strBuilder5);
      assertSame(strBuilder6, strBuilder3);
      
      StrBuilder strBuilder7 = strBuilder1.appendln((StringBuffer) null);
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertEquals(4, strBuilder0.length());
      assertEquals(4, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertTrue(strBuilder1.isNotEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(32, strBuilder1.capacity());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(4, strBuilder1.length());
      assertEquals(4, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertEquals(4, strBuilder7.length());
      assertEquals(4, strBuilder7.size());
      assertNull(strBuilder7.getNullText());
      assertFalse(strBuilder7.isEmpty());
      assertNull(strBuilder7.getNewLineText());
      assertTrue(strBuilder7.isNotEmpty());
      assertEquals(32, strBuilder7.capacity());
      assertNotNull(strBuilder7);
      assertFalse(strBuilder0.equals((Object)strBuilder6));
      assertFalse(strBuilder0.equals((Object)strBuilder3));
      assertFalse(strBuilder0.equals((Object)strBuilder5));
      assertFalse(strBuilder0.equals((Object)strBuilder4));
      assertFalse(strBuilder1.equals((Object)strBuilder4));
      assertFalse(strBuilder1.equals((Object)strBuilder5));
      assertFalse(strBuilder1.equals((Object)strBuilder3));
      assertFalse(strBuilder1.equals((Object)strBuilder6));
      assertFalse(strBuilder7.equals((Object)strBuilder3));
      assertFalse(strBuilder7.equals((Object)strBuilder6));
      assertFalse(strBuilder7.equals((Object)strBuilder5));
      assertFalse(strBuilder7.equals((Object)strBuilder4));
      assertNotSame(strBuilder0, strBuilder6);
      assertSame(strBuilder0, strBuilder1);
      assertNotSame(strBuilder0, strBuilder3);
      assertNotSame(strBuilder0, strBuilder5);
      assertNotSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder7);
      assertNotSame(strBuilder1, strBuilder4);
      assertSame(strBuilder1, strBuilder7);
      assertSame(strBuilder1, strBuilder2);
      assertNotSame(strBuilder1, strBuilder5);
      assertNotSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder0);
      assertNotSame(strBuilder1, strBuilder6);
      assertNotSame(strBuilder7, strBuilder3);
      assertSame(strBuilder7, strBuilder0);
      assertNotSame(strBuilder7, strBuilder6);
      assertSame(strBuilder7, strBuilder2);
      assertNotSame(strBuilder7, strBuilder5);
      assertSame(strBuilder7, strBuilder1);
      assertNotSame(strBuilder7, strBuilder4);
      
      StrBuilder strBuilder8 = strBuilder3.appendNewLine();
      assertTrue(strBuilder3.isNotEmpty());
      assertFalse(strBuilder3.isEmpty());
      assertEquals(13, strBuilder3.length());
      assertEquals(24, strBuilder3.capacity());
      assertNull(strBuilder3.getNewLineText());
      assertEquals("v-3ZB>+_.p%<", strBuilder3.getNullText());
      assertEquals(13, strBuilder3.size());
      assertEquals(24, strBuilder8.capacity());
      assertTrue(strBuilder8.isNotEmpty());
      assertEquals(13, strBuilder8.length());
      assertNull(strBuilder8.getNewLineText());
      assertEquals("v-3ZB>+_.p%<", strBuilder8.getNullText());
      assertFalse(strBuilder8.isEmpty());
      assertEquals(13, strBuilder8.size());
      assertNotNull(strBuilder8);
      assertFalse(strBuilder3.equals((Object)strBuilder7));
      assertFalse(strBuilder3.equals((Object)strBuilder0));
      assertFalse(strBuilder3.equals((Object)strBuilder2));
      assertFalse(strBuilder3.equals((Object)strBuilder1));
      assertFalse(strBuilder3.equals((Object)strBuilder4));
      assertFalse(strBuilder8.equals((Object)strBuilder7));
      assertFalse(strBuilder8.equals((Object)strBuilder0));
      assertFalse(strBuilder8.equals((Object)strBuilder1));
      assertFalse(strBuilder8.equals((Object)strBuilder4));
      assertFalse(strBuilder8.equals((Object)strBuilder2));
      assertNotSame(strBuilder3, strBuilder7);
      assertSame(strBuilder3, strBuilder5);
      assertNotSame(strBuilder3, strBuilder0);
      assertNotSame(strBuilder3, strBuilder2);
      assertSame(strBuilder3, strBuilder8);
      assertNotSame(strBuilder3, strBuilder1);
      assertNotSame(strBuilder3, strBuilder4);
      assertSame(strBuilder3, strBuilder6);
      assertNotSame(strBuilder8, strBuilder7);
      assertSame(strBuilder8, strBuilder6);
      assertSame(strBuilder8, strBuilder5);
      assertSame(strBuilder8, strBuilder3);
      assertNotSame(strBuilder8, strBuilder0);
      assertNotSame(strBuilder8, strBuilder1);
      assertNotSame(strBuilder8, strBuilder4);
      assertNotSame(strBuilder8, strBuilder2);
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertFalse(strBuilder0.isNotEmpty());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.append((StrBuilder) null);
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertFalse(strBuilder0.isNotEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(32, strBuilder1.capacity());
      assertTrue(strBuilder1.isEmpty());
      assertEquals(0, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertEquals(0, strBuilder1.length());
      assertFalse(strBuilder1.isNotEmpty());
      assertNotNull(strBuilder1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      
      StrBuilder strBuilder2 = new StrBuilder();
      assertFalse(strBuilder2.isNotEmpty());
      assertEquals(0, strBuilder2.size());
      assertTrue(strBuilder2.isEmpty());
      assertEquals(0, strBuilder2.length());
      assertEquals(32, strBuilder2.capacity());
      assertNull(strBuilder2.getNewLineText());
      assertNull(strBuilder2.getNullText());
      assertNotNull(strBuilder2);
      assertTrue(strBuilder2.equals((Object)strBuilder1));
      assertTrue(strBuilder2.equals((Object)strBuilder0));
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = new StrBuilder(", '");
      assertEquals(3, strBuilder1.length());
      assertEquals(3, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertTrue(strBuilder1.isNotEmpty());
      assertEquals(35, strBuilder1.capacity());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertNotNull(strBuilder1);
      assertFalse(strBuilder1.equals((Object)strBuilder0));
      
      StrBuilder strBuilder2 = strBuilder0.append(100.0);
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(5, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(5, strBuilder0.length());
      assertEquals(5, strBuilder2.length());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(5, strBuilder2.size());
      assertNull(strBuilder2.getNullText());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(32, strBuilder2.capacity());
      assertTrue(strBuilder2.isNotEmpty());
      assertNotNull(strBuilder2);
      assertFalse(strBuilder0.equals((Object)strBuilder1));
      assertFalse(strBuilder2.equals((Object)strBuilder1));
      assertNotSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder2, strBuilder0);
      assertNotSame(strBuilder2, strBuilder1);
      
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(5, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(5, strBuilder0.length());
      assertTrue(strBuilder_StrBuilderReader0.markSupported());
      assertTrue(strBuilder_StrBuilderReader0.ready());
      assertNotNull(strBuilder_StrBuilderReader0);
      assertFalse(strBuilder0.equals((Object)strBuilder1));
      
      int int0 = strBuilder1.readFrom(strBuilder_StrBuilderReader0);
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(5, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(5, strBuilder0.length());
      assertEquals(8, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertEquals(8, strBuilder1.length());
      assertTrue(strBuilder1.isNotEmpty());
      assertEquals(35, strBuilder1.capacity());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertFalse(strBuilder_StrBuilderReader0.ready());
      assertTrue(strBuilder_StrBuilderReader0.markSupported());
      assertEquals(5, int0);
      assertFalse(strBuilder0.equals((Object)strBuilder1));
      assertFalse(strBuilder1.equals((Object)strBuilder2));
      assertFalse(strBuilder1.equals((Object)strBuilder0));
      assertNotSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertNotSame(strBuilder1, strBuilder2);
      assertNotSame(strBuilder1, strBuilder0);
      
      StrBuilder strBuilder3 = strBuilder1.replaceFirst(", '", "");
      assertEquals(5, strBuilder1.length());
      assertEquals(5, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertTrue(strBuilder1.isNotEmpty());
      assertEquals(35, strBuilder1.capacity());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(5, strBuilder3.length());
      assertEquals(5, strBuilder3.size());
      assertTrue(strBuilder3.isNotEmpty());
      assertEquals(35, strBuilder3.capacity());
      assertFalse(strBuilder3.isEmpty());
      assertNull(strBuilder3.getNewLineText());
      assertNull(strBuilder3.getNullText());
      assertNotNull(strBuilder3);
      assertTrue(strBuilder1.equals((Object)strBuilder0));
      assertTrue(strBuilder1.equals((Object)strBuilder2));
      assertTrue(strBuilder3.equals((Object)strBuilder0));
      assertTrue(strBuilder3.equals((Object)strBuilder2));
      assertNotSame(strBuilder1, strBuilder2);
      assertNotSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder3);
      assertNotSame(strBuilder3, strBuilder0);
      assertNotSame(strBuilder3, strBuilder2);
      assertSame(strBuilder3, strBuilder1);
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(32, strBuilder0.capacity());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isEmpty());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.append(100.0);
      assertEquals(32, strBuilder0.capacity());
      assertEquals(5, strBuilder0.size());
      assertEquals(5, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(5, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertTrue(strBuilder1.isNotEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(5, strBuilder1.length());
      assertNotNull(strBuilder1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder1.new StrBuilderReader();
      assertEquals(32, strBuilder0.capacity());
      assertEquals(5, strBuilder0.size());
      assertEquals(5, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(5, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertTrue(strBuilder1.isNotEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(5, strBuilder1.length());
      assertTrue(strBuilder_StrBuilderReader0.markSupported());
      assertTrue(strBuilder_StrBuilderReader0.ready());
      assertNotNull(strBuilder_StrBuilderReader0);
      
      // Undeclared exception!
      strBuilder0.readFrom(strBuilder_StrBuilderReader0);
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder((-1872));
      assertFalse(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.reverse();
      assertFalse(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder1.capacity());
      assertTrue(strBuilder1.isEmpty());
      assertFalse(strBuilder1.isNotEmpty());
      assertEquals(0, strBuilder1.size());
      assertEquals(0, strBuilder1.length());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertNotNull(strBuilder1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
      assertFalse(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertFalse(strBuilder_StrBuilderReader0.ready());
      assertTrue(strBuilder_StrBuilderReader0.markSupported());
      assertNotNull(strBuilder_StrBuilderReader0);
      
      char[] charArray0 = new char[5];
      charArray0[0] = '1';
      charArray0[1] = '1';
      charArray0[2] = '.';
      charArray0[3] = '{';
      charArray0[4] = 'W';
      int int0 = strBuilder_StrBuilderReader0.read(charArray0);
      assertFalse(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertFalse(strBuilder_StrBuilderReader0.ready());
      assertTrue(strBuilder_StrBuilderReader0.markSupported());
      assertEquals((-1), int0);
      assertArrayEquals(new char[] {'1', '1', '.', '{', 'W'}, charArray0);
      assertEquals(5, charArray0.length);
      assertSame(strBuilder0, strBuilder1);
      
      int int1 = 308;
      StringBuffer stringBuffer0 = new StringBuffer(strBuilder1);
      assertFalse(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder1.capacity());
      assertTrue(strBuilder1.isEmpty());
      assertFalse(strBuilder1.isNotEmpty());
      assertEquals(0, strBuilder1.size());
      assertEquals(0, strBuilder1.length());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals("", stringBuffer0.toString());
      assertEquals(0, stringBuffer0.length());
      assertNotNull(stringBuffer0);
      
      // Undeclared exception!
      try { 
        strBuilder1.append(stringBuffer0, 8192, (-1872));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // startIndex must be valid
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertFalse(strBuilder0.isNotEmpty());
      assertNotNull(strBuilder0);
      
      char[] charArray0 = new char[0];
      StrBuilder strBuilder1 = strBuilder0.appendln(charArray0);
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(1, strBuilder0.length());
      assertEquals(1, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder1.isNotEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(1, strBuilder1.length());
      assertEquals(1, strBuilder1.size());
      assertNotNull(strBuilder1);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder1.new StrBuilderReader();
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(1, strBuilder0.length());
      assertEquals(1, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder1.isNotEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(1, strBuilder1.length());
      assertEquals(1, strBuilder1.size());
      assertTrue(strBuilder_StrBuilderReader0.markSupported());
      assertTrue(strBuilder_StrBuilderReader0.ready());
      assertNotNull(strBuilder_StrBuilderReader0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      
      int int0 = strBuilder_StrBuilderReader0.read(charArray0);
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(1, strBuilder0.length());
      assertEquals(1, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder1.isNotEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(1, strBuilder1.length());
      assertEquals(1, strBuilder1.size());
      assertTrue(strBuilder_StrBuilderReader0.markSupported());
      assertTrue(strBuilder_StrBuilderReader0.ready());
      assertEquals(0, int0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      
      StrBuilder strBuilder2 = new StrBuilder(0);
      assertFalse(strBuilder2.isNotEmpty());
      assertNull(strBuilder2.getNullText());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(0, strBuilder2.size());
      assertEquals(0, strBuilder2.length());
      assertTrue(strBuilder2.isEmpty());
      assertEquals(32, strBuilder2.capacity());
      assertNotNull(strBuilder2);
      assertFalse(strBuilder2.equals((Object)strBuilder0));
      assertFalse(strBuilder2.equals((Object)strBuilder1));
      
      StrBuilder strBuilder3 = strBuilder2.append((CharSequence) strBuilder1);
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(1, strBuilder0.length());
      assertEquals(1, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder1.isNotEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(1, strBuilder1.length());
      assertEquals(1, strBuilder1.size());
      assertEquals(1, strBuilder2.size());
      assertTrue(strBuilder2.isNotEmpty());
      assertFalse(strBuilder2.isEmpty());
      assertNull(strBuilder2.getNullText());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(1, strBuilder2.length());
      assertEquals(32, strBuilder2.capacity());
      assertEquals(1, strBuilder3.length());
      assertEquals(1, strBuilder3.size());
      assertNull(strBuilder3.getNullText());
      assertNull(strBuilder3.getNewLineText());
      assertEquals(32, strBuilder3.capacity());
      assertTrue(strBuilder3.isNotEmpty());
      assertFalse(strBuilder3.isEmpty());
      assertNotNull(strBuilder3);
      assertTrue(strBuilder0.equals((Object)strBuilder2));
      assertTrue(strBuilder1.equals((Object)strBuilder2));
      assertTrue(strBuilder2.equals((Object)strBuilder1));
      assertTrue(strBuilder2.equals((Object)strBuilder0));
      assertTrue(strBuilder3.equals((Object)strBuilder0));
      assertTrue(strBuilder3.equals((Object)strBuilder1));
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      assertNotSame(strBuilder0, strBuilder3);
      assertNotSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotSame(strBuilder1, strBuilder2);
      assertNotSame(strBuilder1, strBuilder3);
      assertNotSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder3);
      assertNotSame(strBuilder2, strBuilder1);
      assertNotSame(strBuilder3, strBuilder0);
      assertNotSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder2);
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isEmpty());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertNotNull(strBuilder0);
      
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      assertEquals(Locale.FilteringMode.REJECT_EXTENDED_RANGES, locale_FilteringMode0);
      
      boolean boolean0 = strBuilder0.equals((Object) locale_FilteringMode0);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isEmpty());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertFalse(boolean0);
      
      StrBuilder strBuilder1 = new StrBuilder();
      assertNull(strBuilder1.getNewLineText());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNullText());
      assertFalse(strBuilder1.isNotEmpty());
      assertTrue(strBuilder1.isEmpty());
      assertEquals(0, strBuilder1.size());
      assertEquals(0, strBuilder1.length());
      assertNotNull(strBuilder1);
      assertTrue(strBuilder1.equals((Object)strBuilder0));
      
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isEmpty());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder_StrBuilderReader0.markSupported());
      assertFalse(strBuilder_StrBuilderReader0.ready());
      assertNotNull(strBuilder_StrBuilderReader0);
      assertTrue(strBuilder0.equals((Object)strBuilder1));
      
      StrBuilder strBuilder2 = strBuilder0.append((CharSequence) "");
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isEmpty());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertFalse(strBuilder2.isNotEmpty());
      assertTrue(strBuilder2.isEmpty());
      assertNull(strBuilder2.getNullText());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(32, strBuilder2.capacity());
      assertEquals(0, strBuilder2.size());
      assertEquals(0, strBuilder2.length());
      assertNotNull(strBuilder2);
      assertTrue(strBuilder0.equals((Object)strBuilder1));
      assertTrue(strBuilder2.equals((Object)strBuilder1));
      assertNotSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertNotSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertFalse(strBuilder0.isNotEmpty());
      assertNotNull(strBuilder0);
      
      int int0 = StrBuilder.CAPACITY;
      assertEquals(32, int0);
      
      StrBuilder strBuilder1 = strBuilder0.trim();
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertFalse(strBuilder0.isNotEmpty());
      assertFalse(strBuilder1.isNotEmpty());
      assertNull(strBuilder1.getNullText());
      assertEquals(0, strBuilder1.length());
      assertEquals(0, strBuilder1.size());
      assertTrue(strBuilder1.isEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertNotNull(strBuilder1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) "startIndex must be valid";
      objectArray0[1] = (Object) strBuilder0;
      objectArray0[2] = (Object) strBuilder0;
      String string0 = strBuilder0.rightString(32);
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertFalse(strBuilder0.isNotEmpty());
      assertNotNull(string0);
      assertEquals("", string0);
      assertSame(strBuilder0, strBuilder1);
      
      StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer0 = strBuilder0.new StrBuilderTokenizer();
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder_StrBuilderTokenizer0.nextIndex());
      assertEquals((-1), strBuilder_StrBuilderTokenizer0.previousIndex());
      assertTrue(strBuilder_StrBuilderTokenizer0.isIgnoreEmptyTokens());
      assertFalse(strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull());
      assertNotNull(strBuilder_StrBuilderTokenizer0);
      
      StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer1 = (StrBuilder.StrBuilderTokenizer)strBuilder_StrBuilderTokenizer0.cloneReset();
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder_StrBuilderTokenizer0.nextIndex());
      assertEquals((-1), strBuilder_StrBuilderTokenizer0.previousIndex());
      assertTrue(strBuilder_StrBuilderTokenizer0.isIgnoreEmptyTokens());
      assertFalse(strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull());
      assertEquals((-1), strBuilder_StrBuilderTokenizer1.previousIndex());
      assertTrue(strBuilder_StrBuilderTokenizer1.isIgnoreEmptyTokens());
      assertEquals(0, strBuilder_StrBuilderTokenizer1.nextIndex());
      assertFalse(strBuilder_StrBuilderTokenizer1.isEmptyTokenAsNull());
      assertNotNull(strBuilder_StrBuilderTokenizer1);
      assertFalse(strBuilder_StrBuilderTokenizer1.equals((Object)strBuilder_StrBuilderTokenizer0));
      assertSame(strBuilder0, strBuilder1);
      assertNotSame(strBuilder_StrBuilderTokenizer0, strBuilder_StrBuilderTokenizer1);
      assertNotSame(strBuilder_StrBuilderTokenizer1, strBuilder_StrBuilderTokenizer0);
      
      objectArray0[3] = (Object) strBuilder_StrBuilderTokenizer1;
      StrBuilder strBuilder2 = strBuilder0.appendWithSeparators(objectArray0, "startIndex must be valid");
      assertNull(strBuilder0.getNullText());
      assertEquals(335, strBuilder0.length());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(335, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(528, strBuilder0.capacity());
      assertNull(strBuilder2.getNullText());
      assertEquals(528, strBuilder2.capacity());
      assertNull(strBuilder2.getNewLineText());
      assertTrue(strBuilder2.isNotEmpty());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(335, strBuilder2.length());
      assertEquals(335, strBuilder2.size());
      assertNotNull(strBuilder2);
      assertEquals(4, objectArray0.length);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      
      int int1 = StrBuilder.CAPACITY;
      assertEquals(32, int1);
      assertTrue(int1 == int0);
      
      StrBuilder strBuilder3 = strBuilder0.replaceAll('N', '[');
      assertNull(strBuilder0.getNullText());
      assertEquals(335, strBuilder0.length());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(335, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(528, strBuilder0.capacity());
      assertEquals(335, strBuilder3.size());
      assertTrue(strBuilder3.isNotEmpty());
      assertFalse(strBuilder3.isEmpty());
      assertEquals(335, strBuilder3.length());
      assertEquals(528, strBuilder3.capacity());
      assertNull(strBuilder3.getNullText());
      assertNull(strBuilder3.getNewLineText());
      assertNotNull(strBuilder3);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder2);
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      StrBuilder strBuilder0 = new StrBuilder();
      assertFalse(strBuilder0.isNotEmpty());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNotNull(strBuilder0);
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[0];
      boolean boolean1 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      
      char char0 = 'y';
      StrBuilder strBuilder1 = strBuilder0.deleteAll('y');
      assertFalse(strBuilder0.isNotEmpty());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder1.capacity());
      assertTrue(strBuilder1.isEmpty());
      assertEquals(0, strBuilder1.length());
      assertEquals(0, strBuilder1.size());
      assertFalse(strBuilder1.isNotEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertNotNull(strBuilder1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      
      String string0 = "";
      boolean boolean2 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      StrBuilder strBuilder2 = strBuilder1.append((-121.33F));
      assertNull(strBuilder0.getNullText());
      assertEquals(7, strBuilder0.size());
      assertEquals(7, strBuilder0.length());
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(32, strBuilder1.capacity());
      assertTrue(strBuilder1.isNotEmpty());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(7, strBuilder1.length());
      assertEquals(7, strBuilder1.size());
      assertNull(strBuilder2.getNullText());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(7, strBuilder2.length());
      assertEquals(7, strBuilder2.size());
      assertNull(strBuilder2.getNewLineText());
      assertTrue(strBuilder2.isNotEmpty());
      assertEquals(32, strBuilder2.capacity());
      assertNotNull(strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      
      StrBuilder strBuilder3 = strBuilder1.setNewLineText("");
      assertNull(strBuilder0.getNullText());
      assertEquals(7, strBuilder0.size());
      assertEquals(7, strBuilder0.length());
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertEquals("", strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(32, strBuilder1.capacity());
      assertTrue(strBuilder1.isNotEmpty());
      assertFalse(strBuilder1.isEmpty());
      assertEquals("", strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(7, strBuilder1.length());
      assertEquals(7, strBuilder1.size());
      assertEquals(32, strBuilder3.capacity());
      assertFalse(strBuilder3.isEmpty());
      assertTrue(strBuilder3.isNotEmpty());
      assertNull(strBuilder3.getNullText());
      assertEquals(7, strBuilder3.length());
      assertEquals("", strBuilder3.getNewLineText());
      assertEquals(7, strBuilder3.size());
      assertNotNull(strBuilder3);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder3, strBuilder2);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder0);
      
      StrBuilder strBuilder4 = strBuilder1.appendln(0.0F);
      assertEquals(10, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertEquals("", strBuilder0.getNewLineText());
      assertEquals(10, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(10, strBuilder1.length());
      assertEquals(10, strBuilder1.size());
      assertTrue(strBuilder1.isNotEmpty());
      assertFalse(strBuilder1.isEmpty());
      assertEquals("", strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertTrue(strBuilder4.isNotEmpty());
      assertEquals(32, strBuilder4.capacity());
      assertEquals(10, strBuilder4.length());
      assertEquals(10, strBuilder4.size());
      assertEquals("", strBuilder4.getNewLineText());
      assertFalse(strBuilder4.isEmpty());
      assertNull(strBuilder4.getNullText());
      assertNotNull(strBuilder4);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder4);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder4, strBuilder1);
      assertSame(strBuilder4, strBuilder0);
      assertSame(strBuilder4, strBuilder2);
      assertSame(strBuilder4, strBuilder3);
      
      int int0 = (-288);
      boolean boolean3 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      assertFalse(boolean3);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      
      StringWriter stringWriter0 = null;
      try {
        stringWriter0 = new StringWriter((-288));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative buffer size
         //
         verifyException("java.io.StringWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertFalse(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNullText());
      assertNotNull(strBuilder0);
      
      StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer0 = strBuilder0.new StrBuilderTokenizer();
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertFalse(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull());
      assertEquals((-1), strBuilder_StrBuilderTokenizer0.previousIndex());
      assertEquals(0, strBuilder_StrBuilderTokenizer0.nextIndex());
      assertTrue(strBuilder_StrBuilderTokenizer0.isIgnoreEmptyTokens());
      assertNotNull(strBuilder_StrBuilderTokenizer0);
      
      StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer1 = (StrBuilder.StrBuilderTokenizer)strBuilder_StrBuilderTokenizer0.cloneReset();
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertFalse(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull());
      assertEquals((-1), strBuilder_StrBuilderTokenizer0.previousIndex());
      assertEquals(0, strBuilder_StrBuilderTokenizer0.nextIndex());
      assertTrue(strBuilder_StrBuilderTokenizer0.isIgnoreEmptyTokens());
      assertEquals((-1), strBuilder_StrBuilderTokenizer1.previousIndex());
      assertEquals(0, strBuilder_StrBuilderTokenizer1.nextIndex());
      assertFalse(strBuilder_StrBuilderTokenizer1.isEmptyTokenAsNull());
      assertTrue(strBuilder_StrBuilderTokenizer1.isIgnoreEmptyTokens());
      assertNotNull(strBuilder_StrBuilderTokenizer1);
      assertFalse(strBuilder_StrBuilderTokenizer1.equals((Object)strBuilder_StrBuilderTokenizer0));
      assertNotSame(strBuilder_StrBuilderTokenizer0, strBuilder_StrBuilderTokenizer1);
      assertNotSame(strBuilder_StrBuilderTokenizer1, strBuilder_StrBuilderTokenizer0);
      
      char[] charArray0 = new char[5];
      charArray0[0] = '^';
      charArray0[1] = 'X';
      charArray0[3] = '@';
      StringWriter stringWriter0 = new StringWriter(0);
      assertEquals("", stringWriter0.toString());
      assertNotNull(stringWriter0);
      
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      assertEquals("", stringWriter0.toString());
      assertEquals(0, stringBuffer0.length());
      assertEquals("", stringBuffer0.toString());
      assertNotNull(stringBuffer0);
      
      StrBuilder strBuilder1 = strBuilder0.append(stringBuffer0, 0, 0);
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertFalse(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals("", stringWriter0.toString());
      assertEquals(0, stringBuffer0.length());
      assertEquals("", stringBuffer0.toString());
      assertNull(strBuilder1.getNullText());
      assertEquals(0, strBuilder1.length());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(0, strBuilder1.size());
      assertFalse(strBuilder1.isNotEmpty());
      assertTrue(strBuilder1.isEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertNotNull(strBuilder1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      
      StrBuilder strBuilder2 = new StrBuilder();
      assertFalse(strBuilder2.isNotEmpty());
      assertTrue(strBuilder2.isEmpty());
      assertEquals(32, strBuilder2.capacity());
      assertEquals(0, strBuilder2.size());
      assertEquals(0, strBuilder2.length());
      assertNull(strBuilder2.getNullText());
      assertNull(strBuilder2.getNewLineText());
      assertNotNull(strBuilder2);
      assertTrue(strBuilder2.equals((Object)strBuilder0));
      assertTrue(strBuilder2.equals((Object)strBuilder1));
      
      StrBuilder strBuilder3 = strBuilder2.setNewLineText("N1Q}50yw4s*");
      assertFalse(strBuilder2.isNotEmpty());
      assertTrue(strBuilder2.isEmpty());
      assertEquals("N1Q}50yw4s*", strBuilder2.getNewLineText());
      assertEquals(32, strBuilder2.capacity());
      assertEquals(0, strBuilder2.size());
      assertEquals(0, strBuilder2.length());
      assertNull(strBuilder2.getNullText());
      assertEquals(0, strBuilder3.length());
      assertNull(strBuilder3.getNullText());
      assertEquals(0, strBuilder3.size());
      assertFalse(strBuilder3.isNotEmpty());
      assertEquals("N1Q}50yw4s*", strBuilder3.getNewLineText());
      assertEquals(32, strBuilder3.capacity());
      assertTrue(strBuilder3.isEmpty());
      assertNotNull(strBuilder3);
      assertTrue(strBuilder2.equals((Object)strBuilder0));
      assertTrue(strBuilder2.equals((Object)strBuilder1));
      assertTrue(strBuilder3.equals((Object)strBuilder0));
      assertTrue(strBuilder3.equals((Object)strBuilder1));
      assertSame(strBuilder2, strBuilder3);
      assertNotSame(strBuilder2, strBuilder0);
      assertNotSame(strBuilder2, strBuilder1);
      assertNotSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder2);
      assertNotSame(strBuilder3, strBuilder0);
      
      StrBuilder strBuilder4 = new StrBuilder();
      assertEquals(32, strBuilder4.capacity());
      assertFalse(strBuilder4.isNotEmpty());
      assertEquals(0, strBuilder4.size());
      assertNull(strBuilder4.getNullText());
      assertEquals(0, strBuilder4.length());
      assertNull(strBuilder4.getNewLineText());
      assertTrue(strBuilder4.isEmpty());
      assertNotNull(strBuilder4);
      assertTrue(strBuilder4.equals((Object)strBuilder1));
      assertTrue(strBuilder4.equals((Object)strBuilder0));
      assertTrue(strBuilder4.equals((Object)strBuilder2));
      assertTrue(strBuilder4.equals((Object)strBuilder3));
      
      StrBuilder strBuilder5 = strBuilder1.setNullText("N1Q}50yw4s*");
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals("N1Q}50yw4s*", strBuilder0.getNullText());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals("", stringWriter0.toString());
      assertEquals(0, stringBuffer0.length());
      assertEquals("", stringBuffer0.toString());
      assertEquals(0, strBuilder1.length());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(0, strBuilder1.size());
      assertFalse(strBuilder1.isNotEmpty());
      assertEquals("N1Q}50yw4s*", strBuilder1.getNullText());
      assertTrue(strBuilder1.isEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(0, strBuilder5.length());
      assertNull(strBuilder5.getNewLineText());
      assertEquals(0, strBuilder5.size());
      assertEquals(32, strBuilder5.capacity());
      assertTrue(strBuilder5.isEmpty());
      assertEquals("N1Q}50yw4s*", strBuilder5.getNullText());
      assertFalse(strBuilder5.isNotEmpty());
      assertNotNull(strBuilder5);
      assertTrue(strBuilder0.equals((Object)strBuilder4));
      assertTrue(strBuilder0.equals((Object)strBuilder3));
      assertTrue(strBuilder0.equals((Object)strBuilder2));
      assertTrue(strBuilder1.equals((Object)strBuilder2));
      assertTrue(strBuilder1.equals((Object)strBuilder3));
      assertTrue(strBuilder1.equals((Object)strBuilder4));
      assertTrue(strBuilder5.equals((Object)strBuilder3));
      assertTrue(strBuilder5.equals((Object)strBuilder2));
      assertTrue(strBuilder5.equals((Object)strBuilder4));
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder1);
      assertNotSame(strBuilder0, strBuilder2);
      assertNotSame(strBuilder0, strBuilder3);
      assertNotSame(strBuilder0, strBuilder4);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder5);
      assertNotSame(strBuilder1, strBuilder2);
      assertNotSame(strBuilder1, strBuilder3);
      assertNotSame(strBuilder1, strBuilder4);
      assertNotSame(strBuilder5, strBuilder4);
      assertSame(strBuilder5, strBuilder0);
      assertNotSame(strBuilder5, strBuilder3);
      assertNotSame(strBuilder5, strBuilder2);
      assertSame(strBuilder5, strBuilder1);
      
      String string0 = strBuilder5.rightString(76);
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals("N1Q}50yw4s*", strBuilder0.getNullText());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals("", stringWriter0.toString());
      assertEquals(0, stringBuffer0.length());
      assertEquals("", stringBuffer0.toString());
      assertEquals(0, strBuilder1.length());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(0, strBuilder1.size());
      assertFalse(strBuilder1.isNotEmpty());
      assertEquals("N1Q}50yw4s*", strBuilder1.getNullText());
      assertTrue(strBuilder1.isEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(0, strBuilder5.length());
      assertNull(strBuilder5.getNewLineText());
      assertEquals(0, strBuilder5.size());
      assertEquals(32, strBuilder5.capacity());
      assertTrue(strBuilder5.isEmpty());
      assertEquals("N1Q}50yw4s*", strBuilder5.getNullText());
      assertFalse(strBuilder5.isNotEmpty());
      assertNotNull(string0);
      assertEquals("", string0);
      assertTrue(strBuilder0.equals((Object)strBuilder4));
      assertTrue(strBuilder0.equals((Object)strBuilder3));
      assertTrue(strBuilder0.equals((Object)strBuilder2));
      assertTrue(strBuilder1.equals((Object)strBuilder2));
      assertTrue(strBuilder1.equals((Object)strBuilder3));
      assertTrue(strBuilder1.equals((Object)strBuilder4));
      assertTrue(strBuilder5.equals((Object)strBuilder3));
      assertTrue(strBuilder5.equals((Object)strBuilder2));
      assertTrue(strBuilder5.equals((Object)strBuilder4));
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder1);
      assertNotSame(strBuilder0, strBuilder2);
      assertNotSame(strBuilder0, strBuilder3);
      assertNotSame(strBuilder0, strBuilder4);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder5);
      assertNotSame(strBuilder1, strBuilder2);
      assertNotSame(strBuilder1, strBuilder3);
      assertNotSame(strBuilder1, strBuilder4);
      assertNotSame(strBuilder5, strBuilder4);
      assertSame(strBuilder5, strBuilder0);
      assertNotSame(strBuilder5, strBuilder3);
      assertNotSame(strBuilder5, strBuilder2);
      assertSame(strBuilder5, strBuilder1);
      
      StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer2 = (StrBuilder.StrBuilderTokenizer)strBuilder_StrBuilderTokenizer1.cloneReset();
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals("N1Q}50yw4s*", strBuilder0.getNullText());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertFalse(strBuilder0.isNotEmpty());
      assertFalse(strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull());
      assertEquals((-1), strBuilder_StrBuilderTokenizer0.previousIndex());
      assertEquals(0, strBuilder_StrBuilderTokenizer0.nextIndex());
      assertTrue(strBuilder_StrBuilderTokenizer0.isIgnoreEmptyTokens());
      assertEquals((-1), strBuilder_StrBuilderTokenizer1.previousIndex());
      assertEquals(0, strBuilder_StrBuilderTokenizer1.nextIndex());
      assertFalse(strBuilder_StrBuilderTokenizer1.isEmptyTokenAsNull());
      assertTrue(strBuilder_StrBuilderTokenizer1.isIgnoreEmptyTokens());
      assertTrue(strBuilder_StrBuilderTokenizer2.isIgnoreEmptyTokens());
      assertEquals((-1), strBuilder_StrBuilderTokenizer2.previousIndex());
      assertEquals(0, strBuilder_StrBuilderTokenizer2.nextIndex());
      assertFalse(strBuilder_StrBuilderTokenizer2.isEmptyTokenAsNull());
      assertNotNull(strBuilder_StrBuilderTokenizer2);
      assertTrue(strBuilder0.equals((Object)strBuilder4));
      assertTrue(strBuilder0.equals((Object)strBuilder3));
      assertTrue(strBuilder0.equals((Object)strBuilder2));
      assertFalse(strBuilder_StrBuilderTokenizer0.equals((Object)strBuilder_StrBuilderTokenizer1));
      assertFalse(strBuilder_StrBuilderTokenizer1.equals((Object)strBuilder_StrBuilderTokenizer0));
      assertFalse(strBuilder_StrBuilderTokenizer2.equals((Object)strBuilder_StrBuilderTokenizer0));
      assertFalse(strBuilder_StrBuilderTokenizer2.equals((Object)strBuilder_StrBuilderTokenizer1));
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder1);
      assertNotSame(strBuilder0, strBuilder2);
      assertNotSame(strBuilder0, strBuilder3);
      assertNotSame(strBuilder0, strBuilder4);
      assertNotSame(strBuilder_StrBuilderTokenizer0, strBuilder_StrBuilderTokenizer2);
      assertNotSame(strBuilder_StrBuilderTokenizer0, strBuilder_StrBuilderTokenizer1);
      assertNotSame(strBuilder_StrBuilderTokenizer1, strBuilder_StrBuilderTokenizer0);
      assertNotSame(strBuilder_StrBuilderTokenizer1, strBuilder_StrBuilderTokenizer2);
      assertNotSame(strBuilder_StrBuilderTokenizer2, strBuilder_StrBuilderTokenizer0);
      assertNotSame(strBuilder_StrBuilderTokenizer2, strBuilder_StrBuilderTokenizer1);
      
      StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer3 = (StrBuilder.StrBuilderTokenizer)strBuilder_StrBuilderTokenizer0.clone();
      assertEquals((-1), strBuilder_StrBuilderTokenizer3.previousIndex());
      assertEquals(0, strBuilder_StrBuilderTokenizer3.nextIndex());
      assertFalse(strBuilder_StrBuilderTokenizer3.isEmptyTokenAsNull());
      assertTrue(strBuilder_StrBuilderTokenizer3.isIgnoreEmptyTokens());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals("N1Q}50yw4s*", strBuilder0.getNullText());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertFalse(strBuilder0.isNotEmpty());
      assertFalse(strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull());
      assertEquals((-1), strBuilder_StrBuilderTokenizer0.previousIndex());
      assertEquals(0, strBuilder_StrBuilderTokenizer0.nextIndex());
      assertTrue(strBuilder_StrBuilderTokenizer0.isIgnoreEmptyTokens());
      assertNotNull(strBuilder_StrBuilderTokenizer3);
      assertFalse(strBuilder_StrBuilderTokenizer3.equals((Object)strBuilder_StrBuilderTokenizer2));
      assertFalse(strBuilder_StrBuilderTokenizer3.equals((Object)strBuilder_StrBuilderTokenizer1));
      assertFalse(strBuilder_StrBuilderTokenizer3.equals((Object)strBuilder_StrBuilderTokenizer0));
      assertTrue(strBuilder0.equals((Object)strBuilder4));
      assertTrue(strBuilder0.equals((Object)strBuilder3));
      assertTrue(strBuilder0.equals((Object)strBuilder2));
      assertFalse(strBuilder_StrBuilderTokenizer0.equals((Object)strBuilder_StrBuilderTokenizer2));
      assertFalse(strBuilder_StrBuilderTokenizer0.equals((Object)strBuilder_StrBuilderTokenizer1));
      assertNotSame(strBuilder_StrBuilderTokenizer3, strBuilder_StrBuilderTokenizer2);
      assertNotSame(strBuilder_StrBuilderTokenizer3, strBuilder_StrBuilderTokenizer1);
      assertNotSame(strBuilder_StrBuilderTokenizer3, strBuilder_StrBuilderTokenizer0);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder1);
      assertNotSame(strBuilder0, strBuilder2);
      assertNotSame(strBuilder0, strBuilder3);
      assertNotSame(strBuilder0, strBuilder4);
      assertNotSame(strBuilder_StrBuilderTokenizer0, strBuilder_StrBuilderTokenizer3);
      assertNotSame(strBuilder_StrBuilderTokenizer0, strBuilder_StrBuilderTokenizer2);
      assertNotSame(strBuilder_StrBuilderTokenizer0, strBuilder_StrBuilderTokenizer1);
      
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder2.new StrBuilderReader();
      assertFalse(strBuilder_StrBuilderReader0.ready());
      assertTrue(strBuilder_StrBuilderReader0.markSupported());
      assertFalse(strBuilder2.isNotEmpty());
      assertTrue(strBuilder2.isEmpty());
      assertEquals("N1Q}50yw4s*", strBuilder2.getNewLineText());
      assertEquals(32, strBuilder2.capacity());
      assertEquals(0, strBuilder2.size());
      assertEquals(0, strBuilder2.length());
      assertNull(strBuilder2.getNullText());
      assertNotNull(strBuilder_StrBuilderReader0);
      assertTrue(strBuilder2.equals((Object)strBuilder0));
      assertTrue(strBuilder2.equals((Object)strBuilder1));
      assertTrue(strBuilder2.equals((Object)strBuilder4));
      assertTrue(strBuilder2.equals((Object)strBuilder5));
      
      int int0 = strBuilder_StrBuilderReader0.read(charArray0);
      assertFalse(strBuilder_StrBuilderReader0.ready());
      assertTrue(strBuilder_StrBuilderReader0.markSupported());
      assertFalse(strBuilder2.isNotEmpty());
      assertTrue(strBuilder2.isEmpty());
      assertEquals("N1Q}50yw4s*", strBuilder2.getNewLineText());
      assertEquals(32, strBuilder2.capacity());
      assertEquals(0, strBuilder2.size());
      assertEquals(0, strBuilder2.length());
      assertNull(strBuilder2.getNullText());
      assertEquals((-1), int0);
      assertTrue(strBuilder2.equals((Object)strBuilder0));
      assertTrue(strBuilder2.equals((Object)strBuilder1));
      assertTrue(strBuilder2.equals((Object)strBuilder4));
      assertTrue(strBuilder2.equals((Object)strBuilder5));
      assertArrayEquals(new char[] {'^', 'X', '\u0000', '@', '\u0000'}, charArray0);
      assertEquals(5, charArray0.length);
      assertNotSame(strBuilder2, strBuilder4);
      assertNotSame(strBuilder2, strBuilder5);
      assertSame(strBuilder2, strBuilder3);
      assertNotSame(strBuilder2, strBuilder0);
      assertNotSame(strBuilder2, strBuilder1);
      
      StringWriter stringWriter1 = new StringWriter();
      assertEquals("", stringWriter1.toString());
      assertNotNull(stringWriter1);
      assertFalse(stringWriter1.equals((Object)stringWriter0));
      
      StrBuilder strBuilder6 = new StrBuilder(0);
      assertFalse(strBuilder6.isNotEmpty());
      assertEquals(0, strBuilder6.length());
      assertEquals(0, strBuilder6.size());
      assertEquals(32, strBuilder6.capacity());
      assertNull(strBuilder6.getNullText());
      assertTrue(strBuilder6.isEmpty());
      assertNull(strBuilder6.getNewLineText());
      assertNotNull(strBuilder6);
      assertTrue(strBuilder6.equals((Object)strBuilder0));
      assertTrue(strBuilder6.equals((Object)strBuilder1));
      assertTrue(strBuilder6.equals((Object)strBuilder4));
      assertTrue(strBuilder6.equals((Object)strBuilder5));
      assertTrue(strBuilder6.equals((Object)strBuilder2));
      assertTrue(strBuilder6.equals((Object)strBuilder3));
      
      StrBuilder strBuilder7 = strBuilder6.deleteAll('v');
      assertFalse(strBuilder6.isNotEmpty());
      assertEquals(0, strBuilder6.length());
      assertEquals(0, strBuilder6.size());
      assertEquals(32, strBuilder6.capacity());
      assertNull(strBuilder6.getNullText());
      assertTrue(strBuilder6.isEmpty());
      assertNull(strBuilder6.getNewLineText());
      assertEquals(32, strBuilder7.capacity());
      assertTrue(strBuilder7.isEmpty());
      assertNull(strBuilder7.getNullText());
      assertNull(strBuilder7.getNewLineText());
      assertEquals(0, strBuilder7.size());
      assertFalse(strBuilder7.isNotEmpty());
      assertEquals(0, strBuilder7.length());
      assertNotNull(strBuilder7);
      assertTrue(strBuilder6.equals((Object)strBuilder0));
      assertTrue(strBuilder6.equals((Object)strBuilder1));
      assertTrue(strBuilder6.equals((Object)strBuilder4));
      assertTrue(strBuilder6.equals((Object)strBuilder5));
      assertTrue(strBuilder6.equals((Object)strBuilder2));
      assertTrue(strBuilder6.equals((Object)strBuilder3));
      assertTrue(strBuilder7.equals((Object)strBuilder4));
      assertTrue(strBuilder7.equals((Object)strBuilder1));
      assertTrue(strBuilder7.equals((Object)strBuilder5));
      assertTrue(strBuilder7.equals((Object)strBuilder3));
      assertTrue(strBuilder7.equals((Object)strBuilder2));
      assertTrue(strBuilder7.equals((Object)strBuilder0));
      assertNotSame(strBuilder6, strBuilder2);
      assertNotSame(strBuilder6, strBuilder3);
      assertSame(strBuilder6, strBuilder7);
      assertNotSame(strBuilder6, strBuilder0);
      assertNotSame(strBuilder6, strBuilder4);
      assertNotSame(strBuilder6, strBuilder1);
      assertNotSame(strBuilder6, strBuilder5);
      assertSame(strBuilder7, strBuilder6);
      assertNotSame(strBuilder7, strBuilder0);
      assertNotSame(strBuilder7, strBuilder1);
      assertNotSame(strBuilder7, strBuilder3);
      assertNotSame(strBuilder7, strBuilder4);
      assertNotSame(strBuilder7, strBuilder5);
      assertNotSame(strBuilder7, strBuilder2);
      
      StrBuilder strBuilder8 = strBuilder2.appendln((Object) null);
      assertEquals(12, strBuilder8.length());
      assertEquals(32, strBuilder8.capacity());
      assertEquals(12, strBuilder8.size());
      assertFalse(strBuilder8.isEmpty());
      assertNull(strBuilder8.getNullText());
      assertEquals("N1Q}50yw4s*", strBuilder8.getNewLineText());
      assertTrue(strBuilder8.isNotEmpty());
      assertEquals("N1Q}50yw4s*", strBuilder2.getNewLineText());
      assertEquals(32, strBuilder2.capacity());
      assertTrue(strBuilder2.isNotEmpty());
      assertFalse(strBuilder2.isEmpty());
      assertNull(strBuilder2.getNullText());
      assertEquals(12, strBuilder2.size());
      assertEquals(12, strBuilder2.length());
      assertNotNull(strBuilder8);
      assertFalse(strBuilder8.equals((Object)strBuilder1));
      assertFalse(strBuilder8.equals((Object)strBuilder6));
      assertFalse(strBuilder8.equals((Object)strBuilder0));
      assertFalse(strBuilder8.equals((Object)strBuilder4));
      assertFalse(strBuilder8.equals((Object)strBuilder7));
      assertFalse(strBuilder8.equals((Object)strBuilder5));
      assertFalse(strBuilder2.equals((Object)strBuilder6));
      assertFalse(strBuilder2.equals((Object)strBuilder7));
      assertFalse(strBuilder2.equals((Object)strBuilder4));
      assertFalse(strBuilder2.equals((Object)strBuilder5));
      assertFalse(strBuilder2.equals((Object)strBuilder0));
      assertFalse(strBuilder2.equals((Object)strBuilder1));
      assertNotSame(strBuilder8, strBuilder1);
      assertNotSame(strBuilder8, strBuilder6);
      assertNotSame(strBuilder8, strBuilder0);
      assertNotSame(strBuilder8, strBuilder4);
      assertSame(strBuilder8, strBuilder2);
      assertSame(strBuilder8, strBuilder3);
      assertNotSame(strBuilder8, strBuilder7);
      assertNotSame(strBuilder8, strBuilder5);
      assertSame(strBuilder2, strBuilder8);
      assertNotSame(strBuilder2, strBuilder6);
      assertNotSame(strBuilder2, strBuilder7);
      assertNotSame(strBuilder2, strBuilder4);
      assertSame(strBuilder2, strBuilder3);
      assertNotSame(strBuilder2, strBuilder5);
      assertNotSame(strBuilder2, strBuilder0);
      assertNotSame(strBuilder2, strBuilder1);
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("dN");
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(34, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(2, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(2, strBuilder0.length());
      assertNotNull(strBuilder0);
      
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(34, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(2, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(2, strBuilder0.length());
      assertTrue(strBuilder_StrBuilderReader0.ready());
      assertTrue(strBuilder_StrBuilderReader0.markSupported());
      assertNotNull(strBuilder_StrBuilderReader0);
      
      int int0 = strBuilder_StrBuilderReader0.read();
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(34, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(2, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(2, strBuilder0.length());
      assertTrue(strBuilder_StrBuilderReader0.ready());
      assertTrue(strBuilder_StrBuilderReader0.markSupported());
      assertEquals(100, int0);
      
      // Undeclared exception!
      try { 
        strBuilder0.appendln("ssfv=6$no2c@*\u0002!", 100, 3664);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // startIndex must be valid
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("^idxVa9J(IJ6fm");
      assertEquals(14, strBuilder0.length());
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(46, strBuilder0.capacity());
      assertEquals(14, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertNotNull(strBuilder0);
      
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "^idxVa9J(IJ6fm");
      assertFalse(boolean0);
      
      StrBuilder strBuilder1 = new StrBuilder("^idxVa9J(IJ6fm");
      assertTrue(strBuilder1.isNotEmpty());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(46, strBuilder1.capacity());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(14, strBuilder1.length());
      assertEquals(14, strBuilder1.size());
      assertNotNull(strBuilder1);
      assertTrue(strBuilder1.equals((Object)strBuilder0));
      
      StrBuilder strBuilder2 = strBuilder1.appendln((-690.9955657006));
      assertTrue(strBuilder1.isNotEmpty());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(46, strBuilder1.capacity());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(30, strBuilder1.length());
      assertEquals(30, strBuilder1.size());
      assertNull(strBuilder2.getNullText());
      assertEquals(46, strBuilder2.capacity());
      assertNull(strBuilder2.getNewLineText());
      assertTrue(strBuilder2.isNotEmpty());
      assertEquals(30, strBuilder2.length());
      assertEquals(30, strBuilder2.size());
      assertFalse(strBuilder2.isEmpty());
      assertNotNull(strBuilder2);
      assertFalse(strBuilder1.equals((Object)strBuilder0));
      assertFalse(strBuilder2.equals((Object)strBuilder0));
      assertSame(strBuilder1, strBuilder2);
      assertNotSame(strBuilder1, strBuilder0);
      assertNotSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      
      int int0 = strBuilder0.lastIndexOf("^idxVa9J(IJ6fm");
      assertEquals(14, strBuilder0.length());
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(46, strBuilder0.capacity());
      assertEquals(14, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(0, int0);
      assertFalse(strBuilder0.equals((Object)strBuilder2));
      assertFalse(strBuilder0.equals((Object)strBuilder1));
      assertNotSame(strBuilder0, strBuilder2);
      assertNotSame(strBuilder0, strBuilder1);
      
      StrBuilder strBuilder3 = strBuilder2.append(0);
      assertTrue(strBuilder1.isNotEmpty());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(46, strBuilder1.capacity());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(31, strBuilder1.length());
      assertEquals(31, strBuilder1.size());
      assertNull(strBuilder2.getNullText());
      assertEquals(46, strBuilder2.capacity());
      assertNull(strBuilder2.getNewLineText());
      assertTrue(strBuilder2.isNotEmpty());
      assertEquals(31, strBuilder2.length());
      assertEquals(31, strBuilder2.size());
      assertFalse(strBuilder2.isEmpty());
      assertFalse(strBuilder3.isEmpty());
      assertNull(strBuilder3.getNullText());
      assertNull(strBuilder3.getNewLineText());
      assertEquals(31, strBuilder3.size());
      assertEquals(46, strBuilder3.capacity());
      assertEquals(31, strBuilder3.length());
      assertTrue(strBuilder3.isNotEmpty());
      assertNotNull(strBuilder3);
      assertFalse(strBuilder1.equals((Object)strBuilder0));
      assertFalse(strBuilder2.equals((Object)strBuilder0));
      assertFalse(strBuilder3.equals((Object)strBuilder0));
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder2);
      assertNotSame(strBuilder1, strBuilder0);
      assertNotSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder3);
      assertSame(strBuilder2, strBuilder1);
      assertNotSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder2);
      
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder3.new StrBuilderReader();
      assertTrue(strBuilder1.isNotEmpty());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(46, strBuilder1.capacity());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(31, strBuilder1.length());
      assertEquals(31, strBuilder1.size());
      assertNull(strBuilder2.getNullText());
      assertEquals(46, strBuilder2.capacity());
      assertNull(strBuilder2.getNewLineText());
      assertTrue(strBuilder2.isNotEmpty());
      assertEquals(31, strBuilder2.length());
      assertEquals(31, strBuilder2.size());
      assertFalse(strBuilder2.isEmpty());
      assertFalse(strBuilder3.isEmpty());
      assertNull(strBuilder3.getNullText());
      assertNull(strBuilder3.getNewLineText());
      assertEquals(31, strBuilder3.size());
      assertEquals(46, strBuilder3.capacity());
      assertEquals(31, strBuilder3.length());
      assertTrue(strBuilder3.isNotEmpty());
      assertTrue(strBuilder_StrBuilderReader0.ready());
      assertTrue(strBuilder_StrBuilderReader0.markSupported());
      assertNotNull(strBuilder_StrBuilderReader0);
      assertFalse(strBuilder1.equals((Object)strBuilder0));
      assertFalse(strBuilder2.equals((Object)strBuilder0));
      assertFalse(strBuilder3.equals((Object)strBuilder0));
      
      boolean boolean1 = strBuilder_StrBuilderReader0.ready();
      assertTrue(strBuilder1.isNotEmpty());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(46, strBuilder1.capacity());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(31, strBuilder1.length());
      assertEquals(31, strBuilder1.size());
      assertNull(strBuilder2.getNullText());
      assertEquals(46, strBuilder2.capacity());
      assertNull(strBuilder2.getNewLineText());
      assertTrue(strBuilder2.isNotEmpty());
      assertEquals(31, strBuilder2.length());
      assertEquals(31, strBuilder2.size());
      assertFalse(strBuilder2.isEmpty());
      assertFalse(strBuilder3.isEmpty());
      assertNull(strBuilder3.getNullText());
      assertNull(strBuilder3.getNewLineText());
      assertEquals(31, strBuilder3.size());
      assertEquals(46, strBuilder3.capacity());
      assertEquals(31, strBuilder3.length());
      assertTrue(strBuilder3.isNotEmpty());
      assertTrue(strBuilder_StrBuilderReader0.ready());
      assertTrue(strBuilder_StrBuilderReader0.markSupported());
      assertTrue(boolean1);
      assertFalse(strBuilder1.equals((Object)strBuilder0));
      assertFalse(strBuilder2.equals((Object)strBuilder0));
      assertFalse(strBuilder3.equals((Object)strBuilder0));
      assertFalse(boolean1 == boolean0);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder2);
      assertNotSame(strBuilder1, strBuilder0);
      assertNotSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder3);
      assertSame(strBuilder2, strBuilder1);
      assertNotSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder2);
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "org.apache.commons.lang3.text.StrBuilder$StrBuilderTokenizer");
      assertFalse(boolean0);
      
      StrBuilder strBuilder0 = new StrBuilder("");
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isNotEmpty());
      assertNotNull(strBuilder0);
      
      boolean boolean1 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      StrBuilder strBuilder1 = new StrBuilder("tB]AfhzluZkX");
      assertNull(strBuilder1.getNewLineText());
      assertEquals(45, strBuilder1.capacity());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertTrue(strBuilder1.isNotEmpty());
      assertEquals(13, strBuilder1.length());
      assertEquals(13, strBuilder1.size());
      assertNotNull(strBuilder1);
      assertFalse(strBuilder1.equals((Object)strBuilder0));
      
      StrBuilder strBuilder2 = strBuilder0.appendln(2141.287434);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(12, strBuilder0.length());
      assertEquals(12, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(12, strBuilder2.length());
      assertTrue(strBuilder2.isNotEmpty());
      assertEquals(32, strBuilder2.capacity());
      assertEquals(12, strBuilder2.size());
      assertNull(strBuilder2.getNullText());
      assertNull(strBuilder2.getNewLineText());
      assertNotNull(strBuilder2);
      assertFalse(strBuilder0.equals((Object)strBuilder1));
      assertFalse(strBuilder2.equals((Object)strBuilder1));
      assertNotSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertNotSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      
      StrBuilder strBuilder3 = strBuilder2.setNewLineText("tB]AfhzluZkX");
      assertEquals(12, strBuilder0.length());
      assertEquals(12, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals("tB]AfhzluZkX", strBuilder0.getNewLineText());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(12, strBuilder2.length());
      assertTrue(strBuilder2.isNotEmpty());
      assertEquals("tB]AfhzluZkX", strBuilder2.getNewLineText());
      assertEquals(32, strBuilder2.capacity());
      assertEquals(12, strBuilder2.size());
      assertNull(strBuilder2.getNullText());
      assertEquals(12, strBuilder3.size());
      assertEquals(32, strBuilder3.capacity());
      assertTrue(strBuilder3.isNotEmpty());
      assertEquals(12, strBuilder3.length());
      assertNull(strBuilder3.getNullText());
      assertFalse(strBuilder3.isEmpty());
      assertEquals("tB]AfhzluZkX", strBuilder3.getNewLineText());
      assertNotNull(strBuilder3);
      assertFalse(strBuilder0.equals((Object)strBuilder1));
      assertFalse(strBuilder2.equals((Object)strBuilder1));
      assertFalse(strBuilder3.equals((Object)strBuilder1));
      assertNotSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder2);
      assertNotSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder3);
      assertSame(strBuilder2, strBuilder0);
      assertNotSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder2);
      
      int int0 = strBuilder1.lastIndexOf("org.apache.commons.lang3.text.StrBuilder$StrBuilderTokenizer");
      assertNull(strBuilder1.getNewLineText());
      assertEquals(45, strBuilder1.capacity());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertTrue(strBuilder1.isNotEmpty());
      assertEquals(13, strBuilder1.length());
      assertEquals(13, strBuilder1.size());
      assertEquals((-1), int0);
      assertFalse(strBuilder1.equals((Object)strBuilder0));
      assertFalse(strBuilder1.equals((Object)strBuilder2));
      assertFalse(strBuilder1.equals((Object)strBuilder3));
      assertNotSame(strBuilder1, strBuilder0);
      assertNotSame(strBuilder1, strBuilder2);
      assertNotSame(strBuilder1, strBuilder3);
      
      String string0 = strBuilder0.getNewLineText();
      assertEquals(12, strBuilder0.length());
      assertEquals(12, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals("tB]AfhzluZkX", strBuilder0.getNewLineText());
      assertNotNull(string0);
      assertEquals("tB]AfhzluZkX", string0);
      assertFalse(strBuilder0.equals((Object)strBuilder1));
      assertNotSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder2);
      
      StrBuilder strBuilder4 = strBuilder3.appendSeparator('v', 69);
      assertEquals(13, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(13, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals("tB]AfhzluZkX", strBuilder0.getNewLineText());
      assertFalse(strBuilder2.isEmpty());
      assertTrue(strBuilder2.isNotEmpty());
      assertEquals(13, strBuilder2.length());
      assertEquals(13, strBuilder2.size());
      assertEquals("tB]AfhzluZkX", strBuilder2.getNewLineText());
      assertEquals(32, strBuilder2.capacity());
      assertNull(strBuilder2.getNullText());
      assertEquals(13, strBuilder3.length());
      assertEquals(13, strBuilder3.size());
      assertEquals(32, strBuilder3.capacity());
      assertTrue(strBuilder3.isNotEmpty());
      assertNull(strBuilder3.getNullText());
      assertFalse(strBuilder3.isEmpty());
      assertEquals("tB]AfhzluZkX", strBuilder3.getNewLineText());
      assertEquals(32, strBuilder4.capacity());
      assertTrue(strBuilder4.isNotEmpty());
      assertEquals(13, strBuilder4.length());
      assertFalse(strBuilder4.isEmpty());
      assertEquals(13, strBuilder4.size());
      assertNull(strBuilder4.getNullText());
      assertEquals("tB]AfhzluZkX", strBuilder4.getNewLineText());
      assertNotNull(strBuilder4);
      assertFalse(strBuilder0.equals((Object)strBuilder1));
      assertFalse(strBuilder2.equals((Object)strBuilder1));
      assertFalse(strBuilder3.equals((Object)strBuilder1));
      assertFalse(strBuilder4.equals((Object)strBuilder1));
      assertSame(strBuilder0, strBuilder4);
      assertNotSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder2, strBuilder4);
      assertNotSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder3);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder3, strBuilder4);
      assertNotSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder2);
      assertNotSame(strBuilder4, strBuilder1);
      assertSame(strBuilder4, strBuilder0);
      assertSame(strBuilder4, strBuilder2);
      assertSame(strBuilder4, strBuilder3);
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("end < start");
      assertEquals(11, strBuilder0.length());
      assertEquals(11, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(43, strBuilder0.capacity());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.deleteAll("");
      assertEquals(11, strBuilder0.length());
      assertEquals(11, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(43, strBuilder0.capacity());
      assertNull(strBuilder1.getNullText());
      assertTrue(strBuilder1.isNotEmpty());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(43, strBuilder1.capacity());
      assertEquals(11, strBuilder1.length());
      assertEquals(11, strBuilder1.size());
      assertNotNull(strBuilder1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      
      StrBuilder strBuilder2 = strBuilder0.append(strBuilder1);
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(22, strBuilder0.length());
      assertEquals(43, strBuilder0.capacity());
      assertEquals(22, strBuilder0.size());
      assertNull(strBuilder1.getNullText());
      assertTrue(strBuilder1.isNotEmpty());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(43, strBuilder1.capacity());
      assertEquals(22, strBuilder1.length());
      assertEquals(22, strBuilder1.size());
      assertFalse(strBuilder2.isEmpty());
      assertNull(strBuilder2.getNewLineText());
      assertTrue(strBuilder2.isNotEmpty());
      assertEquals(43, strBuilder2.capacity());
      assertNull(strBuilder2.getNullText());
      assertEquals(22, strBuilder2.size());
      assertEquals(22, strBuilder2.length());
      assertNotNull(strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      
      String string0 = strBuilder2.getNewLineText();
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(22, strBuilder0.length());
      assertEquals(43, strBuilder0.capacity());
      assertEquals(22, strBuilder0.size());
      assertNull(strBuilder1.getNullText());
      assertTrue(strBuilder1.isNotEmpty());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(43, strBuilder1.capacity());
      assertEquals(22, strBuilder1.length());
      assertEquals(22, strBuilder1.size());
      assertFalse(strBuilder2.isEmpty());
      assertNull(strBuilder2.getNewLineText());
      assertTrue(strBuilder2.isNotEmpty());
      assertEquals(43, strBuilder2.capacity());
      assertNull(strBuilder2.getNullText());
      assertEquals(22, strBuilder2.size());
      assertEquals(22, strBuilder2.length());
      assertNull(string0);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      StrBuilder strBuilder0 = new StrBuilder();
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.appendSeparator('B', 44);
      assertEquals(1, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(1, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNullText());
      assertTrue(strBuilder1.isNotEmpty());
      assertEquals(1, strBuilder1.length());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(1, strBuilder1.size());
      assertNotNull(strBuilder1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      
      StrBuilder strBuilder2 = new StrBuilder();
      assertNull(strBuilder2.getNullText());
      assertEquals(0, strBuilder2.length());
      assertEquals(0, strBuilder2.size());
      assertFalse(strBuilder2.isNotEmpty());
      assertEquals(32, strBuilder2.capacity());
      assertTrue(strBuilder2.isEmpty());
      assertNull(strBuilder2.getNewLineText());
      assertNotNull(strBuilder2);
      assertFalse(strBuilder2.equals((Object)strBuilder1));
      assertFalse(strBuilder2.equals((Object)strBuilder0));
      
      StrBuilder strBuilder3 = strBuilder2.deleteFirst("");
      assertNull(strBuilder2.getNullText());
      assertEquals(0, strBuilder2.length());
      assertEquals(0, strBuilder2.size());
      assertFalse(strBuilder2.isNotEmpty());
      assertEquals(32, strBuilder2.capacity());
      assertTrue(strBuilder2.isEmpty());
      assertNull(strBuilder2.getNewLineText());
      assertNull(strBuilder3.getNullText());
      assertEquals(0, strBuilder3.size());
      assertEquals(0, strBuilder3.length());
      assertFalse(strBuilder3.isNotEmpty());
      assertTrue(strBuilder3.isEmpty());
      assertNull(strBuilder3.getNewLineText());
      assertEquals(32, strBuilder3.capacity());
      assertNotNull(strBuilder3);
      assertFalse(strBuilder2.equals((Object)strBuilder1));
      assertFalse(strBuilder2.equals((Object)strBuilder0));
      assertFalse(strBuilder3.equals((Object)strBuilder1));
      assertFalse(strBuilder3.equals((Object)strBuilder0));
      assertNotSame(strBuilder2, strBuilder1);
      assertNotSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder3);
      assertNotSame(strBuilder3, strBuilder1);
      assertNotSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder2);
      
      StrBuilder strBuilder4 = new StrBuilder();
      assertNull(strBuilder4.getNewLineText());
      assertTrue(strBuilder4.isEmpty());
      assertEquals(32, strBuilder4.capacity());
      assertFalse(strBuilder4.isNotEmpty());
      assertNull(strBuilder4.getNullText());
      assertEquals(0, strBuilder4.length());
      assertEquals(0, strBuilder4.size());
      assertNotNull(strBuilder4);
      assertTrue(strBuilder4.equals((Object)strBuilder2));
      assertFalse(strBuilder4.equals((Object)strBuilder1));
      assertFalse(strBuilder4.equals((Object)strBuilder0));
      assertTrue(strBuilder4.equals((Object)strBuilder3));
      
      StrBuilder strBuilder5 = strBuilder0.setLength(7);
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(7, strBuilder0.length());
      assertEquals(7, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertFalse(strBuilder5.isEmpty());
      assertNull(strBuilder5.getNullText());
      assertNull(strBuilder5.getNewLineText());
      assertTrue(strBuilder5.isNotEmpty());
      assertEquals(32, strBuilder5.capacity());
      assertEquals(7, strBuilder5.size());
      assertEquals(7, strBuilder5.length());
      assertNotNull(strBuilder5);
      assertFalse(strBuilder0.equals((Object)strBuilder2));
      assertFalse(strBuilder0.equals((Object)strBuilder3));
      assertFalse(strBuilder0.equals((Object)strBuilder4));
      assertFalse(strBuilder5.equals((Object)strBuilder3));
      assertFalse(strBuilder5.equals((Object)strBuilder2));
      assertFalse(strBuilder5.equals((Object)strBuilder4));
      assertNotSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder1);
      assertNotSame(strBuilder0, strBuilder3);
      assertNotSame(strBuilder0, strBuilder4);
      assertSame(strBuilder5, strBuilder0);
      assertNotSame(strBuilder5, strBuilder3);
      assertNotSame(strBuilder5, strBuilder2);
      assertSame(strBuilder5, strBuilder1);
      assertNotSame(strBuilder5, strBuilder4);
      
      StrBuilder strBuilder6 = strBuilder0.replaceFirst((String) null, "eb");
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(7, strBuilder0.length());
      assertEquals(7, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder6.getNullText());
      assertFalse(strBuilder6.isEmpty());
      assertTrue(strBuilder6.isNotEmpty());
      assertNull(strBuilder6.getNewLineText());
      assertEquals(7, strBuilder6.size());
      assertEquals(7, strBuilder6.length());
      assertEquals(32, strBuilder6.capacity());
      assertNotNull(strBuilder6);
      assertFalse(strBuilder0.equals((Object)strBuilder2));
      assertFalse(strBuilder0.equals((Object)strBuilder3));
      assertFalse(strBuilder0.equals((Object)strBuilder4));
      assertFalse(strBuilder6.equals((Object)strBuilder2));
      assertFalse(strBuilder6.equals((Object)strBuilder3));
      assertFalse(strBuilder6.equals((Object)strBuilder4));
      assertNotSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder6);
      assertSame(strBuilder0, strBuilder1);
      assertNotSame(strBuilder0, strBuilder3);
      assertNotSame(strBuilder0, strBuilder4);
      assertSame(strBuilder6, strBuilder5);
      assertNotSame(strBuilder6, strBuilder2);
      assertNotSame(strBuilder6, strBuilder3);
      assertSame(strBuilder6, strBuilder0);
      assertSame(strBuilder6, strBuilder1);
      assertNotSame(strBuilder6, strBuilder4);
      
      String string0 = strBuilder0.midString(44, 334);
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(7, strBuilder0.length());
      assertEquals(7, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNotNull(string0);
      assertEquals("", string0);
      assertFalse(strBuilder0.equals((Object)strBuilder2));
      assertFalse(strBuilder0.equals((Object)strBuilder3));
      assertFalse(strBuilder0.equals((Object)strBuilder4));
      assertNotSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder6);
      assertSame(strBuilder0, strBuilder1);
      assertNotSame(strBuilder0, strBuilder3);
      assertNotSame(strBuilder0, strBuilder4);
      
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      assertFalse(arrayList0.contains(334));
      
      boolean boolean1 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "c`q");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      Vector<Object> vector0 = new Vector<Object>(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertEquals(0, vector0.capacity());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertNotNull(vector0);
      assertFalse(arrayList0.contains(334));
      assertFalse(vector0.contains(334));
      
      TreeSet<Object> treeSet0 = new TreeSet<Object>();
      assertNotNull(treeSet0);
      assertFalse(treeSet0.contains(334));
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      // Undeclared exception!
      try { 
        treeSet0.subSet(object0, false, (Object) "", false);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Object cannot be cast to java.lang.Comparable
         //
         verifyException("java.util.TreeMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isNotEmpty());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.replaceFirst((String) null, (String) null);
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isNotEmpty());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertFalse(strBuilder1.isNotEmpty());
      assertEquals(0, strBuilder1.size());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(0, strBuilder1.length());
      assertEquals(32, strBuilder1.capacity());
      assertTrue(strBuilder1.isEmpty());
      assertNotNull(strBuilder1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      
      StrBuilder strBuilder2 = new StrBuilder();
      assertFalse(strBuilder2.isNotEmpty());
      assertEquals(0, strBuilder2.length());
      assertEquals(0, strBuilder2.size());
      assertEquals(32, strBuilder2.capacity());
      assertNull(strBuilder2.getNullText());
      assertTrue(strBuilder2.isEmpty());
      assertNull(strBuilder2.getNewLineText());
      assertNotNull(strBuilder2);
      assertTrue(strBuilder2.equals((Object)strBuilder0));
      assertTrue(strBuilder2.equals((Object)strBuilder1));
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      StrBuilder strBuilder0 = new StrBuilder("?p");
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(34, strBuilder0.capacity());
      assertEquals(2, strBuilder0.length());
      assertEquals(2, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertNotNull(strBuilder0);
      
      boolean boolean1 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "6ppOS(51W");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      char[] charArray0 = new char[6];
      charArray0[0] = 'm';
      charArray0[1] = ':';
      charArray0[0] = '}';
      charArray0[3] = '}';
      charArray0[4] = 'n';
      charArray0[5] = ':';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      assertTrue(charBuffer0.hasArray());
      assertEquals("}:\u0000}n:", charBuffer0.toString());
      assertEquals(6, charBuffer0.capacity());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(6, charBuffer0.length());
      assertEquals(6, charBuffer0.limit());
      assertFalse(charBuffer0.isDirect());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(6, charBuffer0.remaining());
      assertNotNull(charBuffer0);
      assertArrayEquals(new char[] {'}', ':', '\u0000', '}', 'n', ':'}, charArray0);
      assertEquals(6, charArray0.length);
      
      StrBuilder strBuilder1 = strBuilder0.append(charBuffer0);
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(34, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertEquals(8, strBuilder0.length());
      assertEquals(8, strBuilder0.size());
      assertTrue(charBuffer0.hasArray());
      assertEquals("}:\u0000}n:", charBuffer0.toString());
      assertEquals(6, charBuffer0.capacity());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(6, charBuffer0.length());
      assertEquals(6, charBuffer0.limit());
      assertFalse(charBuffer0.isDirect());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(6, charBuffer0.remaining());
      assertNull(strBuilder1.getNullText());
      assertEquals(8, strBuilder1.length());
      assertEquals(8, strBuilder1.size());
      assertTrue(strBuilder1.isNotEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(34, strBuilder1.capacity());
      assertFalse(strBuilder1.isEmpty());
      assertNotNull(strBuilder1);
      assertArrayEquals(new char[] {'}', ':', '\u0000', '}', 'n', ':'}, charArray0);
      assertEquals(6, charArray0.length);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      
      StrBuilder strBuilder2 = strBuilder0.ensureCapacity(0);
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(34, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertEquals(8, strBuilder0.length());
      assertEquals(8, strBuilder0.size());
      assertEquals(8, strBuilder2.length());
      assertEquals(8, strBuilder2.size());
      assertEquals(34, strBuilder2.capacity());
      assertTrue(strBuilder2.isNotEmpty());
      assertFalse(strBuilder2.isEmpty());
      assertNull(strBuilder2.getNullText());
      assertNull(strBuilder2.getNewLineText());
      assertNotNull(strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      
      Class<Integer> class0 = Integer.class;
      ServiceLoader<Integer> serviceLoader0 = ServiceLoader.loadInstalled(class0);
      assertEquals("java.util.ServiceLoader[java.lang.Integer]", serviceLoader0.toString());
      assertNotNull(serviceLoader0);
      
      Iterator<Integer> iterator0 = serviceLoader0.iterator();
      assertEquals("java.util.ServiceLoader[java.lang.Integer]", serviceLoader0.toString());
      assertNotNull(iterator0);
      
      StrBuilder strBuilder3 = strBuilder0.appendAll(iterator0);
      assertNull(strBuilder3.getNullText());
      assertFalse(strBuilder3.isEmpty());
      assertTrue(strBuilder3.isNotEmpty());
      assertNull(strBuilder3.getNewLineText());
      assertEquals(8, strBuilder3.size());
      assertEquals(8, strBuilder3.length());
      assertEquals(34, strBuilder3.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(34, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertEquals(8, strBuilder0.length());
      assertEquals(8, strBuilder0.size());
      assertEquals("java.util.ServiceLoader[java.lang.Integer]", serviceLoader0.toString());
      assertNotNull(strBuilder3);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder2);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      
      IntStream intStream0 = strBuilder2.codePoints();
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(34, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertEquals(8, strBuilder0.length());
      assertEquals(8, strBuilder0.size());
      assertEquals(8, strBuilder2.length());
      assertEquals(8, strBuilder2.size());
      assertEquals(34, strBuilder2.capacity());
      assertTrue(strBuilder2.isNotEmpty());
      assertFalse(strBuilder2.isEmpty());
      assertNull(strBuilder2.getNullText());
      assertNull(strBuilder2.getNewLineText());
      assertNotNull(intStream0);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder3);
      assertSame(strBuilder2, strBuilder1);
      
      char[] charArray1 = strBuilder2.getChars(charArray0);
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(34, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertEquals(8, strBuilder0.length());
      assertEquals(8, strBuilder0.size());
      assertEquals(8, strBuilder2.length());
      assertEquals(8, strBuilder2.size());
      assertEquals(34, strBuilder2.capacity());
      assertTrue(strBuilder2.isNotEmpty());
      assertFalse(strBuilder2.isEmpty());
      assertNull(strBuilder2.getNullText());
      assertNull(strBuilder2.getNewLineText());
      assertNotNull(charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {'?', 'p', '}', ':', '\u0000', '}', 'n', ':'}, charArray1);
      assertArrayEquals(new char[] {'}', ':', '\u0000', '}', 'n', ':'}, charArray0);
      assertEquals(8, charArray1.length);
      assertEquals(6, charArray0.length);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray0, charArray1);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder3);
      assertSame(strBuilder2, strBuilder1);
      
      int int0 = strBuilder3.lastIndexOf("^Y`!+", 101);
      assertNull(strBuilder3.getNullText());
      assertFalse(strBuilder3.isEmpty());
      assertTrue(strBuilder3.isNotEmpty());
      assertNull(strBuilder3.getNewLineText());
      assertEquals(8, strBuilder3.size());
      assertEquals(8, strBuilder3.length());
      assertEquals(34, strBuilder3.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(34, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertEquals(8, strBuilder0.length());
      assertEquals(8, strBuilder0.size());
      assertEquals("java.util.ServiceLoader[java.lang.Integer]", serviceLoader0.toString());
      assertEquals((-1), int0);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder2);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      char[] charArray0 = new char[7];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000", charBuffer0.toString());
      assertTrue(charBuffer0.hasRemaining());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(7, charBuffer0.remaining());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.position());
      assertEquals(0, charBuffer0.arrayOffset());
      assertTrue(charBuffer0.hasArray());
      assertEquals(7, charBuffer0.limit());
      assertEquals(7, charBuffer0.capacity());
      assertEquals(7, charBuffer0.length());
      assertNotNull(charBuffer0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(7, charArray0.length);
      
      StrBuilder strBuilder0 = new StrBuilder();
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isNotEmpty());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = new StrBuilder('\u0000');
      assertNull(strBuilder1.getNullText());
      assertEquals(0, strBuilder1.length());
      assertEquals(0, strBuilder1.size());
      assertFalse(strBuilder1.isNotEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertTrue(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertNotNull(strBuilder1);
      assertTrue(strBuilder1.equals((Object)strBuilder0));
      
      // Undeclared exception!
      try { 
        strBuilder1.append(charArray0, 5, 115);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // Invalid length: 115
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(0, strBuilder0.size());
      assertFalse(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.appendSeparator('B', 44);
      assertEquals(1, strBuilder0.size());
      assertEquals(1, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(1, strBuilder1.size());
      assertEquals(1, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertTrue(strBuilder1.isNotEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(32, strBuilder1.capacity());
      assertFalse(strBuilder1.isEmpty());
      assertNotNull(strBuilder1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      
      StrBuilder strBuilder2 = new StrBuilder();
      assertFalse(strBuilder2.isNotEmpty());
      assertTrue(strBuilder2.isEmpty());
      assertEquals(0, strBuilder2.size());
      assertEquals(0, strBuilder2.length());
      assertEquals(32, strBuilder2.capacity());
      assertNull(strBuilder2.getNewLineText());
      assertNull(strBuilder2.getNullText());
      assertNotNull(strBuilder2);
      assertFalse(strBuilder2.equals((Object)strBuilder0));
      assertFalse(strBuilder2.equals((Object)strBuilder1));
      
      StrBuilder strBuilder3 = strBuilder2.deleteFirst("");
      assertFalse(strBuilder2.isNotEmpty());
      assertTrue(strBuilder2.isEmpty());
      assertEquals(0, strBuilder2.size());
      assertEquals(0, strBuilder2.length());
      assertEquals(32, strBuilder2.capacity());
      assertNull(strBuilder2.getNewLineText());
      assertNull(strBuilder2.getNullText());
      assertFalse(strBuilder3.isNotEmpty());
      assertEquals(0, strBuilder3.length());
      assertTrue(strBuilder3.isEmpty());
      assertEquals(32, strBuilder3.capacity());
      assertNull(strBuilder3.getNullText());
      assertNull(strBuilder3.getNewLineText());
      assertEquals(0, strBuilder3.size());
      assertNotNull(strBuilder3);
      assertFalse(strBuilder2.equals((Object)strBuilder0));
      assertFalse(strBuilder2.equals((Object)strBuilder1));
      assertFalse(strBuilder3.equals((Object)strBuilder1));
      assertFalse(strBuilder3.equals((Object)strBuilder0));
      assertSame(strBuilder2, strBuilder3);
      assertNotSame(strBuilder2, strBuilder0);
      assertNotSame(strBuilder2, strBuilder1);
      assertNotSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder2);
      assertNotSame(strBuilder3, strBuilder0);
      
      StrBuilder strBuilder4 = strBuilder3.setNewLineText("~M6Kg8 \"b&guxg");
      assertFalse(strBuilder2.isNotEmpty());
      assertTrue(strBuilder2.isEmpty());
      assertEquals(0, strBuilder2.size());
      assertEquals(0, strBuilder2.length());
      assertEquals(32, strBuilder2.capacity());
      assertNull(strBuilder2.getNullText());
      assertEquals("~M6Kg8 \"b&guxg", strBuilder2.getNewLineText());
      assertFalse(strBuilder3.isNotEmpty());
      assertEquals(0, strBuilder3.length());
      assertTrue(strBuilder3.isEmpty());
      assertEquals(32, strBuilder3.capacity());
      assertNull(strBuilder3.getNullText());
      assertEquals(0, strBuilder3.size());
      assertEquals("~M6Kg8 \"b&guxg", strBuilder3.getNewLineText());
      assertTrue(strBuilder4.isEmpty());
      assertEquals(32, strBuilder4.capacity());
      assertEquals(0, strBuilder4.length());
      assertNull(strBuilder4.getNullText());
      assertEquals(0, strBuilder4.size());
      assertEquals("~M6Kg8 \"b&guxg", strBuilder4.getNewLineText());
      assertFalse(strBuilder4.isNotEmpty());
      assertNotNull(strBuilder4);
      assertFalse(strBuilder2.equals((Object)strBuilder0));
      assertFalse(strBuilder2.equals((Object)strBuilder1));
      assertFalse(strBuilder3.equals((Object)strBuilder1));
      assertFalse(strBuilder3.equals((Object)strBuilder0));
      assertFalse(strBuilder4.equals((Object)strBuilder0));
      assertFalse(strBuilder4.equals((Object)strBuilder1));
      assertSame(strBuilder2, strBuilder3);
      assertNotSame(strBuilder2, strBuilder0);
      assertNotSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder4);
      assertSame(strBuilder3, strBuilder4);
      assertNotSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder2);
      assertNotSame(strBuilder3, strBuilder0);
      assertSame(strBuilder4, strBuilder2);
      assertSame(strBuilder4, strBuilder3);
      assertNotSame(strBuilder4, strBuilder0);
      assertNotSame(strBuilder4, strBuilder1);
      
      StrBuilder strBuilder5 = new StrBuilder();
      assertEquals(0, strBuilder5.length());
      assertEquals(0, strBuilder5.size());
      assertNull(strBuilder5.getNewLineText());
      assertNull(strBuilder5.getNullText());
      assertEquals(32, strBuilder5.capacity());
      assertTrue(strBuilder5.isEmpty());
      assertFalse(strBuilder5.isNotEmpty());
      assertNotNull(strBuilder5);
      assertTrue(strBuilder5.equals((Object)strBuilder4));
      assertTrue(strBuilder5.equals((Object)strBuilder3));
      assertTrue(strBuilder5.equals((Object)strBuilder2));
      assertFalse(strBuilder5.equals((Object)strBuilder1));
      assertFalse(strBuilder5.equals((Object)strBuilder0));
      
      StrBuilder strBuilder6 = strBuilder5.setNullText("");
      assertEquals(0, strBuilder5.length());
      assertEquals(0, strBuilder5.size());
      assertNull(strBuilder5.getNewLineText());
      assertNull(strBuilder5.getNullText());
      assertEquals(32, strBuilder5.capacity());
      assertTrue(strBuilder5.isEmpty());
      assertFalse(strBuilder5.isNotEmpty());
      assertNull(strBuilder6.getNullText());
      assertEquals(0, strBuilder6.length());
      assertEquals(0, strBuilder6.size());
      assertNull(strBuilder6.getNewLineText());
      assertEquals(32, strBuilder6.capacity());
      assertTrue(strBuilder6.isEmpty());
      assertFalse(strBuilder6.isNotEmpty());
      assertNotNull(strBuilder6);
      assertTrue(strBuilder5.equals((Object)strBuilder4));
      assertTrue(strBuilder5.equals((Object)strBuilder3));
      assertTrue(strBuilder5.equals((Object)strBuilder2));
      assertFalse(strBuilder5.equals((Object)strBuilder1));
      assertFalse(strBuilder5.equals((Object)strBuilder0));
      assertTrue(strBuilder6.equals((Object)strBuilder2));
      assertTrue(strBuilder6.equals((Object)strBuilder4));
      assertTrue(strBuilder6.equals((Object)strBuilder3));
      assertFalse(strBuilder6.equals((Object)strBuilder0));
      assertFalse(strBuilder6.equals((Object)strBuilder1));
      assertNotSame(strBuilder5, strBuilder1);
      assertNotSame(strBuilder5, strBuilder2);
      assertNotSame(strBuilder5, strBuilder3);
      assertSame(strBuilder5, strBuilder6);
      assertNotSame(strBuilder5, strBuilder0);
      assertNotSame(strBuilder5, strBuilder4);
      assertSame(strBuilder6, strBuilder5);
      assertNotSame(strBuilder6, strBuilder3);
      assertNotSame(strBuilder6, strBuilder2);
      assertNotSame(strBuilder6, strBuilder4);
      assertNotSame(strBuilder6, strBuilder0);
      assertNotSame(strBuilder6, strBuilder1);
      
      char[] charArray0 = new char[7];
      charArray0[0] = 'B';
      charArray0[1] = 'B';
      charArray0[2] = '\"';
      charArray0[3] = '`';
      charArray0[4] = 'B';
      charArray0[5] = 'B';
      charArray0[6] = 'B';
      // Undeclared exception!
      try { 
        strBuilder1.appendln(charArray0, 5, 5);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // Invalid length: 5
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = new StrBuilder();
      assertFalse(strBuilder1.isNotEmpty());
      assertEquals(0, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertTrue(strBuilder1.isEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(0, strBuilder1.size());
      assertNotNull(strBuilder1);
      assertTrue(strBuilder1.equals((Object)strBuilder0));
      
      boolean boolean0 = strBuilder0.equals(strBuilder0);
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertTrue(boolean0);
      assertTrue(strBuilder0.equals((Object)strBuilder1));
      assertNotSame(strBuilder0, strBuilder1);
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("Z");
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(33, strBuilder0.capacity());
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(1, strBuilder0.size());
      assertEquals(1, strBuilder0.length());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = new StrBuilder(743);
      assertFalse(strBuilder1.isNotEmpty());
      assertEquals(743, strBuilder1.capacity());
      assertEquals(0, strBuilder1.size());
      assertTrue(strBuilder1.isEmpty());
      assertEquals(0, strBuilder1.length());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertNotNull(strBuilder1);
      assertFalse(strBuilder1.equals((Object)strBuilder0));
      
      boolean boolean0 = strBuilder0.equals(strBuilder1);
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(33, strBuilder0.capacity());
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(1, strBuilder0.size());
      assertEquals(1, strBuilder0.length());
      assertFalse(strBuilder1.isNotEmpty());
      assertEquals(743, strBuilder1.capacity());
      assertEquals(0, strBuilder1.size());
      assertTrue(strBuilder1.isEmpty());
      assertEquals(0, strBuilder1.length());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertFalse(boolean0);
      assertFalse(strBuilder0.equals((Object)strBuilder1));
      assertFalse(strBuilder1.equals((Object)strBuilder0));
      assertNotSame(strBuilder0, strBuilder1);
      assertNotSame(strBuilder1, strBuilder0);
      
      StringWriter stringWriter0 = new StringWriter(743);
      assertEquals("", stringWriter0.toString());
      assertNotNull(stringWriter0);
      
      StringBuilder stringBuilder0 = new StringBuilder(strBuilder1);
      assertFalse(strBuilder1.isNotEmpty());
      assertEquals(743, strBuilder1.capacity());
      assertEquals(0, strBuilder1.size());
      assertTrue(strBuilder1.isEmpty());
      assertEquals(0, strBuilder1.length());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals("", stringBuilder0.toString());
      assertNotNull(stringBuilder0);
      assertFalse(strBuilder1.equals((Object)strBuilder0));
      
      StringBuffer stringBuffer0 = new StringBuffer();
      assertEquals("", stringBuffer0.toString());
      assertEquals(0, stringBuffer0.length());
      assertNotNull(stringBuffer0);
      
      StringBuilder stringBuilder1 = new StringBuilder("^3w05 ]");
      assertEquals("^3w05 ]", stringBuilder1.toString());
      assertNotNull(stringBuilder1);
      assertFalse(stringBuilder1.equals((Object)stringBuilder0));
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(0);
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isEmpty());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = new StrBuilder("% 5S4%");
      assertEquals(6, strBuilder1.length());
      assertEquals(6, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertFalse(strBuilder1.isEmpty());
      assertTrue(strBuilder1.isNotEmpty());
      assertEquals(38, strBuilder1.capacity());
      assertNotNull(strBuilder1);
      assertFalse(strBuilder1.equals((Object)strBuilder0));
      
      boolean boolean0 = strBuilder0.equals(strBuilder1);
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isEmpty());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertEquals(6, strBuilder1.length());
      assertEquals(6, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertFalse(strBuilder1.isEmpty());
      assertTrue(strBuilder1.isNotEmpty());
      assertEquals(38, strBuilder1.capacity());
      assertFalse(boolean0);
      assertFalse(strBuilder0.equals((Object)strBuilder1));
      assertFalse(strBuilder1.equals((Object)strBuilder0));
      assertNotSame(strBuilder0, strBuilder1);
      assertNotSame(strBuilder1, strBuilder0);
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNotNull(strBuilder0);
      
      StringWriter stringWriter0 = new StringWriter();
      assertEquals("", stringWriter0.toString());
      assertNotNull(stringWriter0);
      
      StrBuilder strBuilder1 = strBuilder0.deleteAll('^');
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder1.length());
      assertEquals(0, strBuilder1.size());
      assertFalse(strBuilder1.isNotEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertTrue(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertNotNull(strBuilder1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("^idxVa9J(IJ6fm");
      assertEquals(46, strBuilder0.capacity());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(14, strBuilder0.length());
      assertEquals(14, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.appendFixedWidthPadLeft(102, 102, '[');
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(116, strBuilder0.length());
      assertEquals(232, strBuilder0.capacity());
      assertEquals(116, strBuilder0.size());
      assertNull(strBuilder1.getNullText());
      assertEquals(116, strBuilder1.length());
      assertEquals(116, strBuilder1.size());
      assertEquals(232, strBuilder1.capacity());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertTrue(strBuilder1.isNotEmpty());
      assertNotNull(strBuilder1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      
      String string0 = strBuilder0.build();
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(116, strBuilder0.length());
      assertEquals(232, strBuilder0.capacity());
      assertEquals(116, strBuilder0.size());
      assertNotNull(string0);
      assertSame(strBuilder0, strBuilder1);
      
      StrBuilder strBuilder2 = strBuilder0.deleteAll('[');
      assertEquals(41, strBuilder0.size());
      assertEquals(41, strBuilder0.length());
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(232, strBuilder0.capacity());
      assertNull(strBuilder2.getNullText());
      assertNull(strBuilder2.getNewLineText());
      assertTrue(strBuilder2.isNotEmpty());
      assertEquals(41, strBuilder2.length());
      assertEquals(41, strBuilder2.size());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(232, strBuilder2.capacity());
      assertNotNull(strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      
      char[] charArray0 = strBuilder0.toCharArray(1, 1);
      assertEquals(41, strBuilder0.size());
      assertEquals(41, strBuilder0.length());
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(232, strBuilder0.capacity());
      assertNotNull(charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      
      StrBuilder strBuilder3 = strBuilder0.appendSeparator('!', 4484);
      assertEquals(42, strBuilder0.length());
      assertEquals(42, strBuilder0.size());
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(232, strBuilder0.capacity());
      assertTrue(strBuilder3.isNotEmpty());
      assertFalse(strBuilder3.isEmpty());
      assertNull(strBuilder3.getNewLineText());
      assertNull(strBuilder3.getNullText());
      assertEquals(232, strBuilder3.capacity());
      assertEquals(42, strBuilder3.length());
      assertEquals(42, strBuilder3.size());
      assertNotNull(strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder2);
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(0, strBuilder0.size());
      assertFalse(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertNotNull(strBuilder0);
      
      StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer0 = strBuilder0.new StrBuilderTokenizer();
      assertEquals(0, strBuilder0.size());
      assertFalse(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder_StrBuilderTokenizer0.nextIndex());
      assertTrue(strBuilder_StrBuilderTokenizer0.isIgnoreEmptyTokens());
      assertFalse(strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull());
      assertEquals((-1), strBuilder_StrBuilderTokenizer0.previousIndex());
      assertNotNull(strBuilder_StrBuilderTokenizer0);
      
      StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer1 = (StrBuilder.StrBuilderTokenizer)strBuilder_StrBuilderTokenizer0.cloneReset();
      assertEquals(0, strBuilder0.size());
      assertFalse(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder_StrBuilderTokenizer0.nextIndex());
      assertTrue(strBuilder_StrBuilderTokenizer0.isIgnoreEmptyTokens());
      assertFalse(strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull());
      assertEquals((-1), strBuilder_StrBuilderTokenizer0.previousIndex());
      assertEquals((-1), strBuilder_StrBuilderTokenizer1.previousIndex());
      assertFalse(strBuilder_StrBuilderTokenizer1.isEmptyTokenAsNull());
      assertTrue(strBuilder_StrBuilderTokenizer1.isIgnoreEmptyTokens());
      assertEquals(0, strBuilder_StrBuilderTokenizer1.nextIndex());
      assertNotNull(strBuilder_StrBuilderTokenizer1);
      assertFalse(strBuilder_StrBuilderTokenizer1.equals((Object)strBuilder_StrBuilderTokenizer0));
      assertNotSame(strBuilder_StrBuilderTokenizer0, strBuilder_StrBuilderTokenizer1);
      assertNotSame(strBuilder_StrBuilderTokenizer1, strBuilder_StrBuilderTokenizer0);
      
      char[] charArray0 = new char[4];
      charArray0[1] = '\\';
      charArray0[3] = '@';
      StringWriter stringWriter0 = new StringWriter();
      assertEquals("", stringWriter0.toString());
      assertNotNull(stringWriter0);
      
      StrBuilder strBuilder1 = new StrBuilder();
      assertEquals(32, strBuilder1.capacity());
      assertEquals(0, strBuilder1.length());
      assertEquals(0, strBuilder1.size());
      assertFalse(strBuilder1.isNotEmpty());
      assertNull(strBuilder1.getNullText());
      assertTrue(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertNotNull(strBuilder1);
      assertTrue(strBuilder1.equals((Object)strBuilder0));
      
      StrBuilder strBuilder2 = strBuilder1.deleteAll('E');
      assertEquals(32, strBuilder1.capacity());
      assertEquals(0, strBuilder1.length());
      assertEquals(0, strBuilder1.size());
      assertFalse(strBuilder1.isNotEmpty());
      assertNull(strBuilder1.getNullText());
      assertTrue(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(32, strBuilder2.capacity());
      assertNull(strBuilder2.getNewLineText());
      assertNull(strBuilder2.getNullText());
      assertEquals(0, strBuilder2.size());
      assertFalse(strBuilder2.isNotEmpty());
      assertTrue(strBuilder2.isEmpty());
      assertEquals(0, strBuilder2.length());
      assertNotNull(strBuilder2);
      assertTrue(strBuilder1.equals((Object)strBuilder0));
      assertTrue(strBuilder2.equals((Object)strBuilder0));
      assertSame(strBuilder1, strBuilder2);
      assertNotSame(strBuilder1, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertNotSame(strBuilder2, strBuilder0);
      
      StrBuilder strBuilder3 = strBuilder0.appendln((Object) strBuilder2);
      assertEquals(1, strBuilder0.length());
      assertEquals(1, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(0, strBuilder1.length());
      assertEquals(0, strBuilder1.size());
      assertFalse(strBuilder1.isNotEmpty());
      assertNull(strBuilder1.getNullText());
      assertTrue(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(32, strBuilder2.capacity());
      assertNull(strBuilder2.getNewLineText());
      assertNull(strBuilder2.getNullText());
      assertEquals(0, strBuilder2.size());
      assertFalse(strBuilder2.isNotEmpty());
      assertTrue(strBuilder2.isEmpty());
      assertEquals(0, strBuilder2.length());
      assertEquals(1, strBuilder3.length());
      assertEquals(1, strBuilder3.size());
      assertNull(strBuilder3.getNullText());
      assertFalse(strBuilder3.isEmpty());
      assertNull(strBuilder3.getNewLineText());
      assertTrue(strBuilder3.isNotEmpty());
      assertEquals(32, strBuilder3.capacity());
      assertNotNull(strBuilder3);
      assertFalse(strBuilder0.equals((Object)strBuilder2));
      assertFalse(strBuilder0.equals((Object)strBuilder1));
      assertFalse(strBuilder1.equals((Object)strBuilder0));
      assertFalse(strBuilder2.equals((Object)strBuilder0));
      assertFalse(strBuilder3.equals((Object)strBuilder1));
      assertFalse(strBuilder3.equals((Object)strBuilder2));
      assertNotSame(strBuilder0, strBuilder2);
      assertNotSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder1, strBuilder2);
      assertNotSame(strBuilder1, strBuilder3);
      assertNotSame(strBuilder1, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertNotSame(strBuilder2, strBuilder0);
      assertNotSame(strBuilder2, strBuilder3);
      assertNotSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder0);
      assertNotSame(strBuilder3, strBuilder2);
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "org.apache.commons.lang3.text.StrBuilder");
      assertFalse(boolean0);
      
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isEmpty());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.append((Object) null);
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder1.length());
      assertEquals(0, strBuilder1.size());
      assertFalse(strBuilder1.isNotEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNullText());
      assertTrue(strBuilder1.isEmpty());
      assertNotNull(strBuilder1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      
      StrBuilder strBuilder2 = strBuilder0.append("remove() is unsupported");
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(23, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(23, strBuilder0.size());
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder2.getNullText());
      assertTrue(strBuilder2.isNotEmpty());
      assertEquals(32, strBuilder2.capacity());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(23, strBuilder2.length());
      assertEquals(23, strBuilder2.size());
      assertFalse(strBuilder2.isEmpty());
      assertNotNull(strBuilder2);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      
      StrBuilder strBuilder3 = strBuilder0.minimizeCapacity();
      assertNull(strBuilder0.getNewLineText());
      assertEquals(23, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(23, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertEquals(23, strBuilder0.size());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(23, strBuilder3.length());
      assertEquals(23, strBuilder3.size());
      assertTrue(strBuilder3.isNotEmpty());
      assertNull(strBuilder3.getNullText());
      assertNull(strBuilder3.getNewLineText());
      assertFalse(strBuilder3.isEmpty());
      assertEquals(23, strBuilder3.capacity());
      assertNotNull(strBuilder3);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder2);
      
      String string0 = strBuilder2.leftString(86);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(23, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(23, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertEquals(23, strBuilder0.size());
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder2.getNullText());
      assertTrue(strBuilder2.isNotEmpty());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(23, strBuilder2.length());
      assertEquals(23, strBuilder2.size());
      assertEquals(23, strBuilder2.capacity());
      assertFalse(strBuilder2.isEmpty());
      assertNotNull(string0);
      assertEquals("remove() is unsupported", string0);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder3);
      assertSame(strBuilder2, strBuilder1);
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      StrBuilder strBuilder0 = new StrBuilder();
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.setLength(675);
      assertEquals(675, strBuilder0.length());
      assertEquals(675, strBuilder0.size());
      assertEquals(1350, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder1.isNotEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(1350, strBuilder1.capacity());
      assertEquals(675, strBuilder1.length());
      assertEquals(675, strBuilder1.size());
      assertFalse(strBuilder1.isEmpty());
      assertNotNull(strBuilder1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      
      boolean boolean0 = strBuilder1.equals(strBuilder0);
      assertEquals(675, strBuilder0.length());
      assertEquals(675, strBuilder0.size());
      assertEquals(1350, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder1.isNotEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(1350, strBuilder1.capacity());
      assertEquals(675, strBuilder1.length());
      assertEquals(675, strBuilder1.size());
      assertFalse(strBuilder1.isEmpty());
      assertTrue(boolean0);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      
      String string0 = strBuilder0.midString(657, 105);
      assertEquals(675, strBuilder0.length());
      assertEquals(675, strBuilder0.size());
      assertEquals(1350, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertNotNull(string0);
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", string0);
      assertSame(strBuilder0, strBuilder1);
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(0);
      assertFalse(strBuilder0.isNotEmpty());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.appendSeparator("', has a length less than 2", "', has a length less than 2");
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(27, strBuilder0.length());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(27, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(27, strBuilder1.length());
      assertTrue(strBuilder1.isNotEmpty());
      assertEquals(27, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertNotNull(strBuilder1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      
      StrBuilder strBuilder2 = strBuilder0.appendPadding(0, 'Q');
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(27, strBuilder0.length());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(27, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder2.getNullText());
      assertTrue(strBuilder2.isNotEmpty());
      assertFalse(strBuilder2.isEmpty());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(27, strBuilder2.length());
      assertEquals(27, strBuilder2.size());
      assertEquals(32, strBuilder2.capacity());
      assertNotNull(strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      
      StrBuilder strBuilder3 = strBuilder2.append((float) 1);
      assertEquals(30, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(30, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder2.getNullText());
      assertTrue(strBuilder2.isNotEmpty());
      assertFalse(strBuilder2.isEmpty());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(32, strBuilder2.capacity());
      assertEquals(30, strBuilder2.length());
      assertEquals(30, strBuilder2.size());
      assertNull(strBuilder3.getNullText());
      assertEquals(32, strBuilder3.capacity());
      assertNull(strBuilder3.getNewLineText());
      assertFalse(strBuilder3.isEmpty());
      assertTrue(strBuilder3.isNotEmpty());
      assertEquals(30, strBuilder3.size());
      assertEquals(30, strBuilder3.length());
      assertNotNull(strBuilder3);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder3);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder2);
      assertSame(strBuilder3, strBuilder1);
      
      boolean boolean0 = strBuilder0.contains(';');
      assertEquals(30, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(30, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNullText());
      assertFalse(boolean0);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder1.new StrBuilderReader();
      assertEquals(30, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(30, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(30, strBuilder1.length());
      assertEquals(32, strBuilder1.capacity());
      assertTrue(strBuilder1.isNotEmpty());
      assertEquals(30, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertTrue(strBuilder_StrBuilderReader0.markSupported());
      assertTrue(strBuilder_StrBuilderReader0.ready());
      assertNotNull(strBuilder_StrBuilderReader0);
      
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) strBuilder_StrBuilderReader0;
      objectArray0[1] = (Object) strBuilder2;
      StrBuilder strBuilder4 = strBuilder3.append("', has a length less than 2", objectArray0);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(114, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(57, strBuilder0.length());
      assertEquals(57, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder2.getNullText());
      assertTrue(strBuilder2.isNotEmpty());
      assertFalse(strBuilder2.isEmpty());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(57, strBuilder2.length());
      assertEquals(57, strBuilder2.size());
      assertEquals(114, strBuilder2.capacity());
      assertNull(strBuilder3.getNullText());
      assertNull(strBuilder3.getNewLineText());
      assertFalse(strBuilder3.isEmpty());
      assertEquals(57, strBuilder3.length());
      assertEquals(57, strBuilder3.size());
      assertTrue(strBuilder3.isNotEmpty());
      assertEquals(114, strBuilder3.capacity());
      assertEquals(57, strBuilder4.size());
      assertFalse(strBuilder4.isEmpty());
      assertEquals(114, strBuilder4.capacity());
      assertTrue(strBuilder4.isNotEmpty());
      assertNull(strBuilder4.getNullText());
      assertNull(strBuilder4.getNewLineText());
      assertEquals(57, strBuilder4.length());
      assertNotNull(strBuilder4);
      assertEquals(3, objectArray0.length);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder4);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder3);
      assertSame(strBuilder3, strBuilder4);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder2);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder4, strBuilder2);
      assertSame(strBuilder4, strBuilder3);
      assertSame(strBuilder4, strBuilder1);
      assertSame(strBuilder4, strBuilder0);
      
      StrBuilder strBuilder5 = new StrBuilder(1);
      assertNull(strBuilder5.getNewLineText());
      assertEquals(1, strBuilder5.capacity());
      assertEquals(0, strBuilder5.size());
      assertEquals(0, strBuilder5.length());
      assertFalse(strBuilder5.isNotEmpty());
      assertTrue(strBuilder5.isEmpty());
      assertNull(strBuilder5.getNullText());
      assertNotNull(strBuilder5);
      assertFalse(strBuilder5.equals((Object)strBuilder3));
      assertFalse(strBuilder5.equals((Object)strBuilder2));
      assertFalse(strBuilder5.equals((Object)strBuilder1));
      assertFalse(strBuilder5.equals((Object)strBuilder0));
      assertFalse(strBuilder5.equals((Object)strBuilder4));
      
      StrBuilder strBuilder6 = strBuilder4.appendln(0L);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(114, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(59, strBuilder0.length());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(59, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder2.getNullText());
      assertTrue(strBuilder2.isNotEmpty());
      assertFalse(strBuilder2.isEmpty());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(59, strBuilder2.length());
      assertEquals(59, strBuilder2.size());
      assertEquals(114, strBuilder2.capacity());
      assertNull(strBuilder3.getNullText());
      assertEquals(59, strBuilder3.length());
      assertEquals(59, strBuilder3.size());
      assertNull(strBuilder3.getNewLineText());
      assertFalse(strBuilder3.isEmpty());
      assertTrue(strBuilder3.isNotEmpty());
      assertEquals(114, strBuilder3.capacity());
      assertEquals(59, strBuilder4.length());
      assertEquals(59, strBuilder4.size());
      assertFalse(strBuilder4.isEmpty());
      assertEquals(114, strBuilder4.capacity());
      assertTrue(strBuilder4.isNotEmpty());
      assertNull(strBuilder4.getNullText());
      assertNull(strBuilder4.getNewLineText());
      assertFalse(strBuilder6.isEmpty());
      assertNull(strBuilder6.getNullText());
      assertNull(strBuilder6.getNewLineText());
      assertEquals(114, strBuilder6.capacity());
      assertEquals(59, strBuilder6.length());
      assertTrue(strBuilder6.isNotEmpty());
      assertEquals(59, strBuilder6.size());
      assertNotNull(strBuilder6);
      assertFalse(strBuilder0.equals((Object)strBuilder5));
      assertFalse(strBuilder2.equals((Object)strBuilder5));
      assertFalse(strBuilder3.equals((Object)strBuilder5));
      assertFalse(strBuilder4.equals((Object)strBuilder5));
      assertFalse(strBuilder6.equals((Object)strBuilder5));
      assertEquals(3, objectArray0.length);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder6);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder4);
      assertNotSame(strBuilder0, strBuilder5);
      assertSame(strBuilder2, strBuilder1);
      assertNotSame(strBuilder2, strBuilder5);
      assertSame(strBuilder2, strBuilder4);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder3);
      assertSame(strBuilder2, strBuilder6);
      assertSame(strBuilder3, strBuilder4);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder2);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder6);
      assertNotSame(strBuilder3, strBuilder5);
      assertSame(strBuilder4, strBuilder2);
      assertSame(strBuilder4, strBuilder3);
      assertSame(strBuilder4, strBuilder1);
      assertSame(strBuilder4, strBuilder0);
      assertSame(strBuilder4, strBuilder6);
      assertNotSame(strBuilder4, strBuilder5);
      assertSame(strBuilder6, strBuilder3);
      assertSame(strBuilder6, strBuilder0);
      assertSame(strBuilder6, strBuilder4);
      assertSame(strBuilder6, strBuilder1);
      assertNotSame(strBuilder6, strBuilder5);
      assertSame(strBuilder6, strBuilder2);
      
      StrBuilder strBuilder7 = new StrBuilder();
      assertFalse(strBuilder7.isNotEmpty());
      assertNull(strBuilder7.getNullText());
      assertEquals(0, strBuilder7.length());
      assertNull(strBuilder7.getNewLineText());
      assertEquals(0, strBuilder7.size());
      assertTrue(strBuilder7.isEmpty());
      assertEquals(32, strBuilder7.capacity());
      assertNotNull(strBuilder7);
      assertFalse(strBuilder7.equals((Object)strBuilder1));
      assertFalse(strBuilder7.equals((Object)strBuilder4));
      assertTrue(strBuilder7.equals((Object)strBuilder5));
      assertFalse(strBuilder7.equals((Object)strBuilder3));
      assertFalse(strBuilder7.equals((Object)strBuilder6));
      assertFalse(strBuilder7.equals((Object)strBuilder2));
      assertFalse(strBuilder7.equals((Object)strBuilder0));
      
      String string0 = strBuilder4.midString((-3056), 2);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(114, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(59, strBuilder0.length());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(59, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder2.getNullText());
      assertTrue(strBuilder2.isNotEmpty());
      assertFalse(strBuilder2.isEmpty());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(59, strBuilder2.length());
      assertEquals(59, strBuilder2.size());
      assertEquals(114, strBuilder2.capacity());
      assertNull(strBuilder3.getNullText());
      assertEquals(59, strBuilder3.length());
      assertEquals(59, strBuilder3.size());
      assertNull(strBuilder3.getNewLineText());
      assertFalse(strBuilder3.isEmpty());
      assertTrue(strBuilder3.isNotEmpty());
      assertEquals(114, strBuilder3.capacity());
      assertEquals(59, strBuilder4.length());
      assertEquals(59, strBuilder4.size());
      assertFalse(strBuilder4.isEmpty());
      assertEquals(114, strBuilder4.capacity());
      assertTrue(strBuilder4.isNotEmpty());
      assertNull(strBuilder4.getNullText());
      assertNull(strBuilder4.getNewLineText());
      assertNotNull(string0);
      assertEquals("',", string0);
      assertFalse(strBuilder0.equals((Object)strBuilder7));
      assertFalse(strBuilder0.equals((Object)strBuilder5));
      assertFalse(strBuilder2.equals((Object)strBuilder5));
      assertFalse(strBuilder2.equals((Object)strBuilder7));
      assertFalse(strBuilder3.equals((Object)strBuilder7));
      assertFalse(strBuilder3.equals((Object)strBuilder5));
      assertFalse(strBuilder4.equals((Object)strBuilder7));
      assertFalse(strBuilder4.equals((Object)strBuilder5));
      assertEquals(3, objectArray0.length);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder6);
      assertSame(strBuilder0, strBuilder1);
      assertNotSame(strBuilder0, strBuilder7);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder4);
      assertNotSame(strBuilder0, strBuilder5);
      assertSame(strBuilder2, strBuilder1);
      assertNotSame(strBuilder2, strBuilder5);
      assertSame(strBuilder2, strBuilder4);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder3);
      assertSame(strBuilder2, strBuilder6);
      assertNotSame(strBuilder2, strBuilder7);
      assertSame(strBuilder3, strBuilder4);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder2);
      assertSame(strBuilder3, strBuilder1);
      assertNotSame(strBuilder3, strBuilder7);
      assertSame(strBuilder3, strBuilder6);
      assertNotSame(strBuilder3, strBuilder5);
      assertSame(strBuilder4, strBuilder2);
      assertNotSame(strBuilder4, strBuilder7);
      assertSame(strBuilder4, strBuilder3);
      assertSame(strBuilder4, strBuilder1);
      assertSame(strBuilder4, strBuilder0);
      assertSame(strBuilder4, strBuilder6);
      assertNotSame(strBuilder4, strBuilder5);
      
      StrBuilder strBuilder8 = new StrBuilder(29);
      assertFalse(strBuilder8.isNotEmpty());
      assertEquals(0, strBuilder8.length());
      assertEquals(0, strBuilder8.size());
      assertNull(strBuilder8.getNullText());
      assertEquals(29, strBuilder8.capacity());
      assertTrue(strBuilder8.isEmpty());
      assertNull(strBuilder8.getNewLineText());
      assertNotNull(strBuilder8);
      assertFalse(strBuilder8.equals((Object)strBuilder1));
      assertFalse(strBuilder8.equals((Object)strBuilder2));
      assertFalse(strBuilder8.equals((Object)strBuilder6));
      assertFalse(strBuilder8.equals((Object)strBuilder3));
      assertTrue(strBuilder8.equals((Object)strBuilder5));
      assertTrue(strBuilder8.equals((Object)strBuilder7));
      assertFalse(strBuilder8.equals((Object)strBuilder0));
      assertFalse(strBuilder8.equals((Object)strBuilder4));
      
      boolean boolean1 = strBuilder4.isNotEmpty();
      assertNull(strBuilder0.getNewLineText());
      assertEquals(114, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(59, strBuilder0.length());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(59, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder2.getNullText());
      assertTrue(strBuilder2.isNotEmpty());
      assertFalse(strBuilder2.isEmpty());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(59, strBuilder2.length());
      assertEquals(59, strBuilder2.size());
      assertEquals(114, strBuilder2.capacity());
      assertNull(strBuilder3.getNullText());
      assertEquals(59, strBuilder3.length());
      assertEquals(59, strBuilder3.size());
      assertNull(strBuilder3.getNewLineText());
      assertFalse(strBuilder3.isEmpty());
      assertTrue(strBuilder3.isNotEmpty());
      assertEquals(114, strBuilder3.capacity());
      assertEquals(59, strBuilder4.length());
      assertEquals(59, strBuilder4.size());
      assertFalse(strBuilder4.isEmpty());
      assertEquals(114, strBuilder4.capacity());
      assertTrue(strBuilder4.isNotEmpty());
      assertNull(strBuilder4.getNullText());
      assertNull(strBuilder4.getNewLineText());
      assertTrue(boolean1);
      assertFalse(strBuilder0.equals((Object)strBuilder8));
      assertFalse(strBuilder0.equals((Object)strBuilder7));
      assertFalse(strBuilder0.equals((Object)strBuilder5));
      assertFalse(strBuilder2.equals((Object)strBuilder5));
      assertFalse(strBuilder2.equals((Object)strBuilder8));
      assertFalse(strBuilder2.equals((Object)strBuilder7));
      assertFalse(strBuilder3.equals((Object)strBuilder8));
      assertFalse(strBuilder3.equals((Object)strBuilder7));
      assertFalse(strBuilder3.equals((Object)strBuilder5));
      assertFalse(strBuilder4.equals((Object)strBuilder8));
      assertFalse(strBuilder4.equals((Object)strBuilder7));
      assertFalse(strBuilder4.equals((Object)strBuilder5));
      assertFalse(boolean1 == boolean0);
      assertEquals(3, objectArray0.length);
      assertSame(strBuilder0, strBuilder3);
      assertNotSame(strBuilder0, strBuilder8);
      assertSame(strBuilder0, strBuilder6);
      assertSame(strBuilder0, strBuilder1);
      assertNotSame(strBuilder0, strBuilder7);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder4);
      assertNotSame(strBuilder0, strBuilder5);
      assertSame(strBuilder2, strBuilder1);
      assertNotSame(strBuilder2, strBuilder5);
      assertSame(strBuilder2, strBuilder4);
      assertSame(strBuilder2, strBuilder0);
      assertNotSame(strBuilder2, strBuilder8);
      assertSame(strBuilder2, strBuilder3);
      assertSame(strBuilder2, strBuilder6);
      assertNotSame(strBuilder2, strBuilder7);
      assertSame(strBuilder3, strBuilder4);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder2);
      assertSame(strBuilder3, strBuilder1);
      assertNotSame(strBuilder3, strBuilder8);
      assertNotSame(strBuilder3, strBuilder7);
      assertSame(strBuilder3, strBuilder6);
      assertNotSame(strBuilder3, strBuilder5);
      assertSame(strBuilder4, strBuilder2);
      assertNotSame(strBuilder4, strBuilder8);
      assertNotSame(strBuilder4, strBuilder7);
      assertSame(strBuilder4, strBuilder3);
      assertSame(strBuilder4, strBuilder1);
      assertSame(strBuilder4, strBuilder0);
      assertSame(strBuilder4, strBuilder6);
      assertNotSame(strBuilder4, strBuilder5);
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(0);
      assertNull(strBuilder0.getNewLineText());
      assertFalse(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNotNull(strBuilder0);
      
      int int0 = (-238);
      // Undeclared exception!
      try { 
        strBuilder0.appendln(strBuilder0, 0, (-238));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // length must be valid
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      StrBuilder strBuilder0 = new StrBuilder();
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertFalse(strBuilder0.isNotEmpty());
      assertNotNull(strBuilder0);
      
      int int0 = 806;
      boolean boolean1 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "H`ja|UZ$k)INqyS/");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      StrBuilder strBuilder1 = strBuilder0.appendFixedWidthPadRight(806, 806, '.');
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(1612, strBuilder0.capacity());
      assertEquals(806, strBuilder0.size());
      assertEquals(806, strBuilder0.length());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(1612, strBuilder1.capacity());
      assertEquals(806, strBuilder1.size());
      assertEquals(806, strBuilder1.length());
      assertTrue(strBuilder1.isNotEmpty());
      assertNotNull(strBuilder1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      
      int int1 = strBuilder1.lastIndexOf("Zd}C");
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(1612, strBuilder0.capacity());
      assertEquals(806, strBuilder0.size());
      assertEquals(806, strBuilder0.length());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(1612, strBuilder1.capacity());
      assertEquals(806, strBuilder1.size());
      assertEquals(806, strBuilder1.length());
      assertTrue(strBuilder1.isNotEmpty());
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      
      PriorityQueue<Object> priorityQueue0 = new PriorityQueue<Object>();
      assertEquals(0, priorityQueue0.size());
      assertNotNull(priorityQueue0);
      assertFalse(priorityQueue0.contains(806));
      
      StrBuilder strBuilder2 = strBuilder0.appendln(false);
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(812, strBuilder0.length());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(812, strBuilder0.size());
      assertEquals(1612, strBuilder0.capacity());
      assertTrue(strBuilder2.isNotEmpty());
      assertEquals(812, strBuilder2.size());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(812, strBuilder2.length());
      assertFalse(strBuilder2.isEmpty());
      assertNull(strBuilder2.getNullText());
      assertEquals(1612, strBuilder2.capacity());
      assertNotNull(strBuilder2);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      
      int int2 = strBuilder1.lastIndexOf('&', 2811);
      assertNull(strBuilder0.getNullText());
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(812, strBuilder0.length());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(812, strBuilder0.size());
      assertEquals(1612, strBuilder0.capacity());
      assertEquals(812, strBuilder1.length());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(1612, strBuilder1.capacity());
      assertTrue(strBuilder1.isNotEmpty());
      assertEquals(812, strBuilder1.size());
      assertEquals((-1), int2);
      assertTrue(int2 == int1);
      assertFalse(int2 == int0);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder2);
      
      // Undeclared exception!
      try { 
        strBuilder2.append(strBuilder2, 749, (-1));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // length must be valid
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertTrue(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.appendSeparator('B', 32);
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(1, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(1, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder1.capacity());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(1, strBuilder1.size());
      assertEquals(1, strBuilder1.length());
      assertTrue(strBuilder1.isNotEmpty());
      assertNotNull(strBuilder1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      
      StrBuilder strBuilder2 = new StrBuilder();
      assertEquals(32, strBuilder2.capacity());
      assertTrue(strBuilder2.isEmpty());
      assertEquals(0, strBuilder2.length());
      assertEquals(0, strBuilder2.size());
      assertFalse(strBuilder2.isNotEmpty());
      assertNull(strBuilder2.getNewLineText());
      assertNull(strBuilder2.getNullText());
      assertNotNull(strBuilder2);
      assertFalse(strBuilder2.equals((Object)strBuilder0));
      assertFalse(strBuilder2.equals((Object)strBuilder1));
      
      int int0 = strBuilder2.indexOf("^idxVa9J(IJ6fm", 32);
      assertEquals(32, strBuilder2.capacity());
      assertTrue(strBuilder2.isEmpty());
      assertEquals(0, strBuilder2.length());
      assertEquals(0, strBuilder2.size());
      assertFalse(strBuilder2.isNotEmpty());
      assertNull(strBuilder2.getNewLineText());
      assertNull(strBuilder2.getNullText());
      assertEquals((-1), int0);
      assertFalse(strBuilder2.equals((Object)strBuilder0));
      assertFalse(strBuilder2.equals((Object)strBuilder1));
      assertNotSame(strBuilder2, strBuilder0);
      assertNotSame(strBuilder2, strBuilder1);
      
      StrBuilder strBuilder3 = strBuilder0.deleteFirst('m');
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(1, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(1, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(1, strBuilder3.length());
      assertEquals(1, strBuilder3.size());
      assertTrue(strBuilder3.isNotEmpty());
      assertNull(strBuilder3.getNewLineText());
      assertFalse(strBuilder3.isEmpty());
      assertEquals(32, strBuilder3.capacity());
      assertNull(strBuilder3.getNullText());
      assertNotNull(strBuilder3);
      assertFalse(strBuilder0.equals((Object)strBuilder2));
      assertFalse(strBuilder3.equals((Object)strBuilder2));
      assertNotSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder1);
      assertNotSame(strBuilder3, strBuilder2);
      
      StrBuilder strBuilder4 = strBuilder2.appendSeparator("Threshold must not be negative", (-1));
      assertEquals(32, strBuilder2.capacity());
      assertTrue(strBuilder2.isEmpty());
      assertEquals(0, strBuilder2.length());
      assertEquals(0, strBuilder2.size());
      assertFalse(strBuilder2.isNotEmpty());
      assertNull(strBuilder2.getNewLineText());
      assertNull(strBuilder2.getNullText());
      assertFalse(strBuilder4.isNotEmpty());
      assertTrue(strBuilder4.isEmpty());
      assertNull(strBuilder4.getNullText());
      assertNull(strBuilder4.getNewLineText());
      assertEquals(32, strBuilder4.capacity());
      assertEquals(0, strBuilder4.length());
      assertEquals(0, strBuilder4.size());
      assertNotNull(strBuilder4);
      assertFalse(strBuilder2.equals((Object)strBuilder0));
      assertFalse(strBuilder2.equals((Object)strBuilder3));
      assertFalse(strBuilder2.equals((Object)strBuilder1));
      assertFalse(strBuilder4.equals((Object)strBuilder3));
      assertFalse(strBuilder4.equals((Object)strBuilder1));
      assertFalse(strBuilder4.equals((Object)strBuilder0));
      assertNotSame(strBuilder2, strBuilder0);
      assertNotSame(strBuilder2, strBuilder3);
      assertSame(strBuilder2, strBuilder4);
      assertNotSame(strBuilder2, strBuilder1);
      assertSame(strBuilder4, strBuilder2);
      assertNotSame(strBuilder4, strBuilder3);
      assertNotSame(strBuilder4, strBuilder1);
      assertNotSame(strBuilder4, strBuilder0);
      
      StrBuilder strBuilder5 = strBuilder4.appendFixedWidthPadLeft((Object) strBuilder3, (-1), 'B');
      assertNull(strBuilder0.getNullText());
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(1, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(1, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder2.capacity());
      assertTrue(strBuilder2.isEmpty());
      assertEquals(0, strBuilder2.length());
      assertEquals(0, strBuilder2.size());
      assertFalse(strBuilder2.isNotEmpty());
      assertNull(strBuilder2.getNewLineText());
      assertNull(strBuilder2.getNullText());
      assertEquals(1, strBuilder3.length());
      assertEquals(1, strBuilder3.size());
      assertTrue(strBuilder3.isNotEmpty());
      assertNull(strBuilder3.getNewLineText());
      assertFalse(strBuilder3.isEmpty());
      assertEquals(32, strBuilder3.capacity());
      assertNull(strBuilder3.getNullText());
      assertFalse(strBuilder4.isNotEmpty());
      assertTrue(strBuilder4.isEmpty());
      assertNull(strBuilder4.getNullText());
      assertNull(strBuilder4.getNewLineText());
      assertEquals(32, strBuilder4.capacity());
      assertEquals(0, strBuilder4.length());
      assertEquals(0, strBuilder4.size());
      assertFalse(strBuilder5.isNotEmpty());
      assertEquals(0, strBuilder5.size());
      assertNull(strBuilder5.getNullText());
      assertNull(strBuilder5.getNewLineText());
      assertTrue(strBuilder5.isEmpty());
      assertEquals(0, strBuilder5.length());
      assertEquals(32, strBuilder5.capacity());
      assertNotNull(strBuilder5);
      assertFalse(strBuilder0.equals((Object)strBuilder2));
      assertFalse(strBuilder0.equals((Object)strBuilder4));
      assertFalse(strBuilder2.equals((Object)strBuilder0));
      assertFalse(strBuilder2.equals((Object)strBuilder3));
      assertFalse(strBuilder2.equals((Object)strBuilder1));
      assertFalse(strBuilder3.equals((Object)strBuilder4));
      assertFalse(strBuilder3.equals((Object)strBuilder2));
      assertFalse(strBuilder4.equals((Object)strBuilder3));
      assertFalse(strBuilder4.equals((Object)strBuilder1));
      assertFalse(strBuilder4.equals((Object)strBuilder0));
      assertFalse(strBuilder5.equals((Object)strBuilder0));
      assertFalse(strBuilder5.equals((Object)strBuilder1));
      assertFalse(strBuilder5.equals((Object)strBuilder3));
      assertNotSame(strBuilder0, strBuilder5);
      assertNotSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder3);
      assertNotSame(strBuilder0, strBuilder4);
      assertNotSame(strBuilder2, strBuilder0);
      assertNotSame(strBuilder2, strBuilder3);
      assertSame(strBuilder2, strBuilder5);
      assertSame(strBuilder2, strBuilder4);
      assertNotSame(strBuilder2, strBuilder1);
      assertNotSame(strBuilder3, strBuilder4);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder1);
      assertNotSame(strBuilder3, strBuilder5);
      assertNotSame(strBuilder3, strBuilder2);
      assertSame(strBuilder4, strBuilder2);
      assertNotSame(strBuilder4, strBuilder3);
      assertSame(strBuilder4, strBuilder5);
      assertNotSame(strBuilder4, strBuilder1);
      assertNotSame(strBuilder4, strBuilder0);
      assertNotSame(strBuilder5, strBuilder0);
      assertNotSame(strBuilder5, strBuilder1);
      assertNotSame(strBuilder5, strBuilder3);
      assertSame(strBuilder5, strBuilder4);
      assertSame(strBuilder5, strBuilder2);
      
      StrBuilder strBuilder6 = strBuilder2.appendln("*-k0cK");
      assertEquals(32, strBuilder2.capacity());
      assertTrue(strBuilder2.isNotEmpty());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(7, strBuilder2.length());
      assertNull(strBuilder2.getNewLineText());
      assertNull(strBuilder2.getNullText());
      assertEquals(7, strBuilder2.size());
      assertEquals(7, strBuilder6.length());
      assertEquals(7, strBuilder6.size());
      assertFalse(strBuilder6.isEmpty());
      assertTrue(strBuilder6.isNotEmpty());
      assertNull(strBuilder6.getNullText());
      assertEquals(32, strBuilder6.capacity());
      assertNull(strBuilder6.getNewLineText());
      assertNotNull(strBuilder6);
      assertFalse(strBuilder2.equals((Object)strBuilder0));
      assertFalse(strBuilder2.equals((Object)strBuilder3));
      assertFalse(strBuilder2.equals((Object)strBuilder1));
      assertFalse(strBuilder6.equals((Object)strBuilder3));
      assertFalse(strBuilder6.equals((Object)strBuilder0));
      assertFalse(strBuilder6.equals((Object)strBuilder1));
      assertNotSame(strBuilder2, strBuilder0);
      assertNotSame(strBuilder2, strBuilder3);
      assertSame(strBuilder2, strBuilder5);
      assertSame(strBuilder2, strBuilder6);
      assertSame(strBuilder2, strBuilder4);
      assertNotSame(strBuilder2, strBuilder1);
      assertNotSame(strBuilder6, strBuilder3);
      assertSame(strBuilder6, strBuilder2);
      assertSame(strBuilder6, strBuilder5);
      assertNotSame(strBuilder6, strBuilder0);
      assertNotSame(strBuilder6, strBuilder1);
      assertSame(strBuilder6, strBuilder4);
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(0);
      assertFalse(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = new StrBuilder(43);
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertTrue(strBuilder1.isEmpty());
      assertEquals(43, strBuilder1.capacity());
      assertEquals(0, strBuilder1.size());
      assertEquals(0, strBuilder1.length());
      assertFalse(strBuilder1.isNotEmpty());
      assertNotNull(strBuilder1);
      assertTrue(strBuilder1.equals((Object)strBuilder0));
      
      StrBuilder strBuilder2 = strBuilder1.append((char[]) null, 0, 2);
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertTrue(strBuilder1.isEmpty());
      assertEquals(43, strBuilder1.capacity());
      assertEquals(0, strBuilder1.size());
      assertEquals(0, strBuilder1.length());
      assertFalse(strBuilder1.isNotEmpty());
      assertNull(strBuilder2.getNullText());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(0, strBuilder2.size());
      assertEquals(0, strBuilder2.length());
      assertTrue(strBuilder2.isEmpty());
      assertEquals(43, strBuilder2.capacity());
      assertFalse(strBuilder2.isNotEmpty());
      assertNotNull(strBuilder2);
      assertTrue(strBuilder1.equals((Object)strBuilder0));
      assertTrue(strBuilder2.equals((Object)strBuilder0));
      assertNotSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder2, strBuilder1);
      assertNotSame(strBuilder2, strBuilder0);
      
      CharBuffer charBuffer0 = CharBuffer.allocate(64);
      assertEquals(64, charBuffer0.limit());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(64, charBuffer0.capacity());
      assertEquals(64, charBuffer0.length());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.position());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", charBuffer0.toString());
      assertTrue(charBuffer0.hasArray());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(64, charBuffer0.remaining());
      assertNotNull(charBuffer0);
      
      // Undeclared exception!
      try { 
        strBuilder1.append(charBuffer0, 64, (-1309));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // length must be valid
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      StrBuilder strBuilder0 = new StrBuilder();
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertFalse(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNullText());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = new StrBuilder();
      assertEquals(32, strBuilder1.capacity());
      assertTrue(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(0, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertEquals(0, strBuilder1.length());
      assertFalse(strBuilder1.isNotEmpty());
      assertNotNull(strBuilder1);
      assertTrue(strBuilder1.equals((Object)strBuilder0));
      
      StrBuilder strBuilder2 = strBuilder1.deleteAll("CM:vw/c-gh\tSUh");
      assertEquals(32, strBuilder1.capacity());
      assertTrue(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(0, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertEquals(0, strBuilder1.length());
      assertFalse(strBuilder1.isNotEmpty());
      assertEquals(32, strBuilder2.capacity());
      assertTrue(strBuilder2.isEmpty());
      assertNull(strBuilder2.getNewLineText());
      assertNull(strBuilder2.getNullText());
      assertEquals(0, strBuilder2.length());
      assertEquals(0, strBuilder2.size());
      assertFalse(strBuilder2.isNotEmpty());
      assertNotNull(strBuilder2);
      assertTrue(strBuilder1.equals((Object)strBuilder0));
      assertTrue(strBuilder2.equals((Object)strBuilder0));
      assertNotSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder2);
      assertNotSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) strBuilder0);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertFalse(strBuilder0.isNotEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals("", charBuffer0.toString());
      assertFalse(charBuffer0.isDirect());
      assertTrue(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.length());
      assertEquals(0, charBuffer0.limit());
      assertFalse(charBuffer0.hasRemaining());
      assertFalse(charBuffer0.hasArray());
      assertEquals(0, charBuffer0.remaining());
      assertEquals(0, charBuffer0.capacity());
      assertEquals(0, charBuffer0.position());
      assertNotNull(charBuffer0);
      assertTrue(strBuilder0.equals((Object)strBuilder2));
      assertTrue(strBuilder0.equals((Object)strBuilder1));
      assertNotSame(strBuilder0, strBuilder1);
      assertNotSame(strBuilder0, strBuilder2);
      
      CharBuffer charBuffer1 = CharBuffer.allocate(117);
      assertTrue(charBuffer1.hasRemaining());
      assertTrue(charBuffer1.hasArray());
      assertEquals(117, charBuffer1.remaining());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", charBuffer1.toString());
      assertEquals(0, charBuffer1.arrayOffset());
      assertEquals(117, charBuffer1.length());
      assertEquals(117, charBuffer1.capacity());
      assertEquals(117, charBuffer1.limit());
      assertFalse(charBuffer1.isReadOnly());
      assertFalse(charBuffer1.isDirect());
      assertEquals(0, charBuffer1.position());
      assertNotNull(charBuffer1);
      assertFalse(charBuffer1.equals((Object)charBuffer0));
      
      // Undeclared exception!
      try { 
        strBuilder2.append(charBuffer1, 117, 117);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // length must be valid
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertFalse(strBuilder0.isNotEmpty());
      assertNotNull(strBuilder0);
      
      CharBuffer charBuffer0 = CharBuffer.allocate(62);
      assertEquals(0, charBuffer0.arrayOffset());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", charBuffer0.toString());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(62, charBuffer0.limit());
      assertEquals(62, charBuffer0.length());
      assertEquals(62, charBuffer0.capacity());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.position());
      assertTrue(charBuffer0.hasArray());
      assertEquals(62, charBuffer0.remaining());
      assertNotNull(charBuffer0);
      
      // Undeclared exception!
      try { 
        strBuilder0.append(charBuffer0, 62, 35208);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // length must be valid
         //
         verifyException("org.apache.commons.lang3.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("^idxVa9J(IJ6fm");
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(14, strBuilder0.size());
      assertEquals(14, strBuilder0.length());
      assertEquals(46, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertNotNull(strBuilder0);
      
      int int0 = 12;
      StrBuilder strBuilder1 = strBuilder0.append((char[]) null, (-2017), 12);
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(14, strBuilder0.size());
      assertEquals(14, strBuilder0.length());
      assertEquals(46, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(14, strBuilder1.length());
      assertTrue(strBuilder1.isNotEmpty());
      assertEquals(46, strBuilder1.capacity());
      assertNull(strBuilder1.getNullText());
      assertEquals(14, strBuilder1.size());
      assertNotNull(strBuilder1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      
      strBuilder1.validateIndex(12);
      assertFalse(strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isNotEmpty());
      assertEquals(14, strBuilder0.size());
      assertEquals(14, strBuilder0.length());
      assertEquals(46, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(14, strBuilder1.length());
      assertTrue(strBuilder1.isNotEmpty());
      assertEquals(46, strBuilder1.capacity());
      assertNull(strBuilder1.getNullText());
      assertEquals(14, strBuilder1.size());
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      
      StringBuilder stringBuilder0 = new StringBuilder();
      assertEquals("", stringBuilder0.toString());
      assertNotNull(stringBuilder0);
      
      int int1 = 81;
      // Undeclared exception!
      try { 
        stringBuilder0.insert(81, 2029L);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 81
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(0);
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(strBuilder0.isEmpty());
      assertFalse(strBuilder0.isNotEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertNotNull(strBuilder0);
      
      StrBuilder strBuilder1 = strBuilder0.appendSeparator("', has a length less than 2", "', has a length less than 2");
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(27, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(27, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertFalse(strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(27, strBuilder1.size());
      assertEquals(27, strBuilder1.length());
      assertTrue(strBuilder1.isNotEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertNotNull(strBuilder1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      
      StrBuilder strBuilder2 = strBuilder0.appendPadding(0, 'Q');
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(27, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(27, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder2.capacity());
      assertEquals(27, strBuilder2.length());
      assertEquals(27, strBuilder2.size());
      assertFalse(strBuilder2.isEmpty());
      assertTrue(strBuilder2.isNotEmpty());
      assertNull(strBuilder2.getNewLineText());
      assertNull(strBuilder2.getNullText());
      assertNotNull(strBuilder2);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      
      StrBuilder strBuilder3 = strBuilder2.append((float) 1);
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(30, strBuilder0.length());
      assertEquals(30, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder2.capacity());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(30, strBuilder2.length());
      assertEquals(30, strBuilder2.size());
      assertTrue(strBuilder2.isNotEmpty());
      assertNull(strBuilder2.getNewLineText());
      assertNull(strBuilder2.getNullText());
      assertNull(strBuilder3.getNullText());
      assertNull(strBuilder3.getNewLineText());
      assertTrue(strBuilder3.isNotEmpty());
      assertEquals(30, strBuilder3.length());
      assertEquals(32, strBuilder3.capacity());
      assertEquals(30, strBuilder3.size());
      assertFalse(strBuilder3.isEmpty());
      assertNotNull(strBuilder3);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder3);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder3, strBuilder2);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder0);
      
      StrBuilder strBuilder4 = strBuilder3.insert(2, (Object) strBuilder1);
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(162, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(81, strBuilder0.size());
      assertEquals(81, strBuilder0.length());
      assertNull(strBuilder1.getNullText());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(81, strBuilder1.size());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(81, strBuilder1.length());
      assertEquals(162, strBuilder1.capacity());
      assertTrue(strBuilder1.isNotEmpty());
      assertEquals(162, strBuilder2.capacity());
      assertFalse(strBuilder2.isEmpty());
      assertEquals(81, strBuilder2.length());
      assertEquals(81, strBuilder2.size());
      assertTrue(strBuilder2.isNotEmpty());
      assertNull(strBuilder2.getNewLineText());
      assertNull(strBuilder2.getNullText());
      assertNull(strBuilder3.getNullText());
      assertNull(strBuilder3.getNewLineText());
      assertEquals(162, strBuilder3.capacity());
      assertTrue(strBuilder3.isNotEmpty());
      assertFalse(strBuilder3.isEmpty());
      assertEquals(81, strBuilder3.size());
      assertEquals(81, strBuilder3.length());
      assertEquals(81, strBuilder4.size());
      assertEquals(81, strBuilder4.length());
      assertEquals(162, strBuilder4.capacity());
      assertTrue(strBuilder4.isNotEmpty());
      assertFalse(strBuilder4.isEmpty());
      assertNull(strBuilder4.getNewLineText());
      assertNull(strBuilder4.getNullText());
      assertNotNull(strBuilder4);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder4);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder4);
      assertSame(strBuilder2, strBuilder3);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder3, strBuilder2);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder4);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder4, strBuilder3);
      assertSame(strBuilder4, strBuilder1);
      assertSame(strBuilder4, strBuilder0);
      assertSame(strBuilder4, strBuilder2);
      
      boolean boolean0 = strBuilder0.contains(';');
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(162, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(81, strBuilder0.size());
      assertEquals(81, strBuilder0.length());
      assertFalse(boolean0);
      assertSame(strBuilder0, strBuilder4);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder1.new StrBuilderReader();
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(162, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(81, strBuilder0.size());
      assertEquals(81, strBuilder0.length());
      assertNull(strBuilder1.getNullText());
      assertFalse(strBuilder1.isEmpty());
      assertEquals(81, strBuilder1.size());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(81, strBuilder1.length());
      assertEquals(162, strBuilder1.capacity());
      assertTrue(strBuilder1.isNotEmpty());
      assertTrue(strBuilder_StrBuilderReader0.ready());
      assertTrue(strBuilder_StrBuilderReader0.markSupported());
      assertNotNull(strBuilder_StrBuilderReader0);
      
      StrBuilder strBuilder5 = new StrBuilder(115);
      assertEquals(0, strBuilder5.size());
      assertNull(strBuilder5.getNullText());
      assertEquals(115, strBuilder5.capacity());
      assertEquals(0, strBuilder5.length());
      assertFalse(strBuilder5.isNotEmpty());
      assertNull(strBuilder5.getNewLineText());
      assertTrue(strBuilder5.isEmpty());
      assertNotNull(strBuilder5);
      assertFalse(strBuilder5.equals((Object)strBuilder4));
      assertFalse(strBuilder5.equals((Object)strBuilder0));
      assertFalse(strBuilder5.equals((Object)strBuilder3));
      assertFalse(strBuilder5.equals((Object)strBuilder1));
      assertFalse(strBuilder5.equals((Object)strBuilder2));
      
      StrBuilder strBuilder6 = new StrBuilder("', has a length less than 2");
      assertEquals(27, strBuilder6.length());
      assertEquals(27, strBuilder6.size());
      assertEquals(59, strBuilder6.capacity());
      assertNull(strBuilder6.getNewLineText());
      assertNull(strBuilder6.getNullText());
      assertTrue(strBuilder6.isNotEmpty());
      assertFalse(strBuilder6.isEmpty());
      assertNotNull(strBuilder6);
      assertFalse(strBuilder6.equals((Object)strBuilder1));
      assertFalse(strBuilder6.equals((Object)strBuilder2));
      assertFalse(strBuilder6.equals((Object)strBuilder3));
      assertFalse(strBuilder6.equals((Object)strBuilder0));
      assertFalse(strBuilder6.equals((Object)strBuilder5));
      assertFalse(strBuilder6.equals((Object)strBuilder4));
      
      StrBuilder strBuilder7 = strBuilder6.appendSeparator('M', (-957));
      assertEquals(27, strBuilder6.length());
      assertEquals(27, strBuilder6.size());
      assertEquals(59, strBuilder6.capacity());
      assertNull(strBuilder6.getNewLineText());
      assertNull(strBuilder6.getNullText());
      assertTrue(strBuilder6.isNotEmpty());
      assertFalse(strBuilder6.isEmpty());
      assertNull(strBuilder7.getNullText());
      assertNull(strBuilder7.getNewLineText());
      assertEquals(27, strBuilder7.length());
      assertTrue(strBuilder7.isNotEmpty());
      assertEquals(27, strBuilder7.size());
      assertEquals(59, strBuilder7.capacity());
      assertFalse(strBuilder7.isEmpty());
      assertNotNull(strBuilder7);
      assertFalse(strBuilder6.equals((Object)strBuilder1));
      assertFalse(strBuilder6.equals((Object)strBuilder2));
      assertFalse(strBuilder6.equals((Object)strBuilder3));
      assertFalse(strBuilder6.equals((Object)strBuilder0));
      assertFalse(strBuilder6.equals((Object)strBuilder5));
      assertFalse(strBuilder6.equals((Object)strBuilder4));
      assertFalse(strBuilder7.equals((Object)strBuilder4));
      assertFalse(strBuilder7.equals((Object)strBuilder1));
      assertFalse(strBuilder7.equals((Object)strBuilder2));
      assertFalse(strBuilder7.equals((Object)strBuilder5));
      assertFalse(strBuilder7.equals((Object)strBuilder3));
      assertFalse(strBuilder7.equals((Object)strBuilder0));
      assertNotSame(strBuilder6, strBuilder1);
      assertNotSame(strBuilder6, strBuilder2);
      assertNotSame(strBuilder6, strBuilder3);
      assertSame(strBuilder6, strBuilder7);
      assertNotSame(strBuilder6, strBuilder0);
      assertNotSame(strBuilder6, strBuilder5);
      assertNotSame(strBuilder6, strBuilder4);
      assertNotSame(strBuilder7, strBuilder4);
      assertNotSame(strBuilder7, strBuilder1);
      assertNotSame(strBuilder7, strBuilder2);
      assertNotSame(strBuilder7, strBuilder5);
      assertSame(strBuilder7, strBuilder6);
      assertNotSame(strBuilder7, strBuilder3);
      assertNotSame(strBuilder7, strBuilder0);
      
      StrBuilder strBuilder8 = new StrBuilder();
      assertTrue(strBuilder8.isEmpty());
      assertNull(strBuilder8.getNewLineText());
      assertEquals(0, strBuilder8.length());
      assertNull(strBuilder8.getNullText());
      assertEquals(0, strBuilder8.size());
      assertFalse(strBuilder8.isNotEmpty());
      assertEquals(32, strBuilder8.capacity());
      assertNotNull(strBuilder8);
      assertFalse(strBuilder8.equals((Object)strBuilder3));
      assertFalse(strBuilder8.equals((Object)strBuilder1));
      assertTrue(strBuilder8.equals((Object)strBuilder5));
      assertFalse(strBuilder8.equals((Object)strBuilder2));
      assertFalse(strBuilder8.equals((Object)strBuilder0));
      assertFalse(strBuilder8.equals((Object)strBuilder4));
      assertFalse(strBuilder8.equals((Object)strBuilder7));
      assertFalse(strBuilder8.equals((Object)strBuilder6));
      
      StrBuilder strBuilder9 = strBuilder0.appendSeparator("set() is unsupported", "', has a length less than 2");
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(162, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(101, strBuilder0.size());
      assertEquals(101, strBuilder0.length());
      assertEquals(162, strBuilder9.capacity());
      assertFalse(strBuilder9.isEmpty());
      assertTrue(strBuilder9.isNotEmpty());
      assertNull(strBuilder9.getNullText());
      assertNull(strBuilder9.getNewLineText());
      assertEquals(101, strBuilder9.size());
      assertEquals(101, strBuilder9.length());
      assertNotNull(strBuilder9);
      assertFalse(strBuilder0.equals((Object)strBuilder6));
      assertFalse(strBuilder0.equals((Object)strBuilder5));
      assertFalse(strBuilder0.equals((Object)strBuilder8));
      assertFalse(strBuilder0.equals((Object)strBuilder7));
      assertFalse(strBuilder9.equals((Object)strBuilder6));
      assertFalse(strBuilder9.equals((Object)strBuilder5));
      assertFalse(strBuilder9.equals((Object)strBuilder8));
      assertFalse(strBuilder9.equals((Object)strBuilder7));
      assertSame(strBuilder0, strBuilder9);
      assertNotSame(strBuilder0, strBuilder6);
      assertSame(strBuilder0, strBuilder4);
      assertNotSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertNotSame(strBuilder0, strBuilder8);
      assertNotSame(strBuilder0, strBuilder7);
      assertNotSame(strBuilder9, strBuilder6);
      assertSame(strBuilder9, strBuilder4);
      assertNotSame(strBuilder9, strBuilder5);
      assertSame(strBuilder9, strBuilder2);
      assertSame(strBuilder9, strBuilder3);
      assertSame(strBuilder9, strBuilder1);
      assertSame(strBuilder9, strBuilder0);
      assertNotSame(strBuilder9, strBuilder8);
      assertNotSame(strBuilder9, strBuilder7);
      
      StrBuilder strBuilder10 = new StrBuilder("iH'.:;RZt0");
      assertEquals(42, strBuilder10.capacity());
      assertFalse(strBuilder10.isEmpty());
      assertNull(strBuilder10.getNewLineText());
      assertNull(strBuilder10.getNullText());
      assertTrue(strBuilder10.isNotEmpty());
      assertEquals(10, strBuilder10.length());
      assertEquals(10, strBuilder10.size());
      assertNotNull(strBuilder10);
      assertFalse(strBuilder10.equals((Object)strBuilder3));
      assertFalse(strBuilder10.equals((Object)strBuilder9));
      assertFalse(strBuilder10.equals((Object)strBuilder1));
      assertFalse(strBuilder10.equals((Object)strBuilder4));
      assertFalse(strBuilder10.equals((Object)strBuilder6));
      assertFalse(strBuilder10.equals((Object)strBuilder7));
      assertFalse(strBuilder10.equals((Object)strBuilder0));
      assertFalse(strBuilder10.equals((Object)strBuilder5));
      assertFalse(strBuilder10.equals((Object)strBuilder8));
      assertFalse(strBuilder10.equals((Object)strBuilder2));
      
      StrBuilder strBuilder11 = strBuilder9.appendSeparator('+', (-707));
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(162, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(101, strBuilder0.size());
      assertEquals(101, strBuilder0.length());
      assertEquals(162, strBuilder9.capacity());
      assertFalse(strBuilder9.isEmpty());
      assertTrue(strBuilder9.isNotEmpty());
      assertNull(strBuilder9.getNullText());
      assertNull(strBuilder9.getNewLineText());
      assertEquals(101, strBuilder9.size());
      assertEquals(101, strBuilder9.length());
      assertTrue(strBuilder11.isNotEmpty());
      assertFalse(strBuilder11.isEmpty());
      assertEquals(162, strBuilder11.capacity());
      assertNull(strBuilder11.getNullText());
      assertNull(strBuilder11.getNewLineText());
      assertEquals(101, strBuilder11.size());
      assertEquals(101, strBuilder11.length());
      assertNotNull(strBuilder11);
      assertFalse(strBuilder0.equals((Object)strBuilder6));
      assertFalse(strBuilder0.equals((Object)strBuilder10));
      assertFalse(strBuilder0.equals((Object)strBuilder5));
      assertFalse(strBuilder0.equals((Object)strBuilder8));
      assertFalse(strBuilder0.equals((Object)strBuilder7));
      assertFalse(strBuilder9.equals((Object)strBuilder10));
      assertFalse(strBuilder9.equals((Object)strBuilder6));
      assertFalse(strBuilder9.equals((Object)strBuilder5));
      assertFalse(strBuilder9.equals((Object)strBuilder8));
      assertFalse(strBuilder9.equals((Object)strBuilder7));
      assertFalse(strBuilder11.equals((Object)strBuilder7));
      assertFalse(strBuilder11.equals((Object)strBuilder5));
      assertFalse(strBuilder11.equals((Object)strBuilder8));
      assertFalse(strBuilder11.equals((Object)strBuilder6));
      assertFalse(strBuilder11.equals((Object)strBuilder10));
      assertSame(strBuilder0, strBuilder9);
      assertNotSame(strBuilder0, strBuilder6);
      assertSame(strBuilder0, strBuilder4);
      assertNotSame(strBuilder0, strBuilder10);
      assertNotSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertNotSame(strBuilder0, strBuilder8);
      assertNotSame(strBuilder0, strBuilder7);
      assertSame(strBuilder0, strBuilder11);
      assertNotSame(strBuilder9, strBuilder10);
      assertNotSame(strBuilder9, strBuilder6);
      assertSame(strBuilder9, strBuilder4);
      assertNotSame(strBuilder9, strBuilder5);
      assertSame(strBuilder9, strBuilder2);
      assertSame(strBuilder9, strBuilder3);
      assertSame(strBuilder9, strBuilder1);
      assertSame(strBuilder9, strBuilder0);
      assertNotSame(strBuilder9, strBuilder8);
      assertNotSame(strBuilder9, strBuilder7);
      assertSame(strBuilder9, strBuilder11);
      assertNotSame(strBuilder11, strBuilder7);
      assertNotSame(strBuilder11, strBuilder5);
      assertSame(strBuilder11, strBuilder3);
      assertNotSame(strBuilder11, strBuilder8);
      assertSame(strBuilder11, strBuilder9);
      assertSame(strBuilder11, strBuilder0);
      assertSame(strBuilder11, strBuilder1);
      assertNotSame(strBuilder11, strBuilder6);
      assertSame(strBuilder11, strBuilder4);
      assertSame(strBuilder11, strBuilder2);
      assertNotSame(strBuilder11, strBuilder10);
      
      StrBuilder strBuilder12 = strBuilder0.replaceAll("PA_l35pkf/", (String) null);
      assertTrue(strBuilder0.isNotEmpty());
      assertFalse(strBuilder0.isEmpty());
      assertEquals(162, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(101, strBuilder0.size());
      assertEquals(101, strBuilder0.length());
      assertTrue(strBuilder12.isNotEmpty());
      assertNull(strBuilder12.getNewLineText());
      assertEquals(101, strBuilder12.length());
      assertEquals(101, strBuilder12.size());
      assertNull(strBuilder12.getNullText());
      assertEquals(162, strBuilder12.capacity());
      assertFalse(strBuilder12.isEmpty());
      assertNotNull(strBuilder12);
      assertFalse(strBuilder0.equals((Object)strBuilder6));
      assertFalse(strBuilder0.equals((Object)strBuilder10));
      assertFalse(strBuilder0.equals((Object)strBuilder5));
      assertFalse(strBuilder0.equals((Object)strBuilder8));
      assertFalse(strBuilder0.equals((Object)strBuilder7));
      assertFalse(strBuilder12.equals((Object)strBuilder10));
      assertFalse(strBuilder12.equals((Object)strBuilder5));
      assertFalse(strBuilder12.equals((Object)strBuilder6));
      assertFalse(strBuilder12.equals((Object)strBuilder7));
      assertFalse(strBuilder12.equals((Object)strBuilder8));
      assertSame(strBuilder0, strBuilder9);
      assertSame(strBuilder0, strBuilder4);
      assertNotSame(strBuilder0, strBuilder6);
      assertNotSame(strBuilder0, strBuilder10);
      assertSame(strBuilder0, strBuilder12);
      assertNotSame(strBuilder0, strBuilder5);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertNotSame(strBuilder0, strBuilder8);
      assertNotSame(strBuilder0, strBuilder7);
      assertSame(strBuilder0, strBuilder11);
      assertSame(strBuilder12, strBuilder11);
      assertSame(strBuilder12, strBuilder3);
      assertSame(strBuilder12, strBuilder1);
      assertNotSame(strBuilder12, strBuilder10);
      assertNotSame(strBuilder12, strBuilder5);
      assertSame(strBuilder12, strBuilder4);
      assertNotSame(strBuilder12, strBuilder6);
      assertSame(strBuilder12, strBuilder9);
      assertNotSame(strBuilder12, strBuilder7);
      assertSame(strBuilder12, strBuilder0);
      assertNotSame(strBuilder12, strBuilder8);
      assertSame(strBuilder12, strBuilder2);
  }
}
