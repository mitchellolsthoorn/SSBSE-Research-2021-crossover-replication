/*
 * This file was automatically generated by EvoSuite
 * Fri Apr 30 15:33:23 GMT 2021
 */

package org.apache.commons.lang3;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import java.nio.ByteBuffer;
import java.nio.LongBuffer;
import java.util.AbstractMap;
import java.util.Arrays;
import java.util.BitSet;
import java.util.Comparator;
import java.util.Locale;
import java.util.Map;
import java.util.Random;
import java.util.stream.DoubleStream;
import java.util.stream.IntStream;
import java.util.stream.LongStream;
import org.apache.commons.lang3.ArrayUtils;
import org.apache.commons.lang3.mutable.MutableInt;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ArrayUtils_ESTest extends ArrayUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0000()  throws Throwable  {
      Character[] characterArray0 = new Character[0];
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, characterArray0.length);
      assertEquals(0, charArray0.length);
      assertNotNull(charArray0);
      
      int[] intArray0 = new int[0];
      int int0 = ArrayUtils.indexOf(intArray0, 2122);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertEquals((-1), int0);
      
      AbstractMap.SimpleImmutableEntry<Double, Double> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Double, Double>((Double) null, (Double) null);
      assertNotNull(abstractMap_SimpleImmutableEntry0);
      
      AbstractMap.SimpleImmutableEntry<Double, Double>[] abstractMap_SimpleImmutableEntryArray0 = (AbstractMap.SimpleImmutableEntry<Double, Double>[]) Array.newInstance(AbstractMap.SimpleImmutableEntry.class, 6);
      abstractMap_SimpleImmutableEntryArray0[0] = abstractMap_SimpleImmutableEntry0;
      abstractMap_SimpleImmutableEntryArray0[1] = abstractMap_SimpleImmutableEntry0;
      abstractMap_SimpleImmutableEntryArray0[2] = abstractMap_SimpleImmutableEntry0;
      abstractMap_SimpleImmutableEntryArray0[3] = abstractMap_SimpleImmutableEntry0;
      abstractMap_SimpleImmutableEntryArray0[4] = abstractMap_SimpleImmutableEntry0;
      abstractMap_SimpleImmutableEntryArray0[5] = abstractMap_SimpleImmutableEntry0;
      Comparator<AbstractMap.SimpleImmutableEntry<Double, Double>> comparator0 = (Comparator<AbstractMap.SimpleImmutableEntry<Double, Double>>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((-10), (-8), (-1), (-10), (-10)).when(comparator0).compare(any(java.util.AbstractMap.SimpleImmutableEntry.class) , any(java.util.AbstractMap.SimpleImmutableEntry.class));
      boolean boolean0 = ArrayUtils.isSorted(abstractMap_SimpleImmutableEntryArray0, comparator0);
      assertEquals(6, abstractMap_SimpleImmutableEntryArray0.length);
      assertTrue(boolean0);
      
      char[] charArray1 = ArrayUtils.removeAllOccurences(charArray0, 'X');
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertEquals(0, characterArray0.length);
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
  }

  @Test(timeout = 4000)
  public void test0001()  throws Throwable  {
      Byte byte0 = new Byte((byte)51);
      assertNotNull(byte0);
      assertEquals((byte)51, (byte)byte0);
      
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short) (byte)51;
      short[] shortArray1 = ArrayUtils.removeElements(shortArray0, shortArray0);
      assertArrayEquals(new short[] {(short)51, (short)0, (short)0}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertEquals(3, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      
      short[] shortArray2 = new short[3];
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertFalse(shortArray2.equals((Object)shortArray1));
      
      shortArray2[0] = (short) (byte)51;
      shortArray2[2] = (short) (byte)51;
      char[] charArray0 = new char[1];
      charArray0[0] = 'F';
      ArrayUtils.reverse(charArray0, (-1916), 0);
      assertArrayEquals(new char[] {'F'}, charArray0);
      assertEquals(1, charArray0.length);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 'F';
      doubleArray0[2] = (double) 338;
      doubleArray0[3] = (double) (short)51;
      ArrayUtils.shift(doubleArray0, Integer.MAX_VALUE, 3524, 6);
      assertArrayEquals(new double[] {70.0, 0.0, 338.0, 51.0}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      
      int[] intArray0 = new int[6];
      intArray0[0] = Integer.MAX_VALUE;
      intArray0[1] = (int) 'F';
      intArray0[2] = (-1916);
      intArray0[3] = 338;
      intArray0[4] = (int) 'F';
      intArray0[5] = 336;
      int[] intArray1 = ArrayUtils.insert(0, intArray0, intArray0);
      assertArrayEquals(new int[] {Integer.MAX_VALUE, 70, (-1916), 338, 70, 336}, intArray0);
      assertEquals(12, intArray1.length);
      assertEquals(6, intArray0.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
      assertNotNull(intArray1);
  }

  @Test(timeout = 4000)
  public void test0002()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = 196;
      int[] intArray1 = ArrayUtils.subarray(intArray0, 0, 0);
      assertArrayEquals(new int[] {196, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(8, intArray0.length);
      assertEquals(0, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(intArray0, (int) (byte)98, (-1808));
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertArrayEquals(new int[] {196, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(8, intArray0.length);
      assertFalse(intArray0.equals((Object)intArray1));
      assertNotSame(intArray0, intArray1);
      assertNotNull(bitSet0);
      
      BitSet bitSet1 = new BitSet();
      assertTrue(bitSet1.isEmpty());
      assertEquals(0, bitSet1.length());
      assertEquals(64, bitSet1.size());
      assertEquals("{}", bitSet1.toString());
      assertEquals(0, bitSet1.cardinality());
      assertTrue(bitSet1.equals((Object)bitSet0));
      assertNotNull(bitSet1);
      
      Long long0 = new Long((byte)98);
      assertNotNull(long0);
      assertEquals(98L, (long)long0);
      
      Long long1 = new Long(857L);
      assertFalse(long1.equals((Object)long0));
      assertNotNull(long1);
      assertEquals(857L, (long)long1);
      
      Long long2 = new Long(0);
      assertFalse(long2.equals((Object)long0));
      assertFalse(long2.equals((Object)long1));
      assertNotNull(long2);
      assertEquals(0L, (long)long2);
      
      ArrayUtils.shift(intArray1, (int) (byte)98);
      assertArrayEquals(new int[] {196, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(8, intArray0.length);
      assertEquals(0, intArray1.length);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      ArrayUtils.shift(booleanArray0, 1);
      assertTrue(Arrays.equals(new boolean[] {false, true, true}, booleanArray0));
      assertEquals(3, booleanArray0.length);
      
      ArrayUtils.shift(booleanArray0, 91);
      assertTrue(Arrays.equals(new boolean[] {true, false, true}, booleanArray0));
      assertEquals(3, booleanArray0.length);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 196;
      boolean boolean0 = ArrayUtils.isEmpty(doubleArray0);
      assertArrayEquals(new double[] {196.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertFalse(boolean0);
      
      ArrayUtils.shift(doubleArray0, 1072, 0, Integer.MAX_VALUE);
      assertArrayEquals(new double[] {196.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      String[] stringArray0 = new String[0];
      String[] stringArray1 = ArrayUtils.nullToEmpty(stringArray0);
      assertEquals(0, stringArray0.length);
      assertEquals(0, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertNotNull(stringArray1);
  }

  @Test(timeout = 4000)
  public void test0003()  throws Throwable  {
      byte byte0 = (byte) (-72);
      boolean boolean0 = ArrayUtils.isSameLength((byte[]) null, (byte[]) null);
      assertTrue(boolean0);
      
      int int0 = ArrayUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      Object[] objectArray0 = new Object[1];
      Float float0 = new Float(0.0F);
      assertNotNull(float0);
      assertEquals(0.0F, (float)float0, 0.01F);
      
      Object object0 = ArrayUtils.toPrimitive((Object) float0);
      assertNotNull(object0);
      assertEquals(0.0F, object0);
      
      objectArray0[0] = object0;
      ArrayUtils.swap(objectArray0, (int) (byte)31, 1743, (int) (byte)31);
      assertEquals(1, objectArray0.length);
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (byte)31;
      shortArray0[2] = (short) (byte) (-72);
      short short0 = (short) (-592);
      shortArray0[3] = (short) (-592);
      int int1 = Integer.MAX_VALUE;
      ArrayUtils.reverse(shortArray0, Integer.MAX_VALUE, Integer.MAX_VALUE);
      assertArrayEquals(new short[] {(short)31, (short)0, (short) (-72), (short) (-592)}, shortArray0);
      assertEquals(4, shortArray0.length);
      
      int int2 = 1439;
      ArrayUtils.swap(objectArray0, (int) (byte)31, (int) (short) (-4539), 1439);
      assertEquals(1, objectArray0.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.shuffle((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0004()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)76;
      byteArray0[2] = (byte) (-32);
      byteArray0[3] = (byte)126;
      byteArray0[4] = (byte)12;
      byteArray0[5] = (byte)2;
      ArrayUtils.swap(byteArray0, (-1485), (int) (byte)76, 45);
      assertArrayEquals(new byte[] {(byte)0, (byte)76, (byte) (-32), (byte)126, (byte)12, (byte)2}, byteArray0);
      assertEquals(6, byteArray0.length);
      
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short) (byte)2;
      shortArray0[1] = (short) (byte)12;
      shortArray0[2] = (short) (byte)76;
      shortArray0[3] = (short) (byte)76;
      shortArray0[4] = (short) (-1);
      shortArray0[5] = (short) (byte) (-32);
      shortArray0[6] = (short) (byte)0;
      shortArray0[7] = (short) (byte)76;
      int int0 = ArrayUtils.indexOf(shortArray0, (short)76, 4244);
      assertArrayEquals(new short[] {(short)2, (short)12, (short)76, (short)76, (short) (-1), (short) (-32), (short)0, (short)76}, shortArray0);
      assertEquals(8, shortArray0.length);
      assertEquals((-1), int0);
      
      Boolean[] booleanArray0 = new Boolean[6];
      Boolean boolean0 = new Boolean("java.lang.Boolean");
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      booleanArray0[0] = boolean0;
      Boolean boolean1 = new Boolean("U[y2S`2%}K");
      assertTrue(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      assertFalse(boolean1);
      
      booleanArray0[1] = boolean1;
      Boolean boolean2 = Boolean.valueOf(true);
      assertFalse(boolean2.equals((Object)boolean0));
      assertFalse(boolean2.equals((Object)boolean1));
      assertNotNull(boolean2);
      assertTrue(boolean2);
      
      booleanArray0[2] = boolean2;
      Boolean boolean3 = Boolean.TRUE;
      assertFalse(boolean3.equals((Object)boolean1));
      assertFalse(boolean3.equals((Object)boolean0));
      assertNotNull(boolean3);
      assertTrue(boolean3);
      
      booleanArray0[3] = boolean3;
      Boolean boolean4 = Boolean.TRUE;
      assertFalse(boolean4.equals((Object)boolean1));
      assertFalse(boolean4.equals((Object)boolean0));
      assertNotNull(boolean4);
      assertTrue(boolean4);
      
      booleanArray0[4] = boolean4;
      Boolean boolean5 = Boolean.FALSE;
      assertFalse(boolean5.equals((Object)boolean3));
      assertFalse(boolean5.equals((Object)boolean4));
      assertTrue(boolean5.equals((Object)boolean1));
      assertFalse(boolean5.equals((Object)boolean2));
      assertTrue(boolean5.equals((Object)boolean0));
      assertNotNull(boolean5);
      assertFalse(boolean5);
      
      booleanArray0[5] = boolean5;
      Boolean[] booleanArray1 = ArrayUtils.insert((int) 0, booleanArray0, booleanArray0);
      assertEquals(6, booleanArray0.length);
      assertEquals(12, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
  }

  @Test(timeout = 4000)
  public void test0005()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      String string0 = ArrayUtils.toString((Object) "");
      assertNotNull(string0);
      assertEquals("", string0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-41);
      byteArray0[1] = (byte) (-90);
      byteArray0[2] = (byte) (-78);
      byteArray0[3] = (byte)117;
      byteArray0[4] = (byte)2;
      byteArray0[5] = (byte) (-71);
      byteArray0[6] = (byte) (-1);
      byte[] byteArray1 = ArrayUtils.removeAll(byteArray0, intArray0);
      assertArrayEquals(new int[] {0}, intArray0);
      assertArrayEquals(new byte[] {(byte) (-41), (byte) (-90), (byte) (-78), (byte)117, (byte)2, (byte) (-71), (byte) (-1)}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-90), (byte) (-78), (byte)117, (byte)2, (byte) (-71), (byte) (-1)}, byteArray1);
      assertEquals(1, intArray0.length);
      assertEquals(7, byteArray0.length);
      assertEquals(6, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short) (byte) (-78);
      shortArray0[1] = (short) (byte) (-41);
      shortArray0[2] = (short) (byte)117;
      shortArray0[3] = (short) (byte) (-90);
      shortArray0[4] = (short) (byte) (-78);
      short[] shortArray1 = ArrayUtils.removeAll(shortArray0, intArray0);
      assertArrayEquals(new int[] {0}, intArray0);
      assertArrayEquals(new short[] {(short) (-41), (short)117, (short) (-90), (short) (-78)}, shortArray1);
      assertArrayEquals(new short[] {(short) (-78), (short) (-41), (short)117, (short) (-90), (short) (-78)}, shortArray0);
      assertEquals(1, intArray0.length);
      assertEquals(4, shortArray1.length);
      assertEquals(5, shortArray0.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertNotNull(shortArray1);
  }

  @Test(timeout = 4000)
  public void test0006()  throws Throwable  {
      Character character0 = new Character('r');
      assertNotNull(character0);
      assertEquals('r', (char)character0);
      
      Object object0 = ArrayUtils.toPrimitive((Object) character0);
      assertNotNull(object0);
      assertEquals('r', object0);
      
      String string0 = ArrayUtils.toString(object0, ",%f");
      assertNotNull(string0);
      assertEquals("r", string0);
      
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = object0;
      MockRandom mockRandom0 = new MockRandom(1L);
      assertNotNull(mockRandom0);
      
      LongStream longStream0 = mockRandom0.longs();
      assertNotNull(longStream0);
      
      char[] charArray0 = new char[7];
      charArray0[0] = 'J';
      charArray0[1] = '_';
      charArray0[2] = '_';
      charArray0[3] = '_';
      float float0 = mockRandom0.nextFloat();
      assertEquals(0.0F, float0, 0.01F);
      
      charArray0[4] = ')';
      charArray0[5] = '_';
      charArray0[6] = ')';
      ArrayUtils.shuffle(charArray0, (Random) mockRandom0);
      assertArrayEquals(new char[] {'J', '_', '_', ')', '_', ')', '_'}, charArray0);
      assertEquals(7, charArray0.length);
      
      short[] shortArray0 = ArrayUtils.removeElement((short[]) null, (short)6);
      assertNull(shortArray0);
      
      float[] floatArray0 = ArrayUtils.toPrimitive((Float[]) null);
      assertNull(floatArray0);
  }

  @Test(timeout = 4000)
  public void test0007()  throws Throwable  {
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short) (-13);
      shortArray0[1] = (short)43;
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      BitSet bitSet0 = new BitSet();
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertNotNull(bitSet0);
      
      Long long0 = new Long((-3482L));
      assertNotNull(long0);
      assertEquals((-3482L), (long)long0);
      
      Long long1 = new Long((short)43);
      assertFalse(long1.equals((Object)long0));
      assertNotNull(long1);
      assertEquals(43L, (long)long1);
      
      byte[] byteArray0 = ArrayUtils.addAll((byte[]) null, (byte[]) null);
      assertNull(byteArray0);
      
      Character[] characterArray0 = new Character[8];
      char char0 = '*';
      Character character0 = Character.valueOf('*');
      assertNotNull(character0);
      assertEquals('*', (char)character0);
      
      characterArray0[0] = character0;
      Character character1 = Character.valueOf(char0);
      assertNotNull(character1);
      assertEquals('*', (char)character1);
      
      characterArray0[1] = character1;
      Character character2 = new Character(char0);
      assertTrue(character2.equals((Object)character1));
      assertTrue(character2.equals((Object)character0));
      assertTrue(character2.equals((Object)char0));
      assertNotNull(character2);
      assertEquals('*', (char)character2);
      
      characterArray0[2] = character2;
      Character character3 = new Character('[');
      assertFalse(character3.equals((Object)char0));
      assertFalse(character3.equals((Object)character0));
      assertFalse(character3.equals((Object)character1));
      assertFalse(character3.equals((Object)character2));
      assertNotNull(character3);
      assertEquals('[', (char)character3);
      
      characterArray0[3] = character3;
      Character character4 = new Character('l');
      assertFalse(character4.equals((Object)char0));
      assertFalse(character4.equals((Object)character0));
      assertFalse(character4.equals((Object)character1));
      assertFalse(character4.equals((Object)character3));
      assertFalse(character4.equals((Object)character2));
      assertNotNull(character4);
      assertEquals('l', (char)character4);
      
      characterArray0[4] = character4;
      Character character5 = new Character('[');
      assertFalse(character5.equals((Object)character2));
      assertTrue(character5.equals((Object)character3));
      assertFalse(character5.equals((Object)character0));
      assertFalse(character5.equals((Object)char0));
      assertFalse(character5.equals((Object)character1));
      assertFalse(character5.equals((Object)character4));
      assertNotNull(character5);
      assertEquals('[', (char)character5);
      
      characterArray0[5] = character5;
      Character character6 = new Character('l');
      assertFalse(character6.equals((Object)char0));
      assertFalse(character6.equals((Object)character0));
      assertFalse(character6.equals((Object)character5));
      assertFalse(character6.equals((Object)character1));
      assertFalse(character6.equals((Object)character2));
      assertTrue(character6.equals((Object)character4));
      assertFalse(character6.equals((Object)character3));
      assertNotNull(character6);
      assertEquals('l', (char)character6);
      
      characterArray0[6] = character6;
      Character character7 = Character.valueOf(char0);
      assertFalse(character7.equals((Object)character3));
      assertTrue(character7.equals((Object)character2));
      assertFalse(character7.equals((Object)character6));
      assertFalse(character7.equals((Object)character5));
      assertFalse(character7.equals((Object)character4));
      assertNotNull(character7);
      assertEquals('*', (char)character7);
      
      characterArray0[7] = character7;
      Character[] characterArray1 = ArrayUtils.nullToEmpty(characterArray0);
      assertEquals(8, characterArray0.length);
      assertEquals(8, characterArray1.length);
      assertSame(characterArray0, characterArray1);
      assertSame(characterArray1, characterArray0);
      assertNotNull(characterArray1);
  }

  @Test(timeout = 4000)
  public void test0008()  throws Throwable  {
      float[] floatArray0 = new float[6];
      floatArray0[0] = (-584.5794F);
      floatArray0[1] = 714.40826F;
      floatArray0[2] = 2220.0F;
      floatArray0[3] = 1.0F;
      floatArray0[4] = 53.176243F;
      floatArray0[5] = 1.0F;
      ArrayUtils.reverse(floatArray0);
      assertArrayEquals(new float[] {1.0F, 53.176243F, 1.0F, 2220.0F, 714.40826F, (-584.5794F)}, floatArray0, 0.01F);
      assertEquals(6, floatArray0.length);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (-584.5794F);
      doubleArray0[1] = (double) (-584.5794F);
      doubleArray0[2] = (double) 1.0F;
      doubleArray0[3] = (double) 1.0F;
      Double[] doubleArray1 = ArrayUtils.toObject(doubleArray0);
      assertArrayEquals(new double[] {(-584.5794067382812), (-584.5794067382812), 1.0, 1.0}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertNotNull(doubleArray1);
      
      char[] charArray0 = ArrayUtils.removeAllOccurrences((char[]) null, '-');
      assertNull(charArray0);
      
      Double[] doubleArray2 = new Double[3];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (Double) 1.0;
      doubleArray2[1] = (Double) 1.0;
      doubleArray2[2] = (Double) 1.0;
      double[] doubleArray3 = ArrayUtils.toPrimitive(doubleArray2);
      assertArrayEquals(new double[] {1.0, 1.0, 1.0}, doubleArray3, 0.01);
      assertEquals(3, doubleArray3.length);
      assertEquals(3, doubleArray2.length);
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotNull(doubleArray3);
      
      int[] intArray0 = new int[1];
      intArray0[0] = 816;
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(intArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 816, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0009()  throws Throwable  {
      long[] longArray0 = new long[2];
      longArray0[0] = (-3099L);
      longArray0[1] = (-1800L);
      long[] longArray1 = ArrayUtils.addAll(longArray0, longArray0);
      assertArrayEquals(new long[] {(-3099L), (-1800L)}, longArray0);
      assertArrayEquals(new long[] {(-3099L), (-1800L), (-3099L), (-1800L)}, longArray1);
      assertEquals(2, longArray0.length);
      assertEquals(4, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
      
      double[] doubleArray0 = ArrayUtils.removeElement((double[]) null, (double) (-3099L));
      assertNull(doubleArray0);
      
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short)1852;
      shortArray0[1] = (short)32599;
      shortArray0[2] = (short)404;
      shortArray0[3] = (short) (-260);
      shortArray0[4] = (short)11;
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertArrayEquals(new short[] {(short)1852, (short)32599, (short)404, (short) (-260), (short)11}, shortArray0);
      assertEquals(5, shortArray0.length);
      assertEquals(5, shortArray1.length);
      assertNotNull(shortArray1);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) (short)11;
      floatArray0[1] = (float) (short)11;
      floatArray0[2] = (float) (-3099L);
      floatArray0[3] = 2690.8281F;
      floatArray0[4] = (float) (-1800L);
      int int0 = ArrayUtils.lastIndexOf(floatArray0, (-1087.5305F), 128);
      assertArrayEquals(new float[] {11.0F, 11.0F, (-3099.0F), 2690.8281F, (-1800.0F)}, floatArray0, 0.01F);
      assertEquals(5, floatArray0.length);
      assertEquals((-1), int0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-63);
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte) (-13);
      byteArray0[3] = (byte)4;
      byteArray0[4] = (byte)53;
      boolean boolean0 = ArrayUtils.contains(byteArray0, (byte)60);
      assertArrayEquals(new byte[] {(byte) (-63), (byte) (-1), (byte) (-13), (byte)4, (byte)53}, byteArray0);
      assertEquals(5, byteArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0010()  throws Throwable  {
      Short short0 = new Short((short) (-306));
      assertNotNull(short0);
      assertEquals((short) (-306), (short)short0);
      
      Short[] shortArray0 = new Short[3];
      Short short1 = new Short((short) (-306));
      assertTrue(short1.equals((Object)short0));
      assertNotNull(short1);
      assertEquals((short) (-306), (short)short1);
      
      shortArray0[0] = short1;
      shortArray0[1] = short0;
      shortArray0[2] = short0;
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0, (short) shortArray0[2]);
      assertArrayEquals(new short[] {(short) (-306), (short) (-306), (short) (-306)}, shortArray1);
      assertEquals(3, shortArray0.length);
      assertEquals(3, shortArray1.length);
      assertNotNull(shortArray1);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (short)shortArray0[2];
      doubleArray0[1] = (double) (short)shortArray0[0];
      doubleArray0[2] = (double) (short)shortArray0[2];
      doubleArray0[3] = (double) (short)shortArray0[1];
      doubleArray0[4] = (double) (short) (-306);
      boolean boolean0 = ArrayUtils.contains(doubleArray0, (-40.0), (-306.0));
      assertArrayEquals(new double[] {(-306.0), (-306.0), (-306.0), (-306.0), (-306.0)}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      assertFalse(boolean0);
      
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) (short)shortArray0[0];
      floatArray0[1] = (float) (short)shortArray0[2];
      floatArray0[2] = (float) (short)shortArray0[0];
      floatArray0[3] = (float) (short)shortArray0[0];
      floatArray0[4] = (float) (short)shortArray0[2];
      floatArray0[5] = (float) (short)shortArray0[0];
      floatArray0[6] = (float) (short)shortArray0[2];
      floatArray0[7] = (float) (short)shortArray0[2];
      floatArray0[8] = (float) (short)shortArray0[0];
      ArrayUtils.swap(floatArray0, 10, (int) shortArray0[2], (int) shortArray0[0]);
      assertArrayEquals(new float[] {(-306.0F), (-306.0F), (-306.0F), (-306.0F), (-306.0F), (-306.0F), (-306.0F), (-306.0F), (-306.0F)}, floatArray0, 0.01F);
      assertEquals(3, shortArray0.length);
      assertEquals(9, floatArray0.length);
      
      char[] charArray0 = new char[6];
      charArray0[0] = '&';
      charArray0[1] = '<';
      charArray0[2] = '-';
      charArray0[3] = '4';
      charArray0[4] = 'u';
      charArray0[5] = '%';
      ArrayUtils.shift(charArray0, (int) shortArray0[0], (-2143192853), (-924));
      assertArrayEquals(new char[] {'&', '<', '-', '4', 'u', '%'}, charArray0);
      assertEquals(3, shortArray0.length);
      assertEquals(6, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test0011()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)110;
      Long long0 = new Long(862L);
      assertNotNull(long0);
      assertEquals(862L, (long)long0);
      
      Long long1 = new Long(862L);
      assertTrue(long1.equals((Object)long0));
      assertNotNull(long1);
      assertEquals(862L, (long)long1);
      
      Long long2 = new Long(51L);
      assertFalse(long2.equals((Object)long1));
      assertFalse(long2.equals((Object)long0));
      assertNotNull(long2);
      assertEquals(51L, (long)long2);
      
      Long[] longArray0 = ArrayUtils.nullToEmpty((Long[]) null);
      assertEquals(0, longArray0.length);
      assertNotNull(longArray0);
      
      short[] shortArray0 = new short[0];
      short[] shortArray1 = ArrayUtils.nullToEmpty(shortArray0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      
      short[] shortArray2 = new short[7];
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertFalse(shortArray2.equals((Object)shortArray1));
      
      shortArray2[0] = (short) (byte)110;
      shortArray2[1] = (short) (-1601);
      shortArray2[2] = (short) (byte)110;
      shortArray2[3] = (short) (byte)34;
      shortArray2[4] = (short) (byte)110;
      shortArray2[5] = (short)274;
      shortArray2[6] = (short) (byte)34;
      short[] shortArray3 = ArrayUtils.subarray(shortArray2, 281, (int) (byte)110);
      assertArrayEquals(new short[] {}, shortArray3);
      assertArrayEquals(new short[] {(short)110, (short) (-1601), (short)110, (short)34, (short)110, (short)274, (short)34}, shortArray2);
      assertEquals(0, shortArray3.length);
      assertEquals(7, shortArray2.length);
      assertFalse(shortArray3.equals((Object)shortArray0));
      assertFalse(shortArray3.equals((Object)shortArray2));
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertFalse(shortArray2.equals((Object)shortArray1));
      assertNotSame(shortArray3, shortArray0);
      assertNotSame(shortArray3, shortArray2);
      assertSame(shortArray3, shortArray1);
      assertNotSame(shortArray2, shortArray0);
      assertNotSame(shortArray2, shortArray3);
      assertNotSame(shortArray2, shortArray1);
      assertNotNull(shortArray3);
      
      Object[] objectArray0 = ArrayUtils.nullToEmpty((Object[]) longArray0);
      assertEquals(0, objectArray0.length);
      assertEquals(0, longArray0.length);
      assertNotNull(objectArray0);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'b';
      char[] charArray1 = ArrayUtils.addFirst(charArray0, ']');
      assertArrayEquals(new char[] {'b'}, charArray0);
      assertArrayEquals(new char[] {']', 'b'}, charArray1);
      assertEquals(1, charArray0.length);
      assertEquals(2, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      
      int int0 = ArrayUtils.lastIndexOf(charArray1, ']');
      assertArrayEquals(new char[] {'b'}, charArray0);
      assertArrayEquals(new char[] {']', 'b'}, charArray1);
      assertEquals(1, charArray0.length);
      assertEquals(2, charArray1.length);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(0, int0);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = 3322.0F;
      floatArray0[1] = (float) (short)110;
      floatArray0[2] = (float) (short)110;
      float[] floatArray1 = ArrayUtils.addAll(floatArray0, floatArray0);
      assertArrayEquals(new float[] {3322.0F, 110.0F, 110.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {3322.0F, 110.0F, 110.0F, 3322.0F, 110.0F, 110.0F}, floatArray1, 0.01F);
      assertEquals(3, floatArray0.length);
      assertEquals(6, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
  }

  @Test(timeout = 4000)
  public void test0012()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = (-2830);
      intArray0[1] = 7;
      ArrayUtils.shift(intArray0, 7, (-2373), 328);
      assertArrayEquals(new int[] {(-2830), 7}, intArray0);
      assertEquals(2, intArray0.length);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-90);
      byteArray0[1] = (byte) (-25);
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte) (-56);
      byteArray0[4] = (byte)2;
      byteArray0[5] = (byte)83;
      byteArray0[6] = (byte)1;
      byteArray0[7] = (byte)83;
      ArrayUtils.shift(byteArray0, (int) (byte) (-90), (int) (byte)1, 2071);
      assertArrayEquals(new byte[] {(byte) (-90), (byte) (-25), (byte) (-1), (byte) (-56), (byte)2, (byte)83, (byte)1, (byte)83}, byteArray0);
      assertEquals(8, byteArray0.length);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) (byte)83;
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) (byte) (-90);
      floatArray0[1] = (-732.9816F);
      // Undeclared exception!
      try { 
        ArrayUtils.insert(7, floatArray0, floatArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 7, Length: 2
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0013()  throws Throwable  {
      Byte byte0 = new Byte((byte)3);
      assertNotNull(byte0);
      assertEquals((byte)3, (byte)byte0);
      
      Byte byte1 = new Byte((byte)2);
      assertFalse(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      assertEquals((byte)2, (byte)byte1);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (byte)3;
      doubleArray0[1] = (-594.132014090607);
      doubleArray0[2] = (double) (byte)59;
      double[] doubleArray1 = ArrayUtils.subarray(doubleArray0, 275, (int) (byte)59);
      assertArrayEquals(new double[] {3.0, (-594.132014090607), 59.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      
      int int0 = (-104);
      char char0 = 'M';
      char[] charArray0 = new char[2];
      charArray0[0] = '[';
      charArray0[1] = '/';
      ArrayUtils.shift(charArray0, (-708), 2, 275);
      assertArrayEquals(new char[] {'/', '['}, charArray0);
      assertEquals(2, charArray0.length);
      
      int int1 = ArrayUtils.lastIndexOf(charArray0, '=', (int) (byte)2);
      assertArrayEquals(new char[] {'/', '['}, charArray0);
      assertEquals(2, charArray0.length);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      double double0 = 3950.525;
      // Undeclared exception!
      try { 
        ArrayUtils.add(doubleArray0, 1217, 3950.525);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1217, Length: 3
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0014()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      long[] longArray0 = new long[0];
      ArrayUtils.swap(longArray0, 1383, 1383);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      MutableInt mutableInt0 = new MutableInt(1383);
      assertEquals(1383.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(1383, mutableInt0.intValue());
      assertEquals(1383L, mutableInt0.longValue());
      assertEquals(1383.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals("1383", mutableInt0.toString());
      assertEquals((short)1383, mutableInt0.shortValue());
      assertEquals(1383, (int)mutableInt0.getValue());
      assertEquals(1383, (int)mutableInt0.toInteger());
      assertEquals((byte)103, mutableInt0.byteValue());
      assertNotNull(mutableInt0);
      
      boolean boolean0 = ArrayUtils.isSorted(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray0));
      assertEquals(3, booleanArray0.length);
      assertTrue(boolean0);
      
      ArrayUtils.shift(longArray0, 4020, (-1185), 3025);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) "$1qKxJftd";
      objectArray0[1] = (Object) false;
      objectArray0[2] = (Object) false;
      String[] stringArray0 = ArrayUtils.toStringArray(objectArray0, "$1qKxJftd");
      assertEquals(3, objectArray0.length);
      assertEquals(3, stringArray0.length);
      assertNotNull(stringArray0);
      
      org.evosuite.runtime.Random.setNextRandom((-1185));
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 3707.9;
      doubleArray0[1] = (double) 3025;
      doubleArray0[2] = 3707.9;
      doubleArray0[3] = (double) 1383;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) 0;
      doubleArray0[6] = (double) 3025;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (double) 3025, (int) (byte)0, (double) 4020);
      assertArrayEquals(new double[] {3707.9, 3025.0, 3707.9, 1383.0, 0.0, 0.0, 3025.0}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test0015()  throws Throwable  {
      Character[] characterArray0 = new Character[0];
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, characterArray0.length);
      assertEquals(0, charArray0.length);
      assertNotNull(charArray0);
      
      int[] intArray0 = new int[0];
      int int0 = ArrayUtils.indexOf(intArray0, 2122);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertEquals((-1), int0);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 2122;
      doubleArray0[1] = (double) (-1);
      Double[] doubleArray1 = ArrayUtils.toObject(doubleArray0);
      assertArrayEquals(new double[] {2122.0, (-1.0)}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertNotNull(doubleArray1);
      
      Short short0 = new Short((short)279);
      assertNotNull(short0);
      assertEquals((short)279, (short)short0);
      
      Short[] shortArray0 = new Short[8];
      shortArray0[0] = short0;
      shortArray0[1] = short0;
      shortArray0[2] = short0;
      shortArray0[3] = short0;
      shortArray0[4] = short0;
      shortArray0[5] = short0;
      shortArray0[6] = short0;
      shortArray0[7] = short0;
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0);
      assertArrayEquals(new short[] {(short)279, (short)279, (short)279, (short)279, (short)279, (short)279, (short)279, (short)279}, shortArray1);
      assertEquals(8, shortArray1.length);
      assertEquals(8, shortArray0.length);
      assertNotNull(shortArray1);
      
      double[] doubleArray2 = ArrayUtils.toPrimitive(doubleArray1, 1513.4304);
      assertArrayEquals(new double[] {2122.0, (-1.0)}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {2122.0, (-1.0)}, doubleArray0, 0.01);
      assertEquals(2, doubleArray2.length);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotNull(doubleArray2);
      
      float[] floatArray0 = new float[9];
      floatArray0[0] = 362.96F;
      floatArray0[1] = (float) (short)shortArray0[0];
      floatArray0[2] = (float) (short)279;
      floatArray0[3] = (float) (short)shortArray0[6];
      floatArray0[4] = (float) (short)279;
      floatArray0[5] = (float) (short)shortArray0[0];
      floatArray0[6] = (float) (short)shortArray0[3];
      floatArray0[7] = (float) (short)shortArray0[4];
      floatArray0[8] = (float) (short)279;
      ArrayUtils.shift(floatArray0, (-2009), (int) shortArray0[3], (-1052));
      assertArrayEquals(new float[] {279.0F, 362.96F, 279.0F, 279.0F, 279.0F, 279.0F, 279.0F, 279.0F, 279.0F}, floatArray0, 0.01F);
      assertEquals(9, floatArray0.length);
      assertEquals(8, shortArray0.length);
      
      Integer[] integerArray0 = new Integer[3];
      Integer integer0 = new Integer((int) shortArray0[1]);
      assertEquals(8, shortArray0.length);
      assertFalse(integer0.equals((Object)int0));
      assertNotNull(integer0);
      assertEquals(279, (int)integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((-1776));
      assertFalse(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals((-1776), (int)integer1);
      
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(82);
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)int0));
      assertFalse(integer2.equals((Object)integer0));
      assertNotNull(integer2);
      assertEquals(82, (int)integer2);
      
      integerArray0[2] = integer2;
      int[] intArray1 = ArrayUtils.toPrimitive(integerArray0, (-2009));
      assertArrayEquals(new int[] {279, (-1776), 82}, intArray1);
      assertEquals(3, intArray1.length);
      assertEquals(3, integerArray0.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
  }

  @Test(timeout = 4000)
  public void test0016()  throws Throwable  {
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)0;
      byte[] byteArray0 = ArrayUtils.add((byte[]) null, (int) (short)0, (byte)85);
      assertArrayEquals(new byte[] {(byte)85}, byteArray0);
      assertEquals(1, byteArray0.length);
      assertNotNull(byteArray0);
      
      byte[] byteArray1 = ArrayUtils.add(byteArray0, (byte)59);
      assertArrayEquals(new byte[] {(byte)85}, byteArray0);
      assertArrayEquals(new byte[] {(byte)85, (byte)59}, byteArray1);
      assertEquals(1, byteArray0.length);
      assertEquals(2, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      
      Byte byte0 = new Byte((byte) (-82));
      assertNotNull(byte0);
      assertEquals((byte) (-82), (byte)byte0);
      
      try { 
        Byte.valueOf((String) null);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // null
         //
         verifyException("java.lang.Integer", e);
      }
  }

  @Test(timeout = 4000)
  public void test0017()  throws Throwable  {
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short) (-13);
      shortArray0[1] = (short)43;
      byte[] byteArray0 = ArrayUtils.removeElement((byte[]) null, (byte)117);
      assertNull(byteArray0);
      
      char[] charArray0 = new char[9];
      charArray0[0] = '\u001E';
      charArray0[1] = '\u001E';
      charArray0[2] = '\u001E';
      charArray0[3] = '\u001E';
      charArray0[4] = '\u001E';
      charArray0[5] = '\u001E';
      charArray0[6] = '\u001E';
      charArray0[7] = '\u001E';
      charArray0[8] = '\u001E';
      char[] charArray1 = ArrayUtils.removeElement(charArray0, ',');
      assertArrayEquals(new char[] {'\u001E', '\u001E', '\u001E', '\u001E', '\u001E', '\u001E', '\u001E', '\u001E', '\u001E'}, charArray0);
      assertArrayEquals(new char[] {'\u001E', '\u001E', '\u001E', '\u001E', '\u001E', '\u001E', '\u001E', '\u001E', '\u001E'}, charArray1);
      assertEquals(9, charArray0.length);
      assertEquals(9, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      
      Byte[] byteArray1 = new Byte[0];
      boolean boolean0 = ArrayUtils.isArrayIndexValid(byteArray1, 2);
      assertEquals(0, byteArray1.length);
      assertFalse(boolean0);
      
      char[] charArray2 = ArrayUtils.addAll(charArray0, charArray0);
      assertArrayEquals(new char[] {'\u001E', '\u001E', '\u001E', '\u001E', '\u001E', '\u001E', '\u001E', '\u001E', '\u001E'}, charArray0);
      assertEquals(18, charArray2.length);
      assertEquals(9, charArray0.length);
      assertFalse(charArray2.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray1));
      assertFalse(charArray0.equals((Object)charArray1));
      assertNotSame(charArray2, charArray0);
      assertNotSame(charArray2, charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray0, charArray2);
      assertNotNull(charArray2);
      
      org.evosuite.runtime.Random.setNextRandom(2);
      String[] stringArray0 = ArrayUtils.toStringArray((Object[]) byteArray1);
      assertEquals(0, stringArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotNull(stringArray0);
      
      ArrayUtils.reverse((Object[]) byteArray1);
      assertEquals(0, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test0018()  throws Throwable  {
      float[] floatArray0 = new float[1];
      floatArray0[0] = (-2239.035F);
      Byte byte0 = new Byte((byte)15);
      assertNotNull(byte0);
      assertEquals((byte)15, (byte)byte0);
      
      Byte[] byteArray0 = new Byte[6];
      byteArray0[0] = byte0;
      byteArray0[1] = byte0;
      byteArray0[2] = byte0;
      byteArray0[3] = byte0;
      byteArray0[4] = byte0;
      byteArray0[5] = byte0;
      byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0);
      assertArrayEquals(new byte[] {(byte)15, (byte)15, (byte)15, (byte)15, (byte)15, (byte)15}, byteArray1);
      assertEquals(6, byteArray0.length);
      assertEquals(6, byteArray1.length);
      assertNotNull(byteArray1);
      
      int int0 = ArrayUtils.lastIndexOf(floatArray0, (-2239.035F));
      assertArrayEquals(new float[] {(-2239.035F)}, floatArray0, 0.01F);
      assertEquals(1, floatArray0.length);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test0019()  throws Throwable  {
      long[] longArray0 = ArrayUtils.removeElement((long[]) null, (-3205L));
      assertNull(longArray0);
      
      float[] floatArray0 = new float[0];
      ArrayUtils.swap(floatArray0, (-3785), (-3785), (-3785));
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
      
      char[] charArray0 = new char[4];
      charArray0[0] = '6';
      charArray0[1] = '0';
      charArray0[2] = 'm';
      charArray0[3] = 'Q';
      BitSet bitSet0 = ArrayUtils.indexesOf(charArray0, '0', (-3785));
      assertEquals(64, bitSet0.size());
      assertEquals(2, bitSet0.length());
      assertEquals("{1}", bitSet0.toString());
      assertFalse(bitSet0.isEmpty());
      assertEquals(1, bitSet0.cardinality());
      assertArrayEquals(new char[] {'6', '0', 'm', 'Q'}, charArray0);
      assertEquals(4, charArray0.length);
      assertNotNull(bitSet0);
      
      long[] longArray1 = ArrayUtils.add((long[]) null, 298L);
      assertArrayEquals(new long[] {298L}, longArray1);
      assertEquals(1, longArray1.length);
      assertNotNull(longArray1);
      
      int int0 = ArrayUtils.indexOf(charArray0, 'm', (-3785));
      assertArrayEquals(new char[] {'6', '0', 'm', 'Q'}, charArray0);
      assertEquals(4, charArray0.length);
      assertEquals(2, int0);
      
      boolean boolean0 = ArrayUtils.isSameLength(floatArray0, floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 'm';
      doubleArray0[1] = (double) '0';
      BitSet bitSet1 = ArrayUtils.indexesOf(doubleArray0, (-1867.7), 3.0);
      assertEquals(64, bitSet1.size());
      assertEquals(0, bitSet1.cardinality());
      assertEquals(0, bitSet1.length());
      assertTrue(bitSet1.isEmpty());
      assertEquals("{}", bitSet1.toString());
      assertArrayEquals(new double[] {109.0, 48.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      assertFalse(bitSet1.equals((Object)bitSet0));
      assertNotSame(bitSet1, bitSet0);
      assertNotNull(bitSet1);
      
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) 'Q';
      objectArray0[1] = (Object) 48.0;
      objectArray0[2] = (Object) '0';
      objectArray0[3] = (Object) 'm';
      objectArray0[4] = (Object) 48.0;
      ArrayUtils.swap(objectArray0, (-2164), (-21), (-2164));
      assertEquals(5, objectArray0.length);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      BitSet bitSet2 = ArrayUtils.indexesOf(booleanArray0, false);
      assertEquals(2, bitSet2.length());
      assertEquals("{0, 1}", bitSet2.toString());
      assertEquals(64, bitSet2.size());
      assertEquals(2, bitSet2.cardinality());
      assertFalse(bitSet2.isEmpty());
      assertTrue(Arrays.equals(new boolean[] {false, false, true}, booleanArray0));
      assertEquals(3, booleanArray0.length);
      assertFalse(bitSet2.equals((Object)bitSet0));
      assertFalse(bitSet2.equals((Object)bitSet1));
      assertNotSame(bitSet2, bitSet0);
      assertNotSame(bitSet2, bitSet1);
      assertNotNull(bitSet2);
  }

  @Test(timeout = 4000)
  public void test0020()  throws Throwable  {
      long[] longArray0 = new long[8];
      longArray0[0] = (long) 4020;
      longArray0[1] = (long) (-749);
      longArray0[2] = 11L;
      longArray0[3] = (long) 4020;
      longArray0[4] = 1370L;
      longArray0[5] = (long) (-749);
      longArray0[6] = (long) 0;
      longArray0[7] = (long) 0;
      ArrayUtils.shift(longArray0, 0, (-749), (-749));
      assertArrayEquals(new long[] {4020L, (-749L), 11L, 4020L, 1370L, (-749L), 0L, 0L}, longArray0);
      assertEquals(8, longArray0.length);
      
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) (-749L);
      objectArray0[1] = (Object) (-749L);
      String[] stringArray0 = ArrayUtils.toStringArray(objectArray0, "}MCbVmBml|'B{)qJ,l");
      assertEquals(2, objectArray0.length);
      assertEquals(2, stringArray0.length);
      assertNotNull(stringArray0);
      
      org.evosuite.runtime.Random.setNextRandom(102);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (-749);
      doubleArray0[1] = (double) 0;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 0.1, (-1), 2108.0);
      assertArrayEquals(new double[] {(-749.0), 0.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0021()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[4] = (byte)1;
      byteArray0[3] = (byte)0;
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = object0;
      objectArray0[1] = object0;
      objectArray0[2] = object0;
      objectArray0[3] = (Object) (byte)0;
      objectArray0[4] = (Object) (byte)0;
      objectArray0[5] = (Object) (byte)1;
      Boolean boolean0 = Boolean.TRUE;
      assertNotNull(boolean0);
      assertTrue(boolean0);
      
      int int0 = ArrayUtils.lastIndexOf(objectArray0, (Object) boolean0, (int) (byte)1);
      assertEquals(6, objectArray0.length);
      assertEquals((-1), int0);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) (byte)1;
      floatArray0[1] = (-45.395103F);
      float[] floatArray1 = ArrayUtils.addAll(floatArray0, floatArray0);
      assertArrayEquals(new float[] {1.0F, (-45.395103F), 1.0F, (-45.395103F)}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {1.0F, (-45.395103F)}, floatArray0, 0.01F);
      assertEquals(4, floatArray1.length);
      assertEquals(2, floatArray0.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertNotNull(floatArray1);
      
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short) (byte)0;
      shortArray0[1] = (short) (byte)1;
      shortArray0[2] = (short) (byte)0;
      ArrayUtils.swap(shortArray0, 1, (-1), 79);
      assertArrayEquals(new short[] {(short)1, (short)0, (short)0}, shortArray0);
      assertEquals(3, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test0022()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      long[] longArray0 = new long[0];
      ArrayUtils.swap(longArray0, 1383, 1383);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      MutableInt mutableInt0 = new MutableInt(1383);
      assertEquals((short)1383, mutableInt0.shortValue());
      assertEquals(1383L, mutableInt0.longValue());
      assertEquals("1383", mutableInt0.toString());
      assertEquals(1383.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(1383, mutableInt0.intValue());
      assertEquals(1383.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(1383, (int)mutableInt0.toInteger());
      assertEquals((byte)103, mutableInt0.byteValue());
      assertEquals(1383, (int)mutableInt0.getValue());
      assertNotNull(mutableInt0);
      
      ArrayUtils.shift(longArray0, 1383, 574, 1383);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      
      long[] longArray1 = ArrayUtils.subarray(longArray0, (int) (byte)0, 2147090770);
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) 1L;
      floatArray0[1] = (float) (byte)0;
      int int0 = ArrayUtils.indexOf(floatArray0, (float) 1383, (int) (byte)0);
      assertArrayEquals(new float[] {1.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(2, floatArray0.length);
      assertEquals((-1), int0);
      
      MutableInt mutableInt1 = new MutableInt(mutableInt0);
      assertEquals((short)1383, mutableInt0.shortValue());
      assertEquals(1383L, mutableInt0.longValue());
      assertEquals("1383", mutableInt0.toString());
      assertEquals(1383.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(1383, mutableInt0.intValue());
      assertEquals(1383.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(1383, (int)mutableInt0.toInteger());
      assertEquals((byte)103, mutableInt0.byteValue());
      assertEquals(1383, (int)mutableInt0.getValue());
      assertEquals(1383, mutableInt1.intValue());
      assertEquals(1383, (int)mutableInt1.toInteger());
      assertEquals(1383, (int)mutableInt1.getValue());
      assertEquals(1383L, mutableInt1.longValue());
      assertEquals("1383", mutableInt1.toString());
      assertEquals(1383.0F, mutableInt1.floatValue(), 0.01F);
      assertEquals((short)1383, mutableInt1.shortValue());
      assertEquals((byte)103, mutableInt1.byteValue());
      assertEquals(1383.0, mutableInt1.doubleValue(), 0.01);
      assertTrue(mutableInt1.equals((Object)mutableInt0));
      assertNotNull(mutableInt1);
      
      Float float0 = new Float((float) 1383);
      assertNotNull(float0);
      assertEquals(1383.0F, (float)float0, 0.01F);
      
      Boolean boolean0 = Boolean.TRUE;
      assertNotNull(boolean0);
      assertTrue(boolean0);
      
      boolean boolean1 = ArrayUtils.isEquals(float0, boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test0023()  throws Throwable  {
      float[] floatArray0 = new float[2];
      floatArray0[0] = (-1733.7683F);
      long[] longArray0 = new long[3];
      longArray0[1] = (long) 6;
      short short0 = (short) (-1524);
      short short1 = (short)2;
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)2;
      boolean boolean0 = ArrayUtils.isSameLength(shortArray0, shortArray0);
      assertArrayEquals(new short[] {(short)2}, shortArray0);
      assertEquals(1, shortArray0.length);
      assertTrue(boolean0);
      
      char[] charArray0 = new char[8];
      charArray0[0] = '8';
      charArray0[1] = '8';
      charArray0[2] = '8';
      charArray0[3] = '8';
      charArray0[4] = '8';
      charArray0[5] = 'v';
      charArray0[6] = '8';
      charArray0[7] = '8';
      int int0 = ArrayUtils.lastIndexOf(charArray0, 'v', 6);
      assertArrayEquals(new char[] {'8', '8', '8', '8', '8', 'v', '8', '8'}, charArray0);
      assertEquals(8, charArray0.length);
      assertEquals(5, int0);
      
      try { 
        Float.valueOf("java.lang.Integer");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test0024()  throws Throwable  {
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short)1926;
      boolean[] booleanArray0 = new boolean[0];
      ArrayUtils.shift(booleanArray0, (-796), 786, (-796));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals(0, booleanArray0.length);
      
      int int0 = new Short((short)1926);
      assertEquals((short)1926, int0);
      
      int int1 = ArrayUtils.lastIndexOf(booleanArray0, true, (int) (short)2151);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals(0, booleanArray0.length);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-5281.127180441201);
      doubleArray0[1] = (double) (short)1926;
      doubleArray0[2] = (double) (short)2151;
      doubleArray0[3] = (double) (short)1926;
      doubleArray0[4] = (double) (short)1926;
      doubleArray0[5] = (double) (-1875);
      doubleArray0[6] = (double) (short)1926;
      double[] doubleArray1 = ArrayUtils.add(doubleArray0, 1.0);
      assertArrayEquals(new double[] {(-5281.127180441201), 1926.0, 2151.0, 1926.0, 1926.0, (-1875.0), 1926.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-5281.127180441201), 1926.0, 2151.0, 1926.0, 1926.0, (-1875.0), 1926.0, 1.0}, doubleArray1, 0.01);
      assertEquals(7, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)17;
      byteArray0[1] = (byte)104;
      byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0);
      assertArrayEquals(new byte[] {(byte)17, (byte)104}, byteArray1);
      assertArrayEquals(new byte[] {(byte)17, (byte)104}, byteArray0);
      assertEquals(2, byteArray1.length);
      assertEquals(2, byteArray0.length);
      assertSame(byteArray1, byteArray0);
      assertSame(byteArray0, byteArray1);
      assertNotNull(byteArray1);
  }

  @Test(timeout = 4000)
  public void test0025()  throws Throwable  {
      Byte byte0 = new Byte((byte)3);
      assertNotNull(byte0);
      assertEquals((byte)3, (byte)byte0);
      
      Byte byte1 = new Byte((byte)2);
      assertFalse(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      assertEquals((byte)2, (byte)byte1);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (byte)3;
      doubleArray0[1] = (-594.132014090607);
      doubleArray0[2] = (double) (byte)59;
      double[] doubleArray1 = ArrayUtils.subarray(doubleArray0, 275, (int) (byte)59);
      assertArrayEquals(new double[] {3.0, (-594.132014090607), 59.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      
      long[] longArray0 = new long[6];
      longArray0[0] = (long) (byte)3;
      longArray0[1] = (long) (byte)59;
      longArray0[2] = (long) (-104);
      longArray0[3] = (long) 275;
      longArray0[4] = (long) (byte)59;
      longArray0[5] = (long) (-104);
      ArrayUtils.shift(longArray0, 4020, 0, (-749));
      assertArrayEquals(new long[] {3L, 59L, (-104L), 275L, 59L, (-104L)}, longArray0);
      assertEquals(6, longArray0.length);
      
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) (-104L);
      objectArray0[1] = (Object) byte1;
      objectArray0[2] = (Object) 3.0;
      String[] stringArray0 = ArrayUtils.toStringArray(objectArray0, "$1qKxJftd");
      assertEquals(4, stringArray0.length);
      assertEquals(4, objectArray0.length);
      assertNotNull(stringArray0);
      
      org.evosuite.runtime.Random.setNextRandom((-1));
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 1268.5972003292, 5, (double) (-104L));
      assertArrayEquals(new double[] {3.0, (-594.132014090607), 59.0}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals((-1), int0);
      
      org.evosuite.runtime.Random.setNextRandom(1);
      boolean boolean0 = ArrayUtils.isSorted((boolean[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0026()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-43.926848497);
      doubleArray0[1] = (-1.0);
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 100.0;
      doubleArray0[4] = 100.0;
      doubleArray0[5] = (-3336.7677);
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 100.0, 0, 63.8855527);
      assertArrayEquals(new double[] {(-43.926848497), (-1.0), 0.0, 100.0, 100.0, (-3336.7677)}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      assertEquals((-1), int0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-67);
      byteArray0[1] = (byte) (-6);
      byteArray0[2] = (byte)66;
      byteArray0[3] = (byte) (-4);
      byteArray0[4] = (byte)2;
      byteArray0[5] = (byte)50;
      byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-67), (byte) (-6), (byte)66, (byte) (-4), (byte)2, (byte)50}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-67), (byte) (-6), (byte)66, (byte) (-4), (byte)2, (byte)50}, byteArray1);
      assertEquals(6, byteArray0.length);
      assertEquals(6, byteArray1.length);
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
  }

  @Test(timeout = 4000)
  public void test0027()  throws Throwable  {
      int int0 = ArrayUtils.lastIndexOf((float[]) null, 0.88169146F, 31);
      assertEquals((-1), int0);
      
      Long long0 = new Long(1358L);
      assertNotNull(long0);
      assertEquals(1358L, (long)long0);
      
      Long[] longArray0 = new Long[1];
      longArray0[0] = long0;
      Long[] longArray1 = ArrayUtils.subarray(longArray0, (-1), 2);
      assertEquals(1, longArray0.length);
      assertEquals(1, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
      
      char[] charArray0 = new char[5];
      charArray0[3] = 'Y';
      charArray0[1] = 'Y';
      charArray0[2] = 'Y';
      charArray0[3] = 'Y';
      charArray0[4] = 'Y';
      boolean boolean0 = ArrayUtils.isSorted(charArray0);
      assertArrayEquals(new char[] {'\u0000', 'Y', 'Y', 'Y', 'Y'}, charArray0);
      assertEquals(5, charArray0.length);
      assertTrue(boolean0);
      
      float[] floatArray0 = ArrayUtils.removeElement((float[]) null, (-1.0F));
      assertNull(floatArray0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)48;
      byteArray0[1] = (byte)18;
      byteArray0[2] = (byte)9;
      Byte[] byteArray1 = ArrayUtils.toObject(byteArray0);
      assertArrayEquals(new byte[] {(byte)48, (byte)18, (byte)9}, byteArray0);
      assertEquals(3, byteArray1.length);
      assertEquals(3, byteArray0.length);
      assertNotNull(byteArray1);
  }

  @Test(timeout = 4000)
  public void test0028()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      Object[] objectArray0 = new Object[0];
      Float float0 = new Float(469.0);
      assertNotNull(float0);
      assertEquals(469.0F, (float)float0, 0.01F);
      
      int int0 = ArrayUtils.lastIndexOf(objectArray0, (Object) float0, (-1));
      assertEquals(0, objectArray0.length);
      assertEquals((-1), int0);
      
      ArrayUtils.shift(objectArray0, (-1), (-2487), (-1));
      assertEquals(0, objectArray0.length);
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = 3130.681F;
      floatArray0[1] = 3923.565F;
      floatArray0[2] = (float) (byte)46;
      floatArray0[3] = (-1195.82F);
      floatArray0[4] = (float) (-1);
      floatArray0[5] = 3923.565F;
      floatArray0[6] = (float) 98;
      float[] floatArray1 = ArrayUtils.removeElement(floatArray0, 3130.681F);
      assertArrayEquals(new float[] {3130.681F, 3923.565F, 46.0F, (-1195.82F), (-1.0F), 3923.565F, 98.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {3923.565F, 46.0F, (-1195.82F), (-1.0F), 3923.565F, 98.0F}, floatArray1, 0.01F);
      assertEquals(7, floatArray0.length);
      assertEquals(6, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      
      Byte[] byteArray1 = ArrayUtils.toObject(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      assertEquals(2, byteArray0.length);
      assertEquals(2, byteArray1.length);
      assertNotNull(byteArray1);
  }

  @Test(timeout = 4000)
  public void test0029()  throws Throwable  {
      long[] longArray0 = new long[3];
      longArray0[0] = (-2084L);
      longArray0[1] = 0L;
      longArray0[2] = 0L;
      boolean boolean0 = ArrayUtils.isSorted(longArray0);
      assertArrayEquals(new long[] {(-2084L), 0L, 0L}, longArray0);
      assertEquals(3, longArray0.length);
      assertTrue(boolean0);
      
      Long long0 = new Long(857L);
      assertNotNull(long0);
      assertEquals(857L, (long)long0);
      
      Long long1 = new Long((-459L));
      assertFalse(long1.equals((Object)long0));
      assertNotNull(long1);
      assertEquals((-459L), (long)long1);
      
      Long[] longArray1 = ArrayUtils.nullToEmpty((Long[]) null);
      assertEquals(0, longArray1.length);
      assertNotNull(longArray1);
      
      short[] shortArray0 = ArrayUtils.nullToEmpty((short[]) null);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray0.length);
      assertNotNull(shortArray0);
      
      short[] shortArray1 = ArrayUtils.subarray(shortArray0, 0, 0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertSame(shortArray0, shortArray1);
      assertSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
  }

  @Test(timeout = 4000)
  public void test0030()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[1] = 127;
      boolean boolean0 = ArrayUtils.isSorted(intArray0);
      assertArrayEquals(new int[] {0, 127}, intArray0);
      assertEquals(2, intArray0.length);
      assertTrue(boolean0);
      
      long[] longArray0 = new long[3];
      longArray0[0] = (long) 0;
      longArray0[1] = (long) 0;
      longArray0[2] = (long) 0;
      long[] longArray1 = ArrayUtils.removeAllOccurrences(longArray0, (long) 0);
      assertArrayEquals(new long[] {0L, 0L, 0L}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertEquals(3, longArray0.length);
      assertEquals(0, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
      
      ArrayUtils.shift((double[]) null, 0);
      Double double0 = new Double((-5099.3446970701));
      assertNotNull(double0);
      assertEquals((-5099.3446970701), (double)double0, 0.01);
      
      Double double1 = new Double(0.0);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      assertEquals(0.0, (double)double1, 0.01);
      
      Double[] doubleArray0 = new Double[0];
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotNull(doubleArray1);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) 0;
      int int0 = ArrayUtils.lastIndexOf((double[]) null, (-2343.72277), 1);
      assertEquals((-1), int0);
      
      Integer[] integerArray0 = new Integer[7];
      integerArray0[0] = (Integer) 127;
      integerArray0[1] = (Integer) 127;
      Integer integer0 = Integer.valueOf((-5003));
      assertFalse(integer0.equals((Object)int0));
      assertNotNull(integer0);
      assertEquals((-5003), (int)integer0);
      
      integerArray0[2] = integer0;
      integerArray0[3] = (Integer) 127;
      integerArray0[4] = (Integer) 127;
      integerArray0[5] = (Integer) 127;
      Integer integer1 = new Integer((-3718));
      assertFalse(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals((-3718), (int)integer1);
      
      integerArray0[6] = integer1;
      int[] intArray1 = ArrayUtils.toPrimitive(integerArray0);
      assertArrayEquals(new int[] {127, 127, (-5003), 127, 127, 127, (-3718)}, intArray1);
      assertEquals(7, integerArray0.length);
      assertEquals(7, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      
      boolean boolean1 = ArrayUtils.isEmpty(intArray1);
      assertArrayEquals(new int[] {127, 127, (-5003), 127, 127, 127, (-3718)}, intArray1);
      assertEquals(7, integerArray0.length);
      assertEquals(7, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(boolean1 == boolean0);
      assertNotSame(intArray1, intArray0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test0031()  throws Throwable  {
      long[] longArray0 = new long[3];
      longArray0[2] = (long) 0;
      long[] longArray1 = ArrayUtils.removeAllOccurrences(longArray0, (long) 0);
      assertArrayEquals(new long[] {0L, 0L, 0L}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertEquals(3, longArray0.length);
      assertEquals(0, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
      
      ArrayUtils.shift(longArray0, 0);
      assertArrayEquals(new long[] {0L, 0L, 0L}, longArray0);
      assertEquals(3, longArray0.length);
      assertFalse(longArray0.equals((Object)longArray1));
      assertNotSame(longArray0, longArray1);
      
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = ArrayUtils.removeElement(booleanArray0, true);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = ArrayUtils.toPrimitive(object0);
      assertSame(object0, object1);
      assertSame(object1, object0);
      assertNotNull(object1);
      
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = object0;
      objectArray0[1] = object0;
      objectArray0[2] = object0;
      objectArray0[3] = object0;
      Object object2 = ArrayUtils.toPrimitive(object0);
      assertSame(object0, object2);
      assertSame(object0, object1);
      assertSame(object2, object0);
      assertSame(object2, object1);
      assertNotNull(object2);
      
      objectArray0[4] = object2;
      objectArray0[5] = object0;
      objectArray0[4] = object1;
      Object[] objectArray1 = ArrayUtils.add(objectArray0, object0);
      assertEquals(9, objectArray1.length);
      assertEquals(8, objectArray0.length);
      assertFalse(objectArray1.equals((Object)objectArray0));
      assertNotSame(objectArray1, objectArray0);
      assertSame(object0, object2);
      assertSame(object0, object1);
      assertNotSame(objectArray0, objectArray1);
      assertNotNull(objectArray1);
      
      boolean[] booleanArray2 = ArrayUtils.addAll(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray2));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertEquals(0, booleanArray2.length);
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotSame(booleanArray2, booleanArray1);
      assertNotSame(booleanArray2, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray0, booleanArray2);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray1, booleanArray2);
      assertNotNull(booleanArray2);
      
      Double[] doubleArray0 = new Double[7];
      Double double0 = new Double((-1.0));
      assertNotNull(double0);
      assertEquals((-1.0), (double)double0, 0.01);
      
      doubleArray0[0] = double0;
      Double double1 = new Double(0);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      assertEquals(0.0, (double)double1, 0.01);
      
      doubleArray0[1] = double1;
      Double double2 = new Double((-1.0));
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertEquals((double)double2, (double)double0, 0.01);
      assertNotNull(double2);
      assertEquals((-1.0), (double)double2, 0.01);
      
      doubleArray0[2] = double2;
      Double double3 = new Double((double) doubleArray0[0]);
      assertEquals(7, doubleArray0.length);
      assertEquals((double)double3, (double)double2, 0.01);
      assertEquals((double)double3, (double)double0, 0.01);
      assertNotEquals((double)double3, (double)double1, 0.01);
      assertNotNull(double3);
      assertEquals((-1.0), (double)double3, 0.01);
      
      doubleArray0[3] = double3;
      Double double4 = new Double((double) doubleArray0[1]);
      assertEquals(7, doubleArray0.length);
      assertNotEquals((double)double4, (double)double2, 0.01);
      assertEquals((double)double4, (double)double1, 0.01);
      assertNotEquals((double)double4, (double)double3, 0.01);
      assertNotEquals((double)double4, (double)double0, 0.01);
      assertNotNull(double4);
      assertEquals(0.0, (double)double4, 0.01);
      
      doubleArray0[4] = double4;
      Double double5 = new Double((double) doubleArray0[0]);
      assertEquals(7, doubleArray0.length);
      assertEquals((double)double5, (double)double3, 0.01);
      assertEquals((double)double5, (double)double2, 0.01);
      assertNotEquals((double)double5, (double)double1, 0.01);
      assertEquals((double)double5, (double)double0, 0.01);
      assertNotEquals((double)double5, (double)double4, 0.01);
      assertNotNull(double5);
      assertEquals((-1.0), (double)double5, 0.01);
      
      doubleArray0[5] = double5;
      Double double6 = new Double((double) doubleArray0[3]);
      assertEquals(7, doubleArray0.length);
      assertEquals((double)double6, (double)double3, 0.01);
      assertEquals((double)double6, (double)double2, 0.01);
      assertNotEquals((double)double6, (double)double4, 0.01);
      assertEquals((double)double6, (double)double5, 0.01);
      assertEquals((double)double6, (double)double0, 0.01);
      assertNotEquals((double)double6, (double)double1, 0.01);
      assertNotNull(double6);
      assertEquals((-1.0), (double)double6, 0.01);
      
      doubleArray0[6] = double6;
      // Undeclared exception!
      try { 
        ArrayUtils.add(doubleArray0, (-2409), doubleArray0[0]);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -2409, Length: 7
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0032()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)17;
      byteArray0[1] = (byte)0;
      Long long0 = new Long((-2880L));
      assertNotNull(long0);
      assertEquals((-2880L), (long)long0);
      
      Long long1 = new Long(0L);
      assertFalse(long1.equals((Object)long0));
      assertNotNull(long1);
      assertEquals(0L, (long)long1);
      
      Long long2 = new Long((-2880L));
      assertTrue(long2.equals((Object)long0));
      assertFalse(long2.equals((Object)long1));
      assertNotNull(long2);
      assertEquals((-2880L), (long)long2);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) (byte)17;
      doubleArray0[1] = (double) (byte)17;
      doubleArray0[2] = (double) (-2880L);
      doubleArray0[3] = (double) (-2880L);
      doubleArray0[4] = (double) (byte)0;
      doubleArray0[5] = (double) (-2880L);
      doubleArray0[6] = (double) (byte)0;
      doubleArray0[7] = (double) (byte)0;
      double[] doubleArray1 = ArrayUtils.subarray(doubleArray0, (int) (byte)0, (-995));
      assertArrayEquals(new double[] {17.0, 17.0, (-2880.0), (-2880.0), 0.0, (-2880.0), 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(8, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      
      double[] doubleArray2 = ArrayUtils.subarray(doubleArray0, (-2817), (-3797));
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {17.0, 17.0, (-2880.0), (-2880.0), 0.0, (-2880.0), 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0, doubleArray2.length);
      assertEquals(8, doubleArray0.length);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotSame(doubleArray2, doubleArray0);
      assertSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotNull(doubleArray2);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) (byte)0;
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray0, 4934L, (-995));
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertArrayEquals(new long[] {0L}, longArray0);
      assertEquals(1, longArray0.length);
      assertNotNull(bitSet0);
  }

  @Test(timeout = 4000)
  public void test0033()  throws Throwable  {
      BitSet bitSet0 = ArrayUtils.indexesOf((double[]) null, (-1154.8984));
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertNotNull(bitSet0);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (-1681);
      shortArray0[1] = (short)1;
      short[] shortArray1 = ArrayUtils.nullToEmpty(shortArray0);
      assertArrayEquals(new short[] {(short) (-1681), (short)1}, shortArray0);
      assertArrayEquals(new short[] {(short) (-1681), (short)1}, shortArray1);
      assertEquals(2, shortArray0.length);
      assertEquals(2, shortArray1.length);
      assertSame(shortArray0, shortArray1);
      assertSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      
      boolean boolean0 = ArrayUtils.contains((long[]) null, (long) (short) (-1681));
      assertFalse(boolean0);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      boolean[] booleanArray1 = ArrayUtils.addAll(booleanArray0, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray1));
      assertEquals(1, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      
      ArrayUtils.swap(shortArray1, (int) (short)1, (int) (short) (-1681), (int) (short) (-1681));
      assertArrayEquals(new short[] {(short) (-1681), (short)1}, shortArray0);
      assertArrayEquals(new short[] {(short) (-1681), (short)1}, shortArray1);
      assertEquals(2, shortArray0.length);
      assertEquals(2, shortArray1.length);
      assertSame(shortArray0, shortArray1);
      assertSame(shortArray1, shortArray0);
      
      Boolean[] booleanArray2 = new Boolean[1];
      booleanArray2[0] = (Boolean) false;
      // Undeclared exception!
      try { 
        ArrayUtils.remove(booleanArray2, 97);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 97, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0034()  throws Throwable  {
      Character character0 = new Character('r');
      assertNotNull(character0);
      assertEquals('r', (char)character0);
      
      Object object0 = ArrayUtils.toPrimitive((Object) character0);
      assertNotNull(object0);
      assertEquals('r', object0);
      
      String string0 = ArrayUtils.toString(object0, ",%f");
      assertNotNull(string0);
      assertEquals("r", string0);
      
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = object0;
      objectArray0[2] = (Object) ",%f";
      int int0 = ArrayUtils.lastIndexOf(objectArray0, objectArray0[1], 98);
      assertEquals(3, objectArray0.length);
      assertEquals(1, int0);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) 1;
      floatArray0[1] = (-1909.8018F);
      floatArray0[2] = (float) 1;
      floatArray0[3] = (float) 98;
      floatArray0[4] = (float) 98;
      boolean boolean0 = ArrayUtils.isNotEmpty(floatArray0);
      assertArrayEquals(new float[] {1.0F, (-1909.8018F), 1.0F, 98.0F, 98.0F}, floatArray0, 0.01F);
      assertEquals(5, floatArray0.length);
      assertTrue(boolean0);
      
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      booleanArray0[6] = true;
      booleanArray0[7] = true;
      ArrayUtils.shift(booleanArray0, 1, 1, (-2235));
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true, true, true, true}, booleanArray0));
      assertEquals(8, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test0035()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-39);
      byte[] byteArray1 = new byte[8];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte) (-39);
      byteArray1[2] = (byte) (-39);
      byteArray1[3] = (byte) (-39);
      byteArray1[4] = (byte) (-39);
      byteArray1[5] = (byte)6;
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      boolean boolean0 = ArrayUtils.isNotEmpty(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      assertEquals(2, booleanArray0.length);
      assertTrue(boolean0);
      
      double[] doubleArray0 = ArrayUtils.addFirst((double[]) null, (-5917.434965986));
      assertArrayEquals(new double[] {(-5917.434965986)}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertNotNull(doubleArray0);
      
      boolean[] booleanArray1 = ArrayUtils.removeElement(booleanArray0, false);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray1));
      assertEquals(2, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      
      Boolean[] booleanArray2 = ArrayUtils.toObject(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray1));
      assertEquals(2, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertEquals(1, booleanArray2.length);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray2);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) (byte) (-39);
      floatArray0[1] = (float) (byte) (-39);
      floatArray0[2] = (float) (byte)6;
      floatArray0[3] = (float) (byte)6;
      floatArray0[4] = (float) (byte) (-39);
      ArrayUtils.reverse(floatArray0);
      assertArrayEquals(new float[] {(-39.0F), 6.0F, 6.0F, (-39.0F), (-39.0F)}, floatArray0, 0.01F);
      assertEquals(5, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test0036()  throws Throwable  {
      long[] longArray0 = new long[3];
      longArray0[0] = (-1166L);
      longArray0[1] = (-2142L);
      longArray0[2] = 995L;
      long[] longArray1 = ArrayUtils.EMPTY_LONG_ARRAY;
      assertArrayEquals(new long[] {}, longArray1);
      assertEquals(0, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
      
      Float[] floatArray0 = new Float[6];
      Float float0 = new Float((-74.045F));
      assertNotNull(float0);
      assertEquals((-74.045F), (float)float0, 0.01F);
      
      floatArray0[0] = float0;
      Float float1 = new Float((double) floatArray0[0]);
      assertEquals(6, floatArray0.length);
      assertEquals((float)float1, (float)float0, 0.01F);
      assertNotNull(float1);
      assertEquals((-74.045F), (float)float1, 0.01F);
      
      floatArray0[1] = float1;
      Float float2 = new Float((double) 995L);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertNotNull(float2);
      assertEquals(995.0F, (float)float2, 0.01F);
      
      floatArray0[2] = float2;
      Float float3 = new Float((float) (-1166L));
      assertNotEquals((float)float3, (float)float2, 0.01F);
      assertNotEquals((float)float3, (float)float1, 0.01F);
      assertNotEquals((float)float3, (float)float0, 0.01F);
      assertNotNull(float3);
      assertEquals((-1166.0F), (float)float3, 0.01F);
      
      floatArray0[3] = float3;
      Float float4 = new Float((double) floatArray0[0]);
      assertEquals(6, floatArray0.length);
      assertEquals((float)float4, (float)float1, 0.01F);
      assertEquals((float)float4, (float)float0, 0.01F);
      assertNotEquals((float)float4, (float)float2, 0.01F);
      assertNotEquals((float)float4, (float)float3, 0.01F);
      assertNotNull(float4);
      assertEquals((-74.045F), (float)float4, 0.01F);
      
      floatArray0[4] = float4;
      Float float5 = new Float((float) floatArray0[4]);
      assertEquals(6, floatArray0.length);
      assertEquals((float)float5, (float)float4, 0.01F);
      assertNotEquals((float)float5, (float)float3, 0.01F);
      assertEquals((float)float5, (float)float1, 0.01F);
      assertNotEquals((float)float5, (float)float2, 0.01F);
      assertEquals((float)float5, (float)float0, 0.01F);
      assertNotNull(float5);
      assertEquals((-74.045F), (float)float5, 0.01F);
      
      floatArray0[5] = float5;
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0, (float) 995L);
      assertArrayEquals(new float[] {(-74.045F), (-74.045F), 995.0F, (-1166.0F), (-74.045F), (-74.045F)}, floatArray1, 0.01F);
      assertEquals(6, floatArray1.length);
      assertEquals(6, floatArray0.length);
      assertNotNull(floatArray1);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)73;
      byteArray0[1] = (byte)2;
      byteArray0[2] = (byte)121;
      byteArray0[3] = (byte)2;
      byteArray0[4] = (byte) (-78);
      byteArray0[5] = (byte) (-57);
      byteArray0[6] = (byte)80;
      byte[] byteArray1 = ArrayUtils.remove(byteArray0, 2);
      assertArrayEquals(new byte[] {(byte)73, (byte)2, (byte)121, (byte)2, (byte) (-78), (byte) (-57), (byte)80}, byteArray0);
      assertArrayEquals(new byte[] {(byte)73, (byte)2, (byte)2, (byte) (-78), (byte) (-57), (byte)80}, byteArray1);
      assertEquals(7, byteArray0.length);
      assertEquals(6, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
  }

  @Test(timeout = 4000)
  public void test0037()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)5;
      byteArray0[1] = (byte)99;
      byteArray0[2] = (byte)5;
      byte[] byteArray1 = ArrayUtils.removeElement(byteArray0, (byte) (-108));
      assertArrayEquals(new byte[] {(byte)5, (byte)99, (byte)5}, byteArray0);
      assertArrayEquals(new byte[] {(byte)5, (byte)99, (byte)5}, byteArray1);
      assertEquals(3, byteArray0.length);
      assertEquals(3, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      
      Byte byte0 = new Byte((byte)88);
      assertNotNull(byte0);
      assertEquals((byte)88, (byte)byte0);
      
      Byte byte1 = new Byte((byte)88);
      assertTrue(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      assertEquals((byte)88, (byte)byte1);
      
      Byte byte2 = new Byte((byte)5);
      assertFalse(byte2.equals((Object)byte0));
      assertFalse(byte2.equals((Object)byte1));
      assertNotNull(byte2);
      assertEquals((byte)5, (byte)byte2);
      
      Byte byte3 = new Byte((byte)110);
      assertFalse(byte3.equals((Object)byte2));
      assertFalse(byte3.equals((Object)byte0));
      assertFalse(byte3.equals((Object)byte1));
      assertNotNull(byte3);
      assertEquals((byte)110, (byte)byte3);
      
      Float float0 = new Float(0.0F);
      assertNotNull(float0);
      assertEquals(0.0F, (float)float0, 0.01F);
      
      Float[] floatArray0 = new Float[7];
      floatArray0[0] = float0;
      floatArray0[1] = float0;
      floatArray0[3] = float0;
      floatArray0[4] = float0;
      floatArray0[5] = float0;
      Float float1 = new Float((float) (byte)110);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertNotNull(float1);
      assertEquals(110.0F, (float)float1, 0.01F);
      
      floatArray0[6] = float1;
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0, (-477.60562F));
      assertArrayEquals(new float[] {0.0F, 0.0F, (-477.60562F), 0.0F, 0.0F, 0.0F, 110.0F}, floatArray1, 0.01F);
      assertEquals(7, floatArray1.length);
      assertEquals(7, floatArray0.length);
      assertNotNull(floatArray1);
  }

  @Test(timeout = 4000)
  public void test0038()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[1] = false;
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-46);
      byteArray0[1] = (byte) (-46);
      byteArray0[2] = (byte)123;
      long[] longArray0 = new long[8];
      longArray0[0] = (long) (byte) (-46);
      longArray0[1] = (long) (byte) (-46);
      longArray0[2] = (long) (byte) (-46);
      longArray0[3] = (long) (byte) (-46);
      longArray0[4] = (long) (byte) (-46);
      longArray0[5] = (long) (byte) (-46);
      longArray0[6] = (long) (byte)123;
      longArray0[7] = (long) (byte) (-46);
      boolean boolean0 = ArrayUtils.isSameLength(longArray0, longArray0);
      assertArrayEquals(new long[] {(-46L), (-46L), (-46L), (-46L), (-46L), (-46L), 123L, (-46L)}, longArray0);
      assertEquals(8, longArray0.length);
      assertTrue(boolean0);
      
      char[] charArray0 = ArrayUtils.clone((char[]) null);
      assertNull(charArray0);
  }

  @Test(timeout = 4000)
  public void test0039()  throws Throwable  {
      float[] floatArray0 = new float[3];
      floatArray0[0] = (-1385.0087F);
      boolean boolean0 = ArrayUtils.isNotEmpty(floatArray0);
      assertArrayEquals(new float[] {(-1385.0087F), 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(3, floatArray0.length);
      assertTrue(boolean0);
      
      int[] intArray0 = ArrayUtils.EMPTY_INT_ARRAY;
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertNotNull(intArray0);
      
      int[] intArray1 = ArrayUtils.subarray(intArray0, 1161, 3371);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertSame(intArray0, intArray1);
      assertSame(intArray1, intArray0);
      assertNotNull(intArray1);
      
      Boolean boolean1 = Boolean.TRUE;
      assertTrue(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      assertTrue(boolean1);
      
      Boolean[] booleanArray0 = new Boolean[7];
      booleanArray0[0] = boolean1;
      Boolean boolean2 = Boolean.TRUE;
      assertTrue(boolean2.equals((Object)boolean0));
      assertNotNull(boolean2);
      assertTrue(boolean2);
      
      booleanArray0[1] = boolean2;
      booleanArray0[2] = boolean1;
      boolean boolean3 = ArrayUtils.isSameLength((byte[]) null, (byte[]) null);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3);
      
      short[] shortArray0 = new short[0];
      ArrayUtils.shift(shortArray0, (int) (byte) (-7), (-1042), (-1));
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray0.length);
      
      Short[] shortArray1 = new Short[0];
      Short[] shortArray2 = ArrayUtils.nullToEmpty(shortArray1);
      assertEquals(0, shortArray1.length);
      assertEquals(0, shortArray2.length);
      assertFalse(shortArray2.equals((Object)shortArray1));
      assertNotSame(shortArray1, shortArray2);
      assertNotSame(shortArray2, shortArray1);
      assertNotNull(shortArray2);
      
      byte[] byteArray0 = ArrayUtils.removeElements((byte[]) null, (byte[]) null);
      assertNull(byteArray0);
      
      try { 
        Byte.valueOf("");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test0040()  throws Throwable  {
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) (byte) (-39);
      floatArray0[1] = (float) (byte) (-39);
      floatArray0[2] = 3732.878F;
      floatArray0[3] = (-2005.7074F);
      floatArray0[4] = (float) (byte) (-39);
      floatArray0[5] = 3424.91F;
      floatArray0[6] = (-2005.7074F);
      int int0 = ArrayUtils.lastIndexOf(floatArray0, 3732.878F, 2);
      assertArrayEquals(new float[] {(-39.0F), (-39.0F), 3732.878F, (-2005.7074F), (-39.0F), 3424.91F, (-2005.7074F)}, floatArray0, 0.01F);
      assertEquals(7, floatArray0.length);
      assertEquals(2, int0);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-3132.52324031);
      doubleArray0[1] = (double) (-1672.5F);
      doubleArray0[2] = (double) (-2005.7074F);
      double[] doubleArray1 = ArrayUtils.insert(2, doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {(-3132.52324031), (-1672.5), (-2005.7073974609375)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-3132.52324031), (-1672.5), (-3132.52324031), (-1672.5), (-2005.7073974609375), (-2005.7073974609375)}, doubleArray1, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      
      int[] intArray0 = new int[8];
      intArray0[0] = 2;
      intArray0[1] = 2;
      intArray0[2] = (-4122);
      intArray0[3] = (int) (short)2;
      intArray0[4] = (int) (byte)78;
      intArray0[5] = (int) (byte) (-39);
      intArray0[6] = (int) (byte) (-39);
      intArray0[7] = (-39);
      int[] intArray1 = ArrayUtils.removeElement(intArray0, 2);
      assertArrayEquals(new int[] {2, (-4122), 2, 78, (-39), (-39), (-39)}, intArray1);
      assertArrayEquals(new int[] {2, 2, (-4122), 2, 78, (-39), (-39), (-39)}, intArray0);
      assertEquals(7, intArray1.length);
      assertEquals(8, intArray0.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
      assertNotNull(intArray1);
      
      int[] intArray2 = new int[1];
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
      
      intArray2[0] = 2;
      float[] floatArray1 = ArrayUtils.removeAll(floatArray0, intArray2);
      assertArrayEquals(new float[] {(-39.0F), (-39.0F), 3732.878F, (-2005.7074F), (-39.0F), 3424.91F, (-2005.7074F)}, floatArray0, 0.01F);
      assertArrayEquals(new int[] {2}, intArray2);
      assertArrayEquals(new float[] {(-39.0F), (-39.0F), (-2005.7074F), (-39.0F), 3424.91F, (-2005.7074F)}, floatArray1, 0.01F);
      assertEquals(7, floatArray0.length);
      assertEquals(1, intArray2.length);
      assertEquals(6, floatArray1.length);
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(intArray2, intArray0);
      assertNotSame(intArray2, intArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      
      double[] doubleArray2 = ArrayUtils.insert((-1), doubleArray1, (double[]) null);
      assertArrayEquals(new double[] {(-3132.52324031), (-1672.5), (-2005.7073974609375)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-3132.52324031), (-1672.5), (-3132.52324031), (-1672.5), (-2005.7073974609375), (-2005.7073974609375)}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {(-3132.52324031), (-1672.5), (-3132.52324031), (-1672.5), (-2005.7073974609375), (-2005.7073974609375)}, doubleArray1, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(6, doubleArray2.length);
      assertEquals(6, doubleArray1.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotNull(doubleArray2);
  }

  @Test(timeout = 4000)
  public void test0041()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)17;
      byteArray0[1] = (byte)0;
      Long long0 = new Long((-2880L));
      assertNotNull(long0);
      assertEquals((-2880L), (long)long0);
      
      Long long1 = new Long(0L);
      assertFalse(long1.equals((Object)long0));
      assertNotNull(long1);
      assertEquals(0L, (long)long1);
      
      Long long2 = new Long((-2880L));
      assertTrue(long2.equals((Object)long0));
      assertFalse(long2.equals((Object)long1));
      assertNotNull(long2);
      assertEquals((-2880L), (long)long2);
      
      double[] doubleArray0 = new double[8];
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) 0L;
      floatArray0[1] = (float) (byte)17;
      floatArray0[2] = (float) (byte)17;
      floatArray0[3] = (float) 0L;
      floatArray0[4] = (float) (-2880L);
      floatArray0[5] = (float) (byte)17;
      floatArray0[6] = (float) (-2880L);
      floatArray0[7] = (float) (byte)0;
      floatArray0[8] = 1.0F;
      int int0 = ArrayUtils.lastIndexOf(floatArray0, (float) (-2880L), 3508);
      assertArrayEquals(new float[] {0.0F, 17.0F, 17.0F, 0.0F, (-2880.0F), 17.0F, (-2880.0F), 0.0F, 1.0F}, floatArray0, 0.01F);
      assertEquals(9, floatArray0.length);
      assertEquals(6, int0);
      
      double[] doubleArray1 = ArrayUtils.insert(6, doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(16, doubleArray1.length);
      assertEquals(8, doubleArray0.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotNull(doubleArray1);
      
      int[] intArray0 = new int[5];
      intArray0[0] = (int) (byte)0;
      intArray0[1] = 76;
      intArray0[2] = (int) (byte)78;
      intArray0[3] = (int) (byte)17;
      intArray0[4] = (int) (byte)17;
      int[] intArray1 = ArrayUtils.removeElement(intArray0, (int) (byte)0);
      assertArrayEquals(new int[] {0, 76, 78, 17, 17}, intArray0);
      assertArrayEquals(new int[] {76, 78, 17, 17}, intArray1);
      assertEquals(5, intArray0.length);
      assertEquals(4, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
  }

  @Test(timeout = 4000)
  public void test0042()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = 196;
      int[] intArray1 = ArrayUtils.subarray(intArray0, 0, 0);
      assertArrayEquals(new int[] {196, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(8, intArray0.length);
      assertEquals(0, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      
      boolean boolean0 = ArrayUtils.contains((double[]) null, (double) 196);
      assertFalse(boolean0);
      
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      booleanArray0[6] = false;
      booleanArray0[7] = false;
      boolean[] booleanArray1 = ArrayUtils.insert(0, booleanArray0, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false, false}, booleanArray0));
      assertEquals(8, booleanArray0.length);
      assertEquals(16, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
  }

  @Test(timeout = 4000)
  public void test0043()  throws Throwable  {
      Byte byte0 = new Byte((byte)99);
      assertNotNull(byte0);
      assertEquals((byte)99, (byte)byte0);
      
      Byte byte1 = new Byte((byte)89);
      assertFalse(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      assertEquals((byte)89, (byte)byte1);
      
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      ArrayUtils.reverse(booleanArray0, (-2637), 3);
      assertTrue(Arrays.equals(new boolean[] {false, true, false, true, true, true}, booleanArray0));
      assertEquals(6, booleanArray0.length);
      
      double[] doubleArray0 = ArrayUtils.removeElements((double[]) null, (double[]) null);
      assertNull(doubleArray0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((double[]) null, (double) (byte)99, (-3154));
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertNotNull(bitSet0);
      
      int[] intArray0 = new int[5];
      intArray0[0] = (-3154);
      intArray0[1] = (int) (byte)99;
      intArray0[2] = 3;
      intArray0[3] = (-1);
      intArray0[4] = (int) (byte)99;
      int int0 = ArrayUtils.lastIndexOf(intArray0, 99, 3);
      assertArrayEquals(new int[] {(-3154), 99, 3, (-1), 99}, intArray0);
      assertEquals(5, intArray0.length);
      assertEquals(1, int0);
      
      short[] shortArray0 = new short[0];
      int int1 = ArrayUtils.indexOf(shortArray0, (short)42);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray0.length);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test0044()  throws Throwable  {
      short[] shortArray0 = new short[2];
      short short0 = (short)2;
      shortArray0[0] = (short)2;
      short[] shortArray1 = ArrayUtils.removeAllOccurences(shortArray0, (short)0);
      assertArrayEquals(new short[] {(short)2, (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)2}, shortArray1);
      assertEquals(2, shortArray0.length);
      assertEquals(1, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      
      long[] longArray0 = new long[4];
      longArray0[0] = (long) 637;
      longArray0[1] = (long) (short)2;
      longArray0[3] = (long) (short)2;
      ArrayUtils.shift(longArray0, (int) (short)2, 1427, (int) (short)2);
      assertArrayEquals(new long[] {637L, 2L, 0L, 2L}, longArray0);
      assertEquals(4, longArray0.length);
      
      Short[] shortArray2 = new Short[7];
      shortArray2[0] = (Short) (short)2;
      shortArray2[1] = (Short) (short)2;
      shortArray2[2] = (Short) (short)2;
      short short1 = (short)83;
      Short short2 = new Short((short)83);
      assertTrue(short2.equals((Object)short1));
      assertFalse(short2.equals((Object)short0));
      assertNotNull(short2);
      assertEquals((short)83, (short)short2);
      
      shortArray2[3] = short2;
      shortArray2[4] = (Short) (short)2;
      shortArray2[5] = (Short) (short)2;
      shortArray2[6] = (Short) (short)2;
      Comparator<Short> comparator0 = (Comparator<Short>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0, 0).when(comparator0).compare(anyShort() , anyShort());
      boolean boolean0 = ArrayUtils.isSorted(shortArray2, comparator0);
      assertEquals(7, shortArray2.length);
      assertTrue(boolean0);
      
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) 2L;
      floatArray0[1] = (float) short0;
      floatArray0[2] = (float) short1;
      floatArray0[3] = (float) short0;
      floatArray0[4] = (float) (short)83;
      floatArray0[5] = (float) short0;
      floatArray0[6] = (float) short1;
      floatArray0[7] = (float) 2;
      floatArray0[8] = (float) 2L;
      float[] floatArray1 = ArrayUtils.insert(2, floatArray0, floatArray0);
      assertArrayEquals(new float[] {2.0F, 2.0F, 83.0F, 2.0F, 83.0F, 2.0F, 83.0F, 2.0F, 2.0F}, floatArray0, 0.01F);
      assertEquals(9, floatArray0.length);
      assertEquals(18, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
  }

  @Test(timeout = 4000)
  public void test0045()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[1] = 127;
      boolean boolean0 = ArrayUtils.isSorted(intArray0);
      assertArrayEquals(new int[] {0, 127}, intArray0);
      assertEquals(2, intArray0.length);
      assertTrue(boolean0);
      
      long[] longArray0 = new long[3];
      longArray0[0] = (long) 0;
      longArray0[1] = (long) 0;
      longArray0[2] = (long) 0;
      long[] longArray1 = ArrayUtils.removeAllOccurrences(longArray0, (long) 0);
      assertArrayEquals(new long[] {0L, 0L, 0L}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertEquals(3, longArray0.length);
      assertEquals(0, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
      
      ArrayUtils.shift(longArray0, 127);
      assertArrayEquals(new long[] {0L, 0L, 0L}, longArray0);
      assertEquals(3, longArray0.length);
      assertFalse(longArray0.equals((Object)longArray1));
      assertNotSame(longArray0, longArray1);
      
      ArrayUtils.shift((double[]) null, 0);
      Double double0 = new Double((-5099.3446970701));
      assertNotNull(double0);
      assertEquals((-5099.3446970701), (double)double0, 0.01);
      
      Double double1 = new Double(0.0);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      assertEquals(0.0, (double)double1, 0.01);
      
      Double[] doubleArray0 = new Double[0];
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotNull(doubleArray1);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) 0;
      boolean boolean1 = ArrayUtils.contains(floatArray0, 1629.3763F);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertEquals(1, floatArray0.length);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      double[] doubleArray2 = ArrayUtils.nullToEmpty(doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(0, doubleArray2.length);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertSame(doubleArray2, doubleArray1);
      assertSame(doubleArray1, doubleArray2);
      assertNotNull(doubleArray2);
  }

  @Test(timeout = 4000)
  public void test0046()  throws Throwable  {
      Character character0 = Character.valueOf('g');
      assertNotNull(character0);
      assertEquals('g', (char)character0);
      
      Character character1 = Character.valueOf('g');
      assertNotNull(character1);
      assertEquals('g', (char)character1);
      
      Character character2 = Character.valueOf('g');
      assertNotNull(character2);
      assertEquals('g', (char)character2);
      
      char[] charArray0 = new char[5];
      charArray0[0] = 'g';
      charArray0[1] = 'g';
      charArray0[2] = 'g';
      ArrayUtils.shift(charArray0, 2, 2, (-565));
      assertArrayEquals(new char[] {'g', 'g', 'g', '\u0000', '\u0000'}, charArray0);
      assertEquals(5, charArray0.length);
      
      Float[] floatArray0 = new Float[5];
      Float float0 = new Float((-1565.66227));
      assertNotNull(float0);
      assertEquals((-1565.6622F), (float)float0, 0.01F);
      
      floatArray0[0] = float0;
      Float float1 = new Float((-345.728));
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertNotNull(float1);
      assertEquals((-345.728F), (float)float1, 0.01F);
      
      floatArray0[1] = float1;
      Float float2 = new Float((double) (-565));
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertNotNull(float2);
      assertEquals((-565.0F), (float)float2, 0.01F);
      
      floatArray0[2] = float2;
      Float float3 = new Float((-1565.66227));
      assertEquals((float)float3, (float)float0, 0.01F);
      assertNotEquals((float)float3, (float)float1, 0.01F);
      assertNotEquals((float)float3, (float)float2, 0.01F);
      assertNotNull(float3);
      assertEquals((-1565.6622F), (float)float3, 0.01F);
      
      floatArray0[3] = float3;
      Float float4 = new Float((float) floatArray0[1]);
      assertEquals(5, floatArray0.length);
      assertNotEquals((float)float4, (float)float0, 0.01F);
      assertNotEquals((float)float4, (float)float3, 0.01F);
      assertEquals((float)float4, (float)float1, 0.01F);
      assertNotEquals((float)float4, (float)float2, 0.01F);
      assertNotNull(float4);
      assertEquals((-345.728F), (float)float4, 0.01F);
      
      floatArray0[4] = float4;
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0, (-2187.0F));
      assertArrayEquals(new float[] {(-1565.6622F), (-345.728F), (-565.0F), (-1565.6622F), (-345.728F)}, floatArray1, 0.01F);
      assertEquals(5, floatArray1.length);
      assertEquals(5, floatArray0.length);
      assertNotNull(floatArray1);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)6;
      byteArray0[1] = (byte) (-30);
      byteArray0[2] = (byte) (-14);
      byteArray0[3] = (byte)93;
      byteArray0[4] = (byte) (-2);
      byteArray0[5] = (byte)14;
      byteArray0[6] = (byte)4;
      byteArray0[7] = (byte) (-43);
      byteArray0[8] = (byte) (-71);
      byte[] byteArray1 = ArrayUtils.removeAllOccurrences(byteArray0, (byte)37);
      assertArrayEquals(new byte[] {(byte)6, (byte) (-30), (byte) (-14), (byte)93, (byte) (-2), (byte)14, (byte)4, (byte) (-43), (byte) (-71)}, byteArray0);
      assertArrayEquals(new byte[] {(byte)6, (byte) (-30), (byte) (-14), (byte)93, (byte) (-2), (byte)14, (byte)4, (byte) (-43), (byte) (-71)}, byteArray1);
      assertEquals(9, byteArray0.length);
      assertEquals(9, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
  }

  @Test(timeout = 4000)
  public void test0047()  throws Throwable  {
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)0;
      short[] shortArray1 = ArrayUtils.nullToEmpty(shortArray0);
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)0}, shortArray1);
      assertEquals(1, shortArray0.length);
      assertEquals(1, shortArray1.length);
      assertSame(shortArray0, shortArray1);
      assertSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      
      int[] intArray0 = new int[8];
      intArray0[0] = (-448);
      intArray0[1] = (int) (short)0;
      intArray0[2] = (-448);
      intArray0[3] = (-448);
      intArray0[4] = 0;
      intArray0[5] = (int) (short)0;
      intArray0[6] = 0;
      intArray0[7] = 0;
      ArrayUtils.swap(intArray0, (-348), (-1358), (-348));
      assertArrayEquals(new int[] {(-448), 0, (-448), (-448), 0, 0, 0, 0}, intArray0);
      assertEquals(8, intArray0.length);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) 0;
      floatArray0[1] = (float) 0;
      floatArray0[2] = (float) (-348);
      float[] floatArray1 = ArrayUtils.removeElement(floatArray0, (-321.2508F));
      assertArrayEquals(new float[] {0.0F, 0.0F, (-348.0F)}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {0.0F, 0.0F, (-348.0F)}, floatArray0, 0.01F);
      assertEquals(3, floatArray1.length);
      assertEquals(3, floatArray0.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertNotNull(floatArray1);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (-348);
      doubleArray0[1] = (double) (short)0;
      doubleArray0[2] = (double) (-348.0F);
      doubleArray0[3] = 1.0;
      doubleArray0[4] = (double) (-348.0F);
      ArrayUtils.swap(doubleArray0, 192, 5, 97);
      assertArrayEquals(new double[] {(-348.0), 0.0, (-348.0), 1.0, (-348.0)}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      
      float[] floatArray2 = ArrayUtils.insert((int) (short)0, floatArray1, floatArray0);
      assertArrayEquals(new float[] {0.0F, 0.0F, (-348.0F)}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {0.0F, 0.0F, (-348.0F), 0.0F, 0.0F, (-348.0F)}, floatArray2, 0.01F);
      assertArrayEquals(new float[] {0.0F, 0.0F, (-348.0F)}, floatArray0, 0.01F);
      assertEquals(3, floatArray1.length);
      assertEquals(6, floatArray2.length);
      assertEquals(3, floatArray0.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertNotSame(floatArray1, floatArray2);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray2, floatArray0);
      assertNotSame(floatArray2, floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray0, floatArray2);
      assertNotNull(floatArray2);
  }

  @Test(timeout = 4000)
  public void test0048()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      short[] shortArray0 = new short[0];
      int int0 = ArrayUtils.indexOf(shortArray0, (short)1, (int) (short)1);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray0.length);
      assertEquals((-1), int0);
      
      int int1 = ArrayUtils.lastIndexOf(booleanArray0, false, 2585);
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray0));
      assertEquals(3, booleanArray0.length);
      assertFalse(int1 == int0);
      assertEquals(2, int1);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 2;
      doubleArray0[1] = 145.60993297266054;
      doubleArray0[2] = 145.60993297266054;
      doubleArray0[3] = (-753.999286031);
      doubleArray0[4] = (-753.999286031);
      doubleArray0[5] = 145.60993297266054;
      doubleArray0[6] = (double) 2585;
      int int2 = ArrayUtils.lastIndexOf(doubleArray0, (-753.999286031), 2);
      assertArrayEquals(new double[] {2.0, 145.60993297266054, 145.60993297266054, (-753.999286031), (-753.999286031), 145.60993297266054, 2585.0}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
      assertTrue(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals((-1), int2);
      
      Integer[] integerArray0 = new Integer[4];
      Integer integer0 = new Integer(1136);
      assertFalse(integer0.equals((Object)int2));
      assertFalse(integer0.equals((Object)int0));
      assertFalse(integer0.equals((Object)int1));
      assertNotNull(integer0);
      assertEquals(1136, (int)integer0);
      
      Integer integer1 = Integer.getInteger("", integer0);
      assertFalse(integer1.equals((Object)int1));
      assertFalse(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)int2));
      assertFalse(integer0.equals((Object)int2));
      assertFalse(integer0.equals((Object)int0));
      assertFalse(integer0.equals((Object)int1));
      assertNotNull(integer1);
      assertEquals(1136, (int)integer1);
      
      integerArray0[0] = integer1;
      Integer integer2 = new Integer(378);
      assertFalse(integer2.equals((Object)int1));
      assertFalse(integer2.equals((Object)int2));
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)int0));
      assertNotNull(integer2);
      assertEquals(378, (int)integer2);
      
      integerArray0[1] = integer2;
      Integer integer3 = new Integer(2);
      assertFalse(integer3.equals((Object)int2));
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer0));
      assertTrue(integer3.equals((Object)int1));
      assertFalse(integer3.equals((Object)int0));
      assertNotNull(integer3);
      assertEquals(2, (int)integer3);
      
      integerArray0[2] = integer3;
      Integer integer4 = new Integer((int) integerArray0[1]);
      assertEquals(4, integerArray0.length);
      assertFalse(integer4.equals((Object)integer3));
      assertFalse(integer4.equals((Object)int0));
      assertFalse(integer4.equals((Object)int2));
      assertFalse(integer4.equals((Object)int1));
      assertFalse(integer4.equals((Object)integer1));
      assertFalse(integer4.equals((Object)integer0));
      assertTrue(integer4.equals((Object)integer2));
      assertNotNull(integer4);
      assertEquals(378, (int)integer4);
      
      integerArray0[3] = integer4;
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0);
      assertArrayEquals(new int[] {1136, 378, 2, 378}, intArray0);
      assertEquals(4, intArray0.length);
      assertEquals(4, integerArray0.length);
      assertNotNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test0049()  throws Throwable  {
      char[] charArray0 = new char[0];
      ArrayUtils.shift(charArray0, (-1234), (-1234), (-1234));
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-69);
      byteArray0[2] = (byte)116;
      byteArray0[3] = (byte)16;
      byte[] byteArray1 = new byte[3];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte) (-69);
      byteArray1[1] = (byte) (-69);
      byteArray1[2] = (byte)0;
      byte[] byteArray2 = ArrayUtils.addAll(byteArray0, byteArray1);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-69), (byte)116, (byte)16}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-69), (byte) (-69), (byte)0}, byteArray1);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-69), (byte)116, (byte)16, (byte) (-69), (byte) (-69), (byte)0}, byteArray2);
      assertEquals(4, byteArray0.length);
      assertEquals(3, byteArray1.length);
      assertEquals(7, byteArray2.length);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray2, byteArray0);
      assertNotNull(byteArray2);
  }

  @Test(timeout = 4000)
  public void test0050()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      long[] longArray0 = new long[0];
      ArrayUtils.swap(longArray0, 1383, 1383);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      
      byte[] byteArray0 = new byte[2];
      byte byte0 = (byte)0;
      byteArray0[0] = (byte)0;
      MutableInt mutableInt0 = new MutableInt(1383);
      assertEquals(1383, (int)mutableInt0.toInteger());
      assertEquals((byte)103, mutableInt0.byteValue());
      assertEquals(1383, (int)mutableInt0.getValue());
      assertEquals(1383.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(1383L, mutableInt0.longValue());
      assertEquals("1383", mutableInt0.toString());
      assertEquals(1383.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals((short)1383, mutableInt0.shortValue());
      assertEquals(1383, mutableInt0.intValue());
      assertNotNull(mutableInt0);
      
      boolean boolean0 = ArrayUtils.isSorted(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray0));
      assertEquals(3, booleanArray0.length);
      assertTrue(boolean0);
      
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short) (byte)0;
      shortArray0[1] = (short) (byte)0;
      shortArray0[2] = (short) (byte)0;
      shortArray0[3] = (short) (byte)0;
      shortArray0[4] = (short)3555;
      char[] charArray0 = new char[5];
      charArray0[0] = '/';
      charArray0[1] = '*';
      charArray0[2] = 'M';
      charArray0[3] = ']';
      charArray0[4] = '[';
      ArrayUtils.shift(charArray0, (int) (short)0, (int) (short)0, (-2233));
      assertArrayEquals(new char[] {'/', '*', 'M', ']', '['}, charArray0);
      assertEquals(5, charArray0.length);
      
      int int0 = ArrayUtils.lastIndexOf(charArray0, '\'', 2449);
      assertArrayEquals(new char[] {'/', '*', 'M', ']', '['}, charArray0);
      assertEquals(5, charArray0.length);
      assertEquals((-1), int0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.add((double[]) null, 1217, 2.0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1217, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0051()  throws Throwable  {
      Byte[] byteArray0 = new Byte[2];
      byte byte0 = (byte)51;
      Byte byte1 = new Byte((byte)51);
      assertTrue(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      assertEquals((byte)51, (byte)byte1);
      
      byteArray0[0] = byte1;
      Byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0);
      assertEquals(2, byteArray0.length);
      assertEquals(2, byteArray1.length);
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      
      ArrayUtils.shift((Object[]) byteArray0, 0, (int) (byte)51, (-1916));
      assertEquals(2, byteArray0.length);
      assertSame(byteArray0, byteArray1);
      
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short) (byte)51;
      shortArray0[1] = (short) byte0;
      shortArray0[2] = (short) byte0;
      short[] shortArray1 = ArrayUtils.removeElements(shortArray0, shortArray0);
      assertArrayEquals(new short[] {(short)51, (short)51, (short)51}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertEquals(3, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      
      long[] longArray0 = new long[5];
      longArray0[0] = (long) 0;
      longArray0[1] = (long) (-1916);
      longArray0[2] = (long) (-1916);
      longArray0[3] = (long) (-1916);
      longArray0[4] = (long) (byte)51;
      long[] longArray1 = ArrayUtils.subarray(longArray0, (int) (byte)51, (int) (byte)51);
      assertArrayEquals(new long[] {}, longArray1);
      assertArrayEquals(new long[] {0L, (-1916L), (-1916L), (-1916L), 51L}, longArray0);
      assertEquals(0, longArray1.length);
      assertEquals(5, longArray0.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray0, longArray1);
      assertNotNull(longArray1);
      
      ArrayUtils.reverse((double[]) null, 0, (int) (short)51);
      Integer[] integerArray0 = new Integer[8];
      Integer integer0 = new Integer((short)51);
      assertNotNull(integer0);
      assertEquals(51, (int)integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((int) integerArray0[0]);
      assertEquals(8, integerArray0.length);
      assertTrue(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(51, (int)integer1);
      
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(1326);
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertNotNull(integer2);
      assertEquals(1326, (int)integer2);
      
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(789);
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer1));
      assertNotNull(integer3);
      assertEquals(789, (int)integer3);
      
      integerArray0[3] = integer3;
      Integer integer4 = new Integer((short)51);
      assertTrue(integer4.equals((Object)integer0));
      assertFalse(integer4.equals((Object)integer2));
      assertTrue(integer4.equals((Object)integer1));
      assertFalse(integer4.equals((Object)integer3));
      assertNotNull(integer4);
      assertEquals(51, (int)integer4);
      
      integerArray0[4] = integer4;
      Integer integer5 = new Integer(322);
      assertFalse(integer5.equals((Object)integer0));
      assertFalse(integer5.equals((Object)integer3));
      assertFalse(integer5.equals((Object)integer4));
      assertFalse(integer5.equals((Object)integer2));
      assertFalse(integer5.equals((Object)integer1));
      assertNotNull(integer5);
      assertEquals(322, (int)integer5);
      
      integerArray0[5] = integer5;
      Integer integer6 = new Integer((short)51);
      assertTrue(integer6.equals((Object)integer1));
      assertTrue(integer6.equals((Object)integer4));
      assertFalse(integer6.equals((Object)integer3));
      assertFalse(integer6.equals((Object)integer5));
      assertTrue(integer6.equals((Object)integer0));
      assertFalse(integer6.equals((Object)integer2));
      assertNotNull(integer6);
      assertEquals(51, (int)integer6);
      
      integerArray0[6] = integer6;
      Integer integer7 = new Integer(9);
      assertFalse(integer7.equals((Object)integer3));
      assertFalse(integer7.equals((Object)integer0));
      assertFalse(integer7.equals((Object)integer2));
      assertFalse(integer7.equals((Object)integer6));
      assertFalse(integer7.equals((Object)integer1));
      assertFalse(integer7.equals((Object)integer5));
      assertFalse(integer7.equals((Object)integer4));
      assertNotNull(integer7);
      assertEquals(9, (int)integer7);
      
      integerArray0[7] = integer7;
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0);
      assertArrayEquals(new int[] {51, 51, 1326, 789, 51, 322, 51, 9}, intArray0);
      assertEquals(8, integerArray0.length);
      assertEquals(8, intArray0.length);
      assertNotNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test0052()  throws Throwable  {
      float[] floatArray0 = new float[2];
      floatArray0[0] = (-1733.7683F);
      long[] longArray0 = new long[3];
      longArray0[0] = (long) 6;
      longArray0[1] = (long) 6;
      longArray0[2] = 1L;
      ArrayUtils.shift(longArray0, 6, 7, 6);
      assertArrayEquals(new long[] {6L, 6L, 1L}, longArray0);
      assertEquals(3, longArray0.length);
      
      boolean boolean0 = ArrayUtils.isEmpty((int[]) null);
      assertTrue(boolean0);
      
      short[] shortArray0 = new short[0];
      short[] shortArray1 = ArrayUtils.addAll(shortArray0, shortArray0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
  }

  @Test(timeout = 4000)
  public void test0053()  throws Throwable  {
      float[] floatArray0 = new float[8];
      floatArray0[0] = (-2271.21F);
      floatArray0[1] = 0.0F;
      floatArray0[2] = 216.6336F;
      long[] longArray0 = ArrayUtils.removeAllOccurrences((long[]) null, (-2266L));
      assertNull(longArray0);
      
      ArrayUtils.shift((long[]) null, 1425);
      ArrayUtils.shift((double[]) null, 1425);
      Short short0 = new Short((short) (-1892));
      assertNotNull(short0);
      assertEquals((short) (-1892), (short)short0);
      
      Short short1 = new Short((short) (-1357));
      assertFalse(short1.equals((Object)short0));
      assertNotNull(short1);
      assertEquals((short) (-1357), (short)short1);
      
      Short short2 = new Short((short) (-1357));
      assertTrue(short2.equals((Object)short1));
      assertFalse(short2.equals((Object)short0));
      assertNotNull(short2);
      assertEquals((short) (-1357), (short)short2);
      
      Short short3 = new Short((short)101);
      assertFalse(short3.equals((Object)short2));
      assertFalse(short3.equals((Object)short1));
      assertFalse(short3.equals((Object)short0));
      assertNotNull(short3);
      assertEquals((short)101, (short)short3);
      
      Short short4 = new Short((short)1385);
      assertFalse(short4.equals((Object)short1));
      assertFalse(short4.equals((Object)short0));
      assertFalse(short4.equals((Object)short2));
      assertFalse(short4.equals((Object)short3));
      assertNotNull(short4);
      assertEquals((short)1385, (short)short4);
      
      Short[] shortArray0 = new Short[9];
      shortArray0[0] = short3;
      shortArray0[1] = short0;
      shortArray0[2] = short4;
      shortArray0[3] = short3;
      shortArray0[4] = short2;
      shortArray0[5] = short3;
      shortArray0[6] = short1;
      shortArray0[7] = short0;
      shortArray0[8] = short2;
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0, (short) shortArray0[1]);
      assertArrayEquals(new short[] {(short)101, (short) (-1892), (short)1385, (short)101, (short) (-1357), (short)101, (short) (-1357), (short) (-1892), (short) (-1357)}, shortArray1);
      assertEquals(9, shortArray1.length);
      assertEquals(9, shortArray0.length);
      assertNotNull(shortArray1);
  }

  @Test(timeout = 4000)
  public void test0054()  throws Throwable  {
      Byte[] byteArray0 = new Byte[2];
      Byte byte0 = new Byte((byte)51);
      assertNotNull(byte0);
      assertEquals((byte)51, (byte)byte0);
      
      byteArray0[0] = byte0;
      Byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0);
      assertEquals(2, byteArray0.length);
      assertEquals(2, byteArray1.length);
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      
      boolean boolean0 = ArrayUtils.contains((short[]) null, (short)202);
      assertFalse(boolean0);
      
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = false;
      booleanArray0[6] = false;
      int int0 = ArrayUtils.indexOf((short[]) null, (short)826, 68);
      assertEquals((-1), int0);
      
      int int1 = ArrayUtils.lastIndexOf(booleanArray0, false, 0);
      assertTrue(Arrays.equals(new boolean[] {false, true, false, true, true, false, false, false, false}, booleanArray0));
      assertEquals(9, booleanArray0.length);
      assertFalse(int1 == int0);
      assertEquals(0, int1);
  }

  @Test(timeout = 4000)
  public void test0055()  throws Throwable  {
      float[] floatArray0 = new float[3];
      floatArray0[0] = (-1385.0087F);
      boolean boolean0 = ArrayUtils.isNotEmpty(floatArray0);
      assertArrayEquals(new float[] {(-1385.0087F), 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(3, floatArray0.length);
      assertTrue(boolean0);
      
      int[] intArray0 = ArrayUtils.EMPTY_INT_ARRAY;
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertNotNull(intArray0);
      
      int[] intArray1 = ArrayUtils.subarray(intArray0, (-1), 3371);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertSame(intArray0, intArray1);
      assertSame(intArray1, intArray0);
      assertNotNull(intArray1);
      
      Boolean boolean1 = Boolean.TRUE;
      assertTrue(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      assertTrue(boolean1);
      
      Boolean[] booleanArray0 = new Boolean[7];
      booleanArray0[0] = boolean1;
      Boolean boolean2 = Boolean.TRUE;
      assertTrue(boolean2.equals((Object)boolean0));
      assertNotNull(boolean2);
      assertTrue(boolean2);
      
      booleanArray0[1] = boolean2;
      booleanArray0[2] = boolean1;
      booleanArray0[3] = boolean1;
      booleanArray0[4] = boolean1;
      booleanArray0[5] = boolean1;
      booleanArray0[6] = boolean1;
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true, true, true}, booleanArray1));
      assertEquals(7, booleanArray0.length);
      assertEquals(7, booleanArray1.length);
      assertNotNull(booleanArray1);
      
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short)7;
      shortArray0[1] = (short)2;
      shortArray0[2] = (short)76;
      int int0 = ArrayUtils.indexOf(shortArray0, (short)7, (-2378));
      assertArrayEquals(new short[] {(short)7, (short)2, (short)76}, shortArray0);
      assertEquals(3, shortArray0.length);
      assertEquals(0, int0);
      
      int int1 = ArrayUtils.lastIndexOf(booleanArray1, (boolean) boolean1, (int) (short)76);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true, true, true}, booleanArray1));
      assertEquals(7, booleanArray0.length);
      assertEquals(7, booleanArray1.length);
      assertFalse(int1 == int0);
      assertTrue(boolean1.equals((Object)boolean0));
      assertEquals(6, int1);
  }

  @Test(timeout = 4000)
  public void test0056()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-1.0);
      doubleArray0[1] = (-67.5);
      doubleArray0[2] = 119.0;
      doubleArray0[3] = 3062.966;
      doubleArray0[4] = 659.3892114866858;
      doubleArray0[5] = 1.5;
      doubleArray0[6] = (-557.84485119259);
      doubleArray0[7] = 478.837;
      doubleArray0[8] = 1.0;
      double[] doubleArray1 = ArrayUtils.remove(doubleArray0, 8);
      assertArrayEquals(new double[] {(-1.0), (-67.5), 119.0, 3062.966, 659.3892114866858, 1.5, (-557.84485119259), 478.837, 1.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-1.0), (-67.5), 119.0, 3062.966, 659.3892114866858, 1.5, (-557.84485119259), 478.837}, doubleArray1, 0.01);
      assertEquals(9, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      
      org.evosuite.runtime.Random.setNextRandom(8);
  }

  @Test(timeout = 4000)
  public void test0057()  throws Throwable  {
      Byte[] byteArray0 = new Byte[2];
      Byte byte0 = new Byte((byte)51);
      assertNotNull(byte0);
      assertEquals((byte)51, (byte)byte0);
      
      byteArray0[0] = byte0;
      Byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0);
      assertEquals(2, byteArray0.length);
      assertEquals(2, byteArray1.length);
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      
      boolean boolean0 = ArrayUtils.contains((short[]) null, (short)202);
      assertFalse(boolean0);
      
      Long long0 = new Long(5706L);
      assertNotNull(long0);
      assertEquals(5706L, (long)long0);
      
      Long long1 = new Long((-2194L));
      assertFalse(long1.equals((Object)long0));
      assertNotNull(long1);
      assertEquals((-2194L), (long)long1);
      
      Class<Long[]> class0 = Long[].class;
      Long[] longArray0 = new Long[1];
      longArray0[0] = long0;
      Long[] longArray1 = ArrayUtils.nullToEmpty(longArray0, class0);
      assertEquals(1, longArray0.length);
      assertEquals(1, longArray1.length);
      assertSame(longArray0, longArray1);
      assertSame(longArray1, longArray0);
      assertNotNull(longArray1);
  }

  @Test(timeout = 4000)
  public void test0058()  throws Throwable  {
      BitSet bitSet0 = ArrayUtils.indexesOf((double[]) null, (-421.836917), 406);
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertNotNull(bitSet0);
      
      Long[] longArray0 = new Long[4];
      Long long0 = new Long(406);
      assertNotNull(long0);
      assertEquals(406L, (long)long0);
      
      longArray0[0] = long0;
      Long long1 = Long.valueOf((long) longArray0[0]);
      assertEquals(4, longArray0.length);
      assertTrue(long1.equals((Object)long0));
      assertNotNull(long1);
      assertEquals(406L, (long)long1);
      
      longArray0[1] = long1;
      Long long2 = new Long(620L);
      assertFalse(long2.equals((Object)long1));
      assertFalse(long2.equals((Object)long0));
      assertNotNull(long2);
      assertEquals(620L, (long)long2);
      
      longArray0[2] = long2;
      Long long3 = new Long((-2194L));
      assertFalse(long3.equals((Object)long2));
      assertFalse(long3.equals((Object)long1));
      assertFalse(long3.equals((Object)long0));
      assertNotNull(long3);
      assertEquals((-2194L), (long)long3);
      
      longArray0[3] = long3;
      Class<Long[]> class0 = Long[].class;
      Long[] longArray1 = ArrayUtils.nullToEmpty(longArray0, class0);
      assertEquals(4, longArray0.length);
      assertEquals(4, longArray1.length);
      assertSame(longArray0, longArray1);
      assertSame(longArray1, longArray0);
      assertNotNull(longArray1);
  }

  @Test(timeout = 4000)
  public void test0059()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = 7;
      intArray0[1] = (-91);
      float[] floatArray0 = new float[5];
      floatArray0[0] = (-1.0F);
      floatArray0[1] = (-1.0F);
      floatArray0[2] = (float) (-91);
      floatArray0[3] = (-1.0F);
      floatArray0[4] = (-1.0F);
      boolean boolean0 = ArrayUtils.isEmpty(floatArray0);
      assertArrayEquals(new float[] {(-1.0F), (-1.0F), (-91.0F), (-1.0F), (-1.0F)}, floatArray0, 0.01F);
      assertEquals(5, floatArray0.length);
      assertFalse(boolean0);
      
      boolean boolean1 = ArrayUtils.isSameLength(floatArray0, floatArray0);
      assertArrayEquals(new float[] {(-1.0F), (-1.0F), (-91.0F), (-1.0F), (-1.0F)}, floatArray0, 0.01F);
      assertEquals(5, floatArray0.length);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = false;
      booleanArray0[5] = true;
      booleanArray0[6] = true;
      booleanArray0[7] = true;
      BitSet bitSet0 = ArrayUtils.indexesOf(booleanArray0, true, 7);
      assertFalse(bitSet0.isEmpty());
      assertEquals(8, bitSet0.length());
      assertEquals(1, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals("{7}", bitSet0.toString());
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, false, true, true, true}, booleanArray0));
      assertEquals(8, booleanArray0.length);
      assertNotNull(bitSet0);
  }

  @Test(timeout = 4000)
  public void test0060()  throws Throwable  {
      ArrayUtils.swap((int[]) null, (-2147184749), (-2147184749), (-2147184749));
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      LongStream longStream0 = mockRandom0.longs();
      assertNotNull(longStream0);
      
      double double0 = mockRandom0.nextGaussian();
      assertEquals(0.0, double0, 0.01);
      
      double[] doubleArray0 = new double[5];
      mockRandom0.setSeed(1L);
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (double) (-2147184749);
      doubleArray0[2] = (double) (-2147184749);
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (double) (-2147184749);
      double[] doubleArray1 = ArrayUtils.removeAllOccurences(doubleArray0, (-2.147184749E9));
      assertArrayEquals(new double[] {0.0, (-2.147184749E9), (-2.147184749E9), 0.0, (-2.147184749E9)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(5, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      
      double[] doubleArray2 = ArrayUtils.removeElement(doubleArray1, 0.0);
      assertArrayEquals(new double[] {0.0, (-2.147184749E9), (-2.147184749E9), 0.0, (-2.147184749E9)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray2, 0.01);
      assertEquals(5, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertEquals(1, doubleArray2.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotNull(doubleArray2);
      
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      ArrayUtils.swap(booleanArray0, 0, (-2147184749));
      assertTrue(Arrays.equals(new boolean[] {false, true, false, false, false}, booleanArray0));
      assertEquals(5, booleanArray0.length);
      
      Integer integer0 = new Integer((-2147184749));
      assertNotNull(integer0);
      assertEquals((-2147184749), (int)integer0);
      
      Integer[] integerArray0 = ArrayUtils.add((Integer[]) null, 0, integer0);
      assertEquals(1, integerArray0.length);
      assertNotNull(integerArray0);
  }

  @Test(timeout = 4000)
  public void test0061()  throws Throwable  {
      Character[] characterArray0 = new Character[2];
      Character character0 = Character.valueOf('U');
      assertNotNull(character0);
      assertEquals('U', (char)character0);
      
      characterArray0[0] = character0;
      Character character1 = new Character('K');
      assertFalse(character1.equals((Object)character0));
      assertNotNull(character1);
      assertEquals('K', (char)character1);
      
      characterArray0[1] = character1;
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0);
      assertArrayEquals(new char[] {'U', 'K'}, charArray0);
      assertEquals(2, characterArray0.length);
      assertEquals(2, charArray0.length);
      assertNotNull(charArray0);
      
      Object[] objectArray0 = new Object[0];
      String[] stringArray0 = ArrayUtils.toStringArray(objectArray0, "java.lang.String");
      assertEquals(0, objectArray0.length);
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      long[] longArray0 = new long[4];
      longArray0[0] = 2084L;
      longArray0[1] = (long) 'U';
      longArray0[2] = (long) (char)character1;
      longArray0[3] = (long) 'K';
      Long[] longArray1 = ArrayUtils.toObject(longArray0);
      assertArrayEquals(new long[] {2084L, 85L, 75L, 75L}, longArray0);
      assertEquals(4, longArray0.length);
      assertEquals(4, longArray1.length);
      assertNotNull(longArray1);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)9;
      byteArray0[1] = (byte)119;
      BitSet bitSet0 = ArrayUtils.indexesOf(byteArray0, (byte)119);
      assertFalse(bitSet0.isEmpty());
      assertEquals(1, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals(2, bitSet0.length());
      assertEquals("{1}", bitSet0.toString());
      assertArrayEquals(new byte[] {(byte)9, (byte)119}, byteArray0);
      assertEquals(2, byteArray0.length);
      assertNotNull(bitSet0);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 75L;
      doubleArray0[1] = (double) 85L;
      doubleArray0[2] = (double) 75L;
      doubleArray0[3] = (double) 2084L;
      doubleArray0[4] = (double) 2084L;
      doubleArray0[5] = (double) (byte)9;
      doubleArray0[6] = 1141.108484;
      doubleArray0[7] = (double) (byte)119;
      double[] doubleArray1 = ArrayUtils.removeElement(doubleArray0, 75.0);
      assertArrayEquals(new double[] {75.0, 85.0, 75.0, 2084.0, 2084.0, 9.0, 1141.108484, 119.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {85.0, 75.0, 2084.0, 2084.0, 9.0, 1141.108484, 119.0}, doubleArray1, 0.01);
      assertEquals(8, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
  }

  @Test(timeout = 4000)
  public void test0062()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[1] = 'W';
      charArray0[2] = 'M';
      String[] stringArray0 = new String[1];
      stringArray0[0] = "org.apache.commons.lang3.builder.ToStringStyle$DefaultToStringStyle";
      String[] stringArray1 = ArrayUtils.addFirst(stringArray0, "org.apache.commons.lang3.builder.ToStringStyle$DefaultToStringStyle");
      assertEquals(1, stringArray0.length);
      assertEquals(2, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertNotNull(stringArray1);
      
      int[] intArray0 = new int[2];
      intArray0[0] = (-395);
      intArray0[1] = (int) 'M';
      int int0 = ArrayUtils.lastIndexOf(intArray0, (-395));
      assertArrayEquals(new int[] {(-395), 77}, intArray0);
      assertEquals(2, intArray0.length);
      assertEquals(0, int0);
      
      boolean boolean0 = ArrayUtils.isEmpty((double[]) null);
      assertTrue(boolean0);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (-36L);
      longArray0[1] = (long) (-395);
      int int1 = ArrayUtils.lastIndexOf(longArray0, 206L);
      assertArrayEquals(new long[] {(-36L), (-395L)}, longArray0);
      assertEquals(2, longArray0.length);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) 'W';
      int int2 = ArrayUtils.indexOf(floatArray0, 1182.0F);
      assertArrayEquals(new float[] {87.0F}, floatArray0, 0.01F);
      assertEquals(1, floatArray0.length);
      assertTrue(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals((-1), int2);
      
      Integer[] integerArray0 = new Integer[3];
      integerArray0[0] = (Integer) 77;
      integerArray0[1] = (Integer) (-395);
      integerArray0[2] = (Integer) 77;
      // Undeclared exception!
      try { 
        ArrayUtils.insert(77, integerArray0, integerArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 77, Length: 3
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0063()  throws Throwable  {
      Byte[] byteArray0 = new Byte[2];
      byte byte0 = (byte)51;
      Byte byte1 = new Byte((byte)51);
      assertTrue(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      assertEquals((byte)51, (byte)byte1);
      
      byteArray0[0] = byte1;
      Byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0);
      assertEquals(2, byteArray0.length);
      assertEquals(2, byteArray1.length);
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      
      ArrayUtils.shift((Object[]) byteArray0, 0, (int) (byte)51, (-1916));
      assertEquals(2, byteArray0.length);
      assertSame(byteArray0, byteArray1);
      
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short) (byte)51;
      shortArray0[1] = (short) byte0;
      shortArray0[2] = (short) byte0;
      short[] shortArray1 = new short[3];
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      shortArray1[0] = (short) (byte)51;
      long[] longArray0 = new long[9];
      longArray0[0] = (long) (short)51;
      longArray0[1] = (long) (short)51;
      longArray0[2] = (long) 0;
      longArray0[3] = (long) (short)51;
      longArray0[4] = (long) (short)51;
      longArray0[6] = (long) (short)51;
      longArray0[7] = 263L;
      longArray0[8] = (long) (short)51;
      long[] longArray1 = ArrayUtils.addFirst(longArray0, 2095L);
      assertArrayEquals(new long[] {2095L, 51L, 51L, 0L, 51L, 51L, 0L, 51L, 263L, 51L}, longArray1);
      assertArrayEquals(new long[] {51L, 51L, 0L, 51L, 51L, 0L, 51L, 263L, 51L}, longArray0);
      assertEquals(10, longArray1.length);
      assertEquals(9, longArray0.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray0, longArray1);
      assertNotNull(longArray1);
      
      long[] longArray2 = ArrayUtils.removeElements(longArray0, longArray0);
      assertArrayEquals(new long[] {}, longArray2);
      assertArrayEquals(new long[] {51L, 51L, 0L, 51L, 51L, 0L, 51L, 263L, 51L}, longArray0);
      assertEquals(0, longArray2.length);
      assertEquals(9, longArray0.length);
      assertFalse(longArray2.equals((Object)longArray1));
      assertFalse(longArray2.equals((Object)longArray0));
      assertFalse(longArray0.equals((Object)longArray1));
      assertNotSame(longArray2, longArray1);
      assertNotSame(longArray2, longArray0);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray0, longArray2);
      assertNotNull(longArray2);
      
      int int0 = ArrayUtils.indexOf(shortArray0, (short) (byte)51);
      assertArrayEquals(new short[] {(short)51, (short)51, (short)51}, shortArray0);
      assertEquals(3, shortArray0.length);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertNotSame(shortArray0, shortArray1);
      assertEquals(0, int0);
      
      int[] intArray0 = new int[2];
      intArray0[0] = 8;
      intArray0[1] = (int) (short)51;
      int[] intArray1 = ArrayUtils.addFirst(intArray0, 0);
      assertArrayEquals(new int[] {8, 51}, intArray0);
      assertArrayEquals(new int[] {0, 8, 51}, intArray1);
      assertEquals(2, intArray0.length);
      assertEquals(3, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
  }

  @Test(timeout = 4000)
  public void test0064()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      float[] floatArray0 = new float[4];
      floatArray0[0] = (-1150.5F);
      floatArray0[1] = (-1150.5F);
      floatArray0[2] = (-2005.7074F);
      floatArray0[3] = 3424.91F;
      int int0 = ArrayUtils.lastIndexOf(floatArray0, (-1150.5F), 2);
      assertArrayEquals(new float[] {(-1150.5F), (-1150.5F), (-2005.7074F), 3424.91F}, floatArray0, 0.01F);
      assertEquals(4, floatArray0.length);
      assertEquals(1, int0);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (byte)78;
      shortArray0[1] = (short) (byte)78;
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-39.0);
      doubleArray0[1] = (double) 1;
      doubleArray0[2] = (double) (-2005.7074F);
      doubleArray0[3] = (double) (short)2;
      doubleArray0[4] = (double) (-2005.7074F);
      doubleArray0[5] = (double) (-2005.7074F);
      doubleArray0[6] = (double) (-2005.7074F);
      int[] intArray0 = new int[0];
      int[] intArray1 = ArrayUtils.removeElement(intArray0, (int) (short)78);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
  }

  @Test(timeout = 4000)
  public void test0065()  throws Throwable  {
      Byte byte0 = new Byte((byte)99);
      assertNotNull(byte0);
      assertEquals((byte)99, (byte)byte0);
      
      Byte byte1 = new Byte((byte)89);
      assertFalse(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      assertEquals((byte)89, (byte)byte1);
      
      int[] intArray0 = new int[5];
      intArray0[0] = (int) (byte)89;
      intArray0[1] = (int) (byte)89;
      intArray0[2] = (int) (byte)89;
      intArray0[3] = 3699;
      intArray0[4] = 89;
      ArrayUtils.shift(intArray0, (-3103));
      assertArrayEquals(new int[] {3699, 89, 89, 89, 89}, intArray0);
      assertEquals(5, intArray0.length);
      
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = ArrayUtils.removeElement(booleanArray0, true);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      
      char[] charArray0 = new char[9];
      charArray0[0] = '\'';
      charArray0[1] = '\'';
      charArray0[2] = '\'';
      charArray0[3] = '\'';
      charArray0[4] = '\'';
      charArray0[5] = '\'';
      charArray0[6] = '\'';
      charArray0[7] = '\'';
      charArray0[8] = '\'';
      ArrayUtils.shift(charArray0, 2, 111, 111);
      assertArrayEquals(new char[] {'\'', '\'', '\'', '\'', '\'', '\'', '\'', '\'', '\''}, charArray0);
      assertEquals(9, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test0066()  throws Throwable  {
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short)120;
      shortArray0[1] = (short)3761;
      shortArray0[2] = (short)2;
      shortArray0[3] = (short) (-656);
      shortArray0[4] = (short)8;
      shortArray0[5] = (short)53;
      shortArray0[6] = (short)0;
      shortArray0[7] = (short) (-954);
      short[] shortArray1 = ArrayUtils.clone(shortArray0);
      assertArrayEquals(new short[] {(short)120, (short)3761, (short)2, (short) (-656), (short)8, (short)53, (short)0, (short) (-954)}, shortArray0);
      assertArrayEquals(new short[] {(short)120, (short)3761, (short)2, (short) (-656), (short)8, (short)53, (short)0, (short) (-954)}, shortArray1);
      assertEquals(8, shortArray0.length);
      assertEquals(8, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      
      Long long0 = new Long((short)120);
      assertNotNull(long0);
      assertEquals(120L, (long)long0);
      
      Long long1 = new Long((short) (-656));
      assertFalse(long1.equals((Object)long0));
      assertNotNull(long1);
      assertEquals((-656L), (long)long1);
      
      Long long2 = new Long(953L);
      assertFalse(long2.equals((Object)long0));
      assertFalse(long2.equals((Object)long1));
      assertNotNull(long2);
      assertEquals(953L, (long)long2);
      
      Long long3 = new Long(953L);
      assertFalse(long3.equals((Object)long0));
      assertFalse(long3.equals((Object)long1));
      assertTrue(long3.equals((Object)long2));
      assertNotNull(long3);
      assertEquals(953L, (long)long3);
      
      Long long4 = new Long(106L);
      assertFalse(long4.equals((Object)long1));
      assertFalse(long4.equals((Object)long0));
      assertFalse(long4.equals((Object)long2));
      assertFalse(long4.equals((Object)long3));
      assertNotNull(long4);
      assertEquals(106L, (long)long4);
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'N';
      charArray0[1] = '#';
      charArray0[2] = 'n';
      charArray0[3] = '/';
      char[] charArray1 = ArrayUtils.insert((int) (short)2, charArray0, charArray0);
      assertArrayEquals(new char[] {'N', '#', 'N', '#', 'n', '/', 'n', '/'}, charArray1);
      assertArrayEquals(new char[] {'N', '#', 'n', '/'}, charArray0);
      assertEquals(8, charArray1.length);
      assertEquals(4, charArray0.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray0, charArray1);
      assertNotNull(charArray1);
      
      boolean[] booleanArray0 = ArrayUtils.insert((int) (short)53, (boolean[]) null, (boolean[]) null);
      assertNull(booleanArray0);
      
      Integer[] integerArray0 = new Integer[7];
      Integer integer0 = new Integer((short)0);
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(2);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(2, (int)integer1);
      
      integerArray0[1] = integer1;
      Integer integer2 = new Integer((short) (-656));
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertNotNull(integer2);
      assertEquals((-656), (int)integer2);
      
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(891);
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer1));
      assertNotNull(integer3);
      assertEquals(891, (int)integer3);
      
      integerArray0[3] = integer3;
      Integer integer4 = new Integer(2);
      assertTrue(integer4.equals((Object)integer1));
      assertFalse(integer4.equals((Object)integer2));
      assertFalse(integer4.equals((Object)integer0));
      assertFalse(integer4.equals((Object)integer3));
      assertNotNull(integer4);
      assertEquals(2, (int)integer4);
      
      integerArray0[4] = integer4;
      Integer integer5 = new Integer(2244);
      assertFalse(integer5.equals((Object)integer2));
      assertFalse(integer5.equals((Object)integer0));
      assertFalse(integer5.equals((Object)integer1));
      assertFalse(integer5.equals((Object)integer3));
      assertFalse(integer5.equals((Object)integer4));
      assertNotNull(integer5);
      assertEquals(2244, (int)integer5);
      
      integerArray0[5] = integer5;
      Integer integer6 = new Integer(2146936318);
      assertFalse(integer6.equals((Object)integer5));
      assertFalse(integer6.equals((Object)integer1));
      assertFalse(integer6.equals((Object)integer0));
      assertFalse(integer6.equals((Object)integer3));
      assertFalse(integer6.equals((Object)integer2));
      assertFalse(integer6.equals((Object)integer4));
      assertNotNull(integer6);
      assertEquals(2146936318, (int)integer6);
      
      integerArray0[6] = integer6;
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0, 128);
      assertArrayEquals(new int[] {0, 2, (-656), 891, 2, 2244, 2146936318}, intArray0);
      assertEquals(7, intArray0.length);
      assertEquals(7, integerArray0.length);
      assertNotNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test0067()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isNotEmpty((boolean[]) null);
      assertFalse(boolean0);
      
      float[] floatArray0 = new float[0];
      int int0 = ArrayUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      byte[] byteArray0 = ArrayUtils.clone((byte[]) null);
      assertNull(byteArray0);
      
      byte[] byteArray1 = ArrayUtils.add((byte[]) null, (byte)2);
      assertArrayEquals(new byte[] {(byte)2}, byteArray1);
      assertEquals(1, byteArray1.length);
      assertNotNull(byteArray1);
      
      Long long0 = new Long(1);
      assertNotNull(long0);
      assertEquals(1L, (long)long0);
      
      Long long1 = new Long(1L);
      assertTrue(long1.equals((Object)long0));
      assertNotNull(long1);
      assertEquals(1L, (long)long1);
      
      Long long2 = new Long(666L);
      assertFalse(long2.equals((Object)long1));
      assertFalse(long2.equals((Object)long0));
      assertNotNull(long2);
      assertEquals(666L, (long)long2);
      
      Long[] longArray0 = ArrayUtils.nullToEmpty((Long[]) null);
      assertEquals(0, longArray0.length);
      assertNotNull(longArray0);
      
      Integer integer0 = new Integer(Integer.MAX_VALUE);
      assertFalse(integer0.equals((Object)int0));
      assertNotNull(integer0);
      assertEquals(Integer.MAX_VALUE, (int)integer0);
      
      char[] charArray0 = new char[7];
      charArray0[0] = 'R';
      charArray0[1] = 'R';
      charArray0[2] = 'R';
      charArray0[3] = 'R';
      charArray0[4] = 'R';
      charArray0[5] = 'R';
      charArray0[6] = 'R';
      char[] charArray1 = ArrayUtils.nullToEmpty(charArray0);
      assertArrayEquals(new char[] {'R', 'R', 'R', 'R', 'R', 'R', 'R'}, charArray1);
      assertArrayEquals(new char[] {'R', 'R', 'R', 'R', 'R', 'R', 'R'}, charArray0);
      assertEquals(7, charArray1.length);
      assertEquals(7, charArray0.length);
      assertSame(charArray1, charArray0);
      assertSame(charArray0, charArray1);
      assertNotNull(charArray1);
      
      boolean[] booleanArray0 = ArrayUtils.insert(31, (boolean[]) null, (boolean[]) null);
      assertNull(booleanArray0);
  }

  @Test(timeout = 4000)
  public void test0068()  throws Throwable  {
      char[] charArray0 = new char[2];
      ArrayUtils.shift(charArray0, (int) '\u0000');
      assertArrayEquals(new char[] {'\u0000', '\u0000'}, charArray0);
      assertEquals(2, charArray0.length);
      
      Long long0 = new Long('\u0000');
      assertNotNull(long0);
      assertEquals(0L, (long)long0);
      
      String[] stringArray0 = ArrayUtils.removeElements((String[]) null, (String[]) null);
      assertNull(stringArray0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)23;
      byteArray0[2] = (byte) (-4);
      byteArray0[3] = (byte)111;
      byteArray0[4] = (byte)1;
      byteArray0[5] = (byte) (-120);
      byteArray0[6] = (byte)77;
      byteArray0[7] = (byte)99;
      BitSet bitSet0 = ArrayUtils.indexesOf(byteArray0, (byte)23, (int) (byte) (-120));
      assertEquals("{1}", bitSet0.toString());
      assertEquals(2, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals(1, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertArrayEquals(new byte[] {(byte)0, (byte)23, (byte) (-4), (byte)111, (byte)1, (byte) (-120), (byte)77, (byte)99}, byteArray0);
      assertEquals(8, byteArray0.length);
      assertNotNull(bitSet0);
  }

  @Test(timeout = 4000)
  public void test0069()  throws Throwable  {
      float[] floatArray0 = new float[6];
      floatArray0[1] = (float) (byte)3;
      floatArray0[2] = (float) (byte)3;
      floatArray0[3] = (float) (byte)3;
      floatArray0[4] = (float) (byte)3;
      floatArray0[5] = (float) (byte)3;
      float[] floatArray1 = ArrayUtils.removeElements(floatArray0, floatArray0);
      assertArrayEquals(new float[] {0.0F, 3.0F, 3.0F, 3.0F, 3.0F, 3.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertEquals(6, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      
      Float float0 = new Float((-3089.2656F));
      assertNotNull(float0);
      assertEquals((-3089.2656F), (float)float0, 0.01F);
      
      Character character0 = Character.valueOf('=');
      assertNotNull(character0);
      assertEquals('=', (char)character0);
      
      boolean boolean0 = ArrayUtils.isSameLength((Object) null, (Object) null);
      assertTrue(boolean0);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      boolean[] booleanArray1 = ArrayUtils.removeElements(booleanArray0, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, true, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertEquals(3, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      
      int[] intArray0 = new int[4];
      intArray0[0] = (int) '=';
      intArray0[1] = (int) (byte)3;
      intArray0[2] = (int) (byte)3;
      intArray0[3] = (int) '=';
      boolean boolean1 = ArrayUtils.isEmpty(intArray0);
      assertArrayEquals(new int[] {61, 3, 3, 61}, intArray0);
      assertEquals(4, intArray0.length);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test0070()  throws Throwable  {
      Long long0 = new Long(495L);
      assertNotNull(long0);
      assertEquals(495L, (long)long0);
      
      Long long1 = new Long(495L);
      assertTrue(long1.equals((Object)long0));
      assertNotNull(long1);
      assertEquals(495L, (long)long1);
      
      Long long2 = new Long(495L);
      assertTrue(long2.equals((Object)long1));
      assertTrue(long2.equals((Object)long0));
      assertNotNull(long2);
      assertEquals(495L, (long)long2);
      
      boolean[] booleanArray0 = ArrayUtils.EMPTY_BOOLEAN_ARRAY;
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals(0, booleanArray0.length);
      assertNotNull(booleanArray0);
      
      char[] charArray0 = new char[7];
      charArray0[0] = 'M';
      charArray0[1] = 'a';
      charArray0[2] = 'M';
      charArray0[3] = 'M';
      charArray0[4] = 'M';
      charArray0[5] = 'M';
      charArray0[6] = 'M';
      boolean boolean0 = ArrayUtils.isSorted(charArray0);
      assertArrayEquals(new char[] {'M', 'a', 'M', 'M', 'M', 'M', 'M'}, charArray0);
      assertEquals(7, charArray0.length);
      assertFalse(boolean0);
      
      boolean boolean1 = ArrayUtils.isSorted((byte[]) null);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      Boolean[] booleanArray1 = new Boolean[9];
      Boolean boolean2 = new Boolean(false);
      assertFalse(boolean2.equals((Object)boolean1));
      assertTrue(boolean2.equals((Object)boolean0));
      assertNotNull(boolean2);
      assertFalse(boolean2);
      
      booleanArray1[0] = boolean2;
      Boolean boolean3 = new Boolean(true);
      assertFalse(boolean3.equals((Object)boolean0));
      assertFalse(boolean3.equals((Object)boolean2));
      assertTrue(boolean3.equals((Object)boolean1));
      assertNotNull(boolean3);
      assertTrue(boolean3);
      
      booleanArray1[1] = boolean3;
      Boolean boolean4 = Boolean.valueOf("m");
      assertTrue(boolean4.equals((Object)boolean0));
      assertFalse(boolean4.equals((Object)boolean1));
      assertFalse(boolean4.equals((Object)boolean3));
      assertTrue(boolean4.equals((Object)boolean2));
      assertNotNull(boolean4);
      assertFalse(boolean4);
      
      booleanArray1[2] = boolean4;
      Boolean boolean5 = new Boolean("java.lang.Boolean");
      assertTrue(boolean5.equals((Object)boolean2));
      assertTrue(boolean5.equals((Object)boolean0));
      assertTrue(boolean5.equals((Object)boolean4));
      assertFalse(boolean5.equals((Object)boolean1));
      assertFalse(boolean5.equals((Object)boolean3));
      assertNotNull(boolean5);
      assertFalse(boolean5);
      
      booleanArray1[3] = boolean5;
      Boolean boolean6 = new Boolean(true);
      assertTrue(boolean6.equals((Object)boolean3));
      assertFalse(boolean6.equals((Object)boolean0));
      assertFalse(boolean6.equals((Object)boolean4));
      assertFalse(boolean6.equals((Object)boolean5));
      assertFalse(boolean6.equals((Object)boolean2));
      assertTrue(boolean6.equals((Object)boolean1));
      assertNotNull(boolean6);
      assertTrue(boolean6);
      
      booleanArray1[4] = boolean6;
      Boolean boolean7 = new Boolean("%')@Q(5a#=iRZ-ev \"");
      assertTrue(boolean7.equals((Object)boolean5));
      assertTrue(boolean7.equals((Object)boolean4));
      assertFalse(boolean7.equals((Object)boolean6));
      assertTrue(boolean7.equals((Object)boolean0));
      assertFalse(boolean7.equals((Object)boolean1));
      assertFalse(boolean7.equals((Object)boolean3));
      assertTrue(boolean7.equals((Object)boolean2));
      assertNotNull(boolean7);
      assertFalse(boolean7);
      
      booleanArray1[5] = boolean7;
      Boolean boolean8 = Boolean.FALSE;
      assertTrue(boolean8.equals((Object)boolean0));
      assertTrue(boolean8.equals((Object)boolean2));
      assertTrue(boolean8.equals((Object)boolean5));
      assertFalse(boolean8.equals((Object)boolean6));
      assertTrue(boolean8.equals((Object)boolean7));
      assertFalse(boolean8.equals((Object)boolean1));
      assertFalse(boolean8.equals((Object)boolean3));
      assertNotNull(boolean8);
      assertFalse(boolean8);
      
      booleanArray1[6] = boolean8;
      Boolean boolean9 = new Boolean(false);
      assertTrue(boolean9.equals((Object)boolean7));
      assertTrue(boolean9.equals((Object)boolean4));
      assertTrue(boolean9.equals((Object)boolean8));
      assertFalse(boolean9.equals((Object)boolean3));
      assertFalse(boolean9.equals((Object)boolean1));
      assertTrue(boolean9.equals((Object)boolean0));
      assertFalse(boolean9.equals((Object)boolean6));
      assertTrue(boolean9.equals((Object)boolean2));
      assertTrue(boolean9.equals((Object)boolean5));
      assertNotNull(boolean9);
      assertFalse(boolean9);
      
      booleanArray1[7] = boolean9;
      Boolean boolean10 = Boolean.valueOf(true);
      assertTrue(boolean10.equals((Object)boolean1));
      assertFalse(boolean10.equals((Object)boolean7));
      assertTrue(boolean10.equals((Object)boolean3));
      assertFalse(boolean10.equals((Object)boolean0));
      assertFalse(boolean10.equals((Object)boolean4));
      assertTrue(boolean10.equals((Object)boolean6));
      assertFalse(boolean10.equals((Object)boolean9));
      assertFalse(boolean10.equals((Object)boolean8));
      assertFalse(boolean10.equals((Object)boolean2));
      assertFalse(boolean10.equals((Object)boolean5));
      assertNotNull(boolean10);
      assertTrue(boolean10);
      
      booleanArray1[8] = boolean10;
      boolean[] booleanArray2 = ArrayUtils.toPrimitive(booleanArray1, true);
      assertTrue(Arrays.equals(new boolean[] {false, true, false, false, true, false, false, false, true}, booleanArray2));
      assertEquals(9, booleanArray2.length);
      assertEquals(9, booleanArray1.length);
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertNotSame(booleanArray2, booleanArray0);
      assertNotNull(booleanArray2);
  }

  @Test(timeout = 4000)
  public void test0071()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 1.0F;
      doubleArray0[1] = 1.0;
      boolean boolean0 = ArrayUtils.isSameLength(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {1.0, 1.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      assertTrue(boolean0);
      
      Byte byte0 = new Byte((byte)72);
      assertNotNull(byte0);
      assertEquals((byte)72, (byte)byte0);
      
      Byte[] byteArray0 = ArrayUtils.nullToEmpty((Byte[]) null);
      assertEquals(0, byteArray0.length);
      assertNotNull(byteArray0);
      
      byte[] byteArray1 = new byte[0];
      boolean boolean1 = ArrayUtils.isSameLength(byteArray1, byteArray1);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(0, byteArray1.length);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(byteArray1, (byte)72, 620);
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(0, byteArray1.length);
      assertNotNull(bitSet0);
      
      boolean boolean2 = ArrayUtils.isSorted(byteArray1);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(0, byteArray1.length);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2);
      
      byte byte1 = (byte)1;
      byte[] byteArray2 = new byte[7];
      assertFalse(byteArray2.equals((Object)byteArray1));
      
      byteArray2[0] = (byte)1;
      byteArray2[1] = (byte)21;
      byteArray2[2] = (byte)1;
      byteArray2[3] = (byte) (-123);
      byteArray2[4] = (byte)72;
      byteArray2[5] = (byte) (-123);
      byteArray2[6] = (byte)1;
      // Undeclared exception!
      try { 
        ArrayUtils.add(byteArray2, 1375, (byte)1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1375, Length: 7
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0072()  throws Throwable  {
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short)3364;
      shortArray0[1] = (short) (byte)51;
      shortArray0[2] = (short)8;
      shortArray0[3] = (short)8;
      shortArray0[4] = (short) (byte)51;
      shortArray0[5] = (short)3364;
      shortArray0[6] = (short) (byte)51;
      shortArray0[7] = (short) (byte)51;
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short)3364, (int) (short)8);
      assertArrayEquals(new short[] {(short)3364, (short)51, (short)8, (short)8, (short)51, (short)3364, (short)51, (short)51}, shortArray0);
      assertEquals(8, shortArray0.length);
      assertEquals(5, int0);
      
      boolean boolean0 = ArrayUtils.isSorted((double[]) null);
      assertTrue(boolean0);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) (short)51;
      floatArray0[1] = (float) (short)51;
      boolean boolean1 = ArrayUtils.contains(floatArray0, (float) (short)51);
      assertArrayEquals(new float[] {51.0F, 51.0F}, floatArray0, 0.01F);
      assertEquals(2, floatArray0.length);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      long[] longArray0 = new long[6];
      longArray0[0] = (long) (short)3364;
      longArray0[1] = (long) (short)51;
      longArray0[2] = (long) (short)3364;
      longArray0[3] = (long) (short)8;
      longArray0[4] = (long) 5;
      longArray0[5] = (long) (short)8;
      long[] longArray1 = ArrayUtils.removeAllOccurences(longArray0, 502L);
      assertArrayEquals(new long[] {3364L, 51L, 3364L, 8L, 5L, 8L}, longArray1);
      assertArrayEquals(new long[] {3364L, 51L, 3364L, 8L, 5L, 8L}, longArray0);
      assertEquals(6, longArray1.length);
      assertEquals(6, longArray0.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray0, longArray1);
      assertNotNull(longArray1);
  }

  @Test(timeout = 4000)
  public void test0073()  throws Throwable  {
      ArrayUtils.shift((byte[]) null, (-834));
      char[] charArray0 = new char[6];
      charArray0[0] = 'V';
      charArray0[1] = '5';
      charArray0[2] = 'F';
      charArray0[3] = '#';
      charArray0[4] = '*';
      charArray0[5] = '[';
      char[] charArray1 = ArrayUtils.removeElements(charArray0, charArray0);
      assertArrayEquals(new char[] {'V', '5', 'F', '#', '*', '['}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertEquals(6, charArray0.length);
      assertEquals(0, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      
      boolean boolean0 = ArrayUtils.isEmpty((byte[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0074()  throws Throwable  {
      Character character0 = new Character('r');
      assertNotNull(character0);
      assertEquals('r', (char)character0);
      
      Object object0 = ArrayUtils.toPrimitive((Object) character0);
      assertNotNull(object0);
      assertEquals('r', object0);
      
      String string0 = ArrayUtils.toString(object0, ",%f");
      assertNotNull(string0);
      assertEquals("r", string0);
      
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = object0;
      objectArray0[2] = (Object) ",%f";
      int int0 = ArrayUtils.lastIndexOf(objectArray0, objectArray0[1], 98);
      assertEquals(3, objectArray0.length);
      assertEquals(1, int0);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) 1;
      floatArray0[1] = (-1909.8018F);
      floatArray0[2] = (float) 1;
      floatArray0[3] = (float) 98;
      ArrayUtils.shift(objectArray0, 196, 196, 98);
      assertEquals(3, objectArray0.length);
      
      float[] floatArray1 = ArrayUtils.removeElement(floatArray0, 3923.565F);
      assertArrayEquals(new float[] {1.0F, (-1909.8018F), 1.0F, 98.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {1.0F, (-1909.8018F), 1.0F, 98.0F, 0.0F}, floatArray1, 0.01F);
      assertEquals(5, floatArray0.length);
      assertEquals(5, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      
      byte[] byteArray0 = new byte[0];
      Byte[] byteArray1 = ArrayUtils.toObject(byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotNull(byteArray1);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      boolean[] booleanArray1 = ArrayUtils.removeElement(booleanArray0, false);
      assertTrue(Arrays.equals(new boolean[] {false, true, false, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, false, true}, booleanArray1));
      assertEquals(4, booleanArray0.length);
      assertEquals(3, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      
      Object object1 = ArrayUtils.toPrimitive((Object) ",%f");
      assertFalse(object1.equals((Object)string0));
      assertNotNull(object1);
      assertEquals(",%f", object1);
      
      // Undeclared exception!
      try { 
        ArrayUtils.add((Object[]) byteArray1, (Object) ",%f");
        fail("Expecting exception: ArrayStoreException");
      
      } catch(ArrayStoreException e) {
         //
         // java.lang.String
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0075()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 1.0F;
      doubleArray0[1] = 1.0;
      boolean boolean0 = ArrayUtils.isSameLength(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {1.0, 1.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      assertTrue(boolean0);
      
      char[] charArray0 = new char[13];
      charArray0[0] = ':';
      Character[] characterArray0 = ArrayUtils.toObject((char[]) null);
      assertNull(characterArray0);
      
      float[] floatArray0 = new float[9];
      floatArray0[0] = 1.0F;
      floatArray0[1] = (float) 338;
      floatArray0[2] = (float) 338;
      floatArray0[3] = (float) 338;
      floatArray0[4] = (float) ':';
      floatArray0[5] = (float) 338;
      floatArray0[6] = (float) ':';
      floatArray0[7] = (-1.0F);
      floatArray0[8] = (float) 338;
      ArrayUtils.shift(floatArray0, (-557), 2147483636, 9);
      assertArrayEquals(new float[] {1.0F, 338.0F, 338.0F, 338.0F, 58.0F, 338.0F, 58.0F, (-1.0F), 338.0F}, floatArray0, 0.01F);
      assertEquals(9, floatArray0.length);
      
      ArrayUtils.reverse(charArray0, 0, 9);
      assertEquals(13, charArray0.length);
      
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = true;
      booleanArray0[2] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      booleanArray0[3] = true;
      Character[] characterArray1 = ArrayUtils.toObject(charArray0);
      assertEquals(13, charArray0.length);
      assertEquals(13, characterArray1.length);
      assertNotNull(characterArray1);
      
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (double) 338.0F, (double) 338.0F);
      assertArrayEquals(new double[] {1.0, 1.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(1, int0);
      
      boolean boolean1 = ArrayUtils.isSameLength((Object[]) null, (Object[]) characterArray1);
      assertEquals(13, charArray0.length);
      assertEquals(13, characterArray1.length);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      // Undeclared exception!
      try { 
        ArrayUtils.insert(2398, doubleArray0, doubleArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2398, Length: 2
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0076()  throws Throwable  {
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short) (-430);
      shortArray0[1] = (short)0;
      shortArray0[2] = (short) (-430);
      shortArray0[3] = (short) (-430);
      shortArray0[4] = (short) (-430);
      shortArray0[5] = (short) (-430);
      shortArray0[6] = (short) (-430);
      shortArray0[7] = (short) (-430);
      int int0 = new Integer((short) (-430));
      assertEquals((-430), int0);
      
      double[] doubleArray0 = new double[1];
      boolean boolean0 = ArrayUtils.isSorted(doubleArray0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertTrue(boolean0);
      
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) (short) (-430);
      floatArray0[1] = (float) (short)8;
      floatArray0[2] = (float) (short) (-430);
      floatArray0[3] = (float) (short) (-430);
      floatArray0[4] = (float) (short) (-430);
      floatArray0[5] = (float) (short) (-430);
      floatArray0[6] = (float) (short) (-430);
      floatArray0[7] = 493.894F;
      floatArray0[8] = (float) (short) (-430);
      float[] floatArray1 = ArrayUtils.addFirst(floatArray0, (-430.0F));
      assertArrayEquals(new float[] {(-430.0F), (-430.0F), 8.0F, (-430.0F), (-430.0F), (-430.0F), (-430.0F), (-430.0F), 493.894F, (-430.0F)}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {(-430.0F), 8.0F, (-430.0F), (-430.0F), (-430.0F), (-430.0F), (-430.0F), 493.894F, (-430.0F)}, floatArray0, 0.01F);
      assertEquals(10, floatArray1.length);
      assertEquals(9, floatArray0.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertNotNull(floatArray1);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)51;
      byteArray0[1] = (byte) (-21);
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte) (-30);
      byte[] byteArray1 = ArrayUtils.insert((int) (short) (-430), byteArray0, (byte[]) null);
      assertArrayEquals(new byte[] {(byte)51, (byte) (-21), (byte) (-1), (byte) (-30)}, byteArray0);
      assertArrayEquals(new byte[] {(byte)51, (byte) (-21), (byte) (-1), (byte) (-30)}, byteArray1);
      assertEquals(4, byteArray0.length);
      assertEquals(4, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
  }

  @Test(timeout = 4000)
  public void test0077()  throws Throwable  {
      float[] floatArray0 = new float[3];
      floatArray0[0] = (-1385.0087F);
      float[] floatArray1 = ArrayUtils.nullToEmpty(floatArray0);
      assertArrayEquals(new float[] {(-1385.0087F), 0.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-1385.0087F), 0.0F, 0.0F}, floatArray1, 0.01F);
      assertEquals(3, floatArray0.length);
      assertEquals(3, floatArray1.length);
      assertSame(floatArray0, floatArray1);
      assertSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      
      int[] intArray0 = new int[9];
      intArray0[0] = 279;
      floatArray0[1] = (float) 279;
      intArray0[2] = 279;
      intArray0[4] = 279;
      intArray0[5] = 279;
      intArray0[6] = 279;
      intArray0[7] = 279;
      intArray0[8] = 279;
      int[] intArray1 = ArrayUtils.removeAllOccurrences(intArray0, 2147088925);
      assertArrayEquals(new int[] {279, 0, 279, 0, 279, 279, 279, 279, 279}, intArray0);
      assertArrayEquals(new int[] {279, 0, 279, 0, 279, 279, 279, 279, 279}, intArray1);
      assertEquals(9, intArray0.length);
      assertEquals(9, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      
      Boolean boolean0 = Boolean.FALSE;
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      Boolean[] booleanArray0 = new Boolean[0];
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0, true);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertNotNull(booleanArray1);
      
      boolean[] booleanArray2 = ArrayUtils.removeElement(booleanArray1, false);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray2));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertEquals(0, booleanArray2.length);
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertNotSame(booleanArray2, booleanArray1);
      assertNotSame(booleanArray1, booleanArray2);
      assertNotNull(booleanArray2);
      
      Long long0 = new Long(279);
      assertNotNull(long0);
      assertEquals(279L, (long)long0);
      
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = ArrayUtils.insert(279, byteArray0, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      
      boolean boolean1 = ArrayUtils.isEmpty(byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertNotSame(byteArray0, byteArray1);
      assertTrue(boolean1);
      
      boolean[] booleanArray3 = ArrayUtils.removeElement(booleanArray1, true);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray3));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertEquals(0, booleanArray3.length);
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertFalse(booleanArray3.equals((Object)booleanArray1));
      assertFalse(booleanArray3.equals((Object)booleanArray2));
      assertFalse(booleanArray1.equals((Object)booleanArray2));
      assertNotSame(booleanArray3, booleanArray1);
      assertNotSame(booleanArray3, booleanArray2);
      assertNotSame(booleanArray1, booleanArray3);
      assertNotSame(booleanArray1, booleanArray2);
      assertNotNull(booleanArray3);
  }

  @Test(timeout = 4000)
  public void test0078()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = '\\';
      char[] charArray1 = ArrayUtils.removeAllOccurrences(charArray0, 'm');
      assertArrayEquals(new char[] {'\\'}, charArray0);
      assertArrayEquals(new char[] {'\\'}, charArray1);
      assertEquals(1, charArray0.length);
      assertEquals(1, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      
      float[] floatArray0 = new float[0];
      boolean boolean0 = ArrayUtils.isNotEmpty(floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
      assertFalse(boolean0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(charArray0, '\\');
      assertEquals(1, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertEquals("{0}", bitSet0.toString());
      assertEquals(1, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertArrayEquals(new char[] {'\\'}, charArray0);
      assertEquals(1, charArray0.length);
      assertFalse(charArray0.equals((Object)charArray1));
      assertNotSame(charArray0, charArray1);
      assertNotNull(bitSet0);
      
      int int0 = 1386;
      // Undeclared exception!
      try { 
        ArrayUtils.remove(charArray1, 1386);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1386, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0079()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = 7;
      intArray0[1] = (-91);
      float[] floatArray0 = new float[5];
      floatArray0[0] = (-1.0F);
      floatArray0[1] = (-1.0F);
      floatArray0[2] = (float) (-91);
      floatArray0[3] = (-1.0F);
      floatArray0[4] = (-1.0F);
      boolean boolean0 = ArrayUtils.isEmpty(floatArray0);
      assertArrayEquals(new float[] {(-1.0F), (-1.0F), (-91.0F), (-1.0F), (-1.0F)}, floatArray0, 0.01F);
      assertEquals(5, floatArray0.length);
      assertFalse(boolean0);
      
      boolean boolean1 = ArrayUtils.isSameLength(floatArray0, floatArray0);
      assertArrayEquals(new float[] {(-1.0F), (-1.0F), (-91.0F), (-1.0F), (-1.0F)}, floatArray0, 0.01F);
      assertEquals(5, floatArray0.length);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      char[] charArray0 = new char[0];
      boolean boolean2 = ArrayUtils.contains(charArray0, 'H');
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (-1.0F);
      doubleArray0[1] = (double) (-1.0F);
      doubleArray0[2] = (double) (-1.0F);
      doubleArray0[3] = (double) 'H';
      // Undeclared exception!
      try { 
        ArrayUtils.remove(doubleArray0, 1114111);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1114111, Length: 4
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0080()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = 7;
      intArray0[1] = (-91);
      float[] floatArray0 = new float[5];
      floatArray0[0] = (-1.0F);
      floatArray0[1] = (-1.0F);
      floatArray0[2] = (float) (-91);
      floatArray0[3] = (-1.0F);
      floatArray0[4] = (-1.0F);
      boolean boolean0 = ArrayUtils.isEmpty(floatArray0);
      assertArrayEquals(new float[] {(-1.0F), (-1.0F), (-91.0F), (-1.0F), (-1.0F)}, floatArray0, 0.01F);
      assertEquals(5, floatArray0.length);
      assertFalse(boolean0);
      
      boolean boolean1 = ArrayUtils.isSameLength(floatArray0, floatArray0);
      assertArrayEquals(new float[] {(-1.0F), (-1.0F), (-91.0F), (-1.0F), (-1.0F)}, floatArray0, 0.01F);
      assertEquals(5, floatArray0.length);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      char[] charArray0 = new char[0];
      boolean boolean2 = ArrayUtils.contains(charArray0, 'H');
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (-1.0F);
      doubleArray0[1] = (double) (-1.0F);
      doubleArray0[2] = (double) (-1.0F);
      doubleArray0[3] = (double) 'H';
      // Undeclared exception!
      try { 
        ArrayUtils.remove(doubleArray0, 1114111);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1114111, Length: 4
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0081()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[3];
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short) (-1);
      shortArray0[1] = (short) (-1592);
      shortArray0[2] = (short) (-1);
      shortArray0[3] = (short) (-1);
      shortArray0[4] = (short) (-1);
      shortArray0[5] = (short) (-1);
      int int0 = ArrayUtils.indexOf(shortArray0, (short) (-1), 50);
      assertArrayEquals(new short[] {(short) (-1), (short) (-1592), (short) (-1), (short) (-1), (short) (-1), (short) (-1)}, shortArray0);
      assertEquals(6, shortArray0.length);
      assertEquals((-1), int0);
      
      int int1 = ArrayUtils.lastIndexOf(booleanArray0, true, (int) (short) (-1));
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray0));
      assertEquals(3, booleanArray0.length);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test0082()  throws Throwable  {
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (-1);
      shortArray0[1] = (short) (-1);
      int int0 = ArrayUtils.indexOf(shortArray0, (short) (-1), (int) (short) (-1));
      assertArrayEquals(new short[] {(short) (-1), (short) (-1)}, shortArray0);
      assertEquals(2, shortArray0.length);
      assertEquals(0, int0);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      int int1 = ArrayUtils.lastIndexOf(booleanArray0, true, 0);
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray0));
      assertEquals(2, booleanArray0.length);
      assertTrue(int1 == int0);
      assertEquals(0, int1);
  }

  @Test(timeout = 4000)
  public void test0083()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      int int0 = ArrayUtils.indexOf(intArray0, 0, 0);
      assertArrayEquals(new int[] {0}, intArray0);
      assertEquals(1, intArray0.length);
      assertEquals(0, int0);
      
      String string0 = ArrayUtils.toString((Object) "");
      assertNotNull(string0);
      assertEquals("", string0);
      
      int[] intArray1 = ArrayUtils.subarray(intArray0, (-127), 0);
      assertArrayEquals(new int[] {0}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(1, intArray0.length);
      assertEquals(0, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      
      Boolean boolean0 = Boolean.TRUE;
      assertNotNull(boolean0);
      assertTrue(boolean0);
      
      Boolean[] booleanArray0 = new Boolean[5];
      booleanArray0[0] = boolean0;
      booleanArray0[1] = boolean0;
      booleanArray0[2] = boolean0;
      booleanArray0[3] = boolean0;
      booleanArray0[4] = boolean0;
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true}, booleanArray1));
      assertEquals(5, booleanArray0.length);
      assertEquals(5, booleanArray1.length);
      assertNotNull(booleanArray1);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)2;
      shortArray0[1] = (short)76;
      int int1 = ArrayUtils.indexOf(shortArray0, (short)7, (int) (short)2);
      assertArrayEquals(new short[] {(short)2, (short)76}, shortArray0);
      assertEquals(2, shortArray0.length);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      int int2 = ArrayUtils.lastIndexOf(booleanArray1, false, (-127));
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true}, booleanArray1));
      assertEquals(5, booleanArray0.length);
      assertEquals(5, booleanArray1.length);
      assertTrue(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals((-1), int2);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (short)2;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = 145.60993297266054;
      doubleArray0[3] = (double) (-1);
      doubleArray0[4] = (double) 0;
      int int3 = ArrayUtils.lastIndexOf(doubleArray0, (-753.999286031), 2);
      assertArrayEquals(new double[] {2.0, 0.0, 145.60993297266054, (-1.0), 0.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      assertTrue(int3 == int1);
      assertFalse(int3 == int0);
      assertTrue(int3 == int2);
      assertEquals((-1), int3);
      
      Integer[] integerArray0 = new Integer[0];
      int[] intArray2 = ArrayUtils.toPrimitive(integerArray0);
      assertArrayEquals(new int[] {}, intArray2);
      assertEquals(0, integerArray0.length);
      assertEquals(0, intArray2.length);
      assertFalse(intArray2.equals((Object)intArray0));
      assertSame(intArray2, intArray1);
      assertNotSame(intArray2, intArray0);
      assertNotNull(intArray2);
  }

  @Test(timeout = 4000)
  public void test0084()  throws Throwable  {
      Byte[] byteArray0 = new Byte[3];
      byte byte0 = (byte)5;
      Byte byte1 = new Byte((byte)5);
      assertTrue(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      assertEquals((byte)5, (byte)byte1);
      
      byteArray0[0] = byte1;
      byte byte2 = (byte) (-71);
      Byte byte3 = new Byte((byte) (-71));
      assertTrue(byte3.equals((Object)byte2));
      assertFalse(byte3.equals((Object)byte0));
      assertFalse(byte3.equals((Object)byte1));
      assertNotNull(byte3);
      assertEquals((byte) (-71), (byte)byte3);
      
      byteArray0[1] = byte3;
      byte byte4 = (byte)6;
      Byte byte5 = new Byte((byte)6);
      assertFalse(byte5.equals((Object)byte3));
      assertTrue(byte5.equals((Object)byte4));
      assertFalse(byte5.equals((Object)byte0));
      assertFalse(byte5.equals((Object)byte2));
      assertFalse(byte5.equals((Object)byte1));
      assertNotNull(byte5);
      assertEquals((byte)6, (byte)byte5);
      
      byteArray0[2] = byte5;
      byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0);
      assertArrayEquals(new byte[] {(byte)5, (byte) (-71), (byte)6}, byteArray1);
      assertEquals(3, byteArray0.length);
      assertEquals(3, byteArray1.length);
      assertNotNull(byteArray1);
      
      short[] shortArray0 = ArrayUtils.removeAllOccurrences((short[]) null, (short) (-1));
      assertNull(shortArray0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.add((short[]) null, (int) byte4, (short) (-17168));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 6, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0085()  throws Throwable  {
      int int0 = ArrayUtils.lastIndexOf((float[]) null, 1.0F, 31);
      assertEquals((-1), int0);
      
      byte[] byteArray0 = ArrayUtils.clone((byte[]) null);
      assertNull(byteArray0);
      
      byte[] byteArray1 = ArrayUtils.add((byte[]) null, (byte)2);
      assertArrayEquals(new byte[] {(byte)2}, byteArray1);
      assertEquals(1, byteArray1.length);
      assertNotNull(byteArray1);
      
      Long long0 = new Long((byte)2);
      assertNotNull(long0);
      assertEquals(2L, (long)long0);
      
      Long long1 = new Long((-1L));
      assertFalse(long1.equals((Object)long0));
      assertNotNull(long1);
      assertEquals((-1L), (long)long1);
      
      Long long2 = new Long((-1L));
      assertFalse(long2.equals((Object)long0));
      assertTrue(long2.equals((Object)long1));
      assertNotNull(long2);
      assertEquals((-1L), (long)long2);
      
      Long long3 = new Long((-528L));
      assertFalse(long3.equals((Object)long1));
      assertFalse(long3.equals((Object)long0));
      assertFalse(long3.equals((Object)long2));
      assertNotNull(long3);
      assertEquals((-528L), (long)long3);
      
      Long[] longArray0 = ArrayUtils.nullToEmpty((Long[]) null);
      assertEquals(0, longArray0.length);
      assertNotNull(longArray0);
      
      short[] shortArray0 = new short[2];
      short[] shortArray1 = ArrayUtils.nullToEmpty(shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0}, shortArray1);
      assertEquals(2, shortArray0.length);
      assertEquals(2, shortArray1.length);
      assertSame(shortArray0, shortArray1);
      assertSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      
      short[] shortArray2 = ArrayUtils.subarray(shortArray0, (-1), (int) (byte)2);
      assertArrayEquals(new short[] {(short)0, (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0}, shortArray2);
      assertEquals(2, shortArray0.length);
      assertEquals(2, shortArray2.length);
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertFalse(shortArray2.equals((Object)shortArray1));
      assertSame(shortArray0, shortArray1);
      assertNotSame(shortArray0, shortArray2);
      assertNotSame(shortArray2, shortArray0);
      assertNotSame(shortArray2, shortArray1);
      assertNotNull(shortArray2);
  }

  @Test(timeout = 4000)
  public void test0086()  throws Throwable  {
      int[] intArray0 = ArrayUtils.insert((-2147184749), (int[]) null, (int[]) null);
      assertNull(intArray0);
      
      short[] shortArray0 = new short[6];
      shortArray0[2] = (short)2287;
      shortArray0[3] = (short)32;
      shortArray0[4] = (short) (-2108);
      shortArray0[5] = (short)1733;
      short[] shortArray1 = ArrayUtils.subarray(shortArray0, (-2305), 4);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)2287, (short)32, (short) (-2108), (short)1733}, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)2287, (short)32}, shortArray1);
      assertEquals(6, shortArray0.length);
      assertEquals(4, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      
      String[] stringArray0 = new String[6];
      stringArray0[0] = "F^Sa?m/Wm]@^}_+u|";
      stringArray0[1] = "', has a length less than 2";
      stringArray0[2] = "', has a length less than 2";
      stringArray0[4] = "', has a length less than 2";
      Short short0 = new Short((short)2740);
      assertNotNull(short0);
      assertEquals((short)2740, (short)short0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.isSameType((Object) null, short0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0087()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byte[] byteArray1 = new byte[2];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byte[] byteArray2 = ArrayUtils.addAll(byteArray0, byteArray1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray2);
      assertEquals(3, byteArray0.length);
      assertEquals(2, byteArray1.length);
      assertEquals(5, byteArray2.length);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      assertNotNull(byteArray2);
      
      // Undeclared exception!
      try { 
        ArrayUtils.isSameType((Object) null, (Object) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0088()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = Double.NaN;
      doubleArray0[1] = 183.9184337488;
      doubleArray0[2] = 430.358063;
      int int0 = ArrayUtils.indexOf(doubleArray0, 183.9184337488, 5465.04561419);
      assertArrayEquals(new double[] {Double.NaN, 183.9184337488, 430.358063}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(1, int0);
      
      float[] floatArray0 = new float[9];
      floatArray0[0] = (-576.8279F);
      floatArray0[1] = (float) 1;
      floatArray0[2] = (float) 1;
      floatArray0[3] = (float) 1;
      floatArray0[4] = (float) 1;
      Short short0 = new Short((short)805);
      assertNotNull(short0);
      assertEquals((short)805, (short)short0);
      
      Short[] shortArray0 = new Short[7];
      shortArray0[0] = short0;
      shortArray0[1] = short0;
      shortArray0[2] = short0;
      shortArray0[3] = short0;
      shortArray0[4] = short0;
      shortArray0[5] = short0;
      shortArray0[6] = short0;
      boolean boolean0 = ArrayUtils.isArrayIndexValid(shortArray0, (int) shortArray0[2]);
      assertEquals(7, shortArray0.length);
      assertFalse(boolean0);
      
      ArrayUtils.shift(doubleArray0, (int) shortArray0[6], (-1), 1);
      assertArrayEquals(new double[] {Double.NaN, 183.9184337488, 430.358063}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(7, shortArray0.length);
      
      float[] floatArray1 = ArrayUtils.add(floatArray0, 1, 1.0F);
      assertArrayEquals(new float[] {(-576.8279F), 1.0F, 1.0F, 1.0F, 1.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-576.8279F), 1.0F, 1.0F, 1.0F, 1.0F, 1.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray1, 0.01F);
      assertEquals(9, floatArray0.length);
      assertEquals(10, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
  }

  @Test(timeout = 4000)
  public void test0089()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      char[] charArray0 = new char[9];
      charArray0[0] = 'Q';
      charArray0[1] = 'Q';
      charArray0[2] = 'Q';
      charArray0[3] = 'M';
      charArray0[4] = 'M';
      charArray0[5] = 'Q';
      charArray0[6] = 'u';
      charArray0[7] = 'Q';
      charArray0[8] = 'Q';
      char[] charArray1 = ArrayUtils.remove(charArray0, 2);
      assertArrayEquals(new char[] {'Q', 'Q', 'Q', 'M', 'M', 'Q', 'u', 'Q', 'Q'}, charArray0);
      assertArrayEquals(new char[] {'Q', 'Q', 'M', 'M', 'Q', 'u', 'Q', 'Q'}, charArray1);
      assertEquals(9, charArray0.length);
      assertEquals(8, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) 'Q';
      objectArray0[1] = (Object) 'Q';
      objectArray0[2] = (Object) 'Q';
      ArrayUtils.reverse(objectArray0);
      assertEquals(3, objectArray0.length);
      
      boolean[] booleanArray1 = new boolean[4];
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      booleanArray1[0] = true;
      booleanArray1[1] = true;
      booleanArray1[2] = true;
      booleanArray1[3] = false;
      boolean[] booleanArray2 = ArrayUtils.removeAllOccurrences(booleanArray1, false);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, false}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {true, true, true}, booleanArray2));
      assertEquals(4, booleanArray1.length);
      assertEquals(3, booleanArray2.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray1, booleanArray2);
      assertNotSame(booleanArray2, booleanArray1);
      assertNotSame(booleanArray2, booleanArray0);
      assertNotNull(booleanArray2);
  }

  @Test(timeout = 4000)
  public void test0090()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      int int0 = ArrayUtils.indexOf(intArray0, 0, 0);
      assertArrayEquals(new int[] {0}, intArray0);
      assertEquals(1, intArray0.length);
      assertEquals(0, int0);
      
      Long long0 = new Long(0);
      assertNotNull(long0);
      assertEquals(0L, (long)long0);
      
      Long long1 = new Long(0);
      assertTrue(long1.equals((Object)long0));
      assertNotNull(long1);
      assertEquals(0L, (long)long1);
      
      Long long2 = new Long(3402L);
      assertFalse(long2.equals((Object)long1));
      assertFalse(long2.equals((Object)long0));
      assertNotNull(long2);
      assertEquals(3402L, (long)long2);
      
      Long long3 = new Long(0);
      assertTrue(long3.equals((Object)long1));
      assertFalse(long3.equals((Object)long2));
      assertTrue(long3.equals((Object)long0));
      assertNotNull(long3);
      assertEquals(0L, (long)long3);
      
      Long[] longArray0 = new Long[4];
      longArray0[0] = long1;
      longArray0[1] = long2;
      longArray0[2] = long1;
      longArray0[3] = long3;
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0);
      assertArrayEquals(new long[] {0L, 3402L, 0L, 0L}, longArray1);
      assertEquals(4, longArray0.length);
      assertEquals(4, longArray1.length);
      assertNotNull(longArray1);
  }

  @Test(timeout = 4000)
  public void test0091()  throws Throwable  {
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short) (-1);
      shortArray0[1] = (short)43;
      char[] charArray0 = new char[7];
      charArray0[0] = 'E';
      charArray0[1] = '0';
      charArray0[2] = '0';
      charArray0[3] = '0';
      charArray0[4] = '0';
      charArray0[5] = '0';
      charArray0[6] = '0';
      char[] charArray1 = ArrayUtils.removeElement(charArray0, ' ');
      assertArrayEquals(new char[] {'E', '0', '0', '0', '0', '0', '0'}, charArray0);
      assertArrayEquals(new char[] {'E', '0', '0', '0', '0', '0', '0'}, charArray1);
      assertEquals(7, charArray0.length);
      assertEquals(7, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) (short)43;
      floatArray0[1] = 0.0F;
      float[] floatArray1 = ArrayUtils.removeAllOccurences(floatArray0, (-1569.0298F));
      assertArrayEquals(new float[] {43.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {43.0F, 0.0F}, floatArray1, 0.01F);
      assertEquals(2, floatArray0.length);
      assertEquals(2, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = false;
      ArrayUtils.swap(booleanArray0, (int) (short) (-1), (-2146115848), (-2595));
      assertTrue(Arrays.equals(new boolean[] {false, false, true, true, false}, booleanArray0));
      assertEquals(5, booleanArray0.length);
      
      Long[] longArray0 = new Long[5];
      Long long0 = new Long(1964L);
      assertNotNull(long0);
      assertEquals(1964L, (long)long0);
      
      longArray0[0] = long0;
      long long1 = (-1L);
      Long long2 = new Long((-1L));
      assertTrue(long2.equals((Object)long1));
      assertFalse(long2.equals((Object)long0));
      assertNotNull(long2);
      assertEquals((-1L), (long)long2);
      
      longArray0[1] = long2;
      Long long3 = new Long((-1L));
      assertTrue(long3.equals((Object)long1));
      assertTrue(long3.equals((Object)long2));
      assertFalse(long3.equals((Object)long0));
      assertNotNull(long3);
      assertEquals((-1L), (long)long3);
      
      longArray0[2] = long3;
      Long long4 = new Long(3402L);
      assertFalse(long4.equals((Object)long2));
      assertFalse(long4.equals((Object)long3));
      assertFalse(long4.equals((Object)long1));
      assertFalse(long4.equals((Object)long0));
      assertNotNull(long4);
      assertEquals(3402L, (long)long4);
      
      longArray0[3] = long4;
      Long long5 = new Long(long1);
      assertTrue(long5.equals((Object)long1));
      assertTrue(long5.equals((Object)long2));
      assertFalse(long5.equals((Object)long0));
      assertTrue(long5.equals((Object)long3));
      assertFalse(long5.equals((Object)long4));
      assertNotNull(long5);
      assertEquals((-1L), (long)long5);
      
      longArray0[4] = long5;
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0);
      assertArrayEquals(new long[] {1964L, (-1L), (-1L), 3402L, (-1L)}, longArray1);
      assertEquals(5, longArray1.length);
      assertEquals(5, longArray0.length);
      assertNotNull(longArray1);
  }

  @Test(timeout = 4000)
  public void test0092()  throws Throwable  {
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) (byte)3;
      floatArray0[1] = (float) (byte)3;
      floatArray0[2] = (float) (byte)3;
      floatArray0[3] = (float) (byte)3;
      floatArray0[4] = (float) (byte)3;
      floatArray0[5] = (float) (byte)3;
      float[] floatArray1 = ArrayUtils.removeElements(floatArray0, floatArray0);
      assertArrayEquals(new float[] {3.0F, 3.0F, 3.0F, 3.0F, 3.0F, 3.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertEquals(6, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      
      Float float0 = new Float((-3089.2656F));
      assertNotNull(float0);
      assertEquals((-3089.2656F), (float)float0, 0.01F);
      
      Character character0 = Character.valueOf('=');
      assertNotNull(character0);
      assertEquals('=', (char)character0);
      
      boolean boolean0 = ArrayUtils.isSameLength((Object) null, (Object) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0093()  throws Throwable  {
      int int0 = ArrayUtils.lastIndexOf((float[]) null, 0.88169146F, 31);
      assertEquals((-1), int0);
      
      Long long0 = new Long(1358L);
      assertNotNull(long0);
      assertEquals(1358L, (long)long0);
      
      Long[] longArray0 = new Long[1];
      longArray0[0] = long0;
      Long[] longArray1 = ArrayUtils.subarray(longArray0, (-1), 2);
      assertEquals(1, longArray0.length);
      assertEquals(1, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
      
      char[] charArray0 = new char[5];
      charArray0[0] = 'Y';
      charArray0[1] = 'Y';
      charArray0[2] = 'Y';
      charArray0[3] = 'Y';
      charArray0[4] = 'Y';
      boolean boolean0 = ArrayUtils.isSorted(charArray0);
      assertArrayEquals(new char[] {'Y', 'Y', 'Y', 'Y', 'Y'}, charArray0);
      assertEquals(5, charArray0.length);
      assertTrue(boolean0);
      
      long[] longArray2 = ArrayUtils.addAll((long[]) null, (long[]) null);
      assertNull(longArray2);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = object0;
      ArrayUtils.reverse(objectArray0);
      assertEquals(1, objectArray0.length);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 2;
      doubleArray0[1] = (double) 2;
      long[] longArray3 = ArrayUtils.clone((long[]) null);
      assertNull(longArray3);
  }

  @Test(timeout = 4000)
  public void test0094()  throws Throwable  {
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short)560;
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      boolean boolean0 = ArrayUtils.isEmpty(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, true, true, false}, booleanArray0));
      assertEquals(4, booleanArray0.length);
      assertFalse(boolean0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((float[]) null, (float) (short)560, (int) (short)560);
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertNotNull(bitSet0);
  }

  @Test(timeout = 4000)
  public void test0095()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = 7;
      intArray0[1] = (-91);
      intArray0[2] = (-1938);
      intArray0[3] = (-395);
      intArray0[4] = 190;
      int int0 = ArrayUtils.lastIndexOf(intArray0, (-1938));
      assertArrayEquals(new int[] {7, (-91), (-1938), (-395), 190}, intArray0);
      assertEquals(5, intArray0.length);
      assertEquals(2, int0);
      
      boolean boolean0 = ArrayUtils.isEmpty((double[]) null);
      assertTrue(boolean0);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) 190;
      int int1 = ArrayUtils.lastIndexOf(longArray0, (long) (-395));
      assertArrayEquals(new long[] {190L}, longArray0);
      assertEquals(1, longArray0.length);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) 7;
      floatArray0[1] = (float) (-91);
      floatArray0[2] = (float) 190;
      floatArray0[3] = (-799.0F);
      floatArray0[4] = (float) 190L;
      floatArray0[5] = (-462.23038F);
      floatArray0[6] = (float) 2;
      int int2 = ArrayUtils.indexOf(floatArray0, 2.0F);
      assertArrayEquals(new float[] {7.0F, (-91.0F), 190.0F, (-799.0F), 190.0F, (-462.23038F), 2.0F}, floatArray0, 0.01F);
      assertEquals(7, floatArray0.length);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(6, int2);
      
      short[] shortArray0 = new short[0];
      ArrayUtils.shift(shortArray0, 386, 6, 6);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test0096()  throws Throwable  {
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)2;
      long[] longArray0 = new long[3];
      longArray0[0] = (long) (short)2;
      longArray0[2] = (long) (short)2;
      ArrayUtils.shift(longArray0, (int) (short)2, (int) (short)2, (-104));
      assertArrayEquals(new long[] {2L, 0L, 2L}, longArray0);
      assertEquals(3, longArray0.length);
      
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) 2L;
      objectArray0[1] = (Object) (short)2;
      String[] stringArray0 = ArrayUtils.toStringArray(objectArray0, "$1qKxJftd");
      assertEquals(2, objectArray0.length);
      assertEquals(2, stringArray0.length);
      assertNotNull(stringArray0);
      
      org.evosuite.runtime.Random.setNextRandom((-104));
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) (-104);
      doubleArray0[2] = (double) (-104);
      doubleArray0[3] = (double) (short)2;
      doubleArray0[4] = (double) 2L;
      doubleArray0[5] = (-1372.641369037911);
      doubleArray0[6] = (double) (short)2;
      doubleArray0[7] = (double) (-104);
      doubleArray0[8] = (double) (-104);
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (-770.15517), 108, 103.0);
      assertArrayEquals(new double[] {(-104.0), 0.0, (-104.0), 2.0, 2.0, (-1372.641369037911), 2.0, (-104.0), (-104.0)}, doubleArray0, 0.01);
      assertEquals(9, doubleArray0.length);
      assertEquals((-1), int0);
      
      ArrayUtils.swap(objectArray0, (int) (short)2, (-1));
      assertEquals(2, objectArray0.length);
      
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = false;
      booleanArray0[6] = false;
      booleanArray0[7] = true;
      // Undeclared exception!
      try { 
        ArrayUtils.remove(booleanArray0, (-1));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Length: 8
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0097()  throws Throwable  {
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)2;
      long[] longArray0 = new long[3];
      longArray0[0] = (long) (short)2;
      longArray0[2] = (long) (short)2;
      ArrayUtils.shift(longArray0, (int) (short)2, (int) (short)2, (-104));
      assertArrayEquals(new long[] {2L, 0L, 2L}, longArray0);
      assertEquals(3, longArray0.length);
      
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) 2L;
      objectArray0[1] = (Object) (short)2;
      String[] stringArray0 = ArrayUtils.toStringArray(objectArray0, "$1qKxJftd");
      assertEquals(2, objectArray0.length);
      assertEquals(2, stringArray0.length);
      assertNotNull(stringArray0);
      
      org.evosuite.runtime.Random.setNextRandom((-104));
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) (-104);
      doubleArray0[1] = (double) (short)2;
      doubleArray0[2] = (double) (-104);
      doubleArray0[3] = (double) (short)2;
      doubleArray0[4] = (double) 2L;
      doubleArray0[5] = (-1372.641369037911);
      doubleArray0[6] = (double) (short)2;
      doubleArray0[7] = (double) (-104);
      doubleArray0[8] = (double) (-104);
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (-770.15517), 108, 103.0);
      assertArrayEquals(new double[] {(-104.0), 2.0, (-104.0), 2.0, 2.0, (-1372.641369037911), 2.0, (-104.0), (-104.0)}, doubleArray0, 0.01);
      assertEquals(9, doubleArray0.length);
      assertEquals((-1), int0);
      
      ArrayUtils.swap(objectArray0, (int) (short)2, (-1));
      assertEquals(2, objectArray0.length);
      
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = false;
      booleanArray0[6] = false;
      booleanArray0[7] = true;
      // Undeclared exception!
      try { 
        ArrayUtils.remove(booleanArray0, (-1));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Length: 8
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0098()  throws Throwable  {
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short) (-1);
      shortArray0[1] = (short)43;
      char[] charArray0 = new char[7];
      charArray0[0] = 'E';
      charArray0[1] = '0';
      charArray0[2] = '0';
      charArray0[3] = '0';
      charArray0[4] = '0';
      long[] longArray0 = new long[4];
      longArray0[0] = (long) (short) (-1);
      longArray0[1] = (long) (short) (-1);
      longArray0[2] = (long) '0';
      longArray0[3] = (long) 'E';
      boolean boolean0 = ArrayUtils.isSorted(longArray0);
      assertArrayEquals(new long[] {(-1L), (-1L), 48L, 69L}, longArray0);
      assertEquals(4, longArray0.length);
      assertTrue(boolean0);
      
      ArrayUtils.reverse(longArray0);
      assertArrayEquals(new long[] {69L, 48L, (-1L), (-1L)}, longArray0);
      assertEquals(4, longArray0.length);
      
      Object[] objectArray0 = ArrayUtils.nullToEmpty((Object[]) null);
      assertEquals(0, objectArray0.length);
      assertNotNull(objectArray0);
      
      long[] longArray1 = ArrayUtils.subarray(longArray0, (int) (short) (-1), (int) (short)993);
      assertArrayEquals(new long[] {69L, 48L, (-1L), (-1L)}, longArray1);
      assertArrayEquals(new long[] {69L, 48L, (-1L), (-1L)}, longArray0);
      assertEquals(4, longArray1.length);
      assertEquals(4, longArray0.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray0, longArray1);
      assertNotNull(longArray1);
  }

  @Test(timeout = 4000)
  public void test0099()  throws Throwable  {
      short[] shortArray0 = new short[10];
      shortArray0[0] = (short)560;
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 747.5634250569213;
      doubleArray0[1] = (-3818.7033228008);
      boolean boolean0 = ArrayUtils.contains(doubleArray0, (double) (short)560, 1.0);
      assertArrayEquals(new double[] {747.5634250569213, (-3818.7033228008)}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      assertFalse(boolean0);
      
      char[] charArray0 = new char[4];
      charArray0[0] = '$';
      charArray0[1] = 'W';
      charArray0[2] = 't';
      charArray0[3] = '[';
      BitSet bitSet0 = ArrayUtils.indexesOf(charArray0, ' ');
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertArrayEquals(new char[] {'$', 'W', 't', '['}, charArray0);
      assertEquals(4, charArray0.length);
      assertNotNull(bitSet0);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      boolean boolean1 = ArrayUtils.isSorted(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray0));
      assertEquals(3, booleanArray0.length);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test0100()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      Object object0 = new Object();
      assertNotNull(object0);
      
      Character character0 = new Character('Y');
      assertNotNull(character0);
      assertEquals('Y', (char)character0);
      
      Object object1 = ArrayUtils.get(objectArray0, (-4274), (Object) character0);
      assertEquals(2, objectArray0.length);
      assertNotNull(object1);
      assertEquals('Y', object1);
      
      Double double0 = new Double((-4274));
      assertNotNull(double0);
      assertEquals((-4274.0), (double)double0, 0.01);
      
      int int0 = ArrayUtils.indexOf(objectArray0, (Object) double0, (-4274));
      assertEquals(2, objectArray0.length);
      assertEquals((-1), int0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-28);
      byteArray0[1] = (byte)36;
      byteArray0[2] = (byte)82;
      byte[] byteArray1 = ArrayUtils.clone(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-28), (byte)36, (byte)82}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-28), (byte)36, (byte)82}, byteArray1);
      assertEquals(3, byteArray0.length);
      assertEquals(3, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      
      String[] stringArray0 = ArrayUtils.toStringArray(objectArray0, "kM1*<#]DD55");
      assertEquals(2, objectArray0.length);
      assertEquals(2, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test0101()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = Double.NaN;
      doubleArray0[1] = 183.9184337488;
      doubleArray0[2] = 430.358063;
      int int0 = ArrayUtils.indexOf(doubleArray0, 183.9184337488, 5465.04561419);
      assertArrayEquals(new double[] {Double.NaN, 183.9184337488, 430.358063}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(1, int0);
      
      float[] floatArray0 = new float[9];
      floatArray0[0] = (-576.8279F);
      floatArray0[1] = (float) 1;
      floatArray0[2] = (float) 1;
      floatArray0[3] = (float) 1;
      floatArray0[4] = (float) 1;
      floatArray0[5] = (float) 1;
      floatArray0[6] = (float) 1;
      floatArray0[7] = (float) 1;
      floatArray0[8] = (float) 1;
      int int1 = ArrayUtils.lastIndexOf(floatArray0, (-2005.7074F), 1);
      assertArrayEquals(new float[] {(-576.8279F), 1.0F, 1.0F, 1.0F, 1.0F, 1.0F, 1.0F, 1.0F, 1.0F}, floatArray0, 0.01F);
      assertEquals(9, floatArray0.length);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      Float[] floatArray1 = new Float[2];
      floatArray1[0] = (Float) (-576.8279F);
      floatArray1[1] = (Float) 1.0F;
      float[] floatArray2 = ArrayUtils.toPrimitive(floatArray1);
      assertArrayEquals(new float[] {(-576.8279F), 1.0F}, floatArray2, 0.01F);
      assertEquals(2, floatArray1.length);
      assertEquals(2, floatArray2.length);
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertNotSame(floatArray2, floatArray0);
      assertNotNull(floatArray2);
  }

  @Test(timeout = 4000)
  public void test0102()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      ArrayUtils.swap(doubleArray0, 2147483636, Integer.MAX_VALUE, 2147483636);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      boolean boolean0 = ArrayUtils.contains((boolean[]) null, true);
      assertFalse(boolean0);
      
      long[] longArray0 = new long[8];
      longArray0[0] = (long) 347;
      longArray0[1] = (long) Integer.MAX_VALUE;
      longArray0[2] = (long) 347;
      longArray0[3] = (long) (-1256);
      longArray0[4] = (long) 347;
      longArray0[5] = (long) Integer.MAX_VALUE;
      longArray0[6] = (long) 2147483636;
      longArray0[7] = (long) 2147483636;
      ArrayUtils.shift(longArray0, (-1076), 6, (-1076));
      assertArrayEquals(new long[] {347L, (-1256L), 347L, 2147483647L, 347L, 2147483647L, 2147483636L, 2147483636L}, longArray0);
      assertEquals(8, longArray0.length);
      
      long[] longArray1 = ArrayUtils.subarray(longArray0, 0, (-1076));
      assertArrayEquals(new long[] {347L, (-1256L), 347L, 2147483647L, 347L, 2147483647L, 2147483636L, 2147483636L}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertEquals(8, longArray0.length);
      assertEquals(0, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
      
      ArrayUtils.reverse(doubleArray0, 2570, 0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test0103()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)1;
      byteArray0[2] = (byte) (-22);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)2;
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (byte)1;
      doubleArray0[1] = (double) (byte)2;
      ArrayUtils.shuffle(doubleArray0);
      assertArrayEquals(new double[] {2.0, 1.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      
      ArrayUtils.shift(doubleArray0, (int) (byte)2, (int) (byte)2, (int) (byte)79);
      assertArrayEquals(new double[] {2.0, 1.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) (byte)2;
      floatArray0[1] = (float) (byte)1;
      floatArray0[2] = (float) (byte)2;
      int int0 = ArrayUtils.indexOf(floatArray0, (float) (byte)1, (int) (byte)0);
      assertArrayEquals(new float[] {2.0F, 1.0F, 2.0F}, floatArray0, 0.01F);
      assertEquals(3, floatArray0.length);
      assertEquals(1, int0);
      
      char[] charArray0 = new char[5];
      charArray0[0] = '#';
      charArray0[1] = ':';
      charArray0[2] = '|';
      charArray0[3] = '&';
      charArray0[4] = ';';
      ArrayUtils.swap(charArray0, (int) (byte)2, 1, (-555));
      assertArrayEquals(new char[] {'#', ':', '|', '&', ';'}, charArray0);
      assertEquals(5, charArray0.length);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (byte)1;
      shortArray0[1] = (short) (byte)0;
      short[] shortArray1 = ArrayUtils.nullToEmpty(shortArray0);
      assertArrayEquals(new short[] {(short)1, (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)1, (short)0}, shortArray1);
      assertEquals(2, shortArray0.length);
      assertEquals(2, shortArray1.length);
      assertSame(shortArray0, shortArray1);
      assertSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      
      Character[] characterArray0 = new Character[8];
      Character character0 = new Character('#');
      assertNotNull(character0);
      assertEquals('#', (char)character0);
      
      characterArray0[0] = character0;
      characterArray0[1] = (Character) ':';
      characterArray0[2] = (Character) '&';
      characterArray0[3] = (Character) ':';
      characterArray0[4] = (Character) ':';
      Character character1 = Character.valueOf('Z');
      assertFalse(character1.equals((Object)character0));
      assertNotNull(character1);
      assertEquals('Z', (char)character1);
      
      characterArray0[5] = character1;
      characterArray0[6] = (Character) ':';
      characterArray0[7] = (Character) '|';
      Character[] characterArray1 = ArrayUtils.nullToEmpty(characterArray0);
      assertEquals(8, characterArray1.length);
      assertEquals(8, characterArray0.length);
      assertSame(characterArray1, characterArray0);
      assertSame(characterArray0, characterArray1);
      assertNotNull(characterArray1);
  }

  @Test(timeout = 4000)
  public void test0104()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 1.0F;
      doubleArray0[1] = 1.0;
      boolean boolean0 = ArrayUtils.isSameLength(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {1.0, 1.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      assertTrue(boolean0);
      
      char[] charArray0 = new char[13];
      charArray0[0] = ':';
      Character[] characterArray0 = ArrayUtils.toObject((char[]) null);
      assertNull(characterArray0);
      
      float[] floatArray0 = new float[9];
      floatArray0[0] = 1.0F;
      floatArray0[1] = (float) 338;
      floatArray0[2] = (float) 338;
      floatArray0[3] = (float) 338;
      floatArray0[4] = (float) ':';
      floatArray0[5] = (float) 338;
      floatArray0[6] = (float) ':';
      floatArray0[7] = (-1.0F);
      floatArray0[8] = (float) 338;
      ArrayUtils.shift(floatArray0, (-557), 2147483636, 9);
      assertArrayEquals(new float[] {1.0F, 338.0F, 338.0F, 338.0F, 58.0F, 338.0F, 58.0F, (-1.0F), 338.0F}, floatArray0, 0.01F);
      assertEquals(9, floatArray0.length);
      
      ArrayUtils.reverse(charArray0, 0, 9);
      assertEquals(13, charArray0.length);
      
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = true;
      booleanArray0[2] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      booleanArray0[3] = true;
      Boolean[] booleanArray1 = ArrayUtils.toObject(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, false, true, true, true, true, false}, booleanArray0));
      assertEquals(7, booleanArray0.length);
      assertEquals(7, booleanArray1.length);
      assertNotNull(booleanArray1);
      
      Float[] floatArray1 = ArrayUtils.toObject(floatArray0);
      assertArrayEquals(new float[] {1.0F, 338.0F, 338.0F, 338.0F, 58.0F, 338.0F, 58.0F, (-1.0F), 338.0F}, floatArray0, 0.01F);
      assertEquals(9, floatArray0.length);
      assertEquals(9, floatArray1.length);
      assertNotNull(floatArray1);
      
      double[] doubleArray1 = ArrayUtils.addAll(doubleArray0, (double[]) null);
      assertArrayEquals(new double[] {1.0, 1.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0, 1.0}, doubleArray1, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
  }

  @Test(timeout = 4000)
  public void test0105()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)1;
      char[] charArray0 = ArrayUtils.toPrimitive((Character[]) null);
      assertNull(charArray0);
      
      int[] intArray0 = new int[1];
      intArray0[0] = (int) (byte)1;
      int int0 = ArrayUtils.indexOf(intArray0, (int) (byte)1);
      assertArrayEquals(new int[] {1}, intArray0);
      assertEquals(1, intArray0.length);
      assertEquals(0, int0);
      
      Double double0 = new Double(1993.78891368);
      assertNotNull(double0);
      assertEquals(1993.78891368, (double)double0, 0.01);
      
      Double double1 = new Double(2122);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      assertEquals(2122.0, (double)double1, 0.01);
      
      AbstractMap.SimpleImmutableEntry<Double, Double> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Double, Double>(double0, double1);
      assertNotEquals((double)double0, (double)double1, 0.01);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertNotNull(abstractMap_SimpleImmutableEntry0);
      
      AbstractMap.SimpleImmutableEntry<Double, Double>[] abstractMap_SimpleImmutableEntryArray0 = (AbstractMap.SimpleImmutableEntry<Double, Double>[]) Array.newInstance(AbstractMap.SimpleImmutableEntry.class, 2);
      abstractMap_SimpleImmutableEntryArray0[0] = abstractMap_SimpleImmutableEntry0;
      abstractMap_SimpleImmutableEntryArray0[1] = abstractMap_SimpleImmutableEntry0;
      Comparator<AbstractMap.SimpleImmutableEntry<Double, Double>> comparator0 = (Comparator<AbstractMap.SimpleImmutableEntry<Double, Double>>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator0).compare(any(java.util.AbstractMap.SimpleImmutableEntry.class) , any(java.util.AbstractMap.SimpleImmutableEntry.class));
      boolean boolean0 = ArrayUtils.isSorted(abstractMap_SimpleImmutableEntryArray0, comparator0);
      assertEquals(2, abstractMap_SimpleImmutableEntryArray0.length);
      assertTrue(boolean0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((char[]) null, '#', 65536);
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertNotNull(bitSet0);
      
      int[] intArray1 = ArrayUtils.nullToEmpty(intArray0);
      assertArrayEquals(new int[] {1}, intArray0);
      assertArrayEquals(new int[] {1}, intArray1);
      assertEquals(1, intArray0.length);
      assertEquals(1, intArray1.length);
      assertSame(intArray0, intArray1);
      assertSame(intArray1, intArray0);
      assertNotNull(intArray1);
  }

  @Test(timeout = 4000)
  public void test0106()  throws Throwable  {
      long[] longArray0 = new long[3];
      longArray0[2] = (long) 0;
      long[] longArray1 = ArrayUtils.removeAllOccurrences(longArray0, (long) 0);
      assertArrayEquals(new long[] {0L, 0L, 0L}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertEquals(3, longArray0.length);
      assertEquals(0, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
      
      ArrayUtils.shift(longArray0, 0);
      assertArrayEquals(new long[] {0L, 0L, 0L}, longArray0);
      assertEquals(3, longArray0.length);
      assertFalse(longArray0.equals((Object)longArray1));
      assertNotSame(longArray0, longArray1);
      
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = ArrayUtils.removeElement(booleanArray0, false);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = ArrayUtils.toPrimitive(object0);
      assertSame(object0, object1);
      assertSame(object1, object0);
      assertNotNull(object1);
      
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = object0;
      objectArray0[1] = object0;
      objectArray0[2] = object0;
      objectArray0[3] = object0;
      Object object2 = ArrayUtils.toPrimitive(object0);
      assertSame(object0, object2);
      assertSame(object0, object1);
      assertSame(object2, object1);
      assertSame(object2, object0);
      assertNotNull(object2);
      
      objectArray0[4] = object2;
      objectArray0[5] = object0;
      objectArray0[6] = object1;
      Object[] objectArray1 = ArrayUtils.add(objectArray0, object0);
      assertEquals(9, objectArray1.length);
      assertEquals(8, objectArray0.length);
      assertFalse(objectArray1.equals((Object)objectArray0));
      assertNotSame(objectArray1, objectArray0);
      assertSame(object0, object2);
      assertSame(object0, object1);
      assertNotSame(objectArray0, objectArray1);
      assertNotNull(objectArray1);
  }

  @Test(timeout = 4000)
  public void test0107()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-1879.65321429455);
      doubleArray0[1] = 83.07510094955252;
      doubleArray0[2] = (-1.0);
      doubleArray0[3] = 1291.0;
      doubleArray0[4] = (-1550.9459722681);
      doubleArray0[5] = (-2009.0);
      Double[] doubleArray1 = ArrayUtils.toObject(doubleArray0);
      assertArrayEquals(new double[] {(-1879.65321429455), 83.07510094955252, (-1.0), 1291.0, (-1550.9459722681), (-2009.0)}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertNotNull(doubleArray1);
      
      Float[] floatArray0 = new Float[5];
      Float float0 = new Float((-2009.0));
      assertNotNull(float0);
      assertEquals((-2009.0F), (float)float0, 0.01F);
      
      floatArray0[0] = float0;
      Float float1 = new Float((-2009.0));
      assertEquals((float)float1, (float)float0, 0.01F);
      assertNotNull(float1);
      assertEquals((-2009.0F), (float)float1, 0.01F);
      
      floatArray0[1] = float1;
      Float float2 = new Float((float) floatArray0[1]);
      assertEquals(5, floatArray0.length);
      assertEquals((float)float2, (float)float1, 0.01F);
      assertEquals((float)float2, (float)float0, 0.01F);
      assertNotNull(float2);
      assertEquals((-2009.0F), (float)float2, 0.01F);
      
      floatArray0[2] = float2;
      Float float3 = new Float(1939.9388391273853);
      assertNotEquals((float)float3, (float)float1, 0.01F);
      assertNotEquals((float)float3, (float)float0, 0.01F);
      assertNotEquals((float)float3, (float)float2, 0.01F);
      assertNotNull(float3);
      assertEquals(1939.9388F, (float)float3, 0.01F);
      
      floatArray0[3] = float3;
      Float float4 = new Float((-3224.098F));
      assertNotEquals((float)float4, (float)float0, 0.01F);
      assertNotEquals((float)float4, (float)float3, 0.01F);
      assertNotEquals((float)float4, (float)float2, 0.01F);
      assertNotEquals((float)float4, (float)float1, 0.01F);
      assertNotNull(float4);
      assertEquals((-3224.098F), (float)float4, 0.01F);
      
      floatArray0[4] = float4;
      Float[] floatArray1 = ArrayUtils.nullToEmpty(floatArray0);
      assertEquals(5, floatArray1.length);
      assertEquals(5, floatArray0.length);
      assertSame(floatArray1, floatArray0);
      assertSame(floatArray0, floatArray1);
      assertNotNull(floatArray1);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (-1105);
      short[] shortArray1 = ArrayUtils.nullToEmpty(shortArray0);
      assertArrayEquals(new short[] {(short) (-1105)}, shortArray0);
      assertArrayEquals(new short[] {(short) (-1105)}, shortArray1);
      assertEquals(1, shortArray0.length);
      assertEquals(1, shortArray1.length);
      assertSame(shortArray0, shortArray1);
      assertSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      
      String[] stringArray0 = new String[6];
      stringArray0[0] = "org.apache.commons.lang3.ArrayUtils";
      stringArray0[1] = "O#[Eu";
      stringArray0[2] = "OAgw1dr";
      stringArray0[3] = "36k&z;SuT~48&";
      stringArray0[4] = "S^>O =";
      stringArray0[5] = "GrBXP(Mzox~,ab";
      String[] stringArray1 = ArrayUtils.add(stringArray0, "O#[Eu");
      assertEquals(6, stringArray0.length);
      assertEquals(7, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertNotNull(stringArray1);
  }

  @Test(timeout = 4000)
  public void test0108()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      Short[] shortArray0 = new Short[9];
      short short0 = (short) (-1);
      Short short1 = new Short((short) (-1));
      assertTrue(short1.equals((Object)short0));
      assertNotNull(short1);
      assertEquals((short) (-1), (short)short1);
      
      shortArray0[0] = short1;
      Short short2 = new Short(short0);
      assertTrue(short2.equals((Object)short0));
      assertTrue(short2.equals((Object)short1));
      assertNotNull(short2);
      assertEquals((short) (-1), (short)short2);
      
      shortArray0[1] = short2;
      Short short3 = new Short((short) (-32));
      assertFalse(short3.equals((Object)short0));
      assertFalse(short3.equals((Object)short1));
      assertFalse(short3.equals((Object)short2));
      assertNotNull(short3);
      assertEquals((short) (-32), (short)short3);
      
      shortArray0[3] = short3;
      Short short4 = new Short(short0);
      assertTrue(short4.equals((Object)short0));
      assertTrue(short4.equals((Object)short2));
      assertTrue(short4.equals((Object)short1));
      assertFalse(short4.equals((Object)short3));
      assertNotNull(short4);
      assertEquals((short) (-1), (short)short4);
      
      shortArray0[3] = short4;
      short short5 = (short)2;
      Short short6 = new Short((short)2);
      assertFalse(short6.equals((Object)short3));
      assertTrue(short6.equals((Object)short5));
      assertFalse(short6.equals((Object)short2));
      assertFalse(short6.equals((Object)short4));
      assertFalse(short6.equals((Object)short0));
      assertFalse(short6.equals((Object)short1));
      assertNotNull(short6);
      assertEquals((short)2, (short)short6);
      
      shortArray0[4] = short6;
      short short7 = (short)775;
      Short short8 = new Short((short)775);
      assertFalse(short8.equals((Object)short5));
      assertFalse(short8.equals((Object)short1));
      assertFalse(short8.equals((Object)short2));
      assertFalse(short8.equals((Object)short4));
      assertFalse(short8.equals((Object)short6));
      assertFalse(short8.equals((Object)short0));
      assertFalse(short8.equals((Object)short3));
      assertTrue(short8.equals((Object)short7));
      assertNotNull(short8);
      assertEquals((short)775, (short)short8);
      
      shortArray0[5] = short8;
      Short short9 = new Short((short)321);
      assertFalse(short9.equals((Object)short6));
      assertFalse(short9.equals((Object)short8));
      assertFalse(short9.equals((Object)short0));
      assertFalse(short9.equals((Object)short2));
      assertFalse(short9.equals((Object)short1));
      assertFalse(short9.equals((Object)short3));
      assertFalse(short9.equals((Object)short7));
      assertFalse(short9.equals((Object)short5));
      assertFalse(short9.equals((Object)short4));
      assertNotNull(short9);
      assertEquals((short)321, (short)short9);
      
      shortArray0[6] = short9;
      Short short10 = new Short((short) shortArray0[6]);
      assertEquals(9, shortArray0.length);
      assertTrue(short10.equals((Object)short9));
      assertFalse(short10.equals((Object)short3));
      assertFalse(short10.equals((Object)short2));
      assertFalse(short10.equals((Object)short6));
      assertFalse(short10.equals((Object)short7));
      assertFalse(short10.equals((Object)short8));
      assertFalse(short10.equals((Object)short4));
      assertFalse(short10.equals((Object)short5));
      assertFalse(short10.equals((Object)short0));
      assertFalse(short10.equals((Object)short1));
      assertNotNull(short10);
      assertEquals((short)321, (short)short10);
      
      shortArray0[7] = short10;
      Short short11 = new Short((short) shortArray0[6]);
      assertEquals(9, shortArray0.length);
      assertFalse(short11.equals((Object)short6));
      assertFalse(short11.equals((Object)short8));
      assertFalse(short11.equals((Object)short5));
      assertFalse(short11.equals((Object)short4));
      assertTrue(short11.equals((Object)short9));
      assertFalse(short11.equals((Object)short3));
      assertTrue(short11.equals((Object)short10));
      assertFalse(short11.equals((Object)short7));
      assertFalse(short11.equals((Object)short0));
      assertFalse(short11.equals((Object)short2));
      assertFalse(short11.equals((Object)short1));
      assertNotNull(short11);
      assertEquals((short)321, (short)short11);
      
      shortArray0[8] = short11;
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0, (short)321);
      assertArrayEquals(new short[] {(short) (-1), (short) (-1), (short)321, (short) (-1), (short)2, (short)775, (short)321, (short)321, (short)321}, shortArray1);
      assertEquals(9, shortArray0.length);
      assertEquals(9, shortArray1.length);
      assertNotNull(shortArray1);
      
      // Undeclared exception!
      try { 
        ArrayUtils.remove(booleanArray0, (int) (short)321);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 321, Length: 7
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0109()  throws Throwable  {
      BitSet bitSet0 = new BitSet();
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertNotNull(bitSet0);
      
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short)866;
      shortArray0[1] = (short)2533;
      shortArray0[2] = (short) (-261);
      shortArray0[3] = (short)5;
      shortArray0[4] = (short)3508;
      shortArray0[5] = (short)9;
      BitSet bitSet1 = ArrayUtils.indexesOf(shortArray0, (short)2818, (-2157));
      assertEquals(64, bitSet1.size());
      assertEquals("{}", bitSet1.toString());
      assertEquals(0, bitSet1.length());
      assertTrue(bitSet1.isEmpty());
      assertEquals(0, bitSet1.cardinality());
      assertArrayEquals(new short[] {(short)866, (short)2533, (short) (-261), (short)5, (short)3508, (short)9}, shortArray0);
      assertEquals(6, shortArray0.length);
      assertTrue(bitSet1.equals((Object)bitSet0));
      assertNotSame(bitSet1, bitSet0);
      assertNotNull(bitSet1);
      
      bitSet0.and(bitSet1);
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet1.size());
      assertEquals("{}", bitSet1.toString());
      assertEquals(0, bitSet1.length());
      assertTrue(bitSet1.isEmpty());
      assertEquals(0, bitSet1.cardinality());
      assertArrayEquals(new short[] {(short)866, (short)2533, (short) (-261), (short)5, (short)3508, (short)9}, shortArray0);
      assertEquals(6, shortArray0.length);
      assertTrue(bitSet0.equals((Object)bitSet1));
      assertTrue(bitSet1.equals((Object)bitSet0));
      assertNotSame(bitSet0, bitSet1);
      assertNotSame(bitSet1, bitSet0);
      
      ArrayUtils.hashCode((Object) bitSet0);
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.equals((Object)bitSet1));
      assertNotSame(bitSet0, bitSet1);
      
      short short0 = (short)2;
      Short short1 = new Short((short)2);
      assertTrue(short1.equals((Object)short0));
      assertNotNull(short1);
      assertEquals((short)2, (short)short1);
      
      Short[] shortArray1 = new Short[6];
      shortArray1[0] = short1;
      shortArray1[1] = short1;
      shortArray1[2] = short1;
      shortArray1[4] = short1;
      shortArray1[5] = short1;
      short[] shortArray2 = ArrayUtils.toPrimitive(shortArray1, (short)1);
      assertArrayEquals(new short[] {(short)2, (short)2, (short)2, (short)1, (short)2, (short)2}, shortArray2);
      assertEquals(6, shortArray2.length);
      assertEquals(6, shortArray1.length);
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertNotSame(shortArray2, shortArray0);
      assertNotNull(shortArray2);
      
      short[] shortArray3 = new short[4];
      assertFalse(shortArray3.equals((Object)shortArray2));
      assertFalse(shortArray3.equals((Object)shortArray0));
      
      shortArray3[0] = short0;
      shortArray3[1] = (short)2818;
      shortArray3[2] = short0;
      shortArray3[3] = short0;
      short[] shortArray4 = ArrayUtils.clone(shortArray3);
      assertArrayEquals(new short[] {(short)2, (short)2818, (short)2, (short)2}, shortArray3);
      assertArrayEquals(new short[] {(short)2, (short)2818, (short)2, (short)2}, shortArray4);
      assertEquals(4, shortArray3.length);
      assertEquals(4, shortArray4.length);
      assertFalse(shortArray3.equals((Object)shortArray2));
      assertFalse(shortArray3.equals((Object)shortArray0));
      assertFalse(shortArray4.equals((Object)shortArray3));
      assertFalse(shortArray4.equals((Object)shortArray2));
      assertFalse(shortArray4.equals((Object)shortArray0));
      assertNotSame(shortArray3, shortArray2);
      assertNotSame(shortArray3, shortArray0);
      assertNotSame(shortArray3, shortArray4);
      assertNotSame(shortArray4, shortArray3);
      assertNotSame(shortArray4, shortArray2);
      assertNotSame(shortArray4, shortArray0);
      assertNotNull(shortArray4);
  }

  @Test(timeout = 4000)
  public void test0110()  throws Throwable  {
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) 971;
      floatArray0[1] = (-1.0F);
      floatArray0[2] = (float) 4;
      floatArray0[3] = (float) 0;
      floatArray0[4] = (float) 0;
      floatArray0[5] = (float) 0;
      floatArray0[6] = (float) 0;
      floatArray0[7] = (float) 0;
      floatArray0[8] = (float) 0;
      ArrayUtils.swap(floatArray0, (-1), 454, 18688);
      assertArrayEquals(new float[] {971.0F, (-1.0F), 4.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(9, floatArray0.length);
      
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short)5558;
      shortArray0[1] = (short)5558;
      shortArray0[2] = (short) (-2906);
      shortArray0[3] = (short)1697;
      shortArray0[4] = (short)8856;
      shortArray0[5] = (short)845;
      shortArray0[6] = (short)37;
      shortArray0[7] = (short)892;
      short[] shortArray1 = ArrayUtils.subarray(shortArray0, (int) (short)37, 1);
      assertArrayEquals(new short[] {}, shortArray1);
      assertArrayEquals(new short[] {(short)5558, (short)5558, (short) (-2906), (short)1697, (short)8856, (short)845, (short)37, (short)892}, shortArray0);
      assertEquals(0, shortArray1.length);
      assertEquals(8, shortArray0.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertNotNull(shortArray1);
      
      Long[] longArray0 = new Long[7];
      Long long0 = new Long((short)37);
      assertNotNull(long0);
      assertEquals(37L, (long)long0);
      
      longArray0[0] = long0;
      Long long1 = new Long((-1L));
      assertFalse(long1.equals((Object)long0));
      assertNotNull(long1);
      assertEquals((-1L), (long)long1);
      
      longArray0[1] = long1;
      Long long2 = Long.getLong("VLw8Up48E>XLBT7");
      assertNull(long2);
      
      longArray0[2] = null;
      Long long3 = new Long((-2147483648L));
      assertFalse(long3.equals((Object)long0));
      assertFalse(long3.equals((Object)long1));
      assertNotNull(long3);
      assertEquals((-2147483648L), (long)long3);
      
      longArray0[3] = long3;
      Long long4 = new Long(4);
      assertFalse(long4.equals((Object)long3));
      assertFalse(long4.equals((Object)long0));
      assertFalse(long4.equals((Object)long1));
      assertNotNull(long4);
      assertEquals(4L, (long)long4);
      
      longArray0[4] = long4;
      Long long5 = Long.valueOf((long) 18688);
      assertFalse(long5.equals((Object)long1));
      assertFalse(long5.equals((Object)long4));
      assertFalse(long5.equals((Object)long0));
      assertFalse(long5.equals((Object)long3));
      assertNotNull(long5);
      assertEquals(18688L, (long)long5);
      
      longArray0[5] = long5;
      Long long6 = new Long((-2734L));
      assertFalse(long6.equals((Object)long1));
      assertFalse(long6.equals((Object)long4));
      assertFalse(long6.equals((Object)long5));
      assertFalse(long6.equals((Object)long0));
      assertFalse(long6.equals((Object)long3));
      assertNotNull(long6);
      assertEquals((-2734L), (long)long6);
      
      longArray0[6] = long6;
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0, (-2682L));
      assertArrayEquals(new long[] {37L, (-1L), (-2682L), (-2147483648L), 4L, 18688L, (-2734L)}, longArray1);
      assertEquals(7, longArray1.length);
      assertEquals(7, longArray0.length);
      assertNotNull(longArray1);
  }

  @Test(timeout = 4000)
  public void test0111()  throws Throwable  {
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short)560;
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      int int0 = ArrayUtils.indexOf((boolean[]) null, false, 6);
      assertEquals((-1), int0);
      
      Short short0 = new Short((short)560);
      assertNotNull(short0);
      assertEquals((short)560, (short)short0);
      
      Short short1 = new Short((short) (-583));
      assertFalse(short1.equals((Object)short0));
      assertNotNull(short1);
      assertEquals((short) (-583), (short)short1);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(shortArray0, (short)997, 856);
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertArrayEquals(new short[] {(short)560, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertEquals(6, shortArray0.length);
      assertNotNull(bitSet0);
      
      int int1 = ArrayUtils.hashCode((Object) null);
      assertFalse(int1 == int0);
      
      Short[] shortArray1 = new Short[0];
      short[] shortArray2 = ArrayUtils.toPrimitive(shortArray1, (short)997);
      assertArrayEquals(new short[] {}, shortArray2);
      assertEquals(0, shortArray1.length);
      assertEquals(0, shortArray2.length);
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertNotSame(shortArray2, shortArray0);
      assertNotNull(shortArray2);
  }

  @Test(timeout = 4000)
  public void test0112()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 2798.735380718;
      ArrayUtils.swap(doubleArray0, 9, 9, 1489);
      assertArrayEquals(new double[] {2798.735380718, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      
      Integer[] integerArray0 = new Integer[4];
      Integer integer0 = new Integer(9);
      assertNotNull(integer0);
      assertEquals(9, (int)integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(176);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(176, (int)integer1);
      
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(17);
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      assertNotNull(integer2);
      assertEquals(17, (int)integer2);
      
      Integer integer3 = new Integer((-607));
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer2));
      assertNotNull(integer3);
      assertEquals((-607), (int)integer3);
      
      integerArray0[3] = integer3;
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0, 3829);
      assertArrayEquals(new int[] {9, 176, 3829, (-607)}, intArray0);
      assertEquals(4, integerArray0.length);
      assertEquals(4, intArray0.length);
      assertNotNull(intArray0);
      
      boolean boolean0 = ArrayUtils.contains(intArray0, 2864);
      assertArrayEquals(new int[] {9, 176, 3829, (-607)}, intArray0);
      assertEquals(4, integerArray0.length);
      assertEquals(4, intArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0113()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (short) (-13);
      doubleArray0[1] = (double) (short) (-13);
      ArrayUtils.swap(doubleArray0, 1383, (int) (short) (-13), 1642);
      assertArrayEquals(new double[] {(-13.0), (-13.0)}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      
      int[] intArray0 = ArrayUtils.toPrimitive((Integer[]) null, 594);
      assertNull(intArray0);
      
      boolean boolean0 = ArrayUtils.contains((int[]) null, (-2530));
      assertFalse(boolean0);
      
      char[] charArray0 = new char[9];
      charArray0[0] = 'Z';
      charArray0[1] = 'm';
      charArray0[2] = 'W';
      charArray0[3] = 'z';
      charArray0[4] = 'f';
      charArray0[5] = '<';
      charArray0[6] = 'X';
      charArray0[7] = 'U';
      charArray0[8] = '9';
      char[] charArray1 = ArrayUtils.addFirst(charArray0, '{');
      assertArrayEquals(new char[] {'{', 'Z', 'm', 'W', 'z', 'f', '<', 'X', 'U', '9'}, charArray1);
      assertArrayEquals(new char[] {'Z', 'm', 'W', 'z', 'f', '<', 'X', 'U', '9'}, charArray0);
      assertEquals(10, charArray1.length);
      assertEquals(9, charArray0.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray0, charArray1);
      assertNotNull(charArray1);
  }

  @Test(timeout = 4000)
  public void test0114()  throws Throwable  {
      int int0 = ArrayUtils.lastIndexOf((float[]) null, 1.0F, 31);
      assertEquals((-1), int0);
      
      ArrayUtils.swap((byte[]) null, Integer.MAX_VALUE, 1920, 1920);
      double[] doubleArray0 = new double[2];
      doubleArray0[1] = (double) (short) (-33);
      double[] doubleArray1 = ArrayUtils.removeAllOccurences(doubleArray0, (-1.0));
      assertArrayEquals(new double[] {0.0, (-33.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, (-33.0)}, doubleArray1, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      
      boolean boolean0 = ArrayUtils.isSorted(doubleArray0);
      assertArrayEquals(new double[] {0.0, (-33.0)}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotSame(doubleArray0, doubleArray1);
      assertFalse(boolean0);
      
      Boolean boolean1 = new Boolean(false);
      assertTrue(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      assertFalse(boolean1);
      
      boolean boolean2 = ArrayUtils.contains((boolean[]) null, false);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (byte)1;
      boolean boolean3 = ArrayUtils.isSorted(shortArray0);
      assertArrayEquals(new short[] {(short)1}, shortArray0);
      assertEquals(1, shortArray0.length);
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3);
      
      int[] intArray0 = new int[0];
      double[] doubleArray2 = ArrayUtils.removeAll(doubleArray0, intArray0);
      assertArrayEquals(new double[] {0.0, (-33.0)}, doubleArray0, 0.01);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new double[] {0.0, (-33.0)}, doubleArray2, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(0, intArray0.length);
      assertEquals(2, doubleArray2.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotNull(doubleArray2);
      
      int[] intArray1 = ArrayUtils.toPrimitive((Integer[]) null, (int) (short)1);
      assertNull(intArray1);
      
      boolean boolean4 = ArrayUtils.contains((int[]) null, (-89));
      assertTrue(boolean4 == boolean2);
      assertTrue(boolean4 == boolean0);
      assertFalse(boolean4 == boolean3);
      assertFalse(boolean4);
  }

  @Test(timeout = 4000)
  public void test0115()  throws Throwable  {
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short) (-1);
      shortArray0[1] = (short)43;
      char[] charArray0 = new char[7];
      charArray0[0] = 'E';
      charArray0[1] = '0';
      charArray0[2] = '0';
      charArray0[3] = '0';
      charArray0[4] = '0';
      charArray0[5] = '0';
      charArray0[6] = '0';
      char[] charArray1 = ArrayUtils.removeElement(charArray0, ' ');
      assertArrayEquals(new char[] {'E', '0', '0', '0', '0', '0', '0'}, charArray0);
      assertArrayEquals(new char[] {'E', '0', '0', '0', '0', '0', '0'}, charArray1);
      assertEquals(7, charArray0.length);
      assertEquals(7, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) (short)43;
      floatArray0[1] = 0.0F;
      float[] floatArray1 = ArrayUtils.removeAllOccurences(floatArray0, (-1569.0298F));
      assertArrayEquals(new float[] {43.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {43.0F, 0.0F}, floatArray1, 0.01F);
      assertEquals(2, floatArray0.length);
      assertEquals(2, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      
      Boolean boolean0 = Boolean.valueOf("");
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      long[] longArray0 = new long[0];
      Long[] longArray1 = ArrayUtils.toObject(longArray0);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertNotNull(longArray1);
      
      char[] charArray2 = ArrayUtils.subarray(charArray1, 0, 2);
      assertArrayEquals(new char[] {'E', '0'}, charArray2);
      assertArrayEquals(new char[] {'E', '0', '0', '0', '0', '0', '0'}, charArray0);
      assertArrayEquals(new char[] {'E', '0', '0', '0', '0', '0', '0'}, charArray1);
      assertEquals(2, charArray2.length);
      assertEquals(7, charArray0.length);
      assertEquals(7, charArray1.length);
      assertFalse(charArray2.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray1));
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray2, charArray0);
      assertNotSame(charArray2, charArray1);
      assertNotSame(charArray0, charArray2);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray1, charArray2);
      assertNotNull(charArray2);
      
      float[] floatArray2 = new float[7];
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertFalse(floatArray2.equals((Object)floatArray1));
      
      floatArray2[0] = (float) (short) (-1);
      floatArray2[1] = (float) '0';
      floatArray2[2] = (float) (short)43;
      floatArray2[3] = 0.0F;
      floatArray2[4] = (float) 2;
      floatArray2[5] = (float) '0';
      floatArray2[6] = (float) ' ';
      float[] floatArray3 = new float[5];
      assertFalse(floatArray3.equals((Object)floatArray0));
      assertFalse(floatArray3.equals((Object)floatArray1));
      assertFalse(floatArray3.equals((Object)floatArray2));
      
      floatArray3[0] = (float) (short)43;
      floatArray3[1] = (float) ' ';
      floatArray3[2] = (float) (short)43;
      floatArray3[3] = (float) (short) (-1);
      floatArray3[4] = (float) 'E';
      float[] floatArray4 = ArrayUtils.removeElements(floatArray2, floatArray3);
      assertArrayEquals(new float[] {48.0F, 0.0F, 2.0F, 48.0F}, floatArray4, 0.01F);
      assertArrayEquals(new float[] {(-1.0F), 48.0F, 43.0F, 0.0F, 2.0F, 48.0F, 32.0F}, floatArray2, 0.01F);
      assertArrayEquals(new float[] {43.0F, 32.0F, 43.0F, (-1.0F), 69.0F}, floatArray3, 0.01F);
      assertEquals(4, floatArray4.length);
      assertEquals(7, floatArray2.length);
      assertEquals(5, floatArray3.length);
      assertFalse(floatArray4.equals((Object)floatArray3));
      assertFalse(floatArray4.equals((Object)floatArray2));
      assertFalse(floatArray4.equals((Object)floatArray0));
      assertFalse(floatArray4.equals((Object)floatArray1));
      assertFalse(floatArray2.equals((Object)floatArray3));
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertFalse(floatArray3.equals((Object)floatArray0));
      assertFalse(floatArray3.equals((Object)floatArray1));
      assertFalse(floatArray3.equals((Object)floatArray2));
      assertNotSame(floatArray4, floatArray3);
      assertNotSame(floatArray4, floatArray2);
      assertNotSame(floatArray4, floatArray0);
      assertNotSame(floatArray4, floatArray1);
      assertNotSame(floatArray2, floatArray3);
      assertNotSame(floatArray2, floatArray0);
      assertNotSame(floatArray2, floatArray1);
      assertNotSame(floatArray2, floatArray4);
      assertNotSame(floatArray3, floatArray0);
      assertNotSame(floatArray3, floatArray1);
      assertNotSame(floatArray3, floatArray4);
      assertNotSame(floatArray3, floatArray2);
      assertNotNull(floatArray4);
  }

  @Test(timeout = 4000)
  public void test0116()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = ';';
      charArray0[1] = 'W';
      charArray0[2] = 'M';
      String[] stringArray0 = new String[1];
      stringArray0[0] = "org.apache.commons.lang3.builder.ToStringStyle$DefaultToStringStyle";
      String[] stringArray1 = ArrayUtils.addFirst(stringArray0, "org.apache.commons.lang3.builder.ToStringStyle$DefaultToStringStyle");
      assertEquals(1, stringArray0.length);
      assertEquals(2, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertNotNull(stringArray1);
      
      boolean boolean0 = ArrayUtils.isSorted(charArray0);
      assertArrayEquals(new char[] {';', 'W', 'M', '\u0000'}, charArray0);
      assertEquals(4, charArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0117()  throws Throwable  {
      Character character0 = Character.valueOf('\u0086');
      assertNotNull(character0);
      assertEquals('\u0086', (char)character0);
      
      Character character1 = new Character('\u0086');
      assertTrue(character1.equals((Object)character0));
      assertNotNull(character1);
      assertEquals('\u0086', (char)character1);
      
      char char0 = 'Y';
      Character character2 = Character.valueOf('Y');
      assertFalse(character2.equals((Object)character1));
      assertFalse(character2.equals((Object)character0));
      assertNotNull(character2);
      assertEquals('Y', (char)character2);
      
      Character[] characterArray0 = new Character[3];
      characterArray0[0] = character2;
      characterArray0[1] = character0;
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short)70;
      shortArray0[1] = (short)320;
      shortArray0[2] = (short) (-1);
      shortArray0[3] = (short)320;
      shortArray0[4] = (short)320;
      shortArray0[1] = (short) (-1);
      shortArray0[0] = (short) (-3080);
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertArrayEquals(new short[] {(short) (-3080), (short) (-1), (short) (-1), (short)320, (short)320, (short)0, (short)0}, shortArray0);
      assertEquals(7, shortArray0.length);
      assertEquals(7, shortArray1.length);
      assertNotNull(shortArray1);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) (char)character0;
      doubleArray0[1] = (double) (char)character0;
      doubleArray0[2] = (double) (short) (-3080);
      doubleArray0[3] = (double) (short) (-1);
      doubleArray0[4] = (double) (short) (-1);
      doubleArray0[5] = (double) 'Y';
      doubleArray0[6] = 1.5;
      doubleArray0[7] = (double) char0;
      ArrayUtils.swap(doubleArray0, 2280, 1);
      assertArrayEquals(new double[] {134.0, 134.0, (-3080.0), (-1.0), (-1.0), 89.0, 1.5, 89.0}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test0118()  throws Throwable  {
      Byte byte0 = new Byte((byte) (-116));
      assertNotNull(byte0);
      assertEquals((byte) (-116), (byte)byte0);
      
      Byte byte1 = new Byte((byte) (-116));
      assertTrue(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      assertEquals((byte) (-116), (byte)byte1);
      
      Long long0 = new Long((-4689L));
      assertNotNull(long0);
      assertEquals((-4689L), (long)long0);
      
      Long long1 = new Long((-2880L));
      assertFalse(long1.equals((Object)long0));
      assertNotNull(long1);
      assertEquals((-2880L), (long)long1);
      
      Long long2 = new Long((-267L));
      assertFalse(long2.equals((Object)long0));
      assertFalse(long2.equals((Object)long1));
      assertNotNull(long2);
      assertEquals((-267L), (long)long2);
      
      Boolean boolean0 = Boolean.TRUE;
      assertNotNull(boolean0);
      assertTrue(boolean0);
      
      boolean[] booleanArray0 = ArrayUtils.toPrimitive((Boolean[]) null);
      assertNull(booleanArray0);
      
      boolean[] booleanArray1 = ArrayUtils.removeElement((boolean[]) null, false);
      assertNull(booleanArray1);
      
      Long long3 = new Long(0L);
      assertFalse(long3.equals((Object)long2));
      assertFalse(long3.equals((Object)long0));
      assertFalse(long3.equals((Object)long1));
      assertNotNull(long3);
      assertEquals(0L, (long)long3);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-116);
      byteArray0[1] = (byte) (-116);
      byteArray0[2] = (byte) (-116);
      byteArray0[3] = (byte) (-116);
      byteArray0[4] = (byte) (-116);
      byteArray0[5] = (byte) (-116);
      byte[] byteArray1 = ArrayUtils.insert(4, byteArray0, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-116), (byte) (-116), (byte) (-116), (byte) (-116), (byte) (-116), (byte) (-116)}, byteArray0);
      assertEquals(12, byteArray1.length);
      assertEquals(6, byteArray0.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotNull(byteArray1);
      
      boolean boolean1 = ArrayUtils.isEmpty(byteArray1);
      assertArrayEquals(new byte[] {(byte) (-116), (byte) (-116), (byte) (-116), (byte) (-116), (byte) (-116), (byte) (-116)}, byteArray0);
      assertEquals(12, byteArray1.length);
      assertEquals(6, byteArray0.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test0119()  throws Throwable  {
      float[] floatArray0 = new float[1];
      floatArray0[0] = (-2239.035F);
      byte[] byteArray0 = ArrayUtils.addFirst((byte[]) null, (byte)17);
      assertArrayEquals(new byte[] {(byte)17}, byteArray0);
      assertEquals(1, byteArray0.length);
      assertNotNull(byteArray0);
      
      Double double0 = new Double((-2239.035F));
      assertNotNull(double0);
      assertEquals((-2239.034912109375), (double)double0, 0.01);
      
      Double[] doubleArray0 = new Double[4];
      Double double1 = new Double((short)63);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      assertEquals(63.0, (double)double1, 0.01);
      
      doubleArray0[0] = double1;
      doubleArray0[1] = double0;
      doubleArray0[2] = double0;
      Double double2 = new Double((byte)17);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertNotNull(double2);
      assertEquals(17.0, (double)double2, 0.01);
      
      doubleArray0[3] = double2;
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0);
      assertArrayEquals(new double[] {63.0, (-2239.034912109375), (-2239.034912109375), 17.0}, doubleArray1, 0.01);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertNotNull(doubleArray1);
  }

  @Test(timeout = 4000)
  public void test0120()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = ')';
      charArray0[1] = '5';
      charArray0[2] = 'v';
      charArray0[3] = 'a';
      charArray0[4] = 'd';
      charArray0[5] = 'Y';
      char[] charArray1 = ArrayUtils.addFirst(charArray0, 'l');
      assertArrayEquals(new char[] {')', '5', 'v', 'a', 'd', 'Y'}, charArray0);
      assertArrayEquals(new char[] {'l', ')', '5', 'v', 'a', 'd', 'Y'}, charArray1);
      assertEquals(6, charArray0.length);
      assertEquals(7, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)46;
      byte[] byteArray1 = ArrayUtils.addFirst(byteArray0, (byte)46);
      assertArrayEquals(new byte[] {(byte)46}, byteArray0);
      assertArrayEquals(new byte[] {(byte)46, (byte)46}, byteArray1);
      assertEquals(1, byteArray0.length);
      assertEquals(2, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short) (byte)46;
      shortArray0[1] = (short) (byte)46;
      shortArray0[2] = (short) (byte)46;
      shortArray0[3] = (short) (byte)46;
      shortArray0[4] = (short) (byte)46;
      shortArray0[5] = (short) (byte)46;
      shortArray0[6] = (short)63;
      int int0 = ArrayUtils.indexOf(shortArray0, (short) (-1453), 2);
      assertArrayEquals(new short[] {(short)46, (short)46, (short)46, (short)46, (short)46, (short)46, (short)63}, shortArray0);
      assertEquals(7, shortArray0.length);
      assertEquals((-1), int0);
      
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) 'a';
      objectArray0[1] = (Object) 'Y';
      objectArray0[2] = (Object) 'Y';
      objectArray0[3] = (Object) (short)46;
      objectArray0[4] = (Object) 'd';
      objectArray0[5] = (Object) '5';
      objectArray0[6] = (Object) (short)46;
      objectArray0[7] = (Object) '5';
      ArrayUtils.reverse(objectArray0);
      assertEquals(8, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test0121()  throws Throwable  {
      long[] longArray0 = new long[9];
      longArray0[0] = (-2538L);
      longArray0[1] = 263L;
      longArray0[2] = 2115L;
      longArray0[3] = 2147483647L;
      longArray0[4] = (-325L);
      longArray0[5] = 2980L;
      longArray0[6] = (-1L);
      longArray0[7] = 3143L;
      longArray0[8] = 862L;
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray0, (-1787L));
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertArrayEquals(new long[] {(-2538L), 263L, 2115L, 2147483647L, (-325L), 2980L, (-1L), 3143L, 862L}, longArray0);
      assertEquals(9, longArray0.length);
      assertNotNull(bitSet0);
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'G';
      charArray0[1] = 'N';
      charArray0[2] = '`';
      charArray0[3] = '?';
      boolean boolean0 = ArrayUtils.contains(charArray0, '?');
      assertArrayEquals(new char[] {'G', 'N', '`', '?'}, charArray0);
      assertEquals(4, charArray0.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0122()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      boolean[] booleanArray1 = ArrayUtils.nullToEmpty(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, false}, booleanArray1));
      assertEquals(2, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      assertSame(booleanArray0, booleanArray1);
      assertSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      
      boolean[] booleanArray2 = ArrayUtils.nullToEmpty(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {true, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, false}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {true, false}, booleanArray2));
      assertEquals(2, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      assertEquals(2, booleanArray2.length);
      assertSame(booleanArray0, booleanArray1);
      assertSame(booleanArray0, booleanArray2);
      assertSame(booleanArray1, booleanArray2);
      assertSame(booleanArray1, booleanArray0);
      assertSame(booleanArray2, booleanArray1);
      assertSame(booleanArray2, booleanArray0);
      assertNotNull(booleanArray2);
      
      char[] charArray0 = ArrayUtils.addAll((char[]) null, (char[]) null);
      assertNull(charArray0);
      
      int int0 = ArrayUtils.lastIndexOf((char[]) null, 'c');
      assertEquals((-1), int0);
      
      float[] floatArray0 = new float[1];
      float float0 = (-1.0F);
      floatArray0[0] = (-1.0F);
      boolean boolean0 = ArrayUtils.isEmpty(floatArray0);
      assertArrayEquals(new float[] {(-1.0F)}, floatArray0, 0.01F);
      assertEquals(1, floatArray0.length);
      assertFalse(boolean0);
      
      boolean boolean1 = ArrayUtils.isSameLength(floatArray0, floatArray0);
      assertArrayEquals(new float[] {(-1.0F)}, floatArray0, 0.01F);
      assertEquals(1, floatArray0.length);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      char[] charArray1 = new char[3];
      charArray1[0] = 'c';
      charArray1[1] = 'c';
      charArray1[2] = 'c';
      boolean boolean2 = ArrayUtils.contains(charArray1, 'c');
      assertArrayEquals(new char[] {'c', 'c', 'c'}, charArray1);
      assertEquals(3, charArray1.length);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2);
      
      double[] doubleArray0 = new double[0];
      // Undeclared exception!
      try { 
        ArrayUtils.remove(doubleArray0, 64);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 64, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0123()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 1.5;
      boolean boolean0 = ArrayUtils.isNotEmpty(doubleArray0);
      assertArrayEquals(new double[] {0.0, 1.5}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      assertTrue(boolean0);
      
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short) (-1816);
      shortArray0[2] = (short)0;
      double[] doubleArray1 = new double[2];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 0.0;
      doubleArray1[1] = (double) (short) (-1816);
      double[] doubleArray2 = ArrayUtils.subarray(doubleArray1, 350, (int) (short)0);
      assertArrayEquals(new double[] {0.0, (-1816.0)}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      assertEquals(2, doubleArray1.length);
      assertEquals(0, doubleArray2.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotNull(doubleArray2);
      
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertArrayEquals(new short[] {(short)0, (short) (-1816), (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertEquals(7, shortArray0.length);
      assertEquals(7, shortArray1.length);
      assertNotNull(shortArray1);
      
      long[] longArray0 = ArrayUtils.removeAllOccurrences((long[]) null, (long) (short) (-1816));
      assertNull(longArray0);
  }

  @Test(timeout = 4000)
  public void test0124()  throws Throwable  {
      long[] longArray0 = new long[8];
      longArray0[0] = (-1L);
      longArray0[1] = (-1458L);
      longArray0[2] = (-1400L);
      longArray0[3] = (-552L);
      longArray0[4] = (-872L);
      longArray0[5] = (-2048L);
      longArray0[6] = 0L;
      longArray0[7] = 2966L;
      long[] longArray1 = ArrayUtils.removeElements(longArray0, longArray0);
      assertArrayEquals(new long[] {(-1L), (-1458L), (-1400L), (-552L), (-872L), (-2048L), 0L, 2966L}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertEquals(8, longArray0.length);
      assertEquals(0, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) (-552L);
      doubleArray0[1] = (double) (-2048L);
      doubleArray0[2] = (double) (-1458L);
      doubleArray0[3] = (double) (-2048L);
      doubleArray0[4] = (double) (-1L);
      doubleArray0[5] = (-2475.635191337422);
      doubleArray0[6] = (double) (-552L);
      doubleArray0[7] = (double) (-2048L);
      ArrayUtils.shift(doubleArray0, 1, 1, 4);
      assertArrayEquals(new double[] {(-552.0), (-2048.0), (-1458.0), (-2048.0), (-1.0), (-2475.635191337422), (-552.0), (-2048.0)}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      booleanArray0[4] = true;
      Boolean[] booleanArray1 = ArrayUtils.toObject(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, false, true}, booleanArray0));
      assertEquals(5, booleanArray0.length);
      assertEquals(5, booleanArray1.length);
      assertNotNull(booleanArray1);
  }

  @Test(timeout = 4000)
  public void test0125()  throws Throwable  {
      long[] longArray0 = new long[3];
      longArray0[0] = (-2084L);
      char[] charArray0 = new char[7];
      charArray0[0] = 'C';
      charArray0[1] = '.';
      charArray0[2] = '&';
      charArray0[3] = 'k';
      charArray0[4] = 'J';
      charArray0[5] = 'T';
      charArray0[6] = 'F';
      ArrayUtils.reverse(charArray0, 275, 275);
      assertArrayEquals(new char[] {'C', '.', '&', 'k', 'J', 'T', 'F'}, charArray0);
      assertEquals(7, charArray0.length);
      
      double[] doubleArray0 = new double[0];
      ArrayUtils.shift(doubleArray0, (-2145916824), Integer.MAX_VALUE, (-2974));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      int[] intArray0 = new int[3];
      intArray0[0] = 66;
      intArray0[1] = (-2974);
      intArray0[2] = 66;
      // Undeclared exception!
      try { 
        ArrayUtils.insert(97, intArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 97, Length: 3
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0126()  throws Throwable  {
      ArrayUtils.shift((boolean[]) null, (-799), (-799), (-799));
      Float[] floatArray0 = new Float[3];
      Float float0 = new Float((double) (-799));
      assertNotNull(float0);
      assertEquals((-799.0F), (float)float0, 0.01F);
      
      floatArray0[0] = float0;
      Float float1 = new Float((-1281.03149));
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertNotNull(float1);
      assertEquals((-1281.0315F), (float)float1, 0.01F);
      
      floatArray0[1] = float1;
      Float float2 = new Float((double) floatArray0[1]);
      assertEquals(3, floatArray0.length);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertEquals((float)float2, (float)float1, 0.01F);
      assertNotNull(float2);
      assertEquals((-1281.0315F), (float)float2, 0.01F);
      
      floatArray0[2] = float2;
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0, 897.0F);
      assertArrayEquals(new float[] {(-799.0F), (-1281.0315F), (-1281.0315F)}, floatArray1, 0.01F);
      assertEquals(3, floatArray0.length);
      assertEquals(3, floatArray1.length);
      assertNotNull(floatArray1);
      
      float[] floatArray2 = new float[2];
      assertFalse(floatArray2.equals((Object)floatArray1));
      
      floatArray2[0] = (float) floatArray0[2];
      floatArray2[1] = (float) floatArray0[0];
      float[] floatArray3 = ArrayUtils.clone(floatArray2);
      assertArrayEquals(new float[] {(-1281.0315F), (-799.0F)}, floatArray2, 0.01F);
      assertArrayEquals(new float[] {(-1281.0315F), (-799.0F)}, floatArray3, 0.01F);
      assertEquals(2, floatArray2.length);
      assertEquals(2, floatArray3.length);
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertFalse(floatArray3.equals((Object)floatArray2));
      assertFalse(floatArray3.equals((Object)floatArray1));
      assertNotSame(floatArray2, floatArray1);
      assertNotSame(floatArray2, floatArray3);
      assertNotSame(floatArray3, floatArray2);
      assertNotSame(floatArray3, floatArray1);
      assertNotNull(floatArray3);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray3, (float) floatArray0[2], (-799));
      assertEquals(1, bitSet0.length());
      assertEquals(1, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertEquals("{0}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertArrayEquals(new float[] {(-1281.0315F), (-799.0F)}, floatArray2, 0.01F);
      assertArrayEquals(new float[] {(-1281.0315F), (-799.0F)}, floatArray3, 0.01F);
      assertEquals(3, floatArray0.length);
      assertEquals(2, floatArray2.length);
      assertEquals(2, floatArray3.length);
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertFalse(floatArray2.equals((Object)floatArray3));
      assertFalse(floatArray3.equals((Object)floatArray2));
      assertFalse(floatArray3.equals((Object)floatArray1));
      assertNotSame(floatArray2, floatArray1);
      assertNotSame(floatArray2, floatArray3);
      assertNotSame(floatArray3, floatArray2);
      assertNotSame(floatArray3, floatArray1);
      assertNotNull(bitSet0);
      
      int[] intArray0 = new int[3];
      intArray0[0] = (-799);
      intArray0[1] = (-799);
      intArray0[2] = (-799);
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((boolean[]) null, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -799, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0127()  throws Throwable  {
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short) (-13);
      shortArray0[1] = (short)43;
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      BitSet bitSet0 = ArrayUtils.indexesOf(booleanArray0, true);
      assertEquals(2, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertEquals("{0, 1}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(2, bitSet0.length());
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray0));
      assertEquals(2, booleanArray0.length);
      assertNotNull(bitSet0);
      
      Long long0 = new Long((short) (-13));
      assertNotNull(long0);
      assertEquals((-13L), (long)long0);
      
      Long long1 = new Long((short)43);
      assertFalse(long1.equals((Object)long0));
      assertNotNull(long1);
      assertEquals(43L, (long)long1);
      
      int[] intArray0 = new int[3];
      intArray0[0] = (int) (short) (-13);
      intArray0[1] = (-2798);
      intArray0[2] = (-2798);
      ArrayUtils.shift(intArray0, 3699);
      assertArrayEquals(new int[] {(-13), (-2798), (-2798)}, intArray0);
      assertEquals(3, intArray0.length);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (short) (-13);
      doubleArray0[1] = (double) (short)43;
      ArrayUtils.swap(doubleArray0, (-3996), (int) (short)43, (int) (short)43);
      assertArrayEquals(new double[] {(-13.0), 43.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      
      long[] longArray0 = ArrayUtils.removeElements((long[]) null, (long[]) null);
      assertNull(longArray0);
      
      Integer[] integerArray0 = new Integer[2];
      integerArray0[0] = (Integer) (-2798);
      integerArray0[1] = (Integer) (-13);
      // Undeclared exception!
      try { 
        ArrayUtils.remove(integerArray0, (-2798));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -2798, Length: 2
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0128()  throws Throwable  {
      double[] doubleArray0 = ArrayUtils.clone((double[]) null);
      assertNull(doubleArray0);
      
      int int0 = ArrayUtils.indexOf((double[]) null, (double) (byte)51, 3, (-362.6216352196658));
      assertEquals((-1), int0);
      
      boolean boolean0 = ArrayUtils.isSorted((char[]) null);
      assertTrue(boolean0);
      
      short[] shortArray0 = ArrayUtils.removeElements((short[]) null, (short[]) null);
      assertNull(shortArray0);
      
      org.evosuite.runtime.Random.setNextRandom((-1));
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      booleanArray0[6] = true;
      booleanArray0[7] = true;
      boolean boolean1 = ArrayUtils.isEmpty(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true, true, true, true}, booleanArray0));
      assertEquals(8, booleanArray0.length);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) 3;
      floatArray0[1] = (float) (byte)51;
      floatArray0[2] = (float) 3;
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray0, (float) (byte)51, (-1));
      assertEquals(64, bitSet0.size());
      assertEquals("{1}", bitSet0.toString());
      assertEquals(2, bitSet0.length());
      assertFalse(bitSet0.isEmpty());
      assertEquals(1, bitSet0.cardinality());
      assertArrayEquals(new float[] {3.0F, 51.0F, 3.0F}, floatArray0, 0.01F);
      assertEquals(3, floatArray0.length);
      assertNotNull(bitSet0);
  }

  @Test(timeout = 4000)
  public void test0129()  throws Throwable  {
      Object[] objectArray0 = new Object[5];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      Object object1 = ArrayUtils.get(objectArray0, (int) 560, (Object) "");
      assertEquals(5, objectArray0.length);
      assertNotNull(object1);
      assertEquals("", object1);
      
      Object object2 = new Object();
      assertFalse(object2.equals((Object)object0));
      assertNotNull(object2);
      
      objectArray0[2] = object2;
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) (short)560;
      floatArray0[1] = (float) (short)560;
      floatArray0[2] = 2495.8F;
      floatArray0[3] = (float) (short)560;
      floatArray0[4] = (float) (short)560;
      floatArray0[5] = (float) (short)560;
      float[] floatArray1 = ArrayUtils.removeAllOccurences((float[]) null, (float) (short)560);
      assertNull(floatArray1);
  }

  @Test(timeout = 4000)
  public void test0130()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[3];
      boolean[] booleanArray1 = ArrayUtils.addFirst(booleanArray0, true);
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, false, false, false}, booleanArray1));
      assertEquals(3, booleanArray0.length);
      assertEquals(4, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) 971;
      floatArray0[1] = (float) 4;
      floatArray0[2] = (float) 971;
      floatArray0[3] = (float) 4;
      floatArray0[4] = (float) 4;
      ArrayUtils.swap(floatArray0, 5, 5, 1101);
      assertArrayEquals(new float[] {971.0F, 4.0F, 971.0F, 4.0F, 4.0F}, floatArray0, 0.01F);
      assertEquals(5, floatArray0.length);
      
      short[] shortArray0 = ArrayUtils.subarray((short[]) null, 3408, 3408);
      assertNull(shortArray0);
  }

  @Test(timeout = 4000)
  public void test0131()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)110;
      byteArray0[1] = (byte)34;
      byteArray0[2] = (byte) (-87);
      BitSet bitSet0 = ArrayUtils.indexesOf(byteArray0, (byte) (-87), (-1677));
      assertFalse(bitSet0.isEmpty());
      assertEquals(1, bitSet0.cardinality());
      assertEquals(3, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals("{2}", bitSet0.toString());
      assertArrayEquals(new byte[] {(byte)110, (byte)34, (byte) (-87)}, byteArray0);
      assertEquals(3, byteArray0.length);
      assertNotNull(bitSet0);
      
      char[] charArray0 = new char[3];
      charArray0[0] = 'Q';
      charArray0[1] = 'u';
      charArray0[2] = 'M';
      char[] charArray1 = ArrayUtils.remove(charArray0, 2);
      assertArrayEquals(new char[] {'Q', 'u', 'M'}, charArray0);
      assertArrayEquals(new char[] {'Q', 'u'}, charArray1);
      assertEquals(3, charArray0.length);
      assertEquals(2, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte) (-87), 5);
      assertArrayEquals(new byte[] {(byte)110, (byte)34, (byte) (-87)}, byteArray0);
      assertEquals(3, byteArray0.length);
      assertEquals(2, int0);
      
      Short[] shortArray0 = new Short[3];
      Short short0 = new Short((byte)34);
      assertNotNull(short0);
      assertEquals((short)34, (short)short0);
      
      shortArray0[0] = short0;
      Short short1 = new Short((short) shortArray0[0]);
      assertEquals(3, shortArray0.length);
      assertTrue(short1.equals((Object)short0));
      assertNotNull(short1);
      assertEquals((short)34, (short)short1);
      
      shortArray0[1] = short1;
      Short short2 = new Short((short)160);
      assertFalse(short2.equals((Object)short1));
      assertFalse(short2.equals((Object)short0));
      assertNotNull(short2);
      assertEquals((short)160, (short)short2);
      
      shortArray0[2] = short2;
      Short[] shortArray1 = ArrayUtils.clone(shortArray0);
      assertEquals(3, shortArray1.length);
      assertEquals(3, shortArray0.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertNotNull(shortArray1);
      
      short[] shortArray2 = new short[1];
      shortArray2[0] = (short) shortArray0[0];
      short[] shortArray3 = ArrayUtils.addAll(shortArray2, shortArray2);
      assertArrayEquals(new short[] {(short)34}, shortArray2);
      assertArrayEquals(new short[] {(short)34, (short)34}, shortArray3);
      assertEquals(1, shortArray2.length);
      assertEquals(2, shortArray3.length);
      assertFalse(shortArray3.equals((Object)shortArray2));
      assertNotSame(shortArray2, shortArray3);
      assertNotSame(shortArray3, shortArray2);
      assertNotNull(shortArray3);
      
      Short[] shortArray4 = ArrayUtils.toArray(shortArray1);
      assertEquals(3, shortArray1.length);
      assertEquals(3, shortArray4.length);
      assertEquals(3, shortArray0.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertFalse(shortArray4.equals((Object)shortArray0));
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertNotSame(shortArray1, shortArray0);
      assertSame(shortArray1, shortArray4);
      assertSame(shortArray4, shortArray1);
      assertNotSame(shortArray4, shortArray0);
      assertNotSame(shortArray0, shortArray4);
      assertNotSame(shortArray0, shortArray1);
      assertNotNull(shortArray4);
  }

  @Test(timeout = 4000)
  public void test0132()  throws Throwable  {
      int[] intArray0 = new int[9];
      intArray0[0] = (int) (short)560;
      intArray0[1] = (int) (short)560;
      intArray0[2] = (int) (short)560;
      intArray0[3] = (int) (short)560;
      intArray0[4] = (int) (short)560;
      intArray0[5] = (int) (short)560;
      intArray0[6] = (int) (short)560;
      intArray0[7] = (int) (short)560;
      intArray0[8] = (int) (short)560;
      ArrayUtils.shuffle(intArray0);
      assertArrayEquals(new int[] {560, 560, 560, 560, 560, 560, 560, 560, 560}, intArray0);
      assertEquals(9, intArray0.length);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 560;
      doubleArray0[1] = (double) (short)560;
      doubleArray0[2] = (double) (short)560;
      doubleArray0[3] = (double) 560;
      doubleArray0[4] = (double) 560;
      doubleArray0[5] = (double) (short)560;
      doubleArray0[6] = (double) 560;
      ArrayUtils.swap(doubleArray0, 560, (-785), 560);
      assertArrayEquals(new double[] {560.0, 560.0, 560.0, 560.0, 560.0, 560.0, 560.0}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
      
      Integer[] integerArray0 = new Integer[6];
      integerArray0[0] = (Integer) 560;
      integerArray0[1] = (Integer) 560;
      integerArray0[2] = (Integer) 560;
      integerArray0[3] = (Integer) 560;
      integerArray0[4] = (Integer) 560;
      integerArray0[5] = (Integer) 560;
      int[] intArray1 = ArrayUtils.toPrimitive(integerArray0, 338);
      assertArrayEquals(new int[] {560, 560, 560, 560, 560, 560}, intArray1);
      assertEquals(6, integerArray0.length);
      assertEquals(6, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      
      boolean boolean0 = ArrayUtils.contains(intArray0, (int) integerArray0[3]);
      assertArrayEquals(new int[] {560, 560, 560, 560, 560, 560, 560, 560, 560}, intArray0);
      assertEquals(9, intArray0.length);
      assertEquals(6, integerArray0.length);
      assertFalse(intArray0.equals((Object)intArray1));
      assertNotSame(intArray0, intArray1);
      assertTrue(boolean0);
      
      Short[] shortArray0 = ArrayUtils.toArray((Short[]) null);
      assertNull(shortArray0);
      
      Integer[] integerArray1 = ArrayUtils.nullToEmpty(integerArray0);
      assertEquals(6, integerArray0.length);
      assertEquals(6, integerArray1.length);
      assertSame(integerArray0, integerArray1);
      assertSame(integerArray1, integerArray0);
      assertNotNull(integerArray1);
      
      boolean boolean1 = ArrayUtils.isSameLength(intArray0, intArray1);
      assertArrayEquals(new int[] {560, 560, 560, 560, 560, 560, 560, 560, 560}, intArray0);
      assertArrayEquals(new int[] {560, 560, 560, 560, 560, 560}, intArray1);
      assertEquals(9, intArray0.length);
      assertEquals(6, integerArray0.length);
      assertEquals(6, intArray1.length);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(boolean1 == boolean0);
      assertNotSame(intArray0, intArray1);
      assertSame(integerArray0, integerArray1);
      assertNotSame(intArray1, intArray0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test0133()  throws Throwable  {
      BitSet bitSet0 = new BitSet();
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertNotNull(bitSet0);
      
      byte[] byteArray0 = new byte[0];
      ArrayUtils.swap(byteArray0, 11, 11, 11);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short)1070;
      short[] shortArray1 = ArrayUtils.insert(0, shortArray0, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)1070}, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)1070, (short)0, (short)1070}, shortArray1);
      assertEquals(2, shortArray0.length);
      assertEquals(4, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'U';
      charArray0[1] = '&';
      charArray0[2] = 'H';
      charArray0[3] = '\"';
      BitSet bitSet1 = ArrayUtils.indexesOf(charArray0, 'U');
      assertEquals(64, bitSet1.size());
      assertEquals("{0}", bitSet1.toString());
      assertEquals(1, bitSet1.length());
      assertEquals(1, bitSet1.cardinality());
      assertFalse(bitSet1.isEmpty());
      assertArrayEquals(new char[] {'U', '&', 'H', '\"'}, charArray0);
      assertEquals(4, charArray0.length);
      assertFalse(bitSet1.equals((Object)bitSet0));
      assertNotSame(bitSet1, bitSet0);
      assertNotNull(bitSet1);
  }

  @Test(timeout = 4000)
  public void test0134()  throws Throwable  {
      Short[] shortArray0 = new Short[8];
      short short0 = (short)1;
      Short short1 = new Short((short)1);
      assertTrue(short1.equals((Object)short0));
      assertNotNull(short1);
      assertEquals((short)1, (short)short1);
      
      shortArray0[0] = short1;
      Short short2 = new Short((short)1);
      assertTrue(short2.equals((Object)short1));
      assertTrue(short2.equals((Object)short0));
      assertNotNull(short2);
      assertEquals((short)1, (short)short2);
      
      shortArray0[1] = short2;
      Short short3 = new Short((short)1);
      assertTrue(short3.equals((Object)short0));
      assertTrue(short3.equals((Object)short1));
      assertTrue(short3.equals((Object)short2));
      assertNotNull(short3);
      assertEquals((short)1, (short)short3);
      
      shortArray0[2] = short3;
      Short short4 = new Short(short0);
      assertTrue(short4.equals((Object)short1));
      assertTrue(short4.equals((Object)short2));
      assertTrue(short4.equals((Object)short0));
      assertTrue(short4.equals((Object)short3));
      assertNotNull(short4);
      assertEquals((short)1, (short)short4);
      
      shortArray0[3] = short4;
      Short short5 = new Short(short0);
      assertTrue(short5.equals((Object)short1));
      assertTrue(short5.equals((Object)short3));
      assertTrue(short5.equals((Object)short0));
      assertTrue(short5.equals((Object)short4));
      assertTrue(short5.equals((Object)short2));
      assertNotNull(short5);
      assertEquals((short)1, (short)short5);
      
      shortArray0[4] = short5;
      Short short6 = new Short((short)52);
      assertFalse(short6.equals((Object)short2));
      assertFalse(short6.equals((Object)short0));
      assertFalse(short6.equals((Object)short5));
      assertFalse(short6.equals((Object)short4));
      assertFalse(short6.equals((Object)short1));
      assertFalse(short6.equals((Object)short3));
      assertNotNull(short6);
      assertEquals((short)52, (short)short6);
      
      shortArray0[5] = short6;
      Short short7 = new Short(short0);
      assertTrue(short7.equals((Object)short5));
      assertFalse(short7.equals((Object)short6));
      assertTrue(short7.equals((Object)short2));
      assertTrue(short7.equals((Object)short3));
      assertTrue(short7.equals((Object)short4));
      assertTrue(short7.equals((Object)short1));
      assertTrue(short7.equals((Object)short0));
      assertNotNull(short7);
      assertEquals((short)1, (short)short7);
      
      shortArray0[6] = short7;
      Short short8 = new Short(short0);
      assertTrue(short8.equals((Object)short4));
      assertTrue(short8.equals((Object)short2));
      assertFalse(short8.equals((Object)short6));
      assertTrue(short8.equals((Object)short0));
      assertTrue(short8.equals((Object)short5));
      assertTrue(short8.equals((Object)short1));
      assertTrue(short8.equals((Object)short3));
      assertTrue(short8.equals((Object)short7));
      assertNotNull(short8);
      assertEquals((short)1, (short)short8);
      
      shortArray0[7] = short8;
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0, short0);
      assertArrayEquals(new short[] {(short)1, (short)1, (short)1, (short)1, (short)1, (short)52, (short)1, (short)1}, shortArray1);
      assertEquals(8, shortArray0.length);
      assertEquals(8, shortArray1.length);
      assertNotNull(shortArray1);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      boolean boolean0 = ArrayUtils.isSorted(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertEquals(1, booleanArray0.length);
      assertTrue(boolean0);
      
      short[] shortArray2 = new short[6];
      assertFalse(shortArray2.equals((Object)shortArray1));
      
      shortArray2[0] = short0;
      shortArray2[1] = (short)3555;
      shortArray2[2] = short0;
      shortArray2[3] = short0;
      shortArray2[4] = (short)1;
      shortArray2[5] = (short)1;
      short[] shortArray3 = ArrayUtils.removeElements(shortArray1, shortArray2);
      assertArrayEquals(new short[] {(short)1, (short)1, (short)1, (short)1, (short)1, (short)52, (short)1, (short)1}, shortArray1);
      assertArrayEquals(new short[] {(short)1, (short)3555, (short)1, (short)1, (short)1, (short)1}, shortArray2);
      assertArrayEquals(new short[] {(short)52, (short)1, (short)1}, shortArray3);
      assertEquals(8, shortArray0.length);
      assertEquals(8, shortArray1.length);
      assertEquals(6, shortArray2.length);
      assertEquals(3, shortArray3.length);
      assertFalse(shortArray1.equals((Object)shortArray2));
      assertFalse(shortArray2.equals((Object)shortArray1));
      assertFalse(shortArray3.equals((Object)shortArray2));
      assertFalse(shortArray3.equals((Object)shortArray1));
      assertNotSame(shortArray1, shortArray3);
      assertNotSame(shortArray1, shortArray2);
      assertNotSame(shortArray2, shortArray3);
      assertNotSame(shortArray2, shortArray1);
      assertNotSame(shortArray3, shortArray2);
      assertNotSame(shortArray3, shortArray1);
      assertNotNull(shortArray3);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-30);
      byteArray0[1] = (byte)3;
      byteArray0[2] = (byte) (-126);
      // Undeclared exception!
      try { 
        ArrayUtils.remove(byteArray0, (-22));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -22, Length: 3
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0135()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "java.lang.Byte";
      stringArray0[3] = "";
      stringArray0[4] = "boolean";
      stringArray0[5] = "";
      stringArray0[6] = "";
      String[] stringArray1 = ArrayUtils.addFirst(stringArray0, "java.lang.Byte");
      assertEquals(7, stringArray0.length);
      assertEquals(8, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertNotNull(stringArray1);
      
      Boolean[] booleanArray0 = new Boolean[2];
      Boolean boolean0 = Boolean.FALSE;
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      booleanArray0[0] = boolean0;
      Boolean boolean1 = Boolean.TRUE;
      assertFalse(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      assertTrue(boolean1);
      
      booleanArray0[1] = boolean1;
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0, (boolean) boolean0);
      assertTrue(Arrays.equals(new boolean[] {false, true}, booleanArray1));
      assertEquals(2, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      assertFalse(boolean0.equals((Object)boolean1));
      assertNotNull(booleanArray1);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = 0.0F;
      floatArray0[1] = (-1720.2F);
      floatArray0[2] = (-1.0F);
      floatArray0[3] = 3669.85F;
      ArrayUtils.reverse(floatArray0);
      assertArrayEquals(new float[] {3669.85F, (-1.0F), (-1720.2F), 0.0F}, floatArray0, 0.01F);
      assertEquals(4, floatArray0.length);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) (-1.0F);
      doubleArray0[1] = (double) 0.0F;
      doubleArray0[2] = (double) 3669.85F;
      doubleArray0[3] = (double) 3669.85F;
      doubleArray0[4] = (double) 0.0F;
      doubleArray0[5] = (double) 3669.85F;
      doubleArray0[6] = (double) 3669.85F;
      doubleArray0[7] = (double) (-1720.2F);
      doubleArray0[8] = (double) 0.0F;
      double[] doubleArray1 = ArrayUtils.addAll(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {(-1.0), 0.0, 3669.85009765625, 3669.85009765625, 0.0, 3669.85009765625, 3669.85009765625, (-1720.199951171875), 0.0}, doubleArray0, 0.01);
      assertEquals(9, doubleArray0.length);
      assertEquals(18, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
  }

  @Test(timeout = 4000)
  public void test0136()  throws Throwable  {
      ArrayUtils.shift((boolean[]) null, (-1));
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)28;
      byteArray0[1] = (byte)28;
      byteArray0[2] = (byte)2;
      byteArray0[3] = (byte)2;
      byteArray0[4] = (byte)2;
      int int0 = ArrayUtils.indexOf(byteArray0, (byte)2, (-2906));
      assertArrayEquals(new byte[] {(byte)28, (byte)28, (byte)2, (byte)2, (byte)2}, byteArray0);
      assertEquals(5, byteArray0.length);
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test0137()  throws Throwable  {
      boolean[] booleanArray0 = ArrayUtils.addFirst((boolean[]) null, false);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertEquals(1, booleanArray0.length);
      assertNotNull(booleanArray0);
      
      byte[] byteArray0 = new byte[5];
      byte byte0 = (byte) (-101);
      byteArray0[0] = (byte) (-101);
      byte byte1 = (byte)127;
      byteArray0[1] = (byte)127;
      byte byte2 = (byte)9;
      byteArray0[2] = (byte)9;
      byte byte3 = (byte) (-1);
      byteArray0[3] = (byte) (-1);
      byte byte4 = (byte)2;
      byteArray0[4] = (byte)2;
      byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-101), (byte)127, (byte)9, (byte) (-1), (byte)2}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-101), (byte)127, (byte)9, (byte) (-1), (byte)2}, byteArray1);
      assertEquals(5, byteArray0.length);
      assertEquals(5, byteArray1.length);
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      
      Float[] floatArray0 = new Float[4];
      Float float0 = new Float(579.517725308832);
      assertNotNull(float0);
      assertEquals(579.5177F, (float)float0, 0.01F);
      
      floatArray0[0] = float0;
      Float float1 = new Float((float) (byte)9);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertNotNull(float1);
      assertEquals(9.0F, (float)float1, 0.01F);
      
      floatArray0[1] = float1;
      Float float2 = new Float((double) (byte)127);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertNotNull(float2);
      assertEquals(127.0F, (float)float2, 0.01F);
      
      floatArray0[2] = float2;
      Float float3 = new Float((-576.8279F));
      assertNotEquals((float)float3, (float)float0, 0.01F);
      assertNotEquals((float)float3, (float)float1, 0.01F);
      assertNotEquals((float)float3, (float)float2, 0.01F);
      assertNotNull(float3);
      assertEquals((-576.8279F), (float)float3, 0.01F);
      
      floatArray0[3] = float3;
      Class<Float[]> class0 = Float[].class;
      Float[] floatArray1 = ArrayUtils.nullToEmpty(floatArray0, class0);
      assertEquals(4, floatArray1.length);
      assertEquals(4, floatArray0.length);
      assertSame(floatArray1, floatArray0);
      assertSame(floatArray0, floatArray1);
      assertNotNull(floatArray1);
      
      // Undeclared exception!
      try { 
        ArrayUtils.insert((-1861), (Object[]) floatArray0, (Object[]) floatArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1861, Length: 4
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0138()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 571.942196047302;
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short)8;
      shortArray0[1] = (short)8;
      shortArray0[2] = (short)8;
      shortArray0[3] = (short)8;
      shortArray0[4] = (short)8;
      shortArray0[5] = (short)8;
      shortArray0[6] = (short)8;
      shortArray0[7] = (short)8;
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short) (-2220), 0);
      assertArrayEquals(new short[] {(short)8, (short)8, (short)8, (short)8, (short)8, (short)8, (short)8, (short)8}, shortArray0);
      assertEquals(8, shortArray0.length);
      assertEquals((-1), int0);
      
      int[] intArray0 = ArrayUtils.removeElements((int[]) null, (int[]) null);
      assertNull(intArray0);
      
      float[] floatArray0 = new float[0];
      float[] floatArray1 = ArrayUtils.addFirst(floatArray0, 1.0F);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {1.0F}, floatArray1, 0.01F);
      assertEquals(0, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      
      ArrayUtils.shift(shortArray0, 57);
      assertArrayEquals(new short[] {(short)8, (short)8, (short)8, (short)8, (short)8, (short)8, (short)8, (short)8}, shortArray0);
      assertEquals(8, shortArray0.length);
      
      Boolean boolean0 = new Boolean(false);
      assertNotNull(boolean0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0139()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 571.942196047302;
      short short0 = (short)8;
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short)8;
      shortArray0[1] = (short)8;
      shortArray0[2] = (short)8;
      shortArray0[3] = (short)8;
      shortArray0[4] = (short)8;
      shortArray0[5] = (short)8;
      shortArray0[6] = (short)8;
      shortArray0[7] = (short)8;
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short) (-2220), 0);
      assertArrayEquals(new short[] {(short)8, (short)8, (short)8, (short)8, (short)8, (short)8, (short)8, (short)8}, shortArray0);
      assertEquals(8, shortArray0.length);
      assertEquals((-1), int0);
      
      int[] intArray0 = ArrayUtils.removeElements((int[]) null, (int[]) null);
      assertNull(intArray0);
      
      Long[] longArray0 = new Long[5];
      Long long0 = new Long((-348L));
      assertNotNull(long0);
      assertEquals((-348L), (long)long0);
      
      longArray0[0] = long0;
      Long long1 = Long.valueOf(2151L);
      assertFalse(long1.equals((Object)long0));
      assertNotNull(long1);
      assertEquals(2151L, (long)long1);
      
      longArray0[1] = long1;
      Long long2 = new Long((short) (-2220));
      assertFalse(long2.equals((Object)long0));
      assertFalse(long2.equals((Object)long1));
      assertNotNull(long2);
      assertEquals((-2220L), (long)long2);
      
      longArray0[2] = long2;
      Long long3 = new Long((-2630L));
      assertFalse(long3.equals((Object)long0));
      assertFalse(long3.equals((Object)long2));
      assertFalse(long3.equals((Object)long1));
      assertNotNull(long3);
      assertEquals((-2630L), (long)long3);
      
      longArray0[3] = long3;
      Long long4 = new Long((short)8);
      assertFalse(long4.equals((Object)long0));
      assertFalse(long4.equals((Object)long3));
      assertFalse(long4.equals((Object)long2));
      assertFalse(long4.equals((Object)long1));
      assertNotNull(long4);
      assertEquals(8L, (long)long4);
      
      longArray0[4] = long4;
      // Undeclared exception!
      try { 
        ArrayUtils.insert((int) 8, longArray0, longArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 8, Length: 5
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0140()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)46;
      byteArray0[1] = (byte)42;
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short) (byte)46;
      shortArray0[1] = (short) (byte)42;
      shortArray0[2] = (short) (-23309);
      shortArray0[3] = (short) (byte)42;
      shortArray0[4] = (short) (byte)42;
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertArrayEquals(new short[] {(short)46, (short)42, (short) (-23309), (short)42, (short)42}, shortArray0);
      assertEquals(5, shortArray0.length);
      assertEquals(5, shortArray1.length);
      assertNotNull(shortArray1);
      
      Integer[] integerArray0 = new Integer[2];
      Integer integer0 = new Integer((short)42);
      assertNotNull(integer0);
      assertEquals(42, (int)integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((short) (-23309));
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals((-23309), (int)integer1);
      
      integerArray0[1] = integer1;
      // Undeclared exception!
      try { 
        ArrayUtils.insert((int) 46, integerArray0, integerArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 46, Length: 2
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0141()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 1.0F;
      doubleArray0[1] = 1.0;
      boolean boolean0 = ArrayUtils.isSameLength(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {1.0, 1.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      assertTrue(boolean0);
      
      char[] charArray0 = new char[13];
      charArray0[0] = ':';
      Character[] characterArray0 = ArrayUtils.toObject((char[]) null);
      assertNull(characterArray0);
      
      float[] floatArray0 = new float[9];
      floatArray0[0] = 1.0F;
      floatArray0[1] = (float) 338;
      floatArray0[2] = (float) 338;
      floatArray0[3] = (float) 338;
      floatArray0[4] = (float) ':';
      floatArray0[5] = (float) 338;
      ArrayUtils.reverse((char[]) null, (-3), (-103));
      boolean[] booleanArray0 = new boolean[0];
      Boolean[] booleanArray1 = ArrayUtils.toObject(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals(0, booleanArray1.length);
      assertEquals(0, booleanArray0.length);
      assertNotNull(booleanArray1);
      
      Float[] floatArray1 = ArrayUtils.toObject(floatArray0);
      assertArrayEquals(new float[] {1.0F, 338.0F, 338.0F, 338.0F, 58.0F, 338.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(9, floatArray1.length);
      assertEquals(9, floatArray0.length);
      assertNotNull(floatArray1);
      
      ArrayUtils.swap((char[]) null, (-1808), (-578), 107);
  }

  @Test(timeout = 4000)
  public void test0142()  throws Throwable  {
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short) (-1263);
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      // Undeclared exception!
      try { 
        ArrayUtils.insert(5, booleanArray0, booleanArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 5, Length: 2
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0143()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byte[] byteArray1 = new byte[2];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byte[] byteArray2 = ArrayUtils.addAll(byteArray0, byteArray1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray2);
      assertEquals(3, byteArray0.length);
      assertEquals(2, byteArray1.length);
      assertEquals(5, byteArray2.length);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      assertNotNull(byteArray2);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      // Undeclared exception!
      try { 
        ArrayUtils.insert((-1531), booleanArray0, booleanArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1531, Length: 2
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0144()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      double[] doubleArray1 = ArrayUtils.clone(doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      
      int int0 = ArrayUtils.indexOf(doubleArray0, 85.0, 2147483646, (-2224.3618916887));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals((-1), int0);
      
      boolean boolean0 = ArrayUtils.isSorted((char[]) null);
      assertTrue(boolean0);
      
      short[] shortArray0 = ArrayUtils.removeElements((short[]) null, (short[]) null);
      assertNull(shortArray0);
      
      org.evosuite.runtime.Random.setNextRandom(Integer.MAX_VALUE);
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      booleanArray0[6] = true;
      booleanArray0[7] = true;
      int[] intArray0 = new int[7];
      intArray0[0] = 2207;
      intArray0[1] = (-1);
      intArray0[2] = 2147483646;
      intArray0[3] = 2147483646;
      intArray0[4] = Integer.MAX_VALUE;
      intArray0[5] = Integer.MAX_VALUE;
      intArray0[6] = 2147483646;
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(booleanArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2147483647, Length: 8
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0145()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[1] = true;
      Boolean[] booleanArray1 = ArrayUtils.toObject(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, true}, booleanArray0));
      assertEquals(2, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      assertNotNull(booleanArray1);
      
      float[] floatArray0 = new float[2];
      Float[] floatArray1 = ArrayUtils.toObject(floatArray0);
      assertArrayEquals(new float[] {0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(2, floatArray0.length);
      assertEquals(2, floatArray1.length);
      assertNotNull(floatArray1);
      
      boolean[] booleanArray2 = ArrayUtils.removeAllOccurences(booleanArray0, false);
      assertTrue(Arrays.equals(new boolean[] {false, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray2));
      assertEquals(2, booleanArray0.length);
      assertEquals(1, booleanArray2.length);
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertNotSame(booleanArray0, booleanArray2);
      assertNotSame(booleanArray2, booleanArray0);
      assertNotNull(booleanArray2);
      
      Short short0 = ArrayUtils.get((Short[]) null, (int)  (-44));
      assertNull(short0);
      
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short) (byte) (-44);
      shortArray0[1] = (short) (byte) (-44);
      shortArray0[2] = (short) (byte) (-44);
      shortArray0[3] = (short) (byte) (-44);
      shortArray0[4] = (short) (byte) (-44);
      shortArray0[5] = (short) (byte) (-44);
      shortArray0[6] = (short) (byte) (-44);
      shortArray0[7] = (short) (byte) (-44);
      shortArray0[8] = (short) (byte) (-44);
      short[] shortArray1 = ArrayUtils.clone(shortArray0);
      assertArrayEquals(new short[] {(short) (-44), (short) (-44), (short) (-44), (short) (-44), (short) (-44), (short) (-44), (short) (-44), (short) (-44), (short) (-44)}, shortArray1);
      assertArrayEquals(new short[] {(short) (-44), (short) (-44), (short) (-44), (short) (-44), (short) (-44), (short) (-44), (short) (-44), (short) (-44), (short) (-44)}, shortArray0);
      assertEquals(9, shortArray1.length);
      assertEquals(9, shortArray0.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertNotNull(shortArray1);
      
      int[] intArray0 = new int[1];
      intArray0[0] = 1815;
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(booleanArray2, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1815, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0146()  throws Throwable  {
      Object[] objectArray0 = new Object[5];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      double[] doubleArray0 = new double[0];
      int int0 = ArrayUtils.indexOf(doubleArray0, 1696.473880665, (-1395), (-1216.941349748));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals((-1), int0);
      
      boolean boolean0 = ArrayUtils.isSorted((char[]) null);
      assertTrue(boolean0);
      
      short[] shortArray0 = ArrayUtils.removeElements((short[]) null, (short[]) null);
      assertNull(shortArray0);
      
      org.evosuite.runtime.Random.setNextRandom((-1));
  }

  @Test(timeout = 4000)
  public void test0147()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte) (-107);
      byteArray0[3] = (byte) (-6);
      byte[] byteArray1 = ArrayUtils.removeElement(byteArray0, (byte)123);
      assertArrayEquals(new byte[] {(byte) (-1), (byte) (-1), (byte) (-107), (byte) (-6)}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-1), (byte) (-1), (byte) (-107), (byte) (-6)}, byteArray1);
      assertEquals(4, byteArray0.length);
      assertEquals(4, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      
      int int0 = (-1189);
      long[] longArray0 = new long[8];
      longArray0[0] = (long) (byte) (-1);
      longArray0[1] = (long) (byte)123;
      longArray0[2] = (long) (byte) (-1);
      longArray0[3] = (long) (byte) (-6);
      longArray0[4] = (long) (byte) (-6);
      longArray0[5] = (long) (byte) (-107);
      longArray0[6] = (long) (byte)123;
      longArray0[7] = (long) (byte)123;
      // Undeclared exception!
      try { 
        ArrayUtils.insert((-1189), longArray0, longArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1189, Length: 8
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0148()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)79;
      long[] longArray0 = new long[1];
      longArray0[0] = (long) (byte)79;
      // Undeclared exception!
      try { 
        ArrayUtils.insert((-1430), longArray0, longArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1430, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0149()  throws Throwable  {
      Byte byte0 = new Byte((byte) (-44));
      assertNotNull(byte0);
      assertEquals((byte) (-44), (byte)byte0);
      
      Long long0 = new Long(1L);
      assertNotNull(long0);
      assertEquals(1L, (long)long0);
      
      Long long1 = new Long(2151L);
      assertFalse(long1.equals((Object)long0));
      assertNotNull(long1);
      assertEquals(2151L, (long)long1);
      
      Long long2 = new Long(1L);
      assertTrue(long2.equals((Object)long0));
      assertFalse(long2.equals((Object)long1));
      assertNotNull(long2);
      assertEquals(1L, (long)long2);
      
      Long long3 = new Long((-1L));
      assertFalse(long3.equals((Object)long1));
      assertFalse(long3.equals((Object)long0));
      assertFalse(long3.equals((Object)long2));
      assertNotNull(long3);
      assertEquals((-1L), (long)long3);
      
      Boolean boolean0 = Boolean.TRUE;
      assertNotNull(boolean0);
      assertTrue(boolean0);
      
      boolean[] booleanArray0 = ArrayUtils.toPrimitive((Boolean[]) null);
      assertNull(booleanArray0);
      
      Integer integer0 = Integer.valueOf((int) (byte) (-44));
      assertNotNull(integer0);
      assertEquals((-44), (int)integer0);
      
      Short short0 = new Short((short) (-4356));
      assertNotNull(short0);
      assertEquals((short) (-4356), (short)short0);
      
      boolean boolean1 = ArrayUtils.isSameType(short0, short0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test0150()  throws Throwable  {
      Byte byte0 = new Byte((byte)99);
      assertNotNull(byte0);
      assertEquals((byte)99, (byte)byte0);
      
      Boolean[] booleanArray0 = ArrayUtils.toObject((boolean[]) null);
      assertNull(booleanArray0);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) (byte)99;
      floatArray0[1] = (float) (byte)89;
      floatArray0[2] = (float) (byte)89;
      floatArray0[3] = (float) (byte)99;
      Float[] floatArray1 = ArrayUtils.toObject(floatArray0);
      assertArrayEquals(new float[] {99.0F, 89.0F, 89.0F, 99.0F}, floatArray0, 0.01F);
      assertEquals(4, floatArray0.length);
      assertEquals(4, floatArray1.length);
      assertNotNull(floatArray1);
      
      boolean[] booleanArray1 = ArrayUtils.removeAllOccurences((boolean[]) null, false);
      assertNull(booleanArray1);
      
      Short short0 = ArrayUtils.get((Short[]) null, (-991));
      assertNull(short0);
      
      Character[] characterArray0 = new Character[2];
      Character character0 = Character.valueOf('t');
      assertNotNull(character0);
      assertEquals('t', (char)character0);
      
      characterArray0[0] = character0;
      Character character1 = new Character('`');
      assertFalse(character1.equals((Object)character0));
      assertNotNull(character1);
      assertEquals('`', (char)character1);
      
      characterArray0[1] = character1;
      Character[] characterArray1 = ArrayUtils.nullToEmpty(characterArray0);
      assertEquals(2, characterArray0.length);
      assertEquals(2, characterArray1.length);
      assertSame(characterArray0, characterArray1);
      assertSame(characterArray1, characterArray0);
      assertNotNull(characterArray1);
      
      org.evosuite.runtime.Random.setNextRandom(1);
  }

  @Test(timeout = 4000)
  public void test0151()  throws Throwable  {
      Byte[] byteArray0 = new Byte[2];
      byte byte0 = (byte)51;
      Byte byte1 = new Byte((byte)51);
      assertTrue(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      assertEquals((byte)51, (byte)byte1);
      
      byteArray0[0] = byte1;
      Byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0);
      assertEquals(2, byteArray0.length);
      assertEquals(2, byteArray1.length);
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      
      ArrayUtils.shift((Object[]) byteArray0, 0, (int) (byte)51, (-1916));
      assertEquals(2, byteArray0.length);
      assertSame(byteArray0, byteArray1);
      
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short) (byte)51;
      shortArray0[1] = (short) byte0;
      shortArray0[2] = (short) byte0;
      short[] shortArray1 = ArrayUtils.removeElements(shortArray0, shortArray0);
      assertArrayEquals(new short[] {(short)51, (short)51, (short)51}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertEquals(3, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      
      short[] shortArray2 = new short[3];
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertFalse(shortArray2.equals((Object)shortArray1));
      
      shortArray2[0] = (short) (byte)51;
      shortArray2[1] = (short) byte0;
      Long long0 = new Long((short)51);
      assertNotNull(long0);
      assertEquals(51L, (long)long0);
      
      long[] longArray0 = new long[4];
      longArray0[0] = (long) (short)51;
      longArray0[1] = (long) 0;
      longArray0[2] = (long) (short)51;
      longArray0[3] = (long) (byte)51;
      long[] longArray1 = ArrayUtils.removeElement(longArray0, 1525L);
      assertArrayEquals(new long[] {51L, 0L, 51L, 51L}, longArray1);
      assertArrayEquals(new long[] {51L, 0L, 51L, 51L}, longArray0);
      assertEquals(4, longArray1.length);
      assertEquals(4, longArray0.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray0, longArray1);
      assertNotNull(longArray1);
      
      float[] floatArray0 = new float[0];
      float[] floatArray1 = ArrayUtils.removeAllOccurences(floatArray0, (float) 0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (-1916);
      doubleArray0[1] = (double) (byte)51;
      doubleArray0[2] = (double) (byte)51;
      double[] doubleArray1 = ArrayUtils.addFirst(doubleArray0, (double) byte0);
      assertArrayEquals(new double[] {(-1916.0), 51.0, 51.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {51.0, (-1916.0), 51.0, 51.0}, doubleArray1, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      
      float[] floatArray2 = ArrayUtils.nullToEmpty(floatArray1);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {}, floatArray2, 0.01F);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertEquals(0, floatArray2.length);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray0, floatArray2);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray1, floatArray2);
      assertNotSame(floatArray2, floatArray1);
      assertNotSame(floatArray2, floatArray0);
      assertNotNull(floatArray2);
  }

  @Test(timeout = 4000)
  public void test0152()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = ArrayUtils.removeAllOccurences(doubleArray0, (-1.0));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short)2542;
      shortArray0[1] = (short)1715;
      shortArray0[2] = (short)1176;
      short[] shortArray1 = ArrayUtils.removeAllOccurrences(shortArray0, (short)2542);
      assertArrayEquals(new short[] {(short)2542, (short)1715, (short)1176}, shortArray0);
      assertArrayEquals(new short[] {(short)1715, (short)1176}, shortArray1);
      assertEquals(3, shortArray0.length);
      assertEquals(2, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      
      double[] doubleArray2 = ArrayUtils.insert(2680, doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray2.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotNull(doubleArray2);
      
      int[] intArray0 = new int[6];
      intArray0[0] = (int) (short)1176;
      intArray0[1] = (int) (short)1176;
      intArray0[2] = (int) (short)1176;
      intArray0[3] = (int) (short)1176;
      intArray0[4] = 2680;
      intArray0[5] = (int) (short)2542;
      int[] intArray1 = ArrayUtils.removeElement(intArray0, 1176);
      assertArrayEquals(new int[] {1176, 1176, 1176, 1176, 2680, 2542}, intArray0);
      assertArrayEquals(new int[] {1176, 1176, 1176, 2680, 2542}, intArray1);
      assertEquals(6, intArray0.length);
      assertEquals(5, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)122;
      byteArray0[1] = (byte)104;
      byteArray0[2] = (byte)73;
      byteArray0[3] = (byte)78;
      byteArray0[4] = (byte)8;
      byteArray0[5] = (byte)2;
      byteArray0[6] = (byte) (-115);
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte) (-115), 4);
      assertArrayEquals(new byte[] {(byte)122, (byte)104, (byte)73, (byte)78, (byte)8, (byte)2, (byte) (-115)}, byteArray0);
      assertEquals(7, byteArray0.length);
      assertEquals((-1), int0);
      
      double[] doubleArray3 = new double[5];
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      
      doubleArray3[0] = (double) (byte)2;
      doubleArray3[1] = (double) 2680;
      doubleArray3[2] = (double) 2542;
      doubleArray3[3] = (double) (-1);
      doubleArray3[4] = (double) 1176;
      boolean boolean0 = ArrayUtils.isSameLength(doubleArray3, doubleArray2);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {2.0, 2680.0, 2542.0, (-1.0), 1176.0}, doubleArray3, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray2.length);
      assertEquals(5, doubleArray3.length);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray3));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray3);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0153()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      float[] floatArray0 = new float[4];
      floatArray0[0] = (-1150.5F);
      floatArray0[1] = (-1672.5F);
      floatArray0[2] = (-2005.7074F);
      floatArray0[3] = 3424.91F;
      int int0 = ArrayUtils.lastIndexOf(floatArray0, (-1672.5F), 2);
      assertArrayEquals(new float[] {(-1150.5F), (-1672.5F), (-2005.7074F), 3424.91F}, floatArray0, 0.01F);
      assertEquals(4, floatArray0.length);
      assertEquals(1, int0);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (byte)78;
      String[] stringArray0 = ArrayUtils.EMPTY_STRING_ARRAY;
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      int[] intArray0 = new int[5];
      intArray0[0] = 2;
      intArray0[1] = 2;
      intArray0[2] = (int) (byte)78;
      intArray0[3] = 85;
      intArray0[4] = (int) (byte)78;
      int int1 = ArrayUtils.indexOf(intArray0, (int) (short)78, 85);
      assertArrayEquals(new int[] {2, 2, 78, 85, 78}, intArray0);
      assertEquals(5, intArray0.length);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      Double double0 = new Double((-1));
      assertNotNull(double0);
      assertEquals((-1.0), (double)double0, 0.01);
      
      Double[] doubleArray0 = new Double[2];
      doubleArray0[0] = double0;
      doubleArray0[1] = double0;
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0);
      assertArrayEquals(new double[] {(-1.0), (-1.0)}, doubleArray1, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertNotNull(doubleArray1);
      
      double[] doubleArray2 = new double[0];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      boolean boolean0 = ArrayUtils.isEmpty(doubleArray2);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      assertEquals(0, doubleArray2.length);
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotSame(doubleArray2, doubleArray1);
      assertTrue(boolean0);
      
      Float[] floatArray1 = new Float[3];
      floatArray1[0] = (Float) (-2005.7074F);
      floatArray1[1] = (Float) 3424.91F;
      floatArray1[2] = (Float) 3424.91F;
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(floatArray1, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 85, Length: 3
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0154()  throws Throwable  {
      BitSet bitSet0 = new BitSet();
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertNotNull(bitSet0);
      
      byte[] byteArray0 = new byte[0];
      ArrayUtils.swap(byteArray0, 11, 11, 11);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short)1070;
      shortArray0[2] = (short) (-400);
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) 11;
      floatArray0[1] = (float) (short)1070;
      floatArray0[2] = (float) (short)0;
      floatArray0[3] = (float) (short)1070;
      floatArray0[4] = (float) (short)1070;
      floatArray0[5] = (float) (short)1070;
      floatArray0[6] = (float) (short) (-400);
      boolean boolean0 = ArrayUtils.contains(floatArray0, Float.NaN);
      assertArrayEquals(new float[] {11.0F, 1070.0F, 0.0F, 1070.0F, 1070.0F, 1070.0F, (-400.0F)}, floatArray0, 0.01F);
      assertEquals(7, floatArray0.length);
      assertFalse(boolean0);
      
      long[] longArray0 = new long[7];
      longArray0[0] = 2311L;
      longArray0[1] = (long) (short)1070;
      longArray0[2] = (long) 11;
      longArray0[3] = (long) (-158);
      longArray0[4] = 995L;
      longArray0[5] = (long) (-158);
      longArray0[6] = (long) (-158);
      ArrayUtils.reverse(longArray0, 11, 11);
      assertArrayEquals(new long[] {2311L, 1070L, 11L, (-158L), 995L, (-158L), (-158L)}, longArray0);
      assertEquals(7, longArray0.length);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (short)0;
      doubleArray0[1] = (double) (short)0;
      doubleArray0[2] = (double) 2311L;
      doubleArray0[3] = (double) 1070.0F;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (double) 1070.0F);
      assertArrayEquals(new double[] {0.0, 0.0, 2311.0, 1070.0}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      assertEquals(3, int0);
      
      int[] intArray0 = new int[1];
      intArray0[0] = (int) (short)1070;
      ArrayUtils.reverse(intArray0);
      assertArrayEquals(new int[] {1070}, intArray0);
      assertEquals(1, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test0155()  throws Throwable  {
      int int0 = ArrayUtils.lastIndexOf((float[]) null, 1.0F, 31);
      assertEquals((-1), int0);
      
      byte[] byteArray0 = ArrayUtils.clone((byte[]) null);
      assertNull(byteArray0);
      
      byte[] byteArray1 = ArrayUtils.add((byte[]) null, (byte)2);
      assertArrayEquals(new byte[] {(byte)2}, byteArray1);
      assertEquals(1, byteArray1.length);
      assertNotNull(byteArray1);
      
      Long long0 = new Long((byte)2);
      assertNotNull(long0);
      assertEquals(2L, (long)long0);
      
      Long long1 = new Long((-1L));
      assertFalse(long1.equals((Object)long0));
      assertNotNull(long1);
      assertEquals((-1L), (long)long1);
      
      Long long2 = new Long((-1L));
      assertTrue(long2.equals((Object)long1));
      assertFalse(long2.equals((Object)long0));
      assertNotNull(long2);
      assertEquals((-1L), (long)long2);
      
      Long long3 = new Long((-528L));
      assertFalse(long3.equals((Object)long2));
      assertFalse(long3.equals((Object)long1));
      assertFalse(long3.equals((Object)long0));
      assertNotNull(long3);
      assertEquals((-528L), (long)long3);
      
      Long[] longArray0 = ArrayUtils.nullToEmpty((Long[]) null);
      assertEquals(0, longArray0.length);
      assertNotNull(longArray0);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (byte)2;
      shortArray0[1] = (short) (byte)1;
      short[] shortArray1 = ArrayUtils.nullToEmpty(shortArray0);
      assertArrayEquals(new short[] {(short)2, (short)1}, shortArray0);
      assertArrayEquals(new short[] {(short)2, (short)1}, shortArray1);
      assertEquals(2, shortArray0.length);
      assertEquals(2, shortArray1.length);
      assertSame(shortArray0, shortArray1);
      assertSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'R';
      ArrayUtils.swap(charArray0, 31, 1114111, 1);
      assertArrayEquals(new char[] {'R'}, charArray0);
      assertEquals(1, charArray0.length);
      
      Integer integer0 = new Integer(31);
      assertFalse(integer0.equals((Object)int0));
      assertNotNull(integer0);
      assertEquals(31, (int)integer0);
      
      ArrayUtils.shift((float[]) null, (int) (byte)1, (int) (byte)2, 1492);
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      boolean[] booleanArray1 = ArrayUtils.clone(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray1));
      assertEquals(2, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      
      int[] intArray0 = new int[8];
      intArray0[0] = (-1);
      intArray0[1] = 31;
      intArray0[2] = (-1);
      intArray0[3] = (int) (short)2;
      intArray0[4] = (-1);
      intArray0[5] = 31;
      intArray0[6] = 31;
      intArray0[7] = 1492;
      int int1 = ArrayUtils.indexOf(intArray0, 1492);
      assertArrayEquals(new int[] {(-1), 31, (-1), 2, (-1), 31, 31, 1492}, intArray0);
      assertEquals(8, intArray0.length);
      assertFalse(int1 == int0);
      assertEquals(7, int1);
  }

  @Test(timeout = 4000)
  public void test0156()  throws Throwable  {
      int int0 = ArrayUtils.lastIndexOf((float[]) null, 1.0F, 31);
      assertEquals((-1), int0);
      
      byte[] byteArray0 = ArrayUtils.clone((byte[]) null);
      assertNull(byteArray0);
      
      byte[] byteArray1 = ArrayUtils.add((byte[]) null, (byte)1);
      assertArrayEquals(new byte[] {(byte)1}, byteArray1);
      assertEquals(1, byteArray1.length);
      assertNotNull(byteArray1);
      
      Long long0 = new Long((byte)1);
      assertNotNull(long0);
      assertEquals(1L, (long)long0);
      
      Long long1 = new Long((-1L));
      assertFalse(long1.equals((Object)long0));
      assertNotNull(long1);
      assertEquals((-1L), (long)long1);
      
      Long[] longArray0 = ArrayUtils.nullToEmpty((Long[]) null);
      assertEquals(0, longArray0.length);
      assertNotNull(longArray0);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (byte)1;
      shortArray0[1] = (short) (byte)1;
      char[] charArray0 = new char[1];
      charArray0[0] = 'R';
      Integer integer0 = new Integer(31);
      assertFalse(integer0.equals((Object)int0));
      assertNotNull(integer0);
      assertEquals(31, (int)integer0);
      
      char[] charArray1 = ArrayUtils.nullToEmpty(charArray0);
      assertArrayEquals(new char[] {'R'}, charArray0);
      assertArrayEquals(new char[] {'R'}, charArray1);
      assertEquals(1, charArray0.length);
      assertEquals(1, charArray1.length);
      assertSame(charArray0, charArray1);
      assertSame(charArray1, charArray0);
      assertNotNull(charArray1);
      
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[2] = false;
      boolean[] booleanArray1 = ArrayUtils.insert(1, booleanArray0, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false}, booleanArray0));
      assertEquals(6, booleanArray0.length);
      assertEquals(12, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
  }

  @Test(timeout = 4000)
  public void test0157()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      double[] doubleArray0 = new double[6];
      doubleArray0[1] = (double) (-1909L);
      doubleArray0[2] = (double) (-1909L);
      doubleArray0[3] = (double) (-1909L);
      doubleArray0[4] = (double) (-1909L);
      doubleArray0[5] = (double) (-1909L);
      boolean boolean0 = ArrayUtils.contains(doubleArray0, (-1909.0));
      assertArrayEquals(new double[] {0.0, (-1909.0), (-1909.0), (-1909.0), (-1909.0), (-1909.0)}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      assertTrue(boolean0);
      
      boolean[] booleanArray1 = new boolean[3];
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      booleanArray1[0] = true;
      booleanArray1[1] = false;
      booleanArray1[2] = true;
      // Undeclared exception!
      try { 
        ArrayUtils.insert((-52), booleanArray1, booleanArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -52, Length: 3
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0158()  throws Throwable  {
      int int0 = ArrayUtils.lastIndexOf((float[]) null, 1.0F, 31);
      assertEquals((-1), int0);
      
      byte[] byteArray0 = ArrayUtils.clone((byte[]) null);
      assertNull(byteArray0);
      
      byte[] byteArray1 = ArrayUtils.add((byte[]) null, (byte)2);
      assertArrayEquals(new byte[] {(byte)2}, byteArray1);
      assertEquals(1, byteArray1.length);
      assertNotNull(byteArray1);
      
      Long long0 = new Long((byte)2);
      assertNotNull(long0);
      assertEquals(2L, (long)long0);
      
      Long long1 = new Long((-1L));
      assertFalse(long1.equals((Object)long0));
      assertNotNull(long1);
      assertEquals((-1L), (long)long1);
      
      Long long2 = new Long((-1L));
      assertFalse(long2.equals((Object)long0));
      assertTrue(long2.equals((Object)long1));
      assertNotNull(long2);
      assertEquals((-1L), (long)long2);
      
      Long long3 = new Long((-528L));
      assertFalse(long3.equals((Object)long2));
      assertFalse(long3.equals((Object)long0));
      assertFalse(long3.equals((Object)long1));
      assertNotNull(long3);
      assertEquals((-528L), (long)long3);
      
      Long[] longArray0 = ArrayUtils.nullToEmpty((Long[]) null);
      assertEquals(0, longArray0.length);
      assertNotNull(longArray0);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (byte)2;
      shortArray0[1] = (short) (byte)1;
      short[] shortArray1 = ArrayUtils.nullToEmpty(shortArray0);
      assertArrayEquals(new short[] {(short)2, (short)1}, shortArray0);
      assertArrayEquals(new short[] {(short)2, (short)1}, shortArray1);
      assertEquals(2, shortArray0.length);
      assertEquals(2, shortArray1.length);
      assertSame(shortArray0, shortArray1);
      assertSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'R';
      ArrayUtils.swap(charArray0, 31, 1114111, 1);
      assertArrayEquals(new char[] {'R'}, charArray0);
      assertEquals(1, charArray0.length);
      
      Integer integer0 = new Integer(31);
      assertFalse(integer0.equals((Object)int0));
      assertNotNull(integer0);
      assertEquals(31, (int)integer0);
      
      char[] charArray1 = ArrayUtils.nullToEmpty(charArray0);
      assertArrayEquals(new char[] {'R'}, charArray1);
      assertArrayEquals(new char[] {'R'}, charArray0);
      assertEquals(1, charArray1.length);
      assertEquals(1, charArray0.length);
      assertSame(charArray1, charArray0);
      assertSame(charArray0, charArray1);
      assertNotNull(charArray1);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 31;
      doubleArray0[1] = (double) (short)1;
      doubleArray0[2] = (double) 1.0F;
      doubleArray0[3] = (double) 'R';
      doubleArray0[4] = (double) 1.0F;
      doubleArray0[5] = (double) 1114111;
      doubleArray0[6] = (double) 31;
      doubleArray0[7] = (double) 1114111;
      boolean boolean0 = ArrayUtils.contains(doubleArray0, (double) (short)2);
      assertArrayEquals(new double[] {31.0, 1.0, 1.0, 82.0, 1.0, 1114111.0, 31.0, 1114111.0}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      assertFalse(boolean0);
      
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      boolean[] booleanArray1 = ArrayUtils.insert(1, booleanArray0, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false}, booleanArray0));
      assertEquals(12, booleanArray1.length);
      assertEquals(6, booleanArray0.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotNull(booleanArray1);
  }

  @Test(timeout = 4000)
  public void test0159()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)46;
      byteArray0[1] = (byte)42;
      boolean boolean0 = ArrayUtils.contains(byteArray0, (byte) (-10));
      assertArrayEquals(new byte[] {(byte)46, (byte)42}, byteArray0);
      assertEquals(2, byteArray0.length);
      assertFalse(boolean0);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      boolean[] booleanArray1 = ArrayUtils.removeAllOccurences(booleanArray0, false);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertEquals(1, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      
      boolean[] booleanArray2 = ArrayUtils.add(booleanArray0, true);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, true}, booleanArray2));
      assertEquals(1, booleanArray0.length);
      assertEquals(2, booleanArray2.length);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertNotSame(booleanArray0, booleanArray2);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray2, booleanArray1);
      assertNotSame(booleanArray2, booleanArray0);
      assertNotNull(booleanArray2);
      
      double[] doubleArray0 = new double[1];
      byteArray0[0] = (byte) (-10);
      double[] doubleArray1 = ArrayUtils.removeAllOccurences(doubleArray0, (double) (byte)42);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      
      double[] doubleArray2 = ArrayUtils.removeElement(doubleArray1, 3236.2602799763);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray2, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertEquals(1, doubleArray2.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotNull(doubleArray2);
      
      ArrayUtils.swap(booleanArray1, 0, (int) (byte)42);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertEquals(1, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertFalse(booleanArray0.equals((Object)booleanArray2));
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray2));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotSame(booleanArray0, booleanArray2);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray2);
      assertNotSame(booleanArray1, booleanArray0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(booleanArray1, false, 1136);
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertEquals(1, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertFalse(booleanArray0.equals((Object)booleanArray2));
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray2));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotSame(booleanArray0, booleanArray2);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray2);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(bitSet0);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (byte) (-10);
      short[] shortArray1 = ArrayUtils.removeAllOccurrences(shortArray0, (short)4165);
      assertArrayEquals(new short[] {(short) (-10)}, shortArray1);
      assertArrayEquals(new short[] {(short) (-10)}, shortArray0);
      assertEquals(1, shortArray1.length);
      assertEquals(1, shortArray0.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertNotNull(shortArray1);
  }

  @Test(timeout = 4000)
  public void test0160()  throws Throwable  {
      Byte[] byteArray0 = new Byte[2];
      byte byte0 = (byte)51;
      Byte byte1 = new Byte((byte)51);
      assertTrue(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      assertEquals((byte)51, (byte)byte1);
      
      byteArray0[0] = byte1;
      Byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0);
      assertEquals(2, byteArray0.length);
      assertEquals(2, byteArray1.length);
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      
      ArrayUtils.shift((Object[]) byteArray0, 0, (int) (byte)51, (-1916));
      assertEquals(2, byteArray0.length);
      assertSame(byteArray0, byteArray1);
      
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short) (byte)51;
      shortArray0[1] = (short) byte0;
      shortArray0[2] = (short) byte0;
      short[] shortArray1 = ArrayUtils.removeElements(shortArray0, shortArray0);
      assertArrayEquals(new short[] {(short)51, (short)51, (short)51}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertEquals(3, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      
      Object[] objectArray0 = ArrayUtils.nullToEmpty((Object[]) byteArray0);
      assertEquals(2, byteArray0.length);
      assertEquals(2, objectArray0.length);
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray0, objectArray0);
      assertNotNull(objectArray0);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) (short)51;
      longArray0[1] = (long) (short)51;
      ArrayUtils.shift((Object[]) byteArray1, (-2285));
      assertEquals(2, byteArray0.length);
      assertEquals(2, byteArray1.length);
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray0, objectArray0);
      assertSame(byteArray1, objectArray0);
      assertSame(byteArray1, byteArray0);
      
      double[] doubleArray0 = ArrayUtils.subarray((double[]) null, 0, 1482);
      assertNull(doubleArray0);
      
      double[] doubleArray1 = ArrayUtils.subarray((double[]) null, 17, (int) (byte)51);
      assertNull(doubleArray1);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray0, (-1753L), (int) (short)51);
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertArrayEquals(new long[] {51L, 51L}, longArray0);
      assertEquals(2, longArray0.length);
      assertNotNull(bitSet0);
  }

  @Test(timeout = 4000)
  public void test0161()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-39);
      byte[] byteArray1 = new byte[8];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte) (-39);
      byteArray1[2] = (byte) (-39);
      String string0 = ArrayUtils.toString((Object) "");
      assertNotNull(string0);
      assertEquals("", string0);
      
      int[] intArray0 = ArrayUtils.subarray((int[]) null, (-127), 16);
      assertNull(intArray0);
      
      char[] charArray0 = new char[1];
      charArray0[0] = '0';
      int int0 = ArrayUtils.indexOf(charArray0, '0', (int) (byte) (-39));
      assertArrayEquals(new char[] {'0'}, charArray0);
      assertEquals(1, charArray0.length);
      assertEquals(0, int0);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) 16;
      longArray0[1] = (long) '0';
      boolean boolean0 = ArrayUtils.isSorted(longArray0);
      assertArrayEquals(new long[] {16L, 48L}, longArray0);
      assertEquals(2, longArray0.length);
      assertTrue(boolean0);
      
      long[] longArray1 = ArrayUtils.removeElement(longArray0, 0L);
      assertArrayEquals(new long[] {16L, 48L}, longArray0);
      assertArrayEquals(new long[] {16L, 48L}, longArray1);
      assertEquals(2, longArray0.length);
      assertEquals(2, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
  }

  @Test(timeout = 4000)
  public void test0162()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      float[] floatArray0 = new float[4];
      floatArray0[0] = (-1150.5F);
      floatArray0[0] = (-1150.5F);
      floatArray0[2] = (-2005.7074F);
      floatArray0[3] = 3424.91F;
      int int0 = ArrayUtils.lastIndexOf(floatArray0, 0.0F, 2);
      assertArrayEquals(new float[] {(-1150.5F), 0.0F, (-2005.7074F), 3424.91F}, floatArray0, 0.01F);
      assertEquals(4, floatArray0.length);
      assertEquals(1, int0);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (byte)78;
      shortArray0[1] = (short) (byte)78;
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-39.0);
      doubleArray0[1] = (double) 1;
      doubleArray0[2] = (double) (-2005.7074F);
      double[] doubleArray1 = ArrayUtils.EMPTY_DOUBLE_ARRAY;
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(0, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      
      int[] intArray0 = new int[5];
      intArray0[0] = 3247;
      intArray0[1] = (int) (short)78;
      intArray0[2] = (int) (byte)78;
      intArray0[3] = (int) (byte)78;
      intArray0[4] = (int) (short)78;
      int[] intArray1 = ArrayUtils.removeElement(intArray0, 78);
      assertArrayEquals(new int[] {3247, 78, 78, 78, 78}, intArray0);
      assertArrayEquals(new int[] {3247, 78, 78, 78}, intArray1);
      assertEquals(5, intArray0.length);
      assertEquals(4, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
  }

  @Test(timeout = 4000)
  public void test0163()  throws Throwable  {
      float[] floatArray0 = new float[2];
      floatArray0[0] = 1566.475F;
      floatArray0[1] = (-2607.0F);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (-2607.0F);
      doubleArray0[1] = (double) 1566.475F;
      doubleArray0[2] = (double) 1566.475F;
      doubleArray0[3] = (double) (-2607.0F);
      doubleArray0[4] = (double) 1566.475F;
      boolean boolean0 = ArrayUtils.isSameLength(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {(-2607.0), 1566.4749755859375, 1566.4749755859375, (-2607.0), 1566.4749755859375}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      assertTrue(boolean0);
      
      char[] charArray0 = new char[3];
      charArray0[0] = ':';
      charArray0[1] = ':';
      charArray0[2] = ':';
      Character[] characterArray0 = ArrayUtils.toObject(charArray0);
      assertArrayEquals(new char[] {':', ':', ':'}, charArray0);
      assertEquals(3, charArray0.length);
      assertEquals(3, characterArray0.length);
      assertNotNull(characterArray0);
      
      double[] doubleArray1 = new double[4];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (-1548.005222043538);
      doubleArray1[1] = 0.0;
      doubleArray1[2] = (double) ':';
      doubleArray1[3] = 28.0;
      int int0 = ArrayUtils.lastIndexOf(doubleArray1, 2461.557910852848, 3911.6057554351);
      assertArrayEquals(new double[] {(-1548.005222043538), 0.0, 58.0, 28.0}, doubleArray1, 0.01);
      assertEquals(4, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(3, int0);
      
      int[] intArray0 = new int[6];
      intArray0[0] = (int) ':';
      intArray0[1] = 3;
      intArray0[2] = 120;
      intArray0[3] = 3;
      intArray0[4] = 3;
      intArray0[5] = 2140505135;
      int[] intArray1 = ArrayUtils.removeElement(intArray0, 58);
      assertArrayEquals(new int[] {58, 3, 120, 3, 3, 2140505135}, intArray0);
      assertArrayEquals(new int[] {3, 120, 3, 3, 2140505135}, intArray1);
      assertEquals(6, intArray0.length);
      assertEquals(5, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
  }

  @Test(timeout = 4000)
  public void test0164()  throws Throwable  {
      short[] shortArray0 = new short[8];
      boolean[] booleanArray0 = new boolean[0];
      ArrayUtils.shift(booleanArray0, (-796), 786, (-796));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals(0, booleanArray0.length);
      
      long[] longArray0 = new long[5];
      longArray0[0] = (long) (short)0;
      longArray0[1] = (long) (short)0;
      longArray0[2] = (long) (-796);
      longArray0[3] = (long) (short)2151;
      int[] intArray0 = new int[0];
      int[] intArray1 = ArrayUtils.insert((-6298), intArray0, intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (-6298);
      doubleArray0[1] = (double) 0L;
      doubleArray0[2] = (double) 786;
      doubleArray0[3] = (double) (-796L);
      int int0 = ArrayUtils.indexOf(doubleArray0, 306.728);
      assertArrayEquals(new double[] {(-6298.0), 0.0, 786.0, (-796.0)}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      assertEquals((-1), int0);
      
      String[] stringArray0 = new String[5];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "java.lang.Integer";
      stringArray0[4] = "', has a length less than 2";
      String[] stringArray1 = ArrayUtils.addFirst(stringArray0, "");
      assertEquals(5, stringArray0.length);
      assertEquals(6, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertNotNull(stringArray1);
      
      int int1 = ArrayUtils.indexOf(booleanArray0, false, (int) (short)2151);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals(0, booleanArray0.length);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-95);
      byteArray0[1] = (byte)2;
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte) (-115);
      byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-95), (byte)2, (byte) (-1), (byte) (-115)}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-95), (byte)2, (byte) (-1), (byte) (-115)}, byteArray1);
      assertEquals(4, byteArray0.length);
      assertEquals(4, byteArray1.length);
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
  }

  @Test(timeout = 4000)
  public void test0165()  throws Throwable  {
      Character character0 = new Character('Q');
      assertNotNull(character0);
      assertEquals('Q', (char)character0);
      
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) 'Q';
      floatArray0[1] = (float) 'Q';
      floatArray0[2] = (float) 'Q';
      floatArray0[3] = (float) 'Q';
      floatArray0[4] = 3371.0F;
      floatArray0[5] = (float) 'Q';
      floatArray0[6] = (float) 'Q';
      floatArray0[7] = (float) 'Q';
      floatArray0[8] = (float) 'Q';
      int int0 = ArrayUtils.indexOf(floatArray0, 855.7504F, (-1));
      assertArrayEquals(new float[] {81.0F, 81.0F, 81.0F, 81.0F, 3371.0F, 81.0F, 81.0F, 81.0F, 81.0F}, floatArray0, 0.01F);
      assertEquals(9, floatArray0.length);
      assertEquals((-1), int0);
      
      MutableInt mutableInt0 = new MutableInt((Number) (-1));
      assertEquals((-1.0), mutableInt0.doubleValue(), 0.01);
      assertEquals((-1.0F), mutableInt0.floatValue(), 0.01F);
      assertEquals((-1), mutableInt0.intValue());
      assertEquals((short) (-1), mutableInt0.shortValue());
      assertEquals("-1", mutableInt0.toString());
      assertEquals((byte) (-1), mutableInt0.byteValue());
      assertEquals((-1), (int)mutableInt0.getValue());
      assertEquals((-1), (int)mutableInt0.toInteger());
      assertEquals((-1L), mutableInt0.longValue());
      assertNotNull(mutableInt0);
      
      boolean boolean0 = ArrayUtils.isEquals(character0, mutableInt0);
      assertEquals((-1.0), mutableInt0.doubleValue(), 0.01);
      assertEquals((-1.0F), mutableInt0.floatValue(), 0.01F);
      assertEquals((-1), mutableInt0.intValue());
      assertEquals((short) (-1), mutableInt0.shortValue());
      assertEquals("-1", mutableInt0.toString());
      assertEquals((byte) (-1), mutableInt0.byteValue());
      assertEquals((-1), (int)mutableInt0.getValue());
      assertEquals((-1), (int)mutableInt0.toInteger());
      assertEquals((-1L), mutableInt0.longValue());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0166()  throws Throwable  {
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)560;
      shortArray0[1] = (short)0;
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) (short)0;
      floatArray0[1] = (float) (short)560;
      float[] floatArray1 = ArrayUtils.nullToEmpty(floatArray0);
      assertArrayEquals(new float[] {0.0F, 560.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F, 560.0F}, floatArray1, 0.01F);
      assertEquals(2, floatArray0.length);
      assertEquals(2, floatArray1.length);
      assertSame(floatArray0, floatArray1);
      assertSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      
      int[] intArray0 = new int[0];
      int[] intArray1 = ArrayUtils.removeAllOccurrences(intArray0, (int) (short)560);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      
      MockRandom mockRandom0 = new MockRandom((short)560);
      assertNotNull(mockRandom0);
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'T';
      charArray0[1] = '_';
      charArray0[2] = ')';
      LongStream longStream0 = mockRandom0.longs();
      assertNotNull(longStream0);
      
      charArray0[3] = 'J';
      ArrayUtils.shuffle(charArray0, (Random) mockRandom0);
      assertArrayEquals(new char[] {'_', ')', 'J', 'T'}, charArray0);
      assertEquals(4, charArray0.length);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 560.0F;
      doubleArray0[1] = (double) 'J';
      doubleArray0[2] = (double) (short)6;
      doubleArray0[3] = (double) ')';
      doubleArray0[4] = (double) (short)560;
      doubleArray0[5] = 2828.968783356;
      ArrayUtils.shuffle(doubleArray0);
      assertArrayEquals(new double[] {74.0, 6.0, 41.0, 560.0, 2828.968783356, 560.0}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      
      ArrayUtils.shift(doubleArray0, (int) (short)0, (int) (short)560, 78);
      assertArrayEquals(new double[] {74.0, 6.0, 41.0, 560.0, 2828.968783356, 560.0}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      
      int int0 = ArrayUtils.indexOf(floatArray1, (float) (short)560, (-1808));
      assertArrayEquals(new float[] {0.0F, 560.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F, 560.0F}, floatArray1, 0.01F);
      assertEquals(2, floatArray0.length);
      assertEquals(2, floatArray1.length);
      assertSame(floatArray0, floatArray1);
      assertSame(floatArray1, floatArray0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test0167()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 914.944001638755;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (-1202.7635315971), 0.0);
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertArrayEquals(new double[] {0.0, 914.944001638755, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      assertNotNull(bitSet0);
      
      Float[] floatArray0 = new Float[2];
      Float float0 = new Float(0.0F);
      assertNotNull(float0);
      assertEquals(0.0F, (float)float0, 0.01F);
      
      floatArray0[0] = float0;
      float[] floatArray1 = new float[1];
      floatArray1[0] = (-1789.9796F);
      float[] floatArray2 = ArrayUtils.nullToEmpty(floatArray1);
      assertArrayEquals(new float[] {(-1789.9796F)}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {(-1789.9796F)}, floatArray2, 0.01F);
      assertEquals(1, floatArray1.length);
      assertEquals(1, floatArray2.length);
      assertSame(floatArray1, floatArray2);
      assertSame(floatArray2, floatArray1);
      assertNotNull(floatArray2);
      
      int[] intArray0 = new int[3];
      intArray0[0] = 288;
      intArray0[1] = 288;
      intArray0[2] = 288;
      int[] intArray1 = ArrayUtils.removeAllOccurrences(intArray0, 288);
      assertArrayEquals(new int[] {}, intArray1);
      assertArrayEquals(new int[] {288, 288, 288}, intArray0);
      assertEquals(0, intArray1.length);
      assertEquals(3, intArray0.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
      assertNotNull(intArray1);
      
      Boolean boolean0 = Boolean.FALSE;
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      boolean[] booleanArray0 = ArrayUtils.toPrimitive((Boolean[]) null, true);
      assertNull(booleanArray0);
      
      long[] longArray0 = new long[4];
      longArray0[0] = 995L;
      longArray0[1] = (long) 288;
      longArray0[2] = (long) 288;
      longArray0[3] = (long) (-158);
      boolean boolean1 = ArrayUtils.isSorted(intArray1);
      assertArrayEquals(new int[] {}, intArray1);
      assertArrayEquals(new int[] {288, 288, 288}, intArray0);
      assertEquals(0, intArray1.length);
      assertEquals(3, intArray0.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(intArray0.equals((Object)intArray1));
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test0168()  throws Throwable  {
      int int0 = ArrayUtils.lastIndexOf((float[]) null, 1.0F, 31);
      assertEquals((-1), int0);
      
      byte[] byteArray0 = ArrayUtils.clone((byte[]) null);
      assertNull(byteArray0);
      
      byte[] byteArray1 = ArrayUtils.add((byte[]) null, (byte)2);
      assertArrayEquals(new byte[] {(byte)2}, byteArray1);
      assertEquals(1, byteArray1.length);
      assertNotNull(byteArray1);
      
      Long long0 = new Long((byte)2);
      assertNotNull(long0);
      assertEquals(2L, (long)long0);
      
      Long long1 = new Long((-1L));
      assertFalse(long1.equals((Object)long0));
      assertNotNull(long1);
      assertEquals((-1L), (long)long1);
      
      Long long2 = new Long((-1L));
      assertTrue(long2.equals((Object)long1));
      assertFalse(long2.equals((Object)long0));
      assertNotNull(long2);
      assertEquals((-1L), (long)long2);
      
      Long long3 = new Long((-528L));
      assertFalse(long3.equals((Object)long0));
      assertFalse(long3.equals((Object)long1));
      assertFalse(long3.equals((Object)long2));
      assertNotNull(long3);
      assertEquals((-528L), (long)long3);
      
      Long[] longArray0 = ArrayUtils.nullToEmpty((Long[]) null);
      assertEquals(0, longArray0.length);
      assertNotNull(longArray0);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (byte)1;
      shortArray0[1] = (short) (byte)1;
      short[] shortArray1 = ArrayUtils.nullToEmpty(shortArray0);
      assertArrayEquals(new short[] {(short)1, (short)1}, shortArray0);
      assertArrayEquals(new short[] {(short)1, (short)1}, shortArray1);
      assertEquals(2, shortArray0.length);
      assertEquals(2, shortArray1.length);
      assertSame(shortArray0, shortArray1);
      assertSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'R';
      ArrayUtils.swap(charArray0, 31, 1114111, 1);
      assertArrayEquals(new char[] {'R'}, charArray0);
      assertEquals(1, charArray0.length);
      
      Integer integer0 = new Integer(31);
      assertFalse(integer0.equals((Object)int0));
      assertNotNull(integer0);
      assertEquals(31, (int)integer0);
      
      Integer[] integerArray0 = new Integer[1];
      integerArray0[0] = integer0;
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0);
      assertArrayEquals(new int[] {31}, intArray0);
      assertEquals(1, integerArray0.length);
      assertEquals(1, intArray0.length);
      assertNotNull(intArray0);
      
      boolean boolean0 = ArrayUtils.isSorted(intArray0);
      assertArrayEquals(new int[] {31}, intArray0);
      assertEquals(1, integerArray0.length);
      assertEquals(1, intArray0.length);
      assertTrue(boolean0);
      
      short[] shortArray2 = ArrayUtils.removeAllOccurrences(shortArray1, (short) (byte)1);
      assertArrayEquals(new short[] {}, shortArray2);
      assertArrayEquals(new short[] {(short)1, (short)1}, shortArray0);
      assertArrayEquals(new short[] {(short)1, (short)1}, shortArray1);
      assertEquals(0, shortArray2.length);
      assertEquals(2, shortArray0.length);
      assertEquals(2, shortArray1.length);
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertFalse(shortArray2.equals((Object)shortArray1));
      assertNotSame(shortArray2, shortArray0);
      assertNotSame(shortArray2, shortArray1);
      assertSame(shortArray0, shortArray1);
      assertNotSame(shortArray0, shortArray2);
      assertSame(shortArray1, shortArray0);
      assertNotSame(shortArray1, shortArray2);
      assertNotNull(shortArray2);
  }

  @Test(timeout = 4000)
  public void test0169()  throws Throwable  {
      BitSet bitSet0 = ArrayUtils.indexesOf((double[]) null, (-419.8179467991771), 406);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertNotNull(bitSet0);
      
      Long[] longArray0 = new Long[4];
      Long long0 = new Long(406);
      assertNotNull(long0);
      assertEquals(406L, (long)long0);
      
      longArray0[0] = long0;
      Long long1 = Long.valueOf((long) longArray0[0]);
      assertEquals(4, longArray0.length);
      assertTrue(long1.equals((Object)long0));
      assertNotNull(long1);
      assertEquals(406L, (long)long1);
      
      longArray0[1] = long1;
      Long long2 = new Long(620L);
      assertFalse(long2.equals((Object)long1));
      assertFalse(long2.equals((Object)long0));
      assertNotNull(long2);
      assertEquals(620L, (long)long2);
      
      longArray0[2] = long2;
      Long long3 = new Long((-2194L));
      assertFalse(long3.equals((Object)long1));
      assertFalse(long3.equals((Object)long2));
      assertFalse(long3.equals((Object)long0));
      assertNotNull(long3);
      assertEquals((-2194L), (long)long3);
      
      longArray0[3] = long3;
      Class<Long[]> class0 = Long[].class;
      Long[] longArray1 = ArrayUtils.nullToEmpty(longArray0, class0);
      assertEquals(4, longArray0.length);
      assertEquals(4, longArray1.length);
      assertSame(longArray0, longArray1);
      assertSame(longArray1, longArray0);
      assertNotNull(longArray1);
      
      Long[] longArray2 = ArrayUtils.removeAllOccurrences(longArray0, longArray0[2]);
      assertEquals(4, longArray0.length);
      assertEquals(3, longArray2.length);
      assertFalse(longArray2.equals((Object)longArray1));
      assertFalse(longArray2.equals((Object)longArray0));
      assertSame(longArray0, longArray1);
      assertNotSame(longArray0, longArray2);
      assertNotSame(longArray2, longArray1);
      assertNotSame(longArray2, longArray0);
      assertNotNull(longArray2);
      
      Long[] longArray3 = ArrayUtils.removeElement(longArray2, (Object) class0);
      assertEquals(4, longArray0.length);
      assertEquals(3, longArray2.length);
      assertEquals(3, longArray3.length);
      assertFalse(longArray0.equals((Object)longArray2));
      assertFalse(longArray2.equals((Object)longArray1));
      assertFalse(longArray2.equals((Object)longArray0));
      assertFalse(longArray3.equals((Object)longArray2));
      assertFalse(longArray3.equals((Object)longArray1));
      assertFalse(longArray3.equals((Object)longArray0));
      assertSame(longArray0, longArray1);
      assertNotSame(longArray0, longArray3);
      assertNotSame(longArray0, longArray2);
      assertNotSame(longArray2, longArray3);
      assertNotSame(longArray2, longArray1);
      assertNotSame(longArray2, longArray0);
      assertNotSame(longArray3, longArray2);
      assertNotSame(longArray3, longArray1);
      assertNotSame(longArray3, longArray0);
      assertNotNull(longArray3);
  }

  @Test(timeout = 4000)
  public void test0170()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      float[] floatArray0 = new float[4];
      floatArray0[0] = (-1150.5F);
      ArrayUtils.shift(floatArray0, (-560), (-2042), 2147483636);
      assertArrayEquals(new float[] {(-1150.5F), 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(4, floatArray0.length);
      
      char[] charArray0 = new char[7];
      charArray0[0] = '}';
      charArray0[1] = 'K';
      charArray0[2] = 'K';
      charArray0[3] = ',';
      charArray0[4] = '\u001C';
      charArray0[5] = 'U';
      charArray0[6] = 'n';
      ArrayUtils.reverse(charArray0, 2147483636, (-929));
      assertArrayEquals(new char[] {'}', 'K', 'K', ',', '\u001C', 'U', 'n'}, charArray0);
      assertEquals(7, charArray0.length);
      
      Boolean[] booleanArray1 = ArrayUtils.toObject(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertEquals(1, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertNotNull(booleanArray1);
      
      Float[] floatArray1 = ArrayUtils.toObject(floatArray0);
      assertArrayEquals(new float[] {(-1150.5F), 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(4, floatArray0.length);
      assertEquals(4, floatArray1.length);
      assertNotNull(floatArray1);
      
      ArrayUtils.swap(charArray0, (-7), (-1808), 2147483636);
      assertArrayEquals(new char[] {'}', 'K', 'K', ',', '\u001C', 'U', 'n'}, charArray0);
      assertEquals(7, charArray0.length);
      
      Integer[] integerArray0 = new Integer[1];
      Integer integer0 = new Integer(2146474966);
      assertNotNull(integer0);
      assertEquals(2146474966, (int)integer0);
      
      Integer integer1 = Integer.getInteger("T+1q291rI`A%QK", integer0);
      assertNotNull(integer1);
      assertEquals(2146474966, (int)integer1);
      
      integerArray0[0] = integer1;
      Integer integer2 = new Integer(2147483636);
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertNotNull(integer2);
      assertEquals(2147483636, (int)integer2);
      
      Integer[] integerArray1 = ArrayUtils.removeAllOccurrences(integerArray0, integer2);
      assertEquals(1, integerArray0.length);
      assertEquals(1, integerArray1.length);
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertNotNull(integerArray1);
  }

  @Test(timeout = 4000)
  public void test0171()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)1;
      float[] floatArray0 = new float[2];
      floatArray0[0] = 1.0F;
      floatArray0[1] = 1192.67F;
      ArrayUtils.reverse(floatArray0, (int) (byte)1, 13);
      assertArrayEquals(new float[] {1.0F, 1192.67F}, floatArray0, 0.01F);
      assertEquals(2, floatArray0.length);
      
      String[] stringArray0 = new String[8];
      stringArray0[0] = "java.lang.Byte";
      stringArray0[1] = "{M)IP:";
      stringArray0[2] = "J)&'pft7Nc`)dG";
      stringArray0[3] = "java.lang.String";
      stringArray0[4] = "java.lang.Boolean";
      stringArray0[5] = "Index: ";
      stringArray0[6] = "]";
      stringArray0[7] = "F~";
      String[] stringArray1 = ArrayUtils.subarray(stringArray0, (int) 1, (int) 1);
      assertEquals(8, stringArray0.length);
      assertEquals(0, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertNotNull(stringArray1);
  }

  @Test(timeout = 4000)
  public void test0172()  throws Throwable  {
      int int0 = (-1);
      int[] intArray0 = new int[5];
      intArray0[0] = (-1);
      intArray0[1] = (-1);
      intArray0[2] = (-1);
      intArray0[3] = 1128;
      intArray0[1] = (-1);
      ArrayUtils.shuffle(intArray0);
      assertArrayEquals(new int[] {(-1), (-1), 1128, 0, (-1)}, intArray0);
      assertEquals(5, intArray0.length);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 963.2049;
      doubleArray0[2] = (double) (-1);
      doubleArray0[3] = (double) (-1);
      ArrayUtils.swap(doubleArray0, 0, 0, (-1));
      assertArrayEquals(new double[] {963.2049, 0.0, (-1.0), (-1.0)}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      
      Integer[] integerArray0 = new Integer[3];
      integerArray0[0] = (Integer) 0;
      integerArray0[1] = (Integer) (-1);
      integerArray0[2] = (Integer) (-1);
      int[] intArray1 = ArrayUtils.toPrimitive(integerArray0, int0);
      assertArrayEquals(new int[] {0, (-1), (-1)}, intArray1);
      assertEquals(3, intArray1.length);
      assertEquals(3, integerArray0.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      
      boolean boolean0 = ArrayUtils.contains(intArray0, 1128);
      assertArrayEquals(new int[] {(-1), (-1), 1128, 0, (-1)}, intArray0);
      assertEquals(5, intArray0.length);
      assertFalse(intArray0.equals((Object)intArray1));
      assertNotSame(intArray0, intArray1);
      assertTrue(boolean0);
      
      long[] longArray0 = ArrayUtils.removeElement((long[]) null, (long) (-1));
      assertNull(longArray0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((long[]) null, 2008L, 1128);
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertNotNull(bitSet0);
  }

  @Test(timeout = 4000)
  public void test0173()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = '~';
      Long long0 = new Long(495L);
      assertNotNull(long0);
      assertEquals(495L, (long)long0);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (-2147483600L);
      longArray0[1] = (long) '~';
      long[] longArray1 = ArrayUtils.removeElement(longArray0, 495L);
      assertArrayEquals(new long[] {(-2147483600L), 126L}, longArray0);
      assertArrayEquals(new long[] {(-2147483600L), 126L}, longArray1);
      assertEquals(2, longArray0.length);
      assertEquals(2, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
      
      float[] floatArray0 = new float[0];
      float[] floatArray1 = ArrayUtils.removeAllOccurences(floatArray0, 560.0F);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      
      boolean boolean0 = ArrayUtils.isSorted(charArray0);
      assertArrayEquals(new char[] {'~', '\u0000'}, charArray0);
      assertEquals(2, charArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0174()  throws Throwable  {
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short) (-13);
      shortArray0[1] = (short)43;
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      int[] intArray0 = new int[8];
      intArray0[0] = (int) (short) (-13);
      intArray0[1] = (int) (short) (-13);
      intArray0[2] = (int) (short) (-13);
      intArray0[3] = (int) (short) (-13);
      intArray0[4] = (int) (short)43;
      intArray0[5] = (int) (short) (-13);
      intArray0[6] = 2144792565;
      intArray0[7] = (int) (short) (-13);
      boolean boolean0 = ArrayUtils.isSorted(intArray0);
      assertArrayEquals(new int[] {(-13), (-13), (-13), (-13), 43, (-13), 2144792565, (-13)}, intArray0);
      assertEquals(8, intArray0.length);
      assertFalse(boolean0);
      
      long[] longArray0 = new long[4];
      longArray0[0] = (long) (short)43;
      longArray0[1] = (long) (short) (-13);
      longArray0[2] = (long) (short)43;
      longArray0[3] = (long) (-13);
      long[] longArray1 = ArrayUtils.removeAllOccurrences(longArray0, 2115L);
      assertArrayEquals(new long[] {43L, (-13L), 43L, (-13L)}, longArray1);
      assertArrayEquals(new long[] {43L, (-13L), 43L, (-13L)}, longArray0);
      assertEquals(4, longArray1.length);
      assertEquals(4, longArray0.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray0, longArray1);
      assertNotNull(longArray1);
      
      ArrayUtils.shift(longArray0, 2144792565);
      assertArrayEquals(new long[] {(-13L), 43L, (-13L), 43L}, longArray0);
      assertEquals(4, longArray0.length);
      assertFalse(longArray0.equals((Object)longArray1));
      assertNotSame(longArray0, longArray1);
      
      ArrayUtils.shift((double[]) null, 2774);
      ArrayUtils.reverse(intArray0, 43, 2144792565);
      assertArrayEquals(new int[] {(-13), (-13), (-13), (-13), 43, (-13), 2144792565, (-13)}, intArray0);
      assertEquals(8, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test0175()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom((byte)99);
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.shuffle((short[]) null, (Random) mockRandom0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0176()  throws Throwable  {
      Float[] floatArray0 = ArrayUtils.toObject((float[]) null);
      assertNull(floatArray0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-52);
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)84;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-21);
      byteArray0[5] = (byte)28;
      byteArray0[6] = (byte)65;
      byteArray0[7] = (byte) (-27);
      // Undeclared exception!
      try { 
        ArrayUtils.remove(byteArray0, (int) (byte) (-1));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Length: 8
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0177()  throws Throwable  {
      int int0 = ArrayUtils.lastIndexOf((float[]) null, 1.0F, 31);
      assertEquals((-1), int0);
      
      byte[] byteArray0 = ArrayUtils.clone((byte[]) null);
      assertNull(byteArray0);
      
      byte[] byteArray1 = ArrayUtils.add((byte[]) null, (byte)2);
      assertArrayEquals(new byte[] {(byte)2}, byteArray1);
      assertEquals(1, byteArray1.length);
      assertNotNull(byteArray1);
      
      Long long0 = new Long((byte)8);
      assertNotNull(long0);
      assertEquals(8L, (long)long0);
      
      Long long1 = new Long((-1L));
      assertFalse(long1.equals((Object)long0));
      assertNotNull(long1);
      assertEquals((-1L), (long)long1);
      
      Long long2 = new Long((-1L));
      assertTrue(long2.equals((Object)long1));
      assertFalse(long2.equals((Object)long0));
      assertNotNull(long2);
      assertEquals((-1L), (long)long2);
      
      Long long3 = new Long((-528L));
      assertFalse(long3.equals((Object)long0));
      assertFalse(long3.equals((Object)long2));
      assertFalse(long3.equals((Object)long1));
      assertNotNull(long3);
      assertEquals((-528L), (long)long3);
      
      Float[] floatArray0 = ArrayUtils.toObject((float[]) null);
      assertNull(floatArray0);
      
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = true;
      boolean[] booleanArray1 = ArrayUtils.removeAllOccurences(booleanArray0, true);
      assertTrue(Arrays.equals(new boolean[] {false, true, false, false, false, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false}, booleanArray1));
      assertEquals(6, booleanArray0.length);
      assertEquals(4, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      
      Short short0 = ArrayUtils.get((Short[]) null, (-1307));
      assertNull(short0);
      
      double[] doubleArray0 = new double[0];
      boolean boolean0 = ArrayUtils.contains(doubleArray0, (double) (-528L), (double) (-1307));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0178()  throws Throwable  {
      float[] floatArray0 = new float[1];
      floatArray0[0] = (-2239.035F);
      float[] floatArray1 = ArrayUtils.subarray(floatArray0, 2518, (-1));
      assertArrayEquals(new float[] {(-2239.035F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertEquals(1, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = false;
      booleanArray0[6] = false;
      boolean boolean0 = ArrayUtils.isNotEmpty(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, true, true, false, false}, booleanArray0));
      assertEquals(7, booleanArray0.length);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = ArrayUtils.addFirst(doubleArray0, 1.5);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.5}, doubleArray1, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      
      boolean[] booleanArray1 = ArrayUtils.removeElement(booleanArray0, false);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, true, true, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, true, true, false, false}, booleanArray1));
      assertEquals(7, booleanArray0.length);
      assertEquals(6, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      
      Boolean[] booleanArray2 = ArrayUtils.toObject(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, true, true, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, true, true, false, false}, booleanArray1));
      assertEquals(7, booleanArray0.length);
      assertEquals(6, booleanArray1.length);
      assertEquals(6, booleanArray2.length);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray2);
  }

  @Test(timeout = 4000)
  public void test0179()  throws Throwable  {
      float[] floatArray0 = new float[1];
      floatArray0[0] = (-2239.035F);
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      booleanArray0[5] = false;
      booleanArray0[6] = false;
      boolean boolean0 = ArrayUtils.isNotEmpty(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, true, false, true, false, false, false}, booleanArray0));
      assertEquals(7, booleanArray0.length);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = ArrayUtils.addFirst(doubleArray0, 1.5);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.5}, doubleArray1, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      
      boolean[] booleanArray1 = ArrayUtils.removeElement(booleanArray0, false);
      assertTrue(Arrays.equals(new boolean[] {false, true, false, true, false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, false, true, false, false, false}, booleanArray1));
      assertEquals(7, booleanArray0.length);
      assertEquals(6, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      
      Boolean[] booleanArray2 = ArrayUtils.toObject(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false, true, false, true, false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, false, true, false, false, false}, booleanArray1));
      assertEquals(7, booleanArray0.length);
      assertEquals(6, booleanArray1.length);
      assertEquals(6, booleanArray2.length);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray2);
  }

  @Test(timeout = 4000)
  public void test0180()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[3];
      boolean[] booleanArray1 = ArrayUtils.addFirst(booleanArray0, true);
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, false, false, false}, booleanArray1));
      assertEquals(3, booleanArray0.length);
      assertEquals(4, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      
      char[] charArray0 = new char[11];
      charArray0[0] = '\u001B';
      charArray0[1] = '';
      charArray0[2] = '\u001B';
      charArray0[3] = '\u001B';
      charArray0[4] = '\u001B';
      char[] charArray1 = ArrayUtils.insert(6, charArray0, charArray0);
      assertEquals(11, charArray0.length);
      assertEquals(22, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
  }

  @Test(timeout = 4000)
  public void test0181()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = '[';
      char[] charArray1 = ArrayUtils.addFirst(charArray0, 'l');
      assertArrayEquals(new char[] {'[', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertArrayEquals(new char[] {'l', '[', '\u0000', '\u0000', '\u0000'}, charArray1);
      assertEquals(4, charArray0.length);
      assertEquals(5, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)46;
      byteArray0[1] = (byte)46;
      byteArray0[2] = (byte)46;
      byteArray0[3] = (byte)46;
      byteArray0[4] = (byte)14;
      byteArray0[5] = (byte)46;
      byteArray0[6] = (byte)46;
      byteArray0[0] = (byte)46;
      byteArray0[8] = (byte)46;
      byte[] byteArray1 = ArrayUtils.addFirst(byteArray0, (byte)14);
      assertArrayEquals(new byte[] {(byte)46, (byte)46, (byte)46, (byte)46, (byte)14, (byte)46, (byte)46, (byte)0, (byte)46}, byteArray0);
      assertArrayEquals(new byte[] {(byte)14, (byte)46, (byte)46, (byte)46, (byte)46, (byte)14, (byte)46, (byte)46, (byte)0, (byte)46}, byteArray1);
      assertEquals(9, byteArray0.length);
      assertEquals(10, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      
      Double double0 = new Double((byte)46);
      assertNotNull(double0);
      assertEquals(46.0, (double)double0, 0.01);
      
      Double[] doubleArray0 = new Double[3];
      doubleArray0[0] = double0;
      doubleArray0[1] = double0;
      doubleArray0[2] = double0;
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0);
      assertArrayEquals(new double[] {46.0, 46.0, 46.0}, doubleArray1, 0.01);
      assertEquals(3, doubleArray1.length);
      assertEquals(3, doubleArray0.length);
      assertNotNull(doubleArray1);
      
      ArrayUtils.hashCode((Object) doubleArray0[0]);
      assertEquals(3, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test0182()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = ArrayUtils.removeAllOccurences(doubleArray0, (-1.0));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      
      String[] stringArray0 = ArrayUtils.EMPTY_STRING_ARRAY;
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      char[] charArray0 = ArrayUtils.addFirst((char[]) null, 'L');
      assertArrayEquals(new char[] {'L'}, charArray0);
      assertEquals(1, charArray0.length);
      assertNotNull(charArray0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)46;
      byteArray0[1] = (byte)46;
      byte[] byteArray1 = ArrayUtils.addFirst(byteArray0, (byte) (-73));
      assertArrayEquals(new byte[] {(byte)46, (byte)46}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-73), (byte)46, (byte)46}, byteArray1);
      assertEquals(2, byteArray0.length);
      assertEquals(3, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      
      Double double0 = new Double(0.1);
      assertNotNull(double0);
      assertEquals(0.1, (double)double0, 0.01);
      
      Double[] doubleArray2 = new Double[7];
      Double double1 = new Double((-1589.69948204));
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      assertEquals((-1589.69948204), (double)double1, 0.01);
      
      doubleArray2[0] = double1;
      doubleArray2[1] = double0;
      doubleArray2[2] = double0;
      doubleArray2[3] = double0;
      doubleArray2[5] = double0;
      Double double2 = new Double((byte)46);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertNotNull(double2);
      assertEquals(46.0, (double)double2, 0.01);
      
      doubleArray2[6] = double2;
      // Undeclared exception!
      try { 
        ArrayUtils.toPrimitive(doubleArray2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0183()  throws Throwable  {
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short) (-13);
      shortArray0[1] = (short)43;
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      BitSet bitSet0 = ArrayUtils.indexesOf(booleanArray0, true);
      assertEquals("{0, 1}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertFalse(bitSet0.isEmpty());
      assertEquals(2, bitSet0.cardinality());
      assertEquals(2, bitSet0.length());
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray0));
      assertEquals(2, booleanArray0.length);
      assertNotNull(bitSet0);
      
      Long long0 = new Long((-3482L));
      assertNotNull(long0);
      assertEquals((-3482L), (long)long0);
      
      Long long1 = new Long((short)43);
      assertFalse(long1.equals((Object)long0));
      assertNotNull(long1);
      assertEquals(43L, (long)long1);
      
      Long long2 = new Long(0L);
      assertFalse(long2.equals((Object)long0));
      assertFalse(long2.equals((Object)long1));
      assertNotNull(long2);
      assertEquals(0L, (long)long2);
      
      int[] intArray0 = new int[3];
      intArray0[0] = (int) (short) (-13);
      intArray0[1] = (-2798);
      intArray0[2] = (-2798);
      ArrayUtils.shift(intArray0, 3699);
      assertArrayEquals(new int[] {(-13), (-2798), (-2798)}, intArray0);
      assertEquals(3, intArray0.length);
      
      ArrayUtils.shift(booleanArray0, 901);
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray0));
      assertEquals(2, booleanArray0.length);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-52);
      byteArray0[1] = (byte)28;
      ArrayUtils.shift(booleanArray0, (-2798));
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray0));
      assertEquals(2, booleanArray0.length);
      
      char[] charArray0 = new char[1];
      charArray0[0] = '7';
      char[] charArray1 = ArrayUtils.addFirst(charArray0, '7');
      assertArrayEquals(new char[] {'7'}, charArray0);
      assertArrayEquals(new char[] {'7', '7'}, charArray1);
      assertEquals(1, charArray0.length);
      assertEquals(2, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      
      Integer[] integerArray0 = new Integer[0];
      int[] intArray1 = ArrayUtils.toPrimitive(integerArray0, 347);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(0, integerArray0.length);
      assertEquals(0, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      
      char[] charArray2 = ArrayUtils.nullToEmpty(charArray1);
      assertArrayEquals(new char[] {'7'}, charArray0);
      assertArrayEquals(new char[] {'7', '7'}, charArray1);
      assertArrayEquals(new char[] {'7', '7'}, charArray2);
      assertEquals(1, charArray0.length);
      assertEquals(2, charArray1.length);
      assertEquals(2, charArray2.length);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray0));
      assertNotSame(charArray0, charArray2);
      assertNotSame(charArray0, charArray1);
      assertSame(charArray1, charArray2);
      assertNotSame(charArray1, charArray0);
      assertSame(charArray2, charArray1);
      assertNotSame(charArray2, charArray0);
      assertNotNull(charArray2);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) (-2798);
      doubleArray0[1] = (double) (-2798);
      doubleArray0[2] = (double) (byte)28;
      doubleArray0[3] = (double) (short) (-13);
      doubleArray0[4] = (double) 347;
      doubleArray0[5] = (double) (short) (-13);
      doubleArray0[6] = (double) (byte) (-52);
      boolean boolean0 = ArrayUtils.contains(doubleArray0, (-52.0));
      assertArrayEquals(new double[] {(-2798.0), (-2798.0), 28.0, (-13.0), 347.0, (-13.0), (-52.0)}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0184()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = '~';
      Long long0 = new Long(479L);
      assertNotNull(long0);
      assertEquals(479L, (long)long0);
      
      Long long1 = new Long((-2147483648L));
      assertFalse(long1.equals((Object)long0));
      assertNotNull(long1);
      assertEquals((-2147483648L), (long)long1);
      
      Long long2 = new Long((-1226L));
      assertFalse(long2.equals((Object)long1));
      assertFalse(long2.equals((Object)long0));
      assertNotNull(long2);
      assertEquals((-1226L), (long)long2);
      
      Long long3 = new Long(1952L);
      assertFalse(long3.equals((Object)long1));
      assertFalse(long3.equals((Object)long0));
      assertFalse(long3.equals((Object)long2));
      assertNotNull(long3);
      assertEquals(1952L, (long)long3);
      
      Boolean boolean0 = Boolean.TRUE;
      assertNotNull(boolean0);
      assertTrue(boolean0);
      
      Boolean[] booleanArray0 = new Boolean[0];
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertNotNull(booleanArray1);
      
      int[] intArray0 = new int[8];
      intArray0[0] = (int) '~';
      intArray0[3] = (int) '~';
      intArray0[0] = 54;
      intArray0[5] = (int) '~';
      Character[] characterArray0 = new Character[0];
      Character[] characterArray1 = ArrayUtils.addAll(characterArray0, characterArray0);
      assertEquals(0, characterArray0.length);
      assertEquals(0, characterArray1.length);
      assertFalse(characterArray1.equals((Object)characterArray0));
      assertNotSame(characterArray0, characterArray1);
      assertNotSame(characterArray1, characterArray0);
      assertNotNull(characterArray1);
      
      Object[] objectArray0 = ArrayUtils.nullToEmpty((Object[]) booleanArray0);
      assertEquals(0, objectArray0.length);
      assertEquals(0, booleanArray0.length);
      assertNotNull(objectArray0);
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) 479L;
      char[] charArray1 = ArrayUtils.removeAllOccurences(charArray0, 'V');
      assertArrayEquals(new char[] {'~', '\u0000'}, charArray0);
      assertArrayEquals(new char[] {'~', '\u0000'}, charArray1);
      assertEquals(2, charArray0.length);
      assertEquals(2, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      
      char[] charArray2 = ArrayUtils.nullToEmpty(charArray0);
      assertArrayEquals(new char[] {'~', '\u0000'}, charArray0);
      assertArrayEquals(new char[] {'~', '\u0000'}, charArray2);
      assertEquals(2, charArray0.length);
      assertEquals(2, charArray2.length);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray2.equals((Object)charArray1));
      assertNotSame(charArray0, charArray1);
      assertSame(charArray0, charArray2);
      assertSame(charArray2, charArray0);
      assertNotSame(charArray2, charArray1);
      assertNotNull(charArray2);
      
      int[] intArray1 = new int[0];
      assertFalse(intArray1.equals((Object)intArray0));
      
      ArrayUtils.reverse(intArray1, 54, 54);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(0, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray1, intArray0);
      
      float[] floatArray1 = ArrayUtils.removeElement(floatArray0, 2306.0F);
      assertArrayEquals(new float[] {479.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {479.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray1, 0.01F);
      assertEquals(8, floatArray0.length);
      assertEquals(8, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (-2147483648L);
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray0, 2147483647L, 54);
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertArrayEquals(new long[] {(-2147483648L)}, longArray0);
      assertEquals(1, longArray0.length);
      assertNotNull(bitSet0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)96;
      byteArray0[1] = (byte) (-124);
      byteArray0[2] = (byte) (-25);
      // Undeclared exception!
      try { 
        ArrayUtils.remove(byteArray0, (-85));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -85, Length: 3
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0185()  throws Throwable  {
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)560;
      shortArray0[1] = (short)0;
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) (short)0;
      floatArray0[1] = (float) (short)560;
      float[] floatArray1 = ArrayUtils.nullToEmpty(floatArray0);
      assertArrayEquals(new float[] {0.0F, 560.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F, 560.0F}, floatArray1, 0.01F);
      assertEquals(2, floatArray0.length);
      assertEquals(2, floatArray1.length);
      assertSame(floatArray0, floatArray1);
      assertSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      
      int[] intArray0 = new int[0];
      int[] intArray1 = ArrayUtils.removeAllOccurrences(intArray0, (int) (short)560);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      
      boolean[] booleanArray0 = new boolean[0];
      ArrayUtils.swap(booleanArray0, 288, 1072);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals(0, booleanArray0.length);
      
      short[] shortArray1 = ArrayUtils.addFirst(shortArray0, (short)0);
      assertArrayEquals(new short[] {(short)560, (short)0, (short)0, (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)560, (short)0, (short)0, (short)0}, shortArray1);
      assertEquals(4, shortArray0.length);
      assertEquals(5, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      
      MutableInt mutableInt0 = new MutableInt((int) (short)560);
      assertEquals(560, mutableInt0.intValue());
      assertEquals("560", mutableInt0.toString());
      assertEquals(560, (int)mutableInt0.toInteger());
      assertEquals(560, (int)mutableInt0.getValue());
      assertEquals((byte)48, mutableInt0.byteValue());
      assertEquals((short)560, mutableInt0.shortValue());
      assertEquals(560.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(560.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(560L, mutableInt0.longValue());
      assertNotNull(mutableInt0);
      
      int int0 = ArrayUtils.lastIndexOf((Object[]) null, (Object) mutableInt0);
      assertEquals(560, mutableInt0.intValue());
      assertEquals("560", mutableInt0.toString());
      assertEquals(560, (int)mutableInt0.toInteger());
      assertEquals(560, (int)mutableInt0.getValue());
      assertEquals((byte)48, mutableInt0.byteValue());
      assertEquals((short)560, mutableInt0.shortValue());
      assertEquals(560.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(560.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(560L, mutableInt0.longValue());
      assertEquals((-1), int0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)90;
      byteArray0[1] = (byte)90;
      byteArray0[2] = (byte) (-12);
      byteArray0[3] = (byte)90;
      int int1 = ArrayUtils.lastIndexOf(byteArray0, (byte)90);
      assertArrayEquals(new byte[] {(byte)90, (byte)90, (byte) (-12), (byte)90}, byteArray0);
      assertEquals(4, byteArray0.length);
      assertFalse(int1 == int0);
      assertEquals(3, int1);
      
      Map<Object, Object> map0 = ArrayUtils.toMap((Object[]) null);
      assertNull(map0);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 1072;
      doubleArray0[1] = (double) 0.0F;
      doubleArray0[2] = (double) 288;
      doubleArray0[3] = (double) (-1);
      doubleArray0[4] = (double) (byte)90;
      doubleArray0[5] = (double) (short)0;
      int int2 = ArrayUtils.indexOf(doubleArray0, 1072.0, 3);
      assertArrayEquals(new double[] {1072.0, 0.0, 288.0, (-1.0), 90.0, 0.0}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      assertFalse(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals((-1), int2);
  }

  @Test(timeout = 4000)
  public void test0186()  throws Throwable  {
      float[] floatArray0 = new float[3];
      floatArray0[0] = (-904.0746F);
      floatArray0[1] = (-904.0746F);
      floatArray0[2] = (-904.0746F);
      ArrayUtils.reverse(floatArray0, (-962), 2154);
      assertArrayEquals(new float[] {(-904.0746F), (-904.0746F), (-904.0746F)}, floatArray0, 0.01F);
      assertEquals(3, floatArray0.length);
      
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short) (-626);
      shortArray0[1] = (short)76;
      shortArray0[2] = (short)0;
      shortArray0[3] = (short) (-2399);
      shortArray0[4] = (short)2;
      shortArray0[5] = (short)8856;
      ArrayUtils.swap(shortArray0, (int) (short) (-626), (int) (short)0);
      assertArrayEquals(new short[] {(short) (-626), (short)76, (short)0, (short) (-2399), (short)2, (short)8856}, shortArray0);
      assertEquals(6, shortArray0.length);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      int int0 = ArrayUtils.indexOf(booleanArray0, true, (int) (short)0);
      assertTrue(Arrays.equals(new boolean[] {true, false, true}, booleanArray0));
      assertEquals(3, booleanArray0.length);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test0187()  throws Throwable  {
      Byte byte0 = new Byte((byte)110);
      assertNotNull(byte0);
      assertEquals((byte)110, (byte)byte0);
      
      byte byte1 = (byte)112;
      Byte byte2 = new Byte((byte)112);
      assertTrue(byte2.equals((Object)byte1));
      assertFalse(byte2.equals((Object)byte0));
      assertNotNull(byte2);
      assertEquals((byte)112, (byte)byte2);
      
      Byte byte3 = new Byte((byte)110);
      assertFalse(byte3.equals((Object)byte2));
      assertTrue(byte3.equals((Object)byte0));
      assertFalse(byte3.equals((Object)byte1));
      assertNotNull(byte3);
      assertEquals((byte)110, (byte)byte3);
      
      Byte byte4 = new Byte((byte)112);
      assertTrue(byte4.equals((Object)byte2));
      assertFalse(byte4.equals((Object)byte3));
      assertFalse(byte4.equals((Object)byte0));
      assertTrue(byte4.equals((Object)byte1));
      assertNotNull(byte4);
      assertEquals((byte)112, (byte)byte4);
      
      Byte[] byteArray0 = new Byte[5];
      byteArray0[0] = byte0;
      byteArray0[1] = byte2;
      byteArray0[2] = byte4;
      byteArray0[3] = byte4;
      byteArray0[4] = byte0;
      byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0, byte1);
      assertArrayEquals(new byte[] {(byte)110, (byte)112, (byte)112, (byte)112, (byte)110}, byteArray1);
      assertEquals(5, byteArray0.length);
      assertEquals(5, byteArray1.length);
      assertNotNull(byteArray1);
      
      Float float0 = new Float((-364.0F));
      assertNotNull(float0);
      assertEquals((-364.0F), (float)float0, 0.01F);
      
      float[] floatArray0 = ArrayUtils.toPrimitive((Float[]) null, 350.0F);
      assertNull(floatArray0);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) byte1;
      short[] shortArray1 = ArrayUtils.removeElement(shortArray0, (short) byte1);
      assertArrayEquals(new short[] {}, shortArray1);
      assertArrayEquals(new short[] {(short)112}, shortArray0);
      assertEquals(0, shortArray1.length);
      assertEquals(1, shortArray0.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertNotNull(shortArray1);
  }

  @Test(timeout = 4000)
  public void test0188()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 'Y';
      doubleArray0[1] = (double) 'Y';
      doubleArray0[2] = (double) 'Y';
      doubleArray0[3] = (double) 'Y';
      doubleArray0[4] = (double) 'Y';
      ArrayUtils.reverse(doubleArray0);
      assertArrayEquals(new double[] {0.0, 89.0, 89.0, 89.0, 89.0, 89.0}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      
      float[] floatArray0 = new float[0];
      ArrayUtils.reverse(floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
      
      float[] floatArray1 = ArrayUtils.add(floatArray0, 0.0F);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F}, floatArray1, 0.01F);
      assertEquals(0, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      
      float[] floatArray2 = ArrayUtils.clone(floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray2, 0.01F);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray2.length);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray0, floatArray2);
      assertNotSame(floatArray2, floatArray0);
      assertNotSame(floatArray2, floatArray1);
      assertNotNull(floatArray2);
      
      Float float0 = new Float((-1383.0F));
      assertNotNull(float0);
      assertEquals((-1383.0F), (float)float0, 0.01F);
      
      float[] floatArray3 = ArrayUtils.toPrimitive((Float[]) null, (float) 1670);
      assertNull(floatArray3);
      
      Double[] doubleArray1 = new Double[9];
      doubleArray1[0] = (Double) 0.0;
      doubleArray1[1] = (Double) 89.0;
      doubleArray1[2] = (Double) 89.0;
      doubleArray1[3] = (Double) 89.0;
      doubleArray1[4] = (Double) 89.0;
      doubleArray1[5] = (Double) 89.0;
      Double double0 = new Double(89.0);
      assertNotNull(double0);
      assertEquals(89.0, (double)double0, 0.01);
      
      doubleArray1[6] = double0;
      doubleArray1[7] = (Double) 89.0;
      doubleArray1[8] = (Double) 89.0;
      // Undeclared exception!
      try { 
        ArrayUtils.add(doubleArray1, 1670, (Double) 89.0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1670, Length: 9
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0189()  throws Throwable  {
      float[] floatArray0 = new float[3];
      floatArray0[0] = (-1385.0087F);
      boolean boolean0 = ArrayUtils.isNotEmpty(floatArray0);
      assertArrayEquals(new float[] {(-1385.0087F), 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(3, floatArray0.length);
      assertTrue(boolean0);
      
      int[] intArray0 = ArrayUtils.EMPTY_INT_ARRAY;
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertNotNull(intArray0);
      
      int[] intArray1 = new int[6];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 3371;
      intArray1[1] = 3371;
      intArray1[2] = 3371;
      intArray1[3] = (-1667);
      intArray1[4] = 3371;
      intArray1[5] = 3371;
      int[] intArray2 = ArrayUtils.insert(3371, (int[]) null, intArray1);
      assertArrayEquals(new int[] {3371, 3371, 3371, (-1667), 3371, 3371}, intArray1);
      assertEquals(6, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray1, intArray0);
      assertNull(intArray2);
      
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) (-1385.0087F);
      objectArray0[1] = (Object) 3371;
      objectArray0[2] = (Object) 3371;
      ArrayUtils.shift(objectArray0, (-1667), 1061, 196);
      assertEquals(3, objectArray0.length);
      
      float[] floatArray1 = ArrayUtils.removeElement(floatArray0, (-462.23038F));
      assertArrayEquals(new float[] {(-1385.0087F), 0.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-1385.0087F), 0.0F, 0.0F}, floatArray1, 0.01F);
      assertEquals(3, floatArray0.length);
      assertEquals(3, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-64);
      Byte[] byteArray1 = ArrayUtils.toObject(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-64)}, byteArray0);
      assertEquals(1, byteArray0.length);
      assertEquals(1, byteArray1.length);
      assertNotNull(byteArray1);
  }

  @Test(timeout = 4000)
  public void test0190()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      float[] floatArray0 = new float[4];
      floatArray0[0] = (-1150.5F);
      ArrayUtils.shift(floatArray0, (-557), (-2042), 2147483636);
      assertArrayEquals(new float[] {(-1150.5F), 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(4, floatArray0.length);
      
      char[] charArray0 = new char[7];
      charArray0[0] = '}';
      charArray0[1] = 'K';
      charArray0[2] = 'K';
      charArray0[3] = ',';
      charArray0[4] = '-';
      charArray0[5] = 'U';
      charArray0[6] = 'n';
      ArrayUtils.reverse(charArray0, 2147483636, (-929));
      assertArrayEquals(new char[] {'}', 'K', 'K', ',', '-', 'U', 'n'}, charArray0);
      assertEquals(7, charArray0.length);
      
      Boolean[] booleanArray1 = ArrayUtils.toObject(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertEquals(1, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertNotNull(booleanArray1);
      
      Float[] floatArray1 = ArrayUtils.toObject(floatArray0);
      assertArrayEquals(new float[] {(-1150.5F), 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(4, floatArray0.length);
      assertEquals(4, floatArray1.length);
      assertNotNull(floatArray1);
      
      ArrayUtils.swap(charArray0, (-7), (-1808), 2147483636);
      assertArrayEquals(new char[] {'}', 'K', 'K', ',', '-', 'U', 'n'}, charArray0);
      assertEquals(7, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test0191()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      ArrayUtils.reverse(doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      
      float[] floatArray0 = new float[0];
      ArrayUtils.reverse(floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
      
      Long[] longArray0 = new Long[2];
      Long long0 = new Long((-3199L));
      assertNotNull(long0);
      assertEquals((-3199L), (long)long0);
      
      longArray0[0] = long0;
      Long long1 = new Long(449L);
      assertFalse(long1.equals((Object)long0));
      assertNotNull(long1);
      assertEquals(449L, (long)long1);
      
      longArray0[1] = long1;
      Long[] longArray1 = ArrayUtils.subarray(longArray0, 213, 213);
      assertEquals(2, longArray0.length);
      assertEquals(0, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
      
      char[] charArray0 = new char[0];
      boolean boolean0 = ArrayUtils.isSorted(charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      assertTrue(boolean0);
      
      long[] longArray2 = ArrayUtils.addAll((long[]) null, (long[]) null);
      assertNull(longArray2);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      ArrayUtils.reverse((Object[]) longArray1);
      assertEquals(2, longArray0.length);
      assertEquals(0, longArray1.length);
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      double[] doubleArray1 = ArrayUtils.subarray(doubleArray0, 10, Integer.MAX_VALUE);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(6, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      
      float[] floatArray1 = ArrayUtils.insert(10, floatArray0, floatArray0);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray1.length);
      assertEquals(0, floatArray0.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertNotNull(floatArray1);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)115;
      byteArray0[2] = (byte) (-85);
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte)15;
      byteArray0[5] = (byte) (-125);
      byteArray0[6] = (byte) (-1);
      byteArray0[7] = (byte) (-1);
      byteArray0[8] = (byte) (-1);
      byte[] byteArray1 = ArrayUtils.addFirst(byteArray0, (byte)99);
      assertArrayEquals(new byte[] {(byte) (-1), (byte)115, (byte) (-85), (byte) (-1), (byte)15, (byte) (-125), (byte) (-1), (byte) (-1), (byte) (-1)}, byteArray0);
      assertArrayEquals(new byte[] {(byte)99, (byte) (-1), (byte)115, (byte) (-85), (byte) (-1), (byte)15, (byte) (-125), (byte) (-1), (byte) (-1), (byte) (-1)}, byteArray1);
      assertEquals(9, byteArray0.length);
      assertEquals(10, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
  }

  @Test(timeout = 4000)
  public void test0192()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)5;
      byteArray0[1] = (byte)99;
      Long long0 = new Long(2);
      assertNotNull(long0);
      assertEquals(2L, (long)long0);
      
      Long[] longArray0 = new Long[8];
      longArray0[0] = long0;
      longArray0[1] = long0;
      longArray0[2] = long0;
      longArray0[3] = long0;
      longArray0[4] = long0;
      longArray0[5] = long0;
      longArray0[6] = long0;
      longArray0[7] = long0;
      Long[] longArray1 = ArrayUtils.subarray(longArray0, (int) 99, 2115);
      assertEquals(8, longArray0.length);
      assertEquals(0, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
      
      boolean boolean0 = ArrayUtils.isSorted((char[]) null);
      assertTrue(boolean0);
      
      long[] longArray2 = ArrayUtils.addAll((long[]) null, (long[]) null);
      assertNull(longArray2);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      ArrayUtils.reverse((Object[]) longArray1);
      assertEquals(8, longArray0.length);
      assertEquals(0, longArray1.length);
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (long)longArray0[3];
      doubleArray0[1] = 124.0;
      double[] doubleArray1 = ArrayUtils.subarray(doubleArray0, 99, 3689);
      assertArrayEquals(new double[] {2.0, 124.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      
      float[] floatArray0 = new float[0];
      float[] floatArray1 = ArrayUtils.insert((int) (byte) (-60), floatArray0, floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      
      byte[] byteArray1 = new byte[7];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte)99;
      byteArray1[1] = (byte)5;
      byteArray1[2] = (byte) (-87);
      byteArray1[3] = (byte) (-60);
      byteArray1[4] = (byte) (-60);
      byteArray1[5] = (byte) (-60);
      byteArray1[6] = (byte)99;
      byte[] byteArray2 = ArrayUtils.add(byteArray1, (byte)88);
      assertArrayEquals(new byte[] {(byte)99, (byte)5, (byte) (-87), (byte) (-60), (byte) (-60), (byte) (-60), (byte)99, (byte)88}, byteArray2);
      assertArrayEquals(new byte[] {(byte)99, (byte)5, (byte) (-87), (byte) (-60), (byte) (-60), (byte) (-60), (byte)99}, byteArray1);
      assertEquals(8, byteArray2.length);
      assertEquals(7, byteArray1.length);
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray1, byteArray2);
      assertNotNull(byteArray2);
  }

  @Test(timeout = 4000)
  public void test0193()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-1.1375112629551791);
      doubleArray0[1] = 571.942196047302;
      doubleArray0[2] = 1.0;
      byte byte0 = (byte) (-94);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-94);
      byteArray0[1] = (byte) (-94);
      byteArray0[2] = (byte) (-94);
      byte[] byteArray1 = ArrayUtils.removeElement(byteArray0, (byte)72);
      assertArrayEquals(new byte[] {(byte) (-94), (byte) (-94), (byte) (-94)}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-94), (byte) (-94), (byte) (-94)}, byteArray1);
      assertEquals(3, byteArray0.length);
      assertEquals(3, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      
      char[] charArray0 = new char[6];
      charArray0[0] = '*';
      charArray0[0] = '*';
      charArray0[2] = '*';
      charArray0[3] = '*';
      charArray0[4] = '*';
      charArray0[5] = '*';
      char[] charArray1 = ArrayUtils.removeElement(charArray0, '*');
      assertArrayEquals(new char[] {'\u0000', '*', '*', '*', '*'}, charArray1);
      assertArrayEquals(new char[] {'*', '\u0000', '*', '*', '*', '*'}, charArray0);
      assertEquals(5, charArray1.length);
      assertEquals(6, charArray0.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray0, charArray1);
      assertNotNull(charArray1);
      
      Byte[] byteArray2 = new Byte[5];
      byteArray2[0] = (Byte) (byte) (-94);
      byteArray2[1] = (Byte) (byte) (-94);
      Byte byte1 = new Byte((byte) (-46));
      assertFalse(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      assertEquals((byte) (-46), (byte)byte1);
      
      byteArray2[2] = byte1;
      byteArray2[3] = (Byte) (byte) (-94);
      byteArray2[4] = (Byte) (byte) (-94);
      boolean boolean0 = ArrayUtils.isArrayIndexValid(byteArray2, (-123));
      assertEquals(5, byteArray2.length);
      assertFalse(boolean0);
      
      char[] charArray2 = ArrayUtils.addAll(charArray1, charArray0);
      assertArrayEquals(new char[] {'\u0000', '*', '*', '*', '*'}, charArray1);
      assertArrayEquals(new char[] {'*', '\u0000', '*', '*', '*', '*'}, charArray0);
      assertEquals(5, charArray1.length);
      assertEquals(11, charArray2.length);
      assertEquals(6, charArray0.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray1));
      assertFalse(charArray2.equals((Object)charArray0));
      assertFalse(charArray0.equals((Object)charArray1));
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray1, charArray2);
      assertNotSame(charArray2, charArray1);
      assertNotSame(charArray2, charArray0);
      assertNotSame(charArray0, charArray2);
      assertNotSame(charArray0, charArray1);
      assertNotNull(charArray2);
      
      org.evosuite.runtime.Random.setNextRandom((byte) (-94));
      String[] stringArray0 = ArrayUtils.toStringArray((Object[]) byteArray2);
      assertEquals(5, byteArray2.length);
      assertEquals(5, stringArray0.length);
      assertNotNull(stringArray0);
      
      ArrayUtils.reverse((Object[]) stringArray0);
      assertEquals(5, byteArray2.length);
      assertEquals(5, stringArray0.length);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((float[]) null, (float) byte0);
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertNotNull(bitSet0);
      
      ArrayUtils.swap((Object[]) stringArray0, (int) (byte) (-94), (int) (byte) (-94), (-1558));
      assertEquals(5, byteArray2.length);
      assertEquals(5, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test0194()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[1] = true;
      Boolean[] booleanArray1 = ArrayUtils.EMPTY_BOOLEAN_OBJECT_ARRAY;
      assertEquals(0, booleanArray1.length);
      assertNotNull(booleanArray1);
      
      float[] floatArray0 = new float[2];
      Float[] floatArray1 = ArrayUtils.toObject(floatArray0);
      assertArrayEquals(new float[] {0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(2, floatArray0.length);
      assertEquals(2, floatArray1.length);
      assertNotNull(floatArray1);
      
      boolean[] booleanArray2 = ArrayUtils.removeAllOccurences(booleanArray0, false);
      assertTrue(Arrays.equals(new boolean[] {false, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray2));
      assertEquals(2, booleanArray0.length);
      assertEquals(1, booleanArray2.length);
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertNotSame(booleanArray0, booleanArray2);
      assertNotSame(booleanArray2, booleanArray0);
      assertNotNull(booleanArray2);
      
      Double double0 = new Double(3.0);
      assertNotNull(double0);
      assertEquals(3.0, (double)double0, 0.01);
      
      Double double1 = Double.valueOf(2.0);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      assertEquals(2.0, (double)double1, 0.01);
      
      Double[] doubleArray0 = ArrayUtils.removeElement((Double[]) null, (Object) double1);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertNull(doubleArray0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-45);
      // Undeclared exception!
      try { 
        ArrayUtils.add(byteArray0, 28, (byte)2);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 28, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0195()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[15];
      booleanArray0[0] = false;
      float[] floatArray0 = new float[11];
      floatArray0[0] = (-2.14718477E9F);
      floatArray0[1] = (-3155.9077F);
      floatArray0[2] = (-1089.5F);
      floatArray0[3] = 1382.0F;
      floatArray0[4] = 1370.2584F;
      floatArray0[5] = (-934.5726F);
      float[] floatArray1 = ArrayUtils.addFirst(floatArray0, 43.0F);
      assertEquals(11, floatArray0.length);
      assertEquals(12, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      
      MutableInt mutableInt0 = new MutableInt((-3155.9077F));
      assertEquals((-3155), mutableInt0.intValue());
      assertEquals((short) (-3155), mutableInt0.shortValue());
      assertEquals("-3155", mutableInt0.toString());
      assertEquals((-3155), (int)mutableInt0.getValue());
      assertEquals((-3155L), mutableInt0.longValue());
      assertEquals((-3155), (int)mutableInt0.toInteger());
      assertEquals((-3155.0F), mutableInt0.floatValue(), 0.01F);
      assertEquals((byte) (-83), mutableInt0.byteValue());
      assertEquals((-3155.0), mutableInt0.doubleValue(), 0.01);
      assertNotNull(mutableInt0);
      
      Integer[] integerArray0 = ArrayUtils.removeElement((Integer[]) null, (Object) mutableInt0);
      assertEquals((-3155), mutableInt0.intValue());
      assertEquals((short) (-3155), mutableInt0.shortValue());
      assertEquals("-3155", mutableInt0.toString());
      assertEquals((-3155), (int)mutableInt0.getValue());
      assertEquals((-3155L), mutableInt0.longValue());
      assertEquals((-3155), (int)mutableInt0.toInteger());
      assertEquals((-3155.0F), mutableInt0.floatValue(), 0.01F);
      assertEquals((byte) (-83), mutableInt0.byteValue());
      assertEquals((-3155.0), mutableInt0.doubleValue(), 0.01);
      assertNull(integerArray0);
      
      long[] longArray0 = ArrayUtils.add((long[]) null, (-3654L));
      assertArrayEquals(new long[] {(-3654L)}, longArray0);
      assertEquals(1, longArray0.length);
      assertNotNull(longArray0);
  }

  @Test(timeout = 4000)
  public void test0196()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-7);
      boolean boolean0 = ArrayUtils.isSameLength(byteArray0, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-7), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(9, byteArray0.length);
      assertTrue(boolean0);
      
      short[] shortArray0 = new short[3];
      shortArray0[1] = (short) (byte) (-7);
      shortArray0[2] = (short) (byte) (-7);
      ArrayUtils.shift(shortArray0, (int) (short) (-7), (-1), (int) (short) (-7));
      assertArrayEquals(new short[] {(short)0, (short) (-7), (short) (-7)}, shortArray0);
      assertEquals(3, shortArray0.length);
      
      Short[] shortArray1 = new Short[0];
      Short[] shortArray2 = ArrayUtils.nullToEmpty(shortArray1);
      assertEquals(0, shortArray1.length);
      assertEquals(0, shortArray2.length);
      assertFalse(shortArray2.equals((Object)shortArray1));
      assertNotSame(shortArray1, shortArray2);
      assertNotSame(shortArray2, shortArray1);
      assertNotNull(shortArray2);
      
      byte[] byteArray1 = ArrayUtils.removeElements(byteArray0, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-7), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(9, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      
      Byte[] byteArray2 = ArrayUtils.toObject(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-7), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(9, byteArray0.length);
      assertEquals(9, byteArray2.length);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertNotSame(byteArray0, byteArray1);
      assertNotNull(byteArray2);
      
      int[] intArray0 = new int[5];
      intArray0[0] = (-1);
      intArray0[1] = (-1);
      intArray0[2] = (int) (short) (-7);
      intArray0[3] = (-1);
      intArray0[4] = (int) (short) (-7);
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(byteArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Length: 9
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0197()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = 16;
      intArray0[1] = 83;
      intArray0[2] = (-2140505135);
      intArray0[3] = 0;
      intArray0[4] = (-1598);
      ArrayUtils.reverse(intArray0, (-1598), (-3527));
      assertArrayEquals(new int[] {16, 83, (-2140505135), 0, (-1598)}, intArray0);
      assertEquals(5, intArray0.length);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-19);
      byteArray0[1] = (byte)86;
      byteArray0[2] = (byte) (-1);
      byte byte0 = (byte)4;
      byteArray0[3] = (byte)4;
      byte byte1 = (byte) (-117);
      byteArray0[4] = (byte) (-117);
      byteArray0[5] = (byte) (-1);
      byteArray0[6] = (byte)9;
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(byteArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 83, Length: 7
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0198()  throws Throwable  {
      Object[] objectArray0 = new Object[5];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      Object object1 = ArrayUtils.get(objectArray0, (int) 560, (Object) "");
      assertEquals(5, objectArray0.length);
      assertNotNull(object1);
      assertEquals("", object1);
      
      Object object2 = new Object();
      assertFalse(object2.equals((Object)object0));
      assertNotNull(object2);
      
      objectArray0[2] = object2;
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short)560;
      shortArray0[1] = (short)3505;
      shortArray0[2] = (short)3505;
      shortArray0[3] = (short)3505;
      shortArray0[4] = (short)1821;
      shortArray0[5] = (short)3505;
      BitSet bitSet0 = ArrayUtils.indexesOf(shortArray0, (short)3505, (int) (short)3505);
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertArrayEquals(new short[] {(short)560, (short)3505, (short)3505, (short)3505, (short)1821, (short)3505}, shortArray0);
      assertEquals(6, shortArray0.length);
      assertNotNull(bitSet0);
      
      Short short0 = new Short((short)147);
      assertNotNull(short0);
      assertEquals((short)147, (short)short0);
      
      BitSet bitSet1 = ArrayUtils.indexesOf(objectArray0, (Object) short0, 2564);
      assertEquals(64, bitSet1.size());
      assertEquals(0, bitSet1.cardinality());
      assertEquals("{}", bitSet1.toString());
      assertTrue(bitSet1.isEmpty());
      assertEquals(0, bitSet1.length());
      assertEquals(5, objectArray0.length);
      assertTrue(bitSet1.equals((Object)bitSet0));
      assertNotSame(bitSet1, bitSet0);
      assertNotNull(bitSet1);
      
      BitSet bitSet2 = (BitSet)bitSet1.clone();
      assertTrue(bitSet2.isEmpty());
      assertEquals(0, bitSet2.cardinality());
      assertEquals(0, bitSet2.size());
      assertEquals("{}", bitSet2.toString());
      assertEquals(0, bitSet2.length());
      assertEquals(0, bitSet1.size());
      assertEquals(0, bitSet1.cardinality());
      assertEquals("{}", bitSet1.toString());
      assertTrue(bitSet1.isEmpty());
      assertEquals(0, bitSet1.length());
      assertEquals(5, objectArray0.length);
      assertTrue(bitSet2.equals((Object)bitSet0));
      assertTrue(bitSet2.equals((Object)bitSet1));
      assertTrue(bitSet1.equals((Object)bitSet0));
      assertNotSame(bitSet2, bitSet1);
      assertNotSame(bitSet2, bitSet0);
      assertNotSame(bitSet1, bitSet2);
      assertNotSame(bitSet1, bitSet0);
      assertNotNull(bitSet2);
      
      bitSet0.andNot(bitSet1);
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet1.size());
      assertEquals(0, bitSet1.cardinality());
      assertEquals("{}", bitSet1.toString());
      assertTrue(bitSet1.isEmpty());
      assertEquals(0, bitSet1.length());
      assertArrayEquals(new short[] {(short)560, (short)3505, (short)3505, (short)3505, (short)1821, (short)3505}, shortArray0);
      assertEquals(5, objectArray0.length);
      assertEquals(6, shortArray0.length);
      assertTrue(bitSet0.equals((Object)bitSet1));
      assertTrue(bitSet0.equals((Object)bitSet2));
      assertTrue(bitSet1.equals((Object)bitSet0));
      assertTrue(bitSet1.equals((Object)bitSet2));
      assertNotSame(bitSet0, bitSet1);
      assertNotSame(bitSet0, bitSet2);
      assertNotSame(bitSet1, bitSet2);
      assertNotSame(bitSet1, bitSet0);
      
      ArrayUtils.hashCode((Object) "'6LO5sC{)C=I");
      Short[] shortArray1 = new Short[5];
      shortArray1[0] = (Short) (short)560;
      shortArray1[1] = (Short) (short)3505;
      shortArray1[2] = (Short) (short)1821;
      shortArray1[3] = (Short) (short)560;
      Short short1 = new Short((short)35);
      assertFalse(short1.equals((Object)short0));
      assertNotNull(short1);
      assertEquals((short)35, (short)short1);
      
      shortArray1[4] = short1;
      short[] shortArray2 = ArrayUtils.toPrimitive(shortArray1, (short)3505);
      assertArrayEquals(new short[] {(short)560, (short)3505, (short)1821, (short)560, (short)35}, shortArray2);
      assertEquals(5, shortArray1.length);
      assertEquals(5, shortArray2.length);
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertNotSame(shortArray2, shortArray0);
      assertNotNull(shortArray2);
      
      ArrayUtils.shift((int[]) null, (int) shortArray1[2]);
      assertEquals(5, shortArray1.length);
      
      short[] shortArray3 = ArrayUtils.addAll(shortArray0, shortArray2);
      assertArrayEquals(new short[] {(short)560, (short)3505, (short)3505, (short)3505, (short)1821, (short)3505}, shortArray0);
      assertArrayEquals(new short[] {(short)560, (short)3505, (short)1821, (short)560, (short)35}, shortArray2);
      assertEquals(5, shortArray1.length);
      assertEquals(6, shortArray0.length);
      assertEquals(5, shortArray2.length);
      assertEquals(11, shortArray3.length);
      assertFalse(shortArray0.equals((Object)shortArray2));
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertFalse(shortArray3.equals((Object)shortArray2));
      assertFalse(shortArray3.equals((Object)shortArray0));
      assertNotSame(shortArray0, shortArray2);
      assertNotSame(shortArray0, shortArray3);
      assertNotSame(shortArray2, shortArray3);
      assertNotSame(shortArray2, shortArray0);
      assertNotSame(shortArray3, shortArray2);
      assertNotSame(shortArray3, shortArray0);
      assertNotNull(shortArray3);
  }

  @Test(timeout = 4000)
  public void test0199()  throws Throwable  {
      float[] floatArray0 = new float[3];
      floatArray0[0] = (-1385.0087F);
      float[] floatArray1 = ArrayUtils.nullToEmpty(floatArray0);
      assertArrayEquals(new float[] {(-1385.0087F), 0.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-1385.0087F), 0.0F, 0.0F}, floatArray1, 0.01F);
      assertEquals(3, floatArray0.length);
      assertEquals(3, floatArray1.length);
      assertSame(floatArray0, floatArray1);
      assertSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      
      int[] intArray0 = new int[9];
      intArray0[0] = 279;
      floatArray0[1] = (float) 279;
      intArray0[2] = 279;
      intArray0[4] = 279;
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) 279.0F;
      Short short0 = new Short((short)1603);
      assertNotNull(short0);
      assertEquals((short)1603, (short)short0);
      
      Object object0 = ArrayUtils.toPrimitive((Object) short0);
      assertNotNull(object0);
      assertEquals((short)1603, object0);
      
      objectArray0[1] = object0;
      objectArray0[2] = (Object) 279;
      objectArray0[3] = (Object) 279;
      objectArray0[4] = (Object) 279.0F;
      objectArray0[7] = (Object) (-1385.0087F);
      boolean boolean0 = ArrayUtils.contains(objectArray0, objectArray0[1]);
      assertEquals(8, objectArray0.length);
      assertTrue(boolean0);
      
      int[] intArray1 = ArrayUtils.remove(intArray0, 1);
      assertArrayEquals(new int[] {279, 279, 0, 279, 0, 0, 0, 0}, intArray1);
      assertArrayEquals(new int[] {279, 0, 279, 0, 279, 0, 0, 0, 0}, intArray0);
      assertEquals(8, intArray1.length);
      assertEquals(9, intArray0.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
      assertNotNull(intArray1);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) 279;
      longArray0[1] = (long) 1;
      long[] longArray1 = ArrayUtils.clone(longArray0);
      assertArrayEquals(new long[] {279L, 1L}, longArray0);
      assertArrayEquals(new long[] {279L, 1L}, longArray1);
      assertEquals(2, longArray0.length);
      assertEquals(2, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
      
      Object[] objectArray1 = ArrayUtils.nullToEmpty(objectArray0);
      assertEquals(8, objectArray1.length);
      assertEquals(8, objectArray0.length);
      assertSame(objectArray1, objectArray0);
      assertSame(objectArray0, objectArray1);
      assertNotNull(objectArray1);
      
      Integer[] integerArray0 = new Integer[0];
      Integer[] integerArray1 = ArrayUtils.clone(integerArray0);
      assertEquals(0, integerArray0.length);
      assertEquals(0, integerArray1.length);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertNotNull(integerArray1);
  }

  @Test(timeout = 4000)
  public void test0200()  throws Throwable  {
      char[] charArray0 = new char[2];
      char char0 = '~';
      charArray0[0] = '~';
      charArray0[1] = 'D';
      ArrayUtils.shift(charArray0, (-569));
      assertArrayEquals(new char[] {'D', '~'}, charArray0);
      assertEquals(2, charArray0.length);
      
      Long long0 = new Long((-2142L));
      assertNotNull(long0);
      assertEquals((-2142L), (long)long0);
      
      Byte byte0 = new Byte((byte) (-61));
      assertNotNull(byte0);
      assertEquals((byte) (-61), (byte)byte0);
      
      Long long1 = new Long((-2142L));
      assertTrue(long1.equals((Object)long0));
      assertNotNull(long1);
      assertEquals((-2142L), (long)long1);
      
      String string0 = ArrayUtils.toString((Object) byte0);
      assertNotNull(string0);
      assertEquals("-61", string0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-83);
      ArrayUtils.swap(byteArray0, (int) (byte) (-83), 0, (int) (byte) (-83));
      assertArrayEquals(new byte[] {(byte) (-83)}, byteArray0);
      assertEquals(1, byteArray0.length);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "-61";
      stringArray0[1] = "-61";
      String[] stringArray1 = ArrayUtils.nullToEmpty(stringArray0);
      assertEquals(2, stringArray0.length);
      assertEquals(2, stringArray1.length);
      assertSame(stringArray0, stringArray1);
      assertSame(stringArray1, stringArray0);
      assertNotNull(stringArray1);
      
      Integer[] integerArray0 = new Integer[4];
      int int0 = 64;
      Integer integer0 = new Integer(64);
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(integer0);
      assertEquals(64, (int)integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((byte) (-61));
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)int0));
      assertNotNull(integer1);
      assertEquals((-61), (int)integer1);
      
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(50);
      assertFalse(integer2.equals((Object)int0));
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertNotNull(integer2);
      assertEquals(50, (int)integer2);
      
      integerArray0[2] = integer2;
      try { 
        Integer.valueOf("8Oj'xP\"BhK'@W=9-<");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"8Oj'xP\"BhK'@W=9-<\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test0201()  throws Throwable  {
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)560;
      shortArray0[1] = (short)0;
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) (short)0;
      floatArray0[1] = (float) (short)560;
      float[] floatArray1 = ArrayUtils.nullToEmpty(floatArray0);
      assertArrayEquals(new float[] {0.0F, 560.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F, 560.0F}, floatArray1, 0.01F);
      assertEquals(2, floatArray0.length);
      assertEquals(2, floatArray1.length);
      assertSame(floatArray0, floatArray1);
      assertSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      
      int[] intArray0 = new int[0];
      int[] intArray1 = ArrayUtils.removeAllOccurrences(intArray0, (int) (short)560);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      
      boolean[] booleanArray0 = new boolean[0];
      ArrayUtils.swap(booleanArray0, 288, 1072);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals(0, booleanArray0.length);
      
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, 0, 2);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      
      try { 
        Byte.valueOf("");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test0202()  throws Throwable  {
      int[] intArray0 = new int[0];
      Character character0 = Character.valueOf('g');
      assertNotNull(character0);
      assertEquals('g', (char)character0);
      
      Character character1 = Character.valueOf('g');
      assertNotNull(character1);
      assertEquals('g', (char)character1);
      
      Character character2 = Character.valueOf('g');
      assertNotNull(character2);
      assertEquals('g', (char)character2);
      
      Character character3 = Character.valueOf('\\');
      assertFalse(character3.equals((Object)character1));
      assertFalse(character3.equals((Object)character0));
      assertFalse(character3.equals((Object)character2));
      assertNotNull(character3);
      assertEquals('\\', (char)character3);
      
      Character character4 = Character.valueOf('g');
      assertFalse(character4.equals((Object)character3));
      assertNotNull(character4);
      assertEquals('g', (char)character4);
      
      long[] longArray0 = new long[8];
      longArray0[0] = (long) '\\';
      longArray0[1] = (long) 637;
      longArray0[2] = (long) 'g';
      longArray0[4] = (long) 637;
      longArray0[5] = (long) (-3850);
      longArray0[6] = (long) '\\';
      longArray0[7] = (long) (byte) (-102);
      ArrayUtils.shift(longArray0, (-1078), 1, (-3850));
      assertArrayEquals(new long[] {92L, 637L, 103L, 0L, 637L, (-3850L), 92L, (-102L)}, longArray0);
      assertEquals(8, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test0203()  throws Throwable  {
      int[] intArray0 = new int[0];
      int[] intArray1 = ArrayUtils.add(intArray0, (int) (byte) (-102));
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {(-102)}, intArray1);
      assertEquals(0, intArray0.length);
      assertEquals(1, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      
      Character character0 = Character.valueOf('g');
      assertNotNull(character0);
      assertEquals('g', (char)character0);
      
      Character character1 = Character.valueOf('g');
      assertNotNull(character1);
      assertEquals('g', (char)character1);
      
      Character character2 = Character.valueOf('g');
      assertNotNull(character2);
      assertEquals('g', (char)character2);
      
      Character character3 = Character.valueOf('\\');
      assertFalse(character3.equals((Object)character1));
      assertFalse(character3.equals((Object)character0));
      assertFalse(character3.equals((Object)character2));
      assertNotNull(character3);
      assertEquals('\\', (char)character3);
      
      Character character4 = Character.valueOf('g');
      assertFalse(character4.equals((Object)character3));
      assertNotNull(character4);
      assertEquals('g', (char)character4);
      
      long[] longArray0 = new long[8];
      longArray0[0] = (long) '\\';
      longArray0[1] = (long) 637;
      longArray0[2] = (long) 'g';
      longArray0[3] = (long) (-3850);
      longArray0[4] = (long) 637;
      longArray0[5] = (long) (-3850);
      longArray0[6] = (long) '\\';
      longArray0[7] = (long) (byte) (-102);
      ArrayUtils.shift(longArray0, (-1078), 1, (-3850));
      assertArrayEquals(new long[] {92L, 637L, 103L, (-3850L), 637L, (-3850L), 92L, (-102L)}, longArray0);
      assertEquals(8, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test0204()  throws Throwable  {
      float[] floatArray0 = new float[3];
      floatArray0[0] = (-904.0746F);
      int[] intArray0 = new int[8];
      intArray0[0] = 0;
      intArray0[1] = 2140436433;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 0;
      intArray0[5] = 1400;
      intArray0[6] = 0;
      intArray0[7] = 0;
      int int0 = ArrayUtils.indexOf(intArray0, 2140436433, (-971));
      assertArrayEquals(new int[] {0, 2140436433, 0, 0, 0, 1400, 0, 0}, intArray0);
      assertEquals(8, intArray0.length);
      assertEquals(1, int0);
      
      String string0 = ArrayUtils.toString((Object) null);
      assertNotNull(string0);
      assertEquals("{}", string0);
      
      int[] intArray1 = ArrayUtils.subarray(intArray0, (-127), 1821);
      assertArrayEquals(new int[] {0, 2140436433, 0, 0, 0, 1400, 0, 0}, intArray0);
      assertArrayEquals(new int[] {0, 2140436433, 0, 0, 0, 1400, 0, 0}, intArray1);
      assertEquals(8, intArray0.length);
      assertEquals(8, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      
      char[] charArray0 = new char[0];
      char[] charArray1 = ArrayUtils.add(charArray0, 'p');
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {'p'}, charArray1);
      assertEquals(0, charArray0.length);
      assertEquals(1, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      
      boolean boolean0 = ArrayUtils.contains(intArray1, 0);
      assertArrayEquals(new int[] {0, 2140436433, 0, 0, 0, 1400, 0, 0}, intArray0);
      assertArrayEquals(new int[] {0, 2140436433, 0, 0, 0, 1400, 0, 0}, intArray1);
      assertEquals(8, intArray0.length);
      assertEquals(8, intArray1.length);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertTrue(boolean0);
      
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short)381;
      shortArray0[1] = (short)1;
      shortArray0[2] = (short)117;
      shortArray0[3] = (short)1;
      shortArray0[4] = (short)14;
      shortArray0[5] = (short)43;
      shortArray0[6] = (short)227;
      shortArray0[7] = (short)61;
      boolean boolean1 = ArrayUtils.isSorted(shortArray0);
      assertArrayEquals(new short[] {(short)381, (short)1, (short)117, (short)1, (short)14, (short)43, (short)227, (short)61}, shortArray0);
      assertEquals(8, shortArray0.length);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test0205()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      ArrayUtils.swap(doubleArray0, Integer.MAX_VALUE, Integer.MAX_VALUE, Integer.MAX_VALUE);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      long[] longArray0 = new long[2];
      longArray0[1] = (long) 781;
      long[] longArray1 = ArrayUtils.removeElements(longArray0, longArray0);
      assertArrayEquals(new long[] {0L, 781L}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertEquals(2, longArray0.length);
      assertEquals(0, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
      
      String string0 = ArrayUtils.toString((Object) null, "java.lang.String");
      assertNotNull(string0);
      assertEquals("java.lang.String", string0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)29;
      BitSet bitSet0 = ArrayUtils.indexesOf(byteArray0, (byte)18, Integer.MAX_VALUE);
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertArrayEquals(new byte[] {(byte)0, (byte)29}, byteArray0);
      assertEquals(2, byteArray0.length);
      assertNotNull(bitSet0);
  }

  @Test(timeout = 4000)
  public void test0206()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-39);
      byteArray0[1] = (byte)14;
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      booleanArray0[5] = true;
      booleanArray0[6] = true;
      booleanArray0[7] = true;
      booleanArray0[8] = false;
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, (int) (byte) (-39), (int) (byte)14);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, true, false, true, true, true, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, true, false, true, true, true, false}, booleanArray1));
      assertEquals(9, booleanArray0.length);
      assertEquals(9, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) (byte) (-39);
      floatArray0[2] = (float) (byte)14;
      boolean boolean0 = ArrayUtils.isSorted(floatArray0);
      assertArrayEquals(new float[] {(-39.0F), 0.0F, 14.0F}, floatArray0, 0.01F);
      assertEquals(3, floatArray0.length);
      assertTrue(boolean0);
      
      long[] longArray0 = new long[4];
      longArray0[0] = (long) (byte)14;
      floatArray0[0] = (float) (-3481L);
      longArray0[2] = (-2682L);
      longArray0[3] = 3013L;
      int int0 = ArrayUtils.indexOf(longArray0, (-3481L));
      assertArrayEquals(new long[] {14L, 0L, (-2682L), 3013L}, longArray0);
      assertEquals(4, longArray0.length);
      assertEquals((-1), int0);
      
      int[] intArray0 = new int[8];
      intArray0[0] = (int) (byte)14;
      intArray0[1] = (int) (byte)14;
      intArray0[2] = (int) (byte) (-39);
      intArray0[3] = (int) (byte)14;
      intArray0[4] = (-1);
      intArray0[5] = (int) (byte)14;
      intArray0[6] = (int) (byte)14;
      intArray0[7] = (int) (byte)14;
      ArrayUtils.shift(intArray0, 4, 1179, (-2830));
      assertArrayEquals(new int[] {14, 14, (-39), 14, 14, 14, (-1), 14}, intArray0);
      assertEquals(8, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test0207()  throws Throwable  {
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)0;
      short[] shortArray1 = ArrayUtils.nullToEmpty(shortArray0);
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)0}, shortArray1);
      assertEquals(1, shortArray0.length);
      assertEquals(1, shortArray1.length);
      assertSame(shortArray0, shortArray1);
      assertSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      
      ArrayUtils.swap((char[]) null, 328, (int) (short)0, (int) (short)0);
      Integer integer0 = new Integer(454);
      assertNotNull(integer0);
      assertEquals(454, (int)integer0);
      
      char[] charArray0 = ArrayUtils.nullToEmpty((char[]) null);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      assertNotNull(charArray0);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 328;
      float[] floatArray0 = new float[5];
      floatArray0[0] = (-2005.7074F);
      floatArray0[1] = (float) 454;
      floatArray0[2] = (float) 328;
      floatArray0[3] = (float) 328;
      floatArray0[4] = (-2005.7074F);
      int int0 = ArrayUtils.lastIndexOf(floatArray0, 328.0F, (int) (short)0);
      assertArrayEquals(new float[] {(-2005.7074F), 454.0F, 328.0F, 328.0F, (-2005.7074F)}, floatArray0, 0.01F);
      assertEquals(5, floatArray0.length);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0208()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 914.944001638755;
      doubleArray0[2] = 914.944001638755;
      doubleArray0[3] = 0.0;
      float[] floatArray0 = new float[9];
      floatArray0[0] = (-1.0F);
      floatArray0[1] = 1176.886F;
      floatArray0[2] = (-1750.461F);
      floatArray0[3] = (-1452.0275F);
      floatArray0[4] = (-2066.8F);
      floatArray0[5] = (-1.0F);
      floatArray0[6] = (-2327.2395F);
      floatArray0[7] = 317.79565F;
      floatArray0[8] = (-1.0F);
      int int0 = ArrayUtils.indexOf(floatArray0, 1.0F, 56);
      assertArrayEquals(new float[] {(-1.0F), 1176.886F, (-1750.461F), (-1452.0275F), (-2066.8F), (-1.0F), (-2327.2395F), 317.79565F, (-1.0F)}, floatArray0, 0.01F);
      assertEquals(9, floatArray0.length);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0209()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = (-2830);
      intArray0[1] = 7;
      ArrayUtils.shift(intArray0, 7, (-2373), 328);
      assertArrayEquals(new int[] {(-2830), 7}, intArray0);
      assertEquals(2, intArray0.length);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-90);
      byteArray0[1] = (byte) (-25);
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte) (-56);
      byteArray0[4] = (byte)2;
      byteArray0[5] = (byte)83;
      byteArray0[6] = (byte)1;
      byteArray0[7] = (byte)36;
      ArrayUtils.shift(byteArray0, (int) (byte) (-90), (int) (byte)1, 2071);
      assertArrayEquals(new byte[] {(byte) (-90), (byte) (-25), (byte) (-1), (byte) (-56), (byte)2, (byte)83, (byte)1, (byte)36}, byteArray0);
      assertEquals(8, byteArray0.length);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) (byte)83;
      doubleArray0[1] = (-345.728);
      doubleArray0[2] = (double) (byte)1;
      doubleArray0[3] = (double) (byte) (-1);
      doubleArray0[4] = (double) (byte) (-56);
      doubleArray0[5] = (double) (byte)2;
      doubleArray0[6] = (double) (byte) (-25);
      doubleArray0[7] = (double) (byte)2;
      doubleArray0[8] = (double) (byte) (-56);
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, 2.0);
      assertEquals(64, bitSet0.size());
      assertEquals(2, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertEquals("{5, 7}", bitSet0.toString());
      assertEquals(8, bitSet0.length());
      assertArrayEquals(new double[] {83.0, (-345.728), 1.0, (-1.0), (-56.0), 2.0, (-25.0), 2.0, (-56.0)}, doubleArray0, 0.01);
      assertEquals(9, doubleArray0.length);
      assertNotNull(bitSet0);
  }

  @Test(timeout = 4000)
  public void test0210()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)9;
      byteArray0[1] = (byte) (-44);
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short)3555;
      shortArray0[1] = (short) (byte)9;
      shortArray0[2] = (short) (byte) (-44);
      shortArray0[3] = (short) (byte) (-44);
      shortArray0[4] = (short)3555;
      shortArray0[5] = (short) (byte)9;
      shortArray0[6] = (short) (byte)9;
      shortArray0[7] = (short) (byte)9;
      shortArray0[8] = (short) (byte) (-44);
      short[] shortArray1 = ArrayUtils.removeElements(shortArray0, shortArray0);
      assertArrayEquals(new short[] {(short)3555, (short)9, (short) (-44), (short) (-44), (short)3555, (short)9, (short)9, (short)9, (short) (-44)}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertEquals(9, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      
      // Undeclared exception!
      try { 
        ArrayUtils.remove(byteArray0, (int) (short)9);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 9, Length: 9
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0211()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)1;
      byteArray0[2] = (byte) (-22);
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short) (byte) (-22);
      shortArray0[1] = (short) (byte) (-22);
      shortArray0[2] = (short) (byte) (-22);
      shortArray0[3] = (short) (byte) (-22);
      shortArray0[4] = (short) (byte) (-22);
      shortArray0[5] = (short) (byte)1;
      shortArray0[6] = (short) (-13106);
      shortArray0[7] = (short) (byte)1;
      shortArray0[8] = (short) (byte) (-22);
      ArrayUtils.swap(shortArray0, (-2631), (-558), (-1409));
      assertArrayEquals(new short[] {(short) (-22), (short) (-22), (short) (-22), (short) (-22), (short) (-22), (short)1, (short) (-13106), (short)1, (short) (-22)}, shortArray0);
      assertEquals(9, shortArray0.length);
      
      short[] shortArray1 = ArrayUtils.clone(shortArray0);
      assertArrayEquals(new short[] {(short) (-22), (short) (-22), (short) (-22), (short) (-22), (short) (-22), (short)1, (short) (-13106), (short)1, (short) (-22)}, shortArray0);
      assertArrayEquals(new short[] {(short) (-22), (short) (-22), (short) (-22), (short) (-22), (short) (-22), (short)1, (short) (-13106), (short)1, (short) (-22)}, shortArray1);
      assertEquals(9, shortArray0.length);
      assertEquals(9, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      
      Long long0 = new Long(3225);
      assertNotNull(long0);
      assertEquals(3225L, (long)long0);
      
      Long long1 = new Long((short) (-22));
      assertFalse(long1.equals((Object)long0));
      assertNotNull(long1);
      assertEquals((-22L), (long)long1);
      
      Long long2 = new Long((short)1);
      assertFalse(long2.equals((Object)long1));
      assertFalse(long2.equals((Object)long0));
      assertNotNull(long2);
      assertEquals(1L, (long)long2);
      
      Long long3 = new Long((short)1);
      assertFalse(long3.equals((Object)long0));
      assertTrue(long3.equals((Object)long2));
      assertFalse(long3.equals((Object)long1));
      assertNotNull(long3);
      assertEquals(1L, (long)long3);
      
      Long long4 = new Long((short) (-22));
      assertFalse(long4.equals((Object)long0));
      assertFalse(long4.equals((Object)long3));
      assertTrue(long4.equals((Object)long1));
      assertFalse(long4.equals((Object)long2));
      assertNotNull(long4);
      assertEquals((-22L), (long)long4);
      
      try { 
        Long.valueOf((String) null, (int) (byte)1);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // null
         //
         verifyException("java.lang.Long", e);
      }
  }

  @Test(timeout = 4000)
  public void test0212()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 571.942196047302;
      char[] charArray0 = new char[1];
      charArray0[0] = 'P';
      char[] charArray1 = ArrayUtils.removeElement(charArray0, 'R');
      assertArrayEquals(new char[] {'P'}, charArray0);
      assertArrayEquals(new char[] {'P'}, charArray1);
      assertEquals(1, charArray0.length);
      assertEquals(1, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      
      Object[] objectArray0 = new Object[0];
      Float float0 = new Float(0.0);
      assertNotNull(float0);
      assertEquals(0.0F, (float)float0, 0.01F);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(objectArray0, (Object) float0, 2);
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertEquals(0, objectArray0.length);
      assertNotNull(bitSet0);
      
      short[] shortArray0 = new short[2];
      int int0 = ArrayUtils.indexOf(doubleArray0, 0.7, 2, (double) (short) (-3414));
      assertArrayEquals(new double[] {0.0, 571.942196047302, 0.0}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals((-1), int0);
      
      boolean boolean0 = ArrayUtils.isSorted(charArray0);
      assertArrayEquals(new char[] {'P'}, charArray0);
      assertEquals(1, charArray0.length);
      assertFalse(charArray0.equals((Object)charArray1));
      assertNotSame(charArray0, charArray1);
      assertTrue(boolean0);
      
      short[] shortArray1 = ArrayUtils.removeElements(shortArray0, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertEquals(2, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)73;
      byteArray0[1] = (byte)110;
      byteArray0[2] = (byte) (-32);
      byteArray0[3] = (byte)1;
      byteArray0[4] = (byte) (-1);
      byte[] byteArray1 = ArrayUtils.removeElement(byteArray0, (byte) (-2));
      assertArrayEquals(new byte[] {(byte)73, (byte)110, (byte) (-32), (byte)1, (byte) (-1)}, byteArray1);
      assertArrayEquals(new byte[] {(byte)73, (byte)110, (byte) (-32), (byte)1, (byte) (-1)}, byteArray0);
      assertEquals(5, byteArray1.length);
      assertEquals(5, byteArray0.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotNull(byteArray1);
      
      boolean[] booleanArray0 = new boolean[0];
      int int1 = ArrayUtils.indexOf(booleanArray0, true);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals(0, booleanArray0.length);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test0213()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = 'L';
      Long[] longArray0 = new Long[4];
      Long long0 = new Long(955);
      assertNotNull(long0);
      assertEquals(955L, (long)long0);
      
      longArray0[0] = long0;
      Long long1 = new Long('L');
      assertFalse(long1.equals((Object)long0));
      assertNotNull(long1);
      assertEquals(76L, (long)long1);
      
      longArray0[1] = long1;
      long long2 = (-1L);
      Long long3 = new Long((-1L));
      assertFalse(long3.equals((Object)long0));
      assertTrue(long3.equals((Object)long2));
      assertFalse(long3.equals((Object)long1));
      assertNotNull(long3);
      assertEquals((-1L), (long)long3);
      
      longArray0[2] = long3;
      Long long4 = new Long(long2);
      assertTrue(long4.equals((Object)long3));
      assertFalse(long4.equals((Object)long0));
      assertTrue(long4.equals((Object)long2));
      assertFalse(long4.equals((Object)long1));
      assertNotNull(long4);
      assertEquals((-1L), (long)long4);
      
      longArray0[3] = long4;
      Long[] longArray1 = ArrayUtils.removeElements(longArray0, longArray0);
      assertEquals(4, longArray0.length);
      assertEquals(0, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
      
      ArrayUtils.shift((Object[]) longArray0, (-1383));
      assertEquals(4, longArray0.length);
      assertFalse(longArray0.equals((Object)longArray1));
      assertNotSame(longArray0, longArray1);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) long2;
      doubleArray0[1] = (double) long2;
      doubleArray0[2] = (-1.0);
      double[] doubleArray1 = ArrayUtils.subarray(doubleArray0, 955, (-1383));
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {(-1.0), (-1.0), (-1.0)}, doubleArray0, 0.01);
      assertEquals(0, doubleArray1.length);
      assertEquals(3, doubleArray0.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotNull(doubleArray1);
      
      double[] doubleArray2 = ArrayUtils.subarray(doubleArray0, 0, 17);
      assertArrayEquals(new double[] {(-1.0), (-1.0), (-1.0)}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {(-1.0), (-1.0), (-1.0)}, doubleArray0, 0.01);
      assertEquals(3, doubleArray2.length);
      assertEquals(3, doubleArray0.length);
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotNull(doubleArray2);
  }

  @Test(timeout = 4000)
  public void test0214()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      Long long0 = new Long((-1L));
      assertNotNull(long0);
      assertEquals((-1L), (long)long0);
      
      Long long1 = new Long(623L);
      assertFalse(long1.equals((Object)long0));
      assertNotNull(long1);
      assertEquals(623L, (long)long1);
      
      Long long2 = new Long(1L);
      assertFalse(long2.equals((Object)long0));
      assertFalse(long2.equals((Object)long1));
      assertNotNull(long2);
      assertEquals(1L, (long)long2);
      
      Long long3 = new Long((-761L));
      assertFalse(long3.equals((Object)long1));
      assertFalse(long3.equals((Object)long0));
      assertFalse(long3.equals((Object)long2));
      assertNotNull(long3);
      assertEquals((-761L), (long)long3);
      
      Long long4 = new Long((-1205L));
      assertFalse(long4.equals((Object)long2));
      assertFalse(long4.equals((Object)long3));
      assertFalse(long4.equals((Object)long1));
      assertFalse(long4.equals((Object)long0));
      assertNotNull(long4);
      assertEquals((-1205L), (long)long4);
      
      Long long5 = new Long((-761L));
      assertFalse(long5.equals((Object)long2));
      assertFalse(long5.equals((Object)long1));
      assertFalse(long5.equals((Object)long4));
      assertFalse(long5.equals((Object)long0));
      assertTrue(long5.equals((Object)long3));
      assertNotNull(long5);
      assertEquals((-761L), (long)long5);
      
      Long[] longArray0 = new Long[6];
      Long long6 = new Long((-785));
      assertFalse(long6.equals((Object)long3));
      assertFalse(long6.equals((Object)long5));
      assertFalse(long6.equals((Object)long2));
      assertFalse(long6.equals((Object)long4));
      assertFalse(long6.equals((Object)long1));
      assertFalse(long6.equals((Object)long0));
      assertNotNull(long6);
      assertEquals((-785L), (long)long6);
      
      Long long7 = Long.getLong("oOad2(Mwz+", long6);
      assertFalse(long6.equals((Object)long3));
      assertFalse(long6.equals((Object)long5));
      assertFalse(long6.equals((Object)long2));
      assertFalse(long6.equals((Object)long4));
      assertFalse(long6.equals((Object)long1));
      assertFalse(long6.equals((Object)long0));
      assertFalse(long7.equals((Object)long1));
      assertFalse(long7.equals((Object)long0));
      assertFalse(long7.equals((Object)long4));
      assertFalse(long7.equals((Object)long3));
      assertFalse(long7.equals((Object)long2));
      assertFalse(long7.equals((Object)long5));
      assertNotNull(long7);
      assertEquals((-785L), (long)long7);
      
      longArray0[0] = long7;
      longArray0[1] = long2;
      int[] intArray0 = new int[2];
      intArray0[0] = (-785);
      intArray0[1] = (-785);
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) (long)longArray0[0];
      ArrayUtils.shift(floatArray0, (-785), 338, 1074);
      assertArrayEquals(new float[] {(-785.0F)}, floatArray0, 0.01F);
      assertEquals(1, floatArray0.length);
      
      Float[] floatArray1 = ArrayUtils.toObject(floatArray0);
      assertArrayEquals(new float[] {(-785.0F)}, floatArray0, 0.01F);
      assertEquals(1, floatArray1.length);
      assertEquals(1, floatArray0.length);
      assertNotNull(floatArray1);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((Object[]) longArray0, object0, 1903);
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertEquals(6, longArray0.length);
      assertNotNull(bitSet0);
  }

  @Test(timeout = 4000)
  public void test0215()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 1.0F;
      doubleArray0[1] = 1.0;
      boolean boolean0 = ArrayUtils.isSameLength(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {1.0, 1.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      assertTrue(boolean0);
      
      char[] charArray0 = new char[1];
      charArray0[0] = ':';
      Character[] characterArray0 = ArrayUtils.toObject((char[]) null);
      assertNull(characterArray0);
      
      float[] floatArray0 = new float[9];
      floatArray0[0] = 1.0F;
      floatArray0[1] = (float) 338;
      floatArray0[2] = (float) 338;
      floatArray0[3] = (float) 338;
      floatArray0[4] = (float) ':';
      floatArray0[5] = (float) 338;
      floatArray0[6] = (float) ':';
      floatArray0[7] = (-1.0F);
      floatArray0[8] = (float) 338;
      ArrayUtils.shift(floatArray0, (-557), 2147483636, 9);
      assertArrayEquals(new float[] {1.0F, 338.0F, 338.0F, 338.0F, 58.0F, 338.0F, 58.0F, (-1.0F), 338.0F}, floatArray0, 0.01F);
      assertEquals(9, floatArray0.length);
      
      ArrayUtils.reverse(charArray0, 0, 9);
      assertArrayEquals(new char[] {':'}, charArray0);
      assertEquals(1, charArray0.length);
      
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = true;
      booleanArray0[2] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      booleanArray0[3] = true;
      Boolean[] booleanArray1 = ArrayUtils.toObject(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, false, true, true, true, true, false}, booleanArray0));
      assertEquals(7, booleanArray0.length);
      assertEquals(7, booleanArray1.length);
      assertNotNull(booleanArray1);
      
      Float[] floatArray1 = ArrayUtils.toObject(floatArray0);
      assertArrayEquals(new float[] {1.0F, 338.0F, 338.0F, 338.0F, 58.0F, 338.0F, 58.0F, (-1.0F), 338.0F}, floatArray0, 0.01F);
      assertEquals(9, floatArray0.length);
      assertEquals(9, floatArray1.length);
      assertNotNull(floatArray1);
  }

  @Test(timeout = 4000)
  public void test0216()  throws Throwable  {
      float[] floatArray0 = new float[3];
      floatArray0[0] = (-1385.0087F);
      float[] floatArray1 = ArrayUtils.nullToEmpty(floatArray0);
      assertArrayEquals(new float[] {(-1385.0087F), 0.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-1385.0087F), 0.0F, 0.0F}, floatArray1, 0.01F);
      assertEquals(3, floatArray0.length);
      assertEquals(3, floatArray1.length);
      assertSame(floatArray0, floatArray1);
      assertSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      
      int[] intArray0 = new int[9];
      intArray0[0] = 279;
      floatArray0[1] = (float) 279;
      intArray0[2] = 279;
      intArray0[4] = 279;
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) 279.0F;
      Short short0 = new Short((short)1603);
      assertNotNull(short0);
      assertEquals((short)1603, (short)short0);
      
      Object object0 = ArrayUtils.toPrimitive((Object) short0);
      assertNotNull(object0);
      assertEquals((short)1603, object0);
      
      objectArray0[1] = object0;
      objectArray0[2] = (Object) 279;
      objectArray0[3] = (Object) 279;
      objectArray0[4] = (Object) 279.0F;
      objectArray0[5] = (Object) 279;
      objectArray0[6] = (Object) 279.0F;
      objectArray0[7] = (Object) (-1385.0087F);
      boolean boolean0 = ArrayUtils.contains(objectArray0, objectArray0[1]);
      assertEquals(8, objectArray0.length);
      assertTrue(boolean0);
      
      int[] intArray1 = ArrayUtils.remove(intArray0, 1);
      assertArrayEquals(new int[] {279, 0, 279, 0, 279, 0, 0, 0, 0}, intArray0);
      assertArrayEquals(new int[] {279, 279, 0, 279, 0, 0, 0, 0}, intArray1);
      assertEquals(9, intArray0.length);
      assertEquals(8, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) 279;
      longArray0[1] = (long) 1;
      long[] longArray1 = ArrayUtils.clone(longArray0);
      assertArrayEquals(new long[] {279L, 1L}, longArray0);
      assertArrayEquals(new long[] {279L, 1L}, longArray1);
      assertEquals(2, longArray0.length);
      assertEquals(2, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
  }

  @Test(timeout = 4000)
  public void test0217()  throws Throwable  {
      int int0 = ArrayUtils.lastIndexOf((float[]) null, 1.0F, 31);
      assertEquals((-1), int0);
      
      char[] charArray0 = new char[3];
      charArray0[0] = '(';
      charArray0[1] = '#';
      charArray0[2] = 'N';
      boolean boolean0 = ArrayUtils.isEmpty(charArray0);
      assertArrayEquals(new char[] {'(', '#', 'N'}, charArray0);
      assertEquals(3, charArray0.length);
      assertFalse(boolean0);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      ArrayUtils.reverse(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false}, booleanArray0));
      assertEquals(4, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test0218()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 768.0958366890409;
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)32;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-48);
      byteArray0[3] = (byte) (-57);
      byteArray0[4] = (byte) (-1);
      int int0 = ArrayUtils.indexOf(byteArray0, (byte) (-48));
      assertArrayEquals(new byte[] {(byte)32, (byte)0, (byte) (-48), (byte) (-57), (byte) (-1)}, byteArray0);
      assertEquals(5, byteArray0.length);
      assertEquals(2, int0);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) (byte)0;
      int int1 = ArrayUtils.lastIndexOf(longArray0, 2022L, Integer.MAX_VALUE);
      assertArrayEquals(new long[] {0L}, longArray0);
      assertEquals(1, longArray0.length);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      ArrayUtils.swap(booleanArray0, (-1), (int) (byte) (-48), 2);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertEquals(1, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test0219()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-7);
      boolean boolean0 = ArrayUtils.isSameLength(byteArray0, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-7)}, byteArray0);
      assertEquals(1, byteArray0.length);
      assertTrue(boolean0);
      
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short) (byte) (-7);
      shortArray0[1] = (short) (byte) (-7);
      BitSet bitSet0 = ArrayUtils.indexesOf(byteArray0, (byte) (-123), (int) (byte) (-7));
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertArrayEquals(new byte[] {(byte) (-7)}, byteArray0);
      assertEquals(1, byteArray0.length);
      assertNotNull(bitSet0);
      
      boolean boolean1 = ArrayUtils.isSorted(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-7)}, byteArray0);
      assertEquals(1, byteArray0.length);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      Boolean boolean2 = new Boolean(true);
      assertTrue(boolean2.equals((Object)boolean1));
      assertTrue(boolean2.equals((Object)boolean0));
      assertNotNull(boolean2);
      assertTrue(boolean2);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 'D';
      doubleArray0[2] = 87.71745;
      doubleArray0[4] = 42.0;
      doubleArray0[5] = (double) (byte) (-7);
      doubleArray0[6] = 42.0;
      doubleArray0[7] = 1560.37033;
      doubleArray0[8] = 42.0;
      int int0 = ArrayUtils.indexOf(doubleArray0, 0.0, (int) (byte) (-7), 0.0);
      assertArrayEquals(new double[] {68.0, 0.0, 87.71745, 0.0, 42.0, (-7.0), 42.0, 1560.37033, 42.0}, doubleArray0, 0.01);
      assertEquals(9, doubleArray0.length);
      assertEquals(1, int0);
      
      short[] shortArray1 = ArrayUtils.removeElements(shortArray0, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertArrayEquals(new short[] {(short) (-7), (short) (-7), (short)0}, shortArray0);
      assertEquals(0, shortArray1.length);
      assertEquals(3, shortArray0.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertNotNull(shortArray1);
  }

  @Test(timeout = 4000)
  public void test0220()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)1;
      byteArray0[2] = (byte) (-22);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 85.0;
      doubleArray0[1] = (-1065.0);
      doubleArray0[2] = 85.0;
      doubleArray0[3] = (double) (byte)1;
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      boolean boolean0 = ArrayUtils.contains(booleanArray0, true);
      assertTrue(Arrays.equals(new boolean[] {true, false, false, true, true, true}, booleanArray0));
      assertEquals(6, booleanArray0.length);
      assertTrue(boolean0);
      
      boolean boolean1 = ArrayUtils.isSorted((short[]) null);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test0221()  throws Throwable  {
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short)560;
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte)110;
      boolean boolean0 = ArrayUtils.isEmpty(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)110, (byte)0}, byteArray0);
      assertEquals(3, byteArray0.length);
      assertFalse(boolean0);
      
      MockRandom mockRandom0 = new MockRandom((short)560);
      assertNotNull(mockRandom0);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) (byte)8;
      floatArray0[1] = (float) (short)560;
      floatArray0[2] = (float) (byte)110;
      floatArray0[3] = (float) (byte)110;
      floatArray0[4] = (float) (short)560;
      MockRandom mockRandom1 = new MockRandom();
      assertFalse(mockRandom1.equals((Object)mockRandom0));
      assertNotNull(mockRandom1);
      
      ArrayUtils.shuffle(floatArray0, (Random) mockRandom1);
      assertArrayEquals(new float[] {560.0F, 110.0F, 110.0F, 560.0F, 8.0F}, floatArray0, 0.01F);
      assertEquals(5, floatArray0.length);
      assertFalse(mockRandom1.equals((Object)mockRandom0));
      assertNotSame(mockRandom1, mockRandom0);
      
      ArrayUtils.swap(floatArray0, 0, 4, 971);
      assertArrayEquals(new float[] {8.0F, 110.0F, 110.0F, 560.0F, 560.0F}, floatArray0, 0.01F);
      assertEquals(5, floatArray0.length);
      
      short[] shortArray1 = ArrayUtils.subarray(shortArray0, 1111, 88);
      assertArrayEquals(new short[] {(short)560, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertEquals(6, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      boolean[] booleanArray1 = ArrayUtils.addFirst(booleanArray0, false);
      assertTrue(Arrays.equals(new boolean[] {false, false, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, true}, booleanArray1));
      assertEquals(3, booleanArray0.length);
      assertEquals(4, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      
      float[] floatArray1 = ArrayUtils.subarray(floatArray0, 2, (int) (byte)8);
      assertArrayEquals(new float[] {110.0F, 560.0F, 560.0F}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {8.0F, 110.0F, 110.0F, 560.0F, 560.0F}, floatArray0, 0.01F);
      assertEquals(3, floatArray1.length);
      assertEquals(5, floatArray0.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertNotNull(floatArray1);
      
      short[] shortArray2 = ArrayUtils.removeElement(shortArray1, (short)560);
      assertArrayEquals(new short[] {(short)560, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray2);
      assertArrayEquals(new short[] {}, shortArray1);
      assertEquals(6, shortArray0.length);
      assertEquals(0, shortArray2.length);
      assertEquals(0, shortArray1.length);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertFalse(shortArray2.equals((Object)shortArray1));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray0, shortArray2);
      assertNotSame(shortArray2, shortArray0);
      assertNotSame(shortArray2, shortArray1);
      assertNotSame(shortArray1, shortArray2);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray2);
  }

  @Test(timeout = 4000)
  public void test0222()  throws Throwable  {
      float[] floatArray0 = new float[0];
      ArrayUtils.reverse(floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
      
      Byte byte0 = new Byte((byte)0);
      assertNotNull(byte0);
      assertEquals((byte)0, (byte)byte0);
      
      Byte byte1 = new Byte((byte)0);
      assertTrue(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      assertEquals((byte)0, (byte)byte1);
      
      Byte byte2 = new Byte((byte) (-75));
      assertFalse(byte2.equals((Object)byte1));
      assertFalse(byte2.equals((Object)byte0));
      assertNotNull(byte2);
      assertEquals((byte) (-75), (byte)byte2);
      
      Byte byte3 = new Byte((byte)43);
      assertFalse(byte3.equals((Object)byte0));
      assertFalse(byte3.equals((Object)byte2));
      assertFalse(byte3.equals((Object)byte1));
      assertNotNull(byte3);
      assertEquals((byte)43, (byte)byte3);
      
      float[] floatArray1 = ArrayUtils.subarray(floatArray0, (int) (byte)0, 2869);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      
      boolean boolean0 = ArrayUtils.isNotEmpty((boolean[]) null);
      assertFalse(boolean0);
      
      org.evosuite.runtime.Random.setNextRandom(13);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 2869;
      doubleArray0[1] = (double) 2869;
      doubleArray0[4] = (double) (byte) (-75);
      doubleArray0[3] = (double) (byte)43;
      doubleArray0[4] = (double) 13;
      doubleArray0[5] = (double) (byte)43;
      doubleArray0[6] = (double) 13;
      doubleArray0[7] = (double) 13;
      Object[] objectArray0 = ArrayUtils.nullToEmpty((Object[]) null);
      assertEquals(0, objectArray0.length);
      assertNotNull(objectArray0);
      
      long[] longArray0 = new long[4];
      longArray0[0] = (long) (short)52;
      longArray0[1] = (long) (short)2358;
      longArray0[2] = (long) (byte)0;
      longArray0[3] = (long) (byte)43;
      long[] longArray1 = ArrayUtils.subarray(longArray0, (int) (short)759, (-1667));
      assertArrayEquals(new long[] {52L, 2358L, 0L, 43L}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertEquals(4, longArray0.length);
      assertEquals(0, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
  }

  @Test(timeout = 4000)
  public void test0223()  throws Throwable  {
      Byte[] byteArray0 = new Byte[2];
      byte byte0 = (byte)51;
      Byte byte1 = new Byte((byte)51);
      assertTrue(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      assertEquals((byte)51, (byte)byte1);
      
      byteArray0[0] = byte1;
      Byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0);
      assertEquals(2, byteArray0.length);
      assertEquals(2, byteArray1.length);
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      
      ArrayUtils.shift((Object[]) byteArray0, 0, (int) (byte)51, (-1916));
      assertEquals(2, byteArray0.length);
      assertSame(byteArray0, byteArray1);
      
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short) (byte)51;
      shortArray0[1] = (short) byte0;
      shortArray0[2] = (short) byte0;
      short[] shortArray1 = ArrayUtils.removeElements(shortArray0, shortArray0);
      assertArrayEquals(new short[] {(short)51, (short)51, (short)51}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertEquals(3, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      
      Object[] objectArray0 = ArrayUtils.nullToEmpty((Object[]) byteArray0);
      assertEquals(2, byteArray0.length);
      assertEquals(2, objectArray0.length);
      assertSame(byteArray0, objectArray0);
      assertSame(byteArray0, byteArray1);
      assertNotNull(objectArray0);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) (short)51;
      longArray0[1] = (long) (short)51;
      long[] longArray1 = ArrayUtils.subarray(longArray0, (-1), (-1377));
      assertArrayEquals(new long[] {51L, 51L}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertEquals(2, longArray0.length);
      assertEquals(0, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
      
      char[] charArray0 = ArrayUtils.subarray((char[]) null, (int) (short)51, 1);
      assertNull(charArray0);
  }

  @Test(timeout = 4000)
  public void test0224()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 571.942196047302;
      doubleArray0[2] = 1.0;
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = true;
      Long long0 = new Long(2);
      assertNotNull(long0);
      assertEquals(2L, (long)long0);
      
      Long[] longArray0 = new Long[4];
      longArray0[0] = long0;
      longArray0[1] = long0;
      longArray0[2] = long0;
      longArray0[3] = long0;
      Long[] longArray1 = ArrayUtils.subarray(longArray0, 2115, 2115);
      assertEquals(4, longArray0.length);
      assertEquals(0, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'Y';
      charArray0[1] = 'Y';
      boolean boolean0 = ArrayUtils.isSorted(charArray0);
      assertArrayEquals(new char[] {'Y', 'Y'}, charArray0);
      assertEquals(2, charArray0.length);
      assertTrue(boolean0);
      
      char[] charArray1 = new char[8];
      assertFalse(charArray1.equals((Object)charArray0));
      
      charArray1[2] = 'Y';
      charArray1[1] = 'Y';
      long[] longArray2 = ArrayUtils.addAll((long[]) null, (long[]) null);
      assertNull(longArray2);
      
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) 'Y';
      objectArray0[1] = (Object) 0.0;
      objectArray0[2] = (Object) longArray0[3];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[3] = object0;
      ArrayUtils.reverse(objectArray0);
      assertEquals(4, objectArray0.length);
      
      double[] doubleArray1 = ArrayUtils.subarray(doubleArray0, 99, 2115);
      assertArrayEquals(new double[] {0.0, 571.942196047302, 1.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) 2115;
      floatArray0[1] = (float) 'Y';
      // Undeclared exception!
      try { 
        ArrayUtils.insert((-1729), floatArray0, floatArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1729, Length: 2
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0225()  throws Throwable  {
      Byte byte0 = new Byte((byte)99);
      assertNotNull(byte0);
      assertEquals((byte)99, (byte)byte0);
      
      Byte byte1 = new Byte((byte)89);
      assertFalse(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      assertEquals((byte)89, (byte)byte1);
      
      int[] intArray0 = new int[5];
      intArray0[0] = (int) (byte)89;
      intArray0[1] = (int) (byte)89;
      intArray0[2] = (int) (byte)89;
      intArray0[3] = 3699;
      intArray0[4] = 3699;
      ArrayUtils.shift(intArray0, (-3103));
      assertArrayEquals(new int[] {3699, 3699, 89, 89, 89}, intArray0);
      assertEquals(5, intArray0.length);
      
      boolean[] booleanArray0 = new boolean[0];
      ArrayUtils.shift(booleanArray0, 2146735656);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals(0, booleanArray0.length);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-92);
      byteArray0[1] = (byte) (-52);
      byteArray0[2] = (byte)2;
      byteArray0[3] = (byte)28;
      byteArray0[4] = (byte)2;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)99;
      byteArray0[7] = (byte) (-52);
      int int0 = ArrayUtils.indexOf(byteArray0, (byte) (-64), (int) (byte) (-1));
      assertArrayEquals(new byte[] {(byte) (-92), (byte) (-52), (byte)2, (byte)28, (byte)2, (byte)0, (byte)99, (byte) (-52)}, byteArray0);
      assertEquals(8, byteArray0.length);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0226()  throws Throwable  {
      float[] floatArray0 = new float[3];
      floatArray0[0] = (-1385.0087F);
      boolean boolean0 = ArrayUtils.isNotEmpty(floatArray0);
      assertArrayEquals(new float[] {(-1385.0087F), 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(3, floatArray0.length);
      assertTrue(boolean0);
      
      int[] intArray0 = ArrayUtils.EMPTY_INT_ARRAY;
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertNotNull(intArray0);
      
      int[] intArray1 = ArrayUtils.subarray(intArray0, (-1), 3371);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertSame(intArray0, intArray1);
      assertSame(intArray1, intArray0);
      assertNotNull(intArray1);
      
      Boolean boolean1 = Boolean.TRUE;
      assertTrue(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      assertTrue(boolean1);
      
      Boolean[] booleanArray0 = new Boolean[21];
      booleanArray0[0] = boolean1;
      Boolean boolean2 = Boolean.TRUE;
      assertTrue(boolean2.equals((Object)boolean0));
      assertNotNull(boolean2);
      assertTrue(boolean2);
      
      booleanArray0[1] = boolean2;
      booleanArray0[2] = boolean1;
      booleanArray0[3] = boolean1;
      booleanArray0[4] = boolean1;
      booleanArray0[5] = boolean1;
      booleanArray0[6] = boolean1;
      // Undeclared exception!
      try { 
        ArrayUtils.toPrimitive(booleanArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0227()  throws Throwable  {
      float[] floatArray0 = new float[6];
      floatArray0[0] = 3047.156F;
      floatArray0[1] = 2310.89F;
      floatArray0[2] = 102.0F;
      floatArray0[3] = (-990.567F);
      floatArray0[4] = (-1.0F);
      floatArray0[5] = 42.0F;
      boolean boolean0 = ArrayUtils.isEmpty(floatArray0);
      assertArrayEquals(new float[] {3047.156F, 2310.89F, 102.0F, (-990.567F), (-1.0F), 42.0F}, floatArray0, 0.01F);
      assertEquals(6, floatArray0.length);
      assertFalse(boolean0);
      
      Integer integer0 = Integer.valueOf((-44));
      assertNotNull(integer0);
      assertEquals((-44), (int)integer0);
      
      boolean boolean1 = ArrayUtils.isSameType("7yTZzOt ]", integer0);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test0228()  throws Throwable  {
      Boolean boolean0 = Boolean.FALSE;
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      Byte byte0 = new Byte((byte) (-74));
      assertNotNull(byte0);
      assertEquals((byte) (-74), (byte)byte0);
      
      boolean boolean1 = ArrayUtils.isSameType(boolean0, byte0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test0229()  throws Throwable  {
      Byte byte0 = new Byte((byte)99);
      assertNotNull(byte0);
      assertEquals((byte)99, (byte)byte0);
      
      Byte byte1 = new Byte((byte)89);
      assertFalse(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      assertEquals((byte)89, (byte)byte1);
      
      int[] intArray0 = new int[5];
      intArray0[0] = (int) (byte)89;
      intArray0[1] = (int) (byte)89;
      intArray0[2] = (int) (byte)89;
      intArray0[3] = 3699;
      intArray0[4] = 89;
      ArrayUtils.shift(intArray0, (-3103));
      assertArrayEquals(new int[] {3699, 89, 89, 89, 89}, intArray0);
      assertEquals(5, intArray0.length);
      
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = ArrayUtils.removeElement(booleanArray0, true);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      
      Long long0 = new Long(89);
      assertNotNull(long0);
      assertEquals(89L, (long)long0);
      
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) 89;
      objectArray0[1] = (Object) 89;
      objectArray0[2] = (Object) byte1;
      objectArray0[3] = (Object) 89;
      // Undeclared exception!
      try { 
        ArrayUtils.add(objectArray0, 89, (Object) byte0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 89, Length: 4
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0230()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-39);
      byteArray0[1] = (byte)0;
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      booleanArray0[5] = true;
      booleanArray0[6] = true;
      booleanArray0[7] = true;
      booleanArray0[8] = false;
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, (int) (byte) (-39), (int) (byte)0);
      assertTrue(Arrays.equals(new boolean[] {false, true, false, true, false, true, true, true, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertEquals(9, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) (byte) (-39);
      floatArray0[2] = (float) (byte)0;
      boolean boolean0 = ArrayUtils.isSorted(floatArray0);
      assertArrayEquals(new float[] {(-39.0F), 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(3, floatArray0.length);
      assertTrue(boolean0);
      
      long[] longArray0 = new long[4];
      longArray0[0] = (long) (byte)0;
      longArray0[1] = (-3481L);
      longArray0[2] = (-2682L);
      longArray0[3] = 3013L;
      int int0 = ArrayUtils.indexOf(longArray0, (-3481L));
      assertArrayEquals(new long[] {0L, (-3481L), (-2682L), 3013L}, longArray0);
      assertEquals(4, longArray0.length);
      assertEquals(1, int0);
      
      int[] intArray0 = new int[8];
      intArray0[0] = (int) (byte)0;
      intArray0[1] = (int) (byte)0;
      intArray0[2] = (int) (byte) (-39);
      intArray0[3] = (int) (byte)0;
      intArray0[4] = 1;
      intArray0[5] = (int) (byte)0;
      intArray0[6] = (int) (byte)0;
      intArray0[7] = (int) (byte)0;
      ArrayUtils.shift(intArray0, 4, 1179, (-2830));
      assertArrayEquals(new int[] {0, 0, (-39), 0, 0, 0, 1, 0}, intArray0);
      assertEquals(8, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test0231()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)9;
      byteArray0[1] = (byte) (-44);
      byteArray0[2] = (byte) (-39);
      byteArray0[3] = (byte)2;
      byteArray0[4] = (byte)51;
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) (byte)0;
      floatArray0[1] = (float) (byte)51;
      float[] floatArray1 = ArrayUtils.removeElement(floatArray0, (float) (byte)51);
      assertArrayEquals(new float[] {0.0F, 51.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F}, floatArray1, 0.01F);
      assertEquals(2, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      
      Long long0 = new Long((byte)51);
      assertNotNull(long0);
      assertEquals(51L, (long)long0);
      
      String string0 = ArrayUtils.toString((Object) long0);
      assertNotNull(string0);
      assertEquals("51", string0);
      
      int[] intArray0 = new int[2];
      intArray0[0] = (int) (byte)51;
      intArray0[1] = (int) (byte)0;
      ArrayUtils.swap(intArray0, (-15), 0);
      assertArrayEquals(new int[] {51, 0}, intArray0);
      assertEquals(2, intArray0.length);
      
      float[] floatArray2 = ArrayUtils.removeAllOccurrences(floatArray0, (-1089.5F));
      assertArrayEquals(new float[] {0.0F, 51.0F}, floatArray2, 0.01F);
      assertArrayEquals(new float[] {0.0F, 51.0F}, floatArray0, 0.01F);
      assertEquals(2, floatArray2.length);
      assertEquals(2, floatArray0.length);
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertNotSame(floatArray2, floatArray1);
      assertNotSame(floatArray2, floatArray0);
      assertNotSame(floatArray0, floatArray2);
      assertNotSame(floatArray0, floatArray1);
      assertNotNull(floatArray2);
      
      byte[] byteArray1 = ArrayUtils.removeElement(byteArray0, (byte)7);
      assertArrayEquals(new byte[] {(byte)9, (byte) (-44), (byte) (-39), (byte)2, (byte)51, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)9, (byte) (-44), (byte) (-39), (byte)2, (byte)51, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray1);
      assertEquals(9, byteArray0.length);
      assertEquals(9, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      
      int int0 = ArrayUtils.indexOf(floatArray0, (float) (byte)0);
      assertArrayEquals(new float[] {0.0F, 51.0F}, floatArray0, 0.01F);
      assertEquals(2, floatArray0.length);
      assertFalse(floatArray0.equals((Object)floatArray2));
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertNotSame(floatArray0, floatArray2);
      assertNotSame(floatArray0, floatArray1);
      assertEquals(0, int0);
      
      boolean boolean0 = ArrayUtils.isSorted(intArray0);
      assertArrayEquals(new int[] {51, 0}, intArray0);
      assertEquals(2, intArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0232()  throws Throwable  {
      int int0 = (-1);
      int[] intArray0 = new int[5];
      intArray0[0] = (-1);
      intArray0[1] = (-1);
      intArray0[2] = (-1);
      intArray0[3] = 1128;
      intArray0[1] = (-1);
      ArrayUtils.shuffle(intArray0);
      assertArrayEquals(new int[] {(-1), (-1), 1128, 0, (-1)}, intArray0);
      assertEquals(5, intArray0.length);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 963.2049;
      doubleArray0[1] = (double) (-1);
      doubleArray0[2] = (double) (-1);
      doubleArray0[3] = (double) (-1);
      ArrayUtils.swap(doubleArray0, 0, 0, (-1));
      assertArrayEquals(new double[] {963.2049, (-1.0), (-1.0), (-1.0)}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      
      Integer[] integerArray0 = new Integer[3];
      integerArray0[0] = (Integer) 0;
      integerArray0[1] = (Integer) (-1);
      integerArray0[2] = (Integer) (-1);
      int[] intArray1 = ArrayUtils.toPrimitive(integerArray0, int0);
      assertArrayEquals(new int[] {0, (-1), (-1)}, intArray1);
      assertEquals(3, intArray1.length);
      assertEquals(3, integerArray0.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      
      boolean boolean0 = ArrayUtils.contains(intArray0, 1128);
      assertArrayEquals(new int[] {(-1), (-1), 1128, 0, (-1)}, intArray0);
      assertEquals(5, intArray0.length);
      assertFalse(intArray0.equals((Object)intArray1));
      assertNotSame(intArray0, intArray1);
      assertTrue(boolean0);
      
      long[] longArray0 = ArrayUtils.removeElement((long[]) null, (long) (-1));
      assertNull(longArray0);
  }

  @Test(timeout = 4000)
  public void test0233()  throws Throwable  {
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short) (-13);
      shortArray0[1] = (short)43;
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      BitSet bitSet0 = ArrayUtils.indexesOf(booleanArray0, true);
      assertFalse(bitSet0.isEmpty());
      assertEquals(2, bitSet0.cardinality());
      assertEquals("{0, 1}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(2, bitSet0.length());
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray0));
      assertEquals(2, booleanArray0.length);
      assertNotNull(bitSet0);
      
      Long long0 = new Long((-3482L));
      assertNotNull(long0);
      assertEquals((-3482L), (long)long0);
      
      Long long1 = new Long((short)43);
      assertFalse(long1.equals((Object)long0));
      assertNotNull(long1);
      assertEquals(43L, (long)long1);
      
      Long long2 = new Long(0L);
      assertFalse(long2.equals((Object)long1));
      assertFalse(long2.equals((Object)long0));
      assertNotNull(long2);
      assertEquals(0L, (long)long2);
      
      int[] intArray0 = new int[3];
      intArray0[0] = (int) (short) (-13);
      intArray0[1] = (-2798);
      intArray0[2] = (-2798);
      ArrayUtils.shift(intArray0, 3699);
      assertArrayEquals(new int[] {(-13), (-2798), (-2798)}, intArray0);
      assertEquals(3, intArray0.length);
      
      ArrayUtils.shift(booleanArray0, 901);
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray0));
      assertEquals(2, booleanArray0.length);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-52);
      byteArray0[1] = (byte)28;
      byteArray0[2] = (byte)2;
      byteArray0[3] = (byte) (-64);
      int int0 = ArrayUtils.indexOf(byteArray0, (byte) (-1), (-1558));
      assertArrayEquals(new byte[] {(byte) (-52), (byte)28, (byte)2, (byte) (-64)}, byteArray0);
      assertEquals(4, byteArray0.length);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0234()  throws Throwable  {
      Byte byte0 = new Byte((byte)99);
      assertNotNull(byte0);
      assertEquals((byte)99, (byte)byte0);
      
      Byte byte1 = new Byte((byte)89);
      assertFalse(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      assertEquals((byte)89, (byte)byte1);
      
      Byte byte2 = new Byte((byte)99);
      assertTrue(byte2.equals((Object)byte0));
      assertFalse(byte2.equals((Object)byte1));
      assertNotNull(byte2);
      assertEquals((byte)99, (byte)byte2);
      
      Byte byte3 = new Byte((byte) (-18));
      assertFalse(byte3.equals((Object)byte0));
      assertFalse(byte3.equals((Object)byte2));
      assertFalse(byte3.equals((Object)byte1));
      assertNotNull(byte3);
      assertEquals((byte) (-18), (byte)byte3);
      
      Byte byte4 = new Byte((byte)89);
      assertFalse(byte4.equals((Object)byte0));
      assertFalse(byte4.equals((Object)byte2));
      assertTrue(byte4.equals((Object)byte1));
      assertFalse(byte4.equals((Object)byte3));
      assertNotNull(byte4);
      assertEquals((byte)89, (byte)byte4);
      
      Byte byte5 = new Byte((byte)89);
      assertFalse(byte5.equals((Object)byte3));
      assertTrue(byte5.equals((Object)byte1));
      assertFalse(byte5.equals((Object)byte0));
      assertFalse(byte5.equals((Object)byte2));
      assertTrue(byte5.equals((Object)byte4));
      assertNotNull(byte5);
      assertEquals((byte)89, (byte)byte5);
      
      Byte byte6 = new Byte((byte)99);
      assertFalse(byte6.equals((Object)byte1));
      assertTrue(byte6.equals((Object)byte0));
      assertTrue(byte6.equals((Object)byte2));
      assertFalse(byte6.equals((Object)byte3));
      assertFalse(byte6.equals((Object)byte4));
      assertFalse(byte6.equals((Object)byte5));
      assertNotNull(byte6);
      assertEquals((byte)99, (byte)byte6);
      
      Byte byte7 = new Byte((byte)43);
      assertFalse(byte7.equals((Object)byte2));
      assertFalse(byte7.equals((Object)byte4));
      assertFalse(byte7.equals((Object)byte0));
      assertFalse(byte7.equals((Object)byte3));
      assertFalse(byte7.equals((Object)byte5));
      assertFalse(byte7.equals((Object)byte1));
      assertFalse(byte7.equals((Object)byte6));
      assertNotNull(byte7);
      assertEquals((byte)43, (byte)byte7);
      
      byte[] byteArray0 = ArrayUtils.toPrimitive((Byte[]) null, (byte)0);
      assertNull(byteArray0);
      
      int[] intArray0 = new int[9];
      intArray0[0] = (int) (byte)43;
      intArray0[1] = (int) (byte)99;
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (-15);
      shortArray0[1] = (short) (-15);
      int int0 = ArrayUtils.indexOf(shortArray0, (short) (byte)89, Integer.MAX_VALUE);
      assertArrayEquals(new short[] {(short) (-15), (short) (-15)}, shortArray0);
      assertEquals(2, shortArray0.length);
      assertEquals((-1), int0);
      
      ArrayUtils.reverse((byte[]) null);
      Character character0 = Character.valueOf('R');
      assertNotNull(character0);
      assertEquals('R', (char)character0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.isSameLength((Object) character0, (Object) character0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test0235()  throws Throwable  {
      short[] shortArray0 = new short[2];
      short short0 = (short)264;
      shortArray0[0] = (short)264;
      short short1 = (short) (-1);
      shortArray0[1] = (short) (-1);
      boolean boolean0 = ArrayUtils.isSameLength(shortArray0, shortArray0);
      assertArrayEquals(new short[] {(short)264, (short) (-1)}, shortArray0);
      assertEquals(2, shortArray0.length);
      assertTrue(boolean0);
      
      byte[] byteArray0 = null;
      byte byte0 = (byte) (-29);
      BitSet bitSet0 = ArrayUtils.indexesOf((byte[]) null, (byte) (-29));
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertNotNull(bitSet0);
      
      bitSet0.flip(1847);
      assertEquals(1848, bitSet0.length());
      assertEquals(1, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertEquals(1856, bitSet0.size());
      assertEquals("{1847}", bitSet0.toString());
      
      ArrayUtils.swap((byte[]) null, (int) (short)264, (int) (short) (-1));
      float[] floatArray0 = new float[8];
      // Undeclared exception!
      try { 
        BitSet.valueOf((ByteBuffer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.BitSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test0236()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      Character character0 = new Character('Y');
      assertNotNull(character0);
      assertEquals('Y', (char)character0);
      
      Comparator<AbstractMap.SimpleImmutableEntry<Double, Double>> comparator0 = (Comparator<AbstractMap.SimpleImmutableEntry<Double, Double>>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = ArrayUtils.isSorted((AbstractMap.SimpleImmutableEntry<Double, Double>[]) null, comparator0);
      assertTrue(boolean0);
      
      char[] charArray0 = new char[5];
      charArray0[0] = 'Y';
      charArray0[1] = 'Y';
      charArray0[2] = 'Y';
      charArray0[3] = 'Y';
      charArray0[4] = 'Y';
      BitSet bitSet0 = ArrayUtils.indexesOf(charArray0, 'Y', (-4274));
      assertEquals(5, bitSet0.cardinality());
      assertEquals("{0, 1, 2, 3, 4}", bitSet0.toString());
      assertFalse(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(5, bitSet0.length());
      assertArrayEquals(new char[] {'Y', 'Y', 'Y', 'Y', 'Y'}, charArray0);
      assertEquals(5, charArray0.length);
      assertNotNull(bitSet0);
      
      int[] intArray0 = new int[1];
      int[] intArray1 = ArrayUtils.nullToEmpty(intArray0);
      assertArrayEquals(new int[] {0}, intArray0);
      assertArrayEquals(new int[] {0}, intArray1);
      assertEquals(1, intArray0.length);
      assertEquals(1, intArray1.length);
      assertSame(intArray0, intArray1);
      assertSame(intArray1, intArray0);
      assertNotNull(intArray1);
  }

  @Test(timeout = 4000)
  public void test0237()  throws Throwable  {
      Byte[] byteArray0 = new Byte[2];
      byte byte0 = (byte)51;
      Byte byte1 = new Byte((byte)51);
      assertTrue(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      assertEquals((byte)51, (byte)byte1);
      
      byteArray0[0] = byte1;
      Byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0);
      assertEquals(2, byteArray0.length);
      assertEquals(2, byteArray1.length);
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      
      ArrayUtils.shift((Object[]) byteArray0, 0, (int) (byte)51, (-1916));
      assertEquals(2, byteArray0.length);
      assertSame(byteArray0, byteArray1);
      
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short) (byte)51;
      shortArray0[1] = (short) byte0;
      shortArray0[2] = (short) byte0;
      short[] shortArray1 = ArrayUtils.removeElements(shortArray0, shortArray0);
      assertArrayEquals(new short[] {(short)51, (short)51, (short)51}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertEquals(3, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      
      short[] shortArray2 = new short[3];
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertFalse(shortArray2.equals((Object)shortArray1));
      
      shortArray2[0] = (short) (byte)51;
      shortArray2[1] = (short) byte0;
      shortArray2[2] = (short) (byte)51;
      int int0 = ArrayUtils.indexOf(shortArray2, (short) (-15), (-3907));
      assertArrayEquals(new short[] {(short)51, (short)51, (short)51}, shortArray2);
      assertEquals(3, shortArray2.length);
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertFalse(shortArray2.equals((Object)shortArray1));
      assertNotSame(shortArray2, shortArray0);
      assertNotSame(shortArray2, shortArray1);
      assertEquals((-1), int0);
      
      byte[] byteArray2 = new byte[1];
      byteArray2[0] = byte0;
      ArrayUtils.reverse(byteArray2);
      assertArrayEquals(new byte[] {(byte)51}, byteArray2);
      assertEquals(1, byteArray2.length);
  }

  @Test(timeout = 4000)
  public void test0238()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      Byte byte0 = new Byte((byte) (-124));
      assertNotNull(byte0);
      assertEquals((byte) (-124), (byte)byte0);
      
      Byte byte1 = new Byte((byte)75);
      assertFalse(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      assertEquals((byte)75, (byte)byte1);
      
      Byte byte2 = new Byte((byte)75);
      assertFalse(byte2.equals((Object)byte0));
      assertTrue(byte2.equals((Object)byte1));
      assertNotNull(byte2);
      assertEquals((byte)75, (byte)byte2);
      
      Byte byte3 = new Byte((byte)75);
      assertTrue(byte3.equals((Object)byte2));
      assertFalse(byte3.equals((Object)byte0));
      assertTrue(byte3.equals((Object)byte1));
      assertNotNull(byte3);
      assertEquals((byte)75, (byte)byte3);
      
      Byte byte4 = new Byte((byte) (-124));
      assertTrue(byte4.equals((Object)byte0));
      assertFalse(byte4.equals((Object)byte1));
      assertFalse(byte4.equals((Object)byte3));
      assertFalse(byte4.equals((Object)byte2));
      assertNotNull(byte4);
      assertEquals((byte) (-124), (byte)byte4);
      
      Byte[] byteArray0 = new Byte[0];
      byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0, (byte) (-69));
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotNull(byteArray1);
      
      Float[] floatArray0 = new Float[1];
      Float float0 = new Float((-477.60562F));
      assertNotNull(float0);
      assertEquals((-477.60562F), (float)float0, 0.01F);
      
      floatArray0[0] = float0;
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0, (float) (byte)75);
      assertArrayEquals(new float[] {(-477.60562F)}, floatArray1, 0.01F);
      assertEquals(1, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertNotNull(floatArray1);
  }

  @Test(timeout = 4000)
  public void test0239()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      Byte byte0 = new Byte((byte) (-124));
      assertNotNull(byte0);
      assertEquals((byte) (-124), (byte)byte0);
      
      Byte byte1 = new Byte((byte)75);
      assertFalse(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      assertEquals((byte)75, (byte)byte1);
      
      Byte byte2 = new Byte((byte) (-62));
      assertFalse(byte2.equals((Object)byte1));
      assertFalse(byte2.equals((Object)byte0));
      assertNotNull(byte2);
      assertEquals((byte) (-62), (byte)byte2);
      
      Byte byte3 = new Byte((byte)75);
      assertTrue(byte3.equals((Object)byte1));
      assertFalse(byte3.equals((Object)byte2));
      assertFalse(byte3.equals((Object)byte0));
      assertNotNull(byte3);
      assertEquals((byte)75, (byte)byte3);
      
      Byte byte4 = new Byte((byte) (-124));
      assertFalse(byte4.equals((Object)byte1));
      assertTrue(byte4.equals((Object)byte0));
      assertFalse(byte4.equals((Object)byte3));
      assertFalse(byte4.equals((Object)byte2));
      assertNotNull(byte4);
      assertEquals((byte) (-124), (byte)byte4);
      
      Byte[] byteArray0 = new Byte[0];
      byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0, (byte) (-69));
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotNull(byteArray1);
      
      Float[] floatArray0 = new Float[1];
      Float float0 = new Float((-477.60562F));
      assertNotNull(float0);
      assertEquals((-477.60562F), (float)float0, 0.01F);
      
      floatArray0[0] = float0;
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0, (float) (byte) (-62));
      assertArrayEquals(new float[] {(-477.60562F)}, floatArray1, 0.01F);
      assertEquals(1, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertNotNull(floatArray1);
  }

  @Test(timeout = 4000)
  public void test0240()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      boolean boolean0 = ArrayUtils.isEmpty(doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertTrue(boolean0);
      
      long[] longArray0 = ArrayUtils.subarray((long[]) null, 369, 369);
      assertNull(longArray0);
  }

  @Test(timeout = 4000)
  public void test0241()  throws Throwable  {
      float[] floatArray0 = new float[2];
      floatArray0[0] = (-1733.7683F);
      long[] longArray0 = new long[3];
      longArray0[1] = (long) 6;
      longArray0[2] = 1L;
      ArrayUtils.shift(longArray0, 6, 6, 6);
      assertArrayEquals(new long[] {0L, 6L, 1L}, longArray0);
      assertEquals(3, longArray0.length);
      
      long[] longArray1 = ArrayUtils.subarray(longArray0, 6, 6);
      assertArrayEquals(new long[] {0L, 6L, 1L}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertEquals(3, longArray0.length);
      assertEquals(0, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
      
      int int0 = ArrayUtils.indexOf(floatArray0, (-1733.7683F), 6);
      assertArrayEquals(new float[] {(-1733.7683F), 0.0F}, floatArray0, 0.01F);
      assertEquals(2, floatArray0.length);
      assertEquals((-1), int0);
      
      MutableInt mutableInt0 = new MutableInt(1L);
      assertEquals(1L, mutableInt0.longValue());
      assertEquals("1", mutableInt0.toString());
      assertEquals(1, (int)mutableInt0.toInteger());
      assertEquals((byte)1, mutableInt0.byteValue());
      assertEquals(1.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(1, (int)mutableInt0.getValue());
      assertEquals((short)1, mutableInt0.shortValue());
      assertEquals(1, mutableInt0.intValue());
      assertEquals(1.0, mutableInt0.doubleValue(), 0.01);
      assertNotNull(mutableInt0);
      
      boolean boolean0 = ArrayUtils.isEquals(mutableInt0, mutableInt0);
      assertEquals(1L, mutableInt0.longValue());
      assertEquals("1", mutableInt0.toString());
      assertEquals(1, (int)mutableInt0.toInteger());
      assertEquals((byte)1, mutableInt0.byteValue());
      assertEquals(1.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(1, (int)mutableInt0.getValue());
      assertEquals((short)1, mutableInt0.shortValue());
      assertEquals(1, mutableInt0.intValue());
      assertEquals(1.0, mutableInt0.doubleValue(), 0.01);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0242()  throws Throwable  {
      long[] longArray0 = new long[3];
      longArray0[0] = (-2084L);
      longArray0[1] = 0L;
      longArray0[2] = 0L;
      boolean boolean0 = ArrayUtils.isSorted(longArray0);
      assertArrayEquals(new long[] {(-2084L), 0L, 0L}, longArray0);
      assertEquals(3, longArray0.length);
      assertTrue(boolean0);
      
      ArrayUtils.reverse(longArray0);
      assertArrayEquals(new long[] {0L, 0L, (-2084L)}, longArray0);
      assertEquals(3, longArray0.length);
      
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short)759;
      shortArray0[1] = (short)52;
      shortArray0[2] = (short)993;
      shortArray0[3] = (short)2358;
      Object[] objectArray0 = ArrayUtils.nullToEmpty((Object[]) null);
      assertEquals(0, objectArray0.length);
      assertNotNull(objectArray0);
      
      long[] longArray1 = ArrayUtils.subarray(longArray0, (int) (short)993, 12);
      assertArrayEquals(new long[] {0L, 0L, (-2084L)}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertEquals(3, longArray0.length);
      assertEquals(0, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
  }

  @Test(timeout = 4000)
  public void test0243()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[3];
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)0;
      short[] shortArray1 = ArrayUtils.nullToEmpty(shortArray0);
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)0}, shortArray1);
      assertEquals(1, shortArray0.length);
      assertEquals(1, shortArray1.length);
      assertSame(shortArray0, shortArray1);
      assertSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      
      ArrayUtils.swap((char[]) null, 328, (int) (short)0, (int) (short)0);
      Integer integer0 = new Integer(454);
      assertNotNull(integer0);
      assertEquals(454, (int)integer0);
      
      char[] charArray0 = ArrayUtils.nullToEmpty((char[]) null);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      assertNotNull(charArray0);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 328;
      doubleArray0[1] = (double) 454;
      doubleArray0[2] = (double) 'R';
      doubleArray0[3] = (double) 'R';
      boolean boolean0 = ArrayUtils.contains(doubleArray0, 31.0);
      assertArrayEquals(new double[] {328.0, 454.0, 82.0, 82.0}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.insert(454, booleanArray0, booleanArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 454, Length: 3
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0244()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) 2869;
      floatArray0[1] = (float) (-1909L);
      floatArray0[2] = (float) 2869;
      floatArray0[3] = (float) (-1909L);
      floatArray0[4] = (float) (-1909L);
      floatArray0[5] = (float) 2869;
      floatArray0[6] = (float) (-1909L);
      floatArray0[7] = (float) 2869;
      float[] floatArray1 = ArrayUtils.subarray(floatArray0, (-3959), (-3959));
      assertArrayEquals(new float[] {2869.0F, (-1909.0F), 2869.0F, (-1909.0F), (-1909.0F), 2869.0F, (-1909.0F), 2869.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertEquals(8, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      
      boolean boolean0 = ArrayUtils.isNotEmpty(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertEquals(1, booleanArray0.length);
      assertTrue(boolean0);
      
      org.evosuite.runtime.Random.setNextRandom(13);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) (-3959);
      doubleArray0[1] = (double) (-1909L);
      doubleArray0[2] = (double) 2869.0F;
      doubleArray0[3] = (double) (-1909.0F);
      doubleArray0[4] = (double) (-1909.0F);
      doubleArray0[5] = (double) 2869;
      doubleArray0[6] = (double) (-1909.0F);
      doubleArray0[7] = (double) (-1909.0F);
      doubleArray0[8] = (double) 2869.0F;
      boolean boolean1 = ArrayUtils.contains(doubleArray0, 1.0);
      assertArrayEquals(new double[] {(-3959.0), (-1909.0), 2869.0, (-1909.0), (-1909.0), 2869.0, (-1909.0), (-1909.0), 2869.0}, doubleArray0, 0.01);
      assertEquals(9, doubleArray0.length);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test0245()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      MockRandom mockRandom0 = new MockRandom((-1916L));
      assertNotNull(mockRandom0);
      
      long long0 = mockRandom0.nextLong();
      assertEquals(0L, long0);
      
      Integer integer0 = new Integer((-296));
      assertNotNull(integer0);
      assertEquals((-296), (int)integer0);
      
      Object[] objectArray0 = new Object[0];
      Boolean boolean0 = Boolean.valueOf(false);
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      Object object0 = ArrayUtils.get(objectArray0, 0, (Object) boolean0);
      assertEquals(0, objectArray0.length);
      assertNotNull(object0);
      assertEquals(false, object0);
      
      Object object1 = new Object();
      assertNotNull(object1);
      
      int int0 = ArrayUtils.lastIndexOf(objectArray0, (Object) mockRandom0, (-2946));
      assertEquals(0, objectArray0.length);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0246()  throws Throwable  {
      Character character0 = new Character('Q');
      assertNotNull(character0);
      assertEquals('Q', (char)character0);
      
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) 'Q';
      long[] longArray0 = new long[5];
      longArray0[0] = 1L;
      longArray0[1] = (long) 'Q';
      longArray0[2] = (long) 'Q';
      longArray0[3] = 1L;
      longArray0[4] = (long) 'Q';
      ArrayUtils.shift(longArray0, 5, (-2237), 5);
      assertArrayEquals(new long[] {1L, 81L, 81L, 1L, 81L}, longArray0);
      assertEquals(5, longArray0.length);
      
      ArrayUtils.shift((char[]) null, 0, 0, 5);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-77);
      byteArray0[2] = (byte)0;
      Byte[] byteArray1 = ArrayUtils.toObject(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-77), (byte)0}, byteArray0);
      assertEquals(3, byteArray0.length);
      assertEquals(3, byteArray1.length);
      assertNotNull(byteArray1);
  }

  @Test(timeout = 4000)
  public void test0247()  throws Throwable  {
      Long long0 = new Long(495L);
      assertNotNull(long0);
      assertEquals(495L, (long)long0);
      
      Long long1 = new Long((-1223L));
      assertFalse(long1.equals((Object)long0));
      assertNotNull(long1);
      assertEquals((-1223L), (long)long1);
      
      Long long2 = new Long(1952L);
      assertFalse(long2.equals((Object)long1));
      assertFalse(long2.equals((Object)long0));
      assertNotNull(long2);
      assertEquals(1952L, (long)long2);
      
      boolean[] booleanArray0 = ArrayUtils.EMPTY_BOOLEAN_ARRAY;
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals(0, booleanArray0.length);
      assertNotNull(booleanArray0);
      
      int[] intArray0 = new int[8];
      intArray0[4] = 54;
      Short[] shortArray0 = new Short[3];
      short short0 = (short)6;
      Short short1 = new Short((short)6);
      assertTrue(short1.equals((Object)short0));
      assertNotNull(short1);
      assertEquals((short)6, (short)short1);
      
      shortArray0[0] = short1;
      short short2 = (short) (-40);
      Short short3 = new Short((short) (-40));
      assertFalse(short3.equals((Object)short0));
      assertTrue(short3.equals((Object)short2));
      assertFalse(short3.equals((Object)short1));
      assertNotNull(short3);
      assertEquals((short) (-40), (short)short3);
      
      shortArray0[1] = short3;
      Short short4 = Short.valueOf((short) (-739));
      assertFalse(short4.equals((Object)short3));
      assertFalse(short4.equals((Object)short1));
      assertFalse(short4.equals((Object)short0));
      assertFalse(short4.equals((Object)short2));
      assertNotNull(short4);
      assertEquals((short) (-739), (short)short4);
      
      shortArray0[2] = short4;
      boolean boolean0 = ArrayUtils.isArrayIndexValid(shortArray0, (-115));
      assertEquals(3, shortArray0.length);
      assertFalse(boolean0);
      
      Object[] objectArray0 = ArrayUtils.EMPTY_OBJECT_ARRAY;
      assertEquals(0, objectArray0.length);
      assertNotNull(objectArray0);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) short2;
      doubleArray0[1] = (-1369.0395983980384);
      doubleArray0[2] = (double) 495L;
      doubleArray0[3] = (double) (-115);
      doubleArray0[4] = (double) (short)short3;
      doubleArray0[5] = (double) (-1223L);
      int int0 = ArrayUtils.indexOf(doubleArray0, (double) short0, (int) (short) (-739));
      assertArrayEquals(new double[] {(-40.0), (-1369.0395983980384), 495.0, (-115.0), (-40.0), (-1223.0)}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      assertFalse(short0 == short2);
      assertEquals((-1), int0);
      
      double[] doubleArray1 = ArrayUtils.add(doubleArray0, (int) (short)6, (-40.0));
      assertArrayEquals(new double[] {(-40.0), (-1369.0395983980384), 495.0, (-115.0), (-40.0), (-1223.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-40.0), (-1369.0395983980384), 495.0, (-115.0), (-40.0), (-1223.0), (-40.0)}, doubleArray1, 0.01);
      assertEquals(6, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      
      char[] charArray0 = new char[0];
      ArrayUtils.shift(charArray0, 2654, (int) (short) (-40), (int) short0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      assertFalse(short0 == short2);
  }

  @Test(timeout = 4000)
  public void test0248()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      double[] doubleArray1 = ArrayUtils.clone(doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      booleanArray0[6] = false;
      Byte byte0 = new Byte((byte)32);
      assertNotNull(byte0);
      assertEquals((byte)32, (byte)byte0);
      
      Byte byte1 = new Byte((byte)32);
      assertTrue(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      assertEquals((byte)32, (byte)byte1);
      
      Byte byte2 = new Byte((byte)32);
      assertTrue(byte2.equals((Object)byte1));
      assertTrue(byte2.equals((Object)byte0));
      assertNotNull(byte2);
      assertEquals((byte)32, (byte)byte2);
      
      Byte byte3 = new Byte((byte) (-1));
      assertFalse(byte3.equals((Object)byte0));
      assertFalse(byte3.equals((Object)byte2));
      assertFalse(byte3.equals((Object)byte1));
      assertNotNull(byte3);
      assertEquals((byte) (-1), (byte)byte3);
      
      Byte byte4 = new Byte((byte) (-1));
      assertTrue(byte4.equals((Object)byte3));
      assertFalse(byte4.equals((Object)byte1));
      assertFalse(byte4.equals((Object)byte0));
      assertFalse(byte4.equals((Object)byte2));
      assertNotNull(byte4);
      assertEquals((byte) (-1), (byte)byte4);
      
      byte[] byteArray0 = ArrayUtils.toPrimitive((Byte[]) null, (byte) (-1));
      assertNull(byteArray0);
      
      boolean boolean0 = ArrayUtils.isEmpty((int[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0249()  throws Throwable  {
      Byte byte0 = new Byte((byte)99);
      assertNotNull(byte0);
      assertEquals((byte)99, (byte)byte0);
      
      Byte byte1 = new Byte((byte)89);
      assertFalse(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      assertEquals((byte)89, (byte)byte1);
      
      Byte byte2 = new Byte((byte)99);
      assertFalse(byte2.equals((Object)byte1));
      assertTrue(byte2.equals((Object)byte0));
      assertNotNull(byte2);
      assertEquals((byte)99, (byte)byte2);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      int int0 = ArrayUtils.indexOf(booleanArray0, true, 91);
      assertTrue(Arrays.equals(new boolean[] {false, true}, booleanArray0));
      assertEquals(2, booleanArray0.length);
      assertEquals((-1), int0);
      
      Short short0 = new Short((short)48);
      assertNotNull(short0);
      assertEquals((short)48, (short)short0);
      
      Short short1 = new Short((short)108);
      assertFalse(short1.equals((Object)short0));
      assertNotNull(short1);
      assertEquals((short)108, (short)short1);
      
      double[] doubleArray0 = new double[0];
      ArrayUtils.shift(doubleArray0, 322, 91, (int) (short)48);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      double[] doubleArray1 = ArrayUtils.addAll(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "";
      stringArray0[1] = "";
      String[] stringArray1 = ArrayUtils.subarray(stringArray0, (-1), 91);
      assertEquals(2, stringArray0.length);
      assertEquals(2, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertNotNull(stringArray1);
  }

  @Test(timeout = 4000)
  public void test0250()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = ';';
      charArray0[1] = 'W';
      charArray0[2] = ';';
      int int0 = ArrayUtils.indexOf(charArray0, '*', (-14));
      assertArrayEquals(new char[] {';', 'W', ';', '\u0000'}, charArray0);
      assertEquals(4, charArray0.length);
      assertEquals((-1), int0);
      
      long[] longArray0 = new long[5];
      longArray0[0] = (long) ';';
      longArray0[1] = (long) 'W';
      longArray0[2] = (long) ';';
      longArray0[3] = (long) (-1);
      longArray0[4] = (long) '*';
      int int1 = ArrayUtils.lastIndexOf(longArray0, (-3481L));
      assertArrayEquals(new long[] {59L, 87L, 59L, (-1L), 42L}, longArray0);
      assertEquals(5, longArray0.length);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (-1L);
      doubleArray0[1] = (double) 'W';
      doubleArray0[2] = (double) 59L;
      doubleArray0[3] = (double) (-1);
      doubleArray0[4] = (double) 42L;
      double[] doubleArray1 = ArrayUtils.addAll(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {(-1.0), 87.0, 59.0, (-1.0), 42.0, (-1.0), 87.0, 59.0, (-1.0), 42.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {(-1.0), 87.0, 59.0, (-1.0), 42.0}, doubleArray0, 0.01);
      assertEquals(10, doubleArray1.length);
      assertEquals(5, doubleArray0.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotNull(doubleArray1);
      
      char[] charArray1 = ArrayUtils.removeAllOccurences(charArray0, 'W');
      assertArrayEquals(new char[] {';', 'W', ';', '\u0000'}, charArray0);
      assertArrayEquals(new char[] {';', ';', '\u0000'}, charArray1);
      assertEquals(4, charArray0.length);
      assertEquals(3, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
  }

  @Test(timeout = 4000)
  public void test0251()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 914.944001638755;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (-1202.7635315971), 0.0);
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertArrayEquals(new double[] {0.0, 914.944001638755, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      assertNotNull(bitSet0);
      
      long[] longArray0 = new long[0];
      int int0 = ArrayUtils.indexOf(longArray0, 6L, 100);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0252()  throws Throwable  {
      Byte[] byteArray0 = new Byte[2];
      Byte byte0 = new Byte((byte)51);
      assertNotNull(byte0);
      assertEquals((byte)51, (byte)byte0);
      
      byteArray0[0] = byte0;
      Byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0);
      assertEquals(2, byteArray0.length);
      assertEquals(2, byteArray1.length);
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) 637;
      ArrayUtils.shift(longArray0, (-375), (-667), 0);
      assertArrayEquals(new long[] {637L}, longArray0);
      assertEquals(1, longArray0.length);
      
      boolean[] booleanArray0 = ArrayUtils.toPrimitive((Boolean[]) null, true);
      assertNull(booleanArray0);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 637L;
      // Undeclared exception!
      try { 
        ArrayUtils.remove(doubleArray0, (int) (byte)51);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 51, Length: 4
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0253()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 914.944001638755;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (-1202.7635315971), 0.0);
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertArrayEquals(new double[] {0.0, 914.944001638755, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      assertNotNull(bitSet0);
      
      Float[] floatArray0 = new Float[2];
      Float float0 = new Float(0.0F);
      assertNotNull(float0);
      assertEquals(0.0F, (float)float0, 0.01F);
      
      floatArray0[0] = float0;
      float[] floatArray1 = new float[1];
      floatArray1[0] = (-1789.9796F);
      float[] floatArray2 = ArrayUtils.nullToEmpty(floatArray1);
      assertArrayEquals(new float[] {(-1789.9796F)}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {(-1789.9796F)}, floatArray2, 0.01F);
      assertEquals(1, floatArray1.length);
      assertEquals(1, floatArray2.length);
      assertSame(floatArray1, floatArray2);
      assertSame(floatArray2, floatArray1);
      assertNotNull(floatArray2);
      
      int[] intArray0 = new int[3];
      intArray0[0] = 288;
      intArray0[1] = 288;
      intArray0[2] = 288;
      int[] intArray1 = ArrayUtils.removeAllOccurrences(intArray0, 288);
      assertArrayEquals(new int[] {}, intArray1);
      assertArrayEquals(new int[] {288, 288, 288}, intArray0);
      assertEquals(0, intArray1.length);
      assertEquals(3, intArray0.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
      assertNotNull(intArray1);
      
      Boolean boolean0 = Boolean.FALSE;
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      boolean[] booleanArray0 = ArrayUtils.toPrimitive((Boolean[]) null, true);
      assertNull(booleanArray0);
      
      ArrayUtils.shift(doubleArray0, 288);
      assertArrayEquals(new double[] {0.0, 914.944001638755, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test0254()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      int int0 = ArrayUtils.indexOf(booleanArray0, true, (-170));
      assertTrue(Arrays.equals(new boolean[] {false, true, false, false, false, false}, booleanArray0));
      assertEquals(6, booleanArray0.length);
      assertEquals(1, int0);
      
      Short short0 = new Short((short)7);
      assertNotNull(short0);
      assertEquals((short)7, (short)short0);
      
      Short short1 = new Short((short)43);
      assertFalse(short1.equals((Object)short0));
      assertNotNull(short1);
      assertEquals((short)43, (short)short1);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) (short)7;
      doubleArray0[1] = (double) (short)7;
      doubleArray0[2] = (double) (short)43;
      doubleArray0[3] = (double) 1;
      doubleArray0[4] = (double) 1;
      doubleArray0[5] = (double) (short)43;
      doubleArray0[6] = (double) (-1840);
      doubleArray0[7] = (double) 1;
      doubleArray0[8] = 0.0;
      ArrayUtils.shift(doubleArray0, 59, 506, (-2642));
      assertArrayEquals(new double[] {7.0, 7.0, 43.0, 1.0, 1.0, 43.0, (-1840.0), 1.0, 0.0}, doubleArray0, 0.01);
      assertEquals(9, doubleArray0.length);
      
      ArrayUtils.shift((Object[]) null, 1);
      int[] intArray0 = new int[2];
      intArray0[0] = (-1840);
      intArray0[1] = (int) (short)43;
      ArrayUtils.reverse(intArray0);
      assertArrayEquals(new int[] {43, (-1840)}, intArray0);
      assertEquals(2, intArray0.length);
      
      Float[] floatArray0 = new Float[9];
      Float float0 = new Float(0.0F);
      assertNotNull(float0);
      assertEquals(0.0F, (float)float0, 0.01F);
      
      floatArray0[0] = float0;
      Float float1 = new Float((-1.0F));
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertNotNull(float1);
      assertEquals((-1.0F), (float)float1, 0.01F);
      
      floatArray0[1] = float1;
      Float float2 = new Float(1.0F);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertNotNull(float2);
      assertEquals(1.0F, (float)float2, 0.01F);
      
      floatArray0[2] = float2;
      Float float3 = new Float(0.0F);
      assertNotEquals((float)float3, (float)float2, 0.01F);
      assertNotEquals((float)float3, (float)float1, 0.01F);
      assertEquals((float)float3, (float)float0, 0.01F);
      assertNotNull(float3);
      assertEquals(0.0F, (float)float3, 0.01F);
      
      floatArray0[3] = float3;
      Float float4 = new Float((-39.0));
      assertNotEquals((float)float4, (float)float2, 0.01F);
      assertNotEquals((float)float4, (float)float0, 0.01F);
      assertNotEquals((float)float4, (float)float1, 0.01F);
      assertNotEquals((float)float4, (float)float3, 0.01F);
      assertNotNull(float4);
      assertEquals((-39.0F), (float)float4, 0.01F);
      
      floatArray0[4] = float4;
      Float float5 = new Float((float) (-1840));
      assertNotEquals((float)float5, (float)float3, 0.01F);
      assertNotEquals((float)float5, (float)float2, 0.01F);
      assertNotEquals((float)float5, (float)float0, 0.01F);
      assertNotEquals((float)float5, (float)float4, 0.01F);
      assertNotEquals((float)float5, (float)float1, 0.01F);
      assertNotNull(float5);
      assertEquals((-1840.0F), (float)float5, 0.01F);
      
      floatArray0[5] = float5;
      Float float6 = new Float(1.0F);
      assertNotEquals((float)float6, (float)float4, 0.01F);
      assertNotEquals((float)float6, (float)float3, 0.01F);
      assertEquals((float)float6, (float)float2, 0.01F);
      assertNotEquals((float)float6, (float)float0, 0.01F);
      assertNotEquals((float)float6, (float)float5, 0.01F);
      assertNotEquals((float)float6, (float)float1, 0.01F);
      assertNotNull(float6);
      assertEquals(1.0F, (float)float6, 0.01F);
      
      floatArray0[6] = float6;
      Float float7 = new Float((double) (-1840));
      assertNotEquals((float)float7, (float)float3, 0.01F);
      assertNotEquals((float)float7, (float)float1, 0.01F);
      assertNotEquals((float)float7, (float)float6, 0.01F);
      assertNotEquals((float)float7, (float)float4, 0.01F);
      assertNotEquals((float)float7, (float)float2, 0.01F);
      assertNotEquals((float)float7, (float)float0, 0.01F);
      assertEquals((float)float7, (float)float5, 0.01F);
      assertNotNull(float7);
      assertEquals((-1840.0F), (float)float7, 0.01F);
      
      floatArray0[7] = float7;
      Float float8 = new Float((float) floatArray0[6]);
      assertEquals(9, floatArray0.length);
      assertNotEquals((float)float8, (float)float3, 0.01F);
      assertNotEquals((float)float8, (float)float7, 0.01F);
      assertNotEquals((float)float8, (float)float4, 0.01F);
      assertNotEquals((float)float8, (float)float1, 0.01F);
      assertEquals((float)float8, (float)float2, 0.01F);
      assertNotEquals((float)float8, (float)float0, 0.01F);
      assertNotEquals((float)float8, (float)float5, 0.01F);
      assertEquals((float)float8, (float)float6, 0.01F);
      assertNotNull(float8);
      assertEquals(1.0F, (float)float8, 0.01F);
      
      floatArray0[8] = float8;
      Float[] floatArray1 = ArrayUtils.nullToEmpty(floatArray0);
      assertEquals(9, floatArray0.length);
      assertEquals(9, floatArray1.length);
      assertSame(floatArray0, floatArray1);
      assertSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
  }

  @Test(timeout = 4000)
  public void test0255()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[1] = 0.0;
      doubleArray0[3] = 1757.16516391848;
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      boolean boolean0 = ArrayUtils.contains(booleanArray0, false);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, true, true}, booleanArray0));
      assertEquals(5, booleanArray0.length);
      assertTrue(boolean0);
      
      Object[] objectArray0 = new Object[0];
      int int0 = ArrayUtils.indexOf(objectArray0, (Object) null);
      assertEquals(0, objectArray0.length);
      assertEquals((-1), int0);
      
      ArrayUtils.swap(objectArray0, (-1524), 0, (-1));
      assertEquals(0, objectArray0.length);
      
      Object[] objectArray1 = new Object[5];
      assertFalse(objectArray1.equals((Object)objectArray0));
      
      objectArray1[0] = (Object) 0.0;
      objectArray1[1] = (Object) true;
      objectArray1[2] = null;
      objectArray1[3] = (Object) true;
      objectArray1[4] = (Object) false;
      boolean boolean1 = ArrayUtils.isSameLength(objectArray1, objectArray0);
      assertEquals(0, objectArray0.length);
      assertEquals(5, objectArray1.length);
      assertFalse(boolean1 == boolean0);
      assertFalse(objectArray0.equals((Object)objectArray1));
      assertFalse(objectArray1.equals((Object)objectArray0));
      assertNotSame(objectArray0, objectArray1);
      assertNotSame(objectArray1, objectArray0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test0256()  throws Throwable  {
      float[] floatArray0 = new float[2];
      floatArray0[0] = 1566.475F;
      floatArray0[1] = 1566.475F;
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-25);
      byteArray0[2] = (byte)17;
      byteArray0[3] = (byte)17;
      byteArray0[4] = (byte)17;
      byteArray0[5] = (byte) (-25);
      byteArray0[6] = (byte) (-25);
      byteArray0[7] = (byte)0;
      byteArray0[8] = (byte) (-25);
      // Undeclared exception!
      try { 
        ArrayUtils.insert((-39), byteArray0, byteArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -39, Length: 9
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0257()  throws Throwable  {
      float[] floatArray0 = new float[3];
      floatArray0[0] = (-1385.0087F);
      boolean boolean0 = ArrayUtils.isNotEmpty(floatArray0);
      assertArrayEquals(new float[] {(-1385.0087F), 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(3, floatArray0.length);
      assertTrue(boolean0);
      
      int[] intArray0 = ArrayUtils.EMPTY_INT_ARRAY;
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertNotNull(intArray0);
      
      int[] intArray1 = new int[6];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 3371;
      intArray1[1] = 3371;
      intArray1[2] = 3371;
      intArray1[3] = (-1667);
      intArray1[4] = 3371;
      intArray1[5] = 3371;
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)77;
      byteArray0[3] = (byte)1;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-102);
      byteArray0[6] = (byte)95;
      // Undeclared exception!
      try { 
        ArrayUtils.insert(3371, byteArray0, byteArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3371, Length: 7
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0258()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-39);
      long[] longArray0 = new long[4];
      longArray0[0] = (long) (byte) (-39);
      longArray0[1] = (long) (byte)6;
      longArray0[2] = (long) (byte) (-39);
      longArray0[3] = (long) (byte) (-39);
      long[] longArray1 = ArrayUtils.removeAllOccurrences(longArray0, (-44L));
      assertArrayEquals(new long[] {(-39L), 6L, (-39L), (-39L)}, longArray0);
      assertArrayEquals(new long[] {(-39L), 6L, (-39L), (-39L)}, longArray1);
      assertEquals(4, longArray0.length);
      assertEquals(4, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
      
      ArrayUtils.reverse(byteArray0, (int) (byte) (-39), (-553));
      assertArrayEquals(new byte[] {(byte) (-39), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(8, byteArray0.length);
      
      ArrayUtils.shift(byteArray0, (-883), (-883), 127);
      assertArrayEquals(new byte[] {(byte) (-39), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(8, byteArray0.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.insert((int) (byte) (-39), byteArray0, byteArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -39, Length: 8
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0259()  throws Throwable  {
      float[] floatArray0 = new float[9];
      floatArray0[0] = (-2271.21F);
      floatArray0[1] = 0.0F;
      floatArray0[2] = 216.6336F;
      floatArray0[3] = (-1.0F);
      floatArray0[4] = 0.0F;
      floatArray0[4] = (-1.0F);
      char[] charArray0 = new char[2];
      charArray0[0] = 'i';
      charArray0[1] = 'O';
      ArrayUtils.swap(charArray0, 891, 6760);
      assertArrayEquals(new char[] {'i', 'O'}, charArray0);
      assertEquals(2, charArray0.length);
      
      Boolean boolean0 = Boolean.valueOf(true);
      assertNotNull(boolean0);
      assertTrue(boolean0);
      
      Double double0 = new Double((-1.0F));
      assertNotNull(double0);
      assertEquals((-1.0), (double)double0, 0.01);
      
      Object object0 = ArrayUtils.toPrimitive((Object) double0);
      assertNotNull(object0);
      assertEquals((-1.0), object0);
      
      boolean boolean1 = ArrayUtils.isNotEmpty((long[]) null);
      assertFalse(boolean1);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-30);
      byteArray0[1] = (byte) (-64);
      byteArray0[2] = (byte)85;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-25);
      byteArray0[5] = (byte)17;
      // Undeclared exception!
      try { 
        ArrayUtils.insert(85, byteArray0, byteArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 85, Length: 6
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0260()  throws Throwable  {
      float[] floatArray0 = new float[8];
      floatArray0[2] = (float) (byte) (-1);
      floatArray0[7] = (float) (byte) (-1);
      float[] floatArray1 = ArrayUtils.removeAllOccurences(floatArray0, 0.0F);
      assertArrayEquals(new float[] {0.0F, 0.0F, (-1.0F), 0.0F, 0.0F, 0.0F, 0.0F, (-1.0F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-1.0F), (-1.0F)}, floatArray1, 0.01F);
      assertEquals(8, floatArray0.length);
      assertEquals(2, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-1);
      byte[] byteArray1 = ArrayUtils.addFirst(byteArray0, (byte) (-1));
      assertArrayEquals(new byte[] {(byte) (-1), (byte) (-1)}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-1), (byte) (-1), (byte) (-1)}, byteArray1);
      assertEquals(2, byteArray0.length);
      assertEquals(3, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((short[]) null, (short) (-1));
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertNotNull(bitSet0);
  }

  @Test(timeout = 4000)
  public void test0261()  throws Throwable  {
      short[] shortArray0 = new short[4];
      short short0 = (short)2;
      Byte byte0 = new Byte((byte)95);
      assertNotNull(byte0);
      assertEquals((byte)95, (byte)byte0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((Object[]) null, (Object) byte0, (int) (short) (-94));
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertNotNull(bitSet0);
      
      bitSet0.clear();
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      
      BitSet bitSet1 = (BitSet)ArrayUtils.get((Object[]) null, (int) 2, (Object) bitSet0);
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet1.length());
      assertTrue(bitSet1.isEmpty());
      assertEquals(0, bitSet1.cardinality());
      assertEquals(64, bitSet1.size());
      assertEquals("{}", bitSet1.toString());
      assertSame(bitSet0, bitSet1);
      assertSame(bitSet1, bitSet0);
      assertNotNull(bitSet1);
      
      int int0 = (-2146115848);
      ArrayUtils.shift(shortArray0, (int) (byte)95);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertEquals(4, shortArray0.length);
      
      char[] charArray0 = new char[5];
      charArray0[0] = 'w';
      charArray0[1] = 'Q';
      charArray0[2] = 'P';
      int int1 = bitSet0.previousClearBit(1756);
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertFalse(int1 == int0);
      assertSame(bitSet0, bitSet1);
      assertEquals(1756, int1);
      
      charArray0[3] = '6';
      String[] stringArray0 = ArrayUtils.toStringArray((Object[]) null);
      assertNull(stringArray0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object) bitSet1, bitSet0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test0262()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = (-376);
      intArray0[3] = 695;
      intArray0[2] = (-550);
      intArray0[3] = 2376;
      intArray0[4] = 1907;
      intArray0[5] = 1;
      intArray0[6] = 1;
      intArray0[7] = (-794);
      char[] charArray0 = new char[1];
      charArray0[0] = 'X';
      char[] charArray1 = ArrayUtils.removeAllOccurences(charArray0, 'U');
      assertArrayEquals(new char[] {'X'}, charArray0);
      assertArrayEquals(new char[] {'X'}, charArray1);
      assertEquals(1, charArray0.length);
      assertEquals(1, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-123);
      byteArray0[1] = (byte) (-123);
      byteArray0[2] = (byte) (-18);
      byteArray0[3] = (byte)40;
      byteArray0[4] = (byte)40;
      BitSet bitSet0 = ArrayUtils.indexesOf(byteArray0, (byte) (-123), 655);
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertArrayEquals(new byte[] {(byte) (-123), (byte) (-123), (byte) (-18), (byte)40, (byte)40}, byteArray0);
      assertEquals(5, byteArray0.length);
      assertNotNull(bitSet0);
      
      boolean boolean0 = ArrayUtils.isSorted(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-123), (byte) (-123), (byte) (-18), (byte)40, (byte)40}, byteArray0);
      assertEquals(5, byteArray0.length);
      assertTrue(boolean0);
      
      int[] intArray1 = ArrayUtils.add(intArray0, (int) (byte)40);
      assertArrayEquals(new int[] {(-376), 0, (-550), 2376, 1907, 1, 1, (-794)}, intArray0);
      assertArrayEquals(new int[] {(-376), 0, (-550), 2376, 1907, 1, 1, (-794), 40}, intArray1);
      assertEquals(8, intArray0.length);
      assertEquals(9, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) 'X';
      ArrayUtils.shift(longArray0, 0);
      assertArrayEquals(new long[] {88L}, longArray0);
      assertEquals(1, longArray0.length);
      
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) (byte) (-18);
      objectArray0[1] = (Object) bitSet0;
      String[] stringArray0 = ArrayUtils.toStringArray(objectArray0, "");
      assertEquals(2, objectArray0.length);
      assertEquals(2, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test0263()  throws Throwable  {
      int[] intArray0 = new int[0];
      Character character0 = Character.valueOf('g');
      assertNotNull(character0);
      assertEquals('g', (char)character0);
      
      Character character1 = Character.valueOf('g');
      assertNotNull(character1);
      assertEquals('g', (char)character1);
      
      Character character2 = Character.valueOf('g');
      assertNotNull(character2);
      assertEquals('g', (char)character2);
      
      Character character3 = Character.valueOf('\\');
      assertFalse(character3.equals((Object)character2));
      assertFalse(character3.equals((Object)character1));
      assertFalse(character3.equals((Object)character0));
      assertNotNull(character3);
      assertEquals('\\', (char)character3);
      
      Character character4 = Character.valueOf('g');
      assertFalse(character4.equals((Object)character3));
      assertNotNull(character4);
      assertEquals('g', (char)character4);
      
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, (int) (byte) (-102), 1);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      
      try { 
        Byte.valueOf("");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test0264()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-39);
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) (byte) (-39);
      float[] floatArray1 = ArrayUtils.addAll(floatArray0, floatArray0);
      assertArrayEquals(new float[] {(-39.0F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-39.0F), (-39.0F)}, floatArray1, 0.01F);
      assertEquals(1, floatArray0.length);
      assertEquals(2, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      int[] intArray0 = new int[7];
      intArray0[0] = (int) (byte)6;
      intArray0[1] = (int) (byte)6;
      intArray0[2] = 3700;
      intArray0[3] = (int) (byte) (-39);
      intArray0[4] = (int) (byte) (-39);
      intArray0[5] = (int) (byte)6;
      intArray0[6] = (int) (byte) (-39);
      int[] intArray1 = ArrayUtils.nullToEmpty(intArray0);
      assertArrayEquals(new int[] {6, 6, 3700, (-39), (-39), 6, (-39)}, intArray1);
      assertArrayEquals(new int[] {6, 6, 3700, (-39), (-39), 6, (-39)}, intArray0);
      assertEquals(7, intArray1.length);
      assertEquals(7, intArray0.length);
      assertSame(intArray1, intArray0);
      assertSame(intArray0, intArray1);
      assertNotNull(intArray1);
      
      int int0 = ArrayUtils.indexOf((long[]) null, (long) 3700, (int) (byte)6);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0265()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      ArrayUtils.swap(doubleArray0, 2147483636, Integer.MAX_VALUE, 2147483636);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      boolean boolean0 = ArrayUtils.contains((boolean[]) null, true);
      assertFalse(boolean0);
      
      Object[] objectArray0 = new Object[0];
      int int0 = ArrayUtils.indexOf(objectArray0, (Object) null);
      assertEquals(0, objectArray0.length);
      assertEquals((-1), int0);
      
      ArrayUtils.swap(objectArray0, 0, 0, 0);
      assertEquals(0, objectArray0.length);
      
      boolean boolean1 = ArrayUtils.isSameLength(objectArray0, objectArray0);
      assertEquals(0, objectArray0.length);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      double[] doubleArray1 = ArrayUtils.subarray(doubleArray0, (-1), (-1645));
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
  }

  @Test(timeout = 4000)
  public void test0266()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (short)0;
      doubleArray0[1] = (double) 'Y';
      doubleArray0[2] = 5648.9640479388;
      doubleArray0[3] = (double) 350;
      double[] doubleArray1 = ArrayUtils.subarray(doubleArray0, (int) (short)0, (-1569));
      assertArrayEquals(new double[] {0.0, 89.0, 5648.9640479388, 350.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(4, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
  }

  @Test(timeout = 4000)
  public void test0267()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 781;
      ArrayUtils.swap(doubleArray0, Integer.MAX_VALUE, Integer.MAX_VALUE, Integer.MAX_VALUE);
      assertArrayEquals(new double[] {781.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      boolean boolean0 = ArrayUtils.contains((boolean[]) null, true);
      assertFalse(boolean0);
      
      Object[] objectArray0 = new Object[0];
      int int0 = ArrayUtils.indexOf(objectArray0, (Object) null);
      assertEquals(0, objectArray0.length);
      assertEquals((-1), int0);
      
      ArrayUtils.swap(objectArray0, 0, 0, 0);
      assertEquals(0, objectArray0.length);
      
      boolean boolean1 = ArrayUtils.isSameLength(objectArray0, objectArray0);
      assertEquals(0, objectArray0.length);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) 781;
      longArray0[1] = (long) 0;
      long[] longArray1 = ArrayUtils.addAll(longArray0, longArray0);
      assertArrayEquals(new long[] {781L, 0L}, longArray0);
      assertArrayEquals(new long[] {781L, 0L, 781L, 0L}, longArray1);
      assertEquals(2, longArray0.length);
      assertEquals(4, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
      
      ArrayUtils.reverse(objectArray0);
      assertEquals(0, objectArray0.length);
      
      double[] doubleArray1 = ArrayUtils.subarray(doubleArray0, 0, 350);
      assertArrayEquals(new double[] {781.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {781.0}, doubleArray1, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
  }

  @Test(timeout = 4000)
  public void test0268()  throws Throwable  {
      int int0 = ArrayUtils.lastIndexOf((float[]) null, 1.0F, 31);
      assertEquals((-1), int0);
      
      byte[] byteArray0 = ArrayUtils.clone((byte[]) null);
      assertNull(byteArray0);
      
      byte[] byteArray1 = ArrayUtils.add((byte[]) null, (byte)2);
      assertArrayEquals(new byte[] {(byte)2}, byteArray1);
      assertEquals(1, byteArray1.length);
      assertNotNull(byteArray1);
      
      int[] intArray0 = new int[6];
      intArray0[0] = 1;
      intArray0[2] = 88;
      intArray0[3] = 1;
      intArray0[4] = 1;
      intArray0[5] = (int) (byte)1;
      ArrayUtils.shift(intArray0, (int) (byte)2);
      assertArrayEquals(new int[] {1, 1, 1, 0, 88, 1}, intArray0);
      assertEquals(6, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test0269()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = (-1);
      intArray0[1] = (-2294);
      intArray0[2] = 45;
      intArray0[3] = 4;
      ArrayUtils.shift(intArray0, (-57), (-57), (-2481));
      assertArrayEquals(new int[] {(-1), (-2294), 45, 4}, intArray0);
      assertEquals(4, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test0270()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = (-376);
      intArray0[1] = 695;
      intArray0[2] = 695;
      intArray0[3] = 2376;
      intArray0[4] = 1907;
      intArray0[5] = 1;
      intArray0[6] = 1;
      intArray0[7] = (-794);
      ArrayUtils.shift(intArray0, 88);
      assertArrayEquals(new int[] {(-376), 695, 695, 2376, 1907, 1, 1, (-794)}, intArray0);
      assertEquals(8, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test0271()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = (-376);
      intArray0[1] = 695;
      intArray0[2] = (-550);
      intArray0[3] = 2376;
      intArray0[4] = 1907;
      intArray0[5] = 1;
      intArray0[6] = 1;
      intArray0[7] = (-794);
      ArrayUtils.shift(intArray0, 88);
      assertArrayEquals(new int[] {(-376), 695, (-550), 2376, 1907, 1, 1, (-794)}, intArray0);
      assertEquals(8, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test0272()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = '~';
      charArray0[1] = 'D';
      ArrayUtils.shift(charArray0, (-569));
      assertArrayEquals(new char[] {'D', '~'}, charArray0);
      assertEquals(2, charArray0.length);
      
      long[] longArray0 = new long[7];
      longArray0[0] = (-1303L);
      longArray0[1] = (long) '~';
      longArray0[2] = (-547L);
      longArray0[3] = (long) '~';
      longArray0[4] = (long) '~';
      longArray0[5] = (-2142L);
      longArray0[6] = (-1L);
      long[] longArray1 = ArrayUtils.removeElement(longArray0, (-1L));
      assertArrayEquals(new long[] {(-1303L), 126L, (-547L), 126L, 126L, (-2142L), (-1L)}, longArray0);
      assertArrayEquals(new long[] {(-1303L), 126L, (-547L), 126L, 126L, (-2142L)}, longArray1);
      assertEquals(7, longArray0.length);
      assertEquals(6, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
  }

  @Test(timeout = 4000)
  public void test0273()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = 'Y';
      Long[] longArray0 = new Long[4];
      Long long0 = new Long(955);
      assertNotNull(long0);
      assertEquals(955L, (long)long0);
      
      longArray0[0] = long0;
      Long long1 = new Long(955);
      assertTrue(long1.equals((Object)long0));
      assertNotNull(long1);
      assertEquals(955L, (long)long1);
      
      longArray0[1] = long1;
      long long2 = (-1L);
      Long long3 = new Long((-1L));
      assertFalse(long3.equals((Object)long0));
      assertFalse(long3.equals((Object)long1));
      assertTrue(long3.equals((Object)long2));
      assertNotNull(long3);
      assertEquals((-1L), (long)long3);
      
      longArray0[2] = long3;
      Long long4 = new Long(long2);
      assertTrue(long4.equals((Object)long2));
      assertFalse(long4.equals((Object)long0));
      assertFalse(long4.equals((Object)long1));
      assertTrue(long4.equals((Object)long3));
      assertNotNull(long4);
      assertEquals((-1L), (long)long4);
      
      longArray0[3] = long4;
      Long[] longArray1 = ArrayUtils.removeElements(longArray0, longArray0);
      assertEquals(4, longArray0.length);
      assertEquals(0, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
      
      ArrayUtils.shift((Object[]) longArray0, (-1383));
      assertEquals(4, longArray0.length);
      assertFalse(longArray0.equals((Object)longArray1));
      assertNotSame(longArray0, longArray1);
  }

  @Test(timeout = 4000)
  public void test0274()  throws Throwable  {
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) (short)560;
      floatArray0[1] = (float) (short)560;
      floatArray0[2] = (float) (short)560;
      floatArray0[3] = (float) (short)560;
      floatArray0[4] = (float) (short)560;
      floatArray0[5] = (float) (short)560;
      float[] floatArray1 = ArrayUtils.removeElements(floatArray0, floatArray0);
      assertArrayEquals(new float[] {560.0F, 560.0F, 560.0F, 560.0F, 560.0F, 560.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertEquals(7, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      
      Float float0 = new Float(1.0F);
      assertNotNull(float0);
      assertEquals(1.0F, (float)float0, 0.01F);
      
      Character character0 = Character.valueOf('X');
      assertNotNull(character0);
      assertEquals('X', (char)character0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.isSameLength((Object) float0, (Object) character0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test0275()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 571.942196047302;
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) 571.942196047302;
      objectArray0[1] = (Object) 0.0;
      objectArray0[2] = (Object) 0.0;
      objectArray0[3] = (Object) 0.0;
      objectArray0[4] = (Object) 0.0;
      objectArray0[5] = (Object) 571.942196047302;
      String[] stringArray0 = ArrayUtils.toStringArray(objectArray0);
      assertEquals(6, objectArray0.length);
      assertEquals(6, stringArray0.length);
      assertNotNull(stringArray0);
      
      int[] intArray0 = new int[4];
      intArray0[0] = 32;
      intArray0[1] = (-1);
      intArray0[2] = Integer.MAX_VALUE;
      intArray0[3] = (-2619);
      // Undeclared exception!
      try { 
        ArrayUtils.isSameLength((Object) (-1), (Object) (-2619));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test0276()  throws Throwable  {
      long[] longArray0 = new long[3];
      longArray0[0] = (-2084L);
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) (-2084L);
      floatArray0[1] = (float) (-2084L);
      floatArray0[2] = 103.79543F;
      floatArray0[3] = (float) (-2084L);
      floatArray0[4] = (float) (-2084L);
      floatArray0[5] = 723.00055F;
      boolean boolean0 = ArrayUtils.isEmpty(floatArray0);
      assertArrayEquals(new float[] {(-2084.0F), (-2084.0F), 103.79543F, (-2084.0F), (-2084.0F), 723.00055F}, floatArray0, 0.01F);
      assertEquals(6, floatArray0.length);
      assertFalse(boolean0);
      
      boolean boolean1 = ArrayUtils.isSameLength(floatArray0, floatArray0);
      assertArrayEquals(new float[] {(-2084.0F), (-2084.0F), 103.79543F, (-2084.0F), (-2084.0F), 723.00055F}, floatArray0, 0.01F);
      assertEquals(6, floatArray0.length);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      BitSet bitSet0 = ArrayUtils.indexesOf(booleanArray0, false, (-1630));
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertEquals(1, booleanArray0.length);
      assertNotNull(bitSet0);
  }

  @Test(timeout = 4000)
  public void test0277()  throws Throwable  {
      BitSet bitSet0 = new BitSet();
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertNotNull(bitSet0);
      
      byte[] byteArray0 = new byte[0];
      ArrayUtils.swap(byteArray0, 11, 11, 11);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      
      char[] charArray0 = new char[6];
      charArray0[0] = 'p';
      charArray0[1] = 'p';
      charArray0[2] = 'p';
      charArray0[3] = 'p';
      charArray0[4] = 'p';
      charArray0[5] = 'p';
      char[] charArray1 = ArrayUtils.clone(charArray0);
      assertArrayEquals(new char[] {'p', 'p', 'p', 'p', 'p', 'p'}, charArray0);
      assertArrayEquals(new char[] {'p', 'p', 'p', 'p', 'p', 'p'}, charArray1);
      assertEquals(6, charArray0.length);
      assertEquals(6, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      
      long[] longArray0 = new long[8];
      longArray0[0] = (long) 'p';
      longArray0[1] = (long) 'p';
      longArray0[2] = (long) 'p';
      longArray0[3] = (long) 'p';
      longArray0[4] = (long) 'p';
      longArray0[5] = (long) (-1927);
      longArray0[6] = (long) 'p';
      longArray0[7] = (long) 11;
      ArrayUtils.swap(longArray0, (-1927), 11, 856);
      assertArrayEquals(new long[] {112L, 112L, 112L, 112L, 112L, (-1927L), 112L, 11L}, longArray0);
      assertEquals(8, longArray0.length);
      
      ArrayUtils.swap(longArray0, 856, 43, 43);
      assertArrayEquals(new long[] {112L, 112L, 112L, 112L, 112L, (-1927L), 112L, 11L}, longArray0);
      assertEquals(8, longArray0.length);
      
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short)2;
      shortArray0[1] = (short)115;
      shortArray0[2] = (short) (-1);
      shortArray0[3] = (short) (-1);
      shortArray0[4] = (short)11;
      BitSet bitSet1 = ArrayUtils.indexesOf(shortArray0, (short)89);
      assertEquals(0, bitSet1.length());
      assertTrue(bitSet1.isEmpty());
      assertEquals(0, bitSet1.cardinality());
      assertEquals("{}", bitSet1.toString());
      assertEquals(64, bitSet1.size());
      assertArrayEquals(new short[] {(short)2, (short)115, (short) (-1), (short) (-1), (short)11}, shortArray0);
      assertEquals(5, shortArray0.length);
      assertTrue(bitSet1.equals((Object)bitSet0));
      assertNotSame(bitSet1, bitSet0);
      assertNotNull(bitSet1);
  }

  @Test(timeout = 4000)
  public void test0278()  throws Throwable  {
      Boolean[] booleanArray0 = new Boolean[3];
      Boolean boolean0 = Boolean.valueOf((String) null);
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      booleanArray0[0] = boolean0;
      long[] longArray0 = new long[1];
      longArray0[0] = 834L;
      ArrayUtils.swap(longArray0, 3307, (-1), 3307);
      assertArrayEquals(new long[] {834L}, longArray0);
      assertEquals(1, longArray0.length);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-42);
      byteArray0[2] = (byte) (-9);
      byteArray0[4] = (byte) (-42);
      byteArray0[5] = (byte) (-1);
      byteArray0[6] = (byte) (-42);
      byteArray0[7] = (byte) (-9);
  }

  @Test(timeout = 4000)
  public void test0279()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-1.0);
      float[] floatArray0 = new float[2];
      floatArray0[0] = (-1385.0087F);
      floatArray0[1] = (-1385.0087F);
      boolean boolean0 = ArrayUtils.isNotEmpty(floatArray0);
      assertArrayEquals(new float[] {(-1385.0087F), (-1385.0087F)}, floatArray0, 0.01F);
      assertEquals(2, floatArray0.length);
      assertTrue(boolean0);
      
      int[] intArray0 = ArrayUtils.EMPTY_INT_ARRAY;
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertNotNull(intArray0);
      
      int[] intArray1 = ArrayUtils.insert(3371, (int[]) null, (int[]) null);
      assertNull(intArray1);
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) (-1.0);
      ArrayUtils.shift(objectArray0, 3371, 18688, 18688);
      assertEquals(1, objectArray0.length);
      
      float[] floatArray1 = ArrayUtils.removeElement(floatArray0, (float) 3371);
      assertArrayEquals(new float[] {(-1385.0087F), (-1385.0087F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-1385.0087F), (-1385.0087F)}, floatArray1, 0.01F);
      assertEquals(2, floatArray0.length);
      assertEquals(2, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      
      Byte[] byteArray0 = ArrayUtils.toObject((byte[]) null);
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test0280()  throws Throwable  {
      short[] shortArray0 = new short[4];
      MockRandom mockRandom0 = new MockRandom((-1642L));
      assertNotNull(mockRandom0);
      
      boolean boolean0 = mockRandom0.nextBoolean();
      assertFalse(boolean0);
      
      LongStream longStream0 = mockRandom0.longs();
      assertNotNull(longStream0);
      
      char[] charArray0 = new char[8];
      charArray0[0] = 'J';
      charArray0[1] = '_';
      charArray0[2] = '_';
      charArray0[3] = 'J';
      charArray0[4] = '';
      charArray0[5] = 'J';
      charArray0[6] = '_';
      charArray0[7] = '_';
      ArrayUtils.shuffle(charArray0, (Random) mockRandom0);
      assertArrayEquals(new char[] {'_', '_', 'J', '', 'J', '_', '_', 'J'}, charArray0);
      assertEquals(8, charArray0.length);
      
      short[] shortArray1 = ArrayUtils.removeElement(shortArray0, (short)560);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0}, shortArray1);
      assertEquals(4, shortArray0.length);
      assertEquals(4, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      
      Float[] floatArray0 = new Float[0];
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertEquals(0, floatArray1.length);
      assertEquals(0, floatArray0.length);
      assertNotNull(floatArray1);
      
      long[] longArray0 = new long[8];
      longArray0[0] = (long) '';
      longArray0[1] = (long) 'J';
      longArray0[2] = (-1525L);
      longArray0[3] = (long) 'J';
      longArray0[4] = (long) (short)560;
      longArray0[5] = (-1642L);
      longArray0[6] = (long) (short)6;
      longArray0[7] = (long) 'J';
      ArrayUtils.swap(longArray0, (int) (short)6, (-116), (int) (short)560);
      assertArrayEquals(new long[] {6L, 74L, (-1525L), 74L, 560L, (-1642L), 127L, 74L}, longArray0);
      assertEquals(8, longArray0.length);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-9);
      byteArray0[2] = (byte) (-42);
      Byte[] byteArray1 = ArrayUtils.toObject(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-1), (byte) (-9), (byte) (-42)}, byteArray0);
      assertEquals(3, byteArray0.length);
      assertEquals(3, byteArray1.length);
      assertNotNull(byteArray1);
  }

  @Test(timeout = 4000)
  public void test0281()  throws Throwable  {
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short) (-1);
      shortArray0[1] = (short)43;
      char[] charArray0 = new char[7];
      charArray0[0] = 'E';
      charArray0[1] = '0';
      charArray0[2] = '0';
      charArray0[3] = '0';
      charArray0[4] = '0';
      charArray0[5] = '0';
      charArray0[6] = '0';
      char[] charArray1 = ArrayUtils.removeElement(charArray0, ' ');
      assertArrayEquals(new char[] {'E', '0', '0', '0', '0', '0', '0'}, charArray0);
      assertArrayEquals(new char[] {'E', '0', '0', '0', '0', '0', '0'}, charArray1);
      assertEquals(7, charArray0.length);
      assertEquals(7, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) (short)43;
      floatArray0[1] = 0.0F;
      float[] floatArray1 = ArrayUtils.removeAllOccurences(floatArray0, (-1569.0298F));
      assertArrayEquals(new float[] {43.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {43.0F, 0.0F}, floatArray1, 0.01F);
      assertEquals(2, floatArray0.length);
      assertEquals(2, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      
      Boolean boolean0 = Boolean.valueOf("");
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      long[] longArray0 = new long[0];
      Long[] longArray1 = ArrayUtils.toObject(longArray0);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertNotNull(longArray1);
      
      char[] charArray2 = ArrayUtils.subarray(charArray1, 0, 2);
      assertArrayEquals(new char[] {'E', '0'}, charArray2);
      assertArrayEquals(new char[] {'E', '0', '0', '0', '0', '0', '0'}, charArray0);
      assertArrayEquals(new char[] {'E', '0', '0', '0', '0', '0', '0'}, charArray1);
      assertEquals(2, charArray2.length);
      assertEquals(7, charArray0.length);
      assertEquals(7, charArray1.length);
      assertFalse(charArray2.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray1));
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray2, charArray0);
      assertNotSame(charArray2, charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray0, charArray2);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray1, charArray2);
      assertNotNull(charArray2);
      
      ArrayUtils.swap(shortArray0, (int) (short)43, (int) (short) (-1), (int) (short) (-1));
      assertArrayEquals(new short[] {(short) (-1), (short)43, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertEquals(8, shortArray0.length);
      
      float[] floatArray2 = ArrayUtils.subarray(floatArray0, 5, (int) (short)43);
      assertArrayEquals(new float[] {}, floatArray2, 0.01F);
      assertArrayEquals(new float[] {43.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(0, floatArray2.length);
      assertEquals(2, floatArray0.length);
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertNotSame(floatArray2, floatArray1);
      assertNotSame(floatArray2, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray0, floatArray2);
      assertNotNull(floatArray2);
      
      byte[] byteArray0 = ArrayUtils.subarray((byte[]) null, 5163, (int) (short) (-1));
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test0282()  throws Throwable  {
      float[] floatArray0 = new float[0];
      ArrayUtils.reverse(floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
      
      Byte byte0 = new Byte((byte)0);
      assertNotNull(byte0);
      assertEquals((byte)0, (byte)byte0);
      
      Byte byte1 = new Byte((byte)0);
      assertTrue(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      assertEquals((byte)0, (byte)byte1);
      
      Byte byte2 = new Byte((byte) (-75));
      assertFalse(byte2.equals((Object)byte1));
      assertFalse(byte2.equals((Object)byte0));
      assertNotNull(byte2);
      assertEquals((byte) (-75), (byte)byte2);
      
      Byte byte3 = new Byte((byte)43);
      assertFalse(byte3.equals((Object)byte2));
      assertFalse(byte3.equals((Object)byte0));
      assertFalse(byte3.equals((Object)byte1));
      assertNotNull(byte3);
      assertEquals((byte)43, (byte)byte3);
      
      float[] floatArray1 = ArrayUtils.subarray(floatArray0, (int) (byte)0, 2869);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      
      boolean boolean0 = ArrayUtils.isNotEmpty((boolean[]) null);
      assertFalse(boolean0);
      
      org.evosuite.runtime.Random.setNextRandom(13);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 2869;
      doubleArray0[1] = (double) 2869;
      doubleArray0[2] = (double) (byte) (-75);
      doubleArray0[3] = (double) (byte)43;
      doubleArray0[4] = (double) 13;
      doubleArray0[5] = (double) (byte)43;
      doubleArray0[6] = (double) 13;
      doubleArray0[7] = (double) 13;
      doubleArray0[8] = (double) 2869;
      boolean boolean1 = ArrayUtils.contains(doubleArray0, 13.0);
      assertArrayEquals(new double[] {2869.0, 2869.0, (-75.0), 43.0, 13.0, 43.0, 13.0, 13.0, 2869.0}, doubleArray0, 0.01);
      assertEquals(9, doubleArray0.length);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test0283()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = 'f';
      charArray0[1] = 'm';
      charArray0[2] = 'c';
      char[] charArray1 = ArrayUtils.nullToEmpty(charArray0);
      assertArrayEquals(new char[] {'f', 'm', 'c', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertArrayEquals(new char[] {'f', 'm', 'c', '\u0000', '\u0000', '\u0000'}, charArray1);
      assertEquals(6, charArray0.length);
      assertEquals(6, charArray1.length);
      assertSame(charArray0, charArray1);
      assertSame(charArray1, charArray0);
      assertNotNull(charArray1);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 'c';
      doubleArray0[1] = (double) 'm';
      ArrayUtils.shuffle(doubleArray0);
      assertArrayEquals(new double[] {109.0, 99.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      
      ArrayUtils.shift(doubleArray0, (-7), 55, (-7));
      assertArrayEquals(new double[] {99.0, 109.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      
      Object[] objectArray0 = new Object[0];
      boolean boolean0 = ArrayUtils.isSameLength(objectArray0, objectArray0);
      assertEquals(0, objectArray0.length);
      assertTrue(boolean0);
      
      Short[] shortArray0 = new Short[1];
      Short short0 = new Short((short)1350);
      assertNotNull(short0);
      assertEquals((short)1350, (short)short0);
      
      shortArray0[0] = short0;
      Short[] shortArray1 = ArrayUtils.nullToEmpty(shortArray0);
      assertEquals(1, shortArray0.length);
      assertEquals(1, shortArray1.length);
      assertSame(shortArray0, shortArray1);
      assertSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)4;
      byteArray0[2] = (byte)12;
      byteArray0[3] = (byte)89;
      byteArray0[4] = (byte)1;
      byte[] byteArray1 = ArrayUtils.add(byteArray0, (byte)92);
      assertArrayEquals(new byte[] {(byte)0, (byte)4, (byte)12, (byte)89, (byte)1}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)4, (byte)12, (byte)89, (byte)1, (byte)92}, byteArray1);
      assertEquals(5, byteArray0.length);
      assertEquals(6, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
  }

  @Test(timeout = 4000)
  public void test0284()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)55;
      boolean boolean0 = ArrayUtils.isNotEmpty(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertEquals(1, booleanArray0.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0285()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-39);
      byte[] byteArray1 = new byte[8];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte) (-39);
      byteArray1[2] = (byte) (-39);
      byteArray1[3] = (byte) (-39);
      byteArray1[4] = (byte) (-39);
      byteArray1[5] = (byte)6;
      byteArray1[6] = (byte) (-39);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (byte) (-39);
      doubleArray0[1] = (double) (byte) (-39);
      doubleArray0[2] = 0.7;
      boolean boolean0 = ArrayUtils.isSorted(doubleArray0);
      assertArrayEquals(new double[] {(-39.0), (-39.0), 0.7}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0286()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      Long long0 = new Long((-1L));
      assertNotNull(long0);
      assertEquals((-1L), (long)long0);
      
      Long long1 = new Long(623L);
      assertFalse(long1.equals((Object)long0));
      assertNotNull(long1);
      assertEquals(623L, (long)long1);
      
      Long long2 = new Long(1L);
      assertFalse(long2.equals((Object)long0));
      assertFalse(long2.equals((Object)long1));
      assertNotNull(long2);
      assertEquals(1L, (long)long2);
      
      Long long3 = new Long((-761L));
      assertFalse(long3.equals((Object)long1));
      assertFalse(long3.equals((Object)long0));
      assertFalse(long3.equals((Object)long2));
      assertNotNull(long3);
      assertEquals((-761L), (long)long3);
      
      Long long4 = new Long((-1205L));
      assertFalse(long4.equals((Object)long1));
      assertFalse(long4.equals((Object)long3));
      assertFalse(long4.equals((Object)long2));
      assertFalse(long4.equals((Object)long0));
      assertNotNull(long4);
      assertEquals((-1205L), (long)long4);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      ArrayUtils.swap(booleanArray0, 0, (-105), 0);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertEquals(1, booleanArray0.length);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) 623L;
      floatArray0[1] = (float) (-105);
      float[] floatArray1 = ArrayUtils.removeElements(floatArray0, floatArray0);
      assertArrayEquals(new float[] {623.0F, (-105.0F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertEquals(2, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      
      char[] charArray0 = new char[8];
      charArray0[0] = '.';
      charArray0[1] = 'R';
      charArray0[2] = '6';
      charArray0[3] = 'Y';
      charArray0[4] = 'a';
      charArray0[5] = '-';
      charArray0[6] = 'Z';
      charArray0[7] = 'E';
      BitSet bitSet0 = ArrayUtils.indexesOf(charArray0, 'Z', (-105));
      assertEquals("{6}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(1, bitSet0.cardinality());
      assertEquals(7, bitSet0.length());
      assertFalse(bitSet0.isEmpty());
      assertArrayEquals(new char[] {'.', 'R', '6', 'Y', 'a', '-', 'Z', 'E'}, charArray0);
      assertEquals(8, charArray0.length);
      assertNotNull(bitSet0);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 623.0F;
      doubleArray0[1] = (double) 'R';
      doubleArray0[2] = (double) 1L;
      BitSet bitSet1 = ArrayUtils.indexesOf(doubleArray0, (double) (-761L), (-2108));
      assertTrue(bitSet1.isEmpty());
      assertEquals(0, bitSet1.length());
      assertEquals(64, bitSet1.size());
      assertEquals("{}", bitSet1.toString());
      assertEquals(0, bitSet1.cardinality());
      assertArrayEquals(new double[] {623.0, 82.0, 1.0}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      assertFalse(bitSet1.equals((Object)bitSet0));
      assertNotSame(bitSet1, bitSet0);
      assertNotNull(bitSet1);
  }

  @Test(timeout = 4000)
  public void test0287()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = '~';
      int[] intArray0 = new int[7];
      intArray0[0] = (int) '~';
      intArray0[1] = 3537;
      intArray0[2] = (int) '~';
      intArray0[3] = (int) '~';
      intArray0[4] = (int) '~';
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      boolean[] booleanArray1 = ArrayUtils.removeElement(booleanArray0, true);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertEquals(1, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      
      Long long0 = new Long(126);
      assertNotNull(long0);
      assertEquals(126L, (long)long0);
      
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) 126;
      objectArray0[1] = (Object) long0;
      objectArray0[2] = (Object) 126;
      objectArray0[3] = (Object) long0;
      objectArray0[4] = (Object) true;
      objectArray0[5] = (Object) true;
      objectArray0[6] = (Object) 126;
      objectArray0[7] = (Object) long0;
      MutableInt mutableInt0 = new MutableInt((Number) 126);
      assertEquals(126, mutableInt0.intValue());
      assertEquals(126.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(126L, mutableInt0.longValue());
      assertEquals(126.0, mutableInt0.doubleValue(), 0.01);
      assertEquals("126", mutableInt0.toString());
      assertEquals((short)126, mutableInt0.shortValue());
      assertEquals(126, (int)mutableInt0.getValue());
      assertEquals(126, (int)mutableInt0.toInteger());
      assertEquals((byte)126, mutableInt0.byteValue());
      assertNotNull(mutableInt0);
      
      MutableInt mutableInt1 = (MutableInt)ArrayUtils.toPrimitive((Object) mutableInt0);
      assertEquals(126, mutableInt0.intValue());
      assertEquals(126.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(126L, mutableInt0.longValue());
      assertEquals(126.0, mutableInt0.doubleValue(), 0.01);
      assertEquals("126", mutableInt0.toString());
      assertEquals((short)126, mutableInt0.shortValue());
      assertEquals(126, (int)mutableInt0.getValue());
      assertEquals(126, (int)mutableInt0.toInteger());
      assertEquals((byte)126, mutableInt0.byteValue());
      assertEquals(126L, mutableInt1.longValue());
      assertEquals(126.0, mutableInt1.doubleValue(), 0.01);
      assertEquals("126", mutableInt1.toString());
      assertEquals(126.0F, mutableInt1.floatValue(), 0.01F);
      assertEquals(126, (int)mutableInt1.toInteger());
      assertEquals(126, (int)mutableInt1.getValue());
      assertEquals((byte)126, mutableInt1.byteValue());
      assertEquals(126, mutableInt1.intValue());
      assertEquals((short)126, mutableInt1.shortValue());
      assertSame(mutableInt0, mutableInt1);
      assertSame(mutableInt1, mutableInt0);
      assertNotNull(mutableInt1);
      
      objectArray0[8] = (Object) mutableInt1;
      Float[] floatArray0 = new Float[2];
      Float float0 = new Float(2382.3639877);
      assertNotNull(float0);
      assertEquals(2382.364F, (float)float0, 0.01F);
      
      floatArray0[0] = float0;
      Float float1 = new Float(198.0);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertNotNull(float1);
      assertEquals(198.0F, (float)float1, 0.01F);
      
      floatArray0[1] = float1;
      Float float2 = ArrayUtils.get(floatArray0, 53, floatArray0[0]);
      assertEquals(2, floatArray0.length);
      assertEquals((float)float2, (float)float0, 0.01F);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertNotNull(float2);
      assertEquals(2382.364F, (float)float2, 0.01F);
      
      // Undeclared exception!
      try { 
        ArrayUtils.add(objectArray0, (-796), (Object) float2);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -796, Length: 9
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0288()  throws Throwable  {
      BitSet bitSet0 = new BitSet();
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertNotNull(bitSet0);
      
      byte[] byteArray0 = new byte[0];
      ArrayUtils.swap(byteArray0, 11, 11, 11);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short)1070;
      shortArray0[2] = (short) (-400);
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) 11;
      floatArray0[1] = (float) (short)1070;
      floatArray0[2] = (float) (short)0;
      floatArray0[3] = (float) (short)1070;
      floatArray0[4] = (float) (short)1070;
      floatArray0[5] = (float) (short)1070;
      floatArray0[6] = (float) (short) (-400);
      boolean boolean0 = ArrayUtils.contains(floatArray0, Float.NaN);
      assertArrayEquals(new float[] {11.0F, 1070.0F, 0.0F, 1070.0F, 1070.0F, 1070.0F, (-400.0F)}, floatArray0, 0.01F);
      assertEquals(7, floatArray0.length);
      assertFalse(boolean0);
      
      Integer[] integerArray0 = new Integer[0];
      byte byte0 = (byte) (-46);
      // Undeclared exception!
      try { 
        ArrayUtils.add(byteArray0, (-5511), (byte) (-1));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -5511, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0289()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = '~';
      charArray0[1] = 'D';
      ArrayUtils.shift(charArray0, (-569));
      assertArrayEquals(new char[] {'D', '~'}, charArray0);
      assertEquals(2, charArray0.length);
      
      Long long0 = new Long((-2142L));
      assertNotNull(long0);
      assertEquals((-2142L), (long)long0);
      
      ArrayUtils.swap(charArray0, (-569), 1);
      assertArrayEquals(new char[] {'~', 'D'}, charArray0);
      assertEquals(2, charArray0.length);
      
      Double double0 = new Double(1559.77236038809);
      assertNotNull(double0);
      assertEquals(1559.77236038809, (double)double0, 0.01);
      
      AbstractMap.SimpleImmutableEntry<Double, Double> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Double, Double>((Double) null, double0);
      assertNotNull(abstractMap_SimpleImmutableEntry0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)118;
      byteArray0[1] = (byte)68;
      byteArray0[2] = (byte) (-93);
      byteArray0[3] = (byte)5;
      byteArray0[4] = (byte) (-52);
      byteArray0[5] = (byte)4;
      boolean boolean0 = ArrayUtils.contains(byteArray0, (byte)5);
      assertArrayEquals(new byte[] {(byte)118, (byte)68, (byte) (-93), (byte)5, (byte) (-52), (byte)4}, byteArray0);
      assertEquals(6, byteArray0.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0290()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = '~';
      Long long0 = new Long(479L);
      assertNotNull(long0);
      assertEquals(479L, (long)long0);
      
      Long long1 = new Long((-2147483648L));
      assertFalse(long1.equals((Object)long0));
      assertNotNull(long1);
      assertEquals((-2147483648L), (long)long1);
      
      Long long2 = new Long((-1226L));
      assertFalse(long2.equals((Object)long1));
      assertFalse(long2.equals((Object)long0));
      assertNotNull(long2);
      assertEquals((-1226L), (long)long2);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-105);
      byteArray0[1] = (byte) (-105);
      byteArray0[2] = (byte) (-105);
      byteArray0[3] = (byte) (-105);
      byteArray0[4] = (byte) (-105);
      byteArray0[5] = (byte) (-105);
      boolean boolean0 = ArrayUtils.contains(byteArray0, (byte) (-105));
      assertArrayEquals(new byte[] {(byte) (-105), (byte) (-105), (byte) (-105), (byte) (-105), (byte) (-105), (byte) (-105)}, byteArray0);
      assertEquals(6, byteArray0.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0291()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      int[] intArray0 = new int[5];
      intArray0[0] = (int) (short)560;
      intArray0[1] = (int) (short)560;
      intArray0[2] = (int) (short)560;
      intArray0[3] = (int) (short)560;
      intArray0[4] = (int) (short)560;
      boolean boolean0 = ArrayUtils.isSorted(intArray0);
      assertArrayEquals(new int[] {560, 560, 560, 560, 560}, intArray0);
      assertEquals(5, intArray0.length);
      assertTrue(boolean0);
      
      long[] longArray0 = new long[21];
      longArray0[0] = (long) 560;
      longArray0[2] = (long) 560;
      long[] longArray1 = ArrayUtils.removeAllOccurrences(longArray0, (long) (short)560);
      assertEquals(21, longArray0.length);
      assertEquals(19, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
      
      ArrayUtils.shift(longArray0, 560);
      assertEquals(21, longArray0.length);
      assertFalse(longArray0.equals((Object)longArray1));
      assertNotSame(longArray0, longArray1);
      
      ArrayUtils.shift((double[]) null, 0);
      ArrayUtils.shift((short[]) null, 1518);
      char[] charArray0 = new char[1];
      charArray0[0] = 'A';
      ArrayUtils.reverse(charArray0);
      assertArrayEquals(new char[] {'A'}, charArray0);
      assertEquals(1, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test0292()  throws Throwable  {
      Byte byte0 = new Byte((byte)124);
      assertNotNull(byte0);
      assertEquals((byte)124, (byte)byte0);
      
      Byte byte1 = new Byte((byte)124);
      assertTrue(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      assertEquals((byte)124, (byte)byte1);
      
      Long long0 = new Long(0L);
      assertNotNull(long0);
      assertEquals(0L, (long)long0);
      
      Long long1 = new Long((-4683L));
      assertFalse(long1.equals((Object)long0));
      assertNotNull(long1);
      assertEquals((-4683L), (long)long1);
      
      Long long2 = new Long((-2880L));
      assertFalse(long2.equals((Object)long1));
      assertFalse(long2.equals((Object)long0));
      assertNotNull(long2);
      assertEquals((-2880L), (long)long2);
      
      Long long3 = new Long((-267L));
      assertFalse(long3.equals((Object)long1));
      assertFalse(long3.equals((Object)long0));
      assertFalse(long3.equals((Object)long2));
      assertNotNull(long3);
      assertEquals((-267L), (long)long3);
      
      Boolean boolean0 = Boolean.TRUE;
      assertNotNull(boolean0);
      assertTrue(boolean0);
      
      boolean[] booleanArray0 = ArrayUtils.toPrimitive((Boolean[]) null);
      assertNull(booleanArray0);
      
      ArrayUtils.shift((boolean[]) null, (int) (byte)124);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte) (-64);
      byteArray0[2] = (byte) (-92);
      byteArray0[3] = (byte) (-92);
      byteArray0[4] = (byte)2;
      byteArray0[5] = (byte) (-1);
      byteArray0[6] = (byte) (-92);
      int int0 = ArrayUtils.indexOf(byteArray0, (byte) (-1), 195225787);
      assertArrayEquals(new byte[] {(byte)2, (byte) (-64), (byte) (-92), (byte) (-92), (byte)2, (byte) (-1), (byte) (-92)}, byteArray0);
      assertEquals(7, byteArray0.length);
      assertEquals((-1), int0);
      
      int[] intArray0 = new int[0];
      int[] intArray1 = ArrayUtils.nullToEmpty(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      
      int int1 = ArrayUtils.lastIndexOf(byteArray0, (byte) (-92), (int) (byte)124);
      assertArrayEquals(new byte[] {(byte)2, (byte) (-64), (byte) (-92), (byte) (-92), (byte)2, (byte) (-1), (byte) (-92)}, byteArray0);
      assertEquals(7, byteArray0.length);
      assertFalse(int1 == int0);
      assertEquals(6, int1);
  }

  @Test(timeout = 4000)
  public void test0293()  throws Throwable  {
      float[] floatArray0 = new float[1];
      floatArray0[0] = (-2239.035F);
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      Long long0 = new Long((-1));
      assertNotNull(long0);
      assertEquals((-1L), (long)long0);
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'r';
      charArray0[1] = '*';
      ArrayUtils.reverse(charArray0);
      assertArrayEquals(new char[] {'*', 'r'}, charArray0);
      assertEquals(2, charArray0.length);
      
      Long[] longArray0 = new Long[2];
      Long long1 = new Long((-1));
      assertTrue(long1.equals((Object)long0));
      assertNotNull(long1);
      assertEquals((-1L), (long)long1);
      
      longArray0[0] = long1;
      longArray0[1] = long0;
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0, (long) (-1));
      assertArrayEquals(new long[] {(-1L), (-1L)}, longArray1);
      assertEquals(2, longArray1.length);
      assertEquals(2, longArray0.length);
      assertNotNull(longArray1);
      
      boolean boolean0 = ArrayUtils.isSorted(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, true, false, true, false, false, false}, booleanArray0));
      assertEquals(7, booleanArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0294()  throws Throwable  {
      float[] floatArray0 = new float[4];
      floatArray0[1] = (-1.0F);
      floatArray0[3] = (-983.02F);
      boolean boolean0 = ArrayUtils.contains(floatArray0, 0.0F);
      assertArrayEquals(new float[] {0.0F, (-1.0F), 0.0F, (-983.02F)}, floatArray0, 0.01F);
      assertEquals(4, floatArray0.length);
      assertTrue(boolean0);
      
      Integer[] integerArray0 = new Integer[0];
      Integer[] integerArray1 = ArrayUtils.nullToEmpty(integerArray0);
      assertEquals(0, integerArray0.length);
      assertEquals(0, integerArray1.length);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertNotNull(integerArray1);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-83);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-46);
      byteArray0[3] = (byte) (-83);
      byte[] byteArray1 = ArrayUtils.add(byteArray0, 0, (byte) (-90));
      assertArrayEquals(new byte[] {(byte) (-83), (byte)0, (byte) (-46), (byte) (-83)}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-90), (byte) (-83), (byte)0, (byte) (-46), (byte) (-83)}, byteArray1);
      assertEquals(4, byteArray0.length);
      assertEquals(5, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      
      float[] floatArray1 = new float[6];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = (float) (byte) (-83);
      floatArray1[2] = (float) (byte) (-83);
      floatArray1[3] = (-983.02F);
      floatArray1[4] = (-983.02F);
      floatArray1[5] = (float) (byte) (-83);
      float[] floatArray2 = ArrayUtils.addFirst(floatArray1, 0.0F);
      assertArrayEquals(new float[] {0.0F, (-83.0F), 0.0F, (-83.0F), (-983.02F), (-983.02F), (-83.0F)}, floatArray2, 0.01F);
      assertArrayEquals(new float[] {(-83.0F), 0.0F, (-83.0F), (-983.02F), (-983.02F), (-83.0F)}, floatArray1, 0.01F);
      assertEquals(7, floatArray2.length);
      assertEquals(6, floatArray1.length);
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray2, floatArray1);
      assertNotSame(floatArray2, floatArray0);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray1, floatArray2);
      assertNotNull(floatArray2);
      
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short) (-2624);
      shortArray0[1] = (short) (byte) (-46);
      shortArray0[2] = (short) (byte) (-83);
      ArrayUtils.shift(shortArray0, (int) (short) (-46));
      assertArrayEquals(new short[] {(short) (-46), (short) (-83), (short) (-2624)}, shortArray0);
      assertEquals(3, shortArray0.length);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      boolean boolean1 = ArrayUtils.isSorted(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true}, booleanArray0));
      assertEquals(4, booleanArray0.length);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test0295()  throws Throwable  {
      float[] floatArray0 = new float[4];
      floatArray0[0] = (-1646.9836F);
      floatArray0[1] = (-1.0F);
      floatArray0[2] = 0.0F;
      floatArray0[3] = (-983.02F);
      boolean boolean0 = ArrayUtils.contains(floatArray0, 0.0F);
      assertArrayEquals(new float[] {(-1646.9836F), (-1.0F), 0.0F, (-983.02F)}, floatArray0, 0.01F);
      assertEquals(4, floatArray0.length);
      assertTrue(boolean0);
      
      Integer[] integerArray0 = new Integer[0];
      Integer[] integerArray1 = ArrayUtils.nullToEmpty(integerArray0);
      assertEquals(0, integerArray0.length);
      assertEquals(0, integerArray1.length);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertNotNull(integerArray1);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-83);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-46);
      byteArray0[3] = (byte) (-83);
      byte[] byteArray1 = ArrayUtils.add(byteArray0, 0, (byte) (-90));
      assertArrayEquals(new byte[] {(byte) (-83), (byte)0, (byte) (-46), (byte) (-83)}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-90), (byte) (-83), (byte)0, (byte) (-46), (byte) (-83)}, byteArray1);
      assertEquals(4, byteArray0.length);
      assertEquals(5, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      
      float[] floatArray1 = new float[6];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = (float) (byte) (-83);
      floatArray1[1] = (-1646.9836F);
      floatArray1[2] = (float) (byte) (-83);
      floatArray1[3] = (-983.02F);
      floatArray1[4] = (-983.02F);
      floatArray1[5] = (float) (byte) (-83);
      float[] floatArray2 = ArrayUtils.addFirst(floatArray1, (-1646.9836F));
      assertArrayEquals(new float[] {(-1646.9836F), (-83.0F), (-1646.9836F), (-83.0F), (-983.02F), (-983.02F), (-83.0F)}, floatArray2, 0.01F);
      assertArrayEquals(new float[] {(-83.0F), (-1646.9836F), (-83.0F), (-983.02F), (-983.02F), (-83.0F)}, floatArray1, 0.01F);
      assertEquals(7, floatArray2.length);
      assertEquals(6, floatArray1.length);
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray2, floatArray1);
      assertNotSame(floatArray2, floatArray0);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray1, floatArray2);
      assertNotNull(floatArray2);
      
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short) (-2624);
      shortArray0[1] = (short) (byte) (-46);
      shortArray0[2] = (short) (byte) (-83);
      ArrayUtils.shift(shortArray0, (int) (short) (-46));
      assertArrayEquals(new short[] {(short) (-46), (short) (-83), (short) (-2624)}, shortArray0);
      assertEquals(3, shortArray0.length);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      boolean boolean1 = ArrayUtils.isSorted(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, false}, booleanArray0));
      assertEquals(4, booleanArray0.length);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test0296()  throws Throwable  {
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)560;
      shortArray0[1] = (short)0;
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) (short)0;
      floatArray0[1] = (float) (short)560;
      float[] floatArray1 = ArrayUtils.nullToEmpty(floatArray0);
      assertArrayEquals(new float[] {0.0F, 560.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F, 560.0F}, floatArray1, 0.01F);
      assertEquals(2, floatArray0.length);
      assertEquals(2, floatArray1.length);
      assertSame(floatArray0, floatArray1);
      assertSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      
      int[] intArray0 = new int[0];
      int[] intArray1 = ArrayUtils.removeAllOccurrences(intArray0, (int) (short)560);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      
      MockRandom mockRandom0 = new MockRandom((short)560);
      assertNotNull(mockRandom0);
      
      char[] charArray0 = new char[4];
      boolean boolean0 = mockRandom0.nextBoolean();
      assertFalse(boolean0);
      
      charArray0[1] = '_';
      charArray0[2] = ')';
      LongStream longStream0 = mockRandom0.longs();
      assertNotNull(longStream0);
      
      charArray0[3] = 'J';
      ArrayUtils.shuffle(charArray0, (Random) mockRandom0);
      assertArrayEquals(new char[] {'_', ')', 'J', '\u0000'}, charArray0);
      assertEquals(4, charArray0.length);
      
      short[] shortArray1 = ArrayUtils.removeElement(shortArray0, (short)6);
      assertArrayEquals(new short[] {(short)560, (short)0, (short)0, (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)560, (short)0, (short)0, (short)0}, shortArray1);
      assertEquals(4, shortArray0.length);
      assertEquals(4, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      
      Float[] floatArray2 = new Float[0];
      float[] floatArray3 = ArrayUtils.toPrimitive(floatArray2);
      assertArrayEquals(new float[] {}, floatArray3, 0.01F);
      assertEquals(0, floatArray2.length);
      assertEquals(0, floatArray3.length);
      assertFalse(floatArray3.equals((Object)floatArray0));
      assertFalse(floatArray3.equals((Object)floatArray1));
      assertNotSame(floatArray3, floatArray0);
      assertNotSame(floatArray3, floatArray1);
      assertNotNull(floatArray3);
      
      long[] longArray0 = new long[7];
      longArray0[0] = (long) ')';
      longArray0[1] = (long) (short)0;
      longArray0[2] = (long) (short)6;
      longArray0[3] = (long) 'J';
      longArray0[4] = (long) (short)6;
      longArray0[5] = (long) (short)0;
      longArray0[6] = (long) 'J';
      ArrayUtils.swap(longArray0, (-116), (int) (short)0, (int) (short)0);
      assertArrayEquals(new long[] {41L, 0L, 6L, 74L, 6L, 0L, 74L}, longArray0);
      assertEquals(7, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test0297()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byte[] byteArray1 = new byte[2];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byte[] byteArray2 = ArrayUtils.addAll(byteArray0, byteArray1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray2);
      assertEquals(3, byteArray0.length);
      assertEquals(2, byteArray1.length);
      assertEquals(5, byteArray2.length);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray2, byteArray0);
      assertNotNull(byteArray2);
      
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short)76;
      shortArray0[1] = (short) (-1);
      shortArray0[2] = (short) (-1613);
      shortArray0[3] = (short) (-292);
      shortArray0[4] = (short) (-1);
      shortArray0[5] = (short) (-154);
      ArrayUtils.reverse(shortArray0);
      assertArrayEquals(new short[] {(short) (-154), (short) (-1), (short) (-292), (short) (-1613), (short) (-1), (short)76}, shortArray0);
      assertEquals(6, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test0298()  throws Throwable  {
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short)1926;
      boolean[] booleanArray0 = new boolean[0];
      ArrayUtils.shift(booleanArray0, (-796), 786, (-796));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals(0, booleanArray0.length);
      
      long[] longArray0 = new long[5];
      longArray0[0] = (long) (short)1926;
      longArray0[1] = (long) (short)1926;
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)43;
      byteArray0[3] = (byte)117;
      byteArray0[4] = (byte)88;
      byteArray0[5] = (byte) (-29);
      ArrayUtils.shift(byteArray0, (int) (byte)88);
      assertArrayEquals(new byte[] {(byte)43, (byte)117, (byte)88, (byte) (-29), (byte)0, (byte)1}, byteArray0);
      assertEquals(6, byteArray0.length);
      
      boolean boolean0 = ArrayUtils.isSorted(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals(0, booleanArray0.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0299()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      long[] longArray0 = new long[0];
      ArrayUtils.swap(longArray0, 1383, 1383);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      MutableInt mutableInt0 = new MutableInt(1383);
      assertEquals(1383.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(1383.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(1383L, mutableInt0.longValue());
      assertEquals(1383, mutableInt0.intValue());
      assertEquals((short)1383, mutableInt0.shortValue());
      assertEquals("1383", mutableInt0.toString());
      assertEquals(1383, (int)mutableInt0.getValue());
      assertEquals((byte)103, mutableInt0.byteValue());
      assertEquals(1383, (int)mutableInt0.toInteger());
      assertNotNull(mutableInt0);
      
      boolean boolean0 = ArrayUtils.isSorted(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray0));
      assertEquals(3, booleanArray0.length);
      assertTrue(boolean0);
      
      short[] shortArray0 = new short[10];
      shortArray0[0] = (short) (byte)0;
      shortArray0[1] = (short) (byte)0;
      boolean boolean1 = ArrayUtils.isEquals("org.apache.commons.lang3.ClassUtils", mutableInt0);
      assertEquals(1383.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(1383.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(1383L, mutableInt0.longValue());
      assertEquals(1383, mutableInt0.intValue());
      assertEquals((short)1383, mutableInt0.shortValue());
      assertEquals("1383", mutableInt0.toString());
      assertEquals(1383, (int)mutableInt0.getValue());
      assertEquals((byte)103, mutableInt0.byteValue());
      assertEquals(1383, (int)mutableInt0.toInteger());
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test0300()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      boolean boolean0 = ArrayUtils.isSameLength(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      assertTrue(boolean0);
      
      char[] charArray0 = new char[13];
      charArray0[0] = ':';
      Character[] characterArray0 = ArrayUtils.toObject((char[]) null);
      assertNull(characterArray0);
      
      float[] floatArray0 = new float[9];
      floatArray0[2] = (float) 338;
      floatArray0[4] = (float) ':';
      floatArray0[5] = (float) 338;
      ArrayUtils.reverse((char[]) null, (-3), (-103));
      boolean[] booleanArray0 = new boolean[0];
      Boolean[] booleanArray1 = ArrayUtils.toObject(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertNotNull(booleanArray1);
      
      ArrayUtils.swap((char[]) null, (int) ':', (-578), 107);
  }

  @Test(timeout = 4000)
  public void test0301()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray1);
      assertEquals(8, byteArray0.length);
      assertEquals(8, byteArray1.length);
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      IntStream intStream0 = mockRandom0.ints(2956L);
      assertNotNull(intStream0);
      
      int int0 = mockRandom0.nextInt();
      assertEquals(0, int0);
      
      int[] intArray0 = new int[6];
      intArray0[0] = (-1);
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 1490;
      intArray0[5] = 0;
      boolean boolean0 = ArrayUtils.contains(intArray0, 78);
      assertArrayEquals(new int[] {(-1), 0, 0, 0, 1490, 0}, intArray0);
      assertEquals(6, intArray0.length);
      assertFalse(boolean0);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) 0;
      floatArray0[1] = (float) 78;
      float float0 = mockRandom0.nextFloat();
      assertEquals(0.1F, float0, 0.01F);
      
      floatArray0[2] = (float) (-1);
      floatArray0[3] = (float) 78;
      floatArray0[4] = (float) 2956L;
      ArrayUtils.shift(floatArray0, 0, 0, (-127));
      assertArrayEquals(new float[] {0.0F, 78.0F, (-1.0F), 78.0F, 2956.0F}, floatArray0, 0.01F);
      assertEquals(5, floatArray0.length);
      
      char[] charArray0 = new char[1];
      DoubleStream doubleStream0 = mockRandom0.doubles(1514L, (-1019.85723509989), 0.0);
      assertNotNull(doubleStream0);
      
      charArray0[0] = '~';
      ArrayUtils.reverse(charArray0, 8, (-1));
      assertArrayEquals(new char[] {'~'}, charArray0);
      assertEquals(1, charArray0.length);
      
      boolean[] booleanArray0 = new boolean[0];
      Boolean[] booleanArray1 = ArrayUtils.toObject(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertNotNull(booleanArray1);
      
      Float[] floatArray1 = ArrayUtils.toObject(floatArray0);
      assertArrayEquals(new float[] {0.0F, 78.0F, (-1.0F), 78.0F, 2956.0F}, floatArray0, 0.01F);
      assertEquals(5, floatArray1.length);
      assertEquals(5, floatArray0.length);
      assertNotNull(floatArray1);
      
      boolean boolean1 = ArrayUtils.isSorted(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals(0, booleanArray0.length);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test0302()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = 'Y';
      char[] charArray1 = ArrayUtils.add(charArray0, 'Y');
      assertArrayEquals(new char[] {'Y'}, charArray0);
      assertArrayEquals(new char[] {'Y', 'Y'}, charArray1);
      assertEquals(1, charArray0.length);
      assertEquals(2, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      
      int[] intArray0 = new int[7];
      intArray0[0] = (int) 'Y';
      intArray0[1] = 955;
      intArray0[2] = (int) '|';
      intArray0[3] = (int) '|';
      intArray0[4] = (int) 'Y';
      intArray0[5] = (int) 'Y';
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)27;
      byteArray0[1] = (byte) (-31);
      byteArray0[2] = (byte)65;
      byteArray0[3] = (byte)7;
      byteArray0[4] = (byte) (-38);
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte) (-11);
      MockRandom mockRandom0 = new MockRandom((-283L));
      assertNotNull(mockRandom0);
      
      ArrayUtils.shuffle(byteArray0, (Random) mockRandom0);
      assertArrayEquals(new byte[] {(byte) (-31), (byte)65, (byte)7, (byte) (-38), (byte)0, (byte) (-11), (byte)27}, byteArray0);
      assertEquals(7, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test0303()  throws Throwable  {
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short) (-13);
      shortArray0[1] = (short)43;
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      BitSet bitSet0 = ArrayUtils.indexesOf(booleanArray0, true);
      assertEquals(2, bitSet0.length());
      assertEquals("{0, 1}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertFalse(bitSet0.isEmpty());
      assertEquals(2, bitSet0.cardinality());
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray0));
      assertEquals(2, booleanArray0.length);
      assertNotNull(bitSet0);
      
      Long long0 = new Long((-3482L));
      assertNotNull(long0);
      assertEquals((-3482L), (long)long0);
      
      Long long1 = new Long((short)43);
      assertFalse(long1.equals((Object)long0));
      assertNotNull(long1);
      assertEquals(43L, (long)long1);
      
      Long long2 = new Long(0L);
      assertFalse(long2.equals((Object)long0));
      assertFalse(long2.equals((Object)long1));
      assertNotNull(long2);
      assertEquals(0L, (long)long2);
      
      Long long3 = new Long((short) (-13));
      assertFalse(long3.equals((Object)long0));
      assertFalse(long3.equals((Object)long2));
      assertFalse(long3.equals((Object)long1));
      assertNotNull(long3);
      assertEquals((-13L), (long)long3);
      
      Long long4 = new Long(1L);
      assertFalse(long4.equals((Object)long2));
      assertFalse(long4.equals((Object)long0));
      assertFalse(long4.equals((Object)long1));
      assertFalse(long4.equals((Object)long3));
      assertNotNull(long4);
      assertEquals(1L, (long)long4);
      
      Long long5 = new Long((-1L));
      assertFalse(long5.equals((Object)long1));
      assertFalse(long5.equals((Object)long2));
      assertFalse(long5.equals((Object)long4));
      assertFalse(long5.equals((Object)long3));
      assertFalse(long5.equals((Object)long0));
      assertNotNull(long5);
      assertEquals((-1L), (long)long5);
      
      Long long6 = new Long((-3482L));
      assertFalse(long6.equals((Object)long1));
      assertTrue(long6.equals((Object)long0));
      assertFalse(long6.equals((Object)long5));
      assertFalse(long6.equals((Object)long2));
      assertFalse(long6.equals((Object)long3));
      assertFalse(long6.equals((Object)long4));
      assertNotNull(long6);
      assertEquals((-3482L), (long)long6);
      
      Long[] longArray0 = ArrayUtils.nullToEmpty((Long[]) null);
      assertEquals(0, longArray0.length);
      assertNotNull(longArray0);
      
      short[] shortArray1 = ArrayUtils.nullToEmpty(shortArray0);
      assertArrayEquals(new short[] {(short) (-13), (short)43, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short) (-13), (short)43, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray1);
      assertEquals(8, shortArray0.length);
      assertEquals(8, shortArray1.length);
      assertSame(shortArray0, shortArray1);
      assertSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      
      char[] charArray0 = new char[3];
      charArray0[0] = 'h';
      charArray0[1] = 'H';
      charArray0[2] = 'R';
      ArrayUtils.swap(charArray0, (-2450), (-2450), (-164));
      assertArrayEquals(new char[] {'h', 'H', 'R'}, charArray0);
      assertEquals(3, charArray0.length);
      
      Integer[] integerArray0 = new Integer[1];
      Integer integer0 = new Integer((short)43);
      assertNotNull(integer0);
      assertEquals(43, (int)integer0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.toPrimitive(integerArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0304()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      float[] floatArray0 = new float[4];
      floatArray0[0] = (-1150.5F);
      floatArray0[1] = (-1672.5F);
      floatArray0[2] = (-2005.7074F);
      floatArray0[3] = 3424.91F;
      int int0 = ArrayUtils.lastIndexOf(floatArray0, (-1672.5F), 2);
      assertArrayEquals(new float[] {(-1150.5F), (-1672.5F), (-2005.7074F), 3424.91F}, floatArray0, 0.01F);
      assertEquals(4, floatArray0.length);
      assertEquals(1, int0);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (byte)78;
      shortArray0[1] = (short) (byte)78;
      short[] shortArray1 = ArrayUtils.removeAllOccurrences(shortArray0, (short)78);
      assertArrayEquals(new short[] {(short)78, (short)78}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertEquals(2, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-39.0);
      doubleArray0[1] = (double) 1;
      doubleArray0[2] = (double) (-2005.7074F);
      doubleArray0[3] = (double) (short)2;
      doubleArray0[4] = (double) (-2005.7074F);
      doubleArray0[5] = (double) (-2005.7074F);
      doubleArray0[6] = (double) (-2005.7074F);
      // Undeclared exception!
      try { 
        ArrayUtils.insert((int) (short)78, doubleArray0, doubleArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 78, Length: 7
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0305()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 914.944001638755;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (-1202.7635315971), 0.0);
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertArrayEquals(new double[] {0.0, 914.944001638755, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      assertNotNull(bitSet0);
      
      double[] doubleArray1 = ArrayUtils.addFirst(doubleArray0, (-940.865573866));
      assertArrayEquals(new double[] {0.0, 914.944001638755, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-940.865573866), 0.0, 914.944001638755, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(4, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = 13.1876335F;
      floatArray0[1] = (float) 97;
      int int0 = ArrayUtils.lastIndexOf(floatArray0, 13.1876335F, 8);
      assertArrayEquals(new float[] {13.1876335F, 97.0F}, floatArray0, 0.01F);
      assertEquals(2, floatArray0.length);
      assertEquals(0, int0);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)2;
      shortArray0[1] = (short)2;
      short[] shortArray1 = ArrayUtils.removeAllOccurrences(shortArray0, (short) (-1173));
      assertArrayEquals(new short[] {(short)2, (short)2}, shortArray0);
      assertArrayEquals(new short[] {(short)2, (short)2}, shortArray1);
      assertEquals(2, shortArray0.length);
      assertEquals(2, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      
      // Undeclared exception!
      try { 
        ArrayUtils.insert(976, doubleArray1, doubleArray1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 976, Length: 5
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0306()  throws Throwable  {
      int[] intArray0 = new int[0];
      Character character0 = Character.valueOf('g');
      assertNotNull(character0);
      assertEquals('g', (char)character0);
      
      Character character1 = Character.valueOf('g');
      assertNotNull(character1);
      assertEquals('g', (char)character1);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 'g';
      doubleArray0[1] = (double) 'g';
      doubleArray0[2] = (double) 'g';
      doubleArray0[3] = (double) 'g';
      doubleArray0[4] = (double) 'g';
      doubleArray0[5] = (double) 'g';
      int int0 = ArrayUtils.indexOf(doubleArray0, 103.0);
      assertArrayEquals(new double[] {103.0, 103.0, 103.0, 103.0, 103.0, 103.0}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      assertEquals(0, int0);
      
      int[] intArray1 = ArrayUtils.addAll(intArray0, intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      ArrayUtils.reverse(booleanArray0, 3, (-4166));
      assertTrue(Arrays.equals(new boolean[] {true, true, true}, booleanArray0));
      assertEquals(3, booleanArray0.length);
      
      double[] doubleArray1 = ArrayUtils.removeElements((double[]) null, (double[]) null);
      assertNull(doubleArray1);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((double[]) null, 119.52633273, (-4166));
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertNotNull(bitSet0);
      
      boolean boolean0 = ArrayUtils.isEmpty((long[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0307()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      float[] floatArray0 = new float[4];
      floatArray0[0] = (-1150.5F);
      ArrayUtils.shift(floatArray0, (-557), (-2042), 2147483636);
      assertArrayEquals(new float[] {(-1150.5F), 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(4, floatArray0.length);
      
      char[] charArray0 = new char[7];
      charArray0[0] = '}';
      charArray0[1] = 'K';
      charArray0[2] = 'K';
      ArrayUtils.shift((byte[]) null, (-1));
  }

  @Test(timeout = 4000)
  public void test0308()  throws Throwable  {
      int[] intArray0 = new int[1];
      int int0 = ArrayUtils.indexOf(intArray0, 0, 0);
      assertArrayEquals(new int[] {0}, intArray0);
      assertEquals(1, intArray0.length);
      assertEquals(0, int0);
      
      String string0 = ArrayUtils.toString((Object) "");
      assertNotNull(string0);
      assertEquals("", string0);
      
      int[] intArray1 = ArrayUtils.subarray(intArray0, (-127), 0);
      assertArrayEquals(new int[] {0}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(1, intArray0.length);
      assertEquals(0, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      
      char[] charArray0 = new char[3];
      charArray0[1] = 'Y';
      charArray0[2] = '|';
      char[] charArray1 = ArrayUtils.add(charArray0, '|');
      assertArrayEquals(new char[] {'\u0000', 'Y', '|'}, charArray0);
      assertArrayEquals(new char[] {'\u0000', 'Y', '|', '|'}, charArray1);
      assertEquals(3, charArray0.length);
      assertEquals(4, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) 0;
      floatArray0[1] = (float) '|';
      floatArray0[2] = 51.0F;
      floatArray0[3] = (float) 955;
      floatArray0[4] = (float) 'Y';
      floatArray0[5] = (float) (-127);
      floatArray0[6] = (float) 'p';
      floatArray0[7] = (-3512.3494F);
      floatArray0[8] = (-3651.4F);
      ArrayUtils.shift(floatArray0, (-127), (-477), (-127));
      assertArrayEquals(new float[] {0.0F, 124.0F, 51.0F, 955.0F, 89.0F, (-127.0F), 112.0F, (-3512.3494F), (-3651.4F)}, floatArray0, 0.01F);
      assertEquals(9, floatArray0.length);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      boolean[] booleanArray1 = ArrayUtils.clone(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray1));
      assertEquals(1, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
  }

  @Test(timeout = 4000)
  public void test0309()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-7);
      boolean boolean0 = ArrayUtils.isSameLength(byteArray0, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-7)}, byteArray0);
      assertEquals(1, byteArray0.length);
      assertTrue(boolean0);
      
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short) (byte) (-7);
      shortArray0[1] = (short) (byte) (-7);
      BitSet bitSet0 = ArrayUtils.indexesOf(byteArray0, (byte) (-123), (int) (byte) (-7));
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertArrayEquals(new byte[] {(byte) (-7)}, byteArray0);
      assertEquals(1, byteArray0.length);
      assertNotNull(bitSet0);
      
      boolean boolean1 = ArrayUtils.isSorted(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-7)}, byteArray0);
      assertEquals(1, byteArray0.length);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      Boolean boolean2 = new Boolean(true);
      assertTrue(boolean2.equals((Object)boolean0));
      assertTrue(boolean2.equals((Object)boolean1));
      assertNotNull(boolean2);
      assertTrue(boolean2);
      
      boolean boolean3 = ArrayUtils.contains((boolean[]) null, false);
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3);
      
      boolean boolean4 = ArrayUtils.isSorted(shortArray0);
      assertArrayEquals(new short[] {(short) (-7), (short) (-7), (short)0}, shortArray0);
      assertEquals(3, shortArray0.length);
      assertFalse(boolean4 == boolean3);
      assertTrue(boolean4 == boolean0);
      assertTrue(boolean4 == boolean1);
      assertTrue(boolean4);
  }

  @Test(timeout = 4000)
  public void test0310()  throws Throwable  {
      long[] longArray0 = ArrayUtils.nullToEmpty((long[]) null);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      assertNotNull(longArray0);
      
      char[] charArray0 = new char[9];
      charArray0[0] = '=';
      charArray0[1] = '{';
      charArray0[2] = 'f';
      charArray0[3] = '3';
      charArray0[4] = '\\';
      charArray0[5] = 'H';
      charArray0[6] = '/';
      charArray0[7] = 'H';
      charArray0[8] = '/';
      BitSet bitSet0 = ArrayUtils.indexesOf(charArray0, '+', (-1484));
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertArrayEquals(new char[] {'=', '{', 'f', '3', '\\', 'H', '/', 'H', '/'}, charArray0);
      assertEquals(9, charArray0.length);
      assertNotNull(bitSet0);
  }

  @Test(timeout = 4000)
  public void test0311()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)96;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)114;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)1;
      byteArray0[5] = (byte)102;
      byteArray0[6] = (byte) (-4);
      byteArray0[7] = (byte)56;
      byteArray0[8] = (byte) (-128);
      boolean boolean0 = ArrayUtils.isEmpty(byteArray0);
      assertArrayEquals(new byte[] {(byte)96, (byte)0, (byte)114, (byte)0, (byte)1, (byte)102, (byte) (-4), (byte)56, (byte) (-128)}, byteArray0);
      assertEquals(9, byteArray0.length);
      assertFalse(boolean0);
      
      ArrayUtils.shift((float[]) null, 1414011208);
      long[] longArray0 = ArrayUtils.nullToEmpty((long[]) null);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      assertNotNull(longArray0);
      
      int[] intArray0 = new int[8];
      intArray0[0] = (int) (byte)1;
      intArray0[1] = (int) (byte)114;
      intArray0[2] = (int) (byte)56;
      intArray0[3] = (int) (short)0;
      intArray0[4] = (int) (byte)56;
      intArray0[6] = (int) (byte)102;
      intArray0[7] = (int) (byte)102;
      int[] intArray1 = ArrayUtils.addFirst(intArray0, (int) (byte)56);
      assertArrayEquals(new int[] {56, 1, 114, 56, 0, 56, 0, 102, 102}, intArray1);
      assertArrayEquals(new int[] {1, 114, 56, 0, 56, 0, 102, 102}, intArray0);
      assertEquals(9, intArray1.length);
      assertEquals(8, intArray0.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
      assertNotNull(intArray1);
  }

  @Test(timeout = 4000)
  public void test0312()  throws Throwable  {
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) (byte)2;
      floatArray0[0] = (float) (byte)2;
      floatArray0[2] = (float) (byte)2;
      floatArray0[3] = (float) (byte)2;
      floatArray0[4] = (float) (byte)2;
      floatArray0[5] = (float) (byte)2;
      floatArray0[6] = (float) (byte)2;
      float[] floatArray1 = ArrayUtils.subarray(floatArray0, (-2552), (-2552));
      assertArrayEquals(new float[] {2.0F, 0.0F, 2.0F, 2.0F, 2.0F, 2.0F, 2.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertEquals(7, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      
      boolean[] booleanArray0 = new boolean[0];
      boolean boolean0 = ArrayUtils.isNotEmpty(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals(0, booleanArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0313()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 914.944001638755;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (-1202.7635315971), 0.0);
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertArrayEquals(new double[] {0.0, 914.944001638755, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      assertNotNull(bitSet0);
      
      Float[] floatArray0 = new Float[2];
      Float float0 = new Float(0.0F);
      assertNotNull(float0);
      assertEquals(0.0F, (float)float0, 0.01F);
      
      floatArray0[0] = float0;
      Float float1 = new Float((-1789.9796F));
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertNotNull(float1);
      assertEquals((-1789.9796F), (float)float1, 0.01F);
      
      floatArray0[1] = float1;
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0);
      assertArrayEquals(new float[] {0.0F, (-1789.9796F)}, floatArray1, 0.01F);
      assertEquals(2, floatArray0.length);
      assertEquals(2, floatArray1.length);
      assertNotNull(floatArray1);
      
      Class<Float>[] classArray0 = (Class<Float>[]) Array.newInstance(Class.class, 7);
      Class<Float> class0 = Float.class;
      classArray0[0] = class0;
      Class<Float> class1 = Float.class;
      classArray0[1] = class1;
      Class<Float> class2 = Float.class;
      classArray0[1] = class2;
      Class<Float> class3 = Float.class;
      classArray0[3] = class3;
      Class<Float> class4 = Float.class;
      classArray0[4] = class4;
      Class<Float> class5 = Float.class;
      classArray0[5] = class5;
      Class<Float> class6 = Float.class;
      classArray0[6] = class6;
      Class<?>[] classArray1 = ArrayUtils.nullToEmpty(classArray0);
      assertEquals(7, classArray1.length);
      assertEquals(7, classArray0.length);
      assertNotNull(classArray1);
      
      boolean boolean0 = ArrayUtils.isEmpty(floatArray1);
      assertArrayEquals(new float[] {0.0F, (-1789.9796F)}, floatArray1, 0.01F);
      assertEquals(2, floatArray0.length);
      assertEquals(2, floatArray1.length);
      assertFalse(boolean0);
      
      boolean[] booleanArray0 = new boolean[0];
      boolean boolean1 = ArrayUtils.isNotEmpty(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals(0, booleanArray0.length);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      long[] longArray0 = new long[0];
      long[] longArray1 = ArrayUtils.removeAllOccurences(longArray0, 2147483647L);
      assertArrayEquals(new long[] {}, longArray1);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray1.length);
      assertEquals(0, longArray0.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray0, longArray1);
      assertNotNull(longArray1);
  }

  @Test(timeout = 4000)
  public void test0314()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[1] = 'D';
      boolean boolean0 = ArrayUtils.isNotEmpty(charArray0);
      assertArrayEquals(new char[] {'\u0000', 'D'}, charArray0);
      assertEquals(2, charArray0.length);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[2];
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, 0.0, (-1644.999088180617));
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      assertNotNull(bitSet0);
      
      Float float0 = new Float(826.1747F);
      assertNotNull(float0);
      assertEquals(826.1747F, (float)float0, 0.01F);
      
      Float float1 = new Float(2.0F);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertNotNull(float1);
      assertEquals(2.0F, (float)float1, 0.01F);
      
      Float[] floatArray0 = new Float[0];
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertNotNull(floatArray1);
      
      Class<Float> class0 = Float.class;
      Class<Float> class1 = Float.class;
      Class<Float> class2 = Float.class;
      Class<Float> class3 = Float.class;
      Class<Float> class4 = Float.class;
      Class<Float>[] classArray0 = (Class<Float>[]) Array.newInstance(Class.class, 7);
      classArray0[0] = class2;
      classArray0[1] = class1;
      Class<Float> class5 = Float.class;
      classArray0[2] = class5;
      classArray0[3] = class3;
      classArray0[4] = class4;
      classArray0[5] = class0;
      classArray0[6] = class4;
      Class<?>[] classArray1 = ArrayUtils.nullToEmpty(classArray0);
      assertEquals(7, classArray1.length);
      assertEquals(7, classArray0.length);
      assertNotNull(classArray1);
      
      boolean boolean1 = ArrayUtils.isEmpty(floatArray1);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      int[] intArray0 = new int[8];
      intArray0[0] = (int) 'D';
      intArray0[1] = (int) 'D';
      intArray0[2] = 48;
      intArray0[3] = (int) 'D';
      intArray0[4] = (int) 'D';
      intArray0[5] = (int) 'D';
      intArray0[6] = (int) 'D';
      intArray0[7] = (int) 'D';
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object) class2, intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test0315()  throws Throwable  {
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short)1926;
      boolean[] booleanArray0 = new boolean[0];
      ArrayUtils.shift(booleanArray0, (-796), 786, (-796));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals(0, booleanArray0.length);
      
      long[] longArray0 = new long[5];
      longArray0[0] = (long) (short)1926;
      longArray0[1] = (long) (short)1926;
      longArray0[2] = (long) (-796);
      longArray0[3] = (long) (short)2151;
      longArray0[4] = (long) (short)1926;
      int[] intArray0 = new int[0];
      int[] intArray1 = ArrayUtils.insert((-6298), intArray0, intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      
      short[] shortArray1 = ArrayUtils.subarray(shortArray0, (-1), 4);
      assertArrayEquals(new short[] {(short)1926, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)1926, (short)0, (short)0, (short)0}, shortArray1);
      assertEquals(8, shortArray0.length);
      assertEquals(4, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      
      String string0 = "\\u";
      String[] stringArray0 = new String[8];
      stringArray0[0] = "1W#W#q%R";
      stringArray0[1] = string0;
      stringArray0[2] = "F^Sa?m/Wm]@^}_+u|";
      stringArray0[3] = "', has a length less than 2";
      stringArray0[4] = "', has a length less than 2";
      stringArray0[5] = string0;
      stringArray0[6] = "0x";
      stringArray0[7] = "0x";
      String[] stringArray1 = ArrayUtils.nullToEmpty(stringArray0);
      assertEquals(8, stringArray1.length);
      assertEquals(8, stringArray0.length);
      assertSame(stringArray1, stringArray0);
      assertSame(stringArray0, stringArray1);
      assertNotNull(stringArray1);
  }

  @Test(timeout = 4000)
  public void test0316()  throws Throwable  {
      short[] shortArray0 = new short[8];
      boolean[] booleanArray0 = new boolean[0];
      ArrayUtils.shift(booleanArray0, (-796), 786, (-796));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals(0, booleanArray0.length);
      
      long[] longArray0 = new long[5];
      longArray0[0] = (long) (short)0;
      longArray0[1] = (long) (short)0;
      longArray0[2] = (long) (-796);
      longArray0[3] = (long) (short)2151;
      longArray0[4] = (long) (short)1926;
      int[] intArray0 = new int[0];
      int[] intArray1 = ArrayUtils.insert((-6298), intArray0, intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      
      short[] shortArray1 = ArrayUtils.subarray(shortArray0, (-1), 4);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0}, shortArray1);
      assertEquals(8, shortArray0.length);
      assertEquals(4, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      
      long[] longArray1 = ArrayUtils.removeElements(longArray0, (long[]) null);
      assertArrayEquals(new long[] {0L, 0L, (-796L), 2151L, 1926L}, longArray0);
      assertArrayEquals(new long[] {0L, 0L, (-796L), 2151L, 1926L}, longArray1);
      assertEquals(5, longArray0.length);
      assertEquals(5, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
      
      int int0 = ArrayUtils.indexOf((short[]) null, (short)1926);
      assertEquals((-1), int0);
      
      char[] charArray0 = ArrayUtils.removeAllOccurences((char[]) null, 'k');
      assertNull(charArray0);
      
      int int1 = ArrayUtils.lastIndexOf(longArray1, 2147483647L, 394);
      assertArrayEquals(new long[] {0L, 0L, (-796L), 2151L, 1926L}, longArray0);
      assertArrayEquals(new long[] {0L, 0L, (-796L), 2151L, 1926L}, longArray1);
      assertEquals(5, longArray0.length);
      assertEquals(5, longArray1.length);
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray1.equals((Object)longArray0));
      assertTrue(int1 == int0);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertEquals((-1), int1);
      
      int[] intArray2 = ArrayUtils.add(intArray1, (-1541));
      assertArrayEquals(new int[] {(-1541)}, intArray2);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(1, intArray2.length);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertFalse(intArray2.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray2, intArray1);
      assertNotSame(intArray2, intArray0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray0, intArray2);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray1, intArray2);
      assertNotNull(intArray2);
  }

  @Test(timeout = 4000)
  public void test0317()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "Z";
      stringArray0[1] = " vs ";
      stringArray0[2] = "^0#LOO1f";
      String string0 = ArrayUtils.get(stringArray0, (-834));
      assertEquals(3, stringArray0.length);
      assertNull(string0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object) null, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Arrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test0318()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      ArrayUtils.reverse(objectArray0);
      assertEquals(0, objectArray0.length);
      
      int[] intArray0 = new int[2];
      intArray0[0] = 92;
      intArray0[1] = 1226;
      BitSet bitSet0 = ArrayUtils.indexesOf(intArray0, 1226, 92);
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertArrayEquals(new int[] {92, 1226}, intArray0);
      assertEquals(2, intArray0.length);
      assertNotNull(bitSet0);
      
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = true;
      booleanArray0[5] = false;
      boolean[] booleanArray1 = ArrayUtils.addFirst(booleanArray0, false);
      assertTrue(Arrays.equals(new boolean[] {true, true, false, false, true, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, true, true, false, false, true, false}, booleanArray1));
      assertEquals(6, booleanArray0.length);
      assertEquals(7, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
  }

  @Test(timeout = 4000)
  public void test0319()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = '~';
      Long long0 = new Long(479L);
      assertNotNull(long0);
      assertEquals(479L, (long)long0);
      
      Long long1 = new Long((-2147483648L));
      assertFalse(long1.equals((Object)long0));
      assertNotNull(long1);
      assertEquals((-2147483648L), (long)long1);
      
      Long long2 = new Long((-1226L));
      assertFalse(long2.equals((Object)long0));
      assertFalse(long2.equals((Object)long1));
      assertNotNull(long2);
      assertEquals((-1226L), (long)long2);
      
      Long long3 = new Long(1952L);
      assertFalse(long3.equals((Object)long0));
      assertFalse(long3.equals((Object)long2));
      assertFalse(long3.equals((Object)long1));
      assertNotNull(long3);
      assertEquals(1952L, (long)long3);
      
      Boolean boolean0 = Boolean.TRUE;
      assertNotNull(boolean0);
      assertTrue(boolean0);
      
      Boolean[] booleanArray0 = new Boolean[0];
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertNotNull(booleanArray1);
      
      int[] intArray0 = new int[8];
      intArray0[0] = (int) '~';
      intArray0[3] = (int) '~';
      intArray0[0] = 54;
      intArray0[5] = (int) '~';
      Character[] characterArray0 = new Character[0];
      Character[] characterArray1 = ArrayUtils.addAll(characterArray0, characterArray0);
      assertEquals(0, characterArray0.length);
      assertEquals(0, characterArray1.length);
      assertFalse(characterArray1.equals((Object)characterArray0));
      assertNotSame(characterArray0, characterArray1);
      assertNotSame(characterArray1, characterArray0);
      assertNotNull(characterArray1);
      
      Object[] objectArray0 = ArrayUtils.nullToEmpty((Object[]) booleanArray0);
      assertEquals(0, objectArray0.length);
      assertEquals(0, booleanArray0.length);
      assertNotNull(objectArray0);
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) 479L;
      floatArray0[1] = (-627.0F);
      floatArray0[2] = (float) 54;
      floatArray0[3] = (float) (-1226L);
      floatArray0[4] = (float) 54;
      floatArray0[5] = (float) '~';
      floatArray0[6] = (float) '~';
      floatArray0[7] = (float) 1952L;
      ArrayUtils.shift(floatArray0, 5040);
      assertArrayEquals(new float[] {479.0F, (-627.0F), 54.0F, (-1226.0F), 54.0F, 126.0F, 126.0F, 1952.0F}, floatArray0, 0.01F);
      assertEquals(8, floatArray0.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.add(floatArray0, 5040, 54.0F);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 5040, Length: 8
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0320()  throws Throwable  {
      short[] shortArray0 = new short[8];
      shortArray0[1] = (short)43;
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      BitSet bitSet0 = ArrayUtils.indexesOf(booleanArray0, true);
      assertEquals(2, bitSet0.length());
      assertEquals(2, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertEquals("{0, 1}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray0));
      assertEquals(2, booleanArray0.length);
      assertNotNull(bitSet0);
      
      Long long0 = new Long((short)43);
      assertNotNull(long0);
      assertEquals(43L, (long)long0);
      
      Character[] characterArray0 = new Character[6];
      Character character0 = new Character('R');
      assertNotNull(character0);
      assertEquals('R', (char)character0);
      
      characterArray0[0] = character0;
      Character character1 = new Character((char) character0);
      assertTrue(character1.equals((Object)character0));
      assertNotNull(character1);
      assertEquals('R', (char)character1);
      
      characterArray0[1] = character1;
      Character character2 = new Character(' ');
      assertFalse(character2.equals((Object)character1));
      assertFalse(character2.equals((Object)character0));
      assertNotNull(character2);
      assertEquals(' ', (char)character2);
      
      characterArray0[2] = character2;
      Character character3 = Character.valueOf('<');
      assertFalse(character3.equals((Object)character2));
      assertFalse(character3.equals((Object)character0));
      assertFalse(character3.equals((Object)character1));
      assertNotNull(character3);
      assertEquals('<', (char)character3);
      
      characterArray0[3] = character3;
      Character character4 = new Character((char) character2);
      assertFalse(character4.equals((Object)character3));
      assertFalse(character4.equals((Object)character0));
      assertFalse(character4.equals((Object)character1));
      assertTrue(character4.equals((Object)character2));
      assertFalse(character2.equals((Object)character1));
      assertFalse(character2.equals((Object)character0));
      assertFalse(character2.equals((Object)character3));
      assertNotNull(character4);
      assertEquals(' ', (char)character4);
      
      characterArray0[4] = character4;
      Character character5 = Character.valueOf('?');
      assertFalse(character5.equals((Object)character2));
      assertFalse(character5.equals((Object)character3));
      assertFalse(character5.equals((Object)character1));
      assertFalse(character5.equals((Object)character0));
      assertFalse(character5.equals((Object)character4));
      assertNotNull(character5);
      assertEquals('?', (char)character5);
      
      characterArray0[5] = character5;
      Character[] characterArray1 = ArrayUtils.addAll(characterArray0, characterArray0);
      assertEquals(12, characterArray1.length);
      assertEquals(6, characterArray0.length);
      assertFalse(characterArray1.equals((Object)characterArray0));
      assertNotSame(characterArray1, characterArray0);
      assertNotSame(characterArray0, characterArray1);
      assertNotNull(characterArray1);
  }

  @Test(timeout = 4000)
  public void test0321()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = false;
      char[] charArray0 = new char[0];
      char[] charArray1 = ArrayUtils.removeElement(charArray0, 'l');
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) ' ';
      floatArray0[1] = (float) ' ';
      floatArray0[2] = 0.0F;
      floatArray0[3] = (float) 'l';
      Object[] objectArray0 = new Object[7];
      Object object0 = ArrayUtils.get(objectArray0, 786);
      assertEquals(7, objectArray0.length);
      assertNull(object0);
      
      objectArray0[0] = null;
      objectArray0[1] = (Object) false;
      objectArray0[2] = (Object) 0.0F;
      objectArray0[3] = (Object) 0.0F;
      objectArray0[4] = (Object) 32.0F;
      objectArray0[5] = (Object) 32.0F;
      objectArray0[6] = (Object) false;
      ArrayUtils.shift(objectArray0, (-1451), (-3230), 90);
      assertEquals(7, objectArray0.length);
      
      int int0 = ArrayUtils.indexOf(objectArray0, (Object) null);
      assertEquals(7, objectArray0.length);
      assertEquals(0, int0);
      
      ArrayUtils.swap(objectArray0, (-3085), (-3230), 90);
      assertEquals(7, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test0322()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 571.942196047302;
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) 571.942196047302;
      objectArray0[1] = (Object) 0.0;
      objectArray0[2] = (Object) 0.0;
      objectArray0[3] = (Object) 0.0;
      objectArray0[4] = (Object) 0.0;
      objectArray0[5] = (Object) 571.942196047302;
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) 0;
      floatArray0[1] = (float) (-1916);
      floatArray0[2] = (float) (-1262);
      floatArray0[3] = (float) (-1262);
      floatArray0[4] = (float) (-1262);
      floatArray0[5] = 2495.8F;
      floatArray0[6] = (float) 0;
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray0, 0.0F);
      assertEquals(2, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertEquals("{0, 6}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(7, bitSet0.length());
      assertArrayEquals(new float[] {0.0F, (-1916.0F), (-1262.0F), (-1262.0F), (-1262.0F), 2495.8F, 0.0F}, floatArray0, 0.01F);
      assertEquals(7, floatArray0.length);
      assertNotNull(bitSet0);
      
      float[] floatArray1 = ArrayUtils.removeElement(floatArray0, (-1916.0F));
      assertArrayEquals(new float[] {0.0F, (-1262.0F), (-1262.0F), (-1262.0F), 2495.8F, 0.0F}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {0.0F, (-1916.0F), (-1262.0F), (-1262.0F), (-1262.0F), 2495.8F, 0.0F}, floatArray0, 0.01F);
      assertEquals(6, floatArray1.length);
      assertEquals(7, floatArray0.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertNotNull(floatArray1);
      
      char[] charArray0 = new char[8];
      charArray0[0] = '`';
      charArray0[1] = 'T';
      charArray0[2] = '5';
      charArray0[3] = 'g';
      charArray0[4] = 'z';
      charArray0[5] = 't';
      charArray0[6] = '6';
      charArray0[7] = '!';
      int int0 = ArrayUtils.indexOf(charArray0, '0', (-1262));
      assertArrayEquals(new char[] {'`', 'T', '5', 'g', 'z', 't', '6', '!'}, charArray0);
      assertEquals(8, charArray0.length);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0323()  throws Throwable  {
      ArrayUtils.swap((int[]) null, (-2147184749), (-2147184749), (-2147184749));
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      LongStream longStream0 = mockRandom0.longs();
      assertNotNull(longStream0);
      
      double double0 = mockRandom0.nextGaussian();
      assertEquals(0.0, double0, 0.01);
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'a';
      charArray0[1] = 'a';
      char[] charArray1 = ArrayUtils.removeAllOccurences(charArray0, '\\');
      assertArrayEquals(new char[] {'a', 'a'}, charArray0);
      assertArrayEquals(new char[] {'a', 'a'}, charArray1);
      assertEquals(2, charArray0.length);
      assertEquals(2, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      
      char[] charArray2 = ArrayUtils.nullToEmpty(charArray0);
      assertArrayEquals(new char[] {'a', 'a'}, charArray0);
      assertArrayEquals(new char[] {'a', 'a'}, charArray2);
      assertEquals(2, charArray0.length);
      assertEquals(2, charArray2.length);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray2.equals((Object)charArray1));
      assertNotSame(charArray0, charArray1);
      assertSame(charArray0, charArray2);
      assertNotSame(charArray2, charArray1);
      assertSame(charArray2, charArray0);
      assertNotNull(charArray2);
      
      ArrayUtils.reverse((int[]) null, Integer.MAX_VALUE, Integer.MAX_VALUE);
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) (-2147184749);
      floatArray0[1] = (float) (-2147184749);
      floatArray0[2] = (float) '\\';
      floatArray0[3] = 1713.691F;
      floatArray0[4] = (float) 'a';
      floatArray0[5] = (float) 'a';
      float[] floatArray1 = ArrayUtils.removeElement(floatArray0, (-1364.8F));
      assertArrayEquals(new float[] {(-2.14718477E9F), (-2.14718477E9F), 92.0F, 1713.691F, 97.0F, 97.0F}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {(-2.14718477E9F), (-2.14718477E9F), 92.0F, 1713.691F, 97.0F, 97.0F}, floatArray0, 0.01F);
      assertEquals(6, floatArray1.length);
      assertEquals(6, floatArray0.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertNotNull(floatArray1);
  }

  @Test(timeout = 4000)
  public void test0324()  throws Throwable  {
      BitSet bitSet0 = new BitSet();
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertNotNull(bitSet0);
      
      MutableInt mutableInt0 = new MutableInt((-2998));
      assertEquals((byte)74, mutableInt0.byteValue());
      assertEquals((-2998), (int)mutableInt0.getValue());
      assertEquals((-2998.0), mutableInt0.doubleValue(), 0.01);
      assertEquals((short) (-2998), mutableInt0.shortValue());
      assertEquals((-2998), mutableInt0.intValue());
      assertEquals((-2998.0F), mutableInt0.floatValue(), 0.01F);
      assertEquals((-2998L), mutableInt0.longValue());
      assertEquals((-2998), (int)mutableInt0.toInteger());
      assertEquals("-2998", mutableInt0.toString());
      assertNotNull(mutableInt0);
      
      Object[] objectArray0 = new Object[0];
      Character character0 = Character.valueOf('+');
      assertNotNull(character0);
      assertEquals('+', (char)character0);
      
      Object object0 = ArrayUtils.get(objectArray0, 1199, (Object) character0);
      assertEquals(0, objectArray0.length);
      assertNotNull(object0);
      assertEquals('+', object0);
      
      BitSet bitSet1 = ArrayUtils.indexesOf((int[]) null, 2915);
      assertTrue(bitSet1.isEmpty());
      assertEquals(64, bitSet1.size());
      assertEquals("{}", bitSet1.toString());
      assertEquals(0, bitSet1.cardinality());
      assertEquals(0, bitSet1.length());
      assertTrue(bitSet1.equals((Object)bitSet0));
      assertNotSame(bitSet1, bitSet0);
      assertNotNull(bitSet1);
      
      BitSet bitSet2 = bitSet1.get(2, 2115);
      assertTrue(bitSet1.isEmpty());
      assertEquals(64, bitSet1.size());
      assertEquals("{}", bitSet1.toString());
      assertEquals(0, bitSet1.cardinality());
      assertEquals(0, bitSet1.length());
      assertEquals(0, bitSet2.length());
      assertTrue(bitSet2.isEmpty());
      assertEquals(0, bitSet2.size());
      assertEquals("{}", bitSet2.toString());
      assertEquals(0, bitSet2.cardinality());
      assertTrue(bitSet1.equals((Object)bitSet0));
      assertTrue(bitSet2.equals((Object)bitSet1));
      assertTrue(bitSet2.equals((Object)bitSet0));
      assertNotSame(bitSet1, bitSet2);
      assertNotSame(bitSet1, bitSet0);
      assertNotSame(bitSet2, bitSet0);
      assertNotSame(bitSet2, bitSet1);
      assertNotNull(bitSet2);
      
      long[] longArray0 = new long[5];
      longArray0[0] = (long) 2115;
      longArray0[1] = (long) 2115;
      longArray0[2] = (-1L);
      longArray0[3] = (long) 2915;
      longArray0[4] = (-1122L);
      long[] longArray1 = ArrayUtils.removeElement(longArray0, (-1L));
      assertArrayEquals(new long[] {2115L, 2115L, (-1L), 2915L, (-1122L)}, longArray0);
      assertArrayEquals(new long[] {2115L, 2115L, 2915L, (-1122L)}, longArray1);
      assertEquals(5, longArray0.length);
      assertEquals(4, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
  }

  @Test(timeout = 4000)
  public void test0325()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = '~';
      Long long0 = new Long(495L);
      assertNotNull(long0);
      assertEquals(495L, (long)long0);
      
      char[] charArray1 = ArrayUtils.removeElement(charArray0, '~');
      assertArrayEquals(new char[] {'~', '\u0000'}, charArray0);
      assertArrayEquals(new char[] {'\u0000'}, charArray1);
      assertEquals(2, charArray0.length);
      assertEquals(1, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) '~';
      objectArray0[1] = (Object) long0;
      objectArray0[2] = (Object) '~';
      MutableInt mutableInt0 = new MutableInt(2146154980);
      assertEquals(2146154980, mutableInt0.intValue());
      assertEquals(2146154980, (int)mutableInt0.toInteger());
      assertEquals(2146154980, (int)mutableInt0.getValue());
      assertEquals(2.14615501E9F, mutableInt0.floatValue(), 0.01F);
      assertEquals(2.14615498E9, mutableInt0.doubleValue(), 0.01);
      assertEquals("2146154980", mutableInt0.toString());
      assertEquals((byte) (-28), mutableInt0.byteValue());
      assertEquals((short) (-17948), mutableInt0.shortValue());
      assertEquals(2146154980L, mutableInt0.longValue());
      assertNotNull(mutableInt0);
      
      MutableInt mutableInt1 = (MutableInt)ArrayUtils.get(objectArray0, 2146154980, (Object) mutableInt0);
      assertEquals(2146154980, mutableInt0.intValue());
      assertEquals(2146154980, (int)mutableInt0.toInteger());
      assertEquals(2146154980, (int)mutableInt0.getValue());
      assertEquals(2.14615501E9F, mutableInt0.floatValue(), 0.01F);
      assertEquals(2.14615498E9, mutableInt0.doubleValue(), 0.01);
      assertEquals("2146154980", mutableInt0.toString());
      assertEquals((byte) (-28), mutableInt0.byteValue());
      assertEquals((short) (-17948), mutableInt0.shortValue());
      assertEquals(2146154980L, mutableInt0.longValue());
      assertEquals(2146154980, mutableInt1.intValue());
      assertEquals(2.14615501E9F, mutableInt1.floatValue(), 0.01F);
      assertEquals(2.14615498E9, mutableInt1.doubleValue(), 0.01);
      assertEquals("2146154980", mutableInt1.toString());
      assertEquals(2146154980, (int)mutableInt1.toInteger());
      assertEquals((short) (-17948), mutableInt1.shortValue());
      assertEquals(2146154980L, mutableInt1.longValue());
      assertEquals(2146154980, (int)mutableInt1.getValue());
      assertEquals((byte) (-28), mutableInt1.byteValue());
      assertEquals(3, objectArray0.length);
      assertSame(mutableInt0, mutableInt1);
      assertSame(mutableInt1, mutableInt0);
      assertNotNull(mutableInt1);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((int[]) null, 2);
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertNotNull(bitSet0);
      
      BitSet bitSet1 = bitSet0.get(2, 2);
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet1.cardinality());
      assertEquals(0, bitSet1.length());
      assertTrue(bitSet1.isEmpty());
      assertEquals("{}", bitSet1.toString());
      assertEquals(0, bitSet1.size());
      assertTrue(bitSet1.equals((Object)bitSet0));
      assertNotSame(bitSet0, bitSet1);
      assertNotSame(bitSet1, bitSet0);
      assertNotNull(bitSet1);
      
      long[] longArray0 = new long[6];
      longArray0[0] = (long) '~';
      longArray0[1] = (long) '~';
      longArray0[2] = (-1122L);
      longArray0[3] = (long) '~';
      longArray0[4] = (long) 2;
      longArray0[5] = 495L;
      long[] longArray1 = ArrayUtils.removeElement(longArray0, (-1L));
      assertArrayEquals(new long[] {126L, 126L, (-1122L), 126L, 2L, 495L}, longArray1);
      assertArrayEquals(new long[] {126L, 126L, (-1122L), 126L, 2L, 495L}, longArray0);
      assertEquals(6, longArray1.length);
      assertEquals(6, longArray0.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray0, longArray1);
      assertNotNull(longArray1);
  }

  @Test(timeout = 4000)
  public void test0326()  throws Throwable  {
      Long long0 = new Long(495L);
      assertNotNull(long0);
      assertEquals(495L, (long)long0);
      
      Long long1 = new Long((-1223L));
      assertFalse(long1.equals((Object)long0));
      assertNotNull(long1);
      assertEquals((-1223L), (long)long1);
      
      Long long2 = new Long(1952L);
      assertFalse(long2.equals((Object)long1));
      assertFalse(long2.equals((Object)long0));
      assertNotNull(long2);
      assertEquals(1952L, (long)long2);
      
      Boolean[] booleanArray0 = new Boolean[0];
      boolean[] booleanArray1 = ArrayUtils.EMPTY_BOOLEAN_ARRAY;
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertEquals(0, booleanArray1.length);
      assertNotNull(booleanArray1);
      
      int[] intArray0 = new int[8];
      intArray0[4] = 54;
      Short[] shortArray0 = new Short[3];
      short short0 = (short)6;
      Short short1 = new Short((short)6);
      assertTrue(short1.equals((Object)short0));
      assertNotNull(short1);
      assertEquals((short)6, (short)short1);
      
      shortArray0[0] = short1;
      short short2 = (short) (-40);
      Short short3 = new Short((short) (-40));
      assertFalse(short3.equals((Object)short1));
      assertFalse(short3.equals((Object)short0));
      assertTrue(short3.equals((Object)short2));
      assertNotNull(short3);
      assertEquals((short) (-40), (short)short3);
      
      shortArray0[1] = short3;
      Short short4 = Short.valueOf((short) (-739));
      assertFalse(short4.equals((Object)short2));
      assertFalse(short4.equals((Object)short1));
      assertFalse(short4.equals((Object)short3));
      assertFalse(short4.equals((Object)short0));
      assertNotNull(short4);
      assertEquals((short) (-739), (short)short4);
      
      shortArray0[2] = short4;
      boolean boolean0 = ArrayUtils.isArrayIndexValid(shortArray0, (-115));
      assertEquals(3, shortArray0.length);
      assertFalse(boolean0);
      
      Object[] objectArray0 = ArrayUtils.EMPTY_OBJECT_ARRAY;
      assertEquals(0, objectArray0.length);
      assertNotNull(objectArray0);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) short2;
      doubleArray0[1] = (-1369.0395983980384);
      doubleArray0[2] = (double) 495L;
      doubleArray0[3] = (double) (-115);
      doubleArray0[4] = (double) short2;
      doubleArray0[5] = (double) (-1223L);
      int int0 = ArrayUtils.indexOf(doubleArray0, (double) short0, (int) (short) (-739));
      assertArrayEquals(new double[] {(-40.0), (-1369.0395983980384), 495.0, (-115.0), (-40.0), (-1223.0)}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      assertFalse(short0 == short2);
      assertEquals((-1), int0);
      
      double[] doubleArray1 = ArrayUtils.add(doubleArray0, (int) (short)6, (-40.0));
      assertArrayEquals(new double[] {(-40.0), (-1369.0395983980384), 495.0, (-115.0), (-40.0), (-1223.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-40.0), (-1369.0395983980384), 495.0, (-115.0), (-40.0), (-1223.0), (-40.0)}, doubleArray1, 0.01);
      assertEquals(6, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
  }

  @Test(timeout = 4000)
  public void test0327()  throws Throwable  {
      float[] floatArray0 = new float[1];
      floatArray0[0] = (-2239.035F);
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[2] = false;
      booleanArray0[5] = false;
      booleanArray0[6] = false;
      boolean boolean0 = ArrayUtils.isNotEmpty(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, true, false, false, false, false, false}, booleanArray0));
      assertEquals(7, booleanArray0.length);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = ArrayUtils.addFirst(doubleArray0, 1.5);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.5}, doubleArray1, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      
      boolean[] booleanArray1 = ArrayUtils.removeElement(booleanArray0, false);
      assertTrue(Arrays.equals(new boolean[] {false, true, false, false, false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, false, false, false, false, false}, booleanArray1));
      assertEquals(7, booleanArray0.length);
      assertEquals(6, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte)81;
      byte[] byteArray1 = ArrayUtils.add(byteArray0, (int) (byte)2, (byte)81);
      assertArrayEquals(new byte[] {(byte)2, (byte)81, (byte)81}, byteArray1);
      assertArrayEquals(new byte[] {(byte)2, (byte)81}, byteArray0);
      assertEquals(3, byteArray1.length);
      assertEquals(2, byteArray0.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotNull(byteArray1);
  }

  @Test(timeout = 4000)
  public void test0328()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[1] = 2063.283;
      int int0 = ArrayUtils.indexOf(doubleArray0, (-1915.0), 0);
      assertArrayEquals(new double[] {0.0, 2063.283}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals((-1), int0);
      
      double[] doubleArray1 = ArrayUtils.add(doubleArray0, 0, (-1915.0));
      assertArrayEquals(new double[] {0.0, 2063.283}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-1915.0), 0.0, 2063.283}, doubleArray1, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      
      Object[] objectArray0 = new Object[6];
      Object object0 = ArrayUtils.get((Object[]) null, 2481);
      assertNull(object0);
      
      objectArray0[0] = null;
      objectArray0[1] = (Object) 2063.283;
      Object[] objectArray1 = new Object[1];
      assertFalse(objectArray1.equals((Object)objectArray0));
      
      objectArray1[0] = (Object) 2063.283;
      Object object1 = ArrayUtils.get(objectArray1, (-1569), (Object) "*U.<='*MRZ3=@=n}4");
      assertEquals(1, objectArray1.length);
      assertFalse(objectArray1.equals((Object)objectArray0));
      assertNotSame(objectArray1, objectArray0);
      assertNotNull(object1);
      assertEquals("*U.<='*MRZ3=@=n}4", object1);
      
      objectArray0[2] = (Object) "*U.<='*MRZ3=@=n}4";
      objectArray0[3] = (Object) 2063.283;
      objectArray0[4] = (Object) 2063.283;
      objectArray0[5] = (Object) 2063.283;
      int int1 = ArrayUtils.indexOf(objectArray0, (Object) "*U.<='*MRZ3=@=n}4", (-2099761788));
      assertEquals(6, objectArray0.length);
      assertFalse(objectArray0.equals((Object)objectArray1));
      assertFalse(int1 == int0);
      assertNotSame(objectArray0, objectArray1);
      assertEquals(2, int1);
  }

  @Test(timeout = 4000)
  public void test0329()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)9;
      byteArray0[1] = (byte) (-44);
      byteArray0[2] = (byte) (-39);
      byteArray0[3] = (byte)2;
      byteArray0[4] = (byte)51;
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) (byte)0;
      floatArray0[1] = (float) (byte)51;
      float[] floatArray1 = ArrayUtils.removeElement(floatArray0, (float) (byte)51);
      assertArrayEquals(new float[] {0.0F, 51.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F}, floatArray1, 0.01F);
      assertEquals(2, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      
      Long long0 = new Long((byte)51);
      assertNotNull(long0);
      assertEquals(51L, (long)long0);
      
      String string0 = ArrayUtils.toString((Object) long0);
      assertNotNull(string0);
      assertEquals("51", string0);
      
      ArrayUtils.swap(byteArray0, 0, (int) (byte) (-44), 99);
      assertArrayEquals(new byte[] {(byte)9, (byte) (-44), (byte) (-39), (byte)2, (byte)51, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(9, byteArray0.length);
      
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) (byte)2;
      objectArray0[1] = (Object) (byte) (-39);
      objectArray0[2] = (Object) (byte)9;
      objectArray0[3] = (Object) "51";
      objectArray0[4] = (Object) (byte)9;
      objectArray0[5] = (Object) (byte)51;
      // Undeclared exception!
      try { 
        ArrayUtils.toMap(objectArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array element 0, '2', is neither of type Map.Entry nor an Array
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0330()  throws Throwable  {
      long[] longArray0 = new long[4];
      longArray0[0] = (long) (byte) (-39);
      longArray0[1] = (long) (byte)6;
      longArray0[3] = (long) (byte) (-39);
      long[] longArray1 = ArrayUtils.removeAllOccurrences(longArray0, (-44L));
      assertArrayEquals(new long[] {(-39L), 6L, 0L, (-39L)}, longArray0);
      assertArrayEquals(new long[] {(-39L), 6L, 0L, (-39L)}, longArray1);
      assertEquals(4, longArray0.length);
      assertEquals(4, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
      
      int int0 = ArrayUtils.lastIndexOf((Object[]) null, (Object) null, (-883));
      assertEquals((-1), int0);
      
      MutableInt mutableInt0 = new MutableInt(354);
      assertEquals(354, mutableInt0.intValue());
      assertEquals(354L, mutableInt0.longValue());
      assertEquals("354", mutableInt0.toString());
      assertEquals(354.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(354.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals((short)354, mutableInt0.shortValue());
      assertEquals(354, (int)mutableInt0.toInteger());
      assertEquals((byte)98, mutableInt0.byteValue());
      assertEquals(354, (int)mutableInt0.getValue());
      assertNotNull(mutableInt0);
      
      int int1 = ArrayUtils.lastIndexOf((Object[]) null, (Object) mutableInt0, (-883));
      assertEquals(354, mutableInt0.intValue());
      assertEquals(354L, mutableInt0.longValue());
      assertEquals("354", mutableInt0.toString());
      assertEquals(354.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(354.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals((short)354, mutableInt0.shortValue());
      assertEquals(354, (int)mutableInt0.toInteger());
      assertEquals((byte)98, mutableInt0.byteValue());
      assertEquals(354, (int)mutableInt0.getValue());
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short) (byte)6;
      shortArray0[1] = (short)1;
      shortArray0[2] = (short) (byte) (-39);
      BitSet bitSet0 = ArrayUtils.indexesOf(shortArray0, (short) (-1386), (-553));
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertArrayEquals(new short[] {(short)6, (short)1, (short) (-39)}, shortArray0);
      assertEquals(3, shortArray0.length);
      assertNotNull(bitSet0);
  }

  @Test(timeout = 4000)
  public void test0331()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      boolean boolean0 = ArrayUtils.contains(booleanArray0, false);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      assertEquals(2, booleanArray0.length);
      assertTrue(boolean0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Boolean boolean1 = Boolean.TRUE;
      assertTrue(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      assertTrue(boolean1);
      
      Boolean boolean2 = new Boolean("Mo+&VnO]V|");
      assertFalse(boolean2.equals((Object)boolean1));
      assertFalse(boolean2.equals((Object)boolean0));
      assertNotNull(boolean2);
      assertFalse(boolean2);
      
      int int0 = ArrayUtils.lastIndexOf((Object[]) null, (Object) boolean2, (-1452));
      assertFalse(boolean2.equals((Object)boolean1));
      assertFalse(boolean2.equals((Object)boolean0));
      assertEquals((-1), int0);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (-45.395103F);
      floatArray0[1] = (float) (-1);
      floatArray0[2] = (float) (-1);
      float[] floatArray1 = ArrayUtils.addAll(floatArray0, floatArray0);
      assertArrayEquals(new float[] {(-45.395103F), (-1.0F), (-1.0F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-45.395103F), (-1.0F), (-1.0F), (-45.395103F), (-1.0F), (-1.0F)}, floatArray1, 0.01F);
      assertEquals(3, floatArray0.length);
      assertEquals(6, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
  }

  @Test(timeout = 4000)
  public void test0332()  throws Throwable  {
      Byte[] byteArray0 = new Byte[2];
      Byte byte0 = new Byte((byte)51);
      assertNotNull(byte0);
      assertEquals((byte)51, (byte)byte0);
      
      byteArray0[0] = byte0;
      double double0 = 2376.44862034;
      BitSet bitSet0 = ArrayUtils.indexesOf((double[]) null, 2376.44862034, (-828), 0.0);
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertNotNull(bitSet0);
      
      char[] charArray0 = new char[5];
      charArray0[0] = '#';
      charArray0[1] = '#';
      charArray0[2] = '#';
      charArray0[3] = '#';
      charArray0[4] = 'y';
      // Undeclared exception!
      try { 
        ArrayUtils.add(charArray0, (-828), '#');
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -828, Length: 5
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0333()  throws Throwable  {
      boolean[] booleanArray0 = null;
      char[] charArray0 = new char[2];
      charArray0[1] = 'D';
      ArrayUtils.shift(charArray0, (int) 'D');
      assertArrayEquals(new char[] {'\u0000', 'D'}, charArray0);
      assertEquals(2, charArray0.length);
      
      Character character0 = Character.valueOf('{');
      assertNotNull(character0);
      assertEquals('{', (char)character0);
      
      Character character1 = Character.valueOf('4');
      assertFalse(character1.equals((Object)character0));
      assertNotNull(character1);
      assertEquals('4', (char)character1);
      
      Character character2 = Character.valueOf('\\');
      assertFalse(character2.equals((Object)character0));
      assertFalse(character2.equals((Object)character1));
      assertNotNull(character2);
      assertEquals('\\', (char)character2);
      
      boolean[] booleanArray1 = ArrayUtils.subarray((boolean[]) null, (int) 'D', 1309);
      assertNull(booleanArray1);
      
      try { 
        Byte.valueOf("Dz4 ALGz@");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"Dz4 ALGz@\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test0334()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)61;
      byteArray0[2] = (byte) (-22);
      byte byte0 = (byte)0;
      float[] floatArray0 = new float[8];
      int int0 = ArrayUtils.lastIndexOf(floatArray0, (float) (byte)1, (int) (byte) (-22));
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(8, floatArray0.length);
      assertEquals((-1), int0);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-3132.52324031);
      // Undeclared exception!
      try { 
        ArrayUtils.insert((int) (byte)61, doubleArray0, doubleArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 61, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0335()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byte[] byteArray1 = ArrayUtils.removeAllOccurences(byteArray0, (byte) (-85));
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray1);
      assertEquals(5, byteArray0.length);
      assertEquals(5, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 'm';
      doubleArray0[1] = (double) 'c';
      doubleArray0[2] = (-39.0);
      doubleArray0[3] = (double) (byte) (-85);
      doubleArray0[4] = (double) (byte) (-85);
      ArrayUtils.shuffle(doubleArray0);
      assertArrayEquals(new double[] {99.0, (-39.0), (-85.0), (-85.0), 109.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      
      double[] doubleArray1 = new double[3];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 1.0;
      doubleArray1[1] = (-39.0);
      doubleArray1[2] = (double) 'c';
      double[] doubleArray2 = ArrayUtils.addFirst(doubleArray1, (-39.0));
      assertArrayEquals(new double[] {1.0, (-39.0), 99.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {(-39.0), 1.0, (-39.0), 99.0}, doubleArray2, 0.01);
      assertEquals(3, doubleArray1.length);
      assertEquals(4, doubleArray2.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotNull(doubleArray2);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) 'm';
      floatArray0[1] = 13.1876335F;
      floatArray0[2] = 13.1876335F;
      floatArray0[3] = (float) 97;
      int int0 = ArrayUtils.lastIndexOf(floatArray0, 13.1876335F, (int) (byte) (-85));
      assertArrayEquals(new float[] {109.0F, 13.1876335F, 13.1876335F, 97.0F}, floatArray0, 0.01F);
      assertEquals(4, floatArray0.length);
      assertEquals((-1), int0);
      
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short) (byte)78;
      shortArray0[1] = (short) (byte) (-85);
      shortArray0[2] = (short) (byte) (-85);
      shortArray0[3] = (short)2;
      shortArray0[4] = (short) (byte) (-85);
      short[] shortArray1 = ArrayUtils.removeAllOccurrences(shortArray0, (short)78);
      assertArrayEquals(new short[] {(short)78, (short) (-85), (short) (-85), (short)2, (short) (-85)}, shortArray0);
      assertArrayEquals(new short[] {(short) (-85), (short) (-85), (short)2, (short) (-85)}, shortArray1);
      assertEquals(5, shortArray0.length);
      assertEquals(4, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      
      // Undeclared exception!
      try { 
        ArrayUtils.insert(97, doubleArray2, doubleArray2);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 97, Length: 4
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0336()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byte byte0 = (byte)2;
      byteArray0[0] = (byte)2;
      int[] intArray0 = new int[0];
      int[] intArray1 = ArrayUtils.add(intArray0, (int) (byte)2);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {2}, intArray1);
      assertEquals(0, intArray0.length);
      assertEquals(1, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      
      char char0 = 'g';
      Character character0 = Character.valueOf('g');
      assertNotNull(character0);
      assertEquals('g', (char)character0);
      
      Character character1 = Character.valueOf('g');
      assertNotNull(character1);
      assertEquals('g', (char)character1);
      
      Character character2 = Character.valueOf('g');
      assertNotNull(character2);
      assertEquals('g', (char)character2);
      
      Character character3 = Character.valueOf('\\');
      assertFalse(character3.equals((Object)character2));
      assertFalse(character3.equals((Object)character0));
      assertFalse(character3.equals((Object)character1));
      assertFalse(character3.equals((Object)char0));
      assertNotNull(character3);
      assertEquals('\\', (char)character3);
      
      Character character4 = Character.valueOf('g');
      assertFalse(character4.equals((Object)character3));
      assertNotNull(character4);
      assertEquals('g', (char)character4);
      
      Character[] characterArray0 = new Character[3];
      characterArray0[0] = character1;
      characterArray0[2] = character4;
      // Undeclared exception!
      try { 
        ArrayUtils.toPrimitive(characterArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0337()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 914.944001638755;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (-1202.7635315971), 0.0);
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertArrayEquals(new double[] {0.0, 914.944001638755, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      assertNotNull(bitSet0);
      
      Float[] floatArray0 = new Float[2];
      Float float0 = new Float(0.0F);
      assertNotNull(float0);
      assertEquals(0.0F, (float)float0, 0.01F);
      
      floatArray0[0] = float0;
      Float float1 = new Float((-1789.9796F));
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertNotNull(float1);
      assertEquals((-1789.9796F), (float)float1, 0.01F);
      
      floatArray0[1] = float1;
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0);
      assertArrayEquals(new float[] {0.0F, (-1789.9796F)}, floatArray1, 0.01F);
      assertEquals(2, floatArray0.length);
      assertEquals(2, floatArray1.length);
      assertNotNull(floatArray1);
      
      Class<Float>[] classArray0 = (Class<Float>[]) Array.newInstance(Class.class, 7);
      Class<Float> class0 = Float.class;
      classArray0[0] = class0;
      Class<Float> class1 = Float.class;
      classArray0[1] = class1;
      Class<Float> class2 = Float.class;
      classArray0[1] = class2;
      Class<Float> class3 = Float.class;
      classArray0[3] = class3;
      Class<Float> class4 = Float.class;
      classArray0[4] = class4;
      Class<Float> class5 = Float.class;
      classArray0[5] = class5;
      Class<Float> class6 = Float.class;
      classArray0[6] = class6;
      Class<?>[] classArray1 = ArrayUtils.nullToEmpty(classArray0);
      assertEquals(7, classArray1.length);
      assertEquals(7, classArray0.length);
      assertNotNull(classArray1);
      
      boolean boolean0 = ArrayUtils.isEmpty(floatArray1);
      assertArrayEquals(new float[] {0.0F, (-1789.9796F)}, floatArray1, 0.01F);
      assertEquals(2, floatArray0.length);
      assertEquals(2, floatArray1.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0338()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)17;
      byteArray0[1] = (byte)0;
      Long long0 = new Long(0L);
      assertNotNull(long0);
      assertEquals(0L, (long)long0);
      
      Long long1 = new Long((-2880L));
      assertFalse(long1.equals((Object)long0));
      assertNotNull(long1);
      assertEquals((-2880L), (long)long1);
      
      Long long2 = new Long(0L);
      assertTrue(long2.equals((Object)long0));
      assertFalse(long2.equals((Object)long1));
      assertNotNull(long2);
      assertEquals(0L, (long)long2);
      
      Long[] longArray0 = new Long[1];
      longArray0[0] = long1;
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0, 0L);
      assertArrayEquals(new long[] {(-2880L)}, longArray1);
      assertEquals(1, longArray0.length);
      assertEquals(1, longArray1.length);
      assertNotNull(longArray1);
      
      ArrayUtils.reverse((Object[]) longArray0, (int) (byte)17, (int) (byte)0);
      assertEquals(1, longArray0.length);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (-2768.0142F);
      floatArray0[1] = (float) 0L;
      floatArray0[2] = (float) (long)longArray0[0];
      floatArray0[3] = (-1.0F);
      int int0 = ArrayUtils.lastIndexOf(floatArray0, (-1317.4752F), (-889));
      assertArrayEquals(new float[] {(-2768.0142F), 0.0F, (-2880.0F), (-1.0F)}, floatArray0, 0.01F);
      assertEquals(4, floatArray0.length);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0339()  throws Throwable  {
      float[] floatArray0 = new float[3];
      floatArray0[0] = (-2005.7074F);
      floatArray0[1] = (float) (-2552);
      floatArray0[2] = (-2005.7074F);
      int int0 = ArrayUtils.lastIndexOf(floatArray0, (-2408.5818F), (-2552));
      assertArrayEquals(new float[] {(-2005.7074F), (-2552.0F), (-2005.7074F)}, floatArray0, 0.01F);
      assertEquals(3, floatArray0.length);
      assertEquals((-1), int0);
      
      Float[] floatArray1 = new Float[9];
      floatArray1[0] = (Float) (-2552.0F);
      floatArray1[1] = (Float) (-2005.7074F);
      floatArray1[2] = (Float) (-2552.0F);
      floatArray1[3] = (Float) (-2552.0F);
      floatArray1[5] = (Float) (-2005.7074F);
      floatArray1[6] = (Float) (-2552.0F);
      floatArray1[7] = (Float) (-2552.0F);
      floatArray1[8] = (Float) (-2005.7074F);
  }

  @Test(timeout = 4000)
  public void test0340()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)89;
      byteArray0[1] = (byte) (-101);
      byteArray0[2] = (byte)89;
      byteArray0[3] = (byte)89;
      byteArray0[4] = (byte) (-101);
      byteArray0[5] = (byte)89;
      boolean boolean0 = ArrayUtils.isSameLength(byteArray0, byteArray0);
      assertArrayEquals(new byte[] {(byte)89, (byte) (-101), (byte)89, (byte)89, (byte) (-101), (byte)89}, byteArray0);
      assertEquals(6, byteArray0.length);
      assertTrue(boolean0);
      
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short) (byte) (-101);
      shortArray0[1] = (short) (byte) (-101);
      shortArray0[2] = (short) (byte)89;
      shortArray0[3] = (short)22;
      shortArray0[4] = (short) (byte) (-101);
      shortArray0[5] = (short) (byte)89;
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short)89);
      assertArrayEquals(new short[] {(short) (-101), (short) (-101), (short)89, (short)22, (short) (-101), (short)89}, shortArray0);
      assertEquals(6, shortArray0.length);
      assertEquals(5, int0);
      
      char[] charArray0 = new char[3];
      charArray0[0] = '(';
      charArray0[1] = '|';
      charArray0[2] = 'o';
      Character[] characterArray0 = ArrayUtils.toObject(charArray0);
      assertArrayEquals(new char[] {'(', '|', 'o'}, charArray0);
      assertEquals(3, charArray0.length);
      assertEquals(3, characterArray0.length);
      assertNotNull(characterArray0);
  }

  @Test(timeout = 4000)
  public void test0341()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)5;
      byteArray0[1] = (byte)99;
      byteArray0[2] = (byte)5;
      byte[] byteArray1 = ArrayUtils.removeElement(byteArray0, (byte) (-108));
      assertArrayEquals(new byte[] {(byte)5, (byte)99, (byte)5}, byteArray0);
      assertArrayEquals(new byte[] {(byte)5, (byte)99, (byte)5}, byteArray1);
      assertEquals(3, byteArray0.length);
      assertEquals(3, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) (byte)5;
      floatArray0[1] = (float) (byte) (-108);
      int int0 = ArrayUtils.indexOf(floatArray0, (float) (byte)5, (int) (byte)5);
      assertArrayEquals(new float[] {5.0F, (-108.0F)}, floatArray0, 0.01F);
      assertEquals(2, floatArray0.length);
      assertEquals((-1), int0);
      
      MutableInt mutableInt0 = new MutableInt((-108.0F));
      assertEquals((-108), (int)mutableInt0.toInteger());
      assertEquals((-108), (int)mutableInt0.getValue());
      assertEquals((byte) (-108), mutableInt0.byteValue());
      assertEquals((-108L), mutableInt0.longValue());
      assertEquals((-108), mutableInt0.intValue());
      assertEquals("-108", mutableInt0.toString());
      assertEquals((short) (-108), mutableInt0.shortValue());
      assertEquals((-108.0), mutableInt0.doubleValue(), 0.01);
      assertEquals((-108.0F), mutableInt0.floatValue(), 0.01F);
      assertNotNull(mutableInt0);
      
      boolean boolean0 = ArrayUtils.isEquals((Object) null, mutableInt0);
      assertEquals((-108), (int)mutableInt0.toInteger());
      assertEquals((-108), (int)mutableInt0.getValue());
      assertEquals((byte) (-108), mutableInt0.byteValue());
      assertEquals((-108L), mutableInt0.longValue());
      assertEquals((-108), mutableInt0.intValue());
      assertEquals("-108", mutableInt0.toString());
      assertEquals((short) (-108), mutableInt0.shortValue());
      assertEquals((-108.0), mutableInt0.doubleValue(), 0.01);
      assertEquals((-108.0F), mutableInt0.floatValue(), 0.01F);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0342()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[4] = (byte) (-39);
      byteArray0[2] = (byte)0;
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) (byte)0;
      doubleArray0[1] = (double) (byte) (-39);
      doubleArray0[2] = (double) (byte) (-39);
      doubleArray0[4] = (double) (byte)0;
      Byte byte0 = new Byte((byte)0);
      assertNotNull(byte0);
      assertEquals((byte)0, (byte)byte0);
      
      boolean boolean0 = ArrayUtils.contains(doubleArray0, (double) (byte)0, (-1548.2755));
      assertArrayEquals(new double[] {0.0, (-39.0), (-39.0), 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      assertFalse(boolean0);
      
      int int0 = ArrayUtils.indexOf(doubleArray0, (-39.0), (-39.0));
      assertArrayEquals(new double[] {0.0, (-39.0), (-39.0), 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      assertEquals((-1), int0);
      
      boolean boolean1 = ArrayUtils.isSameLength((int[]) null, (int[]) null);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      char[] charArray0 = new char[0];
      char[] charArray1 = ArrayUtils.addAll(charArray0, charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      
      byte[] byteArray1 = ArrayUtils.removeElement(byteArray0, (byte)0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte) (-39), (byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte) (-39), (byte)0, (byte)0, (byte)0}, byteArray1);
      assertEquals(8, byteArray0.length);
      assertEquals(7, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
  }

  @Test(timeout = 4000)
  public void test0343()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = '~';
      int[] intArray0 = new int[7];
      intArray0[0] = (int) '~';
      intArray0[1] = 3537;
      intArray0[2] = (int) '~';
      intArray0[3] = (int) '~';
      intArray0[4] = (int) '~';
      intArray0[5] = (int) '~';
      intArray0[6] = 3044;
      ArrayUtils.swap(intArray0, 126, 3537);
      assertArrayEquals(new int[] {126, 3537, 126, 126, 126, 126, 3044}, intArray0);
      assertEquals(7, intArray0.length);
      
      float[] floatArray0 = new float[0];
      float[] floatArray1 = ArrayUtils.removeAllOccurrences(floatArray0, (float) 126);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)22;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)95;
      byteArray0[3] = (byte) (-57);
      byteArray0[4] = (byte)33;
      byteArray0[5] = (byte) (-7);
      byte[] byteArray1 = ArrayUtils.removeElement(byteArray0, (byte)88);
      assertArrayEquals(new byte[] {(byte)22, (byte)0, (byte)95, (byte) (-57), (byte)33, (byte) (-7)}, byteArray1);
      assertArrayEquals(new byte[] {(byte)22, (byte)0, (byte)95, (byte) (-57), (byte)33, (byte) (-7)}, byteArray0);
      assertEquals(6, byteArray1.length);
      assertEquals(6, byteArray0.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotNull(byteArray1);
      
      int int0 = ArrayUtils.indexOf(floatArray1, (-1569.2864F));
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0344()  throws Throwable  {
      Boolean boolean0 = new Boolean((String) null);
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      Long[] longArray0 = new Long[2];
      Long long0 = new Long(1L);
      assertNotNull(long0);
      assertEquals(1L, (long)long0);
      
      longArray0[0] = long0;
      Long long1 = new Long(2);
      assertFalse(long1.equals((Object)long0));
      assertNotNull(long1);
      assertEquals(2L, (long)long1);
      
      longArray0[1] = long1;
      Long[] longArray1 = ArrayUtils.subarray(longArray0, 2706, 2706);
      assertEquals(2, longArray0.length);
      assertEquals(0, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
      
      boolean boolean1 = ArrayUtils.isSorted((char[]) null);
      assertTrue(boolean1);
      
      long[] longArray2 = ArrayUtils.addAll((long[]) null, (long[]) null);
      assertNull(longArray2);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      char[] charArray0 = ArrayUtils.insert(2706, (char[]) null, (char[]) null);
      assertNull(charArray0);
  }

  @Test(timeout = 4000)
  public void test0345()  throws Throwable  {
      short[] shortArray0 = new short[0];
      ArrayUtils.reverse(shortArray0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray0.length);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 2750.6832208665714;
      doubleArray0[1] = 85.0;
      doubleArray0[2] = (-1489.10046);
      doubleArray0[3] = 313.07294126;
      doubleArray0[4] = 76.6041243581546;
      doubleArray0[5] = (-345.87729100814965);
      doubleArray0[6] = 0.0;
      int int0 = ArrayUtils.indexOf(doubleArray0, (-345.87729100814965), 1828, (-345.87729100814965));
      assertArrayEquals(new double[] {2750.6832208665714, 85.0, (-1489.10046), 313.07294126, 76.6041243581546, (-345.87729100814965), 0.0}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
      assertEquals((-1), int0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)108;
      byteArray0[1] = (byte)59;
      byteArray0[2] = (byte)108;
      ArrayUtils.swap(byteArray0, (-1), 2);
      assertArrayEquals(new byte[] {(byte)108, (byte)59, (byte)108}, byteArray0);
      assertEquals(3, byteArray0.length);
      
      char[] charArray0 = ArrayUtils.insert(2, (char[]) null, (char[]) null);
      assertNull(charArray0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(byteArray0, (byte)108);
      assertEquals(64, bitSet0.size());
      assertEquals(2, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertEquals("{0, 2}", bitSet0.toString());
      assertEquals(3, bitSet0.length());
      assertArrayEquals(new byte[] {(byte)108, (byte)59, (byte)108}, byteArray0);
      assertEquals(3, byteArray0.length);
      assertNotNull(bitSet0);
  }

  @Test(timeout = 4000)
  public void test0346()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)1;
      float[] floatArray0 = new float[2];
      floatArray0[0] = 1.0F;
      floatArray0[1] = 1192.67F;
      ArrayUtils.reverse(floatArray0, (int) (byte)1, 13);
      assertArrayEquals(new float[] {1.0F, 1192.67F}, floatArray0, 0.01F);
      assertEquals(2, floatArray0.length);
      
      Double double0 = new Double((-3021.60676989));
      assertNotNull(double0);
      assertEquals((-3021.60676989), (double)double0, 0.01);
      
      Double double1 = new Double(1.0F);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      assertEquals(1.0, (double)double1, 0.01);
      
      Double double2 = new Double(980.84032930317);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertNotNull(double2);
      assertEquals(980.84032930317, (double)double2, 0.01);
      
      Double double3 = new Double((-1375.5));
      assertNotEquals((double)double3, (double)double2, 0.01);
      assertNotEquals((double)double3, (double)double0, 0.01);
      assertNotEquals((double)double3, (double)double1, 0.01);
      assertNotNull(double3);
      assertEquals((-1375.5), (double)double3, 0.01);
      
      Double double4 = new Double(13);
      assertNotEquals((double)double4, (double)double2, 0.01);
      assertNotEquals((double)double4, (double)double1, 0.01);
      assertNotEquals((double)double4, (double)double3, 0.01);
      assertNotEquals((double)double4, (double)double0, 0.01);
      assertNotNull(double4);
      assertEquals(13.0, (double)double4, 0.01);
      
      Double double5 = new Double(0.7);
      assertNotEquals((double)double5, (double)double3, 0.01);
      assertNotEquals((double)double5, (double)double0, 0.01);
      assertNotEquals((double)double5, (double)double1, 0.01);
      assertNotEquals((double)double5, (double)double4, 0.01);
      assertNotEquals((double)double5, (double)double2, 0.01);
      assertNotNull(double5);
      assertEquals(0.7, (double)double5, 0.01);
      
      Double[] doubleArray0 = new Double[2];
      doubleArray0[0] = double4;
      doubleArray0[1] = double3;
      Double[] doubleArray1 = ArrayUtils.nullToEmpty(doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertSame(doubleArray0, doubleArray1);
      assertSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      
      float[] floatArray1 = ArrayUtils.insert((int) (byte)1, floatArray0, floatArray0);
      assertArrayEquals(new float[] {1.0F, 1.0F, 1192.67F, 1192.67F}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {1.0F, 1192.67F}, floatArray0, 0.01F);
      assertEquals(4, floatArray1.length);
      assertEquals(2, floatArray0.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertNotNull(floatArray1);
      
      int[] intArray0 = new int[7];
      intArray0[0] = (int) (byte)1;
      intArray0[1] = 13;
      intArray0[2] = (int) (byte)1;
      intArray0[3] = (int) (byte)1;
      intArray0[4] = 13;
      intArray0[5] = (int) (byte)1;
      intArray0[6] = 13;
      int int0 = ArrayUtils.indexOf(intArray0, 1, 1);
      assertArrayEquals(new int[] {1, 13, 1, 1, 13, 1, 13}, intArray0);
      assertEquals(7, intArray0.length);
      assertEquals(2, int0);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      boolean[] booleanArray1 = ArrayUtils.removeAllOccurences(booleanArray0, true);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray1));
      assertEquals(2, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
  }

  @Test(timeout = 4000)
  public void test0347()  throws Throwable  {
      Object[] objectArray0 = new Object[12];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[8] = object0;
      Character character0 = new Character('k');
      assertNotNull(character0);
      assertEquals('k', (char)character0);
      
      Object object1 = ArrayUtils.get(objectArray0, 48, (Object) character0);
      assertEquals(12, objectArray0.length);
      assertNotNull(object1);
      assertEquals('k', object1);
      
      objectArray0[1] = object1;
      Double double0 = new Double(48);
      assertNotNull(double0);
      assertEquals(48.0, (double)double0, 0.01);
      
      int int0 = ArrayUtils.indexOf(objectArray0, (Object) double0, 48);
      assertEquals(12, objectArray0.length);
      assertEquals((-1), int0);
      
      long[] longArray0 = new long[5];
      longArray0[0] = (long) (-1);
      longArray0[1] = (long) 48;
      longArray0[2] = (long) 48;
      longArray0[3] = (long) 'k';
      longArray0[4] = (long) 'Y';
      ArrayUtils.reverse(longArray0, 3191, (-1668));
      assertArrayEquals(new long[] {(-1L), 48L, 48L, 107L, 89L}, longArray0);
      assertEquals(5, longArray0.length);
      
      Long long0 = new Long(48);
      assertNotNull(long0);
      assertEquals(48L, (long)long0);
      
      Float float0 = new Float((double) 48L);
      assertNotNull(float0);
      assertEquals(48.0F, (float)float0, 0.01F);
      
      String string0 = ArrayUtils.toString((Object) float0);
      assertNotNull(string0);
      assertEquals("48.0", string0);
      
      int[] intArray0 = ArrayUtils.removeAllOccurrences((int[]) null, 48);
      assertNull(intArray0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((int[]) null, 53);
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertNotNull(bitSet0);
      
      Object object2 = ArrayUtils.removeAll((Object) null, bitSet0);
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertNull(object2);
      
      int int1 = ArrayUtils.indexOf((short[]) null, (short) (-6425), 0);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test0348()  throws Throwable  {
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) (byte) (-42);
      floatArray0[1] = (float) (byte)0;
      floatArray0[2] = (float) (byte)0;
      floatArray0[3] = (float) (byte)0;
      floatArray0[4] = (float) (byte) (-42);
      ArrayUtils.reverse(floatArray0);
      assertArrayEquals(new float[] {(-42.0F), 0.0F, 0.0F, 0.0F, (-42.0F)}, floatArray0, 0.01F);
      assertEquals(5, floatArray0.length);
      
      Long long0 = new Long((-1L));
      assertNotNull(long0);
      assertEquals((-1L), (long)long0);
      
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      booleanArray0[6] = false;
      booleanArray0[7] = false;
      ArrayUtils.swap(booleanArray0, (-105), (-601), (-105));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false, false}, booleanArray0));
      assertEquals(8, booleanArray0.length);
      
      ArrayUtils.reverse(floatArray0, 1151, 1327);
      assertArrayEquals(new float[] {(-42.0F), 0.0F, 0.0F, 0.0F, (-42.0F)}, floatArray0, 0.01F);
      assertEquals(5, floatArray0.length);
      
      float[] floatArray1 = ArrayUtils.removeElements(floatArray0, floatArray0);
      assertArrayEquals(new float[] {(-42.0F), 0.0F, 0.0F, 0.0F, (-42.0F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertEquals(5, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
  }

  @Test(timeout = 4000)
  public void test0349()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = 196;
      int[] intArray1 = ArrayUtils.subarray(intArray0, 0, 0);
      assertArrayEquals(new int[] {196, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(8, intArray0.length);
      assertEquals(0, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) 196;
      objectArray0[1] = (Object) 196;
      String[] stringArray0 = ArrayUtils.toStringArray(objectArray0);
      assertEquals(2, objectArray0.length);
      assertEquals(2, stringArray0.length);
      assertNotNull(stringArray0);
      
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = false;
      booleanArray0[5] = true;
      booleanArray0[6] = true;
      booleanArray0[7] = false;
      booleanArray0[8] = true;
      ArrayUtils.shift(booleanArray0, 89);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, false, true, true, false, true, true}, booleanArray0));
      assertEquals(9, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test0350()  throws Throwable  {
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short)1964;
      shortArray0[2] = (short)2151;
      shortArray0[3] = (short)1;
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) (short)1964;
      doubleArray0[1] = (double) (short)1964;
      doubleArray0[2] = (double) (short)1;
      doubleArray0[3] = (double) (short)1;
      doubleArray0[4] = (double) (short)2151;
      doubleArray0[5] = (double) (short)1;
      doubleArray0[6] = (double) (short)2151;
      doubleArray0[7] = (double) (short)1;
      doubleArray0[8] = (double) (short)1382;
      int int0 = new Short((short)1);
      assertEquals((short)1, int0);
      
      int[] intArray0 = new int[2];
      intArray0[0] = (int) (short)1964;
      intArray0[1] = (int) (short)1382;
      int[] intArray1 = ArrayUtils.addAll(intArray0, intArray0);
      assertArrayEquals(new int[] {1964, 1382, 1964, 1382}, intArray1);
      assertArrayEquals(new int[] {1964, 1382}, intArray0);
      assertEquals(4, intArray1.length);
      assertEquals(2, intArray0.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
      assertNotNull(intArray1);
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) 1382;
      floatArray0[1] = (float) (short)1;
      floatArray0[2] = (float) (short)1964;
      floatArray0[3] = (float) 1382;
      floatArray0[4] = (float) (short)2151;
      floatArray0[5] = (float) (short)2151;
      floatArray0[6] = (-3370.74F);
      floatArray0[7] = (float) (short)1;
      float[] floatArray1 = ArrayUtils.removeAllOccurrences(floatArray0, (float) (short)1);
      assertArrayEquals(new float[] {1382.0F, 1.0F, 1964.0F, 1382.0F, 2151.0F, 2151.0F, (-3370.74F), 1.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {1382.0F, 1964.0F, 1382.0F, 2151.0F, 2151.0F, (-3370.74F)}, floatArray1, 0.01F);
      assertEquals(8, floatArray0.length);
      assertEquals(6, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
  }

  @Test(timeout = 4000)
  public void test0351()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte) (-44);
      byteArray0[2] = (byte) (-39);
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (byte) (-44);
      ArrayUtils.shift(shortArray0, (int) (byte) (-39));
      assertArrayEquals(new short[] {(short) (-44)}, shortArray0);
      assertEquals(1, shortArray0.length);
      
      long[] longArray0 = new long[16];
      longArray0[0] = (long) (byte) (-44);
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      ArrayUtils.reverse(booleanArray0, (int) (byte) (-44), (int) (byte) (-39));
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray0));
      assertEquals(2, booleanArray0.length);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 1377;
      doubleArray0[1] = (double) (byte) (-44);
      doubleArray0[2] = (double) (byte) (-39);
      doubleArray0[3] = (double) 1377;
      doubleArray0[4] = (-1202.7635315971);
      double[] doubleArray1 = ArrayUtils.removeElements(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {1377.0, (-44.0), (-39.0), 1377.0, (-1202.7635315971)}, doubleArray0, 0.01);
      assertEquals(0, doubleArray1.length);
      assertEquals(5, doubleArray0.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotNull(doubleArray1);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, 1878.4, (int) (byte) (-44));
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertArrayEquals(new double[] {1377.0, (-44.0), (-39.0), 1377.0, (-1202.7635315971)}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotNull(bitSet0);
  }

  @Test(timeout = 4000)
  public void test0352()  throws Throwable  {
      float[] floatArray0 = new float[8];
      floatArray0[2] = (float) (byte) (-1);
      floatArray0[7] = (float) (byte) (-1);
      float[] floatArray1 = ArrayUtils.removeAllOccurences(floatArray0, 0.0F);
      assertArrayEquals(new float[] {0.0F, 0.0F, (-1.0F), 0.0F, 0.0F, 0.0F, 0.0F, (-1.0F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-1.0F), (-1.0F)}, floatArray1, 0.01F);
      assertEquals(8, floatArray0.length);
      assertEquals(2, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (byte) (-1);
      doubleArray0[1] = (double) (-1.0F);
      doubleArray0[2] = (double) (-1.0F);
      doubleArray0[3] = (double) (-1.0F);
      doubleArray0[4] = 0.0;
      ArrayUtils.swap(doubleArray0, (int) (byte) (-1), (-1), (int) (byte) (-1));
      assertArrayEquals(new double[] {(-1.0), (-1.0), (-1.0), (-1.0), 0.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test0353()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-834.6088);
      doubleArray0[1] = 1749.1;
      doubleArray0[2] = (-1.0);
      doubleArray0[3] = 1.5;
      doubleArray0[4] = 1.5;
      doubleArray0[5] = 1.0;
      ArrayUtils.swap(doubleArray0, (-3367), (-2264), (-3367));
      assertArrayEquals(new double[] {(-834.6088), 1749.1, (-1.0), 1.5, 1.5, 1.0}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) (-2264);
      longArray0[1] = (long) (-3367);
      long[] longArray1 = ArrayUtils.removeElements(longArray0, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertArrayEquals(new long[] {(-2264L), (-3367L)}, longArray0);
      assertEquals(0, longArray1.length);
      assertEquals(2, longArray0.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray0, longArray1);
      assertNotNull(longArray1);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-57);
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte) (-57);
      byteArray0[3] = (byte)82;
      byteArray0[4] = (byte) (-63);
      byteArray0[5] = (byte) (-23);
      byteArray0[6] = (byte)64;
      byteArray0[7] = (byte)37;
      byte[] byteArray1 = ArrayUtils.add(byteArray0, (byte) (-59));
      assertArrayEquals(new byte[] {(byte) (-57), (byte) (-1), (byte) (-57), (byte)82, (byte) (-63), (byte) (-23), (byte)64, (byte)37}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-57), (byte) (-1), (byte) (-57), (byte)82, (byte) (-63), (byte) (-23), (byte)64, (byte)37, (byte) (-59)}, byteArray1);
      assertEquals(8, byteArray0.length);
      assertEquals(9, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
  }

  @Test(timeout = 4000)
  public void test0354()  throws Throwable  {
      float[] floatArray0 = new float[4];
      floatArray0[0] = (-1647.477F);
      floatArray0[1] = (-1.0F);
      floatArray0[2] = 0.0F;
      floatArray0[3] = (-983.02F);
      boolean boolean0 = ArrayUtils.contains(floatArray0, 0.0F);
      assertArrayEquals(new float[] {(-1647.477F), (-1.0F), 0.0F, (-983.02F)}, floatArray0, 0.01F);
      assertEquals(4, floatArray0.length);
      assertTrue(boolean0);
      
      Integer[] integerArray0 = new Integer[0];
      Integer[] integerArray1 = ArrayUtils.nullToEmpty(integerArray0);
      assertEquals(0, integerArray0.length);
      assertEquals(0, integerArray1.length);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertNotNull(integerArray1);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-83);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-46);
      byteArray0[3] = (byte)0;
      int int0 = ArrayUtils.indexOf((int[]) null, (int) (byte)0, (int) (byte) (-46));
      assertEquals((-1), int0);
      
      Double double0 = new Double((-1.0F));
      assertNotNull(double0);
      assertEquals((-1.0), (double)double0, 0.01);
      
      Double[] doubleArray0 = new Double[8];
      doubleArray0[0] = double0;
      doubleArray0[1] = double0;
      doubleArray0[2] = double0;
      doubleArray0[3] = double0;
      doubleArray0[4] = double0;
      doubleArray0[5] = double0;
      doubleArray0[6] = double0;
      doubleArray0[7] = double0;
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0);
      assertArrayEquals(new double[] {(-1.0), (-1.0), (-1.0), (-1.0), (-1.0), (-1.0), (-1.0), (-1.0)}, doubleArray1, 0.01);
      assertEquals(8, doubleArray1.length);
      assertEquals(8, doubleArray0.length);
      assertNotNull(doubleArray1);
      
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short) (byte)0;
      shortArray0[1] = (short) (byte)0;
      shortArray0[2] = (short) (byte)0;
      shortArray0[3] = (short) (byte)0;
      shortArray0[4] = (short)903;
      ArrayUtils.swap(shortArray0, 48, (-1310));
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)903}, shortArray0);
      assertEquals(5, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test0355()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      BitSet bitSet0 = new BitSet();
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertNotNull(bitSet0);
      
      Long long0 = new Long((-3482L));
      assertNotNull(long0);
      assertEquals((-3482L), (long)long0);
      
      Long long1 = new Long(0L);
      assertFalse(long1.equals((Object)long0));
      assertNotNull(long1);
      assertEquals(0L, (long)long1);
      
      Long long2 = new Long((short)43);
      assertFalse(long2.equals((Object)long1));
      assertFalse(long2.equals((Object)long0));
      assertNotNull(long2);
      assertEquals(43L, (long)long2);
      
      Long long3 = new Long(1L);
      assertFalse(long3.equals((Object)long0));
      assertFalse(long3.equals((Object)long1));
      assertFalse(long3.equals((Object)long2));
      assertNotNull(long3);
      assertEquals(1L, (long)long3);
      
      Long long4 = new Long((-1L));
      assertFalse(long4.equals((Object)long1));
      assertFalse(long4.equals((Object)long0));
      assertFalse(long4.equals((Object)long2));
      assertFalse(long4.equals((Object)long3));
      assertNotNull(long4);
      assertEquals((-1L), (long)long4);
      
      Long long5 = new Long((-3482L));
      assertTrue(long5.equals((Object)long0));
      assertFalse(long5.equals((Object)long1));
      assertFalse(long5.equals((Object)long2));
      assertFalse(long5.equals((Object)long3));
      assertFalse(long5.equals((Object)long4));
      assertNotNull(long5);
      assertEquals((-3482L), (long)long5);
      
      Long[] longArray0 = ArrayUtils.nullToEmpty((Long[]) null);
      assertEquals(0, longArray0.length);
      assertNotNull(longArray0);
      
      String[] stringArray0 = ArrayUtils.toStringArray((Object[]) null, "^:J*4_},dWEgffen(p+");
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test0356()  throws Throwable  {
      float[] floatArray0 = new float[3];
      floatArray0[0] = Float.NaN;
      floatArray0[1] = Float.NaN;
      floatArray0[2] = Float.NaN;
      String[] stringArray0 = new String[5];
      stringArray0[0] = "";
      stringArray0[1] = "G;lt3R5";
      stringArray0[2] = "?&oco#";
      stringArray0[3] = "Unexpected IllegalAccessException";
      stringArray0[4] = "";
      String[] stringArray1 = ArrayUtils.nullToEmpty(stringArray0);
      assertEquals(5, stringArray0.length);
      assertEquals(5, stringArray1.length);
      assertSame(stringArray0, stringArray1);
      assertSame(stringArray1, stringArray0);
      assertNotNull(stringArray1);
  }

  @Test(timeout = 4000)
  public void test0357()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[1] = 'D';
      ArrayUtils.shift(charArray0, (int) '\u0000');
      assertArrayEquals(new char[] {'\u0000', 'D'}, charArray0);
      assertEquals(2, charArray0.length);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 'D';
      doubleArray0[1] = (double) 'D';
      ArrayUtils.shift(doubleArray0, 98, (int) 'D', 759);
      assertArrayEquals(new double[] {68.0, 68.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      
      int[] intArray0 = new int[5];
      intArray0[0] = 759;
      intArray0[1] = (int) 'D';
      intArray0[2] = (-866);
      intArray0[3] = (-1);
      intArray0[4] = (-1);
      // Undeclared exception!
      try { 
        ArrayUtils.insert((-1), intArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Length: 5
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0358()  throws Throwable  {
      short[] shortArray0 = new short[4];
      short[] shortArray1 = ArrayUtils.subarray(shortArray0, (-4346), 10);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0}, shortArray1);
      assertEquals(4, shortArray0.length);
      assertEquals(4, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      
      String[] stringArray0 = new String[1];
      String[] stringArray1 = ArrayUtils.nullToEmpty(stringArray0);
      assertEquals(1, stringArray0.length);
      assertEquals(1, stringArray1.length);
      assertSame(stringArray0, stringArray1);
      assertSame(stringArray1, stringArray0);
      assertNotNull(stringArray1);
      
      Boolean boolean0 = Boolean.valueOf(" in an array of ");
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      int[] intArray0 = new int[7];
      intArray0[0] = 45;
      intArray0[1] = (-4346);
      intArray0[2] = (-4346);
      intArray0[3] = (-4346);
      intArray0[4] = 10;
      intArray0[5] = 10;
      intArray0[6] = 10;
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object) boolean0, intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test0359()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 'c';
      doubleArray0[1] = (double) 'm';
      ArrayUtils.shuffle(doubleArray0);
      assertArrayEquals(new double[] {109.0, 0.0, 99.0}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      
      double[] doubleArray1 = ArrayUtils.addFirst(doubleArray0, Double.NaN);
      assertArrayEquals(new double[] {109.0, 0.0, 99.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, 109.0, 0.0, 99.0}, doubleArray1, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) 'm';
      int int0 = ArrayUtils.lastIndexOf(floatArray0, 13.1876335F, 97);
      assertArrayEquals(new float[] {109.0F}, floatArray0, 0.01F);
      assertEquals(1, floatArray0.length);
      assertEquals((-1), int0);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)2;
      short[] shortArray1 = ArrayUtils.removeAllOccurrences(shortArray0, (short)2);
      assertArrayEquals(new short[] {(short)2}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertEquals(1, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
  }

  @Test(timeout = 4000)
  public void test0360()  throws Throwable  {
      ArrayUtils.swap((int[]) null, (-2147184749), (-2147184749), (-2147184749));
      Long long0 = new Long((-2147184749));
      assertNotNull(long0);
      assertEquals((-2147184749L), (long)long0);
      
      Long long1 = new Long((-1205L));
      assertFalse(long1.equals((Object)long0));
      assertNotNull(long1);
      assertEquals((-1205L), (long)long1);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      ArrayUtils.swap(booleanArray0, 2146786902, 781, 336);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertEquals(1, booleanArray0.length);
      
      float[] floatArray0 = new float[0];
      ArrayUtils.reverse(floatArray0, (-105), 12);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
      
      float[] floatArray1 = ArrayUtils.removeElements(floatArray0, floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
  }

  @Test(timeout = 4000)
  public void test0361()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      Long long0 = new Long((-1L));
      assertNotNull(long0);
      assertEquals((-1L), (long)long0);
      
      Long long1 = new Long(623L);
      assertFalse(long1.equals((Object)long0));
      assertNotNull(long1);
      assertEquals(623L, (long)long1);
      
      Long long2 = new Long(1L);
      assertFalse(long2.equals((Object)long1));
      assertFalse(long2.equals((Object)long0));
      assertNotNull(long2);
      assertEquals(1L, (long)long2);
      
      Long long3 = new Long((-761L));
      assertFalse(long3.equals((Object)long0));
      assertFalse(long3.equals((Object)long2));
      assertFalse(long3.equals((Object)long1));
      assertNotNull(long3);
      assertEquals((-761L), (long)long3);
      
      Long long4 = new Long((-1205L));
      assertFalse(long4.equals((Object)long2));
      assertFalse(long4.equals((Object)long3));
      assertFalse(long4.equals((Object)long0));
      assertFalse(long4.equals((Object)long1));
      assertNotNull(long4);
      assertEquals((-1205L), (long)long4);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      ArrayUtils.swap(booleanArray0, 0, (-105), 0);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertEquals(1, booleanArray0.length);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) 623L;
      floatArray0[1] = (float) (-105);
      ArrayUtils.reverse(floatArray0, 12, 0);
      assertArrayEquals(new float[] {623.0F, (-105.0F)}, floatArray0, 0.01F);
      assertEquals(2, floatArray0.length);
      
      float[] floatArray1 = ArrayUtils.removeElements(floatArray0, floatArray0);
      assertArrayEquals(new float[] {623.0F, (-105.0F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertEquals(2, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
  }

  @Test(timeout = 4000)
  public void test0362()  throws Throwable  {
      Byte[] byteArray0 = new Byte[2];
      Byte byte0 = new Byte((byte)51);
      assertNotNull(byte0);
      assertEquals((byte)51, (byte)byte0);
      
      byteArray0[0] = byte0;
      Byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0);
      assertEquals(2, byteArray0.length);
      assertEquals(2, byteArray1.length);
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      
      boolean boolean0 = ArrayUtils.contains((short[]) null, (short)202);
      assertFalse(boolean0);
      
      char[] charArray0 = new char[2];
      charArray0[0] = '.';
      Long long0 = new Long((short)202);
      assertNotNull(long0);
      assertEquals(202L, (long)long0);
      
      Long long1 = new Long((-39L));
      assertFalse(long1.equals((Object)long0));
      assertNotNull(long1);
      assertEquals((-39L), (long)long1);
      
      Long long2 = new Long((byte)51);
      assertFalse(long2.equals((Object)long1));
      assertFalse(long2.equals((Object)long0));
      assertNotNull(long2);
      assertEquals(51L, (long)long2);
      
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      booleanArray0[6] = false;
      ArrayUtils.swap(booleanArray0, 0, 1553, 161);
      assertTrue(Arrays.equals(new boolean[] {true, false, false, false, false, false, false}, booleanArray0));
      assertEquals(7, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test0363()  throws Throwable  {
      char[] charArray0 = new char[1];
      char[] charArray1 = ArrayUtils.add(charArray0, 'Y');
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertArrayEquals(new char[] {'\u0000', 'Y'}, charArray1);
      assertEquals(1, charArray0.length);
      assertEquals(2, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      
      int[] intArray0 = new int[7];
      intArray0[0] = (int) 'Y';
      intArray0[2] = (int) '|';
      intArray0[3] = (int) '|';
      intArray0[4] = (int) '\u0000';
      intArray0[5] = (int) 'Y';
      intArray0[6] = 955;
      boolean boolean0 = ArrayUtils.contains(intArray0, 89);
      assertArrayEquals(new int[] {89, 0, 124, 124, 0, 89, 955}, intArray0);
      assertEquals(7, intArray0.length);
      assertTrue(boolean0);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (-2548.0F);
      floatArray0[1] = (float) 0;
      floatArray0[2] = (float) 124;
      ArrayUtils.shift(floatArray0, 89, 89, 338);
      assertArrayEquals(new float[] {(-2548.0F), 0.0F, 124.0F}, floatArray0, 0.01F);
      assertEquals(3, floatArray0.length);
      
      ArrayUtils.reverse(charArray1, 576, 955);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertArrayEquals(new char[] {'\u0000', 'Y'}, charArray1);
      assertEquals(1, charArray0.length);
      assertEquals(2, charArray1.length);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      Boolean[] booleanArray1 = ArrayUtils.toObject(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertEquals(1, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertNotNull(booleanArray1);
      
      float[] floatArray1 = new float[0];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      Float[] floatArray2 = ArrayUtils.toObject(floatArray1);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertEquals(0, floatArray1.length);
      assertEquals(0, floatArray2.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray2);
  }

  @Test(timeout = 4000)
  public void test0364()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      Boolean[] booleanArray1 = ArrayUtils.EMPTY_BOOLEAN_OBJECT_ARRAY;
      assertEquals(0, booleanArray1.length);
      assertNotNull(booleanArray1);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (-95.66349F);
      Float[] floatArray1 = ArrayUtils.toObject(floatArray0);
      assertArrayEquals(new float[] {(-95.66349F)}, floatArray0, 0.01F);
      assertEquals(1, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertNotNull(floatArray1);
  }

  @Test(timeout = 4000)
  public void test0365()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = 'Y';
      char[] charArray1 = ArrayUtils.add(charArray0, 'Y');
      assertArrayEquals(new char[] {'Y'}, charArray0);
      assertArrayEquals(new char[] {'Y', 'Y'}, charArray1);
      assertEquals(1, charArray0.length);
      assertEquals(2, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      
      int[] intArray0 = new int[7];
      intArray0[0] = (int) 'Y';
      intArray0[1] = 955;
      intArray0[2] = (int) '|';
      intArray0[3] = (int) '|';
      intArray0[4] = (int) 'Y';
      intArray0[5] = (int) 'Y';
      intArray0[6] = 955;
      boolean boolean0 = ArrayUtils.contains(intArray0, 89);
      assertArrayEquals(new int[] {89, 955, 124, 124, 89, 89, 955}, intArray0);
      assertEquals(7, intArray0.length);
      assertTrue(boolean0);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (-2548.0F);
      floatArray0[1] = (float) 955;
      floatArray0[2] = (float) 124;
      ArrayUtils.shift(floatArray0, 89, 89, 338);
      assertArrayEquals(new float[] {(-2548.0F), 955.0F, 124.0F}, floatArray0, 0.01F);
      assertEquals(3, floatArray0.length);
      
      ArrayUtils.reverse(charArray1, 576, 955);
      assertArrayEquals(new char[] {'Y'}, charArray0);
      assertArrayEquals(new char[] {'Y', 'Y'}, charArray1);
      assertEquals(1, charArray0.length);
      assertEquals(2, charArray1.length);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      Boolean[] booleanArray1 = ArrayUtils.toObject(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertEquals(1, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertNotNull(booleanArray1);
      
      float[] floatArray1 = new float[0];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      Float[] floatArray2 = ArrayUtils.toObject(floatArray1);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertEquals(0, floatArray1.length);
      assertEquals(0, floatArray2.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray2);
  }

  @Test(timeout = 4000)
  public void test0366()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[1] = false;
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-46);
      byteArray0[1] = (byte) (-46);
      byteArray0[2] = (byte)123;
      ArrayUtils.shift(byteArray0, (-2146950534));
      assertArrayEquals(new byte[] {(byte) (-46), (byte) (-46), (byte)123}, byteArray0);
      assertEquals(3, byteArray0.length);
      
      float[] floatArray0 = ArrayUtils.removeAllOccurrences((float[]) null, 4383.0F);
      assertNull(floatArray0);
  }

  @Test(timeout = 4000)
  public void test0367()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)17;
      byteArray0[1] = (byte)0;
      Long long0 = new Long((-2880L));
      assertNotNull(long0);
      assertEquals((-2880L), (long)long0);
      
      Long long1 = new Long(0L);
      assertFalse(long1.equals((Object)long0));
      assertNotNull(long1);
      assertEquals(0L, (long)long1);
      
      Long long2 = new Long((-2880L));
      assertTrue(long2.equals((Object)long0));
      assertFalse(long2.equals((Object)long1));
      assertNotNull(long2);
      assertEquals((-2880L), (long)long2);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 0L;
      doubleArray0[1] = (double) (byte)0;
      doubleArray0[2] = (double) (byte)0;
      doubleArray0[3] = (double) (byte)0;
      double[] doubleArray1 = ArrayUtils.removeAllOccurences(doubleArray0, 0.0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(4, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      
      boolean boolean0 = ArrayUtils.isSorted(doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(4, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertTrue(boolean0);
      
      Boolean boolean1 = new Boolean(false);
      assertFalse(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      assertFalse(boolean1);
      
      boolean boolean2 = ArrayUtils.contains((boolean[]) null, false);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
      
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short) (byte)0;
      shortArray0[1] = (short) (byte)0;
      shortArray0[2] = (short)211;
      shortArray0[3] = (short) (byte)17;
      shortArray0[4] = (short) (byte)0;
      shortArray0[5] = (short) (byte)17;
      shortArray0[6] = (short) (byte)17;
      shortArray0[7] = (short)50;
      boolean boolean3 = ArrayUtils.isSorted(shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)211, (short)17, (short)0, (short)17, (short)17, (short)50}, shortArray0);
      assertEquals(8, shortArray0.length);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3);
      
      char[] charArray0 = new char[6];
      charArray0[0] = 'M';
      charArray0[1] = '~';
      charArray0[2] = '&';
      charArray0[3] = 'b';
      charArray0[4] = '\\';
      charArray0[5] = ':';
      // Undeclared exception!
      try { 
        ArrayUtils.remove(charArray0, 3269);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3269, Length: 6
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0368()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = (-1);
      intArray0[1] = (-1);
      intArray0[2] = (-1);
      intArray0[3] = 1128;
      intArray0[1] = (-1);
      ArrayUtils.shuffle(intArray0);
      assertArrayEquals(new int[] {(-1), (-1), 1128, 0, (-1)}, intArray0);
      assertEquals(5, intArray0.length);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 963.2049;
      Character[] characterArray0 = new Character[6];
      Character character0 = new Character('r');
      assertNotNull(character0);
      assertEquals('r', (char)character0);
      
      characterArray0[0] = character0;
      char char0 = 'j';
      Character character1 = Character.valueOf('j');
      assertFalse(character1.equals((Object)character0));
      assertNotNull(character1);
      assertEquals('j', (char)character1);
      
      characterArray0[1] = character1;
      Character character2 = Character.valueOf('j');
      assertFalse(character2.equals((Object)character0));
      assertNotNull(character2);
      assertEquals('j', (char)character2);
      
      characterArray0[2] = character2;
      Character character3 = new Character('j');
      assertFalse(character3.equals((Object)character0));
      assertTrue(character3.equals((Object)character2));
      assertTrue(character3.equals((Object)char0));
      assertTrue(character3.equals((Object)character1));
      assertNotNull(character3);
      assertEquals('j', (char)character3);
      
      characterArray0[3] = character3;
      Character character4 = new Character('r');
      assertFalse(character4.equals((Object)character2));
      assertTrue(character4.equals((Object)character0));
      assertFalse(character4.equals((Object)character3));
      assertFalse(character4.equals((Object)char0));
      assertFalse(character4.equals((Object)character1));
      assertNotNull(character4);
      assertEquals('r', (char)character4);
      
      characterArray0[4] = character4;
      Character character5 = Character.valueOf(char0);
      assertFalse(character5.equals((Object)character0));
      assertFalse(character5.equals((Object)character4));
      assertTrue(character5.equals((Object)character3));
      assertNotNull(character5);
      assertEquals('j', (char)character5);
      
      characterArray0[5] = character5;
      boolean boolean0 = ArrayUtils.isNotEmpty(characterArray0);
      assertEquals(6, characterArray0.length);
      assertTrue(boolean0);
      
      int int0 = ArrayUtils.lastIndexOf((float[]) null, (float) char0);
      assertEquals((-1), int0);
      
      boolean boolean1 = ArrayUtils.isEmpty(intArray0);
      assertArrayEquals(new int[] {(-1), (-1), 1128, 0, (-1)}, intArray0);
      assertEquals(5, intArray0.length);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      float[] floatArray0 = ArrayUtils.insert(35, (float[]) null, (float[]) null);
      assertNull(floatArray0);
      
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short) (-1797);
      shortArray0[1] = (short)1319;
      shortArray0[2] = (short) (-716);
      shortArray0[3] = (short) (-547);
      shortArray0[4] = (short) (-752);
      shortArray0[5] = (short) (-1);
      shortArray0[6] = (short)2844;
      shortArray0[7] = (short)0;
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(shortArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1128, Length: 8
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0369()  throws Throwable  {
      float[] floatArray0 = new float[1];
      floatArray0[0] = (-2239.035F);
      Byte byte0 = new Byte((byte)15);
      assertNotNull(byte0);
      assertEquals((byte)15, (byte)byte0);
      
      Byte[] byteArray0 = new Byte[6];
      byteArray0[1] = byte0;
      byteArray0[1] = byte0;
      byteArray0[2] = byte0;
      byteArray0[3] = byte0;
      byteArray0[4] = byte0;
      byteArray0[5] = byte0;
      // Undeclared exception!
      try { 
        ArrayUtils.toPrimitive(byteArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0370()  throws Throwable  {
      BitSet bitSet0 = new BitSet();
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertNotNull(bitSet0);
      
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = ArrayUtils.add(byteArray0, (byte)2);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {(byte)2}, byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(1, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)2;
      shortArray0[1] = (short)2;
      shortArray0[2] = (short) (byte)2;
      shortArray0[3] = (short) (byte)2;
      short[] shortArray1 = ArrayUtils.removeAllOccurrences(shortArray0, (short) (-1));
      assertArrayEquals(new short[] {(short)2, (short)2, (short)2, (short)2}, shortArray0);
      assertArrayEquals(new short[] {(short)2, (short)2, (short)2, (short)2}, shortArray1);
      assertEquals(4, shortArray0.length);
      assertEquals(4, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
  }

  @Test(timeout = 4000)
  public void test0371()  throws Throwable  {
      int[] intArray0 = new int[1];
      int int0 = ArrayUtils.indexOf(intArray0, 0, 0);
      assertArrayEquals(new int[] {0}, intArray0);
      assertEquals(1, intArray0.length);
      assertEquals(0, int0);
      
      String string0 = ArrayUtils.toString((Object) "");
      assertNotNull(string0);
      assertEquals("", string0);
      
      char[] charArray0 = new char[3];
      charArray0[0] = 'p';
      charArray0[1] = 'Y';
      charArray0[0] = 'p';
      char[] charArray1 = ArrayUtils.add(charArray0, '\u0000');
      assertArrayEquals(new char[] {'p', 'Y', '\u0000'}, charArray0);
      assertArrayEquals(new char[] {'p', 'Y', '\u0000', '\u0000'}, charArray1);
      assertEquals(3, charArray0.length);
      assertEquals(4, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      
      boolean boolean0 = ArrayUtils.contains(intArray0, 955);
      assertArrayEquals(new int[] {0}, intArray0);
      assertEquals(1, intArray0.length);
      assertFalse(boolean0);
      
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short)1832;
      shortArray0[1] = (short)1841;
      shortArray0[2] = (short)5;
      shortArray0[3] = (short) (-1);
      shortArray0[4] = (short) (-1309);
      shortArray0[5] = (short) (-4381);
      shortArray0[6] = (short)43;
      boolean boolean1 = ArrayUtils.isEmpty(shortArray0);
      assertArrayEquals(new short[] {(short)1832, (short)1841, (short)5, (short) (-1), (short) (-1309), (short) (-4381), (short)43}, shortArray0);
      assertEquals(7, shortArray0.length);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      ArrayUtils.shuffle(charArray1);
      assertArrayEquals(new char[] {'p', 'Y', '\u0000'}, charArray0);
      assertArrayEquals(new char[] {'Y', '\u0000', '\u0000', 'p'}, charArray1);
      assertEquals(3, charArray0.length);
      assertEquals(4, charArray1.length);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
  }

  @Test(timeout = 4000)
  public void test0372()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-39);
      byteArray0[1] = (byte)0;
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      booleanArray0[4] = false;
      booleanArray0[5] = true;
      booleanArray0[6] = true;
      booleanArray0[7] = false;
      booleanArray0[8] = false;
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, Integer.MAX_VALUE, (int) (byte)0);
      assertTrue(Arrays.equals(new boolean[] {false, true, false, true, false, true, true, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertEquals(9, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) (byte) (-39);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-118.4998408576);
      doubleArray0[1] = (-1.0);
      boolean boolean0 = ArrayUtils.contains(doubleArray0, (-118.4998408576), (double) (byte)0);
      assertArrayEquals(new double[] {(-118.4998408576), (-1.0)}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0373()  throws Throwable  {
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short) (-1);
      shortArray0[1] = (short)43;
      char[] charArray0 = new char[7];
      charArray0[0] = 'E';
      charArray0[1] = '0';
      charArray0[2] = '0';
      charArray0[3] = '0';
      charArray0[4] = '0';
      charArray0[5] = '0';
      charArray0[6] = '0';
      char[] charArray1 = ArrayUtils.removeElement(charArray0, ' ');
      assertArrayEquals(new char[] {'E', '0', '0', '0', '0', '0', '0'}, charArray0);
      assertArrayEquals(new char[] {'E', '0', '0', '0', '0', '0', '0'}, charArray1);
      assertEquals(7, charArray0.length);
      assertEquals(7, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) (short)43;
      floatArray0[1] = 0.0F;
      ArrayUtils.swap((char[]) null, (-1), (int) (short)43, (-2140505135));
      boolean boolean0 = ArrayUtils.isEmpty((char[]) null);
      assertTrue(boolean0);
      
      int[] intArray0 = new int[0];
      int[] intArray1 = ArrayUtils.subarray(intArray0, (-3083), (int) (short) (-1));
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      
      short[] shortArray1 = ArrayUtils.addFirst(shortArray0, (short)8856);
      assertArrayEquals(new short[] {(short) (-1), (short)43, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)8856, (short) (-1), (short)43, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray1);
      assertEquals(8, shortArray0.length);
      assertEquals(9, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      
      short[] shortArray2 = ArrayUtils.clone(shortArray1);
      assertArrayEquals(new short[] {(short) (-1), (short)43, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)8856, (short) (-1), (short)43, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray1);
      assertArrayEquals(new short[] {(short)8856, (short) (-1), (short)43, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray2);
      assertEquals(8, shortArray0.length);
      assertEquals(9, shortArray1.length);
      assertEquals(9, shortArray2.length);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertFalse(shortArray2.equals((Object)shortArray1));
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray0, shortArray2);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray1, shortArray2);
      assertNotSame(shortArray2, shortArray1);
      assertNotSame(shortArray2, shortArray0);
      assertNotNull(shortArray2);
      
      boolean boolean1 = ArrayUtils.contains((long[]) null, (long) (-2140505135));
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test0374()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = false;
      int int0 = ArrayUtils.indexOf((long[]) null, 1L);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0375()  throws Throwable  {
      Short[] shortArray0 = ArrayUtils.nullToEmpty((Short[]) null);
      assertEquals(0, shortArray0.length);
      assertNotNull(shortArray0);
      
      Double[] doubleArray0 = new Double[6];
      Double double0 = new Double((-1132.3684457106904));
      assertNotNull(double0);
      assertEquals((-1132.3684457106904), (double)double0, 0.01);
      
      doubleArray0[0] = double0;
      Double double1 = new Double((double) doubleArray0[0]);
      assertEquals(6, doubleArray0.length);
      assertEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      assertEquals((-1132.3684457106904), (double)double1, 0.01);
      
      doubleArray0[1] = double1;
      Double double2 = new Double((-1132.3684457106904));
      assertEquals((double)double2, (double)double0, 0.01);
      assertEquals((double)double2, (double)double1, 0.01);
      assertNotNull(double2);
      assertEquals((-1132.3684457106904), (double)double2, 0.01);
      
      doubleArray0[2] = double2;
      Double double3 = new Double((double) doubleArray0[2]);
      assertEquals(6, doubleArray0.length);
      assertEquals((double)double3, (double)double0, 0.01);
      assertEquals((double)double3, (double)double2, 0.01);
      assertEquals((double)double3, (double)double1, 0.01);
      assertNotNull(double3);
      assertEquals((-1132.3684457106904), (double)double3, 0.01);
      
      doubleArray0[3] = double3;
      Double double4 = new Double((double) doubleArray0[0]);
      assertEquals(6, doubleArray0.length);
      assertEquals((double)double4, (double)double3, 0.01);
      assertEquals((double)double4, (double)double2, 0.01);
      assertEquals((double)double4, (double)double1, 0.01);
      assertEquals((double)double4, (double)double0, 0.01);
      assertNotNull(double4);
      assertEquals((-1132.3684457106904), (double)double4, 0.01);
      
      doubleArray0[4] = double4;
      Double double5 = new Double((double) doubleArray0[0]);
      assertEquals(6, doubleArray0.length);
      assertEquals((double)double5, (double)double0, 0.01);
      assertEquals((double)double5, (double)double1, 0.01);
      assertEquals((double)double5, (double)double3, 0.01);
      assertEquals((double)double5, (double)double4, 0.01);
      assertEquals((double)double5, (double)double2, 0.01);
      assertNotNull(double5);
      assertEquals((-1132.3684457106904), (double)double5, 0.01);
      
      doubleArray0[5] = double5;
      Double[] doubleArray1 = ArrayUtils.clone(doubleArray0);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
  }

  @Test(timeout = 4000)
  public void test0376()  throws Throwable  {
      byte byte0 = (byte) (-22);
      byte byte1 = (byte)0;
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        ArrayUtils.shuffle((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0377()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = 'f';
      charArray0[1] = 'm';
      charArray0[2] = 'c';
      char[] charArray1 = ArrayUtils.nullToEmpty(charArray0);
      assertArrayEquals(new char[] {'f', 'm', 'c'}, charArray0);
      assertArrayEquals(new char[] {'f', 'm', 'c'}, charArray1);
      assertEquals(3, charArray0.length);
      assertEquals(3, charArray1.length);
      assertSame(charArray0, charArray1);
      assertSame(charArray1, charArray0);
      assertNotNull(charArray1);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 'c';
      doubleArray0[1] = (double) 'm';
      ArrayUtils.shuffle(doubleArray0);
      assertArrayEquals(new double[] {109.0, 99.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      
      double[] doubleArray1 = ArrayUtils.addFirst(doubleArray0, Double.NaN);
      assertArrayEquals(new double[] {109.0, 99.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, 109.0, 99.0}, doubleArray1, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      
      boolean boolean0 = ArrayUtils.isSameLength(doubleArray1, doubleArray1);
      assertArrayEquals(new double[] {109.0, 99.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, 109.0, 99.0}, doubleArray1, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertTrue(boolean0);
      
      Character[] characterArray0 = ArrayUtils.toObject(charArray1);
      assertArrayEquals(new char[] {'f', 'm', 'c'}, charArray0);
      assertArrayEquals(new char[] {'f', 'm', 'c'}, charArray1);
      assertEquals(3, charArray0.length);
      assertEquals(3, charArray1.length);
      assertEquals(3, characterArray0.length);
      assertSame(charArray0, charArray1);
      assertSame(charArray1, charArray0);
      assertNotNull(characterArray0);
  }

  @Test(timeout = 4000)
  public void test0378()  throws Throwable  {
      float[] floatArray0 = new float[1];
      floatArray0[0] = (-2239.035F);
      float[] floatArray1 = ArrayUtils.subarray(floatArray0, 2518, (-1));
      assertArrayEquals(new float[] {(-2239.035F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertEquals(1, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short) (-2624);
      shortArray0[1] = (short) (-2624);
      shortArray0[2] = (short) (-2624);
      ArrayUtils.shift(shortArray0, (int) (short) (-2624));
      assertArrayEquals(new short[] {(short) (-2624), (short) (-2624), (short) (-2624)}, shortArray0);
      assertEquals(3, shortArray0.length);
      
      Boolean boolean0 = new Boolean(true);
      assertNotNull(boolean0);
      assertTrue(boolean0);
      
      Short[] shortArray1 = new Short[5];
      // Undeclared exception!
      try { 
        ArrayUtils.remove(shortArray1, (-1073741824));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1073741824, Length: 5
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0379()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = (-3970);
      intArray0[1] = 1072;
      intArray0[2] = 256;
      intArray0[3] = 2;
      BitSet bitSet0 = ArrayUtils.indexesOf(intArray0, 56);
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertArrayEquals(new int[] {(-3970), 1072, 256, 2}, intArray0);
      assertEquals(4, intArray0.length);
      assertNotNull(bitSet0);
      
      String[] stringArray0 = new String[0];
      // Undeclared exception!
      try { 
        ArrayUtils.remove(stringArray0, 256);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 256, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0380()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)79;
      byteArray0[2] = (byte) (-22);
      long[] longArray0 = new long[1];
      longArray0[0] = (long) (byte)1;
      Long[] longArray1 = ArrayUtils.toObject(longArray0);
      assertArrayEquals(new long[] {1L}, longArray0);
      assertEquals(1, longArray0.length);
      assertEquals(1, longArray1.length);
      assertNotNull(longArray1);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (byte) (-22);
      doubleArray0[1] = (double) 1L;
      double[] doubleArray1 = ArrayUtils.clone(doubleArray0);
      assertArrayEquals(new double[] {(-22.0), 1.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-22.0), 1.0}, doubleArray1, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      booleanArray0[6] = false;
      int int0 = ArrayUtils.indexOf(booleanArray0, false, (int) (byte)1);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false}, booleanArray0));
      assertEquals(7, booleanArray0.length);
      assertEquals(1, int0);
      
      Short[] shortArray0 = new Short[3];
      Short short0 = new Short((short) (-1));
      assertNotNull(short0);
      assertEquals((short) (-1), (short)short0);
      
      shortArray0[0] = short0;
      Short short1 = new Short((short) (-1));
      assertTrue(short1.equals((Object)short0));
      assertNotNull(short1);
      assertEquals((short) (-1), (short)short1);
      
      shortArray0[1] = short1;
      try { 
        Short.valueOf(", '", (int) (byte) (-22));
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // radix -22 less than Character.MIN_RADIX
         //
         verifyException("java.lang.Integer", e);
      }
  }

  @Test(timeout = 4000)
  public void test0381()  throws Throwable  {
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short)560;
      MockRandom mockRandom0 = new MockRandom((short)560);
      assertNotNull(mockRandom0);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) (byte)8;
      floatArray0[1] = (float) (short)560;
      MockRandom mockRandom1 = new MockRandom();
      assertFalse(mockRandom1.equals((Object)mockRandom0));
      assertNotNull(mockRandom1);
      
      int int0 = mockRandom1.nextInt((int) (short)560);
      assertFalse(mockRandom1.equals((Object)mockRandom0));
      assertNotSame(mockRandom1, mockRandom0);
      assertEquals(0, int0);
      
      Long long0 = new Long((byte)8);
      assertNotNull(long0);
      assertEquals(8L, (long)long0);
      
      Long long1 = new Long((short)560);
      assertFalse(long1.equals((Object)long0));
      assertNotNull(long1);
      assertEquals(560L, (long)long1);
      
      Long long2 = new Long((-660L));
      assertFalse(long2.equals((Object)long1));
      assertFalse(long2.equals((Object)long0));
      assertNotNull(long2);
      assertEquals((-660L), (long)long2);
      
      Long long3 = new Long((-1226L));
      assertFalse(long3.equals((Object)long2));
      assertFalse(long3.equals((Object)long0));
      assertFalse(long3.equals((Object)long1));
      assertNotNull(long3);
      assertEquals((-1226L), (long)long3);
      
      Boolean boolean0 = Boolean.TRUE;
      assertNotNull(boolean0);
      assertTrue(boolean0);
      
      Boolean[] booleanArray0 = new Boolean[8];
      booleanArray0[0] = boolean0;
      booleanArray0[1] = boolean0;
      booleanArray0[2] = boolean0;
      booleanArray0[3] = boolean0;
      booleanArray0[4] = boolean0;
      booleanArray0[5] = boolean0;
      booleanArray0[6] = boolean0;
      booleanArray0[7] = boolean0;
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true, true, true, true}, booleanArray1));
      assertEquals(8, booleanArray1.length);
      assertEquals(8, booleanArray0.length);
      assertNotNull(booleanArray1);
      
      Character[] characterArray0 = ArrayUtils.addAll((Character[]) null, (Character[]) null);
      assertNull(characterArray0);
  }

  @Test(timeout = 4000)
  public void test0382()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = '~';
      Long long0 = new Long(495L);
      assertNotNull(long0);
      assertEquals(495L, (long)long0);
      
      Long long1 = new Long((-2147483648L));
      assertFalse(long1.equals((Object)long0));
      assertNotNull(long1);
      assertEquals((-2147483648L), (long)long1);
      
      Long long2 = new Long((-1226L));
      assertFalse(long2.equals((Object)long0));
      assertFalse(long2.equals((Object)long1));
      assertNotNull(long2);
      assertEquals((-1226L), (long)long2);
      
      Long long3 = new Long(1952L);
      assertFalse(long3.equals((Object)long1));
      assertFalse(long3.equals((Object)long2));
      assertFalse(long3.equals((Object)long0));
      assertNotNull(long3);
      assertEquals(1952L, (long)long3);
      
      Boolean boolean0 = Boolean.TRUE;
      assertNotNull(boolean0);
      assertTrue(boolean0);
      
      Boolean[] booleanArray0 = new Boolean[0];
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertNotNull(booleanArray1);
      
      int[] intArray0 = new int[8];
      intArray0[0] = (int) '~';
      intArray0[3] = (int) '~';
      intArray0[4] = 54;
      intArray0[5] = (int) '~';
      float[] floatArray0 = new float[2];
      floatArray0[0] = 0.0F;
      floatArray0[1] = (float) (-1226L);
      float[] floatArray1 = ArrayUtils.add(floatArray0, (-1066.68F));
      assertArrayEquals(new float[] {0.0F, (-1226.0F), (-1066.68F)}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {0.0F, (-1226.0F)}, floatArray0, 0.01F);
      assertEquals(3, floatArray1.length);
      assertEquals(2, floatArray0.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertNotNull(floatArray1);
      
      float[] floatArray2 = ArrayUtils.clone(floatArray1);
      assertArrayEquals(new float[] {0.0F, (-1226.0F), (-1066.68F)}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {0.0F, (-1226.0F), (-1066.68F)}, floatArray2, 0.01F);
      assertArrayEquals(new float[] {0.0F, (-1226.0F)}, floatArray0, 0.01F);
      assertEquals(3, floatArray1.length);
      assertEquals(3, floatArray2.length);
      assertEquals(2, floatArray0.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertNotSame(floatArray1, floatArray2);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray2, floatArray1);
      assertNotSame(floatArray2, floatArray0);
      assertNotSame(floatArray0, floatArray2);
      assertNotSame(floatArray0, floatArray1);
      assertNotNull(floatArray2);
      
      ArrayUtils.swap(floatArray0, Integer.MAX_VALUE, 126);
      assertArrayEquals(new float[] {0.0F, (-1226.0F)}, floatArray0, 0.01F);
      assertEquals(2, floatArray0.length);
      assertFalse(floatArray0.equals((Object)floatArray2));
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertNotSame(floatArray0, floatArray2);
      assertNotSame(floatArray0, floatArray1);
      
      Character[] characterArray0 = new Character[0];
      Character[] characterArray1 = ArrayUtils.addAll(characterArray0, characterArray0);
      assertEquals(0, characterArray0.length);
      assertEquals(0, characterArray1.length);
      assertFalse(characterArray1.equals((Object)characterArray0));
      assertNotSame(characterArray0, characterArray1);
      assertNotSame(characterArray1, characterArray0);
      assertNotNull(characterArray1);
  }

  @Test(timeout = 4000)
  public void test0383()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)17;
      byteArray0[1] = (byte)0;
      Long long0 = new Long((-2880L));
      assertNotNull(long0);
      assertEquals((-2880L), (long)long0);
      
      Long long1 = new Long((byte)17);
      assertFalse(long1.equals((Object)long0));
      assertNotNull(long1);
      assertEquals(17L, (long)long1);
      
      Long long2 = new Long(4934L);
      assertFalse(long2.equals((Object)long0));
      assertFalse(long2.equals((Object)long1));
      assertNotNull(long2);
      assertEquals(4934L, (long)long2);
      
      Boolean boolean0 = Boolean.TRUE;
      assertNotNull(boolean0);
      assertTrue(boolean0);
      
      boolean[] booleanArray0 = ArrayUtils.toPrimitive((Boolean[]) null);
      assertNull(booleanArray0);
      
      Character[] characterArray0 = new Character[0];
      Character[] characterArray1 = ArrayUtils.addAll(characterArray0, characterArray0);
      assertEquals(0, characterArray0.length);
      assertEquals(0, characterArray1.length);
      assertFalse(characterArray1.equals((Object)characterArray0));
      assertNotSame(characterArray0, characterArray1);
      assertNotSame(characterArray1, characterArray0);
      assertNotNull(characterArray1);
  }

  @Test(timeout = 4000)
  public void test0384()  throws Throwable  {
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short) (-13);
      shortArray0[1] = (short)43;
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      BitSet bitSet0 = ArrayUtils.indexesOf(booleanArray0, true);
      assertFalse(bitSet0.isEmpty());
      assertEquals(2, bitSet0.cardinality());
      assertEquals("{0, 1}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(2, bitSet0.length());
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray0));
      assertEquals(2, booleanArray0.length);
      assertNotNull(bitSet0);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-2703.0);
      doubleArray0[1] = 1891.788693054866;
      doubleArray0[2] = 1757.16516391848;
      boolean boolean0 = ArrayUtils.isSameLength(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {(-2703.0), 1891.788693054866, 1757.16516391848}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)10;
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte)0, (int) (byte)0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)10}, byteArray0);
      assertEquals(3, byteArray0.length);
      assertEquals(0, int0);
      
      byte[] byteArray1 = ArrayUtils.add(byteArray0, (int) (byte)0, (byte)0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)10}, byteArray1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)10}, byteArray0);
      assertEquals(4, byteArray1.length);
      assertEquals(3, byteArray0.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotNull(byteArray1);
      
      float[] floatArray0 = new float[0];
      float[] floatArray1 = ArrayUtils.addFirst(floatArray0, (-1.0F));
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-1.0F)}, floatArray1, 0.01F);
      assertEquals(0, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      
      ArrayUtils.shift(shortArray0, (-620));
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short) (-13), (short)43, (short)0, (short)0}, shortArray0);
      assertEquals(8, shortArray0.length);
      
      int[] intArray0 = new int[9];
      intArray0[0] = (int) (byte)10;
      intArray0[1] = (int) (short)0;
      intArray0[2] = (int) (byte)10;
      intArray0[3] = (int) (byte)0;
      intArray0[4] = (int) (byte)0;
      intArray0[5] = (int) (byte)0;
      intArray0[6] = (-620);
      intArray0[7] = (int) (byte)0;
      intArray0[8] = Integer.MAX_VALUE;
      ArrayUtils.reverse(intArray0);
      assertArrayEquals(new int[] {Integer.MAX_VALUE, 0, (-620), 0, 0, 0, 10, 0, 10}, intArray0);
      assertEquals(9, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test0385()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 4026.966708;
      doubleArray0[2] = (-2101.5);
      doubleArray0[2] = 2063.283;
      int int0 = ArrayUtils.indexOf(doubleArray0, 0.0, 0);
      assertArrayEquals(new double[] {4026.966708, 0.0, 2063.283}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(1, int0);
      
      double[] doubleArray1 = ArrayUtils.add(doubleArray0, 1, 1.0);
      assertArrayEquals(new double[] {4026.966708, 0.0, 2063.283}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {4026.966708, 1.0, 0.0, 2063.283}, doubleArray1, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) 1;
      floatArray0[1] = (float) 1;
      floatArray0[2] = (float) 0;
      floatArray0[3] = (-1.0F);
      floatArray0[4] = (float) 0;
      boolean boolean0 = ArrayUtils.isNotEmpty(floatArray0);
      assertArrayEquals(new float[] {1.0F, 1.0F, 0.0F, (-1.0F), 0.0F}, floatArray0, 0.01F);
      assertEquals(5, floatArray0.length);
      assertTrue(boolean0);
      
      int[] intArray0 = new int[4];
      intArray0[0] = (-5237);
      intArray0[1] = 1;
      intArray0[2] = 0;
      intArray0[3] = 0;
      int[] intArray1 = ArrayUtils.subarray(intArray0, 0, 4293);
      assertArrayEquals(new int[] {(-5237), 1, 0, 0}, intArray1);
      assertArrayEquals(new int[] {(-5237), 1, 0, 0}, intArray0);
      assertEquals(4, intArray1.length);
      assertEquals(4, intArray0.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
      assertNotNull(intArray1);
      
      int[] intArray2 = ArrayUtils.insert((-5237), (int[]) null, intArray1);
      assertArrayEquals(new int[] {(-5237), 1, 0, 0}, intArray1);
      assertArrayEquals(new int[] {(-5237), 1, 0, 0}, intArray0);
      assertEquals(4, intArray1.length);
      assertEquals(4, intArray0.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(intArray0.equals((Object)intArray1));
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
      assertNull(intArray2);
      
      double[] doubleArray2 = new double[6];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = (-423.06530601034103);
      doubleArray2[1] = (double) 0.0F;
      doubleArray2[2] = 3124.61656202245;
      doubleArray2[3] = (double) 0;
      doubleArray2[4] = (double) (-1.0F);
      doubleArray2[5] = (-2101.5);
      ArrayUtils.shift(doubleArray2, (-2999), 0, 4293);
      assertArrayEquals(new double[] {(-423.06530601034103), 0.0, 3124.61656202245, 0.0, (-1.0), (-2101.5)}, doubleArray2, 0.01);
      assertEquals(6, doubleArray2.length);
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test0386()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)17;
      long[] longArray0 = new long[8];
      longArray0[1] = 0L;
      longArray0[2] = 0L;
      longArray0[4] = (-283L);
      longArray0[5] = 2226L;
      longArray0[6] = 0L;
      int int0 = ArrayUtils.indexOf(byteArray0, (byte)17);
      assertArrayEquals(new byte[] {(byte)17, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(5, byteArray0.length);
      assertEquals(0, int0);
      
      int int1 = ArrayUtils.lastIndexOf(longArray0, (-283L), (int) (byte)17);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, (-283L), 2226L, 0L, 0L}, longArray0);
      assertEquals(8, longArray0.length);
      assertFalse(int1 == int0);
      assertEquals(4, int1);
      
      boolean boolean0 = false;
      boolean boolean1 = true;
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (byte)17;
      shortArray0[1] = (short) (byte)17;
      short[] shortArray1 = ArrayUtils.nullToEmpty(shortArray0);
      assertArrayEquals(new short[] {(short)17, (short)17}, shortArray0);
      assertArrayEquals(new short[] {(short)17, (short)17}, shortArray1);
      assertEquals(2, shortArray0.length);
      assertEquals(2, shortArray1.length);
      assertSame(shortArray0, shortArray1);
      assertSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      
      // Undeclared exception!
      try { 
        ArrayUtils.insert((-1693), shortArray0, shortArray1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1693, Length: 2
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0387()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)9;
      byteArray0[1] = (byte) (-44);
      byteArray0[2] = (byte) (-39);
      byteArray0[3] = (byte)2;
      byteArray0[4] = (byte)51;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)45;
      boolean boolean0 = ArrayUtils.isSameLength(byteArray0, byteArray0);
      assertArrayEquals(new byte[] {(byte)9, (byte) (-44), (byte) (-39), (byte)2, (byte)51, (byte)0, (byte)0, (byte)45, (byte)0}, byteArray0);
      assertEquals(9, byteArray0.length);
      assertTrue(boolean0);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (byte)45;
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short)45);
      assertArrayEquals(new short[] {(short)45}, shortArray0);
      assertEquals(1, shortArray0.length);
      assertEquals(0, int0);
      
      double[] doubleArray0 = new double[0];
      int int1 = ArrayUtils.lastIndexOf(doubleArray0, (double) (byte) (-39), (double) (byte)2);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      Object[] objectArray0 = new Object[0];
      ArrayUtils.swap(objectArray0, 106, (int) (byte)9, (-2382));
      assertEquals(0, objectArray0.length);
      
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertArrayEquals(new short[] {(short)45}, shortArray0);
      assertEquals(1, shortArray1.length);
      assertEquals(1, shortArray0.length);
      assertNotNull(shortArray1);
      
      ArrayUtils.reverse(shortArray0, (-2203), 6);
      assertArrayEquals(new short[] {(short)45}, shortArray0);
      assertEquals(1, shortArray0.length);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      boolean[] booleanArray1 = ArrayUtils.addAll(booleanArray0, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true, true, true, true}, booleanArray1));
      assertEquals(4, booleanArray0.length);
      assertEquals(8, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      
      byte[] byteArray1 = ArrayUtils.toPrimitive((Byte[]) null);
      assertNull(byteArray1);
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'J';
      charArray0[1] = 'P';
      charArray0[2] = 'S';
      charArray0[3] = '$';
      int int2 = ArrayUtils.indexOf(charArray0, 'Z', (int) (byte)0);
      assertArrayEquals(new char[] {'J', 'P', 'S', '$'}, charArray0);
      assertEquals(4, charArray0.length);
      assertTrue(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals((-1), int2);
  }

  @Test(timeout = 4000)
  public void test0388()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-7);
      boolean boolean0 = ArrayUtils.isSameLength(byteArray0, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-7), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(9, byteArray0.length);
      assertTrue(boolean0);
      
      short[] shortArray0 = new short[3];
      shortArray0[1] = (short) (byte) (-7);
      shortArray0[2] = (short) (byte) (-7);
      ArrayUtils.shift(shortArray0, (int) (short) (-7), (-1), (int) (short) (-7));
      assertArrayEquals(new short[] {(short)0, (short) (-7), (short) (-7)}, shortArray0);
      assertEquals(3, shortArray0.length);
      
      Short[] shortArray1 = new Short[0];
      Short[] shortArray2 = ArrayUtils.nullToEmpty(shortArray1);
      assertEquals(0, shortArray1.length);
      assertEquals(0, shortArray2.length);
      assertFalse(shortArray2.equals((Object)shortArray1));
      assertNotSame(shortArray1, shortArray2);
      assertNotSame(shortArray2, shortArray1);
      assertNotNull(shortArray2);
      
      byte[] byteArray1 = ArrayUtils.removeElements(byteArray0, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-7), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(9, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      
      Byte[] byteArray2 = ArrayUtils.toObject(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-7), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(9, byteArray0.length);
      assertEquals(9, byteArray2.length);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertNotSame(byteArray0, byteArray1);
      assertNotNull(byteArray2);
      
      int[] intArray0 = new int[6];
      intArray0[0] = (int) (short) (-7);
      intArray0[1] = (-1);
      intArray0[2] = (int) (short) (-7);
      intArray0[3] = (-1);
      byte[] byteArray3 = ArrayUtils.toPrimitive(byteArray2);
      assertArrayEquals(new byte[] {(byte) (-7), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray3);
      assertArrayEquals(new byte[] {(byte) (-7), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(9, byteArray3.length);
      assertEquals(9, byteArray0.length);
      assertEquals(9, byteArray2.length);
      assertFalse(byteArray3.equals((Object)byteArray1));
      assertFalse(byteArray3.equals((Object)byteArray0));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertNotSame(byteArray3, byteArray1);
      assertNotSame(byteArray3, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray3);
      assertNotNull(byteArray3);
  }

  @Test(timeout = 4000)
  public void test0389()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)127;
      byteArray0[1] = (byte)8;
      byteArray0[2] = (byte) (-35);
      byteArray0[3] = (byte)22;
      byteArray0[4] = (byte)5;
      byteArray0[5] = (byte) (-73);
      byteArray0[6] = (byte)102;
      boolean boolean0 = ArrayUtils.isNotEmpty(byteArray0);
      assertArrayEquals(new byte[] {(byte)127, (byte)8, (byte) (-35), (byte)22, (byte)5, (byte) (-73), (byte)102}, byteArray0);
      assertEquals(7, byteArray0.length);
      assertTrue(boolean0);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) (byte) (-35);
      longArray0[1] = (long) (byte)127;
      long[] longArray1 = ArrayUtils.addAll(longArray0, longArray0);
      assertArrayEquals(new long[] {(-35L), 127L}, longArray0);
      assertArrayEquals(new long[] {(-35L), 127L, (-35L), 127L}, longArray1);
      assertEquals(2, longArray0.length);
      assertEquals(4, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
      
      ArrayUtils.swap(byteArray0, (-2858), (-1327));
      assertArrayEquals(new byte[] {(byte)127, (byte)8, (byte) (-35), (byte)22, (byte)5, (byte) (-73), (byte)102}, byteArray0);
      assertEquals(7, byteArray0.length);
      
      int[] intArray0 = new int[8];
      intArray0[0] = (int) (byte)5;
      intArray0[1] = (int) (byte)5;
      intArray0[2] = (int) (byte)127;
      intArray0[3] = (int) (byte)102;
      intArray0[4] = (int) (byte)22;
      intArray0[5] = (-1853);
      intArray0[6] = (int) (byte) (-35);
      intArray0[7] = (int) (byte)5;
      ArrayUtils.swap(intArray0, (-1327), (int) (byte)102, (-962));
      assertArrayEquals(new int[] {5, 5, 127, 102, 22, (-1853), (-35), 5}, intArray0);
      assertEquals(8, intArray0.length);
      
      long[] longArray2 = ArrayUtils.removeElements(longArray0, longArray1);
      assertArrayEquals(new long[] {}, longArray2);
      assertArrayEquals(new long[] {(-35L), 127L}, longArray0);
      assertArrayEquals(new long[] {(-35L), 127L, (-35L), 127L}, longArray1);
      assertEquals(0, longArray2.length);
      assertEquals(2, longArray0.length);
      assertEquals(4, longArray1.length);
      assertFalse(longArray2.equals((Object)longArray0));
      assertFalse(longArray2.equals((Object)longArray1));
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotSame(longArray2, longArray0);
      assertNotSame(longArray2, longArray1);
      assertNotSame(longArray0, longArray2);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray1, longArray2);
      assertNotNull(longArray2);
      
      int int0 = ArrayUtils.indexOf((short[]) null, (short) (byte) (-35));
      assertEquals((-1), int0);
      
      byte[] byteArray1 = new byte[4];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte) (-35);
      byteArray1[1] = (byte) (-73);
      byteArray1[2] = (byte)127;
      byteArray1[3] = (byte)127;
      byte[] byteArray2 = ArrayUtils.removeElements(byteArray1, byteArray1);
      assertArrayEquals(new byte[] {(byte) (-35), (byte) (-73), (byte)127, (byte)127}, byteArray1);
      assertArrayEquals(new byte[] {}, byteArray2);
      assertEquals(4, byteArray1.length);
      assertEquals(0, byteArray2.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      assertNotNull(byteArray2);
  }

  @Test(timeout = 4000)
  public void test0390()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = true;
      booleanArray0[6] = false;
      boolean boolean0 = ArrayUtils.contains(booleanArray0, true);
      assertTrue(Arrays.equals(new boolean[] {false, true, true, false, false, true, false, false}, booleanArray0));
      assertEquals(8, booleanArray0.length);
      assertTrue(boolean0);
      
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) false;
      objectArray0[1] = (Object) false;
      objectArray0[2] = (Object) true;
      objectArray0[3] = (Object) false;
      objectArray0[4] = (Object) false;
      objectArray0[5] = (Object) false;
      ArrayUtils.shift(objectArray0, (-1916), 0, 0);
      assertEquals(6, objectArray0.length);
      
      int int0 = ArrayUtils.indexOf(objectArray0, (Object) null);
      assertEquals(6, objectArray0.length);
      assertEquals((-1), int0);
      
      ArrayUtils.swap(objectArray0, (-3689), 0, 0);
      assertEquals(6, objectArray0.length);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (-222);
      shortArray0[1] = (short)0;
      ArrayUtils.shuffle(shortArray0);
      assertArrayEquals(new short[] {(short)0, (short) (-222)}, shortArray0);
      assertEquals(2, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test0391()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 1580.0;
      doubleArray0[1] = (-1.0);
      doubleArray0[2] = (-1.0);
      doubleArray0[3] = 210.80385843910764;
      doubleArray0[4] = (-3493.7398410180544);
      doubleArray0[5] = 427.966908;
      doubleArray0[6] = (-1.0);
      boolean boolean0 = ArrayUtils.contains(doubleArray0, 210.80385843910764, (-118.4998408576));
      assertArrayEquals(new double[] {1580.0, (-1.0), (-1.0), 210.80385843910764, (-3493.7398410180544), 427.966908, (-1.0)}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0392()  throws Throwable  {
      float[] floatArray0 = new float[2];
      floatArray0[0] = (-1733.7683F);
      long[] longArray0 = new long[3];
      longArray0[0] = (long) 6;
      longArray0[1] = (long) 6;
      longArray0[2] = 1L;
      ArrayUtils.shift(longArray0, 6, 7, 6);
      assertArrayEquals(new long[] {6L, 6L, 1L}, longArray0);
      assertEquals(3, longArray0.length);
      
      boolean boolean0 = ArrayUtils.isEmpty((int[]) null);
      assertTrue(boolean0);
      
      Long long0 = new Long(6);
      assertNotNull(long0);
      assertEquals(6L, (long)long0);
      
      Long long1 = new Long(6);
      assertTrue(long1.equals((Object)long0));
      assertNotNull(long1);
      assertEquals(6L, (long)long1);
      
      Long long2 = new Long(1L);
      assertFalse(long2.equals((Object)long1));
      assertFalse(long2.equals((Object)long0));
      assertNotNull(long2);
      assertEquals(1L, (long)long2);
      
      Boolean boolean1 = Boolean.TRUE;
      assertTrue(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      assertTrue(boolean1);
      
      Boolean[] booleanArray0 = null;
      boolean[] booleanArray1 = ArrayUtils.toPrimitive((Boolean[]) null);
      assertNull(booleanArray1);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 1L;
      doubleArray0[1] = (double) 6L;
      doubleArray0[2] = (double) 1L;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (double) (-1733.7683F);
      ArrayUtils.shift(doubleArray0, (-2146870698));
      assertArrayEquals(new double[] {0.0, (-1733.768310546875), 1.0, 6.0, 1.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      
      Integer[] integerArray0 = ArrayUtils.toObject((int[]) null);
      assertNull(integerArray0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.remove(doubleArray0, 1544);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1544, Length: 5
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0393()  throws Throwable  {
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short)1964;
      shortArray0[2] = (short)2151;
      shortArray0[3] = (short)1;
      shortArray0[4] = (short)1382;
      shortArray0[5] = (short)0;
      shortArray0[6] = (short) (-1642);
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      ArrayUtils.swap(booleanArray0, (int) (short) (-1642), 0);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      assertEquals(2, booleanArray0.length);
      
      boolean boolean0 = ArrayUtils.isEmpty(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      assertEquals(2, booleanArray0.length);
      assertFalse(boolean0);
      
      char[] charArray0 = new char[4];
      charArray0[0] = '9';
      charArray0[1] = 'C';
      charArray0[2] = '<';
      charArray0[3] = '/';
      boolean boolean1 = ArrayUtils.isSameLength(charArray0, charArray0);
      assertArrayEquals(new char[] {'9', 'C', '<', '/'}, charArray0);
      assertEquals(4, charArray0.length);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      int[] intArray0 = new int[9];
      intArray0[0] = (int) (short)0;
      intArray0[1] = (int) (short)1382;
      intArray0[2] = (int) (short)1;
      intArray0[3] = (int) '9';
      intArray0[4] = 0;
      intArray0[5] = (int) (short)1964;
      intArray0[6] = (int) '9';
      intArray0[7] = (int) (short)0;
      intArray0[8] = (int) '<';
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertArrayEquals(new int[] {0, 1382, 1, 57, 0, 1964, 57, 0, 60}, intArray0);
      assertEquals(9, intArray0.length);
      assertEquals(9, integerArray0.length);
      assertNotNull(integerArray0);
  }

  @Test(timeout = 4000)
  public void test0394()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byte byte0 = (byte)17;
      byteArray0[0] = (byte)17;
      byte byte1 = (byte)0;
      byteArray0[1] = (byte)0;
      int[] intArray0 = new int[3];
      intArray0[0] = (int) (byte)0;
      intArray0[1] = (int) (byte)0;
      intArray0[2] = (int) (byte)0;
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertArrayEquals(new int[] {0, 0, 0}, intArray0);
      assertEquals(3, intArray0.length);
      assertEquals(3, integerArray0.length);
      assertNotNull(integerArray0);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (byte)0;
      doubleArray0[1] = (double) (byte)17;
      doubleArray0[2] = (double) (byte)0;
      // Undeclared exception!
      try { 
        ArrayUtils.remove(doubleArray0, 1405);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1405, Length: 3
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0395()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 571.942196047302;
      doubleArray0[2] = 1.0;
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = true;
      char[] charArray0 = new char[8];
      charArray0[0] = 'c';
      charArray0[2] = '{';
      charArray0[3] = 'm';
      Object[] objectArray0 = new Object[1];
      int int0 = 89;
      Object object0 = ArrayUtils.get(objectArray0, 89);
      assertEquals(1, objectArray0.length);
      assertNull(object0);
      
      objectArray0[0] = null;
      Short short0 = new Short((short) (-1));
      assertNotNull(short0);
      assertEquals((short) (-1), (short)short0);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (-1);
      BitSet bitSet0 = ArrayUtils.indexesOf(shortArray0, (short) (-1));
      assertEquals("{0}", bitSet0.toString());
      assertEquals(1, bitSet0.length());
      assertEquals(1, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertArrayEquals(new short[] {(short) (-1)}, shortArray0);
      assertEquals(1, shortArray0.length);
      assertNotNull(bitSet0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object) short0, bitSet0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test0396()  throws Throwable  {
      Character character0 = Character.valueOf('}');
      assertNotNull(character0);
      assertEquals('}', (char)character0);
      
      Character character1 = new Character('5');
      assertFalse(character1.equals((Object)character0));
      assertNotNull(character1);
      assertEquals('5', (char)character1);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) '5';
      doubleArray0[0] = (double) '5';
      ArrayUtils.swap(doubleArray0, 9, 9, 1489);
      assertArrayEquals(new double[] {53.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      
      MockRandom mockRandom0 = new MockRandom(1489);
      assertNotNull(mockRandom0);
      
      ArrayUtils.shuffle(doubleArray0, (Random) mockRandom0);
      assertArrayEquals(new double[] {0.0, 0.0, 53.0}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test0397()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = '~';
      Byte byte0 = new Byte((byte) (-124));
      assertNotNull(byte0);
      assertEquals((byte) (-124), (byte)byte0);
      
      Byte byte1 = new Byte((byte)75);
      assertFalse(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      assertEquals((byte)75, (byte)byte1);
      
      Byte byte2 = new Byte((byte) (-95));
      assertFalse(byte2.equals((Object)byte0));
      assertFalse(byte2.equals((Object)byte1));
      assertNotNull(byte2);
      assertEquals((byte) (-95), (byte)byte2);
      
      Byte byte3 = new Byte((byte) (-96));
      assertFalse(byte3.equals((Object)byte1));
      assertFalse(byte3.equals((Object)byte0));
      assertFalse(byte3.equals((Object)byte2));
      assertNotNull(byte3);
      assertEquals((byte) (-96), (byte)byte3);
      
      Byte byte4 = new Byte((byte)51);
      assertFalse(byte4.equals((Object)byte1));
      assertFalse(byte4.equals((Object)byte0));
      assertFalse(byte4.equals((Object)byte2));
      assertFalse(byte4.equals((Object)byte3));
      assertNotNull(byte4);
      assertEquals((byte)51, (byte)byte4);
      
      Byte[] byteArray0 = new Byte[3];
      byteArray0[0] = byte1;
      Byte byte5 = new Byte((byte) (-69));
      assertFalse(byte5.equals((Object)byte1));
      assertFalse(byte5.equals((Object)byte0));
      assertFalse(byte5.equals((Object)byte2));
      assertFalse(byte5.equals((Object)byte3));
      assertFalse(byte5.equals((Object)byte4));
      assertNotNull(byte5);
      assertEquals((byte) (-69), (byte)byte5);
      
      byteArray0[1] = byte5;
      Byte byte6 = new Byte((byte)75);
      assertFalse(byte6.equals((Object)byte5));
      assertTrue(byte6.equals((Object)byte1));
      assertFalse(byte6.equals((Object)byte2));
      assertFalse(byte6.equals((Object)byte0));
      assertFalse(byte6.equals((Object)byte3));
      assertFalse(byte6.equals((Object)byte4));
      assertNotNull(byte6);
      assertEquals((byte)75, (byte)byte6);
      
      byteArray0[2] = byte6;
      byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0, (byte) (-79));
      assertArrayEquals(new byte[] {(byte)75, (byte) (-69), (byte)75}, byteArray1);
      assertEquals(3, byteArray0.length);
      assertEquals(3, byteArray1.length);
      assertNotNull(byteArray1);
      
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short) (byte) (-69);
      shortArray0[1] = (short) (byte)51;
      shortArray0[2] = (short) (byte) (-95);
      shortArray0[3] = (short) (byte) (-79);
      shortArray0[4] = (short) (byte)51;
      shortArray0[5] = (short) (-1);
      shortArray0[6] = (short) (byte)75;
      shortArray0[7] = (short) (byte) (-95);
      shortArray0[8] = (short) (byte) (-69);
      short[] shortArray1 = ArrayUtils.clone(shortArray0);
      assertArrayEquals(new short[] {(short) (-69), (short)51, (short) (-95), (short) (-79), (short)51, (short) (-1), (short)75, (short) (-95), (short) (-69)}, shortArray1);
      assertArrayEquals(new short[] {(short) (-69), (short)51, (short) (-95), (short) (-79), (short)51, (short) (-1), (short)75, (short) (-95), (short) (-69)}, shortArray0);
      assertEquals(9, shortArray1.length);
      assertEquals(9, shortArray0.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertNotNull(shortArray1);
      
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = false;
      int int0 = ArrayUtils.indexOf(booleanArray0, true);
      assertTrue(Arrays.equals(new boolean[] {false, true, false, true, true, false}, booleanArray0));
      assertEquals(6, booleanArray0.length);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test0398()  throws Throwable  {
      ArrayUtils.swap((int[]) null, (-2147184749), (-2147184749), (-2147184749));
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      LongStream longStream0 = mockRandom0.longs();
      assertNotNull(longStream0);
      
      double double0 = mockRandom0.nextGaussian();
      assertEquals(0.0, double0, 0.01);
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'a';
      charArray0[1] = 'a';
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) 'a';
      floatArray0[1] = (float) 'a';
      floatArray0[2] = (float) (-2147184749);
      floatArray0[3] = (float) (-2147184749);
      floatArray0[4] = (float) 'a';
      ArrayUtils.shift(floatArray0, 5040);
      assertArrayEquals(new float[] {97.0F, 97.0F, (-2.14718477E9F), (-2.14718477E9F), 97.0F}, floatArray0, 0.01F);
      assertEquals(5, floatArray0.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.add(floatArray0, (-3964), (float) 5040);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -3964, Length: 5
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0399()  throws Throwable  {
      Long long0 = new Long((byte)0);
      assertNotNull(long0);
      assertEquals(0L, (long)long0);
      
      Long long1 = new Long((-2880L));
      assertFalse(long1.equals((Object)long0));
      assertNotNull(long1);
      assertEquals((-2880L), (long)long1);
      
      Long long2 = new Long(0L);
      assertFalse(long2.equals((Object)long1));
      assertTrue(long2.equals((Object)long0));
      assertNotNull(long2);
      assertEquals(0L, (long)long2);
      
      Long long3 = new Long((byte)0);
      assertTrue(long3.equals((Object)long0));
      assertTrue(long3.equals((Object)long2));
      assertFalse(long3.equals((Object)long1));
      assertNotNull(long3);
      assertEquals(0L, (long)long3);
      
      long[] longArray0 = ArrayUtils.toPrimitive((Long[]) null, 1926L);
      assertNull(longArray0);
  }

  @Test(timeout = 4000)
  public void test0400()  throws Throwable  {
      Byte[] byteArray0 = new Byte[2];
      Byte byte0 = new Byte((byte)51);
      assertNotNull(byte0);
      assertEquals((byte)51, (byte)byte0);
      
      byteArray0[0] = byte0;
      boolean boolean0 = ArrayUtils.contains((short[]) null, (short)202);
      assertFalse(boolean0);
      
      char[] charArray0 = new char[2];
      charArray0[0] = '.';
      Short short0 = new Short((short) (-14564));
      assertNotNull(short0);
      assertEquals((short) (-14564), (short)short0);
      
      Short[] shortArray0 = new Short[7];
      shortArray0[0] = short0;
      shortArray0[1] = short0;
      shortArray0[3] = short0;
      shortArray0[4] = short0;
      shortArray0[5] = short0;
      shortArray0[6] = short0;
      // Undeclared exception!
      try { 
        ArrayUtils.toPrimitive(shortArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0401()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      ArrayUtils.reverse(doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      
      float[] floatArray0 = new float[0];
      ArrayUtils.reverse(floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
      
      Double[] doubleArray1 = new Double[7];
      doubleArray0[1] = 0.0;
      double[] doubleArray2 = ArrayUtils.toPrimitive(doubleArray1, 0.0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray2, 0.01);
      assertEquals(7, doubleArray1.length);
      assertEquals(7, doubleArray2.length);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotSame(doubleArray2, doubleArray0);
      assertNotNull(doubleArray2);
      
      ArrayUtils.swap((Object[]) doubleArray1, 13, 4, (-2599));
      assertEquals(7, doubleArray1.length);
      
      char[] charArray0 = new char[3];
      charArray0[0] = 'W';
      charArray0[1] = 'E';
      ArrayUtils.shift(doubleArray0, 6);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertNotSame(doubleArray0, doubleArray2);
  }

  @Test(timeout = 4000)
  public void test0402()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      ArrayUtils.reverse(doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      
      float[] floatArray0 = new float[0];
      ArrayUtils.reverse(floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
      
      Double[] doubleArray1 = new Double[1];
      doubleArray1[0] = (Double) 0.0;
      double[] doubleArray2 = ArrayUtils.toPrimitive(doubleArray1, 0.0);
      assertArrayEquals(new double[] {0.0}, doubleArray2, 0.01);
      assertEquals(1, doubleArray1.length);
      assertEquals(1, doubleArray2.length);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotSame(doubleArray2, doubleArray0);
      assertNotNull(doubleArray2);
      
      ArrayUtils.swap((Object[]) doubleArray1, 13, 4, (-2599));
      assertEquals(1, doubleArray1.length);
      
      char[] charArray0 = new char[5];
      charArray0[0] = 'W';
      charArray0[1] = 'E';
      ArrayUtils.shift(doubleArray0, 6);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertNotSame(doubleArray0, doubleArray2);
  }

  @Test(timeout = 4000)
  public void test0403()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = false;
      int[] intArray0 = new int[3];
      intArray0[0] = 2;
      intArray0[1] = 2;
      intArray0[2] = 2;
      int[] intArray1 = ArrayUtils.removeAllOccurences(intArray0, 100);
      assertArrayEquals(new int[] {2, 2, 2}, intArray0);
      assertArrayEquals(new int[] {2, 2, 2}, intArray1);
      assertEquals(3, intArray0.length);
      assertEquals(3, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      
      Double double0 = new Double(4026.966708);
      assertNotNull(double0);
      assertEquals(4026.966708, (double)double0, 0.01);
      
      Double double1 = new Double(4026.966708);
      assertEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      assertEquals(4026.966708, (double)double1, 0.01);
      
      Double double2 = new Double(267.728);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertNotNull(double2);
      assertEquals(267.728, (double)double2, 0.01);
      
      Double[] doubleArray0 = new Double[4];
      doubleArray0[0] = double0;
      doubleArray0[1] = double0;
      Double double3 = new Double(5035.51792);
      assertNotEquals((double)double3, (double)double1, 0.01);
      assertNotEquals((double)double3, (double)double0, 0.01);
      assertNotEquals((double)double3, (double)double2, 0.01);
      assertNotNull(double3);
      assertEquals(5035.51792, (double)double3, 0.01);
      
      doubleArray0[2] = double3;
      Double double4 = new Double(2);
      assertNotEquals((double)double4, (double)double0, 0.01);
      assertNotEquals((double)double4, (double)double2, 0.01);
      assertNotEquals((double)double4, (double)double3, 0.01);
      assertNotEquals((double)double4, (double)double1, 0.01);
      assertNotNull(double4);
      assertEquals(2.0, (double)double4, 0.01);
      
      doubleArray0[3] = double4;
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0, (-1146.64));
      assertArrayEquals(new double[] {4026.966708, 4026.966708, 5035.51792, 2.0}, doubleArray1, 0.01);
      assertEquals(4, doubleArray1.length);
      assertEquals(4, doubleArray0.length);
      assertNotNull(doubleArray1);
  }

  @Test(timeout = 4000)
  public void test0404()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = '~';
      Long long0 = new Long(495L);
      assertNotNull(long0);
      assertEquals(495L, (long)long0);
      
      Long long1 = new Long((-2147483648L));
      assertFalse(long1.equals((Object)long0));
      assertNotNull(long1);
      assertEquals((-2147483648L), (long)long1);
      
      Long long2 = new Long((-1226L));
      assertFalse(long2.equals((Object)long1));
      assertFalse(long2.equals((Object)long0));
      assertNotNull(long2);
      assertEquals((-1226L), (long)long2);
      
      Long long3 = new Long(1952L);
      assertFalse(long3.equals((Object)long0));
      assertFalse(long3.equals((Object)long1));
      assertFalse(long3.equals((Object)long2));
      assertNotNull(long3);
      assertEquals(1952L, (long)long3);
      
      Boolean boolean0 = Boolean.TRUE;
      assertNotNull(boolean0);
      assertTrue(boolean0);
      
      Boolean[] booleanArray0 = new Boolean[0];
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertNotNull(booleanArray1);
      
      int[] intArray0 = new int[8];
      intArray0[0] = (int) '~';
      intArray0[1] = (int) '~';
      intArray0[2] = (int) '~';
      intArray0[3] = (int) '~';
      intArray0[4] = 54;
      intArray0[5] = (int) '~';
      intArray0[6] = (int) '~';
      intArray0[7] = (int) '~';
      int[] intArray1 = ArrayUtils.removeAllOccurences(intArray0, 2);
      assertArrayEquals(new int[] {126, 126, 126, 126, 54, 126, 126, 126}, intArray1);
      assertArrayEquals(new int[] {126, 126, 126, 126, 54, 126, 126, 126}, intArray0);
      assertEquals(8, intArray1.length);
      assertEquals(8, intArray0.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
      assertNotNull(intArray1);
      
      Double[] doubleArray0 = new Double[3];
      Double double0 = new Double((-629.817422));
      assertNotNull(double0);
      assertEquals((-629.817422), (double)double0, 0.01);
      
      doubleArray0[0] = double0;
      Double double1 = new Double(126);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      assertEquals(126.0, (double)double1, 0.01);
      
      doubleArray0[1] = double1;
      Double double2 = new Double((-1146.64));
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertNotNull(double2);
      assertEquals((-1146.64), (double)double2, 0.01);
      
      doubleArray0[2] = double2;
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0, (double) (-1226L));
      assertArrayEquals(new double[] {(-629.817422), 126.0, (-1146.64)}, doubleArray1, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertNotNull(doubleArray1);
  }

  @Test(timeout = 4000)
  public void test0405()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = '~';
      Long long0 = new Long(479L);
      assertNotNull(long0);
      assertEquals(479L, (long)long0);
      
      Long long1 = new Long((-2147483648L));
      assertFalse(long1.equals((Object)long0));
      assertNotNull(long1);
      assertEquals((-2147483648L), (long)long1);
      
      Long long2 = new Long((-1226L));
      assertFalse(long2.equals((Object)long0));
      assertFalse(long2.equals((Object)long1));
      assertNotNull(long2);
      assertEquals((-1226L), (long)long2);
      
      Long long3 = new Long(1952L);
      assertFalse(long3.equals((Object)long2));
      assertFalse(long3.equals((Object)long0));
      assertFalse(long3.equals((Object)long1));
      assertNotNull(long3);
      assertEquals(1952L, (long)long3);
      
      Boolean boolean0 = Boolean.TRUE;
      assertNotNull(boolean0);
      assertTrue(boolean0);
      
      Boolean[] booleanArray0 = new Boolean[0];
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertNotNull(booleanArray1);
      
      ArrayUtils.swap((Object[]) booleanArray0, (-789), (-789), (-1874));
      assertEquals(0, booleanArray0.length);
      
      Map<Object, Object> map0 = ArrayUtils.toMap(booleanArray0);
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      assertEquals(0, booleanArray0.length);
      assertNotNull(map0);
  }

  @Test(timeout = 4000)
  public void test0406()  throws Throwable  {
      Byte byte0 = new Byte((byte)124);
      assertNotNull(byte0);
      assertEquals((byte)124, (byte)byte0);
      
      Byte byte1 = new Byte((byte)124);
      assertTrue(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      assertEquals((byte)124, (byte)byte1);
      
      Long long0 = new Long(0L);
      assertNotNull(long0);
      assertEquals(0L, (long)long0);
      
      Long long1 = new Long((-4683L));
      assertFalse(long1.equals((Object)long0));
      assertNotNull(long1);
      assertEquals((-4683L), (long)long1);
      
      Long long2 = new Long((-2880L));
      assertFalse(long2.equals((Object)long0));
      assertFalse(long2.equals((Object)long1));
      assertNotNull(long2);
      assertEquals((-2880L), (long)long2);
      
      Long long3 = new Long((-267L));
      assertFalse(long3.equals((Object)long0));
      assertFalse(long3.equals((Object)long2));
      assertFalse(long3.equals((Object)long1));
      assertNotNull(long3);
      assertEquals((-267L), (long)long3);
      
      Boolean boolean0 = Boolean.TRUE;
      assertNotNull(boolean0);
      assertTrue(boolean0);
      
      boolean[] booleanArray0 = ArrayUtils.toPrimitive((Boolean[]) null);
      assertNull(booleanArray0);
      
      boolean[] booleanArray1 = ArrayUtils.removeElement((boolean[]) null, false);
      assertNull(booleanArray1);
      
      Long long4 = new Long(0L);
      assertFalse(long4.equals((Object)long2));
      assertFalse(long4.equals((Object)long3));
      assertFalse(long4.equals((Object)long1));
      assertTrue(long4.equals((Object)long0));
      assertNotNull(long4);
      assertEquals(0L, (long)long4);
      
      // Undeclared exception!
      try { 
        ArrayUtils.add((Object[]) null, 4, (Object) long0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 4, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0407()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-39);
      byte[] byteArray1 = new byte[8];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte) (-39);
      byteArray1[3] = (byte) (-39);
      byteArray1[4] = (byte) (-39);
      byteArray1[7] = (byte) (-39);
      int int0 = ArrayUtils.indexOf(byteArray1, (byte)6);
      assertArrayEquals(new byte[] {(byte) (-39), (byte)0, (byte)0, (byte) (-39), (byte) (-39), (byte)0, (byte)0, (byte) (-39)}, byteArray1);
      assertEquals(8, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray1, byteArray0);
      assertEquals((-1), int0);
      
      long[] longArray0 = new long[0];
      int int1 = ArrayUtils.lastIndexOf(longArray0, 2226L, 6);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[6] = true;
      ArrayUtils.swap(booleanArray0, (-2595), (int) (byte)0, (int) (byte) (-39));
      assertTrue(Arrays.equals(new boolean[] {true, false, true, false, false, false, true}, booleanArray0));
      assertEquals(7, booleanArray0.length);
      
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short) (byte) (-39);
      shortArray0[1] = (short) (byte)0;
      shortArray0[2] = (short) (byte)0;
      shortArray0[3] = (short) (byte)6;
      shortArray0[4] = (short) (byte) (-39);
      shortArray0[5] = (short) (byte) (-39);
      shortArray0[6] = (short) (byte) (-39);
      short[] shortArray1 = ArrayUtils.nullToEmpty(shortArray0);
      assertArrayEquals(new short[] {(short) (-39), (short)0, (short)0, (short)6, (short) (-39), (short) (-39), (short) (-39)}, shortArray0);
      assertArrayEquals(new short[] {(short) (-39), (short)0, (short)0, (short)6, (short) (-39), (short) (-39), (short) (-39)}, shortArray1);
      assertEquals(7, shortArray0.length);
      assertEquals(7, shortArray1.length);
      assertSame(shortArray0, shortArray1);
      assertSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      
      // Undeclared exception!
      try { 
        ArrayUtils.insert((int) (byte) (-39), shortArray0, shortArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -39, Length: 7
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0408()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 571.942196047302;
      doubleArray0[2] = 1.0;
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = true;
      ArrayUtils.swap(booleanArray0, 59, (-1), 127);
      assertTrue(Arrays.equals(new boolean[] {true, false, false, false, true}, booleanArray0));
      assertEquals(5, booleanArray0.length);
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (-2131);
      short short0 = (short)88;
      shortArray0[1] = (short)88;
      short short1 = (short)36;
      shortArray0[2] = (short)36;
      short short2 = (short)37;
      shortArray0[3] = (short)37;
      short[] shortArray1 = ArrayUtils.nullToEmpty(shortArray0);
      assertArrayEquals(new short[] {(short) (-2131), (short)88, (short)36, (short)37}, shortArray1);
      assertArrayEquals(new short[] {(short) (-2131), (short)88, (short)36, (short)37}, shortArray0);
      assertEquals(4, shortArray1.length);
      assertEquals(4, shortArray0.length);
      assertSame(shortArray1, shortArray0);
      assertSame(shortArray0, shortArray1);
      assertNotNull(shortArray1);
      
      // Undeclared exception!
      try { 
        ArrayUtils.insert(127, shortArray0, shortArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 127, Length: 4
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0409()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-15);
      byteArray0[2] = (byte)0;
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short) (byte)0;
      shortArray0[1] = (short) (byte) (-15);
      shortArray0[2] = (short) (-285);
      shortArray0[3] = (short) (byte) (-15);
      shortArray0[4] = (short) (byte)0;
      shortArray0[5] = (short) (byte) (-15);
      shortArray0[6] = (short) (byte)0;
      shortArray0[7] = (short) (byte)0;
      shortArray0[8] = (short) (byte)0;
      short[] shortArray1 = ArrayUtils.nullToEmpty(shortArray0);
      assertArrayEquals(new short[] {(short)0, (short) (-15), (short) (-285), (short) (-15), (short)0, (short) (-15), (short)0, (short)0, (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short) (-15), (short) (-285), (short) (-15), (short)0, (short) (-15), (short)0, (short)0, (short)0}, shortArray1);
      assertEquals(9, shortArray0.length);
      assertEquals(9, shortArray1.length);
      assertSame(shortArray0, shortArray1);
      assertSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      
      short[] shortArray2 = new short[1];
      assertFalse(shortArray2.equals((Object)shortArray1));
      assertFalse(shortArray2.equals((Object)shortArray0));
      
      shortArray2[0] = (short) (byte) (-15);
      // Undeclared exception!
      try { 
        ArrayUtils.insert(50, shortArray1, shortArray2);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 50, Length: 9
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0410()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-39);
      byteArray0[1] = (byte)0;
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) (byte) (-39);
      doubleArray0[1] = (double) (byte) (-39);
      doubleArray0[2] = (double) (byte) (-39);
      doubleArray0[3] = (-439.292646842);
      doubleArray0[4] = 2727.857871791033;
      doubleArray0[5] = (double) (byte) (-39);
      doubleArray0[6] = (double) (byte)0;
      doubleArray0[7] = (double) (byte) (-39);
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, 16.227340831659, (int) (byte) (-39), 2727.857871791033);
      assertEquals("{0, 1, 2, 3, 4, 5, 6, 7}", bitSet0.toString());
      assertEquals(8, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertEquals(8, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertArrayEquals(new double[] {(-39.0), (-39.0), (-39.0), (-439.292646842), 2727.857871791033, (-39.0), 0.0, (-39.0)}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      assertNotNull(bitSet0);
      
      BitSet bitSet1 = ArrayUtils.indexesOf(doubleArray0, (-39.0), 306.728);
      assertEquals(6, bitSet1.cardinality());
      assertEquals(64, bitSet1.size());
      assertFalse(bitSet1.isEmpty());
      assertEquals("{0, 1, 2, 5, 6, 7}", bitSet1.toString());
      assertEquals(8, bitSet1.length());
      assertArrayEquals(new double[] {(-39.0), (-39.0), (-39.0), (-439.292646842), 2727.857871791033, (-39.0), 0.0, (-39.0)}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      assertFalse(bitSet1.equals((Object)bitSet0));
      assertNotSame(bitSet1, bitSet0);
      assertNotNull(bitSet1);
      
      bitSet0.or(bitSet1);
      assertEquals("{0, 1, 2, 3, 4, 5, 6, 7}", bitSet0.toString());
      assertEquals(8, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertEquals(8, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals(6, bitSet1.cardinality());
      assertEquals(64, bitSet1.size());
      assertFalse(bitSet1.isEmpty());
      assertEquals("{0, 1, 2, 5, 6, 7}", bitSet1.toString());
      assertEquals(8, bitSet1.length());
      assertArrayEquals(new double[] {(-39.0), (-39.0), (-39.0), (-439.292646842), 2727.857871791033, (-39.0), 0.0, (-39.0)}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      assertFalse(bitSet0.equals((Object)bitSet1));
      assertFalse(bitSet1.equals((Object)bitSet0));
      assertNotSame(bitSet0, bitSet1);
      assertNotSame(bitSet1, bitSet0);
      
      Character character0 = new Character('i');
      assertNotNull(character0);
      assertEquals('i', (char)character0);
      
      int int0 = ArrayUtils.indexOf((Object[]) null, (Object) character0);
      assertEquals((-1), int0);
      
      ArrayUtils.swap((Object[]) null, (-1), (int) (byte) (-39), 0);
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) (-1);
      floatArray0[1] = (float) (byte) (-39);
      float[] floatArray1 = ArrayUtils.remove(floatArray0, (int) (byte)0);
      assertArrayEquals(new float[] {(-1.0F), (-39.0F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-39.0F)}, floatArray1, 0.01F);
      assertEquals(2, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
  }

  @Test(timeout = 4000)
  public void test0411()  throws Throwable  {
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)2;
      boolean boolean0 = ArrayUtils.contains(shortArray0, (short)2);
      assertArrayEquals(new short[] {(short)2, (short)0}, shortArray0);
      assertEquals(2, shortArray0.length);
      assertTrue(boolean0);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      boolean[] booleanArray1 = ArrayUtils.addAll(booleanArray0, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true}, booleanArray1));
      assertEquals(2, booleanArray0.length);
      assertEquals(4, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      
      Byte[] byteArray0 = new Byte[1];
      int int0 = 1;
      try { 
        Byte.valueOf("{}", 1);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // radix 1 less than Character.MIN_RADIX
         //
         verifyException("java.lang.Integer", e);
      }
  }

  @Test(timeout = 4000)
  public void test0412()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = true;
      booleanArray0[6] = false;
      boolean boolean0 = ArrayUtils.contains(booleanArray0, true);
      assertTrue(Arrays.equals(new boolean[] {false, true, true, false, false, true, false, false}, booleanArray0));
      assertEquals(8, booleanArray0.length);
      assertTrue(boolean0);
      
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) false;
      objectArray0[1] = (Object) false;
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)202;
      shortArray0[1] = (short)202;
      boolean boolean1 = ArrayUtils.contains(shortArray0, (short)202);
      assertArrayEquals(new short[] {(short)202, (short)202}, shortArray0);
      assertEquals(2, shortArray0.length);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (short)202;
      doubleArray0[1] = 0.7;
      ArrayUtils.shift(doubleArray0, (int) (short)202, (int) (short)202, (-18));
      assertArrayEquals(new double[] {202.0, 0.7}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test0413()  throws Throwable  {
      Character character0 = Character.valueOf('~');
      assertNotNull(character0);
      assertEquals('~', (char)character0);
      
      Character character1 = new Character('5');
      assertFalse(character1.equals((Object)character0));
      assertNotNull(character1);
      assertEquals('5', (char)character1);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) '5';
      doubleArray0[0] = (double) '5';
      doubleArray0[2] = (double) '5';
      ArrayUtils.swap(doubleArray0, 9, 9, 53);
      assertArrayEquals(new double[] {53.0, 0.0, 53.0}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      
      Integer[] integerArray0 = new Integer[0];
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0, 9);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, integerArray0.length);
      assertEquals(0, intArray0.length);
      assertNotNull(intArray0);
      
      boolean boolean0 = ArrayUtils.contains(intArray0, 53);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, integerArray0.length);
      assertEquals(0, intArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0414()  throws Throwable  {
      float[] floatArray0 = new float[3];
      floatArray0[0] = (-1385.0087F);
      Integer[] integerArray0 = new Integer[3];
      Integer integer0 = new Integer(275);
      assertNotNull(integer0);
      assertEquals(275, (int)integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((int) integerArray0[0]);
      assertEquals(3, integerArray0.length);
      assertTrue(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(275, (int)integer1);
      
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(128);
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertNotNull(integer2);
      assertEquals(128, (int)integer2);
      
      integerArray0[2] = integer2;
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0, (int) integerArray0[1]);
      assertArrayEquals(new int[] {275, 275, 128}, intArray0);
      assertEquals(3, integerArray0.length);
      assertEquals(3, intArray0.length);
      assertNotNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test0415()  throws Throwable  {
      int int0 = (-4);
      int[] intArray0 = new int[5];
      intArray0[0] = (-4);
      intArray0[1] = (-4);
      intArray0[2] = (-4);
      intArray0[3] = 1128;
      intArray0[1] = (-4);
      ArrayUtils.shuffle(intArray0);
      assertArrayEquals(new int[] {(-4), (-4), 1128, 0, (-4)}, intArray0);
      assertEquals(5, intArray0.length);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 963.2049;
      doubleArray0[1] = (double) (-4);
      doubleArray0[2] = (double) (-4);
      doubleArray0[3] = (double) (-4);
      ArrayUtils.swap(doubleArray0, 0, 0, (-4));
      assertArrayEquals(new double[] {963.2049, (-4.0), (-4.0), (-4.0)}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      
      Integer[] integerArray0 = new Integer[9];
      integerArray0[0] = (Integer) 0;
      integerArray0[1] = (Integer) (-4);
      integerArray0[2] = (Integer) (-4);
      int[] intArray1 = ArrayUtils.toPrimitive(integerArray0, int0);
      assertArrayEquals(new int[] {0, (-4), (-4), (-4), (-4), (-4), (-4), (-4), (-4)}, intArray1);
      assertEquals(9, intArray1.length);
      assertEquals(9, integerArray0.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      
      boolean boolean0 = ArrayUtils.contains(intArray0, 1128);
      assertArrayEquals(new int[] {(-4), (-4), 1128, 0, (-4)}, intArray0);
      assertEquals(5, intArray0.length);
      assertFalse(intArray0.equals((Object)intArray1));
      assertNotSame(intArray0, intArray1);
      assertTrue(boolean0);
      
      Integer[] integerArray1 = ArrayUtils.subarray(integerArray0, (-740), int0);
      assertEquals(0, integerArray1.length);
      assertEquals(9, integerArray0.length);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotSame(integerArray1, integerArray0);
      assertNotSame(integerArray0, integerArray1);
      assertNotNull(integerArray1);
  }

  @Test(timeout = 4000)
  public void test0416()  throws Throwable  {
      int int0 = (-1);
      int[] intArray0 = new int[5];
      intArray0[0] = (-1);
      intArray0[1] = (-1);
      intArray0[2] = (-1);
      intArray0[3] = 1128;
      intArray0[1] = (-1);
      ArrayUtils.shuffle(intArray0);
      assertArrayEquals(new int[] {(-1), (-1), 1128, 0, (-1)}, intArray0);
      assertEquals(5, intArray0.length);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 963.2049;
      doubleArray0[1] = (double) (-1);
      doubleArray0[2] = (double) (-1);
      doubleArray0[3] = (double) (-1);
      ArrayUtils.swap(doubleArray0, 0, 0, 2145448816);
      assertArrayEquals(new double[] {963.2049, (-1.0), (-1.0), (-1.0)}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      
      Integer[] integerArray0 = new Integer[3];
      integerArray0[0] = (Integer) 0;
      integerArray0[1] = (Integer) (-1);
      integerArray0[2] = (Integer) (-1);
      int[] intArray1 = ArrayUtils.toPrimitive(integerArray0, int0);
      assertArrayEquals(new int[] {0, (-1), (-1)}, intArray1);
      assertEquals(3, intArray1.length);
      assertEquals(3, integerArray0.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      
      boolean boolean0 = ArrayUtils.contains(intArray0, 1128);
      assertArrayEquals(new int[] {(-1), (-1), 1128, 0, (-1)}, intArray0);
      assertEquals(5, intArray0.length);
      assertFalse(intArray0.equals((Object)intArray1));
      assertNotSame(intArray0, intArray1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0417()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[3] = false;
      booleanArray0[2] = false;
      booleanArray0[5] = false;
      booleanArray0[6] = false;
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, 12, 12);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertEquals(7, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      
      Byte byte0 = new Byte((byte) (-64));
      assertNotNull(byte0);
      assertEquals((byte) (-64), (byte)byte0);
      
      short[] shortArray0 = new short[0];
      short[] shortArray1 = ArrayUtils.insert((-2280), shortArray0, shortArray0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
  }

  @Test(timeout = 4000)
  public void test0418()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-39);
      byte[] byteArray1 = new byte[8];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte) (-39);
      byteArray1[2] = (byte) (-39);
      byteArray1[3] = (byte) (-39);
      byteArray1[4] = (byte) (-39);
      byteArray1[5] = (byte)6;
      byteArray1[6] = (byte) (-39);
      byteArray1[7] = (byte) (-39);
      int int0 = ArrayUtils.indexOf(byteArray1, (byte)6);
      assertArrayEquals(new byte[] {(byte) (-39), (byte)0, (byte) (-39), (byte) (-39), (byte) (-39), (byte)6, (byte) (-39), (byte) (-39)}, byteArray1);
      assertEquals(8, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray1, byteArray0);
      assertEquals(5, int0);
      
      long[] longArray0 = new long[0];
      int int1 = ArrayUtils.lastIndexOf(longArray0, 2226L, 6);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[6] = true;
      ArrayUtils.swap(booleanArray0, (-2595), (int) (byte) (-39), (int) (byte) (-39));
      assertTrue(Arrays.equals(new boolean[] {true, false, true, false, false, false, true}, booleanArray0));
      assertEquals(7, booleanArray0.length);
      
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short) (byte) (-39);
      shortArray0[1] = (short) (byte)6;
      shortArray0[2] = (short) (byte)6;
      shortArray0[3] = (short) (byte)6;
      shortArray0[4] = (short) (byte) (-39);
      shortArray0[5] = (short) (byte) (-39);
      shortArray0[6] = (short) (byte) (-39);
      short[] shortArray1 = ArrayUtils.nullToEmpty(shortArray0);
      assertArrayEquals(new short[] {(short) (-39), (short)6, (short)6, (short)6, (short) (-39), (short) (-39), (short) (-39)}, shortArray0);
      assertArrayEquals(new short[] {(short) (-39), (short)6, (short)6, (short)6, (short) (-39), (short) (-39), (short) (-39)}, shortArray1);
      assertEquals(7, shortArray0.length);
      assertEquals(7, shortArray1.length);
      assertSame(shortArray0, shortArray1);
      assertSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      
      // Undeclared exception!
      try { 
        ArrayUtils.insert((int) (byte) (-39), shortArray0, shortArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -39, Length: 7
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0419()  throws Throwable  {
      byte[] byteArray0 = new byte[12];
      byteArray0[0] = (byte) (-63);
      boolean boolean0 = ArrayUtils.isSameLength(byteArray0, byteArray0);
      assertEquals(12, byteArray0.length);
      assertTrue(boolean0);
      
      short[] shortArray0 = new short[3];
      shortArray0[1] = (short) (byte) (-63);
      shortArray0[2] = (short) (byte) (-63);
      ArrayUtils.shift(shortArray0, (int) (short) (-63), (-1), (int) (short) (-63));
      assertArrayEquals(new short[] {(short)0, (short) (-63), (short) (-63)}, shortArray0);
      assertEquals(3, shortArray0.length);
      
      Short[] shortArray1 = new Short[0];
      Short[] shortArray2 = ArrayUtils.nullToEmpty(shortArray1);
      assertEquals(0, shortArray1.length);
      assertEquals(0, shortArray2.length);
      assertFalse(shortArray2.equals((Object)shortArray1));
      assertNotSame(shortArray1, shortArray2);
      assertNotSame(shortArray2, shortArray1);
      assertNotNull(shortArray2);
      
      byte[] byteArray1 = ArrayUtils.removeElements(byteArray0, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(12, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      
      Byte byte0 = new Byte((byte) (-63));
      assertNotNull(byte0);
      assertEquals((byte) (-63), (byte)byte0);
      
      byte[] byteArray2 = ArrayUtils.addAll(byteArray0, byteArray1);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(12, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertEquals(12, byteArray2.length);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      assertNotNull(byteArray2);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) (-1);
      float[] floatArray1 = ArrayUtils.addFirst(floatArray0, 768.2129F);
      assertArrayEquals(new float[] {(-1.0F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {768.2129F, (-1.0F)}, floatArray1, 0.01F);
      assertEquals(1, floatArray0.length);
      assertEquals(2, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      
      // Undeclared exception!
      try { 
        ArrayUtils.insert((int) (byte) (-63), shortArray0, shortArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -63, Length: 3
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0420()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)1;
      float[] floatArray0 = new float[2];
      floatArray0[0] = 1.0F;
      floatArray0[1] = 1192.67F;
      ArrayUtils.reverse(floatArray0, (int) (byte)1, 13);
      assertArrayEquals(new float[] {1.0F, 1192.67F}, floatArray0, 0.01F);
      assertEquals(2, floatArray0.length);
      
      Double double0 = new Double((-3021.60676989));
      assertNotNull(double0);
      assertEquals((-3021.60676989), (double)double0, 0.01);
      
      Double double1 = new Double(1.0F);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      assertEquals(1.0, (double)double1, 0.01);
      
      Double double2 = new Double(980.84032930317);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertNotNull(double2);
      assertEquals(980.84032930317, (double)double2, 0.01);
      
      Double double3 = new Double((-1375.5));
      assertNotEquals((double)double3, (double)double0, 0.01);
      assertNotEquals((double)double3, (double)double1, 0.01);
      assertNotEquals((double)double3, (double)double2, 0.01);
      assertNotNull(double3);
      assertEquals((-1375.5), (double)double3, 0.01);
      
      Double double4 = new Double(13);
      assertNotEquals((double)double4, (double)double0, 0.01);
      assertNotEquals((double)double4, (double)double1, 0.01);
      assertNotEquals((double)double4, (double)double2, 0.01);
      assertNotEquals((double)double4, (double)double3, 0.01);
      assertNotNull(double4);
      assertEquals(13.0, (double)double4, 0.01);
      
      Double double5 = new Double(0.7);
      assertNotEquals((double)double5, (double)double3, 0.01);
      assertNotEquals((double)double5, (double)double0, 0.01);
      assertNotEquals((double)double5, (double)double1, 0.01);
      assertNotEquals((double)double5, (double)double2, 0.01);
      assertNotEquals((double)double5, (double)double4, 0.01);
      assertNotNull(double5);
      assertEquals(0.7, (double)double5, 0.01);
      
      Double[] doubleArray0 = new Double[2];
      doubleArray0[0] = double4;
      doubleArray0[1] = double3;
      Double[] doubleArray1 = ArrayUtils.nullToEmpty(doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertSame(doubleArray0, doubleArray1);
      assertSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      
      float[] floatArray1 = ArrayUtils.insert((int) (byte)1, floatArray0, floatArray0);
      assertArrayEquals(new float[] {1.0F, 1.0F, 1192.67F, 1192.67F}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {1.0F, 1192.67F}, floatArray0, 0.01F);
      assertEquals(4, floatArray1.length);
      assertEquals(2, floatArray0.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertNotNull(floatArray1);
      
      int[] intArray0 = new int[7];
      intArray0[0] = (int) (byte)1;
      intArray0[1] = 13;
      intArray0[2] = (int) (byte)1;
      intArray0[3] = (int) (byte)1;
      intArray0[4] = 13;
      intArray0[5] = (int) (byte)1;
      intArray0[6] = 13;
      int int0 = ArrayUtils.indexOf(intArray0, 1, 1);
      assertArrayEquals(new int[] {1, 13, 1, 1, 13, 1, 13}, intArray0);
      assertEquals(7, intArray0.length);
      assertEquals(2, int0);
      
      double[] doubleArray2 = new double[3];
      doubleArray2[0] = (double) doubleArray0[1];
      doubleArray2[1] = (-1375.5);
      doubleArray2[2] = (-1375.5);
      ArrayUtils.shift(doubleArray2, (int) (byte)1, 5266, 5);
      assertArrayEquals(new double[] {(-1375.5), (-1375.5), (-1375.5)}, doubleArray2, 0.01);
      assertEquals(3, doubleArray2.length);
  }

  @Test(timeout = 4000)
  public void test0421()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = false;
      booleanArray0[5] = true;
      boolean[] booleanArray1 = ArrayUtils.add(booleanArray0, false);
      assertTrue(Arrays.equals(new boolean[] {true, false, true, true, false, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, false, true, true, false, true, false}, booleanArray1));
      assertEquals(6, booleanArray0.length);
      assertEquals(7, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      
      long[] longArray0 = new long[2];
      longArray0[0] = 2080L;
      longArray0[1] = (-1L);
      long[] longArray1 = ArrayUtils.removeElements(longArray0, longArray0);
      assertArrayEquals(new long[] {2080L, (-1L)}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertEquals(2, longArray0.length);
      assertEquals(0, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
      
      boolean boolean0 = ArrayUtils.isNotEmpty(longArray1);
      assertArrayEquals(new long[] {2080L, (-1L)}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertEquals(2, longArray0.length);
      assertEquals(0, longArray1.length);
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertFalse(boolean0);
      
      Long[] longArray2 = new Long[3];
      longArray2[0] = (Long) 2080L;
      longArray2[1] = (Long) 2080L;
      longArray2[2] = (Long) 2080L;
      Long[] longArray3 = ArrayUtils.removeElements(longArray2, longArray2);
      assertEquals(0, longArray3.length);
      assertEquals(3, longArray2.length);
      assertFalse(longArray3.equals((Object)longArray2));
      assertNotSame(longArray3, longArray2);
      assertNotSame(longArray2, longArray3);
      assertNotNull(longArray3);
      
      int[] intArray0 = new int[2];
      intArray0[0] = 2146175801;
      ArrayUtils.reverse(booleanArray0, (-1), 2);
      assertTrue(Arrays.equals(new boolean[] {false, true, true, true, false, true}, booleanArray0));
      assertEquals(6, booleanArray0.length);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertNotSame(booleanArray0, booleanArray1);
  }

  @Test(timeout = 4000)
  public void test0422()  throws Throwable  {
      char[] charArray0 = new char[2];
      char char0 = '~';
      charArray0[0] = '~';
      charArray0[1] = 'D';
      int int0 = (-1775);
      long[] longArray0 = new long[0];
      int int1 = ArrayUtils.indexOf(longArray0, 4561L, (-1775));
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      AbstractMap.SimpleEntry<Object, Double> abstractMap_SimpleEntry0 = null;
      try {
        abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Object, Double>((Map.Entry<?, ? extends Double>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractMap$SimpleEntry", e);
      }
  }

  @Test(timeout = 4000)
  public void test0423()  throws Throwable  {
      Byte[] byteArray0 = new Byte[2];
      Byte byte0 = new Byte((byte)51);
      assertNotNull(byte0);
      assertEquals((byte)51, (byte)byte0);
      
      byteArray0[0] = byte0;
      Byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0);
      assertEquals(2, byteArray0.length);
      assertEquals(2, byteArray1.length);
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      
      boolean boolean0 = ArrayUtils.contains((short[]) null, (short)202);
      assertFalse(boolean0);
      
      char[] charArray0 = new char[2];
      charArray0[0] = '.';
      charArray0[1] = 'L';
      boolean[] booleanArray0 = new boolean[0];
      ArrayUtils.reverse(booleanArray0, (-2637), (int) (short)202);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals(0, booleanArray0.length);
      
      double[] doubleArray0 = ArrayUtils.removeElements((double[]) null, (double[]) null);
      assertNull(doubleArray0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((double[]) null, 1727.31, 3);
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertNotNull(bitSet0);
      
      int[] intArray0 = new int[1];
      intArray0[0] = 21;
      int int0 = ArrayUtils.lastIndexOf(intArray0, (-1), 9);
      assertArrayEquals(new int[] {21}, intArray0);
      assertEquals(1, intArray0.length);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0424()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      int int0 = ArrayUtils.indexOf(intArray0, 0, 0);
      assertArrayEquals(new int[] {0}, intArray0);
      assertEquals(1, intArray0.length);
      assertEquals(0, int0);
      
      String string0 = ArrayUtils.toString((Object) "");
      assertNotNull(string0);
      assertEquals("", string0);
      
      int[] intArray1 = ArrayUtils.subarray(intArray0, (-127), 0);
      assertArrayEquals(new int[] {0}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(1, intArray0.length);
      assertEquals(0, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      
      char[] charArray0 = new char[3];
      charArray0[0] = 'p';
      charArray0[1] = 'Y';
      charArray0[2] = '|';
      char[] charArray1 = ArrayUtils.add(charArray0, '|');
      assertArrayEquals(new char[] {'p', 'Y', '|'}, charArray0);
      assertArrayEquals(new char[] {'p', 'Y', '|', '|'}, charArray1);
      assertEquals(3, charArray0.length);
      assertEquals(4, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      
      boolean boolean0 = ArrayUtils.contains(intArray1, 955);
      assertArrayEquals(new int[] {0}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(1, intArray0.length);
      assertEquals(0, intArray1.length);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertFalse(boolean0);
      
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short)54;
      shortArray0[1] = (short)386;
      shortArray0[2] = (short)314;
      shortArray0[3] = (short) (-2584);
      shortArray0[4] = (short) (-2);
      shortArray0[5] = (short)1136;
      shortArray0[6] = (short) (-1);
      BitSet bitSet0 = ArrayUtils.indexesOf(shortArray0, (short) (-1114));
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertArrayEquals(new short[] {(short)54, (short)386, (short)314, (short) (-2584), (short) (-2), (short)1136, (short) (-1)}, shortArray0);
      assertEquals(7, shortArray0.length);
      assertNotNull(bitSet0);
  }

  @Test(timeout = 4000)
  public void test0425()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)79;
      byteArray0[2] = (byte) (-22);
      Boolean boolean0 = new Boolean(false);
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) (byte)79;
      long[] longArray1 = ArrayUtils.nullToEmpty(longArray0);
      assertArrayEquals(new long[] {79L}, longArray0);
      assertArrayEquals(new long[] {79L}, longArray1);
      assertEquals(1, longArray0.length);
      assertEquals(1, longArray1.length);
      assertSame(longArray0, longArray1);
      assertSame(longArray1, longArray0);
      assertNotNull(longArray1);
  }

  @Test(timeout = 4000)
  public void test0426()  throws Throwable  {
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short)560;
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte)110;
      boolean boolean0 = ArrayUtils.isEmpty(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)110, (byte)0}, byteArray0);
      assertEquals(3, byteArray0.length);
      assertFalse(boolean0);
      
      ArrayUtils.shift((float[]) null, (int) (short)1118);
      long[] longArray0 = new long[6];
      longArray0[0] = (long) (byte)110;
      longArray0[1] = (long) (byte)8;
      longArray0[2] = (long) (byte)110;
      longArray0[3] = (long) (byte)110;
      longArray0[4] = (long) (byte)110;
      longArray0[5] = (long) (byte)110;
      long[] longArray1 = ArrayUtils.nullToEmpty(longArray0);
      assertArrayEquals(new long[] {110L, 8L, 110L, 110L, 110L, 110L}, longArray0);
      assertArrayEquals(new long[] {110L, 8L, 110L, 110L, 110L, 110L}, longArray1);
      assertEquals(6, longArray0.length);
      assertEquals(6, longArray1.length);
      assertSame(longArray0, longArray1);
      assertSame(longArray1, longArray0);
      assertNotNull(longArray1);
      
      int[] intArray0 = new int[3];
      intArray0[0] = (int) (byte)110;
      intArray0[1] = (int) (byte)8;
      intArray0[2] = (int) (byte)110;
      int[] intArray1 = ArrayUtils.addFirst(intArray0, 110);
      assertArrayEquals(new int[] {110, 110, 8, 110}, intArray1);
      assertArrayEquals(new int[] {110, 8, 110}, intArray0);
      assertEquals(4, intArray1.length);
      assertEquals(3, intArray0.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
      assertNotNull(intArray1);
  }

  @Test(timeout = 4000)
  public void test0427()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = ArrayUtils.removeAllOccurences(doubleArray0, (-1.0));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      
      String[] stringArray0 = ArrayUtils.EMPTY_STRING_ARRAY;
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      int[] intArray0 = new int[9];
      int int0 = ArrayUtils.indexOf(intArray0, 0, 0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(9, intArray0.length);
      assertEquals(0, int0);
      
      Double[] doubleArray2 = new Double[1];
      Double double0 = new Double((-1.0));
      assertNotNull(double0);
      assertEquals((-1.0), (double)double0, 0.01);
      
      doubleArray2[0] = double0;
      double[] doubleArray3 = ArrayUtils.toPrimitive(doubleArray2);
      assertArrayEquals(new double[] {(-1.0)}, doubleArray3, 0.01);
      assertEquals(1, doubleArray2.length);
      assertEquals(1, doubleArray3.length);
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotNull(doubleArray3);
      
      Long[] longArray0 = new Long[5];
      Long long0 = new Long(0);
      assertNotNull(long0);
      assertEquals(0L, (long)long0);
      
      longArray0[0] = long0;
      Long long1 = new Long((long) longArray0[0]);
      assertEquals(5, longArray0.length);
      assertTrue(long1.equals((Object)long0));
      assertNotNull(long1);
      assertEquals(0L, (long)long1);
      
      longArray0[1] = long1;
      Long long2 = new Long(0);
      assertTrue(long2.equals((Object)long0));
      assertTrue(long2.equals((Object)long1));
      assertNotNull(long2);
      assertEquals(0L, (long)long2);
      
      longArray0[2] = long2;
      Long long3 = new Long((long) longArray0[2]);
      assertEquals(5, longArray0.length);
      assertTrue(long3.equals((Object)long2));
      assertTrue(long3.equals((Object)long0));
      assertTrue(long3.equals((Object)long1));
      assertNotNull(long3);
      assertEquals(0L, (long)long3);
      
      longArray0[3] = long3;
      Long long4 = Long.getLong("Oe2q@DOLs1[");
      assertNull(long4);
      
      longArray0[4] = null;
      Long[] longArray1 = ArrayUtils.removeElements(longArray0, longArray0);
      assertEquals(0, longArray1.length);
      assertEquals(5, longArray0.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray0, longArray1);
      assertNotNull(longArray1);
      
      ArrayUtils.shift((Object[]) longArray0, 0);
      assertEquals(5, longArray0.length);
      assertFalse(longArray0.equals((Object)longArray1));
      assertNotSame(longArray0, longArray1);
  }

  @Test(timeout = 4000)
  public void test0428()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      long[] longArray0 = new long[0];
      ArrayUtils.swap(longArray0, 1383, 1383);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-105);
      byte[] byteArray1 = ArrayUtils.subarray(byteArray0, (int) (byte) (-105), (int) (byte)0);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-105)}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(2, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      
      long[] longArray1 = new long[2];
      assertFalse(longArray1.equals((Object)longArray0));
      
      longArray1[0] = (long) (byte)0;
      longArray1[1] = (long) (byte) (-105);
      long[] longArray2 = ArrayUtils.removeElements(longArray1, longArray0);
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {0L, (-105L)}, longArray1);
      assertArrayEquals(new long[] {0L, (-105L)}, longArray2);
      assertEquals(0, longArray0.length);
      assertEquals(2, longArray1.length);
      assertEquals(2, longArray2.length);
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray1.equals((Object)longArray0));
      assertFalse(longArray2.equals((Object)longArray1));
      assertFalse(longArray2.equals((Object)longArray0));
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray0, longArray2);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray1, longArray2);
      assertNotSame(longArray2, longArray1);
      assertNotSame(longArray2, longArray0);
      assertNotNull(longArray2);
  }

  @Test(timeout = 4000)
  public void test0429()  throws Throwable  {
      Short short0 = new Short((short)3795);
      assertNotNull(short0);
      assertEquals((short)3795, (short)short0);
      
      short[] shortArray0 = ArrayUtils.toPrimitive((Short[]) null, (short) (byte) (-1));
      assertNull(shortArray0);
  }

  @Test(timeout = 4000)
  public void test0430()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)46;
      byteArray0[1] = (byte)42;
      boolean boolean0 = ArrayUtils.contains(byteArray0, (byte) (-10));
      assertArrayEquals(new byte[] {(byte)46, (byte)42}, byteArray0);
      assertEquals(2, byteArray0.length);
      assertFalse(boolean0);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      boolean[] booleanArray1 = ArrayUtils.removeAllOccurences(booleanArray0, false);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertEquals(1, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      
      boolean[] booleanArray2 = ArrayUtils.EMPTY_BOOLEAN_ARRAY;
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray2));
      assertEquals(0, booleanArray2.length);
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertNotSame(booleanArray2, booleanArray1);
      assertNotSame(booleanArray2, booleanArray0);
      assertNotNull(booleanArray2);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (byte) (-10);
      double[] doubleArray1 = ArrayUtils.removeAllOccurences(doubleArray0, (double) (byte)42);
      assertArrayEquals(new double[] {(-10.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-10.0)}, doubleArray1, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      
      double[] doubleArray2 = ArrayUtils.removeElement(doubleArray1, 3236.2602799763);
      assertArrayEquals(new double[] {(-10.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-10.0)}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {(-10.0)}, doubleArray2, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertEquals(1, doubleArray2.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotNull(doubleArray2);
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) (byte)42;
      floatArray0[1] = (float) (byte) (-10);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) false;
      objectArray0[1] = (Object) 42.0F;
      objectArray0[2] = (Object) false;
      objectArray0[3] = (Object) 42.0F;
      Boolean boolean1 = Boolean.valueOf(true);
      assertFalse(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      assertTrue(boolean1);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(objectArray0, (Object) boolean1, 144);
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(4, objectArray0.length);
      assertFalse(boolean1.equals((Object)boolean0));
      assertNotNull(bitSet0);
      
      BitSet bitSet1 = ArrayUtils.indexesOf(floatArray0, (-800.0F));
      assertEquals(0, bitSet1.cardinality());
      assertEquals("{}", bitSet1.toString());
      assertEquals(0, bitSet1.length());
      assertTrue(bitSet1.isEmpty());
      assertEquals(64, bitSet1.size());
      assertArrayEquals(new float[] {42.0F, (-10.0F), 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(7, floatArray0.length);
      assertTrue(bitSet1.equals((Object)bitSet0));
      assertNotSame(bitSet1, bitSet0);
      assertNotNull(bitSet1);
      
      bitSet0.andNot(bitSet1);
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet1.cardinality());
      assertEquals("{}", bitSet1.toString());
      assertEquals(0, bitSet1.length());
      assertTrue(bitSet1.isEmpty());
      assertEquals(64, bitSet1.size());
      assertArrayEquals(new float[] {42.0F, (-10.0F), 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(7, floatArray0.length);
      assertEquals(4, objectArray0.length);
      assertFalse(boolean1.equals((Object)boolean0));
      assertTrue(bitSet0.equals((Object)bitSet1));
      assertTrue(bitSet1.equals((Object)bitSet0));
      assertNotSame(bitSet0, bitSet1);
      assertNotSame(bitSet1, bitSet0);
      
      ArrayUtils.hashCode((Object) bitSet0);
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(4, objectArray0.length);
      assertFalse(boolean1.equals((Object)boolean0));
      assertTrue(bitSet0.equals((Object)bitSet1));
      assertNotSame(bitSet0, bitSet1);
      
      short[] shortArray0 = ArrayUtils.toPrimitive((Short[]) null, (short) (-911));
      assertNull(shortArray0);
  }

  @Test(timeout = 4000)
  public void test0431()  throws Throwable  {
      float[] floatArray0 = new float[7];
      floatArray0[0] = 1.0F;
      floatArray0[1] = 689.8953F;
      floatArray0[2] = (-1.0F);
      floatArray0[3] = 1.0F;
      floatArray0[4] = 1155.3372F;
      ArrayUtils.swap((double[]) null, 781, 3269, (-261));
      long[] longArray0 = new long[4];
      longArray0[0] = (long) 3269;
      longArray0[1] = (long) 781;
      longArray0[2] = (long) 781;
      longArray0[3] = (long) (-1401);
      long[] longArray1 = ArrayUtils.removeElements(longArray0, longArray0);
      assertArrayEquals(new long[] {3269L, 781L, 781L, (-1401L)}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertEquals(4, longArray0.length);
      assertEquals(0, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
  }

  @Test(timeout = 4000)
  public void test0432()  throws Throwable  {
      Object[] objectArray0 = new Object[6];
      int[] intArray0 = new int[6];
      intArray0[0] = 3433;
      intArray0[1] = 3433;
      intArray0[2] = 76;
      intArray0[3] = 1739;
      intArray0[4] = 3433;
      intArray0[5] = 3433;
      // Undeclared exception!
      try { 
        ArrayUtils.insert(3433, intArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3433, Length: 6
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0433()  throws Throwable  {
      short[] shortArray0 = new short[4];
      int int0 = ArrayUtils.indexOf(shortArray0, (short)7, (int) (short)7);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertEquals(4, shortArray0.length);
      assertEquals((-1), int0);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      int int1 = ArrayUtils.lastIndexOf(booleanArray0, true, Integer.MAX_VALUE);
      assertTrue(Arrays.equals(new boolean[] {true, true, false}, booleanArray0));
      assertEquals(3, booleanArray0.length);
      assertFalse(int1 == int0);
      assertEquals(1, int1);
      
      short[] shortArray1 = ArrayUtils.clone(shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0}, shortArray1);
      assertEquals(4, shortArray0.length);
      assertEquals(4, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      
      int[] intArray0 = new int[8];
      intArray0[0] = 36;
      intArray0[1] = (-1);
      intArray0[2] = Integer.MAX_VALUE;
      intArray0[3] = (int) (short)7;
      intArray0[4] = 1;
      intArray0[5] = 1;
      intArray0[6] = (int) (short)7;
      intArray0[7] = Integer.MAX_VALUE;
      int[] intArray1 = ArrayUtils.addFirst(intArray0, 36);
      assertArrayEquals(new int[] {36, 36, (-1), Integer.MAX_VALUE, 7, 1, 1, 7, Integer.MAX_VALUE}, intArray1);
      assertArrayEquals(new int[] {36, (-1), Integer.MAX_VALUE, 7, 1, 1, 7, Integer.MAX_VALUE}, intArray0);
      assertEquals(9, intArray1.length);
      assertEquals(8, intArray0.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
      assertNotNull(intArray1);
  }

  @Test(timeout = 4000)
  public void test0434()  throws Throwable  {
      Boolean boolean0 = Boolean.FALSE;
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      int[] intArray0 = new int[3];
      intArray0[0] = (int) (byte) (-74);
      intArray0[1] = Integer.MAX_VALUE;
      intArray0[2] = (int) (byte) (-74);
      // Undeclared exception!
      try { 
        ArrayUtils.insert((int) (byte) (-74), intArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -74, Length: 3
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0435()  throws Throwable  {
      int int0 = ArrayUtils.lastIndexOf((float[]) null, 1.0F, 31);
      assertEquals((-1), int0);
      
      byte byte0 = (byte)1;
      // Undeclared exception!
      try { 
        ArrayUtils.add((byte[]) null, (-1), (byte)1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0436()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = true;
      booleanArray0[6] = false;
      boolean boolean0 = ArrayUtils.contains(booleanArray0, true);
      assertTrue(Arrays.equals(new boolean[] {false, true, true, false, false, true, false, false}, booleanArray0));
      assertEquals(8, booleanArray0.length);
      assertTrue(boolean0);
      
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) false;
      objectArray0[1] = (Object) false;
      objectArray0[2] = (Object) true;
      objectArray0[3] = (Object) false;
      objectArray0[4] = (Object) false;
      objectArray0[5] = (Object) false;
      ArrayUtils.shift(objectArray0, (-1916), 0, 0);
      assertEquals(6, objectArray0.length);
      
      int int0 = ArrayUtils.indexOf(objectArray0, (Object) null);
      assertEquals(6, objectArray0.length);
      assertEquals((-1), int0);
      
      ArrayUtils.swap(objectArray0, (-3689), 0, 0);
      assertEquals(6, objectArray0.length);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) (-1);
      long[] longArray1 = ArrayUtils.clone(longArray0);
      assertArrayEquals(new long[] {(-1L)}, longArray0);
      assertArrayEquals(new long[] {(-1L)}, longArray1);
      assertEquals(1, longArray0.length);
      assertEquals(1, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
  }

  @Test(timeout = 4000)
  public void test0437()  throws Throwable  {
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)560;
      shortArray0[1] = (short)0;
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) (short)0;
      floatArray0[1] = (float) (short)560;
      float[] floatArray1 = ArrayUtils.nullToEmpty(floatArray0);
      assertArrayEquals(new float[] {0.0F, 560.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F, 560.0F}, floatArray1, 0.01F);
      assertEquals(2, floatArray0.length);
      assertEquals(2, floatArray1.length);
      assertSame(floatArray0, floatArray1);
      assertSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      
      int[] intArray0 = new int[0];
      int[] intArray1 = ArrayUtils.removeAllOccurrences(intArray0, (int) (short)560);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      
      MockRandom mockRandom0 = new MockRandom((short)560);
      assertNotNull(mockRandom0);
      
      char[] charArray0 = new char[4];
      charArray0[1] = '_';
      charArray0[2] = ')';
      LongStream longStream0 = mockRandom0.longs();
      assertNotNull(longStream0);
      
      charArray0[3] = 'J';
      ArrayUtils.shuffle(charArray0, (Random) mockRandom0);
      assertArrayEquals(new char[] {'_', ')', 'J', '\u0000'}, charArray0);
      assertEquals(4, charArray0.length);
      
      short[] shortArray1 = ArrayUtils.removeElement(shortArray0, (short)6);
      assertArrayEquals(new short[] {(short)560, (short)0, (short)0, (short)0}, shortArray1);
      assertArrayEquals(new short[] {(short)560, (short)0, (short)0, (short)0}, shortArray0);
      assertEquals(4, shortArray1.length);
      assertEquals(4, shortArray0.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertNotNull(shortArray1);
      
      Float[] floatArray2 = new Float[0];
      float[] floatArray3 = ArrayUtils.toPrimitive(floatArray2);
      assertArrayEquals(new float[] {}, floatArray3, 0.01F);
      assertEquals(0, floatArray2.length);
      assertEquals(0, floatArray3.length);
      assertFalse(floatArray3.equals((Object)floatArray1));
      assertFalse(floatArray3.equals((Object)floatArray0));
      assertNotSame(floatArray3, floatArray1);
      assertNotSame(floatArray3, floatArray0);
      assertNotNull(floatArray3);
  }

  @Test(timeout = 4000)
  public void test0438()  throws Throwable  {
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)560;
      shortArray0[1] = (short)0;
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) (short)0;
      floatArray0[1] = (float) (short)560;
      float[] floatArray1 = ArrayUtils.nullToEmpty(floatArray0);
      assertArrayEquals(new float[] {0.0F, 560.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F, 560.0F}, floatArray1, 0.01F);
      assertEquals(2, floatArray0.length);
      assertEquals(2, floatArray1.length);
      assertSame(floatArray0, floatArray1);
      assertSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      int int0 = ArrayUtils.indexOf(booleanArray0, true, (int) (short)0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray0));
      assertEquals(3, booleanArray0.length);
      assertEquals((-1), int0);
      
      short[] shortArray1 = new short[9];
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      shortArray1[0] = (short)0;
      shortArray1[1] = (short)560;
      shortArray1[2] = (short)0;
      shortArray1[3] = (short)560;
      shortArray1[4] = (short)560;
      shortArray1[5] = (short) (-1);
      shortArray1[6] = (short)0;
      shortArray1[7] = (short)0;
      shortArray1[8] = (short)560;
      boolean boolean0 = ArrayUtils.isSorted(shortArray1);
      assertArrayEquals(new short[] {(short)0, (short)560, (short)0, (short)560, (short)560, (short) (-1), (short)0, (short)0, (short)560}, shortArray1);
      assertEquals(9, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray1, shortArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0439()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      boolean boolean0 = ArrayUtils.contains(booleanArray0, false);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      assertEquals(2, booleanArray0.length);
      assertTrue(boolean0);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (-917);
      shortArray0[1] = (short)266;
      boolean boolean1 = ArrayUtils.isSorted(shortArray0);
      assertArrayEquals(new short[] {(short) (-917), (short)266}, shortArray0);
      assertEquals(2, shortArray0.length);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test0440()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[4] = (byte)1;
      byteArray0[3] = (byte)0;
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short) (byte)0;
      shortArray0[1] = (short) (byte)89;
      shortArray0[2] = (short) (byte)1;
      boolean boolean0 = ArrayUtils.isSorted(shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)89, (short)1}, shortArray0);
      assertEquals(3, shortArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0441()  throws Throwable  {
      int int0 = ArrayUtils.lastIndexOf((float[]) null, 1.0F, 31);
      assertEquals((-1), int0);
      
      ArrayUtils.swap((byte[]) null, Integer.MAX_VALUE, 1920, 1920);
      double[] doubleArray0 = new double[2];
      doubleArray0[1] = (double) (short) (-33);
      double[] doubleArray1 = ArrayUtils.removeAllOccurences(doubleArray0, (-1.0));
      assertArrayEquals(new double[] {0.0, (-33.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, (-33.0)}, doubleArray1, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      
      boolean boolean0 = ArrayUtils.isSorted(doubleArray0);
      assertArrayEquals(new double[] {0.0, (-33.0)}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotSame(doubleArray0, doubleArray1);
      assertFalse(boolean0);
      
      Boolean boolean1 = new Boolean(false);
      assertTrue(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      assertFalse(boolean1);
      
      boolean boolean2 = ArrayUtils.contains((boolean[]) null, false);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (byte)1;
      boolean boolean3 = ArrayUtils.isSorted(shortArray0);
      assertArrayEquals(new short[] {(short)1}, shortArray0);
      assertEquals(1, shortArray0.length);
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3);
      
      int[] intArray0 = new int[0];
      double[] doubleArray2 = ArrayUtils.removeAll(doubleArray0, intArray0);
      assertArrayEquals(new double[] {0.0, (-33.0)}, doubleArray0, 0.01);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new double[] {0.0, (-33.0)}, doubleArray2, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(0, intArray0.length);
      assertEquals(2, doubleArray2.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotNull(doubleArray2);
      
      MockRandom mockRandom0 = new MockRandom((-2852L));
      assertNotNull(mockRandom0);
      
      ArrayUtils.shuffle(doubleArray2, (Random) mockRandom0);
      assertArrayEquals(new double[] {0.0, (-33.0)}, doubleArray0, 0.01);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new double[] {(-33.0), 0.0}, doubleArray2, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(0, intArray0.length);
      assertEquals(2, doubleArray2.length);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test0442()  throws Throwable  {
      BitSet bitSet0 = new BitSet();
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertNotNull(bitSet0);
      
      byte[] byteArray0 = new byte[0];
      ArrayUtils.swap(byteArray0, 11, 11, 11);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short) (-33);
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) (short) (-33);
      doubleArray0[1] = (double) (short) (-33);
      doubleArray0[2] = (double) (short) (-33);
      doubleArray0[3] = (double) 11;
      doubleArray0[4] = (double) 11;
      doubleArray0[5] = (double) (short) (-33);
      doubleArray0[6] = (double) 11;
      doubleArray0[7] = (double) 11;
      double[] doubleArray1 = ArrayUtils.removeAllOccurences(doubleArray0, (double) (short) (-33));
      assertArrayEquals(new double[] {11.0, 11.0, 11.0, 11.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {(-33.0), (-33.0), (-33.0), 11.0, 11.0, (-33.0), 11.0, 11.0}, doubleArray0, 0.01);
      assertEquals(4, doubleArray1.length);
      assertEquals(8, doubleArray0.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotNull(doubleArray1);
      
      boolean boolean0 = ArrayUtils.isSorted(doubleArray0);
      assertArrayEquals(new double[] {(-33.0), (-33.0), (-33.0), 11.0, 11.0, (-33.0), 11.0, 11.0}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotSame(doubleArray0, doubleArray1);
      assertFalse(boolean0);
      
      Boolean boolean1 = new Boolean(true);
      assertFalse(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      assertTrue(boolean1);
      
      boolean boolean2 = ArrayUtils.contains((boolean[]) null, false);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      
      boolean boolean3 = ArrayUtils.isSorted(shortArray0);
      assertArrayEquals(new short[] {(short) (-33), (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertEquals(7, shortArray0.length);
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3);
  }

  @Test(timeout = 4000)
  public void test0443()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      long[] longArray0 = new long[0];
      ArrayUtils.swap(longArray0, 1383, 1383);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)106;
      byte[] byteArray1 = ArrayUtils.subarray(byteArray0, (int) (byte)106, (int) (byte)0);
      assertArrayEquals(new byte[] {(byte)0, (byte)106}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(2, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      
      long[] longArray1 = new long[9];
      assertFalse(longArray1.equals((Object)longArray0));
      
      longArray1[0] = (long) (byte)0;
      ArrayUtils.reverse(longArray0, (int) (byte)106, 151);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      assertFalse(longArray0.equals((Object)longArray1));
      assertNotSame(longArray0, longArray1);
      
      double[] doubleArray0 = new double[0];
      Double[] doubleArray1 = ArrayUtils.toObject(doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotNull(doubleArray1);
  }

  @Test(timeout = 4000)
  public void test0444()  throws Throwable  {
      Double double0 = new Double((-1.0));
      assertNotNull(double0);
      assertEquals((-1.0), (double)double0, 0.01);
      
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) double0;
      objectArray0[1] = (Object) double0;
      objectArray0[2] = (Object) double0;
      objectArray0[3] = (Object) double0;
      objectArray0[4] = (Object) double0;
      objectArray0[5] = (Object) double0;
      objectArray0[6] = (Object) double0;
      int int0 = ArrayUtils.indexOf(objectArray0, objectArray0[0], 1697);
      assertEquals(7, objectArray0.length);
      assertEquals((-1), int0);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-1.0);
      doubleArray0[1] = (double) (-1);
      Double[] doubleArray1 = ArrayUtils.toObject(doubleArray0);
      assertArrayEquals(new double[] {(-1.0), (-1.0)}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertNotNull(doubleArray1);
  }

  @Test(timeout = 4000)
  public void test0445()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      long[] longArray0 = new long[0];
      ArrayUtils.swap(longArray0, 1383, 1383);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-105);
      byte[] byteArray1 = ArrayUtils.subarray(byteArray0, (int) (byte) (-105), (int) (byte)0);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-105)}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(2, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      
      long[] longArray1 = new long[2];
      assertFalse(longArray1.equals((Object)longArray0));
      
      longArray1[0] = (long) (byte)0;
      longArray1[1] = (long) (byte) (-105);
      long[] longArray2 = ArrayUtils.insert((int) (byte) (-105), longArray1, longArray0);
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {0L, (-105L)}, longArray1);
      assertArrayEquals(new long[] {0L, (-105L)}, longArray2);
      assertEquals(0, longArray0.length);
      assertEquals(2, longArray1.length);
      assertEquals(2, longArray2.length);
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray1.equals((Object)longArray0));
      assertFalse(longArray2.equals((Object)longArray0));
      assertFalse(longArray2.equals((Object)longArray1));
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray0, longArray2);
      assertNotSame(longArray1, longArray2);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray2, longArray0);
      assertNotSame(longArray2, longArray1);
      assertNotNull(longArray2);
      
      Boolean boolean0 = new Boolean("8\"");
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      Boolean[] booleanArray1 = new Boolean[8];
      booleanArray1[0] = boolean0;
      booleanArray1[1] = boolean0;
      Boolean boolean1 = Boolean.FALSE;
      assertTrue(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      assertFalse(boolean1);
      
      booleanArray1[2] = boolean1;
      booleanArray1[3] = (Boolean) false;
      booleanArray1[4] = (Boolean) false;
      booleanArray1[5] = (Boolean) false;
      Boolean boolean2 = Boolean.valueOf("8\"");
      assertTrue(boolean2.equals((Object)boolean0));
      assertNotNull(boolean2);
      assertFalse(boolean2);
      
      booleanArray1[6] = boolean2;
      booleanArray1[7] = boolean0;
      boolean[] booleanArray2 = ArrayUtils.toPrimitive(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false, false}, booleanArray2));
      assertEquals(8, booleanArray2.length);
      assertEquals(8, booleanArray1.length);
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertNotSame(booleanArray2, booleanArray0);
      assertNotNull(booleanArray2);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (byte) (-105);
      ArrayUtils.reverse(shortArray0);
      assertArrayEquals(new short[] {(short) (-105)}, shortArray0);
      assertEquals(1, shortArray0.length);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (byte)0;
      Double[] doubleArray1 = ArrayUtils.toObject(doubleArray0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertNotNull(doubleArray1);
      
      Short[] shortArray1 = new Short[6];
      shortArray1[0] = (Short) (short) (-105);
      Short short0 = new Short((short) shortArray1[0]);
      assertEquals(6, shortArray1.length);
      assertNotNull(short0);
      assertEquals((short) (-105), (short)short0);
      
      shortArray1[1] = short0;
      shortArray1[2] = (Short) (short) (-105);
      shortArray1[3] = (Short) (short) (-105);
      shortArray1[4] = (Short) (short) (-105);
      shortArray1[5] = (Short) (short) (-105);
      short[] shortArray2 = ArrayUtils.toPrimitive(shortArray1);
      assertArrayEquals(new short[] {(short) (-105), (short) (-105), (short) (-105), (short) (-105), (short) (-105), (short) (-105)}, shortArray2);
      assertEquals(6, shortArray2.length);
      assertEquals(6, shortArray1.length);
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertNotSame(shortArray2, shortArray0);
      assertNotNull(shortArray2);
  }

  @Test(timeout = 4000)
  public void test0446()  throws Throwable  {
      float[] floatArray0 = new float[0];
      ArrayUtils.reverse(floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
      
      Byte byte0 = new Byte((byte)0);
      assertNotNull(byte0);
      assertEquals((byte)0, (byte)byte0);
      
      Byte byte1 = new Byte((byte)0);
      assertTrue(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      assertEquals((byte)0, (byte)byte1);
      
      Byte byte2 = new Byte((byte) (-75));
      assertFalse(byte2.equals((Object)byte0));
      assertFalse(byte2.equals((Object)byte1));
      assertNotNull(byte2);
      assertEquals((byte) (-75), (byte)byte2);
      
      Short short0 = new Short((byte)0);
      assertNotNull(short0);
      assertEquals((short)0, (short)short0);
      
      Short[] shortArray0 = new Short[4];
      Short short1 = new Short((short) (-905));
      assertFalse(short1.equals((Object)short0));
      assertNotNull(short1);
      assertEquals((short) (-905), (short)short1);
      
      shortArray0[0] = short1;
      shortArray0[1] = short0;
      shortArray0[2] = short0;
      shortArray0[3] = short0;
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0);
      assertArrayEquals(new short[] {(short) (-905), (short)0, (short)0, (short)0}, shortArray1);
      assertEquals(4, shortArray0.length);
      assertEquals(4, shortArray1.length);
      assertNotNull(shortArray1);
  }

  @Test(timeout = 4000)
  public void test0447()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-1067.3453217133551);
      doubleArray0[1] = 1390.09730230525;
      doubleArray0[2] = (-629.817422);
      doubleArray0[3] = (-345.87729100814965);
      doubleArray0[4] = 1.5;
      doubleArray0[5] = (-1104.1198375);
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (-629.817422), 267.728);
      assertArrayEquals(new double[] {(-1067.3453217133551), 1390.09730230525, (-629.817422), (-345.87729100814965), 1.5, (-1104.1198375)}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      assertEquals(2, int0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((int[]) null, 2);
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertNotNull(bitSet0);
      
      boolean[] booleanArray0 = new boolean[0];
      // Undeclared exception!
      try { 
        ArrayUtils.remove(booleanArray0, 2);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0448()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)87;
      byteArray0[1] = (byte)56;
      byteArray0[2] = (byte)75;
      byteArray0[3] = (byte)73;
      byteArray0[4] = (byte)62;
      byteArray0[5] = (byte)109;
      int int0 = ArrayUtils.indexOf(byteArray0, (byte)109);
      assertArrayEquals(new byte[] {(byte)87, (byte)56, (byte)75, (byte)73, (byte)62, (byte)109, (byte)0}, byteArray0);
      assertEquals(7, byteArray0.length);
      assertEquals(5, int0);
      
      long[] longArray0 = new long[9];
      longArray0[0] = 2226L;
      longArray0[1] = (long) (byte)109;
      longArray0[2] = (long) (byte)73;
      longArray0[3] = (long) (byte)87;
      longArray0[4] = (long) (byte)73;
      longArray0[5] = (long) (byte)109;
      longArray0[6] = (long) (byte)75;
      longArray0[7] = (long) (byte)56;
      longArray0[8] = (long) (byte)56;
      int int1 = ArrayUtils.lastIndexOf(longArray0, 2226L, (int) (byte)62);
      assertArrayEquals(new long[] {2226L, 109L, 73L, 87L, 73L, 109L, 75L, 56L, 56L}, longArray0);
      assertEquals(9, longArray0.length);
      assertFalse(int1 == int0);
      assertEquals(0, int1);
  }

  @Test(timeout = 4000)
  public void test0449()  throws Throwable  {
      int[] intArray0 = ArrayUtils.clone((int[]) null);
      assertNull(intArray0);
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = 1.0F;
      floatArray0[1] = 688.9215F;
      floatArray0[2] = (-1.0F);
      floatArray0[3] = 1.0F;
      floatArray0[4] = 1155.3372F;
      floatArray0[5] = 1.0F;
      Double double0 = new Double((-1.0F));
      assertNotNull(double0);
      assertEquals((-1.0), (double)double0, 0.01);
      
      Double double1 = new Double(1.0F);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      assertEquals(1.0, (double)double1, 0.01);
      
      AbstractMap.SimpleImmutableEntry<Double, Double> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Double, Double>(double0, double1);
      assertNotEquals((double)double0, (double)double1, 0.01);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertNotNull(abstractMap_SimpleImmutableEntry0);
      
      int[] intArray1 = ArrayUtils.clone((int[]) null);
      assertNull(intArray1);
      
      Character[] characterArray0 = new Character[7];
      Character character0 = new Character('C');
      assertNotNull(character0);
      assertEquals('C', (char)character0);
      
      characterArray0[0] = character0;
      boolean boolean0 = ArrayUtils.isNotEmpty((int[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0450()  throws Throwable  {
      ArrayUtils.swap((int[]) null, (-2147184749), (-2147184749), (-2147184749));
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      double double0 = mockRandom0.nextGaussian();
      assertEquals(0.0, double0, 0.01);
      
      Object[] objectArray0 = new Object[2];
      Object object0 = ArrayUtils.get(objectArray0, 0);
      assertEquals(2, objectArray0.length);
      assertNull(object0);
      
      ArrayUtils.shuffle(objectArray0, (Random) mockRandom0);
      assertEquals(2, objectArray0.length);
      
      MutableInt mutableInt0 = new MutableInt(0);
      assertEquals(0, (int)mutableInt0.getValue());
      assertEquals((short)0, mutableInt0.shortValue());
      assertEquals(0.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(0, (int)mutableInt0.toInteger());
      assertEquals((byte)0, mutableInt0.byteValue());
      assertEquals(0L, mutableInt0.longValue());
      assertEquals(0, mutableInt0.intValue());
      assertEquals("0", mutableInt0.toString());
      assertEquals(0.0, mutableInt0.doubleValue(), 0.01);
      assertNotNull(mutableInt0);
      
      MutableInt mutableInt1 = new MutableInt(0);
      assertEquals(0, (int)mutableInt1.getValue());
      assertEquals((short)0, mutableInt1.shortValue());
      assertEquals(0.0F, mutableInt1.floatValue(), 0.01F);
      assertEquals(0, (int)mutableInt1.toInteger());
      assertEquals((byte)0, mutableInt1.byteValue());
      assertEquals(0L, mutableInt1.longValue());
      assertEquals(0, mutableInt1.intValue());
      assertEquals("0", mutableInt1.toString());
      assertEquals(0.0, mutableInt1.doubleValue(), 0.01);
      assertTrue(mutableInt1.equals((Object)mutableInt0));
      assertNotNull(mutableInt1);
      
      char[] charArray0 = new char[0];
      ArrayUtils.shift(charArray0, 1719);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      
      Long long0 = new Long(1964L);
      assertNotNull(long0);
      assertEquals(1964L, (long)long0);
      
      Byte byte0 = new Byte((byte) (-61));
      assertNotNull(byte0);
      assertEquals((byte) (-61), (byte)byte0);
      
      try { 
        Byte.valueOf("");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test0451()  throws Throwable  {
      Object[] objectArray0 = new Object[5];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      Object object1 = ArrayUtils.get(objectArray0, (int) 560, (Object) "");
      assertEquals(5, objectArray0.length);
      assertNotNull(object1);
      assertEquals("", object1);
      
      Object object2 = new Object();
      assertFalse(object2.equals((Object)object0));
      assertNotNull(object2);
      
      objectArray0[2] = object2;
      int[] intArray0 = new int[7];
      intArray0[0] = (int) (short)560;
      objectArray0[2] = (Object) (short)560;
      intArray0[2] = (int) (short)560;
      intArray0[3] = (int) (short)560;
      intArray0[4] = (int) (short)560;
      intArray0[5] = (int) (short)560;
      intArray0[6] = (int) (short)560;
      objectArray0[3] = object0;
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 560;
      doubleArray0[1] = (double) 560;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 560;
      doubleArray0[4] = (double) 560;
      doubleArray0[5] = (double) 560;
      doubleArray0[6] = (double) 1964;
      doubleArray0[7] = (double) 560;
      doubleArray0[8] = (double) 560;
      int int0 = ArrayUtils.indexOf(doubleArray0, (double) 560, (double) 560);
      assertArrayEquals(new double[] {560.0, 560.0, 0.0, 560.0, 560.0, 560.0, 1964.0, 560.0, 560.0}, doubleArray0, 0.01);
      assertEquals(9, doubleArray0.length);
      assertEquals(0, int0);
      
      Integer integer0 = new Integer(1964);
      assertFalse(integer0.equals((Object)int0));
      assertNotNull(integer0);
      assertEquals(1964, (int)integer0);
      
      Object object3 = ArrayUtils.get(objectArray0, 560, (Object) integer0);
      assertEquals(5, objectArray0.length);
      assertFalse(integer0.equals((Object)int0));
      assertFalse(object3.equals((Object)int0));
      assertNotNull(object3);
      assertEquals(1964, object3);
      
      objectArray0[4] = object3;
      Object object4 = new Object();
      assertFalse(object4.equals((Object)object2));
      assertFalse(object4.equals((Object)object0));
      assertNotNull(object4);
      
      int int1 = ArrayUtils.lastIndexOf(objectArray0, object4, 0);
      assertEquals(5, objectArray0.length);
      assertFalse(object4.equals((Object)object2));
      assertFalse(object4.equals((Object)object0));
      assertFalse(int1 == int0);
      assertNotSame(object4, object2);
      assertNotSame(object4, object0);
      assertEquals((-1), int1);
      
      MutableInt mutableInt0 = new MutableInt(108);
      assertEquals((byte)108, mutableInt0.byteValue());
      assertEquals(108.0, mutableInt0.doubleValue(), 0.01);
      assertEquals((short)108, mutableInt0.shortValue());
      assertEquals(108, mutableInt0.intValue());
      assertEquals("108", mutableInt0.toString());
      assertEquals(108L, mutableInt0.longValue());
      assertEquals(108, (int)mutableInt0.toInteger());
      assertEquals(108.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(108, (int)mutableInt0.getValue());
      assertNotNull(mutableInt0);
      
      int int2 = ArrayUtils.lastIndexOf(objectArray0, (Object) mutableInt0, 211);
      assertEquals((byte)108, mutableInt0.byteValue());
      assertEquals(108.0, mutableInt0.doubleValue(), 0.01);
      assertEquals((short)108, mutableInt0.shortValue());
      assertEquals(108, mutableInt0.intValue());
      assertEquals("108", mutableInt0.toString());
      assertEquals(108L, mutableInt0.longValue());
      assertEquals(108, (int)mutableInt0.toInteger());
      assertEquals(108.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(108, (int)mutableInt0.getValue());
      assertEquals(5, objectArray0.length);
      assertTrue(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals((-1), int2);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)560;
      BitSet bitSet0 = ArrayUtils.indexesOf(shortArray0, (short)560, (int) (short)560);
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertArrayEquals(new short[] {(short)560}, shortArray0);
      assertEquals(1, shortArray0.length);
      assertNotNull(bitSet0);
  }

  @Test(timeout = 4000)
  public void test0452()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)17;
      long[] longArray0 = new long[8];
      longArray0[1] = 0L;
      longArray0[2] = 0L;
      longArray0[4] = (-283L);
      longArray0[5] = 2226L;
      longArray0[6] = 0L;
      longArray0[7] = (-158L);
      long[] longArray1 = ArrayUtils.removeAllOccurrences(longArray0, 0L);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, (-283L), 2226L, 0L, (-158L)}, longArray0);
      assertArrayEquals(new long[] {(-283L), 2226L, (-158L)}, longArray1);
      assertEquals(8, longArray0.length);
      assertEquals(3, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
      
      ArrayUtils.reverse(byteArray0, 127, 15);
      assertArrayEquals(new byte[] {(byte)17, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(5, byteArray0.length);
      
      ArrayUtils.shift(byteArray0, 2461, 127, 15);
      assertArrayEquals(new byte[] {(byte)17, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(5, byteArray0.length);
      
      int[] intArray0 = new int[9];
      intArray0[0] = 127;
      intArray0[1] = (int) (byte)17;
      intArray0[2] = 127;
      intArray0[3] = 15;
      intArray0[4] = 127;
      intArray0[5] = 15;
      intArray0[6] = 15;
      intArray0[7] = 2461;
      intArray0[8] = 15;
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(longArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2461, Length: 8
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0453()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[3];
      boolean[] booleanArray1 = ArrayUtils.addFirst(booleanArray0, true);
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, false, false, false}, booleanArray1));
      assertEquals(3, booleanArray0.length);
      assertEquals(4, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      
      char[] charArray0 = new char[5];
      charArray0[0] = '/';
      charArray0[1] = '';
      charArray0[2] = '/';
      charArray0[3] = '/';
      charArray0[4] = '/';
      // Undeclared exception!
      try { 
        ArrayUtils.insert(6, charArray0, charArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 6, Length: 5
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0454()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)67;
      byteArray0[1] = (byte) (-99);
      byteArray0[2] = (byte)0;
      int[] intArray0 = new int[3];
      intArray0[0] = (int) (byte)0;
      intArray0[1] = (int) (byte)67;
      intArray0[2] = (int) (byte)0;
      int[] intArray1 = ArrayUtils.addAll(intArray0, intArray0);
      assertArrayEquals(new int[] {0, 67, 0}, intArray0);
      assertArrayEquals(new int[] {0, 67, 0, 0, 67, 0}, intArray1);
      assertEquals(3, intArray0.length);
      assertEquals(6, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) 0;
      objectArray0[1] = (Object) 67;
      objectArray0[2] = (Object) (byte)0;
      objectArray0[3] = (Object) (byte)67;
      objectArray0[4] = (Object) 67;
      String[] stringArray0 = ArrayUtils.toStringArray(objectArray0);
      assertEquals(5, objectArray0.length);
      assertEquals(5, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test0455()  throws Throwable  {
      float[] floatArray0 = new float[10];
      floatArray0[0] = (-971.6495F);
      floatArray0[1] = (-971.6495F);
      floatArray0[2] = 1713.691F;
      char[] charArray0 = new char[4];
      charArray0[0] = '{';
      charArray0[1] = '{';
      charArray0[2] = 'o';
      charArray0[3] = '2';
      char[] charArray1 = ArrayUtils.removeElement(charArray0, '2');
      assertArrayEquals(new char[] {'{', '{', 'o', '2'}, charArray0);
      assertArrayEquals(new char[] {'{', '{', 'o'}, charArray1);
      assertEquals(4, charArray0.length);
      assertEquals(3, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      
      floatArray0[0] = (-971.6495F);
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray0, (-971.6495F), 1);
      assertEquals(64, bitSet0.size());
      assertEquals(1, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertEquals("{1}", bitSet0.toString());
      assertEquals(2, bitSet0.length());
      assertArrayEquals(new float[] {(-971.6495F), (-971.6495F), 1713.691F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(10, floatArray0.length);
      assertNotNull(bitSet0);
      
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(11);
      assertFalse(byteBuffer0.isReadOnly());
      assertTrue(byteBuffer0.isDirect());
      assertEquals(11, byteBuffer0.capacity());
      assertEquals(0, byteBuffer0.position());
      assertEquals(11, byteBuffer0.remaining());
      assertFalse(byteBuffer0.hasArray());
      assertEquals("java.nio.DirectByteBuffer[pos=0 lim=11 cap=11]", byteBuffer0.toString());
      assertTrue(byteBuffer0.hasRemaining());
      assertEquals(11, byteBuffer0.limit());
      assertNotNull(byteBuffer0);
      
      BitSet bitSet1 = BitSet.valueOf(byteBuffer0);
      assertFalse(byteBuffer0.isReadOnly());
      assertTrue(byteBuffer0.isDirect());
      assertEquals(11, byteBuffer0.capacity());
      assertEquals(0, byteBuffer0.position());
      assertEquals(11, byteBuffer0.remaining());
      assertFalse(byteBuffer0.hasArray());
      assertEquals("java.nio.DirectByteBuffer[pos=0 lim=11 cap=11]", byteBuffer0.toString());
      assertTrue(byteBuffer0.hasRemaining());
      assertEquals(11, byteBuffer0.limit());
      assertTrue(bitSet1.isEmpty());
      assertEquals(0, bitSet1.length());
      assertEquals("{}", bitSet1.toString());
      assertEquals(0, bitSet1.size());
      assertEquals(0, bitSet1.cardinality());
      assertFalse(bitSet1.equals((Object)bitSet0));
      assertNotSame(bitSet1, bitSet0);
      assertNotNull(bitSet1);
      
      BitSet bitSet2 = bitSet0.get(13, 120);
      assertEquals(64, bitSet0.size());
      assertEquals(1, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertEquals("{1}", bitSet0.toString());
      assertEquals(2, bitSet0.length());
      assertEquals(0, bitSet2.length());
      assertEquals(0, bitSet2.size());
      assertTrue(bitSet2.isEmpty());
      assertEquals(0, bitSet2.cardinality());
      assertEquals("{}", bitSet2.toString());
      assertArrayEquals(new float[] {(-971.6495F), (-971.6495F), 1713.691F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(10, floatArray0.length);
      assertFalse(bitSet0.equals((Object)bitSet1));
      assertTrue(bitSet2.equals((Object)bitSet1));
      assertFalse(bitSet2.equals((Object)bitSet0));
      assertNotSame(bitSet0, bitSet1);
      assertNotSame(bitSet0, bitSet2);
      assertNotSame(bitSet2, bitSet1);
      assertNotSame(bitSet2, bitSet0);
      assertNotNull(bitSet2);
      
      BitSet bitSet3 = bitSet2.get(1, 120);
      assertEquals(64, bitSet0.size());
      assertEquals(1, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertEquals("{1}", bitSet0.toString());
      assertEquals(2, bitSet0.length());
      assertEquals(0, bitSet2.length());
      assertEquals(0, bitSet2.size());
      assertTrue(bitSet2.isEmpty());
      assertEquals(0, bitSet2.cardinality());
      assertEquals("{}", bitSet2.toString());
      assertEquals(0, bitSet3.size());
      assertEquals("{}", bitSet3.toString());
      assertTrue(bitSet3.isEmpty());
      assertEquals(0, bitSet3.length());
      assertEquals(0, bitSet3.cardinality());
      assertArrayEquals(new float[] {(-971.6495F), (-971.6495F), 1713.691F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(10, floatArray0.length);
      assertFalse(bitSet0.equals((Object)bitSet1));
      assertFalse(bitSet0.equals((Object)bitSet2));
      assertTrue(bitSet2.equals((Object)bitSet1));
      assertFalse(bitSet2.equals((Object)bitSet0));
      assertTrue(bitSet3.equals((Object)bitSet1));
      assertFalse(bitSet3.equals((Object)bitSet0));
      assertTrue(bitSet3.equals((Object)bitSet2));
      assertNotSame(bitSet0, bitSet1);
      assertNotSame(bitSet0, bitSet3);
      assertNotSame(bitSet0, bitSet2);
      assertNotSame(bitSet2, bitSet3);
      assertNotSame(bitSet2, bitSet1);
      assertNotSame(bitSet2, bitSet0);
      assertNotSame(bitSet3, bitSet0);
      assertNotSame(bitSet3, bitSet2);
      assertNotSame(bitSet3, bitSet1);
      assertNotNull(bitSet3);
      
      Float float0 = new Float((-2818.0679F));
      assertNotNull(float0);
      assertEquals((-2818.0679F), (float)float0, 0.01F);
      
      Float[] floatArray1 = ArrayUtils.addFirst((Float[]) null, float0);
      assertEquals(1, floatArray1.length);
      assertNotNull(floatArray1);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 1713.691F;
      doubleArray0[1] = (double) 1713.691F;
      doubleArray0[2] = (double) (-971.6495F);
      int int0 = ArrayUtils.indexOf(doubleArray0, (-971.6494750976562));
      assertArrayEquals(new double[] {1713.6910400390625, 1713.6910400390625, (-971.6494750976562)}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(2, int0);
      
      int[] intArray0 = new int[3];
      intArray0[0] = (int) '{';
      intArray0[1] = (-4317);
      intArray0[2] = (int) '{';
      int[] intArray1 = ArrayUtils.addAll(intArray0, intArray0);
      assertArrayEquals(new int[] {123, (-4317), 123}, intArray0);
      assertArrayEquals(new int[] {123, (-4317), 123, 123, (-4317), 123}, intArray1);
      assertEquals(3, intArray0.length);
      assertEquals(6, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
  }

  @Test(timeout = 4000)
  public void test0456()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = 196;
      Double[] doubleArray0 = new Double[1];
      Double double0 = new Double(196);
      assertNotNull(double0);
      assertEquals(196.0, (double)double0, 0.01);
      
      doubleArray0[0] = double0;
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0);
      assertArrayEquals(new double[] {196.0}, doubleArray1, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertNotNull(doubleArray1);
  }

  @Test(timeout = 4000)
  public void test0457()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)17;
      byteArray0[1] = (byte)0;
      Long long0 = new Long((-2880L));
      assertNotNull(long0);
      assertEquals((-2880L), (long)long0);
      
      Long long1 = new Long(0L);
      assertFalse(long1.equals((Object)long0));
      assertNotNull(long1);
      assertEquals(0L, (long)long1);
      
      Long long2 = new Long((-2880L));
      assertFalse(long2.equals((Object)long1));
      assertTrue(long2.equals((Object)long0));
      assertNotNull(long2);
      assertEquals((-2880L), (long)long2);
      
      Long long3 = new Long(0L);
      assertTrue(long3.equals((Object)long1));
      assertFalse(long3.equals((Object)long0));
      assertFalse(long3.equals((Object)long2));
      assertNotNull(long3);
      assertEquals(0L, (long)long3);
      
      Long[] longArray0 = new Long[1];
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0, 1413L);
      assertArrayEquals(new long[] {1413L}, longArray1);
      assertEquals(1, longArray0.length);
      assertEquals(1, longArray1.length);
      assertNotNull(longArray1);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) (byte)0;
      doubleArray0[1] = (double) 1413L;
      doubleArray0[2] = (double) (-2880L);
      doubleArray0[3] = (double) (byte)0;
      doubleArray0[4] = (double) 1413L;
      doubleArray0[5] = 578.5119;
      doubleArray0[6] = (double) 0L;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (-739.0));
      assertArrayEquals(new double[] {0.0, 1413.0, (-2880.0), 0.0, 1413.0, 578.5119, 0.0}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
      assertEquals((-1), int0);
      
      boolean boolean0 = ArrayUtils.isNotEmpty(longArray1);
      assertArrayEquals(new long[] {1413L}, longArray1);
      assertEquals(1, longArray0.length);
      assertEquals(1, longArray1.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0458()  throws Throwable  {
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)560;
      shortArray0[1] = (short)0;
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) (short)0;
      floatArray0[1] = (float) (short)560;
      float[] floatArray1 = ArrayUtils.nullToEmpty(floatArray0);
      assertArrayEquals(new float[] {0.0F, 560.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F, 560.0F}, floatArray1, 0.01F);
      assertEquals(2, floatArray0.length);
      assertEquals(2, floatArray1.length);
      assertSame(floatArray0, floatArray1);
      assertSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      
      int[] intArray0 = new int[0];
      int[] intArray1 = ArrayUtils.removeAllOccurrences(intArray0, (int) (short)560);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      
      MockRandom mockRandom0 = new MockRandom((short)560);
      assertNotNull(mockRandom0);
      
      char[] charArray0 = new char[4];
      charArray0[0] = '\\';
      charArray0[1] = '_';
      Long[] longArray0 = new Long[0];
      Long[] longArray1 = ArrayUtils.removeElements(longArray0, longArray0);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
      
      ArrayUtils.shift((Object[]) longArray0, 3577);
      assertEquals(0, longArray0.length);
      assertFalse(longArray0.equals((Object)longArray1));
      assertNotSame(longArray0, longArray1);
  }

  @Test(timeout = 4000)
  public void test0459()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = false;
      booleanArray0[5] = true;
      boolean[] booleanArray1 = ArrayUtils.add(booleanArray0, false);
      assertTrue(Arrays.equals(new boolean[] {true, false, true, true, false, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, false, true, true, false, true, false}, booleanArray1));
      assertEquals(6, booleanArray0.length);
      assertEquals(7, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      
      long[] longArray0 = new long[2];
      longArray0[0] = 2080L;
      longArray0[1] = (-1L);
      long[] longArray1 = ArrayUtils.removeElements(longArray0, longArray0);
      assertArrayEquals(new long[] {2080L, (-1L)}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertEquals(2, longArray0.length);
      assertEquals(0, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
      
      boolean boolean0 = ArrayUtils.isNotEmpty(longArray1);
      assertArrayEquals(new long[] {2080L, (-1L)}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertEquals(2, longArray0.length);
      assertEquals(0, longArray1.length);
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertFalse(boolean0);
      
      Long[] longArray2 = new Long[3];
      longArray2[0] = (Long) 2080L;
      longArray2[1] = (Long) 2080L;
      longArray2[2] = (Long) 2080L;
      Long[] longArray3 = ArrayUtils.removeElements(longArray2, longArray2);
      assertEquals(0, longArray3.length);
      assertEquals(3, longArray2.length);
      assertFalse(longArray3.equals((Object)longArray2));
      assertNotSame(longArray3, longArray2);
      assertNotSame(longArray2, longArray3);
      assertNotNull(longArray3);
      
      int[] intArray0 = new int[2];
      intArray0[0] = 2146175801;
      intArray0[1] = (-39);
      int int0 = ArrayUtils.lastIndexOf(intArray0, 2146175801, 32);
      assertArrayEquals(new int[] {2146175801, (-39)}, intArray0);
      assertEquals(2, intArray0.length);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test0460()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byte byte0 = (byte) (-119);
      byteArray0[0] = (byte) (-119);
      byte byte1 = (byte)12;
      byteArray0[1] = (byte)12;
      ArrayUtils.swap(byteArray0, (int) (byte) (-119), (int) (byte)12, (-1));
      assertArrayEquals(new byte[] {(byte) (-119), (byte)12}, byteArray0);
      assertEquals(2, byteArray0.length);
      
      int int0 = 2816;
      // Undeclared exception!
      try { 
        ArrayUtils.add((short[]) null, 2816, (short)32);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2816, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0461()  throws Throwable  {
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short)560;
      long[] longArray0 = new long[1];
      longArray0[0] = (long) (byte)8;
      long[] longArray1 = ArrayUtils.clone(longArray0);
      assertArrayEquals(new long[] {8L}, longArray0);
      assertArrayEquals(new long[] {8L}, longArray1);
      assertEquals(1, longArray0.length);
      assertEquals(1, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'r';
      char[] charArray1 = ArrayUtils.addAll(charArray0, charArray0);
      assertArrayEquals(new char[] {'r'}, charArray0);
      assertArrayEquals(new char[] {'r', 'r'}, charArray1);
      assertEquals(1, charArray0.length);
      assertEquals(2, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)8;
      byteArray0[1] = (byte)8;
      byteArray0[2] = (byte)8;
      byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0);
      assertArrayEquals(new byte[] {(byte)8, (byte)8, (byte)8}, byteArray0);
      assertArrayEquals(new byte[] {(byte)8, (byte)8, (byte)8}, byteArray1);
      assertEquals(3, byteArray0.length);
      assertEquals(3, byteArray1.length);
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      
      ArrayUtils.swap(byteArray1, (-1), 1689, 1362);
      assertArrayEquals(new byte[] {(byte)8, (byte)8, (byte)8}, byteArray0);
      assertArrayEquals(new byte[] {(byte)8, (byte)8, (byte)8}, byteArray1);
      assertEquals(3, byteArray0.length);
      assertEquals(3, byteArray1.length);
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray1, byteArray0);
  }

  @Test(timeout = 4000)
  public void test0462()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)9;
      byteArray0[1] = (byte) (-44);
      byteArray0[2] = (byte) (-39);
      byteArray0[3] = (byte)2;
      byteArray0[4] = (byte)51;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)45;
      boolean boolean0 = ArrayUtils.isSameLength(byteArray0, byteArray0);
      assertArrayEquals(new byte[] {(byte)9, (byte) (-44), (byte) (-39), (byte)2, (byte)51, (byte)0, (byte)0, (byte)45, (byte)0}, byteArray0);
      assertEquals(9, byteArray0.length);
      assertTrue(boolean0);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (byte)45;
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short)45);
      assertArrayEquals(new short[] {(short)45}, shortArray0);
      assertEquals(1, shortArray0.length);
      assertEquals(0, int0);
      
      double[] doubleArray0 = new double[0];
      int int1 = ArrayUtils.lastIndexOf(doubleArray0, (double) (byte) (-39), (double) (byte)2);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      Object[] objectArray0 = new Object[0];
      ArrayUtils.swap(objectArray0, 106, (int) (byte)9, (-2382));
      assertEquals(0, objectArray0.length);
      
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertArrayEquals(new short[] {(short)45}, shortArray0);
      assertEquals(1, shortArray1.length);
      assertEquals(1, shortArray0.length);
      assertNotNull(shortArray1);
      
      ArrayUtils.reverse(shortArray0, (-2203), 6);
      assertArrayEquals(new short[] {(short)45}, shortArray0);
      assertEquals(1, shortArray0.length);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      boolean[] booleanArray1 = ArrayUtils.addAll(booleanArray0, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true, true, true, true}, booleanArray1));
      assertEquals(4, booleanArray0.length);
      assertEquals(8, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      
      byte[] byteArray1 = ArrayUtils.toPrimitive((Byte[]) null);
      assertNull(byteArray1);
      
      int[] intArray0 = new int[5];
      intArray0[0] = (int) (byte)51;
      intArray0[1] = 106;
      intArray0[2] = (int) (byte)2;
      intArray0[3] = 106;
      intArray0[4] = (int) (byte) (-44);
      boolean boolean1 = ArrayUtils.isNotEmpty(intArray0);
      assertArrayEquals(new int[] {51, 106, 2, 106, (-44)}, intArray0);
      assertEquals(5, intArray0.length);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test0463()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[1] = false;
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) (byte) (-46);
      floatArray0[1] = (float) (byte)123;
      ArrayUtils.shuffle(floatArray0);
      assertArrayEquals(new float[] {123.0F, (-46.0F)}, floatArray0, 0.01F);
      assertEquals(2, floatArray0.length);
      
      int[] intArray0 = ArrayUtils.addFirst((int[]) null, (-785));
      assertArrayEquals(new int[] {(-785)}, intArray0);
      assertEquals(1, intArray0.length);
      assertNotNull(intArray0);
      
      long[] longArray0 = new long[8];
      longArray0[0] = (long) (byte)123;
      longArray0[1] = (long) (-785);
      longArray0[2] = (long) (byte) (-46);
      longArray0[3] = (long) (byte)123;
      longArray0[4] = (long) (-785);
      longArray0[5] = (long) (-785);
      longArray0[6] = (long) (byte) (-46);
      longArray0[7] = (long) (byte) (-46);
      long[] longArray1 = ArrayUtils.addAll(longArray0, longArray0);
      assertArrayEquals(new long[] {123L, (-785L), (-46L), 123L, (-785L), (-785L), (-46L), (-46L)}, longArray0);
      assertEquals(16, longArray1.length);
      assertEquals(8, longArray0.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray0, longArray1);
      assertNotNull(longArray1);
  }

  @Test(timeout = 4000)
  public void test0464()  throws Throwable  {
      int[] intArray0 = ArrayUtils.clone((int[]) null);
      assertNull(intArray0);
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = 1.0F;
      floatArray0[1] = 689.8953F;
      floatArray0[2] = (-1.0F);
      floatArray0[3] = 1.0F;
      floatArray0[4] = 1155.3372F;
      floatArray0[5] = 1.0F;
      Double double0 = new Double((-1.0F));
      assertNotNull(double0);
      assertEquals((-1.0), (double)double0, 0.01);
      
      Double double1 = new Double(1.0F);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      assertEquals(1.0, (double)double1, 0.01);
      
      AbstractMap.SimpleImmutableEntry<Double, Double> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Double, Double>(double0, double1);
      assertNotEquals((double)double0, (double)double1, 0.01);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertNotNull(abstractMap_SimpleImmutableEntry0);
      
      long[] longArray0 = new long[1];
      longArray0[0] = 1L;
      Long[] longArray1 = ArrayUtils.toObject(longArray0);
      assertArrayEquals(new long[] {1L}, longArray0);
      assertEquals(1, longArray0.length);
      assertEquals(1, longArray1.length);
      assertNotNull(longArray1);
      
      ArrayUtils.shuffle(floatArray0);
      assertArrayEquals(new float[] {689.8953F, (-1.0F), 1.0F, 1155.3372F, 1.0F, 0.0F, 1.0F}, floatArray0, 0.01F);
      assertEquals(7, floatArray0.length);
      
      int[] intArray1 = ArrayUtils.addFirst((int[]) null, (-785));
      assertArrayEquals(new int[] {(-785)}, intArray1);
      assertEquals(1, intArray1.length);
      assertNotNull(intArray1);
  }

  @Test(timeout = 4000)
  public void test0465()  throws Throwable  {
      Long[] longArray0 = new Long[9];
      Long long0 = new Long((-2009L));
      assertNotNull(long0);
      assertEquals((-2009L), (long)long0);
      
      Long long1 = new Long((-1353L));
      assertFalse(long1.equals((Object)long0));
      assertNotNull(long1);
      assertEquals((-1353L), (long)long1);
      
      Long long2 = new Long(0L);
      assertFalse(long2.equals((Object)long0));
      assertFalse(long2.equals((Object)long1));
      assertNotNull(long2);
      assertEquals(0L, (long)long2);
      
      Long long3 = new Long(0L);
      assertFalse(long3.equals((Object)long1));
      assertTrue(long3.equals((Object)long2));
      assertFalse(long3.equals((Object)long0));
      assertNotNull(long3);
      assertEquals(0L, (long)long3);
      
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0, (-266L));
      assertArrayEquals(new long[] {(-266L), (-266L), (-266L), (-266L), (-266L), (-266L), (-266L), (-266L), (-266L)}, longArray1);
      assertEquals(9, longArray0.length);
      assertEquals(9, longArray1.length);
      assertNotNull(longArray1);
      
      Double double0 = new Double((-2009L));
      assertNotNull(double0);
      assertEquals((-2009.0), (double)double0, 0.01);
      
      Double double1 = new Double(2692.02);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      assertEquals(2692.02, (double)double1, 0.01);
      
      Double double2 = new Double((-266L));
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertNotNull(double2);
      assertEquals((-266.0), (double)double2, 0.01);
      
      AbstractMap.SimpleImmutableEntry<Double, Double> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Double, Double>(double2, double0);
      assertNotEquals((double)double0, (double)double2, 0.01);
      assertNotEquals((double)double0, (double)double1, 0.01);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertNotNull(abstractMap_SimpleImmutableEntry0);
      
      Long[] longArray2 = ArrayUtils.toObject(longArray1);
      assertArrayEquals(new long[] {(-266L), (-266L), (-266L), (-266L), (-266L), (-266L), (-266L), (-266L), (-266L)}, longArray1);
      assertEquals(9, longArray0.length);
      assertEquals(9, longArray1.length);
      assertEquals(9, longArray2.length);
      assertFalse(longArray2.equals((Object)longArray0));
      assertNotSame(longArray0, longArray2);
      assertNotSame(longArray2, longArray0);
      assertNotNull(longArray2);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) (-1353L);
      floatArray0[1] = (float) (-266L);
      ArrayUtils.shuffle(floatArray0);
      assertArrayEquals(new float[] {(-266.0F), (-1353.0F)}, floatArray0, 0.01F);
      assertEquals(2, floatArray0.length);
      
      int[] intArray0 = new int[0];
      int[] intArray1 = ArrayUtils.addFirst(intArray0, (-785));
      assertArrayEquals(new int[] {(-785)}, intArray1);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(1, intArray1.length);
      assertEquals(0, intArray0.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
      assertNotNull(intArray1);
      
      long[] longArray3 = ArrayUtils.addAll(longArray1, longArray1);
      assertArrayEquals(new long[] {(-266L), (-266L), (-266L), (-266L), (-266L), (-266L), (-266L), (-266L), (-266L)}, longArray1);
      assertEquals(9, longArray0.length);
      assertEquals(18, longArray3.length);
      assertEquals(9, longArray1.length);
      assertFalse(longArray0.equals((Object)longArray2));
      assertFalse(longArray3.equals((Object)longArray1));
      assertNotSame(longArray0, longArray2);
      assertNotSame(longArray3, longArray1);
      assertNotSame(longArray1, longArray3);
      assertNotNull(longArray3);
  }

  @Test(timeout = 4000)
  public void test0466()  throws Throwable  {
      // Undeclared exception!
      try { 
        ArrayUtils.shuffle((boolean[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0467()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 'r';
      doubleArray0[1] = (double) 'r';
      doubleArray0[2] = (double) 'r';
      doubleArray0[3] = (double) 'r';
      doubleArray0[4] = 1.5;
      doubleArray0[5] = (double) 'r';
      doubleArray0[6] = 1.5;
      doubleArray0[7] = (double) 'r';
      doubleArray0[8] = (double) 'r';
      boolean boolean0 = ArrayUtils.isNotEmpty(doubleArray0);
      assertArrayEquals(new double[] {114.0, 114.0, 114.0, 114.0, 1.5, 114.0, 1.5, 114.0, 114.0}, doubleArray0, 0.01);
      assertEquals(9, doubleArray0.length);
      assertTrue(boolean0);
      
      double[] doubleArray1 = ArrayUtils.subarray(doubleArray0, (-454), 72);
      assertArrayEquals(new double[] {114.0, 114.0, 114.0, 114.0, 1.5, 114.0, 1.5, 114.0, 114.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {114.0, 114.0, 114.0, 114.0, 1.5, 114.0, 1.5, 114.0, 114.0}, doubleArray1, 0.01);
      assertEquals(9, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      boolean[] booleanArray1 = ArrayUtils.removeAllOccurrences(booleanArray0, true);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {true, true, true}, booleanArray0));
      assertEquals(0, booleanArray1.length);
      assertEquals(3, booleanArray0.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotNull(booleanArray1);
  }

  @Test(timeout = 4000)
  public void test0468()  throws Throwable  {
      short[] shortArray0 = new short[4];
      short[] shortArray1 = ArrayUtils.addFirst(shortArray0, (short) (-1266));
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short) (-1266), (short)0, (short)0, (short)0, (short)0}, shortArray1);
      assertEquals(4, shortArray0.length);
      assertEquals(5, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      
      short[] shortArray2 = ArrayUtils.clone(shortArray1);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short) (-1266), (short)0, (short)0, (short)0, (short)0}, shortArray1);
      assertArrayEquals(new short[] {(short) (-1266), (short)0, (short)0, (short)0, (short)0}, shortArray2);
      assertEquals(4, shortArray0.length);
      assertEquals(5, shortArray1.length);
      assertEquals(5, shortArray2.length);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertFalse(shortArray2.equals((Object)shortArray1));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray0, shortArray2);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray1, shortArray2);
      assertNotSame(shortArray2, shortArray0);
      assertNotSame(shortArray2, shortArray1);
      assertNotNull(shortArray2);
      
      long[] longArray0 = new long[8];
      longArray0[0] = (long) (short) (-1266);
      longArray0[1] = (long) (short) (-1266);
      shortArray1[4] = (short)560;
      longArray0[3] = (long) (short) (-1266);
      longArray0[4] = (long) (short)560;
      boolean boolean0 = ArrayUtils.contains(longArray0, 560L);
      assertArrayEquals(new long[] {(-1266L), (-1266L), 0L, (-1266L), 560L, 0L, 0L, 0L}, longArray0);
      assertEquals(8, longArray0.length);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) (-1266L);
      doubleArray0[1] = (double) (short) (-1266);
      doubleArray0[2] = (-3010.2640706447);
      doubleArray0[3] = (double) 560L;
      doubleArray0[4] = (double) 0L;
      doubleArray0[5] = (double) (short)560;
      doubleArray0[6] = (double) (-3533);
      doubleArray0[3] = (double) (-3533);
      ArrayUtils.shift(doubleArray0, (int) (short) (-1266), (int) (short) (-1266), (-3267));
      assertArrayEquals(new double[] {(-1266.0), (-1266.0), (-3010.2640706447), (-3533.0), 0.0, 560.0, (-3533.0), 0.0}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      boolean[] booleanArray1 = ArrayUtils.removeAllOccurrences(booleanArray0, true);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertEquals(1, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
  }

  @Test(timeout = 4000)
  public void test0469()  throws Throwable  {
      Byte[] byteArray0 = new Byte[2];
      byte byte0 = (byte)51;
      Byte byte1 = new Byte((byte)51);
      assertTrue(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      assertEquals((byte)51, (byte)byte1);
      
      byteArray0[0] = byte1;
      Byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0);
      assertEquals(2, byteArray0.length);
      assertEquals(2, byteArray1.length);
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      
      boolean boolean0 = ArrayUtils.contains((short[]) null, (short)202);
      assertFalse(boolean0);
      
      char[] charArray0 = new char[2];
      charArray0[0] = '.';
      charArray0[1] = 'L';
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 'L';
      doubleArray0[1] = (double) 'L';
      doubleArray0[2] = 0.7;
      doubleArray0[3] = (double) '.';
      doubleArray0[4] = (-3010.2640706447);
      ArrayUtils.shift(doubleArray0, (-18), (int) (byte)51, (int) byte0);
      assertArrayEquals(new double[] {(-3010.2640706447), 76.0, 76.0, 0.7, 46.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test0470()  throws Throwable  {
      Character character0 = new Character('g');
      assertNotNull(character0);
      assertEquals('g', (char)character0);
      
      Character character1 = Character.valueOf('g');
      assertTrue(character1.equals((Object)character0));
      assertNotNull(character1);
      assertEquals('g', (char)character1);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[1] = (double) 'g';
      doubleArray0[2] = (double) 'g';
      doubleArray0[3] = (double) 'g';
      doubleArray0[4] = (double) 'g';
      doubleArray0[5] = (double) 'g';
      int int0 = ArrayUtils.indexOf(doubleArray0, 103.0);
      assertArrayEquals(new double[] {0.0, 103.0, 103.0, 103.0, 103.0, 103.0, 0.0}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
      assertEquals(1, int0);
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = "w";
      stringArray0[1] = "', has a length less than 2";
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) 'g';
      floatArray0[1] = (float) 'g';
      floatArray0[2] = (float) 'g';
      boolean boolean0 = ArrayUtils.isSameLength(floatArray0, floatArray0);
      assertArrayEquals(new float[] {103.0F, 103.0F, 103.0F}, floatArray0, 0.01F);
      assertEquals(3, floatArray0.length);
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-111);
      byteArray0[1] = (byte) (-111);
      byteArray0[2] = (byte) (-111);
      byteArray0[4] = (byte) (-111);
      BitSet bitSet0 = ArrayUtils.indexesOf(byteArray0, (byte) (-111), 1);
      assertEquals("{1, 2, 4}", bitSet0.toString());
      assertFalse(bitSet0.isEmpty());
      assertEquals(5, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals(3, bitSet0.cardinality());
      assertArrayEquals(new byte[] {(byte) (-111), (byte) (-111), (byte) (-111), (byte)0, (byte) (-111)}, byteArray0);
      assertEquals(5, byteArray0.length);
      assertNotNull(bitSet0);
      
      boolean boolean1 = ArrayUtils.isSameLength(byteArray0, (byte[]) null);
      assertArrayEquals(new byte[] {(byte) (-111), (byte) (-111), (byte) (-111), (byte)0, (byte) (-111)}, byteArray0);
      assertEquals(5, byteArray0.length);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test0471()  throws Throwable  {
      Byte[] byteArray0 = new Byte[9];
      Byte byte0 = new Byte((byte)89);
      assertNotNull(byte0);
      assertEquals((byte)89, (byte)byte0);
      
      byteArray0[0] = byte0;
      Byte byte1 = new Byte((byte)89);
      assertTrue(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      assertEquals((byte)89, (byte)byte1);
      
      byteArray0[1] = byte1;
      byte byte2 = (byte)68;
      Byte byte3 = new Byte((byte)68);
      assertTrue(byte3.equals((Object)byte2));
      assertFalse(byte3.equals((Object)byte0));
      assertFalse(byte3.equals((Object)byte1));
      assertNotNull(byte3);
      assertEquals((byte)68, (byte)byte3);
      
      byteArray0[2] = byte3;
      Byte byte4 = new Byte((byte)89);
      assertFalse(byte4.equals((Object)byte2));
      assertTrue(byte4.equals((Object)byte0));
      assertFalse(byte4.equals((Object)byte3));
      assertTrue(byte4.equals((Object)byte1));
      assertNotNull(byte4);
      assertEquals((byte)89, (byte)byte4);
      
      byteArray0[3] = byte4;
      Byte byte5 = new Byte((byte)75);
      assertFalse(byte5.equals((Object)byte0));
      assertFalse(byte5.equals((Object)byte4));
      assertFalse(byte5.equals((Object)byte3));
      assertFalse(byte5.equals((Object)byte2));
      assertFalse(byte5.equals((Object)byte1));
      assertNotNull(byte5);
      assertEquals((byte)75, (byte)byte5);
      
      byteArray0[4] = byte5;
      Byte byte6 = new Byte(byte2);
      assertFalse(byte6.equals((Object)byte1));
      assertFalse(byte6.equals((Object)byte4));
      assertTrue(byte6.equals((Object)byte2));
      assertTrue(byte6.equals((Object)byte3));
      assertFalse(byte6.equals((Object)byte0));
      assertFalse(byte6.equals((Object)byte5));
      assertNotNull(byte6);
      assertEquals((byte)68, (byte)byte6);
      
      byteArray0[5] = byte6;
      Byte byte7 = new Byte((byte)75);
      assertFalse(byte7.equals((Object)byte0));
      assertFalse(byte7.equals((Object)byte3));
      assertFalse(byte7.equals((Object)byte1));
      assertTrue(byte7.equals((Object)byte5));
      assertFalse(byte7.equals((Object)byte2));
      assertFalse(byte7.equals((Object)byte4));
      assertFalse(byte7.equals((Object)byte6));
      assertNotNull(byte7);
      assertEquals((byte)75, (byte)byte7);
      
      byteArray0[6] = byte7;
      Byte byte8 = new Byte((byte) (-74));
      assertFalse(byte8.equals((Object)byte1));
      assertFalse(byte8.equals((Object)byte6));
      assertFalse(byte8.equals((Object)byte2));
      assertFalse(byte8.equals((Object)byte4));
      assertFalse(byte8.equals((Object)byte0));
      assertFalse(byte8.equals((Object)byte3));
      assertFalse(byte8.equals((Object)byte5));
      assertFalse(byte8.equals((Object)byte7));
      assertNotNull(byte8);
      assertEquals((byte) (-74), (byte)byte8);
      
      byte[] byteArray1 = new byte[3];
      byteArray1[0] = (byte)89;
      byteArray1[1] = (byte) (-101);
      byteArray1[2] = (byte)89;
      byte[] byteArray2 = new byte[2];
      assertFalse(byteArray2.equals((Object)byteArray1));
      
      byteArray2[0] = (byte)89;
      byteArray2[1] = (byte) (-101);
      boolean boolean0 = ArrayUtils.isSameLength(byteArray1, byteArray2);
      assertArrayEquals(new byte[] {(byte)89, (byte) (-101), (byte)89}, byteArray1);
      assertArrayEquals(new byte[] {(byte)89, (byte) (-101)}, byteArray2);
      assertEquals(3, byteArray1.length);
      assertEquals(2, byteArray2.length);
      assertFalse(byteArray1.equals((Object)byteArray2));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray2, byteArray1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0472()  throws Throwable  {
      byte[] byteArray0 = ArrayUtils.add((byte[]) null, (byte) (-116));
      assertArrayEquals(new byte[] {(byte) (-116)}, byteArray0);
      assertEquals(1, byteArray0.length);
      assertNotNull(byteArray0);
      
      int[] intArray0 = new int[1];
      intArray0[0] = (int) (byte) (-116);
      int[] intArray1 = ArrayUtils.nullToEmpty(intArray0);
      assertArrayEquals(new int[] {(-116)}, intArray0);
      assertArrayEquals(new int[] {(-116)}, intArray1);
      assertEquals(1, intArray0.length);
      assertEquals(1, intArray1.length);
      assertSame(intArray0, intArray1);
      assertSame(intArray1, intArray0);
      assertNotNull(intArray1);
      
      long[] longArray0 = new long[6];
      longArray0[0] = (long) (-116);
      longArray0[1] = (long) (-116);
      longArray0[2] = (long) (-116);
      longArray0[3] = (long) (byte) (-116);
      longArray0[4] = (long) (byte) (-116);
      longArray0[5] = (long) (-116);
      int int0 = ArrayUtils.indexOf(longArray0, (-116L), (-116));
      assertArrayEquals(new long[] {(-116L), (-116L), (-116L), (-116L), (-116L), (-116L)}, longArray0);
      assertEquals(6, longArray0.length);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test0473()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-7);
      boolean boolean0 = ArrayUtils.isSameLength(byteArray0, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-7)}, byteArray0);
      assertEquals(1, byteArray0.length);
      assertTrue(boolean0);
      
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short) (byte) (-7);
      shortArray0[1] = (short) (byte) (-7);
      shortArray0[2] = (short) (byte) (-7);
      ArrayUtils.shift(shortArray0, (int) (short) (-7), (-1), (int) (short) (-7));
      assertArrayEquals(new short[] {(short) (-7), (short) (-7), (short) (-7)}, shortArray0);
      assertEquals(3, shortArray0.length);
      
      Short[] shortArray1 = new Short[0];
      Short[] shortArray2 = ArrayUtils.nullToEmpty(shortArray1);
      assertEquals(0, shortArray1.length);
      assertEquals(0, shortArray2.length);
      assertFalse(shortArray2.equals((Object)shortArray1));
      assertNotSame(shortArray1, shortArray2);
      assertNotSame(shortArray2, shortArray1);
      assertNotNull(shortArray2);
      
      byte[] byteArray1 = ArrayUtils.removeElements(byteArray0, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-7)}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(1, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      
      char[] charArray0 = new char[3];
      charArray0[0] = '@';
      charArray0[1] = ';';
      charArray0[2] = '$';
      ArrayUtils.swap(charArray0, (-1), (int) (short) (-7));
      assertArrayEquals(new char[] {'@', ';', '$'}, charArray0);
      assertEquals(3, charArray0.length);
      
      Double double0 = new Double(1520.21204385);
      assertNotNull(double0);
      assertEquals(1520.21204385, (double)double0, 0.01);
      
      AbstractMap.SimpleImmutableEntry<Double, Double> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Double, Double>(double0, double0);
      assertNotNull(abstractMap_SimpleImmutableEntry0);
      
      AbstractMap.SimpleImmutableEntry<Double, Double>[] abstractMap_SimpleImmutableEntryArray0 = (AbstractMap.SimpleImmutableEntry<Double, Double>[]) Array.newInstance(AbstractMap.SimpleImmutableEntry.class, 4);
      abstractMap_SimpleImmutableEntryArray0[0] = abstractMap_SimpleImmutableEntry0;
      abstractMap_SimpleImmutableEntryArray0[1] = abstractMap_SimpleImmutableEntry0;
      abstractMap_SimpleImmutableEntryArray0[2] = abstractMap_SimpleImmutableEntry0;
      AbstractMap.SimpleImmutableEntry<Double, Double> abstractMap_SimpleImmutableEntry1 = new AbstractMap.SimpleImmutableEntry<Double, Double>((Double) null, (Double) null);
      assertFalse(abstractMap_SimpleImmutableEntry1.equals((Object)abstractMap_SimpleImmutableEntry0));
      assertNotNull(abstractMap_SimpleImmutableEntry1);
      
      abstractMap_SimpleImmutableEntryArray0[3] = abstractMap_SimpleImmutableEntry1;
      Comparator<AbstractMap.SimpleImmutableEntry<Double, Double>> comparator0 = (Comparator<AbstractMap.SimpleImmutableEntry<Double, Double>>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0).when(comparator0).compare(any(java.util.AbstractMap.SimpleImmutableEntry.class) , any(java.util.AbstractMap.SimpleImmutableEntry.class));
      boolean boolean1 = ArrayUtils.isSorted(abstractMap_SimpleImmutableEntryArray0, comparator0);
      assertEquals(4, abstractMap_SimpleImmutableEntryArray0.length);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(charArray0, '$', (-1));
      assertEquals(64, bitSet0.size());
      assertEquals(1, bitSet0.cardinality());
      assertEquals(3, bitSet0.length());
      assertFalse(bitSet0.isEmpty());
      assertEquals("{2}", bitSet0.toString());
      assertArrayEquals(new char[] {'@', ';', '$'}, charArray0);
      assertEquals(3, charArray0.length);
      assertNotNull(bitSet0);
      
      int[] intArray0 = new int[4];
      intArray0[0] = (int) ';';
      intArray0[1] = (int) (short) (-7);
      intArray0[2] = (int) ';';
      intArray0[3] = (int) '$';
      int[] intArray1 = ArrayUtils.nullToEmpty(intArray0);
      assertArrayEquals(new int[] {59, (-7), 59, 36}, intArray1);
      assertArrayEquals(new int[] {59, (-7), 59, 36}, intArray0);
      assertEquals(4, intArray1.length);
      assertEquals(4, intArray0.length);
      assertSame(intArray1, intArray0);
      assertSame(intArray0, intArray1);
      assertNotNull(intArray1);
  }

  @Test(timeout = 4000)
  public void test0474()  throws Throwable  {
      float[] floatArray0 = new float[8];
      floatArray0[0] = (-971.6495F);
      floatArray0[1] = (-2025.0852F);
      floatArray0[2] = 1713.691F;
      char[] charArray0 = new char[4];
      charArray0[0] = '{';
      charArray0[1] = '{';
      Character character0 = Character.valueOf('-');
      assertNotNull(character0);
      assertEquals('-', (char)character0);
      
      Character[] characterArray0 = new Character[9];
      characterArray0[0] = (Character) '{';
      characterArray0[1] = (Character) '{';
      characterArray0[2] = (Character) '{';
      characterArray0[3] = (Character) '{';
      characterArray0[4] = (Character) '{';
      characterArray0[5] = character0;
      Character character1 = new Character('e');
      assertFalse(character1.equals((Object)character0));
      assertNotNull(character1);
      assertEquals('e', (char)character1);
      
      characterArray0[6] = character1;
      characterArray0[7] = (Character) '{';
      characterArray0[8] = (Character) '{';
      boolean boolean0 = ArrayUtils.isNotEmpty(characterArray0);
      assertEquals(9, characterArray0.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0475()  throws Throwable  {
      int[] intArray0 = ArrayUtils.clone((int[]) null);
      assertNull(intArray0);
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = 1.0F;
      floatArray0[1] = 688.9215F;
      floatArray0[2] = (-1.0F);
      floatArray0[3] = 1.0F;
      floatArray0[4] = 1155.3372F;
      floatArray0[5] = 1.0F;
      Double double0 = new Double((-1.0F));
      assertNotNull(double0);
      assertEquals((-1.0), (double)double0, 0.01);
      
      Double double1 = new Double(1.0F);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      assertEquals(1.0, (double)double1, 0.01);
      
      AbstractMap.SimpleImmutableEntry<Double, Double> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Double, Double>(double0, double1);
      assertNotEquals((double)double0, (double)double1, 0.01);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertNotNull(abstractMap_SimpleImmutableEntry0);
      
      int[] intArray1 = ArrayUtils.clone((int[]) null);
      assertNull(intArray1);
      
      Character[] characterArray0 = new Character[7];
      Character character0 = new Character('C');
      assertNotNull(character0);
      assertEquals('C', (char)character0);
      
      characterArray0[0] = character0;
      Character character1 = new Character('C');
      assertTrue(character1.equals((Object)character0));
      assertNotNull(character1);
      assertEquals('C', (char)character1);
      
      characterArray0[1] = character1;
      Character character2 = Character.valueOf(' ');
      assertFalse(character2.equals((Object)character1));
      assertFalse(character2.equals((Object)character0));
      assertNotNull(character2);
      assertEquals(' ', (char)character2);
      
      characterArray0[2] = character2;
      Character character3 = Character.valueOf('x');
      assertFalse(character3.equals((Object)character2));
      assertFalse(character3.equals((Object)character0));
      assertFalse(character3.equals((Object)character1));
      assertNotNull(character3);
      assertEquals('x', (char)character3);
      
      characterArray0[3] = character3;
      Character character4 = Character.valueOf('b');
      assertFalse(character4.equals((Object)character2));
      assertFalse(character4.equals((Object)character3));
      assertFalse(character4.equals((Object)character1));
      assertFalse(character4.equals((Object)character0));
      assertNotNull(character4);
      assertEquals('b', (char)character4);
      
      characterArray0[4] = character4;
      Character character5 = new Character('g');
      assertFalse(character5.equals((Object)character4));
      assertFalse(character5.equals((Object)character0));
      assertFalse(character5.equals((Object)character2));
      assertFalse(character5.equals((Object)character3));
      assertFalse(character5.equals((Object)character1));
      assertNotNull(character5);
      assertEquals('g', (char)character5);
      
      characterArray0[5] = character5;
      Character character6 = Character.valueOf('u');
      assertFalse(character6.equals((Object)character3));
      assertFalse(character6.equals((Object)character1));
      assertFalse(character6.equals((Object)character4));
      assertFalse(character6.equals((Object)character2));
      assertFalse(character6.equals((Object)character0));
      assertFalse(character6.equals((Object)character5));
      assertNotNull(character6);
      assertEquals('u', (char)character6);
      
      characterArray0[6] = character6;
      boolean boolean0 = ArrayUtils.isNotEmpty(characterArray0);
      assertEquals(7, characterArray0.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0476()  throws Throwable  {
      float[] floatArray0 = new float[3];
      floatArray0[0] = (-1397.05F);
      floatArray0[1] = (-1397.05F);
      float[] floatArray1 = ArrayUtils.nullToEmpty(floatArray0);
      assertArrayEquals(new float[] {(-1397.05F), (-1397.05F), 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-1397.05F), (-1397.05F), 0.0F}, floatArray1, 0.01F);
      assertEquals(3, floatArray0.length);
      assertEquals(3, floatArray1.length);
      assertSame(floatArray0, floatArray1);
      assertSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      
      int[] intArray0 = new int[9];
      intArray0[0] = 288;
      intArray0[1] = 288;
      intArray0[2] = 288;
      intArray0[3] = 288;
      intArray0[4] = 288;
      intArray0[5] = 288;
      intArray0[6] = 288;
      intArray0[7] = 288;
      intArray0[8] = 288;
      int[] intArray1 = ArrayUtils.removeAllOccurrences(intArray0, 2147088925);
      assertArrayEquals(new int[] {288, 288, 288, 288, 288, 288, 288, 288, 288}, intArray0);
      assertArrayEquals(new int[] {288, 288, 288, 288, 288, 288, 288, 288, 288}, intArray1);
      assertEquals(9, intArray0.length);
      assertEquals(9, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      
      Boolean boolean0 = new Boolean("8\"");
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      Long[] longArray0 = new Long[2];
      Long long0 = new Long((-2084L));
      assertNotNull(long0);
      assertEquals((-2084L), (long)long0);
      
      longArray0[0] = long0;
      Long long1 = new Long(288);
      assertFalse(long1.equals((Object)long0));
      assertNotNull(long1);
      assertEquals(288L, (long)long1);
      
      longArray0[1] = long1;
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0, (-389L));
      assertArrayEquals(new long[] {(-2084L), 288L}, longArray1);
      assertEquals(2, longArray0.length);
      assertEquals(2, longArray1.length);
      assertNotNull(longArray1);
      
      ArrayUtils.reverse((Object[]) null, 2147088925, 288);
  }

  @Test(timeout = 4000)
  public void test0477()  throws Throwable  {
      BitSet bitSet0 = new BitSet();
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertNotNull(bitSet0);
      
      byte[] byteArray0 = new byte[0];
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short)1070;
      long[] longArray0 = ArrayUtils.toPrimitive((Long[]) null, (long) (short)0);
      assertNull(longArray0);
      
      ArrayUtils.reverse((Object[]) null, 172, 2370);
  }

  @Test(timeout = 4000)
  public void test0478()  throws Throwable  {
      BitSet bitSet0 = new BitSet();
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertNotNull(bitSet0);
      
      byte[] byteArray0 = new byte[0];
      ArrayUtils.swap(byteArray0, 11, 11, 11);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short)0;
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) (short)0;
      doubleArray0[1] = (double) (short)0;
      doubleArray0[2] = (double) (short)0;
      doubleArray0[3] = (double) 11;
      doubleArray0[4] = (double) 11;
      doubleArray0[5] = (double) (short)0;
      doubleArray0[6] = (double) 11;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 0.0, 0.0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 11.0, 11.0, 0.0, 11.0, 0.0}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      assertEquals(7, int0);
      
      BitSet bitSet1 = ArrayUtils.indexesOf((int[]) null, (-2036));
      assertTrue(bitSet1.isEmpty());
      assertEquals(0, bitSet1.length());
      assertEquals("{}", bitSet1.toString());
      assertEquals(64, bitSet1.size());
      assertEquals(0, bitSet1.cardinality());
      assertTrue(bitSet1.equals((Object)bitSet0));
      assertNotSame(bitSet1, bitSet0);
      assertNotNull(bitSet1);
      
      // Undeclared exception!
      try { 
        ArrayUtils.remove(booleanArray0, 65);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 65, Length: 8
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0479()  throws Throwable  {
      Byte[] byteArray0 = new Byte[2];
      byte byte0 = (byte)51;
      Byte byte1 = new Byte((byte)51);
      assertTrue(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      assertEquals((byte)51, (byte)byte1);
      
      byteArray0[0] = byte1;
      int int0 = ArrayUtils.indexOf((double[]) null, (-147.954), 0.7);
      assertEquals((-1), int0);
      
      Integer integer0 = new Integer((-2458));
      assertFalse(integer0.equals((Object)int0));
      assertNotNull(integer0);
      assertEquals((-2458), (int)integer0);
      
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) byte1;
      objectArray0[1] = null;
      Object object0 = ArrayUtils.get(objectArray0, (int) byte0, (Object) byte0);
      assertEquals(2, objectArray0.length);
      assertTrue(object0.equals((Object)byte1));
      assertNotNull(object0);
      assertEquals((byte)51, object0);
      
      Object object1 = new Object();
      assertNotNull(object1);
      
      int int1 = ArrayUtils.lastIndexOf((Object[]) byteArray0, (Object) "B&JzPUJb~27B^B", (-2458));
      assertEquals(2, byteArray0.length);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test0480()  throws Throwable  {
      float[] floatArray0 = new float[8];
      floatArray0[0] = (-971.6495F);
      floatArray0[1] = (-2025.0852F);
      floatArray0[2] = 1713.691F;
      char[] charArray0 = new char[4];
      charArray0[0] = '{';
      charArray0[1] = '{';
      charArray0[2] = 'o';
      charArray0[3] = '2';
      char[] charArray1 = ArrayUtils.removeElement(charArray0, '2');
      assertArrayEquals(new char[] {'{', '{', 'o', '2'}, charArray0);
      assertArrayEquals(new char[] {'{', '{', 'o'}, charArray1);
      assertEquals(4, charArray0.length);
      assertEquals(3, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) 1713.691F;
      objectArray0[1] = (Object) '{';
      objectArray0[3] = (Object) 1713.691F;
      floatArray0[0] = (-971.6495F);
      objectArray0[6] = (Object) 1713.691F;
      int[] intArray0 = new int[6];
      intArray0[0] = 9;
      intArray0[0] = (int) '{';
      intArray0[2] = (int) '{';
      intArray0[3] = (int) '{';
      intArray0[4] = 9;
      intArray0[5] = (int) 'o';
      int int0 = ArrayUtils.lastIndexOf(intArray0, 123, 21);
      assertArrayEquals(new int[] {123, 0, 123, 123, 9, 111}, intArray0);
      assertEquals(6, intArray0.length);
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test0481()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-7);
      boolean boolean0 = ArrayUtils.isSameLength(byteArray0, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-7)}, byteArray0);
      assertEquals(1, byteArray0.length);
      assertTrue(boolean0);
      
      short[] shortArray0 = new short[3];
      shortArray0[1] = (short) (byte) (-7);
      shortArray0[2] = (short) (byte) (-7);
      int int0 = (-1);
      ArrayUtils.shift(shortArray0, (int) (short) (-7), (-1), (int) (short) (-7));
      assertArrayEquals(new short[] {(short)0, (short) (-7), (short) (-7)}, shortArray0);
      assertEquals(3, shortArray0.length);
      
      Short[] shortArray1 = new Short[0];
      Short[] shortArray2 = ArrayUtils.nullToEmpty(shortArray1);
      assertEquals(0, shortArray1.length);
      assertEquals(0, shortArray2.length);
      assertFalse(shortArray2.equals((Object)shortArray1));
      assertNotSame(shortArray1, shortArray2);
      assertNotSame(shortArray2, shortArray1);
      assertNotNull(shortArray2);
      
      byte[] byteArray1 = ArrayUtils.removeElements(byteArray0, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-7)}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(1, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      
      try { 
        Byte.valueOf("");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test0482()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-7);
      boolean boolean0 = ArrayUtils.isSameLength(byteArray0, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-7)}, byteArray0);
      assertEquals(1, byteArray0.length);
      assertTrue(boolean0);
      
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short) (byte) (-7);
      shortArray0[1] = (short) (byte) (-7);
      shortArray0[2] = (short) (byte) (-7);
      ArrayUtils.shift(shortArray0, (int) (short) (-7), (-1), (int) (short) (-7));
      assertArrayEquals(new short[] {(short) (-7), (short) (-7), (short) (-7)}, shortArray0);
      assertEquals(3, shortArray0.length);
      
      Short[] shortArray1 = new Short[0];
      Short[] shortArray2 = ArrayUtils.nullToEmpty(shortArray1);
      assertEquals(0, shortArray1.length);
      assertEquals(0, shortArray2.length);
      assertFalse(shortArray2.equals((Object)shortArray1));
      assertNotSame(shortArray1, shortArray2);
      assertNotSame(shortArray2, shortArray1);
      assertNotNull(shortArray2);
      
      byte[] byteArray1 = ArrayUtils.removeElements(byteArray0, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-7)}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(1, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      
      char[] charArray0 = new char[3];
      charArray0[0] = '@';
      charArray0[1] = ';';
      charArray0[2] = '$';
      ArrayUtils.swap(charArray0, (-1), (int) (short) (-7));
      assertArrayEquals(new char[] {'@', ';', '$'}, charArray0);
      assertEquals(3, charArray0.length);
      
      int[] intArray0 = new int[5];
      intArray0[0] = 58;
      intArray0[1] = (int) (byte) (-7);
      intArray0[2] = (int) '$';
      intArray0[3] = (int) (short) (-7);
      intArray0[4] = (int) ';';
      int[] intArray1 = ArrayUtils.clone(intArray0);
      assertArrayEquals(new int[] {58, (-7), 36, (-7), 59}, intArray0);
      assertArrayEquals(new int[] {58, (-7), 36, (-7), 59}, intArray1);
      assertEquals(5, intArray0.length);
      assertEquals(5, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
  }

  @Test(timeout = 4000)
  public void test0483()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)87;
      byteArray0[1] = (byte)56;
      byteArray0[2] = (byte)75;
      byteArray0[3] = (byte)73;
      byteArray0[4] = (byte)62;
      byteArray0[5] = (byte)109;
      byteArray0[6] = (byte)2;
      ArrayUtils.shuffle(byteArray0);
      assertArrayEquals(new byte[] {(byte)56, (byte)75, (byte)73, (byte)62, (byte)109, (byte)2, (byte)87}, byteArray0);
      assertEquals(7, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test0484()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-12.919581269511974);
      boolean boolean0 = ArrayUtils.isNotEmpty(doubleArray0);
      assertArrayEquals(new double[] {0.0, (-12.919581269511974)}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      assertTrue(boolean0);
      
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short) (-1816);
      shortArray0[2] = (short)0;
      double[] doubleArray1 = new double[2];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[1] = (double) (short) (-1816);
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      ArrayUtils.reverse(booleanArray0, (-5718), (int) (short)0);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true, true}, booleanArray0));
      assertEquals(6, booleanArray0.length);
      
      double[] doubleArray2 = ArrayUtils.removeElements(doubleArray1, (double[]) null);
      assertArrayEquals(new double[] {0.0, (-1816.0)}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {0.0, (-1816.0)}, doubleArray1, 0.01);
      assertEquals(2, doubleArray2.length);
      assertEquals(2, doubleArray1.length);
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray2);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray1, (double) (short)0, (-834));
      assertEquals("{0}", bitSet0.toString());
      assertEquals(1, bitSet0.length());
      assertEquals(1, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertArrayEquals(new double[] {0.0, (-1816.0)}, doubleArray1, 0.01);
      assertEquals(2, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(bitSet0);
      
      int int0 = ArrayUtils.lastIndexOf((int[]) null, 350, (-834));
      assertEquals((-1), int0);
      
      BitSet bitSet1 = ArrayUtils.indexesOf(booleanArray0, false, 88);
      assertEquals(0, bitSet1.cardinality());
      assertTrue(bitSet1.isEmpty());
      assertEquals(64, bitSet1.size());
      assertEquals(0, bitSet1.length());
      assertEquals("{}", bitSet1.toString());
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true, true}, booleanArray0));
      assertEquals(6, booleanArray0.length);
      assertFalse(bitSet1.equals((Object)bitSet0));
      assertNotSame(bitSet1, bitSet0);
      assertNotNull(bitSet1);
  }

  @Test(timeout = 4000)
  public void test0485()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 2798.735380718;
      doubleArray0[1] = 0.0;
      Long long0 = new Long(2129L);
      assertNotNull(long0);
      assertEquals(2129L, (long)long0);
      
      Long long1 = new Long((-3482L));
      assertFalse(long1.equals((Object)long0));
      assertNotNull(long1);
      assertEquals((-3482L), (long)long1);
      
      Long long2 = new Long((-158L));
      assertFalse(long2.equals((Object)long1));
      assertFalse(long2.equals((Object)long0));
      assertNotNull(long2);
      assertEquals((-158L), (long)long2);
      
      Long long3 = new Long((-167L));
      assertFalse(long3.equals((Object)long1));
      assertFalse(long3.equals((Object)long2));
      assertFalse(long3.equals((Object)long0));
      assertNotNull(long3);
      assertEquals((-167L), (long)long3);
      
      Long long4 = new Long((-167L));
      assertFalse(long4.equals((Object)long2));
      assertTrue(long4.equals((Object)long3));
      assertFalse(long4.equals((Object)long1));
      assertFalse(long4.equals((Object)long0));
      assertNotNull(long4);
      assertEquals((-167L), (long)long4);
      
      Long long5 = new Long(1760L);
      assertFalse(long5.equals((Object)long4));
      assertFalse(long5.equals((Object)long0));
      assertFalse(long5.equals((Object)long3));
      assertFalse(long5.equals((Object)long1));
      assertFalse(long5.equals((Object)long2));
      assertNotNull(long5);
      assertEquals(1760L, (long)long5);
      
      Long long6 = new Long(1760L);
      assertFalse(long6.equals((Object)long4));
      assertTrue(long6.equals((Object)long5));
      assertFalse(long6.equals((Object)long1));
      assertFalse(long6.equals((Object)long3));
      assertFalse(long6.equals((Object)long0));
      assertFalse(long6.equals((Object)long2));
      assertNotNull(long6);
      assertEquals(1760L, (long)long6);
      
      Long long7 = new Long(1L);
      assertFalse(long7.equals((Object)long0));
      assertFalse(long7.equals((Object)long5));
      assertFalse(long7.equals((Object)long4));
      assertFalse(long7.equals((Object)long2));
      assertFalse(long7.equals((Object)long6));
      assertFalse(long7.equals((Object)long3));
      assertFalse(long7.equals((Object)long1));
      assertNotNull(long7);
      assertEquals(1L, (long)long7);
      
      Long[] longArray0 = ArrayUtils.nullToEmpty((Long[]) null);
      assertEquals(0, longArray0.length);
      assertNotNull(longArray0);
      
      short[] shortArray0 = ArrayUtils.nullToEmpty((short[]) null);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray0.length);
      assertNotNull(shortArray0);
      
      char[] charArray0 = new char[7];
      charArray0[0] = 'R';
      charArray0[1] = 'h';
      charArray0[2] = 'R';
      charArray0[3] = 'H';
      charArray0[4] = 'R';
      charArray0[5] = 'h';
      ArrayUtils.swap(charArray0, (-164), 34, (-2450));
      assertArrayEquals(new char[] {'R', 'h', 'R', 'H', 'R', 'h', '\u0000'}, charArray0);
      assertEquals(7, charArray0.length);
      
      int[] intArray0 = new int[8];
      intArray0[0] = (int) 'H';
      intArray0[1] = 4462;
      intArray0[2] = (-2450);
      intArray0[3] = (int) 'R';
      intArray0[4] = 9;
      intArray0[5] = (int) 'h';
      intArray0[6] = (int) 'R';
      intArray0[7] = (int) 'h';
      int int0 = ArrayUtils.lastIndexOf(intArray0, (-2450), (-1571));
      assertArrayEquals(new int[] {72, 4462, (-2450), 82, 9, 104, 82, 104}, intArray0);
      assertEquals(8, intArray0.length);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0486()  throws Throwable  {
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short) (-1);
      shortArray0[1] = (short) (-1);
      char[] charArray0 = new char[7];
      charArray0[0] = '0';
      charArray0[1] = '0';
      charArray0[2] = '0';
      ArrayUtils.reverse((boolean[]) null, 2, (int) (short) (-1));
      double[] doubleArray0 = ArrayUtils.removeElements((double[]) null, (double[]) null);
      assertNull(doubleArray0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((double[]) null, (-1909.0), 2);
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertNotNull(bitSet0);
      
      int[] intArray0 = new int[5];
      intArray0[0] = 2;
      intArray0[1] = (int) (short)43;
      intArray0[2] = 2140;
      intArray0[4] = (int) (short) (-1);
      int int0 = ArrayUtils.lastIndexOf(intArray0, (-2269), (int) (short) (-1));
      assertArrayEquals(new int[] {2, 43, 2140, 0, (-1)}, intArray0);
      assertEquals(5, intArray0.length);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0487()  throws Throwable  {
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short) (-13);
      shortArray0[1] = (short)43;
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      BitSet bitSet0 = ArrayUtils.indexesOf(booleanArray0, true);
      assertEquals(2, bitSet0.length());
      assertEquals("{0, 1}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(2, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray0));
      assertEquals(2, booleanArray0.length);
      assertNotNull(bitSet0);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-2703.0);
      doubleArray0[1] = 1891.788693054866;
      doubleArray0[2] = 1757.16516391848;
      boolean boolean0 = ArrayUtils.isSameLength(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {(-2703.0), 1891.788693054866, 1757.16516391848}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)10;
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte)0, (int) (byte)0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)10}, byteArray0);
      assertEquals(3, byteArray0.length);
      assertEquals(0, int0);
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = "{}";
      stringArray0[1] = "hBFS3gE9\"%:ZYA/e";
      stringArray0[2] = "'%qJ";
      stringArray0[3] = "[R1T{B' F2<Nv3L";
      String[] stringArray1 = ArrayUtils.subarray(stringArray0, 1309, (int) 0);
      assertEquals(4, stringArray0.length);
      assertEquals(0, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertNotNull(stringArray1);
      
      char[] charArray0 = new char[5];
      charArray0[0] = 'Y';
      charArray0[1] = '*';
      charArray0[2] = 'o';
      charArray0[3] = 'D';
      charArray0[4] = '^';
      // Undeclared exception!
      try { 
        ArrayUtils.add(charArray0, 1309, 'D');
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1309, Length: 5
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0488()  throws Throwable  {
      Byte byte0 = new Byte((byte) (-116));
      assertNotNull(byte0);
      assertEquals((byte) (-116), (byte)byte0);
      
      Byte byte1 = new Byte((byte) (-116));
      assertTrue(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      assertEquals((byte) (-116), (byte)byte1);
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)3606;
      shortArray0[2] = (short) (-531);
      short[] shortArray1 = ArrayUtils.addAll(shortArray0, shortArray0);
      assertArrayEquals(new short[] {(short)3606, (short)0, (short) (-531), (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)3606, (short)0, (short) (-531), (short)0, (short)3606, (short)0, (short) (-531), (short)0}, shortArray1);
      assertEquals(4, shortArray0.length);
      assertEquals(8, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
  }

  @Test(timeout = 4000)
  public void test0489()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 196;
      intArray0[1] = 0;
      int[] intArray1 = ArrayUtils.subarray(intArray0, 32, 0);
      assertArrayEquals(new int[] {196, 0}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(2, intArray0.length);
      assertEquals(0, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      
      Byte byte0 = new Byte((byte) (-70));
      assertNotNull(byte0);
      assertEquals((byte) (-70), (byte)byte0);
      
      Byte byte1 = new Byte((byte)104);
      assertFalse(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      assertEquals((byte)104, (byte)byte1);
      
      Byte byte2 = new Byte((byte) (-39));
      assertFalse(byte2.equals((Object)byte1));
      assertFalse(byte2.equals((Object)byte0));
      assertNotNull(byte2);
      assertEquals((byte) (-39), (byte)byte2);
      
      Byte byte3 = new Byte((byte) (-124));
      assertFalse(byte3.equals((Object)byte1));
      assertFalse(byte3.equals((Object)byte2));
      assertFalse(byte3.equals((Object)byte0));
      assertNotNull(byte3);
      assertEquals((byte) (-124), (byte)byte3);
      
      Byte byte4 = new Byte((byte)1);
      assertFalse(byte4.equals((Object)byte2));
      assertFalse(byte4.equals((Object)byte0));
      assertFalse(byte4.equals((Object)byte1));
      assertFalse(byte4.equals((Object)byte3));
      assertNotNull(byte4);
      assertEquals((byte)1, (byte)byte4);
      
      Byte byte5 = new Byte((byte)0);
      assertFalse(byte5.equals((Object)byte4));
      assertFalse(byte5.equals((Object)byte3));
      assertFalse(byte5.equals((Object)byte0));
      assertFalse(byte5.equals((Object)byte2));
      assertFalse(byte5.equals((Object)byte1));
      assertNotNull(byte5);
      assertEquals((byte)0, (byte)byte5);
      
      byte[] byteArray0 = ArrayUtils.toPrimitive((Byte[]) null, (byte) (-18));
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test0490()  throws Throwable  {
      Byte byte0 = new Byte((byte)99);
      assertNotNull(byte0);
      assertEquals((byte)99, (byte)byte0);
      
      Byte byte1 = new Byte((byte)89);
      assertFalse(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      assertEquals((byte)89, (byte)byte1);
      
      Byte byte2 = new Byte((byte)99);
      assertTrue(byte2.equals((Object)byte0));
      assertFalse(byte2.equals((Object)byte1));
      assertNotNull(byte2);
      assertEquals((byte)99, (byte)byte2);
      
      Byte byte3 = new Byte((byte) (-18));
      assertFalse(byte3.equals((Object)byte2));
      assertFalse(byte3.equals((Object)byte1));
      assertFalse(byte3.equals((Object)byte0));
      assertNotNull(byte3);
      assertEquals((byte) (-18), (byte)byte3);
      
      Byte byte4 = new Byte((byte)89);
      assertFalse(byte4.equals((Object)byte3));
      assertTrue(byte4.equals((Object)byte1));
      assertFalse(byte4.equals((Object)byte2));
      assertFalse(byte4.equals((Object)byte0));
      assertNotNull(byte4);
      assertEquals((byte)89, (byte)byte4);
      
      Byte byte5 = new Byte((byte)89);
      assertTrue(byte5.equals((Object)byte4));
      assertTrue(byte5.equals((Object)byte1));
      assertFalse(byte5.equals((Object)byte0));
      assertFalse(byte5.equals((Object)byte3));
      assertFalse(byte5.equals((Object)byte2));
      assertNotNull(byte5);
      assertEquals((byte)89, (byte)byte5);
      
      Byte byte6 = new Byte((byte)99);
      assertTrue(byte6.equals((Object)byte2));
      assertFalse(byte6.equals((Object)byte3));
      assertFalse(byte6.equals((Object)byte5));
      assertFalse(byte6.equals((Object)byte4));
      assertFalse(byte6.equals((Object)byte1));
      assertTrue(byte6.equals((Object)byte0));
      assertNotNull(byte6);
      assertEquals((byte)99, (byte)byte6);
      
      Byte byte7 = new Byte((byte)89);
      assertFalse(byte7.equals((Object)byte2));
      assertTrue(byte7.equals((Object)byte1));
      assertFalse(byte7.equals((Object)byte6));
      assertFalse(byte7.equals((Object)byte0));
      assertFalse(byte7.equals((Object)byte3));
      assertTrue(byte7.equals((Object)byte4));
      assertTrue(byte7.equals((Object)byte5));
      assertNotNull(byte7);
      assertEquals((byte)89, (byte)byte7);
      
      Byte byte8 = new Byte((byte)43);
      assertFalse(byte8.equals((Object)byte7));
      assertFalse(byte8.equals((Object)byte0));
      assertFalse(byte8.equals((Object)byte1));
      assertFalse(byte8.equals((Object)byte3));
      assertFalse(byte8.equals((Object)byte5));
      assertFalse(byte8.equals((Object)byte6));
      assertFalse(byte8.equals((Object)byte2));
      assertFalse(byte8.equals((Object)byte4));
      assertNotNull(byte8);
      assertEquals((byte)43, (byte)byte8);
      
      byte[] byteArray0 = ArrayUtils.toPrimitive((Byte[]) null, (byte)0);
      assertNull(byteArray0);
      
      int[] intArray0 = new int[9];
      intArray0[0] = (int) (byte)43;
      intArray0[1] = (int) (byte)99;
      intArray0[2] = (int) (byte) (-18);
      intArray0[3] = (-4798);
      intArray0[4] = (int) (byte)99;
      intArray0[5] = 21;
      intArray0[6] = 52;
      intArray0[7] = (int) (byte)89;
      intArray0[8] = (int) (byte)89;
      boolean boolean0 = ArrayUtils.isEmpty(intArray0);
      assertArrayEquals(new int[] {43, 99, (-18), (-4798), 99, 21, 52, 89, 89}, intArray0);
      assertEquals(9, intArray0.length);
      assertFalse(boolean0);
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (byte)43;
      shortArray0[1] = (short) (byte)43;
      shortArray0[2] = (short) (byte) (-18);
      shortArray0[3] = (short) (byte)89;
      short[] shortArray1 = ArrayUtils.addAll(shortArray0, shortArray0);
      assertArrayEquals(new short[] {(short)43, (short)43, (short) (-18), (short)89}, shortArray0);
      assertArrayEquals(new short[] {(short)43, (short)43, (short) (-18), (short)89, (short)43, (short)43, (short) (-18), (short)89}, shortArray1);
      assertEquals(4, shortArray0.length);
      assertEquals(8, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
  }

  @Test(timeout = 4000)
  public void test0491()  throws Throwable  {
      int int0 = ArrayUtils.lastIndexOf((float[]) null, 1.0F, 31);
      assertEquals((-1), int0);
      
      short[] shortArray0 = ArrayUtils.EMPTY_SHORT_ARRAY;
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray0.length);
      assertNotNull(shortArray0);
      
      long[] longArray0 = new long[3];
      longArray0[0] = (long) (short) (-159);
      longArray0[1] = (long) (short)0;
      longArray0[2] = (long) (short) (-3158);
      long[] longArray1 = ArrayUtils.addFirst(longArray0, (-159L));
      assertArrayEquals(new long[] {(-159L), 0L, (-3158L)}, longArray0);
      assertArrayEquals(new long[] {(-159L), (-159L), 0L, (-3158L)}, longArray1);
      assertEquals(3, longArray0.length);
      assertEquals(4, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
  }

  @Test(timeout = 4000)
  public void test0492()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-7);
      boolean boolean0 = ArrayUtils.isSameLength(byteArray0, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-7)}, byteArray0);
      assertEquals(1, byteArray0.length);
      assertTrue(boolean0);
      
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short) (byte) (-7);
      shortArray0[1] = (short) (byte) (-7);
      shortArray0[2] = (short) (byte) (-7);
      ArrayUtils.shift(shortArray0, (int) (short) (-7), (-1), (int) (short) (-7));
      assertArrayEquals(new short[] {(short) (-7), (short) (-7), (short) (-7)}, shortArray0);
      assertEquals(3, shortArray0.length);
      
      Short[] shortArray1 = new Short[0];
      Short[] shortArray2 = new Short[0];
      assertFalse(shortArray2.equals((Object)shortArray1));
      
      Short[] shortArray3 = ArrayUtils.nullToEmpty(shortArray2);
      assertEquals(0, shortArray2.length);
      assertEquals(0, shortArray3.length);
      assertFalse(shortArray2.equals((Object)shortArray1));
      assertFalse(shortArray3.equals((Object)shortArray2));
      assertFalse(shortArray3.equals((Object)shortArray1));
      assertNotSame(shortArray2, shortArray1);
      assertNotSame(shortArray2, shortArray3);
      assertNotSame(shortArray3, shortArray2);
      assertNotSame(shortArray3, shortArray1);
      assertNotNull(shortArray3);
      
      byte[] byteArray1 = ArrayUtils.removeElements(byteArray0, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-7)}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(1, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      
      char[] charArray0 = new char[3];
      charArray0[0] = '@';
      charArray0[1] = ';';
      charArray0[2] = '$';
      ArrayUtils.swap(charArray0, (-1), (int) (short) (-7));
      assertArrayEquals(new char[] {'@', ';', '$'}, charArray0);
      assertEquals(3, charArray0.length);
      
      short[] shortArray4 = ArrayUtils.removeElement(shortArray0, (short) (-1271));
      assertArrayEquals(new short[] {(short) (-7), (short) (-7), (short) (-7)}, shortArray4);
      assertArrayEquals(new short[] {(short) (-7), (short) (-7), (short) (-7)}, shortArray0);
      assertEquals(3, shortArray4.length);
      assertEquals(3, shortArray0.length);
      assertFalse(shortArray4.equals((Object)shortArray0));
      assertNotSame(shortArray4, shortArray0);
      assertNotSame(shortArray0, shortArray4);
      assertNotNull(shortArray4);
      
      long[] longArray0 = ArrayUtils.addFirst((long[]) null, (long) (short) (-7));
      assertArrayEquals(new long[] {(-7L)}, longArray0);
      assertEquals(1, longArray0.length);
      assertNotNull(longArray0);
  }

  @Test(timeout = 4000)
  public void test0493()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = 'G';
      charArray0[1] = '[';
      charArray0[2] = '[';
      MockRandom mockRandom0 = new MockRandom((-2753L));
      assertNotNull(mockRandom0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-25);
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte) (-108);
      byteArray0[3] = (byte) (-29);
      byteArray0[4] = (byte)45;
      byteArray0[5] = (byte) (-1);
      byteArray0[6] = (byte)92;
      byteArray0[7] = (byte) (-73);
      byteArray0[8] = (byte)113;
      mockRandom0.nextBytes(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)1, (byte)0, (byte)0, (byte)0, (byte)2}, byteArray0);
      assertEquals(9, byteArray0.length);
      
      ArrayUtils.shuffle(charArray0, (Random) mockRandom0);
      assertArrayEquals(new char[] {'[', '[', 'G'}, charArray0);
      assertEquals(3, charArray0.length);
      
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short)482;
      shortArray0[1] = (short)4485;
      shortArray0[2] = (short)0;
      shortArray0[3] = (short)0;
      shortArray0[4] = (short)1;
      shortArray0[5] = (short)0;
      shortArray0[6] = (short)851;
      shortArray0[7] = (short)0;
      short[] shortArray1 = ArrayUtils.removeElement(shortArray0, (short) (-159));
      assertArrayEquals(new short[] {(short)482, (short)4485, (short)0, (short)0, (short)1, (short)0, (short)851, (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)482, (short)4485, (short)0, (short)0, (short)1, (short)0, (short)851, (short)0}, shortArray1);
      assertEquals(8, shortArray0.length);
      assertEquals(8, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      
      long[] longArray0 = new long[5];
      longArray0[0] = (long) (short)0;
      longArray0[1] = (long) (short)1;
      longArray0[2] = (long) (short)482;
      longArray0[3] = (long) (short)0;
      longArray0[4] = 1L;
      long[] longArray1 = ArrayUtils.addFirst(longArray0, 802L);
      assertArrayEquals(new long[] {802L, 0L, 1L, 482L, 0L, 1L}, longArray1);
      assertArrayEquals(new long[] {0L, 1L, 482L, 0L, 1L}, longArray0);
      assertEquals(6, longArray1.length);
      assertEquals(5, longArray0.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray0, longArray1);
      assertNotNull(longArray1);
  }

  @Test(timeout = 4000)
  public void test0494()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 1.5;
      boolean boolean0 = ArrayUtils.isNotEmpty(doubleArray0);
      assertArrayEquals(new double[] {0.0, 1.5}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      assertTrue(boolean0);
      
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short) (-1816);
      shortArray0[2] = (short)0;
      shortArray0[3] = (short) (-1524);
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      ArrayUtils.swap(booleanArray0, (-2736), (int) (short) (-1524));
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true}, booleanArray0));
      assertEquals(5, booleanArray0.length);
      
      long[] longArray0 = new long[3];
      longArray0[0] = (long) (short) (-1524);
      longArray0[1] = (long) (short) (-1524);
      longArray0[2] = (-1L);
      ArrayUtils.shift(longArray0, (-366), (int) (short) (-1524), 384);
      assertArrayEquals(new long[] {(-1524L), (-1524L), (-1L)}, longArray0);
      assertEquals(3, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test0495()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      int[] intArray0 = new int[5];
      intArray0[0] = (int) (short)560;
      intArray0[1] = (int) (short)560;
      intArray0[2] = (int) (short)560;
      intArray0[3] = (int) (short)560;
      intArray0[4] = (int) (short)560;
      boolean boolean0 = ArrayUtils.isSorted(intArray0);
      assertArrayEquals(new int[] {560, 560, 560, 560, 560}, intArray0);
      assertEquals(5, intArray0.length);
      assertTrue(boolean0);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) 560;
      longArray0[1] = (long) 560;
      long[] longArray1 = ArrayUtils.removeAllOccurrences(longArray0, (long) (short)560);
      assertArrayEquals(new long[] {560L, 560L}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertEquals(2, longArray0.length);
      assertEquals(0, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
      
      ArrayUtils.shift(longArray0, 560);
      assertArrayEquals(new long[] {560L, 560L}, longArray0);
      assertEquals(2, longArray0.length);
      assertFalse(longArray0.equals((Object)longArray1));
      assertNotSame(longArray0, longArray1);
      
      ArrayUtils.shift((double[]) null, 0);
      double[] doubleArray0 = ArrayUtils.insert(3631, (double[]) null, (double[]) null);
      assertNull(doubleArray0);
      
      ArrayUtils.shift((short[]) null, 1518);
      char[] charArray0 = new char[1];
      charArray0[0] = 'I';
      ArrayUtils.reverse(charArray0);
      assertArrayEquals(new char[] {'I'}, charArray0);
      assertEquals(1, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test0496()  throws Throwable  {
      Object[] objectArray0 = new Object[5];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      Object object1 = ArrayUtils.get(objectArray0, (int) 560, (Object) "");
      assertEquals(5, objectArray0.length);
      assertNotNull(object1);
      assertEquals("", object1);
      
      objectArray0[1] = (Object) "";
      Object object2 = new Object();
      assertFalse(object2.equals((Object)object0));
      assertNotNull(object2);
      
      objectArray0[2] = object2;
      int[] intArray0 = new int[7];
      intArray0[0] = (int) (short)560;
      intArray0[1] = (int) (short)560;
      intArray0[2] = (int) (short)560;
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      IntStream intStream0 = mockRandom0.ints((long) 560);
      assertNotNull(intStream0);
      
      MockRandom mockRandom1 = new MockRandom(853L);
      assertFalse(mockRandom1.equals((Object)mockRandom0));
      assertNotNull(mockRandom1);
      
      int int0 = mockRandom1.nextInt();
      assertFalse(mockRandom1.equals((Object)mockRandom0));
      assertNotSame(mockRandom1, mockRandom0);
      assertEquals(0, int0);
      
      ArrayUtils.shuffle(byteArray0, (Random) mockRandom0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(mockRandom0.equals((Object)mockRandom1));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(mockRandom0, mockRandom1);
  }

  @Test(timeout = 4000)
  public void test0497()  throws Throwable  {
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short) (-13);
      shortArray0[1] = (short)43;
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      BitSet bitSet0 = ArrayUtils.indexesOf(booleanArray0, true);
      assertFalse(bitSet0.isEmpty());
      assertEquals(2, bitSet0.cardinality());
      assertEquals("{0, 1}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(2, bitSet0.length());
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray0));
      assertEquals(2, booleanArray0.length);
      assertNotNull(bitSet0);
      
      Long long0 = new Long((-3482L));
      assertNotNull(long0);
      assertEquals((-3482L), (long)long0);
      
      Long long1 = new Long((short)43);
      assertFalse(long1.equals((Object)long0));
      assertNotNull(long1);
      assertEquals(43L, (long)long1);
      
      Long long2 = new Long(0L);
      assertFalse(long2.equals((Object)long1));
      assertFalse(long2.equals((Object)long0));
      assertNotNull(long2);
      assertEquals(0L, (long)long2);
      
      int[] intArray0 = new int[3];
      intArray0[0] = (int) (short) (-13);
      intArray0[1] = (-2798);
      intArray0[2] = (-2798);
      ArrayUtils.shift(intArray0, 3699);
      assertArrayEquals(new int[] {(-13), (-2798), (-2798)}, intArray0);
      assertEquals(3, intArray0.length);
      
      ArrayUtils.shift(booleanArray0, 901);
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray0));
      assertEquals(2, booleanArray0.length);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-52);
      byteArray0[1] = (byte)28;
      ArrayUtils.shift(booleanArray0, (-2798));
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray0));
      assertEquals(2, booleanArray0.length);
      
      char[] charArray0 = new char[1];
      charArray0[0] = '7';
      char[] charArray1 = ArrayUtils.addFirst(charArray0, '7');
      assertArrayEquals(new char[] {'7'}, charArray0);
      assertArrayEquals(new char[] {'7', '7'}, charArray1);
      assertEquals(1, charArray0.length);
      assertEquals(2, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      
      Integer[] integerArray0 = new Integer[0];
      int[] intArray1 = ArrayUtils.toPrimitive(integerArray0, 347);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(0, integerArray0.length);
      assertEquals(0, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      
      int[] intArray2 = ArrayUtils.toPrimitive(integerArray0);
      assertArrayEquals(new int[] {}, intArray2);
      assertEquals(0, integerArray0.length);
      assertEquals(0, intArray2.length);
      assertFalse(intArray2.equals((Object)intArray0));
      assertNotSame(intArray2, intArray0);
      assertSame(intArray2, intArray1);
      assertNotNull(intArray2);
  }

  @Test(timeout = 4000)
  public void test0498()  throws Throwable  {
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short) (-13);
      shortArray0[1] = (short)43;
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      BitSet bitSet0 = ArrayUtils.indexesOf(booleanArray0, true);
      assertEquals(2, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertEquals("{0, 1}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(2, bitSet0.length());
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray0));
      assertEquals(2, booleanArray0.length);
      assertNotNull(bitSet0);
      
      Long long0 = new Long((short)43);
      assertNotNull(long0);
      assertEquals(43L, (long)long0);
      
      Long long1 = new Long((-3482L));
      assertFalse(long1.equals((Object)long0));
      assertNotNull(long1);
      assertEquals((-3482L), (long)long1);
      
      Long long2 = new Long((short)43);
      assertTrue(long2.equals((Object)long0));
      assertFalse(long2.equals((Object)long1));
      assertNotNull(long2);
      assertEquals(43L, (long)long2);
      
      Long long3 = new Long(0L);
      assertFalse(long3.equals((Object)long1));
      assertFalse(long3.equals((Object)long0));
      assertFalse(long3.equals((Object)long2));
      assertNotNull(long3);
      assertEquals(0L, (long)long3);
      
      Long long4 = new Long((short) (-13));
      assertFalse(long4.equals((Object)long2));
      assertFalse(long4.equals((Object)long0));
      assertFalse(long4.equals((Object)long3));
      assertFalse(long4.equals((Object)long1));
      assertNotNull(long4);
      assertEquals((-13L), (long)long4);
      
      Long long5 = new Long(1L);
      assertFalse(long5.equals((Object)long3));
      assertFalse(long5.equals((Object)long1));
      assertFalse(long5.equals((Object)long0));
      assertFalse(long5.equals((Object)long2));
      assertFalse(long5.equals((Object)long4));
      assertNotNull(long5);
      assertEquals(1L, (long)long5);
      
      Long long6 = new Long((-1L));
      assertFalse(long6.equals((Object)long2));
      assertFalse(long6.equals((Object)long5));
      assertFalse(long6.equals((Object)long3));
      assertFalse(long6.equals((Object)long0));
      assertFalse(long6.equals((Object)long1));
      assertFalse(long6.equals((Object)long4));
      assertNotNull(long6);
      assertEquals((-1L), (long)long6);
      
      Long long7 = new Long((-3482L));
      assertFalse(long7.equals((Object)long5));
      assertFalse(long7.equals((Object)long4));
      assertTrue(long7.equals((Object)long1));
      assertFalse(long7.equals((Object)long2));
      assertFalse(long7.equals((Object)long3));
      assertFalse(long7.equals((Object)long0));
      assertFalse(long7.equals((Object)long6));
      assertNotNull(long7);
      assertEquals((-3482L), (long)long7);
      
      Long[] longArray0 = ArrayUtils.nullToEmpty((Long[]) null);
      assertEquals(0, longArray0.length);
      assertNotNull(longArray0);
      
      short[] shortArray1 = ArrayUtils.nullToEmpty(shortArray0);
      assertArrayEquals(new short[] {(short) (-13), (short)43, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray1);
      assertArrayEquals(new short[] {(short) (-13), (short)43, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertEquals(8, shortArray1.length);
      assertEquals(8, shortArray0.length);
      assertSame(shortArray1, shortArray0);
      assertSame(shortArray0, shortArray1);
      assertNotNull(shortArray1);
      
      char[] charArray0 = new char[3];
      charArray0[0] = 'h';
      charArray0[1] = 'H';
      charArray0[2] = 'R';
      ArrayUtils.swap(charArray0, (-2450), (-2450), (-164));
      assertArrayEquals(new char[] {'h', 'H', 'R'}, charArray0);
      assertEquals(3, charArray0.length);
      
      Integer[] integerArray0 = new Integer[1];
      Integer integer0 = new Integer((short)43);
      assertNotNull(integer0);
      assertEquals(43, (int)integer0);
      
      integerArray0[0] = integer0;
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0);
      assertArrayEquals(new int[] {43}, intArray0);
      assertEquals(1, integerArray0.length);
      assertEquals(1, intArray0.length);
      assertNotNull(intArray0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)50;
      byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)50}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)50}, byteArray1);
      assertEquals(2, byteArray0.length);
      assertEquals(2, byteArray1.length);
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
  }

  @Test(timeout = 4000)
  public void test0499()  throws Throwable  {
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (-13);
      shortArray0[1] = (short)43;
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      BitSet bitSet0 = ArrayUtils.indexesOf(booleanArray0, true);
      assertEquals(2, bitSet0.length());
      assertEquals(2, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertEquals("{0, 1}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray0));
      assertEquals(2, booleanArray0.length);
      assertNotNull(bitSet0);
      
      Long long0 = new Long((short)43);
      assertNotNull(long0);
      assertEquals(43L, (long)long0);
      
      Long long1 = new Long((-3482L));
      assertFalse(long1.equals((Object)long0));
      assertNotNull(long1);
      assertEquals((-3482L), (long)long1);
      
      char[] charArray0 = new char[7];
      charArray0[0] = ')';
      charArray0[1] = '{';
      charArray0[2] = '%';
      charArray0[3] = '#';
      charArray0[4] = '_';
      charArray0[5] = 'Z';
      charArray0[6] = 'Z';
      ArrayUtils.swap(charArray0, 2238, 2238, 2103);
      assertArrayEquals(new char[] {')', '{', '%', '#', '_', 'Z', 'Z'}, charArray0);
      assertEquals(7, charArray0.length);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (double) '{';
      doubleArray0[2] = (double) (short)43;
      doubleArray0[3] = (double) '#';
      doubleArray0[4] = (double) '%';
      doubleArray0[5] = (double) 'Z';
      double[] doubleArray1 = ArrayUtils.removeElements(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 123.0, 43.0, 35.0, 37.0, 90.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(6, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
  }

  @Test(timeout = 4000)
  public void test0500()  throws Throwable  {
      Byte[] byteArray0 = new Byte[2];
      byte byte0 = (byte)51;
      Byte byte1 = new Byte((byte)51);
      assertTrue(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      assertEquals((byte)51, (byte)byte1);
      
      byteArray0[0] = byte1;
      Byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0);
      assertEquals(2, byteArray0.length);
      assertEquals(2, byteArray1.length);
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      
      boolean boolean0 = ArrayUtils.contains((short[]) null, (short)202);
      assertFalse(boolean0);
      
      ArrayUtils.swap((Object[]) byteArray1, (int) (byte)51, (int) (short)202, (int) (byte)51);
      assertEquals(2, byteArray0.length);
      assertEquals(2, byteArray1.length);
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray1, byteArray0);
      
      byte[] byteArray2 = new byte[6];
      byteArray2[0] = (byte)51;
      byteArray2[1] = (byte)32;
      byteArray2[2] = (byte)0;
      byteArray2[3] = (byte)0;
      byteArray2[4] = (byte)32;
      byteArray2[5] = (byte)6;
      int int0 = ArrayUtils.indexOf(byteArray2, (byte)51);
      assertArrayEquals(new byte[] {(byte)51, (byte)32, (byte)0, (byte)0, (byte)32, (byte)6}, byteArray2);
      assertEquals(6, byteArray2.length);
      assertEquals(0, int0);
      
      long[] longArray0 = new long[9];
      longArray0[0] = (long) (byte)0;
      longArray0[1] = (long) byte0;
      longArray0[2] = (long) 0;
      longArray0[3] = (long) (byte)51;
      longArray0[4] = (long) (byte)0;
      longArray0[5] = (long) (byte)32;
      longArray0[6] = (long) (byte)32;
      longArray0[7] = (long) (byte)32;
      longArray0[8] = (long) (byte)51;
      int int1 = ArrayUtils.lastIndexOf(longArray0, 2226L, (int) (byte)0);
      assertArrayEquals(new long[] {0L, 51L, 0L, 51L, 0L, 32L, 32L, 32L, 51L}, longArray0);
      assertEquals(9, longArray0.length);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      booleanArray0[6] = false;
      booleanArray0[7] = true;
      booleanArray0[8] = false;
      ArrayUtils.swap(booleanArray0, (int) (byte)32, (-22), (int) (byte)32);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false, true, false}, booleanArray0));
      assertEquals(9, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test0501()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)9;
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) (byte)9;
      objectArray0[1] = (Object) (byte)9;
      objectArray0[2] = (Object) (byte)9;
      Double double0 = new Double((byte)9);
      assertNotNull(double0);
      assertEquals(9.0, (double)double0, 0.01);
      
      Object object0 = ArrayUtils.toPrimitive((Object) double0);
      assertNotNull(object0);
      assertEquals(9.0, object0);
      
      objectArray0[3] = object0;
      objectArray0[4] = (Object) (byte)9;
      objectArray0[5] = (Object) (byte)9;
      objectArray0[6] = (Object) (byte)9;
      objectArray0[7] = (Object) (byte)9;
      int int0 = ArrayUtils.lastIndexOf(objectArray0, objectArray0[6]);
      assertEquals(8, objectArray0.length);
      assertEquals(7, int0);
      
      int int1 = ArrayUtils.lastIndexOf(byteArray0, (byte)9);
      assertArrayEquals(new byte[] {(byte)9, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(9, byteArray0.length);
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      // Undeclared exception!
      try { 
        ArrayUtils.toMap(objectArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array element 0, '9', is neither of type Map.Entry nor an Array
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0502()  throws Throwable  {
      Byte byte0 = new Byte((byte)116);
      assertNotNull(byte0);
      assertEquals((byte)116, (byte)byte0);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 1.0F;
      doubleArray0[1] = (double) 1.0F;
      doubleArray0[2] = (-1528.9129008501);
      boolean boolean0 = ArrayUtils.contains(doubleArray0, (-1223.0), (-1528.9129008501));
      assertArrayEquals(new double[] {1.0, 1.0, (-1528.9129008501)}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      assertFalse(boolean0);
      
      int int0 = ArrayUtils.indexOf(doubleArray0, (double) (byte)116, (double) (byte)116);
      assertArrayEquals(new double[] {1.0, 1.0, (-1528.9129008501)}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(0, int0);
      
      int[] intArray0 = new int[2];
      boolean boolean1 = ArrayUtils.isSameLength((int[]) null, intArray0);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertEquals(2, intArray0.length);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      Character[] characterArray0 = new Character[5];
      char char0 = '[';
      Character character0 = Character.valueOf('[');
      assertNotNull(character0);
      assertEquals('[', (char)character0);
      
      characterArray0[0] = character0;
      Character character1 = Character.valueOf(char0);
      assertNotNull(character1);
      assertEquals('[', (char)character1);
      
      characterArray0[1] = character1;
      Character character2 = Character.valueOf(char0);
      assertNotNull(character2);
      assertEquals('[', (char)character2);
      
      characterArray0[2] = character2;
      Character character3 = Character.valueOf(char0);
      assertNotNull(character3);
      assertEquals('[', (char)character3);
      
      characterArray0[3] = character3;
      Character character4 = new Character('5');
      assertFalse(character4.equals((Object)character0));
      assertFalse(character4.equals((Object)character3));
      assertFalse(character4.equals((Object)char0));
      assertFalse(character4.equals((Object)character1));
      assertFalse(character4.equals((Object)character2));
      assertNotNull(character4);
      assertEquals('5', (char)character4);
      
      characterArray0[4] = character4;
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0, '\\');
      assertArrayEquals(new char[] {'[', '[', '[', '[', '5'}, charArray0);
      assertEquals(5, charArray0.length);
      assertEquals(5, characterArray0.length);
      assertNotNull(charArray0);
  }

  @Test(timeout = 4000)
  public void test0503()  throws Throwable  {
      Byte[] byteArray0 = new Byte[2];
      byte byte0 = (byte)51;
      Byte byte1 = new Byte((byte)51);
      assertTrue(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      assertEquals((byte)51, (byte)byte1);
      
      byteArray0[0] = byte1;
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 68.0;
      boolean boolean0 = ArrayUtils.contains(doubleArray0, (double) byte0, (-1528.9129008501));
      assertArrayEquals(new double[] {68.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertFalse(boolean0);
      
      int int0 = ArrayUtils.indexOf(doubleArray0, 2628.059742348748, 1964.0);
      assertArrayEquals(new double[] {68.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals((-1), int0);
      
      boolean boolean1 = ArrayUtils.isSameLength((int[]) null, (int[]) null);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test0504()  throws Throwable  {
      Byte[] byteArray0 = new Byte[9];
      byte byte0 = (byte)89;
      Byte byte1 = new Byte((byte)89);
      assertTrue(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      assertEquals((byte)89, (byte)byte1);
      
      byteArray0[0] = byte1;
      Byte byte2 = new Byte((byte)89);
      assertTrue(byte2.equals((Object)byte0));
      assertTrue(byte2.equals((Object)byte1));
      assertNotNull(byte2);
      assertEquals((byte)89, (byte)byte2);
      
      byteArray0[1] = byte2;
      Byte byte3 = new Byte((byte)68);
      assertFalse(byte3.equals((Object)byte2));
      assertFalse(byte3.equals((Object)byte1));
      assertFalse(byte3.equals((Object)byte0));
      assertNotNull(byte3);
      assertEquals((byte)68, (byte)byte3);
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (-3133);
      shortArray0[1] = (short) (-114);
      shortArray0[2] = (short) (byte)68;
      shortArray0[3] = (short) byte0;
      MockRandom mockRandom0 = new MockRandom(0L);
      assertNotNull(mockRandom0);
      
      LongStream longStream0 = mockRandom0.longs((long) (byte)68, 518L);
      assertNotNull(longStream0);
      
      ArrayUtils.shuffle(shortArray0, (Random) mockRandom0);
      assertArrayEquals(new short[] {(short) (-114), (short)68, (short)89, (short) (-3133)}, shortArray0);
      assertEquals(4, shortArray0.length);
      
      int[] intArray0 = new int[9];
      intArray0[0] = 818;
      intArray0[1] = (-1939);
      intArray0[2] = (int) byte0;
      intArray0[3] = 1370;
      intArray0[4] = 44;
      intArray0[5] = (int) (short)89;
      intArray0[6] = (int) (short) (-3133);
      intArray0[7] = (int) (short)68;
      intArray0[8] = (int) (byte)68;
      boolean boolean0 = ArrayUtils.isSameLength(intArray0, intArray0);
      assertArrayEquals(new int[] {818, (-1939), 89, 1370, 44, 89, (-3133), 68, 68}, intArray0);
      assertEquals(9, intArray0.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0505()  throws Throwable  {
      Byte[] byteArray0 = new Byte[2];
      byte byte0 = (byte)51;
      Byte byte1 = new Byte((byte)51);
      assertTrue(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      assertEquals((byte)51, (byte)byte1);
      
      byteArray0[0] = byte1;
      Byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0);
      assertEquals(2, byteArray0.length);
      assertEquals(2, byteArray1.length);
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      
      boolean boolean0 = ArrayUtils.contains((short[]) null, (short)202);
      assertFalse(boolean0);
      
      ArrayUtils.swap((Object[]) byteArray1, (int) (byte)51, (int) (short)202, (int) (byte)51);
      assertEquals(2, byteArray0.length);
      assertEquals(2, byteArray1.length);
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray1, byteArray0);
      
      byte[] byteArray2 = new byte[6];
      byteArray2[0] = (byte)51;
      byteArray2[1] = (byte)32;
      byteArray2[2] = (byte)0;
      byteArray2[3] = (byte)0;
      byteArray2[4] = (byte)32;
      byteArray2[5] = (byte)6;
      int int0 = ArrayUtils.indexOf(byteArray2, (byte)51);
      assertArrayEquals(new byte[] {(byte)51, (byte)32, (byte)0, (byte)0, (byte)32, (byte)6}, byteArray2);
      assertEquals(6, byteArray2.length);
      assertEquals(0, int0);
      
      long[] longArray0 = new long[9];
      longArray0[0] = (long) (byte)0;
      longArray0[1] = (long) byte0;
      longArray0[2] = (long) 0;
      longArray0[3] = (long) (byte)51;
      longArray0[4] = (long) (byte)0;
      longArray0[5] = (long) (byte)32;
      longArray0[6] = (long) (byte)32;
      longArray0[7] = (long) (byte)32;
      longArray0[8] = (long) (byte)51;
      int int1 = ArrayUtils.lastIndexOf(longArray0, 2226L, (int) (byte)0);
      assertArrayEquals(new long[] {0L, 51L, 0L, 51L, 0L, 32L, 32L, 32L, 51L}, longArray0);
      assertEquals(9, longArray0.length);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      long[] longArray1 = ArrayUtils.remove(longArray0, (int) (byte)0);
      assertArrayEquals(new long[] {51L, 0L, 51L, 0L, 32L, 32L, 32L, 51L}, longArray1);
      assertArrayEquals(new long[] {0L, 51L, 0L, 51L, 0L, 32L, 32L, 32L, 51L}, longArray0);
      assertEquals(8, longArray1.length);
      assertEquals(9, longArray0.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray0, longArray1);
      assertNotNull(longArray1);
  }

  @Test(timeout = 4000)
  public void test0506()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = '~';
      charArray0[1] = 'D';
      ArrayUtils.shift(charArray0, (int) '~');
      assertArrayEquals(new char[] {'~', 'D'}, charArray0);
      assertEquals(2, charArray0.length);
      
      Long long0 = new Long((-2142L));
      assertNotNull(long0);
      assertEquals((-2142L), (long)long0);
      
      try { 
        Byte.valueOf("");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test0507()  throws Throwable  {
      long[] longArray0 = new long[5];
      longArray0[0] = (-389L);
      longArray0[1] = (-1642L);
      longArray0[2] = (-2147483648L);
      longArray0[3] = (-1L);
      longArray0[4] = (-1098L);
      int int0 = (-1775);
      int int1 = ArrayUtils.indexOf(longArray0, (-1L), (-1775));
      assertArrayEquals(new long[] {(-389L), (-1642L), (-2147483648L), (-1L), (-1098L)}, longArray0);
      assertEquals(5, longArray0.length);
      assertFalse(int1 == int0);
      assertEquals(3, int1);
      
      AbstractMap.SimpleEntry<Object, Double>[] abstractMap_SimpleEntryArray0 = (AbstractMap.SimpleEntry<Object, Double>[]) Array.newInstance(AbstractMap.SimpleEntry.class, 1);
      AbstractMap.SimpleEntry<Object, Double> abstractMap_SimpleEntry0 = null;
      try {
        abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Object, Double>((Map.Entry<?, ? extends Double>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractMap$SimpleEntry", e);
      }
  }

  @Test(timeout = 4000)
  public void test0508()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[1] = 'D';
      long[] longArray0 = new long[0];
      int int0 = ArrayUtils.indexOf(longArray0, 4561L, (-1775));
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      assertEquals((-1), int0);
      
      Short short0 = new Short((short)28);
      assertNotNull(short0);
      assertEquals((short)28, (short)short0);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) '\u0000';
      ArrayUtils.shift(doubleArray0, 1362, (-1775), 322);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test0509()  throws Throwable  {
      Byte[] byteArray0 = new Byte[2];
      byte[] byteArray1 = new byte[2];
      byteArray1[0] = (byte) (-39);
      byteArray1[1] = (byte)17;
      boolean boolean0 = ArrayUtils.isSameLength(byteArray1, byteArray1);
      assertArrayEquals(new byte[] {(byte) (-39), (byte)17}, byteArray1);
      assertEquals(2, byteArray1.length);
      assertTrue(boolean0);
      
      short[] shortArray0 = new short[0];
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short) (byte) (-29));
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray0.length);
      assertEquals((-1), int0);
      
      ArrayUtils.swap((Object[]) byteArray0, 2199, (int) (byte) (-39), 0);
      assertEquals(2, byteArray0.length);
      
      ArrayUtils.reverse(shortArray0, (int) (byte) (-29), 3032);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray0.length);
      
      ArrayUtils.swap((Object[]) byteArray0, (-2596), (-1), 65536);
      assertEquals(2, byteArray0.length);
      
      ArrayUtils.shuffle(byteArray1);
      assertArrayEquals(new byte[] {(byte)17, (byte) (-39)}, byteArray1);
      assertEquals(2, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test0510()  throws Throwable  {
      BitSet bitSet0 = new BitSet();
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertNotNull(bitSet0);
      
      byte[] byteArray0 = new byte[0];
      ArrayUtils.swap(byteArray0, 11, 11, 11);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short)0;
      shortArray0[2] = (short) (-430);
      shortArray0[3] = (short) (-70);
      shortArray0[4] = (short) (-3);
      char[] charArray0 = new char[4];
      charArray0[0] = 'R';
      charArray0[1] = 'R';
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) (short) (-3);
      objectArray0[1] = (Object) bitSet0;
      objectArray0[2] = (Object) (short) (-3);
      objectArray0[3] = (Object) (short) (-70);
      objectArray0[4] = (Object) '0';
      objectArray0[4] = (Object) 'R';
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (short) (-430);
      doubleArray0[1] = (double) (short) (-3);
      doubleArray0[2] = (double) (short) (-430);
      BitSet bitSet1 = ArrayUtils.indexesOf(doubleArray0, 0.0, 1490, (double) 1490);
      assertEquals(64, bitSet1.size());
      assertEquals("{}", bitSet1.toString());
      assertTrue(bitSet1.isEmpty());
      assertEquals(0, bitSet1.length());
      assertEquals(0, bitSet1.cardinality());
      assertArrayEquals(new double[] {(-430.0), (-3.0), (-430.0)}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      assertTrue(bitSet1.equals((Object)bitSet0));
      assertNotSame(bitSet1, bitSet0);
      assertNotNull(bitSet1);
      
      bitSet0.or(bitSet1);
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(64, bitSet1.size());
      assertEquals("{}", bitSet1.toString());
      assertTrue(bitSet1.isEmpty());
      assertEquals(0, bitSet1.length());
      assertEquals(0, bitSet1.cardinality());
      assertArrayEquals(new double[] {(-430.0), (-3.0), (-430.0)}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      assertTrue(bitSet0.equals((Object)bitSet1));
      assertTrue(bitSet1.equals((Object)bitSet0));
      assertNotSame(bitSet0, bitSet1);
      assertNotSame(bitSet1, bitSet0);
      
      int int0 = ArrayUtils.indexOf(objectArray0, objectArray0[3]);
      assertEquals(6, objectArray0.length);
      assertEquals(3, int0);
      
      ArrayUtils.swap(objectArray0, (int) (short)0, (int) (short) (-3), (int) (short) (-3));
      assertEquals(6, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test0511()  throws Throwable  {
      long[] longArray0 = new long[3];
      longArray0[0] = (-2084L);
      longArray0[1] = 0L;
      longArray0[2] = 0L;
      boolean boolean0 = ArrayUtils.isSorted(longArray0);
      assertArrayEquals(new long[] {(-2084L), 0L, 0L}, longArray0);
      assertEquals(3, longArray0.length);
      assertTrue(boolean0);
      
      ArrayUtils.reverse(longArray0);
      assertArrayEquals(new long[] {0L, 0L, (-2084L)}, longArray0);
      assertEquals(3, longArray0.length);
      
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short)759;
      shortArray0[1] = (short)52;
      shortArray0[2] = (short)993;
      shortArray0[3] = (short)2358;
      int[] intArray0 = new int[8];
      intArray0[0] = (int) (short)2358;
      intArray0[1] = (int) (short)993;
      intArray0[2] = (int) (short)52;
      intArray0[3] = (int) (short)759;
      intArray0[4] = (int) (short)2358;
      intArray0[5] = 288;
      intArray0[6] = (int) (short)993;
      intArray0[7] = (int) (short)993;
      ArrayUtils.swap(intArray0, 2358, 3537);
      assertArrayEquals(new int[] {2358, 993, 52, 759, 2358, 288, 993, 993}, intArray0);
      assertEquals(8, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test0512()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      int[] intArray0 = new int[5];
      intArray0[0] = (int) (short)560;
      intArray0[1] = (int) (short)560;
      short[] shortArray0 = new short[7];
      shortArray0[1] = (short)560;
      shortArray0[2] = (short)560;
      shortArray0[4] = (short)560;
      shortArray0[5] = (short) (-2624);
      shortArray0[6] = (short) (-2624);
      ArrayUtils.shift(shortArray0, 1168);
      assertArrayEquals(new short[] {(short)560, (short)560, (short)0, (short)560, (short) (-2624), (short) (-2624), (short)0}, shortArray0);
      assertEquals(7, shortArray0.length);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (short)0;
      doubleArray0[1] = (double) (short)0;
      doubleArray0[2] = (double) 1168;
      doubleArray0[3] = 1120.0;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, Double.NaN, (-1.0));
      assertArrayEquals(new double[] {0.0, 0.0, 1168.0, 1120.0}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      assertEquals((-1), int0);
      
      int[] intArray1 = ArrayUtils.addFirst(intArray0, 1168);
      assertArrayEquals(new int[] {1168, 560, 560, 0, 0, 0}, intArray1);
      assertArrayEquals(new int[] {560, 560, 0, 0, 0}, intArray0);
      assertEquals(6, intArray1.length);
      assertEquals(5, intArray0.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
      assertNotNull(intArray1);
  }

  @Test(timeout = 4000)
  public void test0513()  throws Throwable  {
      BitSet bitSet0 = new BitSet();
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertNotNull(bitSet0);
      
      byte[] byteArray0 = new byte[0];
      ArrayUtils.swap(byteArray0, 11, 11, 11);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short)1070;
      shortArray0[2] = (short) (-400);
      shortArray0[3] = (short) (-94);
      shortArray0[4] = (short)2;
      char[] charArray0 = new char[4];
      charArray0[3] = '0';
      charArray0[2] = 'R';
      charArray0[3] = '0';
      char[] charArray1 = ArrayUtils.removeElement(charArray0, 'R');
      assertArrayEquals(new char[] {'\u0000', '\u0000', 'R', '0'}, charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '0'}, charArray1);
      assertEquals(4, charArray0.length);
      assertEquals(3, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      
      Object[] objectArray0 = new Object[2];
      bitSet0.clear();
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      
      Object object0 = ArrayUtils.get(objectArray0, 1, (Object) bitSet0);
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertEquals(2, objectArray0.length);
      assertNull(object0);
      
      objectArray0[0] = null;
      objectArray0[1] = (Object) (short)2;
      BitSet bitSet1 = bitSet0.get((int) '\u0000', (int) '\u0000');
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet1.size());
      assertEquals(0, bitSet1.cardinality());
      assertTrue(bitSet1.isEmpty());
      assertEquals(0, bitSet1.length());
      assertEquals("{}", bitSet1.toString());
      assertTrue(bitSet1.equals((Object)bitSet0));
      assertNotSame(bitSet0, bitSet1);
      assertNotSame(bitSet1, bitSet0);
      assertNotNull(bitSet1);
      
      ArrayUtils.shift(shortArray0, (-1808));
      assertArrayEquals(new short[] {(short) (-400), (short) (-94), (short)2, (short)0, (short)0, (short)0, (short)1070}, shortArray0);
      assertEquals(7, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test0514()  throws Throwable  {
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)2;
      shortArray0[1] = (short)64;
      short[] shortArray1 = ArrayUtils.removeAllOccurences(shortArray0, (short)64);
      assertArrayEquals(new short[] {(short)2, (short)64}, shortArray0);
      assertArrayEquals(new short[] {(short)2}, shortArray1);
      assertEquals(2, shortArray0.length);
      assertEquals(1, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      
      short[] shortArray2 = ArrayUtils.addFirst(shortArray0, (short)2);
      assertArrayEquals(new short[] {(short)2, (short)64}, shortArray0);
      assertArrayEquals(new short[] {(short)2, (short)2, (short)64}, shortArray2);
      assertEquals(2, shortArray0.length);
      assertEquals(3, shortArray2.length);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray2.equals((Object)shortArray1));
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray0, shortArray2);
      assertNotSame(shortArray2, shortArray1);
      assertNotSame(shortArray2, shortArray0);
      assertNotNull(shortArray2);
      
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) (short)64;
      objectArray0[1] = (Object) (short)2;
      objectArray0[3] = (Object) (short)2;
      int int0 = ArrayUtils.lastIndexOf(objectArray0, objectArray0[2]);
      assertEquals(4, objectArray0.length);
      assertEquals(2, int0);
      
      byte[] byteArray0 = new byte[0];
      int int1 = ArrayUtils.lastIndexOf(byteArray0, (byte)90);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      // Undeclared exception!
      try { 
        ArrayUtils.toMap(objectArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array element 0, '64', is neither of type Map.Entry nor an Array
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0515()  throws Throwable  {
      float[] floatArray0 = new float[3];
      floatArray0[0] = (-1385.0087F);
      float[] floatArray1 = ArrayUtils.nullToEmpty(floatArray0);
      assertArrayEquals(new float[] {(-1385.0087F), 0.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-1385.0087F), 0.0F, 0.0F}, floatArray1, 0.01F);
      assertEquals(3, floatArray0.length);
      assertEquals(3, floatArray1.length);
      assertSame(floatArray0, floatArray1);
      assertSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      
      int[] intArray0 = new int[9];
      intArray0[0] = 288;
      floatArray0[1] = (float) 288;
      intArray0[2] = 288;
      intArray0[4] = 288;
      intArray0[5] = 288;
      intArray0[6] = 288;
      intArray0[7] = 288;
      intArray0[8] = 288;
      int[] intArray1 = ArrayUtils.removeAllOccurrences(intArray0, 2147088925);
      assertArrayEquals(new int[] {288, 0, 288, 0, 288, 288, 288, 288, 288}, intArray0);
      assertArrayEquals(new int[] {288, 0, 288, 0, 288, 288, 288, 288, 288}, intArray1);
      assertEquals(9, intArray0.length);
      assertEquals(9, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      
      Boolean boolean0 = Boolean.FALSE;
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      Boolean[] booleanArray0 = new Boolean[0];
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0, true);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertNotNull(booleanArray1);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 288.0F;
      ArrayUtils.shift(doubleArray0, 288);
      assertArrayEquals(new double[] {288.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test0516()  throws Throwable  {
      float[] floatArray0 = new float[3];
      floatArray0[0] = (-1397.05F);
      floatArray0[1] = (-1397.05F);
      float[] floatArray1 = ArrayUtils.nullToEmpty(floatArray0);
      assertArrayEquals(new float[] {(-1397.05F), (-1397.05F), 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-1397.05F), (-1397.05F), 0.0F}, floatArray1, 0.01F);
      assertEquals(3, floatArray0.length);
      assertEquals(3, floatArray1.length);
      assertSame(floatArray0, floatArray1);
      assertSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      
      int[] intArray0 = new int[9];
      intArray0[0] = 288;
      intArray0[1] = 288;
      intArray0[2] = 288;
      intArray0[3] = 288;
      intArray0[4] = 288;
      intArray0[5] = 288;
      intArray0[6] = 288;
      intArray0[7] = 288;
      intArray0[8] = 288;
      int[] intArray1 = ArrayUtils.removeAllOccurrences(intArray0, 2147088925);
      assertArrayEquals(new int[] {288, 288, 288, 288, 288, 288, 288, 288, 288}, intArray0);
      assertArrayEquals(new int[] {288, 288, 288, 288, 288, 288, 288, 288, 288}, intArray1);
      assertEquals(9, intArray0.length);
      assertEquals(9, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      
      Boolean boolean0 = Boolean.FALSE;
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      Boolean[] booleanArray0 = new Boolean[0];
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0, true);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertNotNull(booleanArray1);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (-1397.05F);
      ArrayUtils.shift(doubleArray0, 288);
      assertArrayEquals(new double[] {(-1397.050048828125)}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test0517()  throws Throwable  {
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short)1964;
      shortArray0[2] = (short)2151;
      shortArray0[3] = (short)1;
      shortArray0[4] = (short)1382;
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) (short)1;
      doubleArray0[1] = (double) (short)1;
      doubleArray0[2] = (double) (short)1;
      doubleArray0[3] = (double) (short)1382;
      doubleArray0[4] = 0.7;
      ArrayUtils.shift(doubleArray0, (-18), (-2584), (int) (short)1964);
      assertArrayEquals(new double[] {1.0, 1.0, 1.0, 1382.0, 0.7, 0.0}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test0518()  throws Throwable  {
      long[] longArray0 = new long[6];
      longArray0[0] = 113L;
      longArray0[1] = 1L;
      longArray0[2] = 0L;
      longArray0[3] = (-3525L);
      longArray0[4] = (-406L);
      longArray0[5] = (-3525L);
      Long[] longArray1 = ArrayUtils.toObject(longArray0);
      assertArrayEquals(new long[] {113L, 1L, 0L, (-3525L), (-406L), (-3525L)}, longArray0);
      assertEquals(6, longArray0.length);
      assertEquals(6, longArray1.length);
      assertNotNull(longArray1);
      
      // Undeclared exception!
      try { 
        ArrayUtils.shuffle((float[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0519()  throws Throwable  {
      long[] longArray0 = new long[6];
      longArray0[0] = 113L;
      longArray0[1] = 1L;
      longArray0[2] = 0L;
      longArray0[3] = (-3525L);
      longArray0[4] = (-406L);
      longArray0[5] = 0L;
      Long[] longArray1 = ArrayUtils.toObject(longArray0);
      assertArrayEquals(new long[] {113L, 1L, 0L, (-3525L), (-406L), 0L}, longArray0);
      assertEquals(6, longArray0.length);
      assertEquals(6, longArray1.length);
      assertNotNull(longArray1);
      
      // Undeclared exception!
      try { 
        ArrayUtils.shuffle((float[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0520()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 687.016;
      double[] doubleArray1 = ArrayUtils.removeAllOccurrences(doubleArray0, 687.016);
      assertArrayEquals(new double[] {687.016}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      
      long[] longArray0 = new long[10];
      longArray0[0] = 0L;
      longArray0[1] = 0L;
      longArray0[2] = (-1909L);
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      ArrayUtils.shift(booleanArray0, 1, 2147088925, 0);
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray0));
      assertEquals(2, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test0521()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 4026.966708;
      doubleArray0[2] = (-2101.5);
      doubleArray0[2] = 2063.283;
      int[] intArray0 = new int[6];
      intArray0[0] = 9;
      intArray0[1] = 9;
      intArray0[2] = 9;
      intArray0[3] = 9;
      intArray0[4] = 9;
      intArray0[5] = (-660);
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      double double0 = mockRandom0.nextDouble();
      assertEquals(0.0, double0, 0.01);
      
      ArrayUtils.shuffle(intArray0, (Random) mockRandom0);
      assertArrayEquals(new int[] {9, 9, 9, 9, (-660), 9}, intArray0);
      assertEquals(6, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test0522()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      Long long0 = new Long((-1L));
      assertNotNull(long0);
      assertEquals((-1L), (long)long0);
      
      Long long1 = new Long(623L);
      assertFalse(long1.equals((Object)long0));
      assertNotNull(long1);
      assertEquals(623L, (long)long1);
      
      Long long2 = new Long(1L);
      assertFalse(long2.equals((Object)long1));
      assertFalse(long2.equals((Object)long0));
      assertNotNull(long2);
      assertEquals(1L, (long)long2);
      
      Long long3 = new Long((-761L));
      assertFalse(long3.equals((Object)long1));
      assertFalse(long3.equals((Object)long2));
      assertFalse(long3.equals((Object)long0));
      assertNotNull(long3);
      assertEquals((-761L), (long)long3);
      
      Long long4 = new Long((-1205L));
      assertFalse(long4.equals((Object)long2));
      assertFalse(long4.equals((Object)long0));
      assertFalse(long4.equals((Object)long1));
      assertFalse(long4.equals((Object)long3));
      assertNotNull(long4);
      assertEquals((-1205L), (long)long4);
      
      Long long5 = new Long((-761L));
      assertFalse(long5.equals((Object)long4));
      assertFalse(long5.equals((Object)long2));
      assertTrue(long5.equals((Object)long3));
      assertFalse(long5.equals((Object)long1));
      assertFalse(long5.equals((Object)long0));
      assertNotNull(long5);
      assertEquals((-761L), (long)long5);
      
      Long[] longArray0 = new Long[6];
      Long long6 = new Long((-785));
      assertFalse(long6.equals((Object)long4));
      assertFalse(long6.equals((Object)long5));
      assertFalse(long6.equals((Object)long3));
      assertFalse(long6.equals((Object)long0));
      assertFalse(long6.equals((Object)long2));
      assertFalse(long6.equals((Object)long1));
      assertNotNull(long6);
      assertEquals((-785L), (long)long6);
      
      Long long7 = Long.getLong("oOad2(Mwz+", long6);
      assertFalse(long6.equals((Object)long4));
      assertFalse(long6.equals((Object)long5));
      assertFalse(long6.equals((Object)long3));
      assertFalse(long6.equals((Object)long0));
      assertFalse(long6.equals((Object)long2));
      assertFalse(long6.equals((Object)long1));
      assertFalse(long7.equals((Object)long2));
      assertFalse(long7.equals((Object)long3));
      assertFalse(long7.equals((Object)long0));
      assertFalse(long7.equals((Object)long4));
      assertFalse(long7.equals((Object)long5));
      assertFalse(long7.equals((Object)long1));
      assertNotNull(long7);
      assertEquals((-785L), (long)long7);
      
      longArray0[0] = long7;
      longArray0[1] = long2;
      longArray0[2] = long2;
      longArray0[3] = long4;
      longArray0[4] = long1;
      longArray0[5] = long5;
      Long[] longArray1 = ArrayUtils.subarray(longArray0, (-785), 5);
      assertEquals(5, longArray1.length);
      assertEquals(6, longArray0.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray0, longArray1);
      assertNotNull(longArray1);
      
      int[] intArray0 = new int[7];
      intArray0[0] = 88;
      intArray0[1] = 5;
      intArray0[2] = (-785);
      intArray0[3] = (-785);
      intArray0[4] = 88;
      intArray0[5] = 88;
      intArray0[6] = 88;
      int[] intArray1 = ArrayUtils.removeElement(intArray0, 777);
      assertArrayEquals(new int[] {88, 5, (-785), (-785), 88, 88, 88}, intArray0);
      assertArrayEquals(new int[] {88, 5, (-785), (-785), 88, 88, 88}, intArray1);
      assertEquals(7, intArray0.length);
      assertEquals(7, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      
      AbstractMap.SimpleImmutableEntry<Double, Double>[] abstractMap_SimpleImmutableEntryArray0 = (AbstractMap.SimpleImmutableEntry<Double, Double>[]) Array.newInstance(AbstractMap.SimpleImmutableEntry.class, 9);
      Double double0 = new Double((-2725.1987075));
      assertNotNull(double0);
      assertEquals((-2725.1987075), (double)double0, 0.01);
      
      Double double1 = new Double((-126.39));
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      assertEquals((-126.39), (double)double1, 0.01);
      
      AbstractMap.SimpleEntry<Double, Double> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Double, Double>(double0, double1);
      assertNotEquals((double)double0, (double)double1, 0.01);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertNotNull(abstractMap_SimpleEntry0);
      
      AbstractMap.SimpleEntry<Double, Double> abstractMap_SimpleEntry1 = new AbstractMap.SimpleEntry<Double, Double>(abstractMap_SimpleEntry0);
      assertNotEquals((double)double0, (double)double1, 0.01);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertNotNull(abstractMap_SimpleEntry1);
      
      AbstractMap.SimpleImmutableEntry<Double, Double> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Double, Double>(abstractMap_SimpleEntry1);
      assertNotEquals((double)double0, (double)double1, 0.01);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertNotNull(abstractMap_SimpleImmutableEntry0);
      
      abstractMap_SimpleImmutableEntryArray0[0] = abstractMap_SimpleImmutableEntry0;
      Double double2 = new Double((-1437.84830558));
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertNotNull(double2);
      assertEquals((-1437.84830558), (double)double2, 0.01);
      
      AbstractMap.SimpleImmutableEntry<Double, Double> abstractMap_SimpleImmutableEntry1 = new AbstractMap.SimpleImmutableEntry<Double, Double>(double2, double2);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertFalse(abstractMap_SimpleImmutableEntry1.equals((Object)abstractMap_SimpleImmutableEntry0));
      assertNotNull(abstractMap_SimpleImmutableEntry1);
      
      abstractMap_SimpleImmutableEntryArray0[1] = abstractMap_SimpleImmutableEntry1;
      AbstractMap.SimpleImmutableEntry<Double, Double> abstractMap_SimpleImmutableEntry2 = new AbstractMap.SimpleImmutableEntry<Double, Double>(abstractMap_SimpleImmutableEntry1);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertFalse(abstractMap_SimpleImmutableEntry1.equals((Object)abstractMap_SimpleImmutableEntry0));
      assertTrue(abstractMap_SimpleImmutableEntry2.equals((Object)abstractMap_SimpleImmutableEntry1));
      assertFalse(abstractMap_SimpleImmutableEntry2.equals((Object)abstractMap_SimpleImmutableEntry0));
      assertNotNull(abstractMap_SimpleImmutableEntry2);
      
      abstractMap_SimpleImmutableEntryArray0[2] = abstractMap_SimpleImmutableEntry2;
      AbstractMap.SimpleImmutableEntry<Double, Double> abstractMap_SimpleImmutableEntry3 = new AbstractMap.SimpleImmutableEntry<Double, Double>(abstractMap_SimpleImmutableEntry2);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertFalse(abstractMap_SimpleImmutableEntry1.equals((Object)abstractMap_SimpleImmutableEntry0));
      assertTrue(abstractMap_SimpleImmutableEntry1.equals((Object)abstractMap_SimpleImmutableEntry2));
      assertTrue(abstractMap_SimpleImmutableEntry2.equals((Object)abstractMap_SimpleImmutableEntry1));
      assertFalse(abstractMap_SimpleImmutableEntry2.equals((Object)abstractMap_SimpleImmutableEntry0));
      assertTrue(abstractMap_SimpleImmutableEntry3.equals((Object)abstractMap_SimpleImmutableEntry1));
      assertTrue(abstractMap_SimpleImmutableEntry3.equals((Object)abstractMap_SimpleImmutableEntry2));
      assertFalse(abstractMap_SimpleImmutableEntry3.equals((Object)abstractMap_SimpleImmutableEntry0));
      assertNotNull(abstractMap_SimpleImmutableEntry3);
      
      abstractMap_SimpleImmutableEntryArray0[3] = abstractMap_SimpleImmutableEntry3;
      AbstractMap.SimpleImmutableEntry<Double, Double> abstractMap_SimpleImmutableEntry4 = new AbstractMap.SimpleImmutableEntry<Double, Double>(double1, double2);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertFalse(abstractMap_SimpleImmutableEntry4.equals((Object)abstractMap_SimpleImmutableEntry1));
      assertFalse(abstractMap_SimpleImmutableEntry4.equals((Object)abstractMap_SimpleImmutableEntry3));
      assertFalse(abstractMap_SimpleImmutableEntry4.equals((Object)abstractMap_SimpleImmutableEntry0));
      assertFalse(abstractMap_SimpleImmutableEntry4.equals((Object)abstractMap_SimpleImmutableEntry2));
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertNotEquals((double)double1, (double)double2, 0.01);
      assertNotNull(abstractMap_SimpleImmutableEntry4);
      
      abstractMap_SimpleImmutableEntryArray0[4] = abstractMap_SimpleImmutableEntry4;
      Double double3 = new Double((-1.0));
      assertNotEquals((double)double3, (double)double1, 0.01);
      assertNotEquals((double)double3, (double)double0, 0.01);
      assertNotEquals((double)double3, (double)double2, 0.01);
      assertNotNull(double3);
      assertEquals((-1.0), (double)double3, 0.01);
      
      AbstractMap.SimpleImmutableEntry<Double, Double> abstractMap_SimpleImmutableEntry5 = new AbstractMap.SimpleImmutableEntry<Double, Double>(double3, double0);
      assertNotEquals((double)double3, (double)double1, 0.01);
      assertNotEquals((double)double3, (double)double0, 0.01);
      assertNotEquals((double)double3, (double)double2, 0.01);
      assertFalse(abstractMap_SimpleImmutableEntry5.equals((Object)abstractMap_SimpleImmutableEntry0));
      assertFalse(abstractMap_SimpleImmutableEntry5.equals((Object)abstractMap_SimpleImmutableEntry1));
      assertFalse(abstractMap_SimpleImmutableEntry5.equals((Object)abstractMap_SimpleImmutableEntry2));
      assertFalse(abstractMap_SimpleImmutableEntry5.equals((Object)abstractMap_SimpleImmutableEntry3));
      assertFalse(abstractMap_SimpleImmutableEntry5.equals((Object)abstractMap_SimpleImmutableEntry4));
      assertNotEquals((double)double0, (double)double1, 0.01);
      assertNotEquals((double)double0, (double)double2, 0.01);
      assertNotEquals((double)double0, (double)double3, 0.01);
      assertNotNull(abstractMap_SimpleImmutableEntry5);
      
      abstractMap_SimpleImmutableEntryArray0[5] = abstractMap_SimpleImmutableEntry5;
      Double double4 = new Double(1.5);
      assertNotEquals((double)double4, (double)double2, 0.01);
      assertNotEquals((double)double4, (double)double3, 0.01);
      assertNotEquals((double)double4, (double)double0, 0.01);
      assertNotEquals((double)double4, (double)double1, 0.01);
      assertNotNull(double4);
      assertEquals(1.5, (double)double4, 0.01);
      
      AbstractMap.SimpleImmutableEntry<Double, Double> abstractMap_SimpleImmutableEntry6 = new AbstractMap.SimpleImmutableEntry<Double, Double>(double4, double0);
      assertNotEquals((double)double0, (double)double1, 0.01);
      assertNotEquals((double)double0, (double)double2, 0.01);
      assertNotEquals((double)double0, (double)double3, 0.01);
      assertNotEquals((double)double0, (double)double4, 0.01);
      assertNotEquals((double)double4, (double)double2, 0.01);
      assertNotEquals((double)double4, (double)double3, 0.01);
      assertNotEquals((double)double4, (double)double0, 0.01);
      assertNotEquals((double)double4, (double)double1, 0.01);
      assertFalse(abstractMap_SimpleImmutableEntry6.equals((Object)abstractMap_SimpleImmutableEntry3));
      assertFalse(abstractMap_SimpleImmutableEntry6.equals((Object)abstractMap_SimpleImmutableEntry2));
      assertFalse(abstractMap_SimpleImmutableEntry6.equals((Object)abstractMap_SimpleImmutableEntry0));
      assertFalse(abstractMap_SimpleImmutableEntry6.equals((Object)abstractMap_SimpleImmutableEntry5));
      assertFalse(abstractMap_SimpleImmutableEntry6.equals((Object)abstractMap_SimpleImmutableEntry4));
      assertFalse(abstractMap_SimpleImmutableEntry6.equals((Object)abstractMap_SimpleImmutableEntry1));
      assertNotNull(abstractMap_SimpleImmutableEntry6);
      
      abstractMap_SimpleImmutableEntryArray0[6] = abstractMap_SimpleImmutableEntry6;
      Double double5 = new Double((-1597.5311787973));
      assertNotEquals((double)double5, (double)double3, 0.01);
      assertNotEquals((double)double5, (double)double0, 0.01);
      assertNotEquals((double)double5, (double)double2, 0.01);
      assertNotEquals((double)double5, (double)double4, 0.01);
      assertNotEquals((double)double5, (double)double1, 0.01);
      assertNotNull(double5);
      assertEquals((-1597.5311787973), (double)double5, 0.01);
      
      AbstractMap.SimpleEntry<Double, Double> abstractMap_SimpleEntry2 = new AbstractMap.SimpleEntry<Double, Double>(double5, double4);
      assertNotEquals((double)double5, (double)double3, 0.01);
      assertNotEquals((double)double5, (double)double0, 0.01);
      assertNotEquals((double)double5, (double)double2, 0.01);
      assertNotEquals((double)double5, (double)double4, 0.01);
      assertNotEquals((double)double5, (double)double1, 0.01);
      assertNotEquals((double)double4, (double)double2, 0.01);
      assertNotEquals((double)double4, (double)double3, 0.01);
      assertNotEquals((double)double4, (double)double0, 0.01);
      assertNotEquals((double)double4, (double)double5, 0.01);
      assertNotEquals((double)double4, (double)double1, 0.01);
      assertNotNull(abstractMap_SimpleEntry2);
      
      AbstractMap.SimpleImmutableEntry<Double, Double> abstractMap_SimpleImmutableEntry7 = new AbstractMap.SimpleImmutableEntry<Double, Double>(abstractMap_SimpleEntry2);
      assertNotEquals((double)double5, (double)double3, 0.01);
      assertNotEquals((double)double5, (double)double0, 0.01);
      assertNotEquals((double)double5, (double)double2, 0.01);
      assertNotEquals((double)double5, (double)double4, 0.01);
      assertNotEquals((double)double5, (double)double1, 0.01);
      assertFalse(abstractMap_SimpleImmutableEntry7.equals((Object)abstractMap_SimpleImmutableEntry2));
      assertFalse(abstractMap_SimpleImmutableEntry7.equals((Object)abstractMap_SimpleImmutableEntry6));
      assertFalse(abstractMap_SimpleImmutableEntry7.equals((Object)abstractMap_SimpleImmutableEntry3));
      assertFalse(abstractMap_SimpleImmutableEntry7.equals((Object)abstractMap_SimpleImmutableEntry5));
      assertFalse(abstractMap_SimpleImmutableEntry7.equals((Object)abstractMap_SimpleImmutableEntry0));
      assertFalse(abstractMap_SimpleImmutableEntry7.equals((Object)abstractMap_SimpleImmutableEntry4));
      assertFalse(abstractMap_SimpleImmutableEntry7.equals((Object)abstractMap_SimpleImmutableEntry1));
      assertNotEquals((double)double4, (double)double2, 0.01);
      assertNotEquals((double)double4, (double)double3, 0.01);
      assertNotEquals((double)double4, (double)double0, 0.01);
      assertNotEquals((double)double4, (double)double5, 0.01);
      assertNotEquals((double)double4, (double)double1, 0.01);
      assertNotNull(abstractMap_SimpleImmutableEntry7);
      
      abstractMap_SimpleImmutableEntryArray0[7] = abstractMap_SimpleImmutableEntry7;
      Double double6 = new Double((-761L));
      assertNotEquals((double)double6, (double)double5, 0.01);
      assertNotEquals((double)double6, (double)double0, 0.01);
      assertNotEquals((double)double6, (double)double1, 0.01);
      assertNotEquals((double)double6, (double)double3, 0.01);
      assertNotEquals((double)double6, (double)double2, 0.01);
      assertNotEquals((double)double6, (double)double4, 0.01);
      assertNotNull(double6);
      assertEquals((-761.0), (double)double6, 0.01);
      
      AbstractMap.SimpleImmutableEntry<Double, Double> abstractMap_SimpleImmutableEntry8 = new AbstractMap.SimpleImmutableEntry<Double, Double>(double3, double6);
      assertNotEquals((double)double6, (double)double5, 0.01);
      assertNotEquals((double)double6, (double)double0, 0.01);
      assertNotEquals((double)double6, (double)double1, 0.01);
      assertNotEquals((double)double6, (double)double3, 0.01);
      assertNotEquals((double)double6, (double)double2, 0.01);
      assertNotEquals((double)double6, (double)double4, 0.01);
      assertFalse(abstractMap_SimpleImmutableEntry8.equals((Object)abstractMap_SimpleImmutableEntry7));
      assertFalse(abstractMap_SimpleImmutableEntry8.equals((Object)abstractMap_SimpleImmutableEntry2));
      assertFalse(abstractMap_SimpleImmutableEntry8.equals((Object)abstractMap_SimpleImmutableEntry4));
      assertFalse(abstractMap_SimpleImmutableEntry8.equals((Object)abstractMap_SimpleImmutableEntry6));
      assertFalse(abstractMap_SimpleImmutableEntry8.equals((Object)abstractMap_SimpleImmutableEntry3));
      assertFalse(abstractMap_SimpleImmutableEntry8.equals((Object)abstractMap_SimpleImmutableEntry0));
      assertFalse(abstractMap_SimpleImmutableEntry8.equals((Object)abstractMap_SimpleImmutableEntry5));
      assertFalse(abstractMap_SimpleImmutableEntry8.equals((Object)abstractMap_SimpleImmutableEntry1));
      assertNotEquals((double)double3, (double)double1, 0.01);
      assertNotEquals((double)double3, (double)double6, 0.01);
      assertNotEquals((double)double3, (double)double0, 0.01);
      assertNotEquals((double)double3, (double)double4, 0.01);
      assertNotEquals((double)double3, (double)double5, 0.01);
      assertNotEquals((double)double3, (double)double2, 0.01);
      assertNotNull(abstractMap_SimpleImmutableEntry8);
      
      abstractMap_SimpleImmutableEntryArray0[8] = abstractMap_SimpleImmutableEntry8;
      Comparator<AbstractMap.SimpleImmutableEntry<Double, Double>> comparator0 = (Comparator<AbstractMap.SimpleImmutableEntry<Double, Double>>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((-1), 5).when(comparator0).compare(any(java.util.AbstractMap.SimpleImmutableEntry.class) , any(java.util.AbstractMap.SimpleImmutableEntry.class));
      boolean boolean0 = ArrayUtils.isSorted(abstractMap_SimpleImmutableEntryArray0, comparator0);
      assertEquals(9, abstractMap_SimpleImmutableEntryArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0523()  throws Throwable  {
      Object[] objectArray0 = new Object[5];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      Object object1 = ArrayUtils.get(objectArray0, (int) 560, (Object) "");
      assertEquals(5, objectArray0.length);
      assertNotNull(object1);
      assertEquals("", object1);
      
      Object object2 = new Object();
      assertFalse(object2.equals((Object)object0));
      assertNotNull(object2);
      
      objectArray0[2] = object2;
      int[] intArray0 = new int[7];
      intArray0[0] = (int) (short)560;
      intArray0[1] = (int) (short)560;
      intArray0[2] = (int) (short)560;
      intArray0[3] = (int) (short)560;
      intArray0[4] = (int) (short)560;
      intArray0[5] = (int) (short)560;
      intArray0[6] = (int) (short)560;
      objectArray0[3] = object0;
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 560;
      doubleArray0[1] = (double) 560;
      doubleArray0[2] = (double) 560;
      doubleArray0[3] = (double) 560;
      doubleArray0[4] = (double) 560;
      doubleArray0[5] = (double) 560;
      doubleArray0[6] = (double) 1964;
      doubleArray0[7] = (double) 560;
      doubleArray0[8] = (double) 560;
      int int0 = ArrayUtils.indexOf(doubleArray0, (double) 560, (double) 560);
      assertArrayEquals(new double[] {560.0, 560.0, 560.0, 560.0, 560.0, 560.0, 1964.0, 560.0, 560.0}, doubleArray0, 0.01);
      assertEquals(9, doubleArray0.length);
      assertEquals(0, int0);
      
      Integer integer0 = new Integer(1964);
      assertFalse(integer0.equals((Object)int0));
      assertNotNull(integer0);
      assertEquals(1964, (int)integer0);
      
      Object object3 = ArrayUtils.get(objectArray0, 560, (Object) integer0);
      assertEquals(5, objectArray0.length);
      assertFalse(integer0.equals((Object)int0));
      assertFalse(object3.equals((Object)int0));
      assertNotNull(object3);
      assertEquals(1964, object3);
      
      objectArray0[4] = object3;
      Object object4 = new Object();
      assertFalse(object4.equals((Object)object0));
      assertFalse(object4.equals((Object)object2));
      assertNotNull(object4);
      
      int int1 = ArrayUtils.lastIndexOf(objectArray0, object4, 560);
      assertEquals(5, objectArray0.length);
      assertFalse(object4.equals((Object)object0));
      assertFalse(object4.equals((Object)object2));
      assertFalse(int1 == int0);
      assertNotSame(object4, object0);
      assertNotSame(object4, object2);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test0524()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 571.942196047302;
      char[] charArray0 = new char[1];
      charArray0[0] = 'P';
      ArrayUtils.shift(charArray0, (-569));
      assertArrayEquals(new char[] {'P'}, charArray0);
      assertEquals(1, charArray0.length);
      
      Long long0 = new Long((-916L));
      assertNotNull(long0);
      assertEquals((-916L), (long)long0);
      
      Byte byte0 = new Byte((byte) (-1));
      assertNotNull(byte0);
      assertEquals((byte) (-1), (byte)byte0);
      
      try { 
        Byte.valueOf((String) null);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // null
         //
         verifyException("java.lang.Integer", e);
      }
  }

  @Test(timeout = 4000)
  public void test0525()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 0.0;
      char[] charArray0 = new char[1];
      charArray0[0] = '\'';
      ArrayUtils.shift(charArray0, Integer.MAX_VALUE);
      assertArrayEquals(new char[] {'\''}, charArray0);
      assertEquals(1, charArray0.length);
      
      Long long0 = new Long(Integer.MAX_VALUE);
      assertNotNull(long0);
      assertEquals(2147483647L, (long)long0);
  }

  @Test(timeout = 4000)
  public void test0526()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      Character character0 = new Character('Y');
      assertNotNull(character0);
      assertEquals('Y', (char)character0);
      
      Object object1 = ArrayUtils.get(objectArray0, 48, (Object) character0);
      assertEquals(2, objectArray0.length);
      assertNotNull(object1);
      assertEquals('Y', object1);
      
      objectArray0[1] = object1;
      Double double0 = new Double(48);
      assertNotNull(double0);
      assertEquals(48.0, (double)double0, 0.01);
      
      int int0 = ArrayUtils.indexOf(objectArray0, (Object) double0, 48);
      assertEquals(2, objectArray0.length);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0527()  throws Throwable  {
      Character character0 = Character.valueOf('~');
      assertNotNull(character0);
      assertEquals('~', (char)character0);
      
      Character character1 = new Character('5');
      assertFalse(character1.equals((Object)character0));
      assertNotNull(character1);
      assertEquals('5', (char)character1);
      
      Character[] characterArray0 = new Character[0];
      boolean boolean0 = ArrayUtils.isNotEmpty(characterArray0);
      assertEquals(0, characterArray0.length);
      assertFalse(boolean0);
      
      int int0 = ArrayUtils.lastIndexOf((float[]) null, 4366.093F);
      assertEquals((-1), int0);
      
      int[] intArray0 = new int[2];
      intArray0[0] = 2145767989;
      intArray0[1] = (int) '~';
      boolean boolean1 = ArrayUtils.isEmpty(intArray0);
      assertArrayEquals(new int[] {2145767989, 126}, intArray0);
      assertEquals(2, intArray0.length);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      float[] floatArray0 = ArrayUtils.insert(2145767989, (float[]) null, (float[]) null);
      assertNull(floatArray0);
  }

  @Test(timeout = 4000)
  public void test0528()  throws Throwable  {
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short)1964;
      shortArray0[2] = (short)2151;
      shortArray0[3] = (short)1;
      shortArray0[4] = (short)1382;
      shortArray0[5] = (short)0;
      shortArray0[6] = (short) (-1642);
      char[] charArray0 = new char[4];
      charArray0[0] = '9';
      ArrayUtils.shift(charArray0, 111);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '9'}, charArray0);
      assertEquals(4, charArray0.length);
      
      Long long0 = new Long(2226L);
      assertNotNull(long0);
      assertEquals(2226L, (long)long0);
      
      Byte byte0 = new Byte((byte) (-61));
      assertNotNull(byte0);
      assertEquals((byte) (-61), (byte)byte0);
      
      try { 
        Byte.valueOf("");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test0529()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      Long long0 = new Long((-1L));
      assertNotNull(long0);
      assertEquals((-1L), (long)long0);
      
      Long long1 = new Long(623L);
      assertFalse(long1.equals((Object)long0));
      assertNotNull(long1);
      assertEquals(623L, (long)long1);
      
      Long long2 = new Long(1L);
      assertFalse(long2.equals((Object)long1));
      assertFalse(long2.equals((Object)long0));
      assertNotNull(long2);
      assertEquals(1L, (long)long2);
      
      Long long3 = new Long((-761L));
      assertFalse(long3.equals((Object)long0));
      assertFalse(long3.equals((Object)long2));
      assertFalse(long3.equals((Object)long1));
      assertNotNull(long3);
      assertEquals((-761L), (long)long3);
      
      Long long4 = new Long((-1205L));
      assertFalse(long4.equals((Object)long3));
      assertFalse(long4.equals((Object)long2));
      assertFalse(long4.equals((Object)long1));
      assertFalse(long4.equals((Object)long0));
      assertNotNull(long4);
      assertEquals((-1205L), (long)long4);
      
      Long long5 = new Long((-761L));
      assertFalse(long5.equals((Object)long0));
      assertFalse(long5.equals((Object)long2));
      assertFalse(long5.equals((Object)long4));
      assertTrue(long5.equals((Object)long3));
      assertFalse(long5.equals((Object)long1));
      assertNotNull(long5);
      assertEquals((-761L), (long)long5);
      
      Long[] longArray0 = new Long[6];
      Long long6 = new Long((-785));
      assertFalse(long6.equals((Object)long5));
      assertFalse(long6.equals((Object)long1));
      assertFalse(long6.equals((Object)long3));
      assertFalse(long6.equals((Object)long0));
      assertFalse(long6.equals((Object)long2));
      assertFalse(long6.equals((Object)long4));
      assertNotNull(long6);
      assertEquals((-785L), (long)long6);
      
      Long long7 = Long.getLong("oOad2(Mwz+", long6);
      assertFalse(long6.equals((Object)long5));
      assertFalse(long6.equals((Object)long1));
      assertFalse(long6.equals((Object)long3));
      assertFalse(long6.equals((Object)long0));
      assertFalse(long6.equals((Object)long2));
      assertFalse(long6.equals((Object)long4));
      assertFalse(long7.equals((Object)long3));
      assertFalse(long7.equals((Object)long0));
      assertFalse(long7.equals((Object)long1));
      assertFalse(long7.equals((Object)long5));
      assertFalse(long7.equals((Object)long2));
      assertFalse(long7.equals((Object)long4));
      assertNotNull(long7);
      assertEquals((-785L), (long)long7);
      
      longArray0[0] = long7;
      longArray0[1] = long2;
      longArray0[2] = long2;
      longArray0[3] = long4;
      longArray0[4] = long1;
      longArray0[5] = long5;
      Long[] longArray1 = ArrayUtils.subarray(longArray0, (-785), 5);
      assertEquals(5, longArray1.length);
      assertEquals(6, longArray0.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray0, longArray1);
      assertNotNull(longArray1);
      
      int[] intArray0 = new int[7];
      intArray0[0] = 88;
      intArray0[1] = 5;
      intArray0[2] = (-785);
      intArray0[3] = (-785);
      intArray0[4] = 88;
      intArray0[5] = 88;
      intArray0[6] = 88;
      int[] intArray1 = ArrayUtils.removeElement(intArray0, 777);
      assertArrayEquals(new int[] {88, 5, (-785), (-785), 88, 88, 88}, intArray0);
      assertArrayEquals(new int[] {88, 5, (-785), (-785), 88, 88, 88}, intArray1);
      assertEquals(7, intArray0.length);
      assertEquals(7, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      
      AbstractMap.SimpleImmutableEntry<Double, Double>[] abstractMap_SimpleImmutableEntryArray0 = (AbstractMap.SimpleImmutableEntry<Double, Double>[]) Array.newInstance(AbstractMap.SimpleImmutableEntry.class, 9);
      Double double0 = new Double((-2725.1987075));
      assertNotNull(double0);
      assertEquals((-2725.1987075), (double)double0, 0.01);
      
      Double double1 = new Double((-126.39));
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      assertEquals((-126.39), (double)double1, 0.01);
      
      AbstractMap.SimpleEntry<Double, Double> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Double, Double>(double0, double1);
      assertNotEquals((double)double0, (double)double1, 0.01);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertNotNull(abstractMap_SimpleEntry0);
      
      AbstractMap.SimpleEntry<Double, Double> abstractMap_SimpleEntry1 = new AbstractMap.SimpleEntry<Double, Double>(abstractMap_SimpleEntry0);
      assertNotEquals((double)double0, (double)double1, 0.01);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertNotNull(abstractMap_SimpleEntry1);
      
      AbstractMap.SimpleImmutableEntry<Double, Double> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Double, Double>(abstractMap_SimpleEntry1);
      assertNotEquals((double)double0, (double)double1, 0.01);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertNotNull(abstractMap_SimpleImmutableEntry0);
      
      abstractMap_SimpleImmutableEntryArray0[0] = abstractMap_SimpleImmutableEntry0;
      Double double2 = new Double((-1437.84830558));
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertNotNull(double2);
      assertEquals((-1437.84830558), (double)double2, 0.01);
      
      AbstractMap.SimpleImmutableEntry<Double, Double> abstractMap_SimpleImmutableEntry1 = new AbstractMap.SimpleImmutableEntry<Double, Double>(double2, double2);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertFalse(abstractMap_SimpleImmutableEntry1.equals((Object)abstractMap_SimpleImmutableEntry0));
      assertNotNull(abstractMap_SimpleImmutableEntry1);
      
      abstractMap_SimpleImmutableEntryArray0[1] = abstractMap_SimpleImmutableEntry1;
      AbstractMap.SimpleImmutableEntry<Double, Double> abstractMap_SimpleImmutableEntry2 = new AbstractMap.SimpleImmutableEntry<Double, Double>(abstractMap_SimpleImmutableEntry1);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertFalse(abstractMap_SimpleImmutableEntry1.equals((Object)abstractMap_SimpleImmutableEntry0));
      assertFalse(abstractMap_SimpleImmutableEntry2.equals((Object)abstractMap_SimpleImmutableEntry0));
      assertTrue(abstractMap_SimpleImmutableEntry2.equals((Object)abstractMap_SimpleImmutableEntry1));
      assertNotNull(abstractMap_SimpleImmutableEntry2);
      
      abstractMap_SimpleImmutableEntryArray0[2] = abstractMap_SimpleImmutableEntry2;
      AbstractMap.SimpleImmutableEntry<Double, Double> abstractMap_SimpleImmutableEntry3 = new AbstractMap.SimpleImmutableEntry<Double, Double>(abstractMap_SimpleImmutableEntry2);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertTrue(abstractMap_SimpleImmutableEntry1.equals((Object)abstractMap_SimpleImmutableEntry2));
      assertFalse(abstractMap_SimpleImmutableEntry1.equals((Object)abstractMap_SimpleImmutableEntry0));
      assertFalse(abstractMap_SimpleImmutableEntry2.equals((Object)abstractMap_SimpleImmutableEntry0));
      assertTrue(abstractMap_SimpleImmutableEntry2.equals((Object)abstractMap_SimpleImmutableEntry1));
      assertTrue(abstractMap_SimpleImmutableEntry3.equals((Object)abstractMap_SimpleImmutableEntry1));
      assertTrue(abstractMap_SimpleImmutableEntry3.equals((Object)abstractMap_SimpleImmutableEntry2));
      assertFalse(abstractMap_SimpleImmutableEntry3.equals((Object)abstractMap_SimpleImmutableEntry0));
      assertNotNull(abstractMap_SimpleImmutableEntry3);
      
      abstractMap_SimpleImmutableEntryArray0[3] = abstractMap_SimpleImmutableEntry3;
      AbstractMap.SimpleImmutableEntry<Double, Double> abstractMap_SimpleImmutableEntry4 = new AbstractMap.SimpleImmutableEntry<Double, Double>(double1, double2);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertFalse(abstractMap_SimpleImmutableEntry4.equals((Object)abstractMap_SimpleImmutableEntry0));
      assertFalse(abstractMap_SimpleImmutableEntry4.equals((Object)abstractMap_SimpleImmutableEntry2));
      assertFalse(abstractMap_SimpleImmutableEntry4.equals((Object)abstractMap_SimpleImmutableEntry1));
      assertFalse(abstractMap_SimpleImmutableEntry4.equals((Object)abstractMap_SimpleImmutableEntry3));
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertNotEquals((double)double1, (double)double2, 0.01);
      assertNotNull(abstractMap_SimpleImmutableEntry4);
      
      abstractMap_SimpleImmutableEntryArray0[4] = abstractMap_SimpleImmutableEntry4;
      Double double3 = new Double((-1.0));
      assertNotEquals((double)double3, (double)double2, 0.01);
      assertNotEquals((double)double3, (double)double1, 0.01);
      assertNotEquals((double)double3, (double)double0, 0.01);
      assertNotNull(double3);
      assertEquals((-1.0), (double)double3, 0.01);
      
      AbstractMap.SimpleImmutableEntry<Double, Double> abstractMap_SimpleImmutableEntry5 = new AbstractMap.SimpleImmutableEntry<Double, Double>(double3, double0);
      assertNotEquals((double)double3, (double)double2, 0.01);
      assertNotEquals((double)double3, (double)double1, 0.01);
      assertNotEquals((double)double3, (double)double0, 0.01);
      assertFalse(abstractMap_SimpleImmutableEntry5.equals((Object)abstractMap_SimpleImmutableEntry0));
      assertFalse(abstractMap_SimpleImmutableEntry5.equals((Object)abstractMap_SimpleImmutableEntry4));
      assertFalse(abstractMap_SimpleImmutableEntry5.equals((Object)abstractMap_SimpleImmutableEntry1));
      assertFalse(abstractMap_SimpleImmutableEntry5.equals((Object)abstractMap_SimpleImmutableEntry2));
      assertFalse(abstractMap_SimpleImmutableEntry5.equals((Object)abstractMap_SimpleImmutableEntry3));
      assertNotEquals((double)double0, (double)double2, 0.01);
      assertNotEquals((double)double0, (double)double3, 0.01);
      assertNotEquals((double)double0, (double)double1, 0.01);
      assertNotNull(abstractMap_SimpleImmutableEntry5);
      
      abstractMap_SimpleImmutableEntryArray0[5] = abstractMap_SimpleImmutableEntry5;
      Double double4 = new Double(1.5);
      assertNotEquals((double)double4, (double)double2, 0.01);
      assertNotEquals((double)double4, (double)double3, 0.01);
      assertNotEquals((double)double4, (double)double0, 0.01);
      assertNotEquals((double)double4, (double)double1, 0.01);
      assertNotNull(double4);
      assertEquals(1.5, (double)double4, 0.01);
      
      AbstractMap.SimpleImmutableEntry<Double, Double> abstractMap_SimpleImmutableEntry6 = new AbstractMap.SimpleImmutableEntry<Double, Double>(double4, double0);
      assertNotEquals((double)double0, (double)double4, 0.01);
      assertNotEquals((double)double0, (double)double2, 0.01);
      assertNotEquals((double)double0, (double)double3, 0.01);
      assertNotEquals((double)double0, (double)double1, 0.01);
      assertNotEquals((double)double4, (double)double2, 0.01);
      assertNotEquals((double)double4, (double)double3, 0.01);
      assertNotEquals((double)double4, (double)double0, 0.01);
      assertNotEquals((double)double4, (double)double1, 0.01);
      assertFalse(abstractMap_SimpleImmutableEntry6.equals((Object)abstractMap_SimpleImmutableEntry0));
      assertFalse(abstractMap_SimpleImmutableEntry6.equals((Object)abstractMap_SimpleImmutableEntry4));
      assertFalse(abstractMap_SimpleImmutableEntry6.equals((Object)abstractMap_SimpleImmutableEntry5));
      assertFalse(abstractMap_SimpleImmutableEntry6.equals((Object)abstractMap_SimpleImmutableEntry1));
      assertFalse(abstractMap_SimpleImmutableEntry6.equals((Object)abstractMap_SimpleImmutableEntry2));
      assertFalse(abstractMap_SimpleImmutableEntry6.equals((Object)abstractMap_SimpleImmutableEntry3));
      assertNotNull(abstractMap_SimpleImmutableEntry6);
      
      abstractMap_SimpleImmutableEntryArray0[6] = abstractMap_SimpleImmutableEntry6;
      Double double5 = new Double((-1597.5311787973));
      assertNotEquals((double)double5, (double)double0, 0.01);
      assertNotEquals((double)double5, (double)double1, 0.01);
      assertNotEquals((double)double5, (double)double4, 0.01);
      assertNotEquals((double)double5, (double)double2, 0.01);
      assertNotEquals((double)double5, (double)double3, 0.01);
      assertNotNull(double5);
      assertEquals((-1597.5311787973), (double)double5, 0.01);
      
      AbstractMap.SimpleEntry<Double, Double> abstractMap_SimpleEntry2 = new AbstractMap.SimpleEntry<Double, Double>(double5, double4);
      assertNotEquals((double)double5, (double)double0, 0.01);
      assertNotEquals((double)double5, (double)double1, 0.01);
      assertNotEquals((double)double5, (double)double4, 0.01);
      assertNotEquals((double)double5, (double)double2, 0.01);
      assertNotEquals((double)double5, (double)double3, 0.01);
      assertNotEquals((double)double4, (double)double5, 0.01);
      assertNotEquals((double)double4, (double)double2, 0.01);
      assertNotEquals((double)double4, (double)double3, 0.01);
      assertNotEquals((double)double4, (double)double0, 0.01);
      assertNotEquals((double)double4, (double)double1, 0.01);
      assertNotNull(abstractMap_SimpleEntry2);
      
      AbstractMap.SimpleImmutableEntry<Double, Double> abstractMap_SimpleImmutableEntry7 = new AbstractMap.SimpleImmutableEntry<Double, Double>(abstractMap_SimpleEntry2);
      assertNotEquals((double)double5, (double)double0, 0.01);
      assertNotEquals((double)double5, (double)double1, 0.01);
      assertNotEquals((double)double5, (double)double4, 0.01);
      assertNotEquals((double)double5, (double)double2, 0.01);
      assertNotEquals((double)double5, (double)double3, 0.01);
      assertFalse(abstractMap_SimpleImmutableEntry7.equals((Object)abstractMap_SimpleImmutableEntry5));
      assertFalse(abstractMap_SimpleImmutableEntry7.equals((Object)abstractMap_SimpleImmutableEntry0));
      assertFalse(abstractMap_SimpleImmutableEntry7.equals((Object)abstractMap_SimpleImmutableEntry4));
      assertFalse(abstractMap_SimpleImmutableEntry7.equals((Object)abstractMap_SimpleImmutableEntry1));
      assertFalse(abstractMap_SimpleImmutableEntry7.equals((Object)abstractMap_SimpleImmutableEntry2));
      assertFalse(abstractMap_SimpleImmutableEntry7.equals((Object)abstractMap_SimpleImmutableEntry6));
      assertFalse(abstractMap_SimpleImmutableEntry7.equals((Object)abstractMap_SimpleImmutableEntry3));
      assertNotEquals((double)double4, (double)double5, 0.01);
      assertNotEquals((double)double4, (double)double2, 0.01);
      assertNotEquals((double)double4, (double)double3, 0.01);
      assertNotEquals((double)double4, (double)double0, 0.01);
      assertNotEquals((double)double4, (double)double1, 0.01);
      assertNotNull(abstractMap_SimpleImmutableEntry7);
      
      abstractMap_SimpleImmutableEntryArray0[7] = abstractMap_SimpleImmutableEntry7;
      Double double6 = new Double((-761L));
      assertNotEquals((double)double6, (double)double0, 0.01);
      assertNotEquals((double)double6, (double)double1, 0.01);
      assertNotEquals((double)double6, (double)double4, 0.01);
      assertNotEquals((double)double6, (double)double5, 0.01);
      assertNotEquals((double)double6, (double)double3, 0.01);
      assertNotEquals((double)double6, (double)double2, 0.01);
      assertNotNull(double6);
      assertEquals((-761.0), (double)double6, 0.01);
      
      AbstractMap.SimpleImmutableEntry<Double, Double> abstractMap_SimpleImmutableEntry8 = new AbstractMap.SimpleImmutableEntry<Double, Double>(double3, double6);
      assertNotEquals((double)double6, (double)double0, 0.01);
      assertNotEquals((double)double6, (double)double1, 0.01);
      assertNotEquals((double)double6, (double)double4, 0.01);
      assertNotEquals((double)double6, (double)double5, 0.01);
      assertNotEquals((double)double6, (double)double3, 0.01);
      assertNotEquals((double)double6, (double)double2, 0.01);
      assertFalse(abstractMap_SimpleImmutableEntry8.equals((Object)abstractMap_SimpleImmutableEntry2));
      assertFalse(abstractMap_SimpleImmutableEntry8.equals((Object)abstractMap_SimpleImmutableEntry1));
      assertFalse(abstractMap_SimpleImmutableEntry8.equals((Object)abstractMap_SimpleImmutableEntry3));
      assertFalse(abstractMap_SimpleImmutableEntry8.equals((Object)abstractMap_SimpleImmutableEntry0));
      assertFalse(abstractMap_SimpleImmutableEntry8.equals((Object)abstractMap_SimpleImmutableEntry7));
      assertFalse(abstractMap_SimpleImmutableEntry8.equals((Object)abstractMap_SimpleImmutableEntry5));
      assertFalse(abstractMap_SimpleImmutableEntry8.equals((Object)abstractMap_SimpleImmutableEntry4));
      assertFalse(abstractMap_SimpleImmutableEntry8.equals((Object)abstractMap_SimpleImmutableEntry6));
      assertNotEquals((double)double3, (double)double2, 0.01);
      assertNotEquals((double)double3, (double)double4, 0.01);
      assertNotEquals((double)double3, (double)double1, 0.01);
      assertNotEquals((double)double3, (double)double6, 0.01);
      assertNotEquals((double)double3, (double)double5, 0.01);
      assertNotEquals((double)double3, (double)double0, 0.01);
      assertNotNull(abstractMap_SimpleImmutableEntry8);
      
      abstractMap_SimpleImmutableEntryArray0[8] = abstractMap_SimpleImmutableEntry8;
      Comparator<AbstractMap.SimpleImmutableEntry<Double, Double>> comparator0 = (Comparator<AbstractMap.SimpleImmutableEntry<Double, Double>>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(88).when(comparator0).compare(any(java.util.AbstractMap.SimpleImmutableEntry.class) , any(java.util.AbstractMap.SimpleImmutableEntry.class));
      boolean boolean0 = ArrayUtils.isSorted(abstractMap_SimpleImmutableEntryArray0, comparator0);
      assertEquals(9, abstractMap_SimpleImmutableEntryArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0530()  throws Throwable  {
      Boolean[] booleanArray0 = new Boolean[3];
      Boolean boolean0 = Boolean.valueOf((String) null);
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      booleanArray0[0] = boolean0;
      booleanArray0[1] = boolean0;
      Boolean boolean1 = Boolean.valueOf("");
      assertNotNull(boolean1);
      assertFalse(boolean1);
      
      booleanArray0[2] = boolean1;
      boolean[] booleanArray1 = new boolean[9];
      booleanArray1[0] = (boolean) boolean0;
      booleanArray1[1] = (boolean) boolean0;
      long[] longArray0 = new long[8];
      longArray0[0] = 0L;
      longArray0[1] = (-406L);
      longArray0[2] = (-406L);
      longArray0[3] = (-3525L);
      longArray0[4] = (-406L);
      longArray0[5] = (-406L);
      longArray0[6] = 0L;
      longArray0[7] = 0L;
      Long[] longArray1 = ArrayUtils.toObject(longArray0);
      assertArrayEquals(new long[] {0L, (-406L), (-406L), (-3525L), (-406L), (-406L), 0L, 0L}, longArray0);
      assertEquals(8, longArray1.length);
      assertEquals(8, longArray0.length);
      assertNotNull(longArray1);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 0L;
      doubleArray0[1] = (double) (-406L);
      doubleArray0[2] = (double) (-406L);
      doubleArray0[3] = (double) (-3525L);
      doubleArray0[4] = (double) (-406L);
      doubleArray0[5] = (double) (-3525L);
      doubleArray0[6] = (double) (-3525L);
      doubleArray0[7] = (double) (-406L);
      double[] doubleArray1 = ArrayUtils.clone(doubleArray0);
      assertArrayEquals(new double[] {0.0, (-406.0), (-406.0), (-3525.0), (-406.0), (-3525.0), (-3525.0), (-406.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, (-406.0), (-406.0), (-3525.0), (-406.0), (-3525.0), (-3525.0), (-406.0)}, doubleArray1, 0.01);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      
      boolean[] booleanArray2 = new boolean[5];
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      
      booleanArray2[0] = (boolean) boolean0;
      booleanArray2[1] = (boolean) boolean0;
      booleanArray2[2] = (boolean) boolean0;
      booleanArray2[3] = (boolean) boolean0;
      booleanArray2[4] = (boolean) boolean0;
      int int0 = ArrayUtils.indexOf(booleanArray2, false, 2269);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false}, booleanArray2));
      assertEquals(5, booleanArray2.length);
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertNotSame(booleanArray2, booleanArray1);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0531()  throws Throwable  {
      long[] longArray0 = new long[6];
      longArray0[0] = 113L;
      longArray0[1] = 1L;
      int[] intArray0 = new int[6];
      intArray0[0] = 2115;
      intArray0[1] = 2115;
      intArray0[2] = 2115;
      intArray0[3] = 2115;
      intArray0[4] = (-164);
      intArray0[5] = (-164);
      int int0 = ArrayUtils.lastIndexOf(intArray0, 15);
      assertArrayEquals(new int[] {2115, 2115, 2115, 2115, (-164), (-164)}, intArray0);
      assertEquals(6, intArray0.length);
      assertEquals((-1), int0);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      boolean boolean0 = ArrayUtils.contains(booleanArray0, false);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertEquals(1, booleanArray0.length);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 2115;
      doubleArray0[1] = (double) (-164);
      doubleArray0[2] = (double) (-164);
      doubleArray0[3] = (double) 1L;
      doubleArray0[4] = (double) 2115;
      doubleArray0[5] = (double) 2115;
      doubleArray0[6] = (double) 113L;
      doubleArray0[7] = (double) (-164);
      doubleArray0[8] = (double) 2115;
      ArrayUtils.swap(doubleArray0, (-1024), 2115, 43);
      assertArrayEquals(new double[] {2115.0, (-164.0), (-164.0), 1.0, 2115.0, 2115.0, 113.0, (-164.0), 2115.0}, doubleArray0, 0.01);
      assertEquals(9, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test0532()  throws Throwable  {
      Long long0 = new Long((-2009L));
      assertNotNull(long0);
      assertEquals((-2009L), (long)long0);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 0L;
      doubleArray0[1] = 0.7;
      doubleArray0[2] = 45.303832;
      doubleArray0[3] = 0.7;
      doubleArray0[4] = (double) (-2009L);
      doubleArray0[5] = (double) (-2009L);
      doubleArray0[6] = 0.7;
      doubleArray0[7] = (double) 0L;
      doubleArray0[8] = 0.7;
      boolean boolean0 = ArrayUtils.isSorted(doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.7, 45.303832, 0.7, (-2009.0), (-2009.0), 0.7, 0.0, 0.7}, doubleArray0, 0.01);
      assertEquals(9, doubleArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0533()  throws Throwable  {
      BitSet bitSet0 = new BitSet();
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertNotNull(bitSet0);
      
      byte[] byteArray0 = new byte[0];
      ArrayUtils.swap(byteArray0, 11, 11, 11);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short)0;
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) (short)0;
      doubleArray0[1] = (double) (short)0;
      doubleArray0[2] = (double) (short)0;
      doubleArray0[3] = (double) 11;
      doubleArray0[4] = (double) 11;
      doubleArray0[5] = (double) (short)0;
      doubleArray0[6] = (double) 11;
      doubleArray0[7] = (double) 11;
      double[] doubleArray1 = ArrayUtils.removeAllOccurences(doubleArray0, (double) (short)0);
      assertArrayEquals(new double[] {11.0, 11.0, 11.0, 11.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 11.0, 11.0, 0.0, 11.0, 11.0}, doubleArray0, 0.01);
      assertEquals(4, doubleArray1.length);
      assertEquals(8, doubleArray0.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotNull(doubleArray1);
      
      boolean boolean0 = ArrayUtils.isSorted(doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 11.0, 11.0, 0.0, 11.0, 11.0}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotSame(doubleArray0, doubleArray1);
      assertFalse(boolean0);
      
      Boolean boolean1 = new Boolean(true);
      assertFalse(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      assertTrue(boolean1);
      
      boolean boolean2 = ArrayUtils.contains((boolean[]) null, false);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test0534()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      boolean boolean0 = ArrayUtils.isSorted(doubleArray0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0535()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[1] = (-362.32649718245);
      boolean boolean0 = ArrayUtils.isSorted(doubleArray0);
      assertArrayEquals(new double[] {0.0, (-362.32649718245), 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0536()  throws Throwable  {
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short) (-13);
      shortArray0[1] = (short)43;
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      BitSet bitSet0 = new BitSet();
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertNotNull(bitSet0);
      
      Long long0 = new Long((-3482L));
      assertNotNull(long0);
      assertEquals((-3482L), (long)long0);
      
      Long long1 = new Long((short)43);
      assertFalse(long1.equals((Object)long0));
      assertNotNull(long1);
      assertEquals(43L, (long)long1);
      
      Long long2 = new Long(0L);
      assertFalse(long2.equals((Object)long0));
      assertFalse(long2.equals((Object)long1));
      assertNotNull(long2);
      assertEquals(0L, (long)long2);
      
      int[] intArray0 = new int[3];
      intArray0[0] = (int) (short) (-13);
      intArray0[1] = (-2798);
      intArray0[2] = (-2798);
      ArrayUtils.shift(intArray0, 3699);
      assertArrayEquals(new int[] {(-13), (-2798), (-2798)}, intArray0);
      assertEquals(3, intArray0.length);
      
      ArrayUtils.shift(booleanArray0, 901);
      assertTrue(Arrays.equals(new boolean[] {false, true}, booleanArray0));
      assertEquals(2, booleanArray0.length);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-52);
      byteArray0[1] = (byte)28;
      ArrayUtils.shift(booleanArray0, (-2798));
      assertTrue(Arrays.equals(new boolean[] {false, true}, booleanArray0));
      assertEquals(2, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test0537()  throws Throwable  {
      Byte byte0 = new Byte((byte) (-58));
      assertNotNull(byte0);
      assertEquals((byte) (-58), (byte)byte0);
      
      Object object0 = ArrayUtils.toPrimitive((Object) byte0);
      assertNotNull(object0);
      assertEquals((byte) (-58), object0);
      
      Boolean boolean0 = Boolean.TRUE;
      assertNotNull(boolean0);
      assertTrue(boolean0);
      
      String string0 = ArrayUtils.toString((Object) boolean0, "#F ");
      assertNotNull(string0);
      assertEquals("true", string0);
      
      Object[] objectArray0 = new Object[0];
      int int0 = ArrayUtils.lastIndexOf(objectArray0, (Object) ",%f", 5092);
      assertEquals(0, objectArray0.length);
      assertEquals((-1), int0);
      
      ArrayUtils.shift((boolean[]) null, 5092);
      Double[] doubleArray0 = new Double[2];
      Double double0 = new Double((-1));
      assertNotNull(double0);
      assertEquals((-1.0), (double)double0, 0.01);
      
      doubleArray0[0] = double0;
      Double double1 = new Double(11.9538526);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      assertEquals(11.9538526, (double)double1, 0.01);
      
      doubleArray0[1] = double1;
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0, (-1834.51098));
      assertArrayEquals(new double[] {(-1.0), 11.9538526}, doubleArray1, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertNotNull(doubleArray1);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) 5092;
      floatArray0[1] = (float) 5092;
      floatArray0[2] = (float) 5092;
      float[] floatArray1 = ArrayUtils.removeElement(floatArray0, (-2028.7817F));
      assertArrayEquals(new float[] {5092.0F, 5092.0F, 5092.0F}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {5092.0F, 5092.0F, 5092.0F}, floatArray0, 0.01F);
      assertEquals(3, floatArray1.length);
      assertEquals(3, floatArray0.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertNotNull(floatArray1);
      
      boolean boolean1 = ArrayUtils.isSameLength(floatArray0, floatArray0);
      assertArrayEquals(new float[] {5092.0F, 5092.0F, 5092.0F}, floatArray0, 0.01F);
      assertEquals(3, floatArray0.length);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertNotSame(floatArray0, floatArray1);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test0538()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-39);
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) (byte) (-39);
      float[] floatArray1 = ArrayUtils.addAll(floatArray0, floatArray0);
      assertArrayEquals(new float[] {(-39.0F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-39.0F), (-39.0F)}, floatArray1, 0.01F);
      assertEquals(1, floatArray0.length);
      assertEquals(2, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      booleanArray0[6] = true;
      booleanArray0[7] = true;
      booleanArray0[8] = true;
      ArrayUtils.shift(booleanArray0, (int) (byte) (-39));
      assertTrue(Arrays.equals(new boolean[] {false, true, true, true, true, true, true, true, true}, booleanArray0));
      assertEquals(9, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test0539()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = 196;
      int[] intArray1 = ArrayUtils.subarray(intArray0, 0, 0);
      assertArrayEquals(new int[] {196, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(8, intArray0.length);
      assertEquals(0, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(intArray0, (int) (byte)98, (-1808));
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertArrayEquals(new int[] {196, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(8, intArray0.length);
      assertFalse(intArray0.equals((Object)intArray1));
      assertNotSame(intArray0, intArray1);
      assertNotNull(bitSet0);
      
      Long long0 = new Long((byte)98);
      assertNotNull(long0);
      assertEquals(98L, (long)long0);
      
      Long long1 = new Long(196);
      assertFalse(long1.equals((Object)long0));
      assertNotNull(long1);
      assertEquals(196L, (long)long1);
      
      ArrayUtils.shift(intArray1, (int) (byte)98);
      assertArrayEquals(new int[] {196, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(8, intArray0.length);
      assertEquals(0, intArray1.length);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      ArrayUtils.shift(booleanArray0, 1);
      assertTrue(Arrays.equals(new boolean[] {true, true, true}, booleanArray0));
      assertEquals(3, booleanArray0.length);
      
      ArrayUtils.shift(booleanArray0, 91);
      assertTrue(Arrays.equals(new boolean[] {true, true, true}, booleanArray0));
      assertEquals(3, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test0540()  throws Throwable  {
      float[] floatArray0 = new float[2];
      floatArray0[1] = (-1733.7683F);
      float[] floatArray1 = ArrayUtils.addAll(floatArray0, floatArray0);
      assertArrayEquals(new float[] {0.0F, (-1733.7683F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F, (-1733.7683F), 0.0F, (-1733.7683F)}, floatArray1, 0.01F);
      assertEquals(2, floatArray0.length);
      assertEquals(4, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      
      MutableInt mutableInt0 = new MutableInt((-583));
      assertEquals((-583), mutableInt0.intValue());
      assertEquals((-583), (int)mutableInt0.toInteger());
      assertEquals((-583), (int)mutableInt0.getValue());
      assertEquals((-583.0), mutableInt0.doubleValue(), 0.01);
      assertEquals("-583", mutableInt0.toString());
      assertEquals((short) (-583), mutableInt0.shortValue());
      assertEquals((-583L), mutableInt0.longValue());
      assertEquals((-583.0F), mutableInt0.floatValue(), 0.01F);
      assertEquals((byte) (-71), mutableInt0.byteValue());
      assertNotNull(mutableInt0);
      
      Double double0 = new Double((-1733.7683F));
      assertNotNull(double0);
      assertEquals((-1733.768310546875), (double)double0, 0.01);
      
      Short short0 = ArrayUtils.get((Short[]) null, (-5790));
      assertNull(short0);
  }

  @Test(timeout = 4000)
  public void test0541()  throws Throwable  {
      Byte[] byteArray0 = ArrayUtils.subarray((Byte[]) null, 7, 328);
      assertNull(byteArray0);
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) 328;
      floatArray0[1] = (float) 328;
      floatArray0[2] = (float) 7;
      floatArray0[3] = (float) 7;
      floatArray0[4] = (float) 328;
      floatArray0[5] = (float) 328;
      floatArray0[6] = (float) 328;
      floatArray0[7] = (float) 7;
      float[] floatArray1 = ArrayUtils.addAll(floatArray0, floatArray0);
      assertArrayEquals(new float[] {328.0F, 328.0F, 7.0F, 7.0F, 328.0F, 328.0F, 328.0F, 7.0F}, floatArray0, 0.01F);
      assertEquals(8, floatArray0.length);
      assertEquals(16, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      booleanArray0[6] = true;
      booleanArray0[7] = true;
      booleanArray0[8] = true;
      ArrayUtils.shift(booleanArray0, 0);
      assertTrue(Arrays.equals(new boolean[] {true, false, false, true, false, false, true, true, true}, booleanArray0));
      assertEquals(9, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test0542()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      int int0 = ArrayUtils.indexOf(byteArray0, (byte) (-71), (int) (byte) (-71));
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(9, byteArray0.length);
      assertEquals((-1), int0);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (byte) (-71);
      shortArray0[1] = (short) (byte) (-71);
      int[] intArray0 = new int[3];
      intArray0[0] = (-1);
      intArray0[1] = (-1);
      intArray0[2] = (int) (byte) (-71);
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(shortArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Length: 2
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0543()  throws Throwable  {
      float[] floatArray0 = new float[3];
      floatArray0[0] = (-1397.05F);
      floatArray0[1] = (-1397.05F);
      floatArray0[2] = (-1.0F);
      float[] floatArray1 = ArrayUtils.nullToEmpty(floatArray0);
      assertArrayEquals(new float[] {(-1397.05F), (-1397.05F), (-1.0F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-1397.05F), (-1397.05F), (-1.0F)}, floatArray1, 0.01F);
      assertEquals(3, floatArray0.length);
      assertEquals(3, floatArray1.length);
      assertSame(floatArray0, floatArray1);
      assertSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      
      int[] intArray0 = new int[0];
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      Boolean[] booleanArray1 = new Boolean[3];
      booleanArray1[0] = (Boolean) true;
      Boolean boolean0 = Boolean.FALSE;
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      booleanArray1[2] = boolean0;
      boolean[] booleanArray2 = ArrayUtils.toPrimitive(booleanArray1, true);
      assertTrue(Arrays.equals(new boolean[] {true, true, false}, booleanArray2));
      assertEquals(3, booleanArray1.length);
      assertEquals(3, booleanArray2.length);
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertNotSame(booleanArray2, booleanArray0);
      assertNotNull(booleanArray2);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 45.0;
      doubleArray0[1] = Double.NaN;
      doubleArray0[2] = 1.0;
      doubleArray0[3] = (-2544.34526007186);
  }

  @Test(timeout = 4000)
  public void test0544()  throws Throwable  {
      float[] floatArray0 = new float[3];
      floatArray0[0] = (-1397.05F);
      floatArray0[1] = (-1397.05F);
      floatArray0[2] = (-1.0F);
      float[] floatArray1 = ArrayUtils.nullToEmpty(floatArray0);
      assertArrayEquals(new float[] {(-1397.05F), (-1397.05F), (-1.0F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-1397.05F), (-1397.05F), (-1.0F)}, floatArray1, 0.01F);
      assertEquals(3, floatArray0.length);
      assertEquals(3, floatArray1.length);
      assertSame(floatArray0, floatArray1);
      assertSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      
      int[] intArray0 = new int[0];
      int[] intArray1 = ArrayUtils.removeAllOccurrences(intArray0, 288);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      Boolean[] booleanArray1 = new Boolean[3];
      booleanArray1[0] = (Boolean) true;
      Boolean boolean0 = Boolean.FALSE;
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      booleanArray1[2] = boolean0;
      boolean[] booleanArray2 = ArrayUtils.toPrimitive(booleanArray1, true);
      assertTrue(Arrays.equals(new boolean[] {true, true, false}, booleanArray2));
      assertEquals(3, booleanArray1.length);
      assertEquals(3, booleanArray2.length);
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertNotSame(booleanArray2, booleanArray0);
      assertNotNull(booleanArray2);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 45.0;
      doubleArray0[1] = Double.NaN;
      doubleArray0[2] = 1.0;
      doubleArray0[3] = (-2544.34526007186);
      ArrayUtils.shift(doubleArray0, 288);
      assertArrayEquals(new double[] {45.0, Double.NaN, 1.0, (-2544.34526007186)}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test0545()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 0.0;
      int[] intArray0 = new int[9];
      intArray0[0] = 32;
      intArray0[1] = 32;
      intArray0[2] = 32;
      intArray0[3] = 32;
      intArray0[4] = 32;
      intArray0[5] = 32;
      intArray0[6] = 32;
      intArray0[7] = 32;
      intArray0[8] = 32;
      int int0 = ArrayUtils.lastIndexOf(intArray0, (-857), 99);
      assertArrayEquals(new int[] {32, 32, 32, 32, 32, 32, 32, 32, 32}, intArray0);
      assertEquals(9, intArray0.length);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0546()  throws Throwable  {
      Boolean[] booleanArray0 = new Boolean[3];
      Boolean boolean0 = Boolean.valueOf((String) null);
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      booleanArray0[0] = boolean0;
      booleanArray0[1] = boolean0;
      Boolean boolean1 = Boolean.valueOf("");
      assertNotNull(boolean1);
      assertFalse(boolean1);
      
      booleanArray0[2] = boolean1;
      boolean[] booleanArray1 = new boolean[9];
      booleanArray1[0] = (boolean) boolean0;
      booleanArray1[1] = (boolean) boolean0;
      booleanArray1[2] = (boolean) boolean0;
      booleanArray1[3] = (boolean) boolean0;
      booleanArray1[4] = (boolean) boolean0;
      booleanArray1[5] = (boolean) boolean0;
      booleanArray1[6] = (boolean) boolean0;
      booleanArray1[7] = (boolean) boolean0;
      booleanArray1[8] = (boolean) boolean0;
      int[] intArray0 = new int[7];
      intArray0[0] = 2115;
      intArray0[1] = 2115;
      intArray0[2] = (-164);
      intArray0[3] = 2115;
      intArray0[4] = 2115;
      intArray0[5] = (-164);
      intArray0[6] = 2115;
      int int0 = ArrayUtils.lastIndexOf(intArray0, (-164));
      assertArrayEquals(new int[] {2115, 2115, (-164), 2115, 2115, (-164), 2115}, intArray0);
      assertEquals(7, intArray0.length);
      assertEquals(5, int0);
  }

  @Test(timeout = 4000)
  public void test0547()  throws Throwable  {
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)560;
      shortArray0[1] = (short)0;
      shortArray0[2] = (short)1545;
      shortArray0[3] = (short) (-4027);
      short[] shortArray1 = ArrayUtils.add(shortArray0, (short)1545);
      assertArrayEquals(new short[] {(short)560, (short)0, (short)1545, (short) (-4027)}, shortArray0);
      assertArrayEquals(new short[] {(short)560, (short)0, (short)1545, (short) (-4027), (short)1545}, shortArray1);
      assertEquals(4, shortArray0.length);
      assertEquals(5, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) (short)1545;
      ArrayUtils.swap(longArray0, (-2147079800), (-2146867085));
      assertArrayEquals(new long[] {1545L}, longArray0);
      assertEquals(1, longArray0.length);
      
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = ArrayUtils.subarray(byteArray0, (int) (short)0, (-2147079800));
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      
      boolean boolean0 = ArrayUtils.isNotEmpty(byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertNotSame(byteArray0, byteArray1);
      assertFalse(boolean0);
      
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) (short)1545;
      objectArray0[1] = (Object) 1545L;
      objectArray0[2] = (Object) "Array element ";
      objectArray0[3] = (Object) "Array element ";
      objectArray0[4] = (Object) (short)1545;
      objectArray0[5] = (Object) (short)1545;
      objectArray0[6] = (Object) (short)1545;
      objectArray0[7] = (Object) (short) (-4027);
      objectArray0[8] = (Object) (short)1545;
      String[] stringArray0 = ArrayUtils.toStringArray(objectArray0, "Array element ");
      assertEquals(9, stringArray0.length);
      assertEquals(9, objectArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test0548()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = 7;
      intArray0[1] = (-91);
      intArray0[2] = (-1938);
      char[] charArray0 = new char[3];
      charArray0[0] = '8';
      charArray0[1] = 'k';
      charArray0[2] = 'n';
      boolean boolean0 = ArrayUtils.isSorted(charArray0);
      assertArrayEquals(new char[] {'8', 'k', 'n'}, charArray0);
      assertEquals(3, charArray0.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0549()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 571.942196047302;
      doubleArray0[2] = 1.0;
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = true;
      Long long0 = new Long(2);
      assertNotNull(long0);
      assertEquals(2L, (long)long0);
      
      Long[] longArray0 = new Long[4];
      longArray0[0] = long0;
      longArray0[1] = long0;
      longArray0[2] = long0;
      longArray0[3] = long0;
      Long[] longArray1 = ArrayUtils.subarray(longArray0, 2115, 2115);
      assertEquals(4, longArray0.length);
      assertEquals(0, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'Y';
      charArray0[1] = 'Y';
      boolean boolean0 = ArrayUtils.isSorted(charArray0);
      assertArrayEquals(new char[] {'Y', 'Y'}, charArray0);
      assertEquals(2, charArray0.length);
      assertTrue(boolean0);
      
      char[] charArray1 = new char[8];
      assertFalse(charArray1.equals((Object)charArray0));
      
      charArray1[0] = 'Y';
      charArray1[1] = 'Y';
      charArray1[2] = 'Y';
      charArray1[3] = 'Y';
      charArray1[4] = 'Y';
      charArray1[5] = 'Y';
      charArray1[6] = 'Y';
      charArray1[7] = 'Y';
      boolean boolean1 = ArrayUtils.isSameLength(charArray0, charArray1);
      assertArrayEquals(new char[] {'Y', 'Y', 'Y', 'Y', 'Y', 'Y', 'Y', 'Y'}, charArray1);
      assertArrayEquals(new char[] {'Y', 'Y'}, charArray0);
      assertEquals(8, charArray1.length);
      assertEquals(2, charArray0.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(boolean1 == boolean0);
      assertFalse(charArray0.equals((Object)charArray1));
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray0, charArray1);
      assertFalse(boolean1);
      
      long[] longArray2 = new long[9];
      longArray2[0] = (long) 'Y';
      longArray2[1] = (long) 'Y';
      longArray2[2] = (long) 'Y';
      longArray2[3] = (long) 'Y';
      longArray2[4] = (long) 2;
      longArray2[5] = (long) 'Y';
      longArray2[6] = (-1L);
      longArray2[7] = (long) 'Y';
      longArray2[8] = (long) 'Y';
      MockRandom mockRandom0 = new MockRandom((-500L));
      assertNotNull(mockRandom0);
      
      ArrayUtils.shuffle(longArray2, (Random) mockRandom0);
      assertArrayEquals(new long[] {89L, 89L, 89L, 2L, 89L, (-1L), 89L, 89L, 89L}, longArray2);
      assertEquals(9, longArray2.length);
  }

  @Test(timeout = 4000)
  public void test0550()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 914.944001638755;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (-1202.7635315971), 0.0);
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertArrayEquals(new double[] {0.0, 914.944001638755, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      assertNotNull(bitSet0);
      
      Float[] floatArray0 = new Float[2];
      Float float0 = Float.valueOf(0.0F);
      assertNotNull(float0);
      assertEquals(0.0F, (float)float0, 0.01F);
      
      floatArray0[0] = float0;
      int[] intArray0 = new int[6];
      intArray0[0] = (-3414);
      intArray0[1] = 2;
      intArray0[2] = 2;
      intArray0[3] = 91;
      intArray0[4] = 2;
      intArray0[5] = (-3414);
      int[] intArray1 = ArrayUtils.subarray(intArray0, 55, (-1462));
      assertArrayEquals(new int[] {}, intArray1);
      assertArrayEquals(new int[] {(-3414), 2, 2, 91, 2, (-3414)}, intArray0);
      assertEquals(0, intArray1.length);
      assertEquals(6, intArray0.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
      assertNotNull(intArray1);
      
      short[] shortArray0 = new short[0];
      short[] shortArray1 = ArrayUtils.addFirst(shortArray0, (short)56);
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {(short)56}, shortArray1);
      assertEquals(0, shortArray0.length);
      assertEquals(1, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      
      Short[] shortArray2 = new Short[8];
      String string0 = "{}";
      try { 
        Short.valueOf("{}");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"{}\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test0551()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      String string0 = ArrayUtils.toString((Object) "");
      assertNotNull(string0);
      assertEquals("", string0);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[1] = 0.0;
      doubleArray0[3] = (-562.319669478);
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = 0.0;
      BitSet bitSet0 = new BitSet();
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertNotNull(bitSet0);
      
      Float float0 = Float.valueOf(1.0F);
      assertNotNull(float0);
      assertEquals(1.0F, (float)float0, 0.01F);
      
      int[] intArray1 = ArrayUtils.subarray(intArray0, 417, 2);
      assertArrayEquals(new int[] {0}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(1, intArray0.length);
      assertEquals(0, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      
      short[] shortArray0 = new short[0];
      short[] shortArray1 = ArrayUtils.addFirst(shortArray0, (short)56);
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {(short)56}, shortArray1);
      assertEquals(0, shortArray0.length);
      assertEquals(1, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      
      try { 
        Short.valueOf("Kj+*<MMopO'l!d'M]J");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"Kj+*<MMopO'l!d'M]J\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test0552()  throws Throwable  {
      float[] floatArray0 = new float[3];
      floatArray0[0] = (-1397.05F);
      floatArray0[1] = (-1397.05F);
      Float float0 = new Float(479.0F);
      assertNotNull(float0);
      assertEquals(479.0F, (float)float0, 0.01F);
      
      Float[] floatArray1 = new Float[3];
      floatArray1[0] = float0;
      floatArray1[1] = float0;
      floatArray1[2] = (Float) (-1397.05F);
      float[] floatArray2 = ArrayUtils.toPrimitive(floatArray1);
      assertArrayEquals(new float[] {479.0F, 479.0F, (-1397.05F)}, floatArray2, 0.01F);
      assertEquals(3, floatArray1.length);
      assertEquals(3, floatArray2.length);
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertNotSame(floatArray2, floatArray0);
      assertNotNull(floatArray2);
      
      Class<Integer>[] classArray0 = (Class<Integer>[]) Array.newInstance(Class.class, 0);
      Class<?>[] classArray1 = ArrayUtils.nullToEmpty(classArray0);
      assertEquals(0, classArray0.length);
      assertEquals(0, classArray1.length);
      assertNotNull(classArray1);
      
      ArrayUtils.swap((Object[]) floatArray1, 163, (-2146731991), (-2146731991));
      assertEquals(3, floatArray1.length);
      
      Map<Object, Object> map0 = ArrayUtils.toMap(classArray0);
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      assertEquals(0, classArray0.length);
      assertNotNull(map0);
  }

  @Test(timeout = 4000)
  public void test0553()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object[] objectArray0 = new Object[12];
      objectArray0[0] = object0;
      Float float0 = new Float(1.0);
      assertNotNull(float0);
      assertEquals(1.0F, (float)float0, 0.01F);
      
      int int0 = ArrayUtils.lastIndexOf(objectArray0, (Object) float0, 91);
      assertEquals(12, objectArray0.length);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0554()  throws Throwable  {
      Byte[] byteArray0 = new Byte[9];
      Byte byte0 = new Byte((byte)89);
      assertNotNull(byte0);
      assertEquals((byte)89, (byte)byte0);
      
      byteArray0[0] = byte0;
      // Undeclared exception!
      try { 
        ArrayUtils.toMap(byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array element 0, '89', is neither of type Map.Entry nor an Array
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0555()  throws Throwable  {
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)2;
      shortArray0[1] = (short)64;
      short[] shortArray1 = ArrayUtils.removeAllOccurences(shortArray0, (short)64);
      assertArrayEquals(new short[] {(short)2, (short)64}, shortArray0);
      assertArrayEquals(new short[] {(short)2}, shortArray1);
      assertEquals(2, shortArray0.length);
      assertEquals(1, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      
      short[] shortArray2 = ArrayUtils.addFirst(shortArray0, (short)2);
      assertArrayEquals(new short[] {(short)2, (short)64}, shortArray0);
      assertArrayEquals(new short[] {(short)2, (short)2, (short)64}, shortArray2);
      assertEquals(2, shortArray0.length);
      assertEquals(3, shortArray2.length);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray2.equals((Object)shortArray1));
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray0, shortArray2);
      assertNotSame(shortArray2, shortArray1);
      assertNotSame(shortArray2, shortArray0);
      assertNotNull(shortArray2);
      
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) (short)64;
      objectArray0[1] = (Object) (short)2;
      objectArray0[2] = (Object) (short)2;
      objectArray0[3] = (Object) (short)2;
      int int0 = ArrayUtils.lastIndexOf(objectArray0, objectArray0[2]);
      assertEquals(4, objectArray0.length);
      assertEquals(3, int0);
      
      byte[] byteArray0 = new byte[0];
      int int1 = ArrayUtils.lastIndexOf(byteArray0, (byte)90);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      // Undeclared exception!
      try { 
        ArrayUtils.toMap(objectArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array element 0, '64', is neither of type Map.Entry nor an Array
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0556()  throws Throwable  {
      Object[] objectArray0 = new Object[5];
      Short short0 = new Short((short) (-2133));
      assertNotNull(short0);
      assertEquals((short) (-2133), (short)short0);
      
      int int0 = ArrayUtils.lastIndexOf(objectArray0, (Object) short0, (int) (short) (-2133));
      assertEquals(5, objectArray0.length);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0557()  throws Throwable  {
      Character[] characterArray0 = new Character[5];
      char char0 = 'K';
      Character character0 = Character.valueOf('K');
      assertNotNull(character0);
      assertEquals('K', (char)character0);
      
      characterArray0[0] = character0;
      Character character1 = Character.valueOf(char0);
      assertNotNull(character1);
      assertEquals('K', (char)character1);
      
      characterArray0[1] = character1;
      Character character2 = Character.valueOf(char0);
      assertNotNull(character2);
      assertEquals('K', (char)character2);
      
      Character character3 = new Character(char0);
      assertTrue(character3.equals((Object)character0));
      assertTrue(character3.equals((Object)char0));
      assertTrue(character3.equals((Object)character2));
      assertTrue(character3.equals((Object)character1));
      assertNotNull(character3);
      assertEquals('K', (char)character3);
      
      Character character4 = Character.valueOf('v');
      assertFalse(character4.equals((Object)character0));
      assertFalse(character4.equals((Object)character2));
      assertFalse(character4.equals((Object)char0));
      assertFalse(character4.equals((Object)character3));
      assertFalse(character4.equals((Object)character1));
      assertNotNull(character4);
      assertEquals('v', (char)character4);
      
      characterArray0[4] = character4;
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0, 'Q');
      assertArrayEquals(new char[] {'K', 'K', 'Q', 'Q', 'v'}, charArray0);
      assertEquals(5, characterArray0.length);
      assertEquals(5, charArray0.length);
      assertNotNull(charArray0);
      
      ArrayUtils.shuffle((Object[]) characterArray0);
      assertEquals(5, characterArray0.length);
      
      double[] doubleArray0 = new double[0];
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (-204.572306557552), 210.80385843910764);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertNotNull(bitSet0);
  }

  @Test(timeout = 4000)
  public void test0558()  throws Throwable  {
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (-114);
      shortArray0[1] = (short) (-114);
      // Undeclared exception!
      try { 
        ArrayUtils.shuffle(shortArray0, (Random) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0559()  throws Throwable  {
      short short0 = (short) (-400);
      char[] charArray0 = ArrayUtils.removeElement((char[]) null, ',');
      assertNull(charArray0);
      
      int int0 = 1;
      Object[] objectArray0 = new Object[1];
      int int1 = 2489;
      Object object0 = ArrayUtils.get(objectArray0, 2489, (Object) "org.apache.commons.lang3.builder.EqualsBuilder");
      assertEquals(1, objectArray0.length);
      assertNotNull(object0);
      assertEquals("org.apache.commons.lang3.builder.EqualsBuilder", object0);
      
      objectArray0[0] = (Object) "org.apache.commons.lang3.builder.EqualsBuilder";
      Short short1 = new Short((short)8);
      assertFalse(short1.equals((Object)short0));
      assertNotNull(short1);
      assertEquals((short)8, (short)short1);
      
      Object object1 = ArrayUtils.get(objectArray0, 14, (Object) short1);
      assertEquals(1, objectArray0.length);
      assertFalse(short1.equals((Object)short0));
      assertFalse(object1.equals((Object)short0));
      assertNotNull(object1);
      assertEquals((short)8, object1);
      
      long[] longArray0 = new long[3];
      longArray0[0] = (long) 'R';
      longArray0[1] = (long) 'R';
      longArray0[2] = (long) ',';
      // Undeclared exception!
      try { 
        LongBuffer.wrap(longArray0, (int) (short) (-400), (-3712));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.LongBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test0560()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)2;
      boolean boolean0 = ArrayUtils.isSameLength(byteArray0, byteArray0);
      assertArrayEquals(new byte[] {(byte)2, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(9, byteArray0.length);
      assertTrue(boolean0);
      
      long[] longArray0 = new long[6];
      longArray0[0] = (long) (byte) (-9);
      longArray0[1] = (long) (byte) (-42);
      longArray0[2] = (long) (byte) (-42);
      longArray0[3] = (long) (byte) (-9);
      longArray0[4] = (long) (byte)2;
      longArray0[5] = (long) (byte)2;
      long[] longArray1 = ArrayUtils.clone(longArray0);
      assertArrayEquals(new long[] {(-9L), (-42L), (-42L), (-9L), 2L, 2L}, longArray0);
      assertArrayEquals(new long[] {(-9L), (-42L), (-42L), (-9L), 2L, 2L}, longArray1);
      assertEquals(6, longArray0.length);
      assertEquals(6, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
      
      char[] charArray0 = ArrayUtils.addAll((char[]) null, (char[]) null);
      assertNull(charArray0);
  }

  @Test(timeout = 4000)
  public void test0561()  throws Throwable  {
      long[] longArray0 = new long[3];
      longArray0[0] = (-2084L);
      longArray0[1] = 0L;
      char[] charArray0 = ArrayUtils.removeElement((char[]) null, ' ');
      assertNull(charArray0);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) 0L;
      floatArray0[1] = (float) (-2084L);
      floatArray0[2] = (float) 0L;
      floatArray0[3] = (float) 0L;
      float[] floatArray1 = ArrayUtils.removeAllOccurences(floatArray0, 2690.8281F);
      assertArrayEquals(new float[] {0.0F, (-2084.0F), 0.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F, (-2084.0F), 0.0F, 0.0F}, floatArray1, 0.01F);
      assertEquals(4, floatArray0.length);
      assertEquals(4, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      
      Boolean boolean0 = Boolean.valueOf("java.lang.Byte");
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      Long[] longArray1 = ArrayUtils.toObject(longArray0);
      assertArrayEquals(new long[] {(-2084L), 0L, 0L}, longArray0);
      assertEquals(3, longArray0.length);
      assertEquals(3, longArray1.length);
      assertNotNull(longArray1);
      
      char[] charArray1 = ArrayUtils.subarray((char[]) null, 0, (-2146253702));
      assertNull(charArray1);
  }

  @Test(timeout = 4000)
  public void test0562()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-110);
      byteArray0[2] = (byte)13;
      byteArray0[3] = (byte) (-6);
      byteArray0[4] = (byte)90;
      byteArray0[5] = (byte) (-55);
      byteArray0[6] = (byte) (-8);
      BitSet bitSet0 = ArrayUtils.indexesOf(byteArray0, (byte)31, 214);
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertArrayEquals(new byte[] {(byte) (-1), (byte) (-110), (byte)13, (byte) (-6), (byte)90, (byte) (-55), (byte) (-8)}, byteArray0);
      assertEquals(7, byteArray0.length);
      assertNotNull(bitSet0);
      
      boolean boolean0 = ArrayUtils.isSorted(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-1), (byte) (-110), (byte)13, (byte) (-6), (byte)90, (byte) (-55), (byte) (-8)}, byteArray0);
      assertEquals(7, byteArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0563()  throws Throwable  {
      int int0 = ArrayUtils.lastIndexOf((float[]) null, 0.88169146F, 31);
      assertEquals((-1), int0);
      
      char[] charArray0 = new char[7];
      charArray0[0] = 'q';
      charArray0[1] = 'I';
      charArray0[2] = 'I';
      charArray0[3] = 'p';
      charArray0[4] = 'd';
      charArray0[6] = '9';
      char[] charArray1 = ArrayUtils.clone(charArray0);
      assertArrayEquals(new char[] {'q', 'I', 'I', 'p', 'd', '\u0000', '9'}, charArray0);
      assertArrayEquals(new char[] {'q', 'I', 'I', 'p', 'd', '\u0000', '9'}, charArray1);
      assertEquals(7, charArray0.length);
      assertEquals(7, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      
      long[] longArray0 = new long[0];
      ArrayUtils.swap(longArray0, (-1), 5, (-1078));
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test0564()  throws Throwable  {
      float[] floatArray0 = new float[9];
      floatArray0[0] = (-2271.21F);
      floatArray0[1] = 0.0F;
      floatArray0[2] = 216.6336F;
      floatArray0[3] = (-1.0F);
      floatArray0[4] = 0.0F;
      floatArray0[4] = (-1.0F);
      floatArray0[6] = 941.88F;
      floatArray0[7] = (-1647.477F);
      floatArray0[8] = (-1.0F);
      ArrayUtils.reverse(floatArray0);
      assertArrayEquals(new float[] {(-1.0F), (-1647.477F), 941.88F, 0.0F, (-1.0F), (-1.0F), 216.6336F, 0.0F, (-2271.21F)}, floatArray0, 0.01F);
      assertEquals(9, floatArray0.length);
      
      char[] charArray0 = new char[2];
      charArray0[0] = '8';
      charArray0[1] = 'X';
      char[] charArray1 = ArrayUtils.removeAllOccurences(charArray0, 'X');
      assertArrayEquals(new char[] {'8', 'X'}, charArray0);
      assertArrayEquals(new char[] {'8'}, charArray1);
      assertEquals(2, charArray0.length);
      assertEquals(1, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)40;
      byteArray0[1] = (byte) (-18);
      BitSet bitSet0 = ArrayUtils.indexesOf(byteArray0, (byte) (-123), (-1));
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertArrayEquals(new byte[] {(byte)40, (byte) (-18)}, byteArray0);
      assertEquals(2, byteArray0.length);
      assertNotNull(bitSet0);
      
      boolean boolean0 = ArrayUtils.isSorted(byteArray0);
      assertArrayEquals(new byte[] {(byte)40, (byte) (-18)}, byteArray0);
      assertEquals(2, byteArray0.length);
      assertFalse(boolean0);
      
      char[] charArray2 = ArrayUtils.clone(charArray1);
      assertArrayEquals(new char[] {'8'}, charArray2);
      assertArrayEquals(new char[] {'8', 'X'}, charArray0);
      assertArrayEquals(new char[] {'8'}, charArray1);
      assertEquals(1, charArray2.length);
      assertEquals(2, charArray0.length);
      assertEquals(1, charArray1.length);
      assertFalse(charArray2.equals((Object)charArray1));
      assertFalse(charArray2.equals((Object)charArray0));
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray2, charArray1);
      assertNotSame(charArray2, charArray0);
      assertNotSame(charArray0, charArray2);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray1, charArray2);
      assertNotNull(charArray2);
      
      ArrayUtils.swap((long[]) null, 1, 1, 1928);
  }

  @Test(timeout = 4000)
  public void test0565()  throws Throwable  {
      float[] floatArray0 = new float[9];
      floatArray0[0] = (-2271.21F);
      floatArray0[1] = (-2271.21F);
      floatArray0[2] = 216.6336F;
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      ArrayUtils.swap(booleanArray0, (-1), (-906));
      assertTrue(Arrays.equals(new boolean[] {false, true, true}, booleanArray0));
      assertEquals(3, booleanArray0.length);
      
      boolean boolean0 = ArrayUtils.isEmpty(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, true, true}, booleanArray0));
      assertEquals(3, booleanArray0.length);
      assertFalse(boolean0);
      
      char[] charArray0 = new char[8];
      charArray0[0] = '/';
      charArray0[1] = '<';
      charArray0[2] = '9';
      charArray0[3] = '9';
      charArray0[4] = 'H';
      charArray0[5] = '<';
      charArray0[6] = '<';
      charArray0[7] = '<';
      boolean boolean1 = ArrayUtils.isSameLength(charArray0, charArray0);
      assertArrayEquals(new char[] {'/', '<', '9', '9', 'H', '<', '<', '<'}, charArray0);
      assertEquals(8, charArray0.length);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test0566()  throws Throwable  {
      double[] doubleArray0 = ArrayUtils.clone((double[]) null);
      assertNull(doubleArray0);
      
      int int0 = ArrayUtils.indexOf((double[]) null, (double) (byte)51, 3, (-362.6216352196658));
      assertEquals((-1), int0);
      
      boolean boolean0 = ArrayUtils.isSorted((char[]) null);
      assertTrue(boolean0);
      
      Boolean boolean1 = new Boolean(false);
      assertFalse(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      assertFalse(boolean1);
      
      boolean boolean2 = ArrayUtils.contains((boolean[]) null, false);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
      
      boolean boolean3 = ArrayUtils.isSorted((short[]) null);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3);
  }

  @Test(timeout = 4000)
  public void test0567()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = new double[2];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (-1202.7635315971);
      doubleArray1[1] = (-1202.7635315971);
      double[] doubleArray2 = ArrayUtils.removeElements(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-1202.7635315971), (-1202.7635315971)}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertEquals(0, doubleArray2.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotNull(doubleArray2);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (-1202.7635315971), 100);
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotNull(bitSet0);
      
      Short[] shortArray0 = new Short[0];
      Short[] shortArray1 = ArrayUtils.nullToEmpty(shortArray0);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
  }

  @Test(timeout = 4000)
  public void test0568()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)1;
      byteArray0[2] = (byte) (-22);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)2;
      float[] floatArray0 = new float[0];
      float[] floatArray1 = ArrayUtils.addFirst(floatArray0, (float) (byte) (-118));
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-118.0F)}, floatArray1, 0.01F);
      assertEquals(0, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      
      short[] shortArray0 = new short[0];
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertNotNull(shortArray1);
      
      float[] floatArray2 = ArrayUtils.add(floatArray1, (float) (byte)1);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-118.0F)}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {(-118.0F), 1.0F}, floatArray2, 0.01F);
      assertEquals(0, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertEquals(2, floatArray2.length);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertNotSame(floatArray0, floatArray2);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray2);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray2, floatArray1);
      assertNotSame(floatArray2, floatArray0);
      assertNotNull(floatArray2);
      
      ArrayUtils.swap((Object[]) shortArray1, (int) (byte) (-22), (int) (byte)2, 0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      
      char[] charArray0 = new char[4];
      charArray0[0] = '.';
      charArray0[1] = 'U';
      charArray0[2] = '>';
      charArray0[3] = 'p';
      ArrayUtils.reverse(charArray0);
      assertArrayEquals(new char[] {'p', '>', 'U', '.'}, charArray0);
      assertEquals(4, charArray0.length);
      
      int int0 = ArrayUtils.indexOf(floatArray1, (float) 0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-118.0F)}, floatArray1, 0.01F);
      assertEquals(0, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertFalse(floatArray0.equals((Object)floatArray2));
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray2));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray0, floatArray2);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray2);
      assertNotSame(floatArray1, floatArray0);
      assertEquals((-1), int0);
      
      char[] charArray1 = ArrayUtils.addAll(charArray0, charArray0);
      assertArrayEquals(new char[] {'p', '>', 'U', '.', 'p', '>', 'U', '.'}, charArray1);
      assertArrayEquals(new char[] {'p', '>', 'U', '.'}, charArray0);
      assertEquals(8, charArray1.length);
      assertEquals(4, charArray0.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray0, charArray1);
      assertNotNull(charArray1);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) 'U';
      float[] floatArray3 = ArrayUtils.add(floatArray2, (float) (byte)0);
      assertArrayEquals(new float[] {(-118.0F), 1.0F, 0.0F}, floatArray3, 0.01F);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-118.0F)}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {(-118.0F), 1.0F}, floatArray2, 0.01F);
      assertEquals(3, floatArray3.length);
      assertEquals(0, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertEquals(2, floatArray2.length);
      assertFalse(floatArray3.equals((Object)floatArray1));
      assertFalse(floatArray3.equals((Object)floatArray2));
      assertFalse(floatArray3.equals((Object)floatArray0));
      assertFalse(floatArray0.equals((Object)floatArray2));
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray2));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertNotSame(floatArray3, floatArray1);
      assertNotSame(floatArray3, floatArray2);
      assertNotSame(floatArray3, floatArray0);
      assertNotSame(floatArray0, floatArray3);
      assertNotSame(floatArray0, floatArray2);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray2);
      assertNotSame(floatArray1, floatArray3);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray2, floatArray1);
      assertNotSame(floatArray2, floatArray0);
      assertNotSame(floatArray2, floatArray3);
      assertNotNull(floatArray3);
      
      float[] floatArray4 = ArrayUtils.clone(floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray4, 0.01F);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray4.length);
      assertFalse(floatArray0.equals((Object)floatArray3));
      assertFalse(floatArray0.equals((Object)floatArray2));
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray4.equals((Object)floatArray3));
      assertFalse(floatArray4.equals((Object)floatArray0));
      assertFalse(floatArray4.equals((Object)floatArray1));
      assertFalse(floatArray4.equals((Object)floatArray2));
      assertNotSame(floatArray0, floatArray3);
      assertNotSame(floatArray0, floatArray2);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray0, floatArray4);
      assertNotSame(floatArray4, floatArray3);
      assertNotSame(floatArray4, floatArray0);
      assertNotSame(floatArray4, floatArray1);
      assertNotSame(floatArray4, floatArray2);
      assertNotNull(floatArray4);
      
      ArrayUtils.swap(floatArray3, (int) (byte) (-22), (int) (byte)0);
      assertArrayEquals(new float[] {(-118.0F), 1.0F, 0.0F}, floatArray3, 0.01F);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-118.0F)}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {(-118.0F), 1.0F}, floatArray2, 0.01F);
      assertEquals(3, floatArray3.length);
      assertEquals(0, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertEquals(2, floatArray2.length);
      assertFalse(floatArray3.equals((Object)floatArray4));
      assertFalse(floatArray3.equals((Object)floatArray1));
      assertFalse(floatArray3.equals((Object)floatArray2));
      assertFalse(floatArray3.equals((Object)floatArray0));
      assertFalse(floatArray0.equals((Object)floatArray3));
      assertFalse(floatArray0.equals((Object)floatArray2));
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray0.equals((Object)floatArray4));
      assertFalse(floatArray1.equals((Object)floatArray2));
      assertFalse(floatArray1.equals((Object)floatArray3));
      assertFalse(floatArray1.equals((Object)floatArray4));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertFalse(floatArray2.equals((Object)floatArray3));
      assertFalse(floatArray2.equals((Object)floatArray4));
      assertNotSame(floatArray3, floatArray4);
      assertNotSame(floatArray3, floatArray1);
      assertNotSame(floatArray3, floatArray2);
      assertNotSame(floatArray3, floatArray0);
      assertNotSame(floatArray0, floatArray3);
      assertNotSame(floatArray0, floatArray2);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray0, floatArray4);
      assertNotSame(floatArray1, floatArray2);
      assertNotSame(floatArray1, floatArray3);
      assertNotSame(floatArray1, floatArray4);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray2, floatArray1);
      assertNotSame(floatArray2, floatArray0);
      assertNotSame(floatArray2, floatArray3);
      assertNotSame(floatArray2, floatArray4);
  }

  @Test(timeout = 4000)
  public void test0569()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 4026.966708;
      doubleArray0[2] = (-2101.5);
      doubleArray0[2] = 2063.283;
      int int0 = ArrayUtils.indexOf(doubleArray0, 0.0, 0);
      assertArrayEquals(new double[] {4026.966708, 0.0, 2063.283}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(1, int0);
      
      Byte byte0 = new Byte((byte) (-74));
      assertNotNull(byte0);
      assertEquals((byte) (-74), (byte)byte0);
      
      Byte byte1 = new Byte((byte) (-74));
      assertTrue(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      assertEquals((byte) (-74), (byte)byte1);
      
      Byte byte2 = new Byte((byte)75);
      assertFalse(byte2.equals((Object)byte0));
      assertFalse(byte2.equals((Object)byte1));
      assertNotNull(byte2);
      assertEquals((byte)75, (byte)byte2);
      
      Byte byte3 = new Byte((byte) (-1));
      assertFalse(byte3.equals((Object)byte1));
      assertFalse(byte3.equals((Object)byte2));
      assertFalse(byte3.equals((Object)byte0));
      assertNotNull(byte3);
      assertEquals((byte) (-1), (byte)byte3);
      
      Byte byte4 = new Byte((byte)75);
      assertFalse(byte4.equals((Object)byte3));
      assertFalse(byte4.equals((Object)byte1));
      assertTrue(byte4.equals((Object)byte2));
      assertFalse(byte4.equals((Object)byte0));
      assertNotNull(byte4);
      assertEquals((byte)75, (byte)byte4);
      
      Byte byte5 = new Byte((byte)75);
      assertFalse(byte5.equals((Object)byte0));
      assertFalse(byte5.equals((Object)byte1));
      assertTrue(byte5.equals((Object)byte2));
      assertFalse(byte5.equals((Object)byte3));
      assertTrue(byte5.equals((Object)byte4));
      assertNotNull(byte5);
      assertEquals((byte)75, (byte)byte5);
      
      Byte byte6 = new Byte((byte) (-1));
      assertFalse(byte6.equals((Object)byte5));
      assertTrue(byte6.equals((Object)byte3));
      assertFalse(byte6.equals((Object)byte2));
      assertFalse(byte6.equals((Object)byte0));
      assertFalse(byte6.equals((Object)byte4));
      assertFalse(byte6.equals((Object)byte1));
      assertNotNull(byte6);
      assertEquals((byte) (-1), (byte)byte6);
      
      Byte[] byteArray0 = new Byte[7];
      byteArray0[0] = byte2;
      byteArray0[1] = byte4;
      byteArray0[2] = byte5;
      byteArray0[3] = byte6;
      byteArray0[4] = byte2;
      byteArray0[5] = byte6;
      byteArray0[6] = byte3;
      byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0, (byte)49);
      assertArrayEquals(new byte[] {(byte)75, (byte)75, (byte)75, (byte) (-1), (byte)75, (byte) (-1), (byte) (-1)}, byteArray1);
      assertEquals(7, byteArray1.length);
      assertEquals(7, byteArray0.length);
      assertNotNull(byteArray1);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) 1;
      floatArray0[1] = 3950.151F;
      float[] floatArray1 = ArrayUtils.add(floatArray0, 1.0F);
      assertArrayEquals(new float[] {1.0F, 3950.151F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {1.0F, 3950.151F, 1.0F}, floatArray1, 0.01F);
      assertEquals(2, floatArray0.length);
      assertEquals(3, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      
      char[] charArray0 = new char[7];
      charArray0[0] = 'l';
      charArray0[1] = '@';
      charArray0[2] = ']';
      charArray0[3] = 'H';
      charArray0[4] = 't';
      charArray0[5] = '+';
      charArray0[6] = ';';
      int int1 = ArrayUtils.indexOf(charArray0, 'R');
      assertArrayEquals(new char[] {'l', '@', ']', 'H', 't', '+', ';'}, charArray0);
      assertEquals(7, charArray0.length);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test0570()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[1] = 'D';
      boolean boolean0 = ArrayUtils.isNotEmpty(charArray0);
      assertArrayEquals(new char[] {'\u0000', 'D'}, charArray0);
      assertEquals(2, charArray0.length);
      assertTrue(boolean0);
      
      Byte byte0 = new Byte((byte)0);
      assertNotNull(byte0);
      assertEquals((byte)0, (byte)byte0);
      
      Byte[] byteArray0 = new Byte[0];
      byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0, (byte)0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotNull(byteArray1);
  }

  @Test(timeout = 4000)
  public void test0571()  throws Throwable  {
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short) (-1263);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) (short) (-430);
      int int0 = ArrayUtils.indexOf(doubleArray0, 2957.083, 701);
      assertArrayEquals(new double[] {0.0, (-430.0)}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals((-1), int0);
      
      Byte byte0 = new Byte((byte) (-74));
      assertNotNull(byte0);
      assertEquals((byte) (-74), (byte)byte0);
      
      Byte byte1 = new Byte((byte)9);
      assertFalse(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      assertEquals((byte)9, (byte)byte1);
      
      Byte byte2 = new Byte((byte)9);
      assertTrue(byte2.equals((Object)byte1));
      assertFalse(byte2.equals((Object)byte0));
      assertNotNull(byte2);
      assertEquals((byte)9, (byte)byte2);
      
      Byte byte3 = new Byte((byte) (-1));
      assertFalse(byte3.equals((Object)byte2));
      assertFalse(byte3.equals((Object)byte1));
      assertFalse(byte3.equals((Object)byte0));
      assertNotNull(byte3);
      assertEquals((byte) (-1), (byte)byte3);
      
      Byte byte4 = new Byte((byte)9);
      assertTrue(byte4.equals((Object)byte1));
      assertFalse(byte4.equals((Object)byte0));
      assertTrue(byte4.equals((Object)byte2));
      assertFalse(byte4.equals((Object)byte3));
      assertNotNull(byte4);
      assertEquals((byte)9, (byte)byte4);
      
      Byte byte5 = new Byte((byte)0);
      assertFalse(byte5.equals((Object)byte4));
      assertFalse(byte5.equals((Object)byte2));
      assertFalse(byte5.equals((Object)byte3));
      assertFalse(byte5.equals((Object)byte1));
      assertFalse(byte5.equals((Object)byte0));
      assertNotNull(byte5);
      assertEquals((byte)0, (byte)byte5);
      
      Byte byte6 = new Byte((byte)75);
      assertFalse(byte6.equals((Object)byte0));
      assertFalse(byte6.equals((Object)byte2));
      assertFalse(byte6.equals((Object)byte1));
      assertFalse(byte6.equals((Object)byte4));
      assertFalse(byte6.equals((Object)byte5));
      assertFalse(byte6.equals((Object)byte3));
      assertNotNull(byte6);
      assertEquals((byte)75, (byte)byte6);
      
      Byte[] byteArray0 = new Byte[0];
      byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0, (byte) (-1));
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotNull(byteArray1);
      
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) 701;
      floatArray0[1] = (float) (byte)0;
      floatArray0[2] = (float) (byte) (-74);
      floatArray0[3] = (float) 0;
      floatArray0[4] = (float) (short) (-1263);
      floatArray0[5] = (float) (short) (-1263);
      floatArray0[6] = (float) (short) (-1263);
      floatArray0[7] = 3950.151F;
      floatArray0[8] = (float) (byte) (-1);
      float[] floatArray1 = ArrayUtils.add(floatArray0, (-373.0F));
      assertArrayEquals(new float[] {701.0F, 0.0F, (-74.0F), 0.0F, (-1263.0F), (-1263.0F), (-1263.0F), 3950.151F, (-1.0F), (-373.0F)}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {701.0F, 0.0F, (-74.0F), 0.0F, (-1263.0F), (-1263.0F), (-1263.0F), 3950.151F, (-1.0F)}, floatArray0, 0.01F);
      assertEquals(10, floatArray1.length);
      assertEquals(9, floatArray0.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertNotNull(floatArray1);
  }

  @Test(timeout = 4000)
  public void test0572()  throws Throwable  {
      Character[] characterArray0 = new Character[0];
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, characterArray0.length);
      assertEquals(0, charArray0.length);
      assertNotNull(charArray0);
      
      int[] intArray0 = new int[0];
      int int0 = ArrayUtils.indexOf(intArray0, 2122);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertEquals((-1), int0);
      
      AbstractMap.SimpleImmutableEntry<Double, Double> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Double, Double>((Double) null, (Double) null);
      assertNotNull(abstractMap_SimpleImmutableEntry0);
      
      AbstractMap.SimpleImmutableEntry<Double, Double>[] abstractMap_SimpleImmutableEntryArray0 = (AbstractMap.SimpleImmutableEntry<Double, Double>[]) Array.newInstance(AbstractMap.SimpleImmutableEntry.class, 6);
      abstractMap_SimpleImmutableEntryArray0[0] = abstractMap_SimpleImmutableEntry0;
      abstractMap_SimpleImmutableEntryArray0[1] = abstractMap_SimpleImmutableEntry0;
      abstractMap_SimpleImmutableEntryArray0[2] = abstractMap_SimpleImmutableEntry0;
      abstractMap_SimpleImmutableEntryArray0[3] = abstractMap_SimpleImmutableEntry0;
      abstractMap_SimpleImmutableEntryArray0[4] = abstractMap_SimpleImmutableEntry0;
      abstractMap_SimpleImmutableEntryArray0[5] = abstractMap_SimpleImmutableEntry0;
      Comparator<AbstractMap.SimpleImmutableEntry<Double, Double>> comparator0 = (Comparator<AbstractMap.SimpleImmutableEntry<Double, Double>>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0, 0).when(comparator0).compare(any(java.util.AbstractMap.SimpleImmutableEntry.class) , any(java.util.AbstractMap.SimpleImmutableEntry.class));
      boolean boolean0 = ArrayUtils.isSorted(abstractMap_SimpleImmutableEntryArray0, comparator0);
      assertEquals(6, abstractMap_SimpleImmutableEntryArray0.length);
      assertTrue(boolean0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(charArray0, '#', 2122);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, characterArray0.length);
      assertEquals(0, charArray0.length);
      assertNotNull(bitSet0);
      
      int[] intArray1 = ArrayUtils.nullToEmpty(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
  }

  @Test(timeout = 4000)
  public void test0573()  throws Throwable  {
      Boolean[] booleanArray0 = new Boolean[3];
      Boolean boolean0 = Boolean.valueOf((String) null);
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      booleanArray0[0] = boolean0;
      Boolean boolean1 = Boolean.valueOf("");
      assertNotNull(boolean1);
      assertFalse(boolean1);
      
      booleanArray0[1] = boolean1;
      Boolean boolean2 = Boolean.valueOf("");
      assertNotNull(boolean2);
      assertFalse(boolean2);
      
      booleanArray0[2] = boolean2;
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0, (boolean) boolean0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray1));
      assertEquals(3, booleanArray0.length);
      assertEquals(3, booleanArray1.length);
      assertNotNull(booleanArray1);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 45.0;
      doubleArray0[1] = 1.0;
      char[] charArray0 = new char[9];
      charArray0[0] = 'O';
      charArray0[1] = 'a';
      charArray0[2] = 'O';
      charArray0[3] = 'a';
      charArray0[4] = '@';
      charArray0[5] = '\'';
      charArray0[6] = 'a';
      charArray0[7] = '+';
      charArray0[8] = '@';
      int int0 = 11;
      ArrayUtils.shift(charArray0, 11, (-42), 11);
      assertArrayEquals(new char[] {'O', 'a', 'O', 'a', '@', '\'', 'a', '+', '@'}, charArray0);
      assertEquals(9, charArray0.length);
      
      Integer[] integerArray0 = new Integer[6];
      Integer integer0 = new Integer(11);
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(integer0);
      assertEquals(11, (int)integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(1686);
      assertFalse(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(1686, (int)integer1);
      
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(2376);
      assertFalse(integer2.equals((Object)int0));
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      assertNotNull(integer2);
      assertEquals(2376, (int)integer2);
      
      integerArray0[2] = integer2;
      Integer integer3 = Integer.valueOf((int) integerArray0[1]);
      assertEquals(6, integerArray0.length);
      assertTrue(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)int0));
      assertFalse(integer3.equals((Object)integer2));
      assertNotNull(integer3);
      assertEquals(1686, (int)integer3);
      
      integerArray0[3] = integer3;
      Integer integer4 = new Integer(2220);
      assertFalse(integer4.equals((Object)integer3));
      assertFalse(integer4.equals((Object)integer1));
      assertFalse(integer4.equals((Object)integer0));
      assertFalse(integer4.equals((Object)integer2));
      assertFalse(integer4.equals((Object)int0));
      assertNotNull(integer4);
      assertEquals(2220, (int)integer4);
      
      integerArray0[4] = integer4;
      Integer integer5 = new Integer(int0);
      assertFalse(integer5.equals((Object)integer2));
      assertTrue(integer5.equals((Object)integer0));
      assertFalse(integer5.equals((Object)integer3));
      assertFalse(integer5.equals((Object)integer4));
      assertFalse(integer5.equals((Object)integer1));
      assertTrue(integer5.equals((Object)int0));
      assertNotNull(integer5);
      assertEquals(11, (int)integer5);
      
      integerArray0[5] = integer5;
      boolean boolean3 = ArrayUtils.isSorted(integerArray0);
      assertEquals(6, integerArray0.length);
      assertFalse(boolean3);
  }

  @Test(timeout = 4000)
  public void test0574()  throws Throwable  {
      Long[] longArray0 = new Long[0];
      boolean boolean0 = ArrayUtils.isSorted(longArray0);
      assertEquals(0, longArray0.length);
      assertTrue(boolean0);
      
      int[] intArray0 = new int[1];
      intArray0[0] = 2;
      int[] intArray1 = ArrayUtils.subarray(intArray0, 2, (-2143655691));
      assertArrayEquals(new int[] {2}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(1, intArray0.length);
      assertEquals(0, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      
      Character[] characterArray0 = new Character[7];
      char char0 = '1';
      Character character0 = Character.valueOf('1');
      assertNotNull(character0);
      assertEquals('1', (char)character0);
      
      characterArray0[0] = character0;
      Character character1 = new Character('0');
      assertFalse(character1.equals((Object)character0));
      assertFalse(character1.equals((Object)char0));
      assertNotNull(character1);
      assertEquals('0', (char)character1);
      
      characterArray0[1] = character1;
      Character character2 = Character.valueOf('1');
      assertFalse(character2.equals((Object)character1));
      assertNotNull(character2);
      assertEquals('1', (char)character2);
      
      characterArray0[2] = character2;
      Character character3 = Character.valueOf(char0);
      assertFalse(character3.equals((Object)character1));
      assertNotNull(character3);
      assertEquals('1', (char)character3);
      
      characterArray0[3] = character3;
      Character character4 = new Character(char0);
      assertFalse(character4.equals((Object)character1));
      assertTrue(character4.equals((Object)character0));
      assertTrue(character4.equals((Object)character3));
      assertTrue(character4.equals((Object)character2));
      assertTrue(character4.equals((Object)char0));
      assertNotNull(character4);
      assertEquals('1', (char)character4);
      
      characterArray0[4] = character4;
      Character character5 = Character.valueOf('q');
      assertFalse(character5.equals((Object)char0));
      assertFalse(character5.equals((Object)character0));
      assertFalse(character5.equals((Object)character3));
      assertFalse(character5.equals((Object)character2));
      assertFalse(character5.equals((Object)character1));
      assertFalse(character5.equals((Object)character4));
      assertNotNull(character5);
      assertEquals('q', (char)character5);
      
      characterArray0[5] = character5;
      Character character6 = Character.valueOf('Q');
      assertFalse(character6.equals((Object)character4));
      assertFalse(character6.equals((Object)character2));
      assertFalse(character6.equals((Object)character1));
      assertFalse(character6.equals((Object)character3));
      assertFalse(character6.equals((Object)character0));
      assertFalse(character6.equals((Object)char0));
      assertFalse(character6.equals((Object)character5));
      assertNotNull(character6);
      assertEquals('Q', (char)character6);
      
      characterArray0[6] = character6;
      // Undeclared exception!
      try { 
        ArrayUtils.remove(characterArray0, (-2143655691));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -2143655691, Length: 7
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0575()  throws Throwable  {
      long[] longArray0 = new long[6];
      longArray0[0] = 113L;
      Double double0 = new Double((-1.0));
      assertNotNull(double0);
      assertEquals((-1.0), (double)double0, 0.01);
      
      Double double1 = new Double(0.0);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      assertEquals(0.0, (double)double1, 0.01);
      
      AbstractMap.SimpleImmutableEntry<Double, Double> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Double, Double>(double1, double1);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertNotNull(abstractMap_SimpleImmutableEntry0);
      
      AbstractMap.SimpleImmutableEntry<Double, Double>[] abstractMap_SimpleImmutableEntryArray0 = (AbstractMap.SimpleImmutableEntry<Double, Double>[]) Array.newInstance(AbstractMap.SimpleImmutableEntry.class, 0);
      Comparator<AbstractMap.SimpleImmutableEntry<Double, Double>> comparator0 = (Comparator<AbstractMap.SimpleImmutableEntry<Double, Double>>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = ArrayUtils.isSorted(abstractMap_SimpleImmutableEntryArray0, comparator0);
      assertEquals(0, abstractMap_SimpleImmutableEntryArray0.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0576()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      Long long0 = new Long((-1L));
      assertNotNull(long0);
      assertEquals((-1L), (long)long0);
      
      Long long1 = new Long(623L);
      assertFalse(long1.equals((Object)long0));
      assertNotNull(long1);
      assertEquals(623L, (long)long1);
      
      Long long2 = new Long(1L);
      assertFalse(long2.equals((Object)long1));
      assertFalse(long2.equals((Object)long0));
      assertNotNull(long2);
      assertEquals(1L, (long)long2);
      
      Long long3 = new Long((-761L));
      assertFalse(long3.equals((Object)long1));
      assertFalse(long3.equals((Object)long0));
      assertFalse(long3.equals((Object)long2));
      assertNotNull(long3);
      assertEquals((-761L), (long)long3);
      
      Long long4 = new Long((-1205L));
      assertFalse(long4.equals((Object)long3));
      assertFalse(long4.equals((Object)long1));
      assertFalse(long4.equals((Object)long0));
      assertFalse(long4.equals((Object)long2));
      assertNotNull(long4);
      assertEquals((-1205L), (long)long4);
      
      Long long5 = new Long((-761L));
      assertFalse(long5.equals((Object)long0));
      assertTrue(long5.equals((Object)long3));
      assertFalse(long5.equals((Object)long2));
      assertFalse(long5.equals((Object)long4));
      assertFalse(long5.equals((Object)long1));
      assertNotNull(long5);
      assertEquals((-761L), (long)long5);
      
      Long[] longArray0 = new Long[6];
      Long long6 = new Long((-785));
      assertFalse(long6.equals((Object)long3));
      assertFalse(long6.equals((Object)long2));
      assertFalse(long6.equals((Object)long5));
      assertFalse(long6.equals((Object)long0));
      assertFalse(long6.equals((Object)long4));
      assertFalse(long6.equals((Object)long1));
      assertNotNull(long6);
      assertEquals((-785L), (long)long6);
      
      Long long7 = Long.getLong("oOad2(Mwz+", long6);
      assertFalse(long6.equals((Object)long3));
      assertFalse(long6.equals((Object)long2));
      assertFalse(long6.equals((Object)long5));
      assertFalse(long6.equals((Object)long0));
      assertFalse(long6.equals((Object)long4));
      assertFalse(long6.equals((Object)long1));
      assertFalse(long7.equals((Object)long5));
      assertFalse(long7.equals((Object)long1));
      assertFalse(long7.equals((Object)long4));
      assertFalse(long7.equals((Object)long0));
      assertFalse(long7.equals((Object)long2));
      assertFalse(long7.equals((Object)long3));
      assertNotNull(long7);
      assertEquals((-785L), (long)long7);
      
      longArray0[0] = long7;
      longArray0[1] = long2;
      longArray0[2] = long2;
      longArray0[3] = long4;
      longArray0[4] = long1;
      longArray0[5] = long5;
      Long[] longArray1 = ArrayUtils.subarray(longArray0, (-785), 5);
      assertEquals(5, longArray1.length);
      assertEquals(6, longArray0.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray0, longArray1);
      assertNotNull(longArray1);
      
      int[] intArray0 = new int[7];
      intArray0[0] = 88;
      intArray0[1] = 5;
      intArray0[2] = (-785);
      intArray0[3] = (-785);
      intArray0[4] = 88;
      intArray0[5] = 88;
      intArray0[6] = 88;
      int[] intArray1 = ArrayUtils.removeElement(intArray0, 777);
      assertArrayEquals(new int[] {88, 5, (-785), (-785), 88, 88, 88}, intArray0);
      assertArrayEquals(new int[] {88, 5, (-785), (-785), 88, 88, 88}, intArray1);
      assertEquals(7, intArray0.length);
      assertEquals(7, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      
      AbstractMap.SimpleImmutableEntry<Double, Double>[] abstractMap_SimpleImmutableEntryArray0 = (AbstractMap.SimpleImmutableEntry<Double, Double>[]) Array.newInstance(AbstractMap.SimpleImmutableEntry.class, 9);
      Double double0 = new Double((-2725.1987075));
      assertNotNull(double0);
      assertEquals((-2725.1987075), (double)double0, 0.01);
      
      Double double1 = new Double((-126.39));
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      assertEquals((-126.39), (double)double1, 0.01);
      
      AbstractMap.SimpleEntry<Double, Double> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Double, Double>(double0, double1);
      assertNotEquals((double)double0, (double)double1, 0.01);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertNotNull(abstractMap_SimpleEntry0);
      
      AbstractMap.SimpleEntry<Double, Double> abstractMap_SimpleEntry1 = new AbstractMap.SimpleEntry<Double, Double>(abstractMap_SimpleEntry0);
      assertNotEquals((double)double0, (double)double1, 0.01);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertNotNull(abstractMap_SimpleEntry1);
      
      AbstractMap.SimpleImmutableEntry<Double, Double> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Double, Double>(abstractMap_SimpleEntry1);
      assertNotEquals((double)double0, (double)double1, 0.01);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertNotNull(abstractMap_SimpleImmutableEntry0);
      
      abstractMap_SimpleImmutableEntryArray0[0] = abstractMap_SimpleImmutableEntry0;
      Double double2 = new Double((-1437.84830558));
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertNotNull(double2);
      assertEquals((-1437.84830558), (double)double2, 0.01);
      
      AbstractMap.SimpleImmutableEntry<Double, Double> abstractMap_SimpleImmutableEntry1 = new AbstractMap.SimpleImmutableEntry<Double, Double>(double2, double2);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertFalse(abstractMap_SimpleImmutableEntry1.equals((Object)abstractMap_SimpleImmutableEntry0));
      assertNotNull(abstractMap_SimpleImmutableEntry1);
      
      abstractMap_SimpleImmutableEntryArray0[1] = abstractMap_SimpleImmutableEntry1;
      AbstractMap.SimpleImmutableEntry<Double, Double> abstractMap_SimpleImmutableEntry2 = new AbstractMap.SimpleImmutableEntry<Double, Double>(abstractMap_SimpleImmutableEntry1);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertFalse(abstractMap_SimpleImmutableEntry1.equals((Object)abstractMap_SimpleImmutableEntry0));
      assertTrue(abstractMap_SimpleImmutableEntry2.equals((Object)abstractMap_SimpleImmutableEntry1));
      assertFalse(abstractMap_SimpleImmutableEntry2.equals((Object)abstractMap_SimpleImmutableEntry0));
      assertNotNull(abstractMap_SimpleImmutableEntry2);
      
      abstractMap_SimpleImmutableEntryArray0[2] = abstractMap_SimpleImmutableEntry2;
      AbstractMap.SimpleImmutableEntry<Double, Double> abstractMap_SimpleImmutableEntry3 = new AbstractMap.SimpleImmutableEntry<Double, Double>(abstractMap_SimpleImmutableEntry2);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertFalse(abstractMap_SimpleImmutableEntry1.equals((Object)abstractMap_SimpleImmutableEntry0));
      assertTrue(abstractMap_SimpleImmutableEntry1.equals((Object)abstractMap_SimpleImmutableEntry2));
      assertTrue(abstractMap_SimpleImmutableEntry2.equals((Object)abstractMap_SimpleImmutableEntry1));
      assertFalse(abstractMap_SimpleImmutableEntry2.equals((Object)abstractMap_SimpleImmutableEntry0));
      assertTrue(abstractMap_SimpleImmutableEntry3.equals((Object)abstractMap_SimpleImmutableEntry1));
      assertFalse(abstractMap_SimpleImmutableEntry3.equals((Object)abstractMap_SimpleImmutableEntry0));
      assertTrue(abstractMap_SimpleImmutableEntry3.equals((Object)abstractMap_SimpleImmutableEntry2));
      assertNotNull(abstractMap_SimpleImmutableEntry3);
      
      abstractMap_SimpleImmutableEntryArray0[3] = abstractMap_SimpleImmutableEntry3;
      AbstractMap.SimpleImmutableEntry<Double, Double> abstractMap_SimpleImmutableEntry4 = new AbstractMap.SimpleImmutableEntry<Double, Double>(double1, double2);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertFalse(abstractMap_SimpleImmutableEntry4.equals((Object)abstractMap_SimpleImmutableEntry2));
      assertFalse(abstractMap_SimpleImmutableEntry4.equals((Object)abstractMap_SimpleImmutableEntry1));
      assertFalse(abstractMap_SimpleImmutableEntry4.equals((Object)abstractMap_SimpleImmutableEntry0));
      assertFalse(abstractMap_SimpleImmutableEntry4.equals((Object)abstractMap_SimpleImmutableEntry3));
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertNotEquals((double)double1, (double)double2, 0.01);
      assertNotNull(abstractMap_SimpleImmutableEntry4);
      
      abstractMap_SimpleImmutableEntryArray0[4] = abstractMap_SimpleImmutableEntry4;
      Double double3 = new Double((-1.0));
      assertNotEquals((double)double3, (double)double2, 0.01);
      assertNotEquals((double)double3, (double)double1, 0.01);
      assertNotEquals((double)double3, (double)double0, 0.01);
      assertNotNull(double3);
      assertEquals((-1.0), (double)double3, 0.01);
      
      AbstractMap.SimpleImmutableEntry<Double, Double> abstractMap_SimpleImmutableEntry5 = new AbstractMap.SimpleImmutableEntry<Double, Double>(double3, double0);
      assertNotEquals((double)double3, (double)double2, 0.01);
      assertNotEquals((double)double3, (double)double1, 0.01);
      assertNotEquals((double)double3, (double)double0, 0.01);
      assertFalse(abstractMap_SimpleImmutableEntry5.equals((Object)abstractMap_SimpleImmutableEntry1));
      assertFalse(abstractMap_SimpleImmutableEntry5.equals((Object)abstractMap_SimpleImmutableEntry0));
      assertFalse(abstractMap_SimpleImmutableEntry5.equals((Object)abstractMap_SimpleImmutableEntry4));
      assertFalse(abstractMap_SimpleImmutableEntry5.equals((Object)abstractMap_SimpleImmutableEntry3));
      assertFalse(abstractMap_SimpleImmutableEntry5.equals((Object)abstractMap_SimpleImmutableEntry2));
      assertNotEquals((double)double0, (double)double3, 0.01);
      assertNotEquals((double)double0, (double)double1, 0.01);
      assertNotEquals((double)double0, (double)double2, 0.01);
      assertNotNull(abstractMap_SimpleImmutableEntry5);
      
      abstractMap_SimpleImmutableEntryArray0[5] = abstractMap_SimpleImmutableEntry5;
      Double double4 = new Double(1.5);
      assertNotEquals((double)double4, (double)double2, 0.01);
      assertNotEquals((double)double4, (double)double0, 0.01);
      assertNotEquals((double)double4, (double)double3, 0.01);
      assertNotEquals((double)double4, (double)double1, 0.01);
      assertNotNull(double4);
      assertEquals(1.5, (double)double4, 0.01);
      
      AbstractMap.SimpleImmutableEntry<Double, Double> abstractMap_SimpleImmutableEntry6 = new AbstractMap.SimpleImmutableEntry<Double, Double>(double4, double0);
      assertNotEquals((double)double0, (double)double3, 0.01);
      assertNotEquals((double)double0, (double)double1, 0.01);
      assertNotEquals((double)double0, (double)double2, 0.01);
      assertNotEquals((double)double0, (double)double4, 0.01);
      assertNotEquals((double)double4, (double)double2, 0.01);
      assertNotEquals((double)double4, (double)double0, 0.01);
      assertNotEquals((double)double4, (double)double3, 0.01);
      assertNotEquals((double)double4, (double)double1, 0.01);
      assertFalse(abstractMap_SimpleImmutableEntry6.equals((Object)abstractMap_SimpleImmutableEntry2));
      assertFalse(abstractMap_SimpleImmutableEntry6.equals((Object)abstractMap_SimpleImmutableEntry3));
      assertFalse(abstractMap_SimpleImmutableEntry6.equals((Object)abstractMap_SimpleImmutableEntry1));
      assertFalse(abstractMap_SimpleImmutableEntry6.equals((Object)abstractMap_SimpleImmutableEntry0));
      assertFalse(abstractMap_SimpleImmutableEntry6.equals((Object)abstractMap_SimpleImmutableEntry4));
      assertFalse(abstractMap_SimpleImmutableEntry6.equals((Object)abstractMap_SimpleImmutableEntry5));
      assertNotNull(abstractMap_SimpleImmutableEntry6);
      
      abstractMap_SimpleImmutableEntryArray0[6] = abstractMap_SimpleImmutableEntry6;
      Double double5 = new Double((-1597.5311787973));
      assertNotEquals((double)double5, (double)double0, 0.01);
      assertNotEquals((double)double5, (double)double3, 0.01);
      assertNotEquals((double)double5, (double)double1, 0.01);
      assertNotEquals((double)double5, (double)double2, 0.01);
      assertNotEquals((double)double5, (double)double4, 0.01);
      assertNotNull(double5);
      assertEquals((-1597.5311787973), (double)double5, 0.01);
      
      AbstractMap.SimpleEntry<Double, Double> abstractMap_SimpleEntry2 = new AbstractMap.SimpleEntry<Double, Double>(double5, double4);
      assertNotEquals((double)double5, (double)double0, 0.01);
      assertNotEquals((double)double5, (double)double3, 0.01);
      assertNotEquals((double)double5, (double)double1, 0.01);
      assertNotEquals((double)double5, (double)double2, 0.01);
      assertNotEquals((double)double5, (double)double4, 0.01);
      assertNotEquals((double)double4, (double)double2, 0.01);
      assertNotEquals((double)double4, (double)double0, 0.01);
      assertNotEquals((double)double4, (double)double3, 0.01);
      assertNotEquals((double)double4, (double)double5, 0.01);
      assertNotEquals((double)double4, (double)double1, 0.01);
      assertNotNull(abstractMap_SimpleEntry2);
      
      AbstractMap.SimpleImmutableEntry<Double, Double> abstractMap_SimpleImmutableEntry7 = new AbstractMap.SimpleImmutableEntry<Double, Double>(abstractMap_SimpleEntry2);
      assertNotEquals((double)double5, (double)double0, 0.01);
      assertNotEquals((double)double5, (double)double3, 0.01);
      assertNotEquals((double)double5, (double)double1, 0.01);
      assertNotEquals((double)double5, (double)double2, 0.01);
      assertNotEquals((double)double5, (double)double4, 0.01);
      assertFalse(abstractMap_SimpleImmutableEntry7.equals((Object)abstractMap_SimpleImmutableEntry2));
      assertFalse(abstractMap_SimpleImmutableEntry7.equals((Object)abstractMap_SimpleImmutableEntry3));
      assertFalse(abstractMap_SimpleImmutableEntry7.equals((Object)abstractMap_SimpleImmutableEntry1));
      assertFalse(abstractMap_SimpleImmutableEntry7.equals((Object)abstractMap_SimpleImmutableEntry0));
      assertFalse(abstractMap_SimpleImmutableEntry7.equals((Object)abstractMap_SimpleImmutableEntry4));
      assertFalse(abstractMap_SimpleImmutableEntry7.equals((Object)abstractMap_SimpleImmutableEntry5));
      assertFalse(abstractMap_SimpleImmutableEntry7.equals((Object)abstractMap_SimpleImmutableEntry6));
      assertNotEquals((double)double4, (double)double2, 0.01);
      assertNotEquals((double)double4, (double)double0, 0.01);
      assertNotEquals((double)double4, (double)double3, 0.01);
      assertNotEquals((double)double4, (double)double5, 0.01);
      assertNotEquals((double)double4, (double)double1, 0.01);
      assertNotNull(abstractMap_SimpleImmutableEntry7);
      
      abstractMap_SimpleImmutableEntryArray0[7] = abstractMap_SimpleImmutableEntry7;
      Double double6 = new Double((-761L));
      assertNotEquals((double)double6, (double)double3, 0.01);
      assertNotEquals((double)double6, (double)double5, 0.01);
      assertNotEquals((double)double6, (double)double2, 0.01);
      assertNotEquals((double)double6, (double)double4, 0.01);
      assertNotEquals((double)double6, (double)double1, 0.01);
      assertNotEquals((double)double6, (double)double0, 0.01);
      assertNotNull(double6);
      assertEquals((-761.0), (double)double6, 0.01);
      
      AbstractMap.SimpleImmutableEntry<Double, Double> abstractMap_SimpleImmutableEntry8 = new AbstractMap.SimpleImmutableEntry<Double, Double>(double3, double6);
      assertNotEquals((double)double6, (double)double3, 0.01);
      assertNotEquals((double)double6, (double)double5, 0.01);
      assertNotEquals((double)double6, (double)double2, 0.01);
      assertNotEquals((double)double6, (double)double4, 0.01);
      assertNotEquals((double)double6, (double)double1, 0.01);
      assertNotEquals((double)double6, (double)double0, 0.01);
      assertFalse(abstractMap_SimpleImmutableEntry8.equals((Object)abstractMap_SimpleImmutableEntry5));
      assertFalse(abstractMap_SimpleImmutableEntry8.equals((Object)abstractMap_SimpleImmutableEntry6));
      assertFalse(abstractMap_SimpleImmutableEntry8.equals((Object)abstractMap_SimpleImmutableEntry4));
      assertFalse(abstractMap_SimpleImmutableEntry8.equals((Object)abstractMap_SimpleImmutableEntry1));
      assertFalse(abstractMap_SimpleImmutableEntry8.equals((Object)abstractMap_SimpleImmutableEntry7));
      assertFalse(abstractMap_SimpleImmutableEntry8.equals((Object)abstractMap_SimpleImmutableEntry2));
      assertFalse(abstractMap_SimpleImmutableEntry8.equals((Object)abstractMap_SimpleImmutableEntry3));
      assertFalse(abstractMap_SimpleImmutableEntry8.equals((Object)abstractMap_SimpleImmutableEntry0));
      assertNotEquals((double)double3, (double)double6, 0.01);
      assertNotEquals((double)double3, (double)double2, 0.01);
      assertNotEquals((double)double3, (double)double4, 0.01);
      assertNotEquals((double)double3, (double)double1, 0.01);
      assertNotEquals((double)double3, (double)double0, 0.01);
      assertNotEquals((double)double3, (double)double5, 0.01);
      assertNotNull(abstractMap_SimpleImmutableEntry8);
      
      abstractMap_SimpleImmutableEntryArray0[8] = abstractMap_SimpleImmutableEntry8;
      Comparator<AbstractMap.SimpleImmutableEntry<Double, Double>> comparator0 = (Comparator<AbstractMap.SimpleImmutableEntry<Double, Double>>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0, 0).when(comparator0).compare(any(java.util.AbstractMap.SimpleImmutableEntry.class) , any(java.util.AbstractMap.SimpleImmutableEntry.class));
      boolean boolean0 = ArrayUtils.isSorted(abstractMap_SimpleImmutableEntryArray0, comparator0);
      assertEquals(9, abstractMap_SimpleImmutableEntryArray0.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0577()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 'Y';
      doubleArray0[1] = (double) 'Y';
      doubleArray0[2] = (double) 'Y';
      doubleArray0[3] = (double) 'Y';
      doubleArray0[4] = (double) 'Y';
      doubleArray0[5] = (double) 'Y';
      ArrayUtils.reverse(doubleArray0);
      assertArrayEquals(new double[] {89.0, 89.0, 89.0, 89.0, 89.0, 89.0}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      
      float[] floatArray0 = new float[0];
      ArrayUtils.reverse(floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
      
      float[] floatArray1 = ArrayUtils.add(floatArray0, 0.0F);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F}, floatArray1, 0.01F);
      assertEquals(0, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      
      float[] floatArray2 = ArrayUtils.clone(floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray2, 0.01F);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray2.length);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray0, floatArray2);
      assertNotSame(floatArray2, floatArray0);
      assertNotSame(floatArray2, floatArray1);
      assertNotNull(floatArray2);
      
      ArrayUtils.swap(floatArray1, 1670, 1670);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F}, floatArray1, 0.01F);
      assertEquals(0, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray0.equals((Object)floatArray2));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertFalse(floatArray1.equals((Object)floatArray2));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray0, floatArray2);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray1, floatArray2);
      
      int int0 = ArrayUtils.indexOf(floatArray2, (float) 1670);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray2, 0.01F);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray2.length);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray0.equals((Object)floatArray2));
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray0, floatArray2);
      assertNotSame(floatArray2, floatArray0);
      assertNotSame(floatArray2, floatArray1);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0578()  throws Throwable  {
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short) (-1);
      shortArray0[1] = (short)43;
      char[] charArray0 = new char[7];
      charArray0[0] = '2';
      charArray0[1] = '0';
      charArray0[2] = '0';
      charArray0[3] = '0';
      charArray0[4] = '0';
      charArray0[5] = '0';
      charArray0[6] = '0';
      char[] charArray1 = ArrayUtils.removeElement(charArray0, ' ');
      assertArrayEquals(new char[] {'2', '0', '0', '0', '0', '0', '0'}, charArray0);
      assertArrayEquals(new char[] {'2', '0', '0', '0', '0', '0', '0'}, charArray1);
      assertEquals(7, charArray0.length);
      assertEquals(7, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      
      float[] floatArray0 = new float[0];
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray0, 1.0F);
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
      assertNotNull(bitSet0);
      
      int[] intArray0 = new int[7];
      intArray0[0] = (int) '0';
      intArray0[1] = (int) '0';
      intArray0[2] = (int) (short) (-1);
      intArray0[3] = (int) (short)43;
      intArray0[4] = (int) '0';
      intArray0[5] = (int) '0';
      float[] floatArray1 = ArrayUtils.removeElement(floatArray0, (-4059.0F));
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray1.length);
      assertEquals(0, floatArray0.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertNotNull(floatArray1);
  }

  @Test(timeout = 4000)
  public void test0579()  throws Throwable  {
      short[] shortArray0 = new short[8];
      short short0 = (short) (-13);
      shortArray0[1] = (short)43;
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) (short) (-13);
      floatArray0[1] = (float) (short) (-13);
      floatArray0[2] = (float) (short) (-13);
      floatArray0[3] = (float) (short)43;
      floatArray0[4] = (float) (short)43;
      floatArray0[5] = (float) (short)43;
      floatArray0[6] = (float) (short)43;
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray0, (-13.0F), (int) (short)43);
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertArrayEquals(new float[] {(-13.0F), (-13.0F), (-13.0F), 43.0F, 43.0F, 43.0F, 43.0F}, floatArray0, 0.01F);
      assertEquals(7, floatArray0.length);
      assertNotNull(bitSet0);
      
      // Undeclared exception!
      try { 
        bitSet0.get(120, 0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // fromIndex: 120 > toIndex: 0
         //
         verifyException("java.util.BitSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test0580()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      ArrayUtils.swap((int[]) null, (-2147184749), (-2147184749), (-2147184749));
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      double double0 = mockRandom0.nextGaussian();
      assertEquals(0.0, double0, 0.01);
      
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) true;
      objectArray0[1] = (Object) true;
      Object object0 = ArrayUtils.get(objectArray0, 0);
      assertEquals(2, objectArray0.length);
      assertNotNull(object0);
      assertEquals(true, object0);
      
      ArrayUtils.shuffle(objectArray0, (Random) mockRandom0);
      assertEquals(2, objectArray0.length);
      
      MutableInt mutableInt0 = new MutableInt(0);
      assertEquals(0, (int)mutableInt0.toInteger());
      assertEquals(0.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(0, (int)mutableInt0.getValue());
      assertEquals((byte)0, mutableInt0.byteValue());
      assertEquals(0.0, mutableInt0.doubleValue(), 0.01);
      assertEquals("0", mutableInt0.toString());
      assertEquals((short)0, mutableInt0.shortValue());
      assertEquals(0, mutableInt0.intValue());
      assertEquals(0L, mutableInt0.longValue());
      assertNotNull(mutableInt0);
      
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short) (-1263);
      shortArray0[1] = (short) (-430);
      shortArray0[2] = (short) (-1263);
      shortArray0[3] = (short)1487;
      shortArray0[4] = (short) (-1263);
      shortArray0[5] = (short) (-430);
      shortArray0[6] = (short) (-1263);
      shortArray0[7] = (short)0;
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short) (-1263), 34);
      assertArrayEquals(new short[] {(short) (-1263), (short) (-430), (short) (-1263), (short)1487, (short) (-1263), (short) (-430), (short) (-1263), (short)0}, shortArray0);
      assertEquals(8, shortArray0.length);
      assertEquals(6, int0);
  }

  @Test(timeout = 4000)
  public void test0581()  throws Throwable  {
      boolean boolean0 = ArrayUtils.contains((double[]) null, 1220.42, 5863.412);
      assertFalse(boolean0);
      
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short)1;
      shortArray0[1] = (short) (-3898);
      shortArray0[2] = (short)122;
      short[] shortArray1 = ArrayUtils.removeElement(shortArray0, (short)122);
      assertArrayEquals(new short[] {(short)1, (short) (-3898), (short)122}, shortArray0);
      assertArrayEquals(new short[] {(short)1, (short) (-3898)}, shortArray1);
      assertEquals(3, shortArray0.length);
      assertEquals(2, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
  }

  @Test(timeout = 4000)
  public void test0582()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)46;
      byteArray0[1] = (byte)42;
      boolean boolean0 = ArrayUtils.contains(byteArray0, (byte) (-10));
      assertArrayEquals(new byte[] {(byte)46, (byte)42}, byteArray0);
      assertEquals(2, byteArray0.length);
      assertFalse(boolean0);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      boolean[] booleanArray1 = ArrayUtils.removeAllOccurences(booleanArray0, false);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertEquals(1, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      
      boolean[] booleanArray2 = ArrayUtils.add(booleanArray0, true);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, true}, booleanArray2));
      assertEquals(1, booleanArray0.length);
      assertEquals(2, booleanArray2.length);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray0, booleanArray2);
      assertNotSame(booleanArray2, booleanArray1);
      assertNotSame(booleanArray2, booleanArray0);
      assertNotNull(booleanArray2);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (byte) (-10);
      double[] doubleArray1 = ArrayUtils.removeAllOccurences(doubleArray0, (double) (byte)42);
      assertArrayEquals(new double[] {(-10.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-10.0)}, doubleArray1, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      
      double[] doubleArray2 = ArrayUtils.removeElement(doubleArray1, 3236.2602799763);
      assertArrayEquals(new double[] {(-10.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-10.0)}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {(-10.0)}, doubleArray2, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertEquals(1, doubleArray2.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotNull(doubleArray2);
      
      ArrayUtils.swap(booleanArray1, 0, (int) (byte)42);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertEquals(1, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray0.equals((Object)booleanArray2));
      assertFalse(booleanArray1.equals((Object)booleanArray2));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray0, booleanArray2);
      assertNotSame(booleanArray1, booleanArray2);
      assertNotSame(booleanArray1, booleanArray0);
  }

  @Test(timeout = 4000)
  public void test0583()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)46;
      byteArray0[1] = (byte)42;
      boolean boolean0 = ArrayUtils.contains(byteArray0, (byte) (-10));
      assertArrayEquals(new byte[] {(byte)46, (byte)42}, byteArray0);
      assertEquals(2, byteArray0.length);
      assertFalse(boolean0);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      boolean[] booleanArray1 = ArrayUtils.removeAllOccurences(booleanArray0, false);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertEquals(1, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      
      boolean[] booleanArray2 = ArrayUtils.add(booleanArray0, true);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, true}, booleanArray2));
      assertEquals(1, booleanArray0.length);
      assertEquals(2, booleanArray2.length);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray0, booleanArray2);
      assertNotSame(booleanArray2, booleanArray1);
      assertNotSame(booleanArray2, booleanArray0);
      assertNotNull(booleanArray2);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (byte) (-10);
      double[] doubleArray1 = ArrayUtils.removeAllOccurences(doubleArray0, (double) (byte)42);
      assertArrayEquals(new double[] {(-10.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-10.0)}, doubleArray1, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      
      double[] doubleArray2 = ArrayUtils.removeElement(doubleArray1, 3236.2602799763);
      assertArrayEquals(new double[] {(-10.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-10.0)}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {(-10.0)}, doubleArray2, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertEquals(1, doubleArray2.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotNull(doubleArray2);
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) (byte)42;
      floatArray0[1] = (float) (byte) (-10);
      floatArray0[2] = (float) (byte)46;
      floatArray0[3] = (float) (byte) (-10);
      floatArray0[4] = (float) (byte)42;
      floatArray0[5] = (float) (byte)46;
      floatArray0[6] = (float) (byte)46;
      float[] floatArray1 = ArrayUtils.removeElement(floatArray0, 46.0F);
      assertArrayEquals(new float[] {42.0F, (-10.0F), (-10.0F), 42.0F, 46.0F, 46.0F}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {42.0F, (-10.0F), 46.0F, (-10.0F), 42.0F, 46.0F, 46.0F}, floatArray0, 0.01F);
      assertEquals(6, floatArray1.length);
      assertEquals(7, floatArray0.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertNotNull(floatArray1);
  }

  @Test(timeout = 4000)
  public void test0584()  throws Throwable  {
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)76;
      shortArray0[1] = (short) (-2432);
      shortArray0[2] = (short)56;
      shortArray0[3] = (short)50;
      int int0 = ArrayUtils.indexOf(shortArray0, (short) (-2432), (int) (short)50);
      assertArrayEquals(new short[] {(short)76, (short) (-2432), (short)56, (short)50}, shortArray0);
      assertEquals(4, shortArray0.length);
      assertEquals((-1), int0);
      
      Short[] shortArray1 = new Short[6];
      try { 
        Short.valueOf("Array cannot be empty.");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"Array cannot be empty.\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test0585()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 2750.6832208665714;
      doubleArray0[2] = 663.3269;
      doubleArray0[3] = 1.0;
      doubleArray0[4] = 0.7;
      int[] intArray0 = new int[3];
      intArray0[0] = 4;
      intArray0[1] = 4;
      intArray0[2] = 4;
      BitSet bitSet0 = ArrayUtils.indexesOf(intArray0, 360, 360);
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertArrayEquals(new int[] {4, 4, 4}, intArray0);
      assertEquals(3, intArray0.length);
      assertNotNull(bitSet0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object) bitSet0, bitSet0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test0586()  throws Throwable  {
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)2;
      short[] shortArray1 = ArrayUtils.removeAllOccurences(shortArray0, (short)0);
      assertArrayEquals(new short[] {(short)2, (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)2}, shortArray1);
      assertEquals(2, shortArray0.length);
      assertEquals(1, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      
      long[] longArray0 = new long[4];
      longArray0[0] = (long) 637;
      longArray0[1] = (long) (short)2;
      longArray0[1] = (long) (short)2;
      longArray0[3] = (long) (short)2;
      ArrayUtils.shift(longArray0, (-3850), 1427, (int) (short)2);
      assertArrayEquals(new long[] {0L, 2L, 637L, 2L}, longArray0);
      assertEquals(4, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test0587()  throws Throwable  {
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)560;
      shortArray0[1] = (short)0;
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) (short)0;
      floatArray0[1] = (float) (short)560;
      float[] floatArray1 = ArrayUtils.nullToEmpty(floatArray0);
      assertArrayEquals(new float[] {0.0F, 560.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F, 560.0F}, floatArray1, 0.01F);
      assertEquals(2, floatArray0.length);
      assertEquals(2, floatArray1.length);
      assertSame(floatArray0, floatArray1);
      assertSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      
      int[] intArray0 = new int[0];
      int[] intArray1 = ArrayUtils.removeAllOccurrences(intArray0, (int) (short)560);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      
      boolean[] booleanArray0 = new boolean[0];
      ArrayUtils.swap(booleanArray0, 288, 1072);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals(0, booleanArray0.length);
      
      long[] longArray0 = new long[4];
      longArray0[0] = (long) 0;
      longArray0[1] = (long) (short)560;
      longArray0[2] = (long) (short)560;
      longArray0[3] = (long) (short)560;
      ArrayUtils.shift(longArray0, (-3850), 637, 288);
      assertArrayEquals(new long[] {0L, 560L, 560L, 560L}, longArray0);
      assertEquals(4, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test0588()  throws Throwable  {
      float[] floatArray0 = new float[9];
      floatArray0[0] = (-2271.21F);
      floatArray0[1] = (-2271.21F);
      floatArray0[2] = 216.6336F;
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = false;
      booleanArray0[5] = true;
      booleanArray0[6] = true;
      ArrayUtils.reverse(booleanArray0, 6, 6);
      assertTrue(Arrays.equals(new boolean[] {false, false, true, true, false, true, true}, booleanArray0));
      assertEquals(7, booleanArray0.length);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) (-2271.21F);
      doubleArray0[1] = (double) (-2271.21F);
      doubleArray0[2] = (double) (-1.0F);
      doubleArray0[3] = (double) (-2271.21F);
      doubleArray0[4] = (double) 0.0F;
      doubleArray0[5] = (double) 6;
      double[] doubleArray1 = ArrayUtils.removeElements(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {(-2271.2099609375), (-2271.2099609375), (-1.0), (-2271.2099609375), 0.0, 6.0}, doubleArray0, 0.01);
      assertEquals(0, doubleArray1.length);
      assertEquals(6, doubleArray0.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotNull(doubleArray1);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray1, (-1.0), 1178);
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {(-2271.2099609375), (-2271.2099609375), (-1.0), (-2271.2099609375), 0.0, 6.0}, doubleArray0, 0.01);
      assertEquals(0, doubleArray1.length);
      assertEquals(6, doubleArray0.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotNull(bitSet0);
      
      long[] longArray0 = new long[3];
      longArray0[0] = (long) 1178;
      longArray0[1] = (long) 1178;
      longArray0[2] = (long) 6;
      boolean boolean0 = ArrayUtils.isEmpty(longArray0);
      assertArrayEquals(new long[] {1178L, 1178L, 6L}, longArray0);
      assertEquals(3, longArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0589()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[1] = 'D';
      ArrayUtils.shift(charArray0, (int) '\u0000');
      assertArrayEquals(new char[] {'\u0000', 'D'}, charArray0);
      assertEquals(2, charArray0.length);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 'D';
      doubleArray0[1] = (double) 'D';
      ArrayUtils.shift(doubleArray0, 98, (int) 'D', 759);
      assertArrayEquals(new double[] {68.0, 68.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      
      int[] intArray0 = new int[5];
      intArray0[0] = 759;
      intArray0[1] = (int) 'D';
      intArray0[2] = 98;
      intArray0[3] = 98;
      intArray0[4] = 98;
      // Undeclared exception!
      try { 
        ArrayUtils.insert(759, intArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 759, Length: 5
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0590()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = (-1.0F);
      floatArray0[1] = (-1.0F);
      floatArray0[2] = (-1.0F);
      floatArray0[3] = (-1.0F);
      floatArray0[4] = 51.0F;
      floatArray0[5] = (-1.0F);
      floatArray0[6] = (-1.0F);
      boolean boolean0 = ArrayUtils.isNotEmpty(floatArray0);
      assertArrayEquals(new float[] {(-1.0F), (-1.0F), (-1.0F), (-1.0F), 51.0F, (-1.0F), (-1.0F)}, floatArray0, 0.01F);
      assertEquals(7, floatArray0.length);
      assertTrue(boolean0);
      
      int[] intArray0 = ArrayUtils.EMPTY_INT_ARRAY;
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertNotNull(intArray0);
      
      int[] intArray1 = ArrayUtils.insert(3371, (int[]) null, intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertNull(intArray1);
  }

  @Test(timeout = 4000)
  public void test0591()  throws Throwable  {
      int[] intArray0 = new int[0];
      Character character0 = Character.valueOf('g');
      assertNotNull(character0);
      assertEquals('g', (char)character0);
      
      Character character1 = Character.valueOf('g');
      assertNotNull(character1);
      assertEquals('g', (char)character1);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 'g';
      doubleArray0[1] = (double) 'g';
      doubleArray0[2] = (double) 'g';
      doubleArray0[3] = (double) 'g';
      doubleArray0[4] = (double) 'g';
      doubleArray0[5] = (double) 'g';
      int int0 = ArrayUtils.indexOf(doubleArray0, 103.0);
      assertArrayEquals(new double[] {103.0, 103.0, 103.0, 103.0, 103.0, 103.0}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      assertEquals(0, int0);
      
      int[] intArray1 = ArrayUtils.addAll(intArray0, intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = "";
      stringArray0[1] = "', has a length less than 2";
      stringArray0[2] = ", '";
      stringArray0[3] = "";
      String[] stringArray1 = ArrayUtils.addFirst(stringArray0, "");
      assertEquals(5, stringArray1.length);
      assertEquals(4, stringArray0.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray1, stringArray0);
      assertNotSame(stringArray0, stringArray1);
      assertNotNull(stringArray1);
  }

  @Test(timeout = 4000)
  public void test0592()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 571.942196047302;
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) 571.942196047302;
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (-3132.52324031), 0.0);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertArrayEquals(new double[] {0.0, 571.942196047302, 0.0}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      assertNotNull(bitSet0);
      
      Float float0 = new Float(2570.9F);
      assertNotNull(float0);
      assertEquals(2570.9F, (float)float0, 0.01F);
      
      Float float1 = new Float((-448.0F));
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertNotNull(float1);
      assertEquals((-448.0F), (float)float1, 0.01F);
      
      Float[] floatArray0 = ArrayUtils.addFirst((Float[]) null, float1);
      assertEquals(1, floatArray0.length);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertNotNull(floatArray0);
      
      Short short0 = new Short((short) (-1));
      assertNotNull(short0);
      assertEquals((short) (-1), (short)short0);
      
      boolean boolean0 = ArrayUtils.contains((Object[]) floatArray0, (Object) float1);
      assertEquals(1, floatArray0.length);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0593()  throws Throwable  {
      float[] floatArray0 = new float[8];
      floatArray0[0] = (-971.6495F);
      floatArray0[1] = (-2025.0852F);
      floatArray0[2] = 1713.691F;
      char[] charArray0 = new char[4];
      charArray0[0] = '{';
      charArray0[1] = '{';
      charArray0[2] = 'o';
      charArray0[3] = '2';
      char[] charArray1 = ArrayUtils.removeElement(charArray0, '2');
      assertArrayEquals(new char[] {'{', '{', 'o', '2'}, charArray0);
      assertArrayEquals(new char[] {'{', '{', 'o'}, charArray1);
      assertEquals(4, charArray0.length);
      assertEquals(3, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) 1713.691F;
      objectArray0[1] = (Object) '{';
      objectArray0[2] = (Object) '2';
      objectArray0[3] = (Object) 1713.691F;
      floatArray0[0] = (-971.6495F);
      objectArray0[5] = (Object) (-971.6495F);
      objectArray0[6] = (Object) 1713.691F;
      objectArray0[7] = (Object) (-2025.0852F);
      objectArray0[8] = (Object) 'o';
      Object object0 = ArrayUtils.get(objectArray0, 13, objectArray0[0]);
      assertEquals(9, objectArray0.length);
      assertNotNull(object0);
      assertEquals(1713.691F, object0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray0, (-971.6495F), 1);
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertArrayEquals(new float[] {(-971.6495F), (-2025.0852F), 1713.691F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(8, floatArray0.length);
      assertNotNull(bitSet0);
      
      BitSet bitSet1 = bitSet0.get(13, 120);
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet1.isEmpty());
      assertEquals(0, bitSet1.size());
      assertEquals("{}", bitSet1.toString());
      assertEquals(0, bitSet1.cardinality());
      assertEquals(0, bitSet1.length());
      assertArrayEquals(new float[] {(-971.6495F), (-2025.0852F), 1713.691F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(8, floatArray0.length);
      assertTrue(bitSet1.equals((Object)bitSet0));
      assertNotSame(bitSet0, bitSet1);
      assertNotSame(bitSet1, bitSet0);
      assertNotNull(bitSet1);
      
      BitSet bitSet2 = bitSet1.get(1, 120);
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet1.isEmpty());
      assertEquals(0, bitSet1.size());
      assertEquals("{}", bitSet1.toString());
      assertEquals(0, bitSet1.cardinality());
      assertEquals(0, bitSet1.length());
      assertEquals(0, bitSet2.cardinality());
      assertEquals("{}", bitSet2.toString());
      assertTrue(bitSet2.isEmpty());
      assertEquals(0, bitSet2.size());
      assertEquals(0, bitSet2.length());
      assertArrayEquals(new float[] {(-971.6495F), (-2025.0852F), 1713.691F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(8, floatArray0.length);
      assertTrue(bitSet0.equals((Object)bitSet1));
      assertTrue(bitSet1.equals((Object)bitSet0));
      assertTrue(bitSet2.equals((Object)bitSet1));
      assertTrue(bitSet2.equals((Object)bitSet0));
      assertNotSame(bitSet0, bitSet1);
      assertNotSame(bitSet0, bitSet2);
      assertNotSame(bitSet1, bitSet0);
      assertNotSame(bitSet1, bitSet2);
      assertNotSame(bitSet2, bitSet1);
      assertNotSame(bitSet2, bitSet0);
      assertNotNull(bitSet2);
      
      Float float0 = new Float((-2818.0679F));
      assertNotEquals((float)float0, (float)object0, 0.01F);
      assertNotNull(float0);
      assertEquals((-2818.0679F), (float)float0, 0.01F);
      
      Float[] floatArray1 = ArrayUtils.addFirst((Float[]) null, float0);
      assertEquals(1, floatArray1.length);
      assertNotEquals((float)float0, (float)object0, 0.01F);
      assertNotNull(floatArray1);
  }

  @Test(timeout = 4000)
  public void test0594()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 4026.966708;
      doubleArray0[2] = (-2101.5);
      Character character0 = Character.valueOf('N');
      assertNotNull(character0);
      assertEquals('N', (char)character0);
      
      Character character1 = Character.valueOf('K');
      assertFalse(character1.equals((Object)character0));
      assertNotNull(character1);
      assertEquals('K', (char)character1);
      
      Character character2 = Character.valueOf('J');
      assertFalse(character2.equals((Object)character0));
      assertFalse(character2.equals((Object)character1));
      assertNotNull(character2);
      assertEquals('J', (char)character2);
      
      Character character3 = Character.valueOf('K');
      assertFalse(character3.equals((Object)character0));
      assertFalse(character3.equals((Object)character2));
      assertNotNull(character3);
      assertEquals('K', (char)character3);
      
      Character character4 = Character.valueOf('J');
      assertFalse(character4.equals((Object)character3));
      assertFalse(character4.equals((Object)character1));
      assertFalse(character4.equals((Object)character0));
      assertNotNull(character4);
      assertEquals('J', (char)character4);
      
      Character[] characterArray0 = new Character[8];
      characterArray0[0] = character1;
      characterArray0[1] = character3;
      characterArray0[2] = character3;
      characterArray0[3] = character2;
      characterArray0[5] = character3;
      characterArray0[6] = character1;
      characterArray0[7] = character3;
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0, 'v');
      assertArrayEquals(new char[] {'K', 'K', 'K', 'J', 'v', 'K', 'K', 'K'}, charArray0);
      assertEquals(8, charArray0.length);
      assertEquals(8, characterArray0.length);
      assertNotNull(charArray0);
  }

  @Test(timeout = 4000)
  public void test0595()  throws Throwable  {
      byte[] byteArray0 = ArrayUtils.add((byte[]) null, (byte) (-116));
      assertArrayEquals(new byte[] {(byte) (-116)}, byteArray0);
      assertEquals(1, byteArray0.length);
      assertNotNull(byteArray0);
      
      int[] intArray0 = new int[1];
      intArray0[0] = (int) (byte) (-116);
      int[] intArray1 = ArrayUtils.nullToEmpty(intArray0);
      assertArrayEquals(new int[] {(-116)}, intArray0);
      assertArrayEquals(new int[] {(-116)}, intArray1);
      assertEquals(1, intArray0.length);
      assertEquals(1, intArray1.length);
      assertSame(intArray0, intArray1);
      assertSame(intArray1, intArray0);
      assertNotNull(intArray1);
      
      long[] longArray0 = new long[6];
      longArray0[0] = (long) (-116);
      longArray0[1] = (long) (-116);
      longArray0[2] = (long) (-116);
      longArray0[3] = (long) (byte) (-116);
      longArray0[4] = (long) (byte) (-116);
      longArray0[5] = (long) (-116);
      Float float0 = new Float((float) (-116L));
      assertNotNull(float0);
      assertEquals((-116.0F), (float)float0, 0.01F);
      
      Float float1 = new Float(0.0F);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertNotNull(float1);
      assertEquals(0.0F, (float)float1, 0.01F);
      
      Float[] floatArray0 = new Float[1];
      floatArray0[0] = float0;
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0);
      assertArrayEquals(new float[] {(-116.0F)}, floatArray1, 0.01F);
      assertEquals(1, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertNotNull(floatArray1);
      
      Class<Short>[] classArray0 = (Class<Short>[]) Array.newInstance(Class.class, 0);
      Class<?>[] classArray1 = ArrayUtils.nullToEmpty(classArray0);
      assertEquals(0, classArray0.length);
      assertEquals(0, classArray1.length);
      assertNotNull(classArray1);
      
      short[] shortArray0 = new short[0];
      int int0 = ArrayUtils.indexOf(shortArray0, (short) (byte) (-116), 2);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray0.length);
      assertEquals((-1), int0);
      
      Integer[] integerArray0 = new Integer[3];
      integerArray0[0] = (Integer) (-116);
      integerArray0[1] = (Integer) (-116);
      integerArray0[2] = (Integer) (-116);
      Integer integer0 = new Integer((int) integerArray0[1]);
      assertEquals(3, integerArray0.length);
      assertFalse(integer0.equals((Object)int0));
      assertNotNull(integer0);
      assertEquals((-116), (int)integer0);
      
      Integer[] integerArray1 = ArrayUtils.removeAllOccurences(integerArray0, integer0);
      assertEquals(3, integerArray0.length);
      assertEquals(0, integerArray1.length);
      assertFalse(integer0.equals((Object)int0));
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertNotNull(integerArray1);
  }

  @Test(timeout = 4000)
  public void test0596()  throws Throwable  {
      long[] longArray0 = new long[7];
      longArray0[0] = 1553L;
      longArray0[1] = 0L;
      longArray0[2] = (-1L);
      longArray0[3] = (-1L);
      longArray0[4] = 1540L;
      longArray0[5] = 0L;
      longArray0[6] = 0L;
      Byte byte0 = new Byte((byte)1);
      assertNotNull(byte0);
      assertEquals((byte)1, (byte)byte0);
      
      Boolean boolean0 = new Boolean(false);
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      int int0 = ArrayUtils.indexOf((Object[]) null, (Object) boolean0);
      assertEquals((-1), int0);
      
      ArrayUtils.swap((Object[]) null, 191, (int) (byte) (-52), (int) (byte)1);
      int int1 = ArrayUtils.indexOf((Object[]) null, (Object) boolean0, (-1));
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      Character[] characterArray0 = new Character[0];
      Character character0 = Character.valueOf('<');
      assertNotNull(character0);
      assertEquals('<', (char)character0);
      
      Character[] characterArray1 = ArrayUtils.removeAllOccurences(characterArray0, character0);
      assertEquals(0, characterArray0.length);
      assertEquals(0, characterArray1.length);
      assertFalse(characterArray1.equals((Object)characterArray0));
      assertNotSame(characterArray0, characterArray1);
      assertNotSame(characterArray1, characterArray0);
      assertNotNull(characterArray1);
      
      int[] intArray0 = new int[2];
      intArray0[0] = 191;
      intArray0[1] = (int) (byte) (-52);
      // Undeclared exception!
      try { 
        ArrayUtils.add(intArray0, (-2), (-3238));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -2, Length: 2
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0597()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = 2927;
      intArray0[1] = (-77);
      intArray0[2] = 255;
      intArray0[3] = 704;
      intArray0[4] = 7;
      // Undeclared exception!
      try { 
        ArrayUtils.add(intArray0, 2147027115, 7);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2147027115, Length: 5
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0598()  throws Throwable  {
      ArrayUtils.shift((double[]) null, (-869));
  }

  @Test(timeout = 4000)
  public void test0599()  throws Throwable  {
      short[] shortArray0 = new short[8];
      short short0 = (short)43;
      shortArray0[1] = (short)43;
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      BitSet bitSet0 = ArrayUtils.indexesOf(booleanArray0, true);
      assertEquals(2, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertEquals(2, bitSet0.length());
      assertEquals("{0, 1}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray0));
      assertEquals(2, booleanArray0.length);
      assertNotNull(bitSet0);
      
      Long long0 = new Long((short)43);
      assertNotNull(long0);
      assertEquals(43L, (long)long0);
      
      long long1 = 0L;
      Long long2 = new Long((-3482L));
      assertFalse(long2.equals((Object)long0));
      assertFalse(long2.equals((Object)long1));
      assertNotNull(long2);
      assertEquals((-3482L), (long)long2);
      
      Long long3 = new Long((short)43);
      assertFalse(long3.equals((Object)long1));
      assertFalse(long3.equals((Object)long2));
      assertTrue(long3.equals((Object)long0));
      assertNotNull(long3);
      assertEquals(43L, (long)long3);
      
      Long long4 = new Long(0L);
      assertFalse(long4.equals((Object)long2));
      assertTrue(long4.equals((Object)long1));
      assertFalse(long4.equals((Object)long0));
      assertFalse(long4.equals((Object)long3));
      assertNotNull(long4);
      assertEquals(0L, (long)long4);
      
      Long long5 = new Long((short)43);
      assertTrue(long5.equals((Object)long0));
      assertFalse(long5.equals((Object)long4));
      assertTrue(long5.equals((Object)long3));
      assertFalse(long5.equals((Object)long1));
      assertFalse(long5.equals((Object)long2));
      assertNotNull(long5);
      assertEquals(43L, (long)long5);
      
      Long long6 = new Long(1L);
      assertFalse(long6.equals((Object)long5));
      assertFalse(long6.equals((Object)long1));
      assertFalse(long6.equals((Object)long2));
      assertFalse(long6.equals((Object)long0));
      assertFalse(long6.equals((Object)long3));
      assertFalse(long6.equals((Object)long4));
      assertNotNull(long6);
      assertEquals(1L, (long)long6);
      
      Long long7 = new Long((-1L));
      assertFalse(long7.equals((Object)long5));
      assertFalse(long7.equals((Object)long2));
      assertFalse(long7.equals((Object)long3));
      assertFalse(long7.equals((Object)long1));
      assertFalse(long7.equals((Object)long0));
      assertFalse(long7.equals((Object)long6));
      assertFalse(long7.equals((Object)long4));
      assertNotNull(long7);
      assertEquals((-1L), (long)long7);
      
      Long long8 = new Long((-3482L));
      assertFalse(long8.equals((Object)long5));
      assertFalse(long8.equals((Object)long1));
      assertFalse(long8.equals((Object)long3));
      assertFalse(long8.equals((Object)long7));
      assertFalse(long8.equals((Object)long0));
      assertFalse(long8.equals((Object)long4));
      assertFalse(long8.equals((Object)long6));
      assertTrue(long8.equals((Object)long2));
      assertNotNull(long8);
      assertEquals((-3482L), (long)long8);
      
      Long[] longArray0 = ArrayUtils.nullToEmpty((Long[]) null);
      assertEquals(0, longArray0.length);
      assertNotNull(longArray0);
      
      short[] shortArray1 = ArrayUtils.nullToEmpty(shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)43, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)43, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray1);
      assertEquals(8, shortArray0.length);
      assertEquals(8, shortArray1.length);
      assertSame(shortArray0, shortArray1);
      assertSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      
      int int0 = (-164);
      long[] longArray1 = null;
      int[] intArray0 = new int[1];
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((long[]) null, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0600()  throws Throwable  {
      float[] floatArray0 = new float[3];
      floatArray0[0] = (-1397.05F);
      Float[] floatArray1 = new Float[3];
      floatArray1[0] = (Float) (-1397.05F);
      floatArray1[1] = (Float) (-1397.05F);
      floatArray1[2] = (Float) (-1397.05F);
      float[] floatArray2 = ArrayUtils.toPrimitive(floatArray1);
      assertArrayEquals(new float[] {(-1397.05F), (-1397.05F), (-1397.05F)}, floatArray2, 0.01F);
      assertEquals(3, floatArray1.length);
      assertEquals(3, floatArray2.length);
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertNotSame(floatArray2, floatArray0);
      assertNotNull(floatArray2);
      
      Class<Integer>[] classArray0 = (Class<Integer>[]) Array.newInstance(Class.class, 0);
      Class<?>[] classArray1 = ArrayUtils.nullToEmpty(classArray0);
      assertEquals(0, classArray0.length);
      assertEquals(0, classArray1.length);
      assertNotNull(classArray1);
      
      ArrayUtils.swap((Object[]) floatArray1, 163, (-2146731991), (-2146731991));
      assertEquals(3, floatArray1.length);
      
      Map<Object, Object> map0 = ArrayUtils.toMap(classArray0);
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      assertEquals(0, classArray0.length);
      assertNotNull(map0);
  }

  @Test(timeout = 4000)
  public void test0601()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 571.942196047302;
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) 571.942196047302;
      objectArray0[1] = (Object) 0.0;
      objectArray0[2] = (Object) 0.0;
      objectArray0[3] = (Object) 0.0;
      objectArray0[4] = (Object) 0.0;
      objectArray0[5] = (Object) 571.942196047302;
      String[] stringArray0 = ArrayUtils.toStringArray(objectArray0);
      assertEquals(6, objectArray0.length);
      assertEquals(6, stringArray0.length);
      assertNotNull(stringArray0);
      
      int[] intArray0 = new int[4];
      intArray0[0] = 32;
      intArray0[1] = (-1);
      intArray0[2] = Integer.MAX_VALUE;
      intArray0[3] = (-2622);
      int int0 = ArrayUtils.indexOf(intArray0, 2146180940, 796);
      assertArrayEquals(new int[] {32, (-1), Integer.MAX_VALUE, (-2622)}, intArray0);
      assertEquals(4, intArray0.length);
      assertEquals((-1), int0);
      
      Double double0 = new Double((-1484.7375971182364));
      assertNotNull(double0);
      assertEquals((-1484.7375971182364), (double)double0, 0.01);
      
      double[] doubleArray1 = ArrayUtils.toPrimitive((Double[]) null);
      assertNull(doubleArray1);
      
      int int1 = ArrayUtils.indexOf(intArray0, 2146180940, (-1));
      assertArrayEquals(new int[] {32, (-1), Integer.MAX_VALUE, (-2622)}, intArray0);
      assertEquals(4, intArray0.length);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      Double double1 = new Double(Integer.MAX_VALUE);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      assertEquals(2.147483647E9, (double)double1, 0.01);
      
      double[] doubleArray2 = ArrayUtils.toPrimitive((Double[]) null);
      assertNull(doubleArray2);
      
      boolean boolean0 = ArrayUtils.isEmpty(objectArray0);
      assertEquals(6, objectArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0602()  throws Throwable  {
      int int0 = ArrayUtils.lastIndexOf((float[]) null, 0.88169146F, 31);
      assertEquals((-1), int0);
      
      Long long0 = new Long(1358L);
      assertNotNull(long0);
      assertEquals(1358L, (long)long0);
      
      Long[] longArray0 = new Long[1];
      longArray0[0] = long0;
      Long[] longArray1 = ArrayUtils.subarray(longArray0, (-1), 2);
      assertEquals(1, longArray0.length);
      assertEquals(1, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
      
      char[] charArray0 = new char[5];
      charArray0[0] = 'Y';
      charArray0[1] = 'Y';
      charArray0[2] = 'Y';
      charArray0[3] = 'Y';
      charArray0[4] = 'Y';
      boolean boolean0 = ArrayUtils.isSorted(charArray0);
      assertArrayEquals(new char[] {'Y', 'Y', 'Y', 'Y', 'Y'}, charArray0);
      assertEquals(5, charArray0.length);
      assertTrue(boolean0);
      
      long[] longArray2 = ArrayUtils.addAll((long[]) null, (long[]) null);
      assertNull(longArray2);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      char[] charArray1 = ArrayUtils.insert(2, charArray0, charArray0);
      assertArrayEquals(new char[] {'Y', 'Y', 'Y', 'Y', 'Y'}, charArray0);
      assertArrayEquals(new char[] {'Y', 'Y', 'Y', 'Y', 'Y', 'Y', 'Y', 'Y', 'Y', 'Y'}, charArray1);
      assertEquals(5, charArray0.length);
      assertEquals(10, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
  }

  @Test(timeout = 4000)
  public void test0603()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = '/';
      charArray0[1] = ';';
      charArray0[1] = '/';
      charArray0[3] = '/';
      // Undeclared exception!
      try { 
        ArrayUtils.insert((-92), charArray0, charArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -92, Length: 4
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0604()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 571.942196047302;
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) 571.942196047302;
      objectArray0[1] = (Object) 0.0;
      objectArray0[2] = (Object) 0.0;
      objectArray0[3] = (Object) 0.0;
      objectArray0[4] = (Object) 0.0;
      objectArray0[5] = (Object) 571.942196047302;
      String[] stringArray0 = ArrayUtils.toStringArray(objectArray0);
      assertEquals(6, objectArray0.length);
      assertEquals(6, stringArray0.length);
      assertNotNull(stringArray0);
      
      int[] intArray0 = new int[4];
      intArray0[0] = 32;
      intArray0[1] = (-1);
      intArray0[2] = Integer.MAX_VALUE;
      intArray0[3] = (-2619);
      boolean boolean0 = ArrayUtils.isEmpty(objectArray0);
      assertEquals(6, objectArray0.length);
      assertFalse(boolean0);
      
      char[] charArray0 = new char[5];
      charArray0[0] = '7';
      charArray0[1] = 'F';
      charArray0[2] = '}';
      charArray0[3] = 'E';
      charArray0[4] = 'E';
      // Undeclared exception!
      try { 
        ArrayUtils.insert((-32), charArray0, charArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -32, Length: 5
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0605()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = '~';
      charArray0[1] = 'D';
      ArrayUtils.shift(charArray0, (-569));
      assertArrayEquals(new char[] {'D', '~'}, charArray0);
      assertEquals(2, charArray0.length);
      
      Boolean boolean0 = Boolean.FALSE;
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      Boolean boolean1 = Boolean.valueOf("");
      assertNotNull(boolean1);
      assertFalse(boolean1);
      
      Boolean boolean2 = Boolean.FALSE;
      assertNotNull(boolean2);
      assertFalse(boolean2);
      
      Boolean[] booleanArray0 = new Boolean[8];
      booleanArray0[0] = boolean0;
      booleanArray0[1] = boolean0;
      booleanArray0[2] = boolean0;
      booleanArray0[3] = boolean0;
      booleanArray0[4] = boolean1;
      booleanArray0[5] = boolean1;
      booleanArray0[6] = boolean2;
      booleanArray0[7] = boolean0;
      Boolean[] booleanArray1 = ArrayUtils.nullToEmpty(booleanArray0);
      assertEquals(8, booleanArray1.length);
      assertEquals(8, booleanArray0.length);
      assertSame(booleanArray1, booleanArray0);
      assertSame(booleanArray0, booleanArray1);
      assertNotNull(booleanArray1);
      
      char[] charArray1 = ArrayUtils.add(charArray0, '~');
      assertArrayEquals(new char[] {'D', '~'}, charArray0);
      assertArrayEquals(new char[] {'D', '~', '~'}, charArray1);
      assertEquals(2, charArray0.length);
      assertEquals(3, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      
      MockRandom mockRandom0 = new MockRandom((-569));
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.shuffle((boolean[]) null, (Random) mockRandom0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0606()  throws Throwable  {
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)560;
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-9);
      byteArray0[1] = (byte)110;
      boolean boolean0 = ArrayUtils.isEmpty(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-9), (byte)110, (byte)0}, byteArray0);
      assertEquals(3, byteArray0.length);
      assertFalse(boolean0);
      
      ArrayUtils.shift((float[]) null, (int) (short)1094);
  }

  @Test(timeout = 4000)
  public void test0607()  throws Throwable  {
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)560;
      shortArray0[1] = (short)0;
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-9);
      byteArray0[1] = (byte)110;
      byteArray0[2] = (byte)59;
      boolean boolean0 = ArrayUtils.isEmpty(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-9), (byte)110, (byte)59}, byteArray0);
      assertEquals(3, byteArray0.length);
      assertFalse(boolean0);
      
      ArrayUtils.shift((float[]) null, (int) (short)1094);
  }

  @Test(timeout = 4000)
  public void test0608()  throws Throwable  {
      Character character0 = Character.valueOf('g');
      assertNotNull(character0);
      assertEquals('g', (char)character0);
      
      Character character1 = Character.valueOf('g');
      assertNotNull(character1);
      assertEquals('g', (char)character1);
      
      Short short0 = new Short((short)1036);
      assertNotNull(short0);
      assertEquals((short)1036, (short)short0);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) 0;
      floatArray0[1] = (float) 4;
      floatArray0[2] = (float) (short)1036;
      floatArray0[3] = (float) 0;
      floatArray0[4] = (float) 'g';
      ArrayUtils.swap(floatArray0, (int) (short)1072, (int) (short)1072, 0);
      assertArrayEquals(new float[] {0.0F, 4.0F, 1036.0F, 0.0F, 103.0F}, floatArray0, 0.01F);
      assertEquals(5, floatArray0.length);
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)1072;
      shortArray0[1] = (short)1072;
      shortArray0[2] = (short)1036;
      shortArray0[3] = (short)1072;
      short[] shortArray1 = ArrayUtils.subarray(shortArray0, (-841), 2899);
      assertArrayEquals(new short[] {(short)1072, (short)1072, (short)1036, (short)1072}, shortArray0);
      assertArrayEquals(new short[] {(short)1072, (short)1072, (short)1036, (short)1072}, shortArray1);
      assertEquals(4, shortArray0.length);
      assertEquals(4, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
  }

  @Test(timeout = 4000)
  public void test0609()  throws Throwable  {
      short[] shortArray0 = new short[8];
      char[] charArray0 = new char[7];
      charArray0[0] = '0';
      charArray0[2] = '0';
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      float[] floatArray0 = new float[0];
      ArrayUtils.shuffle(floatArray0, (Random) mockRandom0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
      
      ArrayUtils.swap(floatArray0, 2179, 3195, 4);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
      
      short[] shortArray1 = ArrayUtils.subarray(shortArray0, 971, 971);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertEquals(8, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
  }

  @Test(timeout = 4000)
  public void test0610()  throws Throwable  {
      short[] shortArray0 = new short[8];
      shortArray0[1] = (short)43;
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      BitSet bitSet0 = ArrayUtils.indexesOf(booleanArray0, true);
      assertEquals(2, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertEquals(2, bitSet0.length());
      assertEquals("{0, 1}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray0));
      assertEquals(2, booleanArray0.length);
      assertNotNull(bitSet0);
      
      Long long0 = new Long((short)43);
      assertNotNull(long0);
      assertEquals(43L, (long)long0);
      
      Long long1 = new Long((-3482L));
      assertFalse(long1.equals((Object)long0));
      assertNotNull(long1);
      assertEquals((-3482L), (long)long1);
      
      Long long2 = new Long((short)43);
      assertTrue(long2.equals((Object)long0));
      assertFalse(long2.equals((Object)long1));
      assertNotNull(long2);
      assertEquals(43L, (long)long2);
      
      Long long3 = new Long(0L);
      assertFalse(long3.equals((Object)long1));
      assertFalse(long3.equals((Object)long2));
      assertFalse(long3.equals((Object)long0));
      assertNotNull(long3);
      assertEquals(0L, (long)long3);
      
      Long long4 = new Long((short)0);
      assertFalse(long4.equals((Object)long0));
      assertFalse(long4.equals((Object)long2));
      assertFalse(long4.equals((Object)long1));
      assertTrue(long4.equals((Object)long3));
      assertNotNull(long4);
      assertEquals(0L, (long)long4);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) 0L;
      floatArray0[1] = Float.NaN;
      floatArray0[2] = (float) (short)43;
      floatArray0[3] = (float) (short) (-13);
      MockRandom mockRandom0 = new MockRandom((-3482L));
      assertNotNull(mockRandom0);
      
      ArrayUtils.shuffle(floatArray0, (Random) mockRandom0);
      assertArrayEquals(new float[] {Float.NaN, 43.0F, (-13.0F), 0.0F}, floatArray0, 0.01F);
      assertEquals(4, floatArray0.length);
      
      ArrayUtils.swap(floatArray0, (int) (short)43, 971, 0);
      assertArrayEquals(new float[] {Float.NaN, 43.0F, (-13.0F), 0.0F}, floatArray0, 0.01F);
      assertEquals(4, floatArray0.length);
      
      short[] shortArray1 = ArrayUtils.subarray(shortArray0, 17, (int) (short)43);
      assertArrayEquals(new short[] {(short)0, (short)43, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertEquals(8, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
  }

  @Test(timeout = 4000)
  public void test0611()  throws Throwable  {
      Long long0 = new Long(1309);
      assertNotNull(long0);
      assertEquals(1309L, (long)long0);
      
      MockRandom mockRandom0 = new MockRandom(2956L);
      assertNotNull(mockRandom0);
      
      float[] floatArray0 = new float[0];
      ArrayUtils.shuffle(floatArray0, (Random) mockRandom0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
      
      ArrayUtils.swap(floatArray0, 3054, (-899), 1309);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
      
      short[] shortArray0 = new short[2];
      shortArray0[1] = (short)54;
      short[] shortArray1 = ArrayUtils.subarray(shortArray0, (int) (short)54, (-4518));
      assertArrayEquals(new short[] {(short)0, (short)54}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertEquals(2, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
  }

  @Test(timeout = 4000)
  public void test0612()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)17;
      byteArray0[1] = (byte)0;
      short[] shortArray0 = new short[0];
      short[] shortArray1 = ArrayUtils.subarray(shortArray0, (-257), (-856));
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) (byte)17;
      floatArray0[1] = (float) (-856);
      float[] floatArray1 = ArrayUtils.clone(floatArray0);
      assertArrayEquals(new float[] {17.0F, (-856.0F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {17.0F, (-856.0F)}, floatArray1, 0.01F);
      assertEquals(2, floatArray0.length);
      assertEquals(2, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
  }

  @Test(timeout = 4000)
  public void test0613()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[1] = false;
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-54);
      byteArray0[1] = (byte) (-54);
      byteArray0[2] = (byte)123;
      char[] charArray0 = new char[5];
      charArray0[0] = 'U';
      charArray0[1] = '-';
      charArray0[2] = 'U';
      charArray0[3] = 'U';
      charArray0[4] = 'U';
      ArrayUtils.reverse(charArray0, (int) (byte)123, (-2146950534));
      assertArrayEquals(new char[] {'U', '-', 'U', 'U', 'U'}, charArray0);
      assertEquals(5, charArray0.length);
      
      Boolean[] booleanArray1 = ArrayUtils.toObject(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray0));
      assertEquals(3, booleanArray0.length);
      assertEquals(3, booleanArray1.length);
      assertNotNull(booleanArray1);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) '-';
      floatArray0[1] = (float) '-';
      Float[] floatArray1 = ArrayUtils.toObject(floatArray0);
      assertArrayEquals(new float[] {45.0F, 45.0F}, floatArray0, 0.01F);
      assertEquals(2, floatArray1.length);
      assertEquals(2, floatArray0.length);
      assertNotNull(floatArray1);
      
      ArrayUtils.swap(charArray0, (-1808), Integer.MAX_VALUE, (-1110));
      assertArrayEquals(new char[] {'U', '-', 'U', 'U', 'U'}, charArray0);
      assertEquals(5, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test0614()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      Long long0 = new Long(1L);
      assertNotNull(long0);
      assertEquals(1L, (long)long0);
      
      Long long1 = new Long(1L);
      assertTrue(long1.equals((Object)long0));
      assertNotNull(long1);
      assertEquals(1L, (long)long1);
      
      Long long2 = new Long((-1L));
      assertFalse(long2.equals((Object)long0));
      assertFalse(long2.equals((Object)long1));
      assertNotNull(long2);
      assertEquals((-1L), (long)long2);
      
      Long[] longArray0 = ArrayUtils.nullToEmpty((Long[]) null);
      assertEquals(0, longArray0.length);
      assertNotNull(longArray0);
      
      short[] shortArray0 = new short[0];
      short[] shortArray1 = ArrayUtils.nullToEmpty(shortArray0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      
      char[] charArray0 = new char[3];
      charArray0[0] = 'h';
      charArray0[1] = 'h';
      charArray0[2] = 'h';
      ArrayUtils.swap(charArray0, (-2450), 1094, (-164));
      assertArrayEquals(new char[] {'h', 'h', 'h'}, charArray0);
      assertEquals(3, charArray0.length);
      
      int[] intArray0 = new int[8];
      intArray0[0] = (int) 'h';
      intArray0[1] = (int) 'h';
      intArray0[2] = (int) 'R';
      intArray0[3] = (int) 'h';
      intArray0[4] = (int) 'h';
      intArray0[5] = (-164);
      intArray0[6] = (int) 'h';
      intArray0[7] = (int) 'h';
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((long[]) null, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 104, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0615()  throws Throwable  {
      short[] shortArray0 = new short[4];
      short[] shortArray1 = ArrayUtils.addFirst(shortArray0, (short) (-1266));
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short) (-1266), (short)0, (short)0, (short)0, (short)0}, shortArray1);
      assertEquals(4, shortArray0.length);
      assertEquals(5, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      
      short[] shortArray2 = ArrayUtils.clone(shortArray1);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short) (-1266), (short)0, (short)0, (short)0, (short)0}, shortArray1);
      assertArrayEquals(new short[] {(short) (-1266), (short)0, (short)0, (short)0, (short)0}, shortArray2);
      assertEquals(4, shortArray0.length);
      assertEquals(5, shortArray1.length);
      assertEquals(5, shortArray2.length);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertFalse(shortArray2.equals((Object)shortArray1));
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertNotSame(shortArray0, shortArray2);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray2);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray2, shortArray1);
      assertNotSame(shortArray2, shortArray0);
      assertNotNull(shortArray2);
      
      long[] longArray0 = new long[5];
      longArray0[0] = (long) (short) (-1266);
      longArray0[1] = (long) (short) (-1266);
      longArray0[2] = (long) (short)560;
      longArray0[3] = (long) (short) (-1266);
      longArray0[4] = (long) (short)560;
      boolean boolean0 = ArrayUtils.contains(longArray0, 560L);
      assertArrayEquals(new long[] {(-1266L), (-1266L), 560L, (-1266L), 560L}, longArray0);
      assertEquals(5, longArray0.length);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) (-1266L);
      doubleArray0[1] = (double) (short) (-1266);
      doubleArray0[2] = (-3010.2640706447);
      doubleArray0[3] = (double) 560L;
      doubleArray0[4] = (double) 560L;
      doubleArray0[5] = (double) (short)560;
      doubleArray0[6] = (double) (-3533);
      doubleArray0[3] = (double) (-3533);
      ArrayUtils.shift(doubleArray0, (int) (short) (-1266), (int) (short) (-1266), (-3267));
      assertArrayEquals(new double[] {(-1266.0), (-1266.0), (-3010.2640706447), (-3533.0), 560.0, 560.0, (-3533.0), 0.0}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test0616()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[3];
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (-2146950534);
      doubleArray0[1] = 3473.24175;
      ArrayUtils.shift(doubleArray0, (-2146950534), 786, (int) (byte) (-46));
      assertArrayEquals(new double[] {(-2.146950534E9), 3473.24175}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test0617()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 196;
      intArray0[1] = 0;
      int[] intArray1 = ArrayUtils.subarray(intArray0, 32, 0);
      assertArrayEquals(new int[] {196, 0}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(2, intArray0.length);
      assertEquals(0, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)98;
      int int0 = ArrayUtils.indexOf(byteArray0, (byte)98);
      assertArrayEquals(new byte[] {(byte)98}, byteArray0);
      assertEquals(1, byteArray0.length);
      assertEquals(0, int0);
      
      String[] stringArray0 = new String[0];
      String[] stringArray1 = ArrayUtils.nullToEmpty(stringArray0);
      assertEquals(0, stringArray0.length);
      assertEquals(0, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertNotNull(stringArray1);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(intArray0, (int) (byte)98, (-1808));
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertArrayEquals(new int[] {196, 0}, intArray0);
      assertEquals(2, intArray0.length);
      assertFalse(intArray0.equals((Object)intArray1));
      assertNotSame(intArray0, intArray1);
      assertNotNull(bitSet0);
      
      ArrayUtils.swap((char[]) null, 32, 196, 0);
      boolean boolean0 = ArrayUtils.isEmpty((char[]) null);
      assertTrue(boolean0);
      
      int[] intArray2 = ArrayUtils.EMPTY_INT_ARRAY;
      assertArrayEquals(new int[] {}, intArray2);
      assertEquals(0, intArray2.length);
      assertFalse(intArray2.equals((Object)intArray0));
      assertSame(intArray2, intArray1);
      assertNotSame(intArray2, intArray0);
      assertNotNull(intArray2);
      
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short) (byte)98;
      shortArray0[1] = (short)8856;
      shortArray0[2] = (short) (byte)98;
      shortArray0[3] = (short)131;
      shortArray0[4] = (short) (byte)98;
      shortArray0[5] = (short) (byte)98;
      shortArray0[6] = (short) (byte)98;
      shortArray0[7] = (short) (byte)98;
      short[] shortArray1 = ArrayUtils.addFirst(shortArray0, (short) (-1266));
      assertArrayEquals(new short[] {(short) (-1266), (short)98, (short)8856, (short)98, (short)131, (short)98, (short)98, (short)98, (short)98}, shortArray1);
      assertArrayEquals(new short[] {(short)98, (short)8856, (short)98, (short)131, (short)98, (short)98, (short)98, (short)98}, shortArray0);
      assertEquals(9, shortArray1.length);
      assertEquals(8, shortArray0.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertNotNull(shortArray1);
      
      short[] shortArray2 = ArrayUtils.clone(shortArray1);
      assertArrayEquals(new short[] {(short) (-1266), (short)98, (short)8856, (short)98, (short)131, (short)98, (short)98, (short)98, (short)98}, shortArray1);
      assertArrayEquals(new short[] {(short) (-1266), (short)98, (short)8856, (short)98, (short)131, (short)98, (short)98, (short)98, (short)98}, shortArray2);
      assertArrayEquals(new short[] {(short)98, (short)8856, (short)98, (short)131, (short)98, (short)98, (short)98, (short)98}, shortArray0);
      assertEquals(9, shortArray1.length);
      assertEquals(9, shortArray2.length);
      assertEquals(8, shortArray0.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertFalse(shortArray2.equals((Object)shortArray1));
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertNotSame(shortArray1, shortArray2);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray2, shortArray0);
      assertNotSame(shortArray2, shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray0, shortArray2);
      assertNotNull(shortArray2);
      
      long[] longArray0 = new long[0];
      boolean boolean1 = ArrayUtils.contains(longArray0, (long) 196);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 3252.274724618;
      doubleArray0[1] = (double) (short)98;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) (short)131;
      ArrayUtils.shift(doubleArray0, (-1808), (int) (byte)98, (-3533));
      assertArrayEquals(new double[] {98.0, 0.0, 131.0, 3252.274724618}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test0618()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[1] = 571.942196047302;
      doubleArray0[2] = 1.0;
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      char[] charArray0 = new char[2];
      charArray0[0] = 'a';
      charArray0[1] = '\"';
      char[] charArray1 = ArrayUtils.removeAllOccurences(charArray0, ')');
      assertArrayEquals(new char[] {'a', '\"'}, charArray0);
      assertArrayEquals(new char[] {'a', '\"'}, charArray1);
      assertEquals(2, charArray0.length);
      assertEquals(2, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      
      char[] charArray2 = ArrayUtils.nullToEmpty(charArray0);
      assertArrayEquals(new char[] {'a', '\"'}, charArray0);
      assertArrayEquals(new char[] {'a', '\"'}, charArray2);
      assertEquals(2, charArray0.length);
      assertEquals(2, charArray2.length);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray2.equals((Object)charArray1));
      assertSame(charArray0, charArray2);
      assertNotSame(charArray0, charArray1);
      assertSame(charArray2, charArray0);
      assertNotSame(charArray2, charArray1);
      assertNotNull(charArray2);
  }

  @Test(timeout = 4000)
  public void test0619()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      int int0 = ArrayUtils.indexOf(byteArray0, (byte)6);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      assertEquals((-1), int0);
      
      long[] longArray0 = new long[7];
      longArray0[0] = (long) (-1);
      longArray0[1] = 2226L;
      longArray0[2] = (long) (byte)6;
      longArray0[3] = (long) (byte)6;
      longArray0[4] = (-1495L);
      longArray0[5] = (long) (byte)6;
      longArray0[6] = (long) (-1);
      int int1 = ArrayUtils.lastIndexOf(longArray0, 1532L, (-1024));
      assertArrayEquals(new long[] {(-1L), 2226L, 6L, 6L, (-1495L), 6L, (-1L)}, longArray0);
      assertEquals(7, longArray0.length);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) 6L;
      floatArray0[1] = (float) (byte)6;
      float[] floatArray1 = ArrayUtils.addAll(floatArray0, floatArray0);
      assertArrayEquals(new float[] {6.0F, 6.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {6.0F, 6.0F, 6.0F, 6.0F}, floatArray1, 0.01F);
      assertEquals(2, floatArray0.length);
      assertEquals(4, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (-1495L);
      doubleArray0[1] = (double) 1532L;
      doubleArray0[2] = (double) 1532L;
      doubleArray0[3] = (-1.0);
      doubleArray0[4] = (double) (-1L);
      ArrayUtils.reverse(doubleArray0, (-1253), (int) (byte)6);
      assertArrayEquals(new double[] {(-1.0), (-1.0), 1532.0, 1532.0, (-1495.0)}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test0620()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)79;
      byteArray0[2] = (byte) (-22);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)2;
      float[] floatArray0 = new float[0];
      float[] floatArray1 = ArrayUtils.addFirst(floatArray0, (float) (byte) (-118));
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-118.0F)}, floatArray1, 0.01F);
      assertEquals(0, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      
      short[] shortArray0 = new short[0];
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertNotNull(shortArray1);
      
      float[] floatArray2 = ArrayUtils.add(floatArray1, (float) (byte)1);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-118.0F)}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {(-118.0F), 1.0F}, floatArray2, 0.01F);
      assertEquals(0, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertEquals(2, floatArray2.length);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertNotSame(floatArray0, floatArray2);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray1, floatArray2);
      assertNotSame(floatArray2, floatArray1);
      assertNotSame(floatArray2, floatArray0);
      assertNotNull(floatArray2);
      
      ArrayUtils.swap((Object[]) shortArray1, (int) (byte) (-22), (int) (byte)2, 0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      
      char[] charArray0 = new char[4];
      charArray0[0] = '.';
      charArray0[1] = 'U';
      charArray0[2] = '>';
      charArray0[3] = 'p';
      ArrayUtils.reverse(charArray0);
      assertArrayEquals(new char[] {'p', '>', 'U', '.'}, charArray0);
      assertEquals(4, charArray0.length);
      
      int int0 = ArrayUtils.indexOf(floatArray1, (float) 0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-118.0F)}, floatArray1, 0.01F);
      assertEquals(0, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertFalse(floatArray0.equals((Object)floatArray2));
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertFalse(floatArray1.equals((Object)floatArray2));
      assertNotSame(floatArray0, floatArray2);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray1, floatArray2);
      assertEquals((-1), int0);
      
      ArrayUtils.reverse((double[]) null);
      ArrayUtils.reverse(floatArray2);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-118.0F)}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {1.0F, (-118.0F)}, floatArray2, 0.01F);
      assertEquals(0, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertEquals(2, floatArray2.length);
      assertFalse(floatArray0.equals((Object)floatArray2));
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertFalse(floatArray1.equals((Object)floatArray2));
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertNotSame(floatArray0, floatArray2);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray1, floatArray2);
      assertNotSame(floatArray2, floatArray1);
      assertNotSame(floatArray2, floatArray0);
      
      Byte[] byteArray1 = new Byte[7];
      byteArray1[0] = (Byte) (byte)2;
      byteArray1[1] = (Byte) (byte)0;
      byteArray1[2] = (Byte) (byte) (-22);
      byteArray1[3] = (Byte) (byte)0;
      byteArray1[4] = (Byte) (byte)79;
      byteArray1[5] = (Byte) (byte)79;
      byteArray1[6] = (Byte) (byte)2;
      byte[] byteArray2 = ArrayUtils.toPrimitive(byteArray1);
      assertArrayEquals(new byte[] {(byte)2, (byte)0, (byte) (-22), (byte)0, (byte)79, (byte)79, (byte)2}, byteArray2);
      assertEquals(7, byteArray1.length);
      assertEquals(7, byteArray2.length);
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertNotSame(byteArray2, byteArray0);
      assertNotNull(byteArray2);
  }

  @Test(timeout = 4000)
  public void test0621()  throws Throwable  {
      Byte byte0 = new Byte((byte)28);
      assertNotNull(byte0);
      assertEquals((byte)28, (byte)byte0);
      
      Byte[] byteArray0 = new Byte[8];
      byteArray0[0] = byte0;
      byteArray0[1] = byte0;
      byteArray0[2] = byte0;
      byteArray0[3] = byte0;
      byteArray0[4] = byte0;
      byteArray0[5] = byte0;
      byteArray0[6] = byte0;
      byteArray0[7] = byte0;
      byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0);
      assertArrayEquals(new byte[] {(byte)28, (byte)28, (byte)28, (byte)28, (byte)28, (byte)28, (byte)28, (byte)28}, byteArray1);
      assertEquals(8, byteArray0.length);
      assertEquals(8, byteArray1.length);
      assertNotNull(byteArray1);
  }

  @Test(timeout = 4000)
  public void test0622()  throws Throwable  {
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)2;
      shortArray0[1] = (short)64;
      short[] shortArray1 = ArrayUtils.removeAllOccurences(shortArray0, (short)64);
      assertArrayEquals(new short[] {(short)2, (short)64}, shortArray0);
      assertArrayEquals(new short[] {(short)2}, shortArray1);
      assertEquals(2, shortArray0.length);
      assertEquals(1, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) (short)2;
      floatArray0[1] = 2768.5557F;
      floatArray0[2] = 0.0F;
      char[] charArray0 = new char[7];
      charArray0[0] = '|';
      charArray0[1] = '>';
      charArray0[2] = '>';
      charArray0[3] = '>';
      charArray0[4] = '>';
      charArray0[5] = '>';
      charArray0[6] = '>';
      ArrayUtils.reverse(charArray0);
      assertArrayEquals(new char[] {'>', '>', '>', '>', '>', '>', '|'}, charArray0);
      assertEquals(7, charArray0.length);
      
      int int0 = ArrayUtils.indexOf(floatArray0, (-2548.0F));
      assertArrayEquals(new float[] {2.0F, 2768.5557F, 0.0F}, floatArray0, 0.01F);
      assertEquals(3, floatArray0.length);
      assertEquals((-1), int0);
      
      ArrayUtils.reverse((double[]) null);
      ArrayUtils.reverse(floatArray0);
      assertArrayEquals(new float[] {0.0F, 2768.5557F, 2.0F}, floatArray0, 0.01F);
      assertEquals(3, floatArray0.length);
      
      byte[] byteArray0 = ArrayUtils.toPrimitive((Byte[]) null);
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test0623()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)1;
      float[] floatArray0 = new float[2];
      Double double0 = new Double((byte)1);
      assertNotNull(double0);
      assertEquals(1.0, (double)double0, 0.01);
      
      Double double1 = new Double((-2551.364490886432));
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      assertEquals((-2551.364490886432), (double)double1, 0.01);
      
      Double[] doubleArray0 = new Double[2];
      doubleArray0[0] = double0;
      doubleArray0[1] = double1;
      Double[] doubleArray1 = ArrayUtils.nullToEmpty(doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertSame(doubleArray0, doubleArray1);
      assertSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      
      int int0 = (-1660);
      // Undeclared exception!
      try { 
        ArrayUtils.insert((-1660), floatArray0, floatArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1660, Length: 2
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0624()  throws Throwable  {
      float[] floatArray0 = new float[8];
      floatArray0[0] = (-971.6495F);
      floatArray0[1] = (-2025.0852F);
      floatArray0[2] = 1713.691F;
      floatArray0[3] = (-1.0F);
      floatArray0[4] = 1.0F;
      floatArray0[5] = 1192.67F;
      floatArray0[6] = 0.0F;
      floatArray0[7] = 1751.042F;
      ArrayUtils.reverse(floatArray0, 45, 45);
      assertArrayEquals(new float[] {(-971.6495F), (-2025.0852F), 1713.691F, (-1.0F), 1.0F, 1192.67F, 0.0F, 1751.042F}, floatArray0, 0.01F);
      assertEquals(8, floatArray0.length);
      
      Double[] doubleArray0 = new Double[6];
      Double double0 = new Double((-971.6495F));
      assertNotNull(double0);
      assertEquals((-971.6494750976562), (double)double0, 0.01);
      
      doubleArray0[0] = double0;
      Double double1 = new Double(1192.67F);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      assertEquals(1192.6700439453125, (double)double1, 0.01);
      
      doubleArray0[1] = double1;
      Double double2 = new Double(45);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertNotNull(double2);
      assertEquals(45.0, (double)double2, 0.01);
      
      doubleArray0[2] = double2;
      Double double3 = new Double((-1375.5));
      assertNotEquals((double)double3, (double)double2, 0.01);
      assertNotEquals((double)double3, (double)double1, 0.01);
      assertNotEquals((double)double3, (double)double0, 0.01);
      assertNotNull(double3);
      assertEquals((-1375.5), (double)double3, 0.01);
      
      doubleArray0[3] = double3;
      Double double4 = new Double(1192.67F);
      assertEquals((double)double4, (double)double1, 0.01);
      assertNotEquals((double)double4, (double)double3, 0.01);
      assertNotEquals((double)double4, (double)double2, 0.01);
      assertNotEquals((double)double4, (double)double0, 0.01);
      assertNotNull(double4);
      assertEquals(1192.6700439453125, (double)double4, 0.01);
      
      doubleArray0[4] = double4;
      Double double5 = new Double(1.5);
      assertNotEquals((double)double5, (double)double0, 0.01);
      assertNotEquals((double)double5, (double)double1, 0.01);
      assertNotEquals((double)double5, (double)double3, 0.01);
      assertNotEquals((double)double5, (double)double4, 0.01);
      assertNotEquals((double)double5, (double)double2, 0.01);
      assertNotNull(double5);
      assertEquals(1.5, (double)double5, 0.01);
      
      doubleArray0[5] = double5;
      Double[] doubleArray1 = ArrayUtils.nullToEmpty(doubleArray0);
      assertEquals(6, doubleArray1.length);
      assertEquals(6, doubleArray0.length);
      assertSame(doubleArray1, doubleArray0);
      assertSame(doubleArray0, doubleArray1);
      assertNotNull(doubleArray1);
  }

  @Test(timeout = 4000)
  public void test0625()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-1067.3453217133551);
      doubleArray0[1] = 1390.09730230525;
      doubleArray0[2] = 0.7;
      doubleArray0[3] = (-345.87729100814965);
      doubleArray0[4] = 1.5;
      doubleArray0[5] = 1.5;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 0.7, 267.728);
      assertArrayEquals(new double[] {(-1067.3453217133551), 1390.09730230525, 0.7, (-345.87729100814965), 1.5, 1.5}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      assertEquals(5, int0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((int[]) null, 5);
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertNotNull(bitSet0);
      
      boolean[] booleanArray0 = new boolean[0];
      // Undeclared exception!
      try { 
        ArrayUtils.remove(booleanArray0, 5);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 5, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0626()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)9;
      byteArray0[1] = (byte) (-44);
      byteArray0[2] = (byte) (-39);
      byteArray0[3] = (byte)2;
      byteArray0[4] = (byte)51;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)45;
      boolean boolean0 = ArrayUtils.isSameLength(byteArray0, byteArray0);
      assertArrayEquals(new byte[] {(byte)9, (byte) (-44), (byte) (-39), (byte)2, (byte)51, (byte)0, (byte)0, (byte)45, (byte)0}, byteArray0);
      assertEquals(9, byteArray0.length);
      assertTrue(boolean0);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (byte)45;
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short)45);
      assertArrayEquals(new short[] {(short)45}, shortArray0);
      assertEquals(1, shortArray0.length);
      assertEquals(0, int0);
      
      double[] doubleArray0 = new double[0];
      int int1 = ArrayUtils.lastIndexOf(doubleArray0, (double) (byte) (-39), (double) (byte)2);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      Object[] objectArray0 = new Object[0];
      ArrayUtils.swap(objectArray0, 106, (int) (byte)9, (-2382));
      assertEquals(0, objectArray0.length);
      
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertArrayEquals(new short[] {(short)45}, shortArray0);
      assertEquals(1, shortArray1.length);
      assertEquals(1, shortArray0.length);
      assertNotNull(shortArray1);
      
      int int2 = ArrayUtils.lastIndexOf(doubleArray0, (double) (byte)0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertTrue(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals((-1), int2);
  }

  @Test(timeout = 4000)
  public void test0627()  throws Throwable  {
      Byte[] byteArray0 = new Byte[2];
      Byte byte0 = new Byte((byte)3);
      assertNotNull(byte0);
      assertEquals((byte)3, (byte)byte0);
      
      Byte byte1 = new Byte((byte)2);
      assertFalse(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      assertEquals((byte)2, (byte)byte1);
      
      byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0, (byte)59);
      assertArrayEquals(new byte[] {(byte)59, (byte)59}, byteArray1);
      assertEquals(2, byteArray0.length);
      assertEquals(2, byteArray1.length);
      assertNotNull(byteArray1);
      
      int int0 = ArrayUtils.lastIndexOf((double[]) null, (-1.0));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0628()  throws Throwable  {
      Long long0 = new Long(4996L);
      assertNotNull(long0);
      assertEquals(4996L, (long)long0);
      
      String string0 = ArrayUtils.toString((Object) long0);
      assertNotNull(string0);
      assertEquals("4996", string0);
      
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = true;
      booleanArray0[6] = false;
      booleanArray0[7] = true;
      boolean boolean0 = ArrayUtils.contains(booleanArray0, true);
      assertTrue(Arrays.equals(new boolean[] {false, false, true, false, false, true, false, true}, booleanArray0));
      assertEquals(8, booleanArray0.length);
      assertTrue(boolean0);
      
      ArrayUtils.shift((Object[]) null, (-266), (-1784), (-266));
      int int0 = ArrayUtils.indexOf((Object[]) null, (Object) "4996");
      assertEquals((-1), int0);
      
      ArrayUtils.swap((Object[]) null, 0, 36, 896);
  }

  @Test(timeout = 4000)
  public void test0629()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 0;
      intArray0[1] = 127;
      boolean boolean0 = ArrayUtils.isSorted(intArray0);
      assertArrayEquals(new int[] {0, 127}, intArray0);
      assertEquals(2, intArray0.length);
      assertTrue(boolean0);
      
      long[] longArray0 = new long[3];
      longArray0[0] = (long) 0;
      longArray0[1] = (long) 0;
      longArray0[2] = (long) 0;
      long[] longArray1 = ArrayUtils.removeAllOccurrences(longArray0, (long) 0);
      assertArrayEquals(new long[] {0L, 0L, 0L}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertEquals(3, longArray0.length);
      assertEquals(0, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
      
      short[] shortArray0 = new short[4];
      shortArray0[1] = (short)0;
      Byte byte0 = new Byte((byte) (-52));
      assertNotNull(byte0);
      assertEquals((byte) (-52), (byte)byte0);
      
      int int0 = ArrayUtils.indexOf((Object[]) null, (Object) byte0);
      assertEquals((-1), int0);
      
      ArrayUtils.swap((Object[]) null, (int) (byte) (-52), 2435, (-3689));
      ArrayUtils.shift((Object[]) null, 0, (-5816), (-1));
      short[] shortArray1 = ArrayUtils.removeElements(shortArray0, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertEquals(4, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
  }

  @Test(timeout = 4000)
  public void test0630()  throws Throwable  {
      Byte byte0 = new Byte((byte)99);
      assertNotNull(byte0);
      assertEquals((byte)99, (byte)byte0);
      
      Byte byte1 = new Byte((byte)89);
      assertFalse(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      assertEquals((byte)89, (byte)byte1);
      
      Byte byte2 = new Byte((byte)99);
      assertTrue(byte2.equals((Object)byte0));
      assertFalse(byte2.equals((Object)byte1));
      assertNotNull(byte2);
      assertEquals((byte)99, (byte)byte2);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      int int0 = ArrayUtils.indexOf(booleanArray0, true, 91);
      assertTrue(Arrays.equals(new boolean[] {false, true}, booleanArray0));
      assertEquals(2, booleanArray0.length);
      assertEquals((-1), int0);
      
      Short short0 = new Short((short)48);
      assertNotNull(short0);
      assertEquals((short)48, (short)short0);
      
      Short short1 = new Short((short)108);
      assertFalse(short1.equals((Object)short0));
      assertNotNull(short1);
      assertEquals((short)108, (short)short1);
      
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short) (byte)99;
      shortArray0[1] = (short)8;
      shortArray0[2] = (short)3505;
      BitSet bitSet0 = ArrayUtils.indexesOf(shortArray0, (short)997, (int) (short)108);
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertArrayEquals(new short[] {(short)99, (short)8, (short)3505}, shortArray0);
      assertEquals(3, shortArray0.length);
      assertNotNull(bitSet0);
      
      Object[] objectArray0 = new Object[0];
      BitSet bitSet1 = ArrayUtils.indexesOf(objectArray0, (Object) byte0, (-4));
      assertTrue(bitSet1.isEmpty());
      assertEquals(0, bitSet1.length());
      assertEquals("{}", bitSet1.toString());
      assertEquals(64, bitSet1.size());
      assertEquals(0, bitSet1.cardinality());
      assertEquals(0, objectArray0.length);
      assertTrue(byte0.equals((Object)byte2));
      assertFalse(byte0.equals((Object)byte1));
      assertTrue(bitSet1.equals((Object)bitSet0));
      assertNotSame(bitSet1, bitSet0);
      assertNotNull(bitSet1);
      
      bitSet0.andNot(bitSet1);
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet1.isEmpty());
      assertEquals(0, bitSet1.length());
      assertEquals("{}", bitSet1.toString());
      assertEquals(64, bitSet1.size());
      assertEquals(0, bitSet1.cardinality());
      assertArrayEquals(new short[] {(short)99, (short)8, (short)3505}, shortArray0);
      assertEquals(3, shortArray0.length);
      assertEquals(0, objectArray0.length);
      assertTrue(byte0.equals((Object)byte2));
      assertFalse(byte0.equals((Object)byte1));
      assertTrue(bitSet0.equals((Object)bitSet1));
      assertTrue(bitSet1.equals((Object)bitSet0));
      assertNotSame(bitSet0, bitSet1);
      assertNotSame(bitSet1, bitSet0);
      
      int int1 = ArrayUtils.hashCode((Object) byte1);
      assertFalse(int1 == int0);
      assertFalse(byte1.equals((Object)byte0));
      assertFalse(byte1.equals((Object)byte2));
      
      Short[] shortArray1 = new Short[0];
      short[] shortArray2 = ArrayUtils.toPrimitive(shortArray1, (short) (-851));
      assertArrayEquals(new short[] {}, shortArray2);
      assertEquals(0, shortArray1.length);
      assertEquals(0, shortArray2.length);
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertNotSame(shortArray2, shortArray0);
      assertNotNull(shortArray2);
  }

  @Test(timeout = 4000)
  public void test0631()  throws Throwable  {
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)997;
      shortArray0[2] = (short)997;
      shortArray0[3] = (short)997;
      BitSet bitSet0 = ArrayUtils.indexesOf(shortArray0, (short)997, (int) (short)0);
      assertEquals(4, bitSet0.length());
      assertEquals("{0, 2, 3}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertFalse(bitSet0.isEmpty());
      assertEquals(3, bitSet0.cardinality());
      assertArrayEquals(new short[] {(short)997, (short)0, (short)997, (short)997}, shortArray0);
      assertEquals(4, shortArray0.length);
      assertNotNull(bitSet0);
      
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) (short)997;
      objectArray0[1] = (Object) (short)997;
      BitSet bitSet1 = ArrayUtils.indexesOf(objectArray0, (Object) bitSet0, (int) (short)997);
      assertEquals(4, bitSet0.length());
      assertEquals("{0, 2, 3}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertFalse(bitSet0.isEmpty());
      assertEquals(3, bitSet0.cardinality());
      assertEquals(64, bitSet1.size());
      assertEquals(0, bitSet1.length());
      assertEquals("{}", bitSet1.toString());
      assertTrue(bitSet1.isEmpty());
      assertEquals(0, bitSet1.cardinality());
      assertArrayEquals(new short[] {(short)997, (short)0, (short)997, (short)997}, shortArray0);
      assertEquals(4, shortArray0.length);
      assertEquals(2, objectArray0.length);
      assertFalse(bitSet1.equals((Object)bitSet0));
      assertNotSame(bitSet0, bitSet1);
      assertNotSame(bitSet1, bitSet0);
      assertNotNull(bitSet1);
      
      bitSet1.andNot(bitSet0);
      assertEquals(4, bitSet0.length());
      assertEquals("{0, 2, 3}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertFalse(bitSet0.isEmpty());
      assertEquals(3, bitSet0.cardinality());
      assertEquals(64, bitSet1.size());
      assertEquals(0, bitSet1.length());
      assertEquals("{}", bitSet1.toString());
      assertTrue(bitSet1.isEmpty());
      assertEquals(0, bitSet1.cardinality());
      assertArrayEquals(new short[] {(short)997, (short)0, (short)997, (short)997}, shortArray0);
      assertEquals(4, shortArray0.length);
      assertEquals(2, objectArray0.length);
      assertFalse(bitSet0.equals((Object)bitSet1));
      assertFalse(bitSet1.equals((Object)bitSet0));
      assertNotSame(bitSet0, bitSet1);
      assertNotSame(bitSet1, bitSet0);
      
      ArrayUtils.hashCode((Object) null);
      Short[] shortArray1 = new Short[5];
      shortArray1[0] = (Short) (short)0;
      shortArray1[1] = (Short) (short)0;
      shortArray1[2] = (Short) (short)997;
      shortArray1[3] = (Short) (short)0;
      Short short0 = new Short((short) shortArray1[2]);
      assertEquals(5, shortArray1.length);
      assertNotNull(short0);
      assertEquals((short)997, (short)short0);
      
      shortArray1[4] = short0;
      short[] shortArray2 = ArrayUtils.toPrimitive(shortArray1, (short)997);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)997, (short)0, (short)997}, shortArray2);
      assertEquals(5, shortArray2.length);
      assertEquals(5, shortArray1.length);
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertNotSame(shortArray2, shortArray0);
      assertNotNull(shortArray2);
  }

  @Test(timeout = 4000)
  public void test0632()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[0] = (byte) (-42);
      byteArray0[2] = (byte) (-42);
      byte[] byteArray1 = ArrayUtils.removeAllOccurences(byteArray0, (byte) (-42));
      assertArrayEquals(new byte[] {(byte) (-42), (byte)0, (byte) (-42)}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray1);
      assertEquals(3, byteArray0.length);
      assertEquals(1, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) (byte) (-42);
      floatArray0[1] = 729.9F;
      int int0 = ArrayUtils.lastIndexOf(floatArray0, 729.9F);
      assertArrayEquals(new float[] {(-42.0F), 729.9F}, floatArray0, 0.01F);
      assertEquals(2, floatArray0.length);
      assertEquals(1, int0);
      
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short) (byte) (-42);
      shortArray0[1] = (short) (byte) (-42);
      shortArray0[2] = (short) (byte) (-42);
      shortArray0[3] = (short) (byte) (-42);
      shortArray0[4] = (short) (byte) (-42);
      BitSet bitSet0 = ArrayUtils.indexesOf(shortArray0, (short)3505, (int) (short) (-42));
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertArrayEquals(new short[] {(short) (-42), (short) (-42), (short) (-42), (short) (-42), (short) (-42)}, shortArray0);
      assertEquals(5, shortArray0.length);
      assertNotNull(bitSet0);
      
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) (byte) (-42);
      objectArray0[1] = (Object) (short) (-42);
      objectArray0[2] = (Object) (byte) (-42);
      objectArray0[3] = (Object) bitSet0;
      objectArray0[4] = (Object) (short) (-42);
      objectArray0[5] = (Object) (short) (-42);
      objectArray0[6] = (Object) (byte) (-42);
      objectArray0[7] = (Object) (short) (-42);
      BitSet bitSet1 = ArrayUtils.indexesOf(objectArray0, objectArray0[2], (int) (short) (-42));
      assertEquals("{0, 2, 6}", bitSet1.toString());
      assertFalse(bitSet1.isEmpty());
      assertEquals(3, bitSet1.cardinality());
      assertEquals(7, bitSet1.length());
      assertEquals(64, bitSet1.size());
      assertEquals(8, objectArray0.length);
      assertFalse(bitSet1.equals((Object)bitSet0));
      assertNotSame(bitSet1, bitSet0);
      assertNotNull(bitSet1);
      
      bitSet0.andNot(bitSet1);
      assertEquals("{0, 2, 6}", bitSet1.toString());
      assertFalse(bitSet1.isEmpty());
      assertEquals(3, bitSet1.cardinality());
      assertEquals(7, bitSet1.length());
      assertEquals(64, bitSet1.size());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertArrayEquals(new short[] {(short) (-42), (short) (-42), (short) (-42), (short) (-42), (short) (-42)}, shortArray0);
      assertEquals(8, objectArray0.length);
      assertEquals(5, shortArray0.length);
      assertFalse(bitSet1.equals((Object)bitSet0));
      assertFalse(bitSet0.equals((Object)bitSet1));
      assertNotSame(bitSet1, bitSet0);
      assertNotSame(bitSet0, bitSet1);
      
      int int1 = ArrayUtils.hashCode((Object) bitSet0);
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertArrayEquals(new short[] {(short) (-42), (short) (-42), (short) (-42), (short) (-42), (short) (-42)}, shortArray0);
      assertEquals(5, shortArray0.length);
      assertFalse(int1 == int0);
      assertFalse(bitSet0.equals((Object)bitSet1));
      assertNotSame(bitSet0, bitSet1);
      
      Short[] shortArray1 = new Short[3];
      shortArray1[0] = (Short) (short) (-42);
      shortArray1[1] = (Short) (short) (-42);
      shortArray1[2] = (Short) (short) (-42);
      short[] shortArray2 = ArrayUtils.toPrimitive(shortArray1, (short) (-2371));
      assertArrayEquals(new short[] {(short) (-42), (short) (-42), (short) (-42)}, shortArray2);
      assertEquals(3, shortArray2.length);
      assertEquals(3, shortArray1.length);
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertNotSame(shortArray2, shortArray0);
      assertNotNull(shortArray2);
  }

  @Test(timeout = 4000)
  public void test0633()  throws Throwable  {
      float[] floatArray0 = new float[0];
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray0, (-1879.001F));
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
      assertNotNull(bitSet0);
      
      long[] longArray0 = new long[1];
      longArray0[0] = 12L;
      bitSet0.andNot(bitSet0);
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
      
      ArrayUtils.hashCode((Object) bitSet0);
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
      
      Short[] shortArray0 = new Short[1];
  }

  @Test(timeout = 4000)
  public void test0634()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      int int0 = mockRandom0.nextInt((int) (byte)3);
      assertEquals(0, int0);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) (byte)3;
      floatArray0[1] = (float) 0;
      floatArray0[2] = (float) (byte)3;
      floatArray0[3] = (float) 0;
      floatArray0[4] = (float) (byte)3;
      ArrayUtils.shuffle(floatArray0, (Random) mockRandom0);
      assertArrayEquals(new float[] {0.0F, 3.0F, 0.0F, 3.0F, 3.0F}, floatArray0, 0.01F);
      assertEquals(5, floatArray0.length);
      
      ArrayUtils.swap(floatArray0, (-506), 122, 122);
      assertArrayEquals(new float[] {0.0F, 3.0F, 0.0F, 3.0F, 3.0F}, floatArray0, 0.01F);
      assertEquals(5, floatArray0.length);
      
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short) (byte)3;
      shortArray0[1] = (short) (byte)3;
      shortArray0[2] = (short) (byte)3;
      shortArray0[3] = (short) (-1);
      shortArray0[4] = (short) (byte)3;
      shortArray0[5] = (short) (byte)3;
      shortArray0[6] = (short) (byte)3;
      shortArray0[7] = (short) (byte)3;
      short[] shortArray1 = ArrayUtils.subarray(shortArray0, (-1677), 122);
      assertArrayEquals(new short[] {(short)3, (short)3, (short)3, (short) (-1), (short)3, (short)3, (short)3, (short)3}, shortArray1);
      assertArrayEquals(new short[] {(short)3, (short)3, (short)3, (short) (-1), (short)3, (short)3, (short)3, (short)3}, shortArray0);
      assertEquals(8, shortArray1.length);
      assertEquals(8, shortArray0.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertNotNull(shortArray1);
  }

  @Test(timeout = 4000)
  public void test0635()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)79;
      byteArray0[2] = (byte) (-22);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)2;
      float[] floatArray0 = new float[0];
      float[] floatArray1 = ArrayUtils.addFirst(floatArray0, (float) (byte) (-118));
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-118.0F)}, floatArray1, 0.01F);
      assertEquals(0, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      
      short[] shortArray0 = new short[0];
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertNotNull(shortArray1);
      
      float[] floatArray2 = ArrayUtils.add(floatArray1, (float) (byte)1);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-118.0F)}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {(-118.0F), 1.0F}, floatArray2, 0.01F);
      assertEquals(0, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertEquals(2, floatArray2.length);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray0, floatArray2);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray1, floatArray2);
      assertNotSame(floatArray2, floatArray1);
      assertNotSame(floatArray2, floatArray0);
      assertNotNull(floatArray2);
      
      ArrayUtils.swap((Object[]) shortArray1, (int) (byte) (-22), (int) (byte)2, 0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      
      char[] charArray0 = new char[4];
      charArray0[0] = '.';
      charArray0[1] = 'U';
      charArray0[2] = '>';
      charArray0[3] = 'p';
      ArrayUtils.reverse(charArray0);
      assertArrayEquals(new char[] {'p', '>', 'U', '.'}, charArray0);
      assertEquals(4, charArray0.length);
      
      int int0 = ArrayUtils.indexOf(floatArray1, (float) 0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-118.0F)}, floatArray1, 0.01F);
      assertEquals(0, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray0.equals((Object)floatArray2));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertFalse(floatArray1.equals((Object)floatArray2));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray0, floatArray2);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray1, floatArray2);
      assertEquals((-1), int0);
      
      char[] charArray1 = ArrayUtils.addAll(charArray0, charArray0);
      assertArrayEquals(new char[] {'p', '>', 'U', '.', 'p', '>', 'U', '.'}, charArray1);
      assertArrayEquals(new char[] {'p', '>', 'U', '.'}, charArray0);
      assertEquals(8, charArray1.length);
      assertEquals(4, charArray0.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray0, charArray1);
      assertNotNull(charArray1);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) 'U';
      float[] floatArray3 = ArrayUtils.add(floatArray2, (float) (byte)0);
      assertArrayEquals(new float[] {(-118.0F), 1.0F, 0.0F}, floatArray3, 0.01F);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-118.0F)}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {(-118.0F), 1.0F}, floatArray2, 0.01F);
      assertEquals(3, floatArray3.length);
      assertEquals(0, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertEquals(2, floatArray2.length);
      assertFalse(floatArray3.equals((Object)floatArray0));
      assertFalse(floatArray3.equals((Object)floatArray2));
      assertFalse(floatArray3.equals((Object)floatArray1));
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray0.equals((Object)floatArray2));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertFalse(floatArray1.equals((Object)floatArray2));
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertNotSame(floatArray3, floatArray0);
      assertNotSame(floatArray3, floatArray2);
      assertNotSame(floatArray3, floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray0, floatArray2);
      assertNotSame(floatArray0, floatArray3);
      assertNotSame(floatArray1, floatArray3);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray1, floatArray2);
      assertNotSame(floatArray2, floatArray1);
      assertNotSame(floatArray2, floatArray0);
      assertNotSame(floatArray2, floatArray3);
      assertNotNull(floatArray3);
      
      float[] floatArray4 = ArrayUtils.clone(floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray4, 0.01F);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray4.length);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray0.equals((Object)floatArray2));
      assertFalse(floatArray0.equals((Object)floatArray3));
      assertFalse(floatArray4.equals((Object)floatArray3));
      assertFalse(floatArray4.equals((Object)floatArray1));
      assertFalse(floatArray4.equals((Object)floatArray0));
      assertFalse(floatArray4.equals((Object)floatArray2));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray0, floatArray2);
      assertNotSame(floatArray0, floatArray4);
      assertNotSame(floatArray0, floatArray3);
      assertNotSame(floatArray4, floatArray3);
      assertNotSame(floatArray4, floatArray1);
      assertNotSame(floatArray4, floatArray0);
      assertNotSame(floatArray4, floatArray2);
      assertNotNull(floatArray4);
      
      ArrayUtils.swap(floatArray3, (int) (byte) (-22), (int) (byte)79);
      assertArrayEquals(new float[] {(-118.0F), 1.0F, 0.0F}, floatArray3, 0.01F);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-118.0F)}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {(-118.0F), 1.0F}, floatArray2, 0.01F);
      assertEquals(3, floatArray3.length);
      assertEquals(0, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertEquals(2, floatArray2.length);
      assertFalse(floatArray3.equals((Object)floatArray0));
      assertFalse(floatArray3.equals((Object)floatArray4));
      assertFalse(floatArray3.equals((Object)floatArray2));
      assertFalse(floatArray3.equals((Object)floatArray1));
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray0.equals((Object)floatArray2));
      assertFalse(floatArray0.equals((Object)floatArray4));
      assertFalse(floatArray0.equals((Object)floatArray3));
      assertFalse(floatArray1.equals((Object)floatArray3));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertFalse(floatArray1.equals((Object)floatArray4));
      assertFalse(floatArray1.equals((Object)floatArray2));
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertFalse(floatArray2.equals((Object)floatArray4));
      assertFalse(floatArray2.equals((Object)floatArray3));
      assertNotSame(floatArray3, floatArray0);
      assertNotSame(floatArray3, floatArray4);
      assertNotSame(floatArray3, floatArray2);
      assertNotSame(floatArray3, floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray0, floatArray2);
      assertNotSame(floatArray0, floatArray4);
      assertNotSame(floatArray0, floatArray3);
      assertNotSame(floatArray1, floatArray3);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray1, floatArray4);
      assertNotSame(floatArray1, floatArray2);
      assertNotSame(floatArray2, floatArray1);
      assertNotSame(floatArray2, floatArray0);
      assertNotSame(floatArray2, floatArray4);
      assertNotSame(floatArray2, floatArray3);
  }

  @Test(timeout = 4000)
  public void test0636()  throws Throwable  {
      Byte[] byteArray0 = new Byte[2];
      byte byte0 = (byte)51;
      Byte byte1 = new Byte((byte)51);
      assertTrue(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      assertEquals((byte)51, (byte)byte1);
      
      byteArray0[0] = byte1;
      Byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0);
      assertEquals(2, byteArray0.length);
      assertEquals(2, byteArray1.length);
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      
      boolean boolean0 = ArrayUtils.contains((short[]) null, (short)202);
      assertFalse(boolean0);
      
      char[] charArray0 = new char[2];
      charArray0[0] = '.';
      charArray0[1] = 'L';
      ArrayUtils.reverse(charArray0, (int) (byte)51, (int) (byte)51);
      assertArrayEquals(new char[] {'.', 'L'}, charArray0);
      assertEquals(2, charArray0.length);
      
      Character character0 = new Character('.');
      assertNotNull(character0);
      assertEquals('.', (char)character0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = ArrayUtils.get((Object[]) byteArray0, (-609), object0);
      assertEquals(2, byteArray0.length);
      assertSame(byteArray0, byteArray1);
      assertSame(object0, object1);
      assertSame(object1, object0);
      assertNotNull(object1);
      
      ArrayUtils.shift((Object[]) byteArray0, (int) (short)202, (int) byte0, 322);
      assertEquals(2, byteArray0.length);
      assertSame(byteArray0, byteArray1);
      
      short[] shortArray0 = ArrayUtils.removeElements((short[]) null, (short[]) null);
      assertNull(shortArray0);
      
      ArrayUtils.reverse((Object[]) byteArray0);
      assertEquals(2, byteArray0.length);
      assertSame(byteArray0, byteArray1);
  }

  @Test(timeout = 4000)
  public void test0637()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 1.0F;
      doubleArray0[1] = 1.0;
      boolean boolean0 = ArrayUtils.isSameLength(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {1.0, 1.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      assertTrue(boolean0);
      
      char[] charArray0 = new char[1];
      charArray0[0] = ':';
      Character[] characterArray0 = ArrayUtils.toObject(charArray0);
      assertArrayEquals(new char[] {':'}, charArray0);
      assertEquals(1, charArray0.length);
      assertEquals(1, characterArray0.length);
      assertNotNull(characterArray0);
      
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (-506.073126), 1.0);
      assertArrayEquals(new double[] {1.0, 1.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals((-1), int0);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) (-1);
      longArray0[1] = (long) ':';
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray0, (long) (-1));
      assertEquals(1, bitSet0.length());
      assertEquals("{0}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertFalse(bitSet0.isEmpty());
      assertEquals(1, bitSet0.cardinality());
      assertArrayEquals(new long[] {(-1L), 58L}, longArray0);
      assertEquals(2, longArray0.length);
      assertNotNull(bitSet0);
      
      long[] longArray1 = ArrayUtils.add(longArray0, (-85L));
      assertArrayEquals(new long[] {(-1L), 58L}, longArray0);
      assertArrayEquals(new long[] {(-1L), 58L, (-85L)}, longArray1);
      assertEquals(2, longArray0.length);
      assertEquals(3, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
      
      long[] longArray2 = ArrayUtils.removeElements(longArray0, longArray0);
      assertArrayEquals(new long[] {(-1L), 58L}, longArray0);
      assertArrayEquals(new long[] {}, longArray2);
      assertEquals(2, longArray0.length);
      assertEquals(0, longArray2.length);
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray2.equals((Object)longArray0));
      assertFalse(longArray2.equals((Object)longArray1));
      assertNotSame(longArray0, longArray2);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray2, longArray0);
      assertNotSame(longArray2, longArray1);
      assertNotNull(longArray2);
      
      boolean boolean1 = ArrayUtils.contains(longArray0, (-1L));
      assertArrayEquals(new long[] {(-1L), 58L}, longArray0);
      assertEquals(2, longArray0.length);
      assertFalse(longArray0.equals((Object)longArray2));
      assertFalse(longArray0.equals((Object)longArray1));
      assertTrue(boolean1 == boolean0);
      assertNotSame(longArray0, longArray2);
      assertNotSame(longArray0, longArray1);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test0638()  throws Throwable  {
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short) (-1);
      shortArray0[1] = (short)43;
      char[] charArray0 = new char[7];
      charArray0[0] = 'E';
      charArray0[1] = '0';
      charArray0[2] = '0';
      charArray0[3] = '0';
      charArray0[4] = '0';
      charArray0[5] = '0';
      charArray0[6] = '0';
      char[] charArray1 = new char[1];
      assertFalse(charArray1.equals((Object)charArray0));
      
      charArray1[0] = '0';
      char[] charArray2 = ArrayUtils.add(charArray1, '0');
      assertArrayEquals(new char[] {'0'}, charArray1);
      assertArrayEquals(new char[] {'0', '0'}, charArray2);
      assertEquals(1, charArray1.length);
      assertEquals(2, charArray2.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray1));
      assertNotSame(charArray1, charArray2);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray2, charArray0);
      assertNotSame(charArray2, charArray1);
      assertNotNull(charArray2);
      
      int[] intArray0 = new int[7];
      intArray0[0] = (int) '0';
      intArray0[1] = (int) '0';
      intArray0[2] = (int) '0';
      intArray0[3] = (int) '0';
      intArray0[4] = (int) '0';
      intArray0[5] = (int) '|';
      intArray0[6] = (int) '0';
      boolean boolean0 = ArrayUtils.contains(intArray0, 8);
      assertArrayEquals(new int[] {48, 48, 48, 48, 48, 124, 48}, intArray0);
      assertEquals(7, intArray0.length);
      assertFalse(boolean0);
      
      int int0 = ArrayUtils.getLength((Object) null);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test0639()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      int int0 = ArrayUtils.indexOf(intArray0, 0, 0);
      assertArrayEquals(new int[] {0}, intArray0);
      assertEquals(1, intArray0.length);
      assertEquals(0, int0);
      
      String string0 = ArrayUtils.toString((Object) "");
      assertNotNull(string0);
      assertEquals("", string0);
      
      int[] intArray1 = ArrayUtils.subarray(intArray0, (-127), 0);
      assertArrayEquals(new int[] {0}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(1, intArray0.length);
      assertEquals(0, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      
      char[] charArray0 = new char[1];
      charArray0[0] = ' ';
      char[] charArray1 = ArrayUtils.removeElement(charArray0, ' ');
      assertArrayEquals(new char[] {' '}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertEquals(1, charArray0.length);
      assertEquals(0, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = 0.0F;
      floatArray0[1] = (float) ' ';
      floatArray0[2] = (-1569.0298F);
      floatArray0[3] = (float) 0;
      floatArray0[4] = (float) 0;
      floatArray0[5] = 0.0F;
      floatArray0[6] = (float) 0;
      float[] floatArray1 = ArrayUtils.removeAllOccurences(floatArray0, 3501.0F);
      assertArrayEquals(new float[] {0.0F, 32.0F, (-1569.0298F), 0.0F, 0.0F, 0.0F, 0.0F}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {0.0F, 32.0F, (-1569.0298F), 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(7, floatArray1.length);
      assertEquals(7, floatArray0.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertNotNull(floatArray1);
      
      Boolean boolean0 = Boolean.valueOf("");
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      long[] longArray0 = new long[5];
      longArray0[0] = (long) (-127);
      longArray0[1] = (long) (-127);
      longArray0[2] = (long) 0;
      longArray0[3] = (long) ' ';
      longArray0[4] = (long) ' ';
      Long[] longArray1 = ArrayUtils.toObject(longArray0);
      assertArrayEquals(new long[] {(-127L), (-127L), 0L, 32L, 32L}, longArray0);
      assertEquals(5, longArray0.length);
      assertEquals(5, longArray1.length);
      assertNotNull(longArray1);
      
      char[] charArray2 = ArrayUtils.subarray(charArray1, 3949, 0);
      assertArrayEquals(new char[] {' '}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertArrayEquals(new char[] {}, charArray2);
      assertEquals(1, charArray0.length);
      assertEquals(0, charArray1.length);
      assertEquals(0, charArray2.length);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray1));
      assertNotSame(charArray0, charArray2);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray1, charArray2);
      assertNotSame(charArray2, charArray0);
      assertNotSame(charArray2, charArray1);
      assertNotNull(charArray2);
  }

  @Test(timeout = 4000)
  public void test0640()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)1;
      byteArray0[2] = (byte) (-22);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 85.0;
      doubleArray0[1] = (-1065.0);
      doubleArray0[2] = 85.0;
      doubleArray0[3] = (double) (byte)1;
      int int0 = ArrayUtils.indexOf(doubleArray0, 42.0, (int) (byte) (-22), 427.966908);
      assertArrayEquals(new double[] {85.0, (-1065.0), 85.0, 1.0}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      assertEquals(0, int0);
      
      boolean boolean0 = ArrayUtils.isSorted((char[]) null);
      assertTrue(boolean0);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (byte)1;
      shortArray0[1] = (short) (byte)1;
      short[] shortArray1 = ArrayUtils.removeElements(shortArray0, shortArray0);
      assertArrayEquals(new short[] {(short)1, (short)1}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertEquals(2, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
  }

  @Test(timeout = 4000)
  public void test0641()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[1] = 'W';
      charArray0[2] = 'M';
      String[] stringArray0 = new String[1];
      stringArray0[0] = "org.apache.commons.lang3.builder.ToStringStyle$DefaultToStringStyle";
      String[] stringArray1 = ArrayUtils.addFirst(stringArray0, "org.apache.commons.lang3.builder.ToStringStyle$DefaultToStringStyle");
      assertEquals(1, stringArray0.length);
      assertEquals(2, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertNotNull(stringArray1);
      
      boolean boolean0 = ArrayUtils.isSorted(charArray0);
      assertArrayEquals(new char[] {'\u0000', 'W', 'M', '\u0000'}, charArray0);
      assertEquals(4, charArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0642()  throws Throwable  {
      Long[] longArray0 = new Long[9];
      long long0 = 0L;
      Long long1 = new Long(0L);
      assertTrue(long1.equals((Object)long0));
      assertNotNull(long1);
      assertEquals(0L, (long)long1);
      
      longArray0[1] = long1;
      Long long2 = new Long(long0);
      assertTrue(long2.equals((Object)long0));
      assertTrue(long2.equals((Object)long1));
      assertNotNull(long2);
      assertEquals(0L, (long)long2);
      
      longArray0[2] = long2;
      Long long3 = new Long((-1734L));
      assertFalse(long3.equals((Object)long0));
      assertFalse(long3.equals((Object)long2));
      assertFalse(long3.equals((Object)long1));
      assertNotNull(long3);
      assertEquals((-1734L), (long)long3);
      
      longArray0[3] = long3;
      Long long4 = new Long(1845L);
      assertFalse(long4.equals((Object)long0));
      assertFalse(long4.equals((Object)long2));
      assertFalse(long4.equals((Object)long3));
      assertFalse(long4.equals((Object)long1));
      assertNotNull(long4);
      assertEquals(1845L, (long)long4);
      
      longArray0[4] = long4;
      Long long5 = new Long(0L);
      assertTrue(long5.equals((Object)long1));
      assertTrue(long5.equals((Object)long2));
      assertFalse(long5.equals((Object)long4));
      assertTrue(long5.equals((Object)long0));
      assertFalse(long5.equals((Object)long3));
      assertNotNull(long5);
      assertEquals(0L, (long)long5);
      
      longArray0[5] = long5;
      Long long6 = new Long(0L);
      assertFalse(long6.equals((Object)long4));
      assertTrue(long6.equals((Object)long5));
      assertTrue(long6.equals((Object)long1));
      assertTrue(long6.equals((Object)long2));
      assertTrue(long6.equals((Object)long0));
      assertFalse(long6.equals((Object)long3));
      assertNotNull(long6);
      assertEquals(0L, (long)long6);
      
      longArray0[6] = long6;
      longArray0[7] = (Long) long0;
      Long long7 = new Long((-1734L));
      assertFalse(long7.equals((Object)long0));
      assertFalse(long7.equals((Object)long2));
      assertFalse(long7.equals((Object)long1));
      assertFalse(long7.equals((Object)long5));
      assertTrue(long7.equals((Object)long3));
      assertFalse(long7.equals((Object)long6));
      assertFalse(long7.equals((Object)long4));
      assertNotNull(long7);
      assertEquals((-1734L), (long)long7);
      
      longArray0[8] = long7;
      Long[] longArray1 = ArrayUtils.subarray(longArray0, 371, 371);
      assertEquals(9, longArray0.length);
      assertEquals(0, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'Y';
      boolean boolean0 = ArrayUtils.isSorted(charArray0);
      assertArrayEquals(new char[] {'Y'}, charArray0);
      assertEquals(1, charArray0.length);
      assertTrue(boolean0);
      
      boolean boolean1 = ArrayUtils.isSameLength(charArray0, charArray0);
      assertArrayEquals(new char[] {'Y'}, charArray0);
      assertEquals(1, charArray0.length);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test0643()  throws Throwable  {
      Long long0 = new Long(4996L);
      assertNotNull(long0);
      assertEquals(4996L, (long)long0);
      
      String string0 = ArrayUtils.toString((Object) long0);
      assertNotNull(string0);
      assertEquals("4996", string0);
      
      int[] intArray0 = ArrayUtils.removeAllOccurrences((int[]) null, 53);
      assertNull(intArray0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((int[]) null, 53);
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertNotNull(bitSet0);
      
      BitSet bitSet1 = ArrayUtils.indexesOf((int[]) null, (-2228), 4);
      assertEquals(0, bitSet1.length());
      assertEquals(0, bitSet1.cardinality());
      assertEquals("{}", bitSet1.toString());
      assertTrue(bitSet1.isEmpty());
      assertEquals(64, bitSet1.size());
      assertTrue(bitSet1.equals((Object)bitSet0));
      assertNotSame(bitSet1, bitSet0);
      assertNotNull(bitSet1);
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object) bitSet0, bitSet1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test0644()  throws Throwable  {
      Object[] objectArray0 = new Object[12];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[8] = object0;
      Character character0 = new Character('k');
      assertNotNull(character0);
      assertEquals('k', (char)character0);
      
      Object object1 = ArrayUtils.get(objectArray0, 48, (Object) character0);
      assertEquals(12, objectArray0.length);
      assertNotNull(object1);
      assertEquals('k', object1);
      
      objectArray0[1] = object1;
      Double double0 = new Double(48);
      assertNotNull(double0);
      assertEquals(48.0, (double)double0, 0.01);
      
      int int0 = ArrayUtils.indexOf(objectArray0, (Object) double0, 48);
      assertEquals(12, objectArray0.length);
      assertEquals((-1), int0);
      
      long[] longArray0 = new long[5];
      longArray0[0] = (long) (-1);
      longArray0[1] = (long) 48;
      longArray0[2] = (long) 48;
      longArray0[3] = (long) 'k';
      longArray0[4] = (long) 'Y';
      ArrayUtils.reverse(longArray0, 3191, (-1668));
      assertArrayEquals(new long[] {(-1L), 48L, 48L, 107L, 89L}, longArray0);
      assertEquals(5, longArray0.length);
      
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = true;
      booleanArray0[6] = true;
      ArrayUtils.shuffle(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, true, false, false, true, true, false}, booleanArray0));
      assertEquals(7, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test0645()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      Character character0 = new Character('Y');
      assertNotNull(character0);
      assertEquals('Y', (char)character0);
      
      Object object1 = ArrayUtils.get(objectArray0, 48, (Object) character0);
      assertEquals(2, objectArray0.length);
      assertNotNull(object1);
      assertEquals('Y', object1);
      
      objectArray0[1] = object1;
      ArrayUtils.shift(objectArray0, 48, 0, 48);
      assertEquals(2, objectArray0.length);
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (-102);
      shortArray0[1] = (short)822;
      shortArray0[2] = (short) (-1);
      Boolean boolean0 = Boolean.valueOf("Yi!F{Kq");
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      Boolean boolean1 = new Boolean("");
      assertTrue(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      assertFalse(boolean1);
      
      Boolean boolean2 = new Boolean("Cannot store ");
      assertTrue(boolean2.equals((Object)boolean1));
      assertTrue(boolean2.equals((Object)boolean0));
      assertNotNull(boolean2);
      assertFalse(boolean2);
      
      Boolean boolean3 = new Boolean(false);
      assertTrue(boolean3.equals((Object)boolean1));
      assertTrue(boolean3.equals((Object)boolean2));
      assertTrue(boolean3.equals((Object)boolean0));
      assertNotNull(boolean3);
      assertFalse(boolean3);
      
      Boolean boolean4 = Boolean.FALSE;
      assertTrue(boolean4.equals((Object)boolean3));
      assertTrue(boolean4.equals((Object)boolean2));
      assertTrue(boolean4.equals((Object)boolean1));
      assertNotNull(boolean4);
      assertFalse(boolean4);
      
      Boolean boolean5 = Boolean.FALSE;
      assertTrue(boolean5.equals((Object)boolean1));
      assertTrue(boolean5.equals((Object)boolean2));
      assertTrue(boolean5.equals((Object)boolean3));
      assertNotNull(boolean5);
      assertFalse(boolean5);
      
      Boolean boolean6 = Boolean.valueOf("Cannot store ");
      assertTrue(boolean6.equals((Object)boolean1));
      assertTrue(boolean6.equals((Object)boolean2));
      assertTrue(boolean6.equals((Object)boolean3));
      assertNotNull(boolean6);
      assertFalse(boolean6);
      
      Boolean boolean7 = Boolean.FALSE;
      assertTrue(boolean7.equals((Object)boolean3));
      assertTrue(boolean7.equals((Object)boolean2));
      assertTrue(boolean7.equals((Object)boolean1));
      assertNotNull(boolean7);
      assertFalse(boolean7);
      
      Boolean[] booleanArray0 = new Boolean[1];
      booleanArray0[0] = boolean2;
      Boolean[] booleanArray1 = ArrayUtils.nullToEmpty(booleanArray0);
      assertEquals(1, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertSame(booleanArray0, booleanArray1);
      assertSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      
      char[] charArray0 = new char[0];
      char[] charArray1 = ArrayUtils.add(charArray0, 'Y');
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {'Y'}, charArray1);
      assertEquals(0, charArray0.length);
      assertEquals(1, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      
      boolean[] booleanArray2 = new boolean[4];
      booleanArray2[0] = false;
      booleanArray2[1] = (boolean) boolean2;
      booleanArray2[2] = (boolean) boolean2;
      booleanArray2[3] = (boolean) boolean2;
      MockRandom mockRandom0 = new MockRandom((short) (-1));
      assertNotNull(mockRandom0);
      
      ArrayUtils.shuffle(booleanArray2, (Random) mockRandom0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false}, booleanArray2));
      assertEquals(4, booleanArray2.length);
  }

  @Test(timeout = 4000)
  public void test0646()  throws Throwable  {
      byte[] byteArray0 = ArrayUtils.toPrimitive((Byte[]) null);
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test0647()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)9;
      byteArray0[1] = (byte) (-44);
      byteArray0[2] = (byte) (-39);
      byteArray0[3] = (byte)2;
      byteArray0[4] = (byte)51;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)45;
      boolean boolean0 = ArrayUtils.isSameLength(byteArray0, byteArray0);
      assertArrayEquals(new byte[] {(byte)9, (byte) (-44), (byte) (-39), (byte)2, (byte)51, (byte)0, (byte)0, (byte)45, (byte)0}, byteArray0);
      assertEquals(9, byteArray0.length);
      assertTrue(boolean0);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (byte)45;
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short)45);
      assertArrayEquals(new short[] {(short)45}, shortArray0);
      assertEquals(1, shortArray0.length);
      assertEquals(0, int0);
      
      double[] doubleArray0 = new double[0];
      int int1 = ArrayUtils.lastIndexOf(doubleArray0, (double) (byte) (-39), (double) (byte)2);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      Object[] objectArray0 = new Object[0];
      ArrayUtils.swap(objectArray0, 106, (int) (byte)9, (-2382));
      assertEquals(0, objectArray0.length);
      
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertArrayEquals(new short[] {(short)45}, shortArray0);
      assertEquals(1, shortArray1.length);
      assertEquals(1, shortArray0.length);
      assertNotNull(shortArray1);
      
      ArrayUtils.reverse(shortArray0, (-2203), 6);
      assertArrayEquals(new short[] {(short)45}, shortArray0);
      assertEquals(1, shortArray0.length);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      boolean[] booleanArray1 = ArrayUtils.addAll(booleanArray0, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true, true, true, true}, booleanArray1));
      assertEquals(4, booleanArray0.length);
      assertEquals(8, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      
      byte[] byteArray1 = ArrayUtils.toPrimitive((Byte[]) null);
      assertNull(byteArray1);
  }

  @Test(timeout = 4000)
  public void test0648()  throws Throwable  {
      Byte[] byteArray0 = new Byte[2];
      byte byte0 = (byte)51;
      Byte byte1 = new Byte((byte)51);
      assertTrue(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      assertEquals((byte)51, (byte)byte1);
      
      byteArray0[0] = byte1;
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 68.0;
      boolean boolean0 = ArrayUtils.contains(doubleArray0, (double) byte0, (-1528.9129008501));
      assertArrayEquals(new double[] {68.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertFalse(boolean0);
      
      int int0 = ArrayUtils.indexOf(doubleArray0, 2628.059742348748, (double) (byte)51);
      assertArrayEquals(new double[] {68.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0649()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 687.016;
      double[] doubleArray1 = ArrayUtils.removeAllOccurrences(doubleArray0, 687.016);
      assertArrayEquals(new double[] {687.016}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      
      long[] longArray0 = new long[10];
      longArray0[0] = 0L;
      longArray0[1] = 0L;
      longArray0[2] = (-1909L);
      longArray0[3] = 2226L;
      longArray0[4] = 0L;
      longArray0[5] = 0L;
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) 0L;
      floatArray0[1] = (-1647.477F);
      floatArray0[2] = (-1.0F);
      floatArray0[3] = (float) (-283L);
      floatArray0[4] = (float) 2226L;
      ArrayUtils.reverse(floatArray0);
      assertArrayEquals(new float[] {2226.0F, (-283.0F), (-1.0F), (-1647.477F), 0.0F}, floatArray0, 0.01F);
      assertEquals(5, floatArray0.length);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'X';
      boolean boolean0 = ArrayUtils.isNotEmpty(charArray0);
      assertArrayEquals(new char[] {'X'}, charArray0);
      assertEquals(1, charArray0.length);
      assertTrue(boolean0);
      
      double[] doubleArray2 = ArrayUtils.removeElements(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {687.016}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {687.016}, doubleArray2, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertEquals(1, doubleArray2.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotNull(doubleArray2);
      
      short[] shortArray0 = ArrayUtils.toPrimitive((Short[]) null);
      assertNull(shortArray0);
      
      int int0 = ArrayUtils.indexOf(doubleArray0, (-3697.2242755), (-686.9602048553));
      assertArrayEquals(new double[] {687.016}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0650()  throws Throwable  {
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)2;
      shortArray0[1] = (short)64;
      short[] shortArray1 = ArrayUtils.removeAllOccurences(shortArray0, (short)64);
      assertArrayEquals(new short[] {(short)2, (short)64}, shortArray0);
      assertArrayEquals(new short[] {(short)2}, shortArray1);
      assertEquals(2, shortArray0.length);
      assertEquals(1, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      
      int[] intArray0 = new int[8];
      intArray0[1] = (int) (short)2;
      intArray0[2] = (int) (short)2;
      intArray0[3] = (int) (short)64;
      intArray0[4] = (int) (short)2;
      intArray0[5] = (int) (short)2;
      long[] longArray0 = new long[3];
      longArray0[0] = (long) 2;
      longArray0[1] = (long) (-3850);
      longArray0[2] = (long) 64;
      ArrayUtils.shift(longArray0, 1185, 1185, 2);
      assertArrayEquals(new long[] {2L, (-3850L), 64L}, longArray0);
      assertEquals(3, longArray0.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.remove(shortArray1, (int) (short)64);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 64, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0651()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 1.0F;
      doubleArray0[1] = 1.0;
      boolean boolean0 = ArrayUtils.isSameLength(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {1.0, 1.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      assertTrue(boolean0);
      
      char[] charArray0 = new char[1];
      charArray0[0] = ':';
      Character[] characterArray0 = ArrayUtils.toObject(charArray0);
      assertArrayEquals(new char[] {':'}, charArray0);
      assertEquals(1, charArray0.length);
      assertEquals(1, characterArray0.length);
      assertNotNull(characterArray0);
      
      ArrayUtils.shift((long[]) null, (-2171), (-2171), (-2171));
  }

  @Test(timeout = 4000)
  public void test0652()  throws Throwable  {
      float[] floatArray0 = new float[3];
      floatArray0[0] = Float.NaN;
      floatArray0[1] = Float.NaN;
      floatArray0[2] = Float.NaN;
      boolean boolean0 = ArrayUtils.isSameLength(floatArray0, floatArray0);
      assertArrayEquals(new float[] {Float.NaN, Float.NaN, Float.NaN}, floatArray0, 0.01F);
      assertEquals(3, floatArray0.length);
      assertTrue(boolean0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((byte[]) null, (byte) (-111), (int) (byte) (-111));
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertNotNull(bitSet0);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) (byte) (-111);
      ArrayUtils.shift(longArray0, (int) (byte) (-111), (-19), 97);
      assertArrayEquals(new long[] {(-111L)}, longArray0);
      assertEquals(1, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test0653()  throws Throwable  {
      float[] floatArray0 = new float[3];
      floatArray0[0] = (-1397.05F);
      floatArray0[1] = 2381.4106F;
      floatArray0[2] = (-1.0F);
      float[] floatArray1 = ArrayUtils.nullToEmpty(floatArray0);
      assertArrayEquals(new float[] {(-1397.05F), 2381.4106F, (-1.0F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-1397.05F), 2381.4106F, (-1.0F)}, floatArray1, 0.01F);
      assertEquals(3, floatArray0.length);
      assertEquals(3, floatArray1.length);
      assertSame(floatArray0, floatArray1);
      assertSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      
      int[] intArray0 = new int[0];
      int[] intArray1 = ArrayUtils.removeAllOccurrences(intArray0, 288);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      ArrayUtils.swap(booleanArray0, 0, 288);
      assertTrue(Arrays.equals(new boolean[] {false, false, true, true}, booleanArray0));
      assertEquals(4, booleanArray0.length);
      
      long[] longArray0 = new long[4];
      longArray0[0] = (long) 0;
      longArray0[1] = (long) 0;
      longArray0[2] = (long) 0;
      longArray0[3] = (long) 288;
      ArrayUtils.shift(longArray0, 0, 0, (-164));
      assertArrayEquals(new long[] {0L, 0L, 0L, 288L}, longArray0);
      assertEquals(4, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test0654()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      boolean boolean0 = ArrayUtils.isSameLength(booleanArray0, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals(0, booleanArray0.length);
      assertTrue(boolean0);
      
      boolean[] booleanArray1 = ArrayUtils.nullToEmpty(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short)903;
      shortArray0[1] = (short)1128;
      shortArray0[2] = (short)70;
      shortArray0[3] = (short)321;
      shortArray0[4] = (short) (-2531);
      shortArray0[5] = (short) (-348);
      shortArray0[6] = (short)512;
      shortArray0[7] = (short)97;
      short[] shortArray1 = ArrayUtils.subarray(shortArray0, 65, (int) (short)903);
      assertArrayEquals(new short[] {(short)903, (short)1128, (short)70, (short)321, (short) (-2531), (short) (-348), (short)512, (short)97}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertEquals(8, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      
      long[] longArray0 = new long[4];
      longArray0[0] = (long) (short)321;
      longArray0[1] = (long) (short)1128;
      longArray0[2] = (long) (short) (-348);
      longArray0[3] = (long) (short) (-2531);
      int int0 = ArrayUtils.lastIndexOf(longArray0, (-1L), 57);
      assertArrayEquals(new long[] {321L, 1128L, (-348L), (-2531L)}, longArray0);
      assertEquals(4, longArray0.length);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0655()  throws Throwable  {
      Byte[] byteArray0 = new Byte[2];
      Byte byte0 = new Byte((byte)51);
      assertNotNull(byte0);
      assertEquals((byte)51, (byte)byte0);
      
      byteArray0[0] = byte0;
      Byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0);
      assertEquals(2, byteArray0.length);
      assertEquals(2, byteArray1.length);
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      
      boolean boolean0 = ArrayUtils.isNotEmpty((short[]) null);
      assertFalse(boolean0);
      
      ArrayUtils.swap((Object[]) byteArray1, (int) (byte)51, (int) (short)202, (int) (byte)51);
      assertEquals(2, byteArray0.length);
      assertEquals(2, byteArray1.length);
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray1, byteArray0);
      
      byte[] byteArray2 = new byte[4];
      byteArray2[0] = (byte)51;
      ArrayUtils.shuffle(byteArray2);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)51}, byteArray2);
      assertEquals(4, byteArray2.length);
      
      char[] charArray0 = new char[3];
      charArray0[0] = 'o';
      charArray0[1] = 'e';
      charArray0[2] = '/';
      // Undeclared exception!
      try { 
        ArrayUtils.insert((int) (short)202, charArray0, charArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 202, Length: 3
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0656()  throws Throwable  {
      long[] longArray0 = new long[8];
      longArray0[0] = (long) (byte)28;
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      boolean[] booleanArray1 = ArrayUtils.removeAllOccurences(booleanArray0, false);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertEquals(2, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      
      boolean[] booleanArray2 = new boolean[3];
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      
      booleanArray2[0] = false;
      booleanArray2[1] = false;
      booleanArray2[2] = false;
      boolean[] booleanArray3 = ArrayUtils.removeElements(booleanArray2, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray2));
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray3));
      assertEquals(2, booleanArray0.length);
      assertEquals(3, booleanArray2.length);
      assertEquals(1, booleanArray3.length);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray0.equals((Object)booleanArray2));
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertFalse(booleanArray3.equals((Object)booleanArray2));
      assertFalse(booleanArray3.equals((Object)booleanArray0));
      assertFalse(booleanArray3.equals((Object)booleanArray1));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray0, booleanArray2);
      assertNotSame(booleanArray0, booleanArray3);
      assertNotSame(booleanArray2, booleanArray3);
      assertNotSame(booleanArray2, booleanArray0);
      assertNotSame(booleanArray2, booleanArray1);
      assertNotSame(booleanArray3, booleanArray2);
      assertNotSame(booleanArray3, booleanArray0);
      assertNotSame(booleanArray3, booleanArray1);
      assertNotNull(booleanArray3);
      
      boolean[] booleanArray4 = ArrayUtils.nullToEmpty(booleanArray2);
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray2));
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray4));
      assertEquals(3, booleanArray2.length);
      assertEquals(3, booleanArray4.length);
      assertFalse(booleanArray2.equals((Object)booleanArray3));
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertFalse(booleanArray4.equals((Object)booleanArray0));
      assertFalse(booleanArray4.equals((Object)booleanArray3));
      assertFalse(booleanArray4.equals((Object)booleanArray1));
      assertNotSame(booleanArray2, booleanArray3);
      assertNotSame(booleanArray2, booleanArray0);
      assertNotSame(booleanArray2, booleanArray1);
      assertSame(booleanArray2, booleanArray4);
      assertNotSame(booleanArray4, booleanArray0);
      assertNotSame(booleanArray4, booleanArray3);
      assertNotSame(booleanArray4, booleanArray1);
      assertSame(booleanArray4, booleanArray2);
      assertNotNull(booleanArray4);
      
      // Undeclared exception!
      try { 
        ArrayUtils.remove(booleanArray0, (-1211));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1211, Length: 2
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0657()  throws Throwable  {
      Object object0 = ArrayUtils.toPrimitive((Object) null);
      assertNull(object0);
      
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = true;
      booleanArray0[5] = false;
      booleanArray0[6] = false;
      booleanArray0[7] = false;
      boolean[] booleanArray1 = ArrayUtils.nullToEmpty(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, true, false, false, true, false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, true, false, false, true, false, false, false}, booleanArray1));
      assertEquals(8, booleanArray0.length);
      assertEquals(8, booleanArray1.length);
      assertSame(booleanArray0, booleanArray1);
      assertSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short) (-18);
      shortArray0[1] = (short)3550;
      shortArray0[2] = (short)82;
      shortArray0[3] = (short) (-1131);
      shortArray0[4] = (short) (-8456);
      boolean boolean0 = ArrayUtils.isNotEmpty(shortArray0);
      assertArrayEquals(new short[] {(short) (-18), (short)3550, (short)82, (short) (-1131), (short) (-8456)}, shortArray0);
      assertEquals(5, shortArray0.length);
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.add(shortArray0, (int) (short)82, (short)3695);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 82, Length: 5
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0658()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)9;
      Byte byte0 = new Byte((byte)9);
      assertNotNull(byte0);
      assertEquals((byte)9, (byte)byte0);
      
      Byte[] byteArray1 = new Byte[2];
      byteArray1[0] = (Byte) (byte)9;
      byteArray1[1] = (Byte) (byte)9;
      byte[] byteArray2 = ArrayUtils.toPrimitive(byteArray1, (byte) (-68));
      assertArrayEquals(new byte[] {(byte)9, (byte)9}, byteArray2);
      assertEquals(2, byteArray1.length);
      assertEquals(2, byteArray2.length);
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertNotSame(byteArray2, byteArray0);
      assertNotNull(byteArray2);
  }

  @Test(timeout = 4000)
  public void test0659()  throws Throwable  {
      Byte[] byteArray0 = new Byte[9];
      byte byte0 = (byte)89;
      Byte byte1 = new Byte((byte)89);
      assertTrue(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      assertEquals((byte)89, (byte)byte1);
      
      byteArray0[0] = byte1;
      byteArray0[1] = (Byte) byte0;
      byte byte2 = (byte)68;
      Byte byte3 = new Byte((byte)68);
      assertTrue(byte3.equals((Object)byte2));
      assertFalse(byte3.equals((Object)byte0));
      assertFalse(byte3.equals((Object)byte1));
      assertNotNull(byte3);
      assertEquals((byte)68, (byte)byte3);
      
      byteArray0[2] = byte3;
      Byte byte4 = new Byte((byte)89);
      assertTrue(byte4.equals((Object)byte0));
      assertFalse(byte4.equals((Object)byte2));
      assertTrue(byte4.equals((Object)byte1));
      assertFalse(byte4.equals((Object)byte3));
      assertNotNull(byte4);
      assertEquals((byte)89, (byte)byte4);
      
      byteArray0[3] = byte4;
      Byte byte5 = new Byte((byte)75);
      assertFalse(byte5.equals((Object)byte0));
      assertFalse(byte5.equals((Object)byte4));
      assertFalse(byte5.equals((Object)byte1));
      assertFalse(byte5.equals((Object)byte3));
      assertFalse(byte5.equals((Object)byte2));
      assertNotNull(byte5);
      assertEquals((byte)75, (byte)byte5);
      
      byteArray0[4] = byte5;
      Byte byte6 = new Byte(byte2);
      assertFalse(byte2 == byte0);
      assertFalse(byte6.equals((Object)byte1));
      assertFalse(byte6.equals((Object)byte5));
      assertFalse(byte6.equals((Object)byte0));
      assertTrue(byte6.equals((Object)byte2));
      assertFalse(byte6.equals((Object)byte4));
      assertTrue(byte6.equals((Object)byte3));
      assertNotNull(byte6);
      assertEquals((byte)68, (byte)byte6);
      
      Byte byte7 = new Byte(byte2);
      assertFalse(byte2 == byte0);
      assertFalse(byte7.equals((Object)byte4));
      assertTrue(byte7.equals((Object)byte6));
      assertTrue(byte7.equals((Object)byte3));
      assertFalse(byte7.equals((Object)byte0));
      assertTrue(byte7.equals((Object)byte2));
      assertFalse(byte7.equals((Object)byte5));
      assertFalse(byte7.equals((Object)byte1));
      assertNotNull(byte7);
      assertEquals((byte)68, (byte)byte7);
      
      Byte byte8 = new Byte((byte)68);
      assertFalse(byte8.equals((Object)byte4));
      assertFalse(byte8.equals((Object)byte0));
      assertTrue(byte8.equals((Object)byte2));
      assertFalse(byte8.equals((Object)byte5));
      assertTrue(byte8.equals((Object)byte6));
      assertTrue(byte8.equals((Object)byte3));
      assertTrue(byte8.equals((Object)byte7));
      assertFalse(byte8.equals((Object)byte1));
      assertNotNull(byte8);
      assertEquals((byte)68, (byte)byte8);
      
      Byte byte9 = new Byte((byte)1);
      assertFalse(byte9.equals((Object)byte0));
      assertFalse(byte9.equals((Object)byte1));
      assertFalse(byte9.equals((Object)byte7));
      assertFalse(byte9.equals((Object)byte6));
      assertFalse(byte9.equals((Object)byte3));
      assertFalse(byte9.equals((Object)byte8));
      assertFalse(byte9.equals((Object)byte2));
      assertFalse(byte9.equals((Object)byte5));
      assertFalse(byte9.equals((Object)byte4));
      assertNotNull(byte9);
      assertEquals((byte)1, (byte)byte9);
      
      Byte byte10 = new Byte((byte)13);
      assertFalse(byte10.equals((Object)byte5));
      assertFalse(byte10.equals((Object)byte8));
      assertFalse(byte10.equals((Object)byte2));
      assertFalse(byte10.equals((Object)byte3));
      assertFalse(byte10.equals((Object)byte6));
      assertFalse(byte10.equals((Object)byte0));
      assertFalse(byte10.equals((Object)byte7));
      assertFalse(byte10.equals((Object)byte9));
      assertFalse(byte10.equals((Object)byte1));
      assertFalse(byte10.equals((Object)byte4));
      assertNotNull(byte10);
      assertEquals((byte)13, (byte)byte10);
      
      Byte byte11 = new Byte((byte) (-11));
      assertFalse(byte11.equals((Object)byte5));
      assertFalse(byte11.equals((Object)byte10));
      assertFalse(byte11.equals((Object)byte8));
      assertFalse(byte11.equals((Object)byte0));
      assertFalse(byte11.equals((Object)byte3));
      assertFalse(byte11.equals((Object)byte6));
      assertFalse(byte11.equals((Object)byte7));
      assertFalse(byte11.equals((Object)byte9));
      assertFalse(byte11.equals((Object)byte4));
      assertFalse(byte11.equals((Object)byte1));
      assertFalse(byte11.equals((Object)byte2));
      assertNotNull(byte11);
      assertEquals((byte) (-11), (byte)byte11);
      
      Byte byte12 = new Byte((byte)68);
      assertTrue(byte12.equals((Object)byte7));
      assertFalse(byte12.equals((Object)byte11));
      assertFalse(byte12.equals((Object)byte1));
      assertFalse(byte12.equals((Object)byte0));
      assertFalse(byte12.equals((Object)byte10));
      assertFalse(byte12.equals((Object)byte4));
      assertFalse(byte12.equals((Object)byte9));
      assertTrue(byte12.equals((Object)byte2));
      assertFalse(byte12.equals((Object)byte5));
      assertTrue(byte12.equals((Object)byte8));
      assertTrue(byte12.equals((Object)byte3));
      assertTrue(byte12.equals((Object)byte6));
      assertNotNull(byte12);
      assertEquals((byte)68, (byte)byte12);
      
      byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0, (byte)89);
      assertArrayEquals(new byte[] {(byte)89, (byte)89, (byte)68, (byte)89, (byte)75, (byte)89, (byte)89, (byte)89, (byte)89}, byteArray1);
      assertEquals(9, byteArray0.length);
      assertEquals(9, byteArray1.length);
      assertNotNull(byteArray1);
  }

  @Test(timeout = 4000)
  public void test0660()  throws Throwable  {
      Byte[] byteArray0 = new Byte[2];
      Byte byte0 = new Byte((byte)17);
      assertNotNull(byte0);
      assertEquals((byte)17, (byte)byte0);
      
      byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0, (byte)59);
      assertArrayEquals(new byte[] {(byte)59, (byte)59}, byteArray1);
      assertEquals(2, byteArray0.length);
      assertEquals(2, byteArray1.length);
      assertNotNull(byteArray1);
  }

  @Test(timeout = 4000)
  public void test0661()  throws Throwable  {
      Byte[] byteArray0 = new Byte[9];
      Byte byte0 = new Byte((byte)89);
      assertNotNull(byte0);
      assertEquals((byte)89, (byte)byte0);
      
      byteArray0[0] = byte0;
      Byte byte1 = new Byte((byte)89);
      assertTrue(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      assertEquals((byte)89, (byte)byte1);
      
      byteArray0[1] = byte1;
      byte byte2 = (byte)68;
      Byte byte3 = new Byte((byte)68);
      assertFalse(byte3.equals((Object)byte0));
      assertTrue(byte3.equals((Object)byte2));
      assertFalse(byte3.equals((Object)byte1));
      assertNotNull(byte3);
      assertEquals((byte)68, (byte)byte3);
      
      byteArray0[2] = byte3;
      Byte byte4 = new Byte((byte)89);
      assertTrue(byte4.equals((Object)byte1));
      assertFalse(byte4.equals((Object)byte2));
      assertFalse(byte4.equals((Object)byte3));
      assertTrue(byte4.equals((Object)byte0));
      assertNotNull(byte4);
      assertEquals((byte)89, (byte)byte4);
      
      byteArray0[3] = byte4;
      Byte byte5 = new Byte((byte)75);
      assertFalse(byte5.equals((Object)byte1));
      assertFalse(byte5.equals((Object)byte2));
      assertFalse(byte5.equals((Object)byte3));
      assertFalse(byte5.equals((Object)byte0));
      assertFalse(byte5.equals((Object)byte4));
      assertNotNull(byte5);
      assertEquals((byte)75, (byte)byte5);
      
      byteArray0[4] = byte5;
      Byte byte6 = new Byte(byte2);
      assertFalse(byte6.equals((Object)byte5));
      assertTrue(byte6.equals((Object)byte2));
      assertTrue(byte6.equals((Object)byte3));
      assertFalse(byte6.equals((Object)byte1));
      assertFalse(byte6.equals((Object)byte4));
      assertFalse(byte6.equals((Object)byte0));
      assertNotNull(byte6);
      assertEquals((byte)68, (byte)byte6);
      
      byteArray0[5] = byte6;
      Byte byte7 = new Byte((byte)75);
      assertFalse(byte7.equals((Object)byte6));
      assertFalse(byte7.equals((Object)byte0));
      assertFalse(byte7.equals((Object)byte4));
      assertFalse(byte7.equals((Object)byte2));
      assertFalse(byte7.equals((Object)byte3));
      assertTrue(byte7.equals((Object)byte5));
      assertFalse(byte7.equals((Object)byte1));
      assertNotNull(byte7);
      assertEquals((byte)75, (byte)byte7);
      
      byteArray0[6] = byte7;
      Byte byte8 = new Byte((byte) (-74));
      assertFalse(byte8.equals((Object)byte1));
      assertFalse(byte8.equals((Object)byte4));
      assertFalse(byte8.equals((Object)byte2));
      assertFalse(byte8.equals((Object)byte0));
      assertFalse(byte8.equals((Object)byte6));
      assertFalse(byte8.equals((Object)byte3));
      assertFalse(byte8.equals((Object)byte5));
      assertFalse(byte8.equals((Object)byte7));
      assertNotNull(byte8);
      assertEquals((byte) (-74), (byte)byte8);
      
      byteArray0[7] = byte8;
      Byte byte9 = new Byte((byte) (-1));
      assertFalse(byte9.equals((Object)byte5));
      assertFalse(byte9.equals((Object)byte8));
      assertFalse(byte9.equals((Object)byte2));
      assertFalse(byte9.equals((Object)byte6));
      assertFalse(byte9.equals((Object)byte1));
      assertFalse(byte9.equals((Object)byte3));
      assertFalse(byte9.equals((Object)byte7));
      assertFalse(byte9.equals((Object)byte0));
      assertFalse(byte9.equals((Object)byte4));
      assertNotNull(byte9);
      assertEquals((byte) (-1), (byte)byte9);
      
      byteArray0[8] = byte9;
      byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0, byte2);
      assertArrayEquals(new byte[] {(byte)89, (byte)89, (byte)68, (byte)89, (byte)75, (byte)68, (byte)75, (byte) (-74), (byte) (-1)}, byteArray1);
      assertEquals(9, byteArray0.length);
      assertEquals(9, byteArray1.length);
      assertNotNull(byteArray1);
  }

  @Test(timeout = 4000)
  public void test0662()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)9;
      byteArray0[1] = (byte)9;
      BitSet bitSet0 = ArrayUtils.indexesOf(byteArray0, (byte)19, (int) (byte) (-39));
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertArrayEquals(new byte[] {(byte)9, (byte)9, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(9, byteArray0.length);
      assertNotNull(bitSet0);
      
      boolean boolean0 = ArrayUtils.isSorted(byteArray0);
      assertArrayEquals(new byte[] {(byte)9, (byte)9, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(9, byteArray0.length);
      assertFalse(boolean0);
      
      byte[] byteArray1 = new byte[0];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      // Undeclared exception!
      try { 
        ArrayUtils.add(byteArray1, (int) (byte)21, (byte)13);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 21, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0663()  throws Throwable  {
      Byte[] byteArray0 = new Byte[2];
      byte byte0 = (byte)51;
      Byte byte1 = new Byte((byte)51);
      assertTrue(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      assertEquals((byte)51, (byte)byte1);
      
      byteArray0[0] = byte1;
      Byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0);
      assertEquals(2, byteArray0.length);
      assertEquals(2, byteArray1.length);
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      
      byte[] byteArray2 = new byte[2];
      byteArray2[0] = (byte) (-119);
      byteArray2[1] = byte0;
      boolean boolean0 = ArrayUtils.isSameLength(byteArray2, byteArray2);
      assertArrayEquals(new byte[] {(byte) (-119), (byte)51}, byteArray2);
      assertEquals(2, byteArray2.length);
      assertTrue(boolean0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(byteArray2, (byte) (-123), (int) byte0);
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertArrayEquals(new byte[] {(byte) (-119), (byte)51}, byteArray2);
      assertEquals(2, byteArray2.length);
      assertNotNull(bitSet0);
      
      boolean boolean1 = ArrayUtils.isSorted(byteArray2);
      assertArrayEquals(new byte[] {(byte) (-119), (byte)51}, byteArray2);
      assertEquals(2, byteArray2.length);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'p';
      charArray0[1] = 'D';
      char[] charArray1 = ArrayUtils.clone(charArray0);
      assertArrayEquals(new char[] {'p', 'D'}, charArray0);
      assertArrayEquals(new char[] {'p', 'D'}, charArray1);
      assertEquals(2, charArray0.length);
      assertEquals(2, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      
      long[] longArray0 = new long[5];
      longArray0[0] = (long) (byte) (-123);
      longArray0[1] = (long) (byte) (-123);
      longArray0[2] = (long) 'D';
      longArray0[3] = (long) (byte) (-119);
      longArray0[4] = (long) (-1916);
      ArrayUtils.swap(longArray0, (-3499), 34, 5);
      assertArrayEquals(new long[] {(-123L), (-123L), 68L, (-119L), (-1916L)}, longArray0);
      assertEquals(5, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test0664()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = 'k';
      charArray0[1] = 'L';
      charArray0[2] = 'L';
      BitSet bitSet0 = ArrayUtils.indexesOf(charArray0, '7', 321);
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertArrayEquals(new char[] {'k', 'L', 'L'}, charArray0);
      assertEquals(3, charArray0.length);
      assertNotNull(bitSet0);
      
      int[] intArray0 = new int[4];
      intArray0[0] = 321;
      intArray0[1] = (int) 'L';
      intArray0[3] = (int) 'L';
      int[] intArray1 = ArrayUtils.nullToEmpty(intArray0);
      assertArrayEquals(new int[] {321, 76, 0, 76}, intArray0);
      assertArrayEquals(new int[] {321, 76, 0, 76}, intArray1);
      assertEquals(4, intArray0.length);
      assertEquals(4, intArray1.length);
      assertSame(intArray0, intArray1);
      assertSame(intArray1, intArray0);
      assertNotNull(intArray1);
  }

  @Test(timeout = 4000)
  public void test0665()  throws Throwable  {
      Byte byte0 = new Byte((byte)51);
      assertNotNull(byte0);
      assertEquals((byte)51, (byte)byte0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-119);
      boolean boolean0 = ArrayUtils.isSameLength(byteArray0, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-119), (byte)0}, byteArray0);
      assertEquals(2, byteArray0.length);
      assertTrue(boolean0);
      
      boolean boolean1 = ArrayUtils.isSorted(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-119), (byte)0}, byteArray0);
      assertEquals(2, byteArray0.length);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      byte[] byteArray1 = new byte[1];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte)21;
      byte[] byteArray2 = ArrayUtils.add(byteArray1, (byte)1);
      assertArrayEquals(new byte[] {(byte)21}, byteArray1);
      assertArrayEquals(new byte[] {(byte)21, (byte)1}, byteArray2);
      assertEquals(1, byteArray1.length);
      assertEquals(2, byteArray2.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      assertNotNull(byteArray2);
      
      Byte byte1 = new Byte((byte)54);
      assertFalse(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      assertEquals((byte)54, (byte)byte1);
      
      try { 
        Byte.valueOf("\n");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"
         // \"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test0666()  throws Throwable  {
      float[] floatArray0 = new float[9];
      floatArray0[0] = (-2271.21F);
      floatArray0[1] = 0.0F;
      floatArray0[2] = 216.6336F;
      floatArray0[3] = (-1.0F);
      floatArray0[4] = 0.0F;
      floatArray0[4] = (-1.0F);
      floatArray0[6] = 941.88F;
      floatArray0[7] = (-1647.477F);
      floatArray0[8] = (-1.0F);
      ArrayUtils.reverse(floatArray0);
      assertArrayEquals(new float[] {(-1.0F), (-1647.477F), 941.88F, 0.0F, (-1.0F), (-1.0F), 216.6336F, 0.0F, (-2271.21F)}, floatArray0, 0.01F);
      assertEquals(9, floatArray0.length);
      
      char[] charArray0 = new char[2];
      charArray0[0] = '8';
      charArray0[1] = 'X';
      char[] charArray1 = ArrayUtils.removeAllOccurences(charArray0, 'X');
      assertArrayEquals(new char[] {'8', 'X'}, charArray0);
      assertArrayEquals(new char[] {'8'}, charArray1);
      assertEquals(2, charArray0.length);
      assertEquals(1, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)40;
      byteArray0[1] = (byte) (-18);
      BitSet bitSet0 = ArrayUtils.indexesOf(byteArray0, (byte) (-123), (-1));
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertArrayEquals(new byte[] {(byte)40, (byte) (-18)}, byteArray0);
      assertEquals(2, byteArray0.length);
      assertNotNull(bitSet0);
      
      boolean boolean0 = ArrayUtils.isSorted(byteArray0);
      assertArrayEquals(new byte[] {(byte)40, (byte) (-18)}, byteArray0);
      assertEquals(2, byteArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0667()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[3];
      boolean[] booleanArray1 = ArrayUtils.EMPTY_BOOLEAN_ARRAY;
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertEquals(0, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = 1605.8868F;
      floatArray0[1] = 719.11F;
      floatArray0[2] = 0.0F;
      floatArray0[3] = 0.0F;
      floatArray0[4] = 43.0F;
      float[] floatArray1 = ArrayUtils.addAll(floatArray0, floatArray0);
      assertArrayEquals(new float[] {1605.8868F, 719.11F, 0.0F, 0.0F, 43.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {1605.8868F, 719.11F, 0.0F, 0.0F, 43.0F, 1605.8868F, 719.11F, 0.0F, 0.0F, 43.0F}, floatArray1, 0.01F);
      assertEquals(5, floatArray0.length);
      assertEquals(10, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 't';
      ArrayUtils.swap(charArray0, (-742), (-742), 723);
      assertArrayEquals(new char[] {'t'}, charArray0);
      assertEquals(1, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test0668()  throws Throwable  {
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short) (-1263);
      shortArray0[1] = (short)0;
      shortArray0[2] = (short)0;
      shortArray0[3] = (short) (-430);
      shortArray0[4] = (short) (-1263);
      shortArray0[5] = (short) (-430);
      shortArray0[6] = (short) (-1263);
      shortArray0[7] = (short) (-430);
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short)8, 14);
      assertArrayEquals(new short[] {(short) (-1263), (short)0, (short)0, (short) (-430), (short) (-1263), (short) (-430), (short) (-1263), (short) (-430)}, shortArray0);
      assertEquals(8, shortArray0.length);
      assertEquals((-1), int0);
      
      int[] intArray0 = ArrayUtils.removeElements((int[]) null, (int[]) null);
      assertNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test0669()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = 'g';
      charArray0[1] = '3';
      charArray0[2] = 'i';
      charArray0[3] = '(';
      ArrayUtils.swap(charArray0, 1929, 3456);
      assertArrayEquals(new char[] {'g', '3', 'i', '('}, charArray0);
      assertEquals(4, charArray0.length);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((double[]) null, (-1.0), (double) 3456);
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertNotNull(bitSet0);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 614.4;
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      ArrayUtils.shift(booleanArray0, 53, 122, (-321));
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertEquals(1, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test0670()  throws Throwable  {
      Byte byte0 = new Byte((byte)99);
      assertNotNull(byte0);
      assertEquals((byte)99, (byte)byte0);
      
      Byte byte1 = new Byte((byte)89);
      assertFalse(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      assertEquals((byte)89, (byte)byte1);
      
      Long long0 = new Long(625L);
      assertNotNull(long0);
      assertEquals(625L, (long)long0);
      
      Long long1 = new Long((-2880L));
      assertFalse(long1.equals((Object)long0));
      assertNotNull(long1);
      assertEquals((-2880L), (long)long1);
      
      Long long2 = new Long(625L);
      assertTrue(long2.equals((Object)long0));
      assertFalse(long2.equals((Object)long1));
      assertNotNull(long2);
      assertEquals(625L, (long)long2);
      
      Long long3 = new Long(1L);
      assertFalse(long3.equals((Object)long2));
      assertFalse(long3.equals((Object)long0));
      assertFalse(long3.equals((Object)long1));
      assertNotNull(long3);
      assertEquals(1L, (long)long3);
      
      Boolean boolean0 = Boolean.TRUE;
      assertNotNull(boolean0);
      assertTrue(boolean0);
      
      boolean[] booleanArray0 = ArrayUtils.toPrimitive((Boolean[]) null);
      assertNull(booleanArray0);
      
      boolean[] booleanArray1 = ArrayUtils.removeElement((boolean[]) null, false);
      assertNull(booleanArray1);
      
      Long long4 = new Long(73L);
      assertFalse(long4.equals((Object)long0));
      assertFalse(long4.equals((Object)long1));
      assertFalse(long4.equals((Object)long3));
      assertFalse(long4.equals((Object)long2));
      assertNotNull(long4);
      assertEquals(73L, (long)long4);
      
      boolean[] booleanArray2 = ArrayUtils.addAll((boolean[]) null, (boolean[]) null);
      assertNull(booleanArray2);
      
      byte[] byteArray0 = ArrayUtils.toPrimitive((Byte[]) null);
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test0671()  throws Throwable  {
      float[] floatArray0 = new float[1];
      floatArray0[0] = (-1733.7683F);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)90;
      byteArray0[1] = (byte)7;
      byteArray0[2] = (byte) (-77);
      boolean boolean0 = ArrayUtils.isSameLength(byteArray0, byteArray0);
      assertArrayEquals(new byte[] {(byte)90, (byte)7, (byte) (-77)}, byteArray0);
      assertEquals(3, byteArray0.length);
      assertTrue(boolean0);
      
      int int0 = ArrayUtils.lastIndexOf((short[]) null, (short)1);
      assertEquals((-1), int0);
      
      Object[] objectArray0 = new Object[0];
      ArrayUtils.swap(objectArray0, (-82), (-1313), (int) (byte)7);
      assertEquals(0, objectArray0.length);
      
      ArrayUtils.reverse((short[]) null, 2145953011, (-2382));
      ArrayUtils.swap(objectArray0, (int) (byte)7, 155, (-658));
      assertEquals(0, objectArray0.length);
      
      ArrayUtils.shuffle(byteArray0);
      assertArrayEquals(new byte[] {(byte)7, (byte) (-77), (byte)90}, byteArray0);
      assertEquals(3, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test0672()  throws Throwable  {
      int[] intArray0 = new int[4];
      int[] intArray1 = ArrayUtils.removeElements(intArray0, intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(4, intArray0.length);
      assertEquals(0, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      boolean[] booleanArray1 = ArrayUtils.addAll(booleanArray0, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, true, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, true, true, false, true, true}, booleanArray1));
      assertEquals(3, booleanArray0.length);
      assertEquals(6, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
  }

  @Test(timeout = 4000)
  public void test0673()  throws Throwable  {
      short[] shortArray0 = new short[0];
      ArrayUtils.reverse(shortArray0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray0.length);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 2750.6832208665714;
      doubleArray0[1] = 85.0;
      doubleArray0[2] = (-1489.10046);
      doubleArray0[3] = 313.07294126;
      doubleArray0[4] = 85.0;
      doubleArray0[5] = (-345.87729100814965);
      doubleArray0[6] = 0.0;
      int int0 = ArrayUtils.indexOf(doubleArray0, (-345.87729100814965), 1828, (-345.87729100814965));
      assertArrayEquals(new double[] {2750.6832208665714, 85.0, (-1489.10046), 313.07294126, 85.0, (-345.87729100814965), 0.0}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0674()  throws Throwable  {
      long[] longArray0 = new long[5];
      longArray0[2] = (-2147483648L);
      char[] charArray0 = new char[9];
      charArray0[0] = 'I';
      charArray0[1] = 'p';
      charArray0[2] = 'O';
      charArray0[3] = 'p';
      charArray0[4] = 'U';
      charArray0[5] = 'Q';
      charArray0[6] = '/';
      charArray0[7] = 'h';
      charArray0[8] = 't';
      ArrayUtils.shift(charArray0, 55);
      assertArrayEquals(new char[] {'t', 'I', 'p', 'O', 'p', 'U', 'Q', '/', 'h'}, charArray0);
      assertEquals(9, charArray0.length);
      
      try { 
        Byte.valueOf("");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test0675()  throws Throwable  {
      char[] charArray0 = new char[12];
      charArray0[0] = '~';
      charArray0[1] = 'D';
      ArrayUtils.shift(charArray0, (-569));
      assertEquals(12, charArray0.length);
      
      Long[] longArray0 = new Long[8];
      Long long0 = new Long((-2142L));
      assertNotNull(long0);
      assertEquals((-2142L), (long)long0);
      
      Byte byte0 = new Byte((byte) (-61));
      assertNotNull(byte0);
      assertEquals((byte) (-61), (byte)byte0);
      
      String[] stringArray0 = Locale.getISOCountries();
      assertEquals(250, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test0676()  throws Throwable  {
      ArrayUtils.shift((int[]) null, (-3103));
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      boolean[] booleanArray1 = ArrayUtils.removeElement(booleanArray0, true);
      assertTrue(Arrays.equals(new boolean[] {false, true, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, true}, booleanArray1));
      assertEquals(3, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      
      char[] charArray0 = new char[4];
      charArray0[0] = '\'';
      charArray0[1] = '\'';
      charArray0[2] = '\'';
      charArray0[3] = '\'';
      ArrayUtils.shift(charArray0, (-507), 2288, (-507));
      assertArrayEquals(new char[] {'\'', '\'', '\'', '\''}, charArray0);
      assertEquals(4, charArray0.length);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)1655;
      shortArray0[1] = (short)1;
      ArrayUtils.shift(shortArray0, (int) (short)1, 1316, (-641));
      assertArrayEquals(new short[] {(short)1655, (short)1}, shortArray0);
      assertEquals(2, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test0677()  throws Throwable  {
      int[] intArray0 = new int[1];
      int int0 = 0;
      intArray0[0] = 0;
      int int1 = ArrayUtils.indexOf(intArray0, 0, 0);
      assertArrayEquals(new int[] {0}, intArray0);
      assertEquals(1, intArray0.length);
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      
      String string0 = ArrayUtils.toString((Object) "");
      assertNotNull(string0);
      assertEquals("", string0);
      
      int[] intArray1 = ArrayUtils.subarray(intArray0, (-127), 0);
      assertArrayEquals(new int[] {0}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(1, intArray0.length);
      assertEquals(0, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      
      char[] charArray0 = new char[3];
      charArray0[0] = 'p';
      charArray0[1] = 'Y';
      charArray0[2] = '|';
      ArrayUtils.shift((char[]) null, 0);
      Long long0 = new Long((-2142L));
      assertNotNull(long0);
      assertEquals((-2142L), (long)long0);
      
      Byte byte0 = new Byte((byte) (-61));
      assertNotNull(byte0);
      assertEquals((byte) (-61), (byte)byte0);
      
      try { 
        Byte.valueOf("*PlSjmW:1eb5&HayJ-");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"*PlSjmW:1eb5&HayJ-\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test0678()  throws Throwable  {
      ArrayUtils.reverse((boolean[]) null, 1309, 1309);
      char[] charArray0 = new char[2];
      charArray0[0] = '9';
      charArray0[1] = 'D';
      ArrayUtils.shift(charArray0, (-569));
      assertArrayEquals(new char[] {'D', '9'}, charArray0);
      assertEquals(2, charArray0.length);
      
      Long[] longArray0 = new Long[8];
      Long long0 = new Long((-2142L));
      assertNotNull(long0);
      assertEquals((-2142L), (long)long0);
      
      longArray0[0] = long0;
      Long long1 = new Long((-1733L));
      assertFalse(long1.equals((Object)long0));
      assertNotNull(long1);
      assertEquals((-1733L), (long)long1);
      
      longArray0[1] = long1;
      Long long2 = new Long(1L);
      assertFalse(long2.equals((Object)long1));
      assertFalse(long2.equals((Object)long0));
      assertNotNull(long2);
      assertEquals(1L, (long)long2);
      
      longArray0[2] = long2;
      Long long3 = new Long((-2142L));
      assertTrue(long3.equals((Object)long0));
      assertFalse(long3.equals((Object)long2));
      assertFalse(long3.equals((Object)long1));
      assertNotNull(long3);
      assertEquals((-2142L), (long)long3);
      
      longArray0[3] = long3;
      Long long4 = new Long(1L);
      assertFalse(long4.equals((Object)long1));
      assertTrue(long4.equals((Object)long2));
      assertFalse(long4.equals((Object)long0));
      assertFalse(long4.equals((Object)long3));
      assertNotNull(long4);
      assertEquals(1L, (long)long4);
      
      longArray0[4] = long4;
      Long long5 = new Long((-2147483648L));
      assertFalse(long5.equals((Object)long2));
      assertFalse(long5.equals((Object)long1));
      assertFalse(long5.equals((Object)long4));
      assertFalse(long5.equals((Object)long0));
      assertFalse(long5.equals((Object)long3));
      assertNotNull(long5);
      assertEquals((-2147483648L), (long)long5);
      
      longArray0[5] = long5;
      Long long6 = new Long((-569));
      assertFalse(long6.equals((Object)long2));
      assertFalse(long6.equals((Object)long3));
      assertFalse(long6.equals((Object)long1));
      assertFalse(long6.equals((Object)long4));
      assertFalse(long6.equals((Object)long0));
      assertFalse(long6.equals((Object)long5));
      assertNotNull(long6);
      assertEquals((-569L), (long)long6);
      
      longArray0[6] = long6;
      Long long7 = new Long(1285L);
      assertFalse(long7.equals((Object)long2));
      assertFalse(long7.equals((Object)long5));
      assertFalse(long7.equals((Object)long1));
      assertFalse(long7.equals((Object)long4));
      assertFalse(long7.equals((Object)long6));
      assertFalse(long7.equals((Object)long0));
      assertFalse(long7.equals((Object)long3));
      assertNotNull(long7);
      assertEquals(1285L, (long)long7);
      
      longArray0[7] = long7;
      Long[] longArray1 = ArrayUtils.nullToEmpty(longArray0);
      assertEquals(8, longArray0.length);
      assertEquals(8, longArray1.length);
      assertSame(longArray0, longArray1);
      assertSame(longArray1, longArray0);
      assertNotNull(longArray1);
  }

  @Test(timeout = 4000)
  public void test0679()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)17;
      byteArray0[1] = (byte)0;
      Long long0 = new Long((-2880L));
      assertNotNull(long0);
      assertEquals((-2880L), (long)long0);
      
      ArrayUtils.reverse((boolean[]) null, 1075, 851);
      double[] doubleArray0 = ArrayUtils.removeElements((double[]) null, (double[]) null);
      assertNull(doubleArray0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((double[]) null, 1501.445350975885, (-1616));
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertNotNull(bitSet0);
      
      int[] intArray0 = new int[1];
      intArray0[0] = 1075;
      int int0 = ArrayUtils.lastIndexOf(intArray0, (-784), (int) (byte)0);
      assertArrayEquals(new int[] {1075}, intArray0);
      assertEquals(1, intArray0.length);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0680()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)2;
      int[] intArray0 = new int[0];
      int[] intArray1 = ArrayUtils.add(intArray0, (int) (byte)2);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {2}, intArray1);
      assertEquals(0, intArray0.length);
      assertEquals(1, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      
      Character character0 = Character.valueOf('g');
      assertNotNull(character0);
      assertEquals('g', (char)character0);
      
      Character character1 = Character.valueOf('g');
      assertNotNull(character1);
      assertEquals('g', (char)character1);
      
      Character character2 = Character.valueOf('g');
      assertNotNull(character2);
      assertEquals('g', (char)character2);
      
      Character character3 = Character.valueOf('\\');
      assertFalse(character3.equals((Object)character0));
      assertFalse(character3.equals((Object)character2));
      assertFalse(character3.equals((Object)character1));
      assertNotNull(character3);
      assertEquals('\\', (char)character3);
      
      Character character4 = Character.valueOf('\\');
      assertFalse(character4.equals((Object)character1));
      assertFalse(character4.equals((Object)character2));
      assertFalse(character4.equals((Object)character0));
      assertNotNull(character4);
      assertEquals('\\', (char)character4);
      
      Character character5 = Character.valueOf('.');
      assertFalse(character5.equals((Object)character0));
      assertFalse(character5.equals((Object)character4));
      assertFalse(character5.equals((Object)character1));
      assertFalse(character5.equals((Object)character2));
      assertFalse(character5.equals((Object)character3));
      assertNotNull(character5);
      assertEquals('.', (char)character5);
      
      Character[] characterArray0 = new Character[3];
      characterArray0[0] = character1;
      characterArray0[1] = character2;
      characterArray0[2] = character5;
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0);
      assertArrayEquals(new char[] {'g', 'g', '.'}, charArray0);
      assertEquals(3, characterArray0.length);
      assertEquals(3, charArray0.length);
      assertNotNull(charArray0);
      
      int int0 = ArrayUtils.indexOf(intArray1, (-2140505135));
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {2}, intArray1);
      assertEquals(0, intArray0.length);
      assertEquals(1, intArray1.length);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals((-1), int0);
      
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short) (byte)2;
      shortArray0[1] = (short) (byte)2;
      shortArray0[2] = (short) (byte)2;
      shortArray0[3] = (short) (byte)2;
      shortArray0[4] = (short) (byte)2;
      shortArray0[5] = (short) (byte)2;
      shortArray0[6] = (short) (byte)2;
      BitSet bitSet0 = ArrayUtils.indexesOf(shortArray0, (short)102, (-2124774488));
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertArrayEquals(new short[] {(short)2, (short)2, (short)2, (short)2, (short)2, (short)2, (short)2}, shortArray0);
      assertEquals(7, shortArray0.length);
      assertNotNull(bitSet0);
  }

  @Test(timeout = 4000)
  public void test0681()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = ';';
      char[] charArray1 = ArrayUtils.removeElement(charArray0, '4');
      assertArrayEquals(new char[] {';', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertArrayEquals(new char[] {';', '\u0000', '\u0000', '\u0000'}, charArray1);
      assertEquals(4, charArray0.length);
      assertEquals(4, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) ' ';
      floatArray0[1] = (float) ';';
      float[] floatArray1 = ArrayUtils.removeAllOccurences(floatArray0, 59.0F);
      assertArrayEquals(new float[] {32.0F, 59.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {32.0F}, floatArray1, 0.01F);
      assertEquals(2, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      
      Boolean boolean0 = Boolean.valueOf("");
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      long[] longArray0 = new long[7];
      longArray0[0] = (long) 'W';
      longArray0[1] = (long) ';';
      longArray0[2] = (long) ' ';
      longArray0[3] = (long) ';';
      longArray0[4] = (long) ' ';
      longArray0[5] = (long) ';';
      longArray0[6] = (long) '4';
      Long[] longArray1 = ArrayUtils.toObject(longArray0);
      assertArrayEquals(new long[] {87L, 59L, 32L, 59L, 32L, 59L, 52L}, longArray0);
      assertEquals(7, longArray1.length);
      assertEquals(7, longArray0.length);
      assertNotNull(longArray1);
      
      char[] charArray2 = ArrayUtils.subarray(charArray1, 0, 2);
      assertArrayEquals(new char[] {';', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertArrayEquals(new char[] {';', '\u0000'}, charArray2);
      assertArrayEquals(new char[] {';', '\u0000', '\u0000', '\u0000'}, charArray1);
      assertEquals(4, charArray0.length);
      assertEquals(2, charArray2.length);
      assertEquals(4, charArray1.length);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray2.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray1));
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray0, charArray2);
      assertNotSame(charArray2, charArray0);
      assertNotSame(charArray2, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray1, charArray2);
      assertNotNull(charArray2);
  }

  @Test(timeout = 4000)
  public void test0682()  throws Throwable  {
      Byte[] byteArray0 = new Byte[2];
      byte byte0 = (byte)51;
      Byte byte1 = new Byte((byte)51);
      assertTrue(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      assertEquals((byte)51, (byte)byte1);
      
      byteArray0[0] = byte1;
      Byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0);
      assertEquals(2, byteArray0.length);
      assertEquals(2, byteArray1.length);
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      
      Boolean boolean0 = new Boolean("Cannot store ");
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      Boolean boolean1 = new Boolean(false);
      assertTrue(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      assertFalse(boolean1);
      
      Boolean boolean2 = Boolean.FALSE;
      assertTrue(boolean2.equals((Object)boolean0));
      assertTrue(boolean2.equals((Object)boolean1));
      assertNotNull(boolean2);
      assertFalse(boolean2);
      
      Boolean boolean3 = Boolean.FALSE;
      assertTrue(boolean3.equals((Object)boolean1));
      assertTrue(boolean3.equals((Object)boolean0));
      assertNotNull(boolean3);
      assertFalse(boolean3);
      
      Boolean boolean4 = Boolean.valueOf("Cannot store ");
      assertTrue(boolean4.equals((Object)boolean1));
      assertTrue(boolean4.equals((Object)boolean0));
      assertNotNull(boolean4);
      assertFalse(boolean4);
      
      Boolean boolean5 = Boolean.FALSE;
      assertTrue(boolean5.equals((Object)boolean0));
      assertTrue(boolean5.equals((Object)boolean1));
      assertNotNull(boolean5);
      assertFalse(boolean5);
      
      Boolean[] booleanArray0 = new Boolean[0];
      Boolean[] booleanArray1 = ArrayUtils.nullToEmpty(booleanArray0);
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      
      char[] charArray0 = new char[2];
      charArray0[0] = '|';
      charArray0[1] = 'P';
      char[] charArray1 = ArrayUtils.add(charArray0, '|');
      assertArrayEquals(new char[] {'|', 'P', '|'}, charArray1);
      assertArrayEquals(new char[] {'|', 'P'}, charArray0);
      assertEquals(3, charArray1.length);
      assertEquals(2, charArray0.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray0, charArray1);
      assertNotNull(charArray1);
      
      MockRandom mockRandom0 = new MockRandom(byte0);
      assertNotNull(mockRandom0);
      
      boolean[] booleanArray2 = new boolean[0];
      ArrayUtils.shuffle(booleanArray2, (Random) mockRandom0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray2));
      assertEquals(0, booleanArray2.length);
  }

  @Test(timeout = 4000)
  public void test0683()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      float[] floatArray0 = new float[4];
      floatArray0[0] = (-1150.5F);
      ArrayUtils.shift(floatArray0, (-557), (-2042), 2147483636);
      assertArrayEquals(new float[] {(-1150.5F), 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(4, floatArray0.length);
      
      char[] charArray0 = new char[7];
      ArrayUtils.shift(floatArray0, 2147483636, 41, 1);
      assertArrayEquals(new float[] {(-1150.5F), 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(4, floatArray0.length);
      
      Boolean[] booleanArray1 = ArrayUtils.toObject(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertEquals(1, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertNotNull(booleanArray1);
      
      Float[] floatArray1 = ArrayUtils.toObject(floatArray0);
      assertArrayEquals(new float[] {(-1150.5F), 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(4, floatArray0.length);
      assertEquals(4, floatArray1.length);
      assertNotNull(floatArray1);
      
      Boolean[] booleanArray2 = ArrayUtils.nullToEmpty(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertEquals(1, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertEquals(1, booleanArray2.length);
      assertSame(booleanArray1, booleanArray2);
      assertSame(booleanArray2, booleanArray1);
      assertNotNull(booleanArray2);
      
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = ArrayUtils.add(byteArray0, (byte)88);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {(byte)88}, byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(1, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(charArray0, '[', (-2042));
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(7, charArray0.length);
      assertNotNull(bitSet0);
  }

  @Test(timeout = 4000)
  public void test0684()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)9;
      byteArray0[1] = (byte) (-44);
      byteArray0[2] = (byte) (-39);
      byteArray0[3] = (byte)2;
      byteArray0[4] = (byte)51;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)45;
      boolean boolean0 = ArrayUtils.isSameLength(byteArray0, byteArray0);
      assertArrayEquals(new byte[] {(byte)9, (byte) (-44), (byte) (-39), (byte)2, (byte)51, (byte)0, (byte)0, (byte)45, (byte)0}, byteArray0);
      assertEquals(9, byteArray0.length);
      assertTrue(boolean0);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (byte)45;
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short)45);
      assertArrayEquals(new short[] {(short)45}, shortArray0);
      assertEquals(1, shortArray0.length);
      assertEquals(0, int0);
      
      double[] doubleArray0 = new double[0];
      int int1 = ArrayUtils.lastIndexOf(doubleArray0, (double) (byte) (-39), (double) (byte)2);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      Object[] objectArray0 = new Object[0];
      ArrayUtils.swap(objectArray0, 106, (int) (byte)9, (-2382));
      assertEquals(0, objectArray0.length);
      
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertArrayEquals(new short[] {(short)45}, shortArray0);
      assertEquals(1, shortArray1.length);
      assertEquals(1, shortArray0.length);
      assertNotNull(shortArray1);
      
      Boolean[] booleanArray0 = new Boolean[9];
      Boolean boolean1 = Boolean.FALSE;
      assertFalse(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      assertFalse(boolean1);
      
      booleanArray0[0] = boolean1;
      Boolean boolean2 = Boolean.valueOf("<size=");
      assertFalse(boolean2.equals((Object)boolean0));
      assertNotNull(boolean2);
      assertFalse(boolean2);
      
      booleanArray0[1] = boolean2;
      Boolean boolean3 = new Boolean((String) null);
      assertFalse(boolean3.equals((Object)boolean0));
      assertTrue(boolean3.equals((Object)boolean2));
      assertTrue(boolean3.equals((Object)boolean1));
      assertNotNull(boolean3);
      assertFalse(boolean3);
      
      booleanArray0[2] = boolean3;
      Boolean boolean4 = new Boolean("<size=");
      assertTrue(boolean4.equals((Object)boolean3));
      assertFalse(boolean4.equals((Object)boolean0));
      assertTrue(boolean4.equals((Object)boolean1));
      assertTrue(boolean4.equals((Object)boolean2));
      assertNotNull(boolean4);
      assertFalse(boolean4);
      
      booleanArray0[3] = boolean4;
      Boolean boolean5 = new Boolean((boolean) boolean3);
      assertFalse(boolean3.equals((Object)boolean0));
      assertTrue(boolean3.equals((Object)boolean2));
      assertTrue(boolean3.equals((Object)boolean1));
      assertTrue(boolean3.equals((Object)boolean4));
      assertTrue(boolean5.equals((Object)boolean3));
      assertTrue(boolean5.equals((Object)boolean2));
      assertTrue(boolean5.equals((Object)boolean1));
      assertTrue(boolean5.equals((Object)boolean4));
      assertFalse(boolean5.equals((Object)boolean0));
      assertNotNull(boolean5);
      assertFalse(boolean5);
      
      booleanArray0[4] = boolean5;
      Boolean boolean6 = Boolean.FALSE;
      assertTrue(boolean6.equals((Object)boolean5));
      assertTrue(boolean6.equals((Object)boolean3));
      assertTrue(boolean6.equals((Object)boolean4));
      assertFalse(boolean6.equals((Object)boolean0));
      assertNotNull(boolean6);
      assertFalse(boolean6);
      
      booleanArray0[5] = boolean6;
      Boolean boolean7 = Boolean.FALSE;
      assertFalse(boolean7.equals((Object)boolean0));
      assertTrue(boolean7.equals((Object)boolean4));
      assertTrue(boolean7.equals((Object)boolean3));
      assertTrue(boolean7.equals((Object)boolean5));
      assertNotNull(boolean7);
      assertFalse(boolean7);
      
      booleanArray0[6] = boolean7;
      Boolean boolean8 = Boolean.valueOf((String) null);
      assertFalse(boolean8.equals((Object)boolean0));
      assertTrue(boolean8.equals((Object)boolean3));
      assertTrue(boolean8.equals((Object)boolean5));
      assertTrue(boolean8.equals((Object)boolean4));
      assertNotNull(boolean8);
      assertFalse(boolean8);
      
      booleanArray0[7] = boolean8;
      Boolean boolean9 = Boolean.FALSE;
      assertFalse(boolean9.equals((Object)boolean0));
      assertTrue(boolean9.equals((Object)boolean4));
      assertTrue(boolean9.equals((Object)boolean3));
      assertTrue(boolean9.equals((Object)boolean5));
      assertNotNull(boolean9);
      assertFalse(boolean9);
      
      booleanArray0[8] = boolean9;
      Boolean[] booleanArray1 = ArrayUtils.nullToEmpty(booleanArray0);
      assertEquals(9, booleanArray0.length);
      assertEquals(9, booleanArray1.length);
      assertSame(booleanArray0, booleanArray1);
      assertSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
  }

  @Test(timeout = 4000)
  public void test0685()  throws Throwable  {
      long[] longArray0 = new long[7];
      longArray0[0] = (-283L);
      longArray0[1] = (-283L);
      longArray0[2] = (-283L);
      longArray0[3] = 0L;
      longArray0[4] = 0L;
      longArray0[5] = 0L;
      longArray0[6] = 0L;
      long[] longArray1 = ArrayUtils.removeAllOccurrences(longArray0, 1285L);
      assertArrayEquals(new long[] {(-283L), (-283L), (-283L), 0L, 0L, 0L, 0L}, longArray0);
      assertArrayEquals(new long[] {(-283L), (-283L), (-283L), 0L, 0L, 0L, 0L}, longArray1);
      assertEquals(7, longArray0.length);
      assertEquals(7, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 0L;
      doubleArray0[1] = (double) (byte)127;
      int int0 = ArrayUtils.indexOf(doubleArray0, 1659.570708987962, 2144549526);
      assertArrayEquals(new double[] {0.0, 127.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals((-1), int0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (-1631.4366435021234), 817);
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertArrayEquals(new double[] {0.0, 127.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      assertNotNull(bitSet0);
  }

  @Test(timeout = 4000)
  public void test0686()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      long[] longArray0 = new long[0];
      ArrayUtils.swap(longArray0, 1383, 1383);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-105);
      byte[] byteArray1 = ArrayUtils.subarray(byteArray0, (int) (byte) (-105), (int) (byte)0);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-105)}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(2, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) false;
      objectArray0[1] = (Object) false;
      objectArray0[2] = (Object) (byte)0;
      boolean boolean0 = ArrayUtils.isEmpty(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-105)}, byteArray0);
      assertEquals(2, byteArray0.length);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertNotSame(byteArray0, byteArray1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0687()  throws Throwable  {
      int int0 = 1136;
      int int1 = Integer.MIN_VALUE;
      int[] intArray0 = new int[3];
      intArray0[0] = 1136;
      intArray0[1] = Integer.MIN_VALUE;
      intArray0[2] = 4;
      ArrayUtils.shift(intArray0, 1136, 1675, 4);
      assertArrayEquals(new int[] {1136, Integer.MIN_VALUE, 4}, intArray0);
      assertEquals(3, intArray0.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(intArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1136, Length: 3
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0688()  throws Throwable  {
      Long long0 = new Long(4996L);
      assertNotNull(long0);
      assertEquals(4996L, (long)long0);
      
      String string0 = ArrayUtils.toString((Object) long0);
      assertNotNull(string0);
      assertEquals("4996", string0);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      ArrayUtils.shift(booleanArray0, 0, 0, 1);
      assertTrue(Arrays.equals(new boolean[] {false, true}, booleanArray0));
      assertEquals(2, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test0689()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      ArrayUtils.shift(booleanArray0, (-796), 786, (-796));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals(0, booleanArray0.length);
      
      long[] longArray0 = new long[5];
      longArray0[0] = (long) (-796);
      longArray0[1] = 1L;
      longArray0[2] = (long) (-796);
      longArray0[3] = (long) 786;
      longArray0[4] = (long) 786;
      ArrayUtils.shift(longArray0, 2429);
      assertArrayEquals(new long[] {1L, (-796L), 786L, 786L, (-796L)}, longArray0);
      assertEquals(5, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test0690()  throws Throwable  {
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short)1926;
      boolean[] booleanArray0 = new boolean[0];
      ArrayUtils.shift(booleanArray0, (-796), 786, (-796));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals(0, booleanArray0.length);
      
      long[] longArray0 = new long[5];
      longArray0[0] = (long) (-796);
      longArray0[1] = 1L;
      longArray0[2] = (long) (-796);
      longArray0[3] = (long) 786;
      longArray0[4] = (long) 786;
      ArrayUtils.shift(longArray0, 2429);
      assertArrayEquals(new long[] {1L, (-796L), 786L, 786L, (-796L)}, longArray0);
      assertEquals(5, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test0691()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 687.016;
      double[] doubleArray1 = ArrayUtils.removeAllOccurrences(doubleArray0, 687.016);
      assertArrayEquals(new double[] {687.016}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) 687.016;
      objectArray0[1] = (Object) 687.016;
      objectArray0[2] = (Object) 687.016;
      ArrayUtils.swap(objectArray0, Integer.MAX_VALUE, Integer.MAX_VALUE, Integer.MAX_VALUE);
      assertEquals(3, objectArray0.length);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-23);
      byteArray0[1] = (byte) (-23);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)54;
      byteArray0[4] = (byte)9;
      byteArray0[5] = (byte)28;
      byteArray0[6] = (byte)32;
      byteArray0[7] = (byte)32;
      byteArray0[8] = (byte)32;
      int int0 = ArrayUtils.indexOf(byteArray0, (byte) (-118));
      assertArrayEquals(new byte[] {(byte) (-23), (byte) (-23), (byte)0, (byte)54, (byte)9, (byte)28, (byte)32, (byte)32, (byte)32}, byteArray0);
      assertEquals(9, byteArray0.length);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0692()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = false;
      booleanArray0[6] = true;
      booleanArray0[7] = true;
      booleanArray0[8] = true;
      boolean boolean0 = ArrayUtils.isSameLength(booleanArray0, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, true, true, true, true, false, true, true, true}, booleanArray0));
      assertEquals(9, booleanArray0.length);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-2000.3754);
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (-2544.34526007186);
      doubleArray0[3] = (-1.0);
      doubleArray0[4] = (-1631.4366435021234);
      doubleArray0[5] = (-1566.80791);
      doubleArray0[6] = (-2711.630530959374);
      doubleArray0[7] = 851.88232;
      doubleArray0[8] = 882.691;
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, 882.691);
      assertEquals(9, bitSet0.length());
      assertEquals("{8}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertFalse(bitSet0.isEmpty());
      assertEquals(1, bitSet0.cardinality());
      assertArrayEquals(new double[] {(-2000.3754), 0.0, (-2544.34526007186), (-1.0), (-1631.4366435021234), (-1566.80791), (-2711.630530959374), 851.88232, 882.691}, doubleArray0, 0.01);
      assertEquals(9, doubleArray0.length);
      assertNotNull(bitSet0);
  }

  @Test(timeout = 4000)
  public void test0693()  throws Throwable  {
      Character[] characterArray0 = new Character[0];
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, characterArray0.length);
      assertEquals(0, charArray0.length);
      assertNotNull(charArray0);
      
      int[] intArray0 = new int[0];
      AbstractMap.SimpleImmutableEntry<Double, Double> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Double, Double>((Double) null, (Double) null);
      assertNotNull(abstractMap_SimpleImmutableEntry0);
      
      ArrayUtils.shift((byte[]) null, (-1285));
  }

  @Test(timeout = 4000)
  public void test0694()  throws Throwable  {
      int[] intArray0 = new int[0];
      int[] intArray1 = ArrayUtils.add(intArray0, (int) (byte) (-102));
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {(-102)}, intArray1);
      assertEquals(0, intArray0.length);
      assertEquals(1, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      
      Character character0 = Character.valueOf('g');
      assertNotNull(character0);
      assertEquals('g', (char)character0);
      
      Character character1 = Character.valueOf('g');
      assertNotNull(character1);
      assertEquals('g', (char)character1);
      
      Long long0 = new Long(1611L);
      assertNotNull(long0);
      assertEquals(1611L, (long)long0);
      
      Byte byte0 = new Byte((byte) (-61));
      assertNotNull(byte0);
      assertEquals((byte) (-61), (byte)byte0);
      
      try { 
        Byte.valueOf("@`kx:HEuw>N&)5SA-a/");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"@`kx:HEuw>N&)5SA-a/\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test0695()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = 37;
      intArray0[1] = 2145813754;
      intArray0[2] = 1073;
      intArray0[3] = 26;
      intArray0[4] = 2779;
      int[] intArray1 = ArrayUtils.add(intArray0, 37);
      assertArrayEquals(new int[] {37, 2145813754, 1073, 26, 2779}, intArray0);
      assertArrayEquals(new int[] {37, 2145813754, 1073, 26, 2779, 37}, intArray1);
      assertEquals(5, intArray0.length);
      assertEquals(6, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      
      Character[] characterArray0 = new Character[6];
      Character character0 = Character.valueOf('g');
      assertNotNull(character0);
      assertEquals('g', (char)character0);
      
      characterArray0[0] = character0;
      char char0 = 'B';
      Character character1 = Character.valueOf('B');
      assertFalse(character1.equals((Object)character0));
      assertNotNull(character1);
      assertEquals('B', (char)character1);
      
      characterArray0[1] = character1;
      Character character2 = Character.valueOf(char0);
      assertFalse(character2.equals((Object)character0));
      assertNotNull(character2);
      assertEquals('B', (char)character2);
      
      characterArray0[2] = character2;
      Character character3 = Character.valueOf(char0);
      assertFalse(character3.equals((Object)character0));
      assertNotNull(character3);
      assertEquals('B', (char)character3);
      
      characterArray0[3] = character3;
      Character character4 = Character.valueOf('B');
      assertFalse(character4.equals((Object)character0));
      assertNotNull(character4);
      assertEquals('B', (char)character4);
      
      characterArray0[4] = character4;
      Character character5 = Character.valueOf('d');
      assertFalse(character5.equals((Object)character2));
      assertFalse(character5.equals((Object)character3));
      assertFalse(character5.equals((Object)character1));
      assertFalse(character5.equals((Object)character4));
      assertFalse(character5.equals((Object)char0));
      assertFalse(character5.equals((Object)character0));
      assertNotNull(character5);
      assertEquals('d', (char)character5);
      
      characterArray0[5] = character5;
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0);
      assertArrayEquals(new char[] {'g', 'B', 'B', 'B', 'B', 'd'}, charArray0);
      assertEquals(6, charArray0.length);
      assertEquals(6, characterArray0.length);
      assertNotNull(charArray0);
  }

  @Test(timeout = 4000)
  public void test0696()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[0] = (byte) (-42);
      byteArray0[2] = (byte) (-42);
      byte[] byteArray1 = ArrayUtils.removeAllOccurences(byteArray0, (byte) (-42));
      assertArrayEquals(new byte[] {(byte) (-42), (byte)0, (byte) (-42)}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray1);
      assertEquals(3, byteArray0.length);
      assertEquals(1, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      
      int[] intArray0 = ArrayUtils.subarray((int[]) null, (-1556), (-2139));
      assertNull(intArray0);
      
      Float float0 = new Float((double) 2);
      assertNotNull(float0);
      assertEquals(2.0F, (float)float0, 0.01F);
      
      Float float1 = new Float(1.0);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertNotNull(float1);
      assertEquals(1.0F, (float)float1, 0.01F);
      
      Float float2 = new Float((double) (-1556));
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertNotNull(float2);
      assertEquals((-1556.0F), (float)float2, 0.01F);
      
      Float[] floatArray0 = new Float[0];
      Float[] floatArray1 = ArrayUtils.nullToEmpty(floatArray0);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      
      Character character0 = new Character('{');
      assertNotNull(character0);
      assertEquals('{', (char)character0);
      
      Character character1 = Character.valueOf('v');
      assertFalse(character1.equals((Object)character0));
      assertNotNull(character1);
      assertEquals('v', (char)character1);
      
      char[] charArray0 = ArrayUtils.toPrimitive((Character[]) null, 'Q');
      assertNull(charArray0);
  }

  @Test(timeout = 4000)
  public void test0697()  throws Throwable  {
      Character[] characterArray0 = new Character[4];
      Character character0 = new Character('m');
      assertNotNull(character0);
      assertEquals('m', (char)character0);
      
      characterArray0[0] = character0;
      Character character1 = new Character((char) character0);
      assertTrue(character1.equals((Object)character0));
      assertNotNull(character1);
      assertEquals('m', (char)character1);
      
      characterArray0[1] = character1;
      Character character2 = Character.valueOf((char) character0);
      assertTrue(character0.equals((Object)character1));
      assertTrue(character2.equals((Object)character1));
      assertTrue(character2.equals((Object)character0));
      assertNotNull(character2);
      assertEquals('m', (char)character2);
      
      characterArray0[2] = character2;
      Character character3 = new Character((char) character0);
      assertTrue(character0.equals((Object)character2));
      assertTrue(character0.equals((Object)character1));
      assertTrue(character3.equals((Object)character1));
      assertTrue(character3.equals((Object)character2));
      assertTrue(character3.equals((Object)character0));
      assertNotNull(character3);
      assertEquals('m', (char)character3);
      
      characterArray0[3] = character3;
      Character[] characterArray1 = ArrayUtils.nullToEmpty(characterArray0);
      assertEquals(4, characterArray0.length);
      assertEquals(4, characterArray1.length);
      assertSame(characterArray0, characterArray1);
      assertSame(characterArray1, characterArray0);
      assertNotNull(characterArray1);
      
      Boolean boolean0 = Boolean.valueOf("Jn^+bx_pA");
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      int int0 = ArrayUtils.lastIndexOf((Object[]) characterArray1, (Object) "Jn^+bx_pA", (int) character3);
      assertEquals(4, characterArray0.length);
      assertEquals(4, characterArray1.length);
      assertTrue(character0.equals((Object)character2));
      assertTrue(character0.equals((Object)character1));
      assertTrue(character0.equals((Object)character3));
      assertTrue(character3.equals((Object)character1));
      assertTrue(character3.equals((Object)character2));
      assertTrue(character3.equals((Object)character0));
      assertSame(characterArray0, characterArray1);
      assertSame(characterArray1, characterArray0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0698()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = 288;
      intArray0[1] = 288;
      intArray0[2] = 288;
      intArray0[3] = 288;
      intArray0[4] = 288;
      intArray0[5] = 288;
      intArray0[6] = 288;
      intArray0[7] = 288;
      int[] intArray1 = ArrayUtils.removeAllOccurrences(intArray0, 1388);
      assertArrayEquals(new int[] {288, 288, 288, 288, 288, 288, 288, 288}, intArray0);
      assertArrayEquals(new int[] {288, 288, 288, 288, 288, 288, 288, 288}, intArray1);
      assertEquals(8, intArray0.length);
      assertEquals(8, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[7] = false;
      ArrayUtils.swap(booleanArray0, (-1), 3);
      assertTrue(Arrays.equals(new boolean[] {false, false, true, true, false, false, false, false}, booleanArray0));
      assertEquals(8, booleanArray0.length);
      
      long[] longArray0 = new long[6];
      longArray0[0] = (long) (-1);
      longArray0[1] = (long) 288;
      longArray0[2] = (long) 288;
      longArray0[3] = (long) 288;
      longArray0[4] = (long) 288;
      longArray0[5] = (long) 288;
      long[] longArray1 = ArrayUtils.addAll(longArray0, longArray0);
      assertArrayEquals(new long[] {(-1L), 288L, 288L, 288L, 288L, 288L}, longArray0);
      assertEquals(6, longArray0.length);
      assertEquals(12, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
  }

  @Test(timeout = 4000)
  public void test0699()  throws Throwable  {
      Byte byte0 = new Byte((byte)99);
      assertNotNull(byte0);
      assertEquals((byte)99, (byte)byte0);
      
      Byte byte1 = new Byte((byte)89);
      assertFalse(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      assertEquals((byte)89, (byte)byte1);
      
      Long long0 = new Long(625L);
      assertNotNull(long0);
      assertEquals(625L, (long)long0);
      
      Long long1 = new Long((-2880L));
      assertFalse(long1.equals((Object)long0));
      assertNotNull(long1);
      assertEquals((-2880L), (long)long1);
      
      Long long2 = new Long(625L);
      assertTrue(long2.equals((Object)long0));
      assertFalse(long2.equals((Object)long1));
      assertNotNull(long2);
      assertEquals(625L, (long)long2);
      
      Long long3 = new Long(1L);
      assertFalse(long3.equals((Object)long2));
      assertFalse(long3.equals((Object)long1));
      assertFalse(long3.equals((Object)long0));
      assertNotNull(long3);
      assertEquals(1L, (long)long3);
      
      Boolean boolean0 = Boolean.TRUE;
      assertNotNull(boolean0);
      assertTrue(boolean0);
      
      boolean[] booleanArray0 = ArrayUtils.toPrimitive((Boolean[]) null);
      assertNull(booleanArray0);
      
      boolean[] booleanArray1 = ArrayUtils.removeElement((boolean[]) null, false);
      assertNull(booleanArray1);
      
      Long long4 = new Long(73L);
      assertFalse(long4.equals((Object)long2));
      assertFalse(long4.equals((Object)long1));
      assertFalse(long4.equals((Object)long3));
      assertFalse(long4.equals((Object)long0));
      assertNotNull(long4);
      assertEquals(73L, (long)long4);
      
      // Undeclared exception!
      try { 
        ArrayUtils.add((Object[]) null, (-3473), (Object) long4);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -3473, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0700()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 914.944001638755;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (-1202.7635315971), 0.0);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertArrayEquals(new double[] {0.0, 914.944001638755, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      assertNotNull(bitSet0);
      
      Float[] floatArray0 = new Float[2];
      Float float0 = new Float(0.0F);
      assertNotNull(float0);
      assertEquals(0.0F, (float)float0, 0.01F);
      
      floatArray0[0] = float0;
      Float float1 = new Float((-1789.9796F));
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertNotNull(float1);
      assertEquals((-1789.9796F), (float)float1, 0.01F);
      
      floatArray0[1] = float1;
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0);
      assertArrayEquals(new float[] {0.0F, (-1789.9796F)}, floatArray1, 0.01F);
      assertEquals(2, floatArray0.length);
      assertEquals(2, floatArray1.length);
      assertNotNull(floatArray1);
      
      Class<Float>[] classArray0 = (Class<Float>[]) Array.newInstance(Class.class, 7);
      Class<Float> class0 = Float.class;
      classArray0[0] = class0;
      Class<Float> class1 = Float.class;
      classArray0[1] = class1;
      Class<Float> class2 = Float.class;
      classArray0[2] = class2;
      Class<Float> class3 = Float.class;
      classArray0[3] = class3;
      Class<Float> class4 = Float.class;
      classArray0[4] = class4;
      Class<Float> class5 = Float.class;
      classArray0[5] = class5;
      Class<Float> class6 = Float.class;
      classArray0[6] = class6;
      Class<?>[] classArray1 = ArrayUtils.nullToEmpty(classArray0);
      assertEquals(7, classArray1.length);
      assertEquals(7, classArray0.length);
      assertNotNull(classArray1);
      
      Short[] shortArray0 = new Short[6];
      Short short0 = new Short((short) (-3307));
      assertNotNull(short0);
      assertEquals((short) (-3307), (short)short0);
      
      shortArray0[0] = short0;
      Short short1 = new Short((short) shortArray0[0]);
      assertEquals(6, shortArray0.length);
      assertTrue(short1.equals((Object)short0));
      assertNotNull(short1);
      assertEquals((short) (-3307), (short)short1);
      
      shortArray0[1] = short1;
      Short short2 = new Short((short)1921);
      assertFalse(short2.equals((Object)short1));
      assertFalse(short2.equals((Object)short0));
      assertNotNull(short2);
      assertEquals((short)1921, (short)short2);
      
      shortArray0[2] = short2;
      Short short3 = new Short((short) (-2594));
      assertFalse(short3.equals((Object)short1));
      assertFalse(short3.equals((Object)short0));
      assertFalse(short3.equals((Object)short2));
      assertNotNull(short3);
      assertEquals((short) (-2594), (short)short3);
      
      shortArray0[3] = short3;
      Short short4 = new Short((short)15);
      assertFalse(short4.equals((Object)short2));
      assertFalse(short4.equals((Object)short3));
      assertFalse(short4.equals((Object)short1));
      assertFalse(short4.equals((Object)short0));
      assertNotNull(short4);
      assertEquals((short)15, (short)short4);
      
      shortArray0[4] = short4;
      Short short5 = new Short((short)20357);
      assertFalse(short5.equals((Object)short2));
      assertFalse(short5.equals((Object)short0));
      assertFalse(short5.equals((Object)short1));
      assertFalse(short5.equals((Object)short3));
      assertFalse(short5.equals((Object)short4));
      assertNotNull(short5);
      assertEquals((short)20357, (short)short5);
      
      shortArray0[5] = short5;
      Short short6 = new Short((short)100);
      assertFalse(short6.equals((Object)short4));
      assertFalse(short6.equals((Object)short1));
      assertFalse(short6.equals((Object)short3));
      assertFalse(short6.equals((Object)short2));
      assertFalse(short6.equals((Object)short5));
      assertFalse(short6.equals((Object)short0));
      assertNotNull(short6);
      assertEquals((short)100, (short)short6);
      
      // Undeclared exception!
      try { 
        ArrayUtils.add(shortArray0, (int) shortArray0[0], short6);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -3307, Length: 6
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0701()  throws Throwable  {
      Byte[] byteArray0 = new Byte[2];
      byte byte0 = (byte)51;
      Byte byte1 = new Byte((byte)51);
      assertTrue(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      assertEquals((byte)51, (byte)byte1);
      
      byteArray0[0] = byte1;
      Byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0);
      assertEquals(2, byteArray0.length);
      assertEquals(2, byteArray1.length);
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      
      byte[] byteArray2 = new byte[4];
      byteArray2[0] = byte0;
      byteArray2[1] = byte0;
      byteArray2[2] = (byte)126;
      byteArray2[3] = byte0;
      byte[] byteArray3 = ArrayUtils.subarray(byteArray2, (-3), (int) (byte)126);
      assertArrayEquals(new byte[] {(byte)51, (byte)51, (byte)126, (byte)51}, byteArray2);
      assertArrayEquals(new byte[] {(byte)51, (byte)51, (byte)126, (byte)51}, byteArray3);
      assertEquals(4, byteArray2.length);
      assertEquals(4, byteArray3.length);
      assertFalse(byteArray3.equals((Object)byteArray2));
      assertNotSame(byteArray2, byteArray3);
      assertNotSame(byteArray3, byteArray2);
      assertNotNull(byteArray3);
      
      byte[] byteArray4 = ArrayUtils.addAll(byteArray2, byteArray2);
      assertArrayEquals(new byte[] {(byte)51, (byte)51, (byte)126, (byte)51}, byteArray2);
      assertArrayEquals(new byte[] {(byte)51, (byte)51, (byte)126, (byte)51, (byte)51, (byte)51, (byte)126, (byte)51}, byteArray4);
      assertEquals(4, byteArray2.length);
      assertEquals(8, byteArray4.length);
      assertFalse(byteArray2.equals((Object)byteArray3));
      assertFalse(byteArray4.equals((Object)byteArray2));
      assertFalse(byteArray4.equals((Object)byteArray3));
      assertNotSame(byteArray2, byteArray3);
      assertNotSame(byteArray2, byteArray4);
      assertNotSame(byteArray4, byteArray2);
      assertNotSame(byteArray4, byteArray3);
      assertNotNull(byteArray4);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) (-3);
      longArray0[1] = (long) (byte)51;
      // Undeclared exception!
      try { 
        ArrayUtils.insert(363, longArray0, longArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 363, Length: 2
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0702()  throws Throwable  {
      long[] longArray0 = new long[7];
      longArray0[0] = (-283L);
      longArray0[1] = (-283L);
      longArray0[2] = (-283L);
      longArray0[3] = 0L;
      longArray0[4] = 0L;
      longArray0[5] = 0L;
      longArray0[6] = 0L;
      long[] longArray1 = ArrayUtils.removeAllOccurrences(longArray0, 1285L);
      assertArrayEquals(new long[] {(-283L), (-283L), (-283L), 0L, 0L, 0L, 0L}, longArray0);
      assertArrayEquals(new long[] {(-283L), (-283L), (-283L), 0L, 0L, 0L, 0L}, longArray1);
      assertEquals(7, longArray0.length);
      assertEquals(7, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 0L;
      doubleArray0[1] = (double) (byte)127;
      int int0 = ArrayUtils.indexOf(doubleArray0, 1659.570708987962, 2144549526);
      assertArrayEquals(new double[] {0.0, 127.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals((-1), int0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)127;
      byteArray0[2] = (byte)0;
      byte[] byteArray1 = ArrayUtils.subarray(byteArray0, (int) (byte) (-1), 939);
      assertArrayEquals(new byte[] {(byte) (-1), (byte)127, (byte)0}, byteArray1);
      assertArrayEquals(new byte[] {(byte) (-1), (byte)127, (byte)0}, byteArray0);
      assertEquals(3, byteArray1.length);
      assertEquals(3, byteArray0.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotNull(byteArray1);
      
      byte[] byteArray2 = ArrayUtils.addAll(byteArray0, byteArray1);
      assertArrayEquals(new byte[] {(byte) (-1), (byte)127, (byte)0}, byteArray1);
      assertArrayEquals(new byte[] {(byte) (-1), (byte)127, (byte)0, (byte) (-1), (byte)127, (byte)0}, byteArray2);
      assertArrayEquals(new byte[] {(byte) (-1), (byte)127, (byte)0}, byteArray0);
      assertEquals(3, byteArray1.length);
      assertEquals(6, byteArray2.length);
      assertEquals(3, byteArray0.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray2);
      assertNotNull(byteArray2);
  }

  @Test(timeout = 4000)
  public void test0703()  throws Throwable  {
      Short[] shortArray0 = new Short[1];
      Short short0 = new Short((short)858);
      assertNotNull(short0);
      assertEquals((short)858, (short)short0);
      
      shortArray0[0] = short0;
      boolean boolean0 = ArrayUtils.isArrayIndexValid(shortArray0, Integer.MAX_VALUE);
      assertEquals(1, shortArray0.length);
      assertFalse(boolean0);
      
      int[] intArray0 = ArrayUtils.removeElement((int[]) null, (int) (short)858);
      assertNull(intArray0);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) Integer.MAX_VALUE;
      doubleArray0[1] = (double) (short)shortArray0[0];
      doubleArray0[2] = (double) (short)858;
      doubleArray0[3] = (double) (short)858;
      ArrayUtils.shift(doubleArray0, Integer.MAX_VALUE, 2492, (int) shortArray0[0]);
      assertArrayEquals(new double[] {2.147483647E9, 858.0, 858.0, 858.0}, doubleArray0, 0.01);
      assertEquals(1, shortArray0.length);
      assertEquals(4, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test0704()  throws Throwable  {
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)2;
      shortArray0[1] = (short)64;
      short[] shortArray1 = ArrayUtils.removeAllOccurences(shortArray0, (short)64);
      assertArrayEquals(new short[] {(short)2, (short)64}, shortArray0);
      assertArrayEquals(new short[] {(short)2}, shortArray1);
      assertEquals(2, shortArray0.length);
      assertEquals(1, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      
      int[] intArray0 = new int[8];
      intArray0[1] = (int) (short)2;
      intArray0[2] = (int) (short)2;
      Long long0 = new Long(1L);
      assertNotNull(long0);
      assertEquals(1L, (long)long0);
      
      Long long1 = new Long(623L);
      assertFalse(long1.equals((Object)long0));
      assertNotNull(long1);
      assertEquals(623L, (long)long1);
      
      Long long2 = new Long(1L);
      assertTrue(long2.equals((Object)long0));
      assertFalse(long2.equals((Object)long1));
      assertNotNull(long2);
      assertEquals(1L, (long)long2);
      
      Long long3 = new Long(1207L);
      assertFalse(long3.equals((Object)long2));
      assertFalse(long3.equals((Object)long0));
      assertFalse(long3.equals((Object)long1));
      assertNotNull(long3);
      assertEquals(1207L, (long)long3);
      
      Long long4 = new Long((short)64);
      assertFalse(long4.equals((Object)long3));
      assertFalse(long4.equals((Object)long2));
      assertFalse(long4.equals((Object)long1));
      assertFalse(long4.equals((Object)long0));
      assertNotNull(long4);
      assertEquals(64L, (long)long4);
      
      Long long5 = new Long(2226L);
      assertFalse(long5.equals((Object)long4));
      assertFalse(long5.equals((Object)long1));
      assertFalse(long5.equals((Object)long3));
      assertFalse(long5.equals((Object)long2));
      assertFalse(long5.equals((Object)long0));
      assertNotNull(long5);
      assertEquals(2226L, (long)long5);
      
      Long[] longArray0 = new Long[8];
      longArray0[0] = long0;
      longArray0[1] = long2;
      longArray0[2] = long2;
      longArray0[3] = long1;
      longArray0[4] = long5;
      longArray0[5] = long4;
      longArray0[6] = long5;
      Long long6 = new Long((-2835L));
      assertFalse(long6.equals((Object)long4));
      assertFalse(long6.equals((Object)long2));
      assertFalse(long6.equals((Object)long5));
      assertFalse(long6.equals((Object)long1));
      assertFalse(long6.equals((Object)long0));
      assertFalse(long6.equals((Object)long3));
      assertNotNull(long6);
      assertEquals((-2835L), (long)long6);
      
      longArray0[7] = long6;
      Long[] longArray1 = ArrayUtils.subarray(longArray0, 2, (-785));
      assertEquals(0, longArray1.length);
      assertEquals(8, longArray0.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray0, longArray1);
      assertNotNull(longArray1);
      
      int[] intArray1 = ArrayUtils.removeElement(intArray0, 88);
      assertArrayEquals(new int[] {0, 2, 2, 0, 0, 0, 0, 0}, intArray0);
      assertArrayEquals(new int[] {0, 2, 2, 0, 0, 0, 0, 0}, intArray1);
      assertEquals(8, intArray0.length);
      assertEquals(8, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
  }

  @Test(timeout = 4000)
  public void test0705()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 768.0958366890409;
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)32;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-48);
      byteArray0[4] = (byte) (-1);
      int int0 = ArrayUtils.indexOf(byteArray0, (byte) (-48));
      assertArrayEquals(new byte[] {(byte)32, (byte)0, (byte) (-48), (byte)0, (byte) (-1)}, byteArray0);
      assertEquals(5, byteArray0.length);
      assertEquals(2, int0);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) (byte)0;
      int int1 = ArrayUtils.lastIndexOf(longArray0, 2022L, Integer.MAX_VALUE);
      assertArrayEquals(new long[] {0L}, longArray0);
      assertEquals(1, longArray0.length);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      long[] longArray1 = ArrayUtils.add(longArray0, (long) (byte) (-1));
      assertArrayEquals(new long[] {0L}, longArray0);
      assertArrayEquals(new long[] {0L, (-1L)}, longArray1);
      assertEquals(1, longArray0.length);
      assertEquals(2, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
  }

  @Test(timeout = 4000)
  public void test0706()  throws Throwable  {
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short)1964;
      shortArray0[2] = (short)1964;
      shortArray0[3] = (short) (-3);
      shortArray0[4] = (short)1382;
      shortArray0[5] = (short)0;
      shortArray0[6] = (short) (-1642);
      Long long0 = new Long((short)1964);
      assertNotNull(long0);
      assertEquals(1964L, (long)long0);
      
      Long[] longArray0 = new Long[8];
      longArray0[0] = long0;
      longArray0[1] = long0;
      longArray0[2] = long0;
      longArray0[0] = long0;
      longArray0[4] = long0;
      Long[] longArray1 = ArrayUtils.subarray(longArray0, (int) 0, (int) 1382);
      assertEquals(8, longArray0.length);
      assertEquals(8, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
      
      long[] longArray2 = new long[4];
      longArray2[0] = (long) (short)0;
      Object[] objectArray0 = ArrayUtils.nullToEmpty((Object[]) longArray0);
      assertEquals(8, objectArray0.length);
      assertEquals(8, longArray0.length);
      assertFalse(longArray0.equals((Object)longArray1));
      assertNotSame(longArray0, longArray1);
      assertSame(longArray0, objectArray0);
      assertNotNull(objectArray0);
  }

  @Test(timeout = 4000)
  public void test0707()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-39);
      int int0 = ArrayUtils.indexOf(byteArray0, (byte)6);
      assertArrayEquals(new byte[] {(byte) (-39), (byte)0, (byte)0}, byteArray0);
      assertEquals(3, byteArray0.length);
      assertEquals((-1), int0);
      
      long[] longArray0 = new long[0];
      int int1 = ArrayUtils.lastIndexOf(longArray0, 2226L, (-761));
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (byte)6;
      int int2 = ArrayUtils.indexOf(shortArray0, (short) (byte)6, (-3059));
      assertArrayEquals(new short[] {(short)6}, shortArray0);
      assertEquals(1, shortArray0.length);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(0, int2);
  }

  @Test(timeout = 4000)
  public void test0708()  throws Throwable  {
      long[] longArray0 = new long[3];
      longArray0[0] = (-2084L);
      longArray0[1] = 0L;
      longArray0[2] = 0L;
      boolean boolean0 = ArrayUtils.isSorted(longArray0);
      assertArrayEquals(new long[] {(-2084L), 0L, 0L}, longArray0);
      assertEquals(3, longArray0.length);
      assertTrue(boolean0);
      
      ArrayUtils.reverse(longArray0);
      assertArrayEquals(new long[] {0L, 0L, (-2084L)}, longArray0);
      assertEquals(3, longArray0.length);
      
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short)759;
      shortArray0[1] = (short)52;
      shortArray0[2] = (short)993;
      shortArray0[3] = (short)2358;
      int int0 = ArrayUtils.lastIndexOf(longArray0, 0L);
      assertArrayEquals(new long[] {0L, 0L, (-2084L)}, longArray0);
      assertEquals(3, longArray0.length);
      assertEquals(1, int0);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) (-44L);
      // Undeclared exception!
      try { 
        ArrayUtils.add(floatArray0, (-443), (float) (-44L));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -443, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0709()  throws Throwable  {
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short)1964;
      shortArray0[2] = (short)1964;
      shortArray0[3] = (short) (-3);
      shortArray0[4] = (short)1382;
      shortArray0[5] = (short)0;
      shortArray0[6] = (short) (-1642);
      Long long0 = new Long((short)1964);
      assertNotNull(long0);
      assertEquals(1964L, (long)long0);
      
      Long[] longArray0 = new Long[8];
      longArray0[0] = long0;
      longArray0[1] = long0;
      longArray0[2] = long0;
      longArray0[0] = long0;
      longArray0[4] = long0;
      Long[] longArray1 = ArrayUtils.subarray(longArray0, (int) 0, (int) 1382);
      assertEquals(8, longArray0.length);
      assertEquals(8, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
      
      long[] longArray2 = new long[4];
      longArray2[0] = (long) (short)0;
      longArray2[1] = (long) (short)1964;
      longArray2[2] = (long) (short)0;
      longArray2[3] = (long) (short) (-1642);
      int int0 = ArrayUtils.lastIndexOf(longArray2, (-44L));
      assertArrayEquals(new long[] {0L, 1964L, 0L, (-1642L)}, longArray2);
      assertEquals(4, longArray2.length);
      assertEquals((-1), int0);
      
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) (long)longArray0[1];
      floatArray0[1] = (-1084.8705F);
      floatArray0[2] = (float) (short)1964;
      floatArray0[3] = (float) (short)1964;
      floatArray0[4] = (float) 0L;
      floatArray0[5] = (float) (short)1964;
      floatArray0[6] = (float) 0L;
      floatArray0[7] = (float) 0L;
      floatArray0[8] = (float) 0L;
      // Undeclared exception!
      try { 
        ArrayUtils.add(floatArray0, (int) (short)1964, 3.0818F);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1964, Length: 9
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0710()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)127;
      byteArray0[1] = (byte)8;
      byteArray0[2] = (byte) (-35);
      byteArray0[3] = (byte)22;
      byteArray0[4] = (byte)5;
      byteArray0[5] = (byte) (-73);
      byteArray0[6] = (byte)102;
      boolean boolean0 = ArrayUtils.isNotEmpty(byteArray0);
      assertArrayEquals(new byte[] {(byte)127, (byte)8, (byte) (-35), (byte)22, (byte)5, (byte) (-73), (byte)102}, byteArray0);
      assertEquals(7, byteArray0.length);
      assertTrue(boolean0);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) (byte) (-35);
      longArray0[1] = (long) (byte)127;
      long[] longArray1 = ArrayUtils.addAll(longArray0, longArray0);
      assertArrayEquals(new long[] {(-35L), 127L}, longArray0);
      assertArrayEquals(new long[] {(-35L), 127L, (-35L), 127L}, longArray1);
      assertEquals(2, longArray0.length);
      assertEquals(4, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
      
      ArrayUtils.swap(byteArray0, (-2858), (-1327));
      assertArrayEquals(new byte[] {(byte)127, (byte)8, (byte) (-35), (byte)22, (byte)5, (byte) (-73), (byte)102}, byteArray0);
      assertEquals(7, byteArray0.length);
      
      int[] intArray0 = new int[8];
      intArray0[0] = (int) (byte)5;
      intArray0[1] = (int) (byte)5;
      intArray0[2] = (int) (byte)127;
      intArray0[3] = (int) (byte)102;
      intArray0[4] = (int) (byte)22;
      intArray0[5] = (-1853);
      intArray0[6] = (int) (byte) (-35);
      intArray0[7] = (int) (byte)5;
      ArrayUtils.swap(intArray0, (-1327), (int) (byte)102, (-962));
      assertArrayEquals(new int[] {5, 5, 127, 102, 22, (-1853), (-35), 5}, intArray0);
      assertEquals(8, intArray0.length);
      
      char[] charArray0 = new char[0];
      int int0 = ArrayUtils.indexOf(charArray0, '9', 1);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      assertEquals((-1), int0);
      
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short) (byte)102;
      shortArray0[1] = (short) (byte)8;
      shortArray0[2] = (short) (byte)102;
      shortArray0[3] = (short) (byte)127;
      shortArray0[4] = (short) (byte)127;
      short[] shortArray1 = ArrayUtils.add(shortArray0, (short) (byte) (-35));
      assertArrayEquals(new short[] {(short)102, (short)8, (short)102, (short)127, (short)127, (short) (-35)}, shortArray1);
      assertArrayEquals(new short[] {(short)102, (short)8, (short)102, (short)127, (short)127}, shortArray0);
      assertEquals(6, shortArray1.length);
      assertEquals(5, shortArray0.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertNotNull(shortArray1);
  }

  @Test(timeout = 4000)
  public void test0711()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = '[';
      charArray0[1] = 'h';
      boolean[] booleanArray0 = new boolean[0];
      ArrayUtils.reverse(booleanArray0, 36, 2);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals(0, booleanArray0.length);
      
      boolean boolean0 = ArrayUtils.contains((short[]) null, (short)977);
      assertFalse(boolean0);
      
      long[] longArray0 = new long[4];
      longArray0[0] = (long) 36;
      longArray0[1] = (long) '[';
      longArray0[2] = (long) 'h';
      longArray0[3] = (long) '[';
      // Undeclared exception!
      try { 
        ArrayUtils.add(longArray0, 36, (long) 2);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 36, Length: 4
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0712()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 571.942196047302;
      char[] charArray0 = new char[1];
      charArray0[0] = 'P';
      char[] charArray1 = ArrayUtils.removeElement(charArray0, 'R');
      assertArrayEquals(new char[] {'P'}, charArray0);
      assertArrayEquals(new char[] {'P'}, charArray1);
      assertEquals(1, charArray0.length);
      assertEquals(1, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      
      Object[] objectArray0 = new Object[0];
      Float float0 = new Float(0.0);
      assertNotNull(float0);
      assertEquals(0.0F, (float)float0, 0.01F);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(objectArray0, (Object) float0, 2);
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(0, objectArray0.length);
      assertNotNull(bitSet0);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short) (-3414);
      ArrayUtils.swap(shortArray0, (int) (short)0, 3225, (int) (short)0);
      assertArrayEquals(new short[] {(short)0, (short) (-3414)}, shortArray0);
      assertEquals(2, shortArray0.length);
      
      short[] shortArray1 = ArrayUtils.clone(shortArray0);
      assertArrayEquals(new short[] {(short)0, (short) (-3414)}, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short) (-3414)}, shortArray1);
      assertEquals(2, shortArray0.length);
      assertEquals(2, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      
      Long[] longArray0 = new Long[6];
      Long long0 = new Long((short)0);
      assertNotNull(long0);
      assertEquals(0L, (long)long0);
      
      longArray0[0] = long0;
      Long long1 = new Long((long) longArray0[0]);
      assertEquals(6, longArray0.length);
      assertTrue(long1.equals((Object)long0));
      assertNotNull(long1);
      assertEquals(0L, (long)long1);
      
      longArray0[1] = long1;
      Long long2 = new Long((long) longArray0[1]);
      assertEquals(6, longArray0.length);
      assertTrue(long2.equals((Object)long1));
      assertTrue(long2.equals((Object)long0));
      assertNotNull(long2);
      assertEquals(0L, (long)long2);
      
      longArray0[2] = long2;
      Long long3 = new Long((short) (-3414));
      assertFalse(long3.equals((Object)long1));
      assertFalse(long3.equals((Object)long0));
      assertFalse(long3.equals((Object)long2));
      assertNotNull(long3);
      assertEquals((-3414L), (long)long3);
      
      longArray0[3] = long3;
      Long long4 = new Long((short)0);
      assertTrue(long4.equals((Object)long2));
      assertTrue(long4.equals((Object)long0));
      assertTrue(long4.equals((Object)long1));
      assertFalse(long4.equals((Object)long3));
      assertNotNull(long4);
      assertEquals(0L, (long)long4);
      
      longArray0[4] = long4;
      String string0 = "A blank string is not a valid number";
      try { 
        Long.valueOf("", 2);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test0713()  throws Throwable  {
      BitSet bitSet0 = new BitSet();
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertNotNull(bitSet0);
      
      byte[] byteArray0 = new byte[0];
      ArrayUtils.swap(byteArray0, 11, 11, 11);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short)0;
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      booleanArray0[6] = true;
      booleanArray0[7] = true;
      boolean boolean0 = ArrayUtils.contains(booleanArray0, true);
      assertTrue(Arrays.equals(new boolean[] {false, true, false, true, false, false, true, true}, booleanArray0));
      assertEquals(8, booleanArray0.length);
      assertTrue(boolean0);
      
      MockRandom mockRandom0 = new MockRandom((-1909L));
      assertNotNull(mockRandom0);
      
      long long0 = mockRandom0.nextLong();
      assertEquals(0L, long0);
      
      LongStream longStream0 = mockRandom0.longs(1L);
      assertNotNull(longStream0);
      
      ArrayUtils.shuffle(shortArray0, (Random) mockRandom0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertEquals(7, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test0714()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = true;
      booleanArray0[6] = false;
      booleanArray0[7] = false;
      boolean boolean0 = ArrayUtils.contains(booleanArray0, true);
      assertTrue(Arrays.equals(new boolean[] {false, true, true, false, false, true, false, false}, booleanArray0));
      assertEquals(8, booleanArray0.length);
      assertTrue(boolean0);
      
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) false;
      objectArray0[1] = (Object) false;
      objectArray0[2] = (Object) true;
      objectArray0[3] = (Object) false;
      objectArray0[4] = (Object) false;
      objectArray0[5] = (Object) false;
      ArrayUtils.shift(objectArray0, (-1916), 0, 0);
      assertEquals(6, objectArray0.length);
      
      int int0 = ArrayUtils.indexOf(objectArray0, (Object) null);
      assertEquals(6, objectArray0.length);
      assertEquals((-1), int0);
      
      ArrayUtils.swap(objectArray0, (-3689), 0, 0);
      assertEquals(6, objectArray0.length);
      
      short[] shortArray0 = new short[0];
      MockRandom mockRandom0 = new MockRandom(1L);
      assertNotNull(mockRandom0);
      
      LongStream longStream0 = mockRandom0.longs((long) 0);
      assertNotNull(longStream0);
      
      ArrayUtils.shuffle(shortArray0, (Random) mockRandom0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test0715()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      MockRandom mockRandom0 = new MockRandom((-1909L));
      assertNotNull(mockRandom0);
      
      long long0 = mockRandom0.nextLong();
      assertEquals(0L, long0);
      
      LongStream longStream0 = mockRandom0.longs(1285L);
      assertNotNull(longStream0);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)55;
      shortArray0[1] = (short) (-114);
      ArrayUtils.shuffle(shortArray0, (Random) mockRandom0);
      assertArrayEquals(new short[] {(short)55, (short) (-114)}, shortArray0);
      assertEquals(2, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test0716()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[1] = 571.942196047302;
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short) (-13106);
      shortArray0[1] = (short) (-1510);
      shortArray0[2] = (short)1354;
      shortArray0[3] = (short) (-13106);
      shortArray0[4] = (short) (-13106);
      shortArray0[5] = (short) (-13106);
      shortArray0[6] = (short) (-13106);
      shortArray0[7] = (short) (-13106);
      ArrayUtils.swap(shortArray0, (int) (short) (-13106), 2394, 41);
      assertArrayEquals(new short[] {(short) (-13106), (short) (-1510), (short)1354, (short) (-13106), (short) (-13106), (short) (-13106), (short) (-13106), (short) (-13106)}, shortArray0);
      assertEquals(8, shortArray0.length);
      
      short[] shortArray1 = ArrayUtils.clone(shortArray0);
      assertArrayEquals(new short[] {(short) (-13106), (short) (-1510), (short)1354, (short) (-13106), (short) (-13106), (short) (-13106), (short) (-13106), (short) (-13106)}, shortArray0);
      assertArrayEquals(new short[] {(short) (-13106), (short) (-1510), (short)1354, (short) (-13106), (short) (-13106), (short) (-13106), (short) (-13106), (short) (-13106)}, shortArray1);
      assertEquals(8, shortArray0.length);
      assertEquals(8, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      
      Long long0 = new Long((short) (-13106));
      assertNotNull(long0);
      assertEquals((-13106L), (long)long0);
      
      Long long1 = new Long((short) (-1510));
      assertFalse(long1.equals((Object)long0));
      assertNotNull(long1);
      assertEquals((-1510L), (long)long1);
      
      Long long2 = new Long(1L);
      assertFalse(long2.equals((Object)long0));
      assertFalse(long2.equals((Object)long1));
      assertNotNull(long2);
      assertEquals(1L, (long)long2);
      
      Long long3 = new Long((-558));
      assertFalse(long3.equals((Object)long0));
      assertFalse(long3.equals((Object)long1));
      assertFalse(long3.equals((Object)long2));
      assertNotNull(long3);
      assertEquals((-558L), (long)long3);
      
      Long long4 = new Long((-542L));
      assertFalse(long4.equals((Object)long0));
      assertFalse(long4.equals((Object)long3));
      assertFalse(long4.equals((Object)long1));
      assertFalse(long4.equals((Object)long2));
      assertNotNull(long4);
      assertEquals((-542L), (long)long4);
      
      try { 
        Long.valueOf((String) null, (int) (short)1354);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // null
         //
         verifyException("java.lang.Long", e);
      }
  }

  @Test(timeout = 4000)
  public void test0717()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = true;
      booleanArray0[6] = true;
      booleanArray0[7] = false;
      boolean boolean0 = ArrayUtils.contains(booleanArray0, true);
      assertTrue(Arrays.equals(new boolean[] {false, true, true, false, false, true, true, false}, booleanArray0));
      assertEquals(8, booleanArray0.length);
      assertTrue(boolean0);
      
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) false;
      objectArray0[1] = (Object) false;
      objectArray0[2] = (Object) true;
      objectArray0[3] = (Object) false;
      objectArray0[4] = (Object) false;
      objectArray0[5] = (Object) false;
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short)8856;
      shortArray0[1] = (short)8856;
      shortArray0[2] = (short)41;
      shortArray0[3] = (short)8856;
      shortArray0[4] = (short)2;
      shortArray0[5] = (short)2;
      shortArray0[6] = (short)2;
      shortArray0[7] = (short)2;
      ArrayUtils.swap(shortArray0, (int) (short)2, (int) (short)41);
      assertArrayEquals(new short[] {(short)8856, (short)8856, (short)41, (short)8856, (short)2, (short)2, (short)2, (short)2}, shortArray0);
      assertEquals(8, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test0718()  throws Throwable  {
      float[] floatArray0 = new float[3];
      floatArray0[0] = (-904.0746F);
      floatArray0[1] = (-904.0746F);
      floatArray0[2] = (-904.0746F);
      ArrayUtils.reverse(floatArray0, (-962), 2154);
      assertArrayEquals(new float[] {(-904.0746F), (-904.0746F), (-904.0746F)}, floatArray0, 0.01F);
      assertEquals(3, floatArray0.length);
      
      short[] shortArray0 = new short[6];
      shortArray0[1] = (short)76;
      shortArray0[2] = (short)0;
      shortArray0[3] = (short) (-2399);
      shortArray0[4] = (short)2;
      shortArray0[5] = (short)8856;
      ArrayUtils.swap(shortArray0, (int) (short)0, (int) (short)0);
      assertArrayEquals(new short[] {(short)0, (short)76, (short)0, (short) (-2399), (short)2, (short)8856}, shortArray0);
      assertEquals(6, shortArray0.length);
      
      long[] longArray0 = new long[5];
      longArray0[0] = (long) (short)8856;
      longArray0[1] = (long) (short)8856;
      longArray0[2] = 4695L;
      longArray0[3] = (long) (short) (-2399);
      longArray0[4] = (long) (short)76;
      ArrayUtils.reverse(longArray0, (-1), (int) (short) (-626));
      assertArrayEquals(new long[] {8856L, 8856L, 4695L, (-2399L), 76L}, longArray0);
      assertEquals(5, longArray0.length);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)51;
      byteArray0[1] = (byte)115;
      byteArray0[2] = (byte) (-107);
      byteArray0[3] = (byte)49;
      byteArray0[4] = (byte) (-1);
      byteArray0[5] = (byte)89;
      byteArray0[6] = (byte) (-101);
      boolean boolean0 = ArrayUtils.isSameLength(byteArray0, byteArray0);
      assertArrayEquals(new byte[] {(byte)51, (byte)115, (byte) (-107), (byte)49, (byte) (-1), (byte)89, (byte) (-101)}, byteArray0);
      assertEquals(7, byteArray0.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0719()  throws Throwable  {
      Object[] objectArray0 = new Object[5];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      objectArray0[2] = object1;
      int[] intArray0 = new int[7];
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object) null, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0720()  throws Throwable  {
      Object[] objectArray0 = new Object[5];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      Object object1 = ArrayUtils.get(objectArray0, (int) 560, (Object) "");
      assertEquals(5, objectArray0.length);
      assertNotNull(object1);
      assertEquals("", object1);
      
      objectArray0[1] = (Object) "";
      Object object2 = new Object();
      assertFalse(object2.equals((Object)object0));
      assertNotNull(object2);
      
      objectArray0[2] = object2;
      int[] intArray0 = new int[7];
      intArray0[0] = (int) (short)560;
      intArray0[1] = (int) (short)560;
      intArray0[2] = (int) (short)560;
      intArray0[3] = (int) (short)560;
      intArray0[4] = (int) (short)560;
      intArray0[5] = (int) (short)560;
      intArray0[6] = (int) (short)560;
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object) null, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 560, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0721()  throws Throwable  {
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short)541;
      shortArray0[1] = (short)70;
      shortArray0[2] = (short)320;
      shortArray0[3] = (short) (-3080);
      shortArray0[4] = (short) (-1);
      shortArray0[5] = (short) (-23682);
      shortArray0[6] = (short) (-23682);
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertArrayEquals(new short[] {(short)541, (short)70, (short)320, (short) (-3080), (short) (-1), (short) (-23682), (short) (-23682)}, shortArray0);
      assertEquals(7, shortArray0.length);
      assertEquals(7, shortArray1.length);
      assertNotNull(shortArray1);
  }

  @Test(timeout = 4000)
  public void test0722()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      int int0 = ArrayUtils.indexOf(intArray0, 0, 0);
      assertArrayEquals(new int[] {0}, intArray0);
      assertEquals(1, intArray0.length);
      assertEquals(0, int0);
      
      String string0 = ArrayUtils.toString((Object) "");
      assertNotNull(string0);
      assertEquals("", string0);
      
      int[] intArray1 = ArrayUtils.subarray(intArray0, (-127), 0);
      assertArrayEquals(new int[] {0}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(1, intArray0.length);
      assertEquals(0, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      
      char[] charArray0 = new char[3];
      charArray0[0] = 'p';
      charArray0[1] = 'Y';
      charArray0[2] = '|';
      char[] charArray1 = ArrayUtils.add(charArray0, '|');
      assertArrayEquals(new char[] {'p', 'Y', '|'}, charArray0);
      assertArrayEquals(new char[] {'p', 'Y', '|', '|'}, charArray1);
      assertEquals(3, charArray0.length);
      assertEquals(4, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      
      boolean boolean0 = ArrayUtils.contains(intArray1, 955);
      assertArrayEquals(new int[] {0}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(1, intArray0.length);
      assertEquals(0, intArray1.length);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.getLength("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test0723()  throws Throwable  {
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)560;
      shortArray0[1] = (short)0;
      shortArray0[2] = (short)1545;
      shortArray0[3] = (short) (-4027);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-46);
      ArrayUtils.shift(byteArray0, 88);
      assertArrayEquals(new byte[] {(byte) (-46)}, byteArray0);
      assertEquals(1, byteArray0.length);
      
      char[] charArray0 = new char[3];
      charArray0[0] = '{';
      charArray0[1] = '/';
      charArray0[2] = '(';
      short[] shortArray1 = ArrayUtils.removeAllOccurences(shortArray0, (short)1964);
      assertArrayEquals(new short[] {(short)560, (short)0, (short)1545, (short) (-4027)}, shortArray0);
      assertArrayEquals(new short[] {(short)560, (short)0, (short)1545, (short) (-4027)}, shortArray1);
      assertEquals(4, shortArray0.length);
      assertEquals(4, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) (short)560;
      longArray0[1] = (long) '/';
      ArrayUtils.shuffle(longArray0);
      assertArrayEquals(new long[] {47L, 560L}, longArray0);
      assertEquals(2, longArray0.length);
      
      byte[] byteArray1 = ArrayUtils.add(byteArray0, (byte) (-47));
      assertArrayEquals(new byte[] {(byte) (-46), (byte) (-47)}, byteArray1);
      assertArrayEquals(new byte[] {(byte) (-46)}, byteArray0);
      assertEquals(2, byteArray1.length);
      assertEquals(1, byteArray0.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotNull(byteArray1);
  }

  @Test(timeout = 4000)
  public void test0724()  throws Throwable  {
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short) (-1);
      shortArray0[1] = (short)43;
      char[] charArray0 = new char[7];
      charArray0[0] = '2';
      charArray0[1] = '0';
      charArray0[2] = '0';
      charArray0[3] = '0';
      charArray0[4] = '0';
      charArray0[5] = '0';
      charArray0[6] = '0';
      char[] charArray1 = ArrayUtils.removeElement(charArray0, ' ');
      assertArrayEquals(new char[] {'2', '0', '0', '0', '0', '0', '0'}, charArray0);
      assertArrayEquals(new char[] {'2', '0', '0', '0', '0', '0', '0'}, charArray1);
      assertEquals(7, charArray0.length);
      assertEquals(7, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      
      float[] floatArray0 = new float[0];
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray0, 1.0F);
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
      assertNotNull(bitSet0);
      
      int[] intArray0 = new int[7];
      intArray0[0] = (int) '0';
      intArray0[1] = (int) '0';
      intArray0[2] = (int) (short) (-1);
      intArray0[3] = (int) (short)43;
      intArray0[4] = (int) '0';
      intArray0[5] = (int) '0';
      intArray0[6] = (int) '2';
      int[] intArray1 = ArrayUtils.subarray(intArray0, (-2139492357), 43);
      assertArrayEquals(new int[] {48, 48, (-1), 43, 48, 48, 50}, intArray1);
      assertArrayEquals(new int[] {48, 48, (-1), 43, 48, 48, 50}, intArray0);
      assertEquals(7, intArray1.length);
      assertEquals(7, intArray0.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
      assertNotNull(intArray1);
  }

  @Test(timeout = 4000)
  public void test0725()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byte[] byteArray1 = ArrayUtils.removeAllOccurences(byteArray0, (byte) (-85));
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray1);
      assertEquals(5, byteArray0.length);
      assertEquals(5, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      
      byte[] byteArray2 = ArrayUtils.subarray(byteArray1, (int) (byte) (-85), (int) (byte) (-85));
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray1);
      assertArrayEquals(new byte[] {}, byteArray2);
      assertEquals(5, byteArray0.length);
      assertEquals(5, byteArray1.length);
      assertEquals(0, byteArray2.length);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      assertNotNull(byteArray2);
      
      byte[] byteArray3 = ArrayUtils.addAll(byteArray2, byteArray2);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray1);
      assertArrayEquals(new byte[] {}, byteArray2);
      assertArrayEquals(new byte[] {}, byteArray3);
      assertEquals(5, byteArray0.length);
      assertEquals(5, byteArray1.length);
      assertEquals(0, byteArray2.length);
      assertEquals(0, byteArray3.length);
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray1.equals((Object)byteArray2));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray3.equals((Object)byteArray1));
      assertFalse(byteArray3.equals((Object)byteArray0));
      assertFalse(byteArray3.equals((Object)byteArray2));
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray3);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray1, byteArray3);
      assertNotSame(byteArray2, byteArray3);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray3, byteArray1);
      assertNotSame(byteArray3, byteArray0);
      assertNotSame(byteArray3, byteArray2);
      assertNotNull(byteArray3);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (byte) (-85);
      doubleArray0[1] = (double) (byte) (-85);
      doubleArray0[2] = (double) (byte) (-85);
      doubleArray0[3] = (double) (byte) (-85);
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, 0.0, (-2858), (-85.0));
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertArrayEquals(new double[] {(-85.0), (-85.0), (-85.0), (-85.0)}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      assertNotNull(bitSet0);
      
      char[] charArray0 = new char[1];
      charArray0[0] = '#';
      // Undeclared exception!
      try { 
        ArrayUtils.add(charArray0, (-2858), '#');
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -2858, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0726()  throws Throwable  {
      Byte[] byteArray0 = new Byte[2];
      Byte byte0 = new Byte((byte)51);
      assertNotNull(byte0);
      assertEquals((byte)51, (byte)byte0);
      
      byteArray0[0] = byte0;
      Byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0);
      assertEquals(2, byteArray0.length);
      assertEquals(2, byteArray1.length);
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      
      boolean boolean0 = ArrayUtils.contains((short[]) null, (short)202);
      assertFalse(boolean0);
      
      char[] charArray0 = new char[2];
      charArray0[0] = '.';
      charArray0[1] = 'L';
      ArrayUtils.reverse(charArray0, (int) (byte)51, (int) (byte)51);
      assertArrayEquals(new char[] {'.', 'L'}, charArray0);
      assertEquals(2, charArray0.length);
      
      Long long0 = new Long((byte)51);
      assertNotNull(long0);
      assertEquals(51L, (long)long0);
      
      Boolean boolean1 = Boolean.TRUE;
      assertFalse(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      assertTrue(boolean1);
      
      boolean[] booleanArray0 = ArrayUtils.toPrimitive((Boolean[]) null);
      assertNull(booleanArray0);
  }

  @Test(timeout = 4000)
  public void test0727()  throws Throwable  {
      Boolean[] booleanArray0 = new Boolean[1];
      Boolean boolean0 = new Boolean("5ltrG&Z");
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      booleanArray0[0] = boolean0;
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray1));
      assertEquals(1, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertNotNull(booleanArray1);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)2;
      int int0 = ArrayUtils.indexOf(shortArray0, (short) (-1), (int) (short)7);
      assertArrayEquals(new short[] {(short)2}, shortArray0);
      assertEquals(1, shortArray0.length);
      assertEquals((-1), int0);
      
      int int1 = ArrayUtils.lastIndexOf(booleanArray1, true, (int) (short)7);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray1));
      assertEquals(1, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test0728()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      long[] longArray0 = new long[0];
      ArrayUtils.swap(longArray0, 1383, 1383);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      BitSet bitSet0 = ArrayUtils.indexesOf(byteArray0, (byte)9);
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      assertEquals(2, byteArray0.length);
      assertNotNull(bitSet0);
  }

  @Test(timeout = 4000)
  public void test0729()  throws Throwable  {
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)560;
      shortArray0[1] = (short)0;
      shortArray0[2] = (short)1545;
      shortArray0[3] = (short) (-4027);
      short[] shortArray1 = ArrayUtils.add(shortArray0, (short)0);
      assertArrayEquals(new short[] {(short)560, (short)0, (short)1545, (short) (-4027)}, shortArray0);
      assertArrayEquals(new short[] {(short)560, (short)0, (short)1545, (short) (-4027), (short)0}, shortArray1);
      assertEquals(4, shortArray0.length);
      assertEquals(5, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) (short)1545;
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)123;
      byteArray0[1] = (byte) (-46);
      byteArray0[2] = (byte)123;
      byteArray0[3] = (byte) (-46);
      byteArray0[4] = (byte) (-46);
      byteArray0[5] = (byte) (-46);
      byteArray0[6] = (byte)122;
      byteArray0[7] = (byte)89;
      ArrayUtils.shift(byteArray0, (int) (short)0);
      assertArrayEquals(new byte[] {(byte)123, (byte) (-46), (byte)123, (byte) (-46), (byte) (-46), (byte) (-46), (byte)122, (byte)89}, byteArray0);
      assertEquals(8, byteArray0.length);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (byte)122;
      doubleArray0[1] = (double) (short) (-4027);
      doubleArray0[2] = (double) (byte)123;
      doubleArray0[3] = (double) (byte)89;
      doubleArray0[4] = (double) (byte) (-46);
      double[] doubleArray1 = ArrayUtils.clone(doubleArray0);
      assertArrayEquals(new double[] {122.0, (-4027.0), 123.0, 89.0, (-46.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {122.0, (-4027.0), 123.0, 89.0, (-46.0)}, doubleArray1, 0.01);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) (byte)89;
      int[] intArray0 = new int[0];
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(objectArray0[0], intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test0730()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      int int0 = mockRandom0.nextInt();
      assertEquals(0, int0);
      
      LongStream longStream0 = mockRandom0.longs();
      assertNotNull(longStream0);
      
      long long0 = mockRandom0.nextLong();
      assertEquals(1L, long0);
      
      long[] longArray0 = new long[0];
      ArrayUtils.shuffle(longArray0, (Random) mockRandom0);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test0731()  throws Throwable  {
      long[] longArray0 = new long[3];
      longArray0[2] = (long) 0;
      ArrayUtils.shift(longArray0, 0);
      assertArrayEquals(new long[] {0L, 0L, 0L}, longArray0);
      assertEquals(3, longArray0.length);
      
      boolean boolean0 = ArrayUtils.isSameLength((char[]) null, (char[]) null);
      assertTrue(boolean0);
      
      MockRandom mockRandom0 = new MockRandom(1L);
      assertNotNull(mockRandom0);
      
      long long0 = mockRandom0.nextLong();
      assertEquals(0L, long0);
      
      int int0 = mockRandom0.nextInt();
      assertEquals(1, int0);
      
      LongStream longStream0 = mockRandom0.longs();
      assertNotNull(longStream0);
      
      ArrayUtils.shuffle(longArray0, (Random) mockRandom0);
      assertArrayEquals(new long[] {0L, 0L, 0L}, longArray0);
      assertEquals(3, longArray0.length);
      
      char[] charArray0 = ArrayUtils.removeAllOccurences((char[]) null, 'X');
      assertNull(charArray0);
  }

  @Test(timeout = 4000)
  public void test0732()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (-1);
      shortArray0[1] = (short) (-1);
      short[] shortArray1 = ArrayUtils.removeAllOccurences(shortArray0, (short) (-1));
      assertArrayEquals(new short[] {(short) (-1), (short) (-1)}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertEquals(2, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      
      // Undeclared exception!
      try { 
        ArrayUtils.shuffle((long[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0733()  throws Throwable  {
      long[] longArray0 = new long[4];
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = null;
      int int0 = ArrayUtils.indexOf(objectArray0, (Object) null);
      assertEquals(1, objectArray0.length);
      assertEquals(0, int0);
      
      ArrayUtils.swap(objectArray0, 0, 2, 0);
      assertEquals(1, objectArray0.length);
      
      boolean boolean0 = ArrayUtils.isSameLength(objectArray0, objectArray0);
      assertEquals(1, objectArray0.length);
      assertTrue(boolean0);
      
      long[] longArray1 = ArrayUtils.addAll(longArray0, longArray0);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L}, longArray0);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L}, longArray1);
      assertEquals(4, longArray0.length);
      assertEquals(8, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
      
      ArrayUtils.reverse(objectArray0);
      assertEquals(1, objectArray0.length);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-367.6);
      doubleArray0[1] = (double) 350;
      doubleArray0[2] = (double) 2;
      double[] doubleArray1 = ArrayUtils.subarray(doubleArray0, (-214), 0);
      assertArrayEquals(new double[] {(-367.6), 350.0, 2.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
  }

  @Test(timeout = 4000)
  public void test0734()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[2] = 1.0;
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[1] = true;
      char[] charArray0 = new char[2];
      charArray0[0] = 'a';
      charArray0[1] = '\"';
      char[] charArray1 = ArrayUtils.removeAllOccurences(charArray0, ')');
      assertArrayEquals(new char[] {'a', '\"'}, charArray0);
      assertArrayEquals(new char[] {'a', '\"'}, charArray1);
      assertEquals(2, charArray0.length);
      assertEquals(2, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      
      char[] charArray2 = ArrayUtils.nullToEmpty(charArray0);
      assertArrayEquals(new char[] {'a', '\"'}, charArray0);
      assertArrayEquals(new char[] {'a', '\"'}, charArray2);
      assertEquals(2, charArray0.length);
      assertEquals(2, charArray2.length);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray2.equals((Object)charArray1));
      assertSame(charArray0, charArray2);
      assertNotSame(charArray0, charArray1);
      assertSame(charArray2, charArray0);
      assertNotSame(charArray2, charArray1);
      assertNotNull(charArray2);
      
      int[] intArray0 = new int[2];
      intArray0[0] = (int) '\"';
      intArray0[1] = (int) 'a';
      ArrayUtils.swap(intArray0, (-1), 97);
      assertArrayEquals(new int[] {34, 97}, intArray0);
      assertEquals(2, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test0735()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byte[] byteArray1 = ArrayUtils.removeAllOccurences(byteArray0, (byte) (-85));
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray1);
      assertEquals(5, byteArray0.length);
      assertEquals(5, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((double[]) null, 1386.32656, (-32));
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertNotNull(bitSet0);
      
      ArrayUtils.swap(byteArray0, (-2111), (-2111), (-2111));
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(5, byteArray0.length);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertNotSame(byteArray0, byteArray1);
  }

  @Test(timeout = 4000)
  public void test0736()  throws Throwable  {
      float[] floatArray0 = new float[3];
      floatArray0[0] = Float.NaN;
      floatArray0[1] = Float.NaN;
      floatArray0[2] = Float.NaN;
      boolean boolean0 = ArrayUtils.isSameLength(floatArray0, floatArray0);
      assertArrayEquals(new float[] {Float.NaN, Float.NaN, Float.NaN}, floatArray0, 0.01F);
      assertEquals(3, floatArray0.length);
      assertTrue(boolean0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((byte[]) null, (byte) (-111), (int) (byte) (-111));
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertNotNull(bitSet0);
      
      boolean boolean1 = ArrayUtils.contains((byte[]) null, (byte) (-125));
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      short[] shortArray0 = ArrayUtils.addFirst((short[]) null, (short) (byte) (-125));
      assertArrayEquals(new short[] {(short) (-125)}, shortArray0);
      assertEquals(1, shortArray0.length);
      assertNotNull(shortArray0);
  }

  @Test(timeout = 4000)
  public void test0737()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, 12, 12);
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertEquals(3, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      
      long[] longArray0 = new long[4];
      longArray0[0] = (long) 12;
      longArray0[1] = (long) 12;
      longArray0[2] = (long) 12;
      longArray0[3] = (long) 12;
      int int0 = ArrayUtils.indexOf(longArray0, 12L);
      assertArrayEquals(new long[] {12L, 12L, 12L, 12L}, longArray0);
      assertEquals(4, longArray0.length);
      assertEquals(0, int0);
      
      Character[] characterArray0 = new Character[9];
      char char0 = 'g';
      Character character0 = Character.valueOf('g');
      assertNotNull(character0);
      assertEquals('g', (char)character0);
      
      characterArray0[0] = character0;
      Character character1 = Character.valueOf('g');
      assertNotNull(character1);
      assertEquals('g', (char)character1);
      
      characterArray0[1] = character1;
      Character character2 = new Character('\"');
      assertFalse(character2.equals((Object)character1));
      assertFalse(character2.equals((Object)char0));
      assertFalse(character2.equals((Object)character0));
      assertNotNull(character2);
      assertEquals('\"', (char)character2);
      
      characterArray0[2] = character2;
      Character character3 = Character.valueOf(char0);
      assertFalse(character3.equals((Object)character2));
      assertNotNull(character3);
      assertEquals('g', (char)character3);
      
      characterArray0[3] = character3;
      Character character4 = Character.valueOf(char0);
      assertFalse(character4.equals((Object)character2));
      assertNotNull(character4);
      assertEquals('g', (char)character4);
      
      characterArray0[4] = character4;
      Character character5 = new Character('*');
      assertFalse(character5.equals((Object)character1));
      assertFalse(character5.equals((Object)character4));
      assertFalse(character5.equals((Object)character3));
      assertFalse(character5.equals((Object)character2));
      assertFalse(character5.equals((Object)char0));
      assertFalse(character5.equals((Object)character0));
      assertNotNull(character5);
      assertEquals('*', (char)character5);
      
      characterArray0[5] = character5;
      Character character6 = new Character(char0);
      assertTrue(character6.equals((Object)character4));
      assertFalse(character6.equals((Object)character2));
      assertTrue(character6.equals((Object)character1));
      assertFalse(character6.equals((Object)character5));
      assertTrue(character6.equals((Object)char0));
      assertTrue(character6.equals((Object)character0));
      assertTrue(character6.equals((Object)character3));
      assertNotNull(character6);
      assertEquals('g', (char)character6);
      
      characterArray0[6] = character6;
      Character character7 = Character.valueOf(char0);
      assertFalse(character7.equals((Object)character2));
      assertTrue(character7.equals((Object)character6));
      assertFalse(character7.equals((Object)character5));
      assertNotNull(character7);
      assertEquals('g', (char)character7);
      
      characterArray0[7] = character7;
      Character character8 = Character.valueOf('g');
      assertFalse(character8.equals((Object)character2));
      assertTrue(character8.equals((Object)character6));
      assertFalse(character8.equals((Object)character5));
      assertNotNull(character8);
      assertEquals('g', (char)character8);
      
      characterArray0[8] = character8;
      // Undeclared exception!
      try { 
        ArrayUtils.isSorted(characterArray0, (Comparator<Character>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Comparator should not be null.
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0738()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)17;
      long[] longArray0 = new long[8];
      longArray0[4] = 0L;
      longArray0[1] = 0L;
      longArray0[2] = 0L;
      longArray0[3] = 0L;
      longArray0[4] = (-283L);
      longArray0[5] = 2226L;
      longArray0[6] = 0L;
      longArray0[7] = (-158L);
      long[] longArray1 = ArrayUtils.removeAllOccurrences(longArray0, 0L);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, (-283L), 2226L, 0L, (-158L)}, longArray0);
      assertArrayEquals(new long[] {(-283L), 2226L, (-158L)}, longArray1);
      assertEquals(8, longArray0.length);
      assertEquals(3, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
      
      ArrayUtils.reverse(byteArray0, 127, 15);
      assertArrayEquals(new byte[] {(byte)17, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(5, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test0739()  throws Throwable  {
      float[] floatArray0 = new float[0];
      ArrayUtils.reverse(floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
      
      Byte byte0 = new Byte((byte)0);
      assertNotNull(byte0);
      assertEquals((byte)0, (byte)byte0);
      
      Byte byte1 = new Byte((byte)0);
      assertTrue(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      assertEquals((byte)0, (byte)byte1);
      
      Byte byte2 = new Byte((byte) (-75));
      assertFalse(byte2.equals((Object)byte0));
      assertFalse(byte2.equals((Object)byte1));
      assertNotNull(byte2);
      assertEquals((byte) (-75), (byte)byte2);
      
      Byte byte3 = new Byte((byte)43);
      assertFalse(byte3.equals((Object)byte2));
      assertFalse(byte3.equals((Object)byte0));
      assertFalse(byte3.equals((Object)byte1));
      assertNotNull(byte3);
      assertEquals((byte)43, (byte)byte3);
      
      Byte byte4 = new Byte((byte)15);
      assertFalse(byte4.equals((Object)byte0));
      assertFalse(byte4.equals((Object)byte1));
      assertFalse(byte4.equals((Object)byte2));
      assertFalse(byte4.equals((Object)byte3));
      assertNotNull(byte4);
      assertEquals((byte)15, (byte)byte4);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)43;
      int int0 = ArrayUtils.indexOf(byteArray0, (byte) (-75), 83);
      assertArrayEquals(new byte[] {(byte)43}, byteArray0);
      assertEquals(1, byteArray0.length);
      assertEquals((-1), int0);
      
      char[] charArray0 = ArrayUtils.addAll((char[]) null, (char[]) null);
      assertNull(charArray0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.add(floatArray0, (-1), (float) (-1));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0740()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)5;
      byteArray0[1] = (byte)99;
      byteArray0[2] = (byte)5;
      byte[] byteArray1 = ArrayUtils.removeElement(byteArray0, (byte) (-108));
      assertArrayEquals(new byte[] {(byte)5, (byte)99, (byte)5}, byteArray0);
      assertArrayEquals(new byte[] {(byte)5, (byte)99, (byte)5}, byteArray1);
      assertEquals(3, byteArray0.length);
      assertEquals(3, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      
      char[] charArray0 = new char[0];
      char[] charArray1 = ArrayUtils.removeElement(charArray0, '*');
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      
      Byte[] byteArray2 = new Byte[0];
      boolean boolean0 = ArrayUtils.isArrayIndexValid(byteArray2, (int) 5);
      assertEquals(0, byteArray2.length);
      assertFalse(boolean0);
      
      char[] charArray2 = ArrayUtils.addAll(charArray1, charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertArrayEquals(new char[] {}, charArray2);
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      assertEquals(0, charArray2.length);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray1));
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray0, charArray2);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray1, charArray2);
      assertNotSame(charArray2, charArray0);
      assertNotSame(charArray2, charArray1);
      assertNotNull(charArray2);
      
      org.evosuite.runtime.Random.setNextRandom((-2223));
      String[] stringArray0 = ArrayUtils.toStringArray((Object[]) byteArray2);
      assertEquals(0, byteArray2.length);
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      ArrayUtils.reverse((Object[]) byteArray2);
      assertEquals(0, byteArray2.length);
  }

  @Test(timeout = 4000)
  public void test0741()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      int[] intArray0 = new int[1];
      intArray0[0] = 2474;
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((long[]) null, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2474, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0742()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)79;
      byteArray0[2] = (byte) (-22);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)2;
      float[] floatArray0 = new float[0];
      float[] floatArray1 = ArrayUtils.addFirst(floatArray0, (float) (byte) (-118));
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-118.0F)}, floatArray1, 0.01F);
      assertEquals(0, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      
      short[] shortArray0 = new short[0];
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertNotNull(shortArray1);
      
      float[] floatArray2 = ArrayUtils.add(floatArray1, (float) (byte)1);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-118.0F)}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {(-118.0F), 1.0F}, floatArray2, 0.01F);
      assertEquals(0, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertEquals(2, floatArray2.length);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertNotSame(floatArray0, floatArray2);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray1, floatArray2);
      assertNotSame(floatArray2, floatArray1);
      assertNotSame(floatArray2, floatArray0);
      assertNotNull(floatArray2);
      
      ArrayUtils.swap((Object[]) shortArray1, (int) (byte) (-22), (int) (byte)2, 0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      
      char[] charArray0 = new char[4];
      charArray0[0] = '.';
      charArray0[1] = 'U';
      charArray0[2] = '>';
      charArray0[3] = 'p';
      ArrayUtils.reverse(charArray0);
      assertArrayEquals(new char[] {'p', '>', 'U', '.'}, charArray0);
      assertEquals(4, charArray0.length);
      
      int int0 = ArrayUtils.indexOf(floatArray1, (float) 0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-118.0F)}, floatArray1, 0.01F);
      assertEquals(0, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertFalse(floatArray0.equals((Object)floatArray2));
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertFalse(floatArray1.equals((Object)floatArray2));
      assertNotSame(floatArray0, floatArray2);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray1, floatArray2);
      assertEquals((-1), int0);
      
      char[] charArray1 = ArrayUtils.addAll(charArray0, charArray0);
      assertArrayEquals(new char[] {'p', '>', 'U', '.', 'p', '>', 'U', '.'}, charArray1);
      assertArrayEquals(new char[] {'p', '>', 'U', '.'}, charArray0);
      assertEquals(8, charArray1.length);
      assertEquals(4, charArray0.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray0, charArray1);
      assertNotNull(charArray1);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) 'U';
      int[] intArray0 = new int[7];
      intArray0[0] = (int) 'p';
      intArray0[1] = (-1);
      intArray0[2] = (int) 'p';
      intArray0[3] = (int) (byte)1;
      intArray0[4] = 2929;
      intArray0[5] = (-1);
      intArray0[6] = (int) (byte)79;
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(longArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2929, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0743()  throws Throwable  {
      float[] floatArray0 = new float[7];
      floatArray0[0] = 941.88F;
      floatArray0[1] = (-1.0F);
      floatArray0[2] = 0.0F;
      floatArray0[3] = 1.0F;
      floatArray0[4] = 51.27F;
      floatArray0[5] = 2768.5557F;
      floatArray0[6] = 0.0F;
      float[] floatArray1 = ArrayUtils.removeAllOccurences(floatArray0, (-2548.0F));
      assertArrayEquals(new float[] {941.88F, (-1.0F), 0.0F, 1.0F, 51.27F, 2768.5557F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {941.88F, (-1.0F), 0.0F, 1.0F, 51.27F, 2768.5557F, 0.0F}, floatArray1, 0.01F);
      assertEquals(7, floatArray0.length);
      assertEquals(7, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) 0.0F;
      objectArray0[1] = (Object) (-1.0F);
      Boolean boolean0 = Boolean.valueOf("");
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (-1909L);
      Long[] longArray1 = ArrayUtils.toObject(longArray0);
      assertArrayEquals(new long[] {(-1909L)}, longArray0);
      assertEquals(1, longArray0.length);
      assertEquals(1, longArray1.length);
      assertNotNull(longArray1);
      
      char[] charArray0 = new char[5];
      charArray0[0] = ')';
      charArray0[1] = ')';
      charArray0[2] = 'F';
      charArray0[3] = 'F';
      charArray0[4] = ')';
      char[] charArray1 = ArrayUtils.subarray(charArray0, 0, 0);
      assertArrayEquals(new char[] {')', ')', 'F', 'F', ')'}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertEquals(5, charArray0.length);
      assertEquals(0, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
  }

  @Test(timeout = 4000)
  public void test0744()  throws Throwable  {
      boolean[] booleanArray0 = ArrayUtils.removeElement((boolean[]) null, true);
      assertNull(booleanArray0);
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = (-1.0F);
      floatArray0[1] = (-948.4F);
      floatArray0[2] = 603.53064F;
      floatArray0[3] = (-928.0F);
      floatArray0[4] = 389.71835F;
      floatArray0[5] = (-1647.477F);
      floatArray0[6] = Float.NaN;
      boolean boolean0 = ArrayUtils.isSameLength(floatArray0, floatArray0);
      assertArrayEquals(new float[] {(-1.0F), (-948.4F), 603.53064F, (-928.0F), 389.71835F, (-1647.477F), Float.NaN}, floatArray0, 0.01F);
      assertEquals(7, floatArray0.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0745()  throws Throwable  {
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)76;
      shortArray0[1] = (short)76;
      shortArray0[2] = (short)24782;
      shortArray0[3] = (short)76;
      int int0 = ArrayUtils.indexOf(shortArray0, (short)24782, (int) (short)7);
      assertArrayEquals(new short[] {(short)76, (short)76, (short)24782, (short)76}, shortArray0);
      assertEquals(4, shortArray0.length);
      assertEquals((-1), int0);
      
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      int int1 = ArrayUtils.lastIndexOf(booleanArray0, false, (-1));
      assertTrue(Arrays.equals(new boolean[] {false, true, false, false, false}, booleanArray0));
      assertEquals(5, booleanArray0.length);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-753.999286031);
      doubleArray0[1] = (double) (short)76;
      doubleArray0[2] = (double) 2;
      doubleArray0[2] = (double) (-1);
      doubleArray0[4] = (double) (-1);
      doubleArray0[5] = (double) (short)24782;
      doubleArray0[6] = (double) (-1);
      doubleArray0[7] = (double) (short)7;
      int int2 = ArrayUtils.lastIndexOf(doubleArray0, (-1.0), (int) (short)24782);
      assertArrayEquals(new double[] {(-753.999286031), 76.0, (-1.0), 0.0, (-1.0), 24782.0, (-1.0), 7.0}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(6, int2);
      
      Integer[] integerArray0 = new Integer[1];
      Integer integer0 = new Integer((short)24782);
      assertFalse(integer0.equals((Object)int1));
      assertFalse(integer0.equals((Object)int0));
      assertFalse(integer0.equals((Object)int2));
      assertNotNull(integer0);
      assertEquals(24782, (int)integer0);
      
      integerArray0[0] = integer0;
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0);
      assertArrayEquals(new int[] {24782}, intArray0);
      assertEquals(1, integerArray0.length);
      assertEquals(1, intArray0.length);
      assertNotNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test0746()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray1);
      assertEquals(8, byteArray0.length);
      assertEquals(8, byteArray1.length);
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      IntStream intStream0 = mockRandom0.ints(2956L);
      assertNotNull(intStream0);
      
      int int0 = mockRandom0.nextInt();
      assertEquals(0, int0);
      
      int[] intArray0 = new int[6];
      mockRandom0.nextBytes(byteArray1);
      assertArrayEquals(new byte[] {(byte)1, (byte)0, (byte)0, (byte)0, (byte)2, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)1, (byte)0, (byte)0, (byte)0, (byte)2, (byte)0, (byte)0, (byte)0}, byteArray1);
      assertEquals(8, byteArray0.length);
      assertEquals(8, byteArray1.length);
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray1, byteArray0);
      
      intArray0[0] = (-1);
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 1490;
      intArray0[5] = 0;
      boolean boolean0 = ArrayUtils.contains(intArray0, 78);
      assertArrayEquals(new int[] {(-1), 0, 0, 0, 1490, 0}, intArray0);
      assertEquals(6, intArray0.length);
      assertFalse(boolean0);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) 0;
      floatArray0[1] = (float) 78;
      float float0 = mockRandom0.nextFloat();
      assertEquals(0.3F, float0, 0.01F);
      
      floatArray0[2] = (float) (-1);
      floatArray0[3] = (float) 78;
      floatArray0[4] = (float) 2956L;
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      int int1 = ArrayUtils.indexOf(booleanArray0, true, (-1));
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray0));
      assertEquals(3, booleanArray0.length);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      Short short0 = new Short((short)7);
      assertNotNull(short0);
      assertEquals((short)7, (short)short0);
      
      Short short1 = new Short((short)3511);
      assertFalse(short1.equals((Object)short0));
      assertNotNull(short1);
      assertEquals((short)3511, (short)short1);
      
      ArrayUtils.shift((double[]) null, 78, (-1840), (-127));
  }

  @Test(timeout = 4000)
  public void test0747()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 781;
      ArrayUtils.swap(doubleArray0, Integer.MAX_VALUE, Integer.MAX_VALUE, Integer.MAX_VALUE);
      assertArrayEquals(new double[] {781.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      long[] longArray0 = new long[2];
      longArray0[1] = (long) 781;
      long[] longArray1 = ArrayUtils.removeElements(longArray0, longArray0);
      assertArrayEquals(new long[] {0L, 781L}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertEquals(2, longArray0.length);
      assertEquals(0, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      boolean[] booleanArray1 = ArrayUtils.clone(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray1));
      assertEquals(1, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      
      MutableInt mutableInt0 = new MutableInt();
      assertEquals((byte)0, mutableInt0.byteValue());
      assertEquals(0, (int)mutableInt0.toInteger());
      assertEquals(0.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals("0", mutableInt0.toString());
      assertEquals(0, (int)mutableInt0.getValue());
      assertEquals(0.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(0L, mutableInt0.longValue());
      assertEquals((short)0, mutableInt0.shortValue());
      assertEquals(0, mutableInt0.intValue());
      assertNotNull(mutableInt0);
      
      String string0 = ArrayUtils.toString((Object) mutableInt0);
      assertEquals((byte)0, mutableInt0.byteValue());
      assertEquals(0, (int)mutableInt0.toInteger());
      assertEquals(0.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals("0", mutableInt0.toString());
      assertEquals(0, (int)mutableInt0.getValue());
      assertEquals(0.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(0L, mutableInt0.longValue());
      assertEquals((short)0, mutableInt0.shortValue());
      assertEquals(0, mutableInt0.intValue());
      assertNotNull(string0);
      assertEquals("0", string0);
  }

  @Test(timeout = 4000)
  public void test0748()  throws Throwable  {
      float[] floatArray0 = new float[5];
      floatArray0[0] = 0.0F;
      floatArray0[1] = 327.0F;
      ArrayUtils.reverse(floatArray0, 70, 288);
      assertArrayEquals(new float[] {0.0F, 327.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(5, floatArray0.length);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      boolean[] booleanArray1 = ArrayUtils.removeElement(booleanArray0, true);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray1));
      assertEquals(2, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-432.842363794);
      doubleArray0[1] = (double) 327.0F;
      doubleArray0[2] = (double) (-2147079799);
      doubleArray0[3] = (double) 0.0F;
      doubleArray0[4] = (double) 327.0F;
      doubleArray0[5] = (double) 70;
      doubleArray0[6] = (double) (-989L);
      doubleArray0[7] = (double) 0.0F;
      doubleArray0[8] = (double) 327.0F;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (double) (-989L), 1080);
      assertArrayEquals(new double[] {(-432.842363794), 327.0, (-2.147079799E9), 0.0, 327.0, 70.0, (-989.0), 0.0, 327.0}, doubleArray0, 0.01);
      assertEquals(9, doubleArray0.length);
      assertEquals(6, int0);
      
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) 0.0;
      objectArray0[1] = (Object) 327.0F;
      objectArray0[2] = (Object) 0.0;
      objectArray0[3] = (Object) (-989.0);
      objectArray0[4] = (Object) 327.0;
      objectArray0[5] = (Object) false;
      objectArray0[6] = (Object) 327.0;
      objectArray0[7] = (Object) 0.0F;
      ArrayUtils.swap(objectArray0, 70, 288, 6);
      assertEquals(8, objectArray0.length);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-35);
      byteArray0[1] = (byte)83;
      byteArray0[2] = (byte)32;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-23);
      byteArray0[5] = (byte)54;
      byteArray0[6] = (byte) (-124);
      byteArray0[7] = (byte) (-62);
      byteArray0[8] = (byte)1;
      int int1 = ArrayUtils.indexOf(byteArray0, (byte) (-62));
      assertArrayEquals(new byte[] {(byte) (-35), (byte)83, (byte)32, (byte)0, (byte) (-23), (byte)54, (byte) (-124), (byte) (-62), (byte)1}, byteArray0);
      assertEquals(9, byteArray0.length);
      assertFalse(int1 == int0);
      assertEquals(7, int1);
  }

  @Test(timeout = 4000)
  public void test0749()  throws Throwable  {
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short)1964;
      shortArray0[2] = (short)2151;
      shortArray0[3] = (short)1;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)2;
      byte[] byteArray1 = ArrayUtils.removeAllOccurences(byteArray0, (byte)2);
      assertArrayEquals(new byte[] {(byte)2}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(1, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      
      int[] intArray0 = new int[2];
      intArray0[0] = (-1556);
      intArray0[1] = (int) (short)0;
      int[] intArray1 = ArrayUtils.subarray(intArray0, (-1), (int) (short)1964);
      assertArrayEquals(new int[] {(-1556), 0}, intArray0);
      assertArrayEquals(new int[] {(-1556), 0}, intArray1);
      assertEquals(2, intArray0.length);
      assertEquals(2, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      
      Float float0 = new Float(0.0);
      assertNotNull(float0);
      assertEquals(0.0F, (float)float0, 0.01F);
      
      Float float1 = new Float((-2036.93));
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertNotNull(float1);
      assertEquals((-2036.93F), (float)float1, 0.01F);
      
      Float float2 = new Float((double) (short)2151);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertNotNull(float2);
      assertEquals(2151.0F, (float)float2, 0.01F);
      
      Float[] floatArray0 = new Float[3];
      floatArray0[0] = float2;
      floatArray0[1] = float1;
      floatArray0[2] = float1;
      Float[] floatArray1 = ArrayUtils.nullToEmpty(floatArray0);
      assertEquals(3, floatArray1.length);
      assertEquals(3, floatArray0.length);
      assertSame(floatArray1, floatArray0);
      assertSame(floatArray0, floatArray1);
      assertNotNull(floatArray1);
      
      Character[] characterArray0 = ArrayUtils.nullToEmpty((Character[]) null);
      assertEquals(0, characterArray0.length);
      assertNotNull(characterArray0);
  }

  @Test(timeout = 4000)
  public void test0750()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      BitSet bitSet0 = ArrayUtils.indexesOf((short[]) null, (short)2366, 1114111);
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertNotNull(bitSet0);
      
      MockRandom mockRandom0 = new MockRandom((short) (-1642));
      assertNotNull(mockRandom0);
      
      int[] intArray0 = new int[7];
      intArray0[0] = (-1769);
      intArray0[1] = 1076;
      intArray0[2] = (int) (byte) (-42);
      intArray0[3] = (int) (short)1382;
      intArray0[4] = 119;
      intArray0[5] = (int) (byte)0;
      intArray0[6] = (int) (byte)0;
      ArrayUtils.shuffle(intArray0, (Random) mockRandom0);
      assertArrayEquals(new int[] {1076, (-42), 1382, 119, 0, 0, (-1769)}, intArray0);
      assertEquals(7, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test0751()  throws Throwable  {
      float[] floatArray0 = new float[2];
      floatArray0[0] = (-1733.7683F);
      long[] longArray0 = new long[3];
      longArray0[0] = (long) 6;
      longArray0[1] = (long) 6;
      longArray0[2] = 1L;
      double[] doubleArray0 = new double[0];
      ArrayUtils.swap(doubleArray0, (-2294), 2146292916, Integer.MAX_VALUE);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      long[] longArray1 = ArrayUtils.removeElements(longArray0, longArray0);
      assertArrayEquals(new long[] {6L, 6L, 1L}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertEquals(3, longArray0.length);
      assertEquals(0, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
  }

  @Test(timeout = 4000)
  public void test0752()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      long[] longArray0 = new long[0];
      long[] longArray1 = ArrayUtils.removeElements(longArray0, longArray0);
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
  }

  @Test(timeout = 4000)
  public void test0753()  throws Throwable  {
      Long[] longArray0 = new Long[9];
      Long long0 = new Long((-2009L));
      assertNotNull(long0);
      assertEquals((-2009L), (long)long0);
      
      Long long1 = new Long((-1353L));
      assertFalse(long1.equals((Object)long0));
      assertNotNull(long1);
      assertEquals((-1353L), (long)long1);
      
      Long long2 = new Long(0L);
      assertFalse(long2.equals((Object)long0));
      assertFalse(long2.equals((Object)long1));
      assertNotNull(long2);
      assertEquals(0L, (long)long2);
      
      Long long3 = new Long(0L);
      assertFalse(long3.equals((Object)long1));
      assertTrue(long3.equals((Object)long2));
      assertFalse(long3.equals((Object)long0));
      assertNotNull(long3);
      assertEquals(0L, (long)long3);
      
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0, (-266L));
      assertArrayEquals(new long[] {(-266L), (-266L), (-266L), (-266L), (-266L), (-266L), (-266L), (-266L), (-266L)}, longArray1);
      assertEquals(9, longArray0.length);
      assertEquals(9, longArray1.length);
      assertNotNull(longArray1);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-1437.84830558);
      doubleArray0[1] = (double) (-266L);
      doubleArray0[2] = 869.0225656;
      doubleArray0[3] = (-2087.95723);
      ArrayUtils.swap(doubleArray0, (-1401), 781, 781);
      assertArrayEquals(new double[] {(-1437.84830558), (-266.0), 869.0225656, (-2087.95723)}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      
      long[] longArray2 = ArrayUtils.removeElements(longArray1, longArray1);
      assertArrayEquals(new long[] {(-266L), (-266L), (-266L), (-266L), (-266L), (-266L), (-266L), (-266L), (-266L)}, longArray1);
      assertArrayEquals(new long[] {}, longArray2);
      assertEquals(9, longArray0.length);
      assertEquals(9, longArray1.length);
      assertEquals(0, longArray2.length);
      assertFalse(longArray2.equals((Object)longArray1));
      assertNotSame(longArray1, longArray2);
      assertNotSame(longArray2, longArray1);
      assertNotNull(longArray2);
  }

  @Test(timeout = 4000)
  public void test0754()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte) (-44);
      byteArray0[2] = (byte) (-39);
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (byte) (-44);
      ArrayUtils.shift(shortArray0, (int) (byte) (-39));
      assertArrayEquals(new short[] {(short) (-44)}, shortArray0);
      assertEquals(1, shortArray0.length);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) (byte) (-44);
      longArray0[1] = (long) (byte) (-44);
      int int0 = ArrayUtils.indexOf(longArray0, 1L);
      assertArrayEquals(new long[] {(-44L), (-44L)}, longArray0);
      assertEquals(2, longArray0.length);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0755()  throws Throwable  {
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short)1964;
      shortArray0[2] = (short)2151;
      shortArray0[3] = (short)1;
      shortArray0[4] = (short)1382;
      shortArray0[5] = (short)0;
      shortArray0[6] = (short) (-1642);
      shortArray0[7] = (short)395;
      BitSet bitSet0 = ArrayUtils.indexesOf(shortArray0, (short) (-1642), (int) (short)2151);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertArrayEquals(new short[] {(short)1964, (short)0, (short)2151, (short)1, (short)1382, (short)0, (short) (-1642), (short)395}, shortArray0);
      assertEquals(8, shortArray0.length);
      assertNotNull(bitSet0);
      
      int[] intArray0 = new int[8];
      intArray0[0] = (int) (short)1;
      intArray0[1] = (int) (short) (-1642);
      intArray0[2] = (int) (short)395;
      intArray0[3] = (int) (short)0;
      intArray0[4] = (int) (short) (-1642);
      intArray0[5] = (int) (short)1964;
      intArray0[6] = (int) (short) (-1642);
      intArray0[7] = (int) (short)1964;
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 395;
      doubleArray0[1] = (double) 1964;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (double) (short)1964;
      doubleArray0[4] = (double) (short)0;
      int int0 = ArrayUtils.indexOf(doubleArray0, (double) (short)395, (-2450));
      assertArrayEquals(new double[] {395.0, 1964.0, 0.0, 1964.0, 0.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      assertEquals(0, int0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.add(doubleArray0, 105, 1964.0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 105, Length: 5
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0756()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = 'Y';
      char[] charArray1 = ArrayUtils.add(charArray0, 'Y');
      assertArrayEquals(new char[] {'Y'}, charArray0);
      assertArrayEquals(new char[] {'Y', 'Y'}, charArray1);
      assertEquals(1, charArray0.length);
      assertEquals(2, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      
      int[] intArray0 = new int[7];
      intArray0[0] = (int) 'Y';
      intArray0[1] = 955;
      intArray0[2] = (int) '|';
      intArray0[3] = (int) '|';
      intArray0[4] = (int) 'Y';
      intArray0[5] = (int) 'Y';
      intArray0[6] = 955;
      boolean boolean0 = ArrayUtils.contains(intArray0, 89);
      assertArrayEquals(new int[] {89, 955, 124, 124, 89, 89, 955}, intArray0);
      assertEquals(7, intArray0.length);
      assertTrue(boolean0);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (-2548.0F);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 955;
      doubleArray0[1] = (double) 124;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (-44.0), (double) 955);
      assertArrayEquals(new double[] {955.0, 124.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(1, int0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (double) 124, (-1431));
      assertEquals(2, bitSet0.length());
      assertFalse(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(1, bitSet0.cardinality());
      assertEquals("{1}", bitSet0.toString());
      assertArrayEquals(new double[] {955.0, 124.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      assertNotNull(bitSet0);
  }

  @Test(timeout = 4000)
  public void test0757()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 4026.966708;
      doubleArray0[2] = (-2101.5);
      doubleArray0[2] = 2063.283;
      int int0 = ArrayUtils.indexOf(doubleArray0, 0.0, 0);
      assertArrayEquals(new double[] {4026.966708, 0.0, 2063.283}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(1, int0);
      
      double[] doubleArray1 = ArrayUtils.add(doubleArray0, 1, 1.0);
      assertArrayEquals(new double[] {4026.966708, 0.0, 2063.283}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {4026.966708, 1.0, 0.0, 2063.283}, doubleArray1, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      booleanArray0[4] = true;
      boolean[] booleanArray1 = ArrayUtils.remove(booleanArray0, 0);
      assertTrue(Arrays.equals(new boolean[] {false, true, true, false, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, true, false, true}, booleanArray1));
      assertEquals(5, booleanArray0.length);
      assertEquals(4, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
  }

  @Test(timeout = 4000)
  public void test0758()  throws Throwable  {
      Character[] characterArray0 = new Character[5];
      char char0 = 'K';
      Character character0 = Character.valueOf('K');
      assertNotNull(character0);
      assertEquals('K', (char)character0);
      
      characterArray0[0] = character0;
      Character character1 = Character.valueOf(char0);
      assertNotNull(character1);
      assertEquals('K', (char)character1);
      
      characterArray0[1] = character1;
      Character character2 = Character.valueOf(char0);
      assertNotNull(character2);
      assertEquals('K', (char)character2);
      
      characterArray0[2] = character2;
      Character character3 = new Character(char0);
      assertTrue(character3.equals((Object)character0));
      assertTrue(character3.equals((Object)character2));
      assertTrue(character3.equals((Object)char0));
      assertTrue(character3.equals((Object)character1));
      assertNotNull(character3);
      assertEquals('K', (char)character3);
      
      characterArray0[3] = character3;
      Character character4 = Character.valueOf('v');
      assertFalse(character4.equals((Object)character2));
      assertFalse(character4.equals((Object)character3));
      assertFalse(character4.equals((Object)character0));
      assertFalse(character4.equals((Object)character1));
      assertFalse(character4.equals((Object)char0));
      assertNotNull(character4);
      assertEquals('v', (char)character4);
      
      characterArray0[4] = character4;
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0, 'Q');
      assertArrayEquals(new char[] {'K', 'K', 'K', 'K', 'v'}, charArray0);
      assertEquals(5, characterArray0.length);
      assertEquals(5, charArray0.length);
      assertNotNull(charArray0);
  }

  @Test(timeout = 4000)
  public void test0759()  throws Throwable  {
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short)1964;
      shortArray0[2] = (short)2151;
      shortArray0[3] = (short)1;
      shortArray0[4] = (short)1382;
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      ArrayUtils.reverse(booleanArray0, 65, 3);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false}, booleanArray0));
      assertEquals(6, booleanArray0.length);
      
      double[] doubleArray0 = ArrayUtils.removeElements((double[]) null, (double[]) null);
      assertNull(doubleArray0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((double[]) null, (-1672.11103), (int) (short)1964);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertNotNull(bitSet0);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) (short)1964;
      longArray0[1] = (long) (short)1;
      boolean boolean0 = ArrayUtils.isEmpty(longArray0);
      assertArrayEquals(new long[] {1964L, 1L}, longArray0);
      assertEquals(2, longArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0760()  throws Throwable  {
      long[] longArray0 = new long[3];
      longArray0[0] = (-1166L);
      longArray0[1] = (-2142L);
      longArray0[2] = 995L;
      long[] longArray1 = ArrayUtils.EMPTY_LONG_ARRAY;
      assertArrayEquals(new long[] {}, longArray1);
      assertEquals(0, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
      
      Boolean boolean0 = new Boolean("(P<q28gF[:msw");
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      Boolean boolean1 = Boolean.FALSE;
      assertTrue(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      assertFalse(boolean1);
      
      Boolean boolean2 = Boolean.valueOf("/65s7=[0I");
      assertTrue(boolean2.equals((Object)boolean0));
      assertNotNull(boolean2);
      assertFalse(boolean2);
      
      Boolean[] booleanArray0 = new Boolean[0];
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertNotNull(booleanArray1);
      
      short[] shortArray0 = new short[0];
      ArrayUtils.reverse(shortArray0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray0.length);
      
      double[] doubleArray0 = new double[1];
      Double[] doubleArray1 = ArrayUtils.toObject(doubleArray0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertNotNull(doubleArray1);
      
      Short short0 = new Short((short) (-1686));
      assertNotNull(short0);
      assertEquals((short) (-1686), (short)short0);
      
      Short[] shortArray1 = new Short[1];
      shortArray1[0] = short0;
      short[] shortArray2 = ArrayUtils.toPrimitive(shortArray1);
      assertArrayEquals(new short[] {(short) (-1686)}, shortArray2);
      assertEquals(1, shortArray2.length);
      assertEquals(1, shortArray1.length);
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertNotSame(shortArray2, shortArray0);
      assertNotNull(shortArray2);
      
      double[] doubleArray2 = ArrayUtils.removeElements(doubleArray0, (double[]) null);
      assertArrayEquals(new double[] {0.0}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray2.length);
      assertEquals(1, doubleArray0.length);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotNull(doubleArray2);
  }

  @Test(timeout = 4000)
  public void test0761()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      Boolean boolean0 = Boolean.valueOf("8Mt?`'a&4=H8m");
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      Boolean[] booleanArray0 = new Boolean[4];
      booleanArray0[0] = boolean0;
      booleanArray0[1] = boolean0;
      booleanArray0[2] = boolean0;
      booleanArray0[3] = boolean0;
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false}, booleanArray1));
      assertEquals(4, booleanArray0.length);
      assertEquals(4, booleanArray1.length);
      assertNotNull(booleanArray1);
      
      short[] shortArray0 = new short[6];
      doubleArray0[0] = (double) (short)0;
      shortArray0[1] = (short) (-20352);
      shortArray0[2] = (short)17;
      shortArray0[3] = (short) (-4274);
      shortArray0[4] = (short) (-1);
      shortArray0[5] = (short)1539;
      ArrayUtils.reverse(shortArray0);
      assertArrayEquals(new short[] {(short)1539, (short) (-1), (short) (-4274), (short)17, (short) (-20352), (short)0}, shortArray0);
      assertEquals(6, shortArray0.length);
      
      Double[] doubleArray1 = ArrayUtils.toObject(doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(4, doubleArray1.length);
      assertEquals(4, doubleArray0.length);
      assertNotNull(doubleArray1);
      
      Short short0 = new Short((short) (-3));
      assertNotNull(short0);
      assertEquals((short) (-3), (short)short0);
      
      short[] shortArray1 = ArrayUtils.toPrimitive((Short[]) null);
      assertNull(shortArray1);
  }

  @Test(timeout = 4000)
  public void test0762()  throws Throwable  {
      float[] floatArray0 = new float[9];
      floatArray0[0] = (-2271.21F);
      floatArray0[1] = 0.0F;
      floatArray0[2] = 216.6336F;
      floatArray0[3] = (-1.0F);
      floatArray0[4] = 941.88F;
      floatArray0[5] = (-1.0F);
      floatArray0[6] = 941.88F;
      floatArray0[7] = (-1647.477F);
      floatArray0[8] = (-1.0F);
      ArrayUtils.reverse(floatArray0);
      assertArrayEquals(new float[] {(-1.0F), (-1647.477F), 941.88F, (-1.0F), 941.88F, (-1.0F), 216.6336F, 0.0F, (-2271.21F)}, floatArray0, 0.01F);
      assertEquals(9, floatArray0.length);
      
      char[] charArray0 = new char[2];
      charArray0[0] = '8';
      charArray0[1] = 'X';
      boolean boolean0 = ArrayUtils.isNotEmpty(charArray0);
      assertArrayEquals(new char[] {'8', 'X'}, charArray0);
      assertEquals(2, charArray0.length);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 941.88F;
      doubleArray0[1] = (double) 'X';
      doubleArray0[2] = (double) 941.88F;
      double[] doubleArray1 = ArrayUtils.removeElements(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {941.8800048828125, 88.0, 941.8800048828125}, doubleArray0, 0.01);
      assertEquals(0, doubleArray1.length);
      assertEquals(3, doubleArray0.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotNull(doubleArray1);
      
      double[] doubleArray2 = ArrayUtils.nullToEmpty(doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {941.8800048828125, 88.0, 941.8800048828125}, doubleArray0, 0.01);
      assertEquals(0, doubleArray1.length);
      assertEquals(0, doubleArray2.length);
      assertEquals(3, doubleArray0.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotNull(doubleArray2);
      
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) 941.8800048828125;
      objectArray0[1] = (Object) (-1.0F);
      objectArray0[2] = (Object) 0.0F;
      objectArray0[3] = (Object) 0.0F;
      BitSet bitSet0 = null;
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(objectArray0[0], (BitSet) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test0763()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[1] = 127;
      boolean boolean0 = ArrayUtils.isSorted(intArray0);
      assertArrayEquals(new int[] {0, 127}, intArray0);
      assertEquals(2, intArray0.length);
      assertTrue(boolean0);
      
      long[] longArray0 = new long[3];
      longArray0[0] = (long) 0;
      longArray0[1] = (long) 0;
      longArray0[2] = (long) 0;
      long[] longArray1 = ArrayUtils.removeAllOccurrences(longArray0, (long) 0);
      assertArrayEquals(new long[] {0L, 0L, 0L}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertEquals(3, longArray0.length);
      assertEquals(0, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
      
      ArrayUtils.shift((double[]) null, 0);
      Double double0 = new Double((-5099.3446970701));
      assertNotNull(double0);
      assertEquals((-5099.3446970701), (double)double0, 0.01);
      
      Double double1 = new Double(0.0);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      assertEquals(0.0, (double)double1, 0.01);
      
      Double[] doubleArray0 = new Double[0];
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotNull(doubleArray1);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) 0;
      boolean boolean1 = ArrayUtils.contains(floatArray0, 1629.3763F);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertEquals(1, floatArray0.length);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      double[] doubleArray2 = ArrayUtils.nullToEmpty(doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(0, doubleArray2.length);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertSame(doubleArray2, doubleArray1);
      assertSame(doubleArray1, doubleArray2);
      assertNotNull(doubleArray2);
  }

  @Test(timeout = 4000)
  public void test0764()  throws Throwable  {
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)560;
      shortArray0[1] = (short)0;
      MutableInt mutableInt0 = new MutableInt((Number) (short)0);
      assertEquals(0, mutableInt0.intValue());
      assertEquals("0", mutableInt0.toString());
      assertEquals(0, (int)mutableInt0.toInteger());
      assertEquals(0, (int)mutableInt0.getValue());
      assertEquals((byte)0, mutableInt0.byteValue());
      assertEquals((short)0, mutableInt0.shortValue());
      assertEquals(0.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(0L, mutableInt0.longValue());
      assertEquals(0.0, mutableInt0.doubleValue(), 0.01);
      assertNotNull(mutableInt0);
      
      Integer integer0 = mutableInt0.getValue();
      assertEquals(0, mutableInt0.intValue());
      assertEquals("0", mutableInt0.toString());
      assertEquals(0, (int)mutableInt0.toInteger());
      assertEquals(0, (int)mutableInt0.getValue());
      assertEquals((byte)0, mutableInt0.byteValue());
      assertEquals((short)0, mutableInt0.shortValue());
      assertEquals(0.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(0L, mutableInt0.longValue());
      assertEquals(0.0, mutableInt0.doubleValue(), 0.01);
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      Short short0 = new Short((short) (-1734));
      assertNotNull(short0);
      assertEquals((short) (-1734), (short)short0);
      
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) mutableInt0;
      objectArray0[1] = (Object) integer0;
      objectArray0[2] = (Object) short0;
      objectArray0[3] = (Object) (short)560;
      objectArray0[4] = (Object) mutableInt0;
      objectArray0[5] = (Object) mutableInt0;
      boolean boolean0 = ArrayUtils.contains(objectArray0, objectArray0[0]);
      assertEquals(6, objectArray0.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0765()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[1] = 0.0;
      doubleArray0[3] = 1757.16516391848;
      int[] intArray0 = new int[3];
      intArray0[0] = (-448);
      intArray0[1] = 0;
      intArray0[2] = 0;
      ArrayUtils.swap(intArray0, (-448), 0, (-2147184749));
      assertArrayEquals(new int[] {(-448), 0, 0}, intArray0);
      assertEquals(3, intArray0.length);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      Object[] objectArray0 = new Object[3];
      double double0 = mockRandom0.nextGaussian();
      assertEquals(0.0, double0, 0.01);
      
      objectArray0[0] = (Object) (-448);
      objectArray0[1] = (Object) 0;
      Object object0 = ArrayUtils.get(objectArray0, 0);
      assertEquals(3, objectArray0.length);
      assertNotNull(object0);
      assertEquals((-448), object0);
      
      objectArray0[2] = object0;
      ArrayUtils.shuffle(objectArray0, (Random) mockRandom0);
      assertEquals(3, objectArray0.length);
      
      MutableInt mutableInt0 = new MutableInt(11);
      assertEquals("11", mutableInt0.toString());
      assertEquals((byte)11, mutableInt0.byteValue());
      assertEquals(11, (int)mutableInt0.toInteger());
      assertEquals(11, (int)mutableInt0.getValue());
      assertEquals(11L, mutableInt0.longValue());
      assertEquals(11.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(11.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals((short)11, mutableInt0.shortValue());
      assertEquals(11, mutableInt0.intValue());
      assertNotNull(mutableInt0);
      
      int int0 = mutableInt0.getAndDecrement();
      assertEquals("10", mutableInt0.toString());
      assertEquals((byte)10, mutableInt0.byteValue());
      assertEquals(10, (int)mutableInt0.toInteger());
      assertEquals(10, (int)mutableInt0.getValue());
      assertEquals(10.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(10L, mutableInt0.longValue());
      assertEquals(10, mutableInt0.intValue());
      assertEquals(10.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals((short)10, mutableInt0.shortValue());
      assertEquals(11, int0);
      
      MutableInt mutableInt1 = new MutableInt(11);
      assertEquals(11.0F, mutableInt1.floatValue(), 0.01F);
      assertEquals((short)11, mutableInt1.shortValue());
      assertEquals("11", mutableInt1.toString());
      assertEquals((byte)11, mutableInt1.byteValue());
      assertEquals(11.0, mutableInt1.doubleValue(), 0.01);
      assertEquals(11, (int)mutableInt1.toInteger());
      assertEquals(11, (int)mutableInt1.getValue());
      assertEquals(11, mutableInt1.intValue());
      assertEquals(11L, mutableInt1.longValue());
      assertFalse(mutableInt1.equals((Object)mutableInt0));
      assertNotNull(mutableInt1);
      
      Integer integer0 = mutableInt0.getValue();
      assertEquals("10", mutableInt0.toString());
      assertEquals((byte)10, mutableInt0.byteValue());
      assertEquals(10, (int)mutableInt0.toInteger());
      assertEquals(10, (int)mutableInt0.getValue());
      assertEquals(10.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(10L, mutableInt0.longValue());
      assertEquals(10, mutableInt0.intValue());
      assertEquals(10.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals((short)10, mutableInt0.shortValue());
      assertFalse(mutableInt0.equals((Object)mutableInt1));
      assertFalse(integer0.equals((Object)int0));
      assertFalse(integer0.equals((Object)object0));
      assertNotSame(mutableInt0, mutableInt1);
      assertNotNull(integer0);
      assertEquals(10, (int)integer0);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      boolean boolean0 = ArrayUtils.isEmpty(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, false, true, true}, booleanArray0));
      assertEquals(4, booleanArray0.length);
      assertFalse(boolean0);
      
      Short short0 = new Short((short)69);
      assertNotNull(short0);
      assertEquals((short)69, (short)short0);
      
      boolean boolean1 = ArrayUtils.contains(objectArray0, (Object) short0);
      assertEquals(3, objectArray0.length);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test0766()  throws Throwable  {
      float[] floatArray0 = new float[3];
      floatArray0[0] = (-1397.05F);
      floatArray0[1] = 2381.4106F;
      floatArray0[2] = (-1.0F);
      float[] floatArray1 = ArrayUtils.nullToEmpty(floatArray0);
      assertArrayEquals(new float[] {(-1397.05F), 2381.4106F, (-1.0F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-1397.05F), 2381.4106F, (-1.0F)}, floatArray1, 0.01F);
      assertEquals(3, floatArray0.length);
      assertEquals(3, floatArray1.length);
      assertSame(floatArray0, floatArray1);
      assertSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      
      int[] intArray0 = new int[0];
      int[] intArray1 = ArrayUtils.removeAllOccurrences(intArray0, 288);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (-133);
      BitSet bitSet0 = ArrayUtils.indexesOf(shortArray0, (short) (-133), (int) (short) (-133));
      assertEquals(1, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals("{0}", bitSet0.toString());
      assertEquals(1, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertArrayEquals(new short[] {(short) (-133)}, shortArray0);
      assertEquals(1, shortArray0.length);
      assertNotNull(bitSet0);
      
      MockRandom mockRandom0 = new MockRandom((short) (-133));
      assertNotNull(mockRandom0);
      
      ArrayUtils.shuffle(intArray0, (Random) mockRandom0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertFalse(intArray0.equals((Object)intArray1));
      assertNotSame(intArray0, intArray1);
  }

  @Test(timeout = 4000)
  public void test0767()  throws Throwable  {
      BitSet bitSet0 = ArrayUtils.indexesOf((double[]) null, (-1154.8984));
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertNotNull(bitSet0);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (-1681);
      shortArray0[1] = (short)1;
      short[] shortArray1 = ArrayUtils.nullToEmpty(shortArray0);
      assertArrayEquals(new short[] {(short) (-1681), (short)1}, shortArray0);
      assertArrayEquals(new short[] {(short) (-1681), (short)1}, shortArray1);
      assertEquals(2, shortArray0.length);
      assertEquals(2, shortArray1.length);
      assertSame(shortArray0, shortArray1);
      assertSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      
      boolean boolean0 = ArrayUtils.contains((long[]) null, (long) (short) (-1681));
      assertFalse(boolean0);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      boolean[] booleanArray1 = ArrayUtils.addAll(booleanArray0, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray1));
      assertEquals(1, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      
      ArrayUtils.swap(shortArray1, (int) (short)1, (int) (short) (-1681), (int) (short) (-1681));
      assertArrayEquals(new short[] {(short) (-1681), (short)1}, shortArray0);
      assertArrayEquals(new short[] {(short) (-1681), (short)1}, shortArray1);
      assertEquals(2, shortArray0.length);
      assertEquals(2, shortArray1.length);
      assertSame(shortArray0, shortArray1);
      assertSame(shortArray1, shortArray0);
      
      Long long0 = new Long((short) (-1681));
      assertNotNull(long0);
      assertEquals((-1681L), (long)long0);
      
      Long long1 = new Long((-669L));
      assertFalse(long1.equals((Object)long0));
      assertNotNull(long1);
      assertEquals((-669L), (long)long1);
      
      ArrayUtils.swap(booleanArray1, (-3797), (int) (short) (-1681), 976);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray1));
      assertEquals(1, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
  }

  @Test(timeout = 4000)
  public void test0768()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-39);
      int int0 = ArrayUtils.indexOf(byteArray0, (byte)6);
      assertArrayEquals(new byte[] {(byte) (-39), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(8, byteArray0.length);
      assertEquals((-1), int0);
      
      long[] longArray0 = new long[0];
      int int1 = ArrayUtils.lastIndexOf(longArray0, 2226L, 6);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      ArrayUtils.swap(booleanArray0, (-2595), (int) (byte)0, (int) (byte) (-39));
      assertTrue(Arrays.equals(new boolean[] {false, false, true, false, false, false, false}, booleanArray0));
      assertEquals(7, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test0769()  throws Throwable  {
      BitSet bitSet0 = new BitSet();
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertNotNull(bitSet0);
      
      byte[] byteArray0 = new byte[0];
      ArrayUtils.swap(byteArray0, 11, 11, 11);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short)0;
      shortArray0[2] = (short) (-430);
      shortArray0[3] = (short) (-94);
      shortArray0[4] = (short)2;
      char[] charArray0 = new char[4];
      charArray0[0] = '0';
      charArray0[1] = 'R';
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) (short)2;
      objectArray0[1] = (Object) bitSet0;
      objectArray0[2] = (Object) (short)2;
      objectArray0[3] = (Object) (short) (-94);
      objectArray0[4] = (Object) '0';
      objectArray0[5] = (Object) '0';
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (short) (-430);
      doubleArray0[1] = (double) (short)2;
      doubleArray0[2] = (double) (short) (-430);
      BitSet bitSet1 = ArrayUtils.indexesOf(doubleArray0, 0.0, 1490, (double) 1490);
      assertEquals(0, bitSet1.cardinality());
      assertEquals("{}", bitSet1.toString());
      assertEquals(64, bitSet1.size());
      assertTrue(bitSet1.isEmpty());
      assertEquals(0, bitSet1.length());
      assertArrayEquals(new double[] {(-430.0), 2.0, (-430.0)}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      assertTrue(bitSet1.equals((Object)bitSet0));
      assertNotSame(bitSet1, bitSet0);
      assertNotNull(bitSet1);
      
      bitSet0.or(bitSet1);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet1.cardinality());
      assertEquals("{}", bitSet1.toString());
      assertEquals(64, bitSet1.size());
      assertTrue(bitSet1.isEmpty());
      assertEquals(0, bitSet1.length());
      assertArrayEquals(new double[] {(-430.0), 2.0, (-430.0)}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      assertTrue(bitSet0.equals((Object)bitSet1));
      assertTrue(bitSet1.equals((Object)bitSet0));
      assertNotSame(bitSet0, bitSet1);
      assertNotSame(bitSet1, bitSet0);
      
      int int0 = ArrayUtils.indexOf(objectArray0, objectArray0[3]);
      assertEquals(6, objectArray0.length);
      assertEquals(3, int0);
      
      ArrayUtils.swap(objectArray0, (int) (short)0, (int) (short)2, (int) (short)2);
      assertEquals(6, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test0770()  throws Throwable  {
      boolean boolean0 = ArrayUtils.contains((double[]) null, (-3818.7033228008), 916.5750699090544);
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-87);
      ArrayUtils.swap(byteArray0, (-2033), (int) (byte) (-87), 4679);
      assertArrayEquals(new byte[] {(byte) (-87)}, byteArray0);
      assertEquals(1, byteArray0.length);
      
      int int0 = ArrayUtils.lastIndexOf((double[]) null, (double) (-2033), 3588, (double) (byte) (-87));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0771()  throws Throwable  {
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)2;
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short)2, 14);
      assertArrayEquals(new short[] {(short)2}, shortArray0);
      assertEquals(1, shortArray0.length);
      assertEquals(0, int0);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-125.06480940645179);
      doubleArray0[1] = (-1166.025640793);
      doubleArray0[2] = 268.428;
      doubleArray0[3] = (double) (short)2;
      doubleArray0[4] = (double) (short)2;
      doubleArray0[5] = (double) (short)2;
      boolean boolean0 = ArrayUtils.isSorted(doubleArray0);
      assertArrayEquals(new double[] {(-125.06480940645179), (-1166.025640793), 268.428, 2.0, 2.0, 2.0}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0772()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = Double.NaN;
      doubleArray0[1] = (-33.0);
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 1635.07020552, 1635.07020552);
      assertArrayEquals(new double[] {Double.NaN, (-33.0)}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0773()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte) (-44);
      byteArray0[2] = (byte) (-39);
      byteArray0[3] = (byte)2;
      byteArray0[4] = (byte)51;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)45;
      boolean boolean0 = ArrayUtils.isSameLength(byteArray0, byteArray0);
      assertArrayEquals(new byte[] {(byte)2, (byte) (-44), (byte) (-39), (byte)2, (byte)51, (byte)0, (byte)0, (byte)45, (byte)0}, byteArray0);
      assertEquals(9, byteArray0.length);
      assertTrue(boolean0);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (byte)45;
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short)45);
      assertArrayEquals(new short[] {(short)45}, shortArray0);
      assertEquals(1, shortArray0.length);
      assertEquals(0, int0);
      
      double[] doubleArray0 = new double[0];
      int int1 = ArrayUtils.lastIndexOf(doubleArray0, (double) (byte) (-39), (double) (byte)2);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      Object[] objectArray0 = new Object[0];
      ArrayUtils.swap(objectArray0, 106, (int) (byte)2, (-2382));
      assertEquals(0, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test0774()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-39);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)72;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      short[] shortArray0 = ArrayUtils.removeAllOccurences((short[]) null, (short) (byte)0);
      assertNull(shortArray0);
      
      int[] intArray0 = new int[8];
      intArray0[0] = (int) (byte)0;
      intArray0[1] = 2;
      intArray0[2] = (int) (byte)0;
      intArray0[3] = 256;
      byteArray0[4] = (byte) (-39);
      intArray0[5] = (int) (byte)0;
      intArray0[6] = (-3414);
      intArray0[7] = (int) (byte) (-39);
      int[] intArray1 = ArrayUtils.subarray(intArray0, 1336, (-3709));
      assertArrayEquals(new int[] {}, intArray1);
      assertArrayEquals(new int[] {0, 2, 0, 256, 0, 0, (-3414), (-39)}, intArray0);
      assertEquals(0, intArray1.length);
      assertEquals(8, intArray0.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
      assertNotNull(intArray1);
      
      short[] shortArray1 = ArrayUtils.addFirst((short[]) null, (short)2195);
      assertArrayEquals(new short[] {(short)2195}, shortArray1);
      assertEquals(1, shortArray1.length);
      assertNotNull(shortArray1);
      
      int int0 = ArrayUtils.indexOf(intArray1, (int) (byte)0, (int) (byte) (-39));
      assertArrayEquals(new int[] {}, intArray1);
      assertArrayEquals(new int[] {0, 2, 0, 256, 0, 0, (-3414), (-39)}, intArray0);
      assertEquals(0, intArray1.length);
      assertEquals(8, intArray0.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(intArray0.equals((Object)intArray1));
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
      assertEquals((-1), int0);
      
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) (byte)0;
      objectArray0[1] = (Object) 0;
      objectArray0[2] = (Object) 256;
      objectArray0[3] = (Object) 2;
      objectArray0[4] = (Object) 0;
      Byte byte0 = new Byte((byte)72);
      assertNotNull(byte0);
      assertEquals((byte)72, (byte)byte0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(objectArray0, (Object) byte0);
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(5, objectArray0.length);
      assertNotNull(bitSet0);
  }

  @Test(timeout = 4000)
  public void test0775()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      Byte byte0 = new Byte((byte) (-124));
      assertNotNull(byte0);
      assertEquals((byte) (-124), (byte)byte0);
      
      int[] intArray0 = new int[6];
      intArray0[0] = (-2830);
      intArray0[1] = (int) (byte) (-124);
      intArray0[2] = (int) (byte) (-124);
      intArray0[3] = (-2373);
      intArray0[4] = (int) (byte)75;
      intArray0[5] = (-2830);
      ArrayUtils.shift(intArray0, (-1717986918), (-2830), 1114111);
      assertArrayEquals(new int[] {(-2830), (-124), (-124), (-2373), 75, (-2830)}, intArray0);
      assertEquals(6, intArray0.length);
      
      ArrayUtils.shift((byte[]) null, 3783, 2147158553, 102);
      BitSet bitSet0 = ArrayUtils.indexesOf((double[]) null, (-39.0));
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertNotNull(bitSet0);
      
      Integer[] integerArray0 = new Integer[3];
      try { 
        Integer.decode(">}uw]0kN(");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \">}uw]0kN(\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test0776()  throws Throwable  {
      double[] doubleArray0 = ArrayUtils.removeAllOccurences((double[]) null, (-1.0));
      assertNull(doubleArray0);
      
      boolean boolean0 = ArrayUtils.isSorted((double[]) null);
      assertTrue(boolean0);
      
      ArrayUtils.shift((int[]) null, (int) (short) (-33), (-739), (-1639));
      double[] doubleArray1 = ArrayUtils.removeElements((double[]) null, (double[]) null);
      assertNull(doubleArray1);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (-33);
      shortArray0[1] = (short) (-1);
      int int0 = ArrayUtils.indexOf(shortArray0, (short)83, (-739));
      assertArrayEquals(new short[] {(short) (-33), (short) (-1)}, shortArray0);
      assertEquals(2, shortArray0.length);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0777()  throws Throwable  {
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (-19);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)123;
      byteArray0[0] = (byte) (-46);
      byteArray0[2] = (byte) (-46);
      byteArray0[3] = (byte) (-46);
      ArrayUtils.shift(byteArray0, (int) (short) (-19));
      assertArrayEquals(new byte[] {(byte) (-46), (byte) (-46), (byte)0, (byte) (-46)}, byteArray0);
      assertEquals(4, byteArray0.length);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (byte)0;
      doubleArray0[1] = (double) (byte) (-46);
      doubleArray0[2] = 3067.4995725467356;
      ArrayUtils.reverse(doubleArray0);
      assertArrayEquals(new double[] {3067.4995725467356, (-46.0), 0.0}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      
      double[] doubleArray1 = new double[4];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) (byte)123;
      doubleArray1[1] = 1.5;
      doubleArray1[2] = (double) (short) (-19);
      doubleArray1[3] = (double) (short) (-19);
      boolean boolean0 = ArrayUtils.isSameLength(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {3067.4995725467356, (-46.0), 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {123.0, 1.5, (-19.0), (-19.0)}, doubleArray1, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(boolean0);
      
      int[] intArray0 = new int[8];
      intArray0[0] = (int) (byte)123;
      intArray0[1] = (int) (short) (-19);
      intArray0[2] = (int) (byte) (-46);
      intArray0[3] = (int) (byte) (-46);
      intArray0[4] = (int) (byte) (-46);
      intArray0[5] = (int) (byte)123;
      intArray0[6] = (int) (byte) (-46);
      intArray0[7] = (int) (byte)0;
      ArrayUtils.shift(intArray0, 1078, (int) (byte) (-46), 512);
      assertArrayEquals(new int[] {123, (-19), (-46), (-46), (-46), 123, (-46), 0}, intArray0);
      assertEquals(8, intArray0.length);
      
      ArrayUtils.shift(intArray0, 1136, Integer.MIN_VALUE, (-39));
      assertArrayEquals(new int[] {123, (-19), (-46), (-46), (-46), 123, (-46), 0}, intArray0);
      assertEquals(8, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test0778()  throws Throwable  {
      Byte byte0 = new Byte((byte)89);
      assertNotNull(byte0);
      assertEquals((byte)89, (byte)byte0);
      
      int[] intArray0 = new int[3];
      intArray0[2] = 2125936241;
      ArrayUtils.shift(intArray0, (int) (byte)89, 0, 2125936241);
      assertArrayEquals(new int[] {0, 0, 2125936241}, intArray0);
      assertEquals(3, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test0779()  throws Throwable  {
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (-19);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)123;
      byteArray0[0] = (byte) (-46);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      ArrayUtils.shift(byteArray0, (int) (short) (-19));
      assertArrayEquals(new byte[] {(byte)0, (byte) (-46), (byte)0, (byte)0}, byteArray0);
      assertEquals(4, byteArray0.length);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (byte)0;
      doubleArray0[1] = (double) (byte)0;
      doubleArray0[2] = 3067.4995725467356;
      ArrayUtils.reverse(doubleArray0);
      assertArrayEquals(new double[] {3067.4995725467356, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      
      double[] doubleArray1 = new double[4];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) (byte)0;
      doubleArray1[1] = 1.5;
      doubleArray1[2] = (double) (short) (-19);
      doubleArray1[3] = (double) (short) (-19);
      boolean boolean0 = ArrayUtils.isSameLength(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {3067.4995725467356, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 1.5, (-19.0), (-19.0)}, doubleArray1, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(boolean0);
      
      int[] intArray0 = new int[8];
      intArray0[0] = (int) (byte)0;
      intArray0[1] = (int) (short) (-19);
      intArray0[2] = (int) (byte)0;
      intArray0[3] = (int) (byte)0;
      intArray0[4] = (int) (byte)0;
      intArray0[5] = (int) (byte)0;
      intArray0[6] = (int) (byte) (-46);
      intArray0[7] = (int) (byte)0;
      ArrayUtils.shift(intArray0, 1078, (int) (byte)0, 512);
      assertArrayEquals(new int[] {0, (-19), 0, 0, 0, 0, (-46), 0}, intArray0);
      assertEquals(8, intArray0.length);
      
      ArrayUtils.shift(intArray0, 1136, Integer.MIN_VALUE, (-39));
      assertArrayEquals(new int[] {0, (-19), 0, 0, 0, 0, (-46), 0}, intArray0);
      assertEquals(8, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test0780()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-1437.84830558);
      doubleArray0[1] = (-673.7731729);
      doubleArray0[2] = 51.27000045776367;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 1386.32656;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = (-1330.741906045);
      int int0 = ArrayUtils.indexOf(doubleArray0, 1386.32656);
      assertArrayEquals(new double[] {(-1437.84830558), (-673.7731729), 51.27000045776367, 0.0, 1386.32656, 0.0, (-1330.741906045)}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
      assertEquals(4, int0);
  }

  @Test(timeout = 4000)
  public void test0781()  throws Throwable  {
      Boolean[] booleanArray0 = new Boolean[3];
      Boolean boolean0 = new Boolean((String) null);
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      booleanArray0[0] = boolean0;
      Boolean boolean1 = Boolean.valueOf((String) null);
      assertTrue(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      assertFalse(boolean1);
      
      booleanArray0[1] = boolean1;
      Boolean boolean2 = Boolean.valueOf((String) null);
      assertTrue(boolean2.equals((Object)boolean0));
      assertNotNull(boolean2);
      assertFalse(boolean2);
      
      booleanArray0[2] = boolean2;
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0, (boolean) boolean1);
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray1));
      assertEquals(3, booleanArray0.length);
      assertEquals(3, booleanArray1.length);
      assertTrue(boolean1.equals((Object)boolean0));
      assertNotNull(booleanArray1);
      
      double[] doubleArray0 = new double[22];
      doubleArray0[0] = 45.0;
      doubleArray0[2] = (-1288.92);
      doubleArray0[3] = 4026.966708;
      doubleArray0[4] = 45.0;
      ArrayUtils.shift(doubleArray0, (-1772));
      assertEquals(22, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test0782()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = 'f';
      charArray0[1] = 'f';
      charArray0[2] = 'c';
      char[] charArray1 = ArrayUtils.nullToEmpty(charArray0);
      assertArrayEquals(new char[] {'f', 'f', 'c'}, charArray0);
      assertArrayEquals(new char[] {'f', 'f', 'c'}, charArray1);
      assertEquals(3, charArray0.length);
      assertEquals(3, charArray1.length);
      assertSame(charArray0, charArray1);
      assertSame(charArray1, charArray0);
      assertNotNull(charArray1);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 'c';
      doubleArray0[1] = (double) 'f';
      ArrayUtils.shuffle(doubleArray0);
      assertArrayEquals(new double[] {102.0, 99.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      
      ArrayUtils.shift(doubleArray0, (-7), 55, (-7));
      assertArrayEquals(new double[] {99.0, 102.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test0783()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 687.016;
      double[] doubleArray1 = ArrayUtils.removeAllOccurrences(doubleArray0, 687.016);
      assertArrayEquals(new double[] {687.016}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      
      int[] intArray0 = new int[5];
      intArray0[0] = 2;
      intArray0[1] = 2;
      intArray0[2] = (-3414);
      intArray0[3] = 2;
      intArray0[4] = 2;
      int[] intArray1 = ArrayUtils.subarray(intArray0, 2, 88);
      assertArrayEquals(new int[] {2, 2, (-3414), 2, 2}, intArray0);
      assertArrayEquals(new int[] {(-3414), 2, 2}, intArray1);
      assertEquals(5, intArray0.length);
      assertEquals(3, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short)131;
      shortArray0[1] = (short)131;
      shortArray0[2] = (short)131;
      shortArray0[3] = (short)131;
      shortArray0[4] = (short)131;
      shortArray0[5] = (short)131;
      shortArray0[6] = (short)131;
      shortArray0[7] = (short)131;
      shortArray0[8] = (short)131;
      short[] shortArray1 = ArrayUtils.addFirst(shortArray0, (short)131);
      assertArrayEquals(new short[] {(short)131, (short)131, (short)131, (short)131, (short)131, (short)131, (short)131, (short)131, (short)131, (short)131}, shortArray1);
      assertArrayEquals(new short[] {(short)131, (short)131, (short)131, (short)131, (short)131, (short)131, (short)131, (short)131, (short)131}, shortArray0);
      assertEquals(10, shortArray1.length);
      assertEquals(9, shortArray0.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertNotNull(shortArray1);
  }

  @Test(timeout = 4000)
  public void test0784()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)67;
      byteArray0[1] = (byte) (-99);
      byteArray0[2] = (byte)0;
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) (byte)0;
      Object object0 = ArrayUtils.get(objectArray0, (-1551));
      assertEquals(3, objectArray0.length);
      assertNull(object0);
      
      objectArray0[1] = null;
      objectArray0[2] = (Object) "Array element ";
      String[] stringArray0 = ArrayUtils.toStringArray(objectArray0, "Array element ");
      assertEquals(3, objectArray0.length);
      assertEquals(3, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test0785()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)1;
      byteArray0[2] = (byte) (-22);
      byteArray0[3] = (byte) (-22);
      byteArray0[4] = (byte)2;
      short[] shortArray0 = new short[0];
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertNotNull(shortArray1);
      
      ArrayUtils.swap((Object[]) shortArray1, (int) (byte) (-22), (int) (byte)2, 0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      
      boolean boolean0 = ArrayUtils.isNotEmpty(byteArray0);
      assertArrayEquals(new byte[] {(byte)1, (byte)0, (byte) (-22), (byte) (-22), (byte)2}, byteArray0);
      assertEquals(5, byteArray0.length);
      assertTrue(boolean0);
      
      String[] stringArray0 = ArrayUtils.toStringArray((Object[]) shortArray1, "Array element ");
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test0786()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) false;
      objectArray0[1] = (Object) "^:J*4_},dWEgffen(p+";
      objectArray0[2] = (Object) "^:J*4_},dWEgffen(p+";
      objectArray0[3] = (Object) "^:J*4_},dWEgffen(p+";
      String[] stringArray0 = ArrayUtils.toStringArray(objectArray0, "^:J*4_},dWEgffen(p+");
      assertEquals(4, objectArray0.length);
      assertEquals(4, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test0787()  throws Throwable  {
      Byte byte0 = new Byte((byte)51);
      assertNotNull(byte0);
      assertEquals((byte)51, (byte)byte0);
      
      boolean boolean0 = ArrayUtils.contains((short[]) null, (short)202);
      assertFalse(boolean0);
      
      char[] charArray0 = new char[2];
      charArray0[0] = '.';
      charArray0[1] = 'L';
      byte[] byteArray0 = new byte[2];
      boolean boolean1 = ArrayUtils.isNotEmpty(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      assertEquals(2, byteArray0.length);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test0788()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)5;
      byteArray0[1] = (byte)99;
      Object[] objectArray0 = new Object[0];
      String[] stringArray0 = ArrayUtils.toStringArray(objectArray0, "Array element ");
      assertEquals(0, objectArray0.length);
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test0789()  throws Throwable  {
      Byte[] byteArray0 = new Byte[2];
      byte byte0 = (byte)51;
      Byte byte1 = new Byte((byte)51);
      assertTrue(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      assertEquals((byte)51, (byte)byte1);
      
      byteArray0[0] = byte1;
      Byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0);
      assertEquals(2, byteArray0.length);
      assertEquals(2, byteArray1.length);
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      
      boolean boolean0 = ArrayUtils.contains((short[]) null, (short)202);
      assertFalse(boolean0);
      
      char[] charArray0 = new char[2];
      charArray0[0] = '.';
      charArray0[1] = 'L';
      ArrayUtils.reverse(charArray0, (int) (byte)51, (int) (byte)51);
      assertArrayEquals(new char[] {'.', 'L'}, charArray0);
      assertEquals(2, charArray0.length);
      
      byte[] byteArray2 = new byte[2];
      byteArray2[0] = (byte)51;
      byteArray2[1] = byte0;
      boolean boolean1 = ArrayUtils.isNotEmpty(byteArray2);
      assertArrayEquals(new byte[] {(byte)51, (byte)51}, byteArray2);
      assertEquals(2, byteArray2.length);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String[] stringArray0 = ArrayUtils.toStringArray((Object[]) byteArray1, "^:J*4_},dWEgffen(p+");
      assertEquals(2, byteArray0.length);
      assertEquals(2, byteArray1.length);
      assertEquals(2, stringArray0.length);
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray1, byteArray0);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test0790()  throws Throwable  {
      int[] intArray0 = ArrayUtils.subarray((int[]) null, 3494, 45);
      assertNull(intArray0);
      
      char[] charArray0 = new char[3];
      charArray0[1] = 'Y';
      charArray0[1] = 'Y';
      charArray0[2] = 'Y';
      char[] charArray1 = ArrayUtils.add(charArray0, 'y');
      assertArrayEquals(new char[] {'\u0000', 'Y', 'Y'}, charArray0);
      assertArrayEquals(new char[] {'\u0000', 'Y', 'Y', 'y'}, charArray1);
      assertEquals(3, charArray0.length);
      assertEquals(4, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      
      boolean boolean0 = ArrayUtils.contains((int[]) null, 18688);
      assertFalse(boolean0);
      
      Integer integer0 = new Integer(6);
      assertNotNull(integer0);
      assertEquals(6, (int)integer0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.getLength(integer0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test0791()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)17;
      byteArray0[1] = (byte) (-13);
      byteArray0[2] = (byte)12;
      byteArray0[3] = (byte) (-121);
      byteArray0[4] = (byte)105;
      boolean boolean0 = ArrayUtils.isSameLength(byteArray0, byteArray0);
      assertArrayEquals(new byte[] {(byte)17, (byte) (-13), (byte)12, (byte) (-121), (byte)105}, byteArray0);
      assertEquals(5, byteArray0.length);
      assertTrue(boolean0);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (byte)12;
      shortArray0[1] = (short) (byte)17;
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short) (byte)105);
      assertArrayEquals(new short[] {(short)12, (short)17}, shortArray0);
      assertEquals(2, shortArray0.length);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0792()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 2798.735380718;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (-2703.0);
      doubleArray0[3] = 1757.16516391848;
      int[] intArray0 = new int[3];
      intArray0[0] = (-448);
      intArray0[1] = 0;
      intArray0[2] = 0;
      ArrayUtils.swap(intArray0, (-448), 0, (-2147184749));
      assertArrayEquals(new int[] {(-448), 0, 0}, intArray0);
      assertEquals(3, intArray0.length);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      Object[] objectArray0 = new Object[3];
      double double0 = mockRandom0.nextGaussian();
      assertEquals(0.0, double0, 0.01);
      
      objectArray0[0] = (Object) (-448);
      objectArray0[1] = (Object) 0;
      Object object0 = ArrayUtils.get(objectArray0, 0);
      assertEquals(3, objectArray0.length);
      assertNotNull(object0);
      assertEquals((-448), object0);
      
      objectArray0[2] = object0;
      ArrayUtils.shuffle(objectArray0, (Random) mockRandom0);
      assertEquals(3, objectArray0.length);
      
      int int0 = 11;
      MutableInt mutableInt0 = new MutableInt(11);
      assertEquals("11", mutableInt0.toString());
      assertEquals(11.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(11, mutableInt0.intValue());
      assertEquals((short)11, mutableInt0.shortValue());
      assertEquals(11.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(11L, mutableInt0.longValue());
      assertEquals((byte)11, mutableInt0.byteValue());
      assertEquals(11, (int)mutableInt0.getValue());
      assertEquals(11, (int)mutableInt0.toInteger());
      assertNotNull(mutableInt0);
      
      try { 
        Long.valueOf("J");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"J\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test0793()  throws Throwable  {
      float[] floatArray0 = new float[5];
      floatArray0[0] = 0.0F;
      floatArray0[1] = 327.0F;
      floatArray0[2] = 0.0F;
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)45;
      byteArray0[1] = (byte)3;
      byteArray0[2] = (byte) (-21);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byte[] byteArray1 = ArrayUtils.removeAllOccurences(byteArray0, (byte) (-108));
      assertArrayEquals(new byte[] {(byte)45, (byte)3, (byte) (-21), (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)45, (byte)3, (byte) (-21), (byte)0, (byte)0}, byteArray1);
      assertEquals(5, byteArray0.length);
      assertEquals(5, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (byte)0;
      doubleArray0[1] = (double) 0.0F;
      doubleArray0[3] = (double) (byte) (-108);
      double[] doubleArray1 = ArrayUtils.removeAllOccurrences(doubleArray0, 0.0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, (-108.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-108.0)}, doubleArray1, 0.01);
      assertEquals(4, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
  }

  @Test(timeout = 4000)
  public void test0794()  throws Throwable  {
      float[] floatArray0 = new float[2];
      floatArray0[0] = 1566.475F;
      floatArray0[1] = 1566.475F;
      float[] floatArray1 = ArrayUtils.addFirst(floatArray0, 1566.475F);
      assertArrayEquals(new float[] {1566.475F, 1566.475F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {1566.475F, 1566.475F, 1566.475F}, floatArray1, 0.01F);
      assertEquals(2, floatArray0.length);
      assertEquals(3, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (-2624);
      shortArray0[1] = (short) (-2624);
      ArrayUtils.shift(shortArray0, (int) (short) (-2624));
      assertArrayEquals(new short[] {(short) (-2624), (short) (-2624)}, shortArray0);
      assertEquals(2, shortArray0.length);
      
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[5] = false;
      Boolean boolean0 = new Boolean(false);
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      ArrayUtils.reverse(floatArray1);
      assertArrayEquals(new float[] {1566.475F, 1566.475F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {1566.475F, 1566.475F, 1566.475F}, floatArray1, 0.01F);
      assertEquals(2, floatArray0.length);
      assertEquals(3, floatArray1.length);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
  }

  @Test(timeout = 4000)
  public void test0795()  throws Throwable  {
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short)541;
      Character character0 = new Character('j');
      assertNotNull(character0);
      assertEquals('j', (char)character0);
      
      ArrayUtils.shift(shortArray0, (-2220), Integer.MAX_VALUE, (int) (short)541);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)541, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertEquals(7, shortArray0.length);
      
      Short[] shortArray1 = new Short[0];
      Short[] shortArray2 = ArrayUtils.nullToEmpty(shortArray1);
      assertEquals(0, shortArray1.length);
      assertEquals(0, shortArray2.length);
      assertFalse(shortArray2.equals((Object)shortArray1));
      assertNotSame(shortArray1, shortArray2);
      assertNotSame(shortArray2, shortArray1);
      assertNotNull(shortArray2);
      
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = ArrayUtils.removeElements(byteArray0, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = 768.2129F;
      floatArray0[1] = (float) Integer.MAX_VALUE;
      floatArray0[2] = (float) (-2220);
      floatArray0[3] = 768.2129F;
      floatArray0[4] = (float) Integer.MAX_VALUE;
      floatArray0[5] = (float) (short)0;
      float[] floatArray1 = ArrayUtils.addFirst(floatArray0, (-2220.0F));
      assertArrayEquals(new float[] {768.2129F, 2.14748365E9F, (-2220.0F), 768.2129F, 2.14748365E9F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-2220.0F), 768.2129F, 2.14748365E9F, (-2220.0F), 768.2129F, 2.14748365E9F, 0.0F}, floatArray1, 0.01F);
      assertEquals(6, floatArray0.length);
      assertEquals(7, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      
      Character[] characterArray0 = new Character[2];
      Character character1 = Character.valueOf('j');
      assertTrue(character1.equals((Object)character0));
      assertNotNull(character1);
      assertEquals('j', (char)character1);
      
      characterArray0[0] = character1;
      characterArray0[1] = character0;
      Character[] characterArray1 = ArrayUtils.nullToEmpty(characterArray0);
      assertEquals(2, characterArray0.length);
      assertEquals(2, characterArray1.length);
      assertSame(characterArray0, characterArray1);
      assertSame(characterArray1, characterArray0);
      assertNotNull(characterArray1);
  }

  @Test(timeout = 4000)
  public void test0796()  throws Throwable  {
      Character character0 = Character.valueOf('g');
      assertNotNull(character0);
      assertEquals('g', (char)character0);
      
      Character character1 = Character.valueOf('g');
      assertNotNull(character1);
      assertEquals('g', (char)character1);
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (byte) (-39);
      shortArray0[1] = (short) (byte) (-39);
      shortArray0[2] = (short) (byte) (-39);
      shortArray0[3] = (short) (byte) (-39);
      ArrayUtils.shift(shortArray0, (int) (short) (-39));
      assertArrayEquals(new short[] {(short) (-39), (short) (-39), (short) (-39), (short) (-39)}, shortArray0);
      assertEquals(4, shortArray0.length);
      
      long[] longArray0 = new long[0];
      int int0 = ArrayUtils.indexOf(longArray0, 13L);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0797()  throws Throwable  {
      float[] floatArray0 = new float[4];
      floatArray0[0] = (-1647.477F);
      floatArray0[1] = (-1.0F);
      floatArray0[2] = 0.0F;
      floatArray0[3] = (-983.02F);
      boolean boolean0 = ArrayUtils.contains(floatArray0, 0.0F);
      assertArrayEquals(new float[] {(-1647.477F), (-1.0F), 0.0F, (-983.02F)}, floatArray0, 0.01F);
      assertEquals(4, floatArray0.length);
      assertTrue(boolean0);
      
      Integer[] integerArray0 = new Integer[0];
      Integer[] integerArray1 = ArrayUtils.nullToEmpty(integerArray0);
      assertEquals(0, integerArray0.length);
      assertEquals(0, integerArray1.length);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertNotNull(integerArray1);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-83);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-46);
      byteArray0[3] = (byte)0;
      byte[] byteArray1 = ArrayUtils.add(byteArray0, 0, (byte) (-90));
      assertArrayEquals(new byte[] {(byte) (-83), (byte)0, (byte) (-46), (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-90), (byte) (-83), (byte)0, (byte) (-46), (byte)0}, byteArray1);
      assertEquals(4, byteArray0.length);
      assertEquals(5, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      
      float[] floatArray1 = new float[6];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = (float) (byte) (-83);
      floatArray1[1] = (-1647.477F);
      floatArray1[2] = (float) (byte)0;
      floatArray1[3] = (-983.02F);
      floatArray1[4] = (-983.02F);
      floatArray1[5] = (float) (byte)0;
      float[] floatArray2 = ArrayUtils.addFirst(floatArray1, (-1777.094F));
      assertArrayEquals(new float[] {(-1777.094F), (-83.0F), (-1647.477F), 0.0F, (-983.02F), (-983.02F), 0.0F}, floatArray2, 0.01F);
      assertArrayEquals(new float[] {(-83.0F), (-1647.477F), 0.0F, (-983.02F), (-983.02F), 0.0F}, floatArray1, 0.01F);
      assertEquals(7, floatArray2.length);
      assertEquals(6, floatArray1.length);
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray2, floatArray0);
      assertNotSame(floatArray2, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray1, floatArray2);
      assertNotNull(floatArray2);
      
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short) (-2624);
      shortArray0[1] = (short) (byte) (-46);
      shortArray0[2] = (short) (byte)0;
      ArrayUtils.shift(shortArray0, (int) (short)0);
      assertArrayEquals(new short[] {(short) (-2624), (short) (-46), (short)0}, shortArray0);
      assertEquals(3, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test0798()  throws Throwable  {
      Byte[] byteArray0 = new Byte[2];
      Byte byte0 = new Byte((byte)51);
      assertNotNull(byte0);
      assertEquals((byte)51, (byte)byte0);
      
      byteArray0[0] = byte0;
      Byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0);
      assertEquals(2, byteArray0.length);
      assertEquals(2, byteArray1.length);
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      
      boolean boolean0 = ArrayUtils.contains((short[]) null, (short)202);
      assertFalse(boolean0);
      
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = false;
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (short)202;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, Double.NaN);
      assertArrayEquals(new double[] {202.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals((-1), int0);
      
      int[] intArray0 = new int[2];
      intArray0[0] = (-1);
      intArray0[1] = (int) (short)202;
      ArrayUtils.reverse(intArray0);
      assertArrayEquals(new int[] {202, (-1)}, intArray0);
      assertEquals(2, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test0799()  throws Throwable  {
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short) (-1);
      shortArray0[1] = (short)43;
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      boolean[] booleanArray1 = ArrayUtils.removeElement(booleanArray0, true);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, true, true}, booleanArray1));
      assertEquals(4, booleanArray0.length);
      assertEquals(3, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      
      Long long0 = new Long((-109L));
      assertNotNull(long0);
      assertEquals((-109L), (long)long0);
      
      Object[] objectArray0 = new Object[0];
      // Undeclared exception!
      try { 
        ArrayUtils.add(objectArray0, (int)  (-1), (Object) long0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0800()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 100.0;
      doubleArray0[1] = 2063.283;
      doubleArray0[2] = (-873.7773746323309);
      doubleArray0[3] = (-1.0);
      doubleArray0[4] = (-1909.0);
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (-1742.8725), (-3907));
      assertArrayEquals(new double[] {100.0, 2063.283, (-873.7773746323309), (-1.0), (-1909.0)}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      assertEquals((-1), int0);
      
      Boolean[] booleanArray0 = ArrayUtils.toObject((boolean[]) null);
      assertNull(booleanArray0);
      
      int[] intArray0 = new int[6];
      intArray0[0] = (-1);
      intArray0[1] = (-3907);
      intArray0[2] = (-3907);
      intArray0[3] = (-3907);
      intArray0[4] = (-1);
      intArray0[5] = (-3907);
      ArrayUtils.reverse(intArray0);
      assertArrayEquals(new int[] {(-3907), (-1), (-3907), (-3907), (-3907), (-1)}, intArray0);
      assertEquals(6, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test0801()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 2;
      doubleArray0[1] = (double) 2;
      doubleArray0[2] = (double) (byte) (-71);
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 1.0, (-2429));
      assertArrayEquals(new double[] {2.0, 2.0, (-71.0)}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals((-1), int0);
      
      Integer[] integerArray0 = new Integer[1];
      Integer integer0 = new Integer((-1));
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(integer0);
      assertEquals((-1), (int)integer0);
      
      integerArray0[0] = integer0;
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0);
      assertArrayEquals(new int[] {(-1)}, intArray0);
      assertEquals(1, integerArray0.length);
      assertEquals(1, intArray0.length);
      assertNotNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test0802()  throws Throwable  {
      float[] floatArray0 = new float[7];
      floatArray0[0] = 941.88F;
      floatArray0[1] = (-1.0F);
      floatArray0[2] = 0.0F;
      floatArray0[3] = 1.0F;
      floatArray0[4] = 51.27F;
      floatArray0[5] = 2768.5557F;
      floatArray0[6] = 0.0F;
      float[] floatArray1 = ArrayUtils.removeAllOccurences(floatArray0, (-2548.0F));
      assertArrayEquals(new float[] {941.88F, (-1.0F), 0.0F, 1.0F, 51.27F, 2768.5557F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {941.88F, (-1.0F), 0.0F, 1.0F, 51.27F, 2768.5557F, 0.0F}, floatArray1, 0.01F);
      assertEquals(7, floatArray0.length);
      assertEquals(7, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) 0.0F;
      objectArray0[1] = (Object) (-1.0F);
      Boolean boolean0 = Boolean.valueOf("");
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      ArrayUtils.reverse(floatArray1, (-1078), (-2147079799));
      assertArrayEquals(new float[] {941.88F, (-1.0F), 0.0F, 1.0F, 51.27F, 2768.5557F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {941.88F, (-1.0F), 0.0F, 1.0F, 51.27F, 2768.5557F, 0.0F}, floatArray1, 0.01F);
      assertEquals(7, floatArray0.length);
      assertEquals(7, floatArray1.length);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      boolean[] booleanArray1 = ArrayUtils.removeElement(booleanArray0, false);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertEquals(0, booleanArray1.length);
      assertEquals(1, booleanArray0.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotNull(booleanArray1);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 1.0F;
      doubleArray0[1] = (double) 0.0F;
      doubleArray0[2] = (double) 1.0F;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (double) 51.27F, Integer.MAX_VALUE);
      assertArrayEquals(new double[] {1.0, 0.0, 1.0}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0803()  throws Throwable  {
      Byte[] byteArray0 = new Byte[2];
      byte byte0 = (byte)51;
      Byte byte1 = new Byte((byte)51);
      assertTrue(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      assertEquals((byte)51, (byte)byte1);
      
      byteArray0[0] = byte1;
      Byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0);
      assertEquals(2, byteArray0.length);
      assertEquals(2, byteArray1.length);
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      
      boolean boolean0 = ArrayUtils.contains((short[]) null, (short)202);
      assertFalse(boolean0);
      
      char[] charArray0 = new char[2];
      charArray0[0] = '.';
      charArray0[1] = 'L';
      ArrayUtils.reverse(charArray0, (int) (byte)51, (int) (byte)51);
      assertArrayEquals(new char[] {'.', 'L'}, charArray0);
      assertEquals(2, charArray0.length);
      
      byte[] byteArray2 = new byte[2];
      byteArray2[1] = byte0;
      boolean boolean1 = ArrayUtils.isNotEmpty(byteArray2);
      assertArrayEquals(new byte[] {(byte)0, (byte)51}, byteArray2);
      assertEquals(2, byteArray2.length);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String[] stringArray0 = ArrayUtils.toStringArray((Object[]) byteArray1, "^:J*4_},dWEgffen(p+");
      assertEquals(2, byteArray0.length);
      assertEquals(2, byteArray1.length);
      assertEquals(2, stringArray0.length);
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray1, byteArray0);
      assertNotNull(stringArray0);
      
      long[] longArray0 = ArrayUtils.insert((int) (byte)51, (long[]) null, (long[]) null);
      assertNull(longArray0);
  }

  @Test(timeout = 4000)
  public void test0804()  throws Throwable  {
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short) (-1);
      shortArray0[1] = (short)43;
      shortArray0[2] = (short)1119;
      shortArray0[3] = (short) (-1);
      shortArray0[4] = (short)8;
      shortArray0[5] = (short)1;
      shortArray0[6] = (short) (-2140);
      shortArray0[7] = (short) (-1);
      short[] shortArray1 = ArrayUtils.removeAllOccurences(shortArray0, (short) (-1));
      assertArrayEquals(new short[] {(short) (-1), (short)43, (short)1119, (short) (-1), (short)8, (short)1, (short) (-2140), (short) (-1)}, shortArray0);
      assertArrayEquals(new short[] {(short)43, (short)1119, (short)8, (short)1, (short) (-2140)}, shortArray1);
      assertEquals(8, shortArray0.length);
      assertEquals(5, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      
      long[] longArray0 = new long[3];
      longArray0[0] = (long) (short)8;
      longArray0[1] = (long) (short)8;
      longArray0[2] = (long) (short) (-1);
      ArrayUtils.shuffle(longArray0);
      assertArrayEquals(new long[] {8L, (-1L), 8L}, longArray0);
      assertEquals(3, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test0805()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-7);
      boolean boolean0 = ArrayUtils.isSameLength(byteArray0, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-7)}, byteArray0);
      assertEquals(1, byteArray0.length);
      assertTrue(boolean0);
      
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short) (byte) (-7);
      shortArray0[1] = (short) (byte) (-7);
      BitSet bitSet0 = ArrayUtils.indexesOf(byteArray0, (byte) (-123), (int) (byte) (-7));
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertArrayEquals(new byte[] {(byte) (-7)}, byteArray0);
      assertEquals(1, byteArray0.length);
      assertNotNull(bitSet0);
      
      boolean boolean1 = ArrayUtils.isSorted(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-7)}, byteArray0);
      assertEquals(1, byteArray0.length);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'D';
      charArray0[1] = 'p';
      char[] charArray1 = ArrayUtils.clone(charArray0);
      assertArrayEquals(new char[] {'D', 'p'}, charArray0);
      assertArrayEquals(new char[] {'D', 'p'}, charArray1);
      assertEquals(2, charArray0.length);
      assertEquals(2, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) (byte) (-7);
      ArrayUtils.swap(longArray0, (int) (short) (-7), (-1927), (int) (byte) (-7));
      assertArrayEquals(new long[] {(-7L)}, longArray0);
      assertEquals(1, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test0806()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      boolean boolean0 = ArrayUtils.isNotEmpty(doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      assertTrue(boolean0);
      
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short)0;
      float[] floatArray0 = new float[7];
      floatArray0[0] = (-118.0F);
      floatArray0[1] = (float) (short)0;
      floatArray0[2] = (float) (short)0;
      floatArray0[3] = (float) (short)0;
      floatArray0[4] = (float) (short)0;
      floatArray0[5] = 669.9F;
      floatArray0[6] = (-118.0F);
      // Undeclared exception!
      try { 
        ArrayUtils.shuffle(floatArray0, (Random) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0807()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 1.5;
      boolean boolean0 = ArrayUtils.isNotEmpty(doubleArray0);
      assertArrayEquals(new double[] {0.0, 1.5}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      assertTrue(boolean0);
      
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short)0;
      float[] floatArray0 = new float[7];
      floatArray0[0] = (-118.0F);
      floatArray0[1] = (float) (short)0;
      floatArray0[2] = (float) (short)0;
      floatArray0[3] = (float) (short)0;
      floatArray0[4] = (float) (short)0;
      floatArray0[5] = 669.9F;
      floatArray0[6] = (-118.0F);
      // Undeclared exception!
      try { 
        ArrayUtils.shuffle(floatArray0, (Random) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0808()  throws Throwable  {
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short)560;
      MockRandom mockRandom0 = new MockRandom((short)560);
      assertNotNull(mockRandom0);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) (byte)8;
      floatArray0[1] = (float) (short)560;
      MockRandom mockRandom1 = new MockRandom();
      assertFalse(mockRandom1.equals((Object)mockRandom0));
      assertNotNull(mockRandom1);
      
      int int0 = mockRandom1.nextInt((int) (short)560);
      assertFalse(mockRandom1.equals((Object)mockRandom0));
      assertNotSame(mockRandom1, mockRandom0);
      assertEquals(0, int0);
      
      ArrayUtils.shuffle(floatArray0, (Random) mockRandom1);
      assertArrayEquals(new float[] {560.0F, 0.0F, 0.0F, 0.0F, 8.0F}, floatArray0, 0.01F);
      assertEquals(5, floatArray0.length);
      assertFalse(mockRandom1.equals((Object)mockRandom0));
      assertNotSame(mockRandom1, mockRandom0);
      
      ArrayUtils.swap(floatArray0, 0, 4, 971);
      assertArrayEquals(new float[] {8.0F, 0.0F, 0.0F, 0.0F, 560.0F}, floatArray0, 0.01F);
      assertEquals(5, floatArray0.length);
      
      short[] shortArray1 = ArrayUtils.subarray(shortArray0, 1111, 88);
      assertArrayEquals(new short[] {(short)560, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertEquals(6, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
  }

  @Test(timeout = 4000)
  public void test0809()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-68);
      byteArray0[1] = (byte)97;
      int int0 = 1;
      ArrayUtils.swap(byteArray0, (-2749), 43, 1);
      assertArrayEquals(new byte[] {(byte) (-68), (byte)97}, byteArray0);
      assertEquals(2, byteArray0.length);
      
      short[] shortArray0 = null;
      // Undeclared exception!
      try { 
        ArrayUtils.add((short[]) null, 2816, (short) (-115));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2816, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0810()  throws Throwable  {
      BitSet bitSet0 = new BitSet();
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertNotNull(bitSet0);
      
      byte[] byteArray0 = new byte[0];
      ArrayUtils.swap(byteArray0, 11, 11, 11);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short)1070;
      boolean boolean0 = ArrayUtils.isNotEmpty(shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)1070, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertEquals(7, shortArray0.length);
      assertTrue(boolean0);
      
      short[] shortArray1 = ArrayUtils.add(shortArray0, (int) (short)0, (short)1456);
      assertArrayEquals(new short[] {(short)0, (short)1070, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)1456, (short)0, (short)1070, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray1);
      assertEquals(7, shortArray0.length);
      assertEquals(8, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'h';
      charArray0[1] = 'l';
      char[] charArray1 = ArrayUtils.removeAllOccurrences(charArray0, 'K');
      assertArrayEquals(new char[] {'h', 'l'}, charArray0);
      assertArrayEquals(new char[] {'h', 'l'}, charArray1);
      assertEquals(2, charArray0.length);
      assertEquals(2, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      
      int[] intArray0 = new int[6];
      intArray0[0] = (int) (short)1070;
      intArray0[1] = 11;
      intArray0[2] = (int) 'h';
      intArray0[3] = (int) (short)0;
      intArray0[4] = (int) 'h';
      intArray0[5] = (int) 'h';
      int[] intArray1 = ArrayUtils.add(intArray0, 528);
      assertArrayEquals(new int[] {1070, 11, 104, 0, 104, 104, 528}, intArray1);
      assertArrayEquals(new int[] {1070, 11, 104, 0, 104, 104}, intArray0);
      assertEquals(7, intArray1.length);
      assertEquals(6, intArray0.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
      assertNotNull(intArray1);
  }

  @Test(timeout = 4000)
  public void test0811()  throws Throwable  {
      int[] intArray0 = new int[0];
      Double double0 = new Double(216.6336F);
      assertNotNull(double0);
      assertEquals(216.63360595703125, (double)double0, 0.01);
      
      double[] doubleArray0 = ArrayUtils.toPrimitive((Double[]) null);
      assertNull(doubleArray0);
      
      boolean boolean0 = ArrayUtils.isEmpty((Object[]) null);
      assertTrue(boolean0);
      
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short)43;
      shortArray0[1] = (short) (-1);
      shortArray0[2] = (short) (-2473);
      short short0 = (short)3054;
      shortArray0[3] = (short)3054;
      shortArray0[4] = (short)64;
      shortArray0[5] = (short)368;
      shortArray0[6] = (short)0;
      // Undeclared exception!
      try { 
        ArrayUtils.add(shortArray0, (int) (short)3054, (short)49);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3054, Length: 7
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0812()  throws Throwable  {
      float[] floatArray0 = new float[1];
      floatArray0[0] = (-2239.035F);
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = false;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)106;
      byte[] byteArray1 = ArrayUtils.subarray(byteArray0, 78, (int) (byte)106);
      assertArrayEquals(new byte[] {(byte)106}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(1, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      
      long[] longArray0 = new long[1];
      longArray0[0] = 2147483647L;
      ArrayUtils.reverse(longArray0, 1573, 78);
      assertArrayEquals(new long[] {2147483647L}, longArray0);
      assertEquals(1, longArray0.length);
      
      byte[] byteArray2 = ArrayUtils.subarray(byteArray0, 78, 2036);
      assertArrayEquals(new byte[] {(byte)106}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray2);
      assertEquals(1, byteArray0.length);
      assertEquals(0, byteArray2.length);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray2, byteArray0);
      assertSame(byteArray2, byteArray1);
      assertNotNull(byteArray2);
  }

  @Test(timeout = 4000)
  public void test0813()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 914.944001638755;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (-1202.7635315971), 0.0);
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertArrayEquals(new double[] {0.0, 914.944001638755, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      assertNotNull(bitSet0);
      
      Float[] floatArray0 = new Float[2];
      Float float0 = new Float(0.0F);
      assertNotNull(float0);
      assertEquals(0.0F, (float)float0, 0.01F);
      
      floatArray0[0] = float0;
      Float float1 = new Float((-1789.9796F));
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertNotNull(float1);
      assertEquals((-1789.9796F), (float)float1, 0.01F);
      
      floatArray0[1] = float1;
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0);
      assertArrayEquals(new float[] {0.0F, (-1789.9796F)}, floatArray1, 0.01F);
      assertEquals(2, floatArray0.length);
      assertEquals(2, floatArray1.length);
      assertNotNull(floatArray1);
      
      Class<Float>[] classArray0 = (Class<Float>[]) Array.newInstance(Class.class, 7);
      Class<Float> class0 = Float.class;
      classArray0[0] = class0;
      Class<Float> class1 = Float.class;
      classArray0[1] = class1;
      Class<Float> class2 = Float.class;
      classArray0[2] = class2;
      Class<Float> class3 = Float.class;
      classArray0[3] = class3;
      Class<Float> class4 = Float.class;
      classArray0[4] = class4;
      Class<Float> class5 = Float.class;
      classArray0[5] = class5;
      Class<Float> class6 = Float.class;
      classArray0[6] = class6;
      Class<?>[] classArray1 = ArrayUtils.nullToEmpty(classArray0);
      assertEquals(7, classArray1.length);
      assertEquals(7, classArray0.length);
      assertNotNull(classArray1);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)92;
      byteArray0[1] = (byte) (-94);
      byte[] byteArray1 = ArrayUtils.subarray(byteArray0, (int) (byte)92, (int) (byte)92);
      assertArrayEquals(new byte[] {(byte)92, (byte) (-94)}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(2, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
  }

  @Test(timeout = 4000)
  public void test0814()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)17;
      byteArray0[1] = (byte)0;
      Long long0 = new Long((-2880L));
      assertNotNull(long0);
      assertEquals((-2880L), (long)long0);
      
      Long long1 = new Long(0L);
      assertFalse(long1.equals((Object)long0));
      assertNotNull(long1);
      assertEquals(0L, (long)long1);
      
      Long long2 = new Long((-2880L));
      assertFalse(long2.equals((Object)long1));
      assertTrue(long2.equals((Object)long0));
      assertNotNull(long2);
      assertEquals((-2880L), (long)long2);
      
      Long long3 = new Long(0L);
      assertTrue(long3.equals((Object)long1));
      assertFalse(long3.equals((Object)long0));
      assertFalse(long3.equals((Object)long2));
      assertNotNull(long3);
      assertEquals(0L, (long)long3);
      
      Long[] longArray0 = new Long[1];
      longArray0[0] = long2;
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0, 1413L);
      assertArrayEquals(new long[] {(-2880L)}, longArray1);
      assertEquals(1, longArray0.length);
      assertEquals(1, longArray1.length);
      assertNotNull(longArray1);
      
      float[] floatArray0 = new float[0];
      ArrayUtils.swap(floatArray0, (-44), (-44), 2922);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
      
      boolean boolean0 = ArrayUtils.contains(longArray1, (long) longArray0[0]);
      assertArrayEquals(new long[] {(-2880L)}, longArray1);
      assertEquals(1, longArray0.length);
      assertEquals(1, longArray1.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0815()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byte[] byteArray1 = ArrayUtils.removeAllOccurences(byteArray0, (byte) (-85));
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray1);
      assertEquals(5, byteArray0.length);
      assertEquals(5, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      
      int[] intArray0 = new int[0];
      int[] intArray1 = ArrayUtils.subarray(intArray0, 196, 560);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(intArray0, 1, 102);
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertFalse(intArray0.equals((Object)intArray1));
      assertNotSame(intArray0, intArray1);
      assertNotNull(bitSet0);
      
      ArrayUtils.swap((char[]) null, 54, 560, (-1608));
      byte[] byteArray2 = ArrayUtils.add(byteArray1, (byte)17);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)17}, byteArray2);
      assertEquals(5, byteArray0.length);
      assertEquals(5, byteArray1.length);
      assertEquals(6, byteArray2.length);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      assertNotNull(byteArray2);
      
      Byte byte0 = new Byte((byte) (-35));
      assertNotNull(byte0);
      assertEquals((byte) (-35), (byte)byte0);
      
      try { 
        Byte.valueOf("uE\"F:L>");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"uE\"F:L>\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test0816()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 196;
      intArray0[1] = 0;
      int[] intArray1 = ArrayUtils.subarray(intArray0, 32, 0);
      assertArrayEquals(new int[] {196, 0}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(2, intArray0.length);
      assertEquals(0, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)98;
      int int0 = ArrayUtils.indexOf(byteArray0, (byte)98);
      assertArrayEquals(new byte[] {(byte)98}, byteArray0);
      assertEquals(1, byteArray0.length);
      assertEquals(0, int0);
      
      String[] stringArray0 = new String[0];
      String[] stringArray1 = ArrayUtils.nullToEmpty(stringArray0);
      assertEquals(0, stringArray0.length);
      assertEquals(0, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertNotNull(stringArray1);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(intArray0, (int) (byte)98, (-1808));
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertArrayEquals(new int[] {196, 0}, intArray0);
      assertEquals(2, intArray0.length);
      assertFalse(intArray0.equals((Object)intArray1));
      assertNotSame(intArray0, intArray1);
      assertNotNull(bitSet0);
      
      ArrayUtils.swap((char[]) null, 32, 196, 0);
      boolean boolean0 = ArrayUtils.isEmpty((char[]) null);
      assertTrue(boolean0);
      
      int[] intArray2 = ArrayUtils.subarray(intArray0, 51, 98);
      assertArrayEquals(new int[] {196, 0}, intArray0);
      assertArrayEquals(new int[] {}, intArray2);
      assertEquals(2, intArray0.length);
      assertEquals(0, intArray2.length);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray0, intArray2);
      assertNotSame(intArray2, intArray0);
      assertSame(intArray2, intArray1);
      assertNotNull(intArray2);
      
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short) (byte)98;
      shortArray0[1] = (short)8856;
      shortArray0[2] = (short) (byte)98;
      shortArray0[3] = (short)131;
      shortArray0[4] = (short) (byte)98;
      shortArray0[5] = (short) (byte)98;
      shortArray0[6] = (short) (byte)98;
      shortArray0[7] = (short) (byte)98;
      short[] shortArray1 = ArrayUtils.addFirst(shortArray0, (short) (-1266));
      assertArrayEquals(new short[] {(short) (-1266), (short)98, (short)8856, (short)98, (short)131, (short)98, (short)98, (short)98, (short)98}, shortArray1);
      assertArrayEquals(new short[] {(short)98, (short)8856, (short)98, (short)131, (short)98, (short)98, (short)98, (short)98}, shortArray0);
      assertEquals(9, shortArray1.length);
      assertEquals(8, shortArray0.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertNotNull(shortArray1);
      
      short[] shortArray2 = ArrayUtils.clone(shortArray1);
      assertArrayEquals(new short[] {(short) (-1266), (short)98, (short)8856, (short)98, (short)131, (short)98, (short)98, (short)98, (short)98}, shortArray1);
      assertArrayEquals(new short[] {(short) (-1266), (short)98, (short)8856, (short)98, (short)131, (short)98, (short)98, (short)98, (short)98}, shortArray2);
      assertArrayEquals(new short[] {(short)98, (short)8856, (short)98, (short)131, (short)98, (short)98, (short)98, (short)98}, shortArray0);
      assertEquals(9, shortArray1.length);
      assertEquals(9, shortArray2.length);
      assertEquals(8, shortArray0.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertFalse(shortArray2.equals((Object)shortArray1));
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertNotSame(shortArray1, shortArray2);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray2, shortArray1);
      assertNotSame(shortArray2, shortArray0);
      assertNotSame(shortArray0, shortArray2);
      assertNotSame(shortArray0, shortArray1);
      assertNotNull(shortArray2);
      
      long[] longArray0 = new long[0];
      boolean boolean1 = ArrayUtils.contains(longArray0, (long) 196);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test0817()  throws Throwable  {
      Float[] floatArray0 = new Float[2];
      Float float0 = new Float((-1.0F));
      assertNotNull(float0);
      assertEquals((-1.0F), (float)float0, 0.01F);
      
      floatArray0[0] = float0;
      // Undeclared exception!
      try { 
        ArrayUtils.toPrimitive(floatArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0818()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-39);
      long[] longArray0 = new long[4];
      longArray0[0] = (long) (byte) (-39);
      longArray0[1] = (long) (byte)6;
      longArray0[2] = (long) (byte) (-39);
      longArray0[3] = (long) (byte) (-39);
      long[] longArray1 = ArrayUtils.removeAllOccurrences(longArray0, (-44L));
      assertArrayEquals(new long[] {(-39L), 6L, (-39L), (-39L)}, longArray0);
      assertArrayEquals(new long[] {(-39L), 6L, (-39L), (-39L)}, longArray1);
      assertEquals(4, longArray0.length);
      assertEquals(4, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
      
      ArrayUtils.reverse(byteArray0, (int) (byte) (-39), (-553));
      assertArrayEquals(new byte[] {(byte) (-39), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(8, byteArray0.length);
      
      ArrayUtils.shift(byteArray0, (-883), (-883), 127);
      assertArrayEquals(new byte[] {(byte) (-39), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(8, byteArray0.length);
      
      int[] intArray0 = new int[3];
      intArray0[0] = 560;
      intArray0[1] = 127;
      intArray0[2] = (-553);
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(longArray1, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 560, Length: 4
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0819()  throws Throwable  {
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)560;
      shortArray0[1] = (short)0;
      shortArray0[2] = (short)1545;
      shortArray0[3] = (short) (-4027);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-46);
      ArrayUtils.shift(byteArray0, 88);
      assertArrayEquals(new byte[] {(byte) (-46)}, byteArray0);
      assertEquals(1, byteArray0.length);
      
      char[] charArray0 = new char[5];
      charArray0[0] = '{';
      charArray0[1] = '/';
      charArray0[2] = '(';
      charArray0[3] = ',';
      charArray0[4] = '0';
      char[] charArray1 = ArrayUtils.removeElement(charArray0, '(');
      assertArrayEquals(new char[] {'{', '/', '(', ',', '0'}, charArray0);
      assertArrayEquals(new char[] {'{', '/', ',', '0'}, charArray1);
      assertEquals(5, charArray0.length);
      assertEquals(4, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
  }

  @Test(timeout = 4000)
  public void test0820()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[1] = 127;
      boolean boolean0 = ArrayUtils.isSorted(intArray0);
      assertArrayEquals(new int[] {0, 127}, intArray0);
      assertEquals(2, intArray0.length);
      assertTrue(boolean0);
      
      long[] longArray0 = new long[3];
      longArray0[0] = (long) 0;
      longArray0[1] = (long) 0;
      longArray0[2] = (long) 0;
      byte[] byteArray0 = new byte[0];
      ArrayUtils.shift(byteArray0, 17, (int) (byte)83, 127);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test0821()  throws Throwable  {
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short) (-1);
      shortArray0[1] = (short)43;
      char[] charArray0 = new char[7];
      charArray0[0] = '0';
      charArray0[2] = '0';
      charArray0[3] = '0';
      charArray0[4] = '0';
      long[] longArray0 = new long[4];
      longArray0[1] = (long) (short) (-1);
      longArray0[2] = (long) '0';
      longArray0[3] = (long) '0';
      boolean boolean0 = ArrayUtils.isSorted(longArray0);
      assertArrayEquals(new long[] {0L, (-1L), 48L, 48L}, longArray0);
      assertEquals(4, longArray0.length);
      assertFalse(boolean0);
      
      ArrayUtils.reverse(longArray0);
      assertArrayEquals(new long[] {48L, 48L, (-1L), 0L}, longArray0);
      assertEquals(4, longArray0.length);
      
      Object[] objectArray0 = ArrayUtils.nullToEmpty((Object[]) null);
      assertEquals(0, objectArray0.length);
      assertNotNull(objectArray0);
      
      long[] longArray1 = ArrayUtils.subarray(longArray0, (int) (short) (-1), (int) (short)993);
      assertArrayEquals(new long[] {48L, 48L, (-1L), 0L}, longArray0);
      assertArrayEquals(new long[] {48L, 48L, (-1L), 0L}, longArray1);
      assertEquals(4, longArray0.length);
      assertEquals(4, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
      
      Byte byte0 = new Byte((byte)110);
      assertNotNull(byte0);
      assertEquals((byte)110, (byte)byte0);
      
      boolean boolean1 = ArrayUtils.isSameLength(charArray0, (char[]) null);
      assertArrayEquals(new char[] {'0', '\u0000', '0', '0', '0', '\u0000', '\u0000'}, charArray0);
      assertEquals(7, charArray0.length);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      MockRandom mockRandom0 = new MockRandom(0L);
      assertNotNull(mockRandom0);
      
      int int0 = mockRandom0.nextInt();
      assertEquals(0, int0);
      
      LongStream longStream0 = mockRandom0.longs();
      assertNotNull(longStream0);
      
      ArrayUtils.shuffle(longArray0, (Random) mockRandom0);
      assertArrayEquals(new long[] {48L, (-1L), 0L, 48L}, longArray0);
      assertEquals(4, longArray0.length);
      assertFalse(longArray0.equals((Object)longArray1));
      assertNotSame(longArray0, longArray1);
  }

  @Test(timeout = 4000)
  public void test0822()  throws Throwable  {
      long[] longArray0 = new long[7];
      longArray0[0] = 1553L;
      longArray0[1] = 0L;
      longArray0[2] = (-1L);
      longArray0[3] = (-1L);
      longArray0[5] = 0L;
      longArray0[6] = 0L;
      ArrayUtils.shift(longArray0, 182);
      assertArrayEquals(new long[] {1553L, 0L, (-1L), (-1L), 0L, 0L, 0L}, longArray0);
      assertEquals(7, longArray0.length);
      
      double[] doubleArray0 = new double[5];
      boolean boolean0 = ArrayUtils.isSameLength(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)2;
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte)84, (int) (byte)84);
      assertArrayEquals(new byte[] {(byte)2}, byteArray0);
      assertEquals(1, byteArray0.length);
      assertEquals((-1), int0);
      
      char[] charArray0 = new char[7];
      charArray0[0] = '3';
      charArray0[1] = '^';
      charArray0[2] = '\\';
      charArray0[3] = 'l';
      charArray0[4] = '=';
      charArray0[5] = '|';
      charArray0[6] = '[';
      char[] charArray1 = new char[3];
      assertFalse(charArray1.equals((Object)charArray0));
      
      charArray1[0] = '\\';
      charArray1[1] = '^';
      charArray1[2] = '[';
      boolean boolean1 = ArrayUtils.isSameLength(charArray0, charArray1);
      assertArrayEquals(new char[] {'\\', '^', '['}, charArray1);
      assertArrayEquals(new char[] {'3', '^', '\\', 'l', '=', '|', '['}, charArray0);
      assertEquals(3, charArray1.length);
      assertEquals(7, charArray0.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(boolean1 == boolean0);
      assertFalse(charArray0.equals((Object)charArray1));
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray0, charArray1);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test0823()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-46);
      byteArray0[1] = (byte) (-46);
      byteArray0[2] = (byte)123;
      ArrayUtils.shift(byteArray0, (-2146950504));
      assertArrayEquals(new byte[] {(byte) (-46), (byte) (-46), (byte)123}, byteArray0);
      assertEquals(3, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test0824()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 1580.0;
      doubleArray0[1] = (-1.0);
      doubleArray0[2] = (-1.0);
      doubleArray0[3] = 210.80385843910764;
      float[] floatArray0 = new float[7];
      floatArray0[0] = 2377.054F;
      floatArray0[1] = 1103.0F;
      floatArray0[2] = 1635.0271F;
      floatArray0[3] = 42.0F;
      floatArray0[4] = 32.0F;
      floatArray0[5] = 1.0F;
      floatArray0[6] = 2876.5198F;
      boolean boolean0 = ArrayUtils.isSorted(floatArray0);
      assertArrayEquals(new float[] {2377.054F, 1103.0F, 1635.0271F, 42.0F, 32.0F, 1.0F, 2876.5198F}, floatArray0, 0.01F);
      assertEquals(7, floatArray0.length);
      assertFalse(boolean0);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (-3482L);
      longArray0[1] = (-3482L);
      int int0 = ArrayUtils.indexOf(longArray0, (-3482L));
      assertArrayEquals(new long[] {(-3482L), (-3482L)}, longArray0);
      assertEquals(2, longArray0.length);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test0825()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)1;
      float[] floatArray0 = new float[2];
      floatArray0[0] = 1.0F;
      floatArray0[1] = 1192.67F;
      ArrayUtils.reverse(floatArray0, (int) (byte)1, 13);
      assertArrayEquals(new float[] {1.0F, 1192.67F}, floatArray0, 0.01F);
      assertEquals(2, floatArray0.length);
      
      Double double0 = new Double((-3021.60676989));
      assertNotNull(double0);
      assertEquals((-3021.60676989), (double)double0, 0.01);
      
      Double double1 = new Double(1.0F);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      assertEquals(1.0, (double)double1, 0.01);
      
      Double double2 = new Double(980.84032930317);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertNotNull(double2);
      assertEquals(980.84032930317, (double)double2, 0.01);
      
      Double double3 = new Double((-1375.5));
      assertNotEquals((double)double3, (double)double1, 0.01);
      assertNotEquals((double)double3, (double)double2, 0.01);
      assertNotEquals((double)double3, (double)double0, 0.01);
      assertNotNull(double3);
      assertEquals((-1375.5), (double)double3, 0.01);
      
      Double double4 = new Double(13);
      assertNotEquals((double)double4, (double)double3, 0.01);
      assertNotEquals((double)double4, (double)double1, 0.01);
      assertNotEquals((double)double4, (double)double0, 0.01);
      assertNotEquals((double)double4, (double)double2, 0.01);
      assertNotNull(double4);
      assertEquals(13.0, (double)double4, 0.01);
      
      Double double5 = new Double(0.7);
      assertNotEquals((double)double5, (double)double0, 0.01);
      assertNotEquals((double)double5, (double)double1, 0.01);
      assertNotEquals((double)double5, (double)double2, 0.01);
      assertNotEquals((double)double5, (double)double3, 0.01);
      assertNotEquals((double)double5, (double)double4, 0.01);
      assertNotNull(double5);
      assertEquals(0.7, (double)double5, 0.01);
      
      Double[] doubleArray0 = new Double[2];
      doubleArray0[0] = double4;
      doubleArray0[1] = double3;
      Double[] doubleArray1 = ArrayUtils.nullToEmpty(doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertSame(doubleArray0, doubleArray1);
      assertSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      
      float[] floatArray1 = ArrayUtils.insert((int) (byte)1, floatArray0, floatArray0);
      assertArrayEquals(new float[] {1.0F, 1.0F, 1192.67F, 1192.67F}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {1.0F, 1192.67F}, floatArray0, 0.01F);
      assertEquals(4, floatArray1.length);
      assertEquals(2, floatArray0.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertNotNull(floatArray1);
      
      int[] intArray0 = new int[7];
      intArray0[0] = (int) (byte)1;
      intArray0[1] = 13;
      intArray0[2] = (int) (byte)1;
      intArray0[3] = (int) (byte)1;
      intArray0[4] = 13;
      intArray0[5] = (int) (byte)1;
      intArray0[6] = 13;
      int int0 = ArrayUtils.indexOf(intArray0, 1, 1);
      assertArrayEquals(new int[] {1, 13, 1, 1, 13, 1, 13}, intArray0);
      assertEquals(7, intArray0.length);
      assertEquals(2, int0);
      
      boolean boolean0 = ArrayUtils.isSorted(floatArray1);
      assertArrayEquals(new float[] {1.0F, 1.0F, 1192.67F, 1192.67F}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {1.0F, 1192.67F}, floatArray0, 0.01F);
      assertEquals(4, floatArray1.length);
      assertEquals(2, floatArray0.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0826()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      int int0 = ArrayUtils.indexOf(intArray0, 0, 0);
      assertArrayEquals(new int[] {0}, intArray0);
      assertEquals(1, intArray0.length);
      assertEquals(0, int0);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) 99;
      floatArray0[1] = (float) 0;
      floatArray0[2] = (float) 99;
      floatArray0[3] = (float) 0;
      boolean boolean0 = ArrayUtils.isSorted(floatArray0);
      assertArrayEquals(new float[] {99.0F, 0.0F, 99.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(4, floatArray0.length);
      assertFalse(boolean0);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) 0;
      longArray0[1] = 3013L;
      int int1 = ArrayUtils.indexOf(longArray0, 1L);
      assertArrayEquals(new long[] {0L, 3013L}, longArray0);
      assertEquals(2, longArray0.length);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      ArrayUtils.shift(intArray0, (-3655), 34, 99);
      assertArrayEquals(new int[] {0}, intArray0);
      assertEquals(1, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test0827()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      long[] longArray0 = new long[0];
      ArrayUtils.swap(longArray0, 1383, 1383);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      MutableInt mutableInt0 = new MutableInt(1383);
      assertEquals(1383, mutableInt0.intValue());
      assertEquals(1383.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(1383.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(1383, (int)mutableInt0.toInteger());
      assertEquals((byte)103, mutableInt0.byteValue());
      assertEquals(1383, (int)mutableInt0.getValue());
      assertEquals((short)1383, mutableInt0.shortValue());
      assertEquals("1383", mutableInt0.toString());
      assertEquals(1383L, mutableInt0.longValue());
      assertNotNull(mutableInt0);
      
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, (-2338), (-1131));
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertEquals(3, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = 51.0F;
      floatArray0[1] = (float) Integer.MAX_VALUE;
      floatArray0[2] = (float) (byte)0;
      floatArray0[3] = (float) 1383;
      floatArray0[4] = (float) (-2338);
      boolean boolean0 = ArrayUtils.isSorted(floatArray0);
      assertArrayEquals(new float[] {51.0F, 2.14748365E9F, 0.0F, 1383.0F, (-2338.0F)}, floatArray0, 0.01F);
      assertEquals(5, floatArray0.length);
      assertFalse(boolean0);
      
      int int0 = ArrayUtils.indexOf(longArray0, 1910L);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0828()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, 781, 781);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertEquals(2, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) 781;
      boolean boolean0 = ArrayUtils.isSorted(floatArray0);
      assertArrayEquals(new float[] {781.0F}, floatArray0, 0.01F);
      assertEquals(1, floatArray0.length);
      assertTrue(boolean0);
      
      long[] longArray0 = new long[0];
      int int0 = ArrayUtils.indexOf((long[]) null, 2147483647L);
      assertEquals((-1), int0);
      
      int[] intArray0 = new int[2];
      intArray0[0] = 4;
      intArray0[1] = (-2830);
      ArrayUtils.shift(intArray0, (-5790), (-2830), (-5790));
      assertArrayEquals(new int[] {4, (-2830)}, intArray0);
      assertEquals(2, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test0829()  throws Throwable  {
      char[] charArray0 = new char[10];
      Long long0 = new Long(495L);
      assertNotNull(long0);
      assertEquals(495L, (long)long0);
      
      long[] longArray0 = new long[1];
      long[] longArray1 = ArrayUtils.removeElement(longArray0, 495L);
      assertArrayEquals(new long[] {0L}, longArray0);
      assertArrayEquals(new long[] {0L}, longArray1);
      assertEquals(1, longArray0.length);
      assertEquals(1, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
      
      float[] floatArray0 = new float[0];
      float[] floatArray1 = ArrayUtils.removeAllOccurences(floatArray0, 560.0F);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      
      boolean boolean0 = ArrayUtils.isSorted(floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertNotSame(floatArray0, floatArray1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0830()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-39);
      byteArray0[1] = (byte)0;
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      booleanArray0[4] = false;
      booleanArray0[5] = true;
      booleanArray0[6] = true;
      booleanArray0[7] = false;
      booleanArray0[8] = false;
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, Integer.MAX_VALUE, (int) (byte)0);
      assertTrue(Arrays.equals(new boolean[] {false, true, false, true, false, true, true, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertEquals(9, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) (byte) (-39);
      floatArray0[1] = (float) (byte) (-39);
      floatArray0[2] = (float) (byte)0;
      boolean boolean0 = ArrayUtils.isSorted(floatArray0);
      assertArrayEquals(new float[] {(-39.0F), (-39.0F), 0.0F}, floatArray0, 0.01F);
      assertEquals(3, floatArray0.length);
      assertTrue(boolean0);
      
      long[] longArray0 = new long[4];
      longArray0[0] = (long) (byte)0;
      longArray0[1] = (-3482L);
      longArray0[2] = (-2682L);
      longArray0[3] = 3013L;
      int int0 = ArrayUtils.indexOf(longArray0, (-3482L));
      assertArrayEquals(new long[] {0L, (-3482L), (-2682L), 3013L}, longArray0);
      assertEquals(4, longArray0.length);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test0831()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 2798.735380718;
      doubleArray0[1] = 0.0;
      int[] intArray0 = new int[5];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = (-2147184749);
      intArray0[4] = (-2147184749);
      ArrayUtils.swap(intArray0, (-2147184749), 0, 1041);
      assertArrayEquals(new int[] {0, 0, 0, (-2147184749), (-2147184749)}, intArray0);
      assertEquals(5, intArray0.length);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      Object[] objectArray0 = new Object[1];
      double double0 = mockRandom0.nextDouble();
      assertEquals(0.0, double0, 0.01);
      
      objectArray0[0] = (Object) (-2147184749);
      Object object0 = ArrayUtils.get(objectArray0, 288);
      assertEquals(1, objectArray0.length);
      assertNull(object0);
      
      ArrayUtils.shuffle(objectArray0, (Random) mockRandom0);
      assertEquals(1, objectArray0.length);
      
      MutableInt mutableInt0 = new MutableInt(Integer.MAX_VALUE);
      assertEquals("2147483647", mutableInt0.toString());
      assertEquals((byte) (-1), mutableInt0.byteValue());
      assertEquals(Integer.MAX_VALUE, (int)mutableInt0.getValue());
      assertEquals(Integer.MAX_VALUE, (int)mutableInt0.toInteger());
      assertEquals(Integer.MAX_VALUE, mutableInt0.intValue());
      assertEquals((short) (-1), mutableInt0.shortValue());
      assertEquals(2.14748365E9F, mutableInt0.floatValue(), 0.01F);
      assertEquals(2.147483647E9, mutableInt0.doubleValue(), 0.01);
      assertEquals(2147483647L, mutableInt0.longValue());
      assertNotNull(mutableInt0);
      
      try { 
        Long.valueOf(";0A+Ug{C4!v+W3$}");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \";0A+Ug{C4!v+W3$}\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test0832()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      ArrayUtils.swap((int[]) null, (-2147184749), (-2147184749), (-2147184749));
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      double double0 = mockRandom0.nextGaussian();
      assertEquals(0.0, double0, 0.01);
      
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) true;
      objectArray0[1] = (Object) true;
      Object object0 = ArrayUtils.get(objectArray0, 0);
      assertEquals(2, objectArray0.length);
      assertNotNull(object0);
      assertEquals(true, object0);
      
      ArrayUtils.shuffle(objectArray0, (Random) mockRandom0);
      assertEquals(2, objectArray0.length);
      
      MutableInt mutableInt0 = new MutableInt(0);
      assertEquals(0.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(0.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(0L, mutableInt0.longValue());
      assertEquals((byte)0, mutableInt0.byteValue());
      assertEquals(0, (int)mutableInt0.getValue());
      assertEquals(0, (int)mutableInt0.toInteger());
      assertEquals("0", mutableInt0.toString());
      assertEquals(0, mutableInt0.intValue());
      assertEquals((short)0, mutableInt0.shortValue());
      assertNotNull(mutableInt0);
      
      MutableInt mutableInt1 = new MutableInt(0);
      assertEquals((byte)0, mutableInt1.byteValue());
      assertEquals(0, (int)mutableInt1.getValue());
      assertEquals(0, (int)mutableInt1.toInteger());
      assertEquals(0, mutableInt1.intValue());
      assertEquals((short)0, mutableInt1.shortValue());
      assertEquals("0", mutableInt1.toString());
      assertEquals(0.0F, mutableInt1.floatValue(), 0.01F);
      assertEquals(0.0, mutableInt1.doubleValue(), 0.01);
      assertEquals(0L, mutableInt1.longValue());
      assertTrue(mutableInt1.equals((Object)mutableInt0));
      assertNotNull(mutableInt1);
      
      int int0 = mutableInt1.getAndDecrement();
      assertEquals((-1), (int)mutableInt1.toInteger());
      assertEquals((-1), (int)mutableInt1.getValue());
      assertEquals("-1", mutableInt1.toString());
      assertEquals((byte) (-1), mutableInt1.byteValue());
      assertEquals((-1), mutableInt1.intValue());
      assertEquals((short) (-1), mutableInt1.shortValue());
      assertEquals((-1.0F), mutableInt1.floatValue(), 0.01F);
      assertEquals((-1.0), mutableInt1.doubleValue(), 0.01);
      assertEquals((-1L), mutableInt1.longValue());
      assertFalse(mutableInt1.equals((Object)mutableInt0));
      assertNotSame(mutableInt1, mutableInt0);
      assertEquals(0, int0);
      
      MutableInt mutableInt2 = new MutableInt((-2147184749));
      assertEquals("-2147184749", mutableInt2.toString());
      assertEquals((-2147184749), mutableInt2.intValue());
      assertEquals((-2.14718477E9F), mutableInt2.floatValue(), 0.01F);
      assertEquals((short) (-28781), mutableInt2.shortValue());
      assertEquals((-2147184749), (int)mutableInt2.toInteger());
      assertEquals((-2147184749), (int)mutableInt2.getValue());
      assertEquals((-2147184749L), mutableInt2.longValue());
      assertEquals((byte) (-109), mutableInt2.byteValue());
      assertEquals((-2.147184749E9), mutableInt2.doubleValue(), 0.01);
      assertFalse(mutableInt2.equals((Object)mutableInt1));
      assertFalse(mutableInt2.equals((Object)mutableInt0));
      assertNotNull(mutableInt2);
      
      Integer integer0 = mutableInt0.getValue();
      assertEquals(0.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(0.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(0L, mutableInt0.longValue());
      assertEquals((byte)0, mutableInt0.byteValue());
      assertEquals(0, (int)mutableInt0.getValue());
      assertEquals(0, (int)mutableInt0.toInteger());
      assertEquals("0", mutableInt0.toString());
      assertEquals(0, mutableInt0.intValue());
      assertEquals((short)0, mutableInt0.shortValue());
      assertTrue(integer0.equals((Object)int0));
      assertFalse(mutableInt0.equals((Object)mutableInt2));
      assertFalse(mutableInt0.equals((Object)mutableInt1));
      assertNotSame(mutableInt0, mutableInt2);
      assertNotSame(mutableInt0, mutableInt1);
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      boolean boolean0 = ArrayUtils.isEmpty(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, true, true, false, false, false, false}, booleanArray0));
      assertEquals(7, booleanArray0.length);
      assertFalse(boolean0);
      
      Short short0 = new Short((short)69);
      assertNotNull(short0);
      assertEquals((short)69, (short)short0);
      
      Float float0 = new Float(1.5);
      assertNotNull(float0);
      assertEquals(1.5F, (float)float0, 0.01F);
      
      boolean boolean1 = ArrayUtils.contains(objectArray0, (Object) float0);
      assertEquals(2, objectArray0.length);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test0833()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 2798.735380718;
      doubleArray0[1] = 0.0;
      int[] intArray0 = new int[2];
      intArray0[0] = (-2147184749);
      intArray0[1] = (-2147184749);
      int int0 = Integer.MAX_VALUE;
      ArrayUtils.swap(intArray0, Integer.MAX_VALUE, 0, Integer.MAX_VALUE);
      assertArrayEquals(new int[] {(-2147184749), (-2147184749)}, intArray0);
      assertEquals(2, intArray0.length);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) (-2147184749);
      objectArray0[1] = (Object) (-2147184749);
      objectArray0[2] = (Object) mockRandom0;
      objectArray0[3] = (Object) 0.0;
      objectArray0[4] = (Object) (-2147184749);
      Object object0 = ArrayUtils.get(objectArray0, (-2093));
      assertEquals(5, objectArray0.length);
      assertNull(object0);
      
      ArrayUtils.shuffle(objectArray0, (Random) mockRandom0);
      assertEquals(5, objectArray0.length);
      
      int int1 = 11;
      MutableInt mutableInt0 = new MutableInt(Integer.MAX_VALUE);
      assertEquals(2147483647L, mutableInt0.longValue());
      assertEquals(Integer.MAX_VALUE, mutableInt0.intValue());
      assertEquals((short) (-1), mutableInt0.shortValue());
      assertEquals(2.147483647E9, mutableInt0.doubleValue(), 0.01);
      assertEquals("2147483647", mutableInt0.toString());
      assertEquals(2.14748365E9F, mutableInt0.floatValue(), 0.01F);
      assertEquals((byte) (-1), mutableInt0.byteValue());
      assertEquals(Integer.MAX_VALUE, (int)mutableInt0.getValue());
      assertEquals(Integer.MAX_VALUE, (int)mutableInt0.toInteger());
      assertNotNull(mutableInt0);
      
      try { 
        Long.valueOf("J");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"J\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test0834()  throws Throwable  {
      float[] floatArray0 = new float[3];
      floatArray0[0] = (-1397.05F);
      Long long0 = new Long(1413L);
      assertNotNull(long0);
      assertEquals(1413L, (long)long0);
      
      Long[] longArray0 = new Long[7];
      longArray0[0] = long0;
      longArray0[1] = long0;
      longArray0[2] = long0;
      longArray0[3] = long0;
      longArray0[4] = long0;
      longArray0[5] = long0;
      longArray0[6] = long0;
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0, (long) longArray0[3]);
      assertArrayEquals(new long[] {1413L, 1413L, 1413L, 1413L, 1413L, 1413L, 1413L}, longArray1);
      assertEquals(7, longArray0.length);
      assertEquals(7, longArray1.length);
      assertNotNull(longArray1);
      
      ArrayUtils.reverse((Object[]) longArray0, (-1642), 1036);
      assertEquals(7, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test0835()  throws Throwable  {
      Long[] longArray0 = new Long[9];
      Long long0 = new Long((-2009L));
      assertNotNull(long0);
      assertEquals((-2009L), (long)long0);
      
      Long long1 = new Long((-1353L));
      assertFalse(long1.equals((Object)long0));
      assertNotNull(long1);
      assertEquals((-1353L), (long)long1);
      
      Long long2 = new Long(0L);
      assertFalse(long2.equals((Object)long0));
      assertFalse(long2.equals((Object)long1));
      assertNotNull(long2);
      assertEquals(0L, (long)long2);
      
      Long long3 = new Long(0L);
      assertTrue(long3.equals((Object)long2));
      assertFalse(long3.equals((Object)long1));
      assertFalse(long3.equals((Object)long0));
      assertNotNull(long3);
      assertEquals(0L, (long)long3);
      
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0, (-266L));
      assertArrayEquals(new long[] {(-266L), (-266L), (-266L), (-266L), (-266L), (-266L), (-266L), (-266L), (-266L)}, longArray1);
      assertEquals(9, longArray0.length);
      assertEquals(9, longArray1.length);
      assertNotNull(longArray1);
      
      Double double0 = new Double((-2009L));
      assertNotNull(double0);
      assertEquals((-2009.0), (double)double0, 0.01);
      
      Integer integer0 = Integer.valueOf(852);
      assertNotNull(integer0);
      assertEquals(852, (int)integer0);
      
      Boolean boolean0 = Boolean.FALSE;
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      boolean boolean1 = ArrayUtils.isSameType(long3, long3);
      assertTrue(long3.equals((Object)long2));
      assertFalse(long3.equals((Object)long1));
      assertFalse(long3.equals((Object)long0));
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test0836()  throws Throwable  {
      Character[] characterArray0 = new Character[2];
      short[] shortArray0 = new short[0];
      int int0 = ArrayUtils.indexOf(shortArray0, (short)329, 1180);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray0.length);
      assertEquals((-1), int0);
      
      ArrayUtils.reverse((Object[]) characterArray0);
      assertEquals(2, characterArray0.length);
  }

  @Test(timeout = 4000)
  public void test0837()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)17;
      byteArray0[1] = (byte)0;
      Long long0 = new Long((-2880L));
      assertNotNull(long0);
      assertEquals((-2880L), (long)long0);
      
      Long long1 = new Long(0L);
      assertFalse(long1.equals((Object)long0));
      assertNotNull(long1);
      assertEquals(0L, (long)long1);
      
      Long long2 = new Long((-2880L));
      assertFalse(long2.equals((Object)long1));
      assertTrue(long2.equals((Object)long0));
      assertNotNull(long2);
      assertEquals((-2880L), (long)long2);
      
      Long long3 = new Long(0L);
      assertTrue(long3.equals((Object)long1));
      assertFalse(long3.equals((Object)long2));
      assertFalse(long3.equals((Object)long0));
      assertNotNull(long3);
      assertEquals(0L, (long)long3);
      
      Long[] longArray0 = new Long[1];
      longArray0[0] = long2;
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0, 1413L);
      assertArrayEquals(new long[] {(-2880L)}, longArray1);
      assertEquals(1, longArray0.length);
      assertEquals(1, longArray1.length);
      assertNotNull(longArray1);
      
      ArrayUtils.reverse((Object[]) longArray0, (int) (byte)17, 2370);
      assertEquals(1, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test0838()  throws Throwable  {
      float[] floatArray0 = new float[3];
      floatArray0[0] = (-1397.05F);
      floatArray0[1] = 2381.4106F;
      floatArray0[2] = (-1.0F);
      float[] floatArray1 = ArrayUtils.nullToEmpty(floatArray0);
      assertArrayEquals(new float[] {(-1397.05F), 2381.4106F, (-1.0F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-1397.05F), 2381.4106F, (-1.0F)}, floatArray1, 0.01F);
      assertEquals(3, floatArray0.length);
      assertEquals(3, floatArray1.length);
      assertSame(floatArray0, floatArray1);
      assertSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      
      int int0 = 50;
      int[] intArray0 = null;
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(floatArray0, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Arrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test0839()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-39);
      int int0 = new Byte((byte) (-39));
      assertEquals((byte) (-39), int0);
      
      long[] longArray0 = new long[0];
      int int1 = ArrayUtils.lastIndexOf(longArray0, 2226L, 6);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      Long[] longArray1 = ArrayUtils.toObject(longArray0);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertNotNull(longArray1);
      
      char[] charArray0 = new char[4];
      charArray0[0] = '\'';
      charArray0[1] = 'W';
      charArray0[2] = 'g';
      charArray0[3] = 'W';
      char[] charArray1 = ArrayUtils.subarray(charArray0, 2146413495, 1178);
      assertArrayEquals(new char[] {'\'', 'W', 'g', 'W'}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertEquals(4, charArray0.length);
      assertEquals(0, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
  }

  @Test(timeout = 4000)
  public void test0840()  throws Throwable  {
      float[] floatArray0 = new float[5];
      floatArray0[0] = 0.0F;
      floatArray0[1] = 327.0F;
      long[] longArray0 = new long[4];
      longArray0[0] = (long) 288;
      longArray0[1] = (-1909L);
      longArray0[2] = (-989L);
      longArray0[3] = 0L;
      Long[] longArray1 = ArrayUtils.toObject(longArray0);
      assertArrayEquals(new long[] {288L, (-1909L), (-989L), 0L}, longArray0);
      assertEquals(4, longArray0.length);
      assertEquals(4, longArray1.length);
      assertNotNull(longArray1);
      
      char[] charArray0 = new char[3];
      charArray0[0] = ')';
      charArray0[1] = 'P';
      charArray0[2] = 'F';
      char[] charArray1 = ArrayUtils.subarray(charArray0, 288, 288);
      assertArrayEquals(new char[] {')', 'P', 'F'}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertEquals(3, charArray0.length);
      assertEquals(0, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
  }

  @Test(timeout = 4000)
  public void test0841()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[0] = 'H';
      charArray0[1] = 'i';
      charArray0[2] = ' ';
      charArray0[3] = 'W';
      charArray0[4] = 'Z';
      charArray0[5] = 'O';
      charArray0[6] = 'u';
      char[] charArray1 = ArrayUtils.subarray(charArray0, (-2105597873), (-2450));
      assertArrayEquals(new char[] {'H', 'i', ' ', 'W', 'Z', 'O', 'u'}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertEquals(7, charArray0.length);
      assertEquals(0, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
  }

  @Test(timeout = 4000)
  public void test0842()  throws Throwable  {
      float[] floatArray0 = new float[3];
      floatArray0[0] = (-1397.05F);
      floatArray0[1] = 2381.4106F;
      long[] longArray0 = new long[3];
      longArray0[0] = (-989L);
      longArray0[1] = (-989L);
      longArray0[2] = (-1909L);
      Long[] longArray1 = ArrayUtils.toObject(longArray0);
      assertArrayEquals(new long[] {(-989L), (-989L), (-1909L)}, longArray0);
      assertEquals(3, longArray0.length);
      assertEquals(3, longArray1.length);
      assertNotNull(longArray1);
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'F';
      charArray0[1] = 'P';
      charArray0[2] = 'F';
      charArray0[3] = 'j';
      char[] charArray1 = ArrayUtils.subarray(charArray0, (-962), (-962));
      assertArrayEquals(new char[] {'F', 'P', 'F', 'j'}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertEquals(4, charArray0.length);
      assertEquals(0, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
  }

  @Test(timeout = 4000)
  public void test0843()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 2798.735380718;
      doubleArray0[1] = (-1634.642338);
      doubleArray0[2] = (-2703.0);
      doubleArray0[3] = 1757.16516391848;
      int[] intArray0 = new int[3];
      intArray0[0] = (-448);
      intArray0[1] = 0;
      intArray0[2] = 0;
      ArrayUtils.swap(intArray0, (-448), 0, (-2147184749));
      assertArrayEquals(new int[] {(-448), 0, 0}, intArray0);
      assertEquals(3, intArray0.length);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) (-448);
      objectArray0[1] = (Object) 0;
      char[] charArray0 = new char[7];
      charArray0[0] = '\'';
      charArray0[1] = '\"';
      charArray0[2] = '\"';
      charArray0[3] = '\'';
      charArray0[4] = '\'';
      charArray0[5] = '\'';
      charArray0[6] = '\'';
      char[] charArray1 = ArrayUtils.removeAllOccurences(charArray0, 'a');
      assertArrayEquals(new char[] {'\'', '\"', '\"', '\'', '\'', '\'', '\''}, charArray1);
      assertArrayEquals(new char[] {'\'', '\"', '\"', '\'', '\'', '\'', '\''}, charArray0);
      assertEquals(7, charArray1.length);
      assertEquals(7, charArray0.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray0, charArray1);
      assertNotNull(charArray1);
  }

  @Test(timeout = 4000)
  public void test0844()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = 'o';
      charArray0[1] = ')';
      charArray0[2] = ')';
      charArray0[3] = ')';
      charArray0[4] = ')';
      charArray0[5] = ')';
      char[] charArray1 = ArrayUtils.removeAllOccurences(charArray0, 'o');
      assertArrayEquals(new char[] {'o', ')', ')', ')', ')', ')'}, charArray0);
      assertArrayEquals(new char[] {')', ')', ')', ')', ')'}, charArray1);
      assertEquals(6, charArray0.length);
      assertEquals(5, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      
      char[] charArray2 = ArrayUtils.nullToEmpty(charArray1);
      assertArrayEquals(new char[] {'o', ')', ')', ')', ')', ')'}, charArray0);
      assertArrayEquals(new char[] {')', ')', ')', ')', ')'}, charArray1);
      assertArrayEquals(new char[] {')', ')', ')', ')', ')'}, charArray2);
      assertEquals(6, charArray0.length);
      assertEquals(5, charArray1.length);
      assertEquals(5, charArray2.length);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray0));
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray0, charArray2);
      assertSame(charArray1, charArray2);
      assertNotSame(charArray1, charArray0);
      assertSame(charArray2, charArray1);
      assertNotSame(charArray2, charArray0);
      assertNotNull(charArray2);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) ')';
      doubleArray0[1] = (double) ')';
      doubleArray0[2] = (double) 'o';
      double[] doubleArray1 = ArrayUtils.removeElements(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {41.0, 41.0, 111.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
  }

  @Test(timeout = 4000)
  public void test0845()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 571.942196047302;
      doubleArray0[2] = 1.0;
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      ArrayUtils.reverse(booleanArray0, 2, 2);
      assertTrue(Arrays.equals(new boolean[] {true, true, false}, booleanArray0));
      assertEquals(3, booleanArray0.length);
      
      double[] doubleArray1 = new double[7];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 1.0;
      doubleArray1[1] = 0.0;
      doubleArray1[2] = (double) 2;
      doubleArray1[3] = 0.0;
      doubleArray1[4] = 1.0;
      doubleArray1[5] = (-108.0);
      doubleArray1[6] = 1.0;
      double[] doubleArray2 = ArrayUtils.removeElements(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {0.0, 571.942196047302, 1.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {571.942196047302}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {1.0, 0.0, 2.0, 0.0, 1.0, (-108.0), 1.0}, doubleArray1, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(1, doubleArray2.length);
      assertEquals(7, doubleArray1.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotNull(doubleArray2);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, 0.0, 817);
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertArrayEquals(new double[] {0.0, 571.942196047302, 1.0}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotNull(bitSet0);
  }

  @Test(timeout = 4000)
  public void test0846()  throws Throwable  {
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)560;
      shortArray0[1] = (short)0;
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) (short)0;
      boolean boolean0 = ArrayUtils.isNotEmpty((char[]) null);
      assertFalse(boolean0);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) (short)0;
      doubleArray0[1] = (double) 0.0F;
      doubleArray0[2] = (double) (short)0;
      doubleArray0[3] = (double) (short)560;
      doubleArray0[4] = (double) (short)0;
      doubleArray0[5] = (double) 0.0F;
      doubleArray0[6] = (double) (short)0;
      doubleArray0[4] = (double) 0.0F;
      double[] doubleArray1 = ArrayUtils.removeElements(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 560.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(8, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = ArrayUtils.removeElements(byteArray0, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
  }

  @Test(timeout = 4000)
  public void test0847()  throws Throwable  {
      float[] floatArray0 = new float[0];
      ArrayUtils.reverse(floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
      
      Byte byte0 = new Byte((byte)0);
      assertNotNull(byte0);
      assertEquals((byte)0, (byte)byte0);
      
      Byte byte1 = new Byte((byte)0);
      assertTrue(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      assertEquals((byte)0, (byte)byte1);
      
      Byte byte2 = new Byte((byte) (-75));
      assertFalse(byte2.equals((Object)byte0));
      assertFalse(byte2.equals((Object)byte1));
      assertNotNull(byte2);
      assertEquals((byte) (-75), (byte)byte2);
      
      Byte byte3 = new Byte((byte)43);
      assertFalse(byte3.equals((Object)byte1));
      assertFalse(byte3.equals((Object)byte2));
      assertFalse(byte3.equals((Object)byte0));
      assertNotNull(byte3);
      assertEquals((byte)43, (byte)byte3);
      
      Byte[] byteArray0 = new Byte[3];
      Byte byte4 = new Byte((byte)15);
      assertFalse(byte4.equals((Object)byte2));
      assertFalse(byte4.equals((Object)byte0));
      assertFalse(byte4.equals((Object)byte1));
      assertFalse(byte4.equals((Object)byte3));
      assertNotNull(byte4);
      assertEquals((byte)15, (byte)byte4);
      
      byteArray0[0] = byte4;
      byteArray0[1] = byte1;
      byteArray0[2] = byte2;
      byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0);
      assertArrayEquals(new byte[] {(byte)15, (byte)0, (byte) (-75)}, byteArray1);
      assertEquals(3, byteArray0.length);
      assertEquals(3, byteArray1.length);
      assertNotNull(byteArray1);
  }

  @Test(timeout = 4000)
  public void test0848()  throws Throwable  {
      Double[] doubleArray0 = new Double[5];
      Double double0 = new Double(496.0);
      assertNotNull(double0);
      assertEquals(496.0, (double)double0, 0.01);
      
      doubleArray0[0] = double0;
      Double double1 = new Double(496.0);
      assertEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      assertEquals(496.0, (double)double1, 0.01);
      
      doubleArray0[1] = double1;
      Double double2 = new Double(2183.3);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertNotNull(double2);
      assertEquals(2183.3, (double)double2, 0.01);
      
      doubleArray0[2] = double2;
      Double double3 = new Double(0.0);
      assertNotEquals((double)double3, (double)double2, 0.01);
      assertNotEquals((double)double3, (double)double1, 0.01);
      assertNotEquals((double)double3, (double)double0, 0.01);
      assertNotNull(double3);
      assertEquals(0.0, (double)double3, 0.01);
      
      doubleArray0[3] = double3;
      Double double4 = new Double((double) doubleArray0[2]);
      assertEquals(5, doubleArray0.length);
      assertEquals((double)double4, (double)double2, 0.01);
      assertNotEquals((double)double4, (double)double1, 0.01);
      assertNotEquals((double)double4, (double)double3, 0.01);
      assertNotEquals((double)double4, (double)double0, 0.01);
      assertNotNull(double4);
      assertEquals(2183.3, (double)double4, 0.01);
      
      doubleArray0[4] = double4;
      byte[] byteArray0 = ArrayUtils.subarray((byte[]) null, 0, (-127));
      assertNull(byteArray0);
      
      boolean boolean0 = ArrayUtils.isEmpty((byte[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0849()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byte[] byteArray1 = ArrayUtils.subarray(byteArray0, (int) (byte)1, (int) (byte)1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(5, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      
      byte[] byteArray2 = ArrayUtils.addAll(byteArray1, byteArray1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertArrayEquals(new byte[] {}, byteArray2);
      assertEquals(5, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertEquals(0, byteArray2.length);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      assertNotNull(byteArray2);
      
      long[] longArray0 = new long[7];
      longArray0[0] = (long) (byte)1;
      longArray0[1] = (long) 1936;
      longArray0[2] = (-872L);
      longArray0[3] = (long) 1936;
      longArray0[4] = (long) (byte)1;
      longArray0[5] = (long) 1936;
      longArray0[6] = (long) 1936;
      // Undeclared exception!
      try { 
        ArrayUtils.insert(1936, longArray0, longArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1936, Length: 7
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0850()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byte[] byteArray1 = ArrayUtils.subarray(byteArray0, (-2587), (-2587));
      assertEquals(0, byteArray1.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(8, byteArray0.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      
      byte[] byteArray2 = new byte[0];
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      
      byte[] byteArray3 = ArrayUtils.addAll(byteArray0, byteArray2);
      assertEquals(8, byteArray3.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray2);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray3);
      assertEquals(8, byteArray0.length);
      assertEquals(0, byteArray2.length);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray3.equals((Object)byteArray1));
      assertFalse(byteArray3.equals((Object)byteArray0));
      assertFalse(byteArray3.equals((Object)byteArray2));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray3);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray3);
      assertNotSame(byteArray3, byteArray1);
      assertNotSame(byteArray3, byteArray0);
      assertNotSame(byteArray3, byteArray2);
      assertNotNull(byteArray3);
      
      long[] longArray0 = new long[0];
      long[] longArray1 = ArrayUtils.insert(1936, longArray0, longArray0);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 1936;
      boolean boolean0 = ArrayUtils.contains(doubleArray0, (double) 1936, 3236.9631468723933);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0851()  throws Throwable  {
      Character character0 = Character.valueOf('g');
      assertNotNull(character0);
      assertEquals('g', (char)character0);
      
      Character character1 = Character.valueOf('g');
      assertNotNull(character1);
      assertEquals('g', (char)character1);
      
      Character character2 = Character.valueOf('g');
      assertNotNull(character2);
      assertEquals('g', (char)character2);
      
      Character character3 = Character.valueOf('\\');
      assertFalse(character3.equals((Object)character2));
      assertFalse(character3.equals((Object)character1));
      assertFalse(character3.equals((Object)character0));
      assertNotNull(character3);
      assertEquals('\\', (char)character3);
      
      Character character4 = Character.valueOf('g');
      assertFalse(character4.equals((Object)character3));
      assertNotNull(character4);
      assertEquals('g', (char)character4);
      
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, (int) (byte) (-102), 1);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-102);
      byteArray0[1] = (byte) (-102);
      byteArray0[2] = (byte) (-102);
      byteArray0[3] = (byte) (-102);
      byteArray0[4] = (byte)102;
      byteArray0[5] = (byte) (-102);
      byte[] byteArray1 = ArrayUtils.subarray(byteArray0, (-2146993209), 1);
      assertArrayEquals(new byte[] {(byte) (-102), (byte) (-102), (byte) (-102), (byte) (-102), (byte)102, (byte) (-102)}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-102)}, byteArray1);
      assertEquals(6, byteArray0.length);
      assertEquals(1, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      
      byte[] byteArray2 = ArrayUtils.addAll((byte[]) null, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-102), (byte) (-102), (byte) (-102), (byte) (-102), (byte)102, (byte) (-102)}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-102), (byte) (-102), (byte) (-102), (byte) (-102), (byte)102, (byte) (-102)}, byteArray2);
      assertEquals(6, byteArray0.length);
      assertEquals(6, byteArray2.length);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray2, byteArray0);
      assertNotNull(byteArray2);
      
      long[] longArray0 = new long[3];
      longArray0[0] = (long) (byte) (-102);
      longArray0[1] = (long) '\\';
      longArray0[2] = (long) (byte)102;
      // Undeclared exception!
      try { 
        ArrayUtils.insert(1936, longArray0, longArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1936, Length: 3
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0852()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 687.016;
      double[] doubleArray1 = ArrayUtils.removeAllOccurrences(doubleArray0, 687.016);
      assertArrayEquals(new double[] {687.016}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      
      long[] longArray0 = new long[7];
      longArray0[0] = 0L;
      longArray0[1] = 0L;
      longArray0[2] = (-1909L);
      longArray0[3] = 2226L;
      longArray0[4] = 0L;
      longArray0[5] = 0L;
      longArray0[6] = (-283L);
      long[] longArray1 = ArrayUtils.removeAllOccurrences(longArray0, 0L);
      assertArrayEquals(new long[] {0L, 0L, (-1909L), 2226L, 0L, 0L, (-283L)}, longArray0);
      assertArrayEquals(new long[] {(-1909L), 2226L, (-283L)}, longArray1);
      assertEquals(7, longArray0.length);
      assertEquals(3, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)127;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-52);
      byteArray0[6] = (byte)0;
      int int0 = ArrayUtils.indexOf(doubleArray0, (double) (byte)0, (int) (byte)127);
      assertArrayEquals(new double[] {687.016}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals((-1), int0);
      
      byte[] byteArray1 = ArrayUtils.subarray(byteArray0, 0, (int) (byte) (-1));
      assertArrayEquals(new byte[] {}, byteArray1);
      assertArrayEquals(new byte[] {(byte)127, (byte)0, (byte)0, (byte)0, (byte) (-52), (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(0, byteArray1.length);
      assertEquals(9, byteArray0.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotNull(byteArray1);
      
      byte[] byteArray2 = ArrayUtils.addAll(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertArrayEquals(new byte[] {(byte)127, (byte)0, (byte)0, (byte)0, (byte) (-52), (byte)0, (byte)0, (byte)0, (byte)0}, byteArray2);
      assertArrayEquals(new byte[] {(byte)127, (byte)0, (byte)0, (byte)0, (byte) (-52), (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(0, byteArray1.length);
      assertEquals(9, byteArray2.length);
      assertEquals(9, byteArray0.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray1);
      assertNotNull(byteArray2);
  }

  @Test(timeout = 4000)
  public void test0853()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 2798.735380718;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (-2703.0);
      doubleArray0[3] = 1757.16516391848;
      int[] intArray0 = new int[3];
      intArray0[0] = (-448);
      intArray0[1] = 0;
      intArray0[2] = 0;
      ArrayUtils.swap(intArray0, (-448), 0, (-2147184749));
      assertArrayEquals(new int[] {(-448), 0, 0}, intArray0);
      assertEquals(3, intArray0.length);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) (-448);
      objectArray0[1] = (Object) 0;
      Object object0 = ArrayUtils.get(objectArray0, 0);
      assertEquals(3, objectArray0.length);
      assertNotNull(object0);
      assertEquals((-448), object0);
      
      objectArray0[2] = object0;
      ArrayUtils.shuffle(objectArray0, (Random) mockRandom0);
      assertEquals(3, objectArray0.length);
      
      int int0 = 11;
      MutableInt mutableInt0 = new MutableInt(11);
      assertEquals(11.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(11, mutableInt0.intValue());
      assertEquals((short)11, mutableInt0.shortValue());
      assertEquals(11.0, mutableInt0.doubleValue(), 0.01);
      assertEquals("11", mutableInt0.toString());
      assertEquals((byte)11, mutableInt0.byteValue());
      assertEquals(11, (int)mutableInt0.getValue());
      assertEquals(11, (int)mutableInt0.toInteger());
      assertEquals(11L, mutableInt0.longValue());
      assertNotNull(mutableInt0);
      
      try { 
        Long.valueOf("J");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"J\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test0854()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = '[';
      charArray0[1] = 'h';
      charArray0[2] = 'P';
      charArray0[3] = '0';
      char[] charArray1 = ArrayUtils.removeElement(charArray0, 'R');
      assertArrayEquals(new char[] {'[', 'h', 'P', '0'}, charArray0);
      assertArrayEquals(new char[] {'[', 'h', 'P', '0'}, charArray1);
      assertEquals(4, charArray0.length);
      assertEquals(4, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-86);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-86);
      byteArray0[3] = (byte) (-86);
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte)0, (-481));
      assertArrayEquals(new byte[] {(byte) (-86), (byte)0, (byte) (-86), (byte) (-86)}, byteArray0);
      assertEquals(4, byteArray0.length);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0855()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = (-3820);
      intArray0[1] = (-1);
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = Integer.MAX_VALUE;
      intArray0[5] = 0;
      intArray0[6] = 3161;
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = Double.NaN;
      boolean boolean0 = ArrayUtils.isSameLength(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {Double.NaN}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-43);
      byteArray0[2] = (byte)10;
      byteArray0[3] = (byte) (-43);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)10;
      byteArray0[6] = (byte)2;
      byteArray0[7] = (byte)2;
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte)0, (-2147088098));
      assertArrayEquals(new byte[] {(byte) (-43), (byte)0, (byte)10, (byte) (-43), (byte)0, (byte)10, (byte)2, (byte)2}, byteArray0);
      assertEquals(8, byteArray0.length);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0856()  throws Throwable  {
      float[] floatArray0 = new float[8];
      float[] floatArray1 = ArrayUtils.removeAllOccurences(floatArray0, 0.0F);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertEquals(8, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((Object[]) null, (Object) "The Array must not be null");
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertNotNull(bitSet0);
  }

  @Test(timeout = 4000)
  public void test0857()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      Byte byte0 = new Byte((byte) (-124));
      assertNotNull(byte0);
      assertEquals((byte) (-124), (byte)byte0);
      
      Byte byte1 = new Byte((byte)75);
      assertFalse(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      assertEquals((byte)75, (byte)byte1);
      
      Byte byte2 = new Byte((byte)75);
      assertFalse(byte2.equals((Object)byte0));
      assertTrue(byte2.equals((Object)byte1));
      assertNotNull(byte2);
      assertEquals((byte)75, (byte)byte2);
      
      Byte byte3 = new Byte((byte)75);
      assertTrue(byte3.equals((Object)byte1));
      assertFalse(byte3.equals((Object)byte0));
      assertTrue(byte3.equals((Object)byte2));
      assertNotNull(byte3);
      assertEquals((byte)75, (byte)byte3);
      
      Byte byte4 = new Byte((byte) (-124));
      assertFalse(byte4.equals((Object)byte3));
      assertTrue(byte4.equals((Object)byte0));
      assertFalse(byte4.equals((Object)byte1));
      assertFalse(byte4.equals((Object)byte2));
      assertNotNull(byte4);
      assertEquals((byte) (-124), (byte)byte4);
      
      Byte[] byteArray0 = new Byte[0];
      byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0, (byte) (-69));
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotNull(byteArray1);
      
      ArrayUtils.swap((double[]) null, 35, (-4347));
      BitSet bitSet0 = ArrayUtils.indexesOf(byteArray1, (byte) (-124), (int) (byte) (-124));
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotNull(bitSet0);
      
      Integer[] integerArray0 = new Integer[1];
      Integer integer0 = new Integer((byte)75);
      assertNotNull(integer0);
      assertEquals(75, (int)integer0);
      
      integerArray0[0] = integer0;
      Integer[] integerArray1 = ArrayUtils.nullToEmpty(integerArray0);
      assertEquals(1, integerArray0.length);
      assertEquals(1, integerArray1.length);
      assertSame(integerArray0, integerArray1);
      assertSame(integerArray1, integerArray0);
      assertNotNull(integerArray1);
  }

  @Test(timeout = 4000)
  public void test0858()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)79;
      byteArray0[2] = (byte) (-22);
      byteArray0[3] = (byte)0;
      MutableInt mutableInt0 = new MutableInt((int) (byte)79);
      assertEquals(79L, mutableInt0.longValue());
      assertEquals(79.0, mutableInt0.doubleValue(), 0.01);
      assertEquals("79", mutableInt0.toString());
      assertEquals(79.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(79, (int)mutableInt0.toInteger());
      assertEquals((byte)79, mutableInt0.byteValue());
      assertEquals(79, (int)mutableInt0.getValue());
      assertEquals((short)79, mutableInt0.shortValue());
      assertEquals(79, mutableInt0.intValue());
      assertNotNull(mutableInt0);
      
      int int0 = (-1);
      MutableInt mutableInt1 = (MutableInt)ArrayUtils.get((Object[]) null, (-1), (Object) mutableInt0);
      assertEquals(79L, mutableInt0.longValue());
      assertEquals(79.0, mutableInt0.doubleValue(), 0.01);
      assertEquals("79", mutableInt0.toString());
      assertEquals(79.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(79, (int)mutableInt0.toInteger());
      assertEquals((byte)79, mutableInt0.byteValue());
      assertEquals(79, (int)mutableInt0.getValue());
      assertEquals((short)79, mutableInt0.shortValue());
      assertEquals(79, mutableInt0.intValue());
      assertEquals(79L, mutableInt1.longValue());
      assertEquals("79", mutableInt1.toString());
      assertEquals((byte)79, mutableInt1.byteValue());
      assertEquals(79, (int)mutableInt1.toInteger());
      assertEquals(79.0F, mutableInt1.floatValue(), 0.01F);
      assertEquals(79, (int)mutableInt1.getValue());
      assertEquals(79.0, mutableInt1.doubleValue(), 0.01);
      assertEquals((short)79, mutableInt1.shortValue());
      assertEquals(79, mutableInt1.intValue());
      assertSame(mutableInt0, mutableInt1);
      assertSame(mutableInt1, mutableInt0);
      assertNotNull(mutableInt1);
      
      int int1 = mutableInt0.addAndGet((Number) (byte)79);
      assertEquals(158, mutableInt0.intValue());
      assertEquals(158L, mutableInt0.longValue());
      assertEquals(158.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(158, (int)mutableInt0.toInteger());
      assertEquals(158.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals((byte) (-98), mutableInt0.byteValue());
      assertEquals(158, (int)mutableInt0.getValue());
      assertEquals("158", mutableInt0.toString());
      assertEquals((short)158, mutableInt0.shortValue());
      assertFalse(int1 == int0);
      assertSame(mutableInt0, mutableInt1);
      assertEquals(158, int1);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((Object[]) null, (Object) mutableInt0, (-127));
      assertEquals(158, mutableInt0.intValue());
      assertEquals(158L, mutableInt0.longValue());
      assertEquals(158.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(158, (int)mutableInt0.toInteger());
      assertEquals(158.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals((byte) (-98), mutableInt0.byteValue());
      assertEquals(158, (int)mutableInt0.getValue());
      assertEquals("158", mutableInt0.toString());
      assertEquals((short)158, mutableInt0.shortValue());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertSame(mutableInt0, mutableInt1);
      assertNotNull(bitSet0);
      
      Integer[] integerArray0 = new Integer[5];
      Integer integer0 = new Integer((-1));
      assertTrue(integer0.equals((Object)int0));
      assertFalse(integer0.equals((Object)int1));
      assertNotNull(integer0);
      assertEquals((-1), (int)integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((-1253));
      assertFalse(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)int1));
      assertNotNull(integer1);
      assertEquals((-1253), (int)integer1);
      
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(int0);
      assertFalse(int0 == int1);
      assertTrue(integer2.equals((Object)int0));
      assertTrue(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)int1));
      assertFalse(integer2.equals((Object)integer1));
      assertNotNull(integer2);
      assertEquals((-1), (int)integer2);
      
      integerArray0[2] = integer2;
      Integer integer3 = new Integer((-127));
      assertFalse(integer3.equals((Object)int1));
      assertFalse(integer3.equals((Object)int0));
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer1));
      assertNotNull(integer3);
      assertEquals((-127), (int)integer3);
      
      integerArray0[3] = integer3;
      Integer integer4 = new Integer((byte)79);
      assertFalse(integer4.equals((Object)int0));
      assertFalse(integer4.equals((Object)integer0));
      assertFalse(integer4.equals((Object)int1));
      assertFalse(integer4.equals((Object)integer3));
      assertFalse(integer4.equals((Object)integer2));
      assertFalse(integer4.equals((Object)integer1));
      assertNotNull(integer4);
      assertEquals(79, (int)integer4);
      
      integerArray0[4] = integer4;
      Integer[] integerArray1 = ArrayUtils.nullToEmpty(integerArray0);
      assertEquals(5, integerArray1.length);
      assertEquals(5, integerArray0.length);
      assertSame(integerArray1, integerArray0);
      assertSame(integerArray0, integerArray1);
      assertNotNull(integerArray1);
  }

  @Test(timeout = 4000)
  public void test0859()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 0;
      intArray0[1] = 127;
      boolean boolean0 = ArrayUtils.isSorted(intArray0);
      assertArrayEquals(new int[] {0, 127}, intArray0);
      assertEquals(2, intArray0.length);
      assertTrue(boolean0);
      
      long[] longArray0 = new long[3];
      longArray0[0] = (long) 0;
      longArray0[1] = (long) 0;
      longArray0[2] = (long) 0;
      long[] longArray1 = ArrayUtils.removeAllOccurrences(longArray0, (long) 0);
      assertArrayEquals(new long[] {0L, 0L, 0L}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertEquals(3, longArray0.length);
      assertEquals(0, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
      
      short[] shortArray0 = new short[4];
      short[] shortArray1 = ArrayUtils.add(shortArray0, (short) (-3684));
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short) (-3684)}, shortArray1);
      assertEquals(4, shortArray0.length);
      assertEquals(5, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      booleanArray0[6] = true;
      booleanArray0[7] = false;
      Boolean[] booleanArray1 = ArrayUtils.toObject(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true, true, true, false}, booleanArray0));
      assertEquals(8, booleanArray1.length);
      assertEquals(8, booleanArray0.length);
      assertNotNull(booleanArray1);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 127;
      doubleArray0[1] = (double) 127;
      doubleArray0[2] = (double) 127;
      doubleArray0[3] = 3480.49873015;
      doubleArray0[4] = (double) (-3267);
      // Undeclared exception!
      try { 
        ArrayUtils.add(doubleArray0, 127, (-1.0));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 127, Length: 5
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0860()  throws Throwable  {
      BitSet bitSet0 = new BitSet();
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertNotNull(bitSet0);
      
      byte[] byteArray0 = new byte[0];
      ArrayUtils.swap(byteArray0, 11, 11, 11);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (-995.00995F);
      floatArray0[1] = 4925.2F;
      // Undeclared exception!
      try { 
        ArrayUtils.add(floatArray0, 2707, 4925.2F);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2707, Length: 2
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0861()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = 196;
      int[] intArray1 = ArrayUtils.subarray(intArray0, 0, 0);
      assertArrayEquals(new int[] {196, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(8, intArray0.length);
      assertEquals(0, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)98;
      int int0 = ArrayUtils.indexOf(byteArray0, (byte)98);
      assertArrayEquals(new byte[] {(byte)98}, byteArray0);
      assertEquals(1, byteArray0.length);
      assertEquals(0, int0);
      
      String[] stringArray0 = new String[0];
      BitSet bitSet0 = ArrayUtils.indexesOf(intArray0, (int) (byte)98, (-1808));
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertArrayEquals(new int[] {196, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(8, intArray0.length);
      assertFalse(intArray0.equals((Object)intArray1));
      assertNotSame(intArray0, intArray1);
      assertNotNull(bitSet0);
      
      ArrayUtils.swap((char[]) null, 0, 196, 0);
      boolean boolean0 = ArrayUtils.isEmpty((char[]) null);
      assertTrue(boolean0);
      
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      booleanArray0[6] = true;
      booleanArray0[7] = true;
      ArrayUtils.reverse(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true, true, true, true}, booleanArray0));
      assertEquals(8, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test0862()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = '6';
      charArray0[1] = 'd';
      charArray0[2] = 'n';
      charArray0[3] = 'M';
      charArray0[4] = '3';
      charArray0[5] = 's';
      charArray0[6] = 'l';
      charArray0[7] = 'w';
      charArray0[8] = '=';
      char[] charArray1 = ArrayUtils.removeAllOccurrences(charArray0, '6');
      assertArrayEquals(new char[] {'6', 'd', 'n', 'M', '3', 's', 'l', 'w', '='}, charArray0);
      assertArrayEquals(new char[] {'d', 'n', 'M', '3', 's', 'l', 'w', '='}, charArray1);
      assertEquals(9, charArray0.length);
      assertEquals(8, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) '=';
      doubleArray0[1] = 1.0;
      doubleArray0[2] = (double) '3';
      doubleArray0[3] = (double) 'w';
      ArrayUtils.shift(doubleArray0, 91);
      assertArrayEquals(new double[] {1.0, 51.0, 119.0, 61.0}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.remove(charArray0, (-1));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Length: 9
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0863()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = true;
      booleanArray0[6] = false;
      booleanArray0[7] = false;
      boolean boolean0 = ArrayUtils.contains(booleanArray0, true);
      assertTrue(Arrays.equals(new boolean[] {false, true, true, false, false, true, false, false}, booleanArray0));
      assertEquals(8, booleanArray0.length);
      assertTrue(boolean0);
      
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) false;
      objectArray0[1] = (Object) false;
      objectArray0[2] = (Object) true;
      objectArray0[3] = (Object) false;
      objectArray0[4] = (Object) false;
      objectArray0[5] = (Object) false;
      ArrayUtils.shift(objectArray0, (-1916), 0, 0);
      assertEquals(6, objectArray0.length);
      
      int int0 = ArrayUtils.indexOf(objectArray0, (Object) false);
      assertEquals(6, objectArray0.length);
      assertEquals(0, int0);
      
      ArrayUtils.swap(objectArray0, (-3689), 0, 0);
      assertEquals(6, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test0864()  throws Throwable  {
      long[] longArray0 = new long[7];
      longArray0[0] = 1553L;
      longArray0[1] = 0L;
      longArray0[2] = (-1L);
      longArray0[3] = (-1L);
      longArray0[5] = 0L;
      longArray0[6] = 0L;
      ArrayUtils.shift(longArray0, 182);
      assertArrayEquals(new long[] {1553L, 0L, (-1L), (-1L), 0L, 0L, 0L}, longArray0);
      assertEquals(7, longArray0.length);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 1540L;
      short[] shortArray0 = ArrayUtils.removeElements((short[]) null, (short[]) null);
      assertNull(shortArray0);
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) 1540L;
      floatArray0[1] = (float) 1553L;
      floatArray0[2] = (float) 0L;
      floatArray0[3] = (float) (-1L);
      floatArray0[4] = (float) 0L;
      floatArray0[5] = (-800.0F);
      floatArray0[6] = (float) 1540L;
      floatArray0[7] = (float) (-1L);
      float[] floatArray1 = ArrayUtils.add(floatArray0, (float) (-1L));
      assertArrayEquals(new float[] {1540.0F, 1553.0F, 0.0F, (-1.0F), 0.0F, (-800.0F), 1540.0F, (-1.0F), (-1.0F)}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {1540.0F, 1553.0F, 0.0F, (-1.0F), 0.0F, (-800.0F), 1540.0F, (-1.0F)}, floatArray0, 0.01F);
      assertEquals(9, floatArray1.length);
      assertEquals(8, floatArray0.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertNotNull(floatArray1);
      
      float[] floatArray2 = ArrayUtils.clone(floatArray0);
      assertArrayEquals(new float[] {1540.0F, 1553.0F, 0.0F, (-1.0F), 0.0F, (-800.0F), 1540.0F, (-1.0F)}, floatArray2, 0.01F);
      assertArrayEquals(new float[] {1540.0F, 1553.0F, 0.0F, (-1.0F), 0.0F, (-800.0F), 1540.0F, (-1.0F)}, floatArray0, 0.01F);
      assertEquals(8, floatArray2.length);
      assertEquals(8, floatArray0.length);
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertNotSame(floatArray2, floatArray0);
      assertNotSame(floatArray2, floatArray1);
      assertNotSame(floatArray0, floatArray2);
      assertNotSame(floatArray0, floatArray1);
      assertNotNull(floatArray2);
  }

  @Test(timeout = 4000)
  public void test0865()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)9;
      byteArray0[1] = (byte) (-44);
      int int0 = ArrayUtils.indexOf((Object[]) null, (Object) "{}");
      assertEquals((-1), int0);
      
      ArrayUtils.swap((Object[]) null, 2146848735, 2146848735, 0);
      boolean boolean0 = ArrayUtils.isSameLength((Object[]) null, (Object[]) null);
      assertTrue(boolean0);
      
      double[] doubleArray0 = ArrayUtils.subarray((double[]) null, 2146848735, (int) (byte)9);
      assertNull(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test0866()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 0;
      intArray0[1] = 127;
      boolean boolean0 = ArrayUtils.isSorted(intArray0);
      assertArrayEquals(new int[] {0, 127}, intArray0);
      assertEquals(2, intArray0.length);
      assertTrue(boolean0);
      
      long[] longArray0 = new long[3];
      longArray0[0] = (long) 0;
      longArray0[1] = (long) 0;
      longArray0[2] = (long) 0;
      long[] longArray1 = ArrayUtils.removeAllOccurrences(longArray0, (long) 0);
      assertArrayEquals(new long[] {0L, 0L, 0L}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertEquals(3, longArray0.length);
      assertEquals(0, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (-3684);
      shortArray0[1] = (short)0;
      Byte byte0 = new Byte((byte) (-52));
      assertNotNull(byte0);
      assertEquals((byte) (-52), (byte)byte0);
      
      int int0 = ArrayUtils.indexOf((Object[]) null, (Object) byte0);
      assertEquals((-1), int0);
      
      ArrayUtils.swap((Object[]) null, (int) (byte) (-52), 2435, (-3689));
      int int1 = ArrayUtils.indexOf((Object[]) null, (Object) byte0, 64);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test0867()  throws Throwable  {
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)560;
      shortArray0[1] = (short)0;
      shortArray0[2] = (short)1545;
      shortArray0[3] = (short) (-4027);
      short[] shortArray1 = ArrayUtils.add(shortArray0, (short)0);
      assertArrayEquals(new short[] {(short)560, (short)0, (short)1545, (short) (-4027)}, shortArray0);
      assertArrayEquals(new short[] {(short)560, (short)0, (short)1545, (short) (-4027), (short)0}, shortArray1);
      assertEquals(4, shortArray0.length);
      assertEquals(5, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) (short)1545;
      ArrayUtils.swap(longArray0, (-2147079800), (-2146867085));
      assertArrayEquals(new long[] {1545L}, longArray0);
      assertEquals(1, longArray0.length);
      
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = ArrayUtils.subarray(byteArray0, (int) (short)0, (-2147079800));
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      
      // Undeclared exception!
      try { 
        ArrayUtils.insert(3210, longArray0, longArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3210, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0868()  throws Throwable  {
      long[] longArray0 = new long[1];
      long[] longArray1 = new long[4];
      assertFalse(longArray1.equals((Object)longArray0));
      
      longArray1[1] = 0L;
      longArray1[2] = (long) (short)560;
      longArray1[3] = (long) (short)560;
      // Undeclared exception!
      try { 
        ArrayUtils.insert((int) (short)560, longArray0, longArray1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 560, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0869()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = false;
      booleanArray0[6] = false;
      booleanArray0[7] = false;
      booleanArray0[8] = true;
      long[] longArray0 = new long[2];
      longArray0[0] = (-940L);
      longArray0[1] = (-2147483648L);
      ArrayUtils.swap(longArray0, (-2147079800), 82);
      assertArrayEquals(new long[] {(-940L), (-2147483648L)}, longArray0);
      assertEquals(2, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test0870()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      int int0 = ArrayUtils.indexOf(intArray0, 0, (-627));
      assertArrayEquals(new int[] {0}, intArray0);
      assertEquals(1, intArray0.length);
      assertEquals(0, int0);
      
      String string0 = ArrayUtils.toString((Object) "");
      assertNotNull(string0);
      assertEquals("", string0);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) (-627);
      doubleArray0[1] = (double) (-627);
      doubleArray0[2] = (double) (-627);
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) 0;
      double[] doubleArray1 = ArrayUtils.add(doubleArray0, 542.78260167218);
      assertArrayEquals(new double[] {(-627.0), (-627.0), (-627.0), 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-627.0), (-627.0), (-627.0), 0.0, 0.0, 0.0, 542.78260167218}, doubleArray1, 0.01);
      assertEquals(6, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) 0;
      floatArray0[1] = (float) (-627);
      floatArray0[2] = 3501.0F;
      floatArray0[3] = (float) 0;
      floatArray0[4] = (float) 0;
      floatArray0[5] = (float) 0;
      floatArray0[6] = (-1869.6888F);
      floatArray0[7] = (float) 0;
      floatArray0[8] = 1745.452F;
      int int1 = ArrayUtils.lastIndexOf(floatArray0, (-3682.68F));
      assertArrayEquals(new float[] {0.0F, (-627.0F), 3501.0F, 0.0F, 0.0F, 0.0F, (-1869.6888F), 0.0F, 1745.452F}, floatArray0, 0.01F);
      assertEquals(9, floatArray0.length);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) (-1869.6888F);
      int int2 = ArrayUtils.indexOf(objectArray0, (Object) "");
      assertEquals(1, objectArray0.length);
      assertFalse(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals((-1), int2);
  }

  @Test(timeout = 4000)
  public void test0871()  throws Throwable  {
      char[] charArray0 = ArrayUtils.removeElement((char[]) null, 'P');
      assertNull(charArray0);
      
      Float float0 = new Float(Double.NaN);
      assertNotNull(float0);
      assertEquals(Float.NaN, (float)float0, 0.01F);
      
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) float0;
      objectArray0[1] = (Object) float0;
      objectArray0[2] = (Object) float0;
      objectArray0[3] = (Object) float0;
      objectArray0[4] = (Object) float0;
      BitSet bitSet0 = ArrayUtils.indexesOf(objectArray0, objectArray0[1], (-1739));
      assertEquals("{0, 1, 2, 3, 4}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(5, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertEquals(5, bitSet0.length());
      assertEquals(5, objectArray0.length);
      assertNotNull(bitSet0);
      
      ArrayUtils.swap((short[]) null, (-331), (-331), (-331));
      short[] shortArray0 = ArrayUtils.clone((short[]) null);
      assertNull(shortArray0);
      
      Long long0 = new Long((-1739));
      assertNotNull(long0);
      assertEquals((-1739L), (long)long0);
      
      Long long1 = new Long(2146L);
      assertFalse(long1.equals((Object)long0));
      assertNotNull(long1);
      assertEquals(2146L, (long)long1);
      
      Long long2 = new Long(0L);
      assertFalse(long2.equals((Object)long0));
      assertFalse(long2.equals((Object)long1));
      assertNotNull(long2);
      assertEquals(0L, (long)long2);
      
      Long long3 = new Long(2146L);
      assertFalse(long3.equals((Object)long0));
      assertTrue(long3.equals((Object)long1));
      assertFalse(long3.equals((Object)long2));
      assertNotNull(long3);
      assertEquals(2146L, (long)long3);
      
      Long long4 = new Long(0L);
      assertFalse(long4.equals((Object)long3));
      assertFalse(long4.equals((Object)long0));
      assertFalse(long4.equals((Object)long1));
      assertTrue(long4.equals((Object)long2));
      assertNotNull(long4);
      assertEquals(0L, (long)long4);
      
      try { 
        Long.valueOf("", (int) (short)0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // radix 0 less than Character.MIN_RADIX
         //
         verifyException("java.lang.Long", e);
      }
  }

  @Test(timeout = 4000)
  public void test0872()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte) (-44);
      byteArray0[2] = (byte) (-39);
      short[] shortArray0 = new short[1];
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) (byte) (-39);
      floatArray0[1] = (float) (byte)2;
      floatArray0[2] = 0.0F;
      floatArray0[3] = (float) (byte) (-39);
      floatArray0[4] = (float) (byte) (-39);
      ArrayUtils.reverse(floatArray0, (int) (byte)2, 1966);
      assertArrayEquals(new float[] {(-39.0F), 2.0F, (-39.0F), (-39.0F), 0.0F}, floatArray0, 0.01F);
      assertEquals(5, floatArray0.length);
      
      ArrayUtils.swap(shortArray0, 2680, (int) (short)8856);
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      assertEquals(1, shortArray0.length);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(shortArray0, (short)8856);
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      assertEquals(1, shortArray0.length);
      assertNotNull(bitSet0);
  }

  @Test(timeout = 4000)
  public void test0873()  throws Throwable  {
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short)37;
      ArrayUtils.swap(shortArray0, (-1943), 0, 16);
      assertArrayEquals(new short[] {(short)37, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertEquals(8, shortArray0.length);
      
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) (short)37;
      objectArray0[1] = (Object) (short)37;
      objectArray0[2] = (Object) (short)37;
      int int0 = ArrayUtils.indexOf(objectArray0, objectArray0[1], (-1943));
      assertEquals(3, objectArray0.length);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test0874()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = '[';
      charArray0[1] = 'h';
      charArray0[2] = 'P';
      charArray0[3] = '0';
      char[] charArray1 = ArrayUtils.removeElement(charArray0, 'R');
      assertArrayEquals(new char[] {'[', 'h', 'P', '0'}, charArray0);
      assertArrayEquals(new char[] {'[', 'h', 'P', '0'}, charArray1);
      assertEquals(4, charArray0.length);
      assertEquals(4, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) '0';
      objectArray0[1] = (Object) 'P';
      objectArray0[2] = (Object) 'P';
      objectArray0[3] = (Object) '[';
      BitSet bitSet0 = ArrayUtils.indexesOf(objectArray0, objectArray0[1], (-2560));
      assertEquals(2, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertEquals("{1, 2}", bitSet0.toString());
      assertEquals(3, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals(4, objectArray0.length);
      assertNotNull(bitSet0);
      
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short) (-2819);
      shortArray0[1] = (short) (-3414);
      shortArray0[2] = (short) (-1);
      shortArray0[3] = (short)2516;
      shortArray0[4] = (short)1;
      ArrayUtils.swap(shortArray0, (int) (short)2516, (int) (short)2516, (-1958));
      assertArrayEquals(new short[] {(short) (-2819), (short) (-3414), (short) (-1), (short)2516, (short)1}, shortArray0);
      assertEquals(5, shortArray0.length);
      
      short[] shortArray1 = ArrayUtils.clone(shortArray0);
      assertArrayEquals(new short[] {(short) (-2819), (short) (-3414), (short) (-1), (short)2516, (short)1}, shortArray1);
      assertArrayEquals(new short[] {(short) (-2819), (short) (-3414), (short) (-1), (short)2516, (short)1}, shortArray0);
      assertEquals(5, shortArray1.length);
      assertEquals(5, shortArray0.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertNotNull(shortArray1);
  }

  @Test(timeout = 4000)
  public void test0875()  throws Throwable  {
      float[] floatArray0 = new float[10];
      floatArray0[0] = (-971.6495F);
      floatArray0[1] = (-971.6495F);
      floatArray0[2] = 1713.691F;
      char[] charArray0 = new char[4];
      charArray0[0] = '\u0080';
      charArray0[1] = '{';
      charArray0[2] = 'o';
      charArray0[3] = '2';
      char[] charArray1 = ArrayUtils.removeElement(charArray0, '2');
      assertArrayEquals(new char[] {'\u0080', '{', 'o', '2'}, charArray0);
      assertArrayEquals(new char[] {'\u0080', '{', 'o'}, charArray1);
      assertEquals(4, charArray0.length);
      assertEquals(3, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      
      floatArray0[1] = (-971.6495F);
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(11);
      assertEquals("java.nio.DirectByteBuffer[pos=0 lim=11 cap=11]", byteBuffer0.toString());
      assertFalse(byteBuffer0.hasArray());
      assertEquals(0, byteBuffer0.position());
      assertTrue(byteBuffer0.isDirect());
      assertEquals(11, byteBuffer0.remaining());
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals(11, byteBuffer0.limit());
      assertTrue(byteBuffer0.hasRemaining());
      assertEquals(11, byteBuffer0.capacity());
      assertNotNull(byteBuffer0);
      
      ByteBuffer byteBuffer1 = byteBuffer0.putInt(1);
      assertFalse(byteBuffer0.hasArray());
      assertEquals("java.nio.DirectByteBuffer[pos=4 lim=11 cap=11]", byteBuffer0.toString());
      assertTrue(byteBuffer0.isDirect());
      assertEquals(4, byteBuffer0.position());
      assertEquals(7, byteBuffer0.remaining());
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals(11, byteBuffer0.limit());
      assertTrue(byteBuffer0.hasRemaining());
      assertEquals(11, byteBuffer0.capacity());
      assertTrue(byteBuffer1.hasRemaining());
      assertEquals(7, byteBuffer1.remaining());
      assertFalse(byteBuffer1.hasArray());
      assertEquals(11, byteBuffer1.capacity());
      assertFalse(byteBuffer1.isReadOnly());
      assertEquals(11, byteBuffer1.limit());
      assertEquals(4, byteBuffer1.position());
      assertEquals("java.nio.DirectByteBuffer[pos=4 lim=11 cap=11]", byteBuffer1.toString());
      assertTrue(byteBuffer1.isDirect());
      assertSame(byteBuffer0, byteBuffer1);
      assertSame(byteBuffer1, byteBuffer0);
      assertNotNull(byteBuffer1);
      
      BitSet bitSet0 = BitSet.valueOf(byteBuffer0);
      assertFalse(byteBuffer0.hasArray());
      assertEquals("java.nio.DirectByteBuffer[pos=4 lim=11 cap=11]", byteBuffer0.toString());
      assertTrue(byteBuffer0.isDirect());
      assertEquals(4, byteBuffer0.position());
      assertEquals(7, byteBuffer0.remaining());
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals(11, byteBuffer0.limit());
      assertTrue(byteBuffer0.hasRemaining());
      assertEquals(11, byteBuffer0.capacity());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertSame(byteBuffer0, byteBuffer1);
      assertNotNull(bitSet0);
  }

  @Test(timeout = 4000)
  public void test0876()  throws Throwable  {
      int int0 = ArrayUtils.lastIndexOf((float[]) null, 1.0F, 31);
      assertEquals((-1), int0);
      
      byte[] byteArray0 = ArrayUtils.clone((byte[]) null);
      assertNull(byteArray0);
      
      byte[] byteArray1 = ArrayUtils.add((byte[]) null, (byte)2);
      assertArrayEquals(new byte[] {(byte)2}, byteArray1);
      assertEquals(1, byteArray1.length);
      assertNotNull(byteArray1);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(byteArray1, (byte)2, 1);
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertArrayEquals(new byte[] {(byte)2}, byteArray1);
      assertEquals(1, byteArray1.length);
      assertNotNull(bitSet0);
      
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        ArrayUtils.remove(charArray0, 31);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 31, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0877()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.0;
      long[] longArray0 = new long[1];
      longArray0[0] = (long) 1427;
      ArrayUtils.shift(longArray0, 2, 1427, 0);
      assertArrayEquals(new long[] {1427L}, longArray0);
      assertEquals(1, longArray0.length);
      
      Object[] objectArray0 = new Object[4];
      Object object0 = ArrayUtils.get(objectArray0, 2, (Object) "&qXMmUj");
      assertEquals(4, objectArray0.length);
      assertNull(object0);
      
      objectArray0[0] = null;
      objectArray0[1] = (Object) 1427L;
      objectArray0[2] = (Object) 1427L;
      objectArray0[3] = (Object) 1427L;
      boolean boolean0 = ArrayUtils.isEmpty(objectArray0);
      assertEquals(4, objectArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0878()  throws Throwable  {
      BitSet bitSet0 = new BitSet();
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertNotNull(bitSet0);
      
      byte[] byteArray0 = new byte[0];
      ArrayUtils.swap(byteArray0, 11, 11, 11);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short)1070;
      shortArray0[2] = (short) (-430);
      shortArray0[3] = (short) (-94);
      shortArray0[4] = (short)2;
      char[] charArray0 = new char[4];
      charArray0[0] = '0';
      charArray0[1] = 'R';
      charArray0[2] = 'R';
      charArray0[3] = '0';
      char[] charArray1 = ArrayUtils.removeElement(charArray0, 'R');
      assertArrayEquals(new char[] {'0', 'R', 'R', '0'}, charArray0);
      assertArrayEquals(new char[] {'0', 'R', '0'}, charArray1);
      assertEquals(4, charArray0.length);
      assertEquals(3, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      
      Object[] objectArray0 = new Object[2];
      Object object0 = ArrayUtils.get(objectArray0, 1, (Object) bitSet0);
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(2, objectArray0.length);
      assertNull(object0);
      
      objectArray0[0] = null;
      objectArray0[1] = (Object) (short)2;
      // Undeclared exception!
      try { 
        bitSet0.get((int) 'R', (int) '0');
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // fromIndex: 82 > toIndex: 48
         //
         verifyException("java.util.BitSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test0879()  throws Throwable  {
      BitSet bitSet0 = new BitSet();
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertNotNull(bitSet0);
      
      byte[] byteArray0 = new byte[0];
      short[] shortArray0 = new short[2];
      shortArray0[1] = (short)0;
      short[] shortArray1 = ArrayUtils.insert((int) (short)0, shortArray0, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0}, shortArray1);
      assertEquals(2, shortArray0.length);
      assertEquals(4, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
  }

  @Test(timeout = 4000)
  public void test0880()  throws Throwable  {
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)2;
      shortArray0[1] = (short)64;
      short[] shortArray1 = ArrayUtils.removeAllOccurences(shortArray0, (short)64);
      assertArrayEquals(new short[] {(short)2, (short)64}, shortArray0);
      assertArrayEquals(new short[] {(short)2}, shortArray1);
      assertEquals(2, shortArray0.length);
      assertEquals(1, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      
      int[] intArray0 = new int[8];
      intArray0[1] = (int) (short)2;
      intArray0[2] = (int) (short)2;
      intArray0[3] = (int) (short)64;
      intArray0[4] = (int) (short)2;
      intArray0[5] = (int) (short)2;
      intArray0[6] = (int) (short)2;
      intArray0[7] = (int) (short)2;
      int[] intArray1 = ArrayUtils.subarray(intArray0, 2, (-3414));
      assertArrayEquals(new int[] {0, 2, 2, 64, 2, 2, 2, 2}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(8, intArray0.length);
      assertEquals(0, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      
      short[] shortArray2 = ArrayUtils.addFirst(shortArray0, (short)131);
      assertArrayEquals(new short[] {(short)2, (short)64}, shortArray0);
      assertArrayEquals(new short[] {(short)131, (short)2, (short)64}, shortArray2);
      assertEquals(2, shortArray0.length);
      assertEquals(3, shortArray2.length);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray2.equals((Object)shortArray1));
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray0, shortArray2);
      assertNotSame(shortArray2, shortArray1);
      assertNotSame(shortArray2, shortArray0);
      assertNotNull(shortArray2);
  }

  @Test(timeout = 4000)
  public void test0881()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      double[] doubleArray1 = ArrayUtils.removeAllOccurences(doubleArray0, (-1.0));
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      
      String[] stringArray0 = ArrayUtils.EMPTY_STRING_ARRAY;
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      int[] intArray0 = new int[9];
      int int0 = ArrayUtils.indexOf(intArray0, 0, 0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(9, intArray0.length);
      assertEquals(0, int0);
      
      Double[] doubleArray2 = new Double[3];
      Double double0 = new Double(3072.8331912839103);
      assertNotNull(double0);
      assertEquals(3072.8331912839103, (double)double0, 0.01);
      
      doubleArray2[0] = double0;
      // Undeclared exception!
      try { 
        ArrayUtils.toPrimitive(doubleArray2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0882()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte) (-44);
      byteArray0[2] = (byte) (-39);
      byteArray0[3] = (byte)2;
      byteArray0[4] = (byte)51;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)45;
      byteArray0[8] = (byte) (-42);
      byte[] byteArray1 = ArrayUtils.removeAllOccurences(byteArray0, (byte)0);
      assertArrayEquals(new byte[] {(byte)2, (byte) (-44), (byte) (-39), (byte)2, (byte)51, (byte)0, (byte)0, (byte)45, (byte) (-42)}, byteArray0);
      assertArrayEquals(new byte[] {(byte)2, (byte) (-44), (byte) (-39), (byte)2, (byte)51, (byte)45, (byte) (-42)}, byteArray1);
      assertEquals(9, byteArray0.length);
      assertEquals(7, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((double[]) null, 1.0, (int) (byte) (-39));
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertNotNull(bitSet0);
  }

  @Test(timeout = 4000)
  public void test0883()  throws Throwable  {
      Character[] characterArray0 = new Character[5];
      char char0 = 'K';
      Character character0 = Character.valueOf('K');
      assertNotNull(character0);
      assertEquals('K', (char)character0);
      
      characterArray0[0] = character0;
      Character character1 = Character.valueOf(char0);
      assertNotNull(character1);
      assertEquals('K', (char)character1);
      
      characterArray0[1] = character1;
      Character character2 = Character.valueOf(char0);
      assertNotNull(character2);
      assertEquals('K', (char)character2);
      
      Character[] characterArray1 = new Character[7];
      assertFalse(characterArray1.equals((Object)characterArray0));
      
      Character character3 = Character.valueOf(char0);
      assertNotNull(character3);
      assertEquals('K', (char)character3);
      
      characterArray1[0] = character3;
      characterArray1[1] = character2;
      Character character4 = new Character('H');
      assertFalse(character4.equals((Object)character3));
      assertFalse(character4.equals((Object)character2));
      assertFalse(character4.equals((Object)char0));
      assertFalse(character4.equals((Object)character1));
      assertFalse(character4.equals((Object)character0));
      assertNotNull(character4);
      assertEquals('H', (char)character4);
      
      characterArray1[2] = character4;
      characterArray1[3] = character0;
      characterArray1[4] = character1;
      characterArray1[5] = character0;
      characterArray1[6] = character1;
      Character[] characterArray2 = ArrayUtils.nullToEmpty(characterArray1);
      assertEquals(7, characterArray2.length);
      assertEquals(7, characterArray1.length);
      assertFalse(characterArray2.equals((Object)characterArray0));
      assertFalse(characterArray1.equals((Object)characterArray0));
      assertNotSame(characterArray2, characterArray0);
      assertSame(characterArray2, characterArray1);
      assertNotSame(characterArray1, characterArray0);
      assertSame(characterArray1, characterArray2);
      assertNotNull(characterArray2);
  }

  @Test(timeout = 4000)
  public void test0884()  throws Throwable  {
      Float[] floatArray0 = new Float[5];
      Float float0 = new Float(3.0);
      assertNotNull(float0);
      assertEquals(3.0F, (float)float0, 0.01F);
      
      floatArray0[0] = float0;
      Float float1 = new Float(5092.0F);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertNotNull(float1);
      assertEquals(5092.0F, (float)float1, 0.01F);
      
      floatArray0[1] = float1;
      Float float2 = new Float((double) floatArray0[0]);
      assertEquals(5, floatArray0.length);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertEquals((float)float2, (float)float0, 0.01F);
      assertNotNull(float2);
      assertEquals(3.0F, (float)float2, 0.01F);
      
      floatArray0[2] = float2;
      Float float3 = new Float((float) floatArray0[1]);
      assertEquals(5, floatArray0.length);
      assertEquals((float)float3, (float)float1, 0.01F);
      assertNotEquals((float)float3, (float)float2, 0.01F);
      assertNotEquals((float)float3, (float)float0, 0.01F);
      assertNotNull(float3);
      assertEquals(5092.0F, (float)float3, 0.01F);
      
      floatArray0[3] = float3;
      Float float4 = new Float(98.2F);
      assertNotEquals((float)float4, (float)float0, 0.01F);
      assertNotEquals((float)float4, (float)float1, 0.01F);
      assertNotEquals((float)float4, (float)float2, 0.01F);
      assertNotEquals((float)float4, (float)float3, 0.01F);
      assertNotNull(float4);
      assertEquals(98.2F, (float)float4, 0.01F);
      
      floatArray0[4] = float4;
      Float[] floatArray1 = ArrayUtils.nullToEmpty(floatArray0);
      assertEquals(5, floatArray0.length);
      assertEquals(5, floatArray1.length);
      assertSame(floatArray0, floatArray1);
      assertSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
  }

  @Test(timeout = 4000)
  public void test0885()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[0] = (byte) (-42);
      byteArray0[2] = (byte) (-42);
      byte[] byteArray1 = ArrayUtils.removeAllOccurences(byteArray0, (byte) (-42));
      assertArrayEquals(new byte[] {(byte) (-42), (byte)0, (byte) (-42)}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray1);
      assertEquals(3, byteArray0.length);
      assertEquals(1, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      
      int[] intArray0 = ArrayUtils.subarray((int[]) null, (-1556), (-2139));
      assertNull(intArray0);
      
      Float float0 = new Float((double) 2);
      assertNotNull(float0);
      assertEquals(2.0F, (float)float0, 0.01F);
      
      Float float1 = new Float(1.0);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertNotNull(float1);
      assertEquals(1.0F, (float)float1, 0.01F);
      
      Float float2 = new Float((double) (-1556));
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertNotNull(float2);
      assertEquals((-1556.0F), (float)float2, 0.01F);
      
      Float[] floatArray0 = new Float[0];
      Float[] floatArray1 = ArrayUtils.nullToEmpty(floatArray0);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      
      Character[] characterArray0 = ArrayUtils.nullToEmpty((Character[]) null);
      assertEquals(0, characterArray0.length);
      assertNotNull(characterArray0);
  }

  @Test(timeout = 4000)
  public void test0886()  throws Throwable  {
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)2;
      shortArray0[1] = (short)64;
      short[] shortArray1 = ArrayUtils.removeAllOccurences(shortArray0, (short)64);
      assertArrayEquals(new short[] {(short)2, (short)64}, shortArray0);
      assertArrayEquals(new short[] {(short)2}, shortArray1);
      assertEquals(2, shortArray0.length);
      assertEquals(1, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      
      int[] intArray0 = new int[8];
      intArray0[0] = (int) (short)64;
      shortArray0[0] = (short)2;
      intArray0[2] = (int) (short)2;
      intArray0[3] = (int) (short)64;
      intArray0[4] = (int) (short)2;
      intArray0[5] = (int) (short)64;
      intArray0[6] = (int) (short)2;
      intArray0[7] = (int) (short)2;
      int[] intArray1 = ArrayUtils.subarray(intArray0, 2, (-3414));
      assertArrayEquals(new int[] {64, 0, 2, 64, 2, 64, 2, 2}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(8, intArray0.length);
      assertEquals(0, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      
      Float[] floatArray0 = new Float[3];
      Float float0 = new Float(914.944001638755);
      assertNotNull(float0);
      assertEquals(914.94403F, (float)float0, 0.01F);
      
      floatArray0[0] = float0;
      Float float1 = new Float((double) (short)2);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertNotNull(float1);
      assertEquals(2.0F, (float)float1, 0.01F);
      
      floatArray0[1] = float1;
      Float float2 = new Float((-2101.5));
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertNotNull(float2);
      assertEquals((-2101.5F), (float)float2, 0.01F);
      
      floatArray0[2] = float2;
      Float[] floatArray1 = ArrayUtils.nullToEmpty(floatArray0);
      assertEquals(3, floatArray1.length);
      assertEquals(3, floatArray0.length);
      assertSame(floatArray1, floatArray0);
      assertSame(floatArray0, floatArray1);
      assertNotNull(floatArray1);
      
      Character[] characterArray0 = ArrayUtils.nullToEmpty((Character[]) null);
      assertEquals(0, characterArray0.length);
      assertNotNull(characterArray0);
  }

  @Test(timeout = 4000)
  public void test0887()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = '~';
      char[] charArray1 = ArrayUtils.add(charArray0, '~');
      assertArrayEquals(new char[] {'~', '\u0000'}, charArray0);
      assertArrayEquals(new char[] {'~', '\u0000', '~'}, charArray1);
      assertEquals(2, charArray0.length);
      assertEquals(3, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      
      int[] intArray0 = new int[8];
      intArray0[0] = 1309;
      intArray0[1] = 955;
      intArray0[2] = (int) '~';
      intArray0[3] = (int) '~';
      intArray0[4] = (int) '~';
      intArray0[5] = (int) '~';
      intArray0[6] = (int) '~';
      intArray0[7] = 955;
      boolean boolean0 = ArrayUtils.contains(intArray0, 955);
      assertArrayEquals(new int[] {1309, 955, 126, 126, 126, 126, 126, 955}, intArray0);
      assertEquals(8, intArray0.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0888()  throws Throwable  {
      Character character0 = Character.valueOf('}');
      assertNotNull(character0);
      assertEquals('}', (char)character0);
      
      Character character1 = new Character('5');
      assertFalse(character1.equals((Object)character0));
      assertNotNull(character1);
      assertEquals('5', (char)character1);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) '5';
      doubleArray0[0] = (double) '5';
      ArrayUtils.swap(doubleArray0, 9, 9, 1489);
      assertArrayEquals(new double[] {53.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      
      Integer[] integerArray0 = new Integer[0];
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0, 9);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, integerArray0.length);
      assertEquals(0, intArray0.length);
      assertNotNull(intArray0);
      
      boolean boolean0 = ArrayUtils.contains(intArray0, 1489);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, integerArray0.length);
      assertEquals(0, intArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0889()  throws Throwable  {
      Byte byte0 = new Byte((byte)99);
      assertNotNull(byte0);
      assertEquals((byte)99, (byte)byte0);
      
      Byte byte1 = new Byte((byte)89);
      assertFalse(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      assertEquals((byte)89, (byte)byte1);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (byte)89;
      doubleArray0[1] = (double) (-2880L);
      doubleArray0[2] = (double) (byte)89;
      ArrayUtils.reverse(doubleArray0);
      assertArrayEquals(new double[] {89.0, (-2880.0), 89.0}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) (-2880L);
      ArrayUtils.reverse(floatArray0);
      assertArrayEquals(new float[] {(-2880.0F)}, floatArray0, 0.01F);
      assertEquals(1, floatArray0.length);
      
      float[] floatArray1 = ArrayUtils.add(floatArray0, (float) (byte)89);
      assertArrayEquals(new float[] {(-2880.0F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-2880.0F), 89.0F}, floatArray1, 0.01F);
      assertEquals(1, floatArray0.length);
      assertEquals(2, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      
      float[] floatArray2 = ArrayUtils.clone(floatArray1);
      assertArrayEquals(new float[] {(-2880.0F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-2880.0F), 89.0F}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {(-2880.0F), 89.0F}, floatArray2, 0.01F);
      assertEquals(1, floatArray0.length);
      assertEquals(2, floatArray1.length);
      assertEquals(2, floatArray2.length);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray0, floatArray2);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray1, floatArray2);
      assertNotSame(floatArray2, floatArray1);
      assertNotSame(floatArray2, floatArray0);
      assertNotNull(floatArray2);
      
      ArrayUtils.swap(floatArray2, 1670, 1670);
      assertArrayEquals(new float[] {(-2880.0F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-2880.0F), 89.0F}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {(-2880.0F), 89.0F}, floatArray2, 0.01F);
      assertEquals(1, floatArray0.length);
      assertEquals(2, floatArray1.length);
      assertEquals(2, floatArray2.length);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray0.equals((Object)floatArray2));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertFalse(floatArray1.equals((Object)floatArray2));
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray0, floatArray2);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray1, floatArray2);
      assertNotSame(floatArray2, floatArray1);
      assertNotSame(floatArray2, floatArray0);
  }

  @Test(timeout = 4000)
  public void test0890()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = '[';
      charArray0[1] = 'h';
      charArray0[2] = 'P';
      charArray0[3] = '0';
      char[] charArray1 = ArrayUtils.removeElement(charArray0, 'R');
      assertArrayEquals(new char[] {'[', 'h', 'P', '0'}, charArray0);
      assertArrayEquals(new char[] {'[', 'h', 'P', '0'}, charArray1);
      assertEquals(4, charArray0.length);
      assertEquals(4, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) '0';
      objectArray0[1] = (Object) 'P';
      objectArray0[2] = (Object) 'P';
      objectArray0[3] = (Object) '[';
      BitSet bitSet0 = ArrayUtils.indexesOf(objectArray0, objectArray0[1], (-2560));
      assertEquals(64, bitSet0.size());
      assertEquals(3, bitSet0.length());
      assertEquals("{1, 2}", bitSet0.toString());
      assertEquals(2, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertEquals(4, objectArray0.length);
      assertNotNull(bitSet0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte) (-112);
      byteArray0[2] = (byte)19;
      BitSet bitSet1 = ArrayUtils.indexesOf(byteArray0, (byte)9);
      assertEquals(0, bitSet1.cardinality());
      assertEquals("{}", bitSet1.toString());
      assertEquals(64, bitSet1.size());
      assertTrue(bitSet1.isEmpty());
      assertEquals(0, bitSet1.length());
      assertArrayEquals(new byte[] {(byte)1, (byte) (-112), (byte)19}, byteArray0);
      assertEquals(3, byteArray0.length);
      assertFalse(bitSet1.equals((Object)bitSet0));
      assertNotSame(bitSet1, bitSet0);
      assertNotNull(bitSet1);
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) 'h';
      floatArray0[1] = (float) (byte)1;
      floatArray0[2] = (float) (byte)19;
      floatArray0[3] = (float) (byte)1;
      floatArray0[4] = (float) 'R';
      floatArray0[5] = (float) (byte)1;
      floatArray0[6] = (float) '[';
      floatArray0[7] = (float) 'P';
      ArrayUtils.swap(floatArray0, 477, 91, (int) (byte)9);
      assertArrayEquals(new float[] {104.0F, 1.0F, 19.0F, 1.0F, 82.0F, 1.0F, 91.0F, 80.0F}, floatArray0, 0.01F);
      assertEquals(8, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test0891()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-2101.5);
      doubleArray0[2] = 2063.283;
      double[] doubleArray1 = ArrayUtils.addFirst(doubleArray0, (-2101.5));
      assertArrayEquals(new double[] {(-2101.5), 0.0, 2063.283}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-2101.5), (-2101.5), 0.0, 2063.283}, doubleArray1, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = 13.1876335F;
      int int0 = ArrayUtils.lastIndexOf(floatArray0, (-740.28F), (-19));
      assertArrayEquals(new float[] {13.1876335F}, floatArray0, 0.01F);
      assertEquals(1, floatArray0.length);
      assertEquals((-1), int0);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (byte)78;
      short[] shortArray1 = ArrayUtils.removeAllOccurrences(shortArray0, (short) (-20352));
      assertArrayEquals(new short[] {(short)78, (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)78, (short)0}, shortArray1);
      assertEquals(2, shortArray0.length);
      assertEquals(2, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      
      // Undeclared exception!
      try { 
        ArrayUtils.insert((-1), doubleArray1, doubleArray1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Length: 4
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0892()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 'F';
      doubleArray0[1] = (double) 'q';
      double[] doubleArray1 = ArrayUtils.addFirst(doubleArray0, 1.5);
      assertArrayEquals(new double[] {70.0, 113.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.5, 70.0, 113.0}, doubleArray1, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
  }

  @Test(timeout = 4000)
  public void test0893()  throws Throwable  {
      Byte byte0 = new Byte((byte) (-115));
      assertNotNull(byte0);
      assertEquals((byte) (-115), (byte)byte0);
      
      Byte byte1 = new Byte((byte) (-115));
      assertTrue(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      assertEquals((byte) (-115), (byte)byte1);
      
      boolean boolean0 = ArrayUtils.isSameLength((char[]) null, (char[]) null);
      assertTrue(boolean0);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      int int0 = mockRandom0.nextInt();
      assertEquals(0, int0);
      
      LongStream longStream0 = mockRandom0.longs();
      assertNotNull(longStream0);
      
      long[] longArray0 = new long[0];
  }

  @Test(timeout = 4000)
  public void test0894()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSameLength((char[]) null, (char[]) null);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (byte)2;
      doubleArray0[1] = (double) (byte) (-44);
      doubleArray0[2] = (double) (byte) (-44);
      doubleArray0[3] = (double) (byte) (-44);
      doubleArray0[4] = (double) (byte)2;
      double[] doubleArray1 = ArrayUtils.addFirst(doubleArray0, 0.7);
      assertArrayEquals(new double[] {2.0, (-44.0), (-44.0), (-44.0), 2.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.7, 2.0, (-44.0), (-44.0), (-44.0), 2.0}, doubleArray1, 0.01);
      assertEquals(5, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      
      int[] intArray0 = new int[9];
      intArray0[0] = 904;
      intArray0[1] = (int) (byte) (-44);
      intArray0[2] = (int) (byte) (-44);
      intArray0[3] = (int) (byte) (-44);
      intArray0[4] = (int) (byte)2;
      intArray0[5] = (int) (byte) (-44);
      intArray0[6] = (int) (byte) (-44);
      intArray0[7] = (int) (byte)2;
      intArray0[8] = (int) (byte)2;
      BitSet bitSet0 = ArrayUtils.indexesOf(intArray0, (-3689));
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertArrayEquals(new int[] {904, (-44), (-44), (-44), 2, (-44), (-44), 2, 2}, intArray0);
      assertEquals(9, intArray0.length);
      assertNotNull(bitSet0);
  }

  @Test(timeout = 4000)
  public void test0895()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = ArrayUtils.removeAllOccurences(doubleArray0, (-1.0));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      
      Object[] objectArray0 = new Object[7];
      String[] stringArray0 = ArrayUtils.EMPTY_STRING_ARRAY;
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      int[] intArray0 = new int[9];
      int int0 = ArrayUtils.indexOf(intArray0, 0, 0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(9, intArray0.length);
      assertEquals(0, int0);
      
      Double[] doubleArray2 = new Double[1];
      Double double0 = new Double(3072.8331912839103);
      assertNotNull(double0);
      assertEquals(3072.8331912839103, (double)double0, 0.01);
      
      doubleArray2[0] = double0;
      double[] doubleArray3 = ArrayUtils.toPrimitive(doubleArray2);
      assertArrayEquals(new double[] {3072.8331912839103}, doubleArray3, 0.01);
      assertEquals(1, doubleArray2.length);
      assertEquals(1, doubleArray3.length);
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotNull(doubleArray3);
  }

  @Test(timeout = 4000)
  public void test0896()  throws Throwable  {
      int[] intArray0 = new int[0];
      Character character0 = Character.valueOf('g');
      assertNotNull(character0);
      assertEquals('g', (char)character0);
      
      Character character1 = Character.valueOf('g');
      assertNotNull(character1);
      assertEquals('g', (char)character1);
      
      Object[] objectArray0 = new Object[0];
      Short short0 = new Short((short)1090);
      assertNotNull(short0);
      assertEquals((short)1090, (short)short0);
      
      boolean boolean0 = ArrayUtils.contains(objectArray0, (Object) short0);
      assertEquals(0, objectArray0.length);
      assertFalse(boolean0);
      
      double[] doubleArray0 = ArrayUtils.toPrimitive((Double[]) null);
      assertNull(doubleArray0);
      
      char[] charArray0 = ArrayUtils.addAll((char[]) null, (char[]) null);
      assertNull(charArray0);
  }

  @Test(timeout = 4000)
  public void test0897()  throws Throwable  {
      float[] floatArray0 = new float[1];
      floatArray0[0] = (-2239.035F);
      ArrayUtils.reverse(floatArray0, 2518, 0);
      assertArrayEquals(new float[] {(-2239.035F)}, floatArray0, 0.01F);
      assertEquals(1, floatArray0.length);
      
      ArrayUtils.swap((short[]) null, 1441, 2518);
      BitSet bitSet0 = ArrayUtils.indexesOf((short[]) null, (short) (byte) (-44));
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertNotNull(bitSet0);
  }

  @Test(timeout = 4000)
  public void test0898()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[1] = '[';
      charArray0[2] = '!';
      MockRandom mockRandom0 = new MockRandom((-2753L));
      assertNotNull(mockRandom0);
      
      ArrayUtils.shuffle(charArray0, (Random) mockRandom0);
      assertArrayEquals(new char[] {'[', '!', '\u0000'}, charArray0);
      assertEquals(3, charArray0.length);
      
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short)482;
      shortArray0[1] = (short)4485;
      shortArray0[2] = (short)0;
      shortArray0[3] = (short)0;
      shortArray0[4] = (short)1;
      shortArray0[5] = (short)0;
      shortArray0[6] = (short)851;
      shortArray0[7] = (short)0;
      short[] shortArray1 = ArrayUtils.removeElement(shortArray0, (short) (-159));
      assertArrayEquals(new short[] {(short)482, (short)4485, (short)0, (short)0, (short)1, (short)0, (short)851, (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)482, (short)4485, (short)0, (short)0, (short)1, (short)0, (short)851, (short)0}, shortArray1);
      assertEquals(8, shortArray0.length);
      assertEquals(8, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (short)0;
      doubleArray0[1] = (double) (short)0;
      doubleArray0[2] = (double) (short)0;
      doubleArray0[3] = 1028.496777019048;
      double[] doubleArray1 = ArrayUtils.nullToEmpty(doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 1028.496777019048}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 1028.496777019048}, doubleArray0, 0.01);
      assertEquals(4, doubleArray1.length);
      assertEquals(4, doubleArray0.length);
      assertSame(doubleArray1, doubleArray0);
      assertSame(doubleArray0, doubleArray1);
      assertNotNull(doubleArray1);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) (short) (-159);
      floatArray0[1] = (-904.0746F);
      floatArray0[2] = (float) (short)851;
      floatArray0[3] = (float) 'G';
      floatArray0[4] = (float) '[';
      ArrayUtils.reverse(floatArray0, (int) (short)1, (-2147079799));
      assertArrayEquals(new float[] {(-159.0F), (-904.0746F), 851.0F, 71.0F, 91.0F}, floatArray0, 0.01F);
      assertEquals(5, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test0899()  throws Throwable  {
      long[] longArray0 = new long[3];
      longArray0[2] = (long) 0;
      ArrayUtils.shift(longArray0, 0);
      assertArrayEquals(new long[] {0L, 0L, 0L}, longArray0);
      assertEquals(3, longArray0.length);
      
      boolean boolean0 = ArrayUtils.isSameLength((char[]) null, (char[]) null);
      assertTrue(boolean0);
      
      MockRandom mockRandom0 = new MockRandom(1L);
      assertNotNull(mockRandom0);
      
      long long0 = mockRandom0.nextLong();
      assertEquals(0L, long0);
      
      int int0 = mockRandom0.nextInt();
      assertEquals(1, int0);
      
      LongStream longStream0 = mockRandom0.longs();
      assertNotNull(longStream0);
      
      ArrayUtils.shuffle(longArray0, (Random) mockRandom0);
      assertArrayEquals(new long[] {0L, 0L, 0L}, longArray0);
      assertEquals(3, longArray0.length);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((char[]) null, 'E', (-85));
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertNotNull(bitSet0);
      
      int[] intArray0 = new int[5];
      intArray0[0] = 1;
      intArray0[1] = (-85);
      intArray0[2] = (int) 'E';
      intArray0[3] = (int) '#';
      intArray0[4] = (-85);
      int[] intArray1 = ArrayUtils.nullToEmpty(intArray0);
      assertArrayEquals(new int[] {1, (-85), 69, 35, (-85)}, intArray1);
      assertArrayEquals(new int[] {1, (-85), 69, 35, (-85)}, intArray0);
      assertEquals(5, intArray1.length);
      assertEquals(5, intArray0.length);
      assertSame(intArray1, intArray0);
      assertSame(intArray0, intArray1);
      assertNotNull(intArray1);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 0L;
      doubleArray0[1] = (double) 0L;
      double[] doubleArray1 = ArrayUtils.nullToEmpty(doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertSame(doubleArray0, doubleArray1);
      assertSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
  }

  @Test(timeout = 4000)
  public void test0900()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = '~';
      ArrayUtils.swap(charArray0, (int) (short)43, (-1671));
      assertArrayEquals(new char[] {'~'}, charArray0);
      assertEquals(1, charArray0.length);
      
      boolean boolean0 = ArrayUtils.isSameLength((double[]) null, (double[]) null);
      assertTrue(boolean0);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) '~';
      floatArray0[0] = (float) 3456;
      floatArray0[2] = 567.0F;
      floatArray0[3] = (float) '~';
      ArrayUtils.swap(floatArray0, 1929, 16, 16);
      assertArrayEquals(new float[] {3456.0F, 0.0F, 567.0F, 126.0F}, floatArray0, 0.01F);
      assertEquals(4, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test0901()  throws Throwable  {
      Boolean[] booleanArray0 = new Boolean[3];
      Boolean boolean0 = new Boolean((String) null);
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      booleanArray0[0] = boolean0;
      Boolean boolean1 = Boolean.valueOf((String) null);
      assertTrue(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      assertFalse(boolean1);
      
      boolean boolean2 = ArrayUtils.isSorted((long[]) null);
      assertTrue(boolean2);
      
      Long long0 = new Long(857L);
      assertNotNull(long0);
      assertEquals(857L, (long)long0);
      
      Long long1 = new Long(1L);
      assertFalse(long1.equals((Object)long0));
      assertNotNull(long1);
      assertEquals(1L, (long)long1);
      
      Long[] longArray0 = new Long[1];
      longArray0[0] = long1;
      Long[] longArray1 = ArrayUtils.nullToEmpty(longArray0);
      assertEquals(1, longArray0.length);
      assertEquals(1, longArray1.length);
      assertSame(longArray0, longArray1);
      assertSame(longArray1, longArray0);
      assertNotNull(longArray1);
      
      short[] shortArray0 = ArrayUtils.nullToEmpty((short[]) null);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray0.length);
      assertNotNull(shortArray0);
      
      short[] shortArray1 = ArrayUtils.subarray((short[]) null, 2143468853, 0);
      assertNull(shortArray1);
      
      boolean boolean3 = ArrayUtils.isSameType(boolean0, long1);
      assertFalse(boolean0.equals((Object)boolean2));
      assertTrue(boolean0.equals((Object)boolean1));
      assertFalse(long1.equals((Object)long0));
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3);
  }

  @Test(timeout = 4000)
  public void test0902()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = 'g';
      charArray0[1] = '3';
      charArray0[2] = 'i';
      charArray0[3] = '(';
      ArrayUtils.swap(charArray0, 1929, 3456);
      assertArrayEquals(new char[] {'g', '3', 'i', '('}, charArray0);
      assertEquals(4, charArray0.length);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((double[]) null, (-1.0), (double) 3456);
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertNotNull(bitSet0);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 614.4;
      doubleArray0[1] = (double) 3456;
      boolean boolean0 = ArrayUtils.isSameLength(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {614.4, 3456.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      assertTrue(boolean0);
      
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      BitSet bitSet1 = ArrayUtils.indexesOf(booleanArray0, true);
      assertEquals(5, bitSet1.cardinality());
      assertEquals("{0, 1, 2, 3, 4}", bitSet1.toString());
      assertEquals(5, bitSet1.length());
      assertEquals(64, bitSet1.size());
      assertFalse(bitSet1.isEmpty());
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true}, booleanArray0));
      assertEquals(5, booleanArray0.length);
      assertFalse(bitSet1.equals((Object)bitSet0));
      assertNotSame(bitSet1, bitSet0);
      assertNotNull(bitSet1);
      
      Long[] longArray0 = new Long[8];
      long long0 = 0L;
      Long long1 = new Long(0L);
      assertTrue(long1.equals((Object)long0));
      assertNotNull(long1);
      assertEquals(0L, (long)long1);
      
      longArray0[0] = long1;
      Long long2 = new Long(0L);
      assertTrue(long2.equals((Object)long0));
      assertTrue(long2.equals((Object)long1));
      assertNotNull(long2);
      assertEquals(0L, (long)long2);
      
      longArray0[1] = long2;
      Long long3 = new Long(3456);
      assertFalse(long3.equals((Object)long2));
      assertFalse(long3.equals((Object)long1));
      assertFalse(long3.equals((Object)long0));
      assertNotNull(long3);
      assertEquals(3456L, (long)long3);
      
      longArray0[2] = long3;
      Long long4 = new Long(long0);
      assertFalse(long4.equals((Object)long3));
      assertTrue(long4.equals((Object)long0));
      assertTrue(long4.equals((Object)long1));
      assertTrue(long4.equals((Object)long2));
      assertNotNull(long4);
      assertEquals(0L, (long)long4);
      
      longArray0[3] = long4;
      Long long5 = new Long(1929);
      assertFalse(long5.equals((Object)long1));
      assertFalse(long5.equals((Object)long2));
      assertFalse(long5.equals((Object)long0));
      assertFalse(long5.equals((Object)long3));
      assertFalse(long5.equals((Object)long4));
      assertNotNull(long5);
      assertEquals(1929L, (long)long5);
      
      longArray0[4] = long5;
      Long long6 = new Long((-1L));
      assertFalse(long6.equals((Object)long2));
      assertFalse(long6.equals((Object)long4));
      assertFalse(long6.equals((Object)long3));
      assertFalse(long6.equals((Object)long0));
      assertFalse(long6.equals((Object)long1));
      assertFalse(long6.equals((Object)long5));
      assertNotNull(long6);
      assertEquals((-1L), (long)long6);
      
      longArray0[5] = long6;
      Long long7 = new Long(0L);
      assertTrue(long7.equals((Object)long0));
      assertFalse(long7.equals((Object)long5));
      assertFalse(long7.equals((Object)long6));
      assertTrue(long7.equals((Object)long2));
      assertFalse(long7.equals((Object)long3));
      assertTrue(long7.equals((Object)long4));
      assertTrue(long7.equals((Object)long1));
      assertNotNull(long7);
      assertEquals(0L, (long)long7);
      
      longArray0[6] = long7;
      Long long8 = new Long((-2102L));
      assertFalse(long8.equals((Object)long1));
      assertFalse(long8.equals((Object)long5));
      assertFalse(long8.equals((Object)long2));
      assertFalse(long8.equals((Object)long3));
      assertFalse(long8.equals((Object)long6));
      assertFalse(long8.equals((Object)long0));
      assertFalse(long8.equals((Object)long7));
      assertFalse(long8.equals((Object)long4));
      assertNotNull(long8);
      assertEquals((-2102L), (long)long8);
      
      longArray0[7] = long8;
      Long[] longArray1 = ArrayUtils.nullToEmpty(longArray0);
      assertEquals(8, longArray0.length);
      assertEquals(8, longArray1.length);
      assertSame(longArray0, longArray1);
      assertSame(longArray1, longArray0);
      assertNotNull(longArray1);
  }

  @Test(timeout = 4000)
  public void test0903()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[1] = 127;
      boolean boolean0 = ArrayUtils.isSorted(intArray0);
      assertArrayEquals(new int[] {0, 127}, intArray0);
      assertEquals(2, intArray0.length);
      assertTrue(boolean0);
      
      long[] longArray0 = new long[3];
      longArray0[0] = (long) 0;
      Long[] longArray1 = ArrayUtils.toObject(longArray0);
      assertArrayEquals(new long[] {0L, 0L, 0L}, longArray0);
      assertEquals(3, longArray0.length);
      assertEquals(3, longArray1.length);
      assertNotNull(longArray1);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((byte[]) null, (byte)0);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertNotNull(bitSet0);
  }

  @Test(timeout = 4000)
  public void test0904()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, 1, 1);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      
      try { 
        Byte.valueOf("");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test0905()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, 0, 0);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertEquals(1, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      
      try { 
        Byte.valueOf("");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test0906()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = '~';
      Long long0 = new Long(467L);
      assertNotNull(long0);
      assertEquals(467L, (long)long0);
      
      Long long1 = new Long((-2147483648L));
      assertFalse(long1.equals((Object)long0));
      assertNotNull(long1);
      assertEquals((-2147483648L), (long)long1);
      
      Long long2 = new Long((-1226L));
      assertFalse(long2.equals((Object)long0));
      assertFalse(long2.equals((Object)long1));
      assertNotNull(long2);
      assertEquals((-1226L), (long)long2);
      
      char[] charArray1 = ArrayUtils.removeElement(charArray0, 'R');
      assertArrayEquals(new char[] {'~', '\u0000'}, charArray0);
      assertArrayEquals(new char[] {'~', '\u0000'}, charArray1);
      assertEquals(2, charArray0.length);
      assertEquals(2, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) '~';
      objectArray0[1] = (Object) long1;
      objectArray0[2] = (Object) '~';
      objectArray0[3] = (Object) '~';
      BitSet bitSet0 = ArrayUtils.indexesOf(objectArray0, (Object) null, (-910));
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(4, objectArray0.length);
      assertNotNull(bitSet0);
  }

  @Test(timeout = 4000)
  public void test0907()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = true;
      booleanArray0[6] = false;
      booleanArray0[7] = false;
      boolean boolean0 = ArrayUtils.contains(booleanArray0, true);
      assertTrue(Arrays.equals(new boolean[] {false, true, true, false, false, true, false, false}, booleanArray0));
      assertEquals(8, booleanArray0.length);
      assertTrue(boolean0);
      
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) false;
      objectArray0[1] = (Object) false;
      objectArray0[3] = (Object) false;
      objectArray0[4] = (Object) false;
      objectArray0[5] = (Object) false;
      ArrayUtils.shift(objectArray0, (-1916), 0, 0);
      assertEquals(6, objectArray0.length);
      
      int int0 = ArrayUtils.indexOf(objectArray0, (Object) null);
      assertEquals(6, objectArray0.length);
      assertEquals(2, int0);
      
      ArrayUtils.swap(objectArray0, (-3689), 0, 0);
      assertEquals(6, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test0908()  throws Throwable  {
      Byte[] byteArray0 = new Byte[2];
      Byte byte0 = new Byte((byte)51);
      assertNotNull(byte0);
      assertEquals((byte)51, (byte)byte0);
      
      byteArray0[0] = byte0;
      Byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0);
      assertEquals(2, byteArray0.length);
      assertEquals(2, byteArray1.length);
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      
      ArrayUtils.shift((Object[]) byteArray0, 0, (int) (byte)51, (-1916));
      assertEquals(2, byteArray0.length);
      assertSame(byteArray0, byteArray1);
      
      Integer integer0 = new Integer(582);
      assertNotNull(integer0);
      assertEquals(582, (int)integer0);
      
      int int0 = ArrayUtils.indexOf((Object[]) byteArray1, (Object) integer0);
      assertEquals(2, byteArray0.length);
      assertEquals(2, byteArray1.length);
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray1, byteArray0);
      assertEquals((-1), int0);
      
      ArrayUtils.swap((Object[]) byteArray1, 10, 0, 1136);
      assertEquals(2, byteArray0.length);
      assertEquals(2, byteArray1.length);
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray1, byteArray0);
  }

  @Test(timeout = 4000)
  public void test0909()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 571.942196047302;
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) 571.942196047302;
      objectArray0[1] = (Object) 0.0;
      objectArray0[2] = (Object) 0.0;
      objectArray0[3] = (Object) 0.0;
      objectArray0[4] = (Object) 0.0;
      objectArray0[5] = (Object) 571.942196047302;
      ArrayUtils.shift(objectArray0, (-1262), 0, (-1916));
      assertEquals(6, objectArray0.length);
      
      int int0 = ArrayUtils.indexOf(objectArray0, objectArray0[3]);
      assertEquals(6, objectArray0.length);
      assertEquals(1, int0);
      
      ArrayUtils.swap(objectArray0, (-1262), 0, 8);
      assertEquals(6, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test0910()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      Long long0 = new Long((short)43);
      assertNotNull(long0);
      assertEquals(43L, (long)long0);
      
      Long long1 = Long.getLong("{JDAt:");
      assertNull(long1);
      
      Long[] longArray0 = new Long[5];
      longArray0[0] = long0;
      longArray0[1] = long0;
      longArray0[2] = long0;
      longArray0[3] = null;
      longArray0[4] = long0;
      Long[] longArray1 = ArrayUtils.removeElements(longArray0, longArray0);
      assertEquals(5, longArray0.length);
      assertEquals(0, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
      
      ArrayUtils.shift((Object[]) longArray0, (int) (short)43);
      assertEquals(5, longArray0.length);
      assertFalse(longArray0.equals((Object)longArray1));
      assertNotSame(longArray0, longArray1);
  }

  @Test(timeout = 4000)
  public void test0911()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      boolean boolean0 = ArrayUtils.contains(booleanArray0, true);
      assertTrue(Arrays.equals(new boolean[] {false, true, true, true, false, false, false}, booleanArray0));
      assertEquals(7, booleanArray0.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0912()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      ArrayUtils.swap(doubleArray0, 2147483636, Integer.MAX_VALUE, 2147483636);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      boolean boolean0 = ArrayUtils.contains((boolean[]) null, true);
      assertFalse(boolean0);
      
      Object[] objectArray0 = new Object[0];
      int int0 = ArrayUtils.indexOf(objectArray0, (Object) null);
      assertEquals(0, objectArray0.length);
      assertEquals((-1), int0);
      
      ArrayUtils.swap(objectArray0, 0, 0, 2147483636);
      assertEquals(0, objectArray0.length);
      
      boolean boolean1 = ArrayUtils.isSameLength(objectArray0, objectArray0);
      assertEquals(0, objectArray0.length);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      double[] doubleArray1 = ArrayUtils.subarray(doubleArray0, (-1), (-1645));
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
  }

  @Test(timeout = 4000)
  public void test0913()  throws Throwable  {
      Byte[] byteArray0 = new Byte[2];
      Byte byte0 = new Byte((byte)51);
      assertNotNull(byte0);
      assertEquals((byte)51, (byte)byte0);
      
      byteArray0[0] = byte0;
      Byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0);
      assertEquals(2, byteArray0.length);
      assertEquals(2, byteArray1.length);
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      
      boolean boolean0 = ArrayUtils.contains((short[]) null, (short)202);
      assertFalse(boolean0);
      
      ArrayUtils.swap((Object[]) byteArray1, (int) (byte)51, (int) (short)202, (int) (byte)51);
      assertEquals(2, byteArray0.length);
      assertEquals(2, byteArray1.length);
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray1, byteArray0);
      
      byte[] byteArray2 = new byte[6];
      ArrayUtils.shuffle(byteArray2);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray2);
      assertEquals(6, byteArray2.length);
  }

  @Test(timeout = 4000)
  public void test0914()  throws Throwable  {
      Byte[] byteArray0 = new Byte[2];
      Byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0);
      assertEquals(2, byteArray0.length);
      assertEquals(2, byteArray1.length);
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      
      char[] charArray0 = new char[2];
      charArray0[0] = '.';
      long[] longArray0 = new long[8];
      longArray0[0] = (long) (byte)51;
      longArray0[1] = (long) (byte)51;
      longArray0[2] = (long) '.';
      longArray0[3] = (long) '.';
      ArrayUtils.shift(longArray0, (int) (byte)51, 2146798322, 43);
      assertArrayEquals(new long[] {51L, 51L, 46L, 46L, 0L, 0L, 0L, 0L}, longArray0);
      assertEquals(8, longArray0.length);
      
      boolean boolean0 = ArrayUtils.contains((Object[]) byteArray1, (Object) null);
      assertEquals(2, byteArray0.length);
      assertEquals(2, byteArray1.length);
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray1, byteArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0915()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[1] = false;
      Boolean[] booleanArray1 = ArrayUtils.toObject(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      assertEquals(2, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      assertNotNull(booleanArray1);
      
      float[] floatArray0 = new float[2];
      Float[] floatArray1 = ArrayUtils.toObject(floatArray0);
      assertArrayEquals(new float[] {0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(2, floatArray0.length);
      assertEquals(2, floatArray1.length);
      assertNotNull(floatArray1);
      
      boolean[] booleanArray2 = ArrayUtils.removeAllOccurences(booleanArray0, false);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray2));
      assertEquals(2, booleanArray0.length);
      assertEquals(0, booleanArray2.length);
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertNotSame(booleanArray0, booleanArray2);
      assertNotSame(booleanArray2, booleanArray0);
      assertNotNull(booleanArray2);
      
      Short short0 = ArrayUtils.get((Short[]) null, (int)  (-44));
      assertNull(short0);
  }

  @Test(timeout = 4000)
  public void test0916()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      boolean[] booleanArray1 = ArrayUtils.removeAllOccurences(booleanArray0, true);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertEquals(1, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(booleanArray0, true);
      assertEquals(1, bitSet0.length());
      assertEquals("{0}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertFalse(bitSet0.isEmpty());
      assertEquals(1, bitSet0.cardinality());
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertEquals(1, booleanArray0.length);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotNull(bitSet0);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-1882.34350241);
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 1638.560535320787;
      doubleArray0[4] = (-4041.0);
      doubleArray0[5] = (-1081.59221761);
      doubleArray0[6] = 0.0;
      doubleArray0[7] = (-512.406024680395);
      doubleArray0[8] = 0.0;
      // Undeclared exception!
      try { 
        ArrayUtils.remove(doubleArray0, 53);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 53, Length: 9
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0917()  throws Throwable  {
      float[] floatArray0 = new float[3];
      floatArray0[0] = (-1385.0087F);
      boolean boolean0 = ArrayUtils.isNotEmpty(floatArray0);
      assertArrayEquals(new float[] {(-1385.0087F), 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(3, floatArray0.length);
      assertTrue(boolean0);
      
      int[] intArray0 = ArrayUtils.EMPTY_INT_ARRAY;
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertNotNull(intArray0);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) (-1385.0087F);
      doubleArray0[1] = (double) 3371;
      doubleArray0[2] = 675.779819926;
      doubleArray0[3] = (double) 3371;
      doubleArray0[4] = (double) (-1385.0087F);
      doubleArray0[5] = (double) (-1385.0087F);
      doubleArray0[6] = (double) 3371;
      // Undeclared exception!
      try { 
        ArrayUtils.remove(doubleArray0, 3371);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3371, Length: 7
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0918()  throws Throwable  {
      Long long0 = new Long(4996L);
      assertNotNull(long0);
      assertEquals(4996L, (long)long0);
      
      String string0 = ArrayUtils.toString((Object) long0);
      assertNotNull(string0);
      assertEquals("4996", string0);
      
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) "4996";
      objectArray0[1] = (Object) long0;
      objectArray0[2] = (Object) long0;
      objectArray0[3] = (Object) "4996";
      objectArray0[4] = (Object) long0;
      objectArray0[5] = (Object) "4996";
      objectArray0[6] = (Object) "4996";
      objectArray0[7] = (Object) long0;
      objectArray0[8] = (Object) long0;
      Object[] objectArray1 = ArrayUtils.nullToEmpty(objectArray0);
      assertEquals(9, objectArray0.length);
      assertEquals(9, objectArray1.length);
      assertSame(objectArray0, objectArray1);
      assertSame(objectArray1, objectArray0);
      assertNotNull(objectArray1);
      
      int[] intArray0 = new int[6];
      intArray0[0] = (-159);
      intArray0[1] = 796;
      intArray0[2] = 45;
      intArray0[3] = (-1916);
      intArray0[4] = (-44);
      intArray0[5] = 2634;
      int[] intArray1 = ArrayUtils.removeAllOccurrences(intArray0, 45);
      assertArrayEquals(new int[] {(-159), 796, (-1916), (-44), 2634}, intArray1);
      assertArrayEquals(new int[] {(-159), 796, 45, (-1916), (-44), 2634}, intArray0);
      assertEquals(5, intArray1.length);
      assertEquals(6, intArray0.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
      assertNotNull(intArray1);
  }

  @Test(timeout = 4000)
  public void test0919()  throws Throwable  {
      short[] shortArray0 = new short[4];
      short short0 = (short)560;
      shortArray0[0] = (short)560;
      shortArray0[1] = (short)0;
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) (short)0;
      floatArray0[1] = (float) (short)560;
      float[] floatArray1 = ArrayUtils.nullToEmpty(floatArray0);
      assertArrayEquals(new float[] {0.0F, 560.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F, 560.0F}, floatArray1, 0.01F);
      assertEquals(2, floatArray0.length);
      assertEquals(2, floatArray1.length);
      assertSame(floatArray0, floatArray1);
      assertSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      
      int[] intArray0 = new int[0];
      int[] intArray1 = ArrayUtils.removeAllOccurrences(intArray0, (int) (short)560);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      
      short short1 = (short)0;
      boolean boolean0 = ArrayUtils.isSameLength(shortArray0, shortArray0);
      assertArrayEquals(new short[] {(short)560, (short)0, (short)0, (short)0}, shortArray0);
      assertEquals(4, shortArray0.length);
      assertTrue(boolean0);
      
      char char0 = '0';
      char char1 = 'r';
      char[] charArray0 = new char[0];
      int int0 = ArrayUtils.lastIndexOf(charArray0, '#', 97);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      assertEquals((-1), int0);
      
      try { 
        Float.valueOf("The type must not be null");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test0920()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      long[] longArray0 = new long[0];
      ArrayUtils.swap(longArray0, 1383, 1383);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      MutableInt mutableInt0 = new MutableInt(1383);
      assertEquals(1383.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(1383L, mutableInt0.longValue());
      assertEquals("1383", mutableInt0.toString());
      assertEquals(1383.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(1383, (int)mutableInt0.toInteger());
      assertEquals(1383, (int)mutableInt0.getValue());
      assertEquals((byte)103, mutableInt0.byteValue());
      assertEquals((short)1383, mutableInt0.shortValue());
      assertEquals(1383, mutableInt0.intValue());
      assertNotNull(mutableInt0);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (-1524);
      shortArray0[1] = (short) (byte)0;
      boolean boolean0 = ArrayUtils.isSameLength(shortArray0, shortArray0);
      assertArrayEquals(new short[] {(short) (-1524), (short)0}, shortArray0);
      assertEquals(2, shortArray0.length);
      assertTrue(boolean0);
      
      char[] charArray0 = new char[0];
      int int0 = ArrayUtils.lastIndexOf(charArray0, '8', (int) (short)2);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      assertEquals((-1), int0);
      
      try { 
        Float.valueOf("");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test0921()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      int int0 = ArrayUtils.indexOf(intArray0, 0, 0);
      assertArrayEquals(new int[] {0}, intArray0);
      assertEquals(1, intArray0.length);
      assertEquals(0, int0);
      
      String string0 = ArrayUtils.toString((Object) "");
      assertNotNull(string0);
      assertEquals("", string0);
      
      int[] intArray1 = ArrayUtils.subarray(intArray0, (-127), 0);
      assertArrayEquals(new int[] {0}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(1, intArray0.length);
      assertEquals(0, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      
      char[] charArray0 = new char[3];
      charArray0[0] = 'p';
      Long long0 = new Long(0);
      assertNotNull(long0);
      assertEquals(0L, (long)long0);
      
      Long long1 = new Long((-2880L));
      assertFalse(long1.equals((Object)long0));
      assertNotNull(long1);
      assertEquals((-2880L), (long)long1);
      
      Long long2 = new Long(0);
      assertFalse(long2.equals((Object)long1));
      assertTrue(long2.equals((Object)long0));
      assertNotNull(long2);
      assertEquals(0L, (long)long2);
      
      Long long3 = new Long(1413L);
      assertFalse(long3.equals((Object)long2));
      assertFalse(long3.equals((Object)long1));
      assertFalse(long3.equals((Object)long0));
      assertNotNull(long3);
      assertEquals(1413L, (long)long3);
      
      long[] longArray0 = ArrayUtils.toPrimitive((Long[]) null, 1L);
      assertNull(longArray0);
      
      ArrayUtils.reverse((Object[]) null, 1757, 3191);
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) 1L;
      floatArray0[1] = (-2239.035F);
      float[] floatArray1 = ArrayUtils.removeElement(floatArray0, 2768.5557F);
      assertArrayEquals(new float[] {1.0F, (-2239.035F)}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {1.0F, (-2239.035F)}, floatArray0, 0.01F);
      assertEquals(2, floatArray1.length);
      assertEquals(2, floatArray0.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertNotNull(floatArray1);
      
      int int1 = ArrayUtils.lastIndexOf(charArray0, 'p', 274);
      assertArrayEquals(new char[] {'p', '\u0000', '\u0000'}, charArray0);
      assertEquals(3, charArray0.length);
      assertTrue(int1 == int0);
      assertEquals(0, int1);
  }

  @Test(timeout = 4000)
  public void test0922()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 1.5;
      boolean boolean0 = ArrayUtils.isNotEmpty(doubleArray0);
      assertArrayEquals(new double[] {0.0, 1.5}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      assertTrue(boolean0);
      
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short) (-1816);
      shortArray0[2] = (short)0;
      shortArray0[3] = (short) (-1524);
      shortArray0[4] = (short) (-2002);
      shortArray0[5] = (short)0;
      shortArray0[6] = (short)2;
      boolean boolean1 = ArrayUtils.isSameLength(shortArray0, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short) (-1816), (short)0, (short) (-1524), (short) (-2002), (short)0, (short)2}, shortArray0);
      assertEquals(7, shortArray0.length);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      char[] charArray0 = new char[5];
      charArray0[0] = 'i';
      charArray0[1] = '0';
      charArray0[2] = '#';
      charArray0[3] = 'r';
      charArray0[4] = 'v';
      int int0 = ArrayUtils.lastIndexOf(charArray0, '8', (int) (short)2);
      assertArrayEquals(new char[] {'i', '0', '#', 'r', 'v'}, charArray0);
      assertEquals(5, charArray0.length);
      assertEquals((-1), int0);
      
      // Undeclared exception!
      try { 
        Float.valueOf((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test0923()  throws Throwable  {
      long[] longArray0 = new long[9];
      longArray0[0] = (-1231L);
      longArray0[1] = 1L;
      longArray0[3] = (-2147483648L);
      longArray0[4] = 1L;
      ArrayUtils.reverse(longArray0);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 1L, (-2147483648L), 0L, 1L, (-1231L)}, longArray0);
      assertEquals(9, longArray0.length);
      
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short) (-1236);
      shortArray0[1] = (short)1169;
      shortArray0[2] = (short)4;
      shortArray0[3] = (short)116;
      shortArray0[4] = (short) (-1961);
      shortArray0[5] = (short)55;
      shortArray0[6] = (short) (-390);
      shortArray0[7] = (short)0;
      shortArray0[8] = (short)1812;
      short[] shortArray1 = ArrayUtils.subarray(shortArray0, (-2710), 3);
      assertArrayEquals(new short[] {(short) (-1236), (short)1169, (short)4}, shortArray1);
      assertArrayEquals(new short[] {(short) (-1236), (short)1169, (short)4, (short)116, (short) (-1961), (short)55, (short) (-390), (short)0, (short)1812}, shortArray0);
      assertEquals(3, shortArray1.length);
      assertEquals(9, shortArray0.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertNotNull(shortArray1);
      
      boolean boolean0 = ArrayUtils.isSameLength(shortArray0, shortArray1);
      assertArrayEquals(new short[] {(short) (-1236), (short)1169, (short)4}, shortArray1);
      assertArrayEquals(new short[] {(short) (-1236), (short)1169, (short)4, (short)116, (short) (-1961), (short)55, (short) (-390), (short)0, (short)1812}, shortArray0);
      assertEquals(3, shortArray1.length);
      assertEquals(9, shortArray0.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0924()  throws Throwable  {
      Boolean boolean0 = Boolean.FALSE;
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      char[] charArray0 = new char[6];
      charArray0[0] = '8';
      charArray0[1] = '8';
      charArray0[2] = '8';
      charArray0[3] = '8';
      charArray0[4] = '8';
      charArray0[5] = '8';
      int int0 = ArrayUtils.lastIndexOf(charArray0, '8', (int) '8');
      assertArrayEquals(new char[] {'8', '8', '8', '8', '8', '8'}, charArray0);
      assertEquals(6, charArray0.length);
      assertEquals(5, int0);
      
      try { 
        Float.valueOf("L*Cp4[,7ecF}#BP;;");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test0925()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      short[] shortArray0 = null;
      boolean boolean0 = ArrayUtils.isSameLength((short[]) null, (short[]) null);
      assertTrue(boolean0);
      
      char[] charArray0 = new char[0];
      int int0 = ArrayUtils.lastIndexOf(charArray0, ',', (int) (short) (-1524));
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      assertEquals((-1), int0);
      
      // Undeclared exception!
      try { 
        Float.valueOf((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test0926()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[1] = (-12.919581269511974);
      boolean boolean0 = ArrayUtils.isNotEmpty(doubleArray0);
      assertArrayEquals(new double[] {0.0, (-12.919581269511974)}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      assertTrue(boolean0);
      
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short)0;
      shortArray0[2] = (short)0;
      Byte byte0 = new Byte((byte)114);
      assertNotNull(byte0);
      assertEquals((byte)114, (byte)byte0);
  }

  @Test(timeout = 4000)
  public void test0927()  throws Throwable  {
      short[] shortArray0 = null;
      boolean boolean0 = ArrayUtils.isSameLength((short[]) null, (short[]) null);
      assertTrue(boolean0);
      
      char[] charArray0 = new char[0];
      int int0 = ArrayUtils.lastIndexOf(charArray0, ',', (int) (short) (-1524));
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      assertEquals((-1), int0);
      
      // Undeclared exception!
      try { 
        Float.valueOf((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test0928()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      int[] intArray0 = new int[5];
      intArray0[1] = (int) (short)560;
      intArray0[1] = (int) (short)560;
      intArray0[2] = (int) (short)560;
      intArray0[2] = (int) (short)560;
      intArray0[4] = (int) (short)560;
      boolean boolean0 = ArrayUtils.isSorted(intArray0);
      assertArrayEquals(new int[] {0, 560, 560, 0, 560}, intArray0);
      assertEquals(5, intArray0.length);
      assertFalse(boolean0);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) 560;
      longArray0[1] = (long) 560;
      long[] longArray1 = ArrayUtils.removeAllOccurrences(longArray0, (long) (short)560);
      assertArrayEquals(new long[] {560L, 560L}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertEquals(2, longArray0.length);
      assertEquals(0, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
      
      ArrayUtils.shift(longArray0, 0);
      assertArrayEquals(new long[] {560L, 560L}, longArray0);
      assertEquals(2, longArray0.length);
      assertFalse(longArray0.equals((Object)longArray1));
      assertNotSame(longArray0, longArray1);
      
      ArrayUtils.shift((double[]) null, 0);
  }

  @Test(timeout = 4000)
  public void test0929()  throws Throwable  {
      float[] floatArray0 = new float[7];
      floatArray0[0] = 941.88F;
      floatArray0[1] = (-1.0F);
      floatArray0[2] = 0.0F;
      floatArray0[3] = 1.0F;
      floatArray0[4] = 51.27F;
      floatArray0[5] = (-1.0F);
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray0, 1.0F);
      assertFalse(bitSet0.isEmpty());
      assertEquals(1, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals("{3}", bitSet0.toString());
      assertEquals(4, bitSet0.length());
      assertArrayEquals(new float[] {941.88F, (-1.0F), 0.0F, 1.0F, 51.27F, (-1.0F), 0.0F}, floatArray0, 0.01F);
      assertEquals(7, floatArray0.length);
      assertNotNull(bitSet0);
      
      int[] intArray0 = new int[7];
      intArray0[0] = (-2139492357);
      intArray0[1] = (-2139492357);
      intArray0[2] = (-2139492357);
      intArray0[3] = (-2139492357);
      intArray0[4] = (-2139492357);
      intArray0[5] = (-2139492357);
      intArray0[6] = Integer.MAX_VALUE;
      int[] intArray1 = ArrayUtils.subarray(intArray0, (-2139492357), (-2139492357));
      assertArrayEquals(new int[] {}, intArray1);
      assertArrayEquals(new int[] {(-2139492357), (-2139492357), (-2139492357), (-2139492357), (-2139492357), (-2139492357), Integer.MAX_VALUE}, intArray0);
      assertEquals(0, intArray1.length);
      assertEquals(7, intArray0.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
      assertNotNull(intArray1);
  }

  @Test(timeout = 4000)
  public void test0930()  throws Throwable  {
      Character character0 = new Character('r');
      assertNotNull(character0);
      assertEquals('r', (char)character0);
      
      Object object0 = ArrayUtils.toPrimitive((Object) character0);
      assertNotNull(object0);
      assertEquals('r', object0);
      
      String string0 = ArrayUtils.toString(object0, ",%f");
      assertNotNull(string0);
      assertEquals("r", string0);
      
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = object0;
      objectArray0[1] = (Object) "r";
      objectArray0[2] = (Object) ",%f";
      int int0 = ArrayUtils.lastIndexOf(objectArray0, objectArray0[1], 99);
      assertEquals(3, objectArray0.length);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test0931()  throws Throwable  {
      float[] floatArray0 = new float[7];
      floatArray0[0] = 941.88F;
      floatArray0[1] = (-1.0F);
      floatArray0[2] = 0.0F;
      floatArray0[3] = 1.0F;
      floatArray0[4] = 51.27F;
      float float0 = 2768.5557F;
      floatArray0[5] = 2768.5557F;
      floatArray0[6] = 0.0F;
      float[] floatArray1 = ArrayUtils.removeAllOccurences(floatArray0, (-2548.0F));
      assertArrayEquals(new float[] {941.88F, (-1.0F), 0.0F, 1.0F, 51.27F, 2768.5557F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {941.88F, (-1.0F), 0.0F, 1.0F, 51.27F, 2768.5557F, 0.0F}, floatArray1, 0.01F);
      assertEquals(7, floatArray0.length);
      assertEquals(7, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) (-1.0F);
      objectArray0[1] = (Object) (-1.0F);
      Boolean boolean0 = Boolean.valueOf("");
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      Object object0 = ArrayUtils.toPrimitive((Object) boolean0);
      assertNotNull(object0);
      assertEquals(false, object0);
      
      objectArray0[2] = object0;
      int[] intArray0 = new int[7];
      intArray0[0] = 2;
      intArray0[1] = 1;
      intArray0[2] = 255;
      intArray0[3] = 64;
      intArray0[4] = (-2898);
      intArray0[5] = 3765;
      intArray0[6] = 0;
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object) "*v,X<h0SGWjR|M~", intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test0932()  throws Throwable  {
      long[] longArray0 = new long[9];
      longArray0[0] = (-2007L);
      longArray0[1] = (-813L);
      longArray0[2] = (-2889L);
      longArray0[3] = 412L;
      longArray0[4] = 1482L;
      longArray0[5] = 2022L;
      longArray0[6] = (-1L);
      longArray0[7] = (-1642L);
      longArray0[8] = 13L;
      long[] longArray1 = ArrayUtils.removeAllOccurences(longArray0, 3013L);
      assertArrayEquals(new long[] {(-2007L), (-813L), (-2889L), 412L, 1482L, 2022L, (-1L), (-1642L), 13L}, longArray0);
      assertArrayEquals(new long[] {(-2007L), (-813L), (-2889L), 412L, 1482L, 2022L, (-1L), (-1642L), 13L}, longArray1);
      assertEquals(9, longArray0.length);
      assertEquals(9, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
  }

  @Test(timeout = 4000)
  public void test0933()  throws Throwable  {
      long[] longArray0 = new long[0];
      long[] longArray1 = ArrayUtils.removeAllOccurences(longArray0, 0L);
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
      
      char[] charArray0 = new char[4];
      charArray0[0] = '{';
      charArray0[1] = 'L';
      char char0 = '0';
      charArray0[2] = '0';
      charArray0[3] = ',';
      int[] intArray0 = new int[9];
      intArray0[0] = (int) ',';
      intArray0[1] = (int) '{';
      intArray0[2] = (int) ',';
      intArray0[3] = (int) '0';
      intArray0[4] = (int) 'L';
      intArray0[5] = (int) 'L';
      intArray0[6] = (int) '{';
      intArray0[7] = (int) '0';
      intArray0[8] = (int) 'L';
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(charArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 123, Length: 4
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0934()  throws Throwable  {
      Long long0 = new Long(4996L);
      assertNotNull(long0);
      assertEquals(4996L, (long)long0);
      
      String string0 = ArrayUtils.toString((Object) long0);
      assertNotNull(string0);
      assertEquals("4996", string0);
      
      int[] intArray0 = ArrayUtils.removeAllOccurrences((int[]) null, 53);
      assertNull(intArray0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((int[]) null, 53);
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertNotNull(bitSet0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object) bitSet0, bitSet0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test0935()  throws Throwable  {
      long[] longArray0 = new long[3];
      longArray0[0] = (-1166L);
      longArray0[1] = (-2142L);
      longArray0[2] = 995L;
      long[] longArray1 = ArrayUtils.EMPTY_LONG_ARRAY;
      assertArrayEquals(new long[] {}, longArray1);
      assertEquals(0, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
      
      Boolean boolean0 = new Boolean("(P<q28gF[:msw");
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      Boolean boolean1 = Boolean.FALSE;
      assertTrue(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      assertFalse(boolean1);
      
      Boolean boolean2 = Boolean.valueOf("/65s7=[0I");
      assertTrue(boolean2.equals((Object)boolean0));
      assertNotNull(boolean2);
      assertFalse(boolean2);
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) (-1166L);
      floatArray0[1] = Float.NaN;
      floatArray0[2] = Float.NaN;
      floatArray0[3] = (float) 995L;
      floatArray0[4] = Float.NaN;
      floatArray0[5] = (float) 995L;
      floatArray0[6] = Float.NaN;
      boolean boolean3 = ArrayUtils.contains(floatArray0, (-3089.2656F));
      assertArrayEquals(new float[] {(-1166.0F), Float.NaN, Float.NaN, 995.0F, Float.NaN, 995.0F, Float.NaN}, floatArray0, 0.01F);
      assertEquals(7, floatArray0.length);
      assertFalse(boolean3);
      
      ArrayUtils.reverse(longArray1, (-158), (-158));
      assertArrayEquals(new long[] {}, longArray1);
      assertEquals(0, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotSame(longArray1, longArray0);
      
      double[] doubleArray0 = new double[0];
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (double) (-3089.2656F));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals((-1), int0);
      
      ArrayUtils.reverse((int[]) null);
  }

  @Test(timeout = 4000)
  public void test0936()  throws Throwable  {
      BitSet bitSet0 = ArrayUtils.indexesOf((double[]) null, (-5724.066751444472), 1881);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertNotNull(bitSet0);
  }

  @Test(timeout = 4000)
  public void test0937()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSameLength((char[]) null, (char[]) null);
      assertTrue(boolean0);
      
      MockRandom mockRandom0 = new MockRandom(1L);
      assertNotNull(mockRandom0);
      
      long long0 = mockRandom0.nextLong();
      assertEquals(0L, long0);
      
      int int0 = mockRandom0.nextInt();
      assertEquals(1, int0);
      
      LongStream longStream0 = mockRandom0.longs();
      assertNotNull(longStream0);
      
      char[] charArray0 = ArrayUtils.removeAllOccurences((char[]) null, 'X');
      assertNull(charArray0);
  }

  @Test(timeout = 4000)
  public void test0938()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 768.0958366890409;
      doubleArray0[1] = Double.NaN;
      boolean boolean0 = ArrayUtils.isSorted(doubleArray0);
      assertArrayEquals(new double[] {768.0958366890409, Double.NaN}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      assertTrue(boolean0);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = 873.6F;
      floatArray0[1] = 1.0F;
      floatArray0[2] = 102.0F;
      floatArray0[3] = 0.0F;
      floatArray0[4] = 51.0F;
      floatArray0[5] = (-995.00995F);
      // Undeclared exception!
      try { 
        ArrayUtils.add(floatArray0, 88, 4925.2F);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 88, Length: 6
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0939()  throws Throwable  {
      Integer integer0 = new Integer((-2858));
      assertNotNull(integer0);
      assertEquals((-2858), (int)integer0);
      
      boolean boolean0 = ArrayUtils.isEquals(integer0, integer0);
      assertTrue(boolean0);
      
      double[] doubleArray0 = ArrayUtils.removeAllOccurences((double[]) null, (-1.0));
      assertNull(doubleArray0);
      
      int[] intArray0 = new int[0];
      ArrayUtils.reverse(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      
      boolean boolean1 = ArrayUtils.isSorted((double[]) null);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) integer0;
      Boolean boolean2 = new Boolean(true);
      assertTrue(boolean2.equals((Object)boolean1));
      assertTrue(boolean2.equals((Object)boolean0));
      assertNotNull(boolean2);
      assertTrue(boolean2);
      
      Object object0 = ArrayUtils.get(objectArray0, (-2858), (Object) boolean2);
      assertEquals(1, objectArray0.length);
      assertTrue(boolean2.equals((Object)boolean1));
      assertTrue(boolean2.equals((Object)boolean0));
      assertTrue(object0.equals((Object)boolean0));
      assertTrue(object0.equals((Object)boolean1));
      assertNotNull(object0);
      assertEquals(true, object0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(object0, (BitSet) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test0940()  throws Throwable  {
      double[] doubleArray0 = ArrayUtils.removeAllOccurences((double[]) null, (-1.0));
      assertNull(doubleArray0);
      
      int[] intArray0 = new int[0];
      boolean boolean0 = ArrayUtils.isSorted((double[]) null);
      assertTrue(boolean0);
      
      Object[] objectArray0 = new Object[1];
      Boolean boolean1 = new Boolean(true);
      assertTrue(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      assertTrue(boolean1);
      
      boolean boolean2 = ArrayUtils.contains((boolean[]) null, true);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test0941()  throws Throwable  {
      Byte[] byteArray0 = new Byte[2];
      Byte byte0 = new Byte((byte)73);
      assertNotNull(byte0);
      assertEquals((byte)73, (byte)byte0);
      
      byteArray0[0] = byte0;
      Byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0);
      assertEquals(2, byteArray0.length);
      assertEquals(2, byteArray1.length);
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      
      boolean boolean0 = ArrayUtils.contains((short[]) null, (short)202);
      assertFalse(boolean0);
      
      int[] intArray0 = new int[2];
      intArray0[1] = Integer.MAX_VALUE;
      ArrayUtils.reverse(intArray0);
      assertArrayEquals(new int[] {Integer.MAX_VALUE, 0}, intArray0);
      assertEquals(2, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test0942()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 2183.3;
      doubleArray0[1] = 2183.3;
      doubleArray0[2] = (double) (byte)99;
      doubleArray0[3] = (double) 91;
      doubleArray0[4] = (double) 91;
      doubleArray0[5] = 2183.3;
      doubleArray0[6] = 2183.3;
      ArrayUtils.shift(doubleArray0, (int) (byte)89);
      assertArrayEquals(new double[] {99.0, 91.0, 91.0, 2183.3, 2183.3, 2183.3, 2183.3}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test0943()  throws Throwable  {
      Boolean[] booleanArray0 = new Boolean[3];
      Boolean boolean0 = Boolean.valueOf((String) null);
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      booleanArray0[0] = boolean0;
      Boolean boolean1 = Boolean.valueOf("");
      assertNotNull(boolean1);
      assertFalse(boolean1);
      
      booleanArray0[1] = boolean1;
      Boolean boolean2 = Boolean.valueOf("");
      assertNotNull(boolean2);
      assertFalse(boolean2);
      
      booleanArray0[2] = boolean2;
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0, (boolean) boolean0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray1));
      assertEquals(3, booleanArray0.length);
      assertEquals(3, booleanArray1.length);
      assertNotNull(booleanArray1);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 45.0;
      doubleArray0[1] = 1.0;
      doubleArray0[2] = (-1288.92);
      doubleArray0[3] = 4026.966708;
      doubleArray0[4] = 45.0;
      ArrayUtils.shift(doubleArray0, (-1772));
      assertArrayEquals(new double[] {(-1288.92), 4026.966708, 45.0, 45.0, 1.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test0944()  throws Throwable  {
      Double[] doubleArray0 = new Double[5];
      Double double0 = new Double(496.0);
      assertNotNull(double0);
      assertEquals(496.0, (double)double0, 0.01);
      
      doubleArray0[0] = double0;
      Double double1 = new Double(496.0);
      assertEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      assertEquals(496.0, (double)double1, 0.01);
      
      doubleArray0[1] = double1;
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = 2183.3;
      doubleArray1[1] = 496.0;
      ArrayUtils.shift(doubleArray1, 91);
      assertArrayEquals(new double[] {496.0, 2183.3}, doubleArray1, 0.01);
      assertEquals(2, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test0945()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 0;
      intArray0[1] = 127;
      boolean boolean0 = ArrayUtils.isSorted(intArray0);
      assertArrayEquals(new int[] {0, 127}, intArray0);
      assertEquals(2, intArray0.length);
      assertTrue(boolean0);
      
      long[] longArray0 = new long[3];
      longArray0[0] = (long) 0;
      longArray0[1] = (long) 0;
      longArray0[2] = (long) 0;
      long[] longArray1 = ArrayUtils.removeAllOccurrences(longArray0, (long) 0);
      assertArrayEquals(new long[] {0L, 0L, 0L}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertEquals(3, longArray0.length);
      assertEquals(0, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
      
      ArrayUtils.shift(longArray0, 127);
      assertArrayEquals(new long[] {0L, 0L, 0L}, longArray0);
      assertEquals(3, longArray0.length);
      assertFalse(longArray0.equals((Object)longArray1));
      assertNotSame(longArray0, longArray1);
      
      ArrayUtils.shift((double[]) null, 0);
  }

  @Test(timeout = 4000)
  public void test0946()  throws Throwable  {
      long[] longArray0 = new long[4];
      longArray0[0] = (-1166L);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (-1166L);
      doubleArray0[1] = (double) (-1166L);
      doubleArray0[2] = (double) (-1166L);
      doubleArray0[3] = (double) (-1166L);
      ArrayUtils.shift(doubleArray0, 1072);
      assertArrayEquals(new double[] {(-1166.0), (-1166.0), (-1166.0), (-1166.0)}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test0947()  throws Throwable  {
      Byte byte0 = new Byte((byte)51);
      assertNotNull(byte0);
      assertEquals((byte)51, (byte)byte0);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) (byte)51;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 1.0, 51.0);
      assertArrayEquals(new double[] {0.0, 51.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(1, int0);
      
      ArrayUtils.swap(doubleArray0, (-1916), 1);
      assertArrayEquals(new double[] {51.0, 0.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test0948()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      ArrayUtils.swap(doubleArray0, 2147483636, Integer.MAX_VALUE, 2147483636);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      boolean boolean0 = ArrayUtils.contains((boolean[]) null, true);
      assertFalse(boolean0);
      
      ArrayUtils.shift(doubleArray0, (-281));
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test0949()  throws Throwable  {
      long[] longArray0 = new long[6];
      ArrayUtils.shift(longArray0, 2282, (-3850), 2282);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L, 0L}, longArray0);
      assertEquals(6, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test0950()  throws Throwable  {
      long[] longArray0 = new long[7];
      longArray0[0] = 1553L;
      longArray0[1] = 0L;
      longArray0[2] = (-1L);
      longArray0[3] = (-1L);
      longArray0[4] = 1540L;
      longArray0[5] = 0L;
      longArray0[6] = 0L;
      ArrayUtils.shift(longArray0, 182);
      assertArrayEquals(new long[] {1553L, 0L, (-1L), (-1L), 1540L, 0L, 0L}, longArray0);
      assertEquals(7, longArray0.length);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 1540L;
      doubleArray0[1] = (double) 0L;
      doubleArray0[2] = (double) 0L;
      doubleArray0[3] = (double) 1540L;
      doubleArray0[4] = (double) 1540L;
      ArrayUtils.shift(doubleArray0, 182);
      assertArrayEquals(new double[] {1540.0, 1540.0, 1540.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test0951()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 4026.966708;
      ArrayUtils.reverse((byte[]) null, 2375, 2139922085);
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short)855;
      shortArray0[1] = (short)1221;
      shortArray0[2] = (short)3065;
      shortArray0[3] = (short) (-383);
      shortArray0[4] = (short) (-1);
      shortArray0[5] = (short) (-123);
      shortArray0[6] = (short) (-1);
      shortArray0[7] = (short)1268;
      shortArray0[8] = (short) (-1319);
      short[] shortArray1 = ArrayUtils.addFirst(shortArray0, (short) (-41));
      assertArrayEquals(new short[] {(short)855, (short)1221, (short)3065, (short) (-383), (short) (-1), (short) (-123), (short) (-1), (short)1268, (short) (-1319)}, shortArray0);
      assertArrayEquals(new short[] {(short) (-41), (short)855, (short)1221, (short)3065, (short) (-383), (short) (-1), (short) (-123), (short) (-1), (short)1268, (short) (-1319)}, shortArray1);
      assertEquals(9, shortArray0.length);
      assertEquals(10, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
  }

  @Test(timeout = 4000)
  public void test0952()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[2] = (byte) (-22);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)2;
      float[] floatArray0 = new float[0];
      float[] floatArray1 = ArrayUtils.addFirst(floatArray0, (float) (byte) (-118));
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-118.0F)}, floatArray1, 0.01F);
      assertEquals(0, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      
      short[] shortArray0 = new short[0];
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertNotNull(shortArray1);
      
      short[] shortArray2 = ArrayUtils.removeElements(shortArray0, shortArray0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray2);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray2.length);
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertNotSame(shortArray0, shortArray2);
      assertNotSame(shortArray2, shortArray0);
      assertNotNull(shortArray2);
      
      ArrayUtils.reverse(byteArray0);
      assertArrayEquals(new byte[] {(byte)2, (byte)0, (byte) (-22), (byte)0, (byte)0}, byteArray0);
      assertEquals(5, byteArray0.length);
      
      int[] intArray0 = new int[9];
      intArray0[0] = (int) (byte) (-22);
      intArray0[1] = (int) (byte) (-22);
      intArray0[2] = (int) (byte) (-118);
      intArray0[3] = (int) (byte)0;
      intArray0[4] = (int) (byte)0;
      intArray0[5] = (int) (byte) (-22);
      intArray0[6] = (int) (byte)2;
      intArray0[7] = (int) (byte)0;
      intArray0[8] = (int) (byte)0;
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(shortArray2, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0953()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = 37;
      intArray0[1] = 2145813754;
      intArray0[2] = 1073;
      intArray0[4] = 2779;
      byte[] byteArray0 = ArrayUtils.removeAllOccurences((byte[]) null, (byte) (-82));
      assertNull(byteArray0);
      
      double[] doubleArray0 = ArrayUtils.removeAllOccurrences((double[]) null, (double) 2145813754);
      assertNull(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test0954()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)17;
      long[] longArray0 = new long[8];
      longArray0[1] = 0L;
      longArray0[6] = 0L;
      longArray0[4] = (-283L);
      longArray0[5] = 2226L;
      longArray0[6] = 0L;
      longArray0[7] = (-158L);
      long[] longArray1 = ArrayUtils.removeAllOccurrences(longArray0, 0L);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, (-283L), 2226L, 0L, (-158L)}, longArray0);
      assertArrayEquals(new long[] {(-283L), 2226L, (-158L)}, longArray1);
      assertEquals(8, longArray0.length);
      assertEquals(3, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
      
      ArrayUtils.reverse(byteArray0, 127, 15);
      assertArrayEquals(new byte[] {(byte)17, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(5, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test0955()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 687.016;
      double[] doubleArray1 = ArrayUtils.removeAllOccurrences(doubleArray0, 687.016);
      assertArrayEquals(new double[] {687.016}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      
      long[] longArray0 = new long[7];
      longArray0[0] = 0L;
      longArray0[1] = 0L;
      longArray0[2] = (-1909L);
      longArray0[3] = 2226L;
      longArray0[4] = 0L;
      longArray0[5] = 0L;
      longArray0[6] = (-283L);
      long[] longArray1 = ArrayUtils.removeAllOccurrences(longArray0, 0L);
      assertArrayEquals(new long[] {0L, 0L, (-1909L), 2226L, 0L, 0L, (-283L)}, longArray0);
      assertArrayEquals(new long[] {(-1909L), 2226L, (-283L)}, longArray1);
      assertEquals(7, longArray0.length);
      assertEquals(3, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)127;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-52);
      byteArray0[5] = (byte) (-1);
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)0;
      byteArray0[8] = (byte) (-1);
      ArrayUtils.reverse(byteArray0, 0, 2375);
      assertArrayEquals(new byte[] {(byte) (-1), (byte)0, (byte)0, (byte) (-1), (byte) (-52), (byte)0, (byte)0, (byte)0, (byte)127}, byteArray0);
      assertEquals(9, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test0956()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)124;
      boolean boolean0 = ArrayUtils.isSameLength(byteArray0, byteArray0);
      assertArrayEquals(new byte[] {(byte)124}, byteArray0);
      assertEquals(1, byteArray0.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0957()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)17;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)12;
      byteArray0[3] = (byte) (-121);
      byteArray0[4] = (byte)105;
      boolean boolean0 = ArrayUtils.isSameLength(byteArray0, byteArray0);
      assertArrayEquals(new byte[] {(byte)17, (byte)0, (byte)12, (byte) (-121), (byte)105}, byteArray0);
      assertEquals(5, byteArray0.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0958()  throws Throwable  {
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short)1964;
      shortArray0[2] = (short)2151;
      shortArray0[3] = (short)1;
      Byte[] byteArray0 = new Byte[1];
      Byte byte0 = new Byte((byte)55);
      assertNotNull(byte0);
      assertEquals((byte)55, (byte)byte0);
      
      byteArray0[0] = byte0;
      Byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0);
      assertEquals(1, byteArray0.length);
      assertEquals(1, byteArray1.length);
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      
      ArrayUtils.shift((Object[]) byteArray0, (-2692), (int) (short)1964, (int) (short)2151);
      assertEquals(1, byteArray0.length);
      assertSame(byteArray0, byteArray1);
      
      Integer integer0 = new Integer((short)2151);
      assertNotNull(integer0);
      assertEquals(2151, (int)integer0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      int int0 = ArrayUtils.indexOf((Object[]) byteArray0, object0);
      assertEquals(1, byteArray0.length);
      assertSame(byteArray0, byteArray1);
      assertEquals((-1), int0);
      
      ArrayUtils.swap((Object[]) byteArray0, (int) (short)1964, (int) (short)1964, (-2610));
      assertEquals(1, byteArray0.length);
      assertSame(byteArray0, byteArray1);
  }

  @Test(timeout = 4000)
  public void test0959()  throws Throwable  {
      Byte byte0 = new Byte((byte)51);
      assertNotNull(byte0);
      assertEquals((byte)51, (byte)byte0);
      
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short) (byte)51;
      short[] shortArray1 = ArrayUtils.removeElements(shortArray0, shortArray0);
      assertArrayEquals(new short[] {(short)51, (short)0, (short)0}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertEquals(3, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      
      short[] shortArray2 = new short[3];
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertFalse(shortArray2.equals((Object)shortArray1));
      
      shortArray2[0] = (short) (byte)51;
      shortArray2[2] = (short) (byte)51;
      int int0 = ArrayUtils.indexOf(shortArray2, (short) (-15), (-3907));
      assertArrayEquals(new short[] {(short)51, (short)0, (short)51}, shortArray2);
      assertEquals(3, shortArray2.length);
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertFalse(shortArray2.equals((Object)shortArray1));
      assertNotSame(shortArray2, shortArray0);
      assertNotSame(shortArray2, shortArray1);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0960()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      Character character0 = new Character('Y');
      assertNotNull(character0);
      assertEquals('Y', (char)character0);
      
      Object object1 = ArrayUtils.get(objectArray0, 48, (Object) character0);
      assertEquals(2, objectArray0.length);
      assertNotNull(object1);
      assertEquals('Y', object1);
      
      objectArray0[1] = object1;
      ArrayUtils.shift(objectArray0, 48, 0, 48);
      assertEquals(2, objectArray0.length);
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (-102);
      shortArray0[1] = (short)822;
      shortArray0[2] = (short) (-1);
      shortArray0[3] = (short)0;
      short[] shortArray1 = ArrayUtils.removeElements(shortArray0, shortArray0);
      assertArrayEquals(new short[] {(short) (-102), (short)822, (short) (-1), (short)0}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertEquals(4, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
  }

  @Test(timeout = 4000)
  public void test0961()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      ArrayUtils.shift(objectArray0, 48, 0, 48);
      assertEquals(2, objectArray0.length);
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (-102);
      shortArray0[1] = (short)822;
      shortArray0[3] = (short)0;
      short[] shortArray1 = ArrayUtils.removeElements(shortArray0, shortArray0);
      assertArrayEquals(new short[] {(short) (-102), (short)822, (short)0, (short)0}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertEquals(4, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
  }

  @Test(timeout = 4000)
  public void test0962()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = ArrayUtils.removeAllOccurences(doubleArray0, (-1.0));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      
      String[] stringArray0 = ArrayUtils.EMPTY_STRING_ARRAY;
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      short[] shortArray0 = new short[0];
      short[] shortArray1 = ArrayUtils.removeElements(shortArray0, shortArray0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      
      int int0 = ArrayUtils.indexOf(shortArray0, (short)0, (-2294));
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray0.length);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertNotSame(shortArray0, shortArray1);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0963()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[1] = 'D';
      boolean boolean0 = ArrayUtils.isNotEmpty(charArray0);
      assertArrayEquals(new char[] {'\u0000', 'D'}, charArray0);
      assertEquals(2, charArray0.length);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (-569);
      double[] doubleArray1 = ArrayUtils.removeElements(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {(-569.0), 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      
      char[] charArray1 = new char[8];
      assertFalse(charArray1.equals((Object)charArray0));
      
      charArray1[0] = 'D';
      charArray1[1] = 'D';
      charArray1[2] = 'D';
      charArray1[3] = 'D';
      charArray1[4] = 'D';
      charArray1[5] = 'D';
      charArray1[6] = 'D';
      charArray1[7] = 'D';
      ArrayUtils.reverse(charArray1);
      assertArrayEquals(new char[] {'D', 'D', 'D', 'D', 'D', 'D', 'D', 'D'}, charArray1);
      assertEquals(8, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray1, charArray0);
  }

  @Test(timeout = 4000)
  public void test0964()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = 'J';
      charArray0[1] = 'J';
      charArray0[2] = ']';
      charArray0[3] = 'J';
      charArray0[4] = 'J';
      charArray0[5] = 'J';
      charArray0[6] = 'J';
      charArray0[7] = 'J';
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      ArrayUtils.shuffle(charArray0, (Random) mockRandom0);
      assertArrayEquals(new char[] {'J', ']', 'J', 'J', 'J', 'J', 'J', 'J'}, charArray0);
      assertEquals(8, charArray0.length);
      
      short[] shortArray0 = new short[0];
      short[] shortArray1 = ArrayUtils.removeElement(shortArray0, (short) (byte) (-42));
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
  }

  @Test(timeout = 4000)
  public void test0965()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[1] = 0.0;
      doubleArray0[3] = 1757.16516391848;
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short) (-159);
      shortArray0[2] = (short)851;
      shortArray0[3] = (short)0;
      shortArray0[4] = (short)0;
      shortArray0[5] = (short)851;
      shortArray0[7] = (short)851;
      short[] shortArray1 = ArrayUtils.removeElement(shortArray0, (short)851);
      assertArrayEquals(new short[] {(short)0, (short) (-159), (short)851, (short)0, (short)0, (short)851, (short)0, (short)851}, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short) (-159), (short)0, (short)0, (short)851, (short)0, (short)851}, shortArray1);
      assertEquals(8, shortArray0.length);
      assertEquals(7, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
  }

  @Test(timeout = 4000)
  public void test0966()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = '%';
      charArray0[1] = '%';
      charArray0[2] = '%';
      ArrayUtils.shift(charArray0, (int) '%');
      assertArrayEquals(new char[] {'%', '%', '%'}, charArray0);
      assertEquals(3, charArray0.length);
      
      Long long0 = new Long(13);
      assertNotNull(long0);
      assertEquals(13L, (long)long0);
  }

  @Test(timeout = 4000)
  public void test0967()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = 'G';
      charArray0[1] = '[';
      charArray0[2] = '!';
      MockRandom mockRandom0 = new MockRandom((-2753L));
      assertNotNull(mockRandom0);
      
      ArrayUtils.shuffle(charArray0, (Random) mockRandom0);
      assertArrayEquals(new char[] {'[', '!', 'G'}, charArray0);
      assertEquals(3, charArray0.length);
      
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short)482;
      shortArray0[1] = (short)4485;
      shortArray0[2] = (short)0;
      shortArray0[3] = (short)0;
      shortArray0[4] = (short)1;
      shortArray0[5] = (short)0;
      shortArray0[6] = (short)851;
      shortArray0[7] = (short)0;
      short[] shortArray1 = ArrayUtils.removeElement(shortArray0, (short) (-159));
      assertArrayEquals(new short[] {(short)482, (short)4485, (short)0, (short)0, (short)1, (short)0, (short)851, (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)482, (short)4485, (short)0, (short)0, (short)1, (short)0, (short)851, (short)0}, shortArray1);
      assertEquals(8, shortArray0.length);
      assertEquals(8, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
  }

  @Test(timeout = 4000)
  public void test0968()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      boolean boolean0 = ArrayUtils.isNotEmpty(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(5, byteArray0.length);
      assertTrue(boolean0);
      
      String string0 = "^:J*4_},dWEgffen(p+";
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) "^:J*4_},dWEgffen(p+";
      objectArray0[1] = (Object) "^:J*4_},dWEgffen(p+";
      objectArray0[2] = (Object) "^:J*4_},dWEgffen(p+";
      int[] intArray0 = new int[0];
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(objectArray0[0], intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test0969()  throws Throwable  {
      Object[] objectArray0 = new Object[7];
      Byte byte0 = new Byte((byte) (-1));
      assertNotNull(byte0);
      assertEquals((byte) (-1), (byte)byte0);
      
      Object object0 = ArrayUtils.get(objectArray0, 12, (Object) byte0);
      assertEquals(7, objectArray0.length);
      assertNotNull(object0);
      assertEquals((byte) (-1), object0);
      
      objectArray0[0] = object0;
      Object object1 = new Object();
      assertNotNull(object1);
      
      objectArray0[1] = object1;
      int[] intArray0 = new int[5];
      intArray0[0] = (int) (byte) (-1);
      intArray0[1] = 12;
      intArray0[2] = 12;
      intArray0[3] = 12;
      intArray0[4] = 12;
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object) byte0, intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test0970()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      ArrayUtils.reverse(doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      
      float[] floatArray0 = new float[0];
      ArrayUtils.reverse(floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-22);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)4;
      byteArray0[3] = (byte)2;
      byteArray0[4] = (byte)2;
      byteArray0[5] = (byte) (-22);
      byteArray0[6] = (byte)0;
      ArrayUtils.shift(byteArray0, (int) (byte)4);
      assertArrayEquals(new byte[] {(byte)2, (byte)2, (byte) (-22), (byte)0, (byte) (-22), (byte)0, (byte)4}, byteArray0);
      assertEquals(7, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test0971()  throws Throwable  {
      ArrayUtils.shift((byte[]) null, (-2210));
  }

  @Test(timeout = 4000)
  public void test0972()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray1);
      assertEquals(8, byteArray0.length);
      assertEquals(8, byteArray1.length);
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      
      byte[] byteArray2 = new byte[0];
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      IntStream intStream0 = mockRandom0.ints(2956L);
      assertNotNull(intStream0);
      
      int int0 = mockRandom0.nextInt();
      assertEquals(0, int0);
      
      ArrayUtils.shuffle(byteArray2, (Random) mockRandom0);
      assertArrayEquals(new byte[] {}, byteArray2);
      assertEquals(0, byteArray2.length);
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray1);
  }

  @Test(timeout = 4000)
  public void test0973()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[4] = (byte)1;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)2;
      ArrayUtils.shift(byteArray0, (-1));
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)2, (byte)0}, byteArray0);
      assertEquals(5, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test0974()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-121);
      byteArray0[2] = (byte)49;
      ArrayUtils.swap(byteArray0, (int) (byte)49, (-863), (int) (byte) (-1));
      assertArrayEquals(new byte[] {(byte) (-1), (byte) (-121), (byte)49}, byteArray0);
      assertEquals(3, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test0975()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-39);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)75;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)123;
      byteArray0[6] = (byte) (-46);
      byteArray0[7] = (byte)0;
      ArrayUtils.shift(byteArray0, (int) (byte)75);
      assertArrayEquals(new byte[] {(byte)123, (byte) (-46), (byte)0, (byte) (-39), (byte)0, (byte)75, (byte)0, (byte)0}, byteArray0);
      assertEquals(8, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test0976()  throws Throwable  {
      Byte[] byteArray0 = new Byte[9];
      byte byte0 = (byte)89;
      Byte byte1 = new Byte((byte)89);
      assertTrue(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      assertEquals((byte)89, (byte)byte1);
      
      byteArray0[0] = byte1;
      Byte byte2 = new Byte((byte)89);
      assertTrue(byte2.equals((Object)byte0));
      assertTrue(byte2.equals((Object)byte1));
      assertNotNull(byte2);
      assertEquals((byte)89, (byte)byte2);
      
      byteArray0[1] = byte2;
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) (byte)68;
      doubleArray0[1] = (double) (byte)89;
      doubleArray0[2] = (double) byte0;
      doubleArray0[3] = (double) byte0;
      doubleArray0[4] = (double) byte0;
      doubleArray0[5] = (double) byte0;
      doubleArray0[6] = 1.0;
      doubleArray0[7] = (double) byte0;
      // Undeclared exception!
      try { 
        ArrayUtils.add(doubleArray0, 32, (double) (byte)89);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 32, Length: 8
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0977()  throws Throwable  {
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)560;
      shortArray0[1] = (short)0;
      shortArray0[2] = (short)1545;
      shortArray0[3] = (short) (-4027);
      short[] shortArray1 = ArrayUtils.add(shortArray0, (short)0);
      assertArrayEquals(new short[] {(short)560, (short)0, (short)1545, (short) (-4027)}, shortArray0);
      assertArrayEquals(new short[] {(short)560, (short)0, (short)1545, (short) (-4027), (short)0}, shortArray1);
      assertEquals(4, shortArray0.length);
      assertEquals(5, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      Boolean[] booleanArray1 = ArrayUtils.toObject(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertEquals(1, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertNotNull(booleanArray1);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (short)560;
      // Undeclared exception!
      try { 
        ArrayUtils.add(doubleArray0, (-3267), 1.0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -3267, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0978()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte) (-44);
      byteArray0[2] = (byte) (-39);
      byteArray0[3] = (byte)2;
      byteArray0[4] = (byte)51;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)45;
      byteArray0[8] = (byte) (-42);
      byte[] byteArray1 = ArrayUtils.removeAllOccurences(byteArray0, (byte)0);
      assertArrayEquals(new byte[] {(byte)2, (byte) (-44), (byte) (-39), (byte)2, (byte)51, (byte)0, (byte)0, (byte)45, (byte) (-42)}, byteArray0);
      assertArrayEquals(new byte[] {(byte)2, (byte) (-44), (byte) (-39), (byte)2, (byte)51, (byte)45, (byte) (-42)}, byteArray1);
      assertEquals(9, byteArray0.length);
      assertEquals(7, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (byte)2;
      doubleArray0[1] = (double) (byte)45;
      double[] doubleArray1 = ArrayUtils.removeAllOccurrences(doubleArray0, (double) (byte)2);
      assertArrayEquals(new double[] {2.0, 45.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {45.0}, doubleArray1, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
  }

  @Test(timeout = 4000)
  public void test0979()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)5;
      byteArray0[1] = (byte)99;
      byteArray0[2] = (byte) (-60);
      byte[] byteArray1 = ArrayUtils.removeElement(byteArray0, (byte) (-108));
      assertArrayEquals(new byte[] {(byte)5, (byte)99, (byte) (-60)}, byteArray0);
      assertArrayEquals(new byte[] {(byte)5, (byte)99, (byte) (-60)}, byteArray1);
      assertEquals(3, byteArray0.length);
      assertEquals(3, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      
      char[] charArray0 = new char[0];
      char[] charArray1 = ArrayUtils.removeElement(charArray0, '*');
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      
      Byte[] byteArray2 = new Byte[0];
      boolean boolean0 = ArrayUtils.isArrayIndexValid(byteArray2, (int) 5);
      assertEquals(0, byteArray2.length);
      assertFalse(boolean0);
      
      char[] charArray2 = ArrayUtils.addAll(charArray1, charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertArrayEquals(new char[] {}, charArray2);
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      assertEquals(0, charArray2.length);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray1));
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray0, charArray2);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray1, charArray2);
      assertNotSame(charArray2, charArray0);
      assertNotSame(charArray2, charArray1);
      assertNotNull(charArray2);
      
      org.evosuite.runtime.Random.setNextRandom((-2223));
      String[] stringArray0 = ArrayUtils.toStringArray((Object[]) byteArray2);
      assertEquals(0, byteArray2.length);
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      ArrayUtils.reverse((Object[]) byteArray2);
      assertEquals(0, byteArray2.length);
  }

  @Test(timeout = 4000)
  public void test0980()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-40.0);
      boolean boolean0 = ArrayUtils.contains(doubleArray0, (-40.0));
      assertArrayEquals(new double[] {(-40.0)}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertTrue(boolean0);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = 109.0F;
      floatArray0[1] = 109.0F;
      floatArray0[2] = 109.0F;
      floatArray0[3] = 109.0F;
      float[] floatArray1 = ArrayUtils.removeElements(floatArray0, floatArray0);
      assertArrayEquals(new float[] {109.0F, 109.0F, 109.0F, 109.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertEquals(4, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
  }

  @Test(timeout = 4000)
  public void test0981()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSameLength((boolean[]) null, (boolean[]) null);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[0];
      Object[] objectArray0 = new Object[1];
      // Undeclared exception!
      try { 
        ArrayUtils.toStringArray(objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test0982()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      Object object0 = new Object();
      assertNotNull(object0);
      
      Character character0 = new Character('Y');
      assertNotNull(character0);
      assertEquals('Y', (char)character0);
      
      Object object1 = ArrayUtils.get(objectArray0, 48, (Object) character0);
      assertEquals(2, objectArray0.length);
      assertNotNull(object1);
      assertEquals('Y', object1);
      
      objectArray0[1] = object1;
      Double double0 = new Double(48);
      assertNotNull(double0);
      assertEquals(48.0, (double)double0, 0.01);
      
      int int0 = ArrayUtils.indexOf(objectArray0, (Object) double0, 48);
      assertEquals(2, objectArray0.length);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0983()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = ArrayUtils.removeAllOccurences(doubleArray0, (-1.0));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      
      Object[] objectArray0 = new Object[1];
      // Undeclared exception!
      try { 
        ArrayUtils.toStringArray(objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test0984()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSameLength((boolean[]) null, (boolean[]) null);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = ArrayUtils.removeAllOccurences(doubleArray0, (-1.0));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      
      int int0 = ArrayUtils.indexOf(doubleArray0, (-1.0));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals((-1), int0);
      
      Object[] objectArray0 = new Object[1];
      Object object0 = ArrayUtils.get(objectArray0, (-1));
      assertEquals(1, objectArray0.length);
      assertNull(object0);
      
      objectArray0[0] = null;
      // Undeclared exception!
      try { 
        ArrayUtils.toStringArray(objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test0985()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      int int0 = ArrayUtils.indexOf(intArray0, 0, 0);
      assertArrayEquals(new int[] {0}, intArray0);
      assertEquals(1, intArray0.length);
      assertEquals(0, int0);
      
      String string0 = ArrayUtils.toString((Object) "");
      assertNotNull(string0);
      assertEquals("", string0);
      
      Long long0 = new Long(2956L);
      assertNotNull(long0);
      assertEquals(2956L, (long)long0);
      
      Long long1 = new Long((-482L));
      assertFalse(long1.equals((Object)long0));
      assertNotNull(long1);
      assertEquals((-482L), (long)long1);
      
      Long long2 = new Long((-127));
      assertFalse(long2.equals((Object)long1));
      assertFalse(long2.equals((Object)long0));
      assertNotNull(long2);
      assertEquals((-127L), (long)long2);
      
      Long long3 = new Long(2956L);
      assertFalse(long3.equals((Object)long1));
      assertFalse(long3.equals((Object)long2));
      assertTrue(long3.equals((Object)long0));
      assertNotNull(long3);
      assertEquals(2956L, (long)long3);
      
      Long long4 = new Long((-484L));
      assertFalse(long4.equals((Object)long0));
      assertFalse(long4.equals((Object)long3));
      assertFalse(long4.equals((Object)long2));
      assertFalse(long4.equals((Object)long1));
      assertNotNull(long4);
      assertEquals((-484L), (long)long4);
      
      Long long5 = new Long((-4286L));
      assertFalse(long5.equals((Object)long4));
      assertFalse(long5.equals((Object)long0));
      assertFalse(long5.equals((Object)long3));
      assertFalse(long5.equals((Object)long1));
      assertFalse(long5.equals((Object)long2));
      assertNotNull(long5);
      assertEquals((-4286L), (long)long5);
      
      Long long6 = new Long(2967L);
      assertFalse(long6.equals((Object)long0));
      assertFalse(long6.equals((Object)long3));
      assertFalse(long6.equals((Object)long4));
      assertFalse(long6.equals((Object)long1));
      assertFalse(long6.equals((Object)long5));
      assertFalse(long6.equals((Object)long2));
      assertNotNull(long6);
      assertEquals(2967L, (long)long6);
      
      Long long7 = new Long(0);
      assertFalse(long7.equals((Object)long2));
      assertFalse(long7.equals((Object)long4));
      assertFalse(long7.equals((Object)long6));
      assertFalse(long7.equals((Object)long1));
      assertFalse(long7.equals((Object)long0));
      assertFalse(long7.equals((Object)long3));
      assertFalse(long7.equals((Object)long5));
      assertNotNull(long7);
      assertEquals(0L, (long)long7);
      
      Long[] longArray0 = ArrayUtils.subarray((Long[]) null, 371, 1651);
      assertNull(longArray0);
  }

  @Test(timeout = 4000)
  public void test0986()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      String[] stringArray0 = new String[4];
      stringArray0[0] = "{?m-vSo";
      stringArray0[1] = ", Length: ";
      stringArray0[2] = "D.g/t";
      stringArray0[3] = "java.lang.String";
      String[] stringArray1 = ArrayUtils.subarray(stringArray0, 1967, 33);
      assertEquals(4, stringArray0.length);
      assertEquals(0, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertNotNull(stringArray1);
  }

  @Test(timeout = 4000)
  public void test0987()  throws Throwable  {
      Long[] longArray0 = new Long[9];
      long long0 = 0L;
      Long long1 = new Long(0L);
      assertTrue(long1.equals((Object)long0));
      assertNotNull(long1);
      assertEquals(0L, (long)long1);
      
      longArray0[0] = long1;
      Long long2 = new Long(0L);
      assertTrue(long2.equals((Object)long0));
      assertTrue(long2.equals((Object)long1));
      assertNotNull(long2);
      assertEquals(0L, (long)long2);
      
      longArray0[1] = long2;
      Long long3 = new Long(long0);
      assertTrue(long3.equals((Object)long1));
      assertTrue(long3.equals((Object)long0));
      assertTrue(long3.equals((Object)long2));
      assertNotNull(long3);
      assertEquals(0L, (long)long3);
      
      longArray0[2] = long3;
      Long long4 = new Long((-1734L));
      assertFalse(long4.equals((Object)long1));
      assertFalse(long4.equals((Object)long0));
      assertFalse(long4.equals((Object)long2));
      assertFalse(long4.equals((Object)long3));
      assertNotNull(long4);
      assertEquals((-1734L), (long)long4);
      
      longArray0[3] = long4;
      Long long5 = new Long(1845L);
      assertFalse(long5.equals((Object)long4));
      assertFalse(long5.equals((Object)long3));
      assertFalse(long5.equals((Object)long1));
      assertFalse(long5.equals((Object)long0));
      assertFalse(long5.equals((Object)long2));
      assertNotNull(long5);
      assertEquals(1845L, (long)long5);
      
      longArray0[4] = long5;
      Long long6 = new Long(0L);
      assertTrue(long6.equals((Object)long1));
      assertTrue(long6.equals((Object)long0));
      assertFalse(long6.equals((Object)long5));
      assertTrue(long6.equals((Object)long2));
      assertTrue(long6.equals((Object)long3));
      assertFalse(long6.equals((Object)long4));
      assertNotNull(long6);
      assertEquals(0L, (long)long6);
      
      longArray0[5] = long6;
      Long long7 = new Long(0L);
      assertFalse(long7.equals((Object)long5));
      assertFalse(long7.equals((Object)long4));
      assertTrue(long7.equals((Object)long0));
      assertTrue(long7.equals((Object)long1));
      assertTrue(long7.equals((Object)long2));
      assertTrue(long7.equals((Object)long3));
      assertTrue(long7.equals((Object)long6));
      assertNotNull(long7);
      assertEquals(0L, (long)long7);
      
      longArray0[6] = long7;
      Long long8 = new Long((-2835L));
      assertFalse(long8.equals((Object)long7));
      assertFalse(long8.equals((Object)long6));
      assertFalse(long8.equals((Object)long4));
      assertFalse(long8.equals((Object)long5));
      assertFalse(long8.equals((Object)long0));
      assertFalse(long8.equals((Object)long2));
      assertFalse(long8.equals((Object)long3));
      assertFalse(long8.equals((Object)long1));
      assertNotNull(long8);
      assertEquals((-2835L), (long)long8);
      
      longArray0[7] = long8;
      Long long9 = new Long((-1734L));
      assertFalse(long9.equals((Object)long8));
      assertFalse(long9.equals((Object)long0));
      assertTrue(long9.equals((Object)long4));
      assertFalse(long9.equals((Object)long1));
      assertFalse(long9.equals((Object)long3));
      assertFalse(long9.equals((Object)long7));
      assertFalse(long9.equals((Object)long6));
      assertFalse(long9.equals((Object)long2));
      assertFalse(long9.equals((Object)long5));
      assertNotNull(long9);
      assertEquals((-1734L), (long)long9);
      
      longArray0[8] = long9;
      Long[] longArray1 = ArrayUtils.subarray(longArray0, 371, 371);
      assertEquals(9, longArray0.length);
      assertEquals(0, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
  }

  @Test(timeout = 4000)
  public void test0988()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = false;
      booleanArray0[6] = false;
      booleanArray0[7] = false;
      booleanArray0[8] = true;
      ArrayUtils.reverse(booleanArray0, 2, 2);
      assertTrue(Arrays.equals(new boolean[] {true, false, true, true, true, false, false, false, true}, booleanArray0));
      assertEquals(9, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test0989()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = ';';
      charArray0[1] = 'W';
      charArray0[2] = 'M';
      int int0 = ArrayUtils.indexOf(charArray0, '*', 0);
      assertArrayEquals(new char[] {';', 'W', 'M', '\u0000'}, charArray0);
      assertEquals(4, charArray0.length);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0990()  throws Throwable  {
      Long long0 = new Long(495L);
      assertNotNull(long0);
      assertEquals(495L, (long)long0);
      
      Long long1 = new Long((-1223L));
      assertFalse(long1.equals((Object)long0));
      assertNotNull(long1);
      assertEquals((-1223L), (long)long1);
      
      Long long2 = new Long(1952L);
      assertFalse(long2.equals((Object)long0));
      assertFalse(long2.equals((Object)long1));
      assertNotNull(long2);
      assertEquals(1952L, (long)long2);
      
      boolean[] booleanArray0 = ArrayUtils.EMPTY_BOOLEAN_ARRAY;
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals(0, booleanArray0.length);
      assertNotNull(booleanArray0);
      
      int[] intArray0 = new int[8];
      intArray0[4] = 54;
      Short short0 = new Short((short)6);
      assertNotNull(short0);
      assertEquals((short)6, (short)short0);
      
      long[] longArray0 = new long[0];
      long[] longArray1 = ArrayUtils.clone(longArray0);
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
      
      char[] charArray0 = new char[0];
      int int0 = ArrayUtils.indexOf(charArray0, 'Y');
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0991()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)9;
      byteArray0[1] = (byte) (-44);
      byteArray0[2] = (byte) (-39);
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) (byte) (-44);
      objectArray0[1] = (Object) (byte) (-44);
      objectArray0[2] = (Object) (byte) (-39);
      Object object0 = ArrayUtils.toPrimitive(objectArray0[2]);
      assertEquals(6, objectArray0.length);
      assertNotNull(object0);
      assertEquals((byte) (-39), object0);
      
      objectArray0[3] = object0;
      objectArray0[4] = (Object) (byte)9;
      objectArray0[5] = (Object) (byte) (-39);
      BitSet bitSet0 = ArrayUtils.indexesOf(objectArray0, objectArray0[3], (int) (byte) (-44));
      assertEquals(64, bitSet0.size());
      assertEquals(6, bitSet0.length());
      assertFalse(bitSet0.isEmpty());
      assertEquals("{2, 3, 5}", bitSet0.toString());
      assertEquals(3, bitSet0.cardinality());
      assertEquals(6, objectArray0.length);
      assertNotNull(bitSet0);
  }

  @Test(timeout = 4000)
  public void test0992()  throws Throwable  {
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short)1926;
      boolean[] booleanArray0 = new boolean[0];
      ArrayUtils.shift(booleanArray0, (-796), 786, (-796));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals(0, booleanArray0.length);
      
      long[] longArray0 = new long[5];
      longArray0[0] = (long) (short)1926;
      longArray0[1] = (long) (short)1926;
      longArray0[2] = (long) (-796);
      longArray0[3] = (long) (short)2151;
      longArray0[4] = (long) (short)1926;
      boolean boolean0 = ArrayUtils.isSameLength(longArray0, longArray0);
      assertArrayEquals(new long[] {1926L, 1926L, (-796L), 2151L, 1926L}, longArray0);
      assertEquals(5, longArray0.length);
      assertTrue(boolean0);
      
      char[] charArray0 = new char[0];
      char[] charArray1 = ArrayUtils.clone(charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
  }

  @Test(timeout = 4000)
  public void test0993()  throws Throwable  {
      byte byte0 = (byte) (-74);
      Byte byte1 = new Byte((byte) (-74));
      assertTrue(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      assertEquals((byte) (-74), (byte)byte1);
      
      Byte[] byteArray0 = new Byte[1];
      byteArray0[0] = byte1;
      byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0, byte0);
      assertArrayEquals(new byte[] {(byte) (-74)}, byteArray1);
      assertEquals(1, byteArray0.length);
      assertEquals(1, byteArray1.length);
      assertNotNull(byteArray1);
      
      int[] intArray0 = new int[2];
      intArray0[0] = (int) byte0;
      intArray0[1] = (int) byte0;
      boolean boolean0 = ArrayUtils.isSorted(intArray0);
      assertArrayEquals(new int[] {(-74), (-74)}, intArray0);
      assertEquals(2, intArray0.length);
      assertTrue(boolean0);
      
      int int0 = ArrayUtils.indexOf((Object[]) byteArray0, (Object) byte0, (-74));
      assertEquals(1, byteArray0.length);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test0994()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byte[] byteArray1 = new byte[2];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byte[] byteArray2 = ArrayUtils.addAll(byteArray0, byteArray1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray2);
      assertEquals(3, byteArray0.length);
      assertEquals(2, byteArray1.length);
      assertEquals(5, byteArray2.length);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray2, byteArray0);
      assertNotNull(byteArray2);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (-2552);
      doubleArray0[1] = (double) (-2552);
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (double) (-2552));
      assertEquals(2, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertEquals(2, bitSet0.length());
      assertEquals("{0, 1}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertArrayEquals(new double[] {(-2552.0), (-2552.0)}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      assertNotNull(bitSet0);
  }

  @Test(timeout = 4000)
  public void test0995()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 4026.966708;
      doubleArray0[1] = (-2101.5);
      doubleArray0[2] = 2063.283;
      int int0 = ArrayUtils.indexOf(doubleArray0, (-2101.5), 0);
      assertArrayEquals(new double[] {4026.966708, (-2101.5), 2063.283}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test0996()  throws Throwable  {
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short)560;
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte)110;
      ArrayUtils.swap((boolean[]) null, 1103, 0);
      boolean boolean0 = ArrayUtils.isEmpty((boolean[]) null);
      assertTrue(boolean0);
      
      boolean boolean1 = ArrayUtils.isSameLength((char[]) null, (char[]) null);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      ArrayUtils.swap(byteArray0, (-1), (int) (byte)68);
      assertArrayEquals(new byte[] {(byte)0, (byte)110, (byte)0}, byteArray0);
      assertEquals(3, byteArray0.length);
      
      Byte[] byteArray1 = new Byte[4];
      byteArray1[0] = (Byte) (byte)110;
      byteArray1[1] = (Byte) (byte)110;
      byteArray1[2] = (Byte) (byte)110;
      byteArray1[3] = (Byte) (byte)110;
      byte[] byteArray2 = ArrayUtils.toPrimitive(byteArray1);
      assertArrayEquals(new byte[] {(byte)110, (byte)110, (byte)110, (byte)110}, byteArray2);
      assertEquals(4, byteArray1.length);
      assertEquals(4, byteArray2.length);
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertNotSame(byteArray2, byteArray0);
      assertNotNull(byteArray2);
      
      ArrayUtils.reverse((boolean[]) null);
  }

  @Test(timeout = 4000)
  public void test0997()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)52;
      byteArray0[1] = (byte)64;
      int int0 = ArrayUtils.indexOf(byteArray0, (byte)52);
      assertArrayEquals(new byte[] {(byte)52, (byte)64}, byteArray0);
      assertEquals(2, byteArray0.length);
      assertEquals(0, int0);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "ur";
      String[] stringArray1 = ArrayUtils.nullToEmpty(stringArray0);
      assertEquals(1, stringArray0.length);
      assertEquals(1, stringArray1.length);
      assertSame(stringArray0, stringArray1);
      assertSame(stringArray1, stringArray0);
      assertNotNull(stringArray1);
      
      int[] intArray0 = new int[9];
      intArray0[0] = (-1808);
      intArray0[1] = (int) (byte)52;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = (-1808);
      intArray0[5] = 0;
      intArray0[6] = (int) (byte)64;
      intArray0[7] = (int) (byte)52;
      intArray0[8] = (int) (byte)64;
      BitSet bitSet0 = ArrayUtils.indexesOf(intArray0, 64, 64);
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertArrayEquals(new int[] {(-1808), 52, 0, 0, (-1808), 0, 64, 52, 64}, intArray0);
      assertEquals(9, intArray0.length);
      assertNotNull(bitSet0);
      
      ArrayUtils.swap((char[]) null, (int) (byte)64, (-2177), 64);
      boolean boolean0 = ArrayUtils.isEmpty((char[]) null);
      assertTrue(boolean0);
      
      ArrayUtils.reverse(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertEquals(1, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test0998()  throws Throwable  {
      short[] shortArray0 = new short[2];
      shortArray0[1] = (short)64;
      short[] shortArray1 = ArrayUtils.removeAllOccurences(shortArray0, (short)64);
      assertArrayEquals(new short[] {(short)0, (short)64}, shortArray0);
      assertArrayEquals(new short[] {(short)0}, shortArray1);
      assertEquals(2, shortArray0.length);
      assertEquals(1, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      
      int[] intArray0 = new int[8];
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      ArrayUtils.reverse(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, true, false, true, true}, booleanArray0));
      assertEquals(5, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test0999()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSameLength((double[]) null, (double[]) null);
      assertTrue(boolean0);
      
      Character[] characterArray0 = ArrayUtils.toObject((char[]) null);
      assertNull(characterArray0);
      
      int int0 = ArrayUtils.lastIndexOf((double[]) null, (-506.073126), (-1.0));
      assertEquals((-1), int0);
      
      Boolean boolean1 = Boolean.valueOf(true);
      assertTrue(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      assertTrue(boolean1);
      
      Boolean boolean2 = Boolean.valueOf(true);
      assertTrue(boolean2.equals((Object)boolean0));
      assertNotNull(boolean2);
      assertTrue(boolean2);
      
      boolean boolean3 = ArrayUtils.isEquals(boolean1, boolean2);
      assertTrue(boolean1.equals((Object)boolean0));
      assertTrue(boolean2.equals((Object)boolean0));
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3);
      
      ArrayUtils.swap((char[]) null, 36, 82);
  }

  @Test(timeout = 4000)
  public void test1000()  throws Throwable  {
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short) (-13);
      shortArray0[1] = (short)43;
      char[] charArray0 = null;
      ArrayUtils.swap((char[]) null, (int) (short) (-13), (-2147483633), (-2147483633));
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)17;
      byteArray0[1] = (byte) (-35);
      byte[] byteArray1 = ArrayUtils.add(byteArray0, (byte) (-95));
      assertArrayEquals(new byte[] {(byte)17, (byte) (-35)}, byteArray0);
      assertArrayEquals(new byte[] {(byte)17, (byte) (-35), (byte) (-95)}, byteArray1);
      assertEquals(2, byteArray0.length);
      assertEquals(3, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      
      Byte byte0 = new Byte((byte)17);
      assertNotNull(byte0);
      assertEquals((byte)17, (byte)byte0);
      
      try { 
        Byte.valueOf("uE\"F:L>");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"uE\"F:L>\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test1001()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      int int0 = ArrayUtils.indexOf((byte[]) null, (byte) (-118));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test1002()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte) (-44);
      byteArray0[2] = (byte) (-39);
      byteArray0[3] = (byte)2;
      byteArray0[4] = (byte)51;
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) (byte)0;
      floatArray0[1] = (float) (byte)51;
      float[] floatArray1 = ArrayUtils.removeElement(floatArray0, (float) (byte)51);
      assertArrayEquals(new float[] {0.0F, 51.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F}, floatArray1, 0.01F);
      assertEquals(2, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      
      Long long0 = new Long((byte)51);
      assertNotNull(long0);
      assertEquals(51L, (long)long0);
      
      String string0 = ArrayUtils.toString((Object) long0);
      assertNotNull(string0);
      assertEquals("51", string0);
      
      ArrayUtils.swap(byteArray0, 0, (int) (byte) (-44), 99);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-44), (byte) (-39), (byte)2, (byte)51, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(9, byteArray0.length);
      
      String[] stringArray0 = new String[0];
      String[] stringArray1 = ArrayUtils.nullToEmpty(stringArray0);
      assertEquals(0, stringArray0.length);
      assertEquals(0, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertNotNull(stringArray1);
  }

  @Test(timeout = 4000)
  public void test1003()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = 'Y';
      char[] charArray1 = ArrayUtils.add(charArray0, 'Y');
      assertArrayEquals(new char[] {'Y'}, charArray0);
      assertArrayEquals(new char[] {'Y', 'Y'}, charArray1);
      assertEquals(1, charArray0.length);
      assertEquals(2, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      
      int[] intArray0 = new int[7];
      intArray0[0] = (int) 'Y';
      intArray0[1] = 955;
      intArray0[2] = (int) '|';
      intArray0[3] = (int) '|';
      intArray0[4] = (int) 'Y';
      boolean boolean0 = ArrayUtils.contains(intArray0, 0);
      assertArrayEquals(new int[] {89, 955, 124, 124, 89, 0, 0}, intArray0);
      assertEquals(7, intArray0.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1004()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)1;
      byteArray0[2] = (byte) (-22);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)2;
      float[] floatArray0 = new float[0];
      float[] floatArray1 = ArrayUtils.addFirst(floatArray0, (float) (byte) (-118));
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-118.0F)}, floatArray1, 0.01F);
      assertEquals(0, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      
      short[] shortArray0 = new short[0];
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertNotNull(shortArray1);
      
      boolean boolean0 = ArrayUtils.isSorted(shortArray0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray0.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1005()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)22;
      byteArray0[1] = (byte)76;
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte)64;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)77;
      byteArray0[6] = (byte) (-54);
      byteArray0[7] = (byte) (-118);
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte) (-1));
      assertArrayEquals(new byte[] {(byte)22, (byte)76, (byte) (-1), (byte)64, (byte)0, (byte)77, (byte) (-54), (byte) (-118)}, byteArray0);
      assertEquals(8, byteArray0.length);
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test1006()  throws Throwable  {
      BitSet bitSet0 = new BitSet();
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertNotNull(bitSet0);
      
      byte[] byteArray0 = new byte[0];
      ArrayUtils.swap(byteArray0, 11, 11, 11);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short)1070;
      shortArray0[2] = (short) (-400);
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) 11;
      floatArray0[1] = (float) (short)1070;
      floatArray0[2] = (float) (short)0;
      floatArray0[3] = (float) (short)1070;
      floatArray0[4] = (float) (short)1070;
      floatArray0[5] = (float) (short)1070;
      floatArray0[6] = (float) (short) (-400);
      boolean boolean0 = ArrayUtils.contains(floatArray0, Float.NaN);
      assertArrayEquals(new float[] {11.0F, 1070.0F, 0.0F, 1070.0F, 1070.0F, 1070.0F, (-400.0F)}, floatArray0, 0.01F);
      assertEquals(7, floatArray0.length);
      assertFalse(boolean0);
      
      Integer[] integerArray0 = new Integer[0];
      Integer[] integerArray1 = ArrayUtils.nullToEmpty(integerArray0);
      assertEquals(0, integerArray0.length);
      assertEquals(0, integerArray1.length);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertNotNull(integerArray1);
      
      byte byte0 = (byte) (-46);
      // Undeclared exception!
      try { 
        ArrayUtils.add(byteArray0, (-5511), (byte) (-1));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -5511, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1007()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = (-2830);
      intArray0[1] = 7;
      ArrayUtils.shift(intArray0, 7, (-2373), 328);
      assertArrayEquals(new int[] {(-2830), 7}, intArray0);
      assertEquals(2, intArray0.length);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-90);
      byteArray0[1] = (byte) (-25);
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte) (-56);
      ArrayUtils.reverse((char[]) null);
  }

  @Test(timeout = 4000)
  public void test1008()  throws Throwable  {
      char[] charArray0 = new char[2];
      Long long0 = new Long(495L);
      assertNotNull(long0);
      assertEquals(495L, (long)long0);
      
      Long long1 = new Long((-1223L));
      assertFalse(long1.equals((Object)long0));
      assertNotNull(long1);
      assertEquals((-1223L), (long)long1);
      
      Long long2 = new Long(1952L);
      assertFalse(long2.equals((Object)long0));
      assertFalse(long2.equals((Object)long1));
      assertNotNull(long2);
      assertEquals(1952L, (long)long2);
      
      Boolean[] booleanArray0 = new Boolean[0];
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertNotNull(booleanArray1);
      
      int[] intArray0 = new int[8];
      intArray0[4] = 54;
      Short[] shortArray0 = new Short[3];
      Short short0 = new Short((short)6);
      assertNotNull(short0);
      assertEquals((short)6, (short)short0);
      
      shortArray0[0] = short0;
      short short1 = (short) (-40);
      Short short2 = new Short((short) (-40));
      assertFalse(short2.equals((Object)short0));
      assertTrue(short2.equals((Object)short1));
      assertNotNull(short2);
      assertEquals((short) (-40), (short)short2);
      
      shortArray0[1] = short2;
      Short short3 = Short.valueOf((short) (-739));
      assertFalse(short3.equals((Object)short0));
      assertFalse(short3.equals((Object)short2));
      assertFalse(short3.equals((Object)short1));
      assertNotNull(short3);
      assertEquals((short) (-739), (short)short3);
      
      shortArray0[2] = short3;
      boolean boolean0 = ArrayUtils.isArrayIndexValid(shortArray0, (-115));
      assertEquals(3, shortArray0.length);
      assertFalse(boolean0);
      
      Object[] objectArray0 = ArrayUtils.nullToEmpty((Object[]) shortArray0);
      assertEquals(3, objectArray0.length);
      assertEquals(3, shortArray0.length);
      assertSame(shortArray0, objectArray0);
      assertNotNull(objectArray0);
      
      ArrayUtils.swap(objectArray0, (int) short1, (int) (short)6, (int) (short)6);
      assertEquals(3, objectArray0.length);
      assertEquals(3, shortArray0.length);
      assertSame(shortArray0, objectArray0);
  }

  @Test(timeout = 4000)
  public void test1009()  throws Throwable  {
      float[] floatArray0 = new float[2];
      floatArray0[0] = 1.0F;
      floatArray0[1] = 1.0F;
      float[] floatArray1 = ArrayUtils.addFirst(floatArray0, 1.0F);
      assertArrayEquals(new float[] {1.0F, 1.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {1.0F, 1.0F, 1.0F}, floatArray1, 0.01F);
      assertEquals(2, floatArray0.length);
      assertEquals(3, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      
      Boolean boolean0 = new Boolean(false);
      assertNotNull(boolean0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1010()  throws Throwable  {
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)2;
      short[] shortArray1 = ArrayUtils.removeAllOccurences(shortArray0, (short)0);
      assertArrayEquals(new short[] {(short)2, (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)2}, shortArray1);
      assertEquals(2, shortArray0.length);
      assertEquals(1, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      
      short[] shortArray2 = ArrayUtils.addFirst(shortArray0, (short)2);
      assertArrayEquals(new short[] {(short)2, (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)2, (short)2, (short)0}, shortArray2);
      assertEquals(2, shortArray0.length);
      assertEquals(3, shortArray2.length);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertFalse(shortArray2.equals((Object)shortArray1));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray0, shortArray2);
      assertNotSame(shortArray2, shortArray0);
      assertNotSame(shortArray2, shortArray1);
      assertNotNull(shortArray2);
      
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) (short)0;
      objectArray0[3] = (Object) (short)2;
      int int0 = ArrayUtils.lastIndexOf(objectArray0, objectArray0[2]);
      assertEquals(4, objectArray0.length);
      assertEquals(2, int0);
      
      byte[] byteArray0 = new byte[0];
      int int1 = ArrayUtils.lastIndexOf(byteArray0, (byte)90);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      // Undeclared exception!
      try { 
        ArrayUtils.toMap(objectArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array element 0, '0', is neither of type Map.Entry nor an Array
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1011()  throws Throwable  {
      int int0 = ArrayUtils.lastIndexOf((float[]) null, 0.88169146F, 31);
      assertEquals((-1), int0);
      
      Long long0 = new Long(1358L);
      assertNotNull(long0);
      assertEquals(1358L, (long)long0);
      
      Long[] longArray0 = new Long[1];
      longArray0[0] = long0;
      Long[] longArray1 = ArrayUtils.subarray(longArray0, (-1), 2);
      assertEquals(1, longArray0.length);
      assertEquals(1, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotNull(longArray1);
      
      char[] charArray0 = new char[5];
      charArray0[3] = 'Y';
      charArray0[1] = 'Y';
      charArray0[2] = 'Y';
      charArray0[3] = 'Y';
      charArray0[4] = 'Y';
      boolean boolean0 = ArrayUtils.isSorted(charArray0);
      assertArrayEquals(new char[] {'\u0000', 'Y', 'Y', 'Y', 'Y'}, charArray0);
      assertEquals(5, charArray0.length);
      assertTrue(boolean0);
      
      long[] longArray2 = ArrayUtils.addAll((long[]) null, (long[]) null);
      assertNull(longArray2);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      char[] charArray1 = ArrayUtils.insert(2, charArray0, charArray0);
      assertArrayEquals(new char[] {'\u0000', 'Y', 'Y', 'Y', 'Y'}, charArray0);
      assertArrayEquals(new char[] {'\u0000', 'Y', '\u0000', 'Y', 'Y', 'Y', 'Y', 'Y', 'Y', 'Y'}, charArray1);
      assertEquals(5, charArray0.length);
      assertEquals(10, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = ArrayUtils.removeAllOccurrences(booleanArray0, true);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals(0, booleanArray1.length);
      assertEquals(0, booleanArray0.length);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotNull(booleanArray1);
      
      float[] floatArray0 = ArrayUtils.addFirst((float[]) null, (-1569.0298F));
      assertArrayEquals(new float[] {(-1569.0298F)}, floatArray0, 0.01F);
      assertEquals(1, floatArray0.length);
      assertNotNull(floatArray0);
  }

  @Test(timeout = 4000)
  public void test1012()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)1;
      byteArray0[2] = (byte) (-22);
      byteArray0[3] = (byte) (-22);
      byteArray0[4] = (byte)2;
      short[] shortArray0 = new short[0];
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertNotNull(shortArray1);
      
      boolean boolean0 = ArrayUtils.isNotEmpty(byteArray0);
      assertArrayEquals(new byte[] {(byte)1, (byte)0, (byte) (-22), (byte) (-22), (byte)2}, byteArray0);
      assertEquals(5, byteArray0.length);
      assertTrue(boolean0);
      
      String[] stringArray0 = ArrayUtils.toStringArray((Object[]) shortArray1, "Array element ");
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test1013()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 781;
      ArrayUtils.swap(doubleArray0, Integer.MAX_VALUE, Integer.MAX_VALUE, Integer.MAX_VALUE);
      assertArrayEquals(new double[] {781.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      int[] intArray0 = new int[0];
      ArrayUtils.swap(intArray0, 10, Integer.MAX_VALUE, 10);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) 781;
      floatArray0[1] = (-394.6474F);
      float[] floatArray1 = ArrayUtils.removeElement(floatArray0, (float) Integer.MAX_VALUE);
      assertArrayEquals(new float[] {781.0F, (-394.6474F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {781.0F, (-394.6474F)}, floatArray1, 0.01F);
      assertEquals(2, floatArray0.length);
      assertEquals(2, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
  }

  @Test(timeout = 4000)
  public void test1014()  throws Throwable  {
      Byte[] byteArray0 = new Byte[2];
      byte byte0 = (byte)51;
      Byte byte1 = new Byte((byte)51);
      assertTrue(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      assertEquals((byte)51, (byte)byte1);
      
      byteArray0[0] = byte1;
      boolean boolean0 = ArrayUtils.contains((short[]) null, (short)202);
      assertFalse(boolean0);
      
      char[] charArray0 = new char[2];
      charArray0[0] = '.';
      charArray0[1] = 'L';
      ArrayUtils.reverse(charArray0, (int) (byte)51, (int) (byte)51);
      assertArrayEquals(new char[] {'.', 'L'}, charArray0);
      assertEquals(2, charArray0.length);
      
      byte[] byteArray1 = new byte[2];
      byteArray1[0] = (byte)51;
      byteArray1[1] = byte0;
      boolean boolean1 = ArrayUtils.isNotEmpty(byteArray1);
      assertArrayEquals(new byte[] {(byte)51, (byte)51}, byteArray1);
      assertEquals(2, byteArray1.length);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      ArrayUtils.shift(byteArray1, (int) byte0);
      assertArrayEquals(new byte[] {(byte)51, (byte)51}, byteArray1);
      assertEquals(2, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test1015()  throws Throwable  {
      float[] floatArray0 = new float[3];
      floatArray0[0] = (-1397.05F);
      floatArray0[1] = 2381.4106F;
      ArrayUtils.swap((Object[]) null, 1136, 1136, 1136);
  }

  @Test(timeout = 4000)
  public void test1016()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)79;
      byteArray0[2] = (byte) (-22);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)2;
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte) (-118), 1418);
      assertArrayEquals(new byte[] {(byte)1, (byte)79, (byte) (-22), (byte)0, (byte)2}, byteArray0);
      assertEquals(5, byteArray0.length);
      assertEquals((-1), int0);
      
      float[] floatArray0 = new float[0];
      float[] floatArray1 = ArrayUtils.addFirst(floatArray0, (float) (byte) (-118));
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-118.0F)}, floatArray1, 0.01F);
      assertEquals(0, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      
      short[] shortArray0 = new short[0];
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertNotNull(shortArray1);
      
      float[] floatArray2 = ArrayUtils.add(floatArray1, (float) (byte)1);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-118.0F)}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {(-118.0F), 1.0F}, floatArray2, 0.01F);
      assertEquals(0, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertEquals(2, floatArray2.length);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertNotSame(floatArray0, floatArray2);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray1, floatArray2);
      assertNotSame(floatArray2, floatArray0);
      assertNotSame(floatArray2, floatArray1);
      assertNotNull(floatArray2);
      
      ArrayUtils.swap((Object[]) shortArray1, (int) (byte) (-22), (int) (byte)2, 0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      
      char[] charArray0 = new char[4];
      charArray0[0] = '.';
      charArray0[1] = 'U';
      charArray0[2] = '>';
      charArray0[3] = 'p';
      ArrayUtils.reverse(charArray0);
      assertArrayEquals(new char[] {'p', '>', 'U', '.'}, charArray0);
      assertEquals(4, charArray0.length);
      
      int int1 = ArrayUtils.indexOf(floatArray1, (float) 0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-118.0F)}, floatArray1, 0.01F);
      assertEquals(0, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertTrue(int1 == int0);
      assertFalse(floatArray0.equals((Object)floatArray2));
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertFalse(floatArray1.equals((Object)floatArray2));
      assertNotSame(floatArray0, floatArray2);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray1, floatArray2);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test1017()  throws Throwable  {
      long[] longArray0 = new long[0];
      boolean boolean0 = ArrayUtils.isNotEmpty(longArray0);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      assertFalse(boolean0);
      
      byte[] byteArray0 = ArrayUtils.clone((byte[]) null);
      assertNull(byteArray0);
      
      int int0 = ArrayUtils.indexOf((short[]) null, (short) (-2639));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test1018()  throws Throwable  {
      int int0 = ArrayUtils.indexOf((short[]) null, (short)51, 98);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test1019()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)2;
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (byte)2;
      shortArray0[1] = (short) (byte)2;
      shortArray0[2] = (short) (byte)2;
      shortArray0[3] = (short) (byte)2;
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short)55, (-267));
      assertArrayEquals(new short[] {(short)2, (short)2, (short)2, (short)2}, shortArray0);
      assertEquals(4, shortArray0.length);
      assertEquals((-1), int0);
      
      double[] doubleArray0 = new double[0];
      boolean boolean0 = ArrayUtils.isSorted(doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.isSameType((Object) null, (Object) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1020()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      ArrayUtils.swap(booleanArray0, (int) (short)0, 862);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      assertEquals(2, booleanArray0.length);
      
      boolean boolean0 = ArrayUtils.isEmpty(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      assertEquals(2, booleanArray0.length);
      assertFalse(boolean0);
      
      char[] charArray0 = new char[0];
      boolean boolean1 = ArrayUtils.isSameLength(charArray0, charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)68;
      byteArray0[1] = (byte)39;
      byteArray0[2] = (byte)114;
      ArrayUtils.swap(byteArray0, (int) (byte)68, (int) (byte)39);
      assertArrayEquals(new byte[] {(byte)68, (byte)39, (byte)114}, byteArray0);
      assertEquals(3, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test1021()  throws Throwable  {
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short)8;
      shortArray0[1] = (short)8;
      shortArray0[2] = (short)8;
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short)2, 91);
      assertArrayEquals(new short[] {(short)8, (short)8, (short)8}, shortArray0);
      assertEquals(3, shortArray0.length);
      assertEquals((-1), int0);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 3371.0;
      doubleArray0[1] = (double) (short)8;
      boolean boolean0 = ArrayUtils.isSorted(doubleArray0);
      assertArrayEquals(new double[] {3371.0, 8.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1022()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-7);
      boolean boolean0 = ArrayUtils.isSameLength(byteArray0, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-7)}, byteArray0);
      assertEquals(1, byteArray0.length);
      assertTrue(boolean0);
      
      short[] shortArray0 = new short[3];
      shortArray0[1] = (short) (byte) (-7);
      shortArray0[2] = (short) (byte) (-7);
      BitSet bitSet0 = ArrayUtils.indexesOf((long[]) null, (-997L), (int) (short) (-7));
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertNotNull(bitSet0);
  }

  @Test(timeout = 4000)
  public void test1023()  throws Throwable  {
      Byte[] byteArray0 = new Byte[2];
      Byte byte0 = new Byte((byte)51);
      assertNotNull(byte0);
      assertEquals((byte)51, (byte)byte0);
      
      byteArray0[0] = byte0;
      boolean boolean0 = ArrayUtils.contains((short[]) null, (short)202);
      assertFalse(boolean0);
      
      char[] charArray0 = new char[2];
      charArray0[0] = '.';
      charArray0[1] = '.';
      ArrayUtils.reverse(charArray0, (int) (byte)51, (int) (byte)51);
      assertArrayEquals(new char[] {'.', '.'}, charArray0);
      assertEquals(2, charArray0.length);
      
      int int0 = ArrayUtils.lastIndexOf((short[]) null, (short) (byte)51, 1681);
      assertEquals((-1), int0);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) '.';
      longArray0[1] = (long) (-1);
      // Undeclared exception!
      try { 
        ArrayUtils.remove(longArray0, (int) (short)202);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 202, Length: 2
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1024()  throws Throwable  {
      BitSet bitSet0 = new BitSet();
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertNotNull(bitSet0);
      
      byte[] byteArray0 = new byte[0];
      ArrayUtils.swap(byteArray0, 11, 11, 11);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      
      short[] shortArray0 = new short[2];
      shortArray0[1] = (short)0;
      short[] shortArray1 = ArrayUtils.insert(0, shortArray0, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0}, shortArray1);
      assertEquals(2, shortArray0.length);
      assertEquals(4, shortArray1.length);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
  }

  @Test(timeout = 4000)
  public void test1025()  throws Throwable  {
      BitSet bitSet0 = ArrayUtils.indexesOf((long[]) null, 318L);
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertNotNull(bitSet0);
      
      byte[] byteArray0 = new byte[0];
      ArrayUtils.swap(byteArray0, 11, 11, 11);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short)1070;
      shortArray0[2] = (short) (-430);
      shortArray0[3] = (short) (-94);
      shortArray0[4] = (short)2;
      shortArray0[5] = (short) (-1263);
      shortArray0[6] = (short)0;
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short)0, (int) (short) (-430));
      assertArrayEquals(new short[] {(short)0, (short)1070, (short) (-430), (short) (-94), (short)2, (short) (-1263), (short)0}, shortArray0);
      assertEquals(7, shortArray0.length);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test1026()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 2800.3034428260817;
      boolean[] booleanArray0 = new boolean[0];
      ArrayUtils.shift(booleanArray0, (-1790), (-42), (-203));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals(0, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test1027()  throws Throwable  {
      byte[] byteArray0 = ArrayUtils.add((byte[]) null, (byte) (-116));
      assertArrayEquals(new byte[] {(byte) (-116)}, byteArray0);
      assertEquals(1, byteArray0.length);
      assertNotNull(byteArray0);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      ArrayUtils.shift(booleanArray0, (int) (byte) (-116));
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertEquals(1, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test1028()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      booleanArray0[6] = true;
      ArrayUtils.shift(booleanArray0, (-203), (-203), (-203));
      assertTrue(Arrays.equals(new boolean[] {false, true, true, true, false, false, true}, booleanArray0));
      assertEquals(7, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test1029()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[0] = (byte) (-42);
      byteArray0[2] = (byte) (-42);
      byte[] byteArray1 = ArrayUtils.removeAllOccurences(byteArray0, (byte) (-42));
      assertArrayEquals(new byte[] {(byte)0}, byteArray1);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) (byte) (-42);
      floatArray0[1] = 729.9F;
      int int0 = ArrayUtils.lastIndexOf(floatArray0, 729.9F);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test1030()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)17;
      byte byte0 = (byte)0;
      float[] floatArray0 = new float[1];
      floatArray0[0] = 0.0F;
      ArrayUtils.lastIndexOf(floatArray0, 973.82F, (int) (byte)17);
      byte byte1 = (byte)21;
      // Undeclared exception!
      try { 
        ArrayUtils.add(byteArray0, 501, (byte)17);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 501, Length: 5
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1031()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[0] = (byte) (-42);
      byteArray0[2] = (byte) (-42);
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) (byte) (-42);
      floatArray0[1] = 729.9F;
      int int0 = ArrayUtils.lastIndexOf(floatArray0, 729.9F);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test1032()  throws Throwable  {
      float[] floatArray0 = new float[8];
      floatArray0[0] = (-3332.0F);
      floatArray0[1] = 0.0F;
      floatArray0[2] = (-1.0F);
      floatArray0[3] = 1745.452F;
      floatArray0[4] = 1.0F;
      floatArray0[5] = 1192.67F;
      floatArray0[6] = (-1869.6888F);
      floatArray0[7] = (-1777.094F);
      int int0 = ArrayUtils.lastIndexOf(floatArray0, 3501.0F);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test1033()  throws Throwable  {
      Byte[] byteArray0 = new Byte[9];
      byte byte0 = (byte)89;
      Byte byte1 = new Byte((byte)89);
      byteArray0[0] = byte1;
      Byte byte2 = new Byte((byte)89);
      byteArray0[1] = byte2;
      Byte byte3 = new Byte((byte)68);
      Byte byte4 = new Byte((byte)0);
      Byte byte5 = new Byte((byte)89);
      ArrayUtils.toPrimitive(byteArray0, (byte)89);
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) (byte)0;
      floatArray0[1] = (float) (byte)0;
      floatArray0[2] = (float) (byte)68;
      floatArray0[3] = (float) byte0;
      floatArray0[4] = (float) byte0;
      // Undeclared exception!
      try { 
        ArrayUtils.remove(floatArray0, (int) byte0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 89, Length: 5
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1034()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = '[';
      charArray0[3] = '[';
      charArray0[3] = '{';
      charArray0[4] = '%';
      charArray0[6] = '{';
      charArray0[7] = '[';
      charArray0[5] = '-';
      int[] intArray0 = new int[0];
      char[] charArray1 = ArrayUtils.removeAll(charArray0, intArray0);
      assertArrayEquals(new char[] {'[', '\u0000', '\u0000', '{', '%', '-', '{', '[', '\u0000'}, charArray1);
  }

  @Test(timeout = 4000)
  public void test1035()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-49);
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) (byte) (-49);
      int[] intArray0 = ArrayUtils.removeElements((int[]) null, (int[]) null);
      assertNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test1036()  throws Throwable  {
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short)560;
      MockRandom mockRandom0 = new MockRandom((short)560);
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      // Undeclared exception!
      try { 
        ArrayUtils.remove(booleanArray0, (int) (byte)110);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 110, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1037()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 1580.0;
      float[] floatArray0 = new float[5];
      floatArray0[0] = (-488.41217F);
      floatArray0[1] = (-930.81055F);
      floatArray0[2] = 1713.691F;
      floatArray0[3] = 79.0F;
      floatArray0[4] = 1.0F;
      float[] floatArray1 = ArrayUtils.removeElement(floatArray0, (-930.81055F));
      assertArrayEquals(new float[] {(-488.41217F), 1713.691F, 79.0F, 1.0F}, floatArray1, 0.01F);
  }

  @Test(timeout = 4000)
  public void test1038()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 5648.964047939;
      doubleArray0[1] = 1.0;
      doubleArray0[2] = 2830.33259784;
      doubleArray0[3] = 3418.6;
      doubleArray0[4] = 495.0;
      doubleArray0[5] = 234.28263865902;
      doubleArray0[6] = (-533.7725526402018);
      int[] intArray0 = new int[3];
      intArray0[0] = 86;
      intArray0[1] = 1072;
      intArray0[2] = 4;
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(doubleArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1072, Length: 7
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1039()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      float[] floatArray0 = new float[4];
      floatArray0[0] = (-1150.5F);
      long[] longArray0 = null;
      int[] intArray0 = new int[0];
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((long[]) null, intArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1040()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 571.942196047302;
      doubleArray0[2] = 1.0;
      int[] intArray0 = new int[0];
      ArrayUtils.removeAll(doubleArray0, intArray0);
      float[] floatArray0 = new float[9];
      floatArray0[0] = 1.0F;
      floatArray0[1] = (-366.0F);
      floatArray0[2] = (-1.0F);
      floatArray0[3] = (-44.0F);
      floatArray0[4] = (-1564.41F);
      floatArray0[5] = 1.0F;
      floatArray0[6] = (-1230.06F);
      floatArray0[7] = (-3435.4497F);
      floatArray0[8] = 0.0F;
      int int0 = 1068;
      // Undeclared exception!
      try { 
        ArrayUtils.remove(floatArray0, 1068);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1068, Length: 9
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1041()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = true;
      booleanArray0[6] = false;
      booleanArray0[7] = false;
      ArrayUtils.contains(booleanArray0, true);
      short[] shortArray0 = new short[0];
      MockRandom mockRandom0 = new MockRandom(1L);
      mockRandom0.nextLong();
      mockRandom0.longs((long) 0);
      ArrayUtils.shuffle(shortArray0, (Random) mockRandom0);
      ArrayUtils.lastIndexOf(shortArray0, (short) (-1462));
      int[] intArray0 = new int[0];
      // Undeclared exception!
      try { 
        ArrayUtils.remove(intArray0, (int) (short) (-1462));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1462, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1042()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      float[] floatArray0 = new float[2];
      floatArray0[0] = 0.0F;
      floatArray0[1] = (-1066.68F);
      float[] floatArray1 = ArrayUtils.add(floatArray0, (-1066.68F));
      assertArrayEquals(new float[] {0.0F, (-1066.68F), (-1066.68F)}, floatArray1, 0.01F);
      
      float[] floatArray2 = ArrayUtils.clone(floatArray0);
      assertNotNull(floatArray2);
      
      ArrayUtils.swap(floatArray2, 1, 1);
      assertArrayEquals(new float[] {0.0F, (-1066.68F)}, floatArray2, 0.01F);
  }

  @Test(timeout = 4000)
  public void test1043()  throws Throwable  {
      float[] floatArray0 = new float[1];
      floatArray0[0] = (-2239.035F);
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      // Undeclared exception!
      try { 
        ArrayUtils.remove(booleanArray0, (-3327));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -3327, Length: 7
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1044()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 1;
      intArray0[1] = 84;
      int[] intArray1 = ArrayUtils.remove(intArray0, 1);
      assertArrayEquals(new int[] {1}, intArray1);
  }

  @Test(timeout = 4000)
  public void test1045()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[1] = 0.0;
      doubleArray0[3] = 1757.16516391848;
      float[] floatArray0 = new float[8];
      floatArray0[0] = 0.0F;
      floatArray0[1] = 0.0F;
      floatArray0[2] = 0.0F;
      floatArray0[3] = 0.0F;
      floatArray0[4] = (float) 0;
      floatArray0[5] = (-1066.68F);
      floatArray0[6] = 3153.88F;
      floatArray0[7] = 0.0F;
      ArrayUtils.add(floatArray0, 3153.88F);
      float[] floatArray1 = new float[0];
      ArrayUtils.clone(floatArray1);
      ArrayUtils.swap(floatArray1, (-2145314472), (-448));
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
  }

  @Test(timeout = 4000)
  public void test1046()  throws Throwable  {
      float[] floatArray0 = new float[0];
      MockRandom mockRandom0 = new MockRandom();
      ArrayUtils.shuffle(floatArray0, (Random) mockRandom0);
      ArrayUtils.swap(floatArray0, 0, 0, 2922);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test1047()  throws Throwable  {
      float[] floatArray0 = new float[0];
      ArrayUtils.swap(floatArray0, (-651), (-651));
      int[] intArray0 = new int[8];
      intArray0[0] = (-651);
      intArray0[1] = (-651);
      intArray0[2] = (-651);
      intArray0[3] = (-651);
      intArray0[4] = (-651);
      intArray0[5] = (-651);
      intArray0[6] = (-651);
      intArray0[7] = (-651);
      // Undeclared exception!
      try { 
        ArrayUtils.remove(intArray0, (-651));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -651, Length: 8
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1048()  throws Throwable  {
      ArrayUtils.clone((int[]) null);
      float[] floatArray0 = new float[7];
      floatArray0[0] = 1.0F;
      floatArray0[1] = 689.8953F;
      floatArray0[2] = (-1.0F);
      floatArray0[3] = 1.0F;
      floatArray0[4] = 1155.3372F;
      floatArray0[5] = 1.0F;
      floatArray0[6] = 0.0F;
      int[] intArray0 = new int[1];
      intArray0[0] = (-326);
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(floatArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -326, Length: 7
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1049()  throws Throwable  {
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short) (-1);
      shortArray0[1] = (short) (-1);
      char[] charArray0 = new char[7];
      charArray0[0] = '0';
      charArray0[1] = '0';
      charArray0[2] = '0';
      ArrayUtils.reverse((boolean[]) null, 2, (int) (short) (-1));
      ArrayUtils.removeElements((double[]) null, (double[]) null);
      ArrayUtils.indexesOf((double[]) null, (-1909.0), 2);
      int[] intArray0 = new int[5];
      intArray0[0] = 2;
      char[] charArray1 = ArrayUtils.removeAll(charArray0, intArray0);
      assertEquals(5, charArray1.length);
      assertArrayEquals(new char[] {'0', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray1);
      
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0);
      assertNotSame(byteArray1, byteArray0);
  }

  @Test(timeout = 4000)
  public void test1050()  throws Throwable  {
      float[] floatArray0 = new float[8];
      floatArray0[0] = (-1935.198F);
      floatArray0[1] = 2189.1333F;
      floatArray0[2] = (-3144.31F);
      floatArray0[3] = (-1118.1627F);
      floatArray0[4] = 2806.505F;
      floatArray0[5] = (-1.0F);
      floatArray0[6] = 515.0F;
      floatArray0[7] = 613.63F;
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(floatArray0, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Arrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test1051()  throws Throwable  {
      char[] charArray0 = new char[4];
      int[] intArray0 = new int[3];
      intArray0[0] = (int) '?';
      intArray0[1] = (int) 'z';
      intArray0[2] = (int) '{';
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(charArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 123, Length: 4
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1052()  throws Throwable  {
      float[] floatArray0 = new float[7];
      floatArray0[0] = (-2418.92F);
      floatArray0[1] = (-1.0F);
      floatArray0[2] = 0.0F;
      floatArray0[3] = 3877.0F;
      floatArray0[4] = (-1663.21F);
      floatArray0[5] = (-3448.5137F);
      floatArray0[6] = (-653.7F);
      int[] intArray0 = new int[8];
      intArray0[0] = 102;
      intArray0[1] = (-1);
      intArray0[2] = 0;
      intArray0[3] = 1;
      intArray0[4] = (-832);
      intArray0[5] = (-363);
      intArray0[6] = 0;
      intArray0[7] = 0;
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(floatArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 102, Length: 7
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1053()  throws Throwable  {
      long[] longArray0 = new long[3];
      longArray0[0] = (-2084L);
      longArray0[1] = 0L;
      longArray0[2] = (-4L);
      ArrayUtils.isSorted(longArray0);
      ArrayUtils.reverse(longArray0);
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short)759;
      shortArray0[1] = (short)52;
      shortArray0[2] = (short)993;
      shortArray0[3] = (short)2358;
      Object[] objectArray0 = ArrayUtils.nullToEmpty((Object[]) null);
      assertEquals(0, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test1054()  throws Throwable  {
      long[] longArray0 = new long[3];
      longArray0[1] = 0L;
      longArray0[2] = 0L;
      boolean boolean0 = ArrayUtils.isSorted(longArray0);
      assertTrue(boolean0);
      
      Long long0 = new Long(857L);
      Long long1 = new Long((-459L));
      Long[] longArray1 = ArrayUtils.nullToEmpty((Long[]) null);
      assertNotNull(longArray1);
      
      short[] shortArray0 = ArrayUtils.nullToEmpty((short[]) null);
      short[] shortArray1 = ArrayUtils.subarray(shortArray0, 0, 0);
      assertNotNull(shortArray1);
      assertSame(shortArray1, shortArray0);
  }

  @Test(timeout = 4000)
  public void test1055()  throws Throwable  {
      long[] longArray0 = new long[3];
      longArray0[0] = (-1166L);
      longArray0[1] = (-2142L);
      longArray0[2] = 995L;
      ArrayUtils.reverse(longArray0, (-158), (-158));
      assertArrayEquals(new long[] {(-1166L), (-2142L), 995L}, longArray0);
  }

  @Test(timeout = 4000)
  public void test1056()  throws Throwable  {
      float[] floatArray0 = new float[3];
      floatArray0[0] = (-1397.05F);
      floatArray0[1] = 2381.4106F;
      floatArray0[2] = (-1.0F);
      ArrayUtils.nullToEmpty(floatArray0);
      long[] longArray0 = new long[1];
      longArray0[0] = 0L;
      ArrayUtils.isSorted(longArray0);
      ArrayUtils.reverse(longArray0);
      Object[] objectArray0 = ArrayUtils.nullToEmpty((Object[]) null);
      assertEquals(0, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test1057()  throws Throwable  {
      float[] floatArray0 = new float[8];
      floatArray0[0] = (-3332.0F);
      floatArray0[1] = 0.0F;
      floatArray0[2] = (-1.0F);
      short[] shortArray0 = new short[0];
      boolean boolean0 = ArrayUtils.isEmpty(shortArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1058()  throws Throwable  {
      long[] longArray0 = new long[3];
      longArray0[0] = (-2084L);
      longArray0[1] = 0L;
      longArray0[2] = 0L;
      ArrayUtils.isSorted(longArray0);
      ArrayUtils.reverse(longArray0);
      assertArrayEquals(new long[] {0L, 0L, (-2084L)}, longArray0);
      
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short)759;
      shortArray0[1] = (short)52;
      shortArray0[2] = (short)993;
      shortArray0[3] = (short)2358;
      shortArray0[4] = (short)1304;
      boolean boolean0 = ArrayUtils.isEmpty(shortArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1059()  throws Throwable  {
      float[] floatArray0 = new float[5];
      floatArray0[0] = 0.0F;
      floatArray0[1] = 327.0F;
      ArrayUtils.nullToEmpty(floatArray0);
      ArrayUtils.removeAllOccurrences((int[]) null, 1);
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      booleanArray0[4] = false;
      ArrayUtils.swap(booleanArray0, 1490, 288);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, true, false}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test1060()  throws Throwable  {
      Object object0 = new Object();
      Long long0 = new Long(1L);
      Long long1 = new Long((-761L));
      Long long2 = new Long((-1205L));
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      ArrayUtils.swap(booleanArray0, 0, (-105), 0);
      assertEquals(1, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test1061()  throws Throwable  {
      long[] longArray0 = new long[6];
      longArray0[0] = 113L;
      longArray0[1] = 1L;
      longArray0[3] = (-3525L);
      ArrayUtils.removeAllOccurrences((int[]) null, 4485);
      ArrayUtils.swap((boolean[]) null, 4485, 2788);
  }

  @Test(timeout = 4000)
  public void test1062()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      ArrayUtils.swap(booleanArray0, 1072, Integer.MAX_VALUE, Integer.MAX_VALUE);
      assertEquals(4, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test1063()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = 2;
      intArray0[1] = 5;
      intArray0[2] = (-1332);
      intArray0[3] = 101;
      BitSet bitSet0 = ArrayUtils.indexesOf(intArray0, 219, 101);
      assertEquals(0, bitSet0.cardinality());
  }

  @Test(timeout = 4000)
  public void test1064()  throws Throwable  {
      float[] floatArray0 = new float[3];
      floatArray0[0] = (-1385.0087F);
      ArrayUtils.nullToEmpty(floatArray0);
      boolean[] booleanArray0 = ArrayUtils.toPrimitive((Boolean[]) null);
      assertNull(booleanArray0);
  }

  @Test(timeout = 4000)
  public void test1065()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)2;
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      booleanArray0[6] = true;
      booleanArray0[7] = true;
      ArrayUtils.swap(booleanArray0, (-510), 2829);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true, true, true, true}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test1066()  throws Throwable  {
      Long long0 = new Long(4996L);
      int[] intArray0 = ArrayUtils.removeAllOccurrences((int[]) null, 53);
      assertNull(intArray0);
      
      ArrayUtils.indexesOf((double[]) null, 580.5197691);
      int int0 = ArrayUtils.indexOf((double[]) null, (-3444.73770991167), 53);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test1067()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = (-1);
      intArray0[1] = (-1);
      intArray0[2] = (-1);
      intArray0[3] = 1128;
      intArray0[4] = (-1);
      ArrayUtils.shuffle(intArray0);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 963.2049;
      doubleArray0[1] = (double) (-1);
      doubleArray0[2] = (double) (-1);
      doubleArray0[3] = (double) (-1);
      ArrayUtils.swap(doubleArray0, (-1), 1128, 2145448816);
      assertEquals(4, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test1068()  throws Throwable  {
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short)1964;
      shortArray0[1] = (short)0;
      shortArray0[2] = (short)2151;
      shortArray0[3] = (short)1;
      shortArray0[4] = (short)1382;
      shortArray0[5] = (short)0;
      shortArray0[6] = (short) (-1642);
      shortArray0[7] = (short)395;
      ArrayUtils.indexesOf(shortArray0, (short) (-1642), (int) (short)2151);
      int[] intArray0 = new int[8];
      intArray0[0] = (int) (short)1;
      intArray0[1] = (int) (short) (-1642);
      intArray0[2] = (int) (short)395;
      intArray0[3] = (int) (short)0;
      intArray0[4] = (int) (short) (-1642);
      intArray0[5] = (int) (short)1964;
      intArray0[6] = (int) (short) (-1642);
      intArray0[7] = (int) (short)1964;
      MockRandom mockRandom0 = new MockRandom((short)1382);
      ArrayUtils.shuffle(intArray0, (Random) mockRandom0);
      assertArrayEquals(new int[] {(-1642), 395, 0, (-1642), 1964, (-1642), 1964, 1}, intArray0);
  }

  @Test(timeout = 4000)
  public void test1069()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = (-1916);
      intArray0[1] = (-962);
      intArray0[2] = (-962);
      intArray0[3] = (-962);
      intArray0[4] = (int) (byte)127;
      intArray0[5] = 1;
      intArray0[6] = (-962);
      intArray0[7] = (-1853);
      ArrayUtils.swap(intArray0, (-1853), (-1853), (-962));
      assertArrayEquals(new int[] {(-1916), (-962), (-962), (-962), 127, 1, (-962), (-1853)}, intArray0);
  }

  @Test(timeout = 4000)
  public void test1070()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = 3044;
      intArray0[1] = 3044;
      intArray0[2] = 3044;
      ArrayUtils.swap(intArray0, 281, 3044);
      assertEquals(3, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test1071()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      char char0 = 'v';
      Character character0 = Character.valueOf('v');
      Character[] characterArray0 = new Character[10];
      characterArray0[0] = character0;
      characterArray0[1] = character0;
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0, 'F');
      assertArrayEquals(new char[] {'v', 'v', 'F', 'F', 'F', 'F', 'F', 'F', 'F', 'F'}, charArray0);
      assertNotNull(charArray0);
      
      Object[] objectArray0 = new Object[6];
      objectArray0[1] = (Object) character0;
      objectArray0[3] = (Object) char0;
      objectArray0[4] = (Object) character0;
      objectArray0[5] = (Object) char0;
      ArrayUtils.shuffle(objectArray0);
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, 0.0, 210.80385843910764);
      assertEquals("{0, 1, 2, 3}", bitSet0.toString());
  }

  @Test(timeout = 4000)
  public void test1072()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = (-3820);
      intArray0[1] = (-1);
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = Integer.MAX_VALUE;
      intArray0[5] = 0;
      intArray0[6] = 3161;
      intArray0[7] = (-448);
      ArrayUtils.swap(intArray0, (-448), 0, 0);
      Object[] objectArray0 = new Object[0];
      MockRandom mockRandom0 = new MockRandom();
      ArrayUtils.shuffle(objectArray0, (Random) mockRandom0);
      MutableInt mutableInt0 = new MutableInt(0);
      try { 
        Long.valueOf("J");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"J\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test1073()  throws Throwable  {
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)560;
      shortArray0[1] = (short)0;
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) (short)0;
      floatArray0[1] = (float) (short)560;
      float[] floatArray1 = ArrayUtils.nullToEmpty(floatArray0);
      int[] intArray0 = new int[0];
      int[] intArray1 = ArrayUtils.removeAllOccurrences(intArray0, (int) (short)560);
      assertNotNull(intArray1);
      
      MockRandom mockRandom0 = new MockRandom((short)560);
      char[] charArray0 = new char[4];
      charArray0[0] = 'T';
      charArray0[1] = '_';
      charArray0[2] = ')';
      mockRandom0.longs();
      charArray0[3] = 'J';
      ArrayUtils.shuffle(charArray0, (Random) mockRandom0);
      assertArrayEquals(new char[] {'_', ')', 'J', 'T'}, charArray0);
      
      short[] shortArray1 = ArrayUtils.removeElement(shortArray0, (short)6);
      assertEquals(4, shortArray1.length);
      
      Float[] floatArray2 = new Float[0];
      float[] floatArray3 = ArrayUtils.toPrimitive(floatArray2);
      assertNotNull(floatArray3);
      assertNotSame(floatArray3, floatArray1);
  }

  @Test(timeout = 4000)
  public void test1074()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      long[] longArray0 = new long[0];
      ArrayUtils.swap(longArray0, 1383, 1383);
      ArrayUtils.nullToEmpty((Class<?>[]) null);
      Short short0 = new Short((short)2016);
      Short short1 = new Short((short)1921);
      Short short2 = new Short((short) (-1));
      Short short3 = new Short((short) (-3307));
      Short short4 = new Short((short) (-1808));
      Short[] shortArray0 = new Short[0];
  }

  @Test(timeout = 4000)
  public void test1075()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)1;
      byteArray0[2] = (byte) (-22);
      short[] shortArray0 = new short[0];
      short[] shortArray1 = ArrayUtils.removeElement(shortArray0, (short) (byte)1);
      assertNotNull(shortArray1);
      
      Float[] floatArray0 = new Float[1];
      Float float0 = new Float((float) (byte) (-22));
      floatArray0[0] = float0;
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {(-22.0F)}, floatArray1, 0.01F);
  }

  @Test(timeout = 4000)
  public void test1076()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-1.0);
      doubleArray0[1] = (-3818.7033228008);
      boolean boolean0 = ArrayUtils.contains(doubleArray0, 916.5750699090544, 88.0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1077()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 27;
      int int0 = ArrayUtils.indexOf(intArray0, 27, 27);
      assertEquals((-1), int0);
      
      Class<Object>[] classArray0 = (Class<Object>[]) Array.newInstance(Class.class, 3);
      Class<Object> class0 = Object.class;
      classArray0[0] = class0;
      Class<Object> class1 = Object.class;
      classArray0[1] = class1;
      Class<Object> class2 = Object.class;
      classArray0[2] = class2;
      Class<?>[] classArray1 = ArrayUtils.nullToEmpty(classArray0);
      assertEquals(3, classArray1.length);
  }

  @Test(timeout = 4000)
  public void test1078()  throws Throwable  {
      double[] doubleArray0 = new double[17];
      doubleArray0[0] = (double) 781;
      ArrayUtils.swap(doubleArray0, Integer.MAX_VALUE, Integer.MAX_VALUE, Integer.MAX_VALUE);
      assertEquals(17, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test1079()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) 0.0;
      ArrayUtils.indexesOf(doubleArray0, (-3132.52324031), 0.0);
      Float float0 = new Float(2570.9F);
      try { 
        Byte.valueOf("org.apache.commons.lang3.builder.ToStringBuilder");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"org.apache.commons.lang3.builder.ToStringBuilder\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test1080()  throws Throwable  {
      Byte[] byteArray0 = new Byte[1];
      Byte byte0 = new Byte((byte)51);
      byteArray0[0] = byte0;
      Byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0);
      assertEquals(1, byteArray1.length);
      
      boolean boolean0 = ArrayUtils.contains((short[]) null, (short)202);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1081()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 571.942196047302;
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) 571.942196047302;
      objectArray0[1] = (Object) 0.0;
      objectArray0[2] = (Object) 0.0;
      objectArray0[3] = (Object) 0.0;
      objectArray0[4] = (Object) 0.0;
      objectArray0[5] = (Object) 571.942196047302;
      String[] stringArray0 = ArrayUtils.toStringArray(objectArray0);
      int[] intArray0 = new int[4];
      intArray0[0] = 32;
      intArray0[1] = (-1);
      intArray0[2] = Integer.MAX_VALUE;
      intArray0[3] = (-2622);
      int int0 = ArrayUtils.indexOf(intArray0, 2146180940, 796);
      assertEquals((-1), int0);
      
      Double double0 = new Double((-1484.7375971182364));
      ArrayUtils.toPrimitive((Double[]) null);
      boolean boolean0 = ArrayUtils.isEmpty((Object[]) stringArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1082()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 196;
      intArray0[1] = 0;
      ArrayUtils.subarray(intArray0, 32, 0);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)98;
      ArrayUtils.indexOf(byteArray0, (byte)98);
      String[] stringArray0 = new String[0];
      ArrayUtils.nullToEmpty(stringArray0);
      ArrayUtils.indexesOf(intArray0, (int) (byte)98, (-1808));
      ArrayUtils.swap((char[]) null, 32, 196, 0);
      ArrayUtils.isEmpty((char[]) null);
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      booleanArray0[6] = true;
      booleanArray0[7] = true;
      ArrayUtils.reverse(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true, true, true, true}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test1083()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = 196;
      ArrayUtils.subarray(intArray0, 0, 0);
      ArrayUtils.indexesOf(intArray0, (int) (byte)98, (-1808));
      ArrayUtils.swap((char[]) null, 0, 196, 0);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-35);
      ArrayUtils.add(byteArray0, (byte)17);
      Byte byte0 = new Byte((byte)119);
      try { 
        Byte.valueOf("uE\"F:L>");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"uE\"F:L>\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test1084()  throws Throwable  {
      long[] longArray0 = new long[3];
      longArray0[0] = (-2880L);
      longArray0[1] = 13L;
      longArray0[2] = 995L;
      ArrayUtils.lastIndexOf((byte[]) null, (byte)50, (-2145314472));
      int[] intArray0 = new int[1];
      intArray0[0] = (int) 'F';
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((char[]) null, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 70, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1085()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[1] = 'D';
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) 'D';
      Object object0 = ArrayUtils.get(objectArray0, (-928), objectArray0[0]);
      objectArray0[1] = object0;
      objectArray0[2] = (Object) 'D';
      objectArray0[3] = (Object) 'D';
      // Undeclared exception!
      try { 
        ArrayUtils.add(objectArray0, (-1558), objectArray0[1]);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1558, Length: 4
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1086()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 2798.735380718;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (-2703.0);
      doubleArray0[3] = 1757.16516391848;
      doubleArray0[4] = 0.0;
      boolean boolean0 = ArrayUtils.isSameLength(doubleArray0, doubleArray0);
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)2;
      byteArray0[2] = (byte) (-43);
      byteArray0[3] = (byte) (-86);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte) (-1);
      byteArray0[7] = (byte)10;
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte)2, (int) (byte)0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test1087()  throws Throwable  {
      Long long0 = new Long(4996L);
      String string0 = ArrayUtils.toString((Object) long0);
      assertEquals("4996", string0);
      
      short[] shortArray0 = new short[0];
      boolean boolean0 = ArrayUtils.isEmpty(shortArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1088()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      double[] doubleArray1 = ArrayUtils.removeAllOccurences(doubleArray0, (-1.0));
      String[] stringArray0 = ArrayUtils.EMPTY_STRING_ARRAY;
      int[] intArray0 = new int[9];
      int int0 = ArrayUtils.indexOf(intArray0, 0, 0);
      assertEquals(0, int0);
      
      Double[] doubleArray2 = new Double[1];
      Double double0 = new Double(3072.8331912839103);
      doubleArray2[0] = double0;
      double[] doubleArray3 = ArrayUtils.EMPTY_DOUBLE_ARRAY;
      double[] doubleArray4 = ArrayUtils.add(doubleArray1, 0.0);
      assertEquals(2, doubleArray4.length);
  }

  @Test(timeout = 4000)
  public void test1089()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 2798.735380718;
      float[] floatArray0 = new float[1];
      floatArray0[0] = (-800.0F);
      float[] floatArray1 = ArrayUtils.add(floatArray0, (-800.0F));
      float[] floatArray2 = ArrayUtils.clone(floatArray1);
      assertNotNull(floatArray2);
      assertArrayEquals(new float[] {(-800.0F), (-800.0F)}, floatArray2, 0.01F);
  }

  @Test(timeout = 4000)
  public void test1090()  throws Throwable  {
      short[] shortArray0 = new short[20];
      shortArray0[0] = (short)0;
      ArrayUtils.nullToEmpty(shortArray0);
      long[] longArray0 = new long[4];
      longArray0[0] = (long) (short)0;
      longArray0[1] = (long) (short)0;
      ArrayUtils.addFirst(longArray0, 0L);
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      // Undeclared exception!
      try { 
        ArrayUtils.add(booleanArray0, 91, true);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 91, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1091()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      int int0 = ArrayUtils.indexOf(intArray0, 0, 0);
      assertEquals(0, int0);
      
      double[] doubleArray0 = new double[0];
      boolean boolean0 = ArrayUtils.isSorted(doubleArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1092()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      ArrayUtils.indexOf(intArray0, 0, (-627));
      ArrayUtils.toString((Object) "");
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) (-627);
      doubleArray0[1] = (double) (-627);
      doubleArray0[2] = (double) (-627);
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) 0;
      ArrayUtils.add(doubleArray0, 542.78260167218);
      ArrayUtils.lastIndexOf((byte[]) null, (byte)27, 0);
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      // Undeclared exception!
      try { 
        ArrayUtils.add(booleanArray0, (-627), false);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -627, Length: 2
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1093()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      Object object0 = new Object();
      Character character0 = new Character('Y');
      Object object1 = ArrayUtils.get(objectArray0, (-4274), (Object) character0);
      objectArray0[1] = object1;
      Double double0 = new Double((-4274));
      int int0 = ArrayUtils.indexOf(objectArray0, (Object) double0, (-4274));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test1094()  throws Throwable  {
      Byte byte0 = new Byte((byte)3);
      Byte byte1 = new Byte((byte)2);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (byte)3;
      doubleArray0[1] = (-594.132014090607);
      doubleArray0[2] = (double) (byte)59;
      ArrayUtils.subarray(doubleArray0, 275, (int) (byte)59);
      String[] stringArray0 = new String[0];
      String[] stringArray1 = ArrayUtils.clone(stringArray0);
      assertNotSame(stringArray0, stringArray1);
  }

  @Test(timeout = 4000)
  public void test1095()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-39);
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) (byte) (-39);
      ArrayUtils.addAll(floatArray0, floatArray0);
      MutableInt mutableInt0 = new MutableInt(50);
      Double[] doubleArray0 = new Double[3];
      Double double0 = new Double(1863.539985580979);
      doubleArray0[0] = double0;
      Double double1 = new Double((-39.0F));
      doubleArray0[1] = double1;
      Double double2 = Double.valueOf(1767.291036272);
      doubleArray0[2] = double2;
      ArrayUtils.removeElement(doubleArray0, (Object) doubleArray0[2]);
      // Undeclared exception!
      try { 
        ArrayUtils.add(byteArray0, 50, (byte)73);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 50, Length: 8
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1096()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      long[] longArray0 = new long[0];
      ArrayUtils.swap(longArray0, 1383, 1383);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      MutableInt mutableInt0 = new MutableInt(1383);
      Double[] doubleArray0 = new Double[0];
      ArrayUtils.removeElement(doubleArray0, (Object) "");
      // Undeclared exception!
      try { 
        ArrayUtils.add(byteArray0, (int) (byte)73, (byte)0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 73, Length: 2
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1097()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[1] = 2063.283;
      int int0 = ArrayUtils.indexOf(doubleArray0, (-1915.0), 0);
      assertEquals((-1), int0);
      
      double[] doubleArray1 = ArrayUtils.add(doubleArray0, 0, (-1397.22241));
      assertArrayEquals(new double[] {(-1397.22241), 0.0, 2063.283}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test1098()  throws Throwable  {
      Double[] doubleArray0 = new Double[5];
      Double double0 = new Double(496.0);
      doubleArray0[0] = double0;
      Double double1 = new Double(496.0);
      doubleArray0[1] = double1;
      Double double2 = new Double(2183.3);
      doubleArray0[2] = double2;
      Double double3 = new Double(0.0);
      doubleArray0[3] = double3;
      Double double4 = new Double((double) doubleArray0[2]);
      doubleArray0[4] = double4;
      MutableInt mutableInt0 = new MutableInt(0);
      Double[] doubleArray1 = ArrayUtils.removeElement(doubleArray0, (Object) mutableInt0);
      assertEquals(5, doubleArray1.length);
      assertNotNull(doubleArray1);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-122);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byte[] byteArray1 = ArrayUtils.add(byteArray0, (int) (byte)0, (byte)73);
      assertArrayEquals(new byte[] {(byte)73, (byte) (-122), (byte)0, (byte)0}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test1099()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-7);
      boolean boolean0 = ArrayUtils.isSameLength(byteArray0, byteArray0);
      assertTrue(boolean0);
      
      short[] shortArray0 = new short[3];
      shortArray0[1] = (short) (byte) (-7);
      shortArray0[2] = (short) (byte) (-7);
      BitSet bitSet0 = ArrayUtils.indexesOf(shortArray0, (short) (byte) (-7), (int) (short) (-195));
      assertEquals("{1, 2}", bitSet0.toString());
  }

  @Test(timeout = 4000)
  public void test1100()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = '~';
      short[] shortArray0 = new short[0];
      int int0 = ArrayUtils.indexOf(shortArray0, (short)2, (int) (short)2);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test1101()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      ArrayUtils.removeAllOccurences(doubleArray0, (-1.0));
      String[] stringArray0 = ArrayUtils.EMPTY_STRING_ARRAY;
      short[] shortArray0 = new short[0];
      BitSet bitSet0 = ArrayUtils.indexesOf(shortArray0, (short) (-203), (-811));
      assertEquals(64, bitSet0.size());
  }

  @Test(timeout = 4000)
  public void test1102()  throws Throwable  {
      float[] floatArray0 = new float[8];
      floatArray0[2] = (float) (byte) (-1);
      float[] floatArray1 = ArrayUtils.removeAllOccurences(floatArray0, 0.0F);
      assertEquals(1, floatArray1.length);
      assertArrayEquals(new float[] {(-1.0F)}, floatArray1, 0.01F);
  }

  @Test(timeout = 4000)
  public void test1103()  throws Throwable  {
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)2;
      shortArray0[1] = (short)64;
      ArrayUtils.removeAllOccurences(shortArray0, (short)64);
      int[] intArray0 = new int[8];
      intArray0[1] = (int) (short)2;
      intArray0[2] = (int) (short)2;
      Object[] objectArray0 = ArrayUtils.nullToEmpty((Object[]) null);
      assertEquals(0, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test1104()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 196;
      intArray0[1] = 0;
      int[] intArray1 = ArrayUtils.subarray(intArray0, 32, 0);
      assertNotNull(intArray1);
      
      short[] shortArray0 = new short[3];
      boolean boolean0 = ArrayUtils.isEmpty(shortArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1105()  throws Throwable  {
      float[] floatArray0 = new float[3];
      floatArray0[0] = (-1397.05F);
      floatArray0[1] = (-1397.05F);
      floatArray0[2] = (-1.0F);
      float[] floatArray1 = ArrayUtils.nullToEmpty(floatArray0);
      assertEquals(3, floatArray1.length);
      
      long[] longArray0 = new long[4];
      int int0 = ArrayUtils.indexOf(longArray0, 0L);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test1106()  throws Throwable  {
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)2;
      shortArray0[1] = (short)64;
      short[] shortArray1 = ArrayUtils.removeAllOccurences(shortArray0, (short)64);
      assertArrayEquals(new short[] {(short)2}, shortArray1);
      
      int[] intArray0 = new int[8];
      intArray0[0] = (int) (short)64;
      intArray0[1] = (int) (short)2;
      intArray0[2] = (int) (short)2;
      intArray0[3] = (int) (short)64;
      intArray0[4] = (int) (short)2;
      intArray0[5] = (int) (short)64;
      intArray0[6] = (int) (short)2;
      intArray0[7] = (int) (short)2;
      int[] intArray1 = ArrayUtils.subarray(intArray0, 2, (-3414));
      assertEquals(0, intArray1.length);
  }

  @Test(timeout = 4000)
  public void test1107()  throws Throwable  {
      int[] intArray0 = new int[9];
      intArray0[0] = 0;
      intArray0[1] = 50;
      intArray0[2] = 34;
      intArray0[3] = 1479;
      intArray0[4] = (-308);
      intArray0[5] = 48;
      intArray0[6] = (-4314);
      intArray0[7] = 37;
      intArray0[8] = (-2757);
      boolean boolean0 = ArrayUtils.isSorted(intArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1108()  throws Throwable  {
      long[] longArray0 = new long[8];
      longArray0[0] = 1532L;
      longArray0[1] = 0L;
      longArray0[2] = 2146L;
      longArray0[3] = 2956L;
      longArray0[4] = 0L;
      longArray0[5] = 0L;
      longArray0[6] = (-1L);
      longArray0[7] = 0L;
      int int0 = ArrayUtils.indexOf(longArray0, 3013L);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test1109()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      int[] intArray0 = new int[4];
      int[] intArray1 = ArrayUtils.removeElements(intArray0, intArray0);
      assertEquals(0, intArray1.length);
  }

  @Test(timeout = 4000)
  public void test1110()  throws Throwable  {
      short[] shortArray0 = new short[0];
      boolean boolean0 = ArrayUtils.isEmpty(shortArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1111()  throws Throwable  {
      Object object0 = new Object();
      int[] intArray0 = new int[5];
      ArrayUtils.isSorted(intArray0);
      long[] longArray0 = new long[2];
      longArray0[0] = (long) 0;
      longArray0[1] = (long) 0;
      ArrayUtils.shift(longArray0, 0);
      ArrayUtils.shift((double[]) null, 0);
  }

  @Test(timeout = 4000)
  public void test1112()  throws Throwable  {
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short)1926;
      boolean boolean0 = ArrayUtils.isEmpty(shortArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1113()  throws Throwable  {
      long[] longArray0 = new long[3];
      longArray0[0] = (-2880L);
      longArray0[1] = 13L;
      longArray0[2] = 995L;
      boolean boolean0 = ArrayUtils.contains(longArray0, 0L);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1114()  throws Throwable  {
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)560;
      shortArray0[1] = (short)0;
      shortArray0[2] = (short)1545;
      shortArray0[3] = (short) (-4027);
      ArrayUtils.nullToEmpty(shortArray0);
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
  }

  @Test(timeout = 4000)
  public void test1115()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 0;
      intArray0[1] = 127;
      long[] longArray0 = new long[3];
      longArray0[0] = (long) 0;
      longArray0[1] = (long) 0;
      ArrayUtils.removeAllOccurrences(longArray0, (long) 0);
      ArrayUtils.shift(longArray0, 127);
      ArrayUtils.shift((double[]) null, 0);
      BitSet bitSet0 = ArrayUtils.indexesOf((double[]) null, (double) 0L, (double) 0L);
      assertTrue(bitSet0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test1116()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 0;
      intArray0[1] = 127;
      boolean boolean0 = ArrayUtils.isSorted(intArray0);
      assertTrue(boolean0);
      
      long[] longArray0 = new long[3];
      longArray0[0] = (long) 0;
      longArray0[1] = (long) 0;
      longArray0[2] = (long) 0;
      long[] longArray1 = ArrayUtils.removeAllOccurrences(longArray0, (long) 0);
      assertEquals(0, longArray1.length);
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (-3684);
      shortArray0[1] = (short)0;
      shortArray0[2] = (short)1489;
      shortArray0[3] = (short)0;
      short[] shortArray1 = ArrayUtils.nullToEmpty(shortArray0);
      assertEquals(4, shortArray1.length);
  }
}
